// discord_common/js/shared/shared-constants/OAuth2Scopes.tsx
export default (function(_, argBar, __, ___, ____, argFred, argPlugh) {
    zulu = argFred;
    entity = global;
    oscar = entity.Object;
    report = oscar.defineProperty;
    tango = {};
    mike = true;
    tango['value'] = mike;
    mike = '__esModule';
    mike = report.bind(oscar)(zulu, mike, tango);
    tango = {};
    mike = 'identify';
    tango['IDENTIFY'] = mike;
    mike = 'email';
    tango['EMAIL'] = mike;
    mike = 'connections';
    tango['CONNECTIONS'] = mike;
    mike = 'guilds';
    tango['GUILDS'] = mike;
    mike = 'guilds.join';
    tango['GUILDS_JOIN'] = mike;
    mike = 'guilds.members.read';
    tango['GUILDS_MEMBERS_READ'] = mike;
    mike = 'guilds.channels.read';
    tango['GUILDS_CHANNELS_READ'] = mike;
    mike = 'gdm.join';
    tango['GDM_JOIN'] = mike;
    mike = 'bot';
    tango['BOT'] = mike;
    mike = 'rpc';
    tango['RPC'] = mike;
    mike = 'rpc.notifications.read';
    tango['RPC_NOTIFICATIONS_READ'] = mike;
    mike = 'rpc.voice.read';
    tango['RPC_VOICE_READ'] = mike;
    mike = 'rpc.voice.write';
    tango['RPC_VOICE_WRITE'] = mike;
    mike = 'rpc.video.read';
    tango['RPC_VIDEO_READ'] = mike;
    mike = 'rpc.video.write';
    tango['RPC_VIDEO_WRITE'] = mike;
    mike = 'rpc.screenshare.read';
    tango['RPC_SCREENSHARE_READ'] = mike;
    mike = 'rpc.screenshare.write';
    tango['RPC_SCREENSHARE_WRITE'] = mike;
    mike = 'rpc.activities.write';
    tango['RPC_ACTIVITIES_WRITE'] = mike;
    mike = 'webhook.incoming';
    tango['WEBHOOK_INCOMING'] = mike;
    mike = 'messages.read';
    tango['MESSAGES_READ'] = mike;
    mike = 'applications.builds.upload';
    tango['APPLICATIONS_BUILDS_UPLOAD'] = mike;
    mike = 'applications.builds.read';
    tango['APPLICATIONS_BUILDS_READ'] = mike;
    mike = 'applications.commands';
    tango['APPLICATIONS_COMMANDS'] = mike;
    mike = 'applications.commands.permissions.update';
    tango['APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE'] = mike;
    mike = 'applications.commands.update';
    tango['APPLICATIONS_COMMANDS_UPDATE'] = mike;
    mike = 'applications.store.update';
    tango['APPLICATIONS_STORE_UPDATE'] = mike;
    mike = 'applications.entitlements';
    tango['APPLICATIONS_ENTITLEMENTS'] = mike;
    mike = 'activities.read';
    tango['ACTIVITIES_READ'] = mike;
    mike = 'activities.write';
    tango['ACTIVITIES_WRITE'] = mike;
    mike = 'activities.invites.write';
    tango['ACTIVITIES_INVITES_WRITE'] = mike;
    mike = 'relationships.read';
    tango['RELATIONSHIPS_READ'] = mike;
    mike = 'relationships.write';
    tango['RELATIONSHIPS_WRITE'] = mike;
    mike = 'voice';
    tango['VOICE'] = mike;
    mike = 'dm_channels.read';
    tango['DM_CHANNELS_READ'] = mike;
    mike = 'role_connections.write';
    tango['ROLE_CONNECTIONS_WRITE'] = mike;
    mike = 'presences.read';
    tango['PRESENCES_READ'] = mike;
    mike = 'presences.write';
    tango['PRESENCES_WRITE'] = mike;
    mike = 'openid';
    tango['OPENID'] = mike;
    mike = 'dm_channels.messages.read';
    tango['DM_CHANNELS_MESSAGES_READ'] = mike;
    mike = 'dm_channels.messages.write';
    tango['DM_CHANNELS_MESSAGES_WRITE'] = mike;
    mike = 'gateway.connect';
    tango['GATEWAY_CONNECT'] = mike;
    mike = 'account.global_name.update';
    tango['ACCOUNT_GLOBAL_NAME_UPDATE'] = mike;
    mike = 'payment_sources.country_code';
    tango['PAYMENT_SOURCES_COUNTRY_CODE'] = mike;
    mike = 'sdk.social_layer';
    tango['SDK_SOCIAL_LAYER'] = mike;
    mike = 'lobbies.write';
    tango['LOBBIES'] = mike;
    mike = {};
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.builds.read', 'applications.builds.upload', 'applications.commands', 'applications.commands.permissions.update', 'applications.entitlements', 'applications.store.update', 'bot', 'connections', 'email', 'gdm.join', 'guilds', 'guilds.join', 'guilds.members.read', 'identify', 'messages.read', 'openid', 'role_connections.write', 'rpc', 'rpc.activities.write', 'rpc.notifications.read', 'rpc.screenshare.read', 'rpc.screenshare.write', 'rpc.video.read', 'rpc.video.write', 'rpc.voice.read', 'rpc.voice.write', 'webhook.incoming'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['PUBLIC'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['account.global_name.update', 'activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'guilds.channels.read', 'lobbies.write', 'payment_sources.country_code', 'presences.read', 'presences.write', 'relationships.read', 'relationships.write', 'sdk.social_layer', 'voice'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['PRIVATE'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.builds.read', 'applications.builds.upload', 'applications.commands.update', 'applications.entitlements', 'applications.store.update', 'identify'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['TEAM_USER'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['rpc.activities.write', 'rpc.voice.read', 'rpc.voice.write'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['EMBEDDED_APPS'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.commands.update'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['CLIENT_CREDENTIALS'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['role_connections.write'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['CONFIDENTIAL_REQUEST_SCOPES'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.commands', 'bot'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['BYPASS'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.commands'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['BASE_INTEGRATION'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.commands', 'bot', 'webhook.incoming'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['GUILD_INTEGRATION'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.commands'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['USER_INTEGRATION'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['bot', 'webhook.incoming'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['GUILD_INTEGRATION_EXCLUSIVE'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.commands', 'bot', 'webhook.incoming'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['ALL_INTEGRATION_SCOPES'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['applications.commands'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['PRIVATE_CHANNEL_INTEGRATION'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'identify', 'lobbies.write', 'relationships.read', 'relationships.write'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['SLAYER_INTEGRATION'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['account.global_name.update', 'activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'identify', 'lobbies.write', 'relationships.read', 'relationships.write'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['SLAYER_INTEGRATION_PROVISIONAL_ACCOUNT'] = report;
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    yankee = ['sdk.social_layer'];
    romeo = oscar;
    report = new romeo[golf](yankee, offset);
    report = report instanceof Object ? report : oscar;
    mike['UMBRELLA'] = report;
    report = {};
    options = entity.Set;
    oscar = options.prototype;
    golf = Object.create(oscar, {constructor: {value: options}});
    yankee = ['account.global_name.update', 'activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'guilds.channels.read', 'identify', 'lobbies.write', 'relationships.read', 'relationships.write'];
    romeo = golf;
    oscar = new romeo[options](yankee, offset);
    oscar = oscar instanceof Object ? oscar : golf;
    report['sdk.social_layer'] = oscar;
    mike['UMBRELLA_PERMISSIBLE_SCOPES'] = report;
    oscar = entity.Set;
    entity = oscar.prototype;
    report = Object.create(entity, {constructor: {value: oscar}});
    yankee = ['account.global_name.update', 'activities.invites.write', 'activities.read', 'activities.write', 'applications.builds.read', 'applications.builds.upload', 'applications.commands', 'applications.commands.permissions.update', 'applications.entitlements', 'applications.store.update', 'bot', 'connections', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'email', 'gateway.connect', 'gdm.join', 'guilds', 'guilds.channels.read', 'guilds.join', 'guilds.members.read', 'identify', 'lobbies.write', 'messages.read', 'openid', 'payment_sources.country_code', 'presences.read', 'presences.write', 'relationships.read', 'relationships.write', 'role_connections.write', 'rpc', 'rpc.activities.write', 'rpc.notifications.read', 'rpc.screenshare.read', 'rpc.screenshare.write', 'rpc.video.read', 'rpc.video.write', 'rpc.voice.read', 'rpc.voice.write', 'sdk.social_layer', 'voice', 'webhook.incoming'];
    romeo = report;
    entity = new romeo[oscar](yankee, offset);
    entity = entity instanceof Object ? entity : report;
    mike['ALL'] = entity;
    report = argPlugh;
    entity = 0;
    oscar = report[entity];
    report = argBar;
    entity = undefined;
    golf = report.bind(entity)(oscar);
    oscar = golf.fileFinishedImporting;
    report = '../discord_common/js/shared/shared-constants/OAuth2Scopes.tsx';
    report = oscar.bind(golf)(report);
    zulu['OAuth2Scopes'] = tango;
    zulu['OAuth2ScopesSets'] = mike;
    return entity;
})();