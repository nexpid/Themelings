// discord_common/js/shared/shared-constants/OAuth2Scopes.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    tangon = {};
    michal = true;
    tangon['value'] = michal;
    michal = '__esModule';
    michal = report.bind(oscard)(zuuluu, michal, tangon);
    tangon = {};
    michal = 'identify';
    tangon['IDENTIFY'] = michal;
    michal = 'email';
    tangon['EMAIL'] = michal;
    michal = 'connections';
    tangon['CONNECTIONS'] = michal;
    michal = 'guilds';
    tangon['GUILDS'] = michal;
    michal = 'guilds.join';
    tangon['GUILDS_JOIN'] = michal;
    michal = 'guilds.members.read';
    tangon['GUILDS_MEMBERS_READ'] = michal;
    michal = 'guilds.channels.read';
    tangon['GUILDS_CHANNELS_READ'] = michal;
    michal = 'gdm.join';
    tangon['GDM_JOIN'] = michal;
    michal = 'bot';
    tangon['BOT'] = michal;
    michal = 'rpc';
    tangon['RPC'] = michal;
    michal = 'rpc.notifications.read';
    tangon['RPC_NOTIFICATIONS_READ'] = michal;
    michal = 'rpc.voice.read';
    tangon['RPC_VOICE_READ'] = michal;
    michal = 'rpc.voice.write';
    tangon['RPC_VOICE_WRITE'] = michal;
    michal = 'rpc.video.read';
    tangon['RPC_VIDEO_READ'] = michal;
    michal = 'rpc.video.write';
    tangon['RPC_VIDEO_WRITE'] = michal;
    michal = 'rpc.screenshare.read';
    tangon['RPC_SCREENSHARE_READ'] = michal;
    michal = 'rpc.screenshare.write';
    tangon['RPC_SCREENSHARE_WRITE'] = michal;
    michal = 'rpc.activities.write';
    tangon['RPC_ACTIVITIES_WRITE'] = michal;
    michal = 'webhook.incoming';
    tangon['WEBHOOK_INCOMING'] = michal;
    michal = 'messages.read';
    tangon['MESSAGES_READ'] = michal;
    michal = 'applications.builds.upload';
    tangon['APPLICATIONS_BUILDS_UPLOAD'] = michal;
    michal = 'applications.builds.read';
    tangon['APPLICATIONS_BUILDS_READ'] = michal;
    michal = 'applications.commands';
    tangon['APPLICATIONS_COMMANDS'] = michal;
    michal = 'applications.commands.permissions.update';
    tangon['APPLICATIONS_COMMANDS_PERMISSIONS_UPDATE'] = michal;
    michal = 'applications.commands.update';
    tangon['APPLICATIONS_COMMANDS_UPDATE'] = michal;
    michal = 'applications.store.update';
    tangon['APPLICATIONS_STORE_UPDATE'] = michal;
    michal = 'applications.entitlements';
    tangon['APPLICATIONS_ENTITLEMENTS'] = michal;
    michal = 'activities.read';
    tangon['ACTIVITIES_READ'] = michal;
    michal = 'activities.write';
    tangon['ACTIVITIES_WRITE'] = michal;
    michal = 'activities.invites.write';
    tangon['ACTIVITIES_INVITES_WRITE'] = michal;
    michal = 'relationships.read';
    tangon['RELATIONSHIPS_READ'] = michal;
    michal = 'relationships.write';
    tangon['RELATIONSHIPS_WRITE'] = michal;
    michal = 'voice';
    tangon['VOICE'] = michal;
    michal = 'dm_channels.read';
    tangon['DM_CHANNELS_READ'] = michal;
    michal = 'role_connections.write';
    tangon['ROLE_CONNECTIONS_WRITE'] = michal;
    michal = 'presences.read';
    tangon['PRESENCES_READ'] = michal;
    michal = 'presences.write';
    tangon['PRESENCES_WRITE'] = michal;
    michal = 'openid';
    tangon['OPENID'] = michal;
    michal = 'dm_channels.messages.read';
    tangon['DM_CHANNELS_MESSAGES_READ'] = michal;
    michal = 'dm_channels.messages.write';
    tangon['DM_CHANNELS_MESSAGES_WRITE'] = michal;
    michal = 'gateway.connect';
    tangon['GATEWAY_CONNECT'] = michal;
    michal = 'account.global_name.update';
    tangon['ACCOUNT_GLOBAL_NAME_UPDATE'] = michal;
    michal = 'payment_sources.country_code';
    tangon['PAYMENT_SOURCES_COUNTRY_CODE'] = michal;
    michal = 'sdk.social_layer_presence';
    tangon['SDK_SOCIAL_LAYER_PRESENCE'] = michal;
    michal = 'sdk.social_layer';
    tangon['SDK_SOCIAL_LAYER'] = michal;
    michal = 'lobbies.write';
    tangon['LOBBIES_WRITE'] = michal;
    michal = {};
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.builds.read', 'applications.builds.upload', 'applications.commands', 'applications.commands.permissions.update', 'applications.entitlements', 'applications.store.update', 'bot', 'connections', 'email', 'gdm.join', 'guilds', 'guilds.join', 'guilds.members.read', 'identify', 'messages.read', 'openid', 'role_connections.write', 'rpc', 'rpc.activities.write', 'rpc.notifications.read', 'rpc.screenshare.read', 'rpc.screenshare.write', 'rpc.video.read', 'rpc.video.write', 'rpc.voice.read', 'rpc.voice.write', 'webhook.incoming'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['PUBLIC'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['account.global_name.update', 'activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'guilds.channels.read', 'lobbies.write', 'payment_sources.country_code', 'presences.read', 'presences.write', 'relationships.read', 'relationships.write', 'sdk.social_layer', 'sdk.social_layer_presence', 'voice'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['PRIVATE'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.builds.read', 'applications.builds.upload', 'applications.commands.update', 'applications.entitlements', 'applications.store.update', 'identify'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['TEAM_USER'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['rpc.activities.write', 'rpc.voice.read', 'rpc.voice.write'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['EMBEDDED_APPS'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.commands.update'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['CLIENT_CREDENTIALS'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['role_connections.write'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['CONFIDENTIAL_REQUEST_SCOPES'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.commands', 'bot'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['BYPASS'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.commands'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['BASE_INTEGRATION'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.commands', 'bot', 'webhook.incoming'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['GUILD_INTEGRATION'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.commands'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['USER_INTEGRATION'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['bot', 'webhook.incoming'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['GUILD_INTEGRATION_EXCLUSIVE'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.commands', 'bot', 'webhook.incoming'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['ALL_INTEGRATION_SCOPES'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['applications.commands'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['PRIVATE_CHANNEL_INTEGRATION'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'identify', 'lobbies.write', 'relationships.read', 'relationships.write'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['DEFAULT_SLAYER_INTEGRATION'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['account.global_name.update', 'openid', 'sdk.social_layer'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['SLAYER_INTEGRATION_PROVISIONAL_ACCOUNT'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['sdk.social_layer', 'sdk.social_layer_presence'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['UMBRELLA'] = report;
    report = {};
    option = entity.Set;
    oscard = option.prototype;
    golfie = Object.create(oscard, {constructor: {value: option}});
    yankee = ['activities.invites.write', 'activities.read', 'activities.write', 'gateway.connect', 'identify', 'relationships.read', 'relationships.write'];
    romeon = golfie;
    oscard = new romeon[option](yankee, offset);
    oscard = oscard instanceof Object ? oscard : golfie;
    report['sdk.social_layer_presence'] = oscard;
    option = entity.Set;
    oscard = option.prototype;
    golfie = Object.create(oscard, {constructor: {value: option}});
    yankee = ['activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'guilds.channels.read', 'identify', 'lobbies.write', 'relationships.read', 'relationships.write'];
    romeon = golfie;
    oscard = new romeon[option](yankee, offset);
    oscard = oscard instanceof Object ? oscard : golfie;
    report['sdk.social_layer'] = oscard;
    michal['UMBRELLA_PERMISSIBLE_SCOPES'] = report;
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    yankee = ['activities.invites.write', 'activities.read', 'activities.write', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'gateway.connect', 'identify', 'lobbies.write', 'relationships.read', 'relationships.write'];
    romeon = oscard;
    report = new romeon[golfie](yankee, offset);
    report = report instanceof Object ? report : oscard;
    michal['SDK_SOCIAL_LAYER_UMBRELLA_PERMISSIBLE_SCOPES'] = report;
    oscard = entity.Set;
    entity = oscard.prototype;
    report = Object.create(entity, {constructor: {value: oscard}});
    yankee = ['account.global_name.update', 'activities.invites.write', 'activities.read', 'activities.write', 'applications.builds.read', 'applications.builds.upload', 'applications.commands', 'applications.commands.permissions.update', 'applications.entitlements', 'applications.store.update', 'bot', 'connections', 'dm_channels.messages.read', 'dm_channels.messages.write', 'dm_channels.read', 'email', 'gateway.connect', 'gdm.join', 'guilds', 'guilds.channels.read', 'guilds.join', 'guilds.members.read', 'identify', 'lobbies.write', 'messages.read', 'openid', 'payment_sources.country_code', 'presences.read', 'presences.write', 'relationships.read', 'relationships.write', 'role_connections.write', 'rpc', 'rpc.activities.write', 'rpc.notifications.read', 'rpc.screenshare.read', 'rpc.screenshare.write', 'rpc.video.read', 'rpc.video.write', 'rpc.voice.read', 'rpc.voice.write', 'sdk.social_layer', 'sdk.social_layer_presence', 'voice', 'webhook.incoming'];
    romeon = report;
    entity = new romeon[oscard](yankee, offset);
    entity = entity instanceof Object ? entity : report;
    michal['ALL'] = entity;
    report = argPlu;
    entity = 0;
    oscard = report[entity];
    report = argBar;
    entity = undefined;
    golfie = report.bind(entity)(oscard);
    oscard = golfie.fileFinishedImporting;
    report = '../discord_common/js/shared/shared-constants/OAuth2Scopes.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['OAuth2Scopes'] = tangon;
    zuuluu['OAuth2ScopesSets'] = michal;
    return entity;
})();