// discord_common/js/shared/shared-constants/MetricEvents.tsx
export default (function(_, argBar, __, ___, ____, argFred, argPlugh) {
    zulu = argFred;
    entity = global;
    oscar = entity.Object;
    report = oscar.defineProperty;
    tango = {};
    mike = true;
    tango['value'] = mike;
    mike = '__esModule';
    mike = report.bind(oscar)(zulu, mike, tango);
    tango = {};
    mike = 'app_crashed';
    tango['APP_CRASHED'] = mike;
    mike = 'socket_crashed';
    tango['SOCKET_CRASHED'] = mike;
    mike = 'message_request_view';
    tango['MESSAGE_REQUEST_VIEW'] = mike;
    mike = 'spam_message_request_view';
    tango['SPAM_MESSAGE_REQUEST_VIEW'] = mike;
    mike = 'spam_message_request_error_view';
    tango['SPAM_MESSAGE_REQUEST_ERROR_VIEW'] = mike;
    mike = 'family_center_view';
    tango['FAMILY_CENTER_VIEW'] = mike;
    mike = 'safety_hub_view';
    tango['SAFETY_HUB_VIEW'] = mike;
    mike = 'appeal_ingestion_view';
    tango['APPEAL_INGESTION_VIEW'] = mike;
    mike = 'message_request_count_drift';
    tango['MESSAGE_REQUEST_COUNT_DRIFT'] = mike;
    mike = 'forum_channel_grid_auto_enabled';
    tango['FORUM_CHANNEL_GRID_AUTO_ENABLED'] = mike;
    mike = 'remix_font_loading_error';
    tango['REMIX_FONT_LOADING_ERROR'] = mike;
    mike = 'afk_not_idle';
    tango['AFK_NOT_IDLE'] = mike;
    mike = 'captcha_event';
    tango['CAPTCHA_EVENT'] = mike;
    mike = 'safety_warning_view';
    tango['SAFETY_WARNING_VIEW'] = mike;
    mike = 'safety_warning_modal_view';
    tango['SAFETY_WARNING_MODAL_VIEW'] = mike;
    mike = 'explicit_media_scan_client_timed_out';
    tango['EXPLICIT_MEDIA_SCAN_CLIENT_TIMED_OUT'] = mike;
    mike = 'explicit_media_scan_client_timing';
    tango['EXPLICIT_MEDIA_SCAN_CLIENT_TIMING'] = mike;
    mike = 'explicit_media_sender_fp_button_view';
    tango['EXPLICIT_MEDIA_SENDER_FP_BUTTON_VIEW'] = mike;
    mike = 'explicit_media_pending_message_loaded';
    tango['EXPLICIT_MEDIA_PENDING_MESSAGE_LOADED'] = mike;
    mike = 'explicit_media_pending_message_loaded_v2';
    tango['EXPLICIT_MEDIA_PENDING_MESSAGE_LOADED_V2'] = mike;
    mike = 'explicit_media_scan_client_timed_out_distribution';
    tango['EXPLICIT_MEDIA_SCAN_CLIENT_TIMED_OUT_DISTRIBUTION'] = mike;
    mike = 'explicit_media_scan_client_timeout_create';
    tango['EXPLICIT_MEDIA_SCAN_CLIENT_TIMEOUT_CREATE'] = mike;
    mike = 'rtc_connection_desync_store_unknown_user';
    tango['RTC_CONNECTION_DESYNC_STORE_UNKNOWN_USER'] = mike;
    mike = 'rtc_connection_duplicate_user';
    tango['RTC_CONNECTION_DUPLICATE_USER'] = mike;
    mike = 'quest_content_impression';
    tango['QUEST_CONTENT_IMPRESSION'] = mike;
    mike = 'OtaCheckAttempt';
    tango['OTA_CHECK_ATTEMPT'] = mike;
    mike = 'OtaAssetDownloadAttempt';
    tango['OTA_ASSET_DOWNLOAD_ATTEMPT'] = mike;
    mike = 'ota_update_check';
    tango['OTA_UPDATE_CHECK'] = mike;
    mike = 'ota_asset_download';
    tango['OTA_ASSET_DOWNLOAD'] = mike;
    mike = 'debug_ota_200_timeout';
    tango['DEBUG_OTA_200_TIMEOUT'] = mike;
    mike = 'image_load_error';
    tango['IMAGE_LOAD_ERROR'] = mike;
    mike = 'dm_settings_upsell_view';
    tango['DM_SETTINGS_UPSELL_VIEW'] = mike;
    mike = 'captcha_serve_volume_distribution';
    tango['CAPTCHA_SERVE_VOLUME_DISTRIBUTION'] = mike;
    mike = {};
    golf = entity.Set;
    report = golf.prototype;
    oscar = Object.create(report, {constructor: {value: golf}});
    offset = ['OtaAssetDownloadAttempt', 'OtaCheckAttempt', 'afk_not_idle', 'app_crashed', 'appeal_ingestion_view', 'captcha_event', 'captcha_serve_volume_distribution', 'debug_ota_200_timeout', 'dm_settings_upsell_view', 'explicit_media_pending_message_loaded', 'explicit_media_pending_message_loaded_v2', 'explicit_media_scan_client_timed_out', 'explicit_media_scan_client_timed_out_distribution', 'explicit_media_scan_client_timeout_create', 'explicit_media_scan_client_timing', 'explicit_media_sender_fp_button_view', 'family_center_view', 'forum_channel_grid_auto_enabled', 'image_load_error', 'message_request_count_drift', 'message_request_view', 'ota_asset_download', 'ota_update_check', 'quest_content_impression', 'remix_font_loading_error', 'safety_hub_view', 'safety_warning_modal_view', 'safety_warning_view', 'socket_crashed', 'spam_message_request_error_view', 'spam_message_request_view'];
    yankee = oscar;
    report = new yankee[golf](offset, verify);
    report = report instanceof Object ? report : oscar;
    mike['ALL'] = report;
    oscar = entity.Set;
    entity = oscar.prototype;
    report = Object.create(entity, {constructor: {value: oscar}});
    offset = ['debug_ota_200_timeout', 'rtc_connection_desync_store_unknown_user', 'rtc_connection_duplicate_user'];
    yankee = report;
    entity = new yankee[oscar](offset, verify);
    entity = entity instanceof Object ? entity : report;
    mike['DEPRECATED'] = entity;
    report = argPlugh;
    entity = 0;
    oscar = report[entity];
    report = argBar;
    entity = undefined;
    golf = report.bind(entity)(oscar);
    oscar = golf.fileFinishedImporting;
    report = '../discord_common/js/shared/shared-constants/MetricEvents.tsx';
    report = oscar.bind(golf)(report);
    zulu['MetricEvents'] = tango;
    zulu['MetricEventsSets'] = mike;
    return entity;
})();