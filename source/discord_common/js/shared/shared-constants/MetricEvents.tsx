// discord_common/js/shared/shared-constants/MetricEvents.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    tangon = {};
    michal = true;
    tangon['value'] = michal;
    michal = '__esModule';
    michal = report.bind(oscard)(zuuluu, michal, tangon);
    tangon = {};
    michal = 'app_crashed';
    tangon['APP_CRASHED'] = michal;
    michal = 'socket_crashed';
    tangon['SOCKET_CRASHED'] = michal;
    michal = 'message_request_view';
    tangon['MESSAGE_REQUEST_VIEW'] = michal;
    michal = 'spam_message_request_view';
    tangon['SPAM_MESSAGE_REQUEST_VIEW'] = michal;
    michal = 'spam_message_request_error_view';
    tangon['SPAM_MESSAGE_REQUEST_ERROR_VIEW'] = michal;
    michal = 'family_center_view';
    tangon['FAMILY_CENTER_VIEW'] = michal;
    michal = 'safety_hub_view';
    tangon['SAFETY_HUB_VIEW'] = michal;
    michal = 'appeal_ingestion_view';
    tangon['APPEAL_INGESTION_VIEW'] = michal;
    michal = 'message_request_count_drift';
    tangon['MESSAGE_REQUEST_COUNT_DRIFT'] = michal;
    michal = 'forum_channel_grid_auto_enabled';
    tangon['FORUM_CHANNEL_GRID_AUTO_ENABLED'] = michal;
    michal = 'remix_font_loading_error';
    tangon['REMIX_FONT_LOADING_ERROR'] = michal;
    michal = 'afk_not_idle';
    tangon['AFK_NOT_IDLE'] = michal;
    michal = 'captcha_event';
    tangon['CAPTCHA_EVENT'] = michal;
    michal = 'safety_warning_view';
    tangon['SAFETY_WARNING_VIEW'] = michal;
    michal = 'safety_warning_modal_view';
    tangon['SAFETY_WARNING_MODAL_VIEW'] = michal;
    michal = 'explicit_media_scan_client_timed_out';
    tangon['EXPLICIT_MEDIA_SCAN_CLIENT_TIMED_OUT'] = michal;
    michal = 'explicit_media_scan_client_timing';
    tangon['EXPLICIT_MEDIA_SCAN_CLIENT_TIMING'] = michal;
    michal = 'explicit_media_sender_fp_button_view';
    tangon['EXPLICIT_MEDIA_SENDER_FP_BUTTON_VIEW'] = michal;
    michal = 'explicit_media_pending_message_loaded';
    tangon['EXPLICIT_MEDIA_PENDING_MESSAGE_LOADED'] = michal;
    michal = 'explicit_media_pending_message_loaded_v2';
    tangon['EXPLICIT_MEDIA_PENDING_MESSAGE_LOADED_V2'] = michal;
    michal = 'explicit_media_scan_client_timed_out_distribution';
    tangon['EXPLICIT_MEDIA_SCAN_CLIENT_TIMED_OUT_DISTRIBUTION'] = michal;
    michal = 'explicit_media_scan_client_timeout_create';
    tangon['EXPLICIT_MEDIA_SCAN_CLIENT_TIMEOUT_CREATE'] = michal;
    michal = 'rtc_connection_desync_store_unknown_user';
    tangon['RTC_CONNECTION_DESYNC_STORE_UNKNOWN_USER'] = michal;
    michal = 'rtc_connection_duplicate_user';
    tangon['RTC_CONNECTION_DUPLICATE_USER'] = michal;
    michal = 'quest_content_impression';
    tangon['QUEST_CONTENT_IMPRESSION'] = michal;
    michal = 'OtaCheckAttempt';
    tangon['OTA_CHECK_ATTEMPT'] = michal;
    michal = 'OtaAssetDownloadAttempt';
    tangon['OTA_ASSET_DOWNLOAD_ATTEMPT'] = michal;
    michal = 'ota_update_check';
    tangon['OTA_UPDATE_CHECK'] = michal;
    michal = 'ota_asset_download';
    tangon['OTA_ASSET_DOWNLOAD'] = michal;
    michal = 'debug_ota_200_timeout';
    tangon['DEBUG_OTA_200_TIMEOUT'] = michal;
    michal = 'image_load_error';
    tangon['IMAGE_LOAD_ERROR'] = michal;
    michal = 'dm_settings_upsell_view';
    tangon['DM_SETTINGS_UPSELL_VIEW'] = michal;
    michal = 'captcha_serve_volume_distribution';
    tangon['CAPTCHA_SERVE_VOLUME_DISTRIBUTION'] = michal;
    michal = 'in_app_report_navigate_to_nonexistent_node';
    tangon['IN_APP_REPORT_NAVIGATE_TO_NONEXISTENT_NODE'] = michal;
    michal = {};
    golfie = entity.Set;
    report = golfie.prototype;
    oscard = Object.create(report, {constructor: {value: golfie}});
    offset = ['OtaAssetDownloadAttempt', 'OtaCheckAttempt', 'afk_not_idle', 'app_crashed', 'appeal_ingestion_view', 'captcha_event', 'captcha_serve_volume_distribution', 'debug_ota_200_timeout', 'dm_settings_upsell_view', 'explicit_media_pending_message_loaded', 'explicit_media_pending_message_loaded_v2', 'explicit_media_scan_client_timed_out', 'explicit_media_scan_client_timed_out_distribution', 'explicit_media_scan_client_timeout_create', 'explicit_media_scan_client_timing', 'explicit_media_sender_fp_button_view', 'family_center_view', 'forum_channel_grid_auto_enabled', 'image_load_error', 'in_app_report_navigate_to_nonexistent_node', 'message_request_count_drift', 'message_request_view', 'ota_asset_download', 'ota_update_check', 'quest_content_impression', 'remix_font_loading_error', 'safety_hub_view', 'safety_warning_modal_view', 'safety_warning_view', 'socket_crashed', 'spam_message_request_error_view', 'spam_message_request_view'];
    yankee = oscard;
    report = new yankee[golfie](offset, verify);
    report = report instanceof Object ? report : oscard;
    michal['ALL'] = report;
    oscard = entity.Set;
    entity = oscard.prototype;
    report = Object.create(entity, {constructor: {value: oscard}});
    offset = ['debug_ota_200_timeout', 'rtc_connection_desync_store_unknown_user', 'rtc_connection_duplicate_user'];
    yankee = report;
    entity = new yankee[oscard](offset, verify);
    entity = entity instanceof Object ? entity : report;
    michal['DEPRECATED'] = entity;
    report = argPlu;
    entity = 0;
    oscard = report[entity];
    report = argBar;
    entity = undefined;
    golfie = report.bind(entity)(oscard);
    oscard = golfie.fileFinishedImporting;
    report = '../discord_common/js/shared/shared-constants/MetricEvents.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['MetricEvents'] = tangon;
    zuuluu['MetricEventsSets'] = michal;
    return entity;
})();