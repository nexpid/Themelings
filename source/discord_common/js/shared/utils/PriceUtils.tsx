// discord_common/js/shared/utils/PriceUtils.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    golfie = argBar;
    report = argBaz;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    entity = ['convertToMajorUnits'];
    var _closure1_slot2 = entity;
    entity = global;
    verify = entity.Object;
    oscard = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = oscard.bind(verify)(zuuluu, entity, tangon);
    verify = 0;
    tangon = option[verify];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = option[tangon];
    tangon = golfie.bind(entity)(tangon);
    tangon = tangon.CurrencyCodes;
    var _closure1_slot4 = tangon;
    report = {};
    oscard = tangon.AED;
    yankee = 2;
    report[oscard] = yankee;
    oscard = tangon.AFN;
    report[oscard] = yankee;
    oscard = tangon.ALL;
    report[oscard] = yankee;
    oscard = tangon.AMD;
    report[oscard] = yankee;
    oscard = tangon.ANG;
    report[oscard] = yankee;
    oscard = tangon.AOA;
    report[oscard] = yankee;
    oscard = tangon.ARS;
    report[oscard] = yankee;
    oscard = tangon.AUD;
    report[oscard] = yankee;
    oscard = tangon.AWG;
    report[oscard] = yankee;
    oscard = tangon.AZN;
    report[oscard] = yankee;
    oscard = tangon.BAM;
    report[oscard] = yankee;
    oscard = tangon.BBD;
    report[oscard] = yankee;
    oscard = tangon.BDT;
    report[oscard] = yankee;
    oscard = tangon.BGN;
    report[oscard] = yankee;
    offset = tangon.BHD;
    oscard = 3;
    report[offset] = oscard;
    offset = tangon.BIF;
    report[offset] = verify;
    offset = tangon.BMD;
    report[offset] = yankee;
    offset = tangon.BND;
    report[offset] = yankee;
    offset = tangon.BOB;
    report[offset] = yankee;
    offset = tangon.BOV;
    report[offset] = yankee;
    offset = tangon.BRL;
    report[offset] = yankee;
    offset = tangon.BSD;
    report[offset] = yankee;
    offset = tangon.BTN;
    report[offset] = yankee;
    offset = tangon.BWP;
    report[offset] = yankee;
    offset = tangon.BYR;
    report[offset] = verify;
    offset = tangon.BYN;
    report[offset] = yankee;
    offset = tangon.BZD;
    report[offset] = yankee;
    offset = tangon.CAD;
    report[offset] = yankee;
    offset = tangon.CDF;
    report[offset] = yankee;
    offset = tangon.CHE;
    report[offset] = yankee;
    offset = tangon.CHF;
    report[offset] = yankee;
    offset = tangon.CHW;
    report[offset] = yankee;
    offset = tangon.CLF;
    report[offset] = verify;
    offset = tangon.CLP;
    report[offset] = verify;
    offset = tangon.CNY;
    report[offset] = yankee;
    offset = tangon.COP;
    report[offset] = yankee;
    offset = tangon.COU;
    report[offset] = yankee;
    offset = tangon.CRC;
    report[offset] = yankee;
    offset = tangon.CUC;
    report[offset] = yankee;
    offset = tangon.CUP;
    report[offset] = yankee;
    offset = tangon.CVE;
    report[offset] = yankee;
    offset = tangon.CZK;
    report[offset] = yankee;
    offset = tangon.DJF;
    report[offset] = verify;
    offset = tangon.DKK;
    report[offset] = yankee;
    offset = tangon.DOP;
    report[offset] = yankee;
    offset = tangon.DZD;
    report[offset] = yankee;
    offset = tangon.EGP;
    report[offset] = yankee;
    offset = tangon.ERN;
    report[offset] = yankee;
    offset = tangon.ETB;
    report[offset] = yankee;
    offset = tangon.EUR;
    report[offset] = yankee;
    offset = tangon.FJD;
    report[offset] = yankee;
    offset = tangon.FKP;
    report[offset] = yankee;
    offset = tangon.GBP;
    report[offset] = yankee;
    offset = tangon.GEL;
    report[offset] = yankee;
    offset = tangon.GHS;
    report[offset] = yankee;
    offset = tangon.GIP;
    report[offset] = yankee;
    offset = tangon.GMD;
    report[offset] = yankee;
    offset = tangon.GNF;
    report[offset] = verify;
    offset = tangon.GTQ;
    report[offset] = yankee;
    offset = tangon.GYD;
    report[offset] = yankee;
    offset = tangon.HKD;
    report[offset] = yankee;
    offset = tangon.HNL;
    report[offset] = yankee;
    offset = tangon.HRK;
    report[offset] = yankee;
    offset = tangon.HTG;
    report[offset] = yankee;
    offset = tangon.HUF;
    report[offset] = yankee;
    offset = tangon.IDR;
    report[offset] = yankee;
    offset = tangon.ILS;
    report[offset] = yankee;
    offset = tangon.INR;
    report[offset] = yankee;
    offset = tangon.IQD;
    report[offset] = oscard;
    offset = tangon.IRR;
    report[offset] = yankee;
    offset = tangon.ISK;
    report[offset] = verify;
    offset = tangon.JMD;
    report[offset] = yankee;
    offset = tangon.JOD;
    report[offset] = oscard;
    offset = tangon.JPY;
    report[offset] = verify;
    offset = tangon.KES;
    report[offset] = yankee;
    offset = tangon.KGS;
    report[offset] = yankee;
    offset = tangon.KHR;
    report[offset] = yankee;
    offset = tangon.KMF;
    report[offset] = verify;
    offset = tangon.KPW;
    report[offset] = yankee;
    offset = tangon.KRW;
    report[offset] = verify;
    offset = tangon.KWD;
    report[offset] = oscard;
    offset = tangon.KYD;
    report[offset] = yankee;
    offset = tangon.KZT;
    report[offset] = yankee;
    offset = tangon.LAK;
    report[offset] = yankee;
    offset = tangon.LBP;
    report[offset] = yankee;
    offset = tangon.LKR;
    report[offset] = yankee;
    offset = tangon.LRD;
    report[offset] = yankee;
    offset = tangon.LSL;
    report[offset] = yankee;
    offset = tangon.LTL;
    report[offset] = yankee;
    offset = tangon.LVL;
    report[offset] = yankee;
    offset = tangon.LYD;
    report[offset] = oscard;
    offset = tangon.MAD;
    report[offset] = yankee;
    offset = tangon.MDL;
    report[offset] = yankee;
    offset = tangon.MGA;
    report[offset] = yankee;
    offset = tangon.MKD;
    report[offset] = yankee;
    offset = tangon.MMK;
    report[offset] = yankee;
    offset = tangon.MNT;
    report[offset] = yankee;
    offset = tangon.MOP;
    report[offset] = yankee;
    offset = tangon.MRO;
    report[offset] = yankee;
    offset = tangon.MUR;
    report[offset] = yankee;
    offset = tangon.MVR;
    report[offset] = yankee;
    offset = tangon.MWK;
    report[offset] = yankee;
    offset = tangon.MXN;
    report[offset] = yankee;
    offset = tangon.MXV;
    report[offset] = yankee;
    offset = tangon.MYR;
    report[offset] = yankee;
    offset = tangon.MZN;
    report[offset] = yankee;
    offset = tangon.NAD;
    report[offset] = yankee;
    offset = tangon.NGN;
    report[offset] = yankee;
    offset = tangon.NIO;
    report[offset] = yankee;
    offset = tangon.NOK;
    report[offset] = yankee;
    offset = tangon.NPR;
    report[offset] = yankee;
    offset = tangon.NZD;
    report[offset] = yankee;
    offset = tangon.OMR;
    report[offset] = oscard;
    offset = tangon.PAB;
    report[offset] = yankee;
    offset = tangon.PEN;
    report[offset] = yankee;
    offset = tangon.PGK;
    report[offset] = yankee;
    offset = tangon.PHP;
    report[offset] = yankee;
    offset = tangon.PKR;
    report[offset] = yankee;
    offset = tangon.PLN;
    report[offset] = yankee;
    offset = tangon.PYG;
    report[offset] = verify;
    offset = tangon.QAR;
    report[offset] = yankee;
    offset = tangon.RON;
    report[offset] = yankee;
    offset = tangon.RSD;
    report[offset] = yankee;
    offset = tangon.RUB;
    report[offset] = yankee;
    offset = tangon.RWF;
    report[offset] = verify;
    offset = tangon.SAR;
    report[offset] = yankee;
    offset = tangon.SBD;
    report[offset] = yankee;
    offset = tangon.SCR;
    report[offset] = yankee;
    offset = tangon.SDG;
    report[offset] = yankee;
    offset = tangon.SEK;
    report[offset] = yankee;
    offset = tangon.SGD;
    report[offset] = yankee;
    offset = tangon.SHP;
    report[offset] = yankee;
    offset = tangon.SLL;
    report[offset] = yankee;
    offset = tangon.SOS;
    report[offset] = yankee;
    offset = tangon.SRD;
    report[offset] = yankee;
    offset = tangon.SSP;
    report[offset] = yankee;
    offset = tangon.STD;
    report[offset] = yankee;
    offset = tangon.SVC;
    report[offset] = yankee;
    offset = tangon.SYP;
    report[offset] = yankee;
    offset = tangon.SZL;
    report[offset] = yankee;
    offset = tangon.THB;
    report[offset] = yankee;
    offset = tangon.TJS;
    report[offset] = yankee;
    offset = tangon.TMT;
    report[offset] = yankee;
    offset = tangon.TND;
    report[offset] = oscard;
    offset = tangon.TOP;
    report[offset] = yankee;
    offset = tangon.TRY;
    report[offset] = yankee;
    offset = tangon.TTD;
    report[offset] = yankee;
    offset = tangon.TWD;
    report[offset] = yankee;
    offset = tangon.TZS;
    report[offset] = yankee;
    offset = tangon.UAH;
    report[offset] = yankee;
    offset = tangon.UGX;
    report[offset] = verify;
    offset = tangon.USD;
    report[offset] = yankee;
    offset = tangon.USN;
    report[offset] = yankee;
    offset = tangon.USS;
    report[offset] = yankee;
    offset = tangon.UYI;
    report[offset] = verify;
    offset = tangon.UYU;
    report[offset] = yankee;
    offset = tangon.UZS;
    report[offset] = yankee;
    offset = tangon.VEF;
    report[offset] = yankee;
    offset = tangon.VND;
    report[offset] = verify;
    offset = tangon.VUV;
    report[offset] = verify;
    offset = tangon.WST;
    report[offset] = yankee;
    offset = tangon.XAF;
    report[offset] = verify;
    offset = tangon.XAG;
    report[offset] = verify;
    offset = tangon.XAU;
    report[offset] = verify;
    offset = tangon.XBA;
    report[offset] = verify;
    offset = tangon.XBB;
    report[offset] = verify;
    offset = tangon.XBC;
    report[offset] = verify;
    offset = tangon.XBD;
    report[offset] = verify;
    offset = tangon.XCD;
    report[offset] = yankee;
    offset = tangon.XDR;
    report[offset] = verify;
    offset = tangon.XFU;
    report[offset] = verify;
    offset = tangon.XOF;
    report[offset] = verify;
    offset = tangon.XPD;
    report[offset] = verify;
    offset = tangon.XPF;
    report[offset] = verify;
    offset = tangon.XPT;
    report[offset] = verify;
    offset = tangon.XSU;
    report[offset] = verify;
    offset = tangon.XTS;
    report[offset] = verify;
    offset = tangon.XUA;
    report[offset] = verify;
    offset = tangon.YER;
    report[offset] = yankee;
    offset = tangon.ZAR;
    report[offset] = yankee;
    offset = tangon.ZMW;
    report[offset] = yankee;
    offset = tangon.ZWL;
    report[offset] = yankee;
    tangon = tangon.DISCORD_ORB;
    report[tangon] = verify;
    var _closure1_slot5 = report;
    tangon = function(argFoo, argBar) { // Original name: convertToMajorCurrencyUnits
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = argBar;
            michal = _closure1_slot5;
            report = michal[tangon];
            michal = null;
            if(!(michal != report)) { _fun00002_ip = 98; continue _fun00001 }
 20:
            zuuluu = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 2;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            entity = zuuluu.prototype;
            michal = Object.create(entity, {constructor: {value: zuuluu}});
            golfie = argFoo;
            option = michal;
            entity = new option[zuuluu](golfie, oscard);
            zuuluu = entity instanceof Object ? entity : michal;
            michal = zuuluu.dividedBy;
            golfie = 10;
            oscard = report;
            entity = exponentiationOperator(golfie, oscard);
            michal = michal.bind(zuuluu)(entity);
            entity = michal.toNumber;
            entity = entity.bind(michal)();
            return entity;
 98:
            entity = global;
            zuuluu = entity.Error;
            entity = entity.HermesInternal;
            michal = entity.concat;
            entity = 'Unexpected currency ';
            golfie = michal.bind(entity)(tangon);
            michal = zuuluu.prototype;
            michal = Object.create(michal, {constructor: {value: zuuluu}});
            option = michal;
            entity = new option[zuuluu](golfie, oscard);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
        }
    };
    var _closure1_slot6 = tangon;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = '../discord_common/js/shared/utils/PriceUtils.tsx';
    oscard = golfie.bind(option)(oscard);
    oscard = function(argFoo, argBar, argBaz) {
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            golfie = argBar;
            tangon = arguments[3];
            oscard = undefined;
            if(!(tangon === oscard)) { _fun00004_ip = 17; continue _fun00003 }
 15:
            tangon = {};
 17:
            entity = _closure1_slot4;
            entity = entity.DISCORD_ORB;
            if(!(golfie !== entity)) { _fun00004_ip = 137; continue _fun00003 }
 34:
            entity = tangon.convertToMajorUnits;
            option = oscard === entity;
            if(option) { _fun00004_ip = 50; continue _fun00003 }
 47:
            option = entity;
 50:
            zuuluu = _closure1_slot3;
            entity = _closure1_slot2;
            yankee = zuuluu.bind(oscard)(tangon, entity);
            zuuluu = global;
            verify = zuuluu.Intl;
            tangon = verify.NumberFormat;
            zuuluu = {};
            offset = 'currency';
            zuuluu['style'] = offset;
            zuuluu['currency'] = golfie;
            romeon = zuuluu;
            entity = copyDataProperties(romeon, yankee);
            entity = argBaz;
            tangon = tangon.bind(verify)(entity, zuuluu);
            zuuluu = tangon.format;
            entity = michal;
            if(!option) { _fun00004_ip = 130; continue _fun00003 }
 120:
            report = _closure1_slot6;
            entity = report.bind(oscard)(michal, golfie);
 130:
            entity = zuuluu.bind(tangon)(entity);
            return entity;
 137:
            entity = michal.toString;
            entity = entity.bind(michal)();
            return entity;
        }
    };
    zuuluu['formatPrice'] = oscard;
    zuuluu['CurrencyExponents'] = report;
    zuuluu['convertToMajorCurrencyUnits'] = tangon;
    michal = function(argFoo, argBar) {
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            tangon = argBar;
            michal = _closure1_slot5;
            report = michal[tangon];
            michal = null;
            if(!(michal != report)) { _fun00006_ip = 98; continue _fun00005 }
 20:
            zuuluu = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 2;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            entity = zuuluu.prototype;
            michal = Object.create(entity, {constructor: {value: zuuluu}});
            golfie = argFoo;
            option = michal;
            entity = new option[zuuluu](golfie, oscard);
            zuuluu = entity instanceof Object ? entity : michal;
            michal = zuuluu.times;
            golfie = 10;
            oscard = report;
            entity = exponentiationOperator(golfie, oscard);
            michal = michal.bind(zuuluu)(entity);
            entity = michal.toNumber;
            entity = entity.bind(michal)();
            return entity;
 98:
            entity = global;
            zuuluu = entity.Error;
            entity = entity.HermesInternal;
            michal = entity.concat;
            entity = 'Unexpected currency ';
            golfie = michal.bind(entity)(tangon);
            michal = zuuluu.prototype;
            michal = Object.create(michal, {constructor: {value: zuuluu}});
            option = michal;
            entity = new option[zuuluu](golfie, oscard);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
        }
    };
    zuuluu['convertToMinorCurrencyUnits'] = michal;
    return entity;
})();