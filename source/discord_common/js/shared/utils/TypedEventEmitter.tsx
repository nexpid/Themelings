// discord_common/js/shared/utils/TypedEventEmitter.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var7 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var6;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var7.bind(var1)(var4);
    var _closure1_slot2 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var7.bind(var1)(var4);
    var _closure1_slot3 = var4;
    var2 = function() {
        var4 = _closure1_slot3;
        var3 = function TypedEventEmitter() {
            var3 = this;
            var5 = _closure1_slot2;
            var4 = _closure2_slot0;
            var1 = undefined;
            var4 = var5.bind(var1)(var3, var4);
            var4 = _closure1_slot0;
            var5 = _closure1_slot1;
            var2 = 2;
            var2 = var5[var2];
            var2 = var4.bind(var1)(var2);
            var2 = var2.EventEmitter;
            var4 = var2.prototype;
            var4 = Object.create(var4, {constructor: {value: var2}});
            var8 = var4;
            var2 = new var8[var2](var7);
            var2 = var2 instanceof Object ? var2 : var4;
            var3['emitter'] = var2;
            return var1;
        };
        var _closure2_slot0 = var3;
        var1 = {};
        var2 = 'on';
        var1['key'] = var2;
        var2 = function value(arg1, arg2) {
            var1 = this;
            var4 = var1.emitter;
            var3 = var4.on;
            var2 = arg1;
            var1 = arg2;
            var1 = var3.bind(var4)(var2, var1);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var2;
        var2 = new Array(9);
        var2[0] = var1;
        var1 = {};
        var6 = 'off';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            var1 = this;
            var4 = var1.emitter;
            var3 = var4.off;
            var2 = arg1;
            var1 = arg2;
            var1 = var3.bind(var4)(var2, var1);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[1] = var1;
        var1 = {};
        var6 = 'once';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            var1 = this;
            var4 = var1.emitter;
            var3 = var4.once;
            var2 = arg1;
            var1 = arg2;
            var1 = var3.bind(var4)(var2, var1);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[2] = var1;
        var1 = {};
        var6 = 'addListener';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            var1 = this;
            var4 = var1.emitter;
            var3 = var4.addListener;
            var2 = arg1;
            var1 = arg2;
            var1 = var3.bind(var4)(var2, var1);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[3] = var1;
        var1 = {};
        var6 = 'removeListener';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            var1 = this;
            var4 = var1.emitter;
            var3 = var4.removeListener;
            var2 = arg1;
            var1 = arg2;
            var1 = var3.bind(var4)(var2, var1);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[4] = var1;
        var1 = {};
        var6 = 'removeAllListeners';
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var2 = var1.emitter;
            var1 = var2.removeAllListeners;
            var1 = var1.bind(var2)();
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[5] = var1;
        var1 = {};
        var6 = 'emit';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            var5 = 1;
            var9 = var5;
            var8 = copyRestArgs(var9);
            var1 = this;
            var3 = var1.emitter;
            var2 = var3.emit;
            var1 = new Array(1);
            var6 = arg1;
            var1[0] = var6;
            var9 = var1;
            var7 = var5;
            var4 = arraySpread(var9, var8, var7);
            var9 = var2;
            var8 = var1;
            var7 = var3;
            var1 = apply(var9, var8, var7);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[6] = var1;
        var1 = {};
        var6 = 'emitUnsafe';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            var5 = 1;
            var9 = var5;
            var8 = copyRestArgs(var9);
            var1 = this;
            var3 = var1.emitter;
            var2 = var3.emit;
            var1 = new Array(1);
            var6 = arg1;
            var1[0] = var6;
            var9 = var1;
            var7 = var5;
            var4 = arraySpread(var9, var8, var7);
            var9 = var2;
            var8 = var1;
            var7 = var3;
            var1 = apply(var9, var8, var7);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[7] = var1;
        var1 = {};
        var6 = 'listenerCount';
        var1['key'] = var6;
        var5 = function value(arg1) {
            var1 = this;
            var3 = var1.emitter;
            var2 = var3.listenerCount;
            var1 = arg1;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var1['value'] = var5;
        var2[8] = var1;
        var1 = undefined;
        var1 = var4.bind(var1)(var3, var2);
        return var1;
    };
    var2 = var2.bind(var1)();
    var4 = 3;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = '../discord_common/js/shared/utils/TypedEventEmitter.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();