// discord_common/js/packages/libdiscore/js_shim/js/shim.native.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var4 = require;
    var3 = exports;
    var5 = dependencyMap;
    var _closure1_slot0 = var4;
    var _closure1_slot1 = var5;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var6 = {};
    var1 = true;
    var6['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var6);
    var1 = 1;
    var6 = var5[var1];
    var1 = undefined;
    var8 = var4.bind(var1)(var6);
    var7 = var8.fileFinishedImporting;
    var6 = '../discord_common/js/packages/libdiscore/js_shim/js/shim.native.tsx';
    var6 = var7.bind(var8)(var6);
    var6 = function isBlockedDomain(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 0;
        var2 = var2[var1];
        var1 = undefined;
        var1 = var3.bind(var1)(var2);
        var3 = var1.BlockedDomainsStore;
        var2 = var3.isBlockedDomain;
        var1 = arg1;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['isBlockedDomain'] = var6;
    var6 = function startFetchingBlockedDomains(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 0;
        var2 = var2[var1];
        var1 = undefined;
        var2 = var3.bind(var1)(var2);
        var4 = var2.BlockedDomainsStore;
        var3 = var4.startFetchingBlockedDomains;
        var2 = arg1;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['startFetchingBlockedDomains'] = var6;
    var6 = function consumeLogs() {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 0;
        var2 = var2[var1];
        var1 = undefined;
        var2 = var3.bind(var1)(var2);
        var1 = var2.consumeLogs;
        var1 = var1.bind(var2)();
        return var1;
    };
    var3['consumeLogs'] = var6;
    var6 = function isUnsupportedBrowser() {
        var1 = false;
        return var1;
    };
    var3['isUnsupportedBrowser'] = var6;
    var6 = function getExperimentCacher() {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 0;
        var2 = var2[var1];
        var1 = undefined;
        var1 = var3.bind(var1)(var2);
        var1 = var1.ExperimentCacher;
        return var1;
    };
    var3['getExperimentCacher'] = var6;
    var2 = function getKvDatabaseAPI() {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 0;
        var2 = var2[var1];
        var1 = undefined;
        var2 = var3.bind(var1)(var2);
        var1 = var2.getKvDatabaseAPI;
        var1 = var1.bind(var2)();
        return var1;
    };
    var3['getKvDatabaseAPI'] = var2;
    var2 = 0;
    var6 = var5[var2];
    var6 = var4.bind(var1)(var6);
    var6 = var6.rustMultiply;
    var3['rustMultiply'] = var6;
    var6 = var5[var2];
    var6 = var4.bind(var1)(var6);
    var6 = var6.crash;
    var3['crash'] = var6;
    var2 = var5[var2];
    var2 = var4.bind(var1)(var2);
    var2 = var2.generateLaunchSignature;
    var3['generateLaunchSignature'] = var2;
    var2 = 2;
    var2 = var5[var2];
    var2 = var4.bind(var1)(var2);
    var2 = var2.isLibdiscoreLoaded;
    var3['isLibdiscoreLoaded'] = var2;
    return var1;
})();