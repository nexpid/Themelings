// discord_common/js/packages/libdiscore/js_shim/js/shim.native.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    tangon = argBar;
    zuuluu = argFre;
    report = argPlu;
    var _closure1_slot0 = tangon;
    var _closure1_slot1 = report;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    oscard = {};
    entity = true;
    oscard['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, oscard);
    entity = 1;
    oscard = report[entity];
    entity = undefined;
    option = tangon.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = '../discord_common/js/packages/libdiscore/js_shim/js/shim.native.tsx';
    oscard = golfie.bind(option)(oscard);
    oscard = function(argFoo) { // Original name: isBlockedDomain
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.BlockedDomainsStore;
        michal = zuuluu.isBlockedDomain;
        entity = argFoo;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['isBlockedDomain'] = oscard;
    oscard = function(argFoo) { // Original name: startFetchingBlockedDomains
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        michal = zuuluu.bind(entity)(michal);
        tangon = michal.BlockedDomainsStore;
        zuuluu = tangon.startFetchingBlockedDomains;
        michal = argFoo;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['startFetchingBlockedDomains'] = oscard;
    oscard = function() { // Original name: consumeLogs
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        michal = zuuluu.bind(entity)(michal);
        entity = michal.consumeLogs;
        entity = entity.bind(michal)();
        return entity;
    };
    zuuluu['consumeLogs'] = oscard;
    oscard = function() { // Original name: isUnsupportedBrowser
        entity = false;
        return entity;
    };
    zuuluu['isUnsupportedBrowser'] = oscard;
    oscard = function() { // Original name: getNoteStore
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        entity = entity.NoteStore;
        return entity;
    };
    zuuluu['getNoteStore'] = oscard;
    michal = function() { // Original name: getExperimentCacher
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        entity = entity.ExperimentCacher;
        return entity;
    };
    zuuluu['getExperimentCacher'] = michal;
    michal = 0;
    oscard = report[michal];
    oscard = tangon.bind(entity)(oscard);
    oscard = oscard.rustMultiply;
    zuuluu['rustMultiply'] = oscard;
    oscard = report[michal];
    oscard = tangon.bind(entity)(oscard);
    oscard = oscard.crash;
    zuuluu['crash'] = oscard;
    michal = report[michal];
    michal = tangon.bind(entity)(michal);
    michal = michal.generateLaunchSignature;
    zuuluu['generateLaunchSignature'] = michal;
    michal = 2;
    michal = report[michal];
    michal = tangon.bind(entity)(michal);
    michal = michal.isLibdiscoreLoaded;
    zuuluu['isLibdiscoreLoaded'] = michal;
    return entity;
})();