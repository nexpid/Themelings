// discord_common/js/packages/rtn-codegen/js/ChatInputNativeComponent.tsx
export default (function(argFoo, argBar, argBaz, argCor, argGra, argFre, argPlu) {
    golfie = argBar;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = golfie;
    var _closure1_slot1 = option;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    tangon = {};
    offset = 'DCDChatInput';
    tangon['uiViewClassName'] = offset;
    entity = {};
    michal = {};
    report = 'onChangeContentSize';
    michal['registrationName'] = report;
    entity['topChangeContentSize'] = michal;
    michal = {};
    report = 'onEndBlur';
    michal['registrationName'] = report;
    entity['topEndBlur'] = michal;
    michal = {};
    report = 'onBeginFocus';
    michal['registrationName'] = report;
    entity['topBeginFocus'] = michal;
    michal = {};
    report = 'onSelectionOrTextChange';
    michal['registrationName'] = report;
    entity['topSelectionOrTextChange'] = michal;
    michal = {};
    report = 'onTextFlushed';
    michal['registrationName'] = report;
    entity['topTextFlushed'] = michal;
    michal = {};
    report = 'onPasteImage';
    michal['registrationName'] = report;
    entity['topPasteImage'] = michal;
    michal = {};
    report = 'onPasteCommand';
    michal['registrationName'] = report;
    entity['topPasteCommand'] = michal;
    michal = {};
    report = 'onRequestSend';
    michal['registrationName'] = report;
    entity['topRequestSend'] = michal;
    michal = {};
    report = 'onTapAction';
    michal['registrationName'] = report;
    entity['topTapAction'] = michal;
    tangon['directEventTypes'] = entity;
    michal = {'textColor': true, 'editable': true, 'shouldShowCursor': true, 'placeholder': true, 'placeholderColor': true, 'markAsSpoilerTitle': true, 'keyboardAppearance': true, 'selectionColor': true, 'setNoExtractUI': true, 'keyboardType': true};
    entity = 0;
    report = option[entity];
    entity = undefined;
    yankee = golfie.bind(entity)(report);
    verify = yankee.ConditionallyIgnoredEventHandlers;
    report = {'onChangeContentSize': true, 'onEndBlur': true, 'onBeginFocus': true, 'onSelectionOrTextChange': true, 'onTextFlushed': true, 'onPasteImage': true, 'onPasteCommand': true, 'onRequestSend': true, 'onTapAction': true};
    foxtra = verify.bind(yankee)(report);
    backup = michal;
    report = copyDataProperties(backup, foxtra);
    tangon['validAttributes'] = michal;
    var _closure1_slot2 = tangon;
    michal = 1;
    michal = option[michal];
    verify = golfie.bind(entity)(michal);
    report = verify.get;
    michal = function() {
        entity = _closure1_slot2;
        return entity;
    };
    report = report.bind(verify)(offset, michal);
    michal = {};
    verify = function(argFoo) { // Original name: backspace
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = argFoo;
        zuuluu = 'backspace';
        michal = new Array(0);
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    michal['backspace'] = verify;
    verify = function(argFoo) { // Original name: blur
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = argFoo;
        zuuluu = 'blur';
        michal = new Array(0);
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    michal['blur'] = verify;
    verify = function(argFoo) { // Original name: focus
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = argFoo;
        zuuluu = 'focus';
        michal = new Array(0);
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    michal['focus'] = verify;
    verify = function(argFoo) { // Original name: openCustomKeyboard
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = argFoo;
        zuuluu = 'openCustomKeyboard';
        michal = new Array(0);
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    michal['openCustomKeyboard'] = verify;
    verify = function(argFoo) { // Original name: openSystemKeyboard
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = argFoo;
        zuuluu = 'openSystemKeyboard';
        michal = new Array(0);
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    michal['openSystemKeyboard'] = verify;
    verify = function(argFoo, argBar, argBaz, argCor, argGra, argFre, argPlu) { // Original name: replaceRange
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = new Array(6);
        michal = argBar;
        tangon[0] = michal;
        michal = argBaz;
        tangon[1] = michal;
        michal = argCor;
        tangon[2] = michal;
        michal = argGra;
        tangon[3] = michal;
        michal = argFre;
        tangon[4] = michal;
        michal = argPlu;
        tangon[5] = michal;
        zuuluu = argFoo;
        michal = 'replaceRange';
        michal = report.bind(oscard)(zuuluu, michal, tangon);
        return entity;
    };
    michal['replaceRange'] = verify;
    verify = function(argFoo, argBar, argBaz) { // Original name: setSelectedRange
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = new Array(2);
        michal = argBar;
        tangon[0] = michal;
        michal = argBaz;
        tangon[1] = michal;
        zuuluu = argFoo;
        michal = 'setSelectedRange';
        michal = report.bind(oscard)(zuuluu, michal, tangon);
        return entity;
    };
    michal['setSelectedRange'] = verify;
    verify = function(argFoo, argBar) { // Original name: setText
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = new Array(1);
        michal = argBar;
        tangon[0] = michal;
        zuuluu = argFoo;
        michal = 'setText';
        michal = report.bind(oscard)(zuuluu, michal, tangon);
        return entity;
    };
    michal['setText'] = verify;
    verify = function(argFoo, argBar) { // Original name: flushText
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = new Array(1);
        michal = argBar;
        tangon[0] = michal;
        zuuluu = argFoo;
        michal = 'flushText';
        michal = report.bind(oscard)(zuuluu, michal, tangon);
        return entity;
    };
    michal['flushText'] = verify;
    oscard = function(argFoo, argBar, argBaz) { // Original name: updateTextBlocks
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.dispatchCommand;
        tangon = new Array(2);
        michal = argBar;
        tangon[0] = michal;
        michal = argBaz;
        tangon[1] = michal;
        zuuluu = argFoo;
        michal = 'updateTextBlocks';
        michal = report.bind(oscard)(zuuluu, michal, tangon);
        return entity;
    };
    michal['updateTextBlocks'] = oscard;
    oscard = 3;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = '../discord_common/js/packages/rtn-codegen/js/ChatInputNativeComponent.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['default'] = report;
    zuuluu['__INTERNAL_VIEW_CONFIG'] = tangon;
    zuuluu['Commands'] = michal;
    return entity;
})();