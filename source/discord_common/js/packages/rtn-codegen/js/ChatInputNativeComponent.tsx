// discord_common/js/packages/rtn-codegen/js/ChatInputNativeComponent.tsx
export default (function(argFoo, argBar, argBaz, argCorge, argGrault, argFred, argPlugh) {
    golf = argBar;
    zulu = argFred;
    options = argPlugh;
    var _closure1_slot0 = golf;
    var _closure1_slot1 = options;
    entity = global;
    report = entity.Object;
    tango = report.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(report)(zulu, entity, mike);
    tango = {};
    offset = 'DCDChatInput';
    tango['uiViewClassName'] = offset;
    entity = {};
    mike = {};
    report = 'onChangeContentSize';
    mike['registrationName'] = report;
    entity['topChangeContentSize'] = mike;
    mike = {};
    report = 'onEndBlur';
    mike['registrationName'] = report;
    entity['topEndBlur'] = mike;
    mike = {};
    report = 'onBeginFocus';
    mike['registrationName'] = report;
    entity['topBeginFocus'] = mike;
    mike = {};
    report = 'onSelectionOrTextChange';
    mike['registrationName'] = report;
    entity['topSelectionOrTextChange'] = mike;
    mike = {};
    report = 'onTextFlushed';
    mike['registrationName'] = report;
    entity['topTextFlushed'] = mike;
    mike = {};
    report = 'onPasteImage';
    mike['registrationName'] = report;
    entity['topPasteImage'] = mike;
    mike = {};
    report = 'onPasteCommand';
    mike['registrationName'] = report;
    entity['topPasteCommand'] = mike;
    mike = {};
    report = 'onRequestSend';
    mike['registrationName'] = report;
    entity['topRequestSend'] = mike;
    mike = {};
    report = 'onTapAction';
    mike['registrationName'] = report;
    entity['topTapAction'] = mike;
    tango['directEventTypes'] = entity;
    mike = {'textColor': true, 'editable': true, 'shouldShowCursor': true, 'placeholder': true, 'placeholderColor': true, 'markAsSpoilerTitle': true, 'keyboardAppearance': true, 'selectionColor': true, 'setNoExtractUI': true, 'keyboardType': true};
    entity = 0;
    report = options[entity];
    entity = undefined;
    yankee = golf.bind(entity)(report);
    verify = yankee.ConditionallyIgnoredEventHandlers;
    report = {'onChangeContentSize': true, 'onEndBlur': true, 'onBeginFocus': true, 'onSelectionOrTextChange': true, 'onTextFlushed': true, 'onPasteImage': true, 'onPasteCommand': true, 'onRequestSend': true, 'onTapAction': true};
    foxtrot = verify.bind(yankee)(report);
    backup = mike;
    report = copyDataProperties(backup, foxtrot);
    tango['validAttributes'] = mike;
    var _closure1_slot2 = tango;
    mike = 1;
    mike = options[mike];
    verify = golf.bind(entity)(mike);
    report = verify.get;
    mike = function() {
        entity = _closure1_slot2;
        return entity;
    };
    report = report.bind(verify)(offset, mike);
    mike = {};
    verify = function(argFoo) { // Original name: backspace
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = argFoo;
        zulu = 'backspace';
        mike = new Array(0);
        mike = report.bind(oscar)(tango, zulu, mike);
        return entity;
    };
    mike['backspace'] = verify;
    verify = function(argFoo) { // Original name: blur
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = argFoo;
        zulu = 'blur';
        mike = new Array(0);
        mike = report.bind(oscar)(tango, zulu, mike);
        return entity;
    };
    mike['blur'] = verify;
    verify = function(argFoo) { // Original name: focus
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = argFoo;
        zulu = 'focus';
        mike = new Array(0);
        mike = report.bind(oscar)(tango, zulu, mike);
        return entity;
    };
    mike['focus'] = verify;
    verify = function(argFoo) { // Original name: openCustomKeyboard
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = argFoo;
        zulu = 'openCustomKeyboard';
        mike = new Array(0);
        mike = report.bind(oscar)(tango, zulu, mike);
        return entity;
    };
    mike['openCustomKeyboard'] = verify;
    verify = function(argFoo) { // Original name: openSystemKeyboard
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = argFoo;
        zulu = 'openSystemKeyboard';
        mike = new Array(0);
        mike = report.bind(oscar)(tango, zulu, mike);
        return entity;
    };
    mike['openSystemKeyboard'] = verify;
    verify = function(argFoo, argBar, argBaz, argCorge, argGrault, argFred, argPlugh) { // Original name: replaceRange
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = new Array(6);
        mike = argBar;
        tango[0] = mike;
        mike = argBaz;
        tango[1] = mike;
        mike = argCorge;
        tango[2] = mike;
        mike = argGrault;
        tango[3] = mike;
        mike = argFred;
        tango[4] = mike;
        mike = argPlugh;
        tango[5] = mike;
        zulu = argFoo;
        mike = 'replaceRange';
        mike = report.bind(oscar)(zulu, mike, tango);
        return entity;
    };
    mike['replaceRange'] = verify;
    verify = function(argFoo, argBar, argBaz) { // Original name: setSelectedRange
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = new Array(2);
        mike = argBar;
        tango[0] = mike;
        mike = argBaz;
        tango[1] = mike;
        zulu = argFoo;
        mike = 'setSelectedRange';
        mike = report.bind(oscar)(zulu, mike, tango);
        return entity;
    };
    mike['setSelectedRange'] = verify;
    verify = function(argFoo, argBar) { // Original name: setText
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = new Array(1);
        mike = argBar;
        tango[0] = mike;
        zulu = argFoo;
        mike = 'setText';
        mike = report.bind(oscar)(zulu, mike, tango);
        return entity;
    };
    mike['setText'] = verify;
    verify = function(argFoo, argBar) { // Original name: flushText
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = new Array(1);
        mike = argBar;
        tango[0] = mike;
        zulu = argFoo;
        mike = 'flushText';
        mike = report.bind(oscar)(zulu, mike, tango);
        return entity;
    };
    mike['flushText'] = verify;
    oscar = function(argFoo, argBar, argBaz) { // Original name: updateTextBlocks
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.dispatchCommand;
        tango = new Array(2);
        mike = argBar;
        tango[0] = mike;
        mike = argBaz;
        tango[1] = mike;
        zulu = argFoo;
        mike = 'updateTextBlocks';
        mike = report.bind(oscar)(zulu, mike, tango);
        return entity;
    };
    mike['updateTextBlocks'] = oscar;
    oscar = 3;
    oscar = options[oscar];
    options = golf.bind(entity)(oscar);
    golf = options.fileFinishedImporting;
    oscar = '../discord_common/js/packages/rtn-codegen/js/ChatInputNativeComponent.tsx';
    oscar = golf.bind(options)(oscar);
    zulu['default'] = report;
    zulu['__INTERNAL_VIEW_CONFIG'] = tango;
    zulu['Commands'] = mike;
    return entity;
})();