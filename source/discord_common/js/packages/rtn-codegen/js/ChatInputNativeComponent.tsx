// discord_common/js/packages/rtn-codegen/js/ChatInputNativeComponent.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var7 = require;
    var3 = exports;
    var8 = dependencyMap;
    var _closure1_slot0 = var7;
    var _closure1_slot1 = var8;
    var1 = global;
    var5 = var1.Object;
    var4 = var5.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var4.bind(var5)(var3, var1, var2);
    var4 = {};
    var10 = 'DCDChatInput';
    var4['uiViewClassName'] = var10;
    var1 = {};
    var2 = {};
    var5 = 'onChangeContentSize';
    var2['registrationName'] = var5;
    var1['topChangeContentSize'] = var2;
    var2 = {};
    var5 = 'onEndBlur';
    var2['registrationName'] = var5;
    var1['topEndBlur'] = var2;
    var2 = {};
    var5 = 'onBeginFocus';
    var2['registrationName'] = var5;
    var1['topBeginFocus'] = var2;
    var2 = {};
    var5 = 'onSelectionOrTextChange';
    var2['registrationName'] = var5;
    var1['topSelectionOrTextChange'] = var2;
    var2 = {};
    var5 = 'onTextFlushed';
    var2['registrationName'] = var5;
    var1['topTextFlushed'] = var2;
    var2 = {};
    var5 = 'onPasteImage';
    var2['registrationName'] = var5;
    var1['topPasteImage'] = var2;
    var2 = {};
    var5 = 'onPasteCommand';
    var2['registrationName'] = var5;
    var1['topPasteCommand'] = var2;
    var2 = {};
    var5 = 'onRequestSend';
    var2['registrationName'] = var5;
    var1['topRequestSend'] = var2;
    var2 = {};
    var5 = 'onTapAction';
    var2['registrationName'] = var5;
    var1['topTapAction'] = var2;
    var4['directEventTypes'] = var1;
    var2 = {'textColor': true, 'editable': true, 'shouldShowCursor': true, 'placeholder': true, 'placeholderColor': true, 'markAsSpoilerTitle': true, 'keyboardAppearance': true, 'selectionColor': true, 'setNoExtractUI': true, 'keyboardType': true};
    var1 = 0;
    var5 = var8[var1];
    var1 = undefined;
    var11 = var7.bind(var1)(var5);
    var9 = var11.ConditionallyIgnoredEventHandlers;
    var5 = {'onChangeContentSize': true, 'onEndBlur': true, 'onBeginFocus': true, 'onSelectionOrTextChange': true, 'onTextFlushed': true, 'onPasteImage': true, 'onPasteCommand': true, 'onRequestSend': true, 'onTapAction': true};
    var13 = var9.bind(var11)(var5);
    var14 = var2;
    var5 = copyDataProperties(var14, var13);
    var4['validAttributes'] = var2;
    var _closure1_slot2 = var4;
    var2 = 1;
    var2 = var8[var2];
    var9 = var7.bind(var1)(var2);
    var5 = var9.get;
    var2 = function() {
        var1 = _closure1_slot2;
        return var1;
    };
    var5 = var5.bind(var9)(var10, var2);
    var2 = {};
    var9 = function backspace(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = arg1;
        var3 = 'backspace';
        var2 = new Array(0);
        var2 = var5.bind(var6)(var4, var3, var2);
        return var1;
    };
    var2['backspace'] = var9;
    var9 = function blur(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = arg1;
        var3 = 'blur';
        var2 = new Array(0);
        var2 = var5.bind(var6)(var4, var3, var2);
        return var1;
    };
    var2['blur'] = var9;
    var9 = function focus(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = arg1;
        var3 = 'focus';
        var2 = new Array(0);
        var2 = var5.bind(var6)(var4, var3, var2);
        return var1;
    };
    var2['focus'] = var9;
    var9 = function openCustomKeyboard(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = arg1;
        var3 = 'openCustomKeyboard';
        var2 = new Array(0);
        var2 = var5.bind(var6)(var4, var3, var2);
        return var1;
    };
    var2['openCustomKeyboard'] = var9;
    var9 = function openSystemKeyboard(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = arg1;
        var3 = 'openSystemKeyboard';
        var2 = new Array(0);
        var2 = var5.bind(var6)(var4, var3, var2);
        return var1;
    };
    var2['openSystemKeyboard'] = var9;
    var9 = function replaceRange(arg1, arg2, arg3, arg4, arg5, arg6, arg7) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = new Array(6);
        var2 = arg2;
        var4[0] = var2;
        var2 = arg3;
        var4[1] = var2;
        var2 = arg4;
        var4[2] = var2;
        var2 = arg5;
        var4[3] = var2;
        var2 = arg6;
        var4[4] = var2;
        var2 = arg7;
        var4[5] = var2;
        var3 = arg1;
        var2 = 'replaceRange';
        var2 = var5.bind(var6)(var3, var2, var4);
        return var1;
    };
    var2['replaceRange'] = var9;
    var9 = function setSelectedRange(arg1, arg2, arg3) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = new Array(2);
        var2 = arg2;
        var4[0] = var2;
        var2 = arg3;
        var4[1] = var2;
        var3 = arg1;
        var2 = 'setSelectedRange';
        var2 = var5.bind(var6)(var3, var2, var4);
        return var1;
    };
    var2['setSelectedRange'] = var9;
    var9 = function setText(arg1, arg2) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = new Array(1);
        var2 = arg2;
        var4[0] = var2;
        var3 = arg1;
        var2 = 'setText';
        var2 = var5.bind(var6)(var3, var2, var4);
        return var1;
    };
    var2['setText'] = var9;
    var9 = function flushText(arg1, arg2) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = new Array(1);
        var2 = arg2;
        var4[0] = var2;
        var3 = arg1;
        var2 = 'flushText';
        var2 = var5.bind(var6)(var3, var2, var4);
        return var1;
    };
    var2['flushText'] = var9;
    var6 = function updateTextBlocks(arg1, arg2, arg3) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var6 = var3.bind(var1)(var2);
        var5 = var6.dispatchCommand;
        var4 = new Array(2);
        var2 = arg2;
        var4[0] = var2;
        var2 = arg3;
        var4[1] = var2;
        var3 = arg1;
        var2 = 'updateTextBlocks';
        var2 = var5.bind(var6)(var3, var2, var4);
        return var1;
    };
    var2['updateTextBlocks'] = var6;
    var6 = 3;
    var6 = var8[var6];
    var8 = var7.bind(var1)(var6);
    var7 = var8.fileFinishedImporting;
    var6 = '../discord_common/js/packages/rtn-codegen/js/ChatInputNativeComponent.tsx';
    var6 = var7.bind(var8)(var6);
    var3['default'] = var5;
    var3['__INTERNAL_VIEW_CONFIG'] = var4;
    var3['Commands'] = var2;
    return var1;
})();