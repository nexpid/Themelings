// discord_common/js/packages/rtn-codegen/js/VideoRendererNativeComponent.tsx
export default (function(_, argBar, __, ___, ____, argFred, argPlugh) {
    oscar = argBar;
    zulu = argFred;
    golf = argPlugh;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    mike = '__esModule';
    mike = options.bind(verify)(zulu, mike, report);
    mike = {};
    verify = 'DCDVideoRenderer';
    mike['uiViewClassName'] = verify;
    report = {};
    options = {};
    offset = 'onSize';
    options['registrationName'] = offset;
    report['topSize'] = options;
    options = {};
    offset = 'onReady';
    options['registrationName'] = offset;
    report['topReady'] = options;
    mike['directEventTypes'] = report;
    report = {};
    report['streamId'] = entity;
    entity = 0;
    options = golf[entity];
    entity = undefined;
    yankee = oscar.bind(entity)(options);
    offset = yankee.ConditionallyIgnoredEventHandlers;
    options = {'onSize': true, 'onReady': true};
    foxtrot = offset.bind(yankee)(options);
    backup = report;
    options = copyDataProperties(backup, foxtrot);
    mike['validAttributes'] = report;
    var _closure1_slot0 = mike;
    report = 1;
    report = golf[report];
    options = oscar.bind(entity)(report);
    report = options.get;
    tango = function() {
        entity = _closure1_slot0;
        return entity;
    };
    tango = report.bind(options)(verify, tango);
    report = 2;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = '../discord_common/js/packages/rtn-codegen/js/VideoRendererNativeComponent.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['__INTERNAL_VIEW_CONFIG'] = mike;
    return entity;
})();