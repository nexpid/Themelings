// discord_common/js/packages/rtn-codegen/js/EmojiPickerRowViewNativeComponent.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = require;
    var3 = exports;
    var7 = dependencyMap;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var5 = {};
    var1 = true;
    var5['value'] = var1;
    var2 = '__esModule';
    var2 = var8.bind(var9)(var3, var2, var5);
    var2 = {};
    var9 = 'EmojiPickerRowView';
    var2['uiViewClassName'] = var9;
    var5 = {};
    var8 = {};
    var10 = 'onPressEmoji';
    var8['registrationName'] = var10;
    var5['topPressEmoji'] = var8;
    var8 = {};
    var10 = 'onLongPressEmoji';
    var8['registrationName'] = var10;
    var5['topLongPressEmoji'] = var8;
    var2['directEventTypes'] = var5;
    var5 = {};
    var5['rowData'] = var1;
    var1 = 0;
    var8 = var7[var1];
    var1 = undefined;
    var11 = var6.bind(var1)(var8);
    var10 = var11.ConditionallyIgnoredEventHandlers;
    var8 = {'onPressEmoji': true, 'onLongPressEmoji': true};
    var13 = var10.bind(var11)(var8);
    var14 = var5;
    var8 = copyDataProperties(var14, var13);
    var2['validAttributes'] = var5;
    var _closure1_slot0 = var2;
    var5 = 1;
    var5 = var7[var5];
    var8 = var6.bind(var1)(var5);
    var5 = var8.get;
    var4 = function() {
        var1 = _closure1_slot0;
        return var1;
    };
    var4 = var5.bind(var8)(var9, var4);
    var5 = 2;
    var5 = var7[var5];
    var7 = var6.bind(var1)(var5);
    var6 = var7.fileFinishedImporting;
    var5 = '../discord_common/js/packages/rtn-codegen/js/EmojiPickerRowViewNativeComponent.tsx';
    var5 = var6.bind(var7)(var5);
    var3['default'] = var4;
    var3['__INTERNAL_VIEW_CONFIG'] = var2;
    return var1;
})();