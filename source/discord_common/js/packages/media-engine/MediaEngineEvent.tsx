// discord_common/js/packages/media-engine/MediaEngineEvent.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    michal = {};
    entity = 'destroy';
    michal['Destroy'] = entity;
    entity = 'silence';
    michal['Silence'] = entity;
    entity = 'connection';
    michal['Connection'] = entity;
    entity = 'devicechange';
    michal['DeviceChange'] = entity;
    entity = 'volumechange';
    michal['VolumeChange'] = entity;
    entity = 'voiceactivity';
    michal['VoiceActivity'] = entity;
    entity = 'watchdogtimeout';
    michal['WatchdogTimeout'] = entity;
    entity = 'audio-permission';
    michal['AudioPermission'] = entity;
    entity = 'video-permission';
    michal['VideoPermission'] = entity;
    entity = 'desktopsourceend';
    michal['DesktopSourceEnd'] = entity;
    entity = 'connection-stats';
    michal['ConnectionStats'] = entity;
    entity = 'video-input-initialized';
    michal['VideoInputInitialized'] = entity;
    entity = 'audio-input-initialized';
    michal['AudioInputInitialized'] = entity;
    entity = 'clips-recording-restart-needed';
    michal['ClipsRecordingRestartNeeded'] = entity;
    entity = 'clips-init-failure';
    michal['ClipsInitFailure'] = entity;
    entity = 'clips-recording-ended';
    michal['ClipsRecordingEnded'] = entity;
    entity = 'native-screenshare-picker-updated';
    michal['NativeScreenSharePickerUpdate'] = entity;
    entity = 'native-screenshare-picker-cancelled';
    michal['NativeScreenSharePickerCancel'] = entity;
    entity = 'native-screenshare-picker-error';
    michal['NativeScreenSharePickerError'] = entity;
    entity = 'audio-device-module-error';
    michal['AudioDeviceModuleError'] = entity;
    entity = 'voice-filters-failed';
    michal['VoiceFiltersFailed'] = entity;
    entity = 'video-codec-error';
    michal['VideoCodecError'] = entity;
    entity = 'voice-queue-metrics';
    michal['VoiceQueueMetrics'] = entity;
    tangon = argPlu;
    entity = 0;
    report = tangon[entity];
    tangon = argBar;
    entity = undefined;
    oscard = tangon.bind(entity)(report);
    report = oscard.fileFinishedImporting;
    tangon = '../discord_common/js/packages/media-engine/MediaEngineEvent.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['MediaEngineEvent'] = michal;
    return entity;
})();