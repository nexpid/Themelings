// discord_common/js/packages/rpc-schema/definitions.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    tangon = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(option)(zuuluu, entity, michal);
    michal = {};
    tangon = 0;
    option = oscard[tangon];
    entity = undefined;
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.INITIATE_IMAGE_UPLOAD;
    option = {};
    option['request'] = entity;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['image_url'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.OPEN_SHARE_MOMENT_DIALOG;
    option = {};
    option['response'] = entity;
    offset = function(argFoo) { // Original name: request
        report = argFoo;
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.joiReqObj;
        tangon = report.object;
        entity = {};
        oscard = report.string;
        golfie = oscard.bind(report)();
        oscard = golfie.required;
        option = oscard.bind(golfie)();
        golfie = option.max;
        oscard = 1024;
        oscard = golfie.bind(option)(oscard);
        entity['mediaUrl'] = oscard;
        entity = tangon.bind(report)(entity);
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['request'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.AUTHENTICATE;
    option = {};
    offset = function(argFoo) { // Original name: request
        report = argFoo;
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.joiReqObj;
        tangon = report.object;
        entity = {};
        oscard = report.string;
        option = oscard.bind(report)();
        golfie = option.allow;
        oscard = null;
        golfie = golfie.bind(option)(oscard);
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        entity['access_token'] = oscard;
        entity = tangon.bind(report)(entity);
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['request'] = offset;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['access_token'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        tangon['username'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        tangon['discriminator'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        tangon['id'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.allow;
        option = null;
        oscard = oscard.bind(golfie)(option);
        tangon['avatar'] = oscard;
        oscard = zuuluu.number;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        tangon['public_flags'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.allow;
        oscard = oscard.bind(golfie)(option);
        tangon['global_name'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['user'] = tangon;
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.items;
        tangon = zuuluu.string;
        verify = tangon.bind(zuuluu)();
        golfie = verify.valid;
        backup = _closure1_slot0;
        kiloes = _closure1_slot1;
        yankee = 0;
        tangon = kiloes[yankee];
        foxtra = undefined;
        romeon = backup.bind(foxtra)(tangon);
        offset = romeon.joiEnum;
        tangon = 1;
        tangon = kiloes[tangon];
        tangon = backup.bind(foxtra)(tangon);
        tangon = tangon.OAuth2Scopes;
        output = offset.bind(romeon)(tangon);
        tangon = new Array(0);
        result = tangon;
        sizing = 0;
        offset = arraySpread(result, output, sizing);
        result = golfie;
        output = tangon;
        sizing = verify;
        tangon = apply(result, output, sizing);
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['scopes'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['expires'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        tangon['description'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.allow;
        oscard = oscard.bind(golfie)(option);
        tangon['icon'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        tangon['id'] = oscard;
        oscard = zuuluu.array;
        option = oscard.bind(zuuluu)();
        golfie = option.items;
        oscard = zuuluu.string;
        oscard = oscard.bind(zuuluu)();
        golfie = golfie.bind(option)(oscard);
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['rpc_origins'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        tangon['name'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['application'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.GET_ACTIVITY_INSTANCE_CONNECTED_PARTICIPANTS;
    option = {};
    option['request'] = entity;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.items;
        golfie = _closure1_slot3;
        tangon = undefined;
        option = golfie.bind(tangon)(zuuluu);
        golfie = option.keys;
        tangon = {};
        verify = zuuluu.string;
        yankee = verify.bind(zuuluu)();
        offset = yankee.description;
        verify = 'Server nickname. Not unique.';
        verify = offset.bind(yankee)(verify);
        tangon['nickname'] = verify;
        golfie = golfie.bind(option)(tangon);
        tangon = golfie.required;
        tangon = tangon.bind(golfie)();
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['participants'] = tangon;
        michal = michal.bind(zuuluu)(entity);
        entity = michal.required;
        entity = entity.bind(michal)();
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.SHARE_INTERACTION;
    option = {};
    offset = function(argFoo) { // Original name: request
        report = argFoo;
        michal = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 0;
        entity = zuuluu[entity];
        verify = undefined;
        zuuluu = michal.bind(verify)(entity);
        michal = zuuluu.joiReqObj;
        tangon = report.object;
        entity = {};
        golfie = report.string;
        option = golfie.bind(report)();
        golfie = option.required;
        golfie = golfie.bind(option)();
        entity['command'] = golfie;
        golfie = report.string;
        offset = golfie.bind(report)();
        option = offset.max;
        golfie = 2000;
        golfie = option.bind(offset)(golfie);
        entity['content'] = golfie;
        golfie = report.boolean;
        golfie = golfie.bind(report)();
        entity['require_launch_channel'] = golfie;
        option = report.object;
        golfie = {};
        offset = report.number;
        yankee = offset.bind(report)();
        offset = yankee.required;
        offset = offset.bind(yankee)();
        golfie['height'] = offset;
        offset = report.string;
        yankee = offset.bind(report)();
        offset = yankee.required;
        offset = offset.bind(yankee)();
        golfie['url'] = offset;
        offset = report.number;
        yankee = offset.bind(report)();
        offset = yankee.required;
        offset = offset.bind(yankee)();
        golfie['width'] = offset;
        golfie = option.bind(report)(golfie);
        entity['preview_image'] = golfie;
        golfie = report.array;
        option = golfie.bind(report)();
        golfie = option.items;
        oscard = _closure1_slot4;
        oscard = oscard.bind(verify)(report);
        oscard = golfie.bind(option)(oscard);
        entity['components'] = oscard;
        entity = tangon.bind(report)(entity);
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['request'] = offset;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.boolean;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['success'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.SHARE_LINK;
    option = {};
    offset = function(argFoo) { // Original name: request
        report = argFoo;
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.joiReqObj;
        tangon = report.object;
        entity = {};
        oscard = report.string;
        golfie = oscard.bind(report)();
        oscard = golfie.max;
        option = 64;
        oscard = oscard.bind(golfie)(option);
        entity['referrer_id'] = oscard;
        oscard = report.string;
        golfie = oscard.bind(report)();
        oscard = golfie.max;
        oscard = oscard.bind(golfie)(option);
        entity['custom_id'] = oscard;
        oscard = report.string;
        option = oscard.bind(report)();
        golfie = option.max;
        oscard = 1000;
        golfie = golfie.bind(option)(oscard);
        oscard = golfie.required;
        oscard = oscard.bind(golfie)();
        entity['message'] = oscard;
        entity = tangon.bind(report)(entity);
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['request'] = offset;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.boolean;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['success'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.RPCCommand;
    option = tangon.GET_RELATIONSHIPS;
    tangon = {};
    tangon['request'] = entity;
    verify = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.array;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        oscard = tangon.bind(report)();
        report = oscard.items;
        golfie = zuuluu.object;
        tangon = {};
        option = zuuluu.number;
        verify = option.bind(zuuluu)();
        option = verify.required;
        option = option.bind(verify)();
        tangon['type'] = option;
        option = _closure1_slot3;
        yankee = undefined;
        verify = option.bind(yankee)(zuuluu);
        option = verify.allow;
        romeon = null;
        option = option.bind(verify)(romeon);
        tangon['user'] = option;
        verify = zuuluu.object;
        option = {};
        foxtra = zuuluu.string;
        backup = foxtra.bind(zuuluu)();
        foxtra = backup.required;
        foxtra = foxtra.bind(backup)();
        option['status'] = foxtra;
        offset = _closure1_slot2;
        yankee = offset.bind(yankee)(zuuluu);
        offset = yankee.allow;
        offset = offset.bind(yankee)(romeon);
        option['activity'] = offset;
        option = verify.bind(zuuluu)(option);
        tangon['presence'] = option;
        tangon = golfie.bind(zuuluu)(tangon);
        tangon = report.bind(oscard)(tangon);
        entity['relationships'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['response'] = verify;
    michal[option] = tangon;
    tangon = function(argFoo) { // Original name: Activity
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['session_id'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['type'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['name'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        oscard = null;
        report = tangon.bind(report)(oscard);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['url'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['application_id'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['state'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['details'] = tangon;
        report = zuuluu.object;
        tangon = {};
        golfie = zuuluu.string;
        option = golfie.bind(zuuluu)();
        golfie = option.required;
        golfie = golfie.bind(option)();
        tangon['name'] = golfie;
        golfie = zuuluu.string;
        option = golfie.bind(zuuluu)();
        golfie = option.allow;
        option = golfie.bind(option)(oscard);
        golfie = option.optional;
        golfie = golfie.bind(option)();
        tangon['id'] = golfie;
        golfie = zuuluu.bool;
        option = golfie.bind(zuuluu)();
        golfie = option.optional;
        option = golfie.bind(option)();
        golfie = option.allow;
        golfie = golfie.bind(option)(oscard);
        tangon['animated'] = golfie;
        report = report.bind(zuuluu)(tangon);
        tangon = report.allow;
        report = tangon.bind(report)(oscard);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['emoji'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['large_image'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['large_text'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['small_image'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['small_text'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['assets'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.number;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['start'] = oscard;
        oscard = zuuluu.number;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['end'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['timestamps'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['id'] = oscard;
        oscard = zuuluu.array;
        option = oscard.bind(zuuluu)();
        golfie = option.items;
        oscard = zuuluu.number;
        oscard = oscard.bind(zuuluu)();
        option = golfie.bind(option)(oscard);
        golfie = option.length;
        oscard = 2;
        golfie = golfie.bind(option)(oscard);
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['size'] = oscard;
        oscard = zuuluu.number;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['privacy'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['party'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['match'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['join'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['secrets'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['sync_id'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['created_at'] = tangon;
        tangon = zuuluu.bool;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['instance'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['flags'] = tangon;
        tangon = zuuluu.object;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['metadata'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['platform'] = tangon;
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.items;
        tangon = zuuluu.string;
        tangon = tangon.bind(zuuluu)();
        report = report.bind(oscard)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['supported_platforms'] = tangon;
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.items;
        tangon = zuuluu.string;
        tangon = tangon.bind(zuuluu)();
        report = report.bind(oscard)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['buttons'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['hangStatus'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot2 = tangon;
    tangon = function(argFoo) { // Original name: User
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        oscard = tangon.bind(report)();
        report = oscard.description;
        tangon = 'User ID';
        tangon = report.bind(oscard)(tangon);
        entity['id'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['username'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        oscard = null;
        golfie = tangon.bind(report)(oscard);
        report = golfie.description;
        tangon = 'Global Discord name. Not unique.';
        tangon = report.bind(golfie)(tangon);
        entity['global_name'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        golfie = tangon.bind(report)();
        report = golfie.description;
        tangon = 'Global name discriminator. Will be 0 if a unique username';
        tangon = report.bind(golfie)(tangon);
        entity['discriminator'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        golfie = tangon.bind(report)(oscard);
        report = golfie.description;
        tangon = 'User Avatar ID';
        tangon = report.bind(golfie)(tangon);
        entity['avatar'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        golfie = tangon.bind(report)();
        report = golfie.description;
        tangon = 'Public user flags';
        tangon = report.bind(golfie)(tangon);
        entity['flags'] = tangon;
        tangon = zuuluu.bool;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        golfie = tangon.bind(report)();
        report = golfie.description;
        tangon = 'If a bot user.';
        tangon = report.bind(golfie)(tangon);
        entity['bot'] = tangon;
        report = zuuluu.object;
        tangon = {};
        golfie = zuuluu.string;
        option = golfie.bind(zuuluu)();
        golfie = option.required;
        golfie = golfie.bind(option)();
        tangon['asset'] = golfie;
        golfie = zuuluu.string;
        golfie = golfie.bind(zuuluu)();
        tangon['skuId'] = golfie;
        golfie = zuuluu.number;
        golfie = golfie.bind(zuuluu)();
        tangon['expiresAt'] = golfie;
        report = report.bind(zuuluu)(tangon);
        tangon = report.allow;
        golfie = tangon.bind(report)(oscard);
        report = golfie.description;
        tangon = 'Details about avatar decoration';
        tangon = report.bind(golfie)(tangon);
        entity['avatar_decoration_data'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        oscard = tangon.bind(report)(oscard);
        report = oscard.description;
        tangon = 'Nitro premium type';
        tangon = report.bind(oscard)(tangon);
        entity['premium_type'] = tangon;
        zuuluu = michal.bind(zuuluu)(entity);
        michal = zuuluu.description;
        entity = 'Discord User';
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot3 = tangon;
    tangon = function(argFoo) { // Original name: ActionRowComponent
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.number;
        oscard = tangon.bind(zuuluu)();
        report = oscard.valid;
        tangon = 1;
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['type'] = tangon;
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.max;
        tangon = 5;
        oscard = report.bind(oscard)(tangon);
        report = oscard.items;
        golfie = _closure1_slot5;
        tangon = undefined;
        tangon = golfie.bind(tangon)(zuuluu);
        tangon = report.bind(oscard)(tangon);
        entity['components'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot4 = tangon;
    tangon = function(argFoo) { // Original name: ButtonComponent
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.number;
        oscard = tangon.bind(zuuluu)();
        report = oscard.valid;
        tangon = 2;
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['type'] = tangon;
        tangon = zuuluu.number;
        oscard = tangon.bind(zuuluu)();
        report = oscard.min;
        tangon = 1;
        oscard = report.bind(oscard)(tangon);
        report = oscard.max;
        tangon = 5;
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['style'] = tangon;
        tangon = zuuluu.string;
        oscard = tangon.bind(zuuluu)();
        report = oscard.max;
        tangon = 80;
        oscard = report.bind(oscard)(tangon);
        report = oscard.description;
        tangon = 'Text that appears on the button';
        tangon = report.bind(oscard)(tangon);
        entity['label'] = tangon;
        tangon = zuuluu.string;
        oscard = tangon.bind(zuuluu)();
        report = oscard.max;
        tangon = 100;
        oscard = report.bind(oscard)(tangon);
        report = oscard.description;
        tangon = 'Developer-defined identifier for the button; max 100 characters';
        tangon = report.bind(oscard)(tangon);
        entity['custom_id'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = '../discord_common/js/packages/rpc-schema/definitions.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['RPCCommandSchemas'] = michal;
    return entity;
})();