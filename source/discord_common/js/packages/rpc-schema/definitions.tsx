// discord_common/js/packages/rpc-schema/definitions.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    tangon = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(option)(zuuluu, entity, michal);
    michal = {};
    tangon = 0;
    option = oscard[tangon];
    entity = undefined;
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.INITIATE_IMAGE_UPLOAD;
    option = {};
    option['request'] = entity;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.string;
        zuuluu = michal.bind(zuuluu)();
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['image_url'] = michal;
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.OPEN_SHARE_MOMENT_DIALOG;
    option = {};
    option['response'] = entity;
    offset = function(argFoo) { // Original name: request
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.string;
        zuuluu = michal.bind(zuuluu)();
        michal = zuuluu.required;
        tangon = michal.bind(zuuluu)();
        zuuluu = tangon.max;
        michal = 1024;
        michal = zuuluu.bind(tangon)(michal);
        entity['mediaUrl'] = michal;
        return entity;
    };
    option['request'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.AUTHENTICATE;
    option = {};
    offset = function(argFoo) { // Original name: request
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.string;
        tangon = michal.bind(zuuluu)();
        zuuluu = tangon.allow;
        michal = null;
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.optional;
        michal = michal.bind(zuuluu)();
        entity['access_token'] = michal;
        return entity;
    };
    option['request'] = offset;
    offset = function(argFoo) { // Original name: response
        tangon = argFoo;
        entity = {};
        michal = tangon.string;
        zuuluu = michal.bind(tangon)();
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['access_token'] = michal;
        zuuluu = tangon.object;
        michal = {};
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['username'] = report;
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['discriminator'] = report;
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['id'] = report;
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.allow;
        golfie = null;
        report = report.bind(oscard)(golfie);
        michal['avatar'] = report;
        report = tangon.number;
        oscard = report.bind(tangon)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['public_flags'] = report;
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.allow;
        report = report.bind(oscard)(golfie);
        michal['global_name'] = report;
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['user'] = michal;
        michal = tangon.array;
        report = michal.bind(tangon)();
        zuuluu = report.items;
        michal = tangon.string;
        option = michal.bind(tangon)();
        oscard = option.valid;
        foxtra = _closure1_slot0;
        backup = _closure1_slot1;
        offset = 0;
        michal = backup[offset];
        romeon = undefined;
        yankee = foxtra.bind(romeon)(michal);
        verify = yankee.joiEnum;
        michal = 1;
        michal = backup[michal];
        michal = foxtra.bind(romeon)(michal);
        michal = michal.OAuth2Scopes;
        sizing = verify.bind(yankee)(michal);
        michal = new Array(0);
        output = michal;
        kiloes = 0;
        verify = arraySpread(output, sizing, kiloes);
        output = oscard;
        sizing = michal;
        kiloes = option;
        michal = apply(output, sizing, kiloes);
        zuuluu = zuuluu.bind(report)(michal);
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['scopes'] = michal;
        michal = tangon.string;
        zuuluu = michal.bind(tangon)();
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['expires'] = michal;
        zuuluu = tangon.object;
        michal = {};
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['description'] = report;
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.allow;
        report = report.bind(oscard)(golfie);
        michal['icon'] = report;
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['id'] = report;
        report = tangon.array;
        golfie = report.bind(tangon)();
        oscard = golfie.items;
        report = tangon.string;
        report = report.bind(tangon)();
        oscard = oscard.bind(golfie)(report);
        report = oscard.optional;
        report = report.bind(oscard)();
        michal['rpc_origins'] = report;
        report = tangon.string;
        oscard = report.bind(tangon)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['name'] = report;
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['application'] = michal;
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.GET_ACTIVITY_INSTANCE_CONNECTED_PARTICIPANTS;
    option = {};
    option['request'] = entity;
    offset = function(argFoo) { // Original name: response
        option = argFoo;
        entity = {};
        michal = option.array;
        tangon = michal.bind(option)();
        zuuluu = tangon.items;
        report = _closure1_slot3;
        michal = undefined;
        oscard = report.bind(michal)(option);
        report = oscard.keys;
        michal = {};
        golfie = option.string;
        verify = golfie.bind(option)();
        option = verify.description;
        golfie = 'Server nickname. Not unique.';
        golfie = option.bind(verify)(golfie);
        michal['nickname'] = golfie;
        report = report.bind(oscard)(michal);
        michal = report.required;
        michal = michal.bind(report)();
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['participants'] = michal;
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.SHARE_INTERACTION;
    option = {};
    offset = function(argFoo) { // Original name: request
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.string;
        tangon = michal.bind(zuuluu)();
        michal = tangon.required;
        michal = michal.bind(tangon)();
        entity['command'] = michal;
        michal = zuuluu.string;
        report = michal.bind(zuuluu)();
        tangon = report.max;
        michal = 2000;
        michal = tangon.bind(report)(michal);
        entity['content'] = michal;
        michal = zuuluu.boolean;
        michal = michal.bind(zuuluu)();
        entity['require_launch_channel'] = michal;
        tangon = zuuluu.object;
        michal = {};
        report = zuuluu.number;
        oscard = report.bind(zuuluu)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['height'] = report;
        report = zuuluu.string;
        oscard = report.bind(zuuluu)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['url'] = report;
        report = zuuluu.number;
        oscard = report.bind(zuuluu)();
        report = oscard.required;
        report = report.bind(oscard)();
        michal['width'] = report;
        michal = tangon.bind(zuuluu)(michal);
        entity['preview_image'] = michal;
        michal = zuuluu.array;
        report = michal.bind(zuuluu)();
        tangon = report.items;
        oscard = _closure1_slot4;
        michal = undefined;
        michal = oscard.bind(michal)(zuuluu);
        michal = tangon.bind(report)(michal);
        entity['components'] = michal;
        michal = zuuluu.number;
        michal = michal.bind(zuuluu)();
        entity['pid'] = michal;
        return entity;
    };
    option['request'] = offset;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.boolean;
        zuuluu = michal.bind(zuuluu)();
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['success'] = michal;
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.SHARE_LINK;
    option = {};
    offset = function(argFoo) { // Original name: request
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.string;
        report = michal.bind(zuuluu)();
        michal = report.max;
        tangon = 64;
        michal = michal.bind(report)(tangon);
        entity['custom_id'] = michal;
        michal = zuuluu.string;
        oscard = michal.bind(zuuluu)();
        report = oscard.max;
        michal = 1000;
        report = report.bind(oscard)(michal);
        michal = report.required;
        michal = michal.bind(report)();
        entity['message'] = michal;
        michal = zuuluu.string;
        zuuluu = michal.bind(zuuluu)();
        michal = zuuluu.max;
        michal = michal.bind(zuuluu)(tangon);
        entity['link_id'] = michal;
        return entity;
    };
    option['request'] = offset;
    offset = function(argFoo) { // Original name: response
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.boolean;
        tangon = michal.bind(zuuluu)();
        michal = tangon.required;
        michal = michal.bind(tangon)();
        entity['success'] = michal;
        michal = zuuluu.boolean;
        tangon = michal.bind(zuuluu)();
        michal = tangon.required;
        michal = michal.bind(tangon)();
        entity['didCopyLink'] = michal;
        michal = zuuluu.boolean;
        zuuluu = michal.bind(zuuluu)();
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['didSendMessage'] = michal;
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.GET_RELATIONSHIPS;
    option = {};
    option['request'] = entity;
    offset = function(argFoo) { // Original name: response
        oscard = argFoo;
        entity = {};
        michal = oscard.array;
        zuuluu = michal.bind(oscard)();
        michal = zuuluu.required;
        tangon = michal.bind(zuuluu)();
        zuuluu = tangon.items;
        report = oscard.object;
        michal = {};
        golfie = oscard.number;
        option = golfie.bind(oscard)();
        golfie = option.required;
        golfie = golfie.bind(option)();
        michal['type'] = golfie;
        golfie = _closure1_slot3;
        offset = undefined;
        option = golfie.bind(offset)(oscard);
        golfie = option.required;
        golfie = golfie.bind(option)();
        michal['user'] = golfie;
        option = oscard.object;
        golfie = {};
        yankee = oscard.string;
        romeon = yankee.bind(oscard)();
        yankee = romeon.required;
        yankee = yankee.bind(romeon)();
        golfie['status'] = yankee;
        verify = _closure1_slot2;
        yankee = verify.bind(offset)(oscard);
        offset = yankee.allow;
        verify = null;
        verify = offset.bind(yankee)(verify);
        golfie['activity'] = verify;
        golfie = option.bind(oscard)(golfie);
        michal['presence'] = golfie;
        michal = report.bind(oscard)(michal);
        michal = zuuluu.bind(tangon)(michal);
        entity['relationships'] = michal;
        return entity;
    };
    option['response'] = offset;
    michal[verify] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.RPCCommand;
    verify = option.INVITE_USER_EMBEDDED;
    option = {};
    offset = function(argFoo) { // Original name: request
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.string;
        tangon = michal.bind(zuuluu)();
        michal = tangon.required;
        michal = michal.bind(tangon)();
        entity['user_id'] = michal;
        michal = zuuluu.string;
        tangon = michal.bind(zuuluu)();
        zuuluu = tangon.min;
        michal = 0;
        tangon = zuuluu.bind(tangon)(michal);
        zuuluu = tangon.max;
        michal = 1024;
        michal = zuuluu.bind(tangon)(michal);
        entity['content'] = michal;
        return entity;
    };
    option['request'] = offset;
    option['response'] = entity;
    michal[verify] = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.RPCCommand;
    option = tangon.GET_USER;
    tangon = {};
    verify = function(argFoo) { // Original name: request
        zuuluu = argFoo;
        entity = {};
        michal = zuuluu.string;
        tangon = michal.bind(zuuluu)();
        zuuluu = tangon.max;
        michal = 64;
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.required;
        michal = michal.bind(zuuluu)();
        entity['id'] = michal;
        return entity;
    };
    tangon['request'] = verify;
    verify = function(argFoo) { // Original name: response
        zuuluu = _closure1_slot3;
        michal = undefined;
        entity = argFoo;
        zuuluu = zuuluu.bind(michal)(entity);
        michal = zuuluu.allow;
        entity = null;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['response'] = verify;
    michal[option] = tangon;
    tangon = function(argFoo) { // Original name: Activity
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['session_id'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['type'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['name'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        oscard = null;
        report = tangon.bind(report)(oscard);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['url'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['application_id'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['state'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['details'] = tangon;
        report = zuuluu.object;
        tangon = {};
        golfie = zuuluu.string;
        option = golfie.bind(zuuluu)();
        golfie = option.required;
        golfie = golfie.bind(option)();
        tangon['name'] = golfie;
        golfie = zuuluu.string;
        option = golfie.bind(zuuluu)();
        golfie = option.allow;
        option = golfie.bind(option)(oscard);
        golfie = option.optional;
        golfie = golfie.bind(option)();
        tangon['id'] = golfie;
        golfie = zuuluu.bool;
        option = golfie.bind(zuuluu)();
        golfie = option.optional;
        option = golfie.bind(option)();
        golfie = option.allow;
        golfie = golfie.bind(option)(oscard);
        tangon['animated'] = golfie;
        report = report.bind(zuuluu)(tangon);
        tangon = report.allow;
        report = tangon.bind(report)(oscard);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['emoji'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['large_image'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['large_text'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['small_image'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['small_text'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['assets'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.number;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['start'] = oscard;
        oscard = zuuluu.number;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['end'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['timestamps'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['id'] = oscard;
        oscard = zuuluu.array;
        option = oscard.bind(zuuluu)();
        golfie = option.items;
        oscard = zuuluu.number;
        oscard = oscard.bind(zuuluu)();
        option = golfie.bind(option)(oscard);
        golfie = option.length;
        oscard = 2;
        golfie = golfie.bind(option)(oscard);
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['size'] = oscard;
        oscard = zuuluu.number;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['privacy'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['party'] = tangon;
        report = zuuluu.object;
        tangon = {};
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['match'] = oscard;
        oscard = zuuluu.string;
        golfie = oscard.bind(zuuluu)();
        oscard = golfie.optional;
        oscard = oscard.bind(golfie)();
        tangon['join'] = oscard;
        report = report.bind(zuuluu)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['secrets'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['sync_id'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['created_at'] = tangon;
        tangon = zuuluu.bool;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['instance'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['flags'] = tangon;
        tangon = zuuluu.object;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['metadata'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['platform'] = tangon;
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.items;
        tangon = zuuluu.string;
        tangon = tangon.bind(zuuluu)();
        report = report.bind(oscard)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['supported_platforms'] = tangon;
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.items;
        tangon = zuuluu.string;
        tangon = tangon.bind(zuuluu)();
        report = report.bind(oscard)(tangon);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['buttons'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['hangStatus'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot2 = tangon;
    tangon = function(argFoo) { // Original name: User
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        oscard = tangon.bind(report)();
        report = oscard.description;
        tangon = 'User ID';
        tangon = report.bind(oscard)(tangon);
        entity['id'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['username'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        oscard = null;
        golfie = tangon.bind(report)(oscard);
        report = golfie.description;
        tangon = 'Global Discord name. Not unique.';
        tangon = report.bind(golfie)(tangon);
        entity['global_name'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        golfie = tangon.bind(report)();
        report = golfie.description;
        tangon = 'Global name discriminator. Will be 0 if a unique username';
        tangon = report.bind(golfie)(tangon);
        entity['discriminator'] = tangon;
        tangon = zuuluu.string;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        golfie = tangon.bind(report)(oscard);
        report = golfie.description;
        tangon = 'User Avatar ID';
        tangon = report.bind(golfie)(tangon);
        entity['avatar'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        golfie = tangon.bind(report)();
        report = golfie.description;
        tangon = 'Public user flags';
        tangon = report.bind(golfie)(tangon);
        entity['flags'] = tangon;
        tangon = zuuluu.bool;
        report = tangon.bind(zuuluu)();
        tangon = report.required;
        golfie = tangon.bind(report)();
        report = golfie.description;
        tangon = 'If a bot user.';
        tangon = report.bind(golfie)(tangon);
        entity['bot'] = tangon;
        report = zuuluu.object;
        tangon = {};
        golfie = zuuluu.string;
        option = golfie.bind(zuuluu)();
        golfie = option.required;
        golfie = golfie.bind(option)();
        tangon['asset'] = golfie;
        golfie = zuuluu.string;
        golfie = golfie.bind(zuuluu)();
        tangon['skuId'] = golfie;
        golfie = zuuluu.number;
        golfie = golfie.bind(zuuluu)();
        tangon['expiresAt'] = golfie;
        report = report.bind(zuuluu)(tangon);
        tangon = report.allow;
        golfie = tangon.bind(report)(oscard);
        report = golfie.description;
        tangon = 'Details about avatar decoration';
        tangon = report.bind(golfie)(tangon);
        entity['avatar_decoration_data'] = tangon;
        tangon = zuuluu.number;
        report = tangon.bind(zuuluu)();
        tangon = report.allow;
        oscard = tangon.bind(report)(oscard);
        report = oscard.description;
        tangon = 'Nitro premium type';
        tangon = report.bind(oscard)(tangon);
        entity['premium_type'] = tangon;
        zuuluu = michal.bind(zuuluu)(entity);
        michal = zuuluu.description;
        entity = 'Discord User';
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot3 = tangon;
    tangon = function(argFoo) { // Original name: ActionRowComponent
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.number;
        oscard = tangon.bind(zuuluu)();
        report = oscard.valid;
        tangon = 1;
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['type'] = tangon;
        tangon = zuuluu.array;
        oscard = tangon.bind(zuuluu)();
        report = oscard.max;
        tangon = 5;
        oscard = report.bind(oscard)(tangon);
        report = oscard.items;
        golfie = _closure1_slot5;
        tangon = undefined;
        tangon = golfie.bind(tangon)(zuuluu);
        tangon = report.bind(oscard)(tangon);
        entity['components'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot4 = tangon;
    tangon = function(argFoo) { // Original name: ButtonComponent
        zuuluu = argFoo;
        michal = zuuluu.object;
        entity = {};
        tangon = zuuluu.number;
        oscard = tangon.bind(zuuluu)();
        report = oscard.valid;
        tangon = 2;
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['type'] = tangon;
        tangon = zuuluu.number;
        oscard = tangon.bind(zuuluu)();
        report = oscard.min;
        tangon = 1;
        oscard = report.bind(oscard)(tangon);
        report = oscard.max;
        tangon = 5;
        report = report.bind(oscard)(tangon);
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['style'] = tangon;
        tangon = zuuluu.string;
        oscard = tangon.bind(zuuluu)();
        report = oscard.max;
        tangon = 80;
        oscard = report.bind(oscard)(tangon);
        report = oscard.description;
        tangon = 'Text that appears on the button';
        tangon = report.bind(oscard)(tangon);
        entity['label'] = tangon;
        tangon = zuuluu.string;
        oscard = tangon.bind(zuuluu)();
        report = oscard.max;
        tangon = 100;
        oscard = report.bind(oscard)(tangon);
        report = oscard.description;
        tangon = 'Developer-defined identifier for the button; max 100 characters';
        tangon = report.bind(oscard)(tangon);
        entity['custom_id'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = '../discord_common/js/packages/rpc-schema/definitions.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['RPCCommandSchemas'] = michal;
    return entity;
})();