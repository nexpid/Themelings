// discord_common/js/packages/i18n/markdownRules.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    verify = 0;
    mike = oscar[verify];
    entity = undefined;
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    output = mike.newline;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    sizing = mike.paragraph;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    backup = mike.url;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    kilo = mike.link;
    var _closure1_slot0 = kilo;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    foxtrot = mike.strong;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    romeo = mike.u;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    yankee = mike.br;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    offset = mike.em;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    golf = mike.image;
    mike = oscar[verify];
    mike = report.bind(entity)(mike);
    mike = mike.defaultRules;
    tango = mike.text;
    mike = {};
    mike['newline'] = output;
    mike['paragraph'] = sizing;
    mike['url'] = backup;
    backup = {};
    update = backup;
    echo = kilo;
    kilo = copyDataProperties(update, echo);
    sizing = function(argFoo, argBar, argBaz) { // Original name: parse
        mike = argBaz;
        report = _closure1_slot0;
        tango = report.parse;
        zulu = argFoo;
        entity = argBar;
        entity = tango.bind(report)(zulu, entity, mike);
        mike = mike.context;
        entity['context'] = mike;
        return entity;
    };
    kilo = 'parse';
    backup[kilo] = sizing;
    mike['link'] = backup;
    mike['strong'] = foxtrot;
    mike['u'] = romeo;
    mike['br'] = yankee;
    mike['em'] = offset;
    mike['image'] = golf;
    golf = {};
    offset = tango.order;
    golf['order'] = offset;
    offset = oscar[verify];
    romeo = report.bind(entity)(offset);
    yankee = romeo.inlineRegex;
    offset = /^\$\[(.*?)\]\((\w+)\)/;
    offset = yankee.bind(romeo)(offset);
    golf['match'] = offset;
    offset = function(argFoo, argBar, argBaz) { // Original name: parse
        zulu = argFoo;
        report = argBaz;
        entity = {};
        tango = report.context;
        mike = 2;
        mike = zulu[mike];
        mike = tango[mike];
        entity['render'] = mike;
        mike = 1;
        tango = zulu[mike];
        zulu = argBar;
        mike = undefined;
        mike = zulu.bind(mike)(tango, report);
        entity['content'] = mike;
        return entity;
    };
    golf['parse'] = offset;
    offset = function(argFoo, argBar, argBaz) { // Original name: react
        tango = argFoo;
        entity = argBaz;
        zulu = tango.render;
        oscar = tango.content;
        report = argBar;
        mike = undefined;
        mike = report.bind(mike)(oscar, entity);
        entity = entity.key;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    golf['react'] = offset;
    mike['hook'] = golf;
    golf = {};
    offset = tango.order;
    golf['order'] = offset;
    verify = oscar[verify];
    yankee = report.bind(entity)(verify);
    offset = yankee.inlineRegex;
    verify = /^!!(\d+?)!!/;
    verify = offset.bind(yankee)(verify);
    golf['match'] = verify;
    verify = function(argFoo, argBar, argBaz) { // Original name: parse
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argBaz;
            mike = entity.unsafeContext;
            zulu = argFoo;
            entity = 1;
            entity = zulu[entity];
            tango = mike[entity];
            zulu = 'string';
            entity = typeof tango;
            mike = tango;
            if(!(zulu !== entity)) { _fun00002_ip = 62; continue _fun00001 }
 37:
            entity = null;
            zulu = entity != tango;
            entity = '';
            if(!zulu) { _fun00002_ip = 59; continue _fun00001 }
 50:
            zulu = tango.toString;
            entity = zulu.bind(tango)();
 59:
            mike = entity;
 62:
            entity = {};
            zulu = 'text';
            entity['type'] = zulu;
            entity['content'] = mike;
            return entity;
        }
    };
    golf['parse'] = verify;
    options = function(argFoo) { // Original name: react
        entity = argFoo;
        entity = entity.content;
        return entity;
    };
    golf['react'] = options;
    mike['noparse'] = golf;
    mike['text'] = tango;
    tango = 1;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = '../discord_common/js/packages/i18n/markdownRules.tsx';
    tango = report.bind(oscar)(tango);
    zulu['rules'] = mike;
    return entity;
})();