// discord_common/js/packages/i18n/markdownRules.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    verify = 0;
    michal = oscard[verify];
    entity = undefined;
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    output = michal.newline;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    sizing = michal.paragraph;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    backup = michal.url;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    kiloes = michal.link;
    var _closure1_slot0 = kiloes;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    foxtra = michal.strong;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    romeon = michal.u;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    yankee = michal.br;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    offset = michal.em;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    golfie = michal.image;
    michal = oscard[verify];
    michal = report.bind(entity)(michal);
    michal = michal.defaultRules;
    tangon = michal.text;
    michal = {};
    michal['newline'] = output;
    michal['paragraph'] = sizing;
    michal['url'] = backup;
    backup = {};
    update = backup;
    echoed = kiloes;
    kiloes = copyDataProperties(update, echoed);
    sizing = function(argFoo, argBar, argBaz) { // Original name: parse
        michal = argBaz;
        report = _closure1_slot0;
        tangon = report.parse;
        zuuluu = argFoo;
        entity = argBar;
        entity = tangon.bind(report)(zuuluu, entity, michal);
        michal = michal.context;
        entity['context'] = michal;
        return entity;
    };
    kiloes = 'parse';
    backup[kiloes] = sizing;
    michal['link'] = backup;
    michal['strong'] = foxtra;
    michal['u'] = romeon;
    michal['br'] = yankee;
    michal['em'] = offset;
    michal['image'] = golfie;
    golfie = {};
    offset = tangon.order;
    golfie['order'] = offset;
    offset = oscard[verify];
    romeon = report.bind(entity)(offset);
    yankee = romeon.inlineRegex;
    offset = /^\$\[(.*?)\]\((\w+)\)/;
    offset = yankee.bind(romeon)(offset);
    golfie['match'] = offset;
    offset = function(argFoo, argBar, argBaz) { // Original name: parse
        zuuluu = argFoo;
        report = argBaz;
        entity = {};
        tangon = report.context;
        michal = 2;
        michal = zuuluu[michal];
        michal = tangon[michal];
        entity['render'] = michal;
        michal = 1;
        tangon = zuuluu[michal];
        zuuluu = argBar;
        michal = undefined;
        michal = zuuluu.bind(michal)(tangon, report);
        entity['content'] = michal;
        return entity;
    };
    golfie['parse'] = offset;
    offset = function(argFoo, argBar, argBaz) { // Original name: react
        tangon = argFoo;
        entity = argBaz;
        zuuluu = tangon.render;
        oscard = tangon.content;
        report = argBar;
        michal = undefined;
        michal = report.bind(michal)(oscard, entity);
        entity = entity.key;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    golfie['react'] = offset;
    michal['hook'] = golfie;
    golfie = {};
    offset = tangon.order;
    golfie['order'] = offset;
    verify = oscard[verify];
    yankee = report.bind(entity)(verify);
    offset = yankee.inlineRegex;
    verify = /^!!(\d+?)!!/;
    verify = offset.bind(yankee)(verify);
    golfie['match'] = verify;
    verify = function(argFoo, argBar, argBaz) { // Original name: parse
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argBaz;
            michal = entity.unsafeContext;
            zuuluu = argFoo;
            entity = 1;
            entity = zuuluu[entity];
            tangon = michal[entity];
            zuuluu = 'string';
            entity = typeof tangon;
            michal = tangon;
            if(!(zuuluu !== entity)) { _fun00002_ip = 62; continue _fun00001 }
 37:
            entity = null;
            zuuluu = entity != tangon;
            entity = '';
            if(!zuuluu) { _fun00002_ip = 59; continue _fun00001 }
 50:
            zuuluu = tangon.toString;
            entity = zuuluu.bind(tangon)();
 59:
            michal = entity;
 62:
            entity = {};
            zuuluu = 'text';
            entity['type'] = zuuluu;
            entity['content'] = michal;
            return entity;
        }
    };
    golfie['parse'] = verify;
    option = function(argFoo) { // Original name: react
        entity = argFoo;
        entity = entity.content;
        return entity;
    };
    golfie['react'] = option;
    michal['noparse'] = golfie;
    michal['text'] = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = '../discord_common/js/packages/i18n/markdownRules.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['rules'] = michal;
    return entity;
})();