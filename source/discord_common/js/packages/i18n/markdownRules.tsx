// discord_common/js/packages/i18n/markdownRules.tsx
export default (function(native1, native2, native3, native4, native5, native6, native7) {
    var5 = native2;
    var3 = native6;
    var6 = native7;
    var1 = global;
    var7 = var1.Object;
    var4 = var7.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var4.bind(var7)(var3, var1, var2);
    var9 = 0;
    var2 = var6[var9];
    var1 = undefined;
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var17 = var2.newline;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var16 = var2.paragraph;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var14 = var2.url;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var15 = var2.link;
    var _closure1_slot0 = var15;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var13 = var2.strong;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var12 = var2.u;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var11 = var2.br;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var10 = var2.em;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var7 = var2.image;
    var2 = var6[var9];
    var2 = var5.bind(var1)(var2);
    var2 = var2.defaultRules;
    var4 = var2.text;
    var2 = {};
    var2['newline'] = var17;
    var2['paragraph'] = var16;
    var2['url'] = var14;
    var14 = {};
    var20 = var14;
    var19 = var15;
    var15 = copyDataProperties(var20, var19);
    var16 = function parse(arg1, arg2, arg3) {
        var2 = arg3;
        var5 = _closure1_slot0;
        var4 = var5.parse;
        var3 = arg1;
        var1 = arg2;
        var1 = var4.bind(var5)(var3, var1, var2);
        var2 = var2.context;
        var1['context'] = var2;
        return var1;
    };
    var15 = 'parse';
    var14[var15] = var16;
    var2['link'] = var14;
    var2['strong'] = var13;
    var2['u'] = var12;
    var2['br'] = var11;
    var2['em'] = var10;
    var2['image'] = var7;
    var7 = {};
    var10 = var4.order;
    var7['order'] = var10;
    var10 = var6[var9];
    var12 = var5.bind(var1)(var10);
    var11 = var12.inlineRegex;
    var10 = /^\$\[(.*?)\]\((\w+)\)/;
    var10 = var11.bind(var12)(var10);
    var7['match'] = var10;
    var10 = function parse(arg1, arg2, arg3) {
        var3 = arg1;
        var5 = arg3;
        var1 = {};
        var4 = var5.context;
        var2 = 2;
        var2 = var3[var2];
        var2 = var4[var2];
        var1['render'] = var2;
        var2 = 1;
        var4 = var3[var2];
        var3 = arg2;
        var2 = undefined;
        var2 = var3.bind(var2)(var4, var5);
        var1['content'] = var2;
        return var1;
    };
    var7['parse'] = var10;
    var10 = function react(arg1, arg2, arg3) {
        var4 = arg1;
        var1 = arg3;
        var3 = var4.render;
        var6 = var4.content;
        var5 = arg2;
        var2 = undefined;
        var2 = var5.bind(var2)(var6, var1);
        var1 = var1.key;
        var1 = var3.bind(var4)(var2, var1);
        return var1;
    };
    var7['react'] = var10;
    var2['hook'] = var7;
    var7 = {};
    var10 = var4.order;
    var7['order'] = var10;
    var9 = var6[var9];
    var11 = var5.bind(var1)(var9);
    var10 = var11.inlineRegex;
    var9 = /^!!(\d+?)!!/;
    var9 = var10.bind(var11)(var9);
    var7['match'] = var9;
    var9 = function parse(arg1, arg2, arg3) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var1 = arg3;
            var2 = var1.unsafeContext;
            var3 = arg1;
            var1 = 1;
            var1 = var3[var1];
            var4 = var2[var1];
            var3 = 'string';
            var1 = typeof var4;
            var2 = var4;
            if(!(var3 !== var1)) { _fun0001_ip = 62; continue _fun0001 }
 37:
            var1 = null;
            var3 = var1 != var4;
            var1 = '';
            if(!var3) { _fun0001_ip = 59; continue _fun0001 }
 50:
            var3 = var4.toString;
            var1 = var3.bind(var4)();
 59:
            var2 = var1;
 62:
            var1 = {};
            var3 = 'text';
            var1['type'] = var3;
            var1['content'] = var2;
            return var1;
        }
    };
    var7['parse'] = var9;
    var8 = function react(arg1) {
        var1 = arg1;
        var1 = var1.content;
        return var1;
    };
    var7['react'] = var8;
    var2['noparse'] = var7;
    var2['text'] = var4;
    var4 = 1;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = '../discord_common/js/packages/i18n/markdownRules.tsx';
    var4 = var5.bind(var6)(var4);
    var3['rules'] = var2;
    return var1;
})();