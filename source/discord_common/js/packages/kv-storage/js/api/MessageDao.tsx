// discord_common/js/packages/kv-storage/js/api/MessageDao.tsx
export default (function(argFoo, argBar, argBaz, argCorge, argGrault, argFred, argPlugh) {
    oscar = argBar;
    tango = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = golf;
    entity = function(argFoo, argBar, argBaz) { // Original name: makeCell
        zulu = argBaz;
        tango = _closure1_slot6;
        mike = zulu.id;
        entity = undefined;
        mike = tango.bind(entity)(mike);
        entity = {};
        tango = new Array(3);
        report = argFoo;
        tango[0] = report;
        report = argBar;
        tango[1] = report;
        tango[2] = mike;
        entity['key'] = tango;
        entity['data'] = zulu;
        entity['generation'] = mike;
        return entity;
    };
    var _closure1_slot5 = entity;
    entity = function(argFoo) { // Original name: makeStorageId
        tango = argFoo;
        zulu = tango.padStart;
        mike = 19;
        entity = '0';
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot6 = entity;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, mike);
    entity = 0;
    mike = golf[entity];
    entity = undefined;
    mike = tango.bind(entity)(mike);
    var _closure1_slot2 = mike;
    mike = 1;
    mike = golf[mike];
    mike = tango.bind(entity)(mike);
    var _closure1_slot3 = mike;
    mike = function() {
        tango = function(argFoo, argBar, argBaz) { // Original name: MessageDao
            _fun38071: for(var _fun38071_ip = 0; ; ) switch(_fun38071_ip) {
 0:
                mike = argFoo;
                options = arguments[3];
                zulu = this;
                entity = undefined;
                if(!(options === entity)) { _fun38071_ip = 17; continue _fun38071 }
 15:
                options = true;
 17:
                oscar = _closure1_slot2;
                report = _closure2_slot0;
                report = oscar.bind(entity)(zulu, report);
                zulu['originalPrefix'] = mike;
                report = _closure1_slot0;
                oscar = _closure1_slot1;
                tango = 2;
                tango = oscar[tango];
                tango = report.bind(entity)(tango);
                golf = tango.Table;
                oscar = new Array(1);
                oscar[0] = mike;
                mike = golf.prototype;
                tango = Object.create(mike, {constructor: {value: golf}});
                yankee = argBar;
                offset = argBaz;
                foxtrot = tango;
                romeo = oscar;
                verify = options;
                mike = new foxtrot[golf](romeo, yankee, offset, verify, options);
                mike = mike instanceof Object ? mike : tango;
                zulu['table'] = mike;
                return entity;
            }
        };
        var _closure2_slot0 = tango;
        zulu = _closure1_slot3;
        entity = {};
        mike = 'prefix';
        entity['key'] = mike;
        mike = function() { // Original name: get
            entity = this;
            entity = entity.table;
            entity = entity.prefix;
            return entity;
        };
        entity['get'] = mike;
        mike = new Array(14);
        mike[0] = entity;
        entity = {};
        oscar = 'withoutLogging';
        entity['key'] = oscar;
        oscar = function() { // Original name: value
            entity = this;
            oscar = _closure2_slot0;
            offset = entity.originalPrefix;
            mike = entity.table;
            verify = mike.tableId;
            entity = entity.table;
            options = entity.database;
            entity = oscar.prototype;
            mike = Object.create(entity, {constructor: {value: oscar}});
            golf = false;
            yankee = mike;
            entity = new yankee[oscar](offset, verify, options, golf, oscar);
            entity = entity instanceof Object ? entity : mike;
            return entity;
        };
        entity['value'] = oscar;
        mike[1] = entity;
        entity = {};
        oscar = 'get';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar, argBaz) { // Original name: value
            entity = this;
            zulu = entity.table;
            mike = zulu.get;
            entity = new Array(3);
            tango = argFoo;
            entity[0] = tango;
            tango = argBar;
            entity[1] = tango;
            oscar = _closure1_slot6;
            report = undefined;
            tango = argBaz;
            tango = oscar.bind(report)(tango);
            entity[2] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[2] = entity;
        entity = {};
        oscar = 'getLatest';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar, argBaz) { // Original name: value
            entity = this;
            tango = entity.table;
            zulu = tango.getMany;
            mike = new Array(2);
            entity = argFoo;
            mike[0] = entity;
            entity = argBar;
            mike[1] = entity;
            entity = {};
            golf = _closure1_slot0;
            oscar = _closure1_slot1;
            report = 3;
            oscar = oscar[report];
            report = undefined;
            report = golf.bind(report)(oscar);
            report = report.Ordering;
            report = report.Descending;
            entity['ordering'] = report;
            report = argBaz;
            entity['limit'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[3] = entity;
        entity = {};
        oscar = 'getRange';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar, argBaz, argCorge, argGrault) { // Original name: value
            options = argFoo;
            entity = argBar;
            mike = this;
            report = mike.table;
            tango = report.getRange;
            zulu = new Array(3);
            zulu[0] = options;
            zulu[1] = entity;
            golf = _closure1_slot6;
            oscar = undefined;
            mike = argBaz;
            mike = golf.bind(oscar)(mike);
            zulu[2] = mike;
            mike = new Array(3);
            mike[0] = options;
            mike[1] = entity;
            entity = argCorge;
            entity = golf.bind(oscar)(entity);
            mike[2] = entity;
            entity = argGrault;
            entity = tango.bind(report)(zulu, mike, entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[4] = entity;
        entity = {};
        oscar = 'getMostRecents';
        entity['key'] = oscar;
        oscar = function(argFoo) { // Original name: value
            entity = this;
            entity = entity.table;
            zulu = entity.messages;
            mike = zulu.getLatest;
            entity = argFoo;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[5] = entity;
        entity = {};
        oscar = 'put';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar, argBaz) { // Original name: value
            _fun38078: for(var _fun38078_ip = 0; ; ) switch(_fun38078_ip) {
 0:
                tango = arguments[3];
                options = undefined;
                if(!(tango === options)) { _fun38078_ip = 44; continue _fun38078 }
 9:
                mike = _closure1_slot0;
                zulu = _closure1_slot1;
                entity = 3;
                entity = zulu[entity];
                entity = mike.bind(options)(entity);
                entity = entity.ConflictOptions;
                tango = entity.Replace;
 44:
                entity = this;
                zulu = entity.table;
                mike = zulu.put;
                golf = _closure1_slot5;
                oscar = argFoo;
                report = argBar;
                entity = argBaz;
                entity = golf.bind(options)(oscar, report, entity);
                entity = mike.bind(zulu)(entity, tango);
                return entity;
            }
        };
        entity['value'] = oscar;
        mike[6] = entity;
        entity = {};
        oscar = 'putAll';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar, argBaz) { // Original name: value
            _fun38079: for(var _fun38079_ip = 0; ; ) switch(_fun38079_ip) {
 0:
                zulu = argBaz;
                tango = arguments[3];
                mike = argFoo;
                var _closure3_slot0 = mike;
                mike = argBar;
                var _closure3_slot1 = mike;
                oscar = undefined;
                if(!(tango === oscar)) { _fun38079_ip = 63; continue _fun38079 }
 28:
                report = _closure1_slot0;
                golf = _closure1_slot1;
                mike = 3;
                mike = golf[mike];
                mike = report.bind(oscar)(mike);
                mike = mike.ConflictOptions;
                tango = mike.Replace;
 63:
                mike = zulu.map;
                entity = function(argFoo) {
                    report = _closure1_slot5;
                    tango = _closure3_slot0;
                    zulu = _closure3_slot1;
                    mike = undefined;
                    entity = argFoo;
                    entity = report.bind(mike)(tango, zulu, entity);
                    return entity;
                };
                zulu = mike.bind(zulu)(entity);
                entity = this;
                mike = entity.table;
                entity = mike.putAll;
                entity = entity.bind(mike)(zulu, tango);
                return entity;
            }
        };
        entity['value'] = oscar;
        mike[7] = entity;
        entity = {};
        oscar = 'deleteAll';
        entity['key'] = oscar;
        oscar = function() { // Original name: value
            entity = this;
            mike = entity.table;
            entity = mike.delete;
            entity = entity.bind(mike)();
            return entity;
        };
        entity['value'] = oscar;
        mike[8] = entity;
        entity = {};
        oscar = 'deleteGuild';
        entity['key'] = oscar;
        oscar = function(argFoo) { // Original name: value
            entity = this;
            zulu = entity.table;
            mike = zulu.delete;
            entity = new Array(1);
            tango = argFoo;
            entity[0] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[9] = entity;
        entity = {};
        oscar = 'deleteChannel';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar) { // Original name: value
            entity = this;
            zulu = entity.table;
            mike = zulu.delete;
            entity = new Array(2);
            tango = argFoo;
            entity[0] = tango;
            tango = argBar;
            entity[1] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[10] = entity;
        entity = {};
        oscar = 'deleteMessage';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar, argBaz) { // Original name: value
            entity = this;
            zulu = entity.table;
            mike = zulu.delete;
            entity = new Array(3);
            tango = argFoo;
            entity[0] = tango;
            tango = argBar;
            entity[1] = tango;
            oscar = _closure1_slot6;
            report = undefined;
            tango = argBaz;
            tango = oscar.bind(report)(tango);
            entity[2] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[11] = entity;
        entity = {};
        oscar = 'transaction';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar) { // Original name: value
            mike = argFoo;
            var _closure3_slot0 = mike;
            mike = this;
            tango = mike.table;
            zulu = tango.transaction;
            mike = function(argFoo) {
                zulu = _closure3_slot0;
                tango = _closure1_slot4;
                entity = tango.prototype;
                mike = Object.create(entity, {constructor: {value: tango}});
                report = argFoo;
                oscar = mike;
                entity = new oscar[tango](report, tango);
                mike = entity instanceof Object ? entity : mike;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            entity = argBar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        };
        entity['value'] = oscar;
        mike[12] = entity;
        entity = {};
        oscar = 'upgradeTransaction';
        entity['key'] = oscar;
        report = function(argFoo) { // Original name: value
            zulu = _closure1_slot4;
            entity = this;
            tango = entity.table;
            mike = tango.upgradeTransaction;
            entity = argFoo;
            report = mike.bind(tango)(entity);
            mike = zulu.prototype;
            mike = Object.create(mike, {constructor: {value: zulu}});
            oscar = mike;
            entity = new oscar[zulu](report, tango);
            entity = entity instanceof Object ? entity : mike;
            return entity;
        };
        entity['value'] = report;
        mike[13] = entity;
        entity = undefined;
        entity = zulu.bind(entity)(tango, mike);
        return entity;
    };
    tango = mike.bind(entity)();
    mike = function() {
        report = function(argFoo) { // Original name: MessageDaoTransaction
            zulu = this;
            tango = _closure1_slot2;
            mike = _closure2_slot0;
            entity = undefined;
            mike = tango.bind(entity)(zulu, mike);
            mike = argFoo;
            zulu['transaction'] = mike;
            return entity;
        };
        var _closure2_slot0 = report;
        tango = _closure1_slot3;
        entity = {};
        mike = 'put';
        entity['key'] = mike;
        mike = function(argFoo, argBar, argBaz) { // Original name: value
            _fun38090: for(var _fun38090_ip = 0; ; ) switch(_fun38090_ip) {
 0:
                report = arguments[3];
                entity = undefined;
                if(!(report === entity)) { _fun38090_ip = 44; continue _fun38090 }
 9:
                zulu = _closure1_slot0;
                tango = _closure1_slot1;
                mike = 3;
                mike = tango[mike];
                mike = zulu.bind(entity)(mike);
                mike = mike.ConflictOptions;
                report = mike.Replace;
 44:
                mike = this;
                tango = mike.transaction;
                zulu = tango.put;
                options = _closure1_slot5;
                golf = argFoo;
                oscar = argBar;
                mike = argBaz;
                mike = options.bind(entity)(golf, oscar, mike);
                mike = zulu.bind(tango)(mike, report);
                return entity;
            }
        };
        entity['value'] = mike;
        zulu = new Array(11);
        zulu[0] = entity;
        entity = {};
        mike = 'putAll';
        entity['key'] = mike;
        mike = function(argFoo, argBar, argBaz) { // Original name: value
            _fun38091: for(var _fun38091_ip = 0; ; ) switch(_fun38091_ip) {
 0:
                tango = argBaz;
                report = arguments[3];
                entity = argFoo;
                var _closure3_slot0 = entity;
                entity = argBar;
                var _closure3_slot1 = entity;
                entity = undefined;
                if(!(report === entity)) { _fun38091_ip = 63; continue _fun38091 }
 28:
                oscar = _closure1_slot0;
                golf = _closure1_slot1;
                zulu = 3;
                zulu = golf[zulu];
                zulu = oscar.bind(entity)(zulu);
                zulu = zulu.ConflictOptions;
                report = zulu.Replace;
 63:
                zulu = tango.map;
                mike = function(argFoo) {
                    report = _closure1_slot5;
                    tango = _closure3_slot0;
                    zulu = _closure3_slot1;
                    mike = undefined;
                    entity = argFoo;
                    entity = report.bind(mike)(tango, zulu, entity);
                    return entity;
                };
                tango = zulu.bind(tango)(mike);
                mike = this;
                zulu = mike.transaction;
                mike = zulu.putAll;
                mike = mike.bind(zulu)(tango, report);
                return entity;
            }
        };
        entity['value'] = mike;
        zulu[1] = entity;
        entity = {};
        mike = 'replaceAll';
        entity['key'] = mike;
        mike = function(argFoo, argBar, argBaz) { // Original name: value
            zulu = argBaz;
            mike = argFoo;
            var _closure3_slot0 = mike;
            mike = argBar;
            var _closure3_slot1 = mike;
            mike = zulu.map;
            entity = function(argFoo) {
                report = _closure1_slot5;
                tango = _closure3_slot0;
                zulu = _closure3_slot1;
                mike = undefined;
                entity = argFoo;
                entity = report.bind(mike)(tango, zulu, entity);
                return entity;
            };
            zulu = mike.bind(zulu)(entity);
            entity = this;
            mike = entity.transaction;
            entity = mike.replaceAll;
            entity = entity.bind(mike)(zulu);
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[2] = entity;
        entity = {};
        mike = 'deleteAll';
        entity['key'] = mike;
        mike = function() { // Original name: value
            entity = this;
            mike = entity.transaction;
            entity = mike.delete;
            entity = entity.bind(mike)();
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[3] = entity;
        entity = {};
        mike = 'deleteGuild';
        entity['key'] = mike;
        mike = function(argFoo) { // Original name: value
            entity = this;
            zulu = entity.transaction;
            mike = zulu.delete;
            entity = new Array(1);
            tango = argFoo;
            entity[0] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[4] = entity;
        entity = {};
        mike = 'deleteChannel';
        entity['key'] = mike;
        mike = function(argFoo, argBar) { // Original name: value
            entity = this;
            zulu = entity.transaction;
            mike = zulu.delete;
            entity = new Array(2);
            tango = argFoo;
            entity[0] = tango;
            tango = argBar;
            entity[1] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[5] = entity;
        entity = {};
        mike = 'deleteMessage';
        entity['key'] = mike;
        mike = function(argFoo, argBar, argBaz) { // Original name: value
            entity = this;
            tango = entity.transaction;
            zulu = tango.delete;
            mike = new Array(3);
            entity = argFoo;
            mike[0] = entity;
            entity = argBar;
            mike[1] = entity;
            oscar = _closure1_slot6;
            entity = undefined;
            report = argBaz;
            report = oscar.bind(entity)(report);
            mike[2] = report;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity['value'] = mike;
        zulu[6] = entity;
        entity = {};
        mike = 'trimOrphans';
        entity['key'] = mike;
        mike = function(argFoo) { // Original name: value
            entity = this;
            entity = entity.transaction;
            zulu = entity.messages;
            mike = zulu.trimOrphans;
            entity = argFoo;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[7] = entity;
        entity = {};
        mike = 'trimChannel';
        entity['key'] = mike;
        mike = function(argFoo, argBar, argBaz) { // Original name: value
            entity = this;
            entity = entity.transaction;
            tango = entity.messages;
            zulu = tango.trimChannel;
            mike = new Array(2);
            entity = argFoo;
            mike[0] = entity;
            entity = argBar;
            mike[1] = entity;
            entity = argBaz;
            entity = zulu.bind(tango)(mike, entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[8] = entity;
        entity = {};
        mike = 'trimChannelsIn';
        entity['key'] = mike;
        mike = function(argFoo, argBar) { // Original name: value
            entity = this;
            entity = entity.transaction;
            tango = entity.messages;
            zulu = tango.trimChannelsIn;
            mike = argFoo;
            entity = argBar;
            entity = zulu.bind(tango)(mike, entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[9] = entity;
        entity = {};
        mike = 'trimChannelsNotIn';
        entity['key'] = mike;
        mike = function(argFoo, argBar) { // Original name: value
            entity = this;
            entity = entity.transaction;
            tango = entity.messages;
            zulu = tango.trimChannelsNotIn;
            mike = argFoo;
            entity = argBar;
            entity = zulu.bind(tango)(mike, entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = mike;
        zulu[10] = entity;
        entity = {};
        mike = 'fromTableTransaction';
        entity['key'] = mike;
        mike = function(argFoo) { // Original name: value
            zulu = _closure2_slot0;
            entity = zulu.prototype;
            mike = Object.create(entity, {constructor: {value: zulu}});
            tango = argFoo;
            report = mike;
            entity = new report[zulu](tango, zulu);
            entity = entity instanceof Object ? entity : mike;
            return entity;
        };
        entity['value'] = mike;
        mike = new Array(2);
        mike[0] = entity;
        entity = {};
        golf = 'fromDatabaseTransaction';
        entity['key'] = golf;
        oscar = function(argFoo, argBar, argBaz) { // Original name: value
            zulu = _closure2_slot0;
            tango = _closure1_slot0;
            mike = _closure1_slot1;
            entity = 2;
            mike = mike[entity];
            entity = undefined;
            entity = tango.bind(entity)(mike);
            oscar = entity.TableTransaction;
            entity = oscar.prototype;
            mike = Object.create(entity, {constructor: {value: oscar}});
            verify = argFoo;
            options = argBar;
            golf = argBaz;
            offset = mike;
            entity = new offset[oscar](verify, options, golf, oscar);
            verify = entity instanceof Object ? entity : mike;
            mike = zulu.prototype;
            mike = Object.create(mike, {constructor: {value: zulu}});
            offset = mike;
            entity = new offset[zulu](verify, options);
            entity = entity instanceof Object ? entity : mike;
            return entity;
        };
        entity['value'] = oscar;
        mike[1] = entity;
        entity = undefined;
        entity = tango.bind(entity)(report, zulu, mike);
        return entity;
    };
    mike = mike.bind(entity)();
    var _closure1_slot4 = mike;
    report = 4;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = '../discord_common/js/packages/kv-storage/js/api/MessageDao.tsx';
    report = oscar.bind(golf)(report);
    zulu['MessageDao'] = tango;
    zulu['MessageDaoTransaction'] = mike;
    return entity;
})();