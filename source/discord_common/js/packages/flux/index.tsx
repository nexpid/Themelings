// discord_common/js/packages/flux/index.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = require;
    var11 = metroImportDefault;
    var3 = exports;
    var7 = dependencyMap;
    var4 = function initialize() {
        var2 = _closure1_slot1;
        var1 = var2.initialize;
        var1 = var1.bind(var2)();
        var1 = undefined;
        return var1;
    };
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var5 = {};
    var1 = true;
    var5['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var5);
    var1 = 0;
    var5 = var7[var1];
    var1 = undefined;
    var5 = var6.bind(var1)(var5);
    var13 = var5.PersistedStore;
    var _closure1_slot0 = var13;
    var12 = var5.DeviceSettingsStore;
    var10 = var5.OfflineCacheStore;
    var5 = 1;
    var5 = var7[var5];
    var5 = var6.bind(var1)(var5);
    var8 = var5.Store;
    var _closure1_slot1 = var8;
    var5 = 2;
    var5 = var7[var5];
    var5 = var6.bind(var1)(var5);
    var5 = var5.createFetchStore;
    var9 = {};
    var14 = 3;
    var14 = var7[var14];
    var14 = var11.bind(var1)(var14);
    var9['Emitter'] = var14;
    var9['Store'] = var8;
    var9['PersistedStore'] = var13;
    var9['DeviceSettingsStore'] = var12;
    var9['OfflineCacheStore'] = var10;
    var10 = 4;
    var10 = var7[var10];
    var10 = var11.bind(var1)(var10);
    var9['connectStores'] = var10;
    var9['initialize'] = var4;
    var11 = function get initialized() {
        var1 = _closure1_slot1;
        var1 = var1.initialized;
        return var1;
    };
    var10 = 'initialized';
    Object.defineProperty(var9, var10, {get: var11, set: var1, enumerable: true});
    var10 = 5;
    var10 = var7[var10];
    var12 = var6.bind(var1)(var10);
    var11 = var12.fileFinishedImporting;
    var10 = '../discord_common/js/packages/flux/index.tsx';
    var10 = var11.bind(var12)(var10);
    var3['default'] = var9;
    var3['Store'] = var8;
    var8 = 6;
    var8 = var7[var8];
    var8 = var6.bind(var1)(var8);
    var8 = var8.Dispatcher;
    var3['Dispatcher'] = var8;
    var8 = 7;
    var8 = var7[var8];
    var8 = var6.bind(var1)(var8);
    var8 = var8.BatchedStoreListener;
    var3['BatchedStoreListener'] = var8;
    var3['createFetchStore'] = var5;
    var5 = 8;
    var8 = var7[var5];
    var8 = var6.bind(var1)(var8);
    var8 = var8.statesWillNeverBeEqual;
    var3['statesWillNeverBeEqual'] = var8;
    var8 = var7[var5];
    var8 = var6.bind(var1)(var8);
    var8 = var8.useStateFromStores;
    var3['useStateFromStores'] = var8;
    var8 = var7[var5];
    var8 = var6.bind(var1)(var8);
    var8 = var8.useStateFromStoresObject;
    var3['useStateFromStoresObject'] = var8;
    var5 = var7[var5];
    var5 = var6.bind(var1)(var5);
    var5 = var5.useStateFromStoresArray;
    var3['useStateFromStoresArray'] = var5;
    var3['initialize'] = var4;
    var2 = function destroy() {
        var2 = _closure1_slot0;
        var1 = var2.destroy;
        var1 = var1.bind(var2)();
        var1 = undefined;
        return var1;
    };
    var3['destroy'] = var2;
    return var1;
})();