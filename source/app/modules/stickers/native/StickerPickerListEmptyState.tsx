// app/modules/stickers/native/StickerPickerListEmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    yankee = 0;
    golf = oscar[yankee];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ScrollView;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.EXPRESSION_FOOTER_HEIGHT;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'padding': 0, 'flex': 1};
    tango['emptyStateContainer'] = offset;
    offset = {};
    romeo = 5;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_SECONDARY;
    offset['color'] = backup;
    tango['emptyStateBody'] = offset;
    offset = {};
    romeo = oscar[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    offset['marginBottom'] = romeo;
    offset['marginTop'] = yankee;
    tango['emptyStateImage'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot7 = tango;
    tango = golf.memo;
    mike = function(argFoo) { // Original name: StickerPickerListEmptyState
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zulu = argFoo;
            entity = zulu.inActionSheet;
            options = zulu.insetTop;
            var _closure2_slot0 = options;
            verify = zulu.insetBottom;
            var _closure2_slot1 = verify;
            zulu = _closure1_slot7;
            tango = undefined;
            golf = zulu.bind(tango)();
            oscar = _closure1_slot3;
            report = oscar.useMemo;
            zulu = new Array(2);
            zulu[0] = verify;
            zulu[1] = options;
            mike = function() {
                entity = {};
                tango = _closure2_slot1;
                zulu = _closure1_slot5;
                zulu = tango + zulu;
                entity['marginBottom'] = zulu;
                mike = _closure2_slot0;
                entity['marginTop'] = mike;
                mike = 1;
                entity['flex'] = mike;
                return entity;
            };
            report = report.bind(oscar)(mike, zulu);
            if(entity) { _fun00002_ip = 85; continue _fun00001 }
 79:
            zulu = _closure1_slot4;
            _fun00002_ip = 111; continue _fun00001;
 85:
            mike = _closure1_slot0;
            oscar = _closure1_slot2;
            entity = 6;
            entity = oscar[entity];
            entity = mike.bind(tango)(entity);
            zulu = entity.BottomSheetScrollView;
 111:
            mike = _closure1_slot6;
            entity = {};
            entity['contentContainerStyle'] = report;
            report = 'always';
            entity['keyboardShouldPersistTaps'] = report;
            options = _closure1_slot1;
            verify = _closure1_slot2;
            report = 7;
            report = verify[report];
            oscar = options.bind(tango)(report);
            report = {};
            foxtrot = _closure1_slot0;
            offset = 8;
            yankee = verify[offset];
            yankee = foxtrot.bind(tango)(yankee);
            romeo = yankee.intl;
            yankee = romeo.string;
            offset = verify[offset];
            offset = foxtrot.bind(tango)(offset);
            offset = offset.t;
            offset = offset.jyiGfX;
            offset = yankee.bind(romeo)(offset);
            report['body'] = offset;
            offset = golf.emptyStateBody;
            report['bodyStyle'] = offset;
            offset = golf.emptyStateContainer;
            report['containerStyle'] = offset;
            golf = golf.emptyStateImage;
            report['imageStyle'] = golf;
            golf = 9;
            golf = verify[golf];
            golf = options.bind(tango)(golf);
            report['source'] = golf;
            golf = {};
            options = 0;
            golf['marginBottom'] = options;
            report['titleStyle'] = golf;
            report = mike.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = mike.bind(tango)(zulu, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/stickers/native/StickerPickerListEmptyState.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();