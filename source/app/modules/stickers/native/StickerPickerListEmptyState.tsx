// app/modules/stickers/native/StickerPickerListEmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    yankee = 0;
    golfie = oscard[yankee];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ScrollView;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.EXPRESSION_FOOTER_HEIGHT;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'padding': 0, 'flex': 1};
    tangon['emptyStateContainer'] = offset;
    offset = {};
    romeon = 5;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_SECONDARY;
    offset['color'] = backup;
    tangon['emptyStateBody'] = offset;
    offset = {};
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    offset['marginBottom'] = romeon;
    offset['marginTop'] = yankee;
    tangon['emptyStateImage'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot7 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: StickerPickerListEmptyState
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            entity = zuuluu.inActionSheet;
            option = zuuluu.insetTop;
            var _closure2_slot0 = option;
            verify = zuuluu.insetBottom;
            var _closure2_slot1 = verify;
            zuuluu = _closure1_slot7;
            tangon = undefined;
            golfie = zuuluu.bind(tangon)();
            oscard = _closure1_slot3;
            report = oscard.useMemo;
            zuuluu = new Array(2);
            zuuluu[0] = verify;
            zuuluu[1] = option;
            michal = function() {
                entity = {};
                tangon = _closure2_slot1;
                zuuluu = _closure1_slot5;
                zuuluu = tangon + zuuluu;
                entity['marginBottom'] = zuuluu;
                michal = _closure2_slot0;
                entity['marginTop'] = michal;
                michal = 1;
                entity['flex'] = michal;
                return entity;
            };
            report = report.bind(oscard)(michal, zuuluu);
            if(entity) { _fun00002_ip = 85; continue _fun00001 }
 79:
            zuuluu = _closure1_slot4;
            _fun00002_ip = 111; continue _fun00001;
 85:
            michal = _closure1_slot0;
            oscard = _closure1_slot2;
            entity = 6;
            entity = oscard[entity];
            entity = michal.bind(tangon)(entity);
            zuuluu = entity.BottomSheetScrollView;
 111:
            michal = _closure1_slot6;
            entity = {};
            entity['contentContainerStyle'] = report;
            report = 'always';
            entity['keyboardShouldPersistTaps'] = report;
            option = _closure1_slot1;
            verify = _closure1_slot2;
            report = 7;
            report = verify[report];
            oscard = option.bind(tangon)(report);
            report = {};
            foxtra = _closure1_slot0;
            offset = 8;
            yankee = verify[offset];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = verify[offset];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.jyiGfX;
            offset = yankee.bind(romeon)(offset);
            report['body'] = offset;
            offset = golfie.emptyStateBody;
            report['bodyStyle'] = offset;
            offset = golfie.emptyStateContainer;
            report['containerStyle'] = offset;
            golfie = golfie.emptyStateImage;
            report['imageStyle'] = golfie;
            golfie = 9;
            golfie = verify[golfie];
            golfie = option.bind(tangon)(golfie);
            report['source'] = golfie;
            golfie = {};
            option = 0;
            golfie['marginBottom'] = option;
            report['titleStyle'] = golfie;
            report = michal.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = michal.bind(tangon)(zuuluu, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stickers/native/StickerPickerListEmptyState.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();