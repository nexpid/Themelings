// app/modules/stickers/native/StickerPackHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    options = oscar[tango];
    options = report.bind(entity)(options);
    yankee = options.PADDING_HORIZONTAL;
    backup = options.PADDING_VERTICAL;
    options = 3;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.jsx;
    var _closure1_slot4 = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.jsxs;
    var _closure1_slot5 = verify;
    options = oscar[options];
    options = report.bind(entity)(options);
    options = options.Fragment;
    var _closure1_slot6 = options;
    foxtrot = tango * backup;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    offset['paddingTop'] = backup;
    offset['paddingHorizontal'] = yankee;
    yankee = 36;
    yankee = yankee + foxtrot;
    offset['height'] = yankee;
    yankee = 'center';
    offset['justifyContent'] = yankee;
    yankee = 'hidden';
    offset['overflow'] = yankee;
    yankee = 5;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtrot;
    tango['section'] = offset;
    offset = {};
    foxtrot = -1;
    offset['flex'] = foxtrot;
    tango['label'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    tango['header'] = offset;
    foxtrot = '100%';
    offset = {'aspectRatio': 3.824074074074074, 'marginVertical': 4294967288, 'width': '100%'};
    tango['bannerContainer'] = offset;
    offset = {};
    offset['height'] = foxtrot;
    tango['banner'] = offset;
    offset = {'height': 20, 'flex': 1, 'flexDirection': 'row', 'alignItems': 'center'};
    tango['headline'] = offset;
    offset = {'marginLeft': 8, 'height': 16, 'width': 16, 'borderRadius': null, 'backgroundColor': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.sm;
    offset['borderRadius'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_MODIFIER_ACCENT;
    offset['backgroundColor'] = foxtrot;
    tango['iconContainer'] = offset;
    offset = {};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.INTERACTIVE_NORMAL;
    offset['color'] = yankee;
    tango['icon'] = offset;
    offset = {'position': 'relative', 'left': 1};
    tango['animatedIcon'] = offset;
    offset = {'position': 'relative', 'left': 4294967295};
    tango['premiumIcon'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot7 = tango;
    tango = golf.memo;
    mike = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.stickerPack;
            foxtrot = entity.style;
            yankee = entity.onPress;
            oscar = entity.withBanner;
            tango = undefined;
            if(!(oscar === tango)) { _fun00002_ip = 33; continue _fun00001 }
 31:
            oscar = false;
 33:
            verify = entity.withDescription;
            if(!(verify === tango)) { _fun00002_ip = 45; continue _fun00001 }
 43:
            verify = false;
 45:
            entity = _closure1_slot7;
            romeo = entity.bind(tango)();
            zulu = _closure1_slot5;
            mike = _closure1_slot6;
            entity = {};
            kilo = _closure1_slot4;
            offset = _closure1_slot3;
            report = {};
            options = romeo.header;
            report['style'] = options;
            sizing = {};
            options = romeo.headline;
            sizing['style'] = options;
            echo = _closure1_slot0;
            update = _closure1_slot2;
            options = 6;
            output = update[options];
            output = echo.bind(tango)(output);
            result = output.Text;
            output = {'style': null, 'lineClamp': 1, 'variant': 'text-md/bold', 'color': 'header-primary'};
            source = romeo.label;
            output['style'] = source;
            source = backup.name;
            output['children'] = source;
            result = kilo.bind(tango)(result, output);
            output = new Array(3);
            output[0] = result;
            result = 7;
            result = update[result];
            echo = echo.bind(tango)(result);
            result = echo.isStickerPackAnimated;
            result = result.bind(echo)(backup);
            if(!result) { _fun00002_ip = 322; continue _fun00001 }
 199:
            source = _closure1_slot4;
            update = _closure1_slot3;
            echo = {};
            control = romeo.iconContainer;
            echo['style'] = control;
            config = _closure1_slot1;
            record = _closure1_slot2;
            sequence = 8;
            control = record[sequence];
            vacuum = config.bind(tango)(control);
            control = {};
            context = 9;
            context = record[context];
            context = config.bind(tango)(context);
            control['source'] = context;
            context = romeo.animatedIcon;
            control['style'] = context;
            sequence = record[sequence];
            sequence = config.bind(tango)(sequence);
            sequence = sequence.Sizes;
            sequence = sequence.EXTRA_SMALL;
            control['size'] = sequence;
            sequence = romeo.icon;
            sequence = sequence.color;
            control['color'] = sequence;
            control = source.bind(tango)(vacuum, control);
            echo['children'] = control;
            result = source.bind(tango)(update, echo);
 322:
            output[1] = result;
            update = _closure1_slot4;
            echo = _closure1_slot3;
            result = {};
            source = romeo.iconContainer;
            result['style'] = source;
            sequence = _closure1_slot1;
            config = _closure1_slot2;
            vacuum = 8;
            source = config[vacuum];
            control = sequence.bind(tango)(source);
            source = {};
            record = 10;
            record = config[record];
            record = sequence.bind(tango)(record);
            source['source'] = record;
            record = romeo.premiumIcon;
            source['style'] = record;
            vacuum = config[vacuum];
            vacuum = sequence.bind(tango)(vacuum);
            vacuum = vacuum.Sizes;
            vacuum = vacuum.EXTRA_SMALL;
            source['size'] = vacuum;
            vacuum = romeo.icon;
            vacuum = vacuum.color;
            source['color'] = vacuum;
            source = update.bind(tango)(control, source);
            result['children'] = source;
            result = update.bind(tango)(echo, result);
            output[2] = result;
            sizing['children'] = output;
            sizing = zulu.bind(tango)(offset, sizing);
            report['children'] = sizing;
            offset = kilo.bind(tango)(offset, report);
            report = new Array(3);
            report[0] = offset;
            if(!verify) { _fun00002_ip = 495; continue _fun00001 }
 484:
            kilo = backup.description;
            offset = null;
            verify = offset != kilo;
 495:
            if(!verify) { _fun00002_ip = 549; continue _fun00001 }
 498:
            sizing = _closure1_slot4;
            kilo = _closure1_slot0;
            offset = _closure1_slot2;
            offset = offset[options];
            offset = kilo.bind(tango)(offset);
            kilo = offset.Text;
            offset = {};
            output = 'text-sm/medium';
            offset['variant'] = output;
            output = backup.description;
            offset['children'] = output;
            verify = sizing.bind(tango)(kilo, offset);
 549:
            report[1] = verify;
            offset = _closure1_slot4;
            sizing = _closure1_slot0;
            echo = _closure1_slot2;
            options = echo[options];
            options = sizing.bind(tango)(options);
            verify = options.Text;
            options = {'lineClamp': 1, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
            kilo = 11;
            output = echo[kilo];
            output = sizing.bind(tango)(output);
            result = output.intl;
            output = result.format;
            kilo = echo[kilo];
            kilo = sizing.bind(tango)(kilo);
            kilo = kilo.t;
            sizing = kilo.0S3JpK;
            kilo = {};
            echo = backup.stickers;
            echo = echo.length;
            kilo['numStickers'] = echo;
            kilo = output.bind(result)(sizing, kilo);
            options['children'] = kilo;
            options = offset.bind(tango)(verify, options);
            report[2] = options;
            entity['children'] = report;
            offset = zulu.bind(tango)(mike, entity);
            zulu = _closure1_slot5;
            mike = _closure1_slot6;
            entity = {};
            if(!oscar) { _fun00002_ip = 752; continue _fun00001 }
 694:
            verify = _closure1_slot4;
            options = _closure1_slot1;
            kilo = _closure1_slot2;
            report = 12;
            report = kilo[report];
            options = options.bind(tango)(report);
            report = {};
            report['stickerPack'] = backup;
            backup = romeo.bannerContainer;
            report['containerStyle'] = backup;
            backup = romeo.banner;
            report['style'] = backup;
            oscar = verify.bind(tango)(options, report);
 752:
            report = new Array(2);
            report[0] = oscar;
            oscar = null;
            if(!(oscar == yankee)) { _fun00002_ip = 809; continue _fun00001 }
 766:
            verify = _closure1_slot4;
            options = _closure1_slot3;
            oscar = {};
            kilo = romeo.section;
            backup = new Array(2);
            backup[0] = kilo;
            backup[1] = foxtrot;
            oscar['style'] = backup;
            oscar['children'] = offset;
            oscar = verify.bind(tango)(options, oscar);
            _fun00002_ip = 884; continue _fun00001;
 809:
            verify = _closure1_slot4;
            options = _closure1_slot0;
            backup = _closure1_slot2;
            golf = 13;
            golf = backup[golf];
            golf = options.bind(tango)(golf);
            options = golf.PressableOpacity;
            golf = {};
            backup = romeo.section;
            romeo = new Array(2);
            romeo[0] = backup;
            romeo[1] = foxtrot;
            golf['style'] = romeo;
            golf['onPress'] = yankee;
            yankee = 'header';
            golf['accessibilityRole'] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 884:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 14;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/stickers/native/StickerPackHeader.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();