// app/modules/stickers/native/StickerPackHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    yankee = option.PADDING_HORIZONTAL;
    backup = option.PADDING_VERTICAL;
    option = 3;
    option = oscard[option];
    option = report.bind(entity)(option);
    verify = option.jsx;
    var _closure1_slot4 = verify;
    verify = option.jsxs;
    var _closure1_slot5 = verify;
    option = option.Fragment;
    var _closure1_slot6 = option;
    foxtra = tangon * backup;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['paddingTop'] = backup;
    offset['paddingHorizontal'] = yankee;
    yankee = 36;
    yankee = yankee + foxtra;
    offset['height'] = yankee;
    yankee = 'center';
    offset['justifyContent'] = yankee;
    yankee = 'hidden';
    offset['overflow'] = yankee;
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtra;
    tangon['section'] = offset;
    offset = {};
    foxtra = -1;
    offset['flex'] = foxtra;
    tangon['label'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    tangon['header'] = offset;
    foxtra = '100%';
    offset = {'aspectRatio': 3.824074074074074, 'marginVertical': 4294967288, 'width': '100%'};
    tangon['bannerContainer'] = offset;
    offset = {};
    offset['height'] = foxtra;
    tangon['banner'] = offset;
    offset = {'height': 20, 'flex': 1, 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['headline'] = offset;
    offset = {'marginLeft': 8, 'height': 16, 'width': 16, 'borderRadius': null, 'backgroundColor': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    offset['borderRadius'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_MODIFIER_ACCENT;
    offset['backgroundColor'] = foxtra;
    tangon['iconContainer'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.INTERACTIVE_NORMAL;
    offset['color'] = yankee;
    tangon['icon'] = offset;
    offset = {'position': 'relative', 'left': 1};
    tangon['animatedIcon'] = offset;
    offset = {'position': 'relative', 'left': 4294967295};
    tangon['premiumIcon'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot7 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.stickerPack;
            foxtra = entity.style;
            yankee = entity.onPress;
            oscard = entity.withBanner;
            tangon = undefined;
            if(!(oscard === tangon)) { _fun00002_ip = 33; continue _fun00001 }
 31:
            oscard = false;
 33:
            verify = entity.withDescription;
            if(!(verify === tangon)) { _fun00002_ip = 45; continue _fun00001 }
 43:
            verify = false;
 45:
            entity = _closure1_slot7;
            romeon = entity.bind(tangon)();
            zuuluu = _closure1_slot5;
            michal = _closure1_slot6;
            entity = {};
            kiloes = _closure1_slot4;
            offset = _closure1_slot3;
            report = {};
            option = romeon.header;
            report['style'] = option;
            sizing = {};
            option = romeon.headline;
            sizing['style'] = option;
            echoed = _closure1_slot0;
            update = _closure1_slot2;
            option = 6;
            output = update[option];
            output = echoed.bind(tangon)(output);
            result = output.Text;
            output = {'style': null, 'lineClamp': 1, 'variant': 'text-md/bold', 'color': 'header-primary'};
            source = romeon.label;
            output['style'] = source;
            source = backup.name;
            output['children'] = source;
            result = kiloes.bind(tangon)(result, output);
            output = new Array(3);
            output[0] = result;
            result = 7;
            result = update[result];
            echoed = echoed.bind(tangon)(result);
            result = echoed.isStickerPackAnimated;
            result = result.bind(echoed)(backup);
            if(!result) { _fun00002_ip = 322; continue _fun00001 }
 199:
            source = _closure1_slot4;
            update = _closure1_slot3;
            echoed = {};
            ctrled = romeon.iconContainer;
            echoed['style'] = ctrled;
            config = _closure1_slot1;
            record = _closure1_slot2;
            sequen = 8;
            ctrled = record[sequen];
            vacuum = config.bind(tangon)(ctrled);
            ctrled = {};
            cntext = 9;
            cntext = record[cntext];
            cntext = config.bind(tangon)(cntext);
            ctrled['source'] = cntext;
            cntext = romeon.animatedIcon;
            ctrled['style'] = cntext;
            sequen = record[sequen];
            sequen = config.bind(tangon)(sequen);
            sequen = sequen.Sizes;
            sequen = sequen.EXTRA_SMALL;
            ctrled['size'] = sequen;
            sequen = romeon.icon;
            sequen = sequen.color;
            ctrled['color'] = sequen;
            ctrled = source.bind(tangon)(vacuum, ctrled);
            echoed['children'] = ctrled;
            result = source.bind(tangon)(update, echoed);
 322:
            output[1] = result;
            update = _closure1_slot4;
            echoed = _closure1_slot3;
            result = {};
            source = romeon.iconContainer;
            result['style'] = source;
            sequen = _closure1_slot1;
            config = _closure1_slot2;
            vacuum = 8;
            source = config[vacuum];
            ctrled = sequen.bind(tangon)(source);
            source = {};
            record = 10;
            record = config[record];
            record = sequen.bind(tangon)(record);
            source['source'] = record;
            record = romeon.premiumIcon;
            source['style'] = record;
            vacuum = config[vacuum];
            vacuum = sequen.bind(tangon)(vacuum);
            vacuum = vacuum.Sizes;
            vacuum = vacuum.EXTRA_SMALL;
            source['size'] = vacuum;
            vacuum = romeon.icon;
            vacuum = vacuum.color;
            source['color'] = vacuum;
            source = update.bind(tangon)(ctrled, source);
            result['children'] = source;
            result = update.bind(tangon)(echoed, result);
            output[2] = result;
            sizing['children'] = output;
            sizing = zuuluu.bind(tangon)(offset, sizing);
            report['children'] = sizing;
            offset = kiloes.bind(tangon)(offset, report);
            report = new Array(3);
            report[0] = offset;
            if(!verify) { _fun00002_ip = 495; continue _fun00001 }
 484:
            kiloes = backup.description;
            offset = null;
            verify = offset != kiloes;
 495:
            if(!verify) { _fun00002_ip = 549; continue _fun00001 }
 498:
            sizing = _closure1_slot4;
            kiloes = _closure1_slot0;
            offset = _closure1_slot2;
            offset = offset[option];
            offset = kiloes.bind(tangon)(offset);
            kiloes = offset.Text;
            offset = {};
            output = 'text-sm/medium';
            offset['variant'] = output;
            output = backup.description;
            offset['children'] = output;
            verify = sizing.bind(tangon)(kiloes, offset);
 549:
            report[1] = verify;
            offset = _closure1_slot4;
            sizing = _closure1_slot0;
            echoed = _closure1_slot2;
            option = echoed[option];
            option = sizing.bind(tangon)(option);
            verify = option.Text;
            option = {'lineClamp': 1, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
            kiloes = 11;
            output = echoed[kiloes];
            output = sizing.bind(tangon)(output);
            result = output.intl;
            output = result.format;
            kiloes = echoed[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            sizing = kiloes.0S3JpK;
            kiloes = {};
            echoed = backup.stickers;
            echoed = echoed.length;
            kiloes['numStickers'] = echoed;
            kiloes = output.bind(result)(sizing, kiloes);
            option['children'] = kiloes;
            option = offset.bind(tangon)(verify, option);
            report[2] = option;
            entity['children'] = report;
            offset = zuuluu.bind(tangon)(michal, entity);
            zuuluu = _closure1_slot5;
            michal = _closure1_slot6;
            entity = {};
            if(!oscard) { _fun00002_ip = 754; continue _fun00001 }
 696:
            verify = _closure1_slot4;
            option = _closure1_slot1;
            kiloes = _closure1_slot2;
            report = 12;
            report = kiloes[report];
            option = option.bind(tangon)(report);
            report = {};
            report['stickerPack'] = backup;
            backup = romeon.bannerContainer;
            report['containerStyle'] = backup;
            backup = romeon.banner;
            report['style'] = backup;
            oscard = verify.bind(tangon)(option, report);
 754:
            report = new Array(2);
            report[0] = oscard;
            oscard = null;
            if(!(oscard == yankee)) { _fun00002_ip = 811; continue _fun00001 }
 768:
            verify = _closure1_slot4;
            option = _closure1_slot3;
            oscard = {};
            kiloes = romeon.section;
            backup = new Array(2);
            backup[0] = kiloes;
            backup[1] = foxtra;
            oscard['style'] = backup;
            oscard['children'] = offset;
            oscard = verify.bind(tangon)(option, oscard);
            _fun00002_ip = 886; continue _fun00001;
 811:
            verify = _closure1_slot4;
            option = _closure1_slot0;
            backup = _closure1_slot2;
            golfie = 13;
            golfie = backup[golfie];
            golfie = option.bind(tangon)(golfie);
            option = golfie.PressableOpacity;
            golfie = {};
            backup = romeon.section;
            romeon = new Array(2);
            romeon[0] = backup;
            romeon[1] = foxtra;
            golfie['style'] = romeon;
            golfie['onPress'] = yankee;
            yankee = 'header';
            golfie['accessibilityRole'] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 886:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stickers/native/StickerPackHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();