// app/modules/webauthn/native/nav_steps/WebAuthnNameStep.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = golf.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.WebAuthnScreens;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 16;
    verify['margin'] = offset;
    tango['margin'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/webauthn/native/nav_steps/WebAuthnNameStep.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: WebAuthnNameStep
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            zulu = mike.ticket;
            var _closure2_slot0 = zulu;
            zulu = mike.credential;
            var _closure2_slot1 = zulu;
            offset = mike.name;
            tango = undefined;
            var _closure2_slot5 = tango;
            mike = _closure1_slot9;
            sizing = mike.bind(tango)();
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            mike = 6;
            mike = report[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.useNavigation;
            mike = mike.bind(zulu)();
            var _closure2_slot2 = mike;
            verify = _closure1_slot5;
            mike = verify.useState;
            echo = false;
            mike = mike.bind(verify)(echo);
            yankee = _closure1_slot4;
            options = 2;
            mike = yankee.bind(tango)(mike, options);
            report = 0;
            output = mike[report];
            zulu = 1;
            mike = mike[zulu];
            var _closure2_slot3 = mike;
            golf = verify.useState;
            mike = null;
            golf = golf.bind(verify)(mike);
            golf = yankee.bind(tango)(golf, options);
            backup = golf[report];
            golf = golf[zulu];
            var _closure2_slot4 = golf;
            golf = verify.useState;
            yankee = mike != offset;
            foxtrot = '';
            mike = foxtrot;
            if(!yankee) { _fun00002_ip = 179; continue _fun00001 }
 176:
            mike = offset;
 179:
            golf = golf.bind(verify)(mike);
            mike = _closure1_slot4;
            mike = mike.bind(tango)(golf, options);
            romeo = mike[report];
            _closure2_slot5 = romeo;
            result = mike[zulu];
            entity = function() {
                tango = _closure1_slot3;
                zulu = undefined;
                mike = function* () {
                    entity = function* () { // Original name: ?anon_0_
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            StartGenerator();
                            ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                            if(mike) { _fun00004_ip = 354; continue _fun00003 }
 10: // try_start_0 // try_start_1
                            tango = _closure2_slot3;
                            report = undefined;
                            mike = true;
                            mike = tango.bind(report)(mike);
                            oscar = _closure1_slot0;
                            golf = _closure1_slot2;
                            mike = 7;
                            mike = golf[mike];
                            verify = oscar.bind(report)(mike);
                            options = verify.finishRegisterWebAuthnCredential;
                            golf = _closure2_slot5;
                            oscar = _closure2_slot0;
                            mike = _closure2_slot1;
                            mike = options.bind(verify)(golf, oscar, mike);
                            SaveGenerator(address=78);
 76:
                            return mike;
 78:
                            ResumeGenerator(result_out_reg=1, return_bool_out_reg=5);
                            if(oscar) { _fun00004_ip = 278; continue _fun00003 }
 87: // try_end0 // try_end1
                            golf = _closure2_slot3;
                            oscar = false;
                            oscar = golf.bind(report)(oscar);
                            romeo = _closure1_slot1;
                            yankee = _closure1_slot2;
                            oscar = 8;
                            oscar = yankee[oscar];
                            options = romeo.bind(report)(oscar);
                            golf = options.open;
                            oscar = {};
                            verify = 'WEBAUTHN_CREDENTIAL_REGISTER_SUCCESS_TOAST_KEY';
                            oscar['key'] = verify;
                            offset = _closure1_slot0;
                            verify = 9;
                            foxtrot = yankee[verify];
                            foxtrot = offset.bind(report)(foxtrot);
                            backup = foxtrot.intl;
                            foxtrot = backup.string;
                            verify = yankee[verify];
                            verify = offset.bind(report)(verify);
                            verify = verify.t;
                            verify = verify.j3d5qK;
                            verify = foxtrot.bind(backup)(verify);
                            oscar['content'] = verify;
                            verify = 10;
                            verify = yankee[verify];
                            verify = romeo.bind(report)(verify);
                            oscar['icon'] = verify;
                            verify = 11;
                            verify = yankee[verify];
                            verify = offset.bind(report)(verify);
                            verify = verify.CircleCheckIcon;
                            oscar['IconComponent'] = verify;
                            verify = 'status-success';
                            oscar['iconColor'] = verify;
                            oscar = golf.bind(options)(oscar);
                            options = _closure2_slot2;
                            golf = options.push;
                            tango = _closure1_slot6;
                            oscar = tango.SUCCESS;
                            tango = {};
                            tango = golf.bind(options)(oscar, tango);
                            return report;
 278:
                            tango = _closure2_slot3;
                            zulu = false;
                            zulu = tango.bind(report)(zulu);
                            return mike;
 292: // try_start_2 // catch_target0
                            CatchBlockStart(arg_register=1);
                            tango = _closure2_slot4;
                            mike = mike.body;
                            mike = mike.message;
                            report = undefined;
                            mike = tango.bind(report)(mike);
 318: // try_end2
                            tango = _closure2_slot3;
                            zulu = false;
                            zulu = tango.bind(report)(zulu);
                            mike = undefined;
                            return mike;
 334: // catch_target1 // catch_target2
                            CatchBlockStart(arg_register=1);
                            report = _closure2_slot3;
                            tango = undefined;
                            zulu = false;
                            zulu = report.bind(tango)(zulu);
                            throw mike;
 354:
                            return entity;
                        }
                    };
                    return entity;
                };
                mike = tango.bind(zulu)(mike);
                var _closure3_slot0 = mike;
                entity = function() {
                    entity = undefined;
                    tango = _closure3_slot0;
                    zulu = tango.apply;
                    entity = arguments;
                    mike = entity;
                    entity = this;
                    entity = zulu.bind(tango)(entity, mike);
                    return entity;
                };
                return entity;
            };
            kilo = entity.bind(tango)();
            zulu = _closure1_slot8;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            golf = 12;
            entity = yankee[golf];
            entity = offset.bind(tango)(entity);
            mike = entity.Form;
            entity = {};
            options = _closure1_slot7;
            report = yankee[golf];
            report = offset.bind(tango)(report);
            verify = report.FormInput;
            report = {};
            report['showTopContainer'] = echo;
            report['value'] = romeo;
            report['onChange'] = result;
            result = sizing.margin;
            report['style'] = result;
            report['error'] = backup;
            backup = 9;
            result = yankee[backup];
            result = offset.bind(tango)(result);
            update = result.intl;
            echo = update.string;
            result = yankee[backup];
            result = offset.bind(tango)(result);
            result = result.t;
            result = result.Jzd+z8;
            result = echo.bind(update)(result);
            report['title'] = result;
            result = yankee[backup];
            result = offset.bind(tango)(result);
            update = result.intl;
            echo = update.string;
            result = yankee[backup];
            result = offset.bind(tango)(result);
            result = result.t;
            result = result.I/sJtL;
            result = echo.bind(update)(result);
            report['placeholder'] = result;
            report['disabled'] = output;
            output = 13;
            output = yankee[output];
            output = offset.bind(tango)(output);
            output = output.ClearButtonVisibility;
            output = output.WITH_CONTENT;
            report['clearButtonVisibility'] = output;
            output = true;
            report['autoFocus'] = output;
            report['showBorder'] = output;
            report['required'] = output;
            report['large'] = output;
            verify = options.bind(tango)(verify, report);
            report = new Array(3);
            report[0] = verify;
            golf = yankee[golf];
            golf = offset.bind(tango)(golf);
            verify = golf.FormDivider;
            golf = {};
            golf = options.bind(tango)(verify, golf);
            report[1] = golf;
            golf = _closure1_slot1;
            verify = 14;
            oscar = yankee[verify];
            golf = golf.bind(tango)(oscar);
            oscar = {};
            sizing = sizing.margin;
            oscar['style'] = sizing;
            oscar['onPress'] = kilo;
            kilo = yankee[backup];
            kilo = offset.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = yankee[backup];
            backup = offset.bind(tango)(backup);
            backup = backup.t;
            backup = backup.5dyZ1d;
            backup = kilo.bind(sizing)(backup);
            oscar['text'] = backup;
            romeo = foxtrot === romeo;
            oscar['disabled'] = romeo;
            verify = yankee[verify];
            verify = offset.bind(tango)(verify);
            verify = verify.ButtonSizes;
            verify = verify.LARGE;
            oscar['size'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();