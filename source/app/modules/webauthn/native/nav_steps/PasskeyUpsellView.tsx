// app/modules/webauthn/native/nav_steps/PasskeyUpsellView.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    foxtrot = 1;
    golf = oscar[foxtrot];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot5 = golf;
    golf = tango.Image;
    var _closure1_slot6 = golf;
    tango = tango.ScrollView;
    var _closure1_slot7 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.WebAuthnScreens;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.HelpdeskArticles;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ContentDismissActionType;
    var _closure1_slot10 = tango;
    tango = 6;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot11 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot12 = tango;
    tango = 7;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flex': 1, 'flexDirection': 'column'};
    yankee = 8;
    offset = oscar[yankee];
    offset = romeo.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    tango['container'] = verify;
    verify = {'flexGrow': 1, 'justifyContent': 'space-between'};
    offset = oscar[yankee];
    offset = romeo.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tango['scrollViewContainer'] = verify;
    verify = {'alignItems': 'center', 'justifyContent': 'center'};
    offset = 'center';
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['gap'] = backup;
    tango['headerContainer'] = verify;
    verify = {'height': 190, 'width': 220, 'resizeMode': 'contain'};
    tango['headerImage'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tango['headerText'] = verify;
    verify = {};
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_32;
    verify['width'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_32;
    verify['height'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.round;
    verify['borderRadius'] = backup;
    tango['circleIcon'] = verify;
    verify = {};
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    verify['gap'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['marginLeft'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['marginRight'] = backup;
    tango['listContainer'] = verify;
    verify = {'flexDirection': 'row', 'gap': null, 'alignItems': 'center'};
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['gap'] = backup;
    tango['row'] = verify;
    verify = {};
    verify['flex'] = foxtrot;
    tango['text'] = verify;
    verify = {};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    verify['gap'] = yankee;
    verify['alignItems'] = offset;
    tango['buttonContainer'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot13 = tango;
    tango = 22;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/webauthn/native/nav_steps/PasskeyUpsellView.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: PasskeyUpsellView
        _fun92795: for(var _fun92795_ip = 0; ; ) switch(_fun92795_ip) {
 0:
            kilo = _closure1_slot0;
            backup = _closure1_slot2;
            entity = 9;
            entity = backup[entity];
            tango = undefined;
            mike = kilo.bind(tango)(entity);
            entity = mike.useNavigation;
            entity = entity.bind(mike)();
            var _closure2_slot0 = entity;
            mike = _closure1_slot13;
            romeo = mike.bind(tango)();
            report = _closure1_slot4;
            zulu = report.useState;
            mike = '';
            mike = zulu.bind(report)(mike);
            options = _closure1_slot3;
            golf = 2;
            mike = options.bind(tango)(mike, golf);
            oscar = 0;
            zulu = mike[oscar];
            zulu = 1;
            mike = mike[zulu];
            var _closure2_slot1 = mike;
            verify = report.useState;
            mike = false;
            mike = verify.bind(report)(mike);
            mike = options.bind(tango)(mike, golf);
            output = mike[oscar];
            mike = mike[zulu];
            var _closure2_slot2 = mike;
            mike = function(argFoo) { // Original name: onRegisterSuccess
                report = _closure2_slot0;
                tango = report.push;
                mike = _closure1_slot8;
                zulu = mike.NAME;
                mike = {};
                yankee = argFoo;
                romeo = mike;
                oscar = copyDataProperties(romeo, yankee);
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                oscar = 10;
                golf = offset[oscar];
                entity = undefined;
                golf = verify.bind(entity)(golf);
                options = golf.intl;
                golf = options.string;
                oscar = offset[oscar];
                oscar = verify.bind(entity)(oscar);
                oscar = oscar.t;
                oscar = oscar.8H5RmJ;
                golf = golf.bind(options)(oscar);
                oscar = 'name';
                mike[oscar] = golf;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            var _closure2_slot3 = mike;
            sizing = function() { // Original name: onCancel
                zulu = _closure1_slot1;
                tango = _closure1_slot2;
                entity = 11;
                report = tango[entity];
                entity = undefined;
                oscar = zulu.bind(entity)(report);
                report = oscar.markDismissed;
                mike = _closure1_slot10;
                mike = mike.USER_DISMISS;
                mike = report.bind(oscar)(mike);
                mike = 12;
                mike = tango[mike];
                zulu = zulu.bind(entity)(mike);
                mike = zulu.closePasskeyUpsellModal;
                mike = mike.bind(zulu)();
                return entity;
            };
            var _closure2_slot4 = sizing;
            zulu = report.useLayoutEffect;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                tango = _closure2_slot0;
                zulu = tango.setOptions;
                mike = {};
                golf = _closure1_slot0;
                oscar = _closure1_slot2;
                entity = 13;
                oscar = oscar[entity];
                entity = undefined;
                golf = golf.bind(entity)(oscar);
                oscar = golf.getHeaderCloseButton;
                report = _closure2_slot4;
                report = oscar.bind(golf)(report);
                mike['headerLeft'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity = zulu.bind(report)(entity, mike);
            echo = _closure1_slot1;
            entity = 14;
            entity = backup[entity];
            zulu = echo.bind(tango)(entity);
            mike = zulu.getArticleURL;
            entity = _closure1_slot9;
            entity = entity.SETTING_UP_TWO_FACTOR;
            context = mike.bind(zulu)(entity);
            zulu = _closure1_slot11;
            entity = 15;
            entity = backup[entity];
            entity = kilo.bind(tango)(entity);
            mike = entity.SafeAreaPaddingView;
            entity = {};
            update = true;
            entity['bottom'] = update;
            report = romeo.container;
            entity['style'] = report;
            golf = _closure1_slot12;
            oscar = _closure1_slot7;
            report = {};
            options = romeo.scrollViewContainer;
            report['contentContainerStyle'] = options;
            verify = _closure1_slot5;
            options = {};
            offset = romeo.headerContainer;
            options['style'] = offset;
            yankee = _closure1_slot6;
            offset = {};
            foxtrot = 16;
            foxtrot = backup[foxtrot];
            foxtrot = echo.bind(tango)(foxtrot);
            offset['source'] = foxtrot;
            foxtrot = romeo.headerImage;
            offset['style'] = foxtrot;
            yankee = zulu.bind(tango)(yankee, offset);
            offset = new Array(3);
            offset[0] = yankee;
            echo = 17;
            yankee = backup[echo];
            yankee = kilo.bind(tango)(yankee);
            foxtrot = yankee.Text;
            yankee = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            control = romeo.headerText;
            yankee['style'] = control;
            control = 10;
            vacuum = backup[control];
            vacuum = kilo.bind(tango)(vacuum);
            config = vacuum.intl;
            sequence = config.string;
            vacuum = backup[control];
            vacuum = kilo.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.CjleBg;
            vacuum = sequence.bind(config)(vacuum);
            yankee['children'] = vacuum;
            yankee = zulu.bind(tango)(foxtrot, yankee);
            offset[1] = yankee;
            yankee = backup[echo];
            yankee = kilo.bind(tango)(yankee);
            foxtrot = yankee.Text;
            yankee = {'variant': 'heading-md/normal', 'color': 'header-secondary'};
            vacuum = romeo.headerText;
            yankee['style'] = vacuum;
            papa = 18;
            backup = backup[papa];
            kilo = kilo.bind(tango)(backup);
            backup = kilo.isIOS;
            backup = backup.bind(kilo)();
            config = _closure1_slot0;
            kilo = _closure1_slot2;
            vacuum = kilo[control];
            vacuum = config.bind(tango)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.string;
            kilo = kilo[control];
            kilo = config.bind(tango)(kilo);
            kilo = kilo.t;
            if(backup) { _fun92795_ip = 554; continue _fun92795 }
 541:
            backup = kilo.d6uxJy;
            backup = vacuum.bind(sequence)(backup);
            _fun92795_ip = 565; continue _fun92795;
 554:
            kilo = kilo.7yxR9v;
            backup = vacuum.bind(sequence)(kilo);
 565:
            yankee['children'] = backup;
            yankee = zulu.bind(tango)(foxtrot, yankee);
            offset[2] = yankee;
            options['children'] = offset;
            verify = golf.bind(tango)(verify, options);
            options = new Array(3);
            options[0] = verify;
            yankee = _closure1_slot12;
            offset = _closure1_slot5;
            verify = {};
            foxtrot = romeo.listContainer;
            verify['style'] = foxtrot;
            foxtrot = {};
            backup = romeo.row;
            foxtrot['style'] = backup;
            sequence = _closure1_slot11;
            backup = {};
            kilo = romeo.circleIcon;
            backup['style'] = kilo;
            kilo = sequence.bind(tango)(offset, backup);
            backup = new Array(2);
            backup[0] = kilo;
            record = _closure1_slot0;
            config = _closure1_slot2;
            kilo = config[echo];
            kilo = record.bind(tango)(kilo);
            vacuum = kilo.Text;
            kilo = {'variant': 'heading-md/normal', 'color': 'header-secondary'};
            target = romeo.text;
            kilo['style'] = target;
            target = config[control];
            target = record.bind(tango)(target);
            sierra = target.intl;
            status = sierra.string;
            target = config[control];
            target = record.bind(tango)(target);
            target = target.t;
            target = target.HtqVkp;
            target = status.bind(sierra)(target);
            kilo['children'] = target;
            kilo = sequence.bind(tango)(vacuum, kilo);
            backup[1] = kilo;
            foxtrot['children'] = backup;
            backup = yankee.bind(tango)(offset, foxtrot);
            foxtrot = new Array(2);
            foxtrot[0] = backup;
            backup = {};
            kilo = romeo.row;
            backup['style'] = kilo;
            kilo = {};
            vacuum = romeo.circleIcon;
            kilo['style'] = vacuum;
            vacuum = sequence.bind(tango)(offset, kilo);
            kilo = new Array(2);
            kilo[0] = vacuum;
            echo = config[echo];
            echo = record.bind(tango)(echo);
            vacuum = echo.Text;
            echo = {'variant': 'heading-md/normal', 'color': 'header-secondary'};
            target = romeo.text;
            echo['style'] = target;
            config = config[papa];
            record = record.bind(tango)(config);
            config = record.isIOS;
            config = config.bind(record)();
            status = _closure1_slot0;
            record = _closure1_slot2;
            papa = record[control];
            papa = status.bind(tango)(papa);
            target = papa.intl;
            papa = target.string;
            record = record[control];
            record = status.bind(tango)(record);
            record = record.t;
            if(config) { _fun92795_ip = 931; continue _fun92795 }
 918:
            config = record.uYfqlp;
            config = papa.bind(target)(config);
            _fun92795_ip = 942; continue _fun92795;
 931:
            record = record.U409Iy;
            config = papa.bind(target)(record);
 942:
            echo['children'] = config;
            echo = sequence.bind(tango)(vacuum, echo);
            kilo[1] = echo;
            backup['children'] = kilo;
            backup = yankee.bind(tango)(offset, backup);
            foxtrot[1] = backup;
            verify['children'] = foxtrot;
            verify = yankee.bind(tango)(offset, verify);
            options[1] = verify;
            yankee = _closure1_slot12;
            offset = _closure1_slot5;
            verify = {};
            romeo = romeo.buttonContainer;
            verify['style'] = romeo;
            kilo = _closure1_slot11;
            backup = _closure1_slot0;
            foxtrot = _closure1_slot2;
            romeo = 19;
            romeo = foxtrot[romeo];
            romeo = backup.bind(tango)(romeo);
            echo = romeo.TextWithIOSLinkWorkaround;
            romeo = {'variant': 'text-sm/semibold', 'color': 'text-brand'};
            vacuum = foxtrot[control];
            vacuum = backup.bind(tango)(vacuum);
            record = vacuum.intl;
            config = record.format;
            vacuum = foxtrot[control];
            vacuum = backup.bind(tango)(vacuum);
            vacuum = vacuum.t;
            sequence = vacuum.OeGXVl;
            vacuum = {};
            vacuum['learnMoreLink'] = context;
            vacuum = config.bind(record)(sequence, vacuum);
            romeo['children'] = vacuum;
            echo = kilo.bind(tango)(echo, romeo);
            romeo = new Array(3);
            romeo[0] = echo;
            echo = 20;
            foxtrot = foxtrot[echo];
            foxtrot = backup.bind(tango)(foxtrot);
            backup = foxtrot.Button;
            foxtrot = {};
            sequence = _closure1_slot0;
            vacuum = _closure1_slot2;
            config = vacuum[control];
            config = sequence.bind(tango)(config);
            record = config.intl;
            config = record.string;
            vacuum = vacuum[control];
            vacuum = sequence.bind(tango)(vacuum);
            sequence = vacuum.t;
            if(output) { _fun92795_ip = 1195; continue _fun92795 }
 1182:
            vacuum = sequence.NIFmCA;
            vacuum = config.bind(record)(vacuum);
            _fun92795_ip = 1206; continue _fun92795;
 1195:
            sequence = sequence.wePEBA;
            vacuum = config.bind(record)(sequence);
 1206:
            foxtrot['text'] = vacuum;
            source = function() { // Original name: onPress
                zulu = _closure1_slot1;
                tango = _closure1_slot2;
                entity = 11;
                report = tango[entity];
                entity = undefined;
                oscar = zulu.bind(entity)(report);
                report = oscar.markDismissed;
                mike = _closure1_slot10;
                mike = mike.TAKE_ACTION;
                mike = report.bind(oscar)(mike);
                mike = 21;
                mike = tango[mike];
                tango = zulu.bind(entity)(mike);
                zulu = tango.registerPasskey;
                mike = {};
                oscar = _closure2_slot2;
                mike['setRegistering'] = oscar;
                oscar = _closure2_slot1;
                mike['setError'] = oscar;
                report = _closure2_slot3;
                mike['onRegisterSuccess'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            foxtrot['onPress'] = source;
            source = 'lg';
            foxtrot['size'] = source;
            foxtrot['disabled'] = output;
            foxtrot['loading'] = output;
            foxtrot['grow'] = update;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[1] = foxtrot;
            kilo = _closure1_slot11;
            backup = _closure1_slot0;
            foxtrot = _closure1_slot2;
            foxtrot = foxtrot[echo];
            foxtrot = backup.bind(tango)(foxtrot);
            backup = foxtrot.Button;
            foxtrot = {'text': null, 'onPress': null, 'size': 'lg', 'variant': 'secondary', 'grow': true};
            source = _closure1_slot0;
            result = _closure1_slot2;
            echo = result[control];
            echo = source.bind(tango)(echo);
            update = echo.intl;
            echo = update.string;
            result = result[control];
            result = source.bind(tango)(result);
            result = result.t;
            if(output) { _fun92795_ip = 1351; continue _fun92795 }
 1338:
            output = result.7J6/nJ;
            output = echo.bind(update)(output);
            _fun92795_ip = 1362; continue _fun92795;
 1351:
            result = result.wePEBA;
            output = echo.bind(update)(result);
 1362:
            foxtrot['text'] = output;
            foxtrot['onPress'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[2] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[2] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();