// app/modules/webauthn/native/nav_steps/PasskeyUpsellView.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    foxtra = 1;
    golfie = oscard[foxtra];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    golfie = tangon.Image;
    var _closure1_slot6 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.WebAuthnScreens;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.HelpdeskArticles;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ContentDismissActionType;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot11 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot12 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'flexDirection': 'column'};
    yankee = 8;
    offset = oscard[yankee];
    offset = romeon.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    tangon['container'] = verify;
    verify = {'flexGrow': 1, 'justifyContent': 'space-between'};
    offset = oscard[yankee];
    offset = romeon.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tangon['scrollViewContainer'] = verify;
    verify = {'alignItems': 'center', 'justifyContent': 'center'};
    offset = 'center';
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['gap'] = backup;
    tangon['headerContainer'] = verify;
    verify = {'height': 190, 'width': 220, 'resizeMode': 'contain'};
    tangon['headerImage'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['headerText'] = verify;
    verify = {};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_32;
    verify['width'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_32;
    verify['height'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.round;
    verify['borderRadius'] = backup;
    tangon['circleIcon'] = verify;
    verify = {};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    verify['gap'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['marginLeft'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['marginRight'] = backup;
    tangon['listContainer'] = verify;
    verify = {'flexDirection': 'row', 'gap': null, 'alignItems': 'center'};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['gap'] = backup;
    tangon['row'] = verify;
    verify = {};
    verify['flex'] = foxtra;
    tangon['text'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    verify['gap'] = yankee;
    verify['alignItems'] = offset;
    tangon['buttonContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot13 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/webauthn/native/nav_steps/PasskeyUpsellView.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: PasskeyUpsellView
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            kiloes = _closure1_slot0;
            backup = _closure1_slot2;
            entity = 9;
            entity = backup[entity];
            tangon = undefined;
            michal = kiloes.bind(tangon)(entity);
            entity = michal.useNavigation;
            entity = entity.bind(michal)();
            var _closure2_slot0 = entity;
            michal = _closure1_slot13;
            romeon = michal.bind(tangon)();
            report = _closure1_slot4;
            zuuluu = report.useState;
            michal = '';
            michal = zuuluu.bind(report)(michal);
            option = _closure1_slot3;
            golfie = 2;
            michal = option.bind(tangon)(michal, golfie);
            oscard = 0;
            zuuluu = michal[oscard];
            zuuluu = 1;
            michal = michal[zuuluu];
            var _closure2_slot1 = michal;
            verify = report.useState;
            michal = false;
            michal = verify.bind(report)(michal);
            michal = option.bind(tangon)(michal, golfie);
            output = michal[oscard];
            michal = michal[zuuluu];
            var _closure2_slot2 = michal;
            michal = function(argFoo) { // Original name: onRegisterSuccess
                report = _closure2_slot0;
                tangon = report.push;
                michal = _closure1_slot8;
                zuuluu = michal.NAME;
                michal = {};
                yankee = argFoo;
                romeon = michal;
                oscard = copyDataProperties(romeon, yankee);
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                oscard = 10;
                golfie = offset[oscard];
                entity = undefined;
                golfie = verify.bind(entity)(golfie);
                option = golfie.intl;
                golfie = option.string;
                oscard = offset[oscard];
                oscard = verify.bind(entity)(oscard);
                oscard = oscard.t;
                oscard = oscard.8H5RmJ;
                golfie = golfie.bind(option)(oscard);
                oscard = 'name';
                michal[oscard] = golfie;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            var _closure2_slot3 = michal;
            sizing = function() { // Original name: onCancel
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                entity = 11;
                report = tangon[entity];
                entity = undefined;
                oscard = zuuluu.bind(entity)(report);
                report = oscard.markDismissed;
                michal = _closure1_slot10;
                michal = michal.USER_DISMISS;
                michal = report.bind(oscard)(michal);
                michal = 12;
                michal = tangon[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.closePasskeyUpsellModal;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            var _closure2_slot4 = sizing;
            zuuluu = report.useLayoutEffect;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                tangon = _closure2_slot0;
                zuuluu = tangon.setOptions;
                michal = {};
                golfie = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 13;
                oscard = oscard[entity];
                entity = undefined;
                golfie = golfie.bind(entity)(oscard);
                oscard = golfie.getHeaderCloseButton;
                report = _closure2_slot4;
                report = oscard.bind(golfie)(report);
                michal['headerLeft'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = zuuluu.bind(report)(entity, michal);
            echoed = _closure1_slot1;
            entity = 14;
            entity = backup[entity];
            zuuluu = echoed.bind(tangon)(entity);
            michal = zuuluu.getArticleURL;
            entity = _closure1_slot9;
            entity = entity.SETTING_UP_TWO_FACTOR;
            cntext = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot11;
            entity = 15;
            entity = backup[entity];
            entity = kiloes.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            update = true;
            entity['bottom'] = update;
            report = romeon.container;
            entity['style'] = report;
            golfie = _closure1_slot12;
            oscard = _closure1_slot7;
            report = {};
            option = romeon.scrollViewContainer;
            report['contentContainerStyle'] = option;
            verify = _closure1_slot5;
            option = {};
            offset = romeon.headerContainer;
            option['style'] = offset;
            yankee = _closure1_slot6;
            offset = {};
            foxtra = 16;
            foxtra = backup[foxtra];
            foxtra = echoed.bind(tangon)(foxtra);
            offset['source'] = foxtra;
            foxtra = romeon.headerImage;
            offset['style'] = foxtra;
            yankee = zuuluu.bind(tangon)(yankee, offset);
            offset = new Array(3);
            offset[0] = yankee;
            echoed = 17;
            yankee = backup[echoed];
            yankee = kiloes.bind(tangon)(yankee);
            foxtra = yankee.Text;
            yankee = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            ctrled = romeon.headerText;
            yankee['style'] = ctrled;
            ctrled = 10;
            vacuum = backup[ctrled];
            vacuum = kiloes.bind(tangon)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = backup[ctrled];
            vacuum = kiloes.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.CjleBg;
            vacuum = sequen.bind(config)(vacuum);
            yankee['children'] = vacuum;
            yankee = zuuluu.bind(tangon)(foxtra, yankee);
            offset[1] = yankee;
            yankee = backup[echoed];
            yankee = kiloes.bind(tangon)(yankee);
            foxtra = yankee.Text;
            yankee = {'variant': 'heading-md/normal', 'color': 'header-secondary'};
            vacuum = romeon.headerText;
            yankee['style'] = vacuum;
            papara = 18;
            backup = backup[papara];
            kiloes = kiloes.bind(tangon)(backup);
            backup = kiloes.isIOS;
            backup = backup.bind(kiloes)();
            config = _closure1_slot0;
            kiloes = _closure1_slot2;
            vacuum = kiloes[ctrled];
            vacuum = config.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            kiloes = kiloes[ctrled];
            kiloes = config.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            if(backup) { _fun00002_ip = 554; continue _fun00001 }
 541:
            backup = kiloes.d6uxJy;
            backup = vacuum.bind(sequen)(backup);
            _fun00002_ip = 565; continue _fun00001;
 554:
            kiloes = kiloes.7yxR9v;
            backup = vacuum.bind(sequen)(kiloes);
 565:
            yankee['children'] = backup;
            yankee = zuuluu.bind(tangon)(foxtra, yankee);
            offset[2] = yankee;
            option['children'] = offset;
            verify = golfie.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            yankee = _closure1_slot12;
            offset = _closure1_slot5;
            verify = {};
            foxtra = romeon.listContainer;
            verify['style'] = foxtra;
            foxtra = {};
            backup = romeon.row;
            foxtra['style'] = backup;
            sequen = _closure1_slot11;
            backup = {};
            kiloes = romeon.circleIcon;
            backup['style'] = kiloes;
            kiloes = sequen.bind(tangon)(offset, backup);
            backup = new Array(2);
            backup[0] = kiloes;
            record = _closure1_slot0;
            config = _closure1_slot2;
            kiloes = config[echoed];
            kiloes = record.bind(tangon)(kiloes);
            vacuum = kiloes.Text;
            kiloes = {'variant': 'heading-md/normal', 'color': 'header-secondary'};
            target = romeon.text;
            kiloes['style'] = target;
            target = config[ctrled];
            target = record.bind(tangon)(target);
            sierra = target.intl;
            status = sierra.string;
            target = config[ctrled];
            target = record.bind(tangon)(target);
            target = target.t;
            target = target.HtqVkp;
            target = status.bind(sierra)(target);
            kiloes['children'] = target;
            kiloes = sequen.bind(tangon)(vacuum, kiloes);
            backup[1] = kiloes;
            foxtra['children'] = backup;
            backup = yankee.bind(tangon)(offset, foxtra);
            foxtra = new Array(2);
            foxtra[0] = backup;
            backup = {};
            kiloes = romeon.row;
            backup['style'] = kiloes;
            kiloes = {};
            vacuum = romeon.circleIcon;
            kiloes['style'] = vacuum;
            vacuum = sequen.bind(tangon)(offset, kiloes);
            kiloes = new Array(2);
            kiloes[0] = vacuum;
            echoed = config[echoed];
            echoed = record.bind(tangon)(echoed);
            vacuum = echoed.Text;
            echoed = {'variant': 'heading-md/normal', 'color': 'header-secondary'};
            target = romeon.text;
            echoed['style'] = target;
            config = config[papara];
            record = record.bind(tangon)(config);
            config = record.isIOS;
            config = config.bind(record)();
            status = _closure1_slot0;
            record = _closure1_slot2;
            papara = record[ctrled];
            papara = status.bind(tangon)(papara);
            target = papara.intl;
            papara = target.string;
            record = record[ctrled];
            record = status.bind(tangon)(record);
            record = record.t;
            if(config) { _fun00002_ip = 935; continue _fun00001 }
 920:
            config = record.uYfqlp;
            config = papara.bind(target)(config);
            _fun00002_ip = 948; continue _fun00001;
 935:
            record = record.U409Iy;
            config = papara.bind(target)(record);
 948:
            echoed['children'] = config;
            echoed = sequen.bind(tangon)(vacuum, echoed);
            kiloes[1] = echoed;
            backup['children'] = kiloes;
            backup = yankee.bind(tangon)(offset, backup);
            foxtra[1] = backup;
            verify['children'] = foxtra;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            yankee = _closure1_slot12;
            offset = _closure1_slot5;
            verify = {};
            romeon = romeon.buttonContainer;
            verify['style'] = romeon;
            kiloes = _closure1_slot11;
            backup = _closure1_slot0;
            foxtra = _closure1_slot2;
            romeon = 19;
            romeon = foxtra[romeon];
            romeon = backup.bind(tangon)(romeon);
            echoed = romeon.TextWithIOSLinkWorkaround;
            romeon = {'variant': 'text-sm/semibold', 'color': 'text-brand'};
            vacuum = foxtra[ctrled];
            vacuum = backup.bind(tangon)(vacuum);
            record = vacuum.intl;
            config = record.format;
            vacuum = foxtra[ctrled];
            vacuum = backup.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            sequen = vacuum.OeGXVl;
            vacuum = {};
            vacuum['learnMoreLink'] = cntext;
            vacuum = config.bind(record)(sequen, vacuum);
            romeon['children'] = vacuum;
            echoed = kiloes.bind(tangon)(echoed, romeon);
            romeon = new Array(3);
            romeon[0] = echoed;
            echoed = 20;
            foxtra = foxtra[echoed];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.Button;
            foxtra = {};
            sequen = _closure1_slot0;
            vacuum = _closure1_slot2;
            config = vacuum[ctrled];
            config = sequen.bind(tangon)(config);
            record = config.intl;
            config = record.string;
            vacuum = vacuum[ctrled];
            vacuum = sequen.bind(tangon)(vacuum);
            sequen = vacuum.t;
            if(output) { _fun00002_ip = 1199; continue _fun00001 }
 1186:
            vacuum = sequen.NIFmCA;
            vacuum = config.bind(record)(vacuum);
            _fun00002_ip = 1210; continue _fun00001;
 1199:
            sequen = sequen.wePEBA;
            vacuum = config.bind(record)(sequen);
 1210:
            foxtra['text'] = vacuum;
            source = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                entity = 11;
                report = tangon[entity];
                entity = undefined;
                oscard = zuuluu.bind(entity)(report);
                report = oscard.markDismissed;
                michal = _closure1_slot10;
                michal = michal.TAKE_ACTION;
                michal = report.bind(oscard)(michal);
                michal = 21;
                michal = tangon[michal];
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.registerPasskey;
                michal = {};
                oscard = _closure2_slot2;
                michal['setRegistering'] = oscard;
                oscard = _closure2_slot1;
                michal['setError'] = oscard;
                report = _closure2_slot3;
                michal['onRegisterSuccess'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            foxtra['onPress'] = source;
            source = 'lg';
            foxtra['size'] = source;
            foxtra['disabled'] = output;
            foxtra['loading'] = output;
            foxtra['grow'] = update;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[1] = foxtra;
            kiloes = _closure1_slot11;
            backup = _closure1_slot0;
            foxtra = _closure1_slot2;
            foxtra = foxtra[echoed];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.Button;
            foxtra = {'text': null, 'onPress': null, 'size': 'lg', 'variant': 'secondary', 'grow': true};
            source = _closure1_slot0;
            result = _closure1_slot2;
            echoed = result[ctrled];
            echoed = source.bind(tangon)(echoed);
            update = echoed.intl;
            echoed = update.string;
            result = result[ctrled];
            result = source.bind(tangon)(result);
            result = result.t;
            if(output) { _fun00002_ip = 1355; continue _fun00001 }
 1342:
            output = result.7J6/nJ;
            output = echoed.bind(update)(output);
            _fun00002_ip = 1366; continue _fun00001;
 1355:
            result = result.wePEBA;
            output = echoed.bind(update)(result);
 1366:
            foxtra['text'] = output;
            foxtra['onPress'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[2] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();