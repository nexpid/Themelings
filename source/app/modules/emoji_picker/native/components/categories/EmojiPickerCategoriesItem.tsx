// app/modules/emoji_picker/native/components/categories/EmojiPickerCategoriesItem.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    backup = 2;
    tango = oscar[backup];
    tango = report.bind(entity)(tango);
    tango = tango.EmojiCategoryTypes;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.CATEGORY_ICON_RIPPLE_CONFIG;
    var _closure1_slot6 = options;
    foxtrot = tango.CATEGORY_ICON_SIZE;
    yankee = tango.NODE_SIZE;
    tango = 4;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot7 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'justifyContent': 'center', 'alignItems': 'center'};
    offset['height'] = yankee;
    offset['width'] = yankee;
    yankee = yankee / backup;
    offset['borderRadius'] = yankee;
    tango['itemInner'] = offset;
    offset = {};
    yankee = 6;
    kilo = oscar[yankee];
    kilo = romeo.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.ICON_TRANSPARENT;
    offset['backgroundColor'] = kilo;
    tango['fadedItem'] = offset;
    offset = {};
    kilo = oscar[yankee];
    kilo = romeo.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BACKGROUND_MODIFIER_ACTIVE;
    offset['backgroundColor'] = kilo;
    tango['activeItem'] = offset;
    offset = {};
    offset['height'] = foxtrot;
    offset['width'] = foxtrot;
    foxtrot = foxtrot / backup;
    offset['borderRadius'] = foxtrot;
    tango['guildItem'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_ACCENT;
    offset['backgroundColor'] = foxtrot;
    tango['guildItemPlaceholder'] = offset;
    offset = {'width': 12, 'height': 12, 'position': 'absolute', 'bottom': 0, 'end': 0, 'backgroundColor': null, 'borderRadius': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.round;
    offset['borderRadius'] = foxtrot;
    tango['lockContainer'] = offset;
    offset = {'width': 7.5, 'height': 7.5};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_NORMAL;
    offset['tintColor'] = yankee;
    tango['lock'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot9 = tango;
    tango = {};
    options = 'function EmojiPickerCategoriesItemTsx1(){const{withTiming,categoryIndexActive,index,timingStandard,styleColorActive,styleColorTransparent}=this.__closure;return{opacity:withTiming(categoryIndexActive.get()===index?1:0.5,timingStandard),backgroundColor:categoryIndexActive.get()===index?styleColorActive:styleColorTransparent};}';
    tango['code'] = options;
    var _closure1_slot10 = tango;
    tango = golf.memo;
    mike = function(argFoo) { // Original name: EmojiPickerCategoriesItem
        _fun78493: for(var _fun78493_ip = 0; ; ) switch(_fun78493_ip) {
 0:
            mike = argFoo;
            result = mike.category;
            var _closure2_slot0 = result;
            update = mike.categoryIndexActive;
            var _closure2_slot1 = update;
            backup = mike.handlePressCategory;
            var _closure2_slot2 = backup;
            romeo = mike.index;
            var _closure2_slot3 = romeo;
            sizing = mike.loadingStyle;
            verify = mike.locked;
            oscar = mike.style;
            mike = _closure1_slot9;
            tango = undefined;
            kilo = mike.bind(tango)();
            mike = kilo.activeItem;
            echo = mike.backgroundColor;
            var _closure2_slot4 = echo;
            mike = kilo.fadedItem;
            output = mike.backgroundColor;
            var _closure2_slot5 = output;
            mike = _closure1_slot0;
            golf = _closure1_slot2;
            options = 7;
            zulu = golf[options];
            offset = mike.bind(tango)(zulu);
            report = offset.useAnimatedStyle;
            zulu = function() { // Original name: T
                _fun78494: for(var _fun78494_ip = 0; ; ) switch(_fun78494_ip) {
 0:
                    entity = {};
                    tango = _closure1_slot0;
                    report = _closure1_slot2;
                    zulu = 8;
                    zulu = report[zulu];
                    options = undefined;
                    oscar = tango.bind(options)(zulu);
                    report = oscar.withTiming;
                    golf = _closure2_slot1;
                    tango = golf.get;
                    verify = tango.bind(golf)();
                    golf = _closure2_slot3;
                    tango = 0.5;
                    if(!(verify === golf)) { _fun78494_ip = 69; continue _fun78494 }
 66:
                    tango = 1;
 69:
                    golf = _closure1_slot0;
                    verify = _closure1_slot2;
                    mike = 9;
                    mike = verify[mike];
                    mike = golf.bind(options)(mike);
                    mike = mike.timingStandard;
                    mike = report.bind(oscar)(tango, mike);
                    entity['opacity'] = mike;
                    tango = _closure2_slot1;
                    mike = tango.get;
                    tango = mike.bind(tango)();
                    mike = _closure2_slot3;
                    if(!(tango !== mike)) { _fun78494_ip = 132; continue _fun78494 }
 126:
                    mike = _closure2_slot5;
                    _fun78494_ip = 136; continue _fun78494;
 132:
                    mike = _closure2_slot4;
 136:
                    entity['backgroundColor'] = mike;
                    return entity;
                }
            };
            yankee = {};
            source = 8;
            source = golf[source];
            source = mike.bind(tango)(source);
            source = source.withTiming;
            yankee['withTiming'] = source;
            yankee['categoryIndexActive'] = update;
            yankee['index'] = romeo;
            update = 9;
            update = golf[update];
            update = mike.bind(tango)(update);
            update = update.timingStandard;
            yankee['timingStandard'] = update;
            yankee['styleColorActive'] = echo;
            yankee['styleColorTransparent'] = output;
            zulu['__closure'] = yankee;
            yankee = 3335518235623.0;
            zulu['__workletHash'] = yankee;
            yankee = _closure1_slot10;
            zulu['__initData'] = yankee;
            offset = report.bind(offset)(zulu);
            yankee = _closure1_slot3;
            report = yankee.useCallback;
            zulu = new Array(3);
            zulu[0] = backup;
            zulu[1] = romeo;
            zulu[2] = result;
            entity = function() {
                tango = _closure2_slot2;
                zulu = _closure2_slot3;
                mike = _closure2_slot0;
                entity = undefined;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            report = report.bind(yankee)(entity, zulu);
            zulu = _closure1_slot7;
            entity = 10;
            entity = golf[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.PressableOpacity;
            entity = {};
            golf = _closure1_slot6;
            entity['androidRippleConfig'] = golf;
            entity['style'] = oscar;
            entity['onPress'] = report;
            report = 'button';
            entity['accessibilityRole'] = report;
            oscar = result.type;
            report = _closure1_slot5;
            report = report.GUILD;
            if(!(oscar !== report)) { _fun78493_ip = 355; continue _fun78493 }
 348:
            report = result.name;
            _fun78493_ip = 365; continue _fun78493;
 355:
            oscar = result.guild;
            report = oscar.name;
 365:
            entity['accessibilityLabel'] = report;
            golf = _closure1_slot8;
            oscar = _closure1_slot1;
            report = _closure1_slot2;
            report = report[options];
            report = oscar.bind(tango)(report);
            oscar = report.View;
            report = {};
            yankee = kilo.itemInner;
            options = new Array(2);
            options[0] = yankee;
            options[1] = offset;
            report['style'] = options;
            offset = result.type;
            options = _closure1_slot5;
            options = options.GUILD;
            if(!(offset !== options)) { _fun78493_ip = 481; continue _fun78493 }
 438:
            yankee = _closure1_slot7;
            offset = _closure1_slot1;
            romeo = _closure1_slot2;
            options = 12;
            options = romeo[options];
            offset = offset.bind(tango)(options);
            options = {};
            romeo = result.id;
            options['id'] = romeo;
            offset = yankee.bind(tango)(offset, options);
            _fun78493_ip = 566; continue _fun78493;
 481:
            romeo = _closure1_slot7;
            yankee = _closure1_slot1;
            output = _closure1_slot2;
            backup = 11;
            options = output[backup];
            yankee = yankee.bind(tango)(options);
            options = {};
            result = result.guild;
            options['guild'] = result;
            options['loadingStyle'] = sizing;
            sizing = _closure1_slot0;
            backup = output[backup];
            backup = sizing.bind(tango)(backup);
            backup = backup.GuildIconSizes;
            backup = backup.XSMALL;
            options['size'] = backup;
            backup = kilo.guildItem;
            options['style'] = backup;
            offset = romeo.bind(tango)(yankee, options);
 566:
            options = new Array(2);
            options[0] = offset;
            if(!verify) { _fun78493_ip = 651; continue _fun78493 }
 577:
            romeo = _closure1_slot7;
            yankee = _closure1_slot4;
            offset = {};
            backup = kilo.lockContainer;
            offset['style'] = backup;
            backup = _closure1_slot0;
            sizing = _closure1_slot2;
            foxtrot = 13;
            foxtrot = sizing[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            backup = foxtrot.LockIcon;
            foxtrot = {};
            kilo = kilo.lock;
            foxtrot['style'] = kilo;
            foxtrot = romeo.bind(tango)(backup, foxtrot);
            offset['children'] = foxtrot;
            verify = romeo.bind(tango)(yankee, offset);
 651:
            options[1] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 14;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/emoji_picker/native/components/categories/EmojiPickerCategoriesItem.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();