// app/modules/emoji_picker/native/components/categories/EmojiPickerCategoriesItem.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    backup = 2;
    tangon = oscard[backup];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.EmojiCategoryTypes;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.CATEGORY_ICON_RIPPLE_CONFIG;
    var _closure1_slot6 = option;
    foxtra = tangon.CATEGORY_ICON_SIZE;
    yankee = tangon.NODE_SIZE;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot7 = option;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'justifyContent': 'center', 'alignItems': 'center'};
    offset['height'] = yankee;
    offset['width'] = yankee;
    yankee = yankee / backup;
    offset['borderRadius'] = yankee;
    tangon['itemInner'] = offset;
    offset = {};
    yankee = 6;
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.ICON_TRANSPARENT;
    offset['backgroundColor'] = kiloes;
    tangon['fadedItem'] = offset;
    offset = {};
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_MODIFIER_ACTIVE;
    offset['backgroundColor'] = kiloes;
    tangon['activeItem'] = offset;
    offset = {};
    offset['height'] = foxtra;
    offset['width'] = foxtra;
    foxtra = foxtra / backup;
    offset['borderRadius'] = foxtra;
    tangon['guildItem'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_ACCENT;
    offset['backgroundColor'] = foxtra;
    tangon['guildItemPlaceholder'] = offset;
    offset = {'width': 12, 'height': 12, 'position': 'absolute', 'bottom': 0, 'end': 0, 'backgroundColor': null, 'borderRadius': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    offset['borderRadius'] = foxtra;
    tangon['lockContainer'] = offset;
    offset = {'width': 7.5, 'height': 7.5};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_NORMAL;
    offset['tintColor'] = yankee;
    tangon['lock'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot9 = tangon;
    tangon = {};
    option = 'function EmojiPickerCategoriesItemTsx1(){const{withTiming,categoryIndexActive,index,timingStandard,styleColorActive,styleColorTransparent}=this.__closure;return{opacity:withTiming(categoryIndexActive.get()===index?1:0.5,timingStandard),backgroundColor:categoryIndexActive.get()===index?styleColorActive:styleColorTransparent};}';
    tangon['code'] = option;
    var _closure1_slot10 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: EmojiPickerCategoriesItem
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            result = michal.category;
            var _closure2_slot0 = result;
            update = michal.categoryIndexActive;
            var _closure2_slot1 = update;
            backup = michal.handlePressCategory;
            var _closure2_slot2 = backup;
            romeon = michal.index;
            var _closure2_slot3 = romeon;
            sizing = michal.loadingStyle;
            verify = michal.locked;
            oscard = michal.style;
            michal = _closure1_slot9;
            tangon = undefined;
            kiloes = michal.bind(tangon)();
            michal = kiloes.activeItem;
            echoed = michal.backgroundColor;
            var _closure2_slot4 = echoed;
            michal = kiloes.fadedItem;
            output = michal.backgroundColor;
            var _closure2_slot5 = output;
            michal = _closure1_slot0;
            golfie = _closure1_slot2;
            option = 7;
            zuuluu = golfie[option];
            offset = michal.bind(tangon)(zuuluu);
            report = offset.useAnimatedStyle;
            zuuluu = function() { // Original name: T
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    tangon = _closure1_slot0;
                    report = _closure1_slot2;
                    zuuluu = 8;
                    zuuluu = report[zuuluu];
                    option = undefined;
                    oscard = tangon.bind(option)(zuuluu);
                    report = oscard.withTiming;
                    golfie = _closure2_slot1;
                    tangon = golfie.get;
                    verify = tangon.bind(golfie)();
                    golfie = _closure2_slot3;
                    tangon = 0.5;
                    if(!(verify === golfie)) { _fun00004_ip = 69; continue _fun00003 }
 66:
                    tangon = 1;
 69:
                    golfie = _closure1_slot0;
                    verify = _closure1_slot2;
                    michal = 9;
                    michal = verify[michal];
                    michal = golfie.bind(option)(michal);
                    michal = michal.timingStandard;
                    michal = report.bind(oscard)(tangon, michal);
                    entity['opacity'] = michal;
                    tangon = _closure2_slot1;
                    michal = tangon.get;
                    tangon = michal.bind(tangon)();
                    michal = _closure2_slot3;
                    if(!(tangon !== michal)) { _fun00004_ip = 132; continue _fun00003 }
 126:
                    michal = _closure2_slot5;
                    _fun00004_ip = 136; continue _fun00003;
 132:
                    michal = _closure2_slot4;
 136:
                    entity['backgroundColor'] = michal;
                    return entity;
                }
            };
            yankee = {};
            source = 8;
            source = golfie[source];
            source = michal.bind(tangon)(source);
            source = source.withTiming;
            yankee['withTiming'] = source;
            yankee['categoryIndexActive'] = update;
            yankee['index'] = romeon;
            update = 9;
            update = golfie[update];
            update = michal.bind(tangon)(update);
            update = update.timingStandard;
            yankee['timingStandard'] = update;
            yankee['styleColorActive'] = echoed;
            yankee['styleColorTransparent'] = output;
            zuuluu['__closure'] = yankee;
            yankee = 3335518235623.0;
            zuuluu['__workletHash'] = yankee;
            yankee = _closure1_slot10;
            zuuluu['__initData'] = yankee;
            offset = report.bind(offset)(zuuluu);
            yankee = _closure1_slot3;
            report = yankee.useCallback;
            zuuluu = new Array(3);
            zuuluu[0] = backup;
            zuuluu[1] = romeon;
            zuuluu[2] = result;
            entity = function() {
                tangon = _closure2_slot2;
                zuuluu = _closure2_slot3;
                michal = _closure2_slot0;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            report = report.bind(yankee)(entity, zuuluu);
            zuuluu = _closure1_slot7;
            entity = 10;
            entity = golfie[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.PressableOpacity;
            entity = {};
            golfie = _closure1_slot6;
            entity['androidRippleConfig'] = golfie;
            entity['style'] = oscard;
            entity['onPress'] = report;
            report = 'button';
            entity['accessibilityRole'] = report;
            oscard = result.type;
            report = _closure1_slot5;
            report = report.GUILD;
            if(!(oscard !== report)) { _fun00002_ip = 351; continue _fun00001 }
 344:
            report = result.name;
            _fun00002_ip = 361; continue _fun00001;
 351:
            oscard = result.guild;
            report = oscard.name;
 361:
            entity['accessibilityLabel'] = report;
            golfie = _closure1_slot8;
            oscard = _closure1_slot1;
            report = _closure1_slot2;
            report = report[option];
            report = oscard.bind(tangon)(report);
            oscard = report.View;
            report = {};
            yankee = kiloes.itemInner;
            option = new Array(2);
            option[0] = yankee;
            option[1] = offset;
            report['style'] = option;
            offset = result.type;
            option = _closure1_slot5;
            option = option.GUILD;
            if(!(offset !== option)) { _fun00002_ip = 477; continue _fun00001 }
 434:
            yankee = _closure1_slot7;
            offset = _closure1_slot1;
            romeon = _closure1_slot2;
            option = 12;
            option = romeon[option];
            offset = offset.bind(tangon)(option);
            option = {};
            romeon = result.id;
            option['id'] = romeon;
            offset = yankee.bind(tangon)(offset, option);
            _fun00002_ip = 562; continue _fun00001;
 477:
            romeon = _closure1_slot7;
            yankee = _closure1_slot1;
            output = _closure1_slot2;
            backup = 11;
            option = output[backup];
            yankee = yankee.bind(tangon)(option);
            option = {};
            result = result.guild;
            option['guild'] = result;
            option['loadingStyle'] = sizing;
            sizing = _closure1_slot0;
            backup = output[backup];
            backup = sizing.bind(tangon)(backup);
            backup = backup.GuildIconSizes;
            backup = backup.XSMALL;
            option['size'] = backup;
            backup = kiloes.guildItem;
            option['style'] = backup;
            offset = romeon.bind(tangon)(yankee, option);
 562:
            option = new Array(2);
            option[0] = offset;
            if(!verify) { _fun00002_ip = 647; continue _fun00001 }
 573:
            romeon = _closure1_slot7;
            yankee = _closure1_slot4;
            offset = {};
            backup = kiloes.lockContainer;
            offset['style'] = backup;
            backup = _closure1_slot0;
            sizing = _closure1_slot2;
            foxtra = 13;
            foxtra = sizing[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.LockIcon;
            foxtra = {};
            kiloes = kiloes.lock;
            foxtra['style'] = kiloes;
            foxtra = romeon.bind(tangon)(backup, foxtra);
            offset['children'] = foxtra;
            verify = romeon.bind(tangon)(yankee, offset);
 647:
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/emoji_picker/native/components/categories/EmojiPickerCategoriesItem.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();