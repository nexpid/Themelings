// app/modules/emoji_picker/native/components/EmojiPickerListComponents.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    romeo = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, tango);
    entity = 0;
    report = golf[entity];
    tango = argCorge;
    entity = undefined;
    options = tango.bind(entity)(report);
    tango = 1;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    backup = tango.LABEL_MARGIN;
    foxtrot = tango.NSFW_ROW_HEIGHT;
    tango = 3;
    report = golf[tango];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot4 = report;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 4;
    tango = golf[tango];
    verify = oscar.bind(entity)(tango);
    report = verify.createStyles;
    tango = {};
    offset = {'justifyContent': 'center', 'overflow': 'hidden'};
    yankee = 5;
    kilo = golf[yankee];
    kilo = romeo.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.EXPRESSION_PICKER_BG;
    offset['backgroundColor'] = kilo;
    offset['paddingTop'] = backup;
    tango['section'] = offset;
    offset = {'flexDirection': 'row', 'height': null, 'alignItems': 'center', 'justifyContent': 'center', 'borderRadius': null, 'marginLeft': 12, 'marginRight': 12};
    offset['height'] = foxtrot;
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.sm;
    offset['borderRadius'] = foxtrot;
    yankee = golf[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_SECONDARY_ALT;
    offset['backgroundColor'] = yankee;
    tango['nsfwContainer'] = offset;
    offset = {'marginLeft': 4, 'textAlign': 'center'};
    tango['nsfwText'] = offset;
    tango = report.bind(verify)(tango);
    var _closure1_slot6 = tango;
    report = options.memo;
    tango = function() {
        entity = _closure1_slot6;
        tango = undefined;
        verify = entity.bind(tango)();
        zulu = _closure1_slot5;
        mike = _closure1_slot3;
        entity = {};
        report = verify.nsfwContainer;
        entity['style'] = report;
        options = _closure1_slot4;
        yankee = _closure1_slot1;
        foxtrot = _closure1_slot2;
        offset = 6;
        report = foxtrot[offset];
        golf = yankee.bind(tango)(report);
        report = {};
        romeo = 7;
        romeo = foxtrot[romeo];
        romeo = yankee.bind(tango)(romeo);
        report['source'] = romeo;
        offset = foxtrot[offset];
        offset = yankee.bind(tango)(offset);
        offset = offset.Sizes;
        offset = offset.SMALL;
        report['size'] = offset;
        golf = options.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        romeo = _closure1_slot0;
        oscar = 8;
        oscar = foxtrot[oscar];
        oscar = romeo.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {'style': null, 'variant': 'text-sm/normal', 'color': 'interactive-active'};
        verify = verify.nsfwText;
        oscar['style'] = verify;
        verify = 9;
        offset = foxtrot[verify];
        offset = romeo.bind(tango)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtrot[verify];
        verify = romeo.bind(tango)(verify);
        verify = verify.t;
        verify = verify.SLzV5+;
        verify = offset.bind(yankee)(verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    tango = report.bind(options)(tango);
    report = options.memo;
    mike = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.label;
            oscar = entity.isSectionNitroLocked;
            yankee = entity.useTier0UpsellContent;
            entity = _closure1_slot6;
            tango = undefined;
            report = entity.bind(tango)();
            zulu = _closure1_slot5;
            mike = _closure1_slot3;
            entity = {};
            report = report.section;
            entity['style'] = report;
            if(!oscar) { _fun00002_ip = 98; continue _fun00001 }
 55:
            verify = _closure1_slot4;
            options = _closure1_slot0;
            romeo = _closure1_slot2;
            report = 10;
            report = romeo[report];
            report = options.bind(tango)(report);
            options = report.PremiumUpsellGradientBackground;
            report = {};
            report['useTier0UpsellContent'] = yankee;
            oscar = verify.bind(tango)(options, report);
 98:
            report = new Array(2);
            report[0] = oscar;
            options = '';
            oscar = null;
            if(!(options !== offset)) { _fun00002_ip = 169; continue _fun00001 }
 116:
            verify = _closure1_slot4;
            options = _closure1_slot0;
            yankee = _closure1_slot2;
            golf = 8;
            golf = yankee[golf];
            golf = options.bind(tango)(golf);
            options = golf.Text;
            golf = {'lineClamp': 1, 'color': 'interactive-normal', 'variant': 'heading-sm/semibold'};
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 169:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = report.bind(options)(mike);
    report = 11;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/emoji_picker/native/components/EmojiPickerListComponents.tsx';
    report = oscar.bind(golf)(report);
    zulu['NSFWRow'] = tango;
    zulu['Section'] = mike;
    return entity;
})();