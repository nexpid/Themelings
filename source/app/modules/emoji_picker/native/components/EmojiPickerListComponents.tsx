// app/modules/emoji_picker/native/components/EmojiPickerListComponents.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    report = golfie[entity];
    tangon = argCor;
    entity = undefined;
    option = tangon.bind(entity)(report);
    tangon = 1;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    backup = tangon.LABEL_MARGIN;
    foxtra = tangon.NSFW_ROW_HEIGHT;
    tangon = 3;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    report = tangon.jsx;
    var _closure1_slot4 = report;
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = golfie[tangon];
    verify = oscard.bind(entity)(tangon);
    report = verify.createStyles;
    tangon = {};
    offset = {'justifyContent': 'center', 'overflow': 'hidden'};
    yankee = 5;
    kiloes = golfie[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.EXPRESSION_PICKER_BG;
    offset['backgroundColor'] = kiloes;
    offset['paddingTop'] = backup;
    tangon['section'] = offset;
    offset = {'flexDirection': 'row', 'height': null, 'alignItems': 'center', 'justifyContent': 'center', 'borderRadius': null, 'marginLeft': 12, 'marginRight': 12};
    offset['height'] = foxtra;
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    offset['borderRadius'] = foxtra;
    yankee = golfie[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_SECONDARY_ALT;
    offset['backgroundColor'] = yankee;
    tangon['nsfwContainer'] = offset;
    offset = {'marginLeft': 4, 'textAlign': 'center'};
    tangon['nsfwText'] = offset;
    tangon = report.bind(verify)(tangon);
    var _closure1_slot6 = tangon;
    report = option.memo;
    tangon = function() {
        entity = _closure1_slot6;
        tangon = undefined;
        verify = entity.bind(tangon)();
        zuuluu = _closure1_slot5;
        michal = _closure1_slot3;
        entity = {};
        report = verify.nsfwContainer;
        entity['style'] = report;
        option = _closure1_slot4;
        yankee = _closure1_slot1;
        foxtra = _closure1_slot2;
        offset = 6;
        report = foxtra[offset];
        golfie = yankee.bind(tangon)(report);
        report = {};
        romeon = 7;
        romeon = foxtra[romeon];
        romeon = yankee.bind(tangon)(romeon);
        report['source'] = romeon;
        offset = foxtra[offset];
        offset = yankee.bind(tangon)(offset);
        offset = offset.Sizes;
        offset = offset.SMALL;
        report['size'] = offset;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        romeon = _closure1_slot0;
        oscard = 8;
        oscard = foxtra[oscard];
        oscard = romeon.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'style': null, 'variant': 'text-sm/normal', 'color': 'interactive-active'};
        verify = verify.nsfwText;
        oscard['style'] = verify;
        verify = 9;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        verify = verify.t;
        verify = verify.SLzV5+;
        verify = offset.bind(yankee)(verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    tangon = report.bind(option)(tangon);
    report = option.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.label;
            oscard = entity.isSectionNitroLocked;
            yankee = entity.useTier0UpsellContent;
            entity = _closure1_slot6;
            tangon = undefined;
            report = entity.bind(tangon)();
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = report.section;
            entity['style'] = report;
            if(!oscard) { _fun00002_ip = 98; continue _fun00001 }
 55:
            verify = _closure1_slot4;
            option = _closure1_slot0;
            romeon = _closure1_slot2;
            report = 10;
            report = romeon[report];
            report = option.bind(tangon)(report);
            option = report.PremiumUpsellGradientBackground;
            report = {};
            report['useTier0UpsellContent'] = yankee;
            oscard = verify.bind(tangon)(option, report);
 98:
            report = new Array(2);
            report[0] = oscard;
            option = '';
            oscard = null;
            if(!(option !== offset)) { _fun00002_ip = 169; continue _fun00001 }
 116:
            verify = _closure1_slot4;
            option = _closure1_slot0;
            yankee = _closure1_slot2;
            golfie = 8;
            golfie = yankee[golfie];
            golfie = option.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'lineClamp': 1, 'color': 'interactive-normal', 'variant': 'heading-sm/semibold'};
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 169:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = report.bind(option)(michal);
    report = 11;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/emoji_picker/native/components/EmojiPickerListComponents.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['NSFWRow'] = tangon;
    zuuluu['Section'] = michal;
    return entity;
})();