// app/modules/emoji_picker/native/components/EmojiPickerListComponentEmpty.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var13 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var13;
    var _closure1_slot2 = var6;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var11 = 0;
    var7 = var6[var11];
    var4 = metroImportAll;
    var1 = undefined;
    var7 = var4.bind(var1)(var7);
    var _closure1_slot3 = var7;
    var4 = 1;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.ScrollView;
    var _closure1_slot4 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.jsx;
    var _closure1_slot5 = var4;
    var4 = 3;
    var4 = var6[var4];
    var9 = var5.bind(var1)(var4);
    var8 = var9.createStyles;
    var4 = {};
    var10 = {'padding': 0, 'flex': 1};
    var4['emptyStateContainer'] = var10;
    var10 = {};
    var12 = 4;
    var14 = var6[var12];
    var14 = var13.bind(var1)(var14);
    var14 = var14.colors;
    var14 = var14.HEADER_SECONDARY;
    var10['color'] = var14;
    var4['emptyStateBody'] = var10;
    var10 = {};
    var12 = var6[var12];
    var12 = var13.bind(var1)(var12);
    var12 = var12.spacing;
    var12 = var12.PX_8;
    var10['marginBottom'] = var12;
    var10['marginTop'] = var11;
    var4['emptyStateImage'] = var10;
    var4 = var8.bind(var9)(var4);
    var _closure1_slot6 = var4;
    var4 = var7.memo;
    var2 = function EmojiPickerListComponentEmpty(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var3 = arg1;
            var1 = var3.inActionSheet;
            var9 = var3.insetTop;
            var _closure2_slot0 = var9;
            var10 = var3.insetBottom;
            var _closure2_slot1 = var10;
            var3 = _closure1_slot6;
            var4 = undefined;
            var7 = var3.bind(var4)();
            var6 = _closure1_slot3;
            var5 = var6.useMemo;
            var3 = new Array(2);
            var3[0] = var10;
            var3[1] = var9;
            var2 = function() {
                var1 = {};
                var3 = _closure2_slot1;
                var1['marginBottom'] = var3;
                var2 = _closure2_slot0;
                var1['marginTop'] = var2;
                var2 = 1;
                var1['flex'] = var2;
                return var1;
            };
            var5 = var5.bind(var6)(var2, var3);
            var3 = _closure1_slot0;
            var6 = _closure1_slot2;
            var2 = 5;
            var2 = var6[var2];
            var3 = var3.bind(var4)(var2);
            var2 = var3.useSearchEmptySource;
            var9 = var2.bind(var3)();
            if(var1) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var3 = _closure1_slot4;
            _fun0001_ip = 4; continue _fun0001;
case 2:
            var2 = _closure1_slot0;
            var6 = _closure1_slot2;
            var1 = 6;
            var1 = var6[var1];
            var1 = var2.bind(var4)(var1);
            var3 = var1.BottomSheetScrollView;
case 4:
            var2 = _closure1_slot5;
            var1 = {};
            var1['contentContainerStyle'] = var5;
            var5 = 'always';
            var1['keyboardShouldPersistTaps'] = var5;
            var6 = _closure1_slot1;
            var12 = _closure1_slot2;
            var5 = 7;
            var5 = var12[var5];
            var6 = var6.bind(var4)(var5);
            var5 = {};
            var5['source'] = var9;
            var11 = _closure1_slot0;
            var8 = 8;
            var9 = var12[var8];
            var9 = var11.bind(var4)(var9);
            var10 = var9.intl;
            var9 = var10.string;
            var8 = var12[var8];
            var8 = var11.bind(var4)(var8);
            var8 = var8.t;
            var8 = var8.IxxiKC;
            var8 = var9.bind(var10)(var8);
            var5['body'] = var8;
            var8 = var7.emptyStateBody;
            var5['bodyStyle'] = var8;
            var8 = var7.emptyStateContainer;
            var5['containerStyle'] = var8;
            var7 = var7.emptyStateImage;
            var5['imageStyle'] = var7;
            var5 = var2.bind(var4)(var6, var5);
            var1['children'] = var5;
            var1 = var2.bind(var4)(var3, var1);
            return var1;
        }
    };
    var2 = var4.bind(var7)(var2);
    var4 = 9;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/emoji_picker/native/components/EmojiPickerListComponentEmpty.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();