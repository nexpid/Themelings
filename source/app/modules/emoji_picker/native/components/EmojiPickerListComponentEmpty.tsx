// app/modules/emoji_picker/native/components/EmojiPickerListComponentEmpty.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ScrollView;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'center'};
    tango['emptyStateContainer'] = offset;
    offset = {};
    yankee = 4;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.HEADER_SECONDARY;
    offset['color'] = foxtrot;
    tango['emptyStateBody'] = offset;
    offset = {};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['marginBottom'] = yankee;
    tango['emptyStateImage'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot5 = tango;
    tango = golf.memo;
    mike = function(argFoo) { // Original name: EmojiPickerListComponentEmpty
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.inActionSheet;
            mike = _closure1_slot5;
            tango = undefined;
            golf = mike.bind(tango)();
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            mike = 5;
            mike = report[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.useSearchEmptySource;
            verify = mike.bind(zulu)();
            if(entity) { _fun00002_ip = 61; continue _fun00001 }
 55:
            zulu = _closure1_slot3;
            _fun00002_ip = 87; continue _fun00001;
 61:
            mike = _closure1_slot0;
            report = _closure1_slot2;
            entity = 6;
            entity = report[entity];
            entity = mike.bind(tango)(entity);
            zulu = entity.BottomSheetScrollView;
 87:
            mike = _closure1_slot4;
            entity = {};
            report = golf.emptyStateContainer;
            entity['contentContainerStyle'] = report;
            report = 'always';
            entity['keyboardShouldPersistTaps'] = report;
            oscar = _closure1_slot1;
            romeo = _closure1_slot2;
            report = 7;
            report = romeo[report];
            oscar = oscar.bind(tango)(report);
            report = {};
            report['source'] = verify;
            yankee = _closure1_slot0;
            options = 8;
            verify = romeo[options];
            verify = yankee.bind(tango)(verify);
            offset = verify.intl;
            verify = offset.string;
            options = romeo[options];
            options = yankee.bind(tango)(options);
            options = options.t;
            options = options.IxxiKC;
            options = verify.bind(offset)(options);
            report['body'] = options;
            options = golf.emptyStateBody;
            report['bodyStyle'] = options;
            golf = golf.emptyStateImage;
            report['imageStyle'] = golf;
            report = mike.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = mike.bind(tango)(zulu, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/emoji_picker/native/components/EmojiPickerListComponentEmpty.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();