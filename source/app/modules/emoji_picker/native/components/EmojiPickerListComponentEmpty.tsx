// app/modules/emoji_picker/native/components/EmojiPickerListComponentEmpty.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ScrollView;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'center'};
    tangon['emptyStateContainer'] = offset;
    offset = {};
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.HEADER_SECONDARY;
    offset['color'] = foxtra;
    tangon['emptyStateBody'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['marginBottom'] = yankee;
    tangon['emptyStateImage'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot5 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: EmojiPickerListComponentEmpty
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.inActionSheet;
            michal = _closure1_slot5;
            tangon = undefined;
            golfie = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            michal = 5;
            michal = report[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.useSearchEmptySource;
            verify = michal.bind(zuuluu)();
            if(entity) { _fun00002_ip = 61; continue _fun00001 }
 55:
            zuuluu = _closure1_slot3;
            _fun00002_ip = 87; continue _fun00001;
 61:
            michal = _closure1_slot0;
            report = _closure1_slot2;
            entity = 6;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            zuuluu = entity.BottomSheetScrollView;
 87:
            michal = _closure1_slot4;
            entity = {};
            report = golfie.emptyStateContainer;
            entity['contentContainerStyle'] = report;
            report = 'always';
            entity['keyboardShouldPersistTaps'] = report;
            oscard = _closure1_slot1;
            romeon = _closure1_slot2;
            report = 7;
            report = romeon[report];
            oscard = oscard.bind(tangon)(report);
            report = {};
            report['source'] = verify;
            yankee = _closure1_slot0;
            option = 8;
            verify = romeon[option];
            verify = yankee.bind(tangon)(verify);
            offset = verify.intl;
            verify = offset.string;
            option = romeon[option];
            option = yankee.bind(tangon)(option);
            option = option.t;
            option = option.IxxiKC;
            option = verify.bind(offset)(option);
            report['body'] = option;
            option = golfie.emptyStateBody;
            report['bodyStyle'] = option;
            golfie = golfie.emptyStateImage;
            report['imageStyle'] = golfie;
            report = michal.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = michal.bind(tangon)(zuuluu, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/emoji_picker/native/components/EmojiPickerListComponentEmpty.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();