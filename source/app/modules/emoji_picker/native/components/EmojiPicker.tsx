// app/modules/emoji_picker/native/components/EmojiPicker.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    backup = tangon.StyleSheet;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.AnalyticEvents;
    var _closure1_slot5 = option;
    option = tangon.ChatInputComponentViewedTypes;
    var _closure1_slot6 = option;
    tangon = tangon.VerticalGradient;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.EMOJI_URL_BASE_SIZE;
    var _closure1_slot8 = option;
    tangon = tangon.EmojiIntention;
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot10 = option;
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['flex'] = romeon;
    tangon['container'] = offset;
    offset = {'overflow': 'hidden', 'flex': 1};
    tangon['list'] = offset;
    offset = {};
    yankee = 6;
    kiloes = oscard[yankee];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_8;
    offset['paddingTop'] = kiloes;
    tangon['header'] = offset;
    offset = {};
    kiloes = oscard[yankee];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_PRIMARY;
    offset['color'] = kiloes;
    tangon['headerGradientColor'] = offset;
    offset = {};
    output = backup.absoluteFillObject;
    result = offset;
    backup = copyDataProperties(result, output);
    yankee = oscard[yankee];
    yankee = foxtra.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_8;
    romeon = yankee + romeon;
    yankee = 'height';
    offset[yankee] = romeon;
    yankee = 'bottom';
    offset[yankee] = entity;
    romeon = -1;
    yankee = 'top';
    offset[yankee] = romeon;
    tangon['headerGradient'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot12 = tangon;
    tangon = function(argFoo) { // Original name: onLongPressEmoji
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            entity = zuuluu.uniqueName;
            tangon = null;
            if(!(tangon != entity)) { _fun00002_ip = 29; continue _fun00001 }
 15:
            michal = zuuluu.uniqueName;
            entity = '';
            if(!(entity === michal)) { _fun00002_ip = 36; continue _fun00001 }
 29:
            report = zuuluu.name;
            _fun00002_ip = 42; continue _fun00001;
 36:
            report = zuuluu.uniqueName;
 42:
            entity = zuuluu.id;
            if(!(tangon == entity)) { _fun00002_ip = 60; continue _fun00001 }
 51:
            entity = zuuluu.surrogates;
            if(!(tangon == entity)) { _fun00002_ip = 165; continue _fun00001 }
 60:
            michal = {};
            entity = zuuluu.id;
            michal['id'] = entity;
            michal['alt'] = report;
            entity = zuuluu.id;
            if(!(tangon == entity)) { _fun00002_ip = 92; continue _fun00001 }
 85:
            entity = zuuluu.url;
            _fun00002_ip = 158; continue _fun00001;
 92:
            golfie = _closure1_slot1;
            oscard = _closure1_slot2;
            tangon = 8;
            oscard = oscard[tangon];
            tangon = undefined;
            golfie = golfie.bind(tangon)(oscard);
            oscard = golfie.getEmojiURL;
            tangon = {};
            verify = zuuluu.id;
            tangon['id'] = verify;
            verify = zuuluu.animated;
            tangon['animated'] = verify;
            option = _closure1_slot8;
            tangon['size'] = option;
            entity = oscard.bind(golfie)(tangon);
 158:
            michal['src'] = entity;
            _fun00002_ip = 207; continue _fun00001;
 165:
            entity = {};
            zuuluu = zuuluu.surrogates;
            entity['surrogate'] = zuuluu;
            zuuluu = global;
            zuuluu = zuuluu.HermesInternal;
            tangon = zuuluu.concat;
            zuuluu = ':';
            zuuluu = tangon.bind(zuuluu)(report, zuuluu);
            entity['content'] = zuuluu;
            michal = entity;
 207:
            golfie = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 9;
            report = zuuluu[entity];
            entity = undefined;
            oscard = golfie.bind(entity)(report);
            report = oscard.dismissGlobalKeyboard;
            report = report.bind(oscard)();
            report = _closure1_slot1;
            tangon = 10;
            tangon = zuuluu[tangon];
            oscard = report.bind(entity)(tangon);
            report = oscard.openLazy;
            tangon = 12;
            tangon = zuuluu[tangon];
            golfie = golfie.bind(entity)(tangon);
            tangon = 11;
            tangon = zuuluu[tangon];
            zuuluu = zuuluu.paths;
            tangon = golfie.bind(entity)(tangon, zuuluu);
            zuuluu = {};
            zuuluu['emojiNode'] = michal;
            michal = 'MessageEmojiActionSheet';
            michal = report.bind(oscard)(tangon, michal, zuuluu);
            return entity;
        }
    };
    var _closure1_slot13 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: EmojiPicker
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            vacuum = entity.channel;
            var _closure2_slot0 = vacuum;
            sequen = entity.onPressEmoji;
            romeon = entity.onBackspace;
            record = entity.disableLongPress;
            tangon = undefined;
            if(!(record === tangon)) { _fun00004_ip = 40; continue _fun00003 }
 38:
            record = false;
 40:
            echoed = entity.inActionSheet;
            result = entity.inPortalKeyboard;
            entity = _closure1_slot12;
            ctrled = entity.bind(tangon)();
            golfie = _closure1_slot3;
            report = golfie.useEffect;
            entity = vacuum.id;
            zuuluu = new Array(2);
            zuuluu[0] = entity;
            entity = vacuum.guild_id;
            zuuluu[1] = entity;
            entity = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 7;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.track;
                michal = _closure1_slot5;
                zuuluu = michal.CHAT_INPUT_COMPONENT_VIEWED;
                michal = {};
                oscard = _closure1_slot6;
                oscard = oscard.EMOJI;
                michal['type'] = oscard;
                oscard = _closure2_slot0;
                golfie = oscard.id;
                michal['channel_id'] = golfie;
                oscard = oscard.guild_id;
                michal['guild_id'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            entity = report.bind(golfie)(entity, zuuluu);
            quebec = _closure1_slot0;
            papara = _closure1_slot2;
            entity = 13;
            entity = papara[entity];
            zuuluu = quebec.bind(tangon)(entity);
            entity = zuuluu.useSharedValue;
            config = 0;
            foxtra = entity.bind(zuuluu)(config);
            entity = 14;
            entity = papara[entity];
            oscard = quebec.bind(tangon)(entity);
            report = oscard.useEmojiCategories;
            zuuluu = _closure1_slot9;
            entity = zuuluu.CHAT;
            backup = report.bind(oscard)(entity, vacuum);
            report = golfie.useRef;
            entity = null;
            kiloes = report.bind(golfie)(entity);
            yankee = _closure1_slot1;
            entity = 15;
            report = papara[entity];
            oscard = yankee.bind(tangon)(report);
            report = 16;
            report = papara[report];
            report = yankee.bind(tangon)(report);
            report = report.EMOJI_PICKER;
            report = oscard.bind(tangon)(report);
            report = report.analyticsLocations;
            oscard = 17;
            oscard = papara[oscard];
            oscard = yankee.bind(tangon)(oscard);
            zuuluu = zuuluu.CHAT;
            zuuluu = oscard.bind(tangon)(vacuum, foxtra, zuuluu);
            sierra = zuuluu.handleTextChange;
            output = zuuluu.searchQueryRef;
            cntext = zuuluu.searchResults;
            oscard = golfie.useCallback;
            zuuluu = new Array(1);
            zuuluu[0] = vacuum;
            michal = function() {
                oscard = _closure2_slot0;
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 7;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.track;
                michal = _closure1_slot5;
                zuuluu = michal.CHAT_INPUT_COMPONENT_VIEWED;
                michal = {};
                golfie = _closure1_slot6;
                golfie = golfie.EMOJI_SEARCH;
                michal['type'] = golfie;
                golfie = oscard.id;
                michal['channel_id'] = golfie;
                oscard = oscard.guild_id;
                michal['guild_id'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            status = oscard.bind(golfie)(michal, zuuluu);
            michal = 18;
            michal = papara[michal];
            zuuluu = yankee.bind(tangon)(michal);
            michal = {};
            target = true;
            michal['hasCategories'] = target;
            michal = zuuluu.bind(tangon)(michal);
            sizing = michal.safeAreaStyle;
            update = michal.safeAreaBottomKeyboardAware;
            zuuluu = _closure1_slot10;
            entity = papara[entity];
            entity = quebec.bind(tangon)(entity);
            michal = entity.AnalyticsLocationProvider;
            entity = {};
            entity['value'] = report;
            golfie = _closure1_slot11;
            oscard = _closure1_slot4;
            report = {};
            option = ctrled.container;
            report['style'] = option;
            option = {};
            verify = ctrled.header;
            option['style'] = verify;
            verify = 19;
            verify = papara[verify];
            verify = quebec.bind(tangon)(verify);
            offset = verify.SearchField;
            verify = {};
            limora = 'md';
            verify['size'] = limora;
            limora = 20;
            whisks = papara[limora];
            whisks = quebec.bind(tangon)(whisks);
            equals = whisks.intl;
            whisks = equals.string;
            limora = papara[limora];
            limora = quebec.bind(tangon)(limora);
            limora = limora.t;
            limora = limora.KgK5qq;
            limora = whisks.bind(equals)(limora);
            verify['placeholder'] = limora;
            verify['onChange'] = sierra;
            verify['onFocus'] = status;
            verify['isRound'] = target;
            verify = zuuluu.bind(tangon)(offset, verify);
            option['children'] = verify;
            verify = zuuluu.bind(tangon)(oscard, option);
            option = new Array(3);
            option[0] = verify;
            verify = {};
            offset = ctrled.list;
            verify['style'] = offset;
            offset = 21;
            offset = papara[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            offset['emojiPickerListRef'] = kiloes;
            offset['categories'] = backup;
            offset['categoryIndexActive'] = foxtra;
            offset['emojis'] = cntext;
            offset['onPressEmoji'] = sequen;
            sequen = undefined;
            if(record) { _fun00004_ip = 571; continue _fun00003 }
 567:
            sequen = _closure1_slot13;
 571:
            offset['onLongPressEmoji'] = sequen;
            offset['channel'] = vacuum;
            vacuum = _closure1_slot9;
            vacuum = vacuum.CHAT;
            offset['emojiPickerIntention'] = vacuum;
            offset['insetBottom'] = update;
            offset['inActionSheet'] = echoed;
            offset['inPortalKeyboard'] = result;
            offset['searchQueryRef'] = output;
            offset = zuuluu.bind(tangon)(yankee, offset);
            result = new Array(2);
            result[0] = offset;
            yankee = _closure1_slot10;
            offset = _closure1_slot1;
            output = _closure1_slot2;
            echoed = 22;
            echoed = output[echoed];
            update = offset.bind(tangon)(echoed);
            echoed = {};
            vacuum = ctrled.headerGradient;
            echoed['style'] = vacuum;
            vacuum = _closure1_slot7;
            sequen = vacuum.START;
            echoed['start'] = sequen;
            vacuum = vacuum.END;
            echoed['end'] = vacuum;
            sequen = _closure1_slot0;
            vacuum = 23;
            source = output[vacuum];
            papara = sequen.bind(tangon)(source);
            cntext = papara.hexOpacityToRgba;
            source = ctrled.headerGradientColor;
            record = source.color;
            source = 100;
            record = cntext.bind(papara)(record, source);
            source = new Array(2);
            source[0] = record;
            vacuum = output[vacuum];
            sequen = sequen.bind(tangon)(vacuum);
            vacuum = sequen.hexOpacityToRgba;
            ctrled = ctrled.headerGradientColor;
            ctrled = ctrled.color;
            ctrled = vacuum.bind(sequen)(ctrled, config);
            source[1] = ctrled;
            echoed['colors'] = source;
            echoed = yankee.bind(tangon)(update, echoed);
            result[1] = echoed;
            verify['children'] = result;
            verify = golfie.bind(tangon)(oscard, verify);
            option[1] = verify;
            verify = 24;
            verify = output[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            verify['style'] = sizing;
            verify['emojiPickerListRef'] = kiloes;
            verify['categories'] = backup;
            verify['categoryIndexActive'] = foxtra;
            verify['onBackspace'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/emoji_picker/native/components/EmojiPicker.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();