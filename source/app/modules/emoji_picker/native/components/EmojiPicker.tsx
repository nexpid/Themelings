// app/modules/emoji_picker/native/components/EmojiPicker.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    romeo = 1;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    backup = tango.StyleSheet;
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.AnalyticEvents;
    var _closure1_slot5 = options;
    options = tango.ChatInputComponentViewedTypes;
    var _closure1_slot6 = options;
    tango = tango.VerticalGradient;
    var _closure1_slot7 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.EMOJI_URL_BASE_SIZE;
    var _closure1_slot8 = options;
    tango = tango.EmojiIntention;
    var _closure1_slot9 = tango;
    tango = 4;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot10 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot11 = tango;
    tango = 5;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    offset['flex'] = romeo;
    tango['container'] = offset;
    offset = {'overflow': 'hidden', 'flex': 1};
    tango['list'] = offset;
    offset = {};
    yankee = 6;
    kilo = oscar[yankee];
    kilo = foxtrot.bind(entity)(kilo);
    kilo = kilo.spacing;
    kilo = kilo.PX_8;
    offset['paddingTop'] = kilo;
    tango['header'] = offset;
    offset = {};
    kilo = oscar[yankee];
    kilo = foxtrot.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BACKGROUND_PRIMARY;
    offset['color'] = kilo;
    tango['headerGradientColor'] = offset;
    offset = {};
    output = backup.absoluteFillObject;
    result = offset;
    backup = copyDataProperties(result, output);
    yankee = oscar[yankee];
    yankee = foxtrot.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_8;
    romeo = yankee + romeo;
    yankee = 'height';
    offset[yankee] = romeo;
    yankee = 'bottom';
    offset[yankee] = entity;
    romeo = -1;
    yankee = 'top';
    offset[yankee] = romeo;
    tango['headerGradient'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot12 = tango;
    tango = function(argFoo) { // Original name: onLongPressEmoji
        _fun84607: for(var _fun84607_ip = 0; ; ) switch(_fun84607_ip) {
 0:
            zulu = argFoo;
            entity = zulu.uniqueName;
            tango = null;
            if(!(tango != entity)) { _fun84607_ip = 29; continue _fun84607 }
 15:
            mike = zulu.uniqueName;
            entity = '';
            if(!(entity === mike)) { _fun84607_ip = 36; continue _fun84607 }
 29:
            report = zulu.name;
            _fun84607_ip = 42; continue _fun84607;
 36:
            report = zulu.uniqueName;
 42:
            entity = zulu.id;
            if(!(tango == entity)) { _fun84607_ip = 60; continue _fun84607 }
 51:
            entity = zulu.surrogates;
            if(!(tango == entity)) { _fun84607_ip = 165; continue _fun84607 }
 60:
            mike = {};
            entity = zulu.id;
            mike['id'] = entity;
            mike['alt'] = report;
            entity = zulu.id;
            if(!(tango == entity)) { _fun84607_ip = 92; continue _fun84607 }
 85:
            entity = zulu.url;
            _fun84607_ip = 158; continue _fun84607;
 92:
            golf = _closure1_slot1;
            oscar = _closure1_slot2;
            tango = 8;
            oscar = oscar[tango];
            tango = undefined;
            golf = golf.bind(tango)(oscar);
            oscar = golf.getEmojiURL;
            tango = {};
            verify = zulu.id;
            tango['id'] = verify;
            verify = zulu.animated;
            tango['animated'] = verify;
            options = _closure1_slot8;
            tango['size'] = options;
            entity = oscar.bind(golf)(tango);
 158:
            mike['src'] = entity;
            _fun84607_ip = 207; continue _fun84607;
 165:
            entity = {};
            zulu = zulu.surrogates;
            entity['surrogate'] = zulu;
            zulu = global;
            zulu = zulu.HermesInternal;
            tango = zulu.concat;
            zulu = ':';
            zulu = tango.bind(zulu)(report, zulu);
            entity['content'] = zulu;
            mike = entity;
 207:
            golf = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 9;
            report = zulu[entity];
            entity = undefined;
            oscar = golf.bind(entity)(report);
            report = oscar.dismissGlobalKeyboard;
            report = report.bind(oscar)();
            report = _closure1_slot1;
            tango = 10;
            tango = zulu[tango];
            oscar = report.bind(entity)(tango);
            report = oscar.openLazy;
            tango = 12;
            tango = zulu[tango];
            golf = golf.bind(entity)(tango);
            tango = 11;
            tango = zulu[tango];
            zulu = zulu.paths;
            tango = golf.bind(entity)(tango, zulu);
            zulu = {};
            zulu['emojiNode'] = mike;
            mike = 'MessageEmojiActionSheet';
            mike = report.bind(oscar)(tango, mike, zulu);
            return entity;
        }
    };
    var _closure1_slot13 = tango;
    tango = golf.memo;
    mike = function(argFoo) { // Original name: EmojiPicker
        _fun84608: for(var _fun84608_ip = 0; ; ) switch(_fun84608_ip) {
 0:
            entity = argFoo;
            vacuum = entity.channel;
            var _closure2_slot0 = vacuum;
            sequence = entity.onPressEmoji;
            romeo = entity.onBackspace;
            record = entity.disableLongPress;
            tango = undefined;
            if(!(record === tango)) { _fun84608_ip = 40; continue _fun84608 }
 38:
            record = false;
 40:
            echo = entity.inActionSheet;
            result = entity.inPortalKeyboard;
            entity = _closure1_slot12;
            control = entity.bind(tango)();
            golf = _closure1_slot3;
            report = golf.useEffect;
            entity = vacuum.id;
            zulu = new Array(2);
            zulu[0] = entity;
            entity = vacuum.guild_id;
            zulu[1] = entity;
            entity = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 7;
                mike = mike[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.track;
                mike = _closure1_slot5;
                zulu = mike.CHAT_INPUT_COMPONENT_VIEWED;
                mike = {};
                oscar = _closure1_slot6;
                oscar = oscar.EMOJI;
                mike['type'] = oscar;
                oscar = _closure2_slot0;
                golf = oscar.id;
                mike['channel_id'] = golf;
                oscar = oscar.guild_id;
                mike['guild_id'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            entity = report.bind(golf)(entity, zulu);
            quebec = _closure1_slot0;
            papa = _closure1_slot2;
            entity = 13;
            entity = papa[entity];
            zulu = quebec.bind(tango)(entity);
            entity = zulu.useSharedValue;
            config = 0;
            foxtrot = entity.bind(zulu)(config);
            entity = 14;
            entity = papa[entity];
            oscar = quebec.bind(tango)(entity);
            report = oscar.useEmojiCategories;
            zulu = _closure1_slot9;
            entity = zulu.CHAT;
            backup = report.bind(oscar)(entity, vacuum);
            report = golf.useRef;
            entity = null;
            kilo = report.bind(golf)(entity);
            yankee = _closure1_slot1;
            entity = 15;
            report = papa[entity];
            oscar = yankee.bind(tango)(report);
            report = 16;
            report = papa[report];
            report = yankee.bind(tango)(report);
            report = report.EMOJI_PICKER;
            report = oscar.bind(tango)(report);
            report = report.analyticsLocations;
            oscar = 17;
            oscar = papa[oscar];
            oscar = yankee.bind(tango)(oscar);
            zulu = zulu.CHAT;
            zulu = oscar.bind(tango)(vacuum, foxtrot, zulu);
            sierra = zulu.handleTextChange;
            output = zulu.searchQueryRef;
            context = zulu.searchResults;
            oscar = golf.useCallback;
            zulu = new Array(1);
            zulu[0] = vacuum;
            mike = function() {
                oscar = _closure2_slot0;
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 7;
                mike = mike[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.track;
                mike = _closure1_slot5;
                zulu = mike.CHAT_INPUT_COMPONENT_VIEWED;
                mike = {};
                golf = _closure1_slot6;
                golf = golf.EMOJI_SEARCH;
                mike['type'] = golf;
                golf = oscar.id;
                mike['channel_id'] = golf;
                oscar = oscar.guild_id;
                mike['guild_id'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            status = oscar.bind(golf)(mike, zulu);
            mike = 18;
            mike = papa[mike];
            zulu = yankee.bind(tango)(mike);
            mike = {};
            target = true;
            mike['hasCategories'] = target;
            mike = zulu.bind(tango)(mike);
            sizing = mike.safeAreaStyle;
            update = mike.safeAreaBottomKeyboardAware;
            zulu = _closure1_slot10;
            entity = papa[entity];
            entity = quebec.bind(tango)(entity);
            mike = entity.AnalyticsLocationProvider;
            entity = {};
            entity['value'] = report;
            golf = _closure1_slot11;
            oscar = _closure1_slot4;
            report = {};
            options = control.container;
            report['style'] = options;
            options = {};
            verify = control.header;
            options['style'] = verify;
            verify = 19;
            verify = papa[verify];
            verify = quebec.bind(tango)(verify);
            offset = verify.SearchField;
            verify = {};
            lima = 'md';
            verify['size'] = lima;
            lima = 20;
            whiskey = papa[lima];
            whiskey = quebec.bind(tango)(whiskey);
            equality = whiskey.intl;
            whiskey = equality.string;
            lima = papa[lima];
            lima = quebec.bind(tango)(lima);
            lima = lima.t;
            lima = lima.KgK5qq;
            lima = whiskey.bind(equality)(lima);
            verify['placeholder'] = lima;
            verify['onChange'] = sierra;
            verify['onFocus'] = status;
            verify['isRound'] = target;
            verify = zulu.bind(tango)(offset, verify);
            options['children'] = verify;
            verify = zulu.bind(tango)(oscar, options);
            options = new Array(3);
            options[0] = verify;
            verify = {};
            offset = control.list;
            verify['style'] = offset;
            offset = 21;
            offset = papa[offset];
            yankee = yankee.bind(tango)(offset);
            offset = {};
            offset['emojiPickerListRef'] = kilo;
            offset['categories'] = backup;
            offset['categoryIndexActive'] = foxtrot;
            offset['emojis'] = context;
            offset['onPressEmoji'] = sequence;
            sequence = undefined;
            if(record) { _fun84608_ip = 571; continue _fun84608 }
 567:
            sequence = _closure1_slot13;
 571:
            offset['onLongPressEmoji'] = sequence;
            offset['channel'] = vacuum;
            vacuum = _closure1_slot9;
            vacuum = vacuum.CHAT;
            offset['emojiPickerIntention'] = vacuum;
            offset['insetBottom'] = update;
            offset['inActionSheet'] = echo;
            offset['inPortalKeyboard'] = result;
            offset['searchQueryRef'] = output;
            offset = zulu.bind(tango)(yankee, offset);
            result = new Array(2);
            result[0] = offset;
            yankee = _closure1_slot10;
            offset = _closure1_slot1;
            output = _closure1_slot2;
            echo = 22;
            echo = output[echo];
            update = offset.bind(tango)(echo);
            echo = {};
            vacuum = control.headerGradient;
            echo['style'] = vacuum;
            vacuum = _closure1_slot7;
            sequence = vacuum.START;
            echo['start'] = sequence;
            vacuum = vacuum.END;
            echo['end'] = vacuum;
            sequence = _closure1_slot0;
            vacuum = 23;
            source = output[vacuum];
            papa = sequence.bind(tango)(source);
            context = papa.hexOpacityToRgba;
            source = control.headerGradientColor;
            record = source.color;
            source = 100;
            record = context.bind(papa)(record, source);
            source = new Array(2);
            source[0] = record;
            vacuum = output[vacuum];
            sequence = sequence.bind(tango)(vacuum);
            vacuum = sequence.hexOpacityToRgba;
            control = control.headerGradientColor;
            control = control.color;
            control = vacuum.bind(sequence)(control, config);
            source[1] = control;
            echo['colors'] = source;
            echo = yankee.bind(tango)(update, echo);
            result[1] = echo;
            verify['children'] = result;
            verify = golf.bind(tango)(oscar, verify);
            options[1] = verify;
            verify = 24;
            verify = output[verify];
            offset = offset.bind(tango)(verify);
            verify = {};
            verify['style'] = sizing;
            verify['emojiPickerListRef'] = kilo;
            verify['categories'] = backup;
            verify['categoryIndexActive'] = foxtrot;
            verify['onBackspace'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[2] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 25;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/emoji_picker/native/components/EmojiPicker.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();