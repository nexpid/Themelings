// app/modules/headless_tasks/android/MarkAsRead.tsx
export default (function(argFoo, argBar, _, __, argGra, ___, argPlu) {
    zuuluu = argBar;
    tangon = argPlu;
    var _closure1_slot0 = zuuluu;
    var _closure1_slot1 = tangon;
    entity = 0;
    report = tangon[entity];
    entity = undefined;
    report = zuuluu.bind(entity)(report);
    oscard = report.AnalyticsObjectTypes;
    var _closure1_slot2 = oscard;
    report = report.AnalyticsObjects;
    var _closure1_slot3 = report;
    report = function(argFoo) {
        michal = argFoo;
        var _closure2_slot0 = michal;
        michal = global;
        zuuluu = michal.Promise;
        michal = zuuluu.prototype;
        michal = Object.create(michal, {constructor: {value: zuuluu}});
        tangon = function(argFoo) {
            tangon = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 1;
            michal = michal[entity];
            entity = undefined;
            golfie = tangon.bind(entity)(michal);
            oscard = golfie.ack;
            michal = _closure2_slot0;
            foxtra = michal.channelId;
            tangon = {};
            option = _closure1_slot3;
            option = option.MARK_CHANNEL_AS_READ_FROM_NOTIFICATION;
            tangon['object'] = option;
            zuuluu = _closure1_slot2;
            zuuluu = zuuluu.ACK_MANUAL;
            tangon['objectType'] = zuuluu;
            verify = michal.messageId;
            zuuluu = true;
            backup = golfie;
            romeon = tangon;
            yankee = true;
            offset = true;
            michal = backup[oscard](foxtra, romeon, yankee, offset, verify, option);
            michal = argFoo;
            michal = michal.bind(entity)(zuuluu);
            return entity;
        };
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        return entity;
    };
    michal = argGra;
    michal['exports'] = report;
    michal = 2;
    michal = tangon[michal];
    tangon = zuuluu.bind(entity)(michal);
    zuuluu = tangon.fileFinishedImporting;
    michal = 'modules/headless_tasks/android/MarkAsRead.tsx';
    michal = zuuluu.bind(tangon)(michal);
    return entity;
})();