// app/modules/public_guilds/native/components/EnableCommunityModal/EnableCommunitySharedStyles.tsx
export default (function(_, argBar, argBaz, __, ___, argFred, argPlugh) {
    report = argBar;
    offset = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    entity = 0;
    mike = oscar[entity];
    entity = undefined;
    mike = report.bind(entity)(mike);
    mike = mike.Platform;
    mike = 1;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    yankee = mike.Fonts;
    mike = 2;
    mike = oscar[mike];
    golf = report.bind(entity)(mike);
    tango = golf.createStyles;
    mike = {};
    foxtrot = 'center';
    options = {'alignItems': 'center', 'paddingLeft': 16, 'paddingRight': 16, 'marginTop': 30};
    mike['content'] = options;
    options = {};
    verify = 3;
    verify = oscar[verify];
    sizing = offset.bind(entity)(verify);
    kilo = yankee.DISPLAY_EXTRABOLD;
    verify = 4;
    romeo = oscar[verify];
    romeo = offset.bind(entity)(romeo);
    romeo = romeo.colors;
    backup = romeo.HEADER_PRIMARY;
    romeo = 24;
    result = sizing.bind(entity)(kilo, backup, romeo);
    echo = options;
    romeo = copyDataProperties(echo, result);
    backup = 12;
    romeo = 'marginTop';
    options[romeo] = backup;
    romeo = 'textAlign';
    options[romeo] = foxtrot;
    mike['header'] = options;
    options = {'fontSize': 16, 'color': null, 'fontFamily': null, 'marginBottom': 16, 'marginTop': 8, 'textAlign': 'center'};
    romeo = oscar[verify];
    romeo = offset.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.HEADER_SECONDARY;
    options['color'] = romeo;
    yankee = yankee.PRIMARY_MEDIUM;
    options['fontFamily'] = yankee;
    mike['description'] = options;
    options = {'color': null, 'paddingHorizontal': 16, 'fontSize': 12};
    verify = oscar[verify];
    verify = offset.bind(entity)(verify);
    verify = verify.colors;
    verify = verify.HEADER_SECONDARY;
    options['color'] = verify;
    mike['formHint'] = options;
    options = {'position': 'relative', 'paddingTop': 4, 'paddingBottom': 4};
    mike['formSwitchWrapper'] = options;
    mike = tango.bind(golf)(mike);
    tango = 5;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/public_guilds/native/components/EnableCommunityModal/EnableCommunitySharedStyles.tsx';
    tango = report.bind(oscar)(tango);
    zulu['useEnableCommunitySharedStyles'] = mike;
    return entity;
})();