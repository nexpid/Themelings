// app/modules/guild_moderation/native/KickConfirm.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.Image;
    var _closure1_slot5 = option;
    option = tangon.View;
    var _closure1_slot6 = option;
    tangon = tangon.ScrollView;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 5;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot10 = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsxs;
    var _closure1_slot11 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot12 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    yankee = 7;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_PRIMARY;
    offset['backgroundColor'] = foxtra;
    tangon['container'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['marginTop'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    offset['borderRadius'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['paddingTop'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['paddingBottom'] = foxtra;
    foxtra = 'center';
    offset['alignItems'] = foxtra;
    tangon['iconLabelBlock'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    backup = foxtra.PX_96;
    foxtra = 1.25;
    foxtra = foxtra * backup;
    offset['height'] = foxtra;
    tangon['iconStyles'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    offset['marginTop'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    offset['marginBottom'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_DANGER;
    offset['color'] = foxtra;
    tangon['redText'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['marginVertical'] = foxtra;
    tangon['blurb'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['marginBottom'] = yankee;
    tangon['errorText'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot13 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: KickConfirm
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.guildId;
            var _closure2_slot0 = michal;
            michal = entity.userId;
            var _closure2_slot1 = michal;
            entity = entity.onKick;
            var _closure2_slot2 = entity;
            michal = _closure1_slot13;
            report = undefined;
            sizing = michal.bind(report)();
            tangon = _closure1_slot4;
            michal = tangon.useRef;
            offset = null;
            golfie = michal.bind(tangon)(offset);
            michal = tangon.useRef;
            cntext = michal.bind(tangon)(offset);
            zuuluu = _closure1_slot1;
            verify = _closure1_slot2;
            michal = 8;
            michal = verify[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = {};
            oscard = true;
            michal['includeKeyboardHeightIOS'] = oscard;
            michal['scrollViewRef'] = golfie;
            oscard = new Array(1);
            oscard[0] = cntext;
            michal['scrollTargets'] = oscard;
            michal = zuuluu.bind(report)(michal);
            option = michal.insets;
            oscard = michal.onScroll;
            zuuluu = _closure1_slot0;
            michal = 9;
            yankee = verify[michal];
            backup = zuuluu.bind(report)(yankee);
            foxtra = backup.useStateFromStores;
            yankee = _closure1_slot8;
            romeon = new Array(1);
            romeon[0] = yankee;
            yankee = function() {
                zuuluu = _closure1_slot8;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            status = foxtra.bind(backup)(romeon, yankee);
            var _closure2_slot3 = status;
            michal = verify[michal];
            yankee = zuuluu.bind(report)(michal);
            verify = yankee.useStateFromStores;
            michal = _closure1_slot9;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot9;
                michal = zuuluu.getUser;
                entity = _closure2_slot1;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            update = verify.bind(yankee)(zuuluu, michal);
            var _closure2_slot4 = update;
            zuuluu = tangon.useRef;
            michal = '';
            michal = zuuluu.bind(tangon)(michal);
            var _closure2_slot5 = michal;
            zuuluu = tangon.useState;
            michal = function() {
                entity = {'kicking': false, 'kickError': false};
                return entity;
            };
            verify = zuuluu.bind(tangon)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(report)(verify, michal);
            michal = 0;
            romeon = zuuluu[michal];
            michal = 1;
            michal = zuuluu[michal];
            var _closure2_slot6 = michal;
            zuuluu = tangon.useCallback;
            michal = new Array(3);
            michal[0] = status;
            michal[1] = entity;
            michal[2] = update;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot3;
                    golfie = null;
                    michal = golfie != michal;
                    if(!michal) { _fun00004_ip = 24; continue _fun00003 }
 16:
                    zuuluu = _closure2_slot4;
                    michal = golfie != zuuluu;
 24:
                    if(!michal) { _fun00004_ip = 172; continue _fun00003 }
 30:
                    tangon = _closure2_slot6;
                    zuuluu = undefined;
                    michal = {'kicking': true, 'kickError': false};
                    michal = tangon.bind(zuuluu)(michal);
                    tangon = _closure1_slot1;
                    report = _closure1_slot2;
                    michal = 10;
                    michal = report[michal];
                    oscard = tangon.bind(zuuluu)(michal);
                    report = oscard.kickUser;
                    michal = _closure2_slot3;
                    michal = golfie == michal;
                    tangon = undefined;
                    if(michal) { _fun00004_ip = 102; continue _fun00003 }
 93:
                    michal = _closure2_slot3;
                    tangon = michal.id;
 102:
                    michal = _closure2_slot4;
                    michal = golfie == michal;
                    zuuluu = undefined;
                    if(michal) { _fun00004_ip = 124; continue _fun00003 }
 115:
                    michal = _closure2_slot4;
                    zuuluu = michal.id;
 124:
                    michal = _closure2_slot5;
                    michal = michal.current;
                    zuuluu = report.bind(oscard)(tangon, zuuluu, michal);
                    michal = zuuluu.then;
                    entity = _closure2_slot2;
                    zuuluu = michal.bind(zuuluu)(entity);
                    michal = zuuluu.catch;
                    entity = function() {
                        zuuluu = _closure2_slot6;
                        entity = undefined;
                        michal = {'kicking': false, 'kickError': true};
                        michal = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    entity = michal.bind(zuuluu)(entity);
 172:
                    entity = undefined;
                    return entity;
                }
            };
            ctrled = zuuluu.bind(tangon)(entity, michal);
            michal = offset != update;
            entity = null;
            if(!michal) { _fun00002_ip = 1292; continue _fun00001 }
 332:
            michal = offset != status;
            entity = null;
            if(!michal) { _fun00002_ip = 1292; continue _fun00001 }
 344:
            tangon = _closure1_slot10;
            zuuluu = _closure1_slot7;
            michal = {};
            verify = sizing.container;
            michal['style'] = verify;
            michal['ref'] = golfie;
            golfie = {};
            sequen = _closure1_slot1;
            vacuum = _closure1_slot2;
            result = 7;
            verify = vacuum[result];
            verify = sequen.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            golfie['paddingHorizontal'] = verify;
            option = option.bottom;
            golfie['paddingBottom'] = option;
            michal['contentContainerStyle'] = golfie;
            michal['onScroll'] = oscard;
            option = _closure1_slot11;
            golfie = _closure1_slot12;
            oscard = {};
            kiloes = _closure1_slot6;
            verify = {};
            yankee = sizing.iconLabelBlock;
            verify['style'] = yankee;
            foxtra = _closure1_slot5;
            yankee = {};
            backup = sizing.iconStyles;
            yankee['style'] = backup;
            backup = 11;
            backup = vacuum[backup];
            backup = sequen.bind(report)(backup);
            yankee['source'] = backup;
            backup = 'contain';
            yankee['resizeMode'] = backup;
            yankee = tangon.bind(report)(foxtra, yankee);
            foxtra = new Array(3);
            foxtra[0] = yankee;
            record = _closure1_slot0;
            yankee = 12;
            backup = vacuum[yankee];
            backup = record.bind(report)(backup);
            papara = backup.Text;
            output = {};
            backup = sizing.redText;
            output['style'] = backup;
            backup = 'text-md/semibold';
            output['variant'] = backup;
            backup = 13;
            source = vacuum[backup];
            source = record.bind(report)(source);
            whisks = source.intl;
            limora = whisks.formatToPlainString;
            source = vacuum[backup];
            source = record.bind(report)(source);
            source = source.t;
            sierra = source.1Ie87u;
            target = {};
            source = 14;
            equals = vacuum[source];
            quebec = sequen.bind(report)(equals);
            equals = quebec.getName;
            equals = equals.bind(quebec)(update);
            target['user'] = equals;
            target = limora.bind(whisks)(sierra, target);
            output['children'] = target;
            output = tangon.bind(report)(papara, output);
            foxtra[1] = output;
            output = vacuum[yankee];
            output = record.bind(report)(output);
            papara = output.Text;
            output = {'variant': 'text-lg/bold', 'color': 'info-warning-text'};
            target = status.toString;
            target = target.bind(status)();
            output['children'] = target;
            output = tangon.bind(report)(papara, output);
            foxtra[2] = output;
            verify['children'] = foxtra;
            foxtra = option.bind(report)(kiloes, verify);
            verify = new Array(5);
            verify[0] = foxtra;
            foxtra = vacuum[yankee];
            foxtra = record.bind(report)(foxtra);
            output = foxtra.Text;
            foxtra = {'style': null, 'variant': 'heading-md/normal', 'color': 'info-warning-text'};
            papara = sizing.blurb;
            foxtra['style'] = papara;
            papara = vacuum[backup];
            papara = record.bind(report)(papara);
            sierra = papara.intl;
            status = sierra.format;
            papara = vacuum[backup];
            papara = record.bind(report)(papara);
            papara = papara.t;
            target = papara./yH0UV;
            papara = {};
            limora = vacuum[source];
            whisks = sequen.bind(report)(limora);
            limora = whisks.getName;
            limora = limora.bind(whisks)(update);
            papara['user'] = limora;
            papara = status.bind(sierra)(target, papara);
            foxtra['children'] = papara;
            foxtra = tangon.bind(report)(output, foxtra);
            verify[1] = foxtra;
            foxtra = 15;
            foxtra = vacuum[foxtra];
            foxtra = record.bind(report)(foxtra);
            output = foxtra.TextAreaScrollTarget;
            foxtra = {};
            foxtra['ref'] = cntext;
            cntext = {};
            papara = vacuum[result];
            papara = sequen.bind(report)(papara);
            papara = papara.spacing;
            papara = papara.PX_16;
            cntext['marginBottom'] = papara;
            foxtra['containerStyle'] = cntext;
            cntext = vacuum[backup];
            cntext = record.bind(report)(cntext);
            target = cntext.intl;
            papara = target.string;
            cntext = vacuum[backup];
            cntext = record.bind(report)(cntext);
            cntext = cntext.t;
            cntext = cntext.+2QEPj;
            cntext = papara.bind(target)(cntext);
            foxtra['label'] = cntext;
            cntext = 512;
            foxtra['maxLength'] = cntext;
            config = function(argFoo) { // Original name: onChange
                michal = _closure2_slot5;
                entity = argFoo;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            foxtra['onChange'] = config;
            foxtra = tangon.bind(report)(output, foxtra);
            verify[2] = foxtra;
            foxtra = {};
            output = {};
            result = vacuum[result];
            result = sequen.bind(report)(result);
            result = result.spacing;
            result = result.PX_16;
            output['marginBottom'] = result;
            foxtra['style'] = output;
            output = 16;
            output = vacuum[output];
            output = record.bind(report)(output);
            result = output.Button;
            output = {};
            sequen = 'destructive';
            output['variant'] = sequen;
            sequen = vacuum[backup];
            sequen = record.bind(report)(sequen);
            config = sequen.intl;
            sequen = config.string;
            vacuum = vacuum[backup];
            vacuum = record.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.3glT6e;
            vacuum = sequen.bind(config)(vacuum);
            output['text'] = vacuum;
            output['onPress'] = ctrled;
            ctrled = romeon.kicking;
            output['disabled'] = ctrled;
            output = tangon.bind(report)(result, output);
            foxtra['children'] = output;
            foxtra = tangon.bind(report)(kiloes, foxtra);
            verify[3] = foxtra;
            romeon = romeon.kickError;
            offset = null;
            if(!romeon) { _fun00002_ip = 1268; continue _fun00001 }
 1129:
            foxtra = _closure1_slot10;
            kiloes = _closure1_slot0;
            result = _closure1_slot2;
            yankee = result[yankee];
            yankee = kiloes.bind(report)(yankee);
            romeon = yankee.Text;
            yankee = {'style': null, 'variant': 'text-md/semibold', 'color': 'input-error-text'};
            sizing = sizing.errorText;
            yankee['style'] = sizing;
            sizing = result[backup];
            sizing = kiloes.bind(report)(sizing);
            output = sizing.intl;
            sizing = output.format;
            backup = result[backup];
            backup = kiloes.bind(report)(backup);
            backup = backup.t;
            kiloes = backup.UktD5O;
            backup = {};
            echoed = _closure1_slot1;
            result = result[source];
            echoed = echoed.bind(report)(result);
            result = echoed.getName;
            result = result.bind(echoed)(update);
            backup['user'] = result;
            backup = sizing.bind(output)(kiloes, backup);
            yankee['children'] = backup;
            offset = foxtra.bind(report)(romeon, yankee);
 1268:
            verify[4] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1292:
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_moderation/native/KickConfirm.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();