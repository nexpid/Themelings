// app/modules/guild_moderation/native/BanConfirm.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    tango = 0;
    golf = oscar[tango];
    entity = undefined;
    golf = romeo.bind(entity)(golf);
    var _closure1_slot3 = golf;
    foxtrot = 1;
    options = oscar[foxtrot];
    golf = argCorge;
    golf = golf.bind(entity)(options);
    var _closure1_slot4 = golf;
    options = 2;
    options = oscar[options];
    options = report.bind(entity)(options);
    verify = options.Image;
    var _closure1_slot5 = verify;
    verify = options.View;
    var _closure1_slot6 = verify;
    options = options.ScrollView;
    var _closure1_slot7 = options;
    yankee = 3;
    options = oscar[yankee];
    options = romeo.bind(entity)(options);
    var _closure1_slot8 = options;
    options = 4;
    options = oscar[options];
    options = romeo.bind(entity)(options);
    var _closure1_slot9 = options;
    options = 5;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.jsx;
    var _closure1_slot10 = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.jsxs;
    var _closure1_slot11 = verify;
    options = oscar[options];
    options = report.bind(entity)(options);
    options = options.Fragment;
    var _closure1_slot12 = options;
    options = {};
    options['value'] = tango;
    tango = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 6;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.4obaMT;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    options['getLabel'] = tango;
    tango = new Array(7);
    tango[0] = options;
    options = {};
    offset = 7;
    verify = oscar[offset];
    verify = romeo.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.HOUR;
    verify = foxtrot * verify;
    options['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 6;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.RKpitb;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    options['getLabel'] = verify;
    tango[1] = options;
    options = {};
    verify = oscar[offset];
    verify = romeo.bind(entity)(verify);
    verify = verify.Seconds;
    backup = verify.HOUR;
    verify = 6;
    verify = verify * backup;
    options['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 6;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.8WfJZ2;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    options['getLabel'] = verify;
    tango[2] = options;
    options = {};
    verify = oscar[offset];
    verify = romeo.bind(entity)(verify);
    verify = verify.Seconds;
    backup = verify.HOUR;
    verify = 12;
    verify = verify * backup;
    options['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 6;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.p1up7u;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    options['getLabel'] = verify;
    tango[3] = options;
    options = {};
    verify = oscar[offset];
    verify = romeo.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.DAY;
    verify = foxtrot * verify;
    options['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 6;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.XuVkkJ;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    options['getLabel'] = verify;
    tango[4] = options;
    options = {};
    verify = oscar[offset];
    verify = romeo.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.DAY;
    verify = yankee * verify;
    options['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 6;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.gMcDS0;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    options['getLabel'] = verify;
    tango[5] = options;
    options = {};
    verify = oscar[offset];
    verify = romeo.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.DAY;
    verify = offset * verify;
    options['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 6;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.FA7IUl;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    options['getLabel'] = verify;
    tango[6] = options;
    var _closure1_slot13 = tango;
    tango = 8;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    yankee = 9;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BASE_PRIMARY;
    offset['backgroundColor'] = foxtrot;
    tango['container'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['marginTop'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.lg;
    offset['borderRadius'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_8;
    offset['paddingTop'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['paddingBottom'] = foxtrot;
    foxtrot = 'center';
    offset['alignItems'] = foxtrot;
    tango['iconLabelBlock'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    backup = foxtrot.PX_96;
    foxtrot = 1.25;
    foxtrot = foxtrot * backup;
    offset['height'] = foxtrot;
    tango['iconStyles'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['marginVertical'] = foxtrot;
    tango['blurb'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_12;
    offset['marginTop'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_4;
    offset['marginBottom'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.TEXT_DANGER;
    offset['color'] = foxtrot;
    tango['redText'] = offset;
    offset = {};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['marginBottom'] = yankee;
    tango['errorText'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot14 = tango;
    tango = golf.memo;
    mike = function(argFoo) { // Original name: BanConfirm
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            mike = entity.guildId;
            var _closure2_slot0 = mike;
            mike = entity.userId;
            var _closure2_slot1 = mike;
            entity = entity.onBan;
            var _closure2_slot2 = entity;
            mike = _closure1_slot14;
            report = undefined;
            sizing = mike.bind(report)();
            tango = _closure1_slot4;
            mike = tango.useRef;
            offset = null;
            options = mike.bind(tango)(offset);
            mike = tango.useRef;
            context = mike.bind(tango)(offset);
            zulu = _closure1_slot1;
            verify = _closure1_slot2;
            mike = 10;
            mike = verify[mike];
            zulu = zulu.bind(report)(mike);
            mike = {};
            oscar = true;
            mike['includeKeyboardHeightIOS'] = oscar;
            mike['scrollViewRef'] = options;
            oscar = new Array(1);
            oscar[0] = context;
            mike['scrollTargets'] = oscar;
            mike = zulu.bind(report)(mike);
            golf = mike.insets;
            oscar = mike.onScroll;
            zulu = _closure1_slot0;
            mike = 11;
            yankee = verify[mike];
            backup = zulu.bind(report)(yankee);
            foxtrot = backup.useStateFromStores;
            yankee = _closure1_slot8;
            romeo = new Array(1);
            romeo[0] = yankee;
            yankee = function() {
                zulu = _closure1_slot8;
                mike = zulu.getGuild;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            sierra = foxtrot.bind(backup)(romeo, yankee);
            var _closure2_slot3 = sierra;
            mike = verify[mike];
            yankee = zulu.bind(report)(mike);
            verify = yankee.useStateFromStores;
            mike = _closure1_slot9;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                zulu = _closure1_slot9;
                mike = zulu.getUser;
                entity = _closure2_slot1;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            update = verify.bind(yankee)(zulu, mike);
            var _closure2_slot4 = update;
            mike = tango.useRef;
            papa = 0;
            mike = mike.bind(tango)(papa);
            var _closure2_slot5 = mike;
            zulu = tango.useRef;
            mike = '';
            mike = zulu.bind(tango)(mike);
            var _closure2_slot6 = mike;
            zulu = tango.useState;
            mike = function() {
                entity = {'banning': false, 'banError': false};
                return entity;
            };
            verify = zulu.bind(tango)(mike);
            zulu = _closure1_slot3;
            mike = 2;
            zulu = zulu.bind(report)(verify, mike);
            romeo = zulu[papa];
            mike = 1;
            mike = zulu[mike];
            var _closure2_slot7 = mike;
            zulu = tango.useCallback;
            mike = new Array(3);
            mike[0] = sierra;
            mike[1] = update;
            mike[2] = entity;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    mike = _closure2_slot3;
                    tango = null;
                    mike = tango != mike;
                    if(!mike) { _fun00004_ip = 24; continue _fun00003 }
 16:
                    zulu = _closure2_slot4;
                    mike = tango != zulu;
 24:
                    if(!mike) { _fun00004_ip = 168; continue _fun00003 }
 30:
                    zulu = _closure2_slot7;
                    report = undefined;
                    mike = {'banning': true, 'banError': false};
                    mike = zulu.bind(report)(mike);
                    tango = _closure1_slot1;
                    oscar = _closure1_slot2;
                    zulu = 12;
                    zulu = oscar[zulu];
                    golf = tango.bind(report)(zulu);
                    oscar = golf.banUser;
                    zulu = _closure2_slot3;
                    yankee = zulu.id;
                    zulu = _closure2_slot4;
                    offset = zulu.id;
                    zulu = _closure1_slot13;
                    mike = _closure2_slot5;
                    mike = mike.current;
                    mike = zulu[mike];
                    verify = mike.value;
                    mike = _closure2_slot6;
                    options = mike.current;
                    romeo = golf;
                    zulu = romeo[oscar](yankee, offset, verify, options, golf);
                    mike = zulu.then;
                    entity = _closure2_slot2;
                    zulu = mike.bind(zulu)(entity);
                    mike = zulu.catch;
                    entity = function() {
                        zulu = _closure2_slot7;
                        entity = undefined;
                        mike = {'banning': false, 'banError': true};
                        mike = zulu.bind(entity)(mike);
                        return entity;
                    };
                    entity = mike.bind(zulu)(entity);
 168:
                    entity = undefined;
                    return entity;
                }
            };
            control = zulu.bind(tango)(entity, mike);
            mike = offset != update;
            entity = null;
            if(!mike) { _fun00002_ip = 1431; continue _fun00001 }
 346:
            mike = offset != sierra;
            entity = null;
            if(!mike) { _fun00002_ip = 1431; continue _fun00001 }
 358:
            tango = _closure1_slot10;
            zulu = _closure1_slot7;
            mike = {};
            verify = sizing.container;
            mike['style'] = verify;
            mike['ref'] = options;
            mike['onScroll'] = oscar;
            oscar = {};
            sequence = _closure1_slot1;
            vacuum = _closure1_slot2;
            result = 9;
            options = vacuum[result];
            options = sequence.bind(report)(options);
            options = options.spacing;
            options = options.PX_24;
            oscar['paddingHorizontal'] = options;
            golf = golf.bottom;
            oscar['paddingBottom'] = golf;
            mike['contentContainerStyle'] = oscar;
            options = _closure1_slot11;
            golf = _closure1_slot12;
            oscar = {};
            kilo = _closure1_slot6;
            verify = {};
            yankee = sizing.iconLabelBlock;
            verify['style'] = yankee;
            foxtrot = _closure1_slot5;
            yankee = {};
            backup = sizing.iconStyles;
            yankee['style'] = backup;
            backup = 13;
            backup = vacuum[backup];
            backup = sequence.bind(report)(backup);
            yankee['source'] = backup;
            backup = 'contain';
            yankee['resizeMode'] = backup;
            yankee = tango.bind(report)(foxtrot, yankee);
            foxtrot = new Array(3);
            foxtrot[0] = yankee;
            record = _closure1_slot0;
            yankee = 14;
            backup = vacuum[yankee];
            backup = record.bind(report)(backup);
            target = backup.Text;
            output = {};
            backup = sizing.redText;
            output['style'] = backup;
            backup = 'text-md/semibold';
            output['variant'] = backup;
            backup = 6;
            source = vacuum[backup];
            source = record.bind(report)(source);
            equality = source.intl;
            whiskey = equality.format;
            source = vacuum[backup];
            source = record.bind(report)(source);
            source = source.t;
            lima = source.Qd6w7e;
            status = {};
            source = 15;
            quebec = vacuum[source];
            variable36 = sequence.bind(report)(quebec);
            quebec = variable36.getName;
            quebec = quebec.bind(variable36)(update);
            status['username'] = quebec;
            status = whiskey.bind(equality)(lima, status);
            output['children'] = status;
            output = tango.bind(report)(target, output);
            foxtrot[1] = output;
            output = vacuum[yankee];
            output = record.bind(report)(output);
            target = output.Text;
            output = {'variant': 'text-lg/bold', 'color': 'info-warning-text'};
            status = sierra.toString;
            status = status.bind(sierra)();
            output['children'] = status;
            output = tango.bind(report)(target, output);
            foxtrot[2] = output;
            verify['children'] = foxtrot;
            foxtrot = options.bind(report)(kilo, verify);
            verify = new Array(6);
            verify[0] = foxtrot;
            foxtrot = vacuum[yankee];
            foxtrot = record.bind(report)(foxtrot);
            output = foxtrot.Text;
            foxtrot = {'style': null, 'variant': 'heading-md/normal', 'color': 'info-warning-text'};
            target = sizing.blurb;
            foxtrot['style'] = target;
            target = vacuum[backup];
            target = record.bind(report)(target);
            lima = target.intl;
            sierra = lima.format;
            target = vacuum[backup];
            target = record.bind(report)(target);
            target = target.t;
            status = target.8jV9f3;
            target = {};
            whiskey = vacuum[source];
            equality = sequence.bind(report)(whiskey);
            whiskey = equality.getName;
            whiskey = whiskey.bind(equality)(update);
            target['user'] = whiskey;
            target = sierra.bind(lima)(status, target);
            foxtrot['children'] = target;
            foxtrot = tango.bind(report)(output, foxtrot);
            verify[1] = foxtrot;
            foxtrot = 16;
            foxtrot = vacuum[foxtrot];
            foxtrot = record.bind(report)(foxtrot);
            output = foxtrot.TableRadioGroup;
            foxtrot = {};
            target = vacuum[backup];
            target = record.bind(report)(target);
            sierra = target.intl;
            status = sierra.string;
            target = vacuum[backup];
            target = record.bind(report)(target);
            target = target.t;
            target = target.8l3W09;
            target = status.bind(sierra)(target);
            foxtrot['title'] = target;
            status = _closure1_slot13;
            papa = status[papa];
            papa = papa.value;
            foxtrot['value'] = papa;
            papa = function(argFoo) { // Original name: onChange
                mike = _closure2_slot5;
                entity = argFoo;
                mike['current'] = entity;
                entity = undefined;
                return entity;
            };
            foxtrot['onChange'] = papa;
            target = status.map;
            papa = function(argFoo, argBar) {
                golf = argFoo;
                report = argBar;
                tango = _closure1_slot10;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 17;
                entity = zulu[entity];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.TableRadioRow;
                entity = {};
                entity['value'] = report;
                oscar = golf.getLabel;
                oscar = oscar.bind(golf)();
                entity['label'] = oscar;
                entity = tango.bind(zulu)(mike, entity, report);
                return entity;
            };
            papa = target.bind(status)(papa);
            foxtrot['children'] = papa;
            foxtrot = tango.bind(report)(output, foxtrot);
            verify[2] = foxtrot;
            foxtrot = 18;
            foxtrot = vacuum[foxtrot];
            foxtrot = record.bind(report)(foxtrot);
            output = foxtrot.TextAreaScrollTarget;
            foxtrot = {};
            foxtrot['ref'] = context;
            context = {};
            papa = vacuum[result];
            papa = sequence.bind(report)(papa);
            papa = papa.spacing;
            papa = papa.PX_16;
            context['marginVertical'] = papa;
            foxtrot['containerStyle'] = context;
            context = vacuum[backup];
            context = record.bind(report)(context);
            target = context.intl;
            papa = target.string;
            context = vacuum[backup];
            context = record.bind(report)(context);
            context = context.t;
            context = context.w4Ivys;
            context = papa.bind(target)(context);
            foxtrot['label'] = context;
            context = 512;
            foxtrot['maxLength'] = context;
            config = function(argFoo) { // Original name: onChange
                mike = _closure2_slot6;
                entity = argFoo;
                mike['current'] = entity;
                entity = undefined;
                return entity;
            };
            foxtrot['onChange'] = config;
            foxtrot = tango.bind(report)(output, foxtrot);
            verify[3] = foxtrot;
            foxtrot = {};
            output = {};
            result = vacuum[result];
            result = sequence.bind(report)(result);
            result = result.spacing;
            result = result.PX_16;
            output['marginBottom'] = result;
            foxtrot['style'] = output;
            output = 19;
            output = vacuum[output];
            output = record.bind(report)(output);
            result = output.Button;
            output = {};
            sequence = 'destructive';
            output['variant'] = sequence;
            sequence = vacuum[backup];
            sequence = record.bind(report)(sequence);
            config = sequence.intl;
            sequence = config.string;
            vacuum = vacuum[backup];
            vacuum = record.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.5MBJ5O;
            vacuum = sequence.bind(config)(vacuum);
            output['text'] = vacuum;
            output['onPress'] = control;
            control = romeo.banning;
            output['disabled'] = control;
            output = tango.bind(report)(result, output);
            foxtrot['children'] = output;
            foxtrot = tango.bind(report)(kilo, foxtrot);
            verify[4] = foxtrot;
            romeo = romeo.banError;
            offset = null;
            if(!romeo) { _fun00002_ip = 1407; continue _fun00001 }
 1268:
            foxtrot = _closure1_slot10;
            kilo = _closure1_slot0;
            result = _closure1_slot2;
            yankee = result[yankee];
            yankee = kilo.bind(report)(yankee);
            romeo = yankee.Text;
            yankee = {'style': null, 'variant': 'text-md/semibold', 'color': 'input-error-text'};
            sizing = sizing.errorText;
            yankee['style'] = sizing;
            sizing = result[backup];
            sizing = kilo.bind(report)(sizing);
            output = sizing.intl;
            sizing = output.format;
            backup = result[backup];
            backup = kilo.bind(report)(backup);
            backup = backup.t;
            kilo = backup./K6een;
            backup = {};
            echo = _closure1_slot1;
            result = result[source];
            echo = echo.bind(report)(result);
            result = echo.getName;
            result = result.bind(echo)(update);
            backup['user'] = result;
            backup = sizing.bind(output)(kilo, backup);
            yankee['children'] = backup;
            offset = foxtrot.bind(report)(romeo, yankee);
 1407:
            verify[5] = offset;
            oscar['children'] = verify;
            oscar = options.bind(report)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 1431:
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 20;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_moderation/native/BanConfirm.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();