// app/modules/guild_moderation/native/BanConfirm.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    tangon = 0;
    golfie = oscard[tangon];
    entity = undefined;
    golfie = romeon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    foxtra = 1;
    option = oscard[foxtra];
    golfie = argCor;
    golfie = golfie.bind(entity)(option);
    var _closure1_slot4 = golfie;
    option = 2;
    option = oscard[option];
    option = report.bind(entity)(option);
    verify = option.Image;
    var _closure1_slot5 = verify;
    verify = option.View;
    var _closure1_slot6 = verify;
    option = option.ScrollView;
    var _closure1_slot7 = option;
    yankee = 3;
    option = oscard[yankee];
    option = romeon.bind(entity)(option);
    var _closure1_slot8 = option;
    option = 4;
    option = oscard[option];
    option = romeon.bind(entity)(option);
    var _closure1_slot9 = option;
    option = 5;
    option = oscard[option];
    option = report.bind(entity)(option);
    verify = option.jsx;
    var _closure1_slot10 = verify;
    verify = option.jsxs;
    var _closure1_slot11 = verify;
    option = option.Fragment;
    var _closure1_slot12 = option;
    option = {};
    option['value'] = tangon;
    tangon = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.4obaMT;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['getLabel'] = tangon;
    tangon = new Array(7);
    tangon[0] = option;
    option = {};
    offset = 7;
    verify = oscard[offset];
    verify = romeon.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.HOUR;
    verify = foxtra * verify;
    option['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.RKpitb;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['getLabel'] = verify;
    tangon[1] = option;
    option = {};
    verify = oscard[offset];
    verify = romeon.bind(entity)(verify);
    verify = verify.Seconds;
    backup = verify.HOUR;
    verify = 6;
    verify = verify * backup;
    option['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.8WfJZ2;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['getLabel'] = verify;
    tangon[2] = option;
    option = {};
    verify = oscard[offset];
    verify = romeon.bind(entity)(verify);
    verify = verify.Seconds;
    backup = verify.HOUR;
    verify = 12;
    verify = verify * backup;
    option['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.p1up7u;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['getLabel'] = verify;
    tangon[3] = option;
    option = {};
    verify = oscard[offset];
    verify = romeon.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.DAY;
    verify = foxtra * verify;
    option['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.XuVkkJ;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['getLabel'] = verify;
    tangon[4] = option;
    option = {};
    verify = oscard[offset];
    verify = romeon.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.DAY;
    verify = yankee * verify;
    option['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.gMcDS0;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['getLabel'] = verify;
    tangon[5] = option;
    option = {};
    verify = oscard[offset];
    verify = romeon.bind(entity)(verify);
    verify = verify.Seconds;
    verify = verify.DAY;
    verify = offset * verify;
    option['value'] = verify;
    verify = function() { // Original name: getLabel
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.FA7IUl;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    option['getLabel'] = verify;
    tangon[6] = option;
    var _closure1_slot13 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    yankee = 9;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_PRIMARY;
    offset['backgroundColor'] = foxtra;
    tangon['container'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['marginTop'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    offset['borderRadius'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['paddingTop'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['paddingBottom'] = foxtra;
    foxtra = 'center';
    offset['alignItems'] = foxtra;
    tangon['iconLabelBlock'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    backup = foxtra.PX_96;
    foxtra = 1.25;
    foxtra = foxtra * backup;
    offset['height'] = foxtra;
    tangon['iconStyles'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['marginVertical'] = foxtra;
    tangon['blurb'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    offset['marginTop'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    offset['marginBottom'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_DANGER;
    offset['color'] = foxtra;
    tangon['redText'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['marginBottom'] = yankee;
    tangon['errorText'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot14 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: BanConfirm
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.guildId;
            var _closure2_slot0 = michal;
            michal = entity.userId;
            var _closure2_slot1 = michal;
            entity = entity.onBan;
            var _closure2_slot2 = entity;
            michal = _closure1_slot14;
            report = undefined;
            sizing = michal.bind(report)();
            tangon = _closure1_slot4;
            michal = tangon.useRef;
            offset = null;
            oscard = michal.bind(tangon)(offset);
            michal = tangon.useRef;
            cntext = michal.bind(tangon)(offset);
            zuuluu = _closure1_slot1;
            option = _closure1_slot2;
            michal = 10;
            michal = option[michal];
            golfie = zuuluu.bind(report)(michal);
            michal = {};
            verify = true;
            michal['includeKeyboardHeightIOS'] = verify;
            michal = golfie.bind(report)(michal);
            golfie = michal.insets;
            michal = 11;
            michal = option[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = {};
            michal['insets'] = golfie;
            yankee = {};
            yankee['ref'] = cntext;
            verify = {};
            romeon = 'toBottom';
            verify['type'] = romeon;
            yankee['offset'] = verify;
            verify = new Array(1);
            verify[0] = yankee;
            michal['inputs'] = verify;
            michal['scrollViewRef'] = oscard;
            michal = zuuluu.bind(report)(michal);
            zuuluu = _closure1_slot0;
            michal = 12;
            verify = option[michal];
            foxtra = zuuluu.bind(report)(verify);
            romeon = foxtra.useStateFromStores;
            verify = _closure1_slot8;
            yankee = new Array(1);
            yankee[0] = verify;
            verify = function() {
                zuuluu = _closure1_slot8;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            sierra = romeon.bind(foxtra)(yankee, verify);
            var _closure2_slot3 = sierra;
            michal = option[michal];
            verify = zuuluu.bind(report)(michal);
            option = verify.useStateFromStores;
            michal = _closure1_slot9;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot9;
                michal = zuuluu.getUser;
                entity = _closure2_slot1;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            update = option.bind(verify)(zuuluu, michal);
            var _closure2_slot4 = update;
            michal = tangon.useRef;
            papara = 0;
            michal = michal.bind(tangon)(papara);
            var _closure2_slot5 = michal;
            zuuluu = tangon.useRef;
            michal = '';
            michal = zuuluu.bind(tangon)(michal);
            var _closure2_slot6 = michal;
            zuuluu = tangon.useState;
            michal = function() {
                entity = {'banning': false, 'banError': false};
                return entity;
            };
            option = zuuluu.bind(tangon)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(report)(option, michal);
            romeon = zuuluu[papara];
            michal = 1;
            michal = zuuluu[michal];
            var _closure2_slot7 = michal;
            zuuluu = tangon.useCallback;
            michal = new Array(3);
            michal[0] = sierra;
            michal[1] = update;
            michal[2] = entity;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot3;
                    tangon = null;
                    michal = tangon != michal;
                    if(!michal) { _fun00004_ip = 24; continue _fun00003 }
 16:
                    zuuluu = _closure2_slot4;
                    michal = tangon != zuuluu;
 24:
                    if(!michal) { _fun00004_ip = 172; continue _fun00003 }
 30:
                    zuuluu = _closure2_slot7;
                    report = undefined;
                    michal = {'banning': true, 'banError': false};
                    michal = zuuluu.bind(report)(michal);
                    tangon = _closure1_slot1;
                    oscard = _closure1_slot2;
                    zuuluu = 13;
                    zuuluu = oscard[zuuluu];
                    golfie = tangon.bind(report)(zuuluu);
                    oscard = golfie.banUser;
                    zuuluu = _closure2_slot3;
                    yankee = zuuluu.id;
                    zuuluu = _closure2_slot4;
                    offset = zuuluu.id;
                    zuuluu = _closure1_slot13;
                    michal = _closure2_slot5;
                    michal = michal.current;
                    michal = zuuluu[michal];
                    verify = michal.value;
                    michal = _closure2_slot6;
                    option = michal.current;
                    romeon = golfie;
                    zuuluu = romeon[oscard](yankee, offset, verify, option, golfie);
                    michal = zuuluu.then;
                    entity = _closure2_slot2;
                    zuuluu = michal.bind(zuuluu)(entity);
                    michal = zuuluu.catch;
                    entity = function() {
                        zuuluu = _closure2_slot7;
                        entity = undefined;
                        michal = {'banning': false, 'banError': true};
                        michal = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    entity = michal.bind(zuuluu)(entity);
 172:
                    entity = undefined;
                    return entity;
                }
            };
            ctrled = zuuluu.bind(tangon)(entity, michal);
            michal = offset != update;
            entity = null;
            if(!michal) { _fun00002_ip = 1468; continue _fun00001 }
 387:
            michal = offset != sierra;
            entity = null;
            if(!michal) { _fun00002_ip = 1468; continue _fun00001 }
 399:
            tangon = _closure1_slot10;
            zuuluu = _closure1_slot7;
            michal = {};
            option = sizing.container;
            michal['style'] = option;
            michal['ref'] = oscard;
            oscard = {};
            sequen = _closure1_slot1;
            vacuum = _closure1_slot2;
            result = 9;
            option = vacuum[result];
            option = sequen.bind(report)(option);
            option = option.spacing;
            option = option.PX_24;
            oscard['paddingHorizontal'] = option;
            golfie = golfie.bottom;
            oscard['paddingBottom'] = golfie;
            michal['contentContainerStyle'] = oscard;
            option = _closure1_slot11;
            golfie = _closure1_slot12;
            oscard = {};
            kiloes = _closure1_slot6;
            verify = {};
            yankee = sizing.iconLabelBlock;
            verify['style'] = yankee;
            foxtra = _closure1_slot5;
            yankee = {};
            backup = sizing.iconStyles;
            yankee['style'] = backup;
            backup = 14;
            backup = vacuum[backup];
            backup = sequen.bind(report)(backup);
            yankee['source'] = backup;
            backup = 'contain';
            yankee['resizeMode'] = backup;
            yankee = tangon.bind(report)(foxtra, yankee);
            foxtra = new Array(3);
            foxtra[0] = yankee;
            record = _closure1_slot0;
            yankee = 15;
            backup = vacuum[yankee];
            backup = record.bind(report)(backup);
            target = backup.Text;
            output = {};
            backup = sizing.redText;
            output['style'] = backup;
            backup = 'text-md/semibold';
            output['variant'] = backup;
            backup = 6;
            source = vacuum[backup];
            source = record.bind(report)(source);
            equals = source.intl;
            whisks = equals.format;
            source = vacuum[backup];
            source = record.bind(report)(source);
            source = source.t;
            limora = source.Qd6w7e;
            status = {};
            source = 16;
            quebec = vacuum[source];
            variable36 = sequen.bind(report)(quebec);
            quebec = variable36.getName;
            quebec = quebec.bind(variable36)(update);
            status['username'] = quebec;
            status = whisks.bind(equals)(limora, status);
            output['children'] = status;
            output = tangon.bind(report)(target, output);
            foxtra[1] = output;
            output = vacuum[yankee];
            output = record.bind(report)(output);
            target = output.Text;
            output = {'variant': 'text-lg/bold', 'color': 'info-warning-text'};
            status = sierra.toString;
            status = status.bind(sierra)();
            output['children'] = status;
            output = tangon.bind(report)(target, output);
            foxtra[2] = output;
            verify['children'] = foxtra;
            foxtra = option.bind(report)(kiloes, verify);
            verify = new Array(6);
            verify[0] = foxtra;
            foxtra = vacuum[yankee];
            foxtra = record.bind(report)(foxtra);
            output = foxtra.Text;
            foxtra = {'style': null, 'variant': 'heading-md/normal', 'color': 'info-warning-text'};
            target = sizing.blurb;
            foxtra['style'] = target;
            target = vacuum[backup];
            target = record.bind(report)(target);
            limora = target.intl;
            sierra = limora.format;
            target = vacuum[backup];
            target = record.bind(report)(target);
            target = target.t;
            status = target.8jV9f3;
            target = {};
            whisks = vacuum[source];
            equals = sequen.bind(report)(whisks);
            whisks = equals.getName;
            whisks = whisks.bind(equals)(update);
            target['user'] = whisks;
            target = sierra.bind(limora)(status, target);
            foxtra['children'] = target;
            foxtra = tangon.bind(report)(output, foxtra);
            verify[1] = foxtra;
            foxtra = 17;
            foxtra = vacuum[foxtra];
            foxtra = record.bind(report)(foxtra);
            output = foxtra.TableRadioGroup;
            foxtra = {};
            target = vacuum[backup];
            target = record.bind(report)(target);
            sierra = target.intl;
            status = sierra.string;
            target = vacuum[backup];
            target = record.bind(report)(target);
            target = target.t;
            target = target.8l3W09;
            target = status.bind(sierra)(target);
            foxtra['title'] = target;
            status = _closure1_slot13;
            papara = status[papara];
            papara = papara.value;
            foxtra['defaultValue'] = papara;
            papara = function(argFoo) { // Original name: onChange
                michal = _closure2_slot5;
                entity = argFoo;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            foxtra['onChange'] = papara;
            target = status.map;
            papara = function(argFoo, argBar) {
                golfie = argFoo;
                report = argBar;
                tangon = _closure1_slot10;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 18;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.TableRadioRow;
                entity = {};
                entity['value'] = report;
                oscard = golfie.getLabel;
                oscard = oscard.bind(golfie)();
                entity['label'] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity, report);
                return entity;
            };
            papara = target.bind(status)(papara);
            foxtra['children'] = papara;
            foxtra = tangon.bind(report)(output, foxtra);
            verify[2] = foxtra;
            foxtra = 19;
            foxtra = vacuum[foxtra];
            foxtra = record.bind(report)(foxtra);
            output = foxtra.TextArea;
            foxtra = {};
            foxtra['ref'] = cntext;
            cntext = {};
            papara = vacuum[result];
            papara = sequen.bind(report)(papara);
            papara = papara.spacing;
            papara = papara.PX_16;
            cntext['marginVertical'] = papara;
            foxtra['containerStyle'] = cntext;
            cntext = vacuum[backup];
            cntext = record.bind(report)(cntext);
            target = cntext.intl;
            papara = target.string;
            cntext = vacuum[backup];
            cntext = record.bind(report)(cntext);
            cntext = cntext.t;
            cntext = cntext.w4Ivys;
            cntext = papara.bind(target)(cntext);
            foxtra['label'] = cntext;
            cntext = 512;
            foxtra['maxLength'] = cntext;
            config = function(argFoo) { // Original name: onChange
                michal = _closure2_slot6;
                entity = argFoo;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            foxtra['onChange'] = config;
            foxtra = tangon.bind(report)(output, foxtra);
            verify[3] = foxtra;
            foxtra = {};
            output = {};
            result = vacuum[result];
            result = sequen.bind(report)(result);
            result = result.spacing;
            result = result.PX_16;
            output['marginBottom'] = result;
            foxtra['style'] = output;
            output = 20;
            output = vacuum[output];
            output = record.bind(report)(output);
            result = output.Button;
            output = {};
            sequen = 'destructive';
            output['variant'] = sequen;
            sequen = vacuum[backup];
            sequen = record.bind(report)(sequen);
            config = sequen.intl;
            sequen = config.string;
            vacuum = vacuum[backup];
            vacuum = record.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.5MBJ5O;
            vacuum = sequen.bind(config)(vacuum);
            output['text'] = vacuum;
            output['onPress'] = ctrled;
            ctrled = romeon.banning;
            output['disabled'] = ctrled;
            output = tangon.bind(report)(result, output);
            foxtra['children'] = output;
            foxtra = tangon.bind(report)(kiloes, foxtra);
            verify[4] = foxtra;
            romeon = romeon.banError;
            offset = null;
            if(!romeon) { _fun00002_ip = 1444; continue _fun00001 }
 1305:
            foxtra = _closure1_slot10;
            kiloes = _closure1_slot0;
            result = _closure1_slot2;
            yankee = result[yankee];
            yankee = kiloes.bind(report)(yankee);
            romeon = yankee.Text;
            yankee = {'style': null, 'variant': 'text-md/semibold', 'color': 'input-error-text'};
            sizing = sizing.errorText;
            yankee['style'] = sizing;
            sizing = result[backup];
            sizing = kiloes.bind(report)(sizing);
            output = sizing.intl;
            sizing = output.format;
            backup = result[backup];
            backup = kiloes.bind(report)(backup);
            backup = backup.t;
            kiloes = backup./K6een;
            backup = {};
            echoed = _closure1_slot1;
            result = result[source];
            echoed = echoed.bind(report)(result);
            result = echoed.getName;
            result = result.bind(echoed)(update);
            backup['user'] = result;
            backup = sizing.bind(output)(kiloes, backup);
            yankee['children'] = backup;
            offset = foxtra.bind(report)(romeon, yankee);
 1444:
            verify[5] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1468:
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_moderation/native/BanConfirm.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();