// app/modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationWarningBanner.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var8 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var8;
    var _closure1_slot2 = var6;
    var2 = function InappropriateConversationWarningBanner(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var2 = arg1;
            var13 = var2.channelId;
            var _closure2_slot0 = var13;
            var12 = var2.warningId;
            var _closure2_slot1 = var12;
            var11 = var2.senderId;
            var _closure2_slot2 = var11;
            var5 = _closure1_slot3;
            var4 = var5.useEffect;
            var3 = new Array(3);
            var3[0] = var13;
            var3[1] = var12;
            var3[2] = var11;
            var2 = function() {
                var6 = _closure1_slot0;
                var7 = _closure1_slot2;
                var5 = 4;
                var2 = var7[var5];
                var1 = undefined;
                var4 = var6.bind(var1)(var2);
                var3 = var4.trackNamedViewEvent;
                var2 = {};
                var10 = _closure2_slot0;
                var2['channelId'] = var10;
                var10 = _closure2_slot1;
                var2['warningId'] = var10;
                var9 = _closure2_slot2;
                var2['senderId'] = var9;
                var8 = _closure1_slot5;
                var8 = var8.INAPPROPRIATE_CONVERSATION_TIER_2;
                var2['warningType'] = var8;
                var5 = var7[var5];
                var5 = var6.bind(var1)(var5);
                var5 = var5.ViewNameTypes;
                var5 = var5.SAFETY_WARNING_BANNER;
                var2['viewName'] = var5;
                var2 = var3.bind(var4)(var2);
                return var1;
            };
            var2 = var4.bind(var5)(var2, var3);
            var5 = _closure1_slot3;
            var4 = var5.useCallback;
            var3 = new Array(3);
            var3[0] = var13;
            var3[1] = var12;
            var3[2] = var11;
            var2 = function(arg1) {
                var3 = _closure1_slot0;
                var2 = _closure1_slot2;
                var1 = 4;
                var2 = var2[var1];
                var1 = undefined;
                var4 = var3.bind(var1)(var2);
                var3 = var4.trackCtaEvent;
                var2 = {};
                var7 = _closure2_slot0;
                var2['channelId'] = var7;
                var7 = _closure2_slot1;
                var2['warningId'] = var7;
                var6 = _closure2_slot2;
                var2['senderId'] = var6;
                var5 = _closure1_slot5;
                var5 = var5.INAPPROPRIATE_CONVERSATION_TIER_2;
                var2['warningType'] = var5;
                var5 = arg1;
                var2['cta'] = var5;
                var2 = var3.bind(var4)(var2);
                return var1;
            };
            var15 = var4.bind(var5)(var2, var3);
            var _closure2_slot3 = var15;
            var14 = _closure1_slot0;
            var10 = _closure1_slot2;
            var2 = 5;
            var2 = var10[var2];
            var4 = undefined;
            var7 = var14.bind(var4)(var2);
            var6 = var7.useStateFromStores;
            var2 = _closure1_slot4;
            var5 = new Array(1);
            var5[0] = var2;
            var3 = new Array(1);
            var3[0] = var11;
            var2 = function() {
                var3 = _closure1_slot4;
                var2 = var3.isBlocked;
                var1 = _closure2_slot2;
                var1 = var2.bind(var3)(var1);
                return var1;
            };
            var6 = var6.bind(var7)(var5, var2, var3);
            var7 = _closure1_slot3;
            var5 = var7.useCallback;
            var3 = new Array(2);
            var3[0] = var13;
            var3[1] = var12;
            var2 = function() {
                var3 = _closure1_slot0;
                var2 = _closure1_slot2;
                var1 = 6;
                var2 = var2[var1];
                var1 = undefined;
                var5 = var3.bind(var1)(var2);
                var4 = var5.dismissChannelSafetyWarnings;
                var3 = _closure2_slot0;
                var6 = _closure2_slot1;
                var2 = new Array(1);
                var2[0] = var6;
                var2 = var4.bind(var5)(var3, var2);
                return var1;
            };
            var9 = var5.bind(var7)(var2, var3);
            var _closure2_slot4 = var9;
            var7 = _closure1_slot3;
            var5 = var7.useCallback;
            var3 = new Array(4);
            var3[0] = var9;
            var3[1] = var13;
            var3[2] = var12;
            var3[3] = var11;
            var2 = function() {
                var3 = _closure1_slot1;
                var2 = _closure1_slot2;
                var1 = 7;
                var2 = var2[var1];
                var1 = undefined;
                var4 = var3.bind(var1)(var2);
                var3 = var4.openLazy;
                var2 = {};
                var5 = function importer() {
                    var3 = _closure1_slot0;
                    var1 = _closure1_slot2;
                    var2 = 9;
                    var2 = var1[var2];
                    var4 = undefined;
                    var3 = var3.bind(var4)(var2);
                    var2 = 8;
                    var2 = var1[var2];
                    var1 = var1.paths;
                    var3 = var3.bind(var4)(var2, var1);
                    var2 = var3.then;
                    var1 = function(arg1) {
                        var2 = arg1;
                        var2 = var2.default;
                        var _closure5_slot0 = var2;
                        var1 = function(arg1) {
                            var4 = _closure1_slot6;
                            var3 = _closure5_slot0;
                            var2 = {};
                            var11 = arg1;
                            var12 = var2;
                            var5 = copyDataProperties(var12, var11);
                            var7 = _closure2_slot0;
                            var6 = 'channelId';
                            var2[var6] = var7;
                            var7 = _closure2_slot1;
                            var6 = 'warningId';
                            var2[var6] = var7;
                            var6 = _closure1_slot5;
                            var7 = var6.INAPPROPRIATE_CONVERSATION_TIER_2;
                            var6 = 'warningType';
                            var2[var6] = var7;
                            var7 = _closure2_slot2;
                            var6 = 'senderId';
                            var2[var6] = var7;
                            var7 = _closure1_slot0;
                            var8 = _closure1_slot2;
                            var6 = 4;
                            var9 = var8[var6];
                            var1 = undefined;
                            var9 = var7.bind(var1)(var9);
                            var9 = var9.CtaEventTypes;
                            var10 = var9.USER_BANNER_BLOCK_CONFIRM;
                            var9 = 'analyticsBlockContext';
                            var2[var9] = var10;
                            var9 = var8[var6];
                            var9 = var7.bind(var1)(var9);
                            var9 = var9.CtaEventTypes;
                            var10 = var9.USER_BANNER_BLOCK_AND_REPORT_CONFIRM;
                            var9 = 'analyticsBlockAndReportContext';
                            var2[var9] = var10;
                            var6 = var8[var6];
                            var6 = var7.bind(var1)(var6);
                            var6 = var6.CtaEventTypes;
                            var7 = var6.USER_BANNER_BLOCK_CANCEL;
                            var6 = 'analyticsCancelContext';
                            var2[var6] = var7;
                            var6 = _closure2_slot4;
                            var5 = 'onDismiss';
                            var2[var5] = var6;
                            var1 = var4.bind(var1)(var3, var2);
                            return var1;
                        };
                        return var1;
                    };
                    var1 = var2.bind(var3)(var1);
                    return var1;
                };
                var2['importer'] = var5;
                var2 = var3.bind(var4)(var2);
                return var1;
            };
            var7 = var5.bind(var7)(var2, var3);
            var5 = _closure1_slot3;
            var3 = var5.useCallback;
            var2 = new Array(4);
            var2[0] = var13;
            var2[1] = var12;
            var2[2] = var11;
            var2[3] = var15;
            var1 = function() {
                var4 = _closure1_slot0;
                var5 = _closure1_slot2;
                var1 = 10;
                var2 = var5[var1];
                var1 = undefined;
                var10 = var4.bind(var1)(var2);
                var9 = var10.openSafetyToolsActionSheet;
                var14 = _closure2_slot0;
                var13 = _closure2_slot2;
                var12 = _closure2_slot1;
                var3 = _closure1_slot5;
                var11 = var3.INAPPROPRIATE_CONVERSATION_TIER_2;
                var15 = var10;
                var3 = var15[var9](var14, var13, var12, var11, var10);
                var3 = _closure2_slot3;
                var2 = 4;
                var2 = var5[var2];
                var2 = var4.bind(var1)(var2);
                var2 = var2.CtaEventTypes;
                var2 = var2.USER_BANNER_OPEN_SAFETY_TOOLS;
                var2 = var3.bind(var1)(var2);
                return var1;
            };
            var5 = var3.bind(var5)(var1, var2);
            var3 = _closure1_slot6;
            var2 = _closure1_slot1;
            var1 = 11;
            var1 = var10[var1];
            var2 = var2.bind(var4)(var1);
            var1 = {};
            var1['channelId'] = var13;
            var1['warningId'] = var12;
            var1['senderId'] = var11;
            var11 = _closure1_slot5;
            var11 = var11.INAPPROPRIATE_CONVERSATION_TIER_2;
            var1['warningType'] = var11;
            var12 = 12;
            var11 = var10[var12];
            var11 = var14.bind(var4)(var11);
            var15 = var11.intl;
            var13 = var15.string;
            var11 = var10[var12];
            var11 = var14.bind(var4)(var11);
            var11 = var11.t;
            var11 = var11.ZzlB5u;
            var11 = var13.bind(var15)(var11);
            var1['header'] = var11;
            var11 = var10[var12];
            var11 = var14.bind(var4)(var11);
            var15 = var11.intl;
            var13 = var15.string;
            var11 = var10[var12];
            var11 = var14.bind(var4)(var11);
            var11 = var11.t;
            var11 = var11.D1aU+v;
            var11 = var13.bind(var15)(var11);
            var1['description'] = var11;
            var1['onDismiss'] = var9;
            var9 = {};
            var11 = var10[var12];
            var11 = var14.bind(var4)(var11);
            var13 = var11.intl;
            var11 = var13.string;
            var10 = var10[var12];
            var10 = var14.bind(var4)(var10);
            var10 = var10.t;
            var10 = var10.Qyu4UF;
            var10 = var11.bind(var13)(var10);
            var9['text'] = var10;
            var10 = 'primary';
            var9['variant'] = var10;
            var9['onpress'] = var5;
            var5 = new Array(1);
            var5[0] = var9;
            if(var6) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var6 = {};
            var11 = _closure1_slot0;
            var8 = _closure1_slot2;
            var9 = var8[var12];
            var9 = var11.bind(var4)(var9);
            var10 = var9.intl;
            var9 = var10.string;
            var8 = var8[var12];
            var8 = var11.bind(var4)(var8);
            var8 = var8.t;
            var8 = var8.7q0bNT;
            var8 = var9.bind(var10)(var8);
            var6['text'] = var8;
            var8 = 'secondary';
            var6['variant'] = var8;
            var6['onpress'] = var7;
            var7 = new Array(1);
            var7[0] = var6;
            _fun0001_ip = 4; continue _fun0001;
case 2:
            var7 = new Array(0);
case 4:
            var17 = 1;
            var19 = var5;
            var18 = var7;
            var6 = arraySpread(var19, var18, var17);
            var1['buttons'] = var5;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        }
    };
    var1 = global;
    var10 = var1.Object;
    var9 = var10.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var9.bind(var10)(var3, var1, var4);
    var1 = 0;
    var9 = var6[var1];
    var4 = metroImportAll;
    var1 = undefined;
    var4 = var4.bind(var1)(var9);
    var _closure1_slot3 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var8.bind(var1)(var4);
    var _closure1_slot4 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.SafetyWarningTypes;
    var _closure1_slot5 = var4;
    var4 = 3;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.jsx;
    var _closure1_slot6 = var4;
    var4 = 13;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationWarningBanner.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    var3['InappropriateConversationWarningBanner'] = var2;
    return var1;
})();