// app/modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationWarningBanner.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    michal = function(argFoo) { // Original name: InappropriateConversationWarningBanner
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            foxtra = michal.channelId;
            var _closure2_slot0 = foxtra;
            romeon = michal.warningId;
            var _closure2_slot1 = romeon;
            yankee = michal.senderId;
            var _closure2_slot2 = yankee;
            report = _closure1_slot3;
            tangon = report.useEffect;
            zuuluu = new Array(3);
            zuuluu[0] = foxtra;
            zuuluu[1] = romeon;
            zuuluu[2] = yankee;
            michal = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                report = 4;
                michal = golfie[report];
                entity = undefined;
                tangon = oscard.bind(entity)(michal);
                zuuluu = tangon.trackNamedViewEvent;
                michal = {};
                offset = _closure2_slot0;
                michal['channelId'] = offset;
                offset = _closure2_slot1;
                michal['warningId'] = offset;
                verify = _closure2_slot2;
                michal['senderId'] = verify;
                option = _closure1_slot5;
                option = option.INAPPROPRIATE_CONVERSATION_TIER_2;
                michal['warningType'] = option;
                report = golfie[report];
                report = oscard.bind(entity)(report);
                report = report.ViewNameTypes;
                report = report.SAFETY_WARNING_BANNER;
                michal['viewName'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            michal = tangon.bind(report)(michal, zuuluu);
            report = _closure1_slot3;
            tangon = report.useCallback;
            zuuluu = new Array(3);
            zuuluu[0] = foxtra;
            zuuluu[1] = romeon;
            zuuluu[2] = yankee;
            michal = function(argFoo) {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 4;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.trackCtaEvent;
                michal = {};
                golfie = _closure2_slot0;
                michal['channelId'] = golfie;
                golfie = _closure2_slot1;
                michal['warningId'] = golfie;
                oscard = _closure2_slot2;
                michal['senderId'] = oscard;
                report = _closure1_slot5;
                report = report.INAPPROPRIATE_CONVERSATION_TIER_2;
                michal['warningType'] = report;
                report = argFoo;
                michal['cta'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            kiloes = tangon.bind(report)(michal, zuuluu);
            var _closure2_slot3 = kiloes;
            backup = _closure1_slot0;
            offset = _closure1_slot2;
            michal = 5;
            michal = offset[michal];
            tangon = undefined;
            golfie = backup.bind(tangon)(michal);
            oscard = golfie.useStateFromStores;
            michal = _closure1_slot4;
            report = new Array(1);
            report[0] = michal;
            zuuluu = new Array(1);
            zuuluu[0] = yankee;
            michal = function() {
                zuuluu = _closure1_slot4;
                michal = zuuluu.isBlocked;
                entity = _closure2_slot2;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            oscard = oscard.bind(golfie)(report, michal, zuuluu);
            golfie = _closure1_slot3;
            report = golfie.useCallback;
            zuuluu = new Array(2);
            zuuluu[0] = foxtra;
            zuuluu[1] = romeon;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 6;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.dismissChannelSafetyWarnings;
                zuuluu = _closure2_slot0;
                oscard = _closure2_slot1;
                michal = new Array(1);
                michal[0] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            verify = report.bind(golfie)(michal, zuuluu);
            var _closure2_slot4 = verify;
            golfie = _closure1_slot3;
            report = golfie.useCallback;
            zuuluu = new Array(4);
            zuuluu[0] = verify;
            zuuluu[1] = foxtra;
            zuuluu[2] = romeon;
            zuuluu[3] = yankee;
            michal = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 7;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openLazy;
                michal = {};
                report = function() { // Original name: importer
                    zuuluu = _closure1_slot0;
                    entity = _closure1_slot2;
                    michal = 9;
                    michal = entity[michal];
                    tangon = undefined;
                    zuuluu = zuuluu.bind(tangon)(michal);
                    michal = 8;
                    michal = entity[michal];
                    entity = entity.paths;
                    zuuluu = zuuluu.bind(tangon)(michal, entity);
                    michal = zuuluu.then;
                    entity = function(argFoo) {
                        michal = argFoo;
                        michal = michal.default;
                        var _closure5_slot0 = michal;
                        entity = function(argFoo) {
                            tangon = _closure1_slot6;
                            zuuluu = _closure5_slot0;
                            michal = {};
                            yankee = argFoo;
                            romeon = michal;
                            report = copyDataProperties(romeon, yankee);
                            golfie = _closure2_slot0;
                            oscard = 'channelId';
                            michal[oscard] = golfie;
                            golfie = _closure2_slot1;
                            oscard = 'warningId';
                            michal[oscard] = golfie;
                            oscard = _closure1_slot5;
                            golfie = oscard.INAPPROPRIATE_CONVERSATION_TIER_2;
                            oscard = 'warningType';
                            michal[oscard] = golfie;
                            golfie = _closure2_slot2;
                            oscard = 'senderId';
                            michal[oscard] = golfie;
                            golfie = _closure1_slot0;
                            option = _closure1_slot2;
                            oscard = 4;
                            verify = option[oscard];
                            entity = undefined;
                            verify = golfie.bind(entity)(verify);
                            verify = verify.CtaEventTypes;
                            offset = verify.USER_BANNER_BLOCK_CONFIRM;
                            verify = 'analyticsBlockContext';
                            michal[verify] = offset;
                            verify = option[oscard];
                            verify = golfie.bind(entity)(verify);
                            verify = verify.CtaEventTypes;
                            offset = verify.USER_BANNER_BLOCK_AND_REPORT_CONFIRM;
                            verify = 'analyticsBlockAndReportContext';
                            michal[verify] = offset;
                            oscard = option[oscard];
                            oscard = golfie.bind(entity)(oscard);
                            oscard = oscard.CtaEventTypes;
                            golfie = oscard.USER_BANNER_BLOCK_CANCEL;
                            oscard = 'analyticsCancelContext';
                            michal[oscard] = golfie;
                            oscard = _closure2_slot4;
                            report = 'onDismiss';
                            michal[report] = oscard;
                            entity = tangon.bind(entity)(zuuluu, michal);
                            return entity;
                        };
                        return entity;
                    };
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
                };
                michal['importer'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            golfie = report.bind(golfie)(michal, zuuluu);
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(4);
            michal[0] = foxtra;
            michal[1] = romeon;
            michal[2] = yankee;
            michal[3] = kiloes;
            entity = function() {
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                entity = 10;
                michal = report[entity];
                entity = undefined;
                offset = tangon.bind(entity)(michal);
                verify = offset.openSafetyToolsActionSheet;
                backup = _closure2_slot0;
                foxtra = _closure2_slot2;
                romeon = _closure2_slot1;
                zuuluu = _closure1_slot5;
                yankee = zuuluu.INAPPROPRIATE_CONVERSATION_TIER_2;
                kiloes = offset;
                zuuluu = kiloes[verify](backup, foxtra, romeon, yankee, offset);
                zuuluu = _closure2_slot3;
                michal = 4;
                michal = report[michal];
                michal = tangon.bind(entity)(michal);
                michal = michal.CtaEventTypes;
                michal = michal.USER_BANNER_OPEN_SAFETY_TOOLS;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            report = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot6;
            michal = _closure1_slot1;
            entity = 11;
            entity = offset[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            entity['channelId'] = foxtra;
            entity['warningId'] = romeon;
            entity['senderId'] = yankee;
            yankee = _closure1_slot5;
            yankee = yankee.INAPPROPRIATE_CONVERSATION_TIER_2;
            entity['warningType'] = yankee;
            romeon = 12;
            yankee = offset[romeon];
            yankee = backup.bind(tangon)(yankee);
            kiloes = yankee.intl;
            foxtra = kiloes.string;
            yankee = offset[romeon];
            yankee = backup.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.ZzlB5u;
            yankee = foxtra.bind(kiloes)(yankee);
            entity['header'] = yankee;
            yankee = offset[romeon];
            yankee = backup.bind(tangon)(yankee);
            kiloes = yankee.intl;
            foxtra = kiloes.string;
            yankee = offset[romeon];
            yankee = backup.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.D1aU+v;
            yankee = foxtra.bind(kiloes)(yankee);
            entity['description'] = yankee;
            entity['onDismiss'] = verify;
            verify = {};
            yankee = offset[romeon];
            yankee = backup.bind(tangon)(yankee);
            foxtra = yankee.intl;
            yankee = foxtra.string;
            offset = offset[romeon];
            offset = backup.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.Qyu4UF;
            offset = yankee.bind(foxtra)(offset);
            verify['text'] = offset;
            offset = 'primary';
            verify['variant'] = offset;
            verify['onpress'] = report;
            report = new Array(1);
            report[0] = verify;
            if(oscard) { _fun00002_ip = 618; continue _fun00001 }
 535:
            oscard = {};
            yankee = _closure1_slot0;
            option = _closure1_slot2;
            verify = option[romeon];
            verify = yankee.bind(tangon)(verify);
            offset = verify.intl;
            verify = offset.string;
            option = option[romeon];
            option = yankee.bind(tangon)(option);
            option = option.t;
            option = option.7q0bNT;
            option = verify.bind(offset)(option);
            oscard['text'] = option;
            option = 'secondary';
            oscard['variant'] = option;
            oscard['onpress'] = golfie;
            golfie = new Array(1);
            golfie[0] = oscard;
            _fun00002_ip = 622; continue _fun00001;
 618:
            golfie = new Array(0);
 622:
            output = 1;
            echoed = report;
            result = golfie;
            oscard = arraySpread(echoed, result, output);
            entity['buttons'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zuuluu, entity, tangon);
    entity = 0;
    verify = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(verify);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.SafetyWarningTypes;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot6 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationWarningBanner.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    zuuluu['InappropriateConversationWarningBanner'] = michal;
    return entity;
})();