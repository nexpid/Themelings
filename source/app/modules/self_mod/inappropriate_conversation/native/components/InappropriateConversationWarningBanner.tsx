// app/modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationWarningBanner.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    options = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = options;
    var _closure1_slot2 = oscar;
    mike = function(argFoo) { // Original name: InappropriateConversationWarningBanner
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            foxtrot = mike.channelId;
            var _closure2_slot0 = foxtrot;
            romeo = mike.warningId;
            var _closure2_slot1 = romeo;
            yankee = mike.senderId;
            var _closure2_slot2 = yankee;
            report = _closure1_slot3;
            tango = report.useEffect;
            zulu = new Array(3);
            zulu[0] = foxtrot;
            zulu[1] = romeo;
            zulu[2] = yankee;
            mike = function() {
                oscar = _closure1_slot0;
                golf = _closure1_slot2;
                report = 4;
                mike = golf[report];
                entity = undefined;
                tango = oscar.bind(entity)(mike);
                zulu = tango.trackNamedViewEvent;
                mike = {};
                offset = _closure2_slot0;
                mike['channelId'] = offset;
                offset = _closure2_slot1;
                mike['warningId'] = offset;
                verify = _closure2_slot2;
                mike['senderId'] = verify;
                options = _closure1_slot5;
                options = options.INAPPROPRIATE_CONVERSATION_TIER_2;
                mike['warningType'] = options;
                report = golf[report];
                report = oscar.bind(entity)(report);
                report = report.ViewNameTypes;
                report = report.SAFETY_WARNING_BANNER;
                mike['viewName'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            mike = tango.bind(report)(mike, zulu);
            report = _closure1_slot3;
            tango = report.useCallback;
            zulu = new Array(3);
            zulu[0] = foxtrot;
            zulu[1] = romeo;
            zulu[2] = yankee;
            mike = function(argFoo) {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 4;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.trackCtaEvent;
                mike = {};
                golf = _closure2_slot0;
                mike['channelId'] = golf;
                golf = _closure2_slot1;
                mike['warningId'] = golf;
                oscar = _closure2_slot2;
                mike['senderId'] = oscar;
                report = _closure1_slot5;
                report = report.INAPPROPRIATE_CONVERSATION_TIER_2;
                mike['warningType'] = report;
                report = argFoo;
                mike['cta'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            kilo = tango.bind(report)(mike, zulu);
            var _closure2_slot3 = kilo;
            backup = _closure1_slot0;
            offset = _closure1_slot2;
            mike = 5;
            mike = offset[mike];
            tango = undefined;
            golf = backup.bind(tango)(mike);
            oscar = golf.useStateFromStores;
            mike = _closure1_slot4;
            report = new Array(1);
            report[0] = mike;
            zulu = new Array(1);
            zulu[0] = yankee;
            mike = function() {
                zulu = _closure1_slot4;
                mike = zulu.isBlocked;
                entity = _closure2_slot2;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            oscar = oscar.bind(golf)(report, mike, zulu);
            golf = _closure1_slot3;
            report = golf.useCallback;
            zulu = new Array(2);
            zulu[0] = foxtrot;
            zulu[1] = romeo;
            mike = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 6;
                mike = mike[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.dismissChannelSafetyWarnings;
                zulu = _closure2_slot0;
                oscar = _closure2_slot1;
                mike = new Array(1);
                mike[0] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            verify = report.bind(golf)(mike, zulu);
            var _closure2_slot4 = verify;
            golf = _closure1_slot3;
            report = golf.useCallback;
            zulu = new Array(4);
            zulu[0] = verify;
            zulu[1] = foxtrot;
            zulu[2] = romeo;
            zulu[3] = yankee;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 7;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.openLazy;
                mike = {};
                report = function() { // Original name: importer
                    zulu = _closure1_slot0;
                    entity = _closure1_slot2;
                    mike = 9;
                    mike = entity[mike];
                    tango = undefined;
                    zulu = zulu.bind(tango)(mike);
                    mike = 8;
                    mike = entity[mike];
                    entity = entity.paths;
                    zulu = zulu.bind(tango)(mike, entity);
                    mike = zulu.then;
                    entity = function(argFoo) {
                        mike = argFoo;
                        mike = mike.default;
                        var _closure5_slot0 = mike;
                        entity = function(argFoo) {
                            tango = _closure1_slot6;
                            zulu = _closure5_slot0;
                            mike = {};
                            yankee = argFoo;
                            romeo = mike;
                            report = copyDataProperties(romeo, yankee);
                            golf = _closure2_slot0;
                            oscar = 'channelId';
                            mike[oscar] = golf;
                            golf = _closure2_slot1;
                            oscar = 'warningId';
                            mike[oscar] = golf;
                            oscar = _closure1_slot5;
                            golf = oscar.INAPPROPRIATE_CONVERSATION_TIER_2;
                            oscar = 'warningType';
                            mike[oscar] = golf;
                            golf = _closure2_slot2;
                            oscar = 'senderId';
                            mike[oscar] = golf;
                            golf = _closure1_slot0;
                            options = _closure1_slot2;
                            oscar = 4;
                            verify = options[oscar];
                            entity = undefined;
                            verify = golf.bind(entity)(verify);
                            verify = verify.CtaEventTypes;
                            offset = verify.USER_BANNER_BLOCK_CONFIRM;
                            verify = 'analyticsBlockContext';
                            mike[verify] = offset;
                            verify = options[oscar];
                            verify = golf.bind(entity)(verify);
                            verify = verify.CtaEventTypes;
                            offset = verify.USER_BANNER_BLOCK_AND_REPORT_CONFIRM;
                            verify = 'analyticsBlockAndReportContext';
                            mike[verify] = offset;
                            oscar = options[oscar];
                            oscar = golf.bind(entity)(oscar);
                            oscar = oscar.CtaEventTypes;
                            golf = oscar.USER_BANNER_BLOCK_CANCEL;
                            oscar = 'analyticsCancelContext';
                            mike[oscar] = golf;
                            oscar = _closure2_slot4;
                            report = 'onDismiss';
                            mike[report] = oscar;
                            entity = tango.bind(entity)(zulu, mike);
                            return entity;
                        };
                        return entity;
                    };
                    entity = mike.bind(zulu)(entity);
                    return entity;
                };
                mike['importer'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            golf = report.bind(golf)(mike, zulu);
            report = _closure1_slot3;
            zulu = report.useCallback;
            mike = new Array(4);
            mike[0] = foxtrot;
            mike[1] = romeo;
            mike[2] = yankee;
            mike[3] = kilo;
            entity = function() {
                tango = _closure1_slot0;
                report = _closure1_slot2;
                entity = 10;
                mike = report[entity];
                entity = undefined;
                offset = tango.bind(entity)(mike);
                verify = offset.openSafetyToolsActionSheet;
                backup = _closure2_slot0;
                foxtrot = _closure2_slot2;
                romeo = _closure2_slot1;
                zulu = _closure1_slot5;
                yankee = zulu.INAPPROPRIATE_CONVERSATION_TIER_2;
                kilo = offset;
                zulu = kilo[verify](backup, foxtrot, romeo, yankee, offset);
                zulu = _closure2_slot3;
                mike = 4;
                mike = report[mike];
                mike = tango.bind(entity)(mike);
                mike = mike.CtaEventTypes;
                mike = mike.USER_BANNER_OPEN_SAFETY_TOOLS;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            report = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot6;
            mike = _closure1_slot1;
            entity = 11;
            entity = offset[entity];
            mike = mike.bind(tango)(entity);
            entity = {};
            entity['channelId'] = foxtrot;
            entity['warningId'] = romeo;
            entity['senderId'] = yankee;
            yankee = _closure1_slot5;
            yankee = yankee.INAPPROPRIATE_CONVERSATION_TIER_2;
            entity['warningType'] = yankee;
            romeo = 12;
            yankee = offset[romeo];
            yankee = backup.bind(tango)(yankee);
            kilo = yankee.intl;
            foxtrot = kilo.string;
            yankee = offset[romeo];
            yankee = backup.bind(tango)(yankee);
            yankee = yankee.t;
            yankee = yankee.ZzlB5u;
            yankee = foxtrot.bind(kilo)(yankee);
            entity['header'] = yankee;
            yankee = offset[romeo];
            yankee = backup.bind(tango)(yankee);
            kilo = yankee.intl;
            foxtrot = kilo.string;
            yankee = offset[romeo];
            yankee = backup.bind(tango)(yankee);
            yankee = yankee.t;
            yankee = yankee.D1aU+v;
            yankee = foxtrot.bind(kilo)(yankee);
            entity['description'] = yankee;
            entity['onDismiss'] = verify;
            verify = {};
            yankee = offset[romeo];
            yankee = backup.bind(tango)(yankee);
            foxtrot = yankee.intl;
            yankee = foxtrot.string;
            offset = offset[romeo];
            offset = backup.bind(tango)(offset);
            offset = offset.t;
            offset = offset.Qyu4UF;
            offset = yankee.bind(foxtrot)(offset);
            verify['text'] = offset;
            offset = 'primary';
            verify['variant'] = offset;
            verify['onpress'] = report;
            report = new Array(1);
            report[0] = verify;
            if(oscar) { _fun00002_ip = 610; continue _fun00001 }
 529:
            oscar = {};
            yankee = _closure1_slot0;
            options = _closure1_slot2;
            verify = options[romeo];
            verify = yankee.bind(tango)(verify);
            offset = verify.intl;
            verify = offset.string;
            options = options[romeo];
            options = yankee.bind(tango)(options);
            options = options.t;
            options = options.7q0bNT;
            options = verify.bind(offset)(options);
            oscar['text'] = options;
            options = 'secondary';
            oscar['variant'] = options;
            oscar['onpress'] = golf;
            golf = new Array(1);
            golf[0] = oscar;
            _fun00002_ip = 614; continue _fun00001;
 610:
            golf = new Array(0);
 614:
            output = 1;
            echo = report;
            result = golf;
            oscar = arraySpread(echo, result, output);
            entity['buttons'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zulu, entity, tango);
    entity = 0;
    verify = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(verify);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = options.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.SafetyWarningTypes;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot6 = tango;
    tango = 13;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationWarningBanner.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    zulu['InappropriateConversationWarningBanner'] = mike;
    return entity;
})();