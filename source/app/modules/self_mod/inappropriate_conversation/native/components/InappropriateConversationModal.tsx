// app/modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: IntroScreen
        entity = argFoo;
        mike = entity.warningId;
        var _closure2_slot0 = mike;
        mike = entity.senderId;
        var _closure2_slot1 = mike;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot2 = entity;
        entity = _closure1_slot16;
        tango = undefined;
        verify = entity.bind(tango)();
        output = _closure1_slot0;
        result = _closure1_slot2;
        entity = 8;
        entity = result[entity];
        report = output.bind(tango)(entity);
        zulu = report.useStateFromStores;
        entity = _closure1_slot9;
        mike = new Array(1);
        mike[0] = entity;
        entity = function() {
            zulu = _closure1_slot9;
            mike = zulu.getUser;
            entity = _closure2_slot1;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        zulu = zulu.bind(report)(mike, entity);
        offset = _closure1_slot1;
        entity = 9;
        entity = result[entity];
        mike = offset.bind(tango)(entity);
        entity = mike.getName;
        vacuum = entity.bind(mike)(zulu);
        entity = 10;
        entity = result[entity];
        mike = output.bind(tango)(entity);
        entity = mike.useNavigation;
        entity = entity.bind(mike)();
        var _closure2_slot3 = entity;
        zulu = _closure1_slot15;
        mike = _closure1_slot8;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        golf = _closure1_slot14;
        oscar = _closure1_slot6;
        report = {};
        options = 11;
        options = result[options];
        options = offset.bind(tango)(options);
        report['source'] = options;
        options = verify.modalHeaderImage;
        report['style'] = options;
        backup = 12;
        options = result[backup];
        options = output.bind(tango)(options);
        romeo = options.intl;
        offset = romeo.string;
        options = result[backup];
        options = output.bind(tango)(options);
        options = options.t;
        options = options.3QhxXF;
        options = offset.bind(romeo)(options);
        report['alt'] = options;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(3);
        report[0] = oscar;
        options = _closure1_slot15;
        golf = _closure1_slot8;
        oscar = {};
        offset = verify.warningText;
        oscar['style'] = offset;
        sizing = _closure1_slot14;
        romeo = 13;
        offset = result[romeo];
        offset = output.bind(tango)(offset);
        kilo = offset.Text;
        offset = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        echo = verify.takeoverHeader;
        offset['style'] = echo;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        source = echo.intl;
        update = source.string;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        echo = echo.t;
        echo = echo.sSMgCw;
        echo = update.bind(source)(echo);
        offset['children'] = echo;
        kilo = sizing.bind(tango)(kilo, offset);
        offset = new Array(2);
        offset[0] = kilo;
        sizing = _closure1_slot14;
        romeo = result[romeo];
        romeo = output.bind(tango)(romeo);
        kilo = romeo.Text;
        romeo = {};
        echo = 'text-md/medium';
        romeo['variant'] = echo;
        echo = verify.takeoverDescription;
        romeo['style'] = echo;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        control = echo.intl;
        source = control.format;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        echo = echo.t;
        update = echo.q2QrTU;
        echo = {};
        echo['username'] = vacuum;
        echo = source.bind(control)(update, echo);
        romeo['children'] = echo;
        romeo = sizing.bind(tango)(kilo, romeo);
        offset[1] = romeo;
        oscar['children'] = offset;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        options = _closure1_slot15;
        golf = _closure1_slot8;
        oscar = {};
        verify = verify.ctaContainer;
        oscar['style'] = verify;
        kilo = _closure1_slot14;
        offset = 14;
        verify = result[offset];
        verify = output.bind(tango)(verify);
        romeo = verify.Button;
        verify = {'variant': 'primary', 'size': 'lg', 'text': null, 'grow': true};
        sizing = result[backup];
        sizing = output.bind(tango)(sizing);
        update = sizing.intl;
        echo = update.string;
        sizing = result[backup];
        sizing = output.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.+o4Q7e;
        sizing = echo.bind(update)(sizing);
        verify['text'] = sizing;
        sizing = function() { // Original name: onPress
            report = _closure2_slot3;
            tango = report.push;
            zulu = {};
            mike = _closure2_slot0;
            zulu['warningId'] = mike;
            mike = _closure2_slot1;
            zulu['senderId'] = mike;
            mike = 'TAKE_ACTION';
            mike = tango.bind(report)(mike, zulu);
            zulu = _closure2_slot2;
            tango = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 15;
            mike = mike[entity];
            entity = undefined;
            mike = tango.bind(entity)(mike);
            mike = mike.CtaEventTypes;
            mike = mike.USER_TAKEOVER_MODAL_TAKE_ACTION;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        verify['onPress'] = sizing;
        romeo = kilo.bind(tango)(romeo, verify);
        verify = new Array(2);
        verify[0] = romeo;
        romeo = _closure1_slot14;
        offset = result[offset];
        offset = output.bind(tango)(offset);
        yankee = offset.Button;
        offset = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        kilo = result[backup];
        kilo = output.bind(tango)(kilo);
        sizing = kilo.intl;
        kilo = sizing.string;
        backup = result[backup];
        backup = output.bind(tango)(backup);
        backup = backup.t;
        backup = backup.xLkGzM;
        backup = kilo.bind(sizing)(backup);
        offset['text'] = backup;
        foxtrot = function() { // Original name: onPress
            tango = _closure2_slot3;
            zulu = tango.push;
            mike = 'SAFETY_TIPS';
            mike = zulu.bind(tango)(mike);
            zulu = _closure2_slot2;
            tango = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 15;
            mike = mike[entity];
            entity = undefined;
            mike = tango.bind(entity)(mike);
            mike = mike.CtaEventTypes;
            mike = mike.USER_TAKEOVER_MODAL_SAFETY_TIPS;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        offset['onPress'] = foxtrot;
        offset = romeo.bind(tango)(yankee, offset);
        verify[1] = offset;
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot18 = entity;
    entity = function(argFoo) { // Original name: TakeActionScreen
        entity = argFoo;
        foxtrot = entity.senderId;
        yankee = entity.isReported;
        romeo = entity.channelId;
        offset = entity.setReported;
        verify = entity.trackAnalyticsEvent;
        entity = _closure1_slot16;
        tango = undefined;
        control = entity.bind(tango)();
        zulu = _closure1_slot15;
        mike = _closure1_slot8;
        entity = {};
        report = control.container;
        entity['style'] = report;
        kilo = _closure1_slot14;
        options = _closure1_slot6;
        report = {};
        golf = _closure1_slot1;
        backup = _closure1_slot2;
        sizing = 16;
        sizing = backup[sizing];
        sizing = golf.bind(tango)(sizing);
        report['source'] = sizing;
        sizing = control.modalHeaderImage;
        report['style'] = sizing;
        sequence = _closure1_slot0;
        source = 12;
        sizing = backup[source];
        sizing = sequence.bind(tango)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = backup[source];
        sizing = sequence.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.RVyYCA;
        sizing = output.bind(result)(sizing);
        report['alt'] = sizing;
        options = kilo.bind(tango)(options, report);
        report = new Array(3);
        report[0] = options;
        sizing = _closure1_slot15;
        kilo = _closure1_slot8;
        options = {};
        output = control.warningText;
        options['style'] = output;
        update = _closure1_slot14;
        result = 13;
        output = backup[result];
        output = sequence.bind(tango)(output);
        echo = output.Text;
        output = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        vacuum = control.takeoverHeader;
        output['style'] = vacuum;
        vacuum = backup[source];
        vacuum = sequence.bind(tango)(vacuum);
        record = vacuum.intl;
        config = record.string;
        vacuum = backup[source];
        vacuum = sequence.bind(tango)(vacuum);
        vacuum = vacuum.t;
        vacuum = vacuum.mWO+ys;
        vacuum = config.bind(record)(vacuum);
        output['children'] = vacuum;
        echo = update.bind(tango)(echo, output);
        output = new Array(2);
        output[0] = echo;
        update = _closure1_slot14;
        result = backup[result];
        result = sequence.bind(tango)(result);
        echo = result.Text;
        result = {};
        vacuum = 'text-md/medium';
        result['variant'] = vacuum;
        control = control.takeoverDescription;
        result['style'] = control;
        control = backup[source];
        control = sequence.bind(tango)(control);
        vacuum = control.intl;
        control = vacuum.string;
        source = backup[source];
        source = sequence.bind(tango)(source);
        source = source.t;
        source = source.S0XtKC;
        source = control.bind(vacuum)(source);
        result['children'] = source;
        result = update.bind(tango)(echo, result);
        output[1] = result;
        options['children'] = output;
        options = sizing.bind(tango)(kilo, options);
        report[1] = options;
        options = _closure1_slot14;
        oscar = 17;
        oscar = backup[oscar];
        golf = golf.bind(tango)(oscar);
        oscar = {};
        oscar['senderId'] = foxtrot;
        oscar['channelId'] = romeo;
        oscar['isReported'] = yankee;
        oscar['setReported'] = offset;
        oscar['trackAnalyticsEvent'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot19 = entity;
    entity = function() { // Original name: SafetyTipsScreen
        entity = _closure1_slot16;
        tango = undefined;
        verify = entity.bind(tango)();
        zulu = _closure1_slot15;
        mike = _closure1_slot8;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        golf = _closure1_slot14;
        oscar = _closure1_slot6;
        report = {};
        offset = _closure1_slot1;
        output = _closure1_slot2;
        options = 18;
        options = output[options];
        options = offset.bind(tango)(options);
        report['source'] = options;
        options = verify.modalHeaderImage;
        report['style'] = options;
        sizing = _closure1_slot0;
        foxtrot = 12;
        options = output[foxtrot];
        options = sizing.bind(tango)(options);
        backup = options.intl;
        yankee = backup.string;
        options = output[foxtrot];
        options = sizing.bind(tango)(options);
        options = options.t;
        options = options.2mJo29;
        options = yankee.bind(backup)(options);
        report['alt'] = options;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(3);
        report[0] = oscar;
        options = _closure1_slot14;
        golf = _closure1_slot8;
        oscar = {};
        yankee = verify.warningText;
        oscar['style'] = yankee;
        kilo = _closure1_slot14;
        yankee = 13;
        yankee = output[yankee];
        yankee = sizing.bind(tango)(yankee);
        backup = yankee.Text;
        yankee = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        result = verify.takeoverHeader;
        yankee['style'] = result;
        result = output[foxtrot];
        result = sizing.bind(tango)(result);
        update = result.intl;
        echo = update.string;
        result = output[foxtrot];
        result = sizing.bind(tango)(result);
        result = result.t;
        result = result.eAbVfX;
        result = echo.bind(update)(result);
        yankee['children'] = result;
        yankee = kilo.bind(tango)(backup, yankee);
        oscar['children'] = yankee;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        options = _closure1_slot14;
        golf = _closure1_slot8;
        oscar = {};
        verify = verify.safetyTips;
        oscar['style'] = verify;
        yankee = _closure1_slot14;
        verify = 19;
        verify = output[verify];
        offset = offset.bind(tango)(verify);
        verify = {};
        backup = output[foxtrot];
        backup = sizing.bind(tango)(backup);
        kilo = backup.intl;
        backup = kilo.string;
        foxtrot = output[foxtrot];
        foxtrot = sizing.bind(tango)(foxtrot);
        foxtrot = foxtrot.t;
        foxtrot = foxtrot.DJMZX1;
        foxtrot = backup.bind(kilo)(foxtrot);
        verify['description'] = foxtrot;
        romeo = _closure1_slot13;
        backup = romeo.bind(tango)();
        foxtrot = backup.map;
        romeo = function(argFoo, argBar) {
            report = _closure1_slot14;
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 13;
            entity = zulu[entity];
            tango = undefined;
            entity = mike.bind(tango)(entity);
            zulu = entity.Text;
            mike = {};
            entity = 'text-sm/medium';
            mike['variant'] = entity;
            entity = argFoo;
            mike['children'] = entity;
            entity = argBar;
            entity = report.bind(tango)(zulu, mike, entity);
            return entity;
        };
        romeo = foxtrot.bind(backup)(romeo);
        verify['safetyTips'] = romeo;
        verify = yankee.bind(tango)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot20 = entity;
    entity = function(argFoo) { // Original name: CrisisTextLineScreen
        entity = argFoo;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot0 = entity;
        entity = _closure1_slot16;
        tango = undefined;
        verify = entity.bind(tango)();
        zulu = _closure1_slot15;
        mike = _closure1_slot8;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        golf = _closure1_slot14;
        oscar = _closure1_slot6;
        report = {};
        offset = _closure1_slot1;
        result = _closure1_slot2;
        options = 20;
        options = result[options];
        options = offset.bind(tango)(options);
        report['source'] = options;
        options = verify.modalHeaderImage;
        report['style'] = options;
        output = _closure1_slot0;
        backup = 12;
        options = result[backup];
        options = output.bind(tango)(options);
        romeo = options.intl;
        offset = romeo.string;
        options = result[backup];
        options = output.bind(tango)(options);
        options = options.t;
        options = options.FUHHrq;
        options = offset.bind(romeo)(options);
        report['alt'] = options;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(3);
        report[0] = oscar;
        options = _closure1_slot15;
        golf = _closure1_slot8;
        oscar = {};
        offset = verify.warningText;
        oscar['style'] = offset;
        sizing = _closure1_slot14;
        romeo = 13;
        offset = result[romeo];
        offset = output.bind(tango)(offset);
        kilo = offset.Text;
        offset = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        echo = verify.takeoverHeader;
        offset['style'] = echo;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        source = echo.intl;
        update = source.string;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        echo = echo.t;
        echo = echo.NUMAsL;
        echo = update.bind(source)(echo);
        offset['children'] = echo;
        kilo = sizing.bind(tango)(kilo, offset);
        offset = new Array(2);
        offset[0] = kilo;
        sizing = _closure1_slot14;
        romeo = result[romeo];
        romeo = output.bind(tango)(romeo);
        kilo = romeo.Text;
        romeo = {};
        echo = 'text-md/medium';
        romeo['variant'] = echo;
        echo = verify.takeoverDescription;
        romeo['style'] = echo;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        source = echo.intl;
        update = source.string;
        echo = result[backup];
        echo = output.bind(tango)(echo);
        echo = echo.t;
        echo = echo.uicS5u;
        echo = update.bind(source)(echo);
        romeo['children'] = echo;
        romeo = sizing.bind(tango)(kilo, romeo);
        offset[1] = romeo;
        oscar['children'] = offset;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        options = _closure1_slot15;
        golf = _closure1_slot8;
        oscar = {};
        verify = verify.ctaContainer;
        oscar['style'] = verify;
        kilo = _closure1_slot14;
        offset = 14;
        verify = result[offset];
        verify = output.bind(tango)(verify);
        romeo = verify.Button;
        verify = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        sizing = result[backup];
        sizing = output.bind(tango)(sizing);
        update = sizing.intl;
        echo = update.string;
        sizing = result[backup];
        sizing = output.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.lkUb4e;
        sizing = echo.bind(update)(sizing);
        verify['text'] = sizing;
        sizing = function() { // Original name: onPress
            tango = _closure1_slot7;
            zulu = tango.openURL;
            mike = _closure1_slot10;
            mike = zulu.bind(tango)(mike);
            zulu = _closure2_slot0;
            tango = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 15;
            mike = mike[entity];
            entity = undefined;
            mike = tango.bind(entity)(mike);
            mike = mike.CtaEventTypes;
            mike = mike.USER_TAKEOVER_MODAL_CTL_SMS;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        verify['onPress'] = sizing;
        romeo = kilo.bind(tango)(romeo, verify);
        verify = new Array(2);
        verify[0] = romeo;
        romeo = _closure1_slot14;
        offset = result[offset];
        offset = output.bind(tango)(offset);
        yankee = offset.Button;
        offset = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        kilo = result[backup];
        kilo = output.bind(tango)(kilo);
        sizing = kilo.intl;
        kilo = sizing.string;
        backup = result[backup];
        backup = output.bind(tango)(backup);
        backup = backup.t;
        backup = backup.ogLlv7;
        backup = kilo.bind(sizing)(backup);
        offset['text'] = backup;
        foxtrot = function() { // Original name: onPress
            tango = _closure1_slot7;
            zulu = tango.openURL;
            mike = _closure1_slot11;
            mike = zulu.bind(tango)(mike);
            zulu = _closure2_slot0;
            tango = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 15;
            mike = mike[entity];
            entity = undefined;
            mike = tango.bind(entity)(mike);
            mike = mike.CtaEventTypes;
            mike = mike.USER_TAKEOVER_MODAL_CTL_WEB;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        offset['onPress'] = foxtrot;
        offset = romeo.bind(tango)(yankee, offset);
        verify[1] = offset;
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot21 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    options = oscar[tango];
    golf = argCorge;
    golf = golf.bind(entity)(options);
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.useState;
    var _closure1_slot5 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Image;
    var _closure1_slot6 = golf;
    golf = tango.Linking;
    var _closure1_slot7 = golf;
    tango = tango.View;
    var _closure1_slot8 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot9 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.CRISIS_TEXT_LINE_SMS_URI;
    var _closure1_slot10 = golf;
    golf = tango.CRISIS_TEXT_LINE_URL;
    var _closure1_slot11 = golf;
    golf = tango.TAKEOVER_MODAL_KEY;
    var _closure1_slot12 = golf;
    tango = tango.getInappropriateConversationsSafetyTips;
    var _closure1_slot13 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot14 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot15 = tango;
    tango = 6;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'padding': null, 'gap': null, 'height': '100%'};
    yankee = 'center';
    romeo = 7;
    offset = oscar[romeo];
    offset = foxtrot.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_32;
    verify['padding'] = offset;
    offset = oscar[romeo];
    offset = foxtrot.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['gap'] = offset;
    tango['container'] = verify;
    verify = {'marginBottom': null, 'display': 'flex', 'alignItems': 'center'};
    offset = oscar[romeo];
    offset = foxtrot.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['marginBottom'] = offset;
    offset = oscar[romeo];
    offset = foxtrot.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_4;
    verify['gap'] = offset;
    tango['warningText'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'alignSelf': 'stretch'};
    offset = 'stretch';
    romeo = oscar[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['gap'] = romeo;
    tango['ctaContainer'] = verify;
    verify = {'textAlign': 'center', 'maxWidth': 268};
    tango['takeoverHeader'] = verify;
    verify = {};
    verify['textAlign'] = yankee;
    tango['takeoverDescription'] = verify;
    verify = {};
    verify['alignSelf'] = offset;
    tango['safetyTips'] = verify;
    verify = {'width': 228, 'height': 140};
    tango['modalHeaderImage'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot16 = tango;
    tango = function(argFoo) { // Original name: getScreens
        entity = argFoo;
        mike = entity.warningId;
        var _closure2_slot0 = mike;
        mike = entity.senderId;
        var _closure2_slot1 = mike;
        mike = entity.channelId;
        var _closure2_slot2 = mike;
        mike = entity.isReported;
        var _closure2_slot3 = mike;
        mike = entity.setReported;
        var _closure2_slot4 = mike;
        mike = entity.handleDismiss;
        var _closure2_slot5 = mike;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot6 = entity;
        report = {'title': '', 'fullscreen': true};
        tango = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 21;
        golf = oscar[entity];
        mike = undefined;
        verify = tango.bind(mike)(golf);
        options = verify.getHeaderCloseButton;
        golf = function() {
            mike = _closure2_slot5;
            entity = undefined;
            entity = mike.bind(entity)();
            return entity;
        };
        golf = options.bind(verify)(golf);
        report['headerRight'] = golf;
        entity = oscar[entity];
        mike = tango.bind(mike)(entity);
        entity = mike.getHeaderBackButton;
        entity = entity.bind(mike)();
        report['headerLeft'] = entity;
        entity = {};
        mike = {};
        yankee = mike;
        offset = report;
        tango = copyDataProperties(yankee, offset);
        oscar = function() { // Original name: headerLeft
            entity = null;
            return entity;
        };
        tango = 'headerLeft';
        mike[tango] = oscar;
        oscar = function() { // Original name: render
            tango = _closure1_slot14;
            zulu = _closure1_slot18;
            mike = {};
            report = _closure2_slot0;
            mike['warningId'] = report;
            report = _closure2_slot1;
            mike['senderId'] = report;
            entity = _closure2_slot6;
            mike['trackAnalyticsEvent'] = entity;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike);
            return entity;
        };
        tango = 'render';
        mike[tango] = oscar;
        entity['INTRO'] = mike;
        mike = {};
        yankee = mike;
        offset = report;
        oscar = copyDataProperties(yankee, offset);
        oscar = function() { // Original name: render
            tango = _closure1_slot14;
            zulu = _closure1_slot19;
            mike = {};
            report = _closure2_slot1;
            mike['senderId'] = report;
            report = _closure2_slot2;
            mike['channelId'] = report;
            report = _closure2_slot3;
            mike['isReported'] = report;
            report = _closure2_slot4;
            mike['setReported'] = report;
            entity = _closure2_slot6;
            mike['trackAnalyticsEvent'] = entity;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike);
            return entity;
        };
        mike[tango] = oscar;
        entity['TAKE_ACTION'] = mike;
        mike = {};
        yankee = mike;
        offset = report;
        oscar = copyDataProperties(yankee, offset);
        oscar = function() { // Original name: render
            tango = _closure1_slot14;
            zulu = _closure1_slot20;
            mike = undefined;
            entity = {};
            entity = tango.bind(mike)(zulu, entity);
            return entity;
        };
        mike[tango] = oscar;
        entity['SAFETY_TIPS'] = mike;
        mike = {};
        yankee = mike;
        offset = report;
        report = copyDataProperties(yankee, offset);
        zulu = function() { // Original name: render
            tango = _closure1_slot14;
            zulu = _closure1_slot21;
            mike = {};
            entity = _closure2_slot6;
            mike['trackAnalyticsEvent'] = entity;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike);
            return entity;
        };
        mike[tango] = zulu;
        entity['CRISIS_TEXT_LINE'] = mike;
        return entity;
    };
    var _closure1_slot17 = tango;
    tango = 26;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: InappropriateConversationModal
        mike = argFoo;
        foxtrot = mike.channelId;
        var _closure2_slot0 = foxtrot;
        romeo = mike.warningId;
        var _closure2_slot1 = romeo;
        sizing = mike.warningType;
        var _closure2_slot2 = sizing;
        yankee = mike.senderId;
        var _closure2_slot3 = yankee;
        zulu = _closure1_slot5;
        tango = undefined;
        mike = false;
        oscar = zulu.bind(tango)(mike);
        zulu = _closure1_slot3;
        mike = 2;
        zulu = zulu.bind(tango)(oscar, mike);
        mike = 0;
        offset = zulu[mike];
        mike = 1;
        verify = zulu[mike];
        mike = _closure1_slot0;
        oscar = _closure1_slot2;
        zulu = 22;
        zulu = oscar[zulu];
        golf = mike.bind(tango)(zulu);
        zulu = golf.useSafetyToolsButtonTooltipForChannel;
        golf = zulu.bind(golf)(foxtrot);
        zulu = null;
        kilo = zulu != golf;
        var _closure2_slot4 = kilo;
        backup = _closure1_slot4;
        options = backup.useMemo;
        golf = new Array(5);
        golf[0] = foxtrot;
        golf[1] = romeo;
        golf[2] = sizing;
        golf[3] = yankee;
        golf[4] = kilo;
        zulu = function() {
            entity = {};
            zulu = _closure2_slot0;
            entity['channelId'] = zulu;
            zulu = _closure2_slot3;
            entity['senderId'] = zulu;
            zulu = _closure2_slot1;
            entity['warningId'] = zulu;
            zulu = _closure2_slot2;
            entity['warningType'] = zulu;
            mike = _closure2_slot4;
            entity['isNudgeWarning'] = mike;
            return entity;
        };
        zulu = options.bind(backup)(zulu, golf);
        var _closure2_slot5 = zulu;
        output = backup.useCallback;
        options = new Array(3);
        options[0] = foxtrot;
        options[1] = romeo;
        options[2] = zulu;
        golf = function() {
            tango = _closure1_slot1;
            golf = _closure1_slot2;
            entity = 23;
            zulu = golf[entity];
            entity = undefined;
            report = tango.bind(entity)(zulu);
            tango = report.popWithKey;
            zulu = _closure1_slot12;
            zulu = tango.bind(report)(zulu);
            oscar = _closure1_slot0;
            mike = 24;
            mike = golf[mike];
            report = oscar.bind(entity)(mike);
            tango = report.dismissChannelSafetyWarnings;
            zulu = _closure2_slot0;
            verify = _closure2_slot1;
            mike = new Array(1);
            mike[0] = verify;
            mike = tango.bind(report)(zulu, mike);
            report = 15;
            mike = golf[report];
            tango = oscar.bind(entity)(mike);
            zulu = tango.trackCtaEvent;
            mike = {};
            offset = _closure2_slot5;
            yankee = mike;
            options = copyDataProperties(yankee, offset);
            report = golf[report];
            report = oscar.bind(entity)(report);
            report = report.CtaEventTypes;
            oscar = report.USER_TAKEOVER_MODAL_DISMISS;
            report = 'cta';
            mike[report] = oscar;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        options = output.bind(backup)(golf, options);
        output = backup.useEffect;
        golf = new Array(1);
        golf[0] = zulu;
        zulu = function() {
            oscar = _closure1_slot0;
            golf = _closure1_slot2;
            report = 15;
            mike = golf[report];
            entity = undefined;
            tango = oscar.bind(entity)(mike);
            zulu = tango.trackNamedViewEvent;
            mike = {};
            verify = _closure2_slot5;
            offset = mike;
            options = copyDataProperties(offset, verify);
            report = golf[report];
            report = oscar.bind(entity)(report);
            report = report.ViewNameTypes;
            oscar = report.SAFETY_TAKEOVER_MODAL;
            report = 'viewName';
            mike[report] = oscar;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        zulu = output.bind(backup)(zulu, golf);
        golf = backup.useCallback;
        zulu = new Array(5);
        zulu[0] = foxtrot;
        zulu[1] = romeo;
        zulu[2] = yankee;
        zulu[3] = sizing;
        zulu[4] = kilo;
        entity = function(argFoo) {
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 15;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.trackCtaEvent;
            mike = {};
            oscar = _closure2_slot0;
            mike['channelId'] = oscar;
            oscar = _closure2_slot1;
            mike['warningId'] = oscar;
            oscar = _closure2_slot3;
            mike['senderId'] = oscar;
            oscar = _closure2_slot2;
            mike['warningType'] = oscar;
            oscar = argFoo;
            mike['cta'] = oscar;
            report = _closure2_slot4;
            mike['isNudgeWarning'] = report;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        golf = golf.bind(backup)(entity, zulu);
        zulu = _closure1_slot14;
        entity = 25;
        entity = oscar[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.Navigator;
        entity = {};
        oscar = _closure1_slot17;
        report = {};
        report['channelId'] = foxtrot;
        report['warningId'] = romeo;
        report['senderId'] = yankee;
        report['isReported'] = offset;
        report['setReported'] = verify;
        report['handleDismiss'] = options;
        report['trackAnalyticsEvent'] = golf;
        report = oscar.bind(tango)(report);
        entity['screens'] = report;
        report = 'INTRO';
        entity['initialRouteName'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();