// app/modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: IntroScreen
        entity = argFoo;
        michal = entity.warningId;
        var _closure2_slot0 = michal;
        michal = entity.senderId;
        var _closure2_slot1 = michal;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot2 = entity;
        entity = _closure1_slot16;
        tangon = undefined;
        verify = entity.bind(tangon)();
        output = _closure1_slot0;
        result = _closure1_slot2;
        entity = 8;
        entity = result[entity];
        report = output.bind(tangon)(entity);
        zuuluu = report.useStateFromStores;
        entity = _closure1_slot9;
        michal = new Array(1);
        michal[0] = entity;
        entity = function() {
            zuuluu = _closure1_slot9;
            michal = zuuluu.getUser;
            entity = _closure2_slot1;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        zuuluu = zuuluu.bind(report)(michal, entity);
        offset = _closure1_slot1;
        entity = 9;
        entity = result[entity];
        michal = offset.bind(tangon)(entity);
        entity = michal.getName;
        vacuum = entity.bind(michal)(zuuluu);
        entity = 10;
        entity = result[entity];
        michal = output.bind(tangon)(entity);
        entity = michal.useNavigation;
        entity = entity.bind(michal)();
        var _closure2_slot3 = entity;
        zuuluu = _closure1_slot15;
        michal = _closure1_slot8;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        golfie = _closure1_slot14;
        oscard = _closure1_slot6;
        report = {};
        option = 11;
        option = result[option];
        option = offset.bind(tangon)(option);
        report['source'] = option;
        option = verify.modalHeaderImage;
        report['style'] = option;
        backup = 12;
        option = result[backup];
        option = output.bind(tangon)(option);
        romeon = option.intl;
        offset = romeon.string;
        option = result[backup];
        option = output.bind(tangon)(option);
        option = option.t;
        option = option.3QhxXF;
        option = offset.bind(romeon)(option);
        report['alt'] = option;
        oscard = golfie.bind(tangon)(oscard, report);
        report = new Array(3);
        report[0] = oscard;
        option = _closure1_slot15;
        golfie = _closure1_slot8;
        oscard = {};
        offset = verify.warningText;
        oscard['style'] = offset;
        sizing = _closure1_slot14;
        romeon = 13;
        offset = result[romeon];
        offset = output.bind(tangon)(offset);
        kiloes = offset.Text;
        offset = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        echoed = verify.takeoverHeader;
        offset['style'] = echoed;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        source = echoed.intl;
        update = source.string;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.sSMgCw;
        echoed = update.bind(source)(echoed);
        offset['children'] = echoed;
        kiloes = sizing.bind(tangon)(kiloes, offset);
        offset = new Array(2);
        offset[0] = kiloes;
        sizing = _closure1_slot14;
        romeon = result[romeon];
        romeon = output.bind(tangon)(romeon);
        kiloes = romeon.Text;
        romeon = {};
        echoed = 'text-md/medium';
        romeon['variant'] = echoed;
        echoed = verify.takeoverDescription;
        romeon['style'] = echoed;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        ctrled = echoed.intl;
        source = ctrled.format;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        echoed = echoed.t;
        update = echoed.q2QrTU;
        echoed = {};
        echoed['username'] = vacuum;
        echoed = source.bind(ctrled)(update, echoed);
        romeon['children'] = echoed;
        romeon = sizing.bind(tangon)(kiloes, romeon);
        offset[1] = romeon;
        oscard['children'] = offset;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        option = _closure1_slot15;
        golfie = _closure1_slot8;
        oscard = {};
        verify = verify.ctaContainer;
        oscard['style'] = verify;
        kiloes = _closure1_slot14;
        offset = 14;
        verify = result[offset];
        verify = output.bind(tangon)(verify);
        romeon = verify.Button;
        verify = {'variant': 'primary', 'size': 'lg', 'text': null, 'grow': true};
        sizing = result[backup];
        sizing = output.bind(tangon)(sizing);
        update = sizing.intl;
        echoed = update.string;
        sizing = result[backup];
        sizing = output.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.+o4Q7e;
        sizing = echoed.bind(update)(sizing);
        verify['text'] = sizing;
        sizing = function() { // Original name: onPress
            report = _closure2_slot3;
            tangon = report.push;
            zuuluu = {};
            michal = _closure2_slot0;
            zuuluu['warningId'] = michal;
            michal = _closure2_slot1;
            zuuluu['senderId'] = michal;
            michal = 'TAKE_ACTION';
            michal = tangon.bind(report)(michal, zuuluu);
            zuuluu = _closure2_slot2;
            tangon = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 15;
            michal = michal[entity];
            entity = undefined;
            michal = tangon.bind(entity)(michal);
            michal = michal.CtaEventTypes;
            michal = michal.USER_TAKEOVER_MODAL_TAKE_ACTION;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        verify['onPress'] = sizing;
        romeon = kiloes.bind(tangon)(romeon, verify);
        verify = new Array(2);
        verify[0] = romeon;
        romeon = _closure1_slot14;
        offset = result[offset];
        offset = output.bind(tangon)(offset);
        yankee = offset.Button;
        offset = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        kiloes = result[backup];
        kiloes = output.bind(tangon)(kiloes);
        sizing = kiloes.intl;
        kiloes = sizing.string;
        backup = result[backup];
        backup = output.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.xLkGzM;
        backup = kiloes.bind(sizing)(backup);
        offset['text'] = backup;
        foxtra = function() { // Original name: onPress
            tangon = _closure2_slot3;
            zuuluu = tangon.push;
            michal = 'SAFETY_TIPS';
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = _closure2_slot2;
            tangon = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 15;
            michal = michal[entity];
            entity = undefined;
            michal = tangon.bind(entity)(michal);
            michal = michal.CtaEventTypes;
            michal = michal.USER_TAKEOVER_MODAL_SAFETY_TIPS;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        offset['onPress'] = foxtra;
        offset = romeon.bind(tangon)(yankee, offset);
        verify[1] = offset;
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot18 = entity;
    entity = function(argFoo) { // Original name: TakeActionScreen
        entity = argFoo;
        foxtra = entity.senderId;
        yankee = entity.isReported;
        romeon = entity.channelId;
        offset = entity.setReported;
        verify = entity.trackAnalyticsEvent;
        entity = _closure1_slot16;
        tangon = undefined;
        ctrled = entity.bind(tangon)();
        zuuluu = _closure1_slot15;
        michal = _closure1_slot8;
        entity = {};
        report = ctrled.container;
        entity['style'] = report;
        kiloes = _closure1_slot14;
        option = _closure1_slot6;
        report = {};
        golfie = _closure1_slot1;
        backup = _closure1_slot2;
        sizing = 16;
        sizing = backup[sizing];
        sizing = golfie.bind(tangon)(sizing);
        report['source'] = sizing;
        sizing = ctrled.modalHeaderImage;
        report['style'] = sizing;
        sequen = _closure1_slot0;
        source = 12;
        sizing = backup[source];
        sizing = sequen.bind(tangon)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = backup[source];
        sizing = sequen.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.RVyYCA;
        sizing = output.bind(result)(sizing);
        report['alt'] = sizing;
        option = kiloes.bind(tangon)(option, report);
        report = new Array(3);
        report[0] = option;
        sizing = _closure1_slot15;
        kiloes = _closure1_slot8;
        option = {};
        output = ctrled.warningText;
        option['style'] = output;
        update = _closure1_slot14;
        result = 13;
        output = backup[result];
        output = sequen.bind(tangon)(output);
        echoed = output.Text;
        output = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        vacuum = ctrled.takeoverHeader;
        output['style'] = vacuum;
        vacuum = backup[source];
        vacuum = sequen.bind(tangon)(vacuum);
        record = vacuum.intl;
        config = record.string;
        vacuum = backup[source];
        vacuum = sequen.bind(tangon)(vacuum);
        vacuum = vacuum.t;
        vacuum = vacuum.mWO+ys;
        vacuum = config.bind(record)(vacuum);
        output['children'] = vacuum;
        echoed = update.bind(tangon)(echoed, output);
        output = new Array(2);
        output[0] = echoed;
        update = _closure1_slot14;
        result = backup[result];
        result = sequen.bind(tangon)(result);
        echoed = result.Text;
        result = {};
        vacuum = 'text-md/medium';
        result['variant'] = vacuum;
        ctrled = ctrled.takeoverDescription;
        result['style'] = ctrled;
        ctrled = backup[source];
        ctrled = sequen.bind(tangon)(ctrled);
        vacuum = ctrled.intl;
        ctrled = vacuum.string;
        source = backup[source];
        source = sequen.bind(tangon)(source);
        source = source.t;
        source = source.S0XtKC;
        source = ctrled.bind(vacuum)(source);
        result['children'] = source;
        result = update.bind(tangon)(echoed, result);
        output[1] = result;
        option['children'] = output;
        option = sizing.bind(tangon)(kiloes, option);
        report[1] = option;
        option = _closure1_slot14;
        oscard = 17;
        oscard = backup[oscard];
        golfie = golfie.bind(tangon)(oscard);
        oscard = {};
        oscard['senderId'] = foxtra;
        oscard['channelId'] = romeon;
        oscard['isReported'] = yankee;
        oscard['setReported'] = offset;
        oscard['trackAnalyticsEvent'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot19 = entity;
    entity = function() { // Original name: SafetyTipsScreen
        entity = _closure1_slot16;
        tangon = undefined;
        verify = entity.bind(tangon)();
        zuuluu = _closure1_slot15;
        michal = _closure1_slot8;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        golfie = _closure1_slot14;
        oscard = _closure1_slot6;
        report = {};
        offset = _closure1_slot1;
        output = _closure1_slot2;
        option = 18;
        option = output[option];
        option = offset.bind(tangon)(option);
        report['source'] = option;
        option = verify.modalHeaderImage;
        report['style'] = option;
        sizing = _closure1_slot0;
        foxtra = 12;
        option = output[foxtra];
        option = sizing.bind(tangon)(option);
        backup = option.intl;
        yankee = backup.string;
        option = output[foxtra];
        option = sizing.bind(tangon)(option);
        option = option.t;
        option = option.2mJo29;
        option = yankee.bind(backup)(option);
        report['alt'] = option;
        oscard = golfie.bind(tangon)(oscard, report);
        report = new Array(3);
        report[0] = oscard;
        option = _closure1_slot14;
        golfie = _closure1_slot8;
        oscard = {};
        yankee = verify.warningText;
        oscard['style'] = yankee;
        kiloes = _closure1_slot14;
        yankee = 13;
        yankee = output[yankee];
        yankee = sizing.bind(tangon)(yankee);
        backup = yankee.Text;
        yankee = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        result = verify.takeoverHeader;
        yankee['style'] = result;
        result = output[foxtra];
        result = sizing.bind(tangon)(result);
        update = result.intl;
        echoed = update.string;
        result = output[foxtra];
        result = sizing.bind(tangon)(result);
        result = result.t;
        result = result.eAbVfX;
        result = echoed.bind(update)(result);
        yankee['children'] = result;
        yankee = kiloes.bind(tangon)(backup, yankee);
        oscard['children'] = yankee;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        option = _closure1_slot14;
        golfie = _closure1_slot8;
        oscard = {};
        verify = verify.safetyTips;
        oscard['style'] = verify;
        yankee = _closure1_slot14;
        verify = 19;
        verify = output[verify];
        offset = offset.bind(tangon)(verify);
        verify = {};
        backup = output[foxtra];
        backup = sizing.bind(tangon)(backup);
        kiloes = backup.intl;
        backup = kiloes.string;
        foxtra = output[foxtra];
        foxtra = sizing.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        foxtra = foxtra.DJMZX1;
        foxtra = backup.bind(kiloes)(foxtra);
        verify['description'] = foxtra;
        romeon = _closure1_slot13;
        backup = romeon.bind(tangon)();
        foxtra = backup.map;
        romeon = function(argFoo, argBar) {
            report = _closure1_slot14;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 13;
            entity = zuuluu[entity];
            tangon = undefined;
            entity = michal.bind(tangon)(entity);
            zuuluu = entity.Text;
            michal = {};
            entity = 'text-sm/medium';
            michal['variant'] = entity;
            entity = argFoo;
            michal['children'] = entity;
            entity = argBar;
            entity = report.bind(tangon)(zuuluu, michal, entity);
            return entity;
        };
        romeon = foxtra.bind(backup)(romeon);
        verify['safetyTips'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot20 = entity;
    entity = function(argFoo) { // Original name: CrisisTextLineScreen
        entity = argFoo;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot0 = entity;
        entity = _closure1_slot16;
        tangon = undefined;
        verify = entity.bind(tangon)();
        zuuluu = _closure1_slot15;
        michal = _closure1_slot8;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        golfie = _closure1_slot14;
        oscard = _closure1_slot6;
        report = {};
        offset = _closure1_slot1;
        result = _closure1_slot2;
        option = 20;
        option = result[option];
        option = offset.bind(tangon)(option);
        report['source'] = option;
        option = verify.modalHeaderImage;
        report['style'] = option;
        output = _closure1_slot0;
        backup = 12;
        option = result[backup];
        option = output.bind(tangon)(option);
        romeon = option.intl;
        offset = romeon.string;
        option = result[backup];
        option = output.bind(tangon)(option);
        option = option.t;
        option = option.FUHHrq;
        option = offset.bind(romeon)(option);
        report['alt'] = option;
        oscard = golfie.bind(tangon)(oscard, report);
        report = new Array(3);
        report[0] = oscard;
        option = _closure1_slot15;
        golfie = _closure1_slot8;
        oscard = {};
        offset = verify.warningText;
        oscard['style'] = offset;
        sizing = _closure1_slot14;
        romeon = 13;
        offset = result[romeon];
        offset = output.bind(tangon)(offset);
        kiloes = offset.Text;
        offset = {'variant': 'heading-xl/semibold', 'style': null, 'accessibilityRole': 'header'};
        echoed = verify.takeoverHeader;
        offset['style'] = echoed;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        source = echoed.intl;
        update = source.string;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.NUMAsL;
        echoed = update.bind(source)(echoed);
        offset['children'] = echoed;
        kiloes = sizing.bind(tangon)(kiloes, offset);
        offset = new Array(2);
        offset[0] = kiloes;
        sizing = _closure1_slot14;
        romeon = result[romeon];
        romeon = output.bind(tangon)(romeon);
        kiloes = romeon.Text;
        romeon = {};
        echoed = 'text-md/medium';
        romeon['variant'] = echoed;
        echoed = verify.takeoverDescription;
        romeon['style'] = echoed;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        source = echoed.intl;
        update = source.string;
        echoed = result[backup];
        echoed = output.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.uicS5u;
        echoed = update.bind(source)(echoed);
        romeon['children'] = echoed;
        romeon = sizing.bind(tangon)(kiloes, romeon);
        offset[1] = romeon;
        oscard['children'] = offset;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        option = _closure1_slot15;
        golfie = _closure1_slot8;
        oscard = {};
        verify = verify.ctaContainer;
        oscard['style'] = verify;
        kiloes = _closure1_slot14;
        offset = 14;
        verify = result[offset];
        verify = output.bind(tangon)(verify);
        romeon = verify.Button;
        verify = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        sizing = result[backup];
        sizing = output.bind(tangon)(sizing);
        update = sizing.intl;
        echoed = update.string;
        sizing = result[backup];
        sizing = output.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.lkUb4e;
        sizing = echoed.bind(update)(sizing);
        verify['text'] = sizing;
        sizing = function() { // Original name: onPress
            tangon = _closure1_slot7;
            zuuluu = tangon.openURL;
            michal = _closure1_slot10;
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = _closure2_slot0;
            tangon = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 15;
            michal = michal[entity];
            entity = undefined;
            michal = tangon.bind(entity)(michal);
            michal = michal.CtaEventTypes;
            michal = michal.USER_TAKEOVER_MODAL_CTL_SMS;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        verify['onPress'] = sizing;
        romeon = kiloes.bind(tangon)(romeon, verify);
        verify = new Array(2);
        verify[0] = romeon;
        romeon = _closure1_slot14;
        offset = result[offset];
        offset = output.bind(tangon)(offset);
        yankee = offset.Button;
        offset = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        kiloes = result[backup];
        kiloes = output.bind(tangon)(kiloes);
        sizing = kiloes.intl;
        kiloes = sizing.string;
        backup = result[backup];
        backup = output.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.ogLlv7;
        backup = kiloes.bind(sizing)(backup);
        offset['text'] = backup;
        foxtra = function() { // Original name: onPress
            tangon = _closure1_slot7;
            zuuluu = tangon.openURL;
            michal = _closure1_slot11;
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = _closure2_slot0;
            tangon = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 15;
            michal = michal[entity];
            entity = undefined;
            michal = tangon.bind(entity)(michal);
            michal = michal.CtaEventTypes;
            michal = michal.USER_TAKEOVER_MODAL_CTL_WEB;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        offset['onPress'] = foxtra;
        offset = romeon.bind(tangon)(yankee, offset);
        verify[1] = offset;
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot21 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    option = oscard[tangon];
    golfie = argCor;
    golfie = golfie.bind(entity)(option);
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useState;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot6 = golfie;
    golfie = tangon.Linking;
    var _closure1_slot7 = golfie;
    tangon = tangon.View;
    var _closure1_slot8 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.CRISIS_TEXT_LINE_SMS_URI;
    var _closure1_slot10 = golfie;
    golfie = tangon.CRISIS_TEXT_LINE_URL;
    var _closure1_slot11 = golfie;
    golfie = tangon.TAKEOVER_MODAL_KEY;
    var _closure1_slot12 = golfie;
    tangon = tangon.getInappropriateConversationsSafetyTips;
    var _closure1_slot13 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot14 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot15 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'padding': null, 'gap': null, 'height': '100%'};
    yankee = 'center';
    romeon = 7;
    offset = oscard[romeon];
    offset = foxtra.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_32;
    verify['padding'] = offset;
    offset = oscard[romeon];
    offset = foxtra.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['gap'] = offset;
    tangon['container'] = verify;
    verify = {'marginBottom': null, 'display': 'flex', 'alignItems': 'center'};
    offset = oscard[romeon];
    offset = foxtra.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['marginBottom'] = offset;
    offset = oscard[romeon];
    offset = foxtra.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_4;
    verify['gap'] = offset;
    tangon['warningText'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'alignSelf': 'stretch'};
    offset = 'stretch';
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['gap'] = romeon;
    tangon['ctaContainer'] = verify;
    verify = {'textAlign': 'center', 'maxWidth': 268};
    tangon['takeoverHeader'] = verify;
    verify = {};
    verify['textAlign'] = yankee;
    tangon['takeoverDescription'] = verify;
    verify = {};
    verify['alignSelf'] = offset;
    tangon['safetyTips'] = verify;
    verify = {'width': 228, 'height': 140};
    tangon['modalHeaderImage'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot16 = tangon;
    tangon = function(argFoo) { // Original name: getScreens
        entity = argFoo;
        michal = entity.warningId;
        var _closure2_slot0 = michal;
        michal = entity.senderId;
        var _closure2_slot1 = michal;
        michal = entity.channelId;
        var _closure2_slot2 = michal;
        michal = entity.isReported;
        var _closure2_slot3 = michal;
        michal = entity.setReported;
        var _closure2_slot4 = michal;
        michal = entity.handleDismiss;
        var _closure2_slot5 = michal;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot6 = entity;
        report = {'title': '', 'fullscreen': true};
        tangon = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 21;
        golfie = oscard[entity];
        michal = undefined;
        verify = tangon.bind(michal)(golfie);
        option = verify.getHeaderCloseButton;
        golfie = function() {
            michal = _closure2_slot5;
            entity = undefined;
            entity = michal.bind(entity)();
            return entity;
        };
        golfie = option.bind(verify)(golfie);
        report['headerRight'] = golfie;
        entity = oscard[entity];
        michal = tangon.bind(michal)(entity);
        entity = michal.getHeaderBackButton;
        entity = entity.bind(michal)();
        report['headerLeft'] = entity;
        entity = {};
        michal = {};
        yankee = michal;
        offset = report;
        tangon = copyDataProperties(yankee, offset);
        oscard = function() { // Original name: headerLeft
            entity = null;
            return entity;
        };
        tangon = 'headerLeft';
        michal[tangon] = oscard;
        oscard = function() { // Original name: render
            tangon = _closure1_slot14;
            zuuluu = _closure1_slot18;
            michal = {};
            report = _closure2_slot0;
            michal['warningId'] = report;
            report = _closure2_slot1;
            michal['senderId'] = report;
            entity = _closure2_slot6;
            michal['trackAnalyticsEvent'] = entity;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        tangon = 'render';
        michal[tangon] = oscard;
        entity['INTRO'] = michal;
        michal = {};
        yankee = michal;
        offset = report;
        oscard = copyDataProperties(yankee, offset);
        oscard = function() { // Original name: render
            tangon = _closure1_slot14;
            zuuluu = _closure1_slot19;
            michal = {};
            report = _closure2_slot1;
            michal['senderId'] = report;
            report = _closure2_slot2;
            michal['channelId'] = report;
            report = _closure2_slot3;
            michal['isReported'] = report;
            report = _closure2_slot4;
            michal['setReported'] = report;
            entity = _closure2_slot6;
            michal['trackAnalyticsEvent'] = entity;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        michal[tangon] = oscard;
        entity['TAKE_ACTION'] = michal;
        michal = {};
        yankee = michal;
        offset = report;
        oscard = copyDataProperties(yankee, offset);
        oscard = function() { // Original name: render
            tangon = _closure1_slot14;
            zuuluu = _closure1_slot20;
            michal = undefined;
            entity = {};
            entity = tangon.bind(michal)(zuuluu, entity);
            return entity;
        };
        michal[tangon] = oscard;
        entity['SAFETY_TIPS'] = michal;
        michal = {};
        yankee = michal;
        offset = report;
        report = copyDataProperties(yankee, offset);
        zuuluu = function() { // Original name: render
            tangon = _closure1_slot14;
            zuuluu = _closure1_slot21;
            michal = {};
            entity = _closure2_slot6;
            michal['trackAnalyticsEvent'] = entity;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        michal[tangon] = zuuluu;
        entity['CRISIS_TEXT_LINE'] = michal;
        return entity;
    };
    var _closure1_slot17 = tangon;
    tangon = 26;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/self_mod/inappropriate_conversation/native/components/InappropriateConversationModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: InappropriateConversationModal
        michal = argFoo;
        foxtra = michal.channelId;
        var _closure2_slot0 = foxtra;
        romeon = michal.warningId;
        var _closure2_slot1 = romeon;
        sizing = michal.warningType;
        var _closure2_slot2 = sizing;
        yankee = michal.senderId;
        var _closure2_slot3 = yankee;
        zuuluu = _closure1_slot5;
        tangon = undefined;
        michal = false;
        oscard = zuuluu.bind(tangon)(michal);
        zuuluu = _closure1_slot3;
        michal = 2;
        zuuluu = zuuluu.bind(tangon)(oscard, michal);
        michal = 0;
        offset = zuuluu[michal];
        michal = 1;
        verify = zuuluu[michal];
        michal = _closure1_slot0;
        oscard = _closure1_slot2;
        zuuluu = 22;
        zuuluu = oscard[zuuluu];
        golfie = michal.bind(tangon)(zuuluu);
        zuuluu = golfie.useSafetyToolsButtonTooltipForChannel;
        golfie = zuuluu.bind(golfie)(foxtra);
        zuuluu = null;
        kiloes = zuuluu != golfie;
        var _closure2_slot4 = kiloes;
        backup = _closure1_slot4;
        option = backup.useMemo;
        golfie = new Array(5);
        golfie[0] = foxtra;
        golfie[1] = romeon;
        golfie[2] = sizing;
        golfie[3] = yankee;
        golfie[4] = kiloes;
        zuuluu = function() {
            entity = {};
            zuuluu = _closure2_slot0;
            entity['channelId'] = zuuluu;
            zuuluu = _closure2_slot3;
            entity['senderId'] = zuuluu;
            zuuluu = _closure2_slot1;
            entity['warningId'] = zuuluu;
            zuuluu = _closure2_slot2;
            entity['warningType'] = zuuluu;
            michal = _closure2_slot4;
            entity['isNudgeWarning'] = michal;
            return entity;
        };
        zuuluu = option.bind(backup)(zuuluu, golfie);
        var _closure2_slot5 = zuuluu;
        output = backup.useCallback;
        option = new Array(3);
        option[0] = foxtra;
        option[1] = romeon;
        option[2] = zuuluu;
        golfie = function() {
            tangon = _closure1_slot1;
            golfie = _closure1_slot2;
            entity = 23;
            zuuluu = golfie[entity];
            entity = undefined;
            report = tangon.bind(entity)(zuuluu);
            tangon = report.popWithKey;
            zuuluu = _closure1_slot12;
            zuuluu = tangon.bind(report)(zuuluu);
            oscard = _closure1_slot0;
            michal = 24;
            michal = golfie[michal];
            report = oscard.bind(entity)(michal);
            tangon = report.dismissChannelSafetyWarnings;
            zuuluu = _closure2_slot0;
            verify = _closure2_slot1;
            michal = new Array(1);
            michal[0] = verify;
            michal = tangon.bind(report)(zuuluu, michal);
            report = 15;
            michal = golfie[report];
            tangon = oscard.bind(entity)(michal);
            zuuluu = tangon.trackCtaEvent;
            michal = {};
            offset = _closure2_slot5;
            yankee = michal;
            option = copyDataProperties(yankee, offset);
            report = golfie[report];
            report = oscard.bind(entity)(report);
            report = report.CtaEventTypes;
            oscard = report.USER_TAKEOVER_MODAL_DISMISS;
            report = 'cta';
            michal[report] = oscard;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        option = output.bind(backup)(golfie, option);
        output = backup.useEffect;
        golfie = new Array(1);
        golfie[0] = zuuluu;
        zuuluu = function() {
            oscard = _closure1_slot0;
            golfie = _closure1_slot2;
            report = 15;
            michal = golfie[report];
            entity = undefined;
            tangon = oscard.bind(entity)(michal);
            zuuluu = tangon.trackNamedViewEvent;
            michal = {};
            verify = _closure2_slot5;
            offset = michal;
            option = copyDataProperties(offset, verify);
            report = golfie[report];
            report = oscard.bind(entity)(report);
            report = report.ViewNameTypes;
            oscard = report.SAFETY_TAKEOVER_MODAL;
            report = 'viewName';
            michal[report] = oscard;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        zuuluu = output.bind(backup)(zuuluu, golfie);
        golfie = backup.useCallback;
        zuuluu = new Array(5);
        zuuluu[0] = foxtra;
        zuuluu[1] = romeon;
        zuuluu[2] = yankee;
        zuuluu[3] = sizing;
        zuuluu[4] = kiloes;
        entity = function(argFoo) {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 15;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.trackCtaEvent;
            michal = {};
            oscard = _closure2_slot0;
            michal['channelId'] = oscard;
            oscard = _closure2_slot1;
            michal['warningId'] = oscard;
            oscard = _closure2_slot3;
            michal['senderId'] = oscard;
            oscard = _closure2_slot2;
            michal['warningType'] = oscard;
            oscard = argFoo;
            michal['cta'] = oscard;
            report = _closure2_slot4;
            michal['isNudgeWarning'] = report;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        golfie = golfie.bind(backup)(entity, zuuluu);
        zuuluu = _closure1_slot14;
        entity = 25;
        entity = oscard[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.Navigator;
        entity = {};
        oscard = _closure1_slot17;
        report = {};
        report['channelId'] = foxtra;
        report['warningId'] = romeon;
        report['senderId'] = yankee;
        report['isReported'] = offset;
        report['setReported'] = verify;
        report['handleDismiss'] = option;
        report['trackAnalyticsEvent'] = golfie;
        report = oscard.bind(tangon)(report);
        entity['screens'] = report;
        report = 'INTRO';
        entity['initialRouteName'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();