// app/modules/self_mod/ChannelSafetyWarningsActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    tangon = tangon.SafetyWarningTypes;
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Endpoints;
    var _closure1_slot4 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/self_mod/ChannelSafetyWarningsActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo, argBar) { // Original name: dismissChannelSafetyWarnings
        golfie = argFoo;
        report = argBar;
        michal = _closure1_slot1;
        oscard = _closure1_slot2;
        entity = 2;
        entity = oscard[entity];
        zuuluu = undefined;
        option = michal.bind(zuuluu)(entity);
        michal = option.dispatch;
        entity = {};
        verify = 'DISMISS_CHANNEL_SAFETY_WARNINGS';
        entity['type'] = verify;
        entity['channelId'] = golfie;
        entity['warningIds'] = report;
        entity = michal.bind(option)(entity);
        michal = _closure1_slot0;
        entity = 3;
        entity = oscard[entity];
        entity = michal.bind(zuuluu)(entity);
        zuuluu = entity.HTTP;
        michal = zuuluu.post;
        entity = {};
        oscard = _closure1_slot4;
        tangon = oscard.CHANNEL_SAFETY_WARNINGS_ACK;
        tangon = tangon.bind(oscard)(golfie);
        entity['url'] = tangon;
        tangon = {};
        tangon['warning_ids'] = report;
        entity['body'] = tangon;
        tangon = true;
        entity['oldFormErrors'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['dismissChannelSafetyWarnings'] = tangon;
    tangon = function(argFoo, argBar, argBaz) { // Original name: setChannelSafetyWarningFeedback
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'CHANNEL_SAFETY_WARNING_FEEDBACK';
        michal['type'] = report;
        report = argFoo;
        michal['channelId'] = report;
        report = argBar;
        michal['warningId'] = report;
        report = argBaz;
        michal['feedbackType'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setChannelSafetyWarningFeedback'] = tangon;
    tangon = function(argFoo) { // Original name: clearChannelSafetyWarnings
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'CLEAR_CHANNEL_SAFETY_WARNINGS';
        michal['type'] = report;
        report = argFoo;
        michal['channelId'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['clearChannelSafetyWarnings'] = tangon;
    tangon = function(argFoo) { // Original name: acknowledgeChannelSafetyWarningTooltip
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'ACKNOWLEDGE_CHANNEL_SAFETY_WARNING_TOOLTIP';
        michal['type'] = report;
        report = argFoo;
        michal['channelId'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['acknowledgeChannelSafetyWarningTooltip'] = tangon;
    tangon = function(argFoo) { // Original name: reportFalsePositive
        zuuluu = _closure1_slot0;
        michal = _closure1_slot2;
        entity = 3;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.post;
        entity = {};
        oscard = _closure1_slot4;
        report = oscard.SAFETY_WARNING_FALSE_POSITIVE;
        tangon = argFoo;
        tangon = report.bind(oscard)(tangon);
        entity['url'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['reportFalsePositive'] = tangon;
    michal = function(argFoo) { // Original name: markAsStrangerDanger
        zuuluu = _closure1_slot0;
        michal = _closure1_slot2;
        entity = 3;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.post;
        entity = {};
        golfie = _closure1_slot4;
        oscard = golfie.ADD_SAFETY_WARNING;
        tangon = argFoo;
        tangon = oscard.bind(golfie)(tangon);
        entity['url'] = tangon;
        tangon = {};
        report = _closure1_slot3;
        report = report.STRANGER_DANGER;
        tangon['safety_warning_type'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['markAsStrangerDanger'] = michal;
    return entity;
})();