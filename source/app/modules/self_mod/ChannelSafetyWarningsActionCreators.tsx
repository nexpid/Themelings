// app/modules/self_mod/ChannelSafetyWarningsActionCreators.tsx
export default (function(native1, native2, native3, native4, native5, native6, native7) {
    var5 = native2;
    var3 = native6;
    var6 = native7;
    var _closure1_slot0 = var5;
    var1 = native3;
    var _closure1_slot1 = var1;
    var _closure1_slot2 = var6;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var5.bind(var1)(var4);
    var4 = var4.SafetyWarningTypes;
    var _closure1_slot3 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.Endpoints;
    var _closure1_slot4 = var4;
    var4 = 4;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/self_mod/ChannelSafetyWarningsActionCreators.tsx';
    var4 = var5.bind(var6)(var4);
    var4 = function dismissChannelSafetyWarnings(arg1, arg2) {
        var7 = arg1;
        var5 = arg2;
        var2 = _closure1_slot1;
        var6 = _closure1_slot2;
        var1 = 2;
        var1 = var6[var1];
        var3 = undefined;
        var8 = var2.bind(var3)(var1);
        var2 = var8.dispatch;
        var1 = {};
        var9 = 'DISMISS_CHANNEL_SAFETY_WARNINGS';
        var1['type'] = var9;
        var1['channelId'] = var7;
        var1['warningIds'] = var5;
        var1 = var2.bind(var8)(var1);
        var2 = _closure1_slot0;
        var1 = 3;
        var1 = var6[var1];
        var1 = var2.bind(var3)(var1);
        var3 = var1.HTTP;
        var2 = var3.post;
        var1 = {};
        var6 = _closure1_slot4;
        var4 = var6.CHANNEL_SAFETY_WARNINGS_ACK;
        var4 = var4.bind(var6)(var7);
        var1['url'] = var4;
        var4 = {};
        var4['warning_ids'] = var5;
        var1['body'] = var4;
        var4 = true;
        var1['oldFormErrors'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['dismissChannelSafetyWarnings'] = var4;
    var4 = function setChannelSafetyWarningFeedback(arg1, arg2, arg3) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_SAFETY_WARNING_FEEDBACK';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var5 = arg2;
        var2['warningId'] = var5;
        var5 = arg3;
        var2['feedbackType'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['setChannelSafetyWarningFeedback'] = var4;
    var4 = function clearChannelSafetyWarnings(arg1) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CLEAR_CHANNEL_SAFETY_WARNINGS';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['clearChannelSafetyWarnings'] = var4;
    var4 = function acknowledgeChannelSafetyWarningTooltip(arg1) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'ACKNOWLEDGE_CHANNEL_SAFETY_WARNING_TOOLTIP';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['acknowledgeChannelSafetyWarningTooltip'] = var4;
    var4 = function reportFalsePositive(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot2;
        var1 = 3;
        var2 = var2[var1];
        var1 = undefined;
        var1 = var3.bind(var1)(var2);
        var3 = var1.HTTP;
        var2 = var3.post;
        var1 = {};
        var6 = _closure1_slot4;
        var5 = var6.SAFETY_WARNING_FALSE_POSITIVE;
        var4 = arg1;
        var4 = var5.bind(var6)(var4);
        var1['url'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['reportFalsePositive'] = var4;
    var2 = function markAsStrangerDanger(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot2;
        var1 = 3;
        var2 = var2[var1];
        var1 = undefined;
        var1 = var3.bind(var1)(var2);
        var3 = var1.HTTP;
        var2 = var3.post;
        var1 = {};
        var7 = _closure1_slot4;
        var6 = var7.ADD_SAFETY_WARNING;
        var4 = arg1;
        var4 = var6.bind(var7)(var4);
        var1['url'] = var4;
        var4 = {};
        var5 = _closure1_slot3;
        var5 = var5.STRANGER_DANGER;
        var4['safety_warning_type'] = var5;
        var1['body'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['markAsStrangerDanger'] = var2;
    return var1;
})();