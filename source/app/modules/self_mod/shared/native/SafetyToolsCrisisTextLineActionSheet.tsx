// app/modules/self_mod/shared/native/SafetyToolsCrisisTextLineActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.CRISIS_TEXT_LINE_SMS_URI;
    var _closure1_slot4 = golfie;
    tangon = tangon.CRISIS_TEXT_LINE_URL;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'display': 'flex', 'alignItems': 'center', 'gap': null, 'padding': null, 'paddingTop': 0};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['gap'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['padding'] = romeon;
    tangon['container'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': null, 'maxWidth': 300};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['marginBottom'] = offset;
    tangon['description'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/self_mod/shared/native/SafetyToolsCrisisTextLineActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SafetyToolsCrisisTextLineActionSheet
        entity = argFoo;
        golfie = entity.channelId;
        romeon = entity.recipientId;
        verify = entity.warningId;
        option = entity.warningType;
        oscard = entity.onClose;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot0 = entity;
        entity = _closure1_slot8;
        tangon = undefined;
        offset = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot1;
        sizing = _closure1_slot2;
        entity = 6;
        entity = sizing[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        foxtra = true;
        entity['hasHeaderBack'] = foxtra;
        entity['recipientId'] = romeon;
        entity['warningId'] = verify;
        entity['warningType'] = option;
        kiloes = _closure1_slot0;
        romeon = 7;
        option = sizing[romeon];
        option = kiloes.bind(tangon)(option);
        foxtra = option.intl;
        verify = foxtra.string;
        option = sizing[romeon];
        option = kiloes.bind(tangon)(option);
        option = option.t;
        option = option.NUMAsL;
        option = verify.bind(foxtra)(option);
        entity['headerTitle'] = option;
        entity['channelId'] = golfie;
        entity['onClose'] = oscard;
        golfie = _closure1_slot7;
        oscard = _closure1_slot3;
        report = {};
        option = offset.container;
        report['style'] = option;
        option = 8;
        option = sizing[option];
        option = kiloes.bind(tangon)(option);
        verify = option.Text;
        option = {'variant': 'text-md/medium', 'color': 'header-secondary'};
        offset = offset.description;
        option['style'] = offset;
        offset = sizing[romeon];
        offset = kiloes.bind(tangon)(offset);
        backup = offset.intl;
        foxtra = backup.string;
        offset = sizing[romeon];
        offset = kiloes.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.uicS5u;
        offset = foxtra.bind(backup)(offset);
        option['children'] = offset;
        verify = zuuluu.bind(tangon)(verify, option);
        option = new Array(3);
        option[0] = verify;
        verify = 9;
        offset = sizing[verify];
        offset = kiloes.bind(tangon)(offset);
        foxtra = offset.Button;
        offset = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        backup = sizing[romeon];
        backup = kiloes.bind(tangon)(backup);
        result = backup.intl;
        output = result.string;
        backup = sizing[romeon];
        backup = kiloes.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.lkUb4e;
        backup = output.bind(result)(backup);
        offset['text'] = backup;
        backup = function() { // Original name: onPress
            tangon = _closure1_slot1;
            report = _closure1_slot2;
            entity = 10;
            zuuluu = report[entity];
            entity = undefined;
            oscard = tangon.bind(entity)(zuuluu);
            tangon = oscard.openURL;
            zuuluu = _closure1_slot4;
            zuuluu = tangon.bind(oscard)(zuuluu);
            zuuluu = _closure2_slot0;
            tangon = _closure1_slot0;
            michal = 11;
            michal = report[michal];
            michal = tangon.bind(entity)(michal);
            michal = michal.CtaEventTypes;
            michal = michal.USER_SAFETY_TOOLS_CTL_SMS;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        offset['onPress'] = backup;
        offset = zuuluu.bind(tangon)(foxtra, offset);
        option[1] = offset;
        verify = sizing[verify];
        verify = kiloes.bind(tangon)(verify);
        offset = verify.Button;
        verify = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.ogLlv7;
        romeon = foxtra.bind(backup)(romeon);
        verify['text'] = romeon;
        yankee = function() { // Original name: onPress
            tangon = _closure1_slot1;
            report = _closure1_slot2;
            entity = 10;
            zuuluu = report[entity];
            entity = undefined;
            oscard = tangon.bind(entity)(zuuluu);
            tangon = oscard.openURL;
            zuuluu = _closure1_slot5;
            zuuluu = tangon.bind(oscard)(zuuluu);
            zuuluu = _closure2_slot0;
            tangon = _closure1_slot0;
            michal = 11;
            michal = report[michal];
            michal = tangon.bind(entity)(michal);
            michal = michal.CtaEventTypes;
            michal = michal.USER_SAFETY_TOOLS_CTL_WEB;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        verify['onPress'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();