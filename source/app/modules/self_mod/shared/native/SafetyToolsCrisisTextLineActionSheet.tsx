// app/modules/self_mod/shared/native/SafetyToolsCrisisTextLineActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Linking;
    var _closure1_slot3 = golf;
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.CRISIS_TEXT_LINE_SMS_URI;
    var _closure1_slot5 = golf;
    tango = tango.CRISIS_TEXT_LINE_URL;
    var _closure1_slot6 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'display': 'flex', 'alignItems': 'center', 'gap': null, 'padding': null, 'paddingTop': 0};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['gap'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['padding'] = romeo;
    tango['container'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': null, 'maxWidth': 300};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['marginBottom'] = offset;
    tango['description'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/self_mod/shared/native/SafetyToolsCrisisTextLineActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: SafetyToolsCrisisTextLineActionSheet
        entity = argFoo;
        golf = entity.channelId;
        romeo = entity.recipientId;
        verify = entity.warningId;
        options = entity.warningType;
        oscar = entity.onClose;
        entity = entity.trackAnalyticsEvent;
        var _closure2_slot0 = entity;
        entity = _closure1_slot9;
        tango = undefined;
        offset = entity.bind(tango)();
        zulu = _closure1_slot7;
        mike = _closure1_slot1;
        sizing = _closure1_slot2;
        entity = 6;
        entity = sizing[entity];
        mike = mike.bind(tango)(entity);
        entity = {};
        foxtrot = true;
        entity['hasHeaderBack'] = foxtrot;
        entity['recipientId'] = romeo;
        entity['warningId'] = verify;
        entity['warningType'] = options;
        kilo = _closure1_slot0;
        romeo = 7;
        options = sizing[romeo];
        options = kilo.bind(tango)(options);
        foxtrot = options.intl;
        verify = foxtrot.string;
        options = sizing[romeo];
        options = kilo.bind(tango)(options);
        options = options.t;
        options = options.NUMAsL;
        options = verify.bind(foxtrot)(options);
        entity['headerTitle'] = options;
        entity['channelId'] = golf;
        entity['onClose'] = oscar;
        golf = _closure1_slot8;
        oscar = _closure1_slot4;
        report = {};
        options = offset.container;
        report['style'] = options;
        options = 8;
        options = sizing[options];
        options = kilo.bind(tango)(options);
        verify = options.Text;
        options = {'variant': 'text-md/medium', 'color': 'header-secondary'};
        offset = offset.description;
        options['style'] = offset;
        offset = sizing[romeo];
        offset = kilo.bind(tango)(offset);
        backup = offset.intl;
        foxtrot = backup.string;
        offset = sizing[romeo];
        offset = kilo.bind(tango)(offset);
        offset = offset.t;
        offset = offset.uicS5u;
        offset = foxtrot.bind(backup)(offset);
        options['children'] = offset;
        verify = zulu.bind(tango)(verify, options);
        options = new Array(3);
        options[0] = verify;
        verify = 9;
        offset = sizing[verify];
        offset = kilo.bind(tango)(offset);
        foxtrot = offset.Button;
        offset = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        result = backup.intl;
        output = result.string;
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.lkUb4e;
        backup = output.bind(result)(backup);
        offset['text'] = backup;
        backup = function() { // Original name: onPress
            tango = _closure1_slot3;
            zulu = tango.openURL;
            mike = _closure1_slot5;
            mike = zulu.bind(tango)(mike);
            zulu = _closure2_slot0;
            tango = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 10;
            mike = mike[entity];
            entity = undefined;
            mike = tango.bind(entity)(mike);
            mike = mike.CtaEventTypes;
            mike = mike.USER_SAFETY_TOOLS_CTL_SMS;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        offset['onPress'] = backup;
        offset = zulu.bind(tango)(foxtrot, offset);
        options[1] = offset;
        verify = sizing[verify];
        verify = kilo.bind(tango)(verify);
        offset = verify.Button;
        verify = {'variant': 'secondary', 'size': 'lg', 'text': null, 'grow': true};
        foxtrot = sizing[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.string;
        romeo = sizing[romeo];
        romeo = kilo.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.ogLlv7;
        romeo = foxtrot.bind(backup)(romeo);
        verify['text'] = romeo;
        yankee = function() { // Original name: onPress
            tango = _closure1_slot3;
            zulu = tango.openURL;
            mike = _closure1_slot6;
            mike = zulu.bind(tango)(mike);
            zulu = _closure2_slot0;
            tango = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 10;
            mike = mike[entity];
            entity = undefined;
            mike = tango.bind(entity)(mike);
            mike = mike.CtaEventTypes;
            mike = mike.USER_SAFETY_TOOLS_CTL_WEB;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        verify['onPress'] = yankee;
        verify = zulu.bind(tango)(offset, verify);
        options[2] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();