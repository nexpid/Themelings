// app/modules/channel_list_v2/native/items/TextChannel.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.CHANNEL_MARGIN_VERTICAL;
    tangon = 8;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot10 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'position': 'relative', 'marginVertical': null, 'marginHorizontal': 8, 'borderRadius': null, 'flexGrow': 1};
    offset['marginVertical'] = yankee;
    yankee = 10;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.md;
    offset['borderRadius'] = foxtra;
    tangon['container'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_MOD_FAINT;
    offset['backgroundColor'] = foxtra;
    tangon['selected'] = offset;
    offset = {'position': 'absolute', 'top': 0, 'bottom': 0, 'left': 0, 'right': 0, 'borderWidth': 1};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BORDER_FAINT;
    offset['borderColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.md;
    offset['borderRadius'] = yankee;
    tangon['selectedBorder'] = offset;
    offset = {'padding': 8, 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['row'] = offset;
    offset = {'flexGrow': 1, 'paddingVertical': 6};
    tangon['rowWithSubtitle'] = offset;
    offset = {'flexDirection': 'column', 'flex': 1};
    tangon['channelLabel'] = offset;
    offset = {'textAlign': 'left', 'flex': 1};
    tangon['channelLabelText'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot12 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            source = zuuluu.channel;
            var _closure2_slot0 = source;
            echoed = zuuluu.muted;
            update = zuuluu.selected;
            michal = zuuluu.isRulesChannel;
            sierra = zuuluu.subtitle;
            zuuluu = _closure1_slot12;
            tangon = undefined;
            sequen = zuuluu.bind(tangon)();
            report = source.id;
            var _closure2_slot1 = report;
            zuuluu = source.guild_id;
            var _closure2_slot2 = zuuluu;
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            oscard = 15;
            oscard = option[oscard];
            offset = golfie.bind(tangon)(oscard);
            verify = offset.useStateFromStoresObject;
            oscard = _closure1_slot6;
            option = new Array(5);
            option[0] = oscard;
            oscard = _closure1_slot5;
            option[1] = oscard;
            oscard = _closure1_slot7;
            option[2] = oscard;
            oscard = _closure1_slot8;
            option[3] = oscard;
            oscard = _closure1_slot9;
            option[4] = oscard;
            golfie = new Array(2);
            golfie[0] = source;
            golfie[1] = report;
            oscard = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 16;
                michal = michal[entity];
                entity = undefined;
                golfie = zuuluu.bind(entity)(michal);
                oscard = golfie.getChannelRoleSubscriptionStatus;
                option = _closure2_slot1;
                yankee = _closure1_slot6;
                offset = _closure1_slot5;
                verify = _closure1_slot7;
                foxtra = golfie;
                romeon = option;
                entity = foxtra[oscard](romeon, yankee, offset, verify, option);
                zuuluu = entity.isSubscriptionGated;
                michal = entity.needSubscriptionToAccess;
                entity = {};
                golfie = _closure1_slot8;
                oscard = golfie.hasUnread;
                oscard = oscard.bind(golfie)(option);
                entity['hasUnread'] = oscard;
                oscard = golfie.getMentionCount;
                oscard = oscard.bind(golfie)(option);
                entity['mentionCount'] = oscard;
                oscard = _closure1_slot9;
                report = oscard.resolveUnreadSetting;
                tangon = _closure2_slot0;
                tangon = report.bind(oscard)(tangon);
                entity['resolvedUnreadSetting'] = tangon;
                entity['isSubscriptionGated'] = zuuluu;
                entity['needSubscriptionToAccess'] = michal;
                return entity;
            };
            oscard = verify.bind(offset)(option, oscard, golfie);
            romeon = oscard.hasUnread;
            yankee = oscard.mentionCount;
            result = oscard.isSubscriptionGated;
            output = oscard.needSubscriptionToAccess;
            cntext = oscard.resolvedUnreadSetting;
            golfie = _closure1_slot3;
            option = golfie.useCallback;
            oscard = new Array(2);
            oscard[0] = report;
            oscard[1] = zuuluu;
            zuuluu = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 17;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.preload;
                zuuluu = _closure2_slot2;
                michal = _closure2_slot1;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            vacuum = option.bind(golfie)(zuuluu, oscard);
            option = golfie.useCallback;
            oscard = new Array(1);
            oscard[0] = report;
            zuuluu = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 18;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.transitionToChannel;
                michal = _closure2_slot1;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            ctrled = option.bind(golfie)(zuuluu, oscard);
            oscard = golfie.useCallback;
            zuuluu = new Array(1);
            zuuluu[0] = report;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 19;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openChannelLongPressActionSheet;
                michal = _closure2_slot1;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            verify = oscard.bind(golfie)(entity, zuuluu);
            status = romeon;
            if(!status) { _fun00002_ip = 290; continue _fun00001 }
 287:
            status = !echoed;
 290:
            kiloes = _closure1_slot0;
            offset = _closure1_slot2;
            entity = 20;
            entity = offset[entity];
            oscard = kiloes.bind(tangon)(entity);
            zuuluu = oscard.getChannelMode;
            entity = {};
            entity['muted'] = echoed;
            entity['selected'] = update;
            entity['unread'] = status;
            entity['resolvedUnreadSetting'] = cntext;
            entity['mentionCount'] = yankee;
            golfie = false;
            entity['locked'] = golfie;
            entity['channel'] = source;
            equals = zuuluu.bind(oscard)(entity);
            entity = 21;
            entity = offset[entity];
            zuuluu = kiloes.bind(tangon)(entity);
            entity = zuuluu.useIsActivitiesInTextEnabled;
            sizing = entity.bind(zuuluu)(report);
            entity = {};
            entity['channel'] = source;
            entity['isRulesChannel'] = michal;
            oscard = entity.channel;
            entity = entity.isRulesChannel;
            if(entity) { _fun00002_ip = 479; continue _fun00001 }
 407:
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            entity = 13;
            michal = report[entity];
            backup = zuuluu.bind(tangon)(michal);
            option = backup.getChannelIcon;
            michal = {};
            michal['isRulesChannel'] = golfie;
            michal = option.bind(backup)(oscard, michal);
            entity = report[entity];
            report = zuuluu.bind(tangon)(entity);
            zuuluu = report.getChannelIconComponent;
            entity = {};
            entity['isRulesChannel'] = golfie;
            report = zuuluu.bind(report)(oscard, entity);
            oscard = michal;
            _fun00002_ip = 521; continue _fun00001;
 479:
            michal = _closure1_slot1;
            golfie = _closure1_slot2;
            entity = 11;
            entity = golfie[entity];
            oscard = michal.bind(tangon)(entity);
            zuuluu = _closure1_slot0;
            entity = 12;
            entity = golfie[entity];
            entity = zuuluu.bind(tangon)(entity);
            report = entity.BookCheckIcon;
 521:
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            papara = 14;
            entity = entity[papara];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.BaseChannelIcon;
            entity = {};
            entity['mode'] = equals;
            entity['source'] = oscard;
            entity['IconComponent'] = report;
            backup = michal.bind(zuuluu)(entity);
            golfie = _closure1_slot10;
            config = 22;
            entity = offset[config];
            entity = kiloes.bind(tangon)(entity);
            michal = entity.Text;
            entity = {'experimental_useNativeText': true, 'lineClamp': 1};
            option = true;
            zuuluu = sequen.channelLabelText;
            entity['style'] = zuuluu;
            zuuluu = offset[papara];
            report = kiloes.bind(tangon)(zuuluu);
            zuuluu = report.useChannelNameTextProps;
            variable36 = zuuluu.bind(report)(equals);
            variable37 = entity;
            zuuluu = copyDataProperties(variable37, variable36);
            zuuluu = source.name;
            target = 'children';
            entity[target] = zuuluu;
            record = golfie.bind(tangon)(michal, entity);
            zuuluu = _closure1_slot11;
            oscard = _closure1_slot1;
            entity = 23;
            entity = offset[entity];
            michal = oscard.bind(tangon)(entity);
            entity = {};
            report = 24;
            report = offset[report];
            oscard = oscard.bind(tangon)(report);
            report = {};
            report['unread'] = status;
            report['resolvedUnreadSetting'] = cntext;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = 25;
            oscard = offset[oscard];
            oscard = kiloes.bind(tangon)(oscard);
            golfie = oscard.AnimatedPressableHighlight;
            oscard = {};
            oscard['onPressIn'] = vacuum;
            oscard['onPress'] = ctrled;
            oscard['onLongPress'] = verify;
            ctrled = sequen.container;
            verify = new Array(2);
            verify[0] = ctrled;
            offset = offset[papara];
            offset = kiloes.bind(tangon)(offset);
            offset = offset.ChannelModes;
            offset = offset.SELECTED;
            offset = equals === offset;
            if(!offset) { _fun00002_ip = 798; continue _fun00001 }
 792:
            offset = sequen.selected;
 798:
            verify[1] = offset;
            oscard['style'] = verify;
            oscard['accessible'] = option;
            option = 'button';
            oscard['accessibilityRole'] = option;
            offset = _closure1_slot1;
            option = _closure1_slot2;
            verify = 26;
            verify = option[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            verify['channel'] = source;
            verify['unread'] = romeon;
            verify['mentionCount'] = yankee;
            verify = offset.bind(tangon)(verify);
            oscard['accessibilityLabel'] = verify;
            verify = {};
            verify['selected'] = update;
            oscard['accessibilityState'] = verify;
            verify = _closure1_slot0;
            option = option[papara];
            option = verify.bind(tangon)(option);
            option = option.ChannelModes;
            option = option.SELECTED;
            verify = equals === option;
            if(!verify) { _fun00002_ip = 934; continue _fun00001 }
 908:
            yankee = _closure1_slot10;
            offset = _closure1_slot4;
            option = {};
            romeon = sequen.selectedBorder;
            option['style'] = romeon;
            verify = yankee.bind(tangon)(offset, option);
 934:
            option = new Array(2);
            option[0] = verify;
            yankee = _closure1_slot11;
            offset = _closure1_slot4;
            verify = {};
            kiloes = sequen.row;
            romeon = new Array(2);
            romeon[0] = kiloes;
            kiloes = null;
            ctrled = kiloes != sierra;
            if(!ctrled) { _fun00002_ip = 981; continue _fun00001 }
 975:
            ctrled = sequen.rowWithSubtitle;
 981:
            romeon[1] = ctrled;
            verify['style'] = romeon;
            romeon = new Array(3);
            romeon[0] = backup;
            backup = record;
            if(!(kiloes != sierra)) { _fun00002_ip = 1152; continue _fun00001 }
 1007:
            vacuum = _closure1_slot11;
            ctrled = _closure1_slot4;
            kiloes = {};
            sequen = sequen.channelLabel;
            kiloes['style'] = sequen;
            sequen = new Array(2);
            sequen[0] = record;
            cntext = _closure1_slot10;
            status = _closure1_slot0;
            limora = _closure1_slot2;
            config = limora[config];
            config = status.bind(tangon)(config);
            record = config.Text;
            config = {'experimental_useNativeText': true, 'lineClamp': 1};
            papara = limora[papara];
            whisks = status.bind(tangon)(papara);
            papara = whisks.getChannelSubtitleTextProps;
            variable36 = papara.bind(whisks)(equals);
            variable37 = config;
            papara = copyDataProperties(variable37, variable36);
            papara = 27;
            papara = limora[papara];
            status = status.bind(tangon)(papara);
            papara = status.getChannelSubtitleData;
            papara = papara.bind(status)(sierra);
            papara = papara.subtitle;
            config[target] = papara;
            config = cntext.bind(tangon)(record, config);
            sequen[1] = config;
            kiloes['children'] = sequen;
            backup = vacuum.bind(tangon)(ctrled, kiloes);
 1152:
            romeon[1] = backup;
            kiloes = _closure1_slot10;
            backup = _closure1_slot1;
            ctrled = _closure1_slot2;
            foxtra = 28;
            foxtra = ctrled[foxtra];
            backup = backup.bind(tangon)(foxtra);
            foxtra = {};
            foxtra['channel'] = source;
            foxtra['isChannelSelected'] = update;
            foxtra['muted'] = echoed;
            foxtra['isSubscriptionGated'] = result;
            foxtra['needSubscriptionToAccess'] = output;
            foxtra['enableActivities'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[2] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 29;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/channel_list_v2/native/items/TextChannel.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();