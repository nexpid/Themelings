// app/modules/channel_list_v2/native/items/TextChannel.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot8 = tango;
    tango = 6;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot9 = tango;
    tango = 7;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    yankee = tango.CHANNEL_MARGIN_VERTICAL;
    tango = 8;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot10 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot11 = tango;
    tango = 9;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'position': 'relative', 'marginVertical': null, 'marginHorizontal': 8, 'borderRadius': null, 'flexGrow': 1};
    offset['marginVertical'] = yankee;
    yankee = 10;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.md;
    offset['borderRadius'] = foxtrot;
    tango['container'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_MOD_FAINT;
    offset['backgroundColor'] = foxtrot;
    tango['selected'] = offset;
    offset = {'position': 'absolute', 'top': 0, 'bottom': 0, 'left': 0, 'right': 0, 'borderWidth': 1};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BORDER_FAINT;
    offset['borderColor'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.md;
    offset['borderRadius'] = yankee;
    tango['selectedBorder'] = offset;
    offset = {'padding': 8, 'flexDirection': 'row', 'alignItems': 'center'};
    tango['row'] = offset;
    offset = {'flexGrow': 1, 'paddingVertical': 6};
    tango['rowWithSubtitle'] = offset;
    offset = {'flexDirection': 'column', 'flex': 1};
    tango['channelLabel'] = offset;
    offset = {'textAlign': 'left', 'flex': 1};
    tango['channelLabelText'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot12 = tango;
    tango = golf.memo;
    mike = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zulu = argFoo;
            source = zulu.channel;
            var _closure2_slot0 = source;
            echo = zulu.muted;
            update = zulu.selected;
            mike = zulu.isRulesChannel;
            sierra = zulu.subtitle;
            zulu = _closure1_slot12;
            tango = undefined;
            sequence = zulu.bind(tango)();
            report = source.id;
            var _closure2_slot1 = report;
            zulu = source.guild_id;
            var _closure2_slot2 = zulu;
            golf = _closure1_slot0;
            options = _closure1_slot2;
            oscar = 15;
            oscar = options[oscar];
            offset = golf.bind(tango)(oscar);
            verify = offset.useStateFromStoresObject;
            oscar = _closure1_slot6;
            options = new Array(5);
            options[0] = oscar;
            oscar = _closure1_slot5;
            options[1] = oscar;
            oscar = _closure1_slot7;
            options[2] = oscar;
            oscar = _closure1_slot8;
            options[3] = oscar;
            oscar = _closure1_slot9;
            options[4] = oscar;
            golf = new Array(2);
            golf[0] = source;
            golf[1] = report;
            oscar = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 16;
                mike = mike[entity];
                entity = undefined;
                golf = zulu.bind(entity)(mike);
                oscar = golf.getChannelRoleSubscriptionStatus;
                options = _closure2_slot1;
                yankee = _closure1_slot6;
                offset = _closure1_slot5;
                verify = _closure1_slot7;
                foxtrot = golf;
                romeo = options;
                entity = foxtrot[oscar](romeo, yankee, offset, verify, options);
                zulu = entity.isSubscriptionGated;
                mike = entity.needSubscriptionToAccess;
                entity = {};
                golf = _closure1_slot8;
                oscar = golf.hasUnread;
                oscar = oscar.bind(golf)(options);
                entity['hasUnread'] = oscar;
                oscar = golf.getMentionCount;
                oscar = oscar.bind(golf)(options);
                entity['mentionCount'] = oscar;
                oscar = _closure1_slot9;
                report = oscar.resolveUnreadSetting;
                tango = _closure2_slot0;
                tango = report.bind(oscar)(tango);
                entity['resolvedUnreadSetting'] = tango;
                entity['isSubscriptionGated'] = zulu;
                entity['needSubscriptionToAccess'] = mike;
                return entity;
            };
            oscar = verify.bind(offset)(options, oscar, golf);
            romeo = oscar.hasUnread;
            yankee = oscar.mentionCount;
            result = oscar.isSubscriptionGated;
            output = oscar.needSubscriptionToAccess;
            context = oscar.resolvedUnreadSetting;
            golf = _closure1_slot3;
            options = golf.useCallback;
            oscar = new Array(2);
            oscar[0] = report;
            oscar[1] = zulu;
            zulu = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 17;
                mike = mike[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.preload;
                zulu = _closure2_slot2;
                mike = _closure2_slot1;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            vacuum = options.bind(golf)(zulu, oscar);
            options = golf.useCallback;
            oscar = new Array(1);
            oscar[0] = report;
            zulu = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 18;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.transitionToChannel;
                mike = _closure2_slot1;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            control = options.bind(golf)(zulu, oscar);
            oscar = golf.useCallback;
            zulu = new Array(1);
            zulu[0] = report;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 19;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.openChannelLongPressActionSheet;
                mike = _closure2_slot1;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            verify = oscar.bind(golf)(entity, zulu);
            status = romeo;
            if(!status) { _fun00002_ip = 290; continue _fun00001 }
 287:
            status = !echo;
 290:
            kilo = _closure1_slot0;
            offset = _closure1_slot2;
            entity = 20;
            entity = offset[entity];
            oscar = kilo.bind(tango)(entity);
            zulu = oscar.getChannelMode;
            entity = {};
            entity['muted'] = echo;
            entity['selected'] = update;
            entity['unread'] = status;
            entity['resolvedUnreadSetting'] = context;
            entity['mentionCount'] = yankee;
            golf = false;
            entity['locked'] = golf;
            entity['channel'] = source;
            equality = zulu.bind(oscar)(entity);
            entity = 21;
            entity = offset[entity];
            zulu = kilo.bind(tango)(entity);
            entity = zulu.useIsActivitiesInTextEnabled;
            sizing = entity.bind(zulu)(report);
            entity = {};
            entity['channel'] = source;
            entity['isRulesChannel'] = mike;
            oscar = entity.channel;
            entity = entity.isRulesChannel;
            if(entity) { _fun00002_ip = 479; continue _fun00001 }
 407:
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            entity = 13;
            mike = report[entity];
            backup = zulu.bind(tango)(mike);
            options = backup.getChannelIcon;
            mike = {};
            mike['isRulesChannel'] = golf;
            mike = options.bind(backup)(oscar, mike);
            entity = report[entity];
            report = zulu.bind(tango)(entity);
            zulu = report.getChannelIconComponent;
            entity = {};
            entity['isRulesChannel'] = golf;
            report = zulu.bind(report)(oscar, entity);
            oscar = mike;
            _fun00002_ip = 521; continue _fun00001;
 479:
            mike = _closure1_slot1;
            golf = _closure1_slot2;
            entity = 11;
            entity = golf[entity];
            oscar = mike.bind(tango)(entity);
            zulu = _closure1_slot0;
            entity = 12;
            entity = golf[entity];
            entity = zulu.bind(tango)(entity);
            report = entity.BookCheckIcon;
 521:
            mike = _closure1_slot0;
            entity = _closure1_slot2;
            papa = 14;
            entity = entity[papa];
            zulu = mike.bind(tango)(entity);
            mike = zulu.BaseChannelIcon;
            entity = {};
            entity['mode'] = equality;
            entity['source'] = oscar;
            entity['IconComponent'] = report;
            backup = mike.bind(zulu)(entity);
            golf = _closure1_slot10;
            config = 22;
            entity = offset[config];
            entity = kilo.bind(tango)(entity);
            mike = entity.Text;
            entity = {'experimental_useNativeText': true, 'lineClamp': 1};
            options = true;
            zulu = sequence.channelLabelText;
            entity['style'] = zulu;
            zulu = offset[papa];
            report = kilo.bind(tango)(zulu);
            zulu = report.useChannelNameTextProps;
            variable36 = zulu.bind(report)(equality);
            variable37 = entity;
            zulu = copyDataProperties(variable37, variable36);
            zulu = source.name;
            target = 'children';
            entity[target] = zulu;
            record = golf.bind(tango)(mike, entity);
            zulu = _closure1_slot11;
            oscar = _closure1_slot1;
            entity = 23;
            entity = offset[entity];
            mike = oscar.bind(tango)(entity);
            entity = {};
            report = 24;
            report = offset[report];
            oscar = oscar.bind(tango)(report);
            report = {};
            report['unread'] = status;
            report['resolvedUnreadSetting'] = context;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = 25;
            oscar = offset[oscar];
            oscar = kilo.bind(tango)(oscar);
            golf = oscar.AnimatedPressableHighlight;
            oscar = {};
            oscar['onPressIn'] = vacuum;
            oscar['onPress'] = control;
            oscar['onLongPress'] = verify;
            control = sequence.container;
            verify = new Array(2);
            verify[0] = control;
            offset = offset[papa];
            offset = kilo.bind(tango)(offset);
            offset = offset.ChannelModes;
            offset = offset.SELECTED;
            offset = equality === offset;
            if(!offset) { _fun00002_ip = 802; continue _fun00001 }
 796:
            offset = sequence.selected;
 802:
            verify[1] = offset;
            oscar['style'] = verify;
            oscar['accessible'] = options;
            options = 'button';
            oscar['accessibilityRole'] = options;
            offset = _closure1_slot1;
            options = _closure1_slot2;
            verify = 26;
            verify = options[verify];
            offset = offset.bind(tango)(verify);
            verify = {};
            verify['channel'] = source;
            verify['unread'] = romeo;
            verify['mentionCount'] = yankee;
            verify = offset.bind(tango)(verify);
            oscar['accessibilityLabel'] = verify;
            verify = {};
            verify['selected'] = update;
            oscar['accessibilityState'] = verify;
            verify = _closure1_slot0;
            options = options[papa];
            options = verify.bind(tango)(options);
            options = options.ChannelModes;
            options = options.SELECTED;
            verify = equality === options;
            if(!verify) { _fun00002_ip = 938; continue _fun00001 }
 912:
            yankee = _closure1_slot10;
            offset = _closure1_slot4;
            options = {};
            romeo = sequence.selectedBorder;
            options['style'] = romeo;
            verify = yankee.bind(tango)(offset, options);
 938:
            options = new Array(2);
            options[0] = verify;
            yankee = _closure1_slot11;
            offset = _closure1_slot4;
            verify = {};
            kilo = sequence.row;
            romeo = new Array(2);
            romeo[0] = kilo;
            kilo = null;
            control = kilo != sierra;
            if(!control) { _fun00002_ip = 985; continue _fun00001 }
 979:
            control = sequence.rowWithSubtitle;
 985:
            romeo[1] = control;
            verify['style'] = romeo;
            romeo = new Array(3);
            romeo[0] = backup;
            backup = record;
            if(!(kilo != sierra)) { _fun00002_ip = 1160; continue _fun00001 }
 1011:
            vacuum = _closure1_slot11;
            control = _closure1_slot4;
            kilo = {};
            sequence = sequence.channelLabel;
            kilo['style'] = sequence;
            sequence = new Array(2);
            sequence[0] = record;
            context = _closure1_slot10;
            status = _closure1_slot0;
            lima = _closure1_slot2;
            config = lima[config];
            config = status.bind(tango)(config);
            record = config.Text;
            config = {'experimental_useNativeText': true, 'lineClamp': 1};
            papa = lima[papa];
            whiskey = status.bind(tango)(papa);
            papa = whiskey.getChannelSubtitleTextProps;
            variable36 = papa.bind(whiskey)(equality);
            variable37 = config;
            papa = copyDataProperties(variable37, variable36);
            papa = 27;
            papa = lima[papa];
            status = status.bind(tango)(papa);
            papa = status.getChannelSubtitleData;
            papa = papa.bind(status)(sierra);
            papa = papa.subtitle;
            config[target] = papa;
            config = context.bind(tango)(record, config);
            sequence[1] = config;
            kilo['children'] = sequence;
            backup = vacuum.bind(tango)(control, kilo);
 1160:
            romeo[1] = backup;
            kilo = _closure1_slot10;
            backup = _closure1_slot1;
            control = _closure1_slot2;
            foxtrot = 28;
            foxtrot = control[foxtrot];
            backup = backup.bind(tango)(foxtrot);
            foxtrot = {};
            foxtrot['channel'] = source;
            foxtrot['isChannelSelected'] = update;
            foxtrot['muted'] = echo;
            foxtrot['isSubscriptionGated'] = result;
            foxtrot['needSubscriptionToAccess'] = output;
            foxtrot['enableActivities'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[2] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[1] = verify;
            oscar['children'] = options;
            oscar = zulu.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 29;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/channel_list_v2/native/items/TextChannel.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();