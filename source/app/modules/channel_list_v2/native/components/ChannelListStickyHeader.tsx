// app/modules/channel_list_v2/native/components/ChannelListStickyHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    foxtrot = 0;
    golf = oscar[foxtrot];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    romeo = 1;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    options = tango.Pressable;
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    golf = yankee.bind(entity)(tango);
    tango = golf.createAnimatedComponent;
    tango = tango.bind(golf)(options);
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flexShrink': 0, 'flexGrow': 0};
    tango['chevron'] = verify;
    verify = {};
    offset = 5;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['gap'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingTop'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['paddingBottom'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BORDER_SUBTLE;
    verify['borderBottomColor'] = backup;
    verify['borderBottomWidth'] = romeo;
    verify['zIndex'] = romeo;
    tango['container'] = verify;
    verify = {};
    verify['margin'] = foxtrot;
    tango['guildBadge'] = verify;
    verify = {};
    verify['flexShrink'] = romeo;
    tango['flex'] = verify;
    verify = {'alignItems': 'center', 'flexDirection': 'row'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_4;
    verify['gap'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['paddingHorizontal'] = romeo;
    tango['header'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['paddingHorizontal'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    verify['gap'] = romeo;
    tango['subheader'] = verify;
    verify = {'width': 4, 'height': 4};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BG_MOD_STRONG;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.round;
    verify['borderRadius'] = offset;
    tango['ellipse'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/channel_list_v2/native/components/ChannelListStickyHeader.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ChannelListStickyHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            offset = mike.guild;
            var _closure2_slot0 = offset;
            options = mike.showExtraButtons;
            tango = undefined;
            if(!(options === tango)) { _fun00002_ip = 28; continue _fun00001 }
 26:
            options = true;
 28:
            mike = _closure1_slot8;
            source = mike.bind(tango)();
            report = _closure1_slot3;
            zulu = report.useCallback;
            mike = new Array(1);
            mike[0] = offset;
            entity = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 6;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = _closure2_slot0;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            romeo = zulu.bind(report)(entity, mike);
            sizing = _closure1_slot1;
            result = _closure1_slot2;
            entity = 7;
            entity = result[entity];
            entity = sizing.bind(tango)(entity);
            papa = entity.bind(tango)(offset);
            foxtrot = _closure1_slot0;
            entity = 8;
            entity = result[entity];
            zulu = foxtrot.bind(tango)(entity);
            mike = zulu.useIOSPressEffects;
            entity = 4;
            entity = mike.bind(zulu)(entity);
            yankee = entity.onPressIn;
            oscar = entity.onPressOut;
            backup = entity.pressableStyles;
            zulu = _closure1_slot6;
            mike = _closure1_slot4;
            entity = {};
            report = source.container;
            entity['style'] = report;
            verify = _closure1_slot7;
            report = {};
            report['style'] = backup;
            report['onPress'] = romeo;
            report['onPressIn'] = yankee;
            report['onPressOut'] = oscar;
            oscar = {};
            yankee = source.header;
            oscar['style'] = yankee;
            backup = _closure1_slot5;
            output = 9;
            yankee = result[output];
            yankee = foxtrot.bind(tango)(yankee);
            romeo = yankee.Text;
            yankee = {'experimental_useNativeText': true, 'style': null, 'color': 'header-primary', 'variant': 'redesign/heading-18/bold', 'lineClamp': 1};
            kilo = source.flex;
            yankee['style'] = kilo;
            kilo = offset.name;
            yankee['children'] = kilo;
            romeo = backup.bind(tango)(romeo, yankee);
            yankee = new Array(3);
            yankee[0] = romeo;
            romeo = 10;
            romeo = result[romeo];
            kilo = sizing.bind(tango)(romeo);
            romeo = {};
            romeo['guild'] = offset;
            echo = 11;
            echo = result[echo];
            echo = sizing.bind(tango)(echo);
            echo = echo.Sizes;
            echo = echo.REFRESH_SMALL_16;
            romeo['size'] = echo;
            echo = source.guildBadge;
            romeo['style'] = echo;
            romeo = backup.bind(tango)(kilo, romeo);
            yankee[1] = romeo;
            romeo = 12;
            romeo = result[romeo];
            romeo = foxtrot.bind(tango)(romeo);
            foxtrot = romeo.ChevronSmallRightIcon;
            romeo = {};
            kilo = 'xxs';
            romeo['size'] = kilo;
            kilo = 5;
            kilo = result[kilo];
            kilo = sizing.bind(tango)(kilo);
            kilo = kilo.colors;
            kilo = kilo.HEADER_SECONDARY;
            romeo['color'] = kilo;
            kilo = source.chevron;
            romeo['style'] = kilo;
            romeo = backup.bind(tango)(foxtrot, romeo);
            yankee[2] = romeo;
            oscar['children'] = yankee;
            oscar = zulu.bind(tango)(mike, oscar);
            yankee = new Array(2);
            yankee[0] = oscar;
            oscar = null;
            foxtrot = oscar != papa;
            romeo = null;
            if(!foxtrot) { _fun00002_ip = 702; continue _fun00001 }
 438:
            foxtrot = 0;
            foxtrot = papa > foxtrot;
            romeo = null;
            if(!foxtrot) { _fun00002_ip = 702; continue _fun00001 }
 452:
            kilo = _closure1_slot6;
            backup = _closure1_slot4;
            foxtrot = {};
            sizing = source.subheader;
            foxtrot['style'] = sizing;
            echo = _closure1_slot5;
            vacuum = _closure1_slot0;
            sequence = _closure1_slot2;
            sizing = sequence[output];
            sizing = vacuum.bind(tango)(sizing);
            result = sizing.Text;
            sizing = {'experimental_useNativeText': true, 'color': 'text-muted', 'variant': 'text-xs/medium', 'lineClamp': 1};
            update = 13;
            control = sequence[update];
            control = vacuum.bind(tango)(control);
            context = control.intl;
            record = context.format;
            control = sequence[update];
            control = vacuum.bind(tango)(control);
            control = control.t;
            config = control.zRl6XV;
            control = {};
            control['count'] = papa;
            control = record.bind(context)(config, control);
            sizing['children'] = control;
            result = echo.bind(tango)(result, sizing);
            sizing = new Array(3);
            sizing[0] = result;
            result = {};
            source = source.ellipse;
            result['style'] = source;
            result = echo.bind(tango)(backup, result);
            sizing[1] = result;
            output = sequence[output];
            output = vacuum.bind(tango)(output);
            result = output.Text;
            output = {'experimental_useNativeText': true, 'color': 'text-muted', 'variant': 'text-xs/medium', 'lineClamp': 1};
            source = sequence[update];
            source = vacuum.bind(tango)(source);
            control = source.intl;
            source = control.string;
            update = sequence[update];
            update = vacuum.bind(tango)(update);
            update = update.t;
            update = update.1g9A/f;
            update = source.bind(control)(update);
            output['children'] = update;
            output = echo.bind(tango)(result, output);
            sizing[2] = output;
            foxtrot['children'] = sizing;
            romeo = kilo.bind(tango)(backup, foxtrot);
 702:
            yankee[1] = romeo;
            report['children'] = yankee;
            verify = zulu.bind(tango)(verify, report);
            report = new Array(2);
            report[0] = verify;
            oscar = null;
            if(!options) { _fun00002_ip = 775; continue _fun00001 }
 729:
            verify = _closure1_slot5;
            options = _closure1_slot1;
            yankee = _closure1_slot2;
            golf = 14;
            golf = yankee[golf];
            options = options.bind(tango)(golf);
            golf = {'guild': null, 'useButtonComponent': true, 'useEventsButton': true};
            golf['guild'] = offset;
            oscar = verify.bind(tango)(options, golf);
 775:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();