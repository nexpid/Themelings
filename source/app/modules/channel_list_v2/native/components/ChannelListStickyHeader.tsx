// app/modules/channel_list_v2/native/components/ChannelListStickyHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    foxtra = 0;
    golfie = oscard[foxtra];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    option = tangon.Pressable;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    golfie = yankee.bind(entity)(tangon);
    tangon = golfie.createAnimatedComponent;
    tangon = tangon.bind(golfie)(option);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flexShrink': 0, 'flexGrow': 0};
    tangon['chevron'] = verify;
    verify = {};
    offset = 5;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['gap'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingTop'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['paddingBottom'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BORDER_SUBTLE;
    verify['borderBottomColor'] = backup;
    verify['borderBottomWidth'] = romeon;
    verify['zIndex'] = romeon;
    tangon['container'] = verify;
    verify = {};
    verify['margin'] = foxtra;
    tangon['guildBadge'] = verify;
    verify = {};
    verify['flexShrink'] = romeon;
    tangon['flex'] = verify;
    verify = {'alignItems': 'center', 'flexDirection': 'row'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_4;
    verify['gap'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['paddingHorizontal'] = romeon;
    tangon['header'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['paddingHorizontal'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    verify['gap'] = romeon;
    tangon['subheader'] = verify;
    verify = {'width': 4, 'height': 4};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_MOD_STRONG;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.round;
    verify['borderRadius'] = offset;
    tangon['ellipse'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/channel_list_v2/native/components/ChannelListStickyHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ChannelListStickyHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            offset = michal.guild;
            var _closure2_slot0 = offset;
            option = michal.showExtraButtons;
            tangon = undefined;
            if(!(option === tangon)) { _fun00002_ip = 28; continue _fun00001 }
 26:
            option = true;
 28:
            michal = _closure1_slot8;
            source = michal.bind(tangon)();
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(1);
            michal[0] = offset;
            entity = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 6;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = _closure2_slot0;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            romeon = zuuluu.bind(report)(entity, michal);
            sizing = _closure1_slot1;
            result = _closure1_slot2;
            entity = 7;
            entity = result[entity];
            entity = sizing.bind(tangon)(entity);
            papara = entity.bind(tangon)(offset);
            foxtra = _closure1_slot0;
            entity = 8;
            entity = result[entity];
            zuuluu = foxtra.bind(tangon)(entity);
            michal = zuuluu.useIOSPressEffects;
            entity = 4;
            entity = michal.bind(zuuluu)(entity);
            yankee = entity.onPressIn;
            oscard = entity.onPressOut;
            backup = entity.pressableStyles;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot4;
            entity = {};
            report = source.container;
            entity['style'] = report;
            verify = _closure1_slot7;
            report = {};
            report['style'] = backup;
            report['onPress'] = romeon;
            report['onPressIn'] = yankee;
            report['onPressOut'] = oscard;
            oscard = {};
            yankee = source.header;
            oscard['style'] = yankee;
            backup = _closure1_slot5;
            output = 9;
            yankee = result[output];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {'experimental_useNativeText': true, 'style': null, 'color': 'header-primary', 'variant': 'redesign/heading-18/bold', 'lineClamp': 1};
            kiloes = source.flex;
            yankee['style'] = kiloes;
            kiloes = offset.name;
            yankee['children'] = kiloes;
            romeon = backup.bind(tangon)(romeon, yankee);
            yankee = new Array(3);
            yankee[0] = romeon;
            romeon = 10;
            romeon = result[romeon];
            kiloes = sizing.bind(tangon)(romeon);
            romeon = {};
            romeon['guild'] = offset;
            echoed = 11;
            echoed = result[echoed];
            echoed = sizing.bind(tangon)(echoed);
            echoed = echoed.Sizes;
            echoed = echoed.REFRESH_SMALL_16;
            romeon['size'] = echoed;
            echoed = source.guildBadge;
            romeon['style'] = echoed;
            romeon = backup.bind(tangon)(kiloes, romeon);
            yankee[1] = romeon;
            romeon = 12;
            romeon = result[romeon];
            romeon = foxtra.bind(tangon)(romeon);
            foxtra = romeon.ChevronSmallRightIcon;
            romeon = {};
            kiloes = 'xxs';
            romeon['size'] = kiloes;
            kiloes = 5;
            kiloes = result[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.colors;
            kiloes = kiloes.HEADER_SECONDARY;
            romeon['color'] = kiloes;
            kiloes = source.chevron;
            romeon['style'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            yankee[2] = romeon;
            oscard['children'] = yankee;
            oscard = zuuluu.bind(tangon)(michal, oscard);
            yankee = new Array(2);
            yankee[0] = oscard;
            oscard = null;
            foxtra = oscard != papara;
            romeon = null;
            if(!foxtra) { _fun00002_ip = 702; continue _fun00001 }
 438:
            foxtra = 0;
            foxtra = papara > foxtra;
            romeon = null;
            if(!foxtra) { _fun00002_ip = 702; continue _fun00001 }
 452:
            kiloes = _closure1_slot6;
            backup = _closure1_slot4;
            foxtra = {};
            sizing = source.subheader;
            foxtra['style'] = sizing;
            echoed = _closure1_slot5;
            vacuum = _closure1_slot0;
            sequen = _closure1_slot2;
            sizing = sequen[output];
            sizing = vacuum.bind(tangon)(sizing);
            result = sizing.Text;
            sizing = {'experimental_useNativeText': true, 'color': 'text-muted', 'variant': 'text-xs/medium', 'lineClamp': 1};
            update = 13;
            ctrled = sequen[update];
            ctrled = vacuum.bind(tangon)(ctrled);
            cntext = ctrled.intl;
            record = cntext.format;
            ctrled = sequen[update];
            ctrled = vacuum.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            config = ctrled.zRl6XV;
            ctrled = {};
            ctrled['count'] = papara;
            ctrled = record.bind(cntext)(config, ctrled);
            sizing['children'] = ctrled;
            result = echoed.bind(tangon)(result, sizing);
            sizing = new Array(3);
            sizing[0] = result;
            result = {};
            source = source.ellipse;
            result['style'] = source;
            result = echoed.bind(tangon)(backup, result);
            sizing[1] = result;
            output = sequen[output];
            output = vacuum.bind(tangon)(output);
            result = output.Text;
            output = {'experimental_useNativeText': true, 'color': 'text-muted', 'variant': 'text-xs/medium', 'lineClamp': 1};
            source = sequen[update];
            source = vacuum.bind(tangon)(source);
            ctrled = source.intl;
            source = ctrled.string;
            update = sequen[update];
            update = vacuum.bind(tangon)(update);
            update = update.t;
            update = update.1g9A/f;
            update = source.bind(ctrled)(update);
            output['children'] = update;
            output = echoed.bind(tangon)(result, output);
            sizing[2] = output;
            foxtra['children'] = sizing;
            romeon = kiloes.bind(tangon)(backup, foxtra);
 702:
            yankee[1] = romeon;
            report['children'] = yankee;
            verify = zuuluu.bind(tangon)(verify, report);
            report = new Array(2);
            report[0] = verify;
            oscard = null;
            if(!option) { _fun00002_ip = 775; continue _fun00001 }
 729:
            verify = _closure1_slot5;
            option = _closure1_slot1;
            yankee = _closure1_slot2;
            golfie = 14;
            golfie = yankee[golfie];
            option = option.bind(tangon)(golfie);
            golfie = {'guild': null, 'useButtonComponent': true, 'useEventsButton': true};
            golfie['guild'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 775:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();