// app/modules/clan/native/components/ClanJoinSuccessActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.fetchClanInfo;
    var _closure1_slot4 = golfie;
    tangon = tangon.useClanInfo;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ClanTagBadgeSize;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ACTION_SHEET_BACKGROUND_COLOR;
    var _closure1_slot7 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 'center';
    verify = {'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center', 'paddingHorizontal': 24};
    tangon['container'] = verify;
    verify = {'paddingVertical': 8, 'paddingHorizontal': 12, 'marginTop': 40, 'marginBottom': 32, 'backgroundColor': null, 'borderColor': null, 'borderWidth': 1};
    yankee = 6;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_PRIMARY;
    verify['backgroundColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    verify['borderColor'] = yankee;
    tangon['tag'] = verify;
    verify = {};
    yankee = 36;
    verify['lineHeight'] = yankee;
    tangon['tagText'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['headerText'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 16, 'marginBottom': 32};
    tangon['subheaderText'] = verify;
    verify = {'position': 'absolute', 'top': 0, 'left': 0, 'right': 0, 'bottom': 0};
    tangon['backgroundGradient'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = function(argFoo) { // Original name: RadialGradientBackground
        entity = argFoo;
        kiloes = entity.startColor;
        sizing = entity.endColor;
        entity = _closure1_slot10;
        tangon = undefined;
        option = entity.bind(tangon)();
        zuuluu = _closure1_slot9;
        golfie = _closure1_slot0;
        verify = _closure1_slot2;
        oscard = 7;
        entity = verify[oscard];
        entity = golfie.bind(tangon)(entity);
        michal = entity.Svg;
        entity = {'height': '100%', 'width': '100%'};
        option = option.backgroundGradient;
        entity['style'] = option;
        option = _closure1_slot8;
        report = verify[oscard];
        report = golfie.bind(tangon)(report);
        offset = report.Defs;
        report = {};
        yankee = verify[oscard];
        yankee = golfie.bind(tangon)(yankee);
        romeon = yankee.RadialGradient;
        yankee = {'id': 'grad', 'cx': '50%', 'cy': '0%', 'r': '70%', 'fx': '50%', 'fy': '0%'};
        foxtra = verify[oscard];
        foxtra = golfie.bind(tangon)(foxtra);
        backup = foxtra.Stop;
        foxtra = {'offset': '0', 'stopColor': null, 'stopOpacity': '0.5'};
        foxtra['stopColor'] = kiloes;
        backup = option.bind(tangon)(backup, foxtra);
        foxtra = new Array(2);
        foxtra[0] = backup;
        backup = verify[oscard];
        backup = golfie.bind(tangon)(backup);
        kiloes = backup.Stop;
        backup = {'offset': '1', 'stopColor': null, 'stopOpacity': '0'};
        backup['stopColor'] = sizing;
        backup = option.bind(tangon)(kiloes, backup);
        foxtra[1] = backup;
        yankee['children'] = foxtra;
        yankee = zuuluu.bind(tangon)(romeon, yankee);
        report['children'] = yankee;
        offset = option.bind(tangon)(offset, report);
        report = new Array(2);
        report[0] = offset;
        oscard = verify[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.Rect;
        oscard = {'width': '100%', 'height': '100%', 'fill': 'url(#grad)'};
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot11 = tangon;
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/clan/native/components/ClanJoinSuccessActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ClanJoinSuccessActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            offset = michal.guildId;
            var _closure2_slot0 = offset;
            golfie = michal.onDismiss;
            var _closure2_slot1 = golfie;
            michal = _closure1_slot10;
            tangon = undefined;
            echoed = michal.bind(tangon)();
            michal = _closure1_slot5;
            config = michal.bind(tangon)(offset);
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            report = 8;
            report = zuuluu[report];
            option = michal.bind(tangon)(report);
            report = option.useBottomSheetRef;
            option = report.bind(option)();
            report = option.bottomSheetRef;
            romeon = option.bottomSheetClose;
            var _closure2_slot2 = romeon;
            yankee = _closure1_slot3;
            foxtra = yankee.useEffect;
            verify = new Array(1);
            verify[0] = offset;
            option = function() {
                zuuluu = _closure1_slot4;
                michal = _closure2_slot0;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            option = foxtra.bind(yankee)(option, verify);
            verify = yankee.useCallback;
            option = new Array(2);
            option[0] = golfie;
            option[1] = romeon;
            entity = function() {
                zuuluu = _closure2_slot1;
                entity = undefined;
                zuuluu = zuuluu.bind(entity)();
                michal = _closure2_slot2;
                michal = michal.bind(entity)();
                return entity;
            };
            verify = verify.bind(yankee)(entity, option);
            entity = 9;
            entity = zuuluu[entity];
            option = michal.bind(tangon)(entity);
            zuuluu = option.getClanBadgeUrl;
            yankee = null;
            entity = yankee == config;
            michal = undefined;
            if(entity) { _fun00002_ip = 193; continue _fun00001 }
 181:
            entity = config.badge;
            michal = entity.imageHash;
 193:
            entity = _closure1_slot6;
            entity = entity.SIZE_24;
            sizing = zuuluu.bind(option)(offset, michal, entity);
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 10;
            entity = zuuluu[entity];
            offset = michal.bind(tangon)(entity);
            option = offset.useToken;
            entity = _closure1_slot7;
            backup = option.bind(offset)(entity);
            entity = 11;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.getClanPrimaryButtonStyles;
            option = yankee == config;
            entity = undefined;
            if(option) { _fun00002_ip = 284; continue _fun00001 }
 272:
            option = config.branding;
            entity = option.primaryColor;
 284:
            romeon = michal.bind(zuuluu)(entity, backup);
            michal = yankee == romeon;
            entity = undefined;
            if(michal) { _fun00002_ip = 322; continue _fun00001 }
 299:
            zuuluu = romeon.backgroundColor;
            michal = yankee == zuuluu;
            entity = undefined;
            if(michal) { _fun00002_ip = 322; continue _fun00001 }
 313:
            michal = zuuluu.toString;
            entity = michal.bind(zuuluu)();
 322:
            michal = yankee != entity;
            foxtra = null;
            if(!michal) { _fun00002_ip = 334; continue _fun00001 }
 331:
            foxtra = entity;
 334:
            zuuluu = _closure1_slot9;
            michal = _closure1_slot0;
            option = _closure1_slot2;
            entity = 12;
            entity = option[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.BottomSheet;
            entity = {};
            entity['onDismiss'] = golfie;
            entity['ref'] = report;
            golfie = yankee != foxtra;
            if(!golfie) { _fun00002_ip = 463; continue _fun00001 }
 382:
            offset = _closure1_slot8;
            option = _closure1_slot11;
            report = {};
            report['startColor'] = foxtra;
            kiloes = _closure1_slot1;
            output = _closure1_slot2;
            foxtra = 13;
            foxtra = output[foxtra];
            foxtra = kiloes.bind(tangon)(foxtra);
            kiloes = foxtra.bind(tangon)(backup);
            backup = kiloes.alpha;
            foxtra = 0.2;
            backup = backup.bind(kiloes)(foxtra);
            foxtra = backup.hex;
            foxtra = foxtra.bind(backup)();
            report['endColor'] = foxtra;
            golfie = offset.bind(tangon)(option, report);
 463:
            report = new Array(3);
            report[0] = golfie;
            offset = _closure1_slot9;
            backup = _closure1_slot0;
            output = _closure1_slot2;
            golfie = 14;
            golfie = output[golfie];
            golfie = backup.bind(tangon)(golfie);
            option = golfie.SafeAreaPaddingView;
            golfie = {};
            foxtra = true;
            golfie['bottom'] = foxtra;
            foxtra = echoed.container;
            golfie['style'] = foxtra;
            kiloes = _closure1_slot8;
            foxtra = 15;
            foxtra = output[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.BaseClanTagChiplet;
            foxtra = {};
            output = echoed.tag;
            foxtra['containerStyles'] = output;
            output = echoed.tagText;
            foxtra['textStyle'] = output;
            result = yankee == config;
            output = undefined;
            if(result) { _fun00002_ip = 577; continue _fun00001 }
 572:
            output = config.tag;
 577:
            foxtra['clanTag'] = output;
            foxtra['clanBadge'] = sizing;
            sizing = _closure1_slot6;
            sizing = sizing.SIZE_32;
            foxtra['badgeSize'] = sizing;
            sizing = 'heading-xxl/semibold';
            foxtra['textVariant'] = sizing;
            sizing = 'text-normal';
            foxtra['textColor'] = sizing;
            backup = kiloes.bind(tangon)(backup, foxtra);
            foxtra = new Array(4);
            foxtra[0] = backup;
            result = _closure1_slot8;
            source = _closure1_slot0;
            update = _closure1_slot2;
            backup = 16;
            kiloes = update[backup];
            kiloes = source.bind(tangon)(kiloes);
            sizing = kiloes.Text;
            kiloes = {'style': null, 'variant': 'heading-xl/medium', 'color': 'header-primary'};
            output = echoed.headerText;
            kiloes['style'] = output;
            output = 17;
            ctrled = update[output];
            ctrled = source.bind(tangon)(ctrled);
            vacuum = ctrled.intl;
            ctrled = vacuum.format;
            update = update[output];
            update = source.bind(tangon)(update);
            update = update.t;
            source = update.orbR8f;
            update = {};
            record = yankee == config;
            sequen = undefined;
            if(record) { _fun00002_ip = 753; continue _fun00001 }
 748:
            sequen = config.name;
 753:
            update['name'] = sequen;
            update = ctrled.bind(vacuum)(source, update);
            kiloes['children'] = update;
            kiloes = result.bind(tangon)(sizing, kiloes);
            foxtra[1] = kiloes;
            sizing = _closure1_slot8;
            ctrled = _closure1_slot0;
            result = _closure1_slot2;
            backup = result[backup];
            backup = ctrled.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {'style': null, 'variant': 'text-md/medium', 'color': 'text-secondary'};
            echoed = echoed.subheaderText;
            backup['style'] = echoed;
            echoed = result[output];
            echoed = ctrled.bind(tangon)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = result[output];
            echoed = ctrled.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.fVROcn;
            echoed = update.bind(source)(echoed);
            backup['children'] = echoed;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[2] = backup;
            kiloes = _closure1_slot1;
            backup = 18;
            backup = result[backup];
            kiloes = kiloes.bind(tangon)(backup);
            backup = {};
            echoed = yankee != romeon;
            result = undefined;
            if(!echoed) { _fun00002_ip = 919; continue _fun00001 }
 916:
            result = romeon;
 919:
            backup['style'] = result;
            result = yankee != romeon;
            yankee = undefined;
            if(!result) { _fun00002_ip = 935; continue _fun00001 }
 932:
            yankee = romeon;
 935:
            backup['textStyle'] = yankee;
            yankee = _closure1_slot0;
            romeon = _closure1_slot2;
            result = romeon[output];
            result = yankee.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = romeon[output];
            output = yankee.bind(tangon)(output);
            output = output.t;
            output = output.aYmu19;
            output = result.bind(echoed)(output);
            backup['text'] = output;
            backup['onPress'] = verify;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[3] = backup;
            golfie['children'] = foxtra;
            golfie = offset.bind(tangon)(option, golfie);
            report[1] = golfie;
            option = _closure1_slot8;
            oscard = 19;
            oscard = romeon[oscard];
            oscard = yankee.bind(tangon)(oscard);
            golfie = oscard.ActionSheetHeaderBar;
            oscard = {};
            offset = 20;
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.ActionSheetHeaderBarVariants;
            offset = offset.FLOATING;
            oscard['variant'] = offset;
            oscard['onPress'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();