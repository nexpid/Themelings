// app/modules/go_live/native/StreamQualityLiveIndicator.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.PremiumTypes;
    var _closure1_slot7 = golf;
    tango = tango.PremiumUpsellTypes;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ResolutionTypes;
    var _closure1_slot9 = tango;
    tango = 6;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot11 = tango;
    tango = 7;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    romeo = 'center';
    foxtrot = 18;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'height': 18};
    tango['liveIndicator'] = verify;
    verify = {};
    offset = 8;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.none;
    verify['borderBottomLeftRadius'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.none;
    verify['borderTopLeftRadius'] = backup;
    verify['height'] = foxtrot;
    verify['textAlign'] = romeo;
    tango['liveTag'] = verify;
    verify = {'borderBottomLeftRadius': null, 'borderTopLeftRadius': null, 'backgroundColor': null, 'opacity': 0.8, 'paddingLeft': 8, 'paddingRight': 4, 'flexDirection': 'row', 'alignItems': 'center', 'height': 18};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderBottomLeftRadius'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderTopLeftRadius'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.unsafe_rawColors;
    romeo = romeo.PRIMARY_800;
    verify['backgroundColor'] = romeo;
    tango['qualityTag'] = verify;
    verify = {'color': '#fff', 'textAlign': 'center', 'fontWeight': '700'};
    tango['qualityTagText'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.PRIMARY_300;
    verify['color'] = offset;
    tango['reducedQualityTagText'] = verify;
    verify = {'width': 20, 'marginLeft': 4294967292};
    tango['nitroWheel'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot12 = tango;
    tango = {};
    golf = 'function StreamQualityLiveIndicatorTsx1(){const{withTiming,reveal,STANDARD_EASING}=this.__closure;return{opacity:withTiming(reveal?1:0,{easing:STANDARD_EASING,duration:250})};}';
    tango['code'] = golf;
    var _closure1_slot13 = tango;
    tango = 28;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/go_live/native/StreamQualityLiveIndicator.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            report = argFoo;
            update = report.participant;
            zulu = update;
            oscar = report.style;
            report = undefined;
            vacuum = undefined;
            var _closure2_slot0 = report;
            tango = undefined;
            var _closure2_slot1 = report;
            foxtrot = undefined;
            mike = undefined;
            sizing = undefined;
            config = undefined;
            golf = undefined;
            result = undefined;
            source = undefined;
            backup = undefined;
            var _closure2_slot7 = report;
            verify = undefined;
            kilo = undefined;
            yankee = undefined;
            options = _closure1_slot12;
            foxtrot = options.bind(report)();
            output = _closure1_slot4;
            romeo = output.useContext;
            record = _closure1_slot0;
            sequence = _closure1_slot2;
            options = 9;
            options = sequence[options];
            options = record.bind(report)(options);
            options = options.RevealContext;
            options = romeo.bind(output)(options);
            target = options.reveal;
            var _closure2_slot2 = target;
            options = 10;
            options = sequence[options];
            romeo = record.bind(report)(options);
            options = romeo.useAnalyticsContext;
            options = options.bind(romeo)();
            options = options.location;
            mike = options;
            var _closure2_slot3 = options;
            control = _closure1_slot1;
            options = 11;
            options = sequence[options];
            options = control.bind(report)(options);
            options = options.bind(report)();
            options = options.analyticsLocations;
            sizing = options;
            var _closure2_slot4 = options;
            options = output.useState;
            romeo = false;
            echo = options.bind(output)(romeo);
            output = _closure1_slot3;
            options = 2;
            output = output.bind(report)(echo, options);
            options = 0;
            options = output[options];
            config = options;
            var _closure2_slot5 = options;
            options = 1;
            options = output[options];
            var _closure2_slot6 = options;
            options = 12;
            output = sequence[options];
            context = record.bind(report)(output);
            echo = context.useAnimatedStyle;
            output = function() { // Original name: f
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    zulu = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 13;
                    mike = tango[mike];
                    options = undefined;
                    report = zulu.bind(options)(mike);
                    tango = report.withTiming;
                    mike = _closure2_slot2;
                    zulu = 0;
                    if(!mike) { _fun00004_ip = 47; continue _fun00003 }
 44:
                    zulu = 1;
 47:
                    mike = {};
                    golf = _closure1_slot0;
                    verify = _closure1_slot2;
                    oscar = 14;
                    oscar = verify[oscar];
                    oscar = golf.bind(options)(oscar);
                    oscar = oscar.STANDARD_EASING;
                    mike['easing'] = oscar;
                    oscar = 250;
                    mike['duration'] = oscar;
                    mike = tango.bind(report)(zulu, mike);
                    entity['opacity'] = mike;
                    return entity;
                }
            };
            papa = {};
            status = 13;
            status = sequence[status];
            status = record.bind(report)(status);
            status = status.withTiming;
            papa['withTiming'] = status;
            papa['reveal'] = target;
            target = 14;
            target = sequence[target];
            target = record.bind(report)(target);
            target = target.STANDARD_EASING;
            papa['STANDARD_EASING'] = target;
            output['__closure'] = papa;
            papa = 14676679064575.0;
            output['__workletHash'] = papa;
            papa = _closure1_slot13;
            output['__initData'] = papa;
            golf = echo.bind(context)(output);
            echo = 15;
            output = sequence[echo];
            record = record.bind(report)(output);
            output = record.getMaxQuality;
            result = output.bind(record)(update);
            output = 16;
            output = sequence[output];
            output = control.bind(report)(output);
            output = output.bind(report)(update);
            update = null;
            source = update != output;
 394: // try_start_0
            control = _closure1_slot0;
            output = _closure1_slot2;
            output = output[echo];
            sequence = control.bind(report)(output);
            control = sequence.isPremiumFPS;
            output = result;
            output = control.bind(sequence)(output);
            vacuum = output;
            _closure2_slot0 = output;
 432: // try_end0
            _fun00002_ip = 442; continue _fun00001;
 434: // catch_target0
            CatchBlockStart(arg_register=16);
            vacuum = false;
            _closure2_slot0 = romeo;
 442: // try_start_1
            control = _closure1_slot0;
            output = _closure1_slot2;
            output = output[echo];
            sequence = control.bind(report)(output);
            control = sequence.isPremiumResolution;
            output = result;
            output = control.bind(sequence)(output);
            tango = output;
            _closure2_slot1 = output;
 480: // try_end1
            _fun00002_ip = 490; continue _fun00001;
 482: // catch_target1
            CatchBlockStart(arg_register=16);
            tango = false;
            _closure2_slot1 = romeo;
 490:
            output = vacuum;
            romeo = output;
            if(output) { _fun00002_ip = 502; continue _fun00001 }
 499:
            romeo = tango;
 502:
            sequence = romeo;
            backup = sequence;
            _closure2_slot7 = sequence;
            romeo = _closure1_slot4;
            control = romeo.useEffect;
            output = new Array(5);
            output[0] = sizing;
            output[1] = config;
            output[2] = sequence;
            output[3] = vacuum;
            output[4] = tango;
            tango = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    mike = _closure2_slot5;
                    mike = !mike;
                    if(!mike) { _fun00006_ip = 17; continue _fun00005 }
 13:
                    mike = _closure2_slot7;
 17:
                    if(!mike) { _fun00006_ip = 124; continue _fun00005 }
 20:
                    tango = _closure1_slot1;
                    zulu = _closure1_slot2;
                    mike = 17;
                    mike = zulu[mike];
                    zulu = undefined;
                    oscar = tango.bind(zulu)(mike);
                    report = oscar.track;
                    mike = _closure1_slot6;
                    tango = mike.PREMIUM_UPSELL_VIEWED;
                    mike = {};
                    golf = _closure1_slot8;
                    golf = golf.STREAM_QUALITY_INDICATOR;
                    mike['type'] = golf;
                    golf = _closure2_slot0;
                    mike['has_premium_stream_fps'] = golf;
                    golf = _closure2_slot1;
                    mike['has_premium_stream_resolution'] = golf;
                    golf = _closure2_slot4;
                    mike['location_stack'] = golf;
                    mike = report.bind(oscar)(tango, mike);
                    mike = _closure2_slot6;
                    entity = true;
                    entity = mike.bind(zulu)(entity);
 124:
                    entity = undefined;
                    return entity;
                }
            };
            tango = control.bind(romeo)(tango, output);
            tango = romeo.useCallback;
            output = mike;
            mike = new Array(2);
            mike[0] = output;
            mike[1] = sizing;
            entity = function() {
                tango = _closure1_slot1;
                options = _closure1_slot2;
                entity = 18;
                zulu = options[entity];
                entity = undefined;
                report = tango.bind(entity)(zulu);
                tango = report.pushLazy;
                golf = _closure1_slot0;
                mike = 20;
                mike = options[mike];
                oscar = golf.bind(entity)(mike);
                mike = 19;
                zulu = options[mike];
                mike = options.paths;
                zulu = oscar.bind(entity)(zulu, mike);
                mike = {};
                verify = _closure2_slot3;
                mike['analyticsLocation'] = verify;
                oscar = _closure2_slot4;
                mike['analyticsLocations'] = oscar;
                oscar = 21;
                oscar = options[oscar];
                oscar = golf.bind(entity)(oscar);
                oscar = oscar.PremiumFeatureCardOrder;
                oscar = oscar.TIER_0_LEADING;
                mike['premiumFeatureCardOrder'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            verify = tango.bind(romeo)(entity, mike);
            tango = _closure1_slot1;
            mike = _closure1_slot2;
            sizing = 22;
            mike = mike[sizing];
            output = tango.bind(report)(mike);
            romeo = output.isPremium;
            mike = zulu;
            tango = mike.user;
            mike = _closure1_slot7;
            mike = mike.TIER_1;
            mike = romeo.bind(output)(tango, mike);
            mike = !mike;
            entity = mike;
            if(!mike) { _fun00002_ip = 707; continue _fun00001 }
 646:
            tango = _closure1_slot1;
            mike = _closure1_slot2;
            romeo = mike[sizing];
            output = tango.bind(report)(romeo);
            romeo = output.canStreamQuality;
            mike = mike[sizing];
            mike = tango.bind(report)(mike);
            mike = mike.StreamQuality;
            tango = mike.MID;
            mike = zulu;
            mike = mike.user;
            mike = romeo.bind(output)(tango, mike);
            entity = !mike;
 707:
            kilo = entity;
            romeo = _closure1_slot1;
            tango = _closure1_slot2;
            tango = tango[sizing];
            output = romeo.bind(report)(tango);
            romeo = output.isPremiumExactly;
            tango = zulu.user;
            zulu = _closure1_slot7;
            zulu = zulu.TIER_1;
            zulu = romeo.bind(output)(tango, zulu);
            mike = zulu;
            if(!zulu) { _fun00002_ip = 800; continue _fun00001 }
 760:
            zulu = result;
            zulu = update == zulu;
            tango = undefined;
            if(zulu) { _fun00002_ip = 786; continue _fun00001 }
 772:
            zulu = result;
            zulu = zulu.maxResolution;
            tango = zulu.type;
 786:
            zulu = _closure1_slot9;
            zulu = zulu.SOURCE;
            mike = tango === zulu;
 800:
            entity = mike;
            if(!mike) { _fun00002_ip = 858; continue _fun00001 }
 806:
            romeo = _closure1_slot1;
            mike = _closure1_slot2;
            zulu = mike[sizing];
            tango = romeo.bind(report)(zulu);
            zulu = tango.canStreamQuality;
            mike = mike[sizing];
            mike = romeo.bind(report)(mike);
            mike = mike.StreamQuality;
            mike = mike.HIGH;
            mike = zulu.bind(tango)(mike);
            entity = !mike;
 858:
            yankee = entity;
            entity = result;
            mike = update == entity;
            entity = null;
            if(mike) { _fun00002_ip = 1379; continue _fun00001 }
 876:
            tango = _closure1_slot10;
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            mike = mike[options];
            mike = zulu.bind(report)(mike);
            zulu = mike.View;
            mike = {};
            sizing = backup;
            romeo = 'none';
            options = romeo;
            if(!sizing) { _fun00002_ip = 930; continue _fun00001 }
 917:
            if(kilo) { _fun00002_ip = 926; continue _fun00001 }
 920:
            options = romeo;
            if(!yankee) { _fun00002_ip = 930; continue _fun00001 }
 926:
            options = 'auto';
 930:
            mike['pointerEvents'] = options;
            kilo = oscar;
            oscar = new Array(2);
            oscar[0] = kilo;
            oscar[1] = golf;
            mike['style'] = oscar;
            options = _closure1_slot11;
            golf = _closure1_slot0;
            yankee = _closure1_slot2;
            oscar = 23;
            oscar = yankee[oscar];
            oscar = golf.bind(report)(oscar);
            golf = oscar.PressableOpacity;
            oscar = {};
            yankee = 'button';
            oscar['accessibilityRole'] = yankee;
            romeo = foxtrot;
            sizing = romeo.liveIndicator;
            yankee = new Array(2);
            yankee[0] = sizing;
            yankee[1] = kilo;
            oscar['style'] = yankee;
            oscar['onPress'] = verify;
            yankee = _closure1_slot5;
            verify = {};
            romeo = romeo.qualityTag;
            verify['style'] = romeo;
            romeo = backup;
            if(!backup) { _fun00002_ip = 1115; continue _fun00001 }
 1045:
            sizing = _closure1_slot10;
            control = _closure1_slot1;
            vacuum = _closure1_slot2;
            backup = 24;
            backup = vacuum[backup];
            kilo = control.bind(report)(backup);
            backup = {};
            output = 25;
            output = vacuum[output];
            output = control.bind(report)(output);
            backup['source'] = output;
            output = foxtrot;
            output = output.nitroWheel;
            backup['style'] = output;
            output = 'contain';
            backup['resizeMode'] = output;
            romeo = sizing.bind(report)(kilo, backup);
 1115:
            backup = romeo;
            romeo = new Array(2);
            romeo[0] = backup;
            output = _closure1_slot10;
            kilo = _closure1_slot0;
            sizing = _closure1_slot2;
            backup = 26;
            backup = sizing[backup];
            backup = kilo.bind(report)(backup);
            sizing = backup.LegacyText;
            kilo = {};
            backup = foxtrot;
            control = backup.qualityTagText;
            backup = new Array(2);
            backup[0] = control;
            update = null;
            if(!source) { _fun00002_ip = 1189; continue _fun00001 }
 1180:
            source = foxtrot;
            update = source.reducedQualityTagText;
 1189:
            backup[1] = update;
            kilo['style'] = backup;
            update = _closure1_slot0;
            backup = _closure1_slot2;
            source = backup[echo];
            vacuum = update.bind(report)(source);
            control = vacuum.getResolutionText;
            source = result.maxResolution;
            control = control.bind(vacuum)(source);
            echo = backup[echo];
            update = update.bind(report)(echo);
            echo = update.getFPSText;
            result = result.maxFrameRate;
            source = echo.bind(update)(result);
            result = global;
            result = result.HermesInternal;
            update = result.concat;
            echo = '';
            result = ' ';
            result = update.bind(echo)(control, result, source);
            kilo['children'] = result;
            kilo = output.bind(report)(sizing, kilo);
            romeo[1] = kilo;
            verify['children'] = romeo;
            yankee = options.bind(report)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            romeo = _closure1_slot10;
            yankee = _closure1_slot1;
            offset = 27;
            offset = backup[offset];
            yankee = yankee.bind(report)(offset);
            offset = {};
            foxtrot = foxtrot.liveTag;
            offset['style'] = foxtrot;
            offset = romeo.bind(report)(yankee, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(report)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 1379:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();