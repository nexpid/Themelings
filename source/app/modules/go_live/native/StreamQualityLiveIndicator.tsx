// app/modules/go_live/native/StreamQualityLiveIndicator.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.PremiumTypes;
    var _closure1_slot7 = golfie;
    tangon = tangon.PremiumUpsellTypes;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ResolutionTypes;
    var _closure1_slot9 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    romeon = 'center';
    foxtra = 18;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'height': 18};
    tangon['liveIndicator'] = verify;
    verify = {};
    offset = 8;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.none;
    verify['borderBottomLeftRadius'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.none;
    verify['borderTopLeftRadius'] = backup;
    verify['height'] = foxtra;
    verify['textAlign'] = romeon;
    tangon['liveTag'] = verify;
    verify = {'borderBottomLeftRadius': null, 'borderTopLeftRadius': null, 'backgroundColor': null, 'opacity': 0.8, 'paddingLeft': 8, 'paddingRight': 4, 'flexDirection': 'row', 'alignItems': 'center', 'height': 18};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderBottomLeftRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderTopLeftRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.unsafe_rawColors;
    romeon = romeon.PRIMARY_800;
    verify['backgroundColor'] = romeon;
    tangon['qualityTag'] = verify;
    verify = {'color': '#fff', 'textAlign': 'center', 'fontWeight': '700'};
    tangon['qualityTagText'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.PRIMARY_300;
    verify['color'] = offset;
    tangon['reducedQualityTagText'] = verify;
    verify = {'width': 20, 'marginLeft': 4294967292};
    tangon['nitroWheel'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = {};
    golfie = 'function StreamQualityLiveIndicatorTsx1(){const{withTiming,reveal,STANDARD_EASING}=this.__closure;return{opacity:withTiming(reveal?1:0,{easing:STANDARD_EASING,duration:250})};}';
    tangon['code'] = golfie;
    var _closure1_slot13 = tangon;
    tangon = 28;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/go_live/native/StreamQualityLiveIndicator.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            report = argFoo;
            update = report.participant;
            zuuluu = update;
            oscard = report.style;
            report = undefined;
            vacuum = undefined;
            var _closure2_slot0 = report;
            tangon = undefined;
            var _closure2_slot1 = report;
            foxtra = undefined;
            michal = undefined;
            sizing = undefined;
            config = undefined;
            golfie = undefined;
            result = undefined;
            source = undefined;
            backup = undefined;
            var _closure2_slot7 = report;
            verify = undefined;
            kiloes = undefined;
            yankee = undefined;
            option = _closure1_slot12;
            foxtra = option.bind(report)();
            output = _closure1_slot4;
            romeon = output.useContext;
            record = _closure1_slot0;
            sequen = _closure1_slot2;
            option = 9;
            option = sequen[option];
            option = record.bind(report)(option);
            option = option.RevealContext;
            option = romeon.bind(output)(option);
            target = option.reveal;
            var _closure2_slot2 = target;
            option = 10;
            option = sequen[option];
            romeon = record.bind(report)(option);
            option = romeon.useAnalyticsContext;
            option = option.bind(romeon)();
            option = option.location;
            michal = option;
            var _closure2_slot3 = option;
            ctrled = _closure1_slot1;
            option = 11;
            option = sequen[option];
            option = ctrled.bind(report)(option);
            option = option.bind(report)();
            option = option.analyticsLocations;
            sizing = option;
            var _closure2_slot4 = option;
            option = output.useState;
            romeon = false;
            echoed = option.bind(output)(romeon);
            output = _closure1_slot3;
            option = 2;
            output = output.bind(report)(echoed, option);
            option = 0;
            option = output[option];
            config = option;
            var _closure2_slot5 = option;
            option = 1;
            option = output[option];
            var _closure2_slot6 = option;
            option = 12;
            output = sequen[option];
            cntext = record.bind(report)(output);
            echoed = cntext.useAnimatedStyle;
            output = function() { // Original name: f
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    zuuluu = _closure1_slot0;
                    tangon = _closure1_slot2;
                    michal = 13;
                    michal = tangon[michal];
                    option = undefined;
                    report = zuuluu.bind(option)(michal);
                    tangon = report.withTiming;
                    michal = _closure2_slot2;
                    zuuluu = 0;
                    if(!michal) { _fun00004_ip = 47; continue _fun00003 }
 44:
                    zuuluu = 1;
 47:
                    michal = {};
                    golfie = _closure1_slot0;
                    verify = _closure1_slot2;
                    oscard = 14;
                    oscard = verify[oscard];
                    oscard = golfie.bind(option)(oscard);
                    oscard = oscard.STANDARD_EASING;
                    michal['easing'] = oscard;
                    oscard = 250;
                    michal['duration'] = oscard;
                    michal = tangon.bind(report)(zuuluu, michal);
                    entity['opacity'] = michal;
                    return entity;
                }
            };
            papara = {};
            status = 13;
            status = sequen[status];
            status = record.bind(report)(status);
            status = status.withTiming;
            papara['withTiming'] = status;
            papara['reveal'] = target;
            target = 14;
            target = sequen[target];
            target = record.bind(report)(target);
            target = target.STANDARD_EASING;
            papara['STANDARD_EASING'] = target;
            output['__closure'] = papara;
            papara = 14676679064575.0;
            output['__workletHash'] = papara;
            papara = _closure1_slot13;
            output['__initData'] = papara;
            golfie = echoed.bind(cntext)(output);
            echoed = 15;
            output = sequen[echoed];
            record = record.bind(report)(output);
            output = record.getMaxQuality;
            result = output.bind(record)(update);
            output = 16;
            output = sequen[output];
            output = ctrled.bind(report)(output);
            output = output.bind(report)(update);
            update = null;
            source = update != output;
 396: // try_start_0
            ctrled = _closure1_slot0;
            output = _closure1_slot2;
            output = output[echoed];
            sequen = ctrled.bind(report)(output);
            ctrled = sequen.isPremiumFPS;
            output = result;
            output = ctrled.bind(sequen)(output);
            vacuum = output;
            _closure2_slot0 = output;
 434: // try_end0
            _fun00002_ip = 444; continue _fun00001;
 436: // catch_target0
            CatchBlockStart(arg_register=16);
            vacuum = false;
            _closure2_slot0 = romeon;
 444: // try_start_1
            ctrled = _closure1_slot0;
            output = _closure1_slot2;
            output = output[echoed];
            sequen = ctrled.bind(report)(output);
            ctrled = sequen.isPremiumResolution;
            output = result;
            output = ctrled.bind(sequen)(output);
            tangon = output;
            _closure2_slot1 = output;
 482: // try_end1
            _fun00002_ip = 492; continue _fun00001;
 484: // catch_target1
            CatchBlockStart(arg_register=16);
            tangon = false;
            _closure2_slot1 = romeon;
 492:
            output = vacuum;
            romeon = output;
            if(output) { _fun00002_ip = 504; continue _fun00001 }
 501:
            romeon = tangon;
 504:
            sequen = romeon;
            backup = sequen;
            _closure2_slot7 = sequen;
            romeon = _closure1_slot4;
            ctrled = romeon.useEffect;
            output = new Array(5);
            output[0] = sizing;
            output[1] = config;
            output[2] = sequen;
            output[3] = vacuum;
            output[4] = tangon;
            tangon = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    michal = _closure2_slot5;
                    michal = !michal;
                    if(!michal) { _fun00006_ip = 17; continue _fun00005 }
 13:
                    michal = _closure2_slot7;
 17:
                    if(!michal) { _fun00006_ip = 124; continue _fun00005 }
 20:
                    tangon = _closure1_slot1;
                    zuuluu = _closure1_slot2;
                    michal = 17;
                    michal = zuuluu[michal];
                    zuuluu = undefined;
                    oscard = tangon.bind(zuuluu)(michal);
                    report = oscard.track;
                    michal = _closure1_slot6;
                    tangon = michal.PREMIUM_UPSELL_VIEWED;
                    michal = {};
                    golfie = _closure1_slot8;
                    golfie = golfie.STREAM_QUALITY_INDICATOR;
                    michal['type'] = golfie;
                    golfie = _closure2_slot0;
                    michal['has_premium_stream_fps'] = golfie;
                    golfie = _closure2_slot1;
                    michal['has_premium_stream_resolution'] = golfie;
                    golfie = _closure2_slot4;
                    michal['location_stack'] = golfie;
                    michal = report.bind(oscard)(tangon, michal);
                    michal = _closure2_slot6;
                    entity = true;
                    entity = michal.bind(zuuluu)(entity);
 124:
                    entity = undefined;
                    return entity;
                }
            };
            tangon = ctrled.bind(romeon)(tangon, output);
            tangon = romeon.useCallback;
            output = michal;
            michal = new Array(2);
            michal[0] = output;
            michal[1] = sizing;
            entity = function() {
                tangon = _closure1_slot1;
                option = _closure1_slot2;
                entity = 18;
                zuuluu = option[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.pushLazy;
                golfie = _closure1_slot0;
                michal = 20;
                michal = option[michal];
                oscard = golfie.bind(entity)(michal);
                michal = 19;
                zuuluu = option[michal];
                michal = option.paths;
                zuuluu = oscard.bind(entity)(zuuluu, michal);
                michal = {};
                verify = _closure2_slot3;
                michal['analyticsLocation'] = verify;
                oscard = _closure2_slot4;
                michal['analyticsLocations'] = oscard;
                oscard = 21;
                oscard = option[oscard];
                oscard = golfie.bind(entity)(oscard);
                oscard = oscard.PremiumFeatureCardOrder;
                oscard = oscard.TIER_0_LEADING;
                michal['premiumFeatureCardOrder'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            verify = tangon.bind(romeon)(entity, michal);
            tangon = _closure1_slot1;
            michal = _closure1_slot2;
            sizing = 22;
            michal = michal[sizing];
            output = tangon.bind(report)(michal);
            romeon = output.isPremium;
            michal = zuuluu;
            tangon = michal.user;
            michal = _closure1_slot7;
            michal = michal.TIER_1;
            michal = romeon.bind(output)(tangon, michal);
            michal = !michal;
            entity = michal;
            if(!michal) { _fun00002_ip = 713; continue _fun00001 }
 652:
            tangon = _closure1_slot1;
            michal = _closure1_slot2;
            romeon = michal[sizing];
            output = tangon.bind(report)(romeon);
            romeon = output.canStreamQuality;
            michal = michal[sizing];
            michal = tangon.bind(report)(michal);
            michal = michal.StreamQuality;
            tangon = michal.MID;
            michal = zuuluu;
            michal = michal.user;
            michal = romeon.bind(output)(tangon, michal);
            entity = !michal;
 713:
            kiloes = entity;
            romeon = _closure1_slot1;
            tangon = _closure1_slot2;
            tangon = tangon[sizing];
            output = romeon.bind(report)(tangon);
            romeon = output.isPremiumExactly;
            tangon = zuuluu.user;
            zuuluu = _closure1_slot7;
            zuuluu = zuuluu.TIER_1;
            zuuluu = romeon.bind(output)(tangon, zuuluu);
            michal = zuuluu;
            if(!zuuluu) { _fun00002_ip = 806; continue _fun00001 }
 766:
            zuuluu = result;
            zuuluu = update == zuuluu;
            tangon = undefined;
            if(zuuluu) { _fun00002_ip = 792; continue _fun00001 }
 778:
            zuuluu = result;
            zuuluu = zuuluu.maxResolution;
            tangon = zuuluu.type;
 792:
            zuuluu = _closure1_slot9;
            zuuluu = zuuluu.SOURCE;
            michal = tangon === zuuluu;
 806:
            entity = michal;
            if(!michal) { _fun00002_ip = 864; continue _fun00001 }
 812:
            romeon = _closure1_slot1;
            michal = _closure1_slot2;
            zuuluu = michal[sizing];
            tangon = romeon.bind(report)(zuuluu);
            zuuluu = tangon.canStreamQuality;
            michal = michal[sizing];
            michal = romeon.bind(report)(michal);
            michal = michal.StreamQuality;
            michal = michal.HIGH;
            michal = zuuluu.bind(tangon)(michal);
            entity = !michal;
 864:
            yankee = entity;
            entity = result;
            michal = update == entity;
            entity = null;
            if(michal) { _fun00002_ip = 1385; continue _fun00001 }
 882:
            tangon = _closure1_slot10;
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            michal = michal[option];
            michal = zuuluu.bind(report)(michal);
            zuuluu = michal.View;
            michal = {};
            sizing = backup;
            romeon = 'none';
            option = romeon;
            if(!sizing) { _fun00002_ip = 936; continue _fun00001 }
 923:
            if(kiloes) { _fun00002_ip = 932; continue _fun00001 }
 926:
            option = romeon;
            if(!yankee) { _fun00002_ip = 936; continue _fun00001 }
 932:
            option = 'auto';
 936:
            michal['pointerEvents'] = option;
            kiloes = oscard;
            oscard = new Array(2);
            oscard[0] = kiloes;
            oscard[1] = golfie;
            michal['style'] = oscard;
            option = _closure1_slot11;
            golfie = _closure1_slot0;
            yankee = _closure1_slot2;
            oscard = 23;
            oscard = yankee[oscard];
            oscard = golfie.bind(report)(oscard);
            golfie = oscard.PressableOpacity;
            oscard = {};
            yankee = 'button';
            oscard['accessibilityRole'] = yankee;
            romeon = foxtra;
            sizing = romeon.liveIndicator;
            yankee = new Array(2);
            yankee[0] = sizing;
            yankee[1] = kiloes;
            oscard['style'] = yankee;
            oscard['onPress'] = verify;
            yankee = _closure1_slot5;
            verify = {};
            romeon = romeon.qualityTag;
            verify['style'] = romeon;
            romeon = backup;
            if(!backup) { _fun00002_ip = 1121; continue _fun00001 }
 1051:
            sizing = _closure1_slot10;
            ctrled = _closure1_slot1;
            vacuum = _closure1_slot2;
            backup = 24;
            backup = vacuum[backup];
            kiloes = ctrled.bind(report)(backup);
            backup = {};
            output = 25;
            output = vacuum[output];
            output = ctrled.bind(report)(output);
            backup['source'] = output;
            output = foxtra;
            output = output.nitroWheel;
            backup['style'] = output;
            output = 'contain';
            backup['resizeMode'] = output;
            romeon = sizing.bind(report)(kiloes, backup);
 1121:
            backup = romeon;
            romeon = new Array(2);
            romeon[0] = backup;
            output = _closure1_slot10;
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            backup = 26;
            backup = sizing[backup];
            backup = kiloes.bind(report)(backup);
            sizing = backup.LegacyText;
            kiloes = {};
            backup = foxtra;
            ctrled = backup.qualityTagText;
            backup = new Array(2);
            backup[0] = ctrled;
            update = null;
            if(!source) { _fun00002_ip = 1195; continue _fun00001 }
 1186:
            source = foxtra;
            update = source.reducedQualityTagText;
 1195:
            backup[1] = update;
            kiloes['style'] = backup;
            update = _closure1_slot0;
            backup = _closure1_slot2;
            source = backup[echoed];
            vacuum = update.bind(report)(source);
            ctrled = vacuum.getResolutionText;
            source = result.maxResolution;
            ctrled = ctrled.bind(vacuum)(source);
            echoed = backup[echoed];
            update = update.bind(report)(echoed);
            echoed = update.getFPSText;
            result = result.maxFrameRate;
            source = echoed.bind(update)(result);
            result = global;
            result = result.HermesInternal;
            update = result.concat;
            echoed = '';
            result = ' ';
            result = update.bind(echoed)(ctrled, result, source);
            kiloes['children'] = result;
            kiloes = output.bind(report)(sizing, kiloes);
            romeon[1] = kiloes;
            verify['children'] = romeon;
            yankee = option.bind(report)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            romeon = _closure1_slot10;
            yankee = _closure1_slot1;
            offset = 27;
            offset = backup[offset];
            yankee = yankee.bind(report)(offset);
            offset = {};
            foxtra = foxtra.liveTag;
            offset['style'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1385:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();