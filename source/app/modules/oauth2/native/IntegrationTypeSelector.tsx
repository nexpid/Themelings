// app/modules/oauth2/native/IntegrationTypeSelector.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    report = golfie[entity];
    michal = argCor;
    entity = undefined;
    michal = michal.bind(entity)(report);
    var _closure1_slot3 = michal;
    michal = 1;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.View;
    var _closure1_slot4 = report;
    backup = michal.StyleSheet;
    michal = 2;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.jsx;
    var _closure1_slot5 = report;
    michal = michal.jsxs;
    var _closure1_slot6 = michal;
    michal = 3;
    michal = golfie[michal];
    verify = oscard.bind(entity)(michal);
    option = verify.createStyles;
    michal = {};
    report = {'alignItems': 'center', 'flexDirection': 'column'};
    michal['container'] = report;
    report = 16;
    foxtra = '100%';
    offset = {'justifyContent': 'center', 'alignItems': 'center', 'gap': 16, 'marginTop': 24, 'marginBottom': 32, 'width': '100%'};
    michal['header'] = offset;
    offset = {};
    yankee = 'stretch';
    offset['alignSelf'] = yankee;
    yankee = 4;
    kiloes = golfie[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.sm;
    offset['borderRadius'] = kiloes;
    michal['rows'] = offset;
    offset = {};
    kiloes = backup.hairlineWidth;
    offset['height'] = kiloes;
    kiloes = golfie[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_MODIFIER_ACCENT;
    offset['backgroundColor'] = kiloes;
    kiloes = backup.hairlineWidth;
    backup = -1;
    backup = backup * kiloes;
    offset['marginTop'] = backup;
    michal['divider'] = offset;
    offset = {};
    offset['marginVertical'] = report;
    michal['learnMore'] = offset;
    offset = {};
    backup = golfie[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.CARD_PRIMARY_BG;
    offset['backgroundColor'] = backup;
    offset['width'] = foxtra;
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    offset['borderRadius'] = foxtra;
    michal['descriptionContainer'] = offset;
    offset = {};
    foxtra = 8;
    offset['padding'] = foxtra;
    michal['descriptionMainContainer'] = offset;
    offset = {'backgroundColor': null, 'bottom': 8, 'right': 8};
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.CARD_PRIMARY_BG;
    offset['backgroundColor'] = foxtra;
    michal['expandDescriptionCTA'] = offset;
    offset = {'height': 82, 'width': 82};
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xl;
    offset['borderRadius'] = foxtra;
    michal['appIcon'] = offset;
    offset = {};
    offset['padding'] = yankee;
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xl;
    foxtra = foxtra + yankee;
    offset['borderRadius'] = foxtra;
    michal['appIconMask'] = offset;
    offset = {};
    yankee = golfie[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_ACCENT;
    offset['backgroundColor'] = yankee;
    michal['loadingIcon'] = offset;
    michal = option.bind(verify)(michal);
    var _closure1_slot7 = michal;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/oauth2/native/IntegrationTypeSelector.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: IntegrationTypeSelector
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            kiloes = entity.application;
            var _closure2_slot0 = kiloes;
            entity = entity.onSelect;
            var _closure2_slot1 = entity;
            entity = _closure1_slot7;
            tangon = undefined;
            offset = entity.bind(tangon)();
            oscard = _closure1_slot3;
            zuuluu = oscard.useMemo;
            entity = kiloes.icon;
            michal = new Array(2);
            michal[0] = entity;
            entity = kiloes.id;
            michal[1] = entity;
            entity = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 5;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.getApplicationIconSource;
                entity = {};
                tangon = _closure2_slot0;
                report = tangon.id;
                entity['id'] = report;
                tangon = tangon.icon;
                entity['icon'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            report = zuuluu.bind(oscard)(entity, michal);
            zuuluu = oscard.useMemo;
            entity = kiloes.integrationTypesConfig;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = {};
                option = _closure1_slot0;
                verify = _closure1_slot2;
                report = 6;
                michal = verify[report];
                golfie = undefined;
                michal = option.bind(golfie)(michal);
                michal = michal.ApplicationIntegrationType;
                michal = michal.USER_INSTALL;
                entity['type'] = michal;
                michal = 7;
                michal = verify[michal];
                michal = option.bind(golfie)(michal);
                michal = michal.UserPlusIcon;
                entity['icon'] = michal;
                tangon = 8;
                michal = verify[tangon];
                michal = option.bind(golfie)(michal);
                oscard = michal.intl;
                zuuluu = oscard.string;
                michal = verify[tangon];
                michal = option.bind(golfie)(michal);
                michal = michal.t;
                michal = michal.aCg60N;
                michal = zuuluu.bind(oscard)(michal);
                entity['label'] = michal;
                michal = verify[tangon];
                michal = option.bind(golfie)(michal);
                oscard = michal.intl;
                zuuluu = oscard.string;
                michal = verify[tangon];
                michal = option.bind(golfie)(michal);
                michal = michal.t;
                michal = michal.YeiIUV;
                michal = zuuluu.bind(oscard)(michal);
                entity['subLabel'] = michal;
                michal = false;
                entity['beta'] = michal;
                zuuluu = new Array(2);
                zuuluu[0] = entity;
                entity = {};
                report = verify[report];
                report = option.bind(golfie)(report);
                report = report.ApplicationIntegrationType;
                report = report.GUILD_INSTALL;
                entity['type'] = report;
                report = 9;
                report = verify[report];
                report = option.bind(golfie)(report);
                report = report.ServerIcon;
                entity['icon'] = report;
                report = verify[tangon];
                report = option.bind(golfie)(report);
                offset = report.intl;
                oscard = offset.string;
                report = verify[tangon];
                report = option.bind(golfie)(report);
                report = report.t;
                report = report.E64YCw;
                report = oscard.bind(offset)(report);
                entity['label'] = report;
                report = verify[tangon];
                report = option.bind(golfie)(report);
                oscard = report.intl;
                report = oscard.string;
                tangon = verify[tangon];
                tangon = option.bind(golfie)(tangon);
                tangon = tangon.t;
                tangon = tangon.bbtoKi;
                tangon = report.bind(oscard)(tangon);
                entity['subLabel'] = tangon;
                entity['beta'] = michal;
                zuuluu[1] = entity;
                michal = zuuluu.filter;
                entity = function(argFoo) {
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        entity = _closure2_slot0;
                        tangon = entity.integrationTypesConfig;
                        michal = null;
                        zuuluu = michal == tangon;
                        entity = undefined;
                        if(zuuluu) { _fun00004_ip = 51; continue _fun00003 }
 24:
                        zuuluu = argFoo;
                        zuuluu = zuuluu.type;
                        zuuluu = tangon[zuuluu];
                        tangon = michal == zuuluu;
                        entity = undefined;
                        if(tangon) { _fun00004_ip = 51; continue _fun00003 }
 45:
                        entity = zuuluu.oauth2InstallParams;
 51:
                        entity = michal != entity;
                        return entity;
                    }
                };
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            foxtra = zuuluu.bind(oscard)(entity, michal);
            var _closure2_slot2 = foxtra;
            option = null;
            if(!(option == report)) { _fun00002_ip = 165; continue _fun00001 }
 119:
            zuuluu = _closure1_slot5;
            michal = _closure1_slot4;
            entity = {};
            golfie = offset.appIcon;
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = offset.loadingIcon;
            oscard[1] = golfie;
            entity['style'] = oscard;
            golfie = zuuluu.bind(tangon)(michal, entity);
            _fun00002_ip = 211; continue _fun00001;
 165:
            zuuluu = _closure1_slot5;
            michal = _closure1_slot1;
            oscard = _closure1_slot2;
            entity = 10;
            entity = oscard[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            oscard = offset.appIcon;
            entity['style'] = oscard;
            entity['source'] = report;
            golfie = zuuluu.bind(tangon)(michal, entity);
 211:
            zuuluu = _closure1_slot6;
            michal = _closure1_slot4;
            entity = {};
            report = offset.container;
            entity['style'] = report;
            report = {};
            oscard = offset.header;
            report['style'] = oscard;
            backup = _closure1_slot5;
            oscard = {};
            romeon = offset.appIconMask;
            oscard['style'] = romeon;
            oscard['children'] = golfie;
            golfie = backup.bind(tangon)(michal, oscard);
            oscard = new Array(3);
            oscard[0] = golfie;
            romeon = _closure1_slot0;
            sizing = _closure1_slot2;
            golfie = 11;
            golfie = sizing[golfie];
            golfie = romeon.bind(tangon)(golfie);
            romeon = golfie.Text;
            golfie = {'variant': 'heading-lg/bold', 'color': 'header-primary'};
            sizing = kiloes.name;
            golfie['children'] = sizing;
            golfie = backup.bind(tangon)(romeon, golfie);
            oscard[1] = golfie;
            golfie = kiloes.description;
            golfie = option != golfie;
            if(!golfie) { _fun00002_ip = 421; continue _fun00001 }
 345:
            backup = _closure1_slot5;
            romeon = _closure1_slot1;
            sizing = _closure1_slot2;
            option = 12;
            option = sizing[option];
            romeon = romeon.bind(tangon)(option);
            option = {};
            sizing = true;
            option['hideName'] = sizing;
            option['application'] = kiloes;
            kiloes = offset.descriptionContainer;
            option['viewContainerStyle'] = kiloes;
            kiloes = offset.descriptionMainContainer;
            option['mainContainerStyle'] = kiloes;
            kiloes = offset.expandDescriptionCTA;
            option['expandDescriptionCTAStyle'] = kiloes;
            golfie = backup.bind(tangon)(romeon, option);
 421:
            oscard[2] = golfie;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot5;
            golfie = _closure1_slot4;
            oscard = {};
            offset = offset.rows;
            oscard['style'] = offset;
            offset = _closure1_slot0;
            romeon = _closure1_slot2;
            verify = 13;
            verify = romeon[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.TableRowGroup;
            verify = {};
            romeon = foxtra.map;
            yankee = function(argFoo, argBar) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = argFoo;
                    option = argBar;
                    var _closure3_slot0 = entity;
                    report = _closure1_slot5;
                    zuuluu = _closure1_slot0;
                    tangon = _closure1_slot2;
                    michal = 14;
                    michal = tangon[michal];
                    tangon = undefined;
                    michal = zuuluu.bind(tangon)(michal);
                    zuuluu = michal.TableRow;
                    michal = {};
                    offset = entity.icon;
                    verify = {};
                    yankee = 'interactive-normal';
                    verify['color'] = yankee;
                    verify = report.bind(tangon)(offset, verify);
                    michal['icon'] = verify;
                    verify = entity.label;
                    michal['label'] = verify;
                    verify = entity.subLabel;
                    michal['subLabel'] = verify;
                    oscard = function() { // Original name: onPress
                        zuuluu = _closure2_slot1;
                        entity = _closure3_slot0;
                        michal = entity.type;
                        entity = undefined;
                        entity = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    michal['onPress'] = oscard;
                    oscard = 0;
                    oscard = oscard === option;
                    michal['start'] = oscard;
                    oscard = _closure2_slot2;
                    verify = oscard.length;
                    oscard = 1;
                    oscard = verify - oscard;
                    oscard = option === oscard;
                    michal['end'] = oscard;
                    oscard = true;
                    michal['arrow'] = oscard;
                    option = entity.beta;
                    oscard = undefined;
                    if(!option) { _fun00006_ip = 192; continue _fun00005 }
 160:
                    verify = _closure1_slot5;
                    option = _closure1_slot1;
                    offset = _closure1_slot2;
                    golfie = 15;
                    golfie = offset[golfie];
                    option = option.bind(tangon)(golfie);
                    golfie = {};
                    oscard = verify.bind(tangon)(option, golfie);
 192:
                    michal['trailing'] = oscard;
                    entity = entity.type;
                    entity = report.bind(tangon)(zuuluu, michal, entity);
                    return entity;
                }
            };
            yankee = romeon.bind(foxtra)(yankee);
            verify['children'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['useStyles'] = michal;
    return entity;
})();