// app/modules/oauth2/native/Header.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.UserFlags;
    var _closure1_slot4 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'paddingBottom': 16, 'marginHorizontal': 16, 'borderTopLeftRadius': null, 'borderTopRightRadius': null, 'flexDirection': 'column', 'justifyContent': 'center', 'alignItems': 'center'};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderTopLeftRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderTopRightRadius'] = romeon;
    tangon['header'] = verify;
    verify = {};
    romeon = 'row';
    verify['flexDirection'] = romeon;
    tangon['applicationNameWrapper'] = verify;
    verify = {};
    romeon = 8;
    verify['marginLeft'] = romeon;
    tangon['logoutLink'] = verify;
    verify = {'alignItems': 'center', 'flexDirection': 'row', 'justifyContent': 'space-between', 'marginBottom': 24};
    tangon['headerIcons'] = verify;
    verify = {'flexDirection': 'row', 'justifyContent': 'space-between', 'marginHorizontal': 24};
    tangon['ellipseGroup'] = verify;
    verify = {'width': 4, 'height': 4, 'marginHorizontal': 2, 'backgroundColor': null, 'opacity': 0.1, 'borderRadius': 2};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.HEADER_PRIMARY;
    verify['backgroundColor'] = offset;
    tangon['ellipse'] = verify;
    verify = {'marginTop': 4, 'marginLeft': 8};
    tangon['botTag'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/oauth2/native/Header.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: Header
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            zuuluu = entity.user;
            foxtra = entity.application;
            verify = entity.accountScopes;
            sizing = entity.bot;
            entity = _closure1_slot7;
            tangon = undefined;
            kiloes = entity.bind(tangon)();
            michal = _closure1_slot1;
            entity = _closure1_slot2;
            report = 6;
            entity = entity[report];
            oscard = michal.bind(tangon)(entity);
            michal = oscard.getApplicationIconSource;
            entity = {};
            golfie = foxtra.id;
            entity['id'] = golfie;
            golfie = foxtra.icon;
            entity['icon'] = golfie;
            option = michal.bind(oscard)(entity);
            output = null;
            entity = output != zuuluu;
            echoed = undefined;
            if(!entity) { _fun00002_ip = 128; continue _fun00001 }
 100:
            michal = _closure1_slot1;
            entity = _closure1_slot2;
            entity = entity[report];
            michal = michal.bind(tangon)(entity);
            entity = michal.getUserAvatarSource;
            echoed = entity.bind(michal)(zuuluu);
 128:
            zuuluu = _closure1_slot6;
            michal = _closure1_slot3;
            entity = {};
            report = kiloes.header;
            entity['style'] = report;
            report = {};
            oscard = kiloes.headerIcons;
            report['style'] = oscard;
            romeon = _closure1_slot5;
            backup = _closure1_slot1;
            golfie = _closure1_slot2;
            result = 7;
            oscard = golfie[result];
            yankee = backup.bind(tangon)(oscard);
            oscard = {};
            oscard['source'] = option;
            option = _closure1_slot0;
            update = golfie[result];
            update = option.bind(tangon)(update);
            update = update.AvatarSizes;
            update = update.XLARGE;
            oscard['size'] = update;
            yankee = romeon.bind(tangon)(yankee, oscard);
            oscard = new Array(3);
            oscard[0] = yankee;
            yankee = {};
            update = kiloes.ellipseGroup;
            yankee['style'] = update;
            update = {};
            source = kiloes.ellipse;
            update['style'] = source;
            source = romeon.bind(tangon)(michal, update);
            update = new Array(3);
            update[0] = source;
            source = {};
            ctrled = kiloes.ellipse;
            source['style'] = ctrled;
            source = romeon.bind(tangon)(michal, source);
            update[1] = source;
            source = {};
            ctrled = kiloes.ellipse;
            source['style'] = ctrled;
            source = romeon.bind(tangon)(michal, source);
            update[2] = source;
            yankee['children'] = update;
            yankee = zuuluu.bind(tangon)(michal, yankee);
            oscard[1] = yankee;
            yankee = golfie[result];
            backup = backup.bind(tangon)(yankee);
            yankee = {};
            yankee['source'] = echoed;
            result = golfie[result];
            result = option.bind(tangon)(result);
            result = result.AvatarSizes;
            result = result.XLARGE;
            yankee['size'] = result;
            yankee = romeon.bind(tangon)(backup, yankee);
            oscard[2] = yankee;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(michal, report);
            report = new Array(3);
            report[0] = oscard;
            oscard = {};
            yankee = kiloes.applicationNameWrapper;
            oscard['style'] = yankee;
            yankee = 8;
            golfie = golfie[yankee];
            golfie = option.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'variant': 'text-lg/bold', 'color': 'header-primary'};
            foxtra = foxtra.name;
            golfie['children'] = foxtra;
            option = romeon.bind(tangon)(option, golfie);
            golfie = new Array(2);
            golfie[0] = option;
            romeon = output != sizing;
            option = null;
            if(!romeon) { _fun00002_ip = 579; continue _fun00001 }
 471:
            backup = _closure1_slot5;
            foxtra = _closure1_slot1;
            result = _closure1_slot2;
            romeon = 9;
            romeon = result[romeon];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            kiloes = kiloes.botTag;
            romeon['style'] = kiloes;
            kiloes = sizing.public_flags;
            kiloes = output != kiloes;
            if(!kiloes) { _fun00002_ip = 568; continue _fun00001 }
 520:
            result = _closure1_slot0;
            echoed = _closure1_slot2;
            output = 10;
            output = echoed[output];
            echoed = result.bind(tangon)(output);
            result = echoed.hasFlag;
            output = sizing.public_flags;
            sizing = _closure1_slot4;
            sizing = sizing.VERIFIED_BOT;
            kiloes = result.bind(echoed)(output, sizing);
 568:
            romeon['verified'] = kiloes;
            option = backup.bind(tangon)(foxtra, romeon);
 579:
            golfie[1] = option;
            oscard['children'] = golfie;
            oscard = zuuluu.bind(tangon)(michal, oscard);
            report[1] = oscard;
            option = _closure1_slot5;
            golfie = _closure1_slot0;
            oscard = _closure1_slot2;
            oscard = oscard[yankee];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'heading-md/normal', 'color': 'header-secondary'};
            yankee = verify.length;
            verify = 0;
            if(!(!(yankee > verify))) { _fun00002_ip = 707; continue _fun00001 }
 648:
            foxtra = _closure1_slot0;
            backup = _closure1_slot2;
            verify = 11;
            yankee = backup[verify];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            verify = backup[verify];
            verify = foxtra.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.X+Fdpq;
            verify = yankee.bind(romeon)(verify);
            _fun00002_ip = 764; continue _fun00001;
 707:
            foxtra = _closure1_slot0;
            backup = _closure1_slot2;
            offset = 11;
            yankee = backup[offset];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = backup[offset];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.jFbDnJ;
            verify = yankee.bind(romeon)(offset);
 764:
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();