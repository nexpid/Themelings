// app/modules/oauth2/native/ErrorResult.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'backgroundColor': null, 'gap': 16, 'paddingHorizontal': 16, 'justifyContent': 'center', 'flexDirection': 'column'};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MOBILE_PRIMARY;
    verify['backgroundColor'] = romeon;
    tangon['container'] = verify;
    verify = {'flex': 1, 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'center'};
    tangon['inner'] = verify;
    verify = {'marginTop': 24, 'textAlign': 'center'};
    tangon['text'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.INFO_WARNING_TEXT;
    verify['tintColor'] = offset;
    tangon['image'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/oauth2/native/ErrorResult.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ErrorResult
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.error;
            option = entity.hideFooter;
            entity = _closure1_slot7;
            tangon = undefined;
            oscard = entity.bind(tangon)();
            zuuluu = _closure1_slot6;
            romeon = _closure1_slot0;
            kiloes = _closure1_slot2;
            entity = 5;
            entity = kiloes[entity];
            entity = romeon.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = oscard.container;
            entity['style'] = report;
            verify = _closure1_slot4;
            report = {};
            offset = oscard.inner;
            report['style'] = offset;
            foxtra = _closure1_slot5;
            yankee = _closure1_slot3;
            offset = {};
            output = _closure1_slot1;
            sizing = 6;
            sizing = kiloes[sizing];
            sizing = output.bind(tangon)(sizing);
            offset['source'] = sizing;
            sizing = oscard.image;
            offset['style'] = sizing;
            yankee = foxtra.bind(tangon)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = 7;
            yankee = kiloes[yankee];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {};
            oscard = oscard.text;
            yankee['style'] = oscard;
            oscard = 'text-md/medium';
            yankee['variant'] = oscard;
            oscard = null;
            if(!(oscard == backup)) { _fun00002_ip = 243; continue _fun00001 }
 186:
            result = _closure1_slot0;
            echoed = _closure1_slot2;
            kiloes = 8;
            sizing = echoed[kiloes];
            sizing = result.bind(tangon)(sizing);
            output = sizing.intl;
            sizing = output.string;
            kiloes = echoed[kiloes];
            kiloes = result.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.mqn87+;
            backup = sizing.bind(output)(kiloes);
 243:
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            report['children'] = offset;
            verify = zuuluu.bind(tangon)(verify, report);
            report = new Array(2);
            report[0] = verify;
            oscard = null;
            if(option) { _fun00002_ip = 388; continue _fun00001 }
 280:
            verify = _closure1_slot5;
            foxtra = _closure1_slot0;
            backup = _closure1_slot2;
            golfie = 9;
            golfie = backup[golfie];
            golfie = foxtra.bind(tangon)(golfie);
            option = golfie.Button;
            golfie = {};
            offset = 'lg';
            golfie['size'] = offset;
            offset = 8;
            yankee = backup[offset];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = backup[offset];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.cpT0Cg;
            offset = yankee.bind(romeon)(offset);
            golfie['text'] = offset;
            offset = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 10;
                michal = michal[entity];
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                entity = michal.pop;
                entity = entity.bind(michal)();
                return entity;
            };
            golfie['onPress'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 388:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();