// app/modules/read_states/trackAckMessages.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var7 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var6;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var7.bind(var1)(var4);
    var _closure1_slot2 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var7.bind(var1)(var4);
    var _closure1_slot3 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var7.bind(var1)(var4);
    var _closure1_slot4 = var4;
    var4 = 3;
    var4 = var6[var4];
    var4 = var7.bind(var1)(var4);
    var _closure1_slot5 = var4;
    var4 = 4;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.AnalyticEvents;
    var _closure1_slot6 = var4;
    var4 = 6;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/read_states/trackAckMessages.tsx';
    var4 = var5.bind(var6)(var4);
    var2 = function trackAckMessages(arg1, arg2) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var7 = arg1;
            var2 = _closure1_slot2;
            var1 = var2.getChannel;
            var9 = var1.bind(var2)(var7);
            var3 = _closure1_slot0;
            var2 = _closure1_slot1;
            var1 = 5;
            var2 = var2[var1];
            var1 = undefined;
            var5 = var3.bind(var1)(var2);
            var4 = var5.trackWithMetadata;
            var2 = _closure1_slot6;
            var3 = var2.ACK_MESSAGES;
            var2 = {};
            var2['channel_id'] = var7;
            var7 = null;
            var8 = var7 == var9;
            var7 = undefined;
            if(var8) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var8 = var9.getGuildId;
            var7 = var8.bind(var9)();
case 2:
            var2['guild_id'] = var7;
            var7 = arg2;
            var2['location'] = var7;
            var7 = _closure1_slot4;
            var6 = var7.getGuildsArray;
            var8 = var6.bind(var7)();
            var7 = var8.map;
            var6 = function(arg1) {
                var1 = arg1;
                var5 = _closure1_slot3;
                var4 = var5.hasUnread;
                var3 = var1.id;
                var15 = var4.bind(var5)(var3);
                var4 = var5.getMentionCount;
                var3 = var1.id;
                var13 = var4.bind(var5)(var3);
                var3 = _closure1_slot5;
                var4 = var3.isMuted;
                var2 = var1.id;
                var11 = var4.bind(var3)(var2);
                var2 = var3.resolveGuildUnreadSetting;
                var9 = var2.bind(var3)(var1);
                var17 = var1.id;
                var1 = global;
                var1 = var1.HermesInternal;
                var3 = var1.concat;
                var18 = '';
                var1 = ',';
                var16 = var1;
                var14 = var1;
                var12 = var1;
                var10 = var1;
                var1 = var18[var3](var17, var16, var15, var14, var13, var12, var11, var10, var9, var8);
                return var1;
            };
            var6 = var7.bind(var8)(var6);
            var2['guild_unread_statuses'] = var6;
            var2 = var4.bind(var5)(var3, var2);
            return var1;
        }
    };
    var3['default'] = var2;
    return var1;
})();