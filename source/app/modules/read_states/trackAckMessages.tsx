// app/modules/read_states/trackAckMessages.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot6 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/read_states/trackAckMessages.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: trackAckMessages
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            golfie = argFoo;
            michal = _closure1_slot2;
            entity = michal.getChannel;
            verify = entity.bind(michal)(golfie);
            zuuluu = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 5;
            michal = michal[entity];
            entity = undefined;
            report = zuuluu.bind(entity)(michal);
            tangon = report.trackWithMetadata;
            michal = _closure1_slot6;
            zuuluu = michal.ACK_MESSAGES;
            michal = {};
            michal['channel_id'] = golfie;
            golfie = null;
            option = golfie == verify;
            golfie = undefined;
            if(option) { _fun00002_ip = 85; continue _fun00001 }
 75:
            option = verify.getGuildId;
            golfie = option.bind(verify)();
 85:
            michal['guild_id'] = golfie;
            golfie = global;
            option = golfie.location;
            michal['location'] = option;
            option = golfie.Object;
            golfie = option.values;
            verify = _closure1_slot4;
            oscard = verify.getGuilds;
            oscard = oscard.bind(verify)();
            option = golfie.bind(option)(oscard);
            golfie = option.map;
            oscard = function(argFoo) {
                entity = argFoo;
                report = _closure1_slot3;
                tangon = report.hasUnread;
                zuuluu = entity.id;
                kiloes = tangon.bind(report)(zuuluu);
                tangon = report.getMentionCount;
                zuuluu = entity.id;
                foxtra = tangon.bind(report)(zuuluu);
                zuuluu = _closure1_slot5;
                tangon = zuuluu.isMuted;
                michal = entity.id;
                yankee = tangon.bind(zuuluu)(michal);
                michal = zuuluu.resolveGuildUnreadSetting;
                verify = michal.bind(zuuluu)(entity);
                output = entity.id;
                entity = global;
                entity = entity.HermesInternal;
                zuuluu = entity.concat;
                result = '';
                entity = ',';
                sizing = entity;
                backup = entity;
                romeon = entity;
                offset = entity;
                entity = result[zuuluu](output, sizing, kiloes, backup, foxtra, romeon, yankee, offset, verify, option);
                return entity;
            };
            oscard = golfie.bind(option)(oscard);
            michal['guild_unread_statuses'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();