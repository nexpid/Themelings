// app/modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplateFullCard.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: SectionSeparator
        entity = _closure1_slot7;
        tangon = undefined;
        backup = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot5;
        entity = {};
        romeon = _closure1_slot4;
        golfie = _closure1_slot1;
        offset = _closure1_slot2;
        oscard = 5;
        report = offset[oscard];
        yankee = golfie.bind(tangon)(report);
        report = {};
        verify = 24;
        report['size'] = verify;
        yankee = romeon.bind(tangon)(yankee, report);
        report = new Array(3);
        report[0] = yankee;
        foxtra = _closure1_slot4;
        romeon = _closure1_slot3;
        yankee = {};
        backup = backup.separator;
        yankee['style'] = backup;
        yankee = foxtra.bind(tangon)(romeon, yankee);
        report[1] = yankee;
        option = _closure1_slot4;
        oscard = offset[oscard];
        golfie = golfie.bind(tangon)(oscard);
        oscard = {};
        oscard['size'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot8 = entity;
    entity = function(argFoo) { // Original name: BenefitRow
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.title;
            backup = entity.description;
            entity = _closure1_slot7;
            tangon = undefined;
            kiloes = entity.bind(tangon)();
            zuuluu = _closure1_slot6;
            michal = _closure1_slot3;
            entity = {};
            report = kiloes.benefitRowContainer;
            entity['style'] = report;
            golfie = _closure1_slot4;
            oscard = _closure1_slot3;
            report = {};
            verify = _closure1_slot1;
            romeon = _closure1_slot2;
            option = 6;
            option = romeon[option];
            verify = verify.bind(tangon)(option);
            option = {};
            option = golfie.bind(tangon)(verify, option);
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot6;
            golfie = _closure1_slot3;
            oscard = {};
            verify = kiloes.benefitTextContainer;
            oscard['style'] = verify;
            verify = new Array(2);
            verify[0] = offset;
            offset = null;
            romeon = offset != backup;
            if(!romeon) { _fun00002_ip = 204; continue _fun00001 }
 139:
            foxtra = _closure1_slot4;
            romeon = _closure1_slot0;
            sizing = _closure1_slot2;
            yankee = 7;
            yankee = sizing[yankee];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {'style': null, 'variant': 'text-sm/normal', 'color': 'interactive-normal'};
            kiloes = kiloes.benefitDescription;
            yankee['style'] = kiloes;
            yankee['children'] = backup;
            offset = foxtra.bind(tangon)(romeon, yankee);
 204:
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot9 = entity;
    entity = function(argFoo) { // Original name: BenefitSection
        entity = argFoo;
        yankee = entity.sectionTitle;
        oscard = entity.children;
        tangon = _closure1_slot6;
        zuuluu = _closure1_slot5;
        michal = {};
        verify = _closure1_slot4;
        option = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 8;
        report = offset[entity];
        entity = undefined;
        report = option.bind(entity)(report);
        option = report.SectionTitle;
        report = {};
        report['children'] = yankee;
        option = verify.bind(entity)(option, report);
        report = new Array(3);
        report[0] = option;
        verify = _closure1_slot4;
        option = _closure1_slot1;
        golfie = 5;
        golfie = offset[golfie];
        option = option.bind(entity)(golfie);
        golfie = {};
        offset = 14;
        golfie['size'] = offset;
        golfie = verify.bind(entity)(option, golfie);
        report[1] = golfie;
        report[2] = oscard;
        michal['children'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    var _closure1_slot10 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    offset = 2;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot4 = tangon;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot5 = tangon;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'backgroundColor': null, 'flex': 1, 'padding': 16};
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtra;
    tangon['container'] = verify;
    verify = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.HEADER_PRIMARY;
    verify['color'] = foxtra;
    tangon['subscriptionPlanTextStyle'] = verify;
    verify = {'color': null, 'paddingTop': 16, 'paddingBottom': 24};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_NORMAL;
    verify['color'] = foxtra;
    foxtra = 24;
    tangon['descriptionPlanTextStyle'] = verify;
    verify = {};
    verify['paddingTop'] = foxtra;
    tangon['content'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    tangon['headerText'] = verify;
    verify = {'width': 3, 'height': 3, 'borderRadius': 1.5, 'backgroundColor': null, 'marginHorizontal': 8};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.INTERACTIVE_NORMAL;
    verify['backgroundColor'] = foxtra;
    tangon['headerDot'] = verify;
    verify = {'borderBottomWidth': 1, 'marginLeft': 4294967280, 'marginRight': 4294967280};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_MODIFIER_HOVER;
    verify['borderColor'] = yankee;
    tangon['separator'] = verify;
    verify = {'flexDirection': 'row', 'justifyContent': 'flex-start'};
    tangon['benefitRowContainer'] = verify;
    verify = {'flex': 1, 'justifyContent': 'center', 'marginLeft': 16};
    tangon['benefitTextContainer'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['benefitDescription'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    tangon['channelTitle'] = verify;
    verify = {'width': 16, 'height': 16, 'marginEnd': 8};
    tangon['channelIcon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplateFullCard.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionTierTemplateFullCard
        entity = argFoo;
        update = entity.template;
        sizing = entity.guildId;
        foxtra = entity.handleSelectTemplateInPreview;
        entity = _closure1_slot7;
        tangon = undefined;
        romeon = entity.bind(tangon)();
        var _closure2_slot0 = romeon;
        backup = _closure1_slot1;
        ctrled = _closure1_slot2;
        entity = 9;
        entity = ctrled[entity];
        entity = backup.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        kiloes = entity.bottom;
        michal = update.listings;
        entity = 0;
        entity = michal[entity];
        config = entity.image;
        sequen = entity.name;
        status = entity.channels;
        source = entity.additional_perks;
        record = entity.role_color;
        zuuluu = _closure1_slot4;
        output = _closure1_slot0;
        entity = 10;
        entity = ctrled[entity];
        entity = output.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {'scrollable': true, 'startExpanded': true};
        yankee = true;
        golfie = _closure1_slot6;
        oscard = _closure1_slot3;
        report = {};
        option = romeon.container;
        report['style'] = option;
        offset = _closure1_slot4;
        option = 11;
        option = ctrled[option];
        option = output.bind(tangon)(option);
        verify = option.GuildRoleSubscriptionTierTemplateBasicInfo;
        option = {};
        option['template'] = update;
        option['handleSelectTemplateInPreview'] = foxtra;
        foxtra = romeon.subscriptionPlanTextStyle;
        option['subscriptionPlanTextStyle'] = foxtra;
        foxtra = romeon.descriptionPlanTextStyle;
        option['descriptionTextStyle'] = foxtra;
        option['closeActionSheet'] = yankee;
        verify = offset.bind(tangon)(verify, option);
        option = new Array(3);
        option[0] = verify;
        yankee = _closure1_slot4;
        offset = _closure1_slot3;
        verify = {};
        foxtra = romeon.separator;
        verify['style'] = foxtra;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        yankee = _closure1_slot6;
        verify = 12;
        verify = ctrled[verify];
        verify = output.bind(tangon)(verify);
        offset = verify.BottomSheetScrollView;
        verify = {};
        foxtra = false;
        verify['scrollsToTop'] = foxtra;
        romeon = romeon.content;
        verify['style'] = romeon;
        romeon = {};
        foxtra = 32;
        foxtra = foxtra + kiloes;
        romeon['paddingBottom'] = foxtra;
        verify['contentContainerStyle'] = romeon;
        update = _closure1_slot4;
        kiloes = 7;
        romeon = ctrled[kiloes];
        romeon = output.bind(tangon)(romeon);
        foxtra = romeon.Text;
        romeon = {'variant': 'text-sm/bold', 'color': 'text-normal'};
        vacuum = {};
        target = 'uppercase';
        vacuum['textTransform'] = target;
        romeon['style'] = vacuum;
        vacuum = 13;
        cntext = ctrled[vacuum];
        cntext = output.bind(tangon)(cntext);
        sierra = cntext.intl;
        papara = sierra.string;
        cntext = ctrled[vacuum];
        cntext = output.bind(tangon)(cntext);
        cntext = cntext.t;
        cntext = cntext.CjC5XV;
        cntext = papara.bind(sierra)(cntext);
        romeon['children'] = cntext;
        foxtra = update.bind(tangon)(foxtra, romeon);
        romeon = new Array(11);
        romeon[0] = foxtra;
        papara = _closure1_slot4;
        foxtra = 5;
        update = ctrled[foxtra];
        cntext = backup.bind(tangon)(update);
        update = {};
        sierra = 4;
        update['size'] = sierra;
        update = papara.bind(tangon)(cntext, update);
        romeon[1] = update;
        papara = _closure1_slot4;
        update = ctrled[kiloes];
        update = output.bind(tangon)(update);
        cntext = update.Text;
        update = {'variant': 'text-sm/normal', 'color': 'text-muted'};
        sierra = ctrled[vacuum];
        sierra = output.bind(tangon)(sierra);
        whisks = sierra.intl;
        limora = whisks.string;
        sierra = ctrled[vacuum];
        sierra = output.bind(tangon)(sierra);
        sierra = sierra.t;
        sierra = sierra.bCb3c3;
        sierra = limora.bind(whisks)(sierra);
        update['children'] = sierra;
        update = papara.bind(tangon)(cntext, update);
        romeon[2] = update;
        papara = _closure1_slot4;
        update = ctrled[foxtra];
        cntext = backup.bind(tangon)(update);
        update = {};
        sierra = 24;
        update['size'] = sierra;
        update = papara.bind(tangon)(cntext, update);
        romeon[3] = update;
        cntext = _closure1_slot4;
        kiloes = ctrled[kiloes];
        kiloes = output.bind(tangon)(kiloes);
        update = kiloes.Text;
        kiloes = {'variant': 'text-xs/bold', 'color': 'header-secondary'};
        papara = {};
        papara['textTransform'] = target;
        kiloes['style'] = papara;
        papara = ctrled[vacuum];
        papara = output.bind(tangon)(papara);
        sierra = papara.intl;
        target = sierra.string;
        papara = ctrled[vacuum];
        papara = output.bind(tangon)(papara);
        papara = papara.t;
        papara = papara.ZKyfEh;
        papara = target.bind(sierra)(papara);
        kiloes['children'] = papara;
        kiloes = cntext.bind(tangon)(update, kiloes);
        romeon[4] = kiloes;
        kiloes = _closure1_slot4;
        foxtra = ctrled[foxtra];
        backup = backup.bind(tangon)(foxtra);
        foxtra = {};
        update = 8;
        foxtra['size'] = update;
        foxtra = kiloes.bind(tangon)(backup, foxtra);
        romeon[5] = foxtra;
        kiloes = _closure1_slot4;
        update = 14;
        foxtra = ctrled[update];
        foxtra = output.bind(tangon)(foxtra);
        backup = foxtra.GuildRoleSubscriptionRolePreview;
        foxtra = {};
        foxtra['roleColor'] = record;
        foxtra['roleImage'] = config;
        foxtra['roleName'] = sequen;
        foxtra['guildId'] = sizing;
        foxtra = kiloes.bind(tangon)(backup, foxtra);
        romeon[6] = foxtra;
        backup = _closure1_slot4;
        sequen = _closure1_slot8;
        foxtra = {};
        foxtra = backup.bind(tangon)(sequen, foxtra);
        romeon[7] = foxtra;
        backup = _closure1_slot4;
        kiloes = _closure1_slot10;
        foxtra = {};
        sizing = ctrled[vacuum];
        sizing = output.bind(tangon)(sizing);
        record = sizing.intl;
        config = record.string;
        sizing = ctrled[vacuum];
        sizing = output.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.Ofvpfn;
        sizing = config.bind(record)(sizing);
        foxtra['sectionTitle'] = sizing;
        cntext = _closure1_slot4;
        sizing = 15;
        config = ctrled[sizing];
        config = output.bind(tangon)(config);
        record = config.GappedList;
        config = {};
        config['gap'] = update;
        target = status.map;
        papara = function(argFoo) {
            entity = argFoo;
            oscard = _closure1_slot6;
            tangon = _closure1_slot3;
            zuuluu = {};
            foxtra = _closure2_slot0;
            report = foxtra.channelTitle;
            zuuluu['style'] = report;
            offset = _closure1_slot4;
            romeon = _closure1_slot1;
            yankee = _closure1_slot2;
            verify = 16;
            golfie = yankee[verify];
            report = undefined;
            option = romeon.bind(report)(golfie);
            golfie = {};
            foxtra = foxtra.channelIcon;
            golfie['style'] = foxtra;
            verify = yankee[verify];
            verify = romeon.bind(report)(verify);
            verify = verify.Sizes;
            verify = verify.CUSTOM;
            golfie['size'] = verify;
            verify = _closure1_slot0;
            romeon = 17;
            romeon = yankee[romeon];
            backup = verify.bind(report)(romeon);
            foxtra = backup.getChannelIcon;
            romeon = entity.type;
            romeon = foxtra.bind(backup)(romeon);
            golfie['source'] = romeon;
            option = offset.bind(report)(option, golfie);
            golfie = new Array(2);
            golfie[0] = option;
            offset = _closure1_slot4;
            option = 7;
            option = yankee[option];
            option = verify.bind(report)(option);
            verify = option.Text;
            option = {'variant': 'text-md/medium', 'color': 'header-primary'};
            yankee = entity.name;
            option['children'] = yankee;
            option = offset.bind(report)(verify, option);
            golfie[1] = option;
            zuuluu['children'] = golfie;
            oscard = oscard.bind(report)(tangon, zuuluu);
            tangon = _closure1_slot4;
            zuuluu = _closure1_slot9;
            michal = {};
            michal['title'] = oscard;
            oscard = entity.description;
            michal['description'] = oscard;
            entity = entity.id;
            entity = tangon.bind(report)(zuuluu, michal, entity);
            return entity;
        };
        papara = target.bind(status)(papara);
        config['children'] = papara;
        config = cntext.bind(tangon)(record, config);
        foxtra['children'] = config;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        romeon[8] = foxtra;
        backup = _closure1_slot4;
        foxtra = {};
        foxtra = backup.bind(tangon)(sequen, foxtra);
        romeon[9] = foxtra;
        backup = _closure1_slot4;
        foxtra = {};
        sequen = ctrled[vacuum];
        sequen = output.bind(tangon)(sequen);
        config = sequen.intl;
        sequen = config.string;
        vacuum = ctrled[vacuum];
        vacuum = output.bind(tangon)(vacuum);
        vacuum = vacuum.t;
        vacuum = vacuum.w7KA8f;
        vacuum = sequen.bind(config)(vacuum);
        foxtra['sectionTitle'] = vacuum;
        result = _closure1_slot4;
        sizing = ctrled[sizing];
        sizing = output.bind(tangon)(sizing);
        output = sizing.GappedList;
        sizing = {};
        sizing['gap'] = update;
        update = source.map;
        echoed = function(argFoo, argBar) {
            tangon = _closure1_slot4;
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            entity = 7;
            entity = report[entity];
            report = undefined;
            entity = zuuluu.bind(report)(entity);
            zuuluu = entity.Text;
            entity = {'variant': 'text-md/medium', 'color': 'header-primary'};
            oscard = argFoo;
            oscard = oscard.name;
            entity['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, entity);
            tangon = _closure1_slot4;
            zuuluu = _closure1_slot9;
            michal = {};
            michal['title'] = entity;
            entity = argBar;
            entity = tangon.bind(report)(zuuluu, michal, entity);
            return entity;
        };
        echoed = update.bind(source)(echoed);
        sizing['children'] = echoed;
        sizing = result.bind(tangon)(output, sizing);
        foxtra['children'] = sizing;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        romeon[10] = foxtra;
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();