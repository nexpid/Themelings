// app/modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplateFullCard.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function() { // Original name: SectionSeparator
        entity = _closure1_slot7;
        tango = undefined;
        backup = entity.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot5;
        entity = {};
        romeo = _closure1_slot4;
        golf = _closure1_slot1;
        offset = _closure1_slot2;
        oscar = 5;
        report = offset[oscar];
        yankee = golf.bind(tango)(report);
        report = {};
        verify = 24;
        report['size'] = verify;
        yankee = romeo.bind(tango)(yankee, report);
        report = new Array(3);
        report[0] = yankee;
        foxtrot = _closure1_slot4;
        romeo = _closure1_slot3;
        yankee = {};
        backup = backup.separator;
        yankee['style'] = backup;
        yankee = foxtrot.bind(tango)(romeo, yankee);
        report[1] = yankee;
        options = _closure1_slot4;
        oscar = offset[oscar];
        golf = golf.bind(tango)(oscar);
        oscar = {};
        oscar['size'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot8 = entity;
    entity = function(argFoo) { // Original name: BenefitRow
        _fun127404: for(var _fun127404_ip = 0; ; ) switch(_fun127404_ip) {
 0:
            entity = argFoo;
            offset = entity.title;
            backup = entity.description;
            entity = _closure1_slot7;
            tango = undefined;
            kilo = entity.bind(tango)();
            zulu = _closure1_slot6;
            mike = _closure1_slot3;
            entity = {};
            report = kilo.benefitRowContainer;
            entity['style'] = report;
            golf = _closure1_slot4;
            oscar = _closure1_slot3;
            report = {};
            verify = _closure1_slot1;
            romeo = _closure1_slot2;
            options = 6;
            options = romeo[options];
            verify = verify.bind(tango)(options);
            options = {};
            options = golf.bind(tango)(verify, options);
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot6;
            golf = _closure1_slot3;
            oscar = {};
            verify = kilo.benefitTextContainer;
            oscar['style'] = verify;
            verify = new Array(2);
            verify[0] = offset;
            offset = null;
            romeo = offset != backup;
            if(!romeo) { _fun127404_ip = 204; continue _fun127404 }
 139:
            foxtrot = _closure1_slot4;
            romeo = _closure1_slot0;
            sizing = _closure1_slot2;
            yankee = 7;
            yankee = sizing[yankee];
            yankee = romeo.bind(tango)(yankee);
            romeo = yankee.Text;
            yankee = {'style': null, 'variant': 'text-sm/normal', 'color': 'interactive-normal'};
            kilo = kilo.benefitDescription;
            yankee['style'] = kilo;
            yankee['children'] = backup;
            offset = foxtrot.bind(tango)(romeo, yankee);
 204:
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot9 = entity;
    entity = function(argFoo) { // Original name: BenefitSection
        entity = argFoo;
        yankee = entity.sectionTitle;
        oscar = entity.children;
        tango = _closure1_slot6;
        zulu = _closure1_slot5;
        mike = {};
        verify = _closure1_slot4;
        options = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 8;
        report = offset[entity];
        entity = undefined;
        report = options.bind(entity)(report);
        options = report.SectionTitle;
        report = {};
        report['children'] = yankee;
        options = verify.bind(entity)(options, report);
        report = new Array(3);
        report[0] = options;
        verify = _closure1_slot4;
        options = _closure1_slot1;
        golf = 5;
        golf = offset[golf];
        options = options.bind(entity)(golf);
        golf = {};
        offset = 14;
        golf['size'] = offset;
        golf = verify.bind(entity)(options, golf);
        report[1] = golf;
        report[2] = oscar;
        mike['children'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    var _closure1_slot10 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    offset = 2;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot5 = tango;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'backgroundColor': null, 'flex': 1, 'padding': 16};
    yankee = 4;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtrot;
    tango['container'] = verify;
    verify = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.HEADER_PRIMARY;
    verify['color'] = foxtrot;
    tango['subscriptionPlanTextStyle'] = verify;
    verify = {'color': null, 'paddingTop': 16, 'paddingBottom': 24};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.TEXT_NORMAL;
    verify['color'] = foxtrot;
    foxtrot = 24;
    tango['descriptionPlanTextStyle'] = verify;
    verify = {};
    verify['paddingTop'] = foxtrot;
    tango['content'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    tango['headerText'] = verify;
    verify = {'width': 3, 'height': 3, 'borderRadius': 1.5, 'backgroundColor': null, 'marginHorizontal': 8};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.INTERACTIVE_NORMAL;
    verify['backgroundColor'] = foxtrot;
    tango['headerDot'] = verify;
    verify = {'borderBottomWidth': 1, 'marginLeft': 4294967280, 'marginRight': 4294967280};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_MODIFIER_HOVER;
    verify['borderColor'] = yankee;
    tango['separator'] = verify;
    verify = {'flexDirection': 'row', 'justifyContent': 'flex-start'};
    tango['benefitRowContainer'] = verify;
    verify = {'flex': 1, 'justifyContent': 'center', 'marginLeft': 16};
    tango['benefitTextContainer'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tango['benefitDescription'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    tango['channelTitle'] = verify;
    verify = {'width': 16, 'height': 16, 'marginEnd': 8};
    tango['channelIcon'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 18;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplateFullCard.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildRoleSubscriptionTierTemplateFullCard
        entity = argFoo;
        update = entity.template;
        sizing = entity.guildId;
        foxtrot = entity.handleSelectTemplateInPreview;
        entity = _closure1_slot7;
        tango = undefined;
        romeo = entity.bind(tango)();
        var _closure2_slot0 = romeo;
        backup = _closure1_slot1;
        control = _closure1_slot2;
        entity = 9;
        entity = control[entity];
        entity = backup.bind(tango)(entity);
        entity = entity.bind(tango)();
        kilo = entity.bottom;
        mike = update.listings;
        entity = 0;
        entity = mike[entity];
        config = entity.image;
        sequence = entity.name;
        status = entity.channels;
        source = entity.additional_perks;
        record = entity.role_color;
        zulu = _closure1_slot4;
        output = _closure1_slot0;
        entity = 10;
        entity = control[entity];
        entity = output.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {'scrollable': true, 'startExpanded': true};
        yankee = true;
        golf = _closure1_slot6;
        oscar = _closure1_slot3;
        report = {};
        options = romeo.container;
        report['style'] = options;
        offset = _closure1_slot4;
        options = 11;
        options = control[options];
        options = output.bind(tango)(options);
        verify = options.GuildRoleSubscriptionTierTemplateBasicInfo;
        options = {};
        options['template'] = update;
        options['handleSelectTemplateInPreview'] = foxtrot;
        foxtrot = romeo.subscriptionPlanTextStyle;
        options['subscriptionPlanTextStyle'] = foxtrot;
        foxtrot = romeo.descriptionPlanTextStyle;
        options['descriptionTextStyle'] = foxtrot;
        options['closeActionSheet'] = yankee;
        verify = offset.bind(tango)(verify, options);
        options = new Array(3);
        options[0] = verify;
        yankee = _closure1_slot4;
        offset = _closure1_slot3;
        verify = {};
        foxtrot = romeo.separator;
        verify['style'] = foxtrot;
        verify = yankee.bind(tango)(offset, verify);
        options[1] = verify;
        yankee = _closure1_slot6;
        verify = 12;
        verify = control[verify];
        verify = output.bind(tango)(verify);
        offset = verify.BottomSheetScrollView;
        verify = {};
        foxtrot = false;
        verify['scrollsToTop'] = foxtrot;
        romeo = romeo.content;
        verify['style'] = romeo;
        romeo = {};
        foxtrot = 32;
        foxtrot = foxtrot + kilo;
        romeo['paddingBottom'] = foxtrot;
        verify['contentContainerStyle'] = romeo;
        update = _closure1_slot4;
        kilo = 7;
        romeo = control[kilo];
        romeo = output.bind(tango)(romeo);
        foxtrot = romeo.Text;
        romeo = {'variant': 'text-sm/bold', 'color': 'text-normal'};
        vacuum = {};
        target = 'uppercase';
        vacuum['textTransform'] = target;
        romeo['style'] = vacuum;
        vacuum = 13;
        context = control[vacuum];
        context = output.bind(tango)(context);
        sierra = context.intl;
        papa = sierra.string;
        context = control[vacuum];
        context = output.bind(tango)(context);
        context = context.t;
        context = context.CjC5XV;
        context = papa.bind(sierra)(context);
        romeo['children'] = context;
        foxtrot = update.bind(tango)(foxtrot, romeo);
        romeo = new Array(11);
        romeo[0] = foxtrot;
        papa = _closure1_slot4;
        foxtrot = 5;
        update = control[foxtrot];
        context = backup.bind(tango)(update);
        update = {};
        sierra = 4;
        update['size'] = sierra;
        update = papa.bind(tango)(context, update);
        romeo[1] = update;
        papa = _closure1_slot4;
        update = control[kilo];
        update = output.bind(tango)(update);
        context = update.Text;
        update = {'variant': 'text-sm/normal', 'color': 'text-muted'};
        sierra = control[vacuum];
        sierra = output.bind(tango)(sierra);
        whiskey = sierra.intl;
        lima = whiskey.string;
        sierra = control[vacuum];
        sierra = output.bind(tango)(sierra);
        sierra = sierra.t;
        sierra = sierra.bCb3c3;
        sierra = lima.bind(whiskey)(sierra);
        update['children'] = sierra;
        update = papa.bind(tango)(context, update);
        romeo[2] = update;
        papa = _closure1_slot4;
        update = control[foxtrot];
        context = backup.bind(tango)(update);
        update = {};
        sierra = 24;
        update['size'] = sierra;
        update = papa.bind(tango)(context, update);
        romeo[3] = update;
        context = _closure1_slot4;
        kilo = control[kilo];
        kilo = output.bind(tango)(kilo);
        update = kilo.Text;
        kilo = {'variant': 'text-xs/bold', 'color': 'header-secondary'};
        papa = {};
        papa['textTransform'] = target;
        kilo['style'] = papa;
        papa = control[vacuum];
        papa = output.bind(tango)(papa);
        sierra = papa.intl;
        target = sierra.string;
        papa = control[vacuum];
        papa = output.bind(tango)(papa);
        papa = papa.t;
        papa = papa.ZKyfEh;
        papa = target.bind(sierra)(papa);
        kilo['children'] = papa;
        kilo = context.bind(tango)(update, kilo);
        romeo[4] = kilo;
        kilo = _closure1_slot4;
        foxtrot = control[foxtrot];
        backup = backup.bind(tango)(foxtrot);
        foxtrot = {};
        update = 8;
        foxtrot['size'] = update;
        foxtrot = kilo.bind(tango)(backup, foxtrot);
        romeo[5] = foxtrot;
        kilo = _closure1_slot4;
        update = 14;
        foxtrot = control[update];
        foxtrot = output.bind(tango)(foxtrot);
        backup = foxtrot.GuildRoleSubscriptionRolePreview;
        foxtrot = {};
        foxtrot['roleColor'] = record;
        foxtrot['roleImage'] = config;
        foxtrot['roleName'] = sequence;
        foxtrot['guildId'] = sizing;
        foxtrot = kilo.bind(tango)(backup, foxtrot);
        romeo[6] = foxtrot;
        backup = _closure1_slot4;
        sequence = _closure1_slot8;
        foxtrot = {};
        foxtrot = backup.bind(tango)(sequence, foxtrot);
        romeo[7] = foxtrot;
        backup = _closure1_slot4;
        kilo = _closure1_slot10;
        foxtrot = {};
        sizing = control[vacuum];
        sizing = output.bind(tango)(sizing);
        record = sizing.intl;
        config = record.string;
        sizing = control[vacuum];
        sizing = output.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.Ofvpfn;
        sizing = config.bind(record)(sizing);
        foxtrot['sectionTitle'] = sizing;
        context = _closure1_slot4;
        sizing = 15;
        config = control[sizing];
        config = output.bind(tango)(config);
        record = config.GappedList;
        config = {};
        config['gap'] = update;
        target = status.map;
        papa = function(argFoo) {
            entity = argFoo;
            oscar = _closure1_slot6;
            tango = _closure1_slot3;
            zulu = {};
            foxtrot = _closure2_slot0;
            report = foxtrot.channelTitle;
            zulu['style'] = report;
            offset = _closure1_slot4;
            romeo = _closure1_slot1;
            yankee = _closure1_slot2;
            verify = 16;
            golf = yankee[verify];
            report = undefined;
            options = romeo.bind(report)(golf);
            golf = {};
            foxtrot = foxtrot.channelIcon;
            golf['style'] = foxtrot;
            verify = yankee[verify];
            verify = romeo.bind(report)(verify);
            verify = verify.Sizes;
            verify = verify.CUSTOM;
            golf['size'] = verify;
            verify = _closure1_slot0;
            romeo = 17;
            romeo = yankee[romeo];
            backup = verify.bind(report)(romeo);
            foxtrot = backup.getChannelIcon;
            romeo = entity.type;
            romeo = foxtrot.bind(backup)(romeo);
            golf['source'] = romeo;
            options = offset.bind(report)(options, golf);
            golf = new Array(2);
            golf[0] = options;
            offset = _closure1_slot4;
            options = 7;
            options = yankee[options];
            options = verify.bind(report)(options);
            verify = options.Text;
            options = {'variant': 'text-md/medium', 'color': 'header-primary'};
            yankee = entity.name;
            options['children'] = yankee;
            options = offset.bind(report)(verify, options);
            golf[1] = options;
            zulu['children'] = golf;
            oscar = oscar.bind(report)(tango, zulu);
            tango = _closure1_slot4;
            zulu = _closure1_slot9;
            mike = {};
            mike['title'] = oscar;
            oscar = entity.description;
            mike['description'] = oscar;
            entity = entity.id;
            entity = tango.bind(report)(zulu, mike, entity);
            return entity;
        };
        papa = target.bind(status)(papa);
        config['children'] = papa;
        config = context.bind(tango)(record, config);
        foxtrot['children'] = config;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        romeo[8] = foxtrot;
        backup = _closure1_slot4;
        foxtrot = {};
        foxtrot = backup.bind(tango)(sequence, foxtrot);
        romeo[9] = foxtrot;
        backup = _closure1_slot4;
        foxtrot = {};
        sequence = control[vacuum];
        sequence = output.bind(tango)(sequence);
        config = sequence.intl;
        sequence = config.string;
        vacuum = control[vacuum];
        vacuum = output.bind(tango)(vacuum);
        vacuum = vacuum.t;
        vacuum = vacuum.w7KA8f;
        vacuum = sequence.bind(config)(vacuum);
        foxtrot['sectionTitle'] = vacuum;
        result = _closure1_slot4;
        sizing = control[sizing];
        sizing = output.bind(tango)(sizing);
        output = sizing.GappedList;
        sizing = {};
        sizing['gap'] = update;
        update = source.map;
        echo = function(argFoo, argBar) {
            tango = _closure1_slot4;
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            entity = 7;
            entity = report[entity];
            report = undefined;
            entity = zulu.bind(report)(entity);
            zulu = entity.Text;
            entity = {'variant': 'text-md/medium', 'color': 'header-primary'};
            oscar = argFoo;
            oscar = oscar.name;
            entity['children'] = oscar;
            entity = tango.bind(report)(zulu, entity);
            tango = _closure1_slot4;
            zulu = _closure1_slot9;
            mike = {};
            mike['title'] = entity;
            entity = argBar;
            entity = tango.bind(report)(zulu, mike, entity);
            return entity;
        };
        echo = update.bind(source)(echo);
        sizing['children'] = echo;
        sizing = result.bind(tango)(output, sizing);
        foxtrot['children'] = sizing;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        romeo[10] = foxtrot;
        verify['children'] = romeo;
        verify = yankee.bind(tango)(offset, verify);
        options[2] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();