// app/modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplatePriceReselectionActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: PriceOptionRow
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            echoed = entity.price;
            option = entity.selected;
            report = entity.onPress;
            entity = _closure1_slot11;
            tangon = undefined;
            offset = entity.bind(tangon)();
            zuuluu = _closure1_slot10;
            michal = _closure1_slot1;
            oscard = _closure1_slot2;
            entity = 8;
            entity = oscard[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            golfie = offset.rowContainer;
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = undefined;
            if(!option) { _fun00002_ip = 84; continue _fun00001 }
 78:
            golfie = offset.containerSelected;
 84:
            oscard[1] = golfie;
            entity['style'] = oscard;
            oscard = 'radio';
            entity['accessibilityRole'] = oscard;
            oscard = {};
            oscard['selected'] = option;
            entity['accessibilityState'] = oscard;
            entity['onPress'] = report;
            golfie = _closure1_slot9;
            verify = _closure1_slot1;
            oscard = _closure1_slot2;
            report = 9;
            report = oscard[report];
            oscard = verify.bind(tangon)(report);
            report = {};
            offset = offset.rowStatusIcon;
            report['style'] = offset;
            yankee = _closure1_slot2;
            if(option) { _fun00002_ip = 168; continue _fun00001 }
 159:
            option = 11;
            option = yankee[option];
            _fun00002_ip = 175; continue _fun00001;
 168:
            offset = 10;
            option = yankee[offset];
 175:
            option = verify.bind(tangon)(option);
            report['source'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot9;
            backup = _closure1_slot0;
            kiloes = _closure1_slot2;
            oscard = 12;
            oscard = kiloes[oscard];
            oscard = backup.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'text-sm/normal', 'color': 'text-normal'};
            verify = 13;
            offset = kiloes[verify];
            offset = backup.bind(tangon)(offset);
            romeon = offset.intl;
            yankee = romeon.format;
            verify = kiloes[verify];
            verify = backup.bind(tangon)(verify);
            verify = verify.t;
            offset = verify.CgmBaG;
            verify = {};
            foxtra = 14;
            foxtra = kiloes[foxtra];
            result = backup.bind(tangon)(foxtra);
            output = result.formatPrice;
            foxtra = _closure1_slot8;
            foxtra = foxtra.USD;
            foxtra = output.bind(result)(echoed, foxtra);
            verify['price'] = foxtra;
            foxtra = 15;
            foxtra = kiloes[foxtra];
            kiloes = backup.bind(tangon)(foxtra);
            backup = kiloes.formatPlanInterval;
            foxtra = {};
            sizing = _closure1_slot7;
            sizing = sizing.MONTH;
            foxtra['interval'] = sizing;
            sizing = 1;
            foxtra['interval_count'] = sizing;
            foxtra = backup.bind(kiloes)(foxtra);
            verify['interval'] = foxtra;
            verify = yankee.bind(romeon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.TouchableOpacity;
    var _closure1_slot5 = golfie;
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.SubscriptionIntervalTypes;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.CurrencyCodes;
    var _closure1_slot8 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 7;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    romeon = 24;
    verify['padding'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderTopLeftRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderTopRightRadius'] = romeon;
    tangon['container'] = verify;
    verify = {'backgroundColor': null, 'borderRadius': null, 'flexDirection': 'row', 'alignSelf': 'stretch', 'justifyContent': 'flex-start', 'padding': 12, 'marginBottom': 12, 'borderWidth': 1};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.INTERACTIVE_MUTED;
    verify['borderColor'] = romeon;
    tangon['rowContainer'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = romeon;
    tangon['containerSelected'] = verify;
    verify = {'height': 20, 'width': 20, 'marginRight': 12};
    tangon['rowStatusIcon'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['confirmButton'] = verify;
    verify = {};
    offset = 'center';
    verify['alignSelf'] = offset;
    tangon['backToTemplates'] = verify;
    verify = {};
    offset = 0.5;
    verify['opacity'] = offset;
    tangon['disabled'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplatePriceReselectionActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionTierTemplatePriceReselectionActionSheet
        entity = argFoo;
        target = entity.selectedTemplate;
        var _closure2_slot0 = target;
        michal = entity.handleCreateFromTemplate;
        var _closure2_slot1 = michal;
        sequen = entity.newPricesToPick;
        var _closure2_slot2 = sequen;
        entity = _closure1_slot11;
        tangon = undefined;
        output = entity.bind(tangon)();
        foxtra = _closure1_slot1;
        ctrled = _closure1_slot2;
        entity = 16;
        entity = ctrled[entity];
        entity = foxtra.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        romeon = entity.bottom;
        michal = _closure1_slot4;
        entity = michal.useState;
        status = 0;
        zuuluu = entity.bind(michal)(status);
        michal = _closure1_slot3;
        entity = 2;
        michal = michal.bind(tangon)(zuuluu, entity);
        entity = michal[status];
        var _closure2_slot3 = entity;
        entity = 1;
        entity = michal[entity];
        var _closure2_slot4 = entity;
        zuuluu = _closure1_slot9;
        source = _closure1_slot0;
        entity = 17;
        entity = ctrled[entity];
        entity = source.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {'backdropOpacity': 0.8, 'startExpanded': true};
        golfie = _closure1_slot9;
        oscard = _closure1_slot6;
        report = {};
        option = output.container;
        report['style'] = option;
        offset = _closure1_slot10;
        option = 18;
        option = ctrled[option];
        option = source.bind(tangon)(option);
        verify = option.BottomSheetScrollView;
        option = {};
        yankee = {};
        yankee['paddingBottom'] = romeon;
        option['contentContainerStyle'] = yankee;
        backup = _closure1_slot9;
        kiloes = 12;
        yankee = ctrled[kiloes];
        yankee = source.bind(tangon)(yankee);
        romeon = yankee.Text;
        yankee = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
        result = 13;
        update = ctrled[result];
        update = source.bind(tangon)(update);
        record = update.intl;
        config = record.format;
        update = ctrled[result];
        update = source.bind(tangon)(update);
        update = update.t;
        vacuum = update.5WZ9Cg;
        update = {};
        cntext = target.listings;
        cntext = cntext[status];
        cntext = cntext.name;
        update['tierName'] = cntext;
        update = config.bind(record)(vacuum, update);
        yankee['children'] = update;
        romeon = backup.bind(tangon)(romeon, yankee);
        yankee = new Array(9);
        yankee[0] = romeon;
        vacuum = _closure1_slot9;
        romeon = 19;
        backup = ctrled[romeon];
        update = foxtra.bind(tangon)(backup);
        backup = {};
        backup['size'] = kiloes;
        backup = vacuum.bind(tangon)(update, backup);
        yankee[1] = backup;
        vacuum = _closure1_slot9;
        backup = ctrled[kiloes];
        backup = source.bind(tangon)(backup);
        update = backup.Text;
        backup = {'variant': 'text-sm/normal', 'color': 'text-normal'};
        config = ctrled[result];
        config = source.bind(tangon)(config);
        papara = config.intl;
        cntext = papara.format;
        config = ctrled[result];
        config = source.bind(tangon)(config);
        config = config.t;
        record = config.5i7UhY;
        config = {};
        sierra = 14;
        sierra = ctrled[sierra];
        limora = source.bind(tangon)(sierra);
        sierra = limora.formatPrice;
        target = target.listings;
        target = target[status];
        status = target.price_tier;
        target = _closure1_slot8;
        target = target.USD;
        target = sierra.bind(limora)(status, target);
        config['price'] = target;
        config = cntext.bind(papara)(record, config);
        backup['children'] = config;
        backup = vacuum.bind(tangon)(update, backup);
        yankee[2] = backup;
        config = _closure1_slot9;
        backup = ctrled[romeon];
        vacuum = foxtra.bind(tangon)(backup);
        backup = {};
        update = 24;
        backup['size'] = update;
        backup = config.bind(tangon)(vacuum, backup);
        yankee[3] = backup;
        vacuum = sequen.map;
        backup = function(argFoo, argBar) {
            report = argFoo;
            golfie = argBar;
            var _closure3_slot0 = golfie;
            tangon = _closure1_slot9;
            zuuluu = _closure1_slot12;
            michal = {};
            michal['price'] = report;
            oscard = _closure2_slot3;
            oscard = golfie === oscard;
            michal['selected'] = oscard;
            entity = function() { // Original name: onPress
                zuuluu = _closure2_slot4;
                michal = _closure3_slot0;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal['onPress'] = entity;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal, report);
            return entity;
        };
        backup = vacuum.bind(sequen)(backup);
        yankee[4] = backup;
        sequen = _closure1_slot9;
        backup = ctrled[romeon];
        vacuum = foxtra.bind(tangon)(backup);
        backup = {};
        config = 36;
        backup['size'] = config;
        backup = sequen.bind(tangon)(vacuum, backup);
        yankee[5] = backup;
        sequen = _closure1_slot9;
        backup = 20;
        backup = ctrled[backup];
        vacuum = foxtra.bind(tangon)(backup);
        backup = {};
        config = 'Confirm New Price';
        backup['text'] = config;
        config = output.confirmButton;
        backup['style'] = config;
        config = function() { // Original name: onPress
            tangon = _closure2_slot1;
            zuuluu = {};
            report = _closure2_slot0;
            option = zuuluu;
            golfie = report;
            entity = copyDataProperties(option, golfie);
            entity = {};
            oscard = report.listings;
            report = 0;
            golfie = oscard[report];
            option = entity;
            report = copyDataProperties(option, golfie);
            report = _closure2_slot2;
            michal = _closure2_slot3;
            report = report[michal];
            michal = 'price_tier';
            entity[michal] = report;
            michal = new Array(1);
            michal[0] = entity;
            entity = 'listings';
            zuuluu[entity] = michal;
            entity = undefined;
            michal = true;
            michal = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        backup['onPress'] = config;
        backup = sequen.bind(tangon)(vacuum, backup);
        yankee[6] = backup;
        backup = _closure1_slot9;
        romeon = ctrled[romeon];
        foxtra = foxtra.bind(tangon)(romeon);
        romeon = {};
        romeon['size'] = update;
        romeon = backup.bind(tangon)(foxtra, romeon);
        yankee[7] = romeon;
        backup = _closure1_slot9;
        foxtra = _closure1_slot5;
        romeon = {};
        echoed = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 21;
            michal = michal[entity];
            entity = undefined;
            michal = zuuluu.bind(entity)(michal);
            entity = michal.hideActionSheet;
            entity = entity.bind(michal)();
            return entity;
        };
        romeon['onPress'] = echoed;
        output = output.backToTemplates;
        romeon['style'] = output;
        output = 0.5;
        romeon['activeOpacity'] = output;
        output = _closure1_slot9;
        kiloes = ctrled[kiloes];
        kiloes = source.bind(tangon)(kiloes);
        sizing = kiloes.Text;
        kiloes = {'variant': 'text-sm/semibold', 'color': 'interactive-active'};
        echoed = ctrled[result];
        echoed = source.bind(tangon)(echoed);
        update = echoed.intl;
        echoed = update.string;
        result = ctrled[result];
        result = source.bind(tangon)(result);
        result = result.t;
        result = result.h26VOD;
        result = echoed.bind(update)(result);
        kiloes['children'] = result;
        kiloes = output.bind(tangon)(sizing, kiloes);
        romeon['children'] = kiloes;
        romeon = backup.bind(tangon)(foxtra, romeon);
        yankee[8] = romeon;
        option['children'] = yankee;
        option = offset.bind(tangon)(verify, option);
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();