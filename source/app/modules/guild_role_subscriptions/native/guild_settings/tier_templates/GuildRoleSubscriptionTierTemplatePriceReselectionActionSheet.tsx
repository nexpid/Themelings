// app/modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplatePriceReselectionActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: PriceOptionRow
        _fun127424: for(var _fun127424_ip = 0; ; ) switch(_fun127424_ip) {
 0:
            entity = argFoo;
            echo = entity.price;
            options = entity.selected;
            report = entity.onPress;
            entity = _closure1_slot11;
            tango = undefined;
            offset = entity.bind(tango)();
            zulu = _closure1_slot10;
            mike = _closure1_slot1;
            oscar = _closure1_slot2;
            entity = 8;
            entity = oscar[entity];
            mike = mike.bind(tango)(entity);
            entity = {};
            golf = offset.rowContainer;
            oscar = new Array(2);
            oscar[0] = golf;
            golf = undefined;
            if(!options) { _fun127424_ip = 84; continue _fun127424 }
 78:
            golf = offset.containerSelected;
 84:
            oscar[1] = golf;
            entity['style'] = oscar;
            oscar = 'radio';
            entity['accessibilityRole'] = oscar;
            oscar = {};
            oscar['selected'] = options;
            entity['accessibilityState'] = oscar;
            entity['onPress'] = report;
            golf = _closure1_slot9;
            verify = _closure1_slot1;
            oscar = _closure1_slot2;
            report = 9;
            report = oscar[report];
            oscar = verify.bind(tango)(report);
            report = {};
            offset = offset.rowStatusIcon;
            report['style'] = offset;
            yankee = _closure1_slot2;
            if(options) { _fun127424_ip = 168; continue _fun127424 }
 159:
            options = 11;
            options = yankee[options];
            _fun127424_ip = 175; continue _fun127424;
 168:
            offset = 10;
            options = yankee[offset];
 175:
            options = verify.bind(tango)(options);
            report['source'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot9;
            backup = _closure1_slot0;
            kilo = _closure1_slot2;
            oscar = 12;
            oscar = kilo[oscar];
            oscar = backup.bind(tango)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'text-sm/normal', 'color': 'text-normal'};
            verify = 13;
            offset = kilo[verify];
            offset = backup.bind(tango)(offset);
            romeo = offset.intl;
            yankee = romeo.format;
            verify = kilo[verify];
            verify = backup.bind(tango)(verify);
            verify = verify.t;
            offset = verify.CgmBaG;
            verify = {};
            foxtrot = 14;
            foxtrot = kilo[foxtrot];
            result = backup.bind(tango)(foxtrot);
            output = result.formatPrice;
            foxtrot = _closure1_slot8;
            foxtrot = foxtrot.USD;
            foxtrot = output.bind(result)(echo, foxtrot);
            verify['price'] = foxtrot;
            foxtrot = 15;
            foxtrot = kilo[foxtrot];
            kilo = backup.bind(tango)(foxtrot);
            backup = kilo.formatPlanInterval;
            foxtrot = {};
            sizing = _closure1_slot7;
            sizing = sizing.MONTH;
            foxtrot['interval'] = sizing;
            sizing = 1;
            foxtrot['interval_count'] = sizing;
            foxtrot = backup.bind(kilo)(foxtrot);
            verify['interval'] = foxtrot;
            verify = yankee.bind(romeo)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.TouchableOpacity;
    var _closure1_slot5 = golf;
    tango = tango.View;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.SubscriptionIntervalTypes;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.CurrencyCodes;
    var _closure1_slot8 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot9 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot10 = tango;
    tango = 6;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 7;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeo;
    romeo = 24;
    verify['padding'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.md;
    verify['borderTopLeftRadius'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.md;
    verify['borderTopRightRadius'] = romeo;
    tango['container'] = verify;
    verify = {'backgroundColor': null, 'borderRadius': null, 'flexDirection': 'row', 'alignSelf': 'stretch', 'justifyContent': 'flex-start', 'padding': 12, 'marginBottom': 12, 'borderWidth': 1};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderRadius'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.INTERACTIVE_MUTED;
    verify['borderColor'] = romeo;
    tango['rowContainer'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = romeo;
    tango['containerSelected'] = verify;
    verify = {'height': 20, 'width': 20, 'marginRight': 12};
    tango['rowStatusIcon'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tango['confirmButton'] = verify;
    verify = {};
    offset = 'center';
    verify['alignSelf'] = offset;
    tango['backToTemplates'] = verify;
    verify = {};
    offset = 0.5;
    verify['opacity'] = offset;
    tango['disabled'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot11 = tango;
    tango = 22;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_role_subscriptions/native/guild_settings/tier_templates/GuildRoleSubscriptionTierTemplatePriceReselectionActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildRoleSubscriptionTierTemplatePriceReselectionActionSheet
        entity = argFoo;
        target = entity.selectedTemplate;
        var _closure2_slot0 = target;
        mike = entity.handleCreateFromTemplate;
        var _closure2_slot1 = mike;
        sequence = entity.newPricesToPick;
        var _closure2_slot2 = sequence;
        entity = _closure1_slot11;
        tango = undefined;
        output = entity.bind(tango)();
        foxtrot = _closure1_slot1;
        control = _closure1_slot2;
        entity = 16;
        entity = control[entity];
        entity = foxtrot.bind(tango)(entity);
        entity = entity.bind(tango)();
        romeo = entity.bottom;
        mike = _closure1_slot4;
        entity = mike.useState;
        status = 0;
        zulu = entity.bind(mike)(status);
        mike = _closure1_slot3;
        entity = 2;
        mike = mike.bind(tango)(zulu, entity);
        entity = mike[status];
        var _closure2_slot3 = entity;
        entity = 1;
        entity = mike[entity];
        var _closure2_slot4 = entity;
        zulu = _closure1_slot9;
        source = _closure1_slot0;
        entity = 17;
        entity = control[entity];
        entity = source.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {'backdropOpacity': 0.8, 'startExpanded': true};
        golf = _closure1_slot9;
        oscar = _closure1_slot6;
        report = {};
        options = output.container;
        report['style'] = options;
        offset = _closure1_slot10;
        options = 18;
        options = control[options];
        options = source.bind(tango)(options);
        verify = options.BottomSheetScrollView;
        options = {};
        yankee = {};
        yankee['paddingBottom'] = romeo;
        options['contentContainerStyle'] = yankee;
        backup = _closure1_slot9;
        kilo = 12;
        yankee = control[kilo];
        yankee = source.bind(tango)(yankee);
        romeo = yankee.Text;
        yankee = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
        result = 13;
        update = control[result];
        update = source.bind(tango)(update);
        record = update.intl;
        config = record.format;
        update = control[result];
        update = source.bind(tango)(update);
        update = update.t;
        vacuum = update.5WZ9Cg;
        update = {};
        context = target.listings;
        context = context[status];
        context = context.name;
        update['tierName'] = context;
        update = config.bind(record)(vacuum, update);
        yankee['children'] = update;
        romeo = backup.bind(tango)(romeo, yankee);
        yankee = new Array(9);
        yankee[0] = romeo;
        vacuum = _closure1_slot9;
        romeo = 19;
        backup = control[romeo];
        update = foxtrot.bind(tango)(backup);
        backup = {};
        backup['size'] = kilo;
        backup = vacuum.bind(tango)(update, backup);
        yankee[1] = backup;
        vacuum = _closure1_slot9;
        backup = control[kilo];
        backup = source.bind(tango)(backup);
        update = backup.Text;
        backup = {'variant': 'text-sm/normal', 'color': 'text-normal'};
        config = control[result];
        config = source.bind(tango)(config);
        papa = config.intl;
        context = papa.format;
        config = control[result];
        config = source.bind(tango)(config);
        config = config.t;
        record = config.5i7UhY;
        config = {};
        sierra = 14;
        sierra = control[sierra];
        lima = source.bind(tango)(sierra);
        sierra = lima.formatPrice;
        target = target.listings;
        target = target[status];
        status = target.price_tier;
        target = _closure1_slot8;
        target = target.USD;
        target = sierra.bind(lima)(status, target);
        config['price'] = target;
        config = context.bind(papa)(record, config);
        backup['children'] = config;
        backup = vacuum.bind(tango)(update, backup);
        yankee[2] = backup;
        config = _closure1_slot9;
        backup = control[romeo];
        vacuum = foxtrot.bind(tango)(backup);
        backup = {};
        update = 24;
        backup['size'] = update;
        backup = config.bind(tango)(vacuum, backup);
        yankee[3] = backup;
        vacuum = sequence.map;
        backup = function(argFoo, argBar) {
            report = argFoo;
            golf = argBar;
            var _closure3_slot0 = golf;
            tango = _closure1_slot9;
            zulu = _closure1_slot12;
            mike = {};
            mike['price'] = report;
            oscar = _closure2_slot3;
            oscar = golf === oscar;
            mike['selected'] = oscar;
            entity = function() { // Original name: onPress
                zulu = _closure2_slot4;
                mike = _closure3_slot0;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            mike['onPress'] = entity;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        backup = vacuum.bind(sequence)(backup);
        yankee[4] = backup;
        sequence = _closure1_slot9;
        backup = control[romeo];
        vacuum = foxtrot.bind(tango)(backup);
        backup = {};
        config = 36;
        backup['size'] = config;
        backup = sequence.bind(tango)(vacuum, backup);
        yankee[5] = backup;
        sequence = _closure1_slot9;
        backup = 20;
        backup = control[backup];
        vacuum = foxtrot.bind(tango)(backup);
        backup = {};
        config = 'Confirm New Price';
        backup['text'] = config;
        config = output.confirmButton;
        backup['style'] = config;
        config = function() { // Original name: onPress
            tango = _closure2_slot1;
            zulu = {};
            report = _closure2_slot0;
            options = zulu;
            golf = report;
            entity = copyDataProperties(options, golf);
            entity = {};
            oscar = report.listings;
            report = 0;
            golf = oscar[report];
            options = entity;
            report = copyDataProperties(options, golf);
            report = _closure2_slot2;
            mike = _closure2_slot3;
            report = report[mike];
            mike = 'price_tier';
            entity[mike] = report;
            mike = new Array(1);
            mike[0] = entity;
            entity = 'listings';
            zulu[entity] = mike;
            entity = undefined;
            mike = true;
            mike = tango.bind(entity)(zulu, mike);
            return entity;
        };
        backup['onPress'] = config;
        backup = sequence.bind(tango)(vacuum, backup);
        yankee[6] = backup;
        backup = _closure1_slot9;
        romeo = control[romeo];
        foxtrot = foxtrot.bind(tango)(romeo);
        romeo = {};
        romeo['size'] = update;
        romeo = backup.bind(tango)(foxtrot, romeo);
        yankee[7] = romeo;
        backup = _closure1_slot9;
        foxtrot = _closure1_slot5;
        romeo = {};
        echo = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 21;
            mike = mike[entity];
            entity = undefined;
            mike = zulu.bind(entity)(mike);
            entity = mike.hideActionSheet;
            entity = entity.bind(mike)();
            return entity;
        };
        romeo['onPress'] = echo;
        output = output.backToTemplates;
        romeo['style'] = output;
        output = 0.5;
        romeo['activeOpacity'] = output;
        output = _closure1_slot9;
        kilo = control[kilo];
        kilo = source.bind(tango)(kilo);
        sizing = kilo.Text;
        kilo = {'variant': 'text-sm/semibold', 'color': 'interactive-active'};
        echo = control[result];
        echo = source.bind(tango)(echo);
        update = echo.intl;
        echo = update.string;
        result = control[result];
        result = source.bind(tango)(result);
        result = result.t;
        result = result.h26VOD;
        result = echo.bind(update)(result);
        kilo['children'] = result;
        kilo = output.bind(tango)(sizing, kilo);
        romeo['children'] = kilo;
        romeo = backup.bind(tango)(foxtrot, romeo);
        yankee[8] = romeo;
        options['children'] = yankee;
        options = offset.bind(tango)(verify, options);
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();