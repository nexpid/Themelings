// app/modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionTierArchiveOrDeleteActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.TouchableOpacity;
    var _closure1_slot3 = golfie;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    romeon = 24;
    verify['padding'] = romeon;
    tangon['container'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['button'] = verify;
    verify = {};
    offset = 'center';
    verify['alignSelf'] = offset;
    tangon['cancel'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionTierArchiveOrDeleteActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionTierArchiveOrDeleteActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            report = entity.editStateId;
            zuuluu = entity.guildId;
            michal = entity.groupListingId;
            entity = _closure1_slot7;
            tangon = undefined;
            sizing = entity.bind(tangon)();
            foxtra = _closure1_slot1;
            vacuum = _closure1_slot2;
            entity = 5;
            entity = vacuum[entity];
            entity = foxtra.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            yankee = entity.bottom;
            entity = 6;
            entity = vacuum[entity];
            golfie = foxtra.bind(tangon)(entity);
            entity = null;
            oscard = entity != michal;
            entity = 'group listing id cannot be null';
            entity = golfie.bind(tangon)(oscard, entity);
            entity = 7;
            entity = vacuum[entity];
            entity = foxtra.bind(tangon)(entity);
            entity = entity.bind(tangon)(zuuluu, michal, report);
            romeon = entity.headerText;
            sequen = entity.buttonText;
            config = entity.descriptionText;
            update = entity.handleArchiveOrDelete;
            result = entity.deleting;
            echoed = entity.archiving;
            zuuluu = _closure1_slot5;
            ctrled = _closure1_slot0;
            entity = 8;
            entity = vacuum[entity];
            entity = ctrled.bind(tangon)(entity);
            michal = entity.BottomSheet;
            entity = {};
            report = 0.8;
            entity['backdropOpacity'] = report;
            oscard = _closure1_slot4;
            report = {};
            golfie = sizing.container;
            report['style'] = golfie;
            verify = _closure1_slot6;
            golfie = 9;
            golfie = vacuum[golfie];
            golfie = ctrled.bind(tangon)(golfie);
            option = golfie.BottomSheetScrollView;
            golfie = {};
            offset = {};
            offset['paddingBottom'] = yankee;
            golfie['contentContainerStyle'] = offset;
            backup = 10;
            offset = vacuum[backup];
            offset = ctrled.bind(tangon)(offset);
            yankee = offset.Text;
            offset = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            offset['children'] = romeon;
            yankee = zuuluu.bind(tangon)(yankee, offset);
            offset = new Array(7);
            offset[0] = yankee;
            yankee = 11;
            romeon = vacuum[yankee];
            output = foxtra.bind(tangon)(romeon);
            romeon = {};
            source = 12;
            romeon['size'] = source;
            romeon = zuuluu.bind(tangon)(output, romeon);
            offset[1] = romeon;
            romeon = vacuum[backup];
            romeon = ctrled.bind(tangon)(romeon);
            output = romeon.Text;
            romeon = {'variant': 'text-sm/normal', 'color': 'text-normal'};
            romeon['children'] = config;
            romeon = zuuluu.bind(tangon)(output, romeon);
            offset[2] = romeon;
            romeon = vacuum[yankee];
            config = foxtra.bind(tangon)(romeon);
            romeon = {};
            output = 24;
            romeon['size'] = output;
            romeon = zuuluu.bind(tangon)(config, romeon);
            offset[3] = romeon;
            romeon = vacuum[source];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            romeon['text'] = sequen;
            sequen = sizing.button;
            romeon['style'] = sequen;
            source = vacuum[source];
            source = ctrled.bind(tangon)(source);
            source = source.ButtonColors;
            source = source.RED;
            romeon['color'] = source;
            romeon['onPress'] = update;
            if(result) { _fun00002_ip = 451; continue _fun00001 }
 448:
            result = echoed;
 451:
            romeon['disabled'] = result;
            romeon = zuuluu.bind(tangon)(foxtra, romeon);
            offset[4] = romeon;
            foxtra = _closure1_slot5;
            romeon = _closure1_slot1;
            update = _closure1_slot2;
            yankee = update[yankee];
            romeon = romeon.bind(tangon)(yankee);
            yankee = {};
            yankee['size'] = output;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[5] = yankee;
            romeon = _closure1_slot3;
            yankee = {};
            output = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 13;
                michal = michal[entity];
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                entity = michal.hideActionSheet;
                entity = entity.bind(michal)();
                return entity;
            };
            yankee['onPress'] = output;
            sizing = sizing.cancel;
            yankee['style'] = sizing;
            sizing = 0.5;
            yankee['activeOpacity'] = sizing;
            echoed = _closure1_slot0;
            backup = update[backup];
            backup = echoed.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {'variant': 'text-sm/semibold', 'color': 'interactive-active'};
            sizing = 14;
            output = update[sizing];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = update[sizing];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.ETE/oK;
            sizing = output.bind(result)(sizing);
            backup['children'] = sizing;
            backup = foxtra.bind(tangon)(kiloes, backup);
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[6] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();