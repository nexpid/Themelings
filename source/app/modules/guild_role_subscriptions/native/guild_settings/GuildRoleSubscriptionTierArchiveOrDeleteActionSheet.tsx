// app/modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionTierArchiveOrDeleteActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.TouchableOpacity;
    var _closure1_slot3 = golf;
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 4;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeo;
    romeo = 24;
    verify['padding'] = romeo;
    tango['container'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tango['button'] = verify;
    verify = {};
    offset = 'center';
    verify['alignSelf'] = offset;
    tango['cancel'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionTierArchiveOrDeleteActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildRoleSubscriptionTierArchiveOrDeleteActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            report = entity.editStateId;
            zulu = entity.guildId;
            mike = entity.groupListingId;
            entity = _closure1_slot7;
            tango = undefined;
            sizing = entity.bind(tango)();
            foxtrot = _closure1_slot1;
            vacuum = _closure1_slot2;
            entity = 5;
            entity = vacuum[entity];
            entity = foxtrot.bind(tango)(entity);
            entity = entity.bind(tango)();
            yankee = entity.bottom;
            entity = 6;
            entity = vacuum[entity];
            golf = foxtrot.bind(tango)(entity);
            entity = null;
            oscar = entity != mike;
            entity = 'group listing id cannot be null';
            entity = golf.bind(tango)(oscar, entity);
            entity = 7;
            entity = vacuum[entity];
            entity = foxtrot.bind(tango)(entity);
            entity = entity.bind(tango)(zulu, mike, report);
            romeo = entity.headerText;
            sequence = entity.buttonText;
            config = entity.descriptionText;
            update = entity.handleArchiveOrDelete;
            result = entity.deleting;
            echo = entity.archiving;
            zulu = _closure1_slot5;
            control = _closure1_slot0;
            entity = 8;
            entity = vacuum[entity];
            entity = control.bind(tango)(entity);
            mike = entity.BottomSheet;
            entity = {};
            report = 0.8;
            entity['backdropOpacity'] = report;
            oscar = _closure1_slot4;
            report = {};
            golf = sizing.container;
            report['style'] = golf;
            verify = _closure1_slot6;
            golf = 9;
            golf = vacuum[golf];
            golf = control.bind(tango)(golf);
            options = golf.BottomSheetScrollView;
            golf = {};
            offset = {};
            offset['paddingBottom'] = yankee;
            golf['contentContainerStyle'] = offset;
            backup = 10;
            offset = vacuum[backup];
            offset = control.bind(tango)(offset);
            yankee = offset.Text;
            offset = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            offset['children'] = romeo;
            yankee = zulu.bind(tango)(yankee, offset);
            offset = new Array(7);
            offset[0] = yankee;
            yankee = 11;
            romeo = vacuum[yankee];
            output = foxtrot.bind(tango)(romeo);
            romeo = {};
            source = 12;
            romeo['size'] = source;
            romeo = zulu.bind(tango)(output, romeo);
            offset[1] = romeo;
            romeo = vacuum[backup];
            romeo = control.bind(tango)(romeo);
            output = romeo.Text;
            romeo = {'variant': 'text-sm/normal', 'color': 'text-normal'};
            romeo['children'] = config;
            romeo = zulu.bind(tango)(output, romeo);
            offset[2] = romeo;
            romeo = vacuum[yankee];
            config = foxtrot.bind(tango)(romeo);
            romeo = {};
            output = 24;
            romeo['size'] = output;
            romeo = zulu.bind(tango)(config, romeo);
            offset[3] = romeo;
            romeo = vacuum[source];
            foxtrot = foxtrot.bind(tango)(romeo);
            romeo = {};
            romeo['text'] = sequence;
            sequence = sizing.button;
            romeo['style'] = sequence;
            source = vacuum[source];
            source = control.bind(tango)(source);
            source = source.ButtonColors;
            source = source.RED;
            romeo['color'] = source;
            romeo['onPress'] = update;
            if(result) { _fun00002_ip = 443; continue _fun00001 }
 440:
            result = echo;
 443:
            romeo['disabled'] = result;
            romeo = zulu.bind(tango)(foxtrot, romeo);
            offset[4] = romeo;
            foxtrot = _closure1_slot5;
            romeo = _closure1_slot1;
            update = _closure1_slot2;
            yankee = update[yankee];
            romeo = romeo.bind(tango)(yankee);
            yankee = {};
            yankee['size'] = output;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[5] = yankee;
            romeo = _closure1_slot3;
            yankee = {};
            output = function() { // Original name: onPress
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 13;
                mike = mike[entity];
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                entity = mike.hideActionSheet;
                entity = entity.bind(mike)();
                return entity;
            };
            yankee['onPress'] = output;
            sizing = sizing.cancel;
            yankee['style'] = sizing;
            sizing = 0.5;
            yankee['activeOpacity'] = sizing;
            echo = _closure1_slot0;
            backup = update[backup];
            backup = echo.bind(tango)(backup);
            kilo = backup.Text;
            backup = {'variant': 'text-sm/semibold', 'color': 'interactive-active'};
            sizing = 14;
            output = update[sizing];
            output = echo.bind(tango)(output);
            result = output.intl;
            output = result.string;
            sizing = update[sizing];
            sizing = echo.bind(tango)(sizing);
            sizing = sizing.t;
            sizing = sizing.ETE/oK;
            sizing = output.bind(result)(sizing);
            backup['children'] = sizing;
            backup = foxtrot.bind(tango)(kilo, backup);
            yankee['children'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[6] = yankee;
            golf['children'] = offset;
            golf = verify.bind(tango)(options, golf);
            report['children'] = golf;
            report = zulu.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();