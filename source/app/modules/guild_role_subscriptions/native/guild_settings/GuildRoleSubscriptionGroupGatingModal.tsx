// app/modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionGroupGatingModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    options = argBaz;
    golf = argCorge;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = options;
    var _closure1_slot2 = oscar;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = options.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    tango = 2;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.GuildRoleSubscriptionsTierScenes;
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot6 = tango;
    tango = 8;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionGroupGatingModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildRoleSubscriptionGroupGatingModal
        mike = _closure1_slot4;
        entity = mike.useGroupIsFullGateState;
        zulu = entity.bind(mike)();
        mike = _closure1_slot3;
        tango = undefined;
        entity = 2;
        mike = mike.bind(tango)(zulu, entity);
        entity = 0;
        options = mike[entity];
        entity = 1;
        golf = mike[entity];
        zulu = _closure1_slot6;
        oscar = _closure1_slot1;
        verify = _closure1_slot2;
        entity = 5;
        entity = verify[entity];
        mike = oscar.bind(tango)(entity);
        entity = {};
        foxtrot = _closure1_slot0;
        offset = 6;
        yankee = verify[offset];
        yankee = foxtrot.bind(tango)(yankee);
        backup = yankee.intl;
        romeo = backup.string;
        yankee = verify[offset];
        yankee = foxtrot.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.N38nND;
        yankee = romeo.bind(backup)(yankee);
        entity['title'] = yankee;
        yankee = verify[offset];
        yankee = foxtrot.bind(tango)(yankee);
        romeo = yankee.intl;
        yankee = romeo.string;
        offset = verify[offset];
        offset = foxtrot.bind(tango)(offset);
        offset = offset.t;
        offset = offset.csJWVF;
        offset = yankee.bind(romeo)(offset);
        entity['description'] = offset;
        offset = true;
        entity['canProceedToNextStep'] = offset;
        report = _closure1_slot5;
        report = report.GROUP;
        entity['nextStep'] = report;
        kilo = argFoo;
        sizing = entity;
        report = copyDataProperties(sizing, kilo);
        report = 7;
        report = verify[report];
        oscar = oscar.bind(tango)(report);
        report = {};
        report['isFullServerGating'] = options;
        report['onChange'] = golf;
        oscar = zulu.bind(tango)(oscar, report);
        report = 'children';
        entity[report] = oscar;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();