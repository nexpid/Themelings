// app/modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionGroupGatingModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = option.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildRoleSubscriptionsTierScenes;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot6 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/guild_settings/GuildRoleSubscriptionGroupGatingModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionGroupGatingModal
        michal = _closure1_slot4;
        entity = michal.useGroupIsFullGateState;
        zuuluu = entity.bind(michal)();
        michal = _closure1_slot3;
        tangon = undefined;
        entity = 2;
        michal = michal.bind(tangon)(zuuluu, entity);
        entity = 0;
        option = michal[entity];
        entity = 1;
        golfie = michal[entity];
        zuuluu = _closure1_slot6;
        oscard = _closure1_slot1;
        verify = _closure1_slot2;
        entity = 5;
        entity = verify[entity];
        michal = oscard.bind(tangon)(entity);
        entity = {};
        foxtra = _closure1_slot0;
        offset = 6;
        yankee = verify[offset];
        yankee = foxtra.bind(tangon)(yankee);
        backup = yankee.intl;
        romeon = backup.string;
        yankee = verify[offset];
        yankee = foxtra.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.N38nND;
        yankee = romeon.bind(backup)(yankee);
        entity['title'] = yankee;
        yankee = verify[offset];
        yankee = foxtra.bind(tangon)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = verify[offset];
        offset = foxtra.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.csJWVF;
        offset = yankee.bind(romeon)(offset);
        entity['description'] = offset;
        offset = true;
        entity['canProceedToNextStep'] = offset;
        report = _closure1_slot5;
        report = report.GROUP;
        entity['nextStep'] = report;
        kiloes = argFoo;
        sizing = entity;
        report = copyDataProperties(sizing, kiloes);
        report = 7;
        report = verify[report];
        oscard = oscard.bind(tangon)(report);
        report = {};
        report['isFullServerGating'] = option;
        report['onChange'] = golfie;
        oscard = zuuluu.bind(tangon)(oscard, report);
        report = 'children';
        entity[report] = oscard;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();