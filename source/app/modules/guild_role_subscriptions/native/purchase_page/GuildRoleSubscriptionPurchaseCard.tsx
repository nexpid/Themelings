// app/modules/guild_role_subscriptions/native/purchase_page/GuildRoleSubscriptionPurchaseCard.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    offset = 1;
    tangon = oscard[offset];
    tangon = golfie.bind(entity)(tangon);
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {};
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    tangon['backgroundColor'] = foxtra;
    tangon['flex'] = offset;
    golfie['container'] = tangon;
    tangon = 16;
    offset = {'padding': 16, 'paddingBottom': 24};
    golfie['header'] = offset;
    offset = {'padding': 16, 'paddingTop': 24};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtra;
    golfie['content'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center'};
    golfie['headerText'] = offset;
    offset = {'width': 3, 'height': 3, 'borderRadius': 1.5, 'backgroundColor': null, 'marginHorizontal': 8};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.INTERACTIVE_NORMAL;
    offset['backgroundColor'] = foxtra;
    golfie['headerDot'] = offset;
    offset = {'borderBottomWidth': 1, 'marginLeft': 4294967280, 'marginRight': 4294967280};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_MODIFIER_HOVER;
    offset['borderColor'] = yankee;
    golfie['seperator'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/purchase_page/GuildRoleSubscriptionPurchaseCard.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionPurchaseCard
        entity = argFoo;
        kiloes = entity.listingId;
        backup = entity.guildId;
        entity = _closure1_slot8;
        tangon = undefined;
        echoed = entity.bind(tangon)();
        output = _closure1_slot1;
        sizing = _closure1_slot3;
        entity = 6;
        entity = sizing[entity];
        entity = output.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        source = entity.bottom;
        golfie = _closure1_slot2;
        entity = 7;
        michal = sizing[entity];
        zuuluu = golfie.bind(tangon)(michal);
        michal = zuuluu.useDescription;
        michal = michal.bind(zuuluu)(kiloes);
        oscard = _closure1_slot4;
        zuuluu = 1;
        option = oscard.bind(tangon)(michal, zuuluu);
        michal = 0;
        ctrled = option[michal];
        entity = sizing[entity];
        golfie = golfie.bind(tangon)(entity);
        entity = golfie.useName;
        entity = entity.bind(golfie)(kiloes);
        entity = oscard.bind(tangon)(entity, zuuluu);
        update = entity[michal];
        foxtra = _closure1_slot0;
        offset = 8;
        entity = sizing[offset];
        michal = foxtra.bind(tangon)(entity);
        entity = michal.useFormattedSubscriptionPlan;
        vacuum = entity.bind(michal)(kiloes);
        zuuluu = _closure1_slot6;
        entity = 9;
        entity = sizing[entity];
        entity = foxtra.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {'scrollable': true, 'startExpanded': true};
        golfie = _closure1_slot7;
        oscard = _closure1_slot5;
        report = {};
        option = echoed.container;
        report['style'] = option;
        option = {};
        verify = echoed.header;
        option['style'] = verify;
        verify = {};
        yankee = echoed.headerText;
        verify['style'] = yankee;
        yankee = 10;
        romeon = sizing[yankee];
        romeon = foxtra.bind(tangon)(romeon);
        result = romeon.Text;
        romeon = {'variant': 'heading-md/semibold', 'color': 'header-primary'};
        romeon['children'] = update;
        result = zuuluu.bind(tangon)(result, romeon);
        romeon = new Array(3);
        romeon[0] = result;
        result = {};
        update = echoed.headerDot;
        result['style'] = update;
        result = zuuluu.bind(tangon)(oscard, result);
        romeon[1] = result;
        result = sizing[yankee];
        result = foxtra.bind(tangon)(result);
        update = result.Text;
        result = {'variant': 'heading-md/semibold', 'color': 'header-primary'};
        result['children'] = vacuum;
        result = zuuluu.bind(tangon)(update, result);
        romeon[2] = result;
        verify['children'] = romeon;
        romeon = golfie.bind(tangon)(oscard, verify);
        verify = new Array(5);
        verify[0] = romeon;
        romeon = 11;
        result = sizing[romeon];
        vacuum = output.bind(tangon)(result);
        result = {};
        update = 16;
        result['size'] = update;
        result = zuuluu.bind(tangon)(vacuum, result);
        verify[1] = result;
        offset = sizing[offset];
        offset = foxtra.bind(tangon)(offset);
        result = offset.TruncatedText;
        offset = {'variant': 'text-sm/normal', 'color': 'text-normal', 'lineClamp': 2};
        offset['children'] = ctrled;
        offset = zuuluu.bind(tangon)(result, offset);
        verify[2] = offset;
        offset = sizing[romeon];
        ctrled = output.bind(tangon)(offset);
        offset = {};
        result = 24;
        offset['size'] = result;
        offset = zuuluu.bind(tangon)(ctrled, offset);
        verify[3] = offset;
        offset = 12;
        offset = sizing[offset];
        ctrled = output.bind(tangon)(offset);
        offset = {};
        offset['listingId'] = kiloes;
        offset = zuuluu.bind(tangon)(ctrled, offset);
        verify[4] = offset;
        option['children'] = verify;
        verify = golfie.bind(tangon)(oscard, option);
        option = new Array(3);
        option[0] = verify;
        verify = {};
        offset = echoed.seperator;
        verify['style'] = offset;
        verify = zuuluu.bind(tangon)(oscard, verify);
        option[1] = verify;
        verify = 13;
        verify = sizing[verify];
        verify = foxtra.bind(tangon)(verify);
        offset = verify.BottomSheetScrollView;
        verify = {};
        ctrled = false;
        verify['scrollsToTop'] = ctrled;
        echoed = echoed.content;
        verify['style'] = echoed;
        echoed = {};
        update = update + source;
        echoed['paddingBottom'] = update;
        verify['contentContainerStyle'] = echoed;
        yankee = sizing[yankee];
        yankee = foxtra.bind(tangon)(yankee);
        echoed = yankee.Text;
        yankee = {'variant': 'text-sm/bold', 'color': 'text-normal'};
        update = {};
        source = 'uppercase';
        update['textTransform'] = source;
        yankee['style'] = update;
        update = 14;
        source = sizing[update];
        source = foxtra.bind(tangon)(source);
        ctrled = source.intl;
        source = ctrled.string;
        update = sizing[update];
        update = foxtra.bind(tangon)(update);
        update = update.t;
        update = update.UdEvUl;
        update = source.bind(ctrled)(update);
        yankee['children'] = update;
        echoed = zuuluu.bind(tangon)(echoed, yankee);
        yankee = new Array(3);
        yankee[0] = echoed;
        romeon = sizing[romeon];
        output = output.bind(tangon)(romeon);
        romeon = {};
        romeon['size'] = result;
        romeon = zuuluu.bind(tangon)(output, romeon);
        yankee[1] = romeon;
        romeon = 15;
        romeon = sizing[romeon];
        romeon = foxtra.bind(tangon)(romeon);
        foxtra = romeon.Content;
        romeon = {};
        romeon['listingId'] = kiloes;
        romeon['guildId'] = backup;
        romeon = zuuluu.bind(tangon)(foxtra, romeon);
        yankee[2] = romeon;
        verify['children'] = yankee;
        verify = golfie.bind(tangon)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();