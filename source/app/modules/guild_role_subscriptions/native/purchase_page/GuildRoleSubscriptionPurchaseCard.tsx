// app/modules/guild_role_subscriptions/native/purchase_page/GuildRoleSubscriptionPurchaseCard.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    golf = argCorge;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    var _closure1_slot3 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot4 = tango;
    offset = 1;
    tango = oscar[offset];
    tango = golf.bind(entity)(tango);
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    golf = {};
    tango = {};
    yankee = 5;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    tango['backgroundColor'] = foxtrot;
    tango['flex'] = offset;
    golf['container'] = tango;
    tango = 16;
    offset = {'padding': 16, 'paddingBottom': 24};
    golf['header'] = offset;
    offset = {'padding': 16, 'paddingTop': 24};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtrot;
    golf['content'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center'};
    golf['headerText'] = offset;
    offset = {'width': 3, 'height': 3, 'borderRadius': 1.5, 'backgroundColor': null, 'marginHorizontal': 8};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.INTERACTIVE_NORMAL;
    offset['backgroundColor'] = foxtrot;
    golf['headerDot'] = offset;
    offset = {'borderBottomWidth': 1, 'marginLeft': 4294967280, 'marginRight': 4294967280};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_MODIFIER_HOVER;
    offset['borderColor'] = yankee;
    golf['seperator'] = offset;
    golf = options.bind(verify)(golf);
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_role_subscriptions/native/purchase_page/GuildRoleSubscriptionPurchaseCard.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildRoleSubscriptionPurchaseCard
        entity = argFoo;
        kilo = entity.listingId;
        backup = entity.guildId;
        entity = _closure1_slot8;
        tango = undefined;
        echo = entity.bind(tango)();
        output = _closure1_slot1;
        sizing = _closure1_slot3;
        entity = 6;
        entity = sizing[entity];
        entity = output.bind(tango)(entity);
        entity = entity.bind(tango)();
        source = entity.bottom;
        golf = _closure1_slot2;
        entity = 7;
        mike = sizing[entity];
        zulu = golf.bind(tango)(mike);
        mike = zulu.useDescription;
        mike = mike.bind(zulu)(kilo);
        oscar = _closure1_slot4;
        zulu = 1;
        options = oscar.bind(tango)(mike, zulu);
        mike = 0;
        control = options[mike];
        entity = sizing[entity];
        golf = golf.bind(tango)(entity);
        entity = golf.useName;
        entity = entity.bind(golf)(kilo);
        entity = oscar.bind(tango)(entity, zulu);
        update = entity[mike];
        foxtrot = _closure1_slot0;
        offset = 8;
        entity = sizing[offset];
        mike = foxtrot.bind(tango)(entity);
        entity = mike.useFormattedSubscriptionPlan;
        vacuum = entity.bind(mike)(kilo);
        zulu = _closure1_slot6;
        entity = 9;
        entity = sizing[entity];
        entity = foxtrot.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {'scrollable': true, 'startExpanded': true};
        golf = _closure1_slot7;
        oscar = _closure1_slot5;
        report = {};
        options = echo.container;
        report['style'] = options;
        options = {};
        verify = echo.header;
        options['style'] = verify;
        verify = {};
        yankee = echo.headerText;
        verify['style'] = yankee;
        yankee = 10;
        romeo = sizing[yankee];
        romeo = foxtrot.bind(tango)(romeo);
        result = romeo.Text;
        romeo = {'variant': 'heading-md/semibold', 'color': 'header-primary'};
        romeo['children'] = update;
        result = zulu.bind(tango)(result, romeo);
        romeo = new Array(3);
        romeo[0] = result;
        result = {};
        update = echo.headerDot;
        result['style'] = update;
        result = zulu.bind(tango)(oscar, result);
        romeo[1] = result;
        result = sizing[yankee];
        result = foxtrot.bind(tango)(result);
        update = result.Text;
        result = {'variant': 'heading-md/semibold', 'color': 'header-primary'};
        result['children'] = vacuum;
        result = zulu.bind(tango)(update, result);
        romeo[2] = result;
        verify['children'] = romeo;
        romeo = golf.bind(tango)(oscar, verify);
        verify = new Array(5);
        verify[0] = romeo;
        romeo = 11;
        result = sizing[romeo];
        vacuum = output.bind(tango)(result);
        result = {};
        update = 16;
        result['size'] = update;
        result = zulu.bind(tango)(vacuum, result);
        verify[1] = result;
        offset = sizing[offset];
        offset = foxtrot.bind(tango)(offset);
        result = offset.TruncatedText;
        offset = {'variant': 'text-sm/normal', 'color': 'text-normal', 'lineClamp': 2};
        offset['children'] = control;
        offset = zulu.bind(tango)(result, offset);
        verify[2] = offset;
        offset = sizing[romeo];
        control = output.bind(tango)(offset);
        offset = {};
        result = 24;
        offset['size'] = result;
        offset = zulu.bind(tango)(control, offset);
        verify[3] = offset;
        offset = 12;
        offset = sizing[offset];
        control = output.bind(tango)(offset);
        offset = {};
        offset['listingId'] = kilo;
        offset = zulu.bind(tango)(control, offset);
        verify[4] = offset;
        options['children'] = verify;
        verify = golf.bind(tango)(oscar, options);
        options = new Array(3);
        options[0] = verify;
        verify = {};
        offset = echo.seperator;
        verify['style'] = offset;
        verify = zulu.bind(tango)(oscar, verify);
        options[1] = verify;
        verify = 13;
        verify = sizing[verify];
        verify = foxtrot.bind(tango)(verify);
        offset = verify.BottomSheetScrollView;
        verify = {};
        control = false;
        verify['scrollsToTop'] = control;
        echo = echo.content;
        verify['style'] = echo;
        echo = {};
        update = update + source;
        echo['paddingBottom'] = update;
        verify['contentContainerStyle'] = echo;
        yankee = sizing[yankee];
        yankee = foxtrot.bind(tango)(yankee);
        echo = yankee.Text;
        yankee = {'variant': 'text-sm/bold', 'color': 'text-normal'};
        update = {};
        source = 'uppercase';
        update['textTransform'] = source;
        yankee['style'] = update;
        update = 14;
        source = sizing[update];
        source = foxtrot.bind(tango)(source);
        control = source.intl;
        source = control.string;
        update = sizing[update];
        update = foxtrot.bind(tango)(update);
        update = update.t;
        update = update.UdEvUl;
        update = source.bind(control)(update);
        yankee['children'] = update;
        echo = zulu.bind(tango)(echo, yankee);
        yankee = new Array(3);
        yankee[0] = echo;
        romeo = sizing[romeo];
        output = output.bind(tango)(romeo);
        romeo = {};
        romeo['size'] = result;
        romeo = zulu.bind(tango)(output, romeo);
        yankee[1] = romeo;
        romeo = 15;
        romeo = sizing[romeo];
        romeo = foxtrot.bind(tango)(romeo);
        foxtrot = romeo.Content;
        romeo = {};
        romeo['listingId'] = kilo;
        romeo['guildId'] = backup;
        romeo = zulu.bind(tango)(foxtrot, romeo);
        yankee[2] = romeo;
        verify['children'] = yankee;
        verify = golf.bind(tango)(offset, verify);
        options[2] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();