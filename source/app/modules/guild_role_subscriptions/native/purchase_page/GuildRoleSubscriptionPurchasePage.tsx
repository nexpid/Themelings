// app/modules/guild_role_subscriptions/native/purchase_page/GuildRoleSubscriptionPurchasePage.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = function() { // Original name: Separator
        michal = _closure1_slot17;
        tangon = undefined;
        report = michal.bind(tangon)();
        zuuluu = _closure1_slot14;
        michal = _closure1_slot6;
        entity = {};
        report = report.separator;
        entity['style'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot18 = entity;
    entity = function() { // Original name: LegalDisclaimer
        tangon = _closure1_slot14;
        oscard = _closure1_slot0;
        offset = _closure1_slot3;
        entity = 9;
        entity = offset[entity];
        zuuluu = undefined;
        entity = oscard.bind(zuuluu)(entity);
        michal = entity.TextWithIOSLinkWorkaround;
        entity = {'variant': 'text-xs/normal', 'color': 'text-muted'};
        report = 10;
        golfie = offset[report];
        golfie = oscard.bind(zuuluu)(golfie);
        option = golfie.intl;
        golfie = option.format;
        report = offset[report];
        report = oscard.bind(zuuluu)(report);
        report = report.t;
        oscard = report.FSPTDA;
        report = {};
        offset = _closure1_slot13;
        offset = offset.TERMS;
        report['termsURL'] = offset;
        verify = _closure1_slot13;
        verify = verify.PAID_TERMS;
        report['paidURL'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot19 = entity;
    entity = function(argFoo) { // Original name: SocialBadge
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeon = entity.iconSource;
            foxtra = entity.text;
            report = entity.onPress;
            entity = _closure1_slot17;
            tangon = undefined;
            offset = entity.bind(tangon)();
            entity = null;
            oscard = entity != report;
            zuuluu = _closure1_slot15;
            michal = _closure1_slot5;
            entity = {};
            golfie = offset.socialBadge;
            entity['style'] = golfie;
            golfie = 1;
            if(!oscard) { _fun00002_ip = 74; continue _fun00001 }
 64:
            golfie = 0.5;
 74:
            entity['activeOpacity'] = golfie;
            entity['onPress'] = report;
            yankee = _closure1_slot14;
            verify = _closure1_slot1;
            backup = _closure1_slot3;
            golfie = 11;
            report = backup[golfie];
            verify = verify.bind(tangon)(report);
            report = {};
            report['source'] = romeon;
            romeon = offset.socialBadgeIcon;
            report['style'] = romeon;
            romeon = 'contain';
            report['resizeMode'] = romeon;
            romeon = true;
            report['disableColor'] = romeon;
            verify = yankee.bind(tangon)(verify, report);
            report = new Array(3);
            report[0] = verify;
            romeon = _closure1_slot14;
            yankee = _closure1_slot0;
            verify = 12;
            verify = backup[verify];
            verify = yankee.bind(tangon)(verify);
            yankee = verify.Text;
            verify = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            verify['children'] = foxtra;
            verify = romeon.bind(tangon)(yankee, verify);
            report[1] = verify;
            if(!oscard) { _fun00002_ip = 264; continue _fun00001 }
 209:
            verify = _closure1_slot14;
            romeon = _closure1_slot1;
            foxtra = _closure1_slot3;
            golfie = foxtra[golfie];
            option = romeon.bind(tangon)(golfie);
            golfie = {};
            yankee = 13;
            yankee = foxtra[yankee];
            yankee = romeon.bind(tangon)(yankee);
            golfie['source'] = yankee;
            offset = offset.socialBadgeArrow;
            golfie['style'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 264:
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot20 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    offset = 1;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.ActivityIndicator;
    var _closure1_slot4 = golfie;
    golfie = tangon.TouchableOpacity;
    var _closure1_slot5 = golfie;
    golfie = tangon.View;
    var _closure1_slot6 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot7 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AnalyticsLocations;
    var _closure1_slot11 = golfie;
    golfie = tangon.GuildFeatures;
    var _closure1_slot12 = golfie;
    tangon = tangon.MarketingURLs;
    var _closure1_slot13 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot14 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot15 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot16 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['flex'] = offset;
    offset = 8;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    tangon['container'] = verify;
    verify = {'aspectRatio': 4, 'width': '100%'};
    tangon['heroImage'] = verify;
    verify = {'borderWidth': 3, 'borderRadius': null, 'alignSelf': 'flex-start', 'top': 4294967261, 'left': 16, 'borderColor': null, 'position': 'absolute'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['borderColor'] = romeon;
    tangon['guildIconContainer'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    tangon['guildIcon'] = verify;
    verify = {'flex': 1, 'backgroundColor': null, 'paddingTop': 47, 'paddingHorizontal': 16, 'borderTopLeftRadius': null, 'borderTopRightRadius': null, 'marginTop': 4294967281};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderTopLeftRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderTopRightRadius'] = romeon;
    tangon['contentCard'] = verify;
    verify = {'flex': 1, 'justifyContent': 'center', 'alignItems': 'center', 'paddingBottom': 40};
    tangon['loadingContainer'] = verify;
    verify = {};
    romeon = 'row';
    verify['flexDirection'] = romeon;
    tangon['socialContainer'] = verify;
    verify = {'flexDirection': 'row', 'backgroundColor': null, 'borderRadius': null, 'paddingVertical': 4, 'paddingHorizontal': 8, 'alignItems': 'center'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xl;
    verify['borderRadius'] = romeon;
    tangon['socialBadge'] = verify;
    verify = {'height': 24, 'marginRight': 6};
    tangon['socialBadgeIcon'] = verify;
    verify = {'height': 24, 'marginLeft': 6};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.INTERACTIVE_NORMAL;
    verify['tintColor'] = romeon;
    tangon['socialBadgeArrow'] = verify;
    verify = {'width': '100%', 'height': 1, 'backgroundColor': null, 'marginVertical': 24};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_HOVER;
    verify['backgroundColor'] = romeon;
    tangon['separator'] = verify;
    verify = {'marginVertical': 64, 'alignSelf': 'center', 'backgroundColor': 'transparent'};
    tangon['moneyBirbPlaceholder'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'marginBottom': 4294967292};
    tangon['gatedChannel'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_NORMAL;
    verify['tintColor'] = offset;
    tangon['gatedChannelIcon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot17 = tangon;
    tangon = 32;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/purchase_page/GuildRoleSubscriptionPurchasePage.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionPurchasePage
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            romeon = entity.guildId;
            var _closure2_slot0 = romeon;
            michal = entity.gatedChannelId;
            var _closure2_slot1 = michal;
            tangon = undefined;
            var _closure2_slot3 = tangon;
            var _closure2_slot4 = tangon;
            entity = _closure1_slot17;
            oscard = entity.bind(tangon)();
            var _closure2_slot2 = oscard;
            zuuluu = _closure1_slot1;
            offset = _closure1_slot3;
            entity = 14;
            entity = offset[entity];
            zuuluu = zuuluu.bind(tangon)(entity);
            entity = {};
            golfie = true;
            entity['forceRestore'] = golfie;
            entity = zuuluu.bind(tangon)(entity);
            verify = _closure1_slot0;
            entity = 15;
            zuuluu = offset[entity];
            golfie = verify.bind(tangon)(zuuluu);
            zuuluu = golfie.useGroupListingsForGuild;
            golfie = zuuluu.bind(golfie)(romeon);
            zuuluu = 0;
            golfie = golfie[zuuluu];
            update = 16;
            zuuluu = offset[update];
            option = verify.bind(tangon)(zuuluu);
            zuuluu = option.useGroupListingsFetchContext;
            option = zuuluu.bind(option)();
            zuuluu = offset[entity];
            yankee = verify.bind(tangon)(zuuluu);
            zuuluu = yankee.useSubscriptionsSettings;
            zuuluu = zuuluu.bind(yankee)(romeon);
            yankee = 17;
            foxtra = offset[yankee];
            sizing = verify.bind(tangon)(foxtra);
            kiloes = sizing.useStateFromStores;
            foxtra = _closure1_slot10;
            backup = new Array(1);
            backup[0] = foxtra;
            foxtra = function() {
                zuuluu = _closure1_slot10;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            status = kiloes.bind(sizing)(backup, foxtra);
            entity = offset[entity];
            foxtra = verify.bind(tangon)(entity);
            offset = foxtra.useSubscriptionListingsForGroup;
            whisks = null;
            entity = whisks == golfie;
            verify = undefined;
            if(entity) { _fun00004_ip = 231; continue _fun00003 }
 226:
            verify = golfie.id;
 231:
            entity = {};
            backup = false;
            entity['includeUnpublished'] = backup;
            offset = offset.bind(foxtra)(verify, entity);
            verify = offset.map;
            entity = function(argFoo) {
                entity = argFoo;
                entity = entity.id;
                return entity;
            };
            source = verify.bind(offset)(entity);
            if(!(whisks == michal)) { _fun00004_ip = 279; continue _fun00003 }
 267:
            entity = _closure1_slot11;
            offset = entity.ROLE_SUBSCRIPTIONS_TAB;
            _fun00004_ip = 289; continue _fun00003;
 279:
            entity = _closure1_slot11;
            offset = entity.ROLE_SUBSCRIPTION_GATED_CHANNEL;
 289:
            verify = _closure1_slot1;
            foxtra = _closure1_slot3;
            entity = 18;
            entity = foxtra[entity];
            verify = verify.bind(tangon)(entity);
            entity = {};
            entity['guildId'] = romeon;
            foxtra = whisks == golfie;
            romeon = undefined;
            if(foxtra) { _fun00004_ip = 329; continue _fun00003 }
 324:
            romeon = golfie.id;
 329:
            entity['groupListingId'] = romeon;
            entity['location'] = offset;
            entity['relevantSubscriptionListingIds'] = source;
            entity = verify.bind(tangon)(entity);
            offset = _closure1_slot0;
            verify = _closure1_slot3;
            entity = verify[yankee];
            kiloes = offset.bind(tangon)(entity);
            backup = kiloes.useStateFromStores;
            entity = _closure1_slot9;
            foxtra = new Array(1);
            foxtra[0] = entity;
            romeon = new Array(1);
            romeon[0] = michal;
            entity = function() {
                zuuluu = _closure1_slot9;
                michal = zuuluu.getChannel;
                entity = _closure2_slot1;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            entity = backup.bind(kiloes)(foxtra, entity, romeon);
            _closure2_slot3 = entity;
            verify = verify[yankee];
            foxtra = offset.bind(tangon)(verify);
            romeon = foxtra.useStateFromStores;
            verify = _closure1_slot8;
            yankee = new Array(1);
            yankee[0] = verify;
            verify = function() {
                entity = _closure1_slot8;
                michal = entity.theme;
                entity = 'light';
                entity = entity === michal;
                return entity;
            };
            verify = romeon.bind(foxtra)(yankee, verify);
            romeon = _closure1_slot3;
            if(verify) { _fun00004_ip = 463; continue _fun00003 }
 454:
            verify = 20;
            verify = romeon[verify];
            _fun00004_ip = 470; continue _fun00003;
 463:
            yankee = 19;
            verify = romeon[yankee];
 470:
            yankee = offset.bind(tangon)(verify);
            if(!option) { _fun00004_ip = 1805; continue _fun00003 }
 481:
            if(!(whisks != zuuluu)) { _fun00004_ip = 1805; continue _fun00003 }
 488:
            if(!(whisks != status)) { _fun00004_ip = 1805; continue _fun00003 }
 495:
            if(!(whisks != golfie)) { _fun00004_ip = 1805; continue _fun00003 }
 502:
            option = _closure1_slot2;
            verify = _closure1_slot3;
            golfie = 21;
            golfie = verify[golfie];
            option = option.bind(tangon)(golfie);
            golfie = option.getCoverImageURI;
            offset = golfie.bind(option)(zuuluu);
            ctrled = zuuluu.description;
            verify = status.features;
            option = verify.has;
            golfie = _closure1_slot12;
            golfie = golfie.PARTNERED;
            sierra = option.bind(verify)(golfie);
            limora = zuuluu.store_page_trailer_url;
            _closure2_slot4 = limora;
            if(!(whisks != michal)) { _fun00004_ip = 584; continue _fun00003 }
 580:
            if(!(whisks == entity)) { _fun00004_ip = 643; continue _fun00003 }
 584:
            golfie = _closure1_slot0;
            option = _closure1_slot3;
            entity = 10;
            michal = option[entity];
            michal = golfie.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = option[entity];
            entity = golfie.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.mPHb19;
            sequen = michal.bind(zuuluu)(entity);
            _fun00004_ip = 717; continue _fun00003;
 643:
            michal = _closure1_slot0;
            option = _closure1_slot3;
            entity = 10;
            zuuluu = option[entity];
            zuuluu = michal.bind(tangon)(zuuluu);
            golfie = zuuluu.intl;
            zuuluu = golfie.format;
            entity = option[entity];
            entity = michal.bind(tangon)(entity);
            entity = entity.t;
            michal = entity.A1L1hY;
            entity = {};
            option = function() { // Original name: unlockHook
                tangon = _closure1_slot15;
                zuuluu = _closure1_slot6;
                michal = {};
                golfie = _closure2_slot2;
                entity = golfie.gatedChannel;
                michal['style'] = entity;
                backup = _closure1_slot14;
                yankee = _closure1_slot1;
                offset = _closure1_slot3;
                option = 22;
                report = offset[option];
                entity = undefined;
                romeon = yankee.bind(entity)(report);
                report = {};
                foxtra = 3;
                report['size'] = foxtra;
                romeon = backup.bind(entity)(romeon, report);
                report = new Array(4);
                report[0] = romeon;
                kiloes = _closure1_slot14;
                sizing = 11;
                romeon = offset[sizing];
                backup = yankee.bind(entity)(romeon);
                romeon = {};
                sizing = offset[sizing];
                sizing = yankee.bind(entity)(sizing);
                sizing = sizing.Sizes;
                sizing = sizing.SMALL_20;
                romeon['size'] = sizing;
                golfie = golfie.gatedChannelIcon;
                romeon['style'] = golfie;
                golfie = _closure1_slot0;
                sizing = 23;
                sizing = offset[sizing];
                result = golfie.bind(entity)(sizing);
                output = result.getChannelIcon;
                sizing = _closure2_slot3;
                sizing = output.bind(result)(sizing);
                romeon['source'] = sizing;
                romeon = kiloes.bind(entity)(backup, romeon);
                report[1] = romeon;
                romeon = _closure1_slot14;
                option = offset[option];
                yankee = yankee.bind(entity)(option);
                option = {};
                option['size'] = foxtra;
                option = romeon.bind(entity)(yankee, option);
                report[2] = option;
                option = _closure1_slot14;
                oscard = 12;
                oscard = offset[oscard];
                oscard = golfie.bind(entity)(oscard);
                golfie = oscard.Text;
                oscard = {'variant': 'text-xs/semibold', 'color': 'text-normal'};
                verify = _closure2_slot3;
                verify = verify.name;
                oscard['children'] = verify;
                oscard = option.bind(entity)(golfie, oscard);
                report[3] = oscard;
                michal['children'] = report;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            entity['unlockHook'] = option;
            sequen = zuuluu.bind(golfie)(michal, entity);
 717:
            zuuluu = _closure1_slot15;
            michal = _closure1_slot7;
            entity = {};
            golfie = oscard.container;
            entity['style'] = golfie;
            golfie = {};
            option = 1;
            golfie['right'] = option;
            entity['scrollIndicatorInsets'] = golfie;
            verify = _closure1_slot14;
            output = _closure1_slot1;
            vacuum = _closure1_slot3;
            romeon = 24;
            golfie = vacuum[romeon];
            option = output.bind(tangon)(golfie);
            golfie = {};
            golfie['source'] = offset;
            offset = oscard.heroImage;
            golfie['style'] = offset;
            option = verify.bind(tangon)(option, golfie);
            golfie = new Array(3);
            golfie[0] = option;
            backup = _closure1_slot15;
            foxtra = _closure1_slot6;
            offset = {};
            option = oscard.contentCard;
            offset['style'] = option;
            sizing = _closure1_slot14;
            kiloes = _closure1_slot6;
            option = {};
            verify = oscard.guildIconContainer;
            option['style'] = verify;
            record = _closure1_slot14;
            cntext = 25;
            verify = vacuum[cntext];
            config = output.bind(tangon)(verify);
            result = {};
            verify = _closure1_slot0;
            cntext = vacuum[cntext];
            cntext = verify.bind(tangon)(cntext);
            cntext = cntext.GuildIconSizes;
            cntext = cntext.XLARGE;
            result['size'] = cntext;
            result['guild'] = status;
            cntext = oscard.guildIcon;
            result['style'] = cntext;
            result = record.bind(tangon)(config, result);
            option['children'] = result;
            option = sizing.bind(tangon)(kiloes, option);
            kiloes = new Array(11);
            kiloes[0] = option;
            config = _closure1_slot14;
            result = 12;
            option = vacuum[result];
            option = verify.bind(tangon)(option);
            sizing = option.Text;
            option = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            variable40 = 10;
            record = vacuum[variable40];
            record = verify.bind(tangon)(record);
            target = record.intl;
            papara = target.format;
            record = vacuum[variable40];
            record = verify.bind(tangon)(record);
            record = record.t;
            cntext = record.mqCkpq;
            record = {};
            status = status.name;
            record['serverName'] = status;
            record = papara.bind(target)(cntext, record);
            option['children'] = record;
            option = config.bind(tangon)(sizing, option);
            kiloes[1] = option;
            config = _closure1_slot14;
            sizing = 22;
            option = vacuum[sizing];
            output = output.bind(tangon)(option);
            option = {};
            equals = 8;
            option['size'] = equals;
            option = config.bind(tangon)(output, option);
            kiloes[2] = option;
            output = _closure1_slot14;
            option = 26;
            option = vacuum[option];
            option = verify.bind(tangon)(option);
            verify = option.TruncatedText;
            option = {'variant': 'text-sm/normal', 'color': 'text-normal', 'lineClamp': 3};
            option['children'] = ctrled;
            option = output.bind(tangon)(verify, option);
            kiloes[3] = option;
            option = sierra;
            if(sierra) { _fun00004_ip = 1135; continue _fun00003 }
 1131:
            option = whisks != limora;
 1135:
            if(!option) { _fun00004_ip = 1505; continue _fun00003 }
 1141:
            ctrled = _closure1_slot15;
            output = _closure1_slot16;
            verify = {};
            record = _closure1_slot14;
            config = _closure1_slot1;
            quebec = _closure1_slot3;
            vacuum = quebec[sizing];
            config = config.bind(tangon)(vacuum);
            vacuum = {};
            vacuum['size'] = romeon;
            config = record.bind(tangon)(config, vacuum);
            vacuum = new Array(2);
            vacuum[0] = config;
            cntext = _closure1_slot14;
            record = _closure1_slot6;
            config = {};
            papara = oscard.socialContainer;
            config['style'] = papara;
            status = _closure1_slot15;
            target = _closure1_slot0;
            papara = 27;
            papara = quebec[papara];
            papara = target.bind(tangon)(papara);
            target = papara.GappedList;
            papara = {};
            papara['gap'] = equals;
            equals = sierra;
            if(!equals) { _fun00004_ip = 1346; continue _fun00003 }
 1251:
            variable36 = _closure1_slot14;
            quebec = _closure1_slot20;
            sierra = {};
            variable39 = _closure1_slot1;
            variable37 = _closure1_slot3;
            variable38 = 28;
            variable38 = variable37[variable38];
            variable38 = variable39.bind(tangon)(variable38);
            sierra['iconSource'] = variable38;
            variable41 = _closure1_slot0;
            variable38 = variable37[variable40];
            variable38 = variable41.bind(tangon)(variable38);
            variable39 = variable38.intl;
            variable38 = variable39.string;
            variable37 = variable37[variable40];
            variable37 = variable41.bind(tangon)(variable37);
            variable37 = variable37.t;
            variable37 = variable37.2MhjUV;
            variable37 = variable38.bind(variable39)(variable37);
            sierra['text'] = variable37;
            equals = variable36.bind(tangon)(quebec, sierra);
 1346:
            sierra = new Array(2);
            sierra[0] = equals;
            limora = whisks != limora;
            if(!limora) { _fun00004_ip = 1467; continue _fun00003 }
 1361:
            quebec = _closure1_slot14;
            equals = _closure1_slot20;
            whisks = {};
            variable38 = _closure1_slot1;
            variable36 = _closure1_slot3;
            variable37 = 29;
            variable37 = variable36[variable37];
            variable37 = variable38.bind(tangon)(variable37);
            whisks['iconSource'] = variable37;
            variable39 = _closure1_slot0;
            variable37 = variable36[variable40];
            variable37 = variable39.bind(tangon)(variable37);
            variable38 = variable37.intl;
            variable37 = variable38.string;
            variable36 = variable36[variable40];
            variable36 = variable39.bind(tangon)(variable36);
            variable36 = variable36.t;
            variable36 = variable36.4PGeGB;
            variable36 = variable37.bind(variable38)(variable36);
            whisks['text'] = variable36;
            variable36 = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                michal = _closure1_slot3;
                entity = 30;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.openURL;
                entity = _closure2_slot4;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            whisks['onPress'] = variable36;
            limora = quebec.bind(tangon)(equals, whisks);
 1467:
            sierra[1] = limora;
            papara['children'] = sierra;
            papara = status.bind(tangon)(target, papara);
            config['children'] = papara;
            config = cntext.bind(tangon)(record, config);
            vacuum[1] = config;
            verify['children'] = vacuum;
            option = ctrled.bind(tangon)(output, verify);
 1505:
            kiloes[4] = option;
            vacuum = _closure1_slot14;
            verify = _closure1_slot1;
            option = _closure1_slot3;
            output = option[sizing];
            ctrled = verify.bind(tangon)(output);
            output = {};
            output['size'] = update;
            output = vacuum.bind(tangon)(ctrled, output);
            kiloes[5] = output;
            vacuum = _closure1_slot14;
            ctrled = _closure1_slot19;
            output = {};
            output = vacuum.bind(tangon)(ctrled, output);
            kiloes[6] = output;
            vacuum = _closure1_slot14;
            ctrled = _closure1_slot18;
            output = {};
            output = vacuum.bind(tangon)(ctrled, output);
            kiloes[7] = output;
            vacuum = _closure1_slot14;
            output = _closure1_slot0;
            result = option[result];
            result = output.bind(tangon)(result);
            ctrled = result.Text;
            result = {'variant': 'text-xs/semibold', 'color': 'text-muted'};
            config = {};
            record = 'uppercase';
            config['textTransform'] = record;
            result['style'] = config;
            result['children'] = sequen;
            result = vacuum.bind(tangon)(ctrled, result);
            kiloes[8] = result;
            ctrled = _closure1_slot14;
            sizing = option[sizing];
            result = verify.bind(tangon)(sizing);
            sizing = {};
            sizing['size'] = romeon;
            sizing = ctrled.bind(tangon)(result, sizing);
            kiloes[9] = sizing;
            result = _closure1_slot14;
            sizing = 27;
            sizing = option[sizing];
            sizing = output.bind(tangon)(sizing);
            output = sizing.GappedList;
            sizing = {};
            sizing['gap'] = update;
            update = source.map;
            echoed = function(argFoo) {
                report = argFoo;
                tangon = _closure1_slot14;
                michal = _closure1_slot1;
                zuuluu = _closure1_slot3;
                entity = 31;
                entity = zuuluu[entity];
                zuuluu = undefined;
                michal = michal.bind(zuuluu)(entity);
                entity = {};
                entity['listingId'] = report;
                oscard = _closure2_slot0;
                entity['guildId'] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity, report);
                return entity;
            };
            echoed = update.bind(source)(echoed);
            sizing['children'] = echoed;
            sizing = result.bind(tangon)(output, sizing);
            kiloes[10] = sizing;
            offset['children'] = kiloes;
            offset = backup.bind(tangon)(foxtra, offset);
            golfie[1] = offset;
            offset = _closure1_slot14;
            option = option[romeon];
            verify = verify.bind(tangon)(option);
            option = {};
            option['source'] = yankee;
            yankee = oscard.moneyBirbPlaceholder;
            option['style'] = yankee;
            option = offset.bind(tangon)(verify, option);
            golfie[2] = option;
            entity['children'] = golfie;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
 1805:
            zuuluu = _closure1_slot14;
            michal = _closure1_slot6;
            entity = {};
            oscard = oscard.loadingContainer;
            entity['style'] = oscard;
            golfie = _closure1_slot14;
            oscard = _closure1_slot4;
            report = {};
            option = 'large';
            report['size'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();