// app/modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionTierConfirmationModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.Fragment;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    offset = {};
    tangon = 16;
    offset['paddingHorizontal'] = tangon;
    golfie['description'] = offset;
    offset = {};
    offset['marginHorizontal'] = tangon;
    golfie['coverPhotoContainer'] = offset;
    offset = {'height': 114, 'width': '100%', 'borderRadius': null, 'overflow': 'hidden'};
    yankee = 7;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.sm;
    offset['borderRadius'] = yankee;
    golfie['coverPhoto'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot11 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionTierConfirmationModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionTierConfirmationModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            report = argFoo;
            result = report.onDone;
            var _closure2_slot0 = result;
            golfie = report.isForGroupSetupModal;
            tangon = undefined;
            if(!(golfie === tangon)) { _fun00002_ip = 29; continue _fun00001 }
 27:
            golfie = false;
 29:
            romeon = null;
            zuuluu = Object.create(romeon);
            yankee = 0;
            zuuluu['onDone'] = yankee;
            zuuluu['isForGroupSetupModal'] = yankee;
            limora = {};
            sierra = report;
            status = zuuluu;
            oscard = copyDataProperties(limora, sierra, status);
            var _closure2_slot1 = tangon;
            michal = _closure1_slot11;
            output = michal.bind(tangon)();
            michal = _closure1_slot1;
            foxtra = _closure1_slot2;
            zuuluu = 8;
            zuuluu = foxtra[zuuluu];
            zuuluu = michal.bind(tangon)(zuuluu);
            backup = zuuluu.bind(tangon)();
            echoed = _closure1_slot0;
            zuuluu = 9;
            zuuluu = foxtra[zuuluu];
            option = echoed.bind(tangon)(zuuluu);
            zuuluu = option.useEditStateContext;
            zuuluu = zuuluu.bind(option)();
            offset = zuuluu.guildId;
            verify = zuuluu.editStateId;
            kiloes = _closure1_slot5;
            option = kiloes.useState;
            zuuluu = false;
            option = option.bind(kiloes)(zuuluu);
            source = _closure1_slot4;
            zuuluu = 2;
            zuuluu = source.bind(tangon)(option, zuuluu);
            option = zuuluu[yankee];
            sizing = 1;
            update = zuuluu[sizing];
            _closure2_slot1 = update;
            ctrled = _closure1_slot7;
            zuuluu = ctrled.useGroupCoverState;
            zuuluu = zuuluu.bind(ctrled)();
            zuuluu = source.bind(tangon)(zuuluu, sizing);
            record = zuuluu[yankee];
            zuuluu = ctrled.useGroupDescriptionState;
            zuuluu = zuuluu.bind(ctrled)();
            zuuluu = source.bind(tangon)(zuuluu, sizing);
            sizing = zuuluu[yankee];
            yankee = kiloes.useCallback;
            zuuluu = _closure1_slot3;
            entity = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00004_ip = 89; continue _fun00003 }
 7: // try_start_0
                        tangon = _closure2_slot1;
                        report = undefined;
                        michal = true;
                        michal = tangon.bind(report)(michal);
                        michal = _closure2_slot0;
                        michal = michal.bind(report)();
                        SaveGenerator(address=35);
 33:
                        return michal;
 35:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=3);
                        if(tangon) { _fun00004_ip = 55; continue _fun00003 }
 41: // try_end0
                        oscard = _closure2_slot1;
                        tangon = false;
                        tangon = oscard.bind(report)(tangon);
                        return report;
 55:
                        tangon = _closure2_slot1;
                        zuuluu = false;
                        zuuluu = tangon.bind(report)(zuuluu);
                        return michal;
 69: // catch_target0
                        CatchBlockStart(arg_register=1);
                        report = _closure2_slot1;
                        tangon = undefined;
                        zuuluu = false;
                        zuuluu = report.bind(tangon)(zuuluu);
                        throw michal;
 89:
                        return entity;
                    }
                };
                return entity;
            };
            zuuluu = zuuluu.bind(tangon)(entity);
            entity = new Array(2);
            entity[0] = update;
            entity[1] = result;
            yankee = yankee.bind(kiloes)(zuuluu, entity);
            zuuluu = _closure1_slot10;
            entity = 10;
            entity = foxtra[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            update = 11;
            kiloes = foxtra[update];
            kiloes = echoed.bind(tangon)(kiloes);
            source = kiloes.intl;
            result = source.string;
            kiloes = foxtra[update];
            kiloes = echoed.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.T0lZnZ;
            kiloes = result.bind(source)(kiloes);
            entity['title'] = kiloes;
            kiloes = foxtra[update];
            kiloes = echoed.bind(tangon)(kiloes);
            result = kiloes.intl;
            kiloes = result.string;
            foxtra = foxtra[update];
            foxtra = echoed.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.ltfNIi;
            foxtra = kiloes.bind(result)(foxtra);
            entity['description'] = foxtra;
            foxtra = !option;
            entity['canProceedToNextStep'] = foxtra;
            entity['nextStep'] = romeon;
            entity['onProceed'] = yankee;
            entity['submitting'] = option;
            limora = entity;
            sierra = oscard;
            oscard = copyDataProperties(limora, sierra);
            if(!golfie) { _fun00002_ip = 806; continue _fun00001 }
 421:
            yankee = _closure1_slot10;
            option = _closure1_slot9;
            oscard = {};
            foxtra = romeon != record;
            if(!foxtra) { _fun00002_ip = 635; continue _fun00001 }
 441:
            result = _closure1_slot10;
            kiloes = _closure1_slot9;
            romeon = {};
            vacuum = _closure1_slot8;
            config = _closure1_slot1;
            cntext = _closure1_slot2;
            echoed = 12;
            echoed = cntext[echoed];
            source = config.bind(tangon)(echoed);
            echoed = {};
            ctrled = backup.header;
            echoed['style'] = ctrled;
            target = _closure1_slot0;
            ctrled = cntext[update];
            ctrled = target.bind(tangon)(ctrled);
            papara = ctrled.intl;
            sequen = papara.string;
            ctrled = cntext[update];
            ctrled = target.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.3S8gAw;
            ctrled = sequen.bind(papara)(ctrled);
            echoed['children'] = ctrled;
            source = vacuum.bind(tangon)(source, echoed);
            echoed = new Array(2);
            echoed[0] = source;
            ctrled = _closure1_slot6;
            source = {};
            sequen = output.coverPhotoContainer;
            source['style'] = sequen;
            sequen = 13;
            sequen = cntext[sequen];
            config = config.bind(tangon)(sequen);
            sequen = {};
            cntext = output.coverPhoto;
            sequen['style'] = cntext;
            cntext = 'cover';
            sequen['resizeMode'] = cntext;
            sequen['source'] = record;
            sequen = vacuum.bind(tangon)(config, sequen);
            source['children'] = sequen;
            source = vacuum.bind(tangon)(ctrled, source);
            echoed[1] = source;
            romeon['children'] = echoed;
            foxtra = result.bind(tangon)(kiloes, romeon);
 635:
            romeon = new Array(3);
            romeon[0] = foxtra;
            kiloes = _closure1_slot8;
            echoed = _closure1_slot1;
            result = _closure1_slot2;
            foxtra = 12;
            foxtra = result[foxtra];
            echoed = echoed.bind(tangon)(foxtra);
            foxtra = {};
            backup = backup.header;
            foxtra['style'] = backup;
            backup = _closure1_slot0;
            source = result[update];
            source = backup.bind(tangon)(source);
            ctrled = source.intl;
            source = ctrled.string;
            update = result[update];
            update = backup.bind(tangon)(update);
            update = update.t;
            update = update.74Jctb;
            update = source.bind(ctrled)(update);
            foxtra['children'] = update;
            foxtra = kiloes.bind(tangon)(echoed, foxtra);
            romeon[1] = foxtra;
            foxtra = 14;
            foxtra = result[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.Text;
            foxtra = {'style': null, 'variant': 'text-md/medium', 'color': 'interactive-active'};
            output = output.description;
            foxtra['style'] = output;
            foxtra['children'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[2] = foxtra;
            oscard['children'] = romeon;
            golfie = yankee.bind(tangon)(option, oscard);
 806:
            oscard = new Array(2);
            oscard[0] = golfie;
            option = _closure1_slot8;
            golfie = _closure1_slot0;
            yankee = _closure1_slot2;
            report = 15;
            report = yankee[report];
            report = golfie.bind(tangon)(report);
            golfie = report.GuildRoleSubscriptionListingPreview;
            report = {};
            report['guildId'] = offset;
            report['listingId'] = verify;
            report = option.bind(tangon)(golfie, report);
            oscard[1] = report;
            report = 'children';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();