// app/modules/guild_role_subscriptions/native/components/listing_elements/GuildRoleSubscriptionCard.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    golf = argBar;
    foxtrot = argBaz;
    verify = argCorge;
    zulu = argFred;
    options = argPlugh;
    var _closure1_slot0 = golf;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = verify;
    var _closure1_slot3 = options;
    report = function(argFoo) { // Original name: SectionTitle
        entity = argFoo;
        report = entity.children;
        mike = _closure1_slot9;
        tango = undefined;
        oscar = mike.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot0;
        golf = _closure1_slot3;
        entity = 6;
        entity = golf[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.Text;
        entity = {'variant': 'text-xs/bold', 'color': 'header-secondary'};
        oscar = oscar.sectionTitle;
        entity['style'] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot10 = report;
    tango = function() { // Original name: Separator
        mike = _closure1_slot9;
        tango = undefined;
        report = mike.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot5;
        entity = {};
        report = report.separator;
        entity['style'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot11 = tango;
    entity = global;
    yankee = entity.Object;
    offset = yankee.defineProperty;
    oscar = {};
    entity = true;
    oscar['value'] = entity;
    entity = '__esModule';
    entity = offset.bind(yankee)(zulu, entity, oscar);
    entity = 0;
    oscar = options[entity];
    entity = undefined;
    oscar = foxtrot.bind(entity)(oscar);
    var _closure1_slot4 = oscar;
    oscar = 1;
    oscar = options[oscar];
    oscar = verify.bind(entity)(oscar);
    oscar = 2;
    oscar = options[oscar];
    oscar = golf.bind(entity)(oscar);
    oscar = oscar.View;
    var _closure1_slot5 = oscar;
    oscar = 3;
    verify = options[oscar];
    verify = golf.bind(entity)(verify);
    verify = verify.jsx;
    var _closure1_slot6 = verify;
    verify = options[oscar];
    verify = golf.bind(entity)(verify);
    verify = verify.Fragment;
    var _closure1_slot7 = verify;
    oscar = options[oscar];
    oscar = golf.bind(entity)(oscar);
    oscar = oscar.jsxs;
    var _closure1_slot8 = oscar;
    oscar = 4;
    oscar = options[oscar];
    offset = golf.bind(entity)(oscar);
    verify = offset.createStyles;
    oscar = {};
    yankee = {};
    romeo = 'uppercase';
    yankee['textTransform'] = romeo;
    oscar['sectionTitle'] = yankee;
    yankee = {'width': '100%', 'height': 1, 'backgroundColor': null, 'marginVertical': 24};
    romeo = 5;
    romeo = options[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_MODIFIER_ACCENT;
    yankee['backgroundColor'] = romeo;
    oscar['separator'] = yankee;
    oscar = verify.bind(offset)(oscar);
    var _closure1_slot9 = oscar;
    oscar = 14;
    oscar = options[oscar];
    options = golf.bind(entity)(oscar);
    golf = options.fileFinishedImporting;
    oscar = 'modules/guild_role_subscriptions/native/components/listing_elements/GuildRoleSubscriptionCard.tsx';
    oscar = golf.bind(options)(oscar);
    zulu['SectionTitle'] = report;
    zulu['Separator'] = tango;
    mike = function(argFoo) { // Original name: Content
        _fun96935: for(var _fun96935_ip = 0; ; ) switch(_fun96935_ip) {
 0:
            entity = argFoo;
            zulu = entity.listingId;
            control = entity.guildId;
            var _closure2_slot0 = control;
            mike = _closure1_slot2;
            echo = _closure1_slot3;
            entity = 7;
            report = echo[entity];
            tango = undefined;
            oscar = mike.bind(tango)(report);
            report = oscar.useTierEmojiIds;
            report = report.bind(oscar)(zulu, control);
            options = _closure1_slot4;
            oscar = 1;
            report = options.bind(tango)(report, oscar);
            golf = 0;
            record = report[golf];
            report = echo[entity];
            verify = mike.bind(tango)(report);
            report = verify.useChannelBenefits;
            report = report.bind(verify)(zulu);
            report = options.bind(tango)(report, oscar);
            config = report[golf];
            report = echo[entity];
            verify = mike.bind(tango)(report);
            report = verify.useIntangibleBenefits;
            report = report.bind(verify)(zulu);
            report = options.bind(tango)(report, oscar);
            sizing = report[golf];
            entity = echo[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.useRole;
            result = entity.bind(mike)(zulu, control);
            target = config.length;
            sequence = sizing.length;
            oscar = record.size;
            zulu = _closure1_slot8;
            yankee = _closure1_slot0;
            output = 8;
            entity = echo[output];
            entity = yankee.bind(tango)(entity);
            mike = entity.GappedList;
            entity = {};
            report = function() { // Original name: renderGap
                tango = _closure1_slot6;
                zulu = _closure1_slot11;
                mike = undefined;
                entity = {};
                entity = tango.bind(mike)(zulu, entity);
                return entity;
            };
            entity['renderGap'] = report;
            options = _closure1_slot7;
            report = {};
            romeo = _closure1_slot6;
            offset = _closure1_slot10;
            verify = {};
            update = 9;
            kilo = echo[update];
            kilo = yankee.bind(tango)(kilo);
            vacuum = kilo.intl;
            source = vacuum.string;
            kilo = echo[update];
            kilo = yankee.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.DJ+bGh;
            kilo = source.bind(vacuum)(kilo);
            verify['children'] = kilo;
            offset = romeo.bind(tango)(offset, verify);
            verify = new Array(3);
            verify[0] = offset;
            source = _closure1_slot6;
            romeo = _closure1_slot1;
            kilo = 10;
            offset = echo[kilo];
            romeo = romeo.bind(tango)(offset);
            offset = {};
            offset['size'] = output;
            offset = source.bind(tango)(romeo, offset);
            verify[1] = offset;
            romeo = _closure1_slot6;
            offset = 11;
            offset = echo[offset];
            offset = yankee.bind(tango)(offset);
            yankee = offset.GuildRoleSubscriptionMemberPreview;
            offset = {};
            offset['guildId'] = control;
            offset['role'] = result;
            offset = romeo.bind(tango)(yankee, offset);
            verify[2] = offset;
            report['children'] = verify;
            options = zulu.bind(tango)(options, report);
            report = new Array(4);
            report[0] = options;
            verify = oscar > golf;
            options = null;
            if(!verify) { _fun96935_ip = 604; continue _fun96935 }
 402:
            yankee = _closure1_slot8;
            offset = _closure1_slot7;
            verify = {};
            echo = _closure1_slot6;
            result = _closure1_slot10;
            romeo = {};
            context = _closure1_slot0;
            vacuum = _closure1_slot3;
            source = vacuum[update];
            source = context.bind(tango)(source);
            status = source.intl;
            papa = status.format;
            source = vacuum[update];
            source = context.bind(tango)(source);
            source = source.t;
            context = source.oDeFmp;
            source = {};
            sierra = record.size;
            source['numEmojis'] = sierra;
            source = papa.bind(status)(context, source);
            romeo['children'] = source;
            result = echo.bind(tango)(result, romeo);
            romeo = new Array(3);
            romeo[0] = result;
            context = _closure1_slot6;
            echo = _closure1_slot1;
            result = vacuum[kilo];
            source = echo.bind(tango)(result);
            result = {};
            papa = 14;
            result['size'] = papa;
            result = context.bind(tango)(source, result);
            romeo[1] = result;
            source = _closure1_slot6;
            result = 12;
            result = vacuum[result];
            echo = echo.bind(tango)(result);
            result = {};
            vacuum = new Array(0);
            equality = vacuum;
            whiskey = record;
            lima = 0;
            record = arraySpread(equality, whiskey, lima);
            result['emojiIds'] = vacuum;
            result['guildId'] = control;
            result = source.bind(tango)(echo, result);
            romeo[2] = result;
            verify['children'] = romeo;
            options = yankee.bind(tango)(offset, verify);
 604:
            report[1] = options;
            verify = target > golf;
            options = null;
            if(!verify) { _fun96935_ip = 821; continue _fun96935 }
 620:
            yankee = _closure1_slot8;
            offset = _closure1_slot7;
            verify = {};
            control = _closure1_slot6;
            source = _closure1_slot10;
            romeo = {};
            echo = _closure1_slot0;
            result = _closure1_slot3;
            vacuum = result[update];
            vacuum = echo.bind(tango)(vacuum);
            papa = vacuum.intl;
            context = papa.format;
            vacuum = result[update];
            vacuum = echo.bind(tango)(vacuum);
            vacuum = vacuum.t;
            record = vacuum.l40GUl;
            vacuum = {};
            vacuum['numChannels'] = target;
            vacuum = context.bind(papa)(record, vacuum);
            romeo['children'] = vacuum;
            source = control.bind(tango)(source, romeo);
            romeo = new Array(3);
            romeo[0] = source;
            record = _closure1_slot6;
            control = _closure1_slot1;
            source = result[kilo];
            vacuum = control.bind(tango)(source);
            source = {};
            control = 14;
            source['size'] = control;
            source = record.bind(tango)(vacuum, source);
            romeo[1] = source;
            source = _closure1_slot6;
            result = result[output];
            result = echo.bind(tango)(result);
            echo = result.GappedList;
            result = {};
            result['gap'] = control;
            vacuum = config.map;
            control = function(argFoo) {
                entity = argFoo;
                report = _closure1_slot6;
                zulu = _closure1_slot0;
                tango = _closure1_slot3;
                mike = 13;
                mike = tango[mike];
                tango = undefined;
                mike = zulu.bind(tango)(mike);
                zulu = mike.ChannelBenefitRow;
                mike = {};
                mike['benefit'] = entity;
                oscar = _closure2_slot0;
                mike['guildId'] = oscar;
                entity = entity.ref_id;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            control = vacuum.bind(config)(control);
            result['children'] = control;
            result = source.bind(tango)(echo, result);
            romeo[2] = result;
            verify['children'] = romeo;
            options = yankee.bind(tango)(offset, verify);
 821:
            report[2] = options;
            golf = sequence > golf;
            oscar = null;
            if(!golf) { _fun96935_ip = 1038; continue _fun96935 }
 837:
            verify = _closure1_slot8;
            options = _closure1_slot7;
            golf = {};
            echo = _closure1_slot6;
            result = _closure1_slot10;
            offset = {};
            romeo = _closure1_slot0;
            yankee = _closure1_slot3;
            source = yankee[update];
            source = romeo.bind(tango)(source);
            vacuum = source.intl;
            control = vacuum.format;
            update = yankee[update];
            update = romeo.bind(tango)(update);
            update = update.t;
            source = update.4V/Mfn;
            update = {};
            update['numIntangibles'] = sequence;
            update = control.bind(vacuum)(source, update);
            offset['children'] = update;
            result = echo.bind(tango)(result, offset);
            offset = new Array(3);
            offset[0] = result;
            update = _closure1_slot6;
            result = _closure1_slot1;
            kilo = yankee[kilo];
            echo = result.bind(tango)(kilo);
            result = {};
            kilo = 14;
            result['size'] = kilo;
            result = update.bind(tango)(echo, result);
            offset[1] = result;
            foxtrot = _closure1_slot6;
            yankee = yankee[output];
            yankee = romeo.bind(tango)(yankee);
            romeo = yankee.GappedList;
            yankee = {};
            yankee['gap'] = kilo;
            kilo = sizing.map;
            backup = function(argFoo, argBar) {
                report = _closure1_slot6;
                mike = _closure1_slot0;
                zulu = _closure1_slot3;
                entity = 13;
                entity = zulu[entity];
                tango = undefined;
                entity = mike.bind(tango)(entity);
                zulu = entity.IntangibleBenefitRow;
                mike = {};
                entity = argFoo;
                mike['benefit'] = entity;
                entity = _closure2_slot0;
                mike['guildId'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            backup = kilo.bind(sizing)(backup);
            yankee['children'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[2] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 1038:
            report[3] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['Content'] = mike;
    return entity;
})();