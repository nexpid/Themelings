// app/modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionGroupDetailsModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    verify = argBaz;
    option = argCor;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = golfie;
    michal = function(argFoo) { // Original name: Content
        entity = argFoo;
        config = entity.cover;
        vacuum = entity.setCover;
        romeon = entity.description;
        offset = entity.setDescription;
        entity = _closure1_slot13;
        tangon = undefined;
        echoed = entity.bind(tangon)();
        golfie = _closure1_slot1;
        kiloes = _closure1_slot2;
        entity = 8;
        entity = kiloes[entity];
        entity = golfie.bind(tangon)(entity);
        sizing = entity.bind(tangon)();
        backup = _closure1_slot0;
        entity = 9;
        entity = kiloes[entity];
        michal = backup.bind(tangon)(entity);
        entity = michal.useRoleSubscriptionSettingsDisabled;
        verify = entity.bind(michal)();
        zuuluu = _closure1_slot10;
        michal = _closure1_slot11;
        entity = {};
        output = _closure1_slot9;
        oscard = 10;
        report = kiloes[oscard];
        option = golfie.bind(tangon)(report);
        report = {};
        yankee = sizing.header;
        report['style'] = yankee;
        yankee = 11;
        result = kiloes[yankee];
        result = backup.bind(tangon)(result);
        source = result.intl;
        update = source.string;
        result = kiloes[yankee];
        result = backup.bind(tangon)(result);
        result = result.t;
        result = result.3S8gAw;
        result = update.bind(source)(result);
        report['children'] = result;
        option = output.bind(tangon)(option, report);
        report = new Array(5);
        report[0] = option;
        result = _closure1_slot10;
        output = _closure1_slot4;
        option = {};
        update = echoed.paddedContainer;
        option['style'] = update;
        ctrled = _closure1_slot9;
        sequen = 12;
        update = kiloes[sequen];
        update = backup.bind(tangon)(update);
        source = update.ImagePickerIcon;
        update = {};
        record = echoed.coverPhoto;
        update['style'] = record;
        update['image'] = config;
        config = _closure1_slot8;
        config = config.width;
        update['imageUploadSize'] = config;
        sequen = kiloes[sequen];
        sequen = backup.bind(tangon)(sequen);
        sequen = sequen.PreviewShape;
        sequen = sequen.SQUIRCLE;
        update['previewShape'] = sequen;
        update['setImage'] = vacuum;
        update['disabled'] = verify;
        vacuum = true;
        update['standalone'] = vacuum;
        vacuum = _closure1_slot12;
        update['size'] = vacuum;
        source = ctrled.bind(tangon)(source, update);
        update = new Array(2);
        update[0] = source;
        vacuum = _closure1_slot9;
        source = 13;
        source = kiloes[source];
        source = backup.bind(tangon)(source);
        ctrled = source.Text;
        source = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
        sequen = echoed.coverDescription;
        source['style'] = sequen;
        sequen = kiloes[yankee];
        sequen = backup.bind(tangon)(sequen);
        record = sequen.intl;
        config = record.string;
        sequen = kiloes[yankee];
        sequen = backup.bind(tangon)(sequen);
        sequen = sequen.t;
        sequen = sequen.0ng4rK;
        sequen = config.bind(record)(sequen);
        source['children'] = sequen;
        source = vacuum.bind(tangon)(ctrled, source);
        update[1] = source;
        option['children'] = update;
        option = result.bind(tangon)(output, option);
        report[1] = option;
        result = _closure1_slot9;
        option = 14;
        option = kiloes[option];
        output = golfie.bind(tangon)(option);
        option = {};
        echoed = echoed.paddedContainer;
        option['style'] = echoed;
        option = result.bind(tangon)(output, option);
        report[2] = option;
        option = _closure1_slot9;
        oscard = kiloes[oscard];
        golfie = golfie.bind(tangon)(oscard);
        oscard = {};
        output = sizing.header;
        oscard['style'] = output;
        output = kiloes[yankee];
        output = backup.bind(tangon)(output);
        echoed = output.intl;
        result = echoed.string;
        output = kiloes[yankee];
        output = backup.bind(tangon)(output);
        output = output.t;
        output = output.74Jctb;
        output = result.bind(echoed)(output);
        oscard['children'] = output;
        oscard = option.bind(tangon)(golfie, oscard);
        report[3] = oscard;
        option = _closure1_slot9;
        oscard = 15;
        oscard = kiloes[oscard];
        oscard = backup.bind(tangon)(oscard);
        golfie = oscard.FormInput;
        oscard = {'style': null, 'showTopContainer': false, 'multiline': true, 'maxLength': null, 'numberOfLines': 3};
        sizing = sizing.textInput;
        oscard['style'] = sizing;
        foxtra = _closure1_slot7;
        oscard['maxLength'] = foxtra;
        oscard['value'] = romeon;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.3YHwoK;
        yankee = romeon.bind(foxtra)(yankee);
        oscard['placeholder'] = yankee;
        oscard['onChange'] = offset;
        oscard['disabled'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[4] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = michal;
    entity = global;
    yankee = entity.Object;
    offset = yankee.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = offset.bind(yankee)(zuuluu, entity, report);
    entity = 0;
    report = golfie[entity];
    entity = undefined;
    report = verify.bind(entity)(report);
    var _closure1_slot3 = report;
    report = 1;
    report = golfie[report];
    report = option.bind(entity)(report);
    report = 2;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.View;
    var _closure1_slot4 = report;
    report = 3;
    report = golfie[report];
    report = option.bind(entity)(report);
    var _closure1_slot5 = report;
    report = 4;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    option = report.GuildRoleSubscriptionsTierScenes;
    var _closure1_slot6 = option;
    report = report.MAX_SUBSCRIPTION_TIER_DESCRIPTION_LENGTH;
    var _closure1_slot7 = report;
    report = 5;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.UPLOAD_BANNER_SIZE;
    var _closure1_slot8 = report;
    report = 6;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot9 = option;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.jsxs;
    var _closure1_slot10 = option;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.Fragment;
    var _closure1_slot11 = report;
    report = 114;
    var _closure1_slot12 = report;
    report = 7;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    offset = {'height': 114, 'width': '100%'};
    report['coverPhoto'] = offset;
    offset = {};
    yankee = 16;
    offset['marginTop'] = yankee;
    report['coverDescription'] = offset;
    offset = {};
    offset['paddingHorizontal'] = yankee;
    report['paddedContainer'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot13 = report;
    report = 17;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionGroupDetailsModal.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: GuildRoleSubscriptionTierDetailsModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            option = argFoo;
            verify = _closure1_slot5;
            entity = verify.useGroupCoverState;
            entity = entity.bind(verify)();
            golfie = _closure1_slot3;
            tangon = undefined;
            oscard = 2;
            entity = golfie.bind(tangon)(entity, oscard);
            michal = 0;
            romeon = entity[michal];
            zuuluu = 1;
            yankee = entity[zuuluu];
            entity = verify.useGroupDescriptionState;
            entity = entity.bind(verify)();
            entity = golfie.bind(tangon)(entity, oscard);
            offset = entity[michal];
            verify = entity[zuuluu];
            entity = offset.length;
            oscard = entity > michal;
            if(!oscard) { _fun00002_ip = 90; continue _fun00001 }
 84:
            entity = null;
            oscard = entity != romeon;
 90:
            zuuluu = _closure1_slot9;
            michal = _closure1_slot1;
            sizing = _closure1_slot2;
            entity = 16;
            entity = sizing[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            kiloes = _closure1_slot0;
            golfie = 11;
            foxtra = sizing[golfie];
            foxtra = kiloes.bind(tangon)(foxtra);
            output = foxtra.intl;
            backup = output.string;
            foxtra = sizing[golfie];
            foxtra = kiloes.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.EPOLQE;
            foxtra = backup.bind(output)(foxtra);
            entity['title'] = foxtra;
            foxtra = sizing[golfie];
            foxtra = kiloes.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            golfie = sizing[golfie];
            golfie = kiloes.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.LeAm+P;
            golfie = foxtra.bind(backup)(golfie);
            entity['description'] = golfie;
            entity['canProceedToNextStep'] = oscard;
            oscard = _closure1_slot6;
            oscard = oscard.DETAILS;
            entity['nextStep'] = oscard;
            echoed = entity;
            result = option;
            oscard = copyDataProperties(echoed, result);
            golfie = _closure1_slot9;
            oscard = _closure1_slot14;
            report = {};
            echoed = report;
            result = option;
            option = copyDataProperties(echoed, result);
            option = 'cover';
            report[option] = romeon;
            option = 'setCover';
            report[option] = yankee;
            option = 'description';
            report[option] = offset;
            option = 'setDescription';
            report[option] = verify;
            oscard = golfie.bind(tangon)(oscard, report);
            report = 'children';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['Content'] = michal;
    return entity;
})();