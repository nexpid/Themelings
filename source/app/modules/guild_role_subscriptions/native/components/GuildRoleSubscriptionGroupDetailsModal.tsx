// app/modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionGroupDetailsModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    verify = argBaz;
    options = argCorge;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = golf;
    mike = function(argFoo) { // Original name: Content
        entity = argFoo;
        config = entity.cover;
        vacuum = entity.setCover;
        romeo = entity.description;
        offset = entity.setDescription;
        entity = _closure1_slot13;
        tango = undefined;
        echo = entity.bind(tango)();
        golf = _closure1_slot1;
        kilo = _closure1_slot2;
        entity = 8;
        entity = kilo[entity];
        entity = golf.bind(tango)(entity);
        sizing = entity.bind(tango)();
        backup = _closure1_slot0;
        entity = 9;
        entity = kilo[entity];
        mike = backup.bind(tango)(entity);
        entity = mike.useRoleSubscriptionSettingsDisabled;
        verify = entity.bind(mike)();
        zulu = _closure1_slot10;
        mike = _closure1_slot11;
        entity = {};
        output = _closure1_slot9;
        oscar = 10;
        report = kilo[oscar];
        options = golf.bind(tango)(report);
        report = {};
        yankee = sizing.header;
        report['style'] = yankee;
        yankee = 11;
        result = kilo[yankee];
        result = backup.bind(tango)(result);
        source = result.intl;
        update = source.string;
        result = kilo[yankee];
        result = backup.bind(tango)(result);
        result = result.t;
        result = result.3S8gAw;
        result = update.bind(source)(result);
        report['children'] = result;
        options = output.bind(tango)(options, report);
        report = new Array(5);
        report[0] = options;
        result = _closure1_slot10;
        output = _closure1_slot4;
        options = {};
        update = echo.paddedContainer;
        options['style'] = update;
        control = _closure1_slot9;
        sequence = 12;
        update = kilo[sequence];
        update = backup.bind(tango)(update);
        source = update.ImagePickerIcon;
        update = {};
        record = echo.coverPhoto;
        update['style'] = record;
        update['image'] = config;
        config = _closure1_slot8;
        config = config.width;
        update['imageUploadSize'] = config;
        sequence = kilo[sequence];
        sequence = backup.bind(tango)(sequence);
        sequence = sequence.PreviewShape;
        sequence = sequence.SQUIRCLE;
        update['previewShape'] = sequence;
        update['setImage'] = vacuum;
        update['disabled'] = verify;
        vacuum = true;
        update['standalone'] = vacuum;
        vacuum = _closure1_slot12;
        update['size'] = vacuum;
        source = control.bind(tango)(source, update);
        update = new Array(2);
        update[0] = source;
        vacuum = _closure1_slot9;
        source = 13;
        source = kilo[source];
        source = backup.bind(tango)(source);
        control = source.Text;
        source = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
        sequence = echo.coverDescription;
        source['style'] = sequence;
        sequence = kilo[yankee];
        sequence = backup.bind(tango)(sequence);
        record = sequence.intl;
        config = record.string;
        sequence = kilo[yankee];
        sequence = backup.bind(tango)(sequence);
        sequence = sequence.t;
        sequence = sequence.0ng4rK;
        sequence = config.bind(record)(sequence);
        source['children'] = sequence;
        source = vacuum.bind(tango)(control, source);
        update[1] = source;
        options['children'] = update;
        options = result.bind(tango)(output, options);
        report[1] = options;
        result = _closure1_slot9;
        options = 14;
        options = kilo[options];
        output = golf.bind(tango)(options);
        options = {};
        echo = echo.paddedContainer;
        options['style'] = echo;
        options = result.bind(tango)(output, options);
        report[2] = options;
        options = _closure1_slot9;
        oscar = kilo[oscar];
        golf = golf.bind(tango)(oscar);
        oscar = {};
        output = sizing.header;
        oscar['style'] = output;
        output = kilo[yankee];
        output = backup.bind(tango)(output);
        echo = output.intl;
        result = echo.string;
        output = kilo[yankee];
        output = backup.bind(tango)(output);
        output = output.t;
        output = output.74Jctb;
        output = result.bind(echo)(output);
        oscar['children'] = output;
        oscar = options.bind(tango)(golf, oscar);
        report[3] = oscar;
        options = _closure1_slot9;
        oscar = 15;
        oscar = kilo[oscar];
        oscar = backup.bind(tango)(oscar);
        golf = oscar.FormInput;
        oscar = {'style': null, 'showTopContainer': false, 'multiline': true, 'maxLength': null, 'numberOfLines': 3};
        sizing = sizing.textInput;
        oscar['style'] = sizing;
        foxtrot = _closure1_slot7;
        oscar['maxLength'] = foxtrot;
        oscar['value'] = romeo;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        foxtrot = romeo.intl;
        romeo = foxtrot.string;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.3YHwoK;
        yankee = romeo.bind(foxtrot)(yankee);
        oscar['placeholder'] = yankee;
        oscar['onChange'] = offset;
        oscar['disabled'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[4] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = mike;
    entity = global;
    yankee = entity.Object;
    offset = yankee.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = offset.bind(yankee)(zulu, entity, report);
    entity = 0;
    report = golf[entity];
    entity = undefined;
    report = verify.bind(entity)(report);
    var _closure1_slot3 = report;
    report = 1;
    report = golf[report];
    report = options.bind(entity)(report);
    report = 2;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.View;
    var _closure1_slot4 = report;
    report = 3;
    report = golf[report];
    report = options.bind(entity)(report);
    var _closure1_slot5 = report;
    report = 4;
    report = golf[report];
    report = oscar.bind(entity)(report);
    options = report.GuildRoleSubscriptionsTierScenes;
    var _closure1_slot6 = options;
    report = report.MAX_SUBSCRIPTION_TIER_DESCRIPTION_LENGTH;
    var _closure1_slot7 = report;
    report = 5;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.UPLOAD_BANNER_SIZE;
    var _closure1_slot8 = report;
    report = 6;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot9 = options;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsxs;
    var _closure1_slot10 = options;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.Fragment;
    var _closure1_slot11 = report;
    report = 114;
    var _closure1_slot12 = report;
    report = 7;
    report = golf[report];
    verify = oscar.bind(entity)(report);
    options = verify.createStyles;
    report = {};
    offset = {'height': 114, 'width': '100%'};
    report['coverPhoto'] = offset;
    offset = {};
    yankee = 16;
    offset['marginTop'] = yankee;
    report['coverDescription'] = offset;
    offset = {};
    offset['paddingHorizontal'] = yankee;
    report['paddedContainer'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot13 = report;
    report = 17;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionGroupDetailsModal.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: GuildRoleSubscriptionTierDetailsModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            options = argFoo;
            verify = _closure1_slot5;
            entity = verify.useGroupCoverState;
            entity = entity.bind(verify)();
            golf = _closure1_slot3;
            tango = undefined;
            oscar = 2;
            entity = golf.bind(tango)(entity, oscar);
            mike = 0;
            romeo = entity[mike];
            zulu = 1;
            yankee = entity[zulu];
            entity = verify.useGroupDescriptionState;
            entity = entity.bind(verify)();
            entity = golf.bind(tango)(entity, oscar);
            offset = entity[mike];
            verify = entity[zulu];
            entity = offset.length;
            oscar = entity > mike;
            if(!oscar) { _fun00002_ip = 90; continue _fun00001 }
 84:
            entity = null;
            oscar = entity != romeo;
 90:
            zulu = _closure1_slot9;
            mike = _closure1_slot1;
            sizing = _closure1_slot2;
            entity = 16;
            entity = sizing[entity];
            mike = mike.bind(tango)(entity);
            entity = {};
            kilo = _closure1_slot0;
            golf = 11;
            foxtrot = sizing[golf];
            foxtrot = kilo.bind(tango)(foxtrot);
            output = foxtrot.intl;
            backup = output.string;
            foxtrot = sizing[golf];
            foxtrot = kilo.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.EPOLQE;
            foxtrot = backup.bind(output)(foxtrot);
            entity['title'] = foxtrot;
            foxtrot = sizing[golf];
            foxtrot = kilo.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            golf = sizing[golf];
            golf = kilo.bind(tango)(golf);
            golf = golf.t;
            golf = golf.LeAm+P;
            golf = foxtrot.bind(backup)(golf);
            entity['description'] = golf;
            entity['canProceedToNextStep'] = oscar;
            oscar = _closure1_slot6;
            oscar = oscar.DETAILS;
            entity['nextStep'] = oscar;
            echo = entity;
            result = options;
            oscar = copyDataProperties(echo, result);
            golf = _closure1_slot9;
            oscar = _closure1_slot14;
            report = {};
            echo = report;
            result = options;
            options = copyDataProperties(echo, result);
            options = 'cover';
            report[options] = romeo;
            options = 'setCover';
            report[options] = yankee;
            options = 'description';
            report[options] = offset;
            options = 'setDescription';
            report[options] = verify;
            oscar = golf.bind(tango)(oscar, report);
            report = 'children';
            entity[report] = oscar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['Content'] = mike;
    return entity;
})();