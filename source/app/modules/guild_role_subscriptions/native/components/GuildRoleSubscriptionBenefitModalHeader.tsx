// app/modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionBenefitModalHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    foxtra = tangon.Fonts;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignItems': 'center', 'backgroundColor': null, 'flexDirection': 'row', 'justifyContent': 'space-between', 'paddingBottom': 8, 'paddingHorizontal': 16};
    offset = 'center';
    yankee = 6;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = backup;
    result = 16;
    tangon['headerContainer'] = verify;
    verify = {'flexDirection': 'row', 'alignSelf': 'center', 'minWidth': 60};
    tangon['headerButtonContainer'] = verify;
    verify = {};
    backup = 'flex-start';
    verify['alignItems'] = backup;
    tangon['headerButtonStart'] = verify;
    verify = {};
    backup = 'flex-end';
    verify['alignItems'] = backup;
    tangon['headerButtonEnd'] = verify;
    verify = {};
    backup = 7;
    kiloes = oscard[backup];
    output = romeon.bind(entity)(kiloes);
    sizing = foxtra.PRIMARY_MEDIUM;
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.INTERACTIVE_ACTIVE;
    update = output.bind(entity)(sizing, kiloes, result);
    source = verify;
    kiloes = copyDataProperties(source, update);
    tangon['headerButton'] = verify;
    verify = {};
    kiloes = oscard[backup];
    output = romeon.bind(entity)(kiloes);
    sizing = foxtra.PRIMARY_MEDIUM;
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.INTERACTIVE_MUTED;
    update = output.bind(entity)(sizing, kiloes, result);
    source = verify;
    kiloes = copyDataProperties(source, update);
    tangon['disabledButton'] = verify;
    verify = {'flex': 1, 'flexDirection': 'column'};
    tangon['titleContainer'] = verify;
    verify = {};
    backup = oscard[backup];
    backup = romeon.bind(entity)(backup);
    foxtra = foxtra.DISPLAY_EXTRABOLD;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    romeon = yankee.HEADER_PRIMARY;
    yankee = 18;
    update = backup.bind(entity)(foxtra, romeon, yankee);
    source = verify;
    yankee = copyDataProperties(source, update);
    yankee = 'textAlign';
    verify[yankee] = offset;
    tangon['title'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['subtitle'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionBenefitModalHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildRoleSubscriptionBenefitModalHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            sequen = entity.title;
            foxtra = entity.canSave;
            sizing = entity.onSave;
            kiloes = entity.onClose;
            zuuluu = entity.listingId;
            entity = _closure1_slot8;
            tangon = undefined;
            backup = entity.bind(tangon)();
            michal = _closure1_slot2;
            romeon = _closure1_slot3;
            entity = 8;
            entity = romeon[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useName;
            zuuluu = entity.bind(michal)(zuuluu);
            michal = _closure1_slot4;
            entity = 1;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            vacuum = michal[entity];
            zuuluu = _closure1_slot7;
            offset = _closure1_slot0;
            entity = 9;
            entity = romeon[entity];
            entity = offset.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['top'] = report;
            report = backup.headerContainer;
            entity['style'] = report;
            option = _closure1_slot6;
            golfie = _closure1_slot1;
            oscard = 10;
            report = romeon[oscard];
            verify = golfie.bind(tangon)(report);
            report = {};
            result = backup.headerButtonContainer;
            output = new Array(2);
            output[0] = result;
            result = backup.headerButtonStart;
            output[1] = result;
            report['style'] = output;
            output = 'button';
            report['accessibilityRole'] = output;
            report['onPress'] = kiloes;
            source = 11;
            kiloes = romeon[source];
            kiloes = offset.bind(tangon)(kiloes);
            echoed = kiloes.Text;
            result = {'style': null, 'variant': 'text-md/medium', 'color': 'interactive-active'};
            kiloes = backup.headerButton;
            result['style'] = kiloes;
            kiloes = 12;
            update = romeon[kiloes];
            update = offset.bind(tangon)(update);
            config = update.intl;
            ctrled = config.string;
            update = romeon[kiloes];
            update = offset.bind(tangon)(update);
            update = update.t;
            update = update.ETE/oK;
            update = ctrled.bind(config)(update);
            result['children'] = update;
            result = option.bind(tangon)(echoed, result);
            report['children'] = result;
            verify = option.bind(tangon)(verify, report);
            report = new Array(3);
            report[0] = verify;
            echoed = _closure1_slot5;
            result = {};
            verify = backup.titleContainer;
            result['style'] = verify;
            verify = 13;
            update = romeon[verify];
            update = offset.bind(tangon)(update);
            ctrled = update.LegacyText;
            update = {};
            config = backup.title;
            update['style'] = config;
            config = 'header';
            update['accessibilityRole'] = config;
            update['children'] = sequen;
            ctrled = option.bind(tangon)(ctrled, update);
            update = new Array(2);
            update[0] = ctrled;
            source = romeon[source];
            source = offset.bind(tangon)(source);
            ctrled = source.Text;
            source = {'style': null, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
            sequen = backup.subtitle;
            source['style'] = sequen;
            source['children'] = vacuum;
            source = option.bind(tangon)(ctrled, source);
            update[1] = source;
            result['children'] = update;
            result = zuuluu.bind(tangon)(echoed, result);
            report[1] = result;
            oscard = romeon[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            echoed = backup.headerButtonContainer;
            result = new Array(2);
            result[0] = echoed;
            echoed = backup.headerButtonEnd;
            result[1] = echoed;
            oscard['style'] = result;
            oscard['accessibilityRole'] = output;
            output = !foxtra;
            oscard['disabled'] = output;
            oscard['onPress'] = sizing;
            verify = romeon[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.LegacyText;
            verify = {};
            sizing = backup.headerButton;
            romeon = new Array(2);
            romeon[0] = sizing;
            foxtra = !foxtra;
            if(!foxtra) { _fun00002_ip = 551; continue _fun00001 }
 545:
            foxtra = backup.disabledButton;
 551:
            romeon[1] = foxtra;
            verify['style'] = romeon;
            backup = _closure1_slot0;
            yankee = _closure1_slot3;
            romeon = yankee[kiloes];
            romeon = backup.bind(tangon)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.string;
            yankee = yankee[kiloes];
            yankee = backup.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.R3BPHx;
            yankee = romeon.bind(foxtra)(yankee);
            verify['children'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();