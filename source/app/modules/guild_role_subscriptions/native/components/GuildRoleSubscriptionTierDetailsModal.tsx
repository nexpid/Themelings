// app/modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionTierDetailsModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    option = argBaz;
    report = argCor;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = option;
    var _closure1_slot2 = report;
    var _closure1_slot3 = golfie;
    entity = function() { // Original name: Content
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot1;
            foxtra = _closure1_slot3;
            entity = 5;
            entity = foxtra[entity];
            tangon = undefined;
            entity = michal.bind(tangon)(entity);
            echoed = entity.bind(tangon)();
            michal = _closure1_slot0;
            entity = 6;
            entity = foxtra[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useEditStateContext;
            entity = entity.bind(michal)();
            romeon = entity.guildId;
            zuuluu = entity.editStateId;
            option = _closure1_slot2;
            entity = 7;
            michal = foxtra[entity];
            report = option.bind(tangon)(michal);
            michal = report.useName;
            report = michal.bind(report)(zuuluu);
            michal = _closure1_slot4;
            offset = 2;
            michal = michal.bind(tangon)(report, offset);
            golfie = 0;
            cntext = michal[golfie];
            report = 1;
            record = michal[report];
            michal = foxtra[entity];
            verify = option.bind(tangon)(michal);
            michal = verify.useImage;
            verify = michal.bind(verify)(zuuluu);
            michal = _closure1_slot4;
            verify = michal.bind(tangon)(verify, offset);
            michal = verify[golfie];
            verify = verify[report];
            var _closure2_slot0 = verify;
            verify = foxtra[entity];
            yankee = option.bind(tangon)(verify);
            verify = yankee.usePriceTier;
            yankee = verify.bind(yankee)(zuuluu);
            verify = _closure1_slot4;
            verify = verify.bind(tangon)(yankee, offset);
            yankee = verify[golfie];
            verify = verify[report];
            entity = foxtra[entity];
            option = option.bind(tangon)(entity);
            entity = option.useDescription;
            option = entity.bind(option)(zuuluu);
            entity = _closure1_slot4;
            entity = entity.bind(tangon)(option, offset);
            vacuum = entity[golfie];
            ctrled = entity[report];
            offset = null;
            entity = offset != michal;
            target = null;
            if(!entity) { _fun00002_ip = 260; continue _fun00001 }
 250:
            entity = {};
            entity['uri'] = michal;
            target = entity;
 260:
            michal = _closure1_slot0;
            report = _closure1_slot3;
            entity = 8;
            entity = report[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useSubscriptionListing;
            michal = entity.bind(michal)(zuuluu);
            zuuluu = offset == michal;
            entity = undefined;
            if(zuuluu) { _fun00002_ip = 306; continue _fun00001 }
 300:
            entity = michal.published;
 306:
            config = true;
            foxtra = config === entity;
            source = _closure1_slot0;
            kiloes = _closure1_slot3;
            entity = 9;
            entity = kiloes[entity];
            michal = source.bind(tangon)(entity);
            entity = michal.useRoleSubscriptionSettingsDisabled;
            backup = entity.bind(michal)();
            zuuluu = _closure1_slot11;
            michal = _closure1_slot10;
            entity = {};
            output = _closure1_slot9;
            golfie = _closure1_slot1;
            option = 10;
            report = kiloes[option];
            sizing = golfie.bind(tangon)(report);
            report = {};
            result = echoed.header;
            report['style'] = result;
            result = 11;
            update = kiloes[result];
            update = source.bind(tangon)(update);
            status = update.intl;
            papara = status.string;
            update = kiloes[result];
            update = source.bind(tangon)(update);
            update = update.t;
            update = update.6XpbbW;
            update = papara.bind(status)(update);
            report['children'] = update;
            sizing = output.bind(tangon)(sizing, report);
            report = new Array(8);
            report[0] = sizing;
            update = _closure1_slot9;
            papara = 12;
            sizing = kiloes[papara];
            output = golfie.bind(tangon)(sizing);
            sizing = {};
            status = kiloes[result];
            status = source.bind(tangon)(status);
            limora = status.intl;
            sierra = limora.string;
            status = kiloes[result];
            status = source.bind(tangon)(status);
            status = status.t;
            status = status.pNZfgI;
            status = sierra.bind(limora)(status);
            sizing['description'] = status;
            sizing['image'] = target;
            target = _closure1_slot8;
            sizing['imageUploadSize'] = target;
            papara = kiloes[papara];
            papara = source.bind(tangon)(papara);
            papara = papara.PreviewShape;
            papara = papara.CIRCLE;
            sizing['previewShape'] = papara;
            sequen = function(argFoo) { // Original name: setImage
                entity = argFoo;
                zuuluu = entity.uri;
                michal = _closure2_slot0;
                entity = undefined;
                entity = michal.bind(entity)(zuuluu);
                return entity;
            };
            sizing['setImage'] = sequen;
            sizing['disabled'] = backup;
            sizing = update.bind(tangon)(output, sizing);
            report[1] = sizing;
            update = _closure1_slot9;
            sizing = kiloes[option];
            output = golfie.bind(tangon)(sizing);
            sizing = {};
            sequen = echoed.header;
            sizing['style'] = sequen;
            sequen = kiloes[result];
            sequen = source.bind(tangon)(sequen);
            target = sequen.intl;
            papara = target.string;
            sequen = kiloes[result];
            sequen = source.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.rJ6OaW;
            sequen = papara.bind(target)(sequen);
            sizing['children'] = sequen;
            sizing = update.bind(tangon)(output, sizing);
            report[2] = sizing;
            sequen = _closure1_slot9;
            sizing = 13;
            output = kiloes[sizing];
            output = source.bind(tangon)(output);
            update = output.FormInput;
            output = {'style': null, 'showTopContainer': false, 'multiline': false};
            papara = echoed.textInput;
            output['style'] = papara;
            papara = _closure1_slot7;
            output['maxLength'] = papara;
            output['value'] = cntext;
            cntext = kiloes[result];
            cntext = source.bind(tangon)(cntext);
            target = cntext.intl;
            papara = target.string;
            cntext = kiloes[result];
            cntext = source.bind(tangon)(cntext);
            cntext = cntext.t;
            cntext = cntext.i4/g+P;
            cntext = papara.bind(target)(cntext);
            output['placeholder'] = cntext;
            output['onChange'] = record;
            output['autoFocus'] = config;
            config = 14;
            config = kiloes[config];
            config = source.bind(tangon)(config);
            config = config.ClearButtonVisibility;
            config = config.WITH_CONTENT;
            output['clearButtonVisibility'] = config;
            output['disabled'] = backup;
            output = sequen.bind(tangon)(update, output);
            report[3] = output;
            sequen = _closure1_slot9;
            output = kiloes[option];
            update = golfie.bind(tangon)(output);
            output = {};
            config = echoed.header;
            output['style'] = config;
            config = kiloes[result];
            config = source.bind(tangon)(config);
            cntext = config.intl;
            record = cntext.string;
            config = kiloes[result];
            config = source.bind(tangon)(config);
            config = config.t;
            config = config.74Jctb;
            config = record.bind(cntext)(config);
            output['children'] = config;
            output = sequen.bind(tangon)(update, output);
            report[4] = output;
            update = _closure1_slot9;
            sizing = kiloes[sizing];
            sizing = source.bind(tangon)(sizing);
            output = sizing.FormInput;
            sizing = {'style': null, 'showTopContainer': false, 'multiline': true, 'maxLength': null, 'numberOfLines': 3};
            sequen = echoed.textInput;
            sizing['style'] = sequen;
            sequen = _closure1_slot6;
            sizing['maxLength'] = sequen;
            sizing['value'] = vacuum;
            vacuum = kiloes[result];
            vacuum = source.bind(tangon)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = kiloes[result];
            vacuum = source.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.3YHwoK;
            vacuum = sequen.bind(config)(vacuum);
            sizing['placeholder'] = vacuum;
            sizing['onChange'] = ctrled;
            sizing['disabled'] = backup;
            sizing = update.bind(tangon)(output, sizing);
            report[5] = sizing;
            output = _closure1_slot9;
            option = kiloes[option];
            sizing = golfie.bind(tangon)(option);
            option = {};
            echoed = echoed.header;
            option['style'] = echoed;
            echoed = kiloes[result];
            echoed = source.bind(tangon)(echoed);
            update = echoed.intl;
            echoed = update.string;
            result = kiloes[result];
            result = source.bind(tangon)(result);
            result = result.t;
            result = result.CrRVAw;
            result = echoed.bind(update)(result);
            option['children'] = result;
            option = output.bind(tangon)(sizing, option);
            report[6] = option;
            option = _closure1_slot9;
            oscard = 15;
            oscard = kiloes[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            if(foxtra) { _fun00002_ip = 1146; continue _fun00001 }
 1143:
            foxtra = backup;
 1146:
            oscard['disabled'] = foxtra;
            oscard['guildId'] = romeon;
            romeon = offset != yankee;
            offset = null;
            if(!romeon) { _fun00002_ip = 1166; continue _fun00001 }
 1163:
            offset = yankee;
 1166:
            oscard['price'] = offset;
            oscard['onChange'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[7] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zuuluu, entity, michal);
    entity = 0;
    michal = golfie[entity];
    entity = undefined;
    michal = option.bind(entity)(michal);
    var _closure1_slot4 = michal;
    michal = 1;
    michal = golfie[michal];
    option = report.bind(entity)(michal);
    michal = 2;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.GuildRoleSubscriptionsTierScenes;
    var _closure1_slot5 = report;
    report = michal.MAX_SUBSCRIPTION_TIER_DESCRIPTION_LENGTH;
    var _closure1_slot6 = report;
    michal = michal.MAX_SUBSCRIPTION_TIER_NAME_LENGTH;
    var _closure1_slot7 = michal;
    michal = 3;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.UPLOAD_MEDIUM_SIZE;
    var _closure1_slot8 = michal;
    michal = 4;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.jsx;
    var _closure1_slot9 = report;
    report = michal.Fragment;
    var _closure1_slot10 = report;
    michal = michal.jsxs;
    var _closure1_slot11 = michal;
    report = option.memo;
    michal = function() {
        tangon = _closure1_slot9;
        zuuluu = _closure1_slot13;
        michal = undefined;
        entity = {};
        entity = tangon.bind(michal)(zuuluu, entity);
        return entity;
    };
    michal = report.bind(option)(michal);
    var _closure1_slot12 = michal;
    report = 17;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionTierDetailsModal.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: GuildRoleSubscriptionTierDetailsModal
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = _closure1_slot0;
            yankee = _closure1_slot3;
            entity = 6;
            entity = yankee[entity];
            tangon = undefined;
            michal = michal.bind(tangon)(entity);
            entity = michal.useEditStateContext;
            entity = entity.bind(michal)();
            offset = entity.editStateId;
            golfie = _closure1_slot2;
            entity = 7;
            michal = yankee[entity];
            zuuluu = golfie.bind(tangon)(michal);
            michal = zuuluu.useName;
            zuuluu = michal.bind(zuuluu)(offset);
            michal = _closure1_slot4;
            verify = 1;
            michal = michal.bind(tangon)(zuuluu, verify);
            zuuluu = 0;
            oscard = michal[zuuluu];
            michal = yankee[entity];
            option = golfie.bind(tangon)(michal);
            michal = option.useImage;
            option = michal.bind(option)(offset);
            michal = _closure1_slot4;
            michal = michal.bind(tangon)(option, verify);
            michal = michal[zuuluu];
            option = yankee[entity];
            romeon = golfie.bind(tangon)(option);
            option = romeon.usePriceTier;
            romeon = option.bind(romeon)(offset);
            option = _closure1_slot4;
            option = option.bind(tangon)(romeon, verify);
            option = option[zuuluu];
            entity = yankee[entity];
            golfie = golfie.bind(tangon)(entity);
            entity = golfie.useDescription;
            golfie = entity.bind(golfie)(offset);
            entity = _closure1_slot4;
            entity = entity.bind(tangon)(golfie, verify);
            entity = entity[zuuluu];
            oscard = oscard.length;
            oscard = oscard > zuuluu;
            if(!oscard) { _fun00004_ip = 207; continue _fun00003 }
 201:
            golfie = null;
            oscard = golfie != option;
 207:
            if(!oscard) { _fun00004_ip = 219; continue _fun00003 }
 210:
            entity = entity.length;
            oscard = entity > zuuluu;
 219:
            if(!oscard) { _fun00004_ip = 228; continue _fun00003 }
 222:
            entity = null;
            oscard = entity != michal;
 228:
            zuuluu = _closure1_slot9;
            michal = _closure1_slot1;
            yankee = _closure1_slot3;
            entity = 16;
            entity = yankee[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            offset = _closure1_slot0;
            golfie = 11;
            option = yankee[golfie];
            option = offset.bind(tangon)(option);
            romeon = option.intl;
            verify = romeon.string;
            option = yankee[golfie];
            option = offset.bind(tangon)(option);
            option = option.t;
            option = option.o3pHam;
            option = verify.bind(romeon)(option);
            entity['title'] = option;
            option = yankee[golfie];
            option = offset.bind(tangon)(option);
            verify = option.intl;
            option = verify.string;
            golfie = yankee[golfie];
            golfie = offset.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.oOOMEx;
            golfie = option.bind(verify)(golfie);
            entity['description'] = golfie;
            entity['canProceedToNextStep'] = oscard;
            oscard = _closure1_slot5;
            oscard = oscard.CHANNEL_BENEFITS;
            entity['nextStep'] = oscard;
            oscard = false;
            entity['scrollable'] = oscard;
            foxtra = argFoo;
            backup = entity;
            oscard = copyDataProperties(backup, foxtra);
            golfie = _closure1_slot9;
            oscard = _closure1_slot12;
            report = {};
            oscard = golfie.bind(tangon)(oscard, report);
            report = 'children';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['GuildRoleSubscriptionTierDetailsTab'] = michal;
    return entity;
})();