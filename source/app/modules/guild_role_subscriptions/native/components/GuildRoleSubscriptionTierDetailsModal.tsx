// app/modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionTierDetailsModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    options = argBaz;
    report = argCorge;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = options;
    var _closure1_slot2 = report;
    var _closure1_slot3 = golf;
    entity = function() { // Original name: Content
        _fun127292: for(var _fun127292_ip = 0; ; ) switch(_fun127292_ip) {
 0:
            mike = _closure1_slot1;
            foxtrot = _closure1_slot3;
            entity = 5;
            entity = foxtrot[entity];
            tango = undefined;
            entity = mike.bind(tango)(entity);
            echo = entity.bind(tango)();
            mike = _closure1_slot0;
            entity = 6;
            entity = foxtrot[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.useEditStateContext;
            entity = entity.bind(mike)();
            romeo = entity.guildId;
            zulu = entity.editStateId;
            options = _closure1_slot2;
            entity = 7;
            mike = foxtrot[entity];
            report = options.bind(tango)(mike);
            mike = report.useName;
            report = mike.bind(report)(zulu);
            mike = _closure1_slot4;
            offset = 2;
            mike = mike.bind(tango)(report, offset);
            golf = 0;
            context = mike[golf];
            report = 1;
            record = mike[report];
            mike = foxtrot[entity];
            verify = options.bind(tango)(mike);
            mike = verify.useImage;
            verify = mike.bind(verify)(zulu);
            mike = _closure1_slot4;
            verify = mike.bind(tango)(verify, offset);
            mike = verify[golf];
            verify = verify[report];
            var _closure2_slot0 = verify;
            verify = foxtrot[entity];
            yankee = options.bind(tango)(verify);
            verify = yankee.usePriceTier;
            yankee = verify.bind(yankee)(zulu);
            verify = _closure1_slot4;
            verify = verify.bind(tango)(yankee, offset);
            yankee = verify[golf];
            verify = verify[report];
            entity = foxtrot[entity];
            options = options.bind(tango)(entity);
            entity = options.useDescription;
            options = entity.bind(options)(zulu);
            entity = _closure1_slot4;
            entity = entity.bind(tango)(options, offset);
            vacuum = entity[golf];
            control = entity[report];
            offset = null;
            entity = offset != mike;
            target = null;
            if(!entity) { _fun127292_ip = 259; continue _fun127292 }
 250:
            entity = {};
            entity['uri'] = mike;
            target = entity;
 259:
            mike = _closure1_slot0;
            report = _closure1_slot3;
            entity = 8;
            entity = report[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.useSubscriptionListing;
            mike = entity.bind(mike)(zulu);
            zulu = offset == mike;
            entity = undefined;
            if(zulu) { _fun127292_ip = 305; continue _fun127292 }
 299:
            entity = mike.published;
 305:
            config = true;
            foxtrot = config === entity;
            source = _closure1_slot0;
            kilo = _closure1_slot3;
            entity = 9;
            entity = kilo[entity];
            mike = source.bind(tango)(entity);
            entity = mike.useRoleSubscriptionSettingsDisabled;
            backup = entity.bind(mike)();
            zulu = _closure1_slot11;
            mike = _closure1_slot10;
            entity = {};
            output = _closure1_slot9;
            golf = _closure1_slot1;
            options = 10;
            report = kilo[options];
            sizing = golf.bind(tango)(report);
            report = {};
            result = echo.header;
            report['style'] = result;
            result = 11;
            update = kilo[result];
            update = source.bind(tango)(update);
            status = update.intl;
            papa = status.string;
            update = kilo[result];
            update = source.bind(tango)(update);
            update = update.t;
            update = update.6XpbbW;
            update = papa.bind(status)(update);
            report['children'] = update;
            sizing = output.bind(tango)(sizing, report);
            report = new Array(8);
            report[0] = sizing;
            update = _closure1_slot9;
            papa = 12;
            sizing = kilo[papa];
            output = golf.bind(tango)(sizing);
            sizing = {};
            status = kilo[result];
            status = source.bind(tango)(status);
            lima = status.intl;
            sierra = lima.string;
            status = kilo[result];
            status = source.bind(tango)(status);
            status = status.t;
            status = status.pNZfgI;
            status = sierra.bind(lima)(status);
            sizing['description'] = status;
            sizing['image'] = target;
            target = _closure1_slot8;
            sizing['imageUploadSize'] = target;
            papa = kilo[papa];
            papa = source.bind(tango)(papa);
            papa = papa.PreviewShape;
            papa = papa.CIRCLE;
            sizing['previewShape'] = papa;
            sequence = function(argFoo) { // Original name: setImage
                entity = argFoo;
                zulu = entity.uri;
                mike = _closure2_slot0;
                entity = undefined;
                entity = mike.bind(entity)(zulu);
                return entity;
            };
            sizing['setImage'] = sequence;
            sizing['disabled'] = backup;
            sizing = update.bind(tango)(output, sizing);
            report[1] = sizing;
            update = _closure1_slot9;
            sizing = kilo[options];
            output = golf.bind(tango)(sizing);
            sizing = {};
            sequence = echo.header;
            sizing['style'] = sequence;
            sequence = kilo[result];
            sequence = source.bind(tango)(sequence);
            target = sequence.intl;
            papa = target.string;
            sequence = kilo[result];
            sequence = source.bind(tango)(sequence);
            sequence = sequence.t;
            sequence = sequence.rJ6OaW;
            sequence = papa.bind(target)(sequence);
            sizing['children'] = sequence;
            sizing = update.bind(tango)(output, sizing);
            report[2] = sizing;
            sequence = _closure1_slot9;
            sizing = 13;
            output = kilo[sizing];
            output = source.bind(tango)(output);
            update = output.FormInput;
            output = {'style': null, 'showTopContainer': false, 'multiline': false};
            papa = echo.textInput;
            output['style'] = papa;
            papa = _closure1_slot7;
            output['maxLength'] = papa;
            output['value'] = context;
            context = kilo[result];
            context = source.bind(tango)(context);
            target = context.intl;
            papa = target.string;
            context = kilo[result];
            context = source.bind(tango)(context);
            context = context.t;
            context = context.i4/g+P;
            context = papa.bind(target)(context);
            output['placeholder'] = context;
            output['onChange'] = record;
            output['autoFocus'] = config;
            config = 14;
            config = kilo[config];
            config = source.bind(tango)(config);
            config = config.ClearButtonVisibility;
            config = config.WITH_CONTENT;
            output['clearButtonVisibility'] = config;
            output['disabled'] = backup;
            output = sequence.bind(tango)(update, output);
            report[3] = output;
            sequence = _closure1_slot9;
            output = kilo[options];
            update = golf.bind(tango)(output);
            output = {};
            config = echo.header;
            output['style'] = config;
            config = kilo[result];
            config = source.bind(tango)(config);
            context = config.intl;
            record = context.string;
            config = kilo[result];
            config = source.bind(tango)(config);
            config = config.t;
            config = config.74Jctb;
            config = record.bind(context)(config);
            output['children'] = config;
            output = sequence.bind(tango)(update, output);
            report[4] = output;
            update = _closure1_slot9;
            sizing = kilo[sizing];
            sizing = source.bind(tango)(sizing);
            output = sizing.FormInput;
            sizing = {'style': null, 'showTopContainer': false, 'multiline': true, 'maxLength': null, 'numberOfLines': 3};
            sequence = echo.textInput;
            sizing['style'] = sequence;
            sequence = _closure1_slot6;
            sizing['maxLength'] = sequence;
            sizing['value'] = vacuum;
            vacuum = kilo[result];
            vacuum = source.bind(tango)(vacuum);
            config = vacuum.intl;
            sequence = config.string;
            vacuum = kilo[result];
            vacuum = source.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.3YHwoK;
            vacuum = sequence.bind(config)(vacuum);
            sizing['placeholder'] = vacuum;
            sizing['onChange'] = control;
            sizing['disabled'] = backup;
            sizing = update.bind(tango)(output, sizing);
            report[5] = sizing;
            output = _closure1_slot9;
            options = kilo[options];
            sizing = golf.bind(tango)(options);
            options = {};
            echo = echo.header;
            options['style'] = echo;
            echo = kilo[result];
            echo = source.bind(tango)(echo);
            update = echo.intl;
            echo = update.string;
            result = kilo[result];
            result = source.bind(tango)(result);
            result = result.t;
            result = result.CrRVAw;
            result = echo.bind(update)(result);
            options['children'] = result;
            options = output.bind(tango)(sizing, options);
            report[6] = options;
            options = _closure1_slot9;
            oscar = 15;
            oscar = kilo[oscar];
            golf = golf.bind(tango)(oscar);
            oscar = {};
            if(foxtrot) { _fun127292_ip = 1139; continue _fun127292 }
 1136:
            foxtrot = backup;
 1139:
            oscar['disabled'] = foxtrot;
            oscar['guildId'] = romeo;
            romeo = offset != yankee;
            offset = null;
            if(!romeo) { _fun127292_ip = 1159; continue _fun127292 }
 1156:
            offset = yankee;
 1159:
            oscar['price'] = offset;
            oscar['onChange'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[7] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zulu, entity, mike);
    entity = 0;
    mike = golf[entity];
    entity = undefined;
    mike = options.bind(entity)(mike);
    var _closure1_slot4 = mike;
    mike = 1;
    mike = golf[mike];
    options = report.bind(entity)(mike);
    mike = 2;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    report = mike.GuildRoleSubscriptionsTierScenes;
    var _closure1_slot5 = report;
    report = mike.MAX_SUBSCRIPTION_TIER_DESCRIPTION_LENGTH;
    var _closure1_slot6 = report;
    mike = mike.MAX_SUBSCRIPTION_TIER_NAME_LENGTH;
    var _closure1_slot7 = mike;
    mike = 3;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.UPLOAD_MEDIUM_SIZE;
    var _closure1_slot8 = mike;
    mike = 4;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot9 = report;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.Fragment;
    var _closure1_slot10 = report;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot11 = mike;
    report = options.memo;
    mike = function() {
        tango = _closure1_slot9;
        zulu = _closure1_slot13;
        mike = undefined;
        entity = {};
        entity = tango.bind(mike)(zulu, entity);
        return entity;
    };
    mike = report.bind(options)(mike);
    var _closure1_slot12 = mike;
    report = 17;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/guild_role_subscriptions/native/components/GuildRoleSubscriptionTierDetailsModal.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: GuildRoleSubscriptionTierDetailsModal
        _fun127295: for(var _fun127295_ip = 0; ; ) switch(_fun127295_ip) {
 0:
            mike = _closure1_slot0;
            yankee = _closure1_slot3;
            entity = 6;
            entity = yankee[entity];
            tango = undefined;
            mike = mike.bind(tango)(entity);
            entity = mike.useEditStateContext;
            entity = entity.bind(mike)();
            offset = entity.editStateId;
            golf = _closure1_slot2;
            entity = 7;
            mike = yankee[entity];
            zulu = golf.bind(tango)(mike);
            mike = zulu.useName;
            zulu = mike.bind(zulu)(offset);
            mike = _closure1_slot4;
            verify = 1;
            mike = mike.bind(tango)(zulu, verify);
            zulu = 0;
            oscar = mike[zulu];
            mike = yankee[entity];
            options = golf.bind(tango)(mike);
            mike = options.useImage;
            options = mike.bind(options)(offset);
            mike = _closure1_slot4;
            mike = mike.bind(tango)(options, verify);
            mike = mike[zulu];
            options = yankee[entity];
            romeo = golf.bind(tango)(options);
            options = romeo.usePriceTier;
            romeo = options.bind(romeo)(offset);
            options = _closure1_slot4;
            options = options.bind(tango)(romeo, verify);
            options = options[zulu];
            entity = yankee[entity];
            golf = golf.bind(tango)(entity);
            entity = golf.useDescription;
            golf = entity.bind(golf)(offset);
            entity = _closure1_slot4;
            entity = entity.bind(tango)(golf, verify);
            entity = entity[zulu];
            oscar = oscar.length;
            oscar = oscar > zulu;
            if(!oscar) { _fun127295_ip = 207; continue _fun127295 }
 201:
            golf = null;
            oscar = golf != options;
 207:
            if(!oscar) { _fun127295_ip = 219; continue _fun127295 }
 210:
            entity = entity.length;
            oscar = entity > zulu;
 219:
            if(!oscar) { _fun127295_ip = 228; continue _fun127295 }
 222:
            entity = null;
            oscar = entity != mike;
 228:
            zulu = _closure1_slot9;
            mike = _closure1_slot1;
            yankee = _closure1_slot3;
            entity = 16;
            entity = yankee[entity];
            mike = mike.bind(tango)(entity);
            entity = {};
            offset = _closure1_slot0;
            golf = 11;
            options = yankee[golf];
            options = offset.bind(tango)(options);
            romeo = options.intl;
            verify = romeo.string;
            options = yankee[golf];
            options = offset.bind(tango)(options);
            options = options.t;
            options = options.o3pHam;
            options = verify.bind(romeo)(options);
            entity['title'] = options;
            options = yankee[golf];
            options = offset.bind(tango)(options);
            verify = options.intl;
            options = verify.string;
            golf = yankee[golf];
            golf = offset.bind(tango)(golf);
            golf = golf.t;
            golf = golf.oOOMEx;
            golf = options.bind(verify)(golf);
            entity['description'] = golf;
            entity['canProceedToNextStep'] = oscar;
            oscar = _closure1_slot5;
            oscar = oscar.CHANNEL_BENEFITS;
            entity['nextStep'] = oscar;
            oscar = false;
            entity['scrollable'] = oscar;
            foxtrot = argFoo;
            backup = entity;
            oscar = copyDataProperties(backup, foxtrot);
            golf = _closure1_slot9;
            oscar = _closure1_slot12;
            report = {};
            oscar = golf.bind(tango)(oscar, report);
            report = 'children';
            entity[report] = oscar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['GuildRoleSubscriptionTierDetailsTab'] = mike;
    return entity;
})();