// app/modules/activities/panel/native/ActivityPanelStateContext.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var3 = exports;
    var6 = dependencyMap;
    var1 = global;
    var7 = var1.Object;
    var4 = var7.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var4.bind(var7)(var3, var1, var2);
    var1 = 0;
    var4 = var6[var1];
    var2 = metroImportAll;
    var1 = undefined;
    var7 = var2.bind(var1)(var4);
    var2 = 1;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var9 = var2.ActivityPanelModes;
    var4 = var7.createContext;
    var2 = {};
    var9 = var9.PANEL;
    var2['mode'] = var9;
    var9 = function setMode() {
        var1 = global;
        var3 = var1.Error;
        var1 = var3.prototype;
        var2 = Object.create(var1, {constructor: {value: var3}});
        var4 = 'ActivityPanelStateContextType.Provider.setMode: not called within a context provider';
        var5 = var2;
        var1 = new var5[var3](var4, var3);
        var1 = var1 instanceof Object ? var1 : var2;
        throw var1;
    };
    var2['setMode'] = var9;
    var9 = {'width': 9, 'height': 16, 'isLetterboxed': false, 'isLandscape': false, 'isWindowLandscape': false};
    var2['wrapperDimensions'] = var9;
    var9 = 2;
    var10 = var6[var9];
    var12 = var5.bind(var1)(var10);
    var11 = var12.createFakeSharedValue;
    var10 = {'x': 4294967295, 'y': 4294967295};
    var10 = var11.bind(var12)(var10);
    var2['pipState'] = var10;
    var10 = var6[var9];
    var12 = var5.bind(var1)(var10);
    var11 = var12.createFakeSharedValue;
    var10 = {'top': 0, 'bottom': 0};
    var10 = var11.bind(var12)(var10);
    var2['pipAvoidanceSpecs'] = var10;
    var9 = var6[var9];
    var11 = var5.bind(var1)(var9);
    var10 = var11.createFakeSharedValue;
    var9 = {'x': 0, 'y': 0, 'gestureActive': false};
    var9 = var10.bind(var11)(var9);
    var2['wrapperOffset'] = var9;
    var8 = function useActivityWebViewLock() {
        var1 = true;
        return var1;
    };
    var2['useActivityWebViewLock'] = var8;
    var2 = var4.bind(var7)(var2);
    var4 = 3;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/activities/panel/native/ActivityPanelStateContext.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();