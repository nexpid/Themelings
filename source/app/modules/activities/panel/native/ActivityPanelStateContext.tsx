// app/modules/activities/panel/native/ActivityPanelStateContext.tsx
export default (function(_, argBar, __, argCorge, ___, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    entity = 0;
    tango = oscar[entity];
    mike = argCorge;
    entity = undefined;
    golf = mike.bind(entity)(tango);
    mike = 1;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    verify = mike.ActivityPanelModes;
    tango = golf.createContext;
    mike = {};
    verify = verify.PANEL;
    mike['mode'] = verify;
    verify = function() { // Original name: setMode
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'ActivityPanelStateContextType.Provider.setMode: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['setMode'] = verify;
    verify = {'width': 9, 'height': 16, 'isLetterboxed': false, 'isLandscape': false, 'isWindowLandscape': false};
    mike['wrapperDimensions'] = verify;
    verify = 2;
    offset = oscar[verify];
    romeo = report.bind(entity)(offset);
    yankee = romeo.createFakeSharedValue;
    offset = {'x': 4294967295, 'y': 4294967295};
    offset = yankee.bind(romeo)(offset);
    mike['pipState'] = offset;
    offset = oscar[verify];
    romeo = report.bind(entity)(offset);
    yankee = romeo.createFakeSharedValue;
    offset = {'top': 0, 'bottom': 0};
    offset = yankee.bind(romeo)(offset);
    mike['pipAvoidanceSpecs'] = offset;
    verify = oscar[verify];
    yankee = report.bind(entity)(verify);
    offset = yankee.createFakeSharedValue;
    verify = {'x': 0, 'y': 0, 'gestureActive': false};
    verify = offset.bind(yankee)(verify);
    mike['wrapperOffset'] = verify;
    options = function() { // Original name: useActivityWebViewLock
        entity = true;
        return entity;
    };
    mike['useActivityWebViewLock'] = options;
    mike = tango.bind(golf)(mike);
    tango = 3;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/activities/panel/native/ActivityPanelStateContext.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();