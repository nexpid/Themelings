// app/modules/activities/native/ActivitiesPrivateChannelCallTooltip.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.StyleSheet;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot4 = tangon;
    tangon = {};
    golfie = 500;
    tangon['duration'] = golfie;
    var _closure1_slot5 = tangon;
    golfie = option.create;
    tangon = {};
    verify = {'marginLeft': 200, 'top': 9, 'position': 'relative', 'borderTopWidth': 0, 'borderRightWidth': 0, 'borderBottomWidth': 16, 'borderLeftWidth': 16};
    offset = 200;
    romeon = 16;
    backup = {};
    foxtra = '225deg';
    backup['rotateZ'] = foxtra;
    foxtra = new Array(1);
    foxtra[0] = backup;
    verify['transform'] = foxtra;
    tangon['arrow'] = verify;
    verify = {};
    verify['padding'] = romeon;
    tangon['tooltip'] = verify;
    verify = {'position': 'absolute', 'width': 280, 'zIndex': 2, 'right': 4294967248, 'top': 4294967288};
    tangon['tooltipContainer'] = verify;
    verify = {};
    verify['width'] = offset;
    tangon['shortWidthTooltipContainer'] = verify;
    verify = {'textAlign': 'center', 'fontSize': 14};
    tangon['tooltipText'] = verify;
    verify = {'paddingVertical': 0, 'marginTop': 14, 'alignSelf': 'stretch'};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.unsafe_rawColors;
    romeon = romeon.PRIMARY_100;
    verify['backgroundColor'] = romeon;
    tangon['closeButton'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.BRAND_500;
    verify['color'] = offset;
    tangon['closeButtonText'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = {};
    golfie = 'function ActivitiesPrivateChannelCallTooltipTsx1(){const{withRepeat,withSequence,withTiming,OFFSET,translateBounceOffset,TIMING_CONFIG}=this.__closure;return{transform:[{translateY:withRepeat(withSequence(withTiming(OFFSET,{duration:0}),withTiming(OFFSET+translateBounceOffset,TIMING_CONFIG),withTiming(OFFSET,TIMING_CONFIG)),10)}]};}';
    tangon['code'] = golfie;
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/activities/native/ActivitiesPrivateChannelCallTooltip.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ActivitiesPrivateChannelCallTooltip
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            foxtra = entity.onClosePress;
            tangon = undefined;
            var _closure2_slot0 = tangon;
            zuuluu = _closure1_slot0;
            oscard = _closure1_slot2;
            entity = 5;
            entity = oscard[entity];
            golfie = zuuluu.bind(tangon)(entity);
            oscard = golfie.useStateFromStores;
            entity = _closure1_slot3;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            entity = function() {
                entity = _closure1_slot3;
                entity = entity.useReducedMotion;
                return entity;
            };
            entity = oscard.bind(golfie)(zuuluu, entity);
            option = 4;
            if(!entity) { _fun00002_ip = 78; continue _fun00001 }
 76:
            option = 0;
 78:
            _closure2_slot0 = option;
            output = _closure1_slot0;
            yankee = _closure1_slot2;
            entity = 6;
            zuuluu = yankee[entity];
            oscard = output.bind(tangon)(zuuluu);
            zuuluu = oscard.useAnimatedStyle;
            michal = function() { // Original name: c
                entity = {};
                zuuluu = {};
                foxtra = _closure1_slot0;
                backup = _closure1_slot2;
                michal = 6;
                tangon = backup[michal];
                offset = undefined;
                oscard = foxtra.bind(offset)(tangon);
                report = oscard.withRepeat;
                michal = backup[michal];
                verify = foxtra.bind(offset)(michal);
                option = verify.withSequence;
                michal = 7;
                tangon = backup[michal];
                kiloes = foxtra.bind(offset)(tangon);
                golfie = kiloes.withTiming;
                tangon = {};
                romeon = 0;
                tangon['duration'] = romeon;
                romeon = 40;
                golfie = golfie.bind(kiloes)(romeon, tangon);
                tangon = backup[michal];
                sizing = foxtra.bind(offset)(tangon);
                kiloes = sizing.withTiming;
                tangon = _closure2_slot0;
                tangon = romeon + tangon;
                yankee = _closure1_slot5;
                tangon = kiloes.bind(sizing)(tangon, yankee);
                michal = backup[michal];
                offset = foxtra.bind(offset)(michal);
                michal = offset.withTiming;
                michal = michal.bind(offset)(romeon, yankee);
                tangon = option.bind(verify)(golfie, tangon, michal);
                michal = 10;
                michal = report.bind(oscard)(tangon, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            golfie = {};
            verify = yankee[entity];
            verify = output.bind(tangon)(verify);
            verify = verify.withRepeat;
            golfie['withRepeat'] = verify;
            verify = yankee[entity];
            verify = output.bind(tangon)(verify);
            verify = verify.withSequence;
            golfie['withSequence'] = verify;
            verify = 7;
            verify = yankee[verify];
            verify = output.bind(tangon)(verify);
            verify = verify.withTiming;
            golfie['withTiming'] = verify;
            verify = 40;
            golfie['OFFSET'] = verify;
            golfie['translateBounceOffset'] = option;
            option = _closure1_slot5;
            golfie['TIMING_CONFIG'] = option;
            michal['__closure'] = golfie;
            golfie = 4621705591670.0;
            michal['__workletHash'] = golfie;
            golfie = _closure1_slot7;
            michal['__initData'] = golfie;
            oscard = zuuluu.bind(oscard)(michal);
            zuuluu = _closure1_slot4;
            offset = _closure1_slot1;
            entity = yankee[entity];
            entity = offset.bind(tangon)(entity);
            michal = entity.View;
            entity = {};
            romeon = _closure1_slot6;
            golfie = romeon.tooltipContainer;
            report = new Array(2);
            report[0] = golfie;
            report[1] = oscard;
            entity['style'] = report;
            report = 8;
            report = yankee[report];
            oscard = offset.bind(tangon)(report);
            report = {};
            golfie = romeon.tooltip;
            report['containerStyle'] = golfie;
            golfie = romeon.tooltipText;
            report['labelStyle'] = golfie;
            option = romeon.arrow;
            golfie = new Array(1);
            golfie[0] = option;
            report['arrowStyle'] = golfie;
            backup = 9;
            golfie = yankee[backup];
            golfie = output.bind(tangon)(golfie);
            verify = golfie.intl;
            option = verify.string;
            golfie = yankee[backup];
            golfie = output.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.xAW71d;
            golfie = option.bind(verify)(golfie);
            report['label'] = golfie;
            golfie = yankee[backup];
            golfie = output.bind(tangon)(golfie);
            verify = golfie.intl;
            option = verify.string;
            golfie = yankee[backup];
            golfie = output.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.HOPqzc;
            golfie = option.bind(verify)(golfie);
            report['title'] = golfie;
            verify = 10;
            golfie = yankee[verify];
            option = offset.bind(tangon)(golfie);
            golfie = {};
            kiloes = yankee[backup];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = yankee[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.NX+WJC;
            backup = kiloes.bind(sizing)(backup);
            golfie['text'] = backup;
            golfie['onPress'] = foxtra;
            foxtra = yankee[verify];
            foxtra = offset.bind(tangon)(foxtra);
            foxtra = foxtra.Colors;
            foxtra = foxtra.PRIMARY;
            golfie['color'] = foxtra;
            foxtra = romeon.closeButtonText;
            golfie['textStyle'] = foxtra;
            romeon = romeon.closeButton;
            golfie['style'] = romeon;
            verify = yankee[verify];
            verify = offset.bind(tangon)(verify);
            verify = verify.Sizes;
            verify = verify.SMALL;
            golfie['size'] = verify;
            verify = true;
            golfie['shrink'] = verify;
            golfie = zuuluu.bind(tangon)(option, golfie);
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();