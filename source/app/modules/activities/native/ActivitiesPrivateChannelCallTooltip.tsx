// app/modules/activities/native/ActivitiesPrivateChannelCallTooltip.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.StyleSheet;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = {};
    golf = 500;
    tango['duration'] = golf;
    var _closure1_slot5 = tango;
    golf = options.create;
    tango = {};
    verify = {'marginLeft': 200, 'top': 9, 'position': 'relative', 'borderTopWidth': 0, 'borderRightWidth': 0, 'borderBottomWidth': 16, 'borderLeftWidth': 16};
    offset = 200;
    romeo = 16;
    backup = {};
    foxtrot = '225deg';
    backup['rotateZ'] = foxtrot;
    foxtrot = new Array(1);
    foxtrot[0] = backup;
    verify['transform'] = foxtrot;
    tango['arrow'] = verify;
    verify = {};
    verify['padding'] = romeo;
    tango['tooltip'] = verify;
    verify = {'position': 'absolute', 'width': 280, 'zIndex': 2, 'right': 4294967248, 'top': 4294967288};
    tango['tooltipContainer'] = verify;
    verify = {};
    verify['width'] = offset;
    tango['shortWidthTooltipContainer'] = verify;
    verify = {'textAlign': 'center', 'fontSize': 14};
    tango['tooltipText'] = verify;
    verify = {'paddingVertical': 0, 'marginTop': 14, 'alignSelf': 'stretch'};
    offset = 4;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.unsafe_rawColors;
    romeo = romeo.PRIMARY_100;
    verify['backgroundColor'] = romeo;
    tango['closeButton'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.BRAND_500;
    verify['color'] = offset;
    tango['closeButtonText'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = {};
    golf = 'function ActivitiesPrivateChannelCallTooltipTsx1(){const{withRepeat,withSequence,withTiming,OFFSET,translateBounceOffset,TIMING_CONFIG}=this.__closure;return{transform:[{translateY:withRepeat(withSequence(withTiming(OFFSET,{duration:0}),withTiming(OFFSET+translateBounceOffset,TIMING_CONFIG),withTiming(OFFSET,TIMING_CONFIG)),10)}]};}';
    tango['code'] = golf;
    var _closure1_slot7 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/activities/native/ActivitiesPrivateChannelCallTooltip.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ActivitiesPrivateChannelCallTooltip
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            foxtrot = entity.onClosePress;
            tango = undefined;
            var _closure2_slot0 = tango;
            zulu = _closure1_slot0;
            oscar = _closure1_slot2;
            entity = 5;
            entity = oscar[entity];
            golf = zulu.bind(tango)(entity);
            oscar = golf.useStateFromStores;
            entity = _closure1_slot3;
            zulu = new Array(1);
            zulu[0] = entity;
            entity = function() {
                entity = _closure1_slot3;
                entity = entity.useReducedMotion;
                return entity;
            };
            entity = oscar.bind(golf)(zulu, entity);
            options = 4;
            if(!entity) { _fun00002_ip = 78; continue _fun00001 }
 76:
            options = 0;
 78:
            _closure2_slot0 = options;
            output = _closure1_slot0;
            yankee = _closure1_slot2;
            entity = 6;
            zulu = yankee[entity];
            oscar = output.bind(tango)(zulu);
            zulu = oscar.useAnimatedStyle;
            mike = function() { // Original name: c
                entity = {};
                zulu = {};
                foxtrot = _closure1_slot0;
                backup = _closure1_slot2;
                mike = 6;
                tango = backup[mike];
                offset = undefined;
                oscar = foxtrot.bind(offset)(tango);
                report = oscar.withRepeat;
                mike = backup[mike];
                verify = foxtrot.bind(offset)(mike);
                options = verify.withSequence;
                mike = 7;
                tango = backup[mike];
                kilo = foxtrot.bind(offset)(tango);
                golf = kilo.withTiming;
                tango = {};
                romeo = 0;
                tango['duration'] = romeo;
                romeo = 40;
                golf = golf.bind(kilo)(romeo, tango);
                tango = backup[mike];
                sizing = foxtrot.bind(offset)(tango);
                kilo = sizing.withTiming;
                tango = _closure2_slot0;
                tango = romeo + tango;
                yankee = _closure1_slot5;
                tango = kilo.bind(sizing)(tango, yankee);
                mike = backup[mike];
                offset = foxtrot.bind(offset)(mike);
                mike = offset.withTiming;
                mike = mike.bind(offset)(romeo, yankee);
                tango = options.bind(verify)(golf, tango, mike);
                mike = 10;
                mike = report.bind(oscar)(tango, mike);
                zulu['translateY'] = mike;
                mike = new Array(1);
                mike[0] = zulu;
                entity['transform'] = mike;
                return entity;
            };
            golf = {};
            verify = yankee[entity];
            verify = output.bind(tango)(verify);
            verify = verify.withRepeat;
            golf['withRepeat'] = verify;
            verify = yankee[entity];
            verify = output.bind(tango)(verify);
            verify = verify.withSequence;
            golf['withSequence'] = verify;
            verify = 7;
            verify = yankee[verify];
            verify = output.bind(tango)(verify);
            verify = verify.withTiming;
            golf['withTiming'] = verify;
            verify = 40;
            golf['OFFSET'] = verify;
            golf['translateBounceOffset'] = options;
            options = _closure1_slot5;
            golf['TIMING_CONFIG'] = options;
            mike['__closure'] = golf;
            golf = 4621705591670.0;
            mike['__workletHash'] = golf;
            golf = _closure1_slot7;
            mike['__initData'] = golf;
            oscar = zulu.bind(oscar)(mike);
            zulu = _closure1_slot4;
            offset = _closure1_slot1;
            entity = yankee[entity];
            entity = offset.bind(tango)(entity);
            mike = entity.View;
            entity = {};
            romeo = _closure1_slot6;
            golf = romeo.tooltipContainer;
            report = new Array(2);
            report[0] = golf;
            report[1] = oscar;
            entity['style'] = report;
            report = 8;
            report = yankee[report];
            oscar = offset.bind(tango)(report);
            report = {};
            golf = romeo.tooltip;
            report['containerStyle'] = golf;
            golf = romeo.tooltipText;
            report['labelStyle'] = golf;
            options = romeo.arrow;
            golf = new Array(1);
            golf[0] = options;
            report['arrowStyle'] = golf;
            backup = 9;
            golf = yankee[backup];
            golf = output.bind(tango)(golf);
            verify = golf.intl;
            options = verify.string;
            golf = yankee[backup];
            golf = output.bind(tango)(golf);
            golf = golf.t;
            golf = golf.xAW71d;
            golf = options.bind(verify)(golf);
            report['label'] = golf;
            golf = yankee[backup];
            golf = output.bind(tango)(golf);
            verify = golf.intl;
            options = verify.string;
            golf = yankee[backup];
            golf = output.bind(tango)(golf);
            golf = golf.t;
            golf = golf.HOPqzc;
            golf = options.bind(verify)(golf);
            report['title'] = golf;
            verify = 10;
            golf = yankee[verify];
            options = offset.bind(tango)(golf);
            golf = {};
            kilo = yankee[backup];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = yankee[backup];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            backup = backup.NX+WJC;
            backup = kilo.bind(sizing)(backup);
            golf['text'] = backup;
            golf['onPress'] = foxtrot;
            foxtrot = yankee[verify];
            foxtrot = offset.bind(tango)(foxtrot);
            foxtrot = foxtrot.Colors;
            foxtrot = foxtrot.PRIMARY;
            golf['color'] = foxtrot;
            foxtrot = romeo.closeButtonText;
            golf['textStyle'] = foxtrot;
            romeo = romeo.closeButton;
            golf['style'] = romeo;
            verify = yankee[verify];
            verify = offset.bind(tango)(verify);
            verify = verify.Sizes;
            verify = verify.SMALL;
            golf['size'] = verify;
            verify = true;
            golf['shrink'] = verify;
            golf = zulu.bind(tango)(options, golf);
            report['children'] = golf;
            report = zulu.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();