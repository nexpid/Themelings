// app/modules/activities/native/ActivitiesDebugOverlay.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var11 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var11;
    var _closure1_slot2 = var6;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var7 = var6[var1];
    var4 = metroImportAll;
    var1 = undefined;
    var4 = var4.bind(var1)(var7);
    var4 = 1;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var8 = var4.StyleSheet;
    var4 = var4.View;
    var _closure1_slot3 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var7 = var4.jsxs;
    var _closure1_slot4 = var7;
    var4 = var4.jsx;
    var _closure1_slot5 = var4;
    var7 = var8.create;
    var4 = {};
    var9 = {'position': 'absolute', 'top': 0, 'left': 0, 'backgroundColor': null, 'paddingRight': 16, 'paddingBottom': 16};
    var10 = 3;
    var10 = var6[var10];
    var13 = var5.bind(var1)(var10);
    var12 = var13.hexWithOpacity;
    var10 = 4;
    var10 = var6[var10];
    var10 = var11.bind(var1)(var10);
    var10 = var10.unsafe_rawColors;
    var11 = var10.BLACK_500;
    var10 = 0.7;
    var10 = var12.bind(var13)(var11, var10);
    var9['backgroundColor'] = var10;
    var4['container'] = var9;
    var9 = {};
    var10 = 'row';
    var9['flexDirection'] = var10;
    var4['row'] = var9;
    var4 = var7.bind(var8)(var4);
    var _closure1_slot6 = var4;
    var4 = 8;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/activities/native/ActivitiesDebugOverlay.tsx';
    var4 = var5.bind(var6)(var4);
    var2 = function ActivitiesDebugOverlay() {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var3 = _closure1_slot1;
            var1 = _closure1_slot2;
            var6 = 5;
            var2 = var1[var6];
            var4 = undefined;
            var2 = var3.bind(var4)(var2);
            var3 = var2.bind(var4)();
            var2 = _closure1_slot0;
            var1 = var1[var6];
            var1 = var2.bind(var4)(var1);
            var1 = var1.ThermalStates;
            var1 = var1.UNHANDLED;
            var10 = '';
            var11 = 'always-white';
            if(!(var1 !== var3)) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var2 = _closure1_slot0;
            var1 = _closure1_slot2;
            var1 = var1[var6];
            var1 = var2.bind(var4)(var1);
            var1 = var1.ThermalStates;
            var1 = var1.NOMINAL;
            var10 = 'nominal';
            var11 = 'text-positive';
            if(!(var1 !== var3)) { _fun0001_ip = 2; continue _fun0001 }
case 4:
            var2 = _closure1_slot0;
            var1 = _closure1_slot2;
            var1 = var1[var6];
            var1 = var2.bind(var4)(var1);
            var1 = var1.ThermalStates;
            var1 = var1.FAIR;
            var10 = 'fair';
            var11 = 'text-warning';
            if(!(var1 !== var3)) { _fun0001_ip = 2; continue _fun0001 }
case 5:
            var2 = _closure1_slot0;
            var1 = _closure1_slot2;
            var1 = var1[var6];
            var1 = var2.bind(var4)(var1);
            var1 = var1.ThermalStates;
            var2 = var1.SERIOUS;
            var10 = 'serious';
            var1 = 'text-danger';
            var11 = var1;
            if(!(var2 !== var3)) { _fun0001_ip = 2; continue _fun0001 }
case 6:
            var5 = _closure1_slot0;
            var2 = _closure1_slot2;
            var2 = var2[var6];
            var2 = var5.bind(var4)(var2);
            var2 = var2.ThermalStates;
            var2 = var2.CRITICAL;
            var10 = undefined;
            var11 = undefined;
            if(!(var2 === var3)) { _fun0001_ip = 2; continue _fun0001 }
case 7:
            var10 = 'critical';
            var11 = var1;
case 2:
            var2 = _closure1_slot1;
            var13 = _closure1_slot2;
            var1 = 6;
            var1 = var13[var1];
            var1 = var2.bind(var4)(var1);
            var1 = var1.bind(var4)();
            var14 = var1.top;
            var12 = var1.left;
            var3 = _closure1_slot5;
            var2 = _closure1_slot3;
            var1 = {};
            var8 = _closure1_slot6;
            var6 = var8.container;
            var5 = new Array(2);
            var5[0] = var6;
            var6 = {};
            var9 = 16;
            var14 = var14 + var9;
            var6['paddingTop'] = var14;
            var9 = var12 + var9;
            var6['paddingLeft'] = var9;
            var5[1] = var6;
            var1['style'] = var5;
            var5 = 'none';
            var1['pointerEvents'] = var5;
            var6 = _closure1_slot4;
            var5 = {};
            var8 = var8.row;
            var5['style'] = var8;
            var9 = _closure1_slot0;
            var8 = 7;
            var7 = var13[var8];
            var7 = var9.bind(var4)(var7);
            var14 = var7.Text;
            var7 = {'variant': 'text-md/normal', 'color': 'always-white'};
            var12 = 'text-md/normal';
            var15 = ['thermal state:', ' '];
            var7['children'] = var15;
            var14 = var6.bind(var4)(var14, var7);
            var7 = new Array(2);
            var7[0] = var14;
            var8 = var13[var8];
            var8 = var9.bind(var4)(var8);
            var9 = var8.Text;
            var8 = {};
            var8['variant'] = var12;
            var8['color'] = var11;
            var8['children'] = var10;
            var8 = var3.bind(var4)(var9, var8);
            var7[1] = var8;
            var5['children'] = var7;
            var5 = var6.bind(var4)(var2, var5);
            var1['children'] = var5;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        }
    };
    var3['default'] = var2;
    return var1;
})();