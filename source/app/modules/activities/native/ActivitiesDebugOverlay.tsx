// app/modules/activities/native/ActivitiesDebugOverlay.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.StyleSheet;
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot5 = tango;
    golf = options.create;
    tango = {};
    verify = {'position': 'absolute', 'top': 0, 'left': 0, 'backgroundColor': null, 'paddingRight': 16, 'paddingBottom': 16};
    offset = 3;
    offset = oscar[offset];
    foxtrot = report.bind(entity)(offset);
    romeo = foxtrot.hexWithOpacity;
    offset = 4;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    yankee = offset.BLACK_500;
    offset = 0.7;
    offset = romeo.bind(foxtrot)(yankee, offset);
    verify['backgroundColor'] = offset;
    tango['container'] = verify;
    verify = {};
    offset = 'row';
    verify['flexDirection'] = offset;
    tango['row'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 8;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/activities/native/ActivitiesDebugOverlay.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: ActivitiesDebugOverlay
        _fun104348: for(var _fun104348_ip = 0; ; ) switch(_fun104348_ip) {
 0:
            zulu = _closure1_slot1;
            entity = _closure1_slot2;
            oscar = 5;
            mike = entity[oscar];
            tango = undefined;
            mike = zulu.bind(tango)(mike);
            zulu = mike.bind(tango)();
            mike = _closure1_slot0;
            entity = entity[oscar];
            entity = mike.bind(tango)(entity);
            entity = entity.ThermalStates;
            entity = entity.UNHANDLED;
            offset = '';
            yankee = 'always-white';
            if(!(entity !== zulu)) { _fun104348_ip = 258; continue _fun104348 }
 71:
            mike = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[oscar];
            entity = mike.bind(tango)(entity);
            entity = entity.ThermalStates;
            entity = entity.NOMINAL;
            offset = 'nominal';
            yankee = 'text-positive';
            if(!(entity !== zulu)) { _fun104348_ip = 258; continue _fun104348 }
 119:
            mike = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[oscar];
            entity = mike.bind(tango)(entity);
            entity = entity.ThermalStates;
            entity = entity.FAIR;
            offset = 'fair';
            yankee = 'text-warning';
            if(!(entity !== zulu)) { _fun104348_ip = 258; continue _fun104348 }
 164:
            mike = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[oscar];
            entity = mike.bind(tango)(entity);
            entity = entity.ThermalStates;
            mike = entity.SERIOUS;
            offset = 'serious';
            entity = 'text-danger';
            yankee = entity;
            if(!(mike !== zulu)) { _fun104348_ip = 258; continue _fun104348 }
 212:
            report = _closure1_slot0;
            mike = _closure1_slot2;
            mike = mike[oscar];
            mike = report.bind(tango)(mike);
            mike = mike.ThermalStates;
            mike = mike.CRITICAL;
            offset = undefined;
            yankee = undefined;
            if(!(mike === zulu)) { _fun104348_ip = 258; continue _fun104348 }
 249:
            offset = 'critical';
            yankee = entity;
 258:
            mike = _closure1_slot1;
            foxtrot = _closure1_slot2;
            entity = 6;
            entity = foxtrot[entity];
            entity = mike.bind(tango)(entity);
            entity = entity.bind(tango)();
            backup = entity.top;
            romeo = entity.left;
            zulu = _closure1_slot5;
            mike = _closure1_slot3;
            entity = {};
            options = _closure1_slot6;
            oscar = options.container;
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            verify = 16;
            backup = backup + verify;
            oscar['paddingTop'] = backup;
            verify = romeo + verify;
            oscar['paddingLeft'] = verify;
            report[1] = oscar;
            entity['style'] = report;
            report = 'none';
            entity['pointerEvents'] = report;
            oscar = _closure1_slot4;
            report = {};
            options = options.row;
            report['style'] = options;
            verify = _closure1_slot0;
            options = 7;
            golf = foxtrot[options];
            golf = verify.bind(tango)(golf);
            backup = golf.Text;
            golf = {'variant': 'text-md/normal', 'color': 'always-white'};
            romeo = 'text-md/normal';
            kilo = ['thermal state:', ' '];
            golf['children'] = kilo;
            backup = oscar.bind(tango)(backup, golf);
            golf = new Array(2);
            golf[0] = backup;
            options = foxtrot[options];
            options = verify.bind(tango)(options);
            verify = options.Text;
            options = {};
            options['variant'] = romeo;
            options['color'] = yankee;
            options['children'] = offset;
            options = zulu.bind(tango)(verify, options);
            golf[1] = options;
            report['children'] = golf;
            report = oscar.bind(tango)(mike, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();