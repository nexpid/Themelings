// app/modules/activities/native/ActivitiesDebugOverlay.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.StyleSheet;
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsxs;
    var _closure1_slot4 = golfie;
    tangon = tangon.jsx;
    var _closure1_slot5 = tangon;
    golfie = option.create;
    tangon = {};
    verify = {'position': 'absolute', 'top': 0, 'left': 0, 'backgroundColor': null, 'paddingRight': 16, 'paddingBottom': 16};
    offset = 3;
    offset = oscard[offset];
    foxtra = report.bind(entity)(offset);
    romeon = foxtra.hexWithOpacity;
    offset = 4;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    yankee = offset.BLACK_500;
    offset = 0.7;
    offset = romeon.bind(foxtra)(yankee, offset);
    verify['backgroundColor'] = offset;
    tangon['container'] = verify;
    verify = {};
    offset = 'row';
    verify['flexDirection'] = offset;
    tangon['row'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/activities/native/ActivitiesDebugOverlay.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: ActivitiesDebugOverlay
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = _closure1_slot1;
            entity = _closure1_slot2;
            oscard = 5;
            michal = entity[oscard];
            tangon = undefined;
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = michal.bind(tangon)();
            michal = _closure1_slot0;
            entity = entity[oscard];
            entity = michal.bind(tangon)(entity);
            entity = entity.ThermalStates;
            entity = entity.UNHANDLED;
            offset = '';
            yankee = 'always-white';
            if(!(entity !== zuuluu)) { _fun00002_ip = 258; continue _fun00001 }
 71:
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[oscard];
            entity = michal.bind(tangon)(entity);
            entity = entity.ThermalStates;
            entity = entity.NOMINAL;
            offset = 'nominal';
            yankee = 'text-positive';
            if(!(entity !== zuuluu)) { _fun00002_ip = 258; continue _fun00001 }
 119:
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[oscard];
            entity = michal.bind(tangon)(entity);
            entity = entity.ThermalStates;
            entity = entity.FAIR;
            offset = 'fair';
            yankee = 'text-warning';
            if(!(entity !== zuuluu)) { _fun00002_ip = 258; continue _fun00001 }
 164:
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[oscard];
            entity = michal.bind(tangon)(entity);
            entity = entity.ThermalStates;
            michal = entity.SERIOUS;
            offset = 'serious';
            entity = 'text-danger';
            yankee = entity;
            if(!(michal !== zuuluu)) { _fun00002_ip = 258; continue _fun00001 }
 212:
            report = _closure1_slot0;
            michal = _closure1_slot2;
            michal = michal[oscard];
            michal = report.bind(tangon)(michal);
            michal = michal.ThermalStates;
            michal = michal.CRITICAL;
            offset = undefined;
            yankee = undefined;
            if(!(michal === zuuluu)) { _fun00002_ip = 258; continue _fun00001 }
 249:
            offset = 'critical';
            yankee = entity;
 258:
            michal = _closure1_slot1;
            foxtra = _closure1_slot2;
            entity = 6;
            entity = foxtra[entity];
            entity = michal.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            backup = entity.top;
            romeon = entity.left;
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            option = _closure1_slot6;
            oscard = option.container;
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            verify = 16;
            backup = backup + verify;
            oscard['paddingTop'] = backup;
            verify = romeon + verify;
            oscard['paddingLeft'] = verify;
            report[1] = oscard;
            entity['style'] = report;
            report = 'none';
            entity['pointerEvents'] = report;
            oscard = _closure1_slot4;
            report = {};
            option = option.row;
            report['style'] = option;
            verify = _closure1_slot0;
            option = 7;
            golfie = foxtra[option];
            golfie = verify.bind(tangon)(golfie);
            backup = golfie.Text;
            golfie = {'variant': 'text-md/normal', 'color': 'always-white'};
            romeon = 'text-md/normal';
            kiloes = ['thermal state:', ' '];
            golfie['children'] = kiloes;
            backup = oscard.bind(tangon)(backup, golfie);
            golfie = new Array(2);
            golfie[0] = backup;
            option = foxtra[option];
            option = verify.bind(tangon)(option);
            verify = option.Text;
            option = {};
            option['variant'] = romeon;
            option['color'] = yankee;
            option['children'] = offset;
            option = zuuluu.bind(tangon)(verify, option);
            golfie[1] = option;
            report['children'] = golfie;
            report = oscard.bind(tangon)(michal, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();