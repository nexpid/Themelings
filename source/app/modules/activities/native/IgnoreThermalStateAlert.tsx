// app/modules/activities/native/IgnoreThermalStateAlert.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot3 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 'center';
    verify = {'marginTop': 16, 'lineHeight': 20, 'textAlign': 'center'};
    tangon['text'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['header'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/activities/native/IgnoreThermalStateAlert.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: IgnoreThermalStateAlert
        zuuluu = argFoo;
        entity = zuuluu.onConfirm;
        var _closure2_slot0 = entity;
        entity = null;
        michal = Object.create(entity);
        entity = 0;
        michal['onConfirm'] = entity;
        result = {};
        output = zuuluu;
        sizing = michal;
        output = copyDataProperties(result, output, sizing);
        entity = _closure1_slot5;
        tangon = undefined;
        offset = entity.bind(tangon)();
        zuuluu = _closure1_slot4;
        michal = _closure1_slot1;
        foxtra = _closure1_slot2;
        entity = 3;
        entity = foxtra[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        result = entity;
        golfie = copyDataProperties(result, output);
        romeon = _closure1_slot0;
        verify = 4;
        golfie = foxtra[verify];
        golfie = romeon.bind(tangon)(golfie);
        yankee = golfie.intl;
        option = yankee.string;
        golfie = foxtra[verify];
        golfie = romeon.bind(tangon)(golfie);
        golfie = golfie.t;
        golfie = golfie.1fRDnZ;
        option = option.bind(yankee)(golfie);
        golfie = 'cancelText';
        entity[golfie] = option;
        golfie = function() { // Original name: onCancel
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure2_slot0;
                michal = null;
                if(!(michal != zuuluu)) { _fun00002_ip = 23; continue _fun00001 }
 13:
                michal = _closure2_slot0;
                entity = undefined;
                entity = michal.bind(entity)();
 23:
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 5;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.disregardSeriousThermalState;
                michal = michal.bind(zuuluu)();
                return entity;
            }
        };
        oscard = 'onCancel';
        entity[oscard] = golfie;
        oscard = foxtra[verify];
        oscard = romeon.bind(tangon)(oscard);
        option = oscard.intl;
        golfie = option.string;
        oscard = foxtra[verify];
        oscard = romeon.bind(tangon)(oscard);
        oscard = oscard.t;
        oscard = oscard.oEAioK;
        golfie = golfie.bind(option)(oscard);
        oscard = 'confirmText';
        entity[oscard] = golfie;
        option = _closure1_slot3;
        report = 6;
        oscard = foxtra[report];
        oscard = romeon.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'style': null, 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
        yankee = offset.header;
        oscard['style'] = yankee;
        yankee = foxtra[verify];
        yankee = romeon.bind(tangon)(yankee);
        kiloes = yankee.intl;
        backup = kiloes.string;
        yankee = foxtra[verify];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.v5X4fX;
        yankee = backup.bind(kiloes)(yankee);
        oscard['children'] = yankee;
        golfie = option.bind(tangon)(golfie, oscard);
        oscard = new Array(2);
        oscard[0] = golfie;
        report = foxtra[report];
        report = romeon.bind(tangon)(report);
        golfie = report.Text;
        report = {};
        offset = offset.text;
        report['style'] = offset;
        offset = 'text-md/medium';
        report['variant'] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        verify = verify.t;
        verify = verify.VOgTj4;
        verify = offset.bind(yankee)(verify);
        report['children'] = verify;
        report = option.bind(tangon)(golfie, report);
        oscard[1] = report;
        report = 'children';
        entity[report] = oscard;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['IgnoreThermalStateAlert'] = michal;
    return entity;
})();