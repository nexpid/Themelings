// app/modules/gateway/DispatcherWorkConstants.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBaz;
    zuuluu = argFre;
    tangon = argPlu;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, report);
    entity = 0;
    report = tangon[entity];
    entity = undefined;
    report = oscard.bind(entity)(report);
    var _closure1_slot0 = report;
    report = 1;
    report = tangon[report];
    report = oscard.bind(entity)(report);
    var _closure1_slot1 = report;
    michal = function() {
        tangon = _closure1_slot1;
        zuuluu = function(argFoo) { // Original name: WorkIdleDeadline
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                report = argFoo;
                tangon = arguments[1];
                zuuluu = this;
                entity = undefined;
                if(!(tangon === entity)) { _fun00002_ip = 17; continue _fun00001 }
 15:
                tangon = false;
 17:
                oscard = _closure1_slot0;
                michal = _closure2_slot0;
                michal = oscard.bind(entity)(zuuluu, michal);
                michal = global;
                option = michal.Math;
                golfie = option.max;
                oscard = 2.0833333333333335;
                oscard = golfie.bind(option)(oscard, report);
                zuuluu['_deadlineMs'] = oscard;
                zuuluu['_browserDeadlineMs'] = report;
                zuuluu['_firedDueToMaxTimeout'] = tangon;
                tangon = michal.performance;
                michal = tangon.now;
                michal = michal.bind(tangon)();
                zuuluu['_startMs'] = michal;
                return entity;
            }
        };
        var _closure2_slot0 = zuuluu;
        entity = {};
        michal = 'timeRemaining';
        entity['key'] = michal;
        michal = function() { // Original name: value
            entity = this;
            zuuluu = global;
            tangon = zuuluu.performance;
            michal = tangon.now;
            tangon = michal.bind(tangon)();
            michal = entity._startMs;
            michal = tangon - michal;
            tangon = zuuluu.Math;
            zuuluu = tangon.max;
            entity = entity._deadlineMs;
            michal = entity - michal;
            entity = 0;
            entity = zuuluu.bind(tangon)(entity, michal);
            return entity;
        };
        entity['value'] = michal;
        michal = new Array(4);
        michal[0] = entity;
        entity = {};
        oscard = 'didTimeout';
        entity['key'] = oscard;
        oscard = function() { // Original name: get
            entity = this;
            entity = entity._firedDueToMaxTimeout;
            return entity;
        };
        entity['get'] = oscard;
        michal[1] = entity;
        entity = {};
        oscard = 'timeSinceExpiration';
        entity['key'] = oscard;
        oscard = function() { // Original name: get
            entity = this;
            michal = global;
            zuuluu = michal.performance;
            michal = zuuluu.now;
            michal = michal.bind(zuuluu)();
            zuuluu = entity._startMs;
            entity = entity._deadlineMs;
            entity = zuuluu + entity;
            entity = michal - entity;
            return entity;
        };
        entity['get'] = oscard;
        michal[2] = entity;
        entity = {};
        oscard = 'generateDeadlineMetrics';
        entity['key'] = oscard;
        report = function() { // Original name: value
            michal = this;
            entity = {};
            tangon = michal._browserDeadlineMs;
            zuuluu = 2.0833333333333335;
            zuuluu = tangon < zuuluu;
            entity['isDeadlineNotIdeal'] = zuuluu;
            report = michal._deadlineMs;
            zuuluu = report.toFixed;
            tangon = 2;
            zuuluu = zuuluu.bind(report)(tangon);
            entity['deadlineMs'] = zuuluu;
            zuuluu = global;
            report = zuuluu.performance;
            zuuluu = report.now;
            zuuluu = zuuluu.bind(report)();
            michal = michal._startMs;
            zuuluu = zuuluu - michal;
            michal = zuuluu.toFixed;
            michal = michal.bind(zuuluu)(tangon);
            entity['timeSinceStartMs'] = michal;
            return entity;
        };
        entity['value'] = report;
        michal[3] = entity;
        entity = undefined;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    michal = michal.bind(entity)();
    report = 2;
    oscard = tangon[report];
    tangon = argBar;
    golfie = tangon.bind(entity)(oscard);
    oscard = golfie.fileFinishedImporting;
    tangon = 'modules/gateway/DispatcherWorkConstants.tsx';
    tangon = oscard.bind(golfie)(tangon);
    tangon = 50;
    zuuluu['DISPATCHER_STANDARD_TIMEOUT_MS'] = tangon;
    zuuluu['DISPATCHER_IDEAL_TIME_LIMIT_MS'] = tangon;
    oscard = 2.0833333333333335;
    zuuluu['DISPATCHER_MIN_DEADLINE_TIME_MS'] = oscard;
    oscard = 3.3333333333333335;
    zuuluu['DISPATCHER_DEADLINE_OVERHEAD_MS'] = oscard;
    oscard = 5.555555555555556;
    zuuluu['NATIVE_WORK_DEADLINE_MS'] = oscard;
    oscard = 4.166666666666667;
    zuuluu['NATIVE_WORK_BACKOFF_MS'] = oscard;
    oscard = 200;
    zuuluu['DISPATCHER_LONG_TIMEOUT_MS'] = oscard;
    oscard = 1000;
    zuuluu['MAX_DISPATCHER_TIMEOUT_MS'] = oscard;
    zuuluu['MAX_DISPATCHER_FLUSH_DEADLINE_TRIES'] = report;
    zuuluu['DISPATCHER_CALLBACK_MAX_TIME_REMAINING_MS'] = tangon;
    zuuluu['WorkIdleDeadline'] = michal;
    return entity;
})();