// app/modules/gateway/DispatcherWorkConstants.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = metroImportDefault;
    var3 = exports;
    var4 = dependencyMap;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var5 = {};
    var1 = true;
    var5['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var5);
    var1 = 0;
    var5 = var4[var1];
    var1 = undefined;
    var5 = var6.bind(var1)(var5);
    var _closure1_slot0 = var5;
    var5 = 1;
    var5 = var4[var5];
    var5 = var6.bind(var1)(var5);
    var _closure1_slot1 = var5;
    var2 = function() {
        var4 = _closure1_slot1;
        var3 = function WorkIdleDeadline(arg1) {
            _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
                var5 = arg1;
                var4 = arguments[1];
                var3 = this;
                var1 = undefined;
                if(!(var4 === var1)) { _fun0001_ip = 17; continue _fun0001 }
 15:
                var4 = false;
 17:
                var6 = _closure1_slot0;
                var2 = _closure2_slot0;
                var2 = var6.bind(var1)(var3, var2);
                var2 = global;
                var8 = var2.Math;
                var7 = var8.max;
                var6 = 2.0833333333333335;
                var6 = var7.bind(var8)(var6, var5);
                var3['_deadlineMs'] = var6;
                var3['_browserDeadlineMs'] = var5;
                var3['_firedDueToMaxTimeout'] = var4;
                var4 = var2.performance;
                var2 = var4.now;
                var2 = var2.bind(var4)();
                var3['_startMs'] = var2;
                return var1;
            }
        };
        var _closure2_slot0 = var3;
        var1 = {};
        var2 = 'timeRemaining';
        var1['key'] = var2;
        var2 = function value() {
            var1 = this;
            var3 = global;
            var4 = var3.performance;
            var2 = var4.now;
            var4 = var2.bind(var4)();
            var2 = var1._startMs;
            var2 = var4 - var2;
            var4 = var3.Math;
            var3 = var4.max;
            var1 = var1._deadlineMs;
            var2 = var1 - var2;
            var1 = 0;
            var1 = var3.bind(var4)(var1, var2);
            return var1;
        };
        var1['value'] = var2;
        var2 = new Array(4);
        var2[0] = var1;
        var1 = {};
        var6 = 'didTimeout';
        var1['key'] = var6;
        var6 = function get() {
            var1 = this;
            var1 = var1._firedDueToMaxTimeout;
            return var1;
        };
        var1['get'] = var6;
        var2[1] = var1;
        var1 = {};
        var6 = 'timeSinceExpiration';
        var1['key'] = var6;
        var6 = function get() {
            var1 = this;
            var2 = global;
            var3 = var2.performance;
            var2 = var3.now;
            var2 = var2.bind(var3)();
            var3 = var1._startMs;
            var1 = var1._deadlineMs;
            var1 = var3 + var1;
            var1 = var2 - var1;
            return var1;
        };
        var1['get'] = var6;
        var2[2] = var1;
        var1 = {};
        var6 = 'generateDeadlineMetrics';
        var1['key'] = var6;
        var5 = function value() {
            var2 = this;
            var1 = {};
            var4 = var2._browserDeadlineMs;
            var3 = 2.0833333333333335;
            var3 = var4 < var3;
            var1['isDeadlineNotIdeal'] = var3;
            var5 = var2._deadlineMs;
            var3 = var5.toFixed;
            var4 = 2;
            var3 = var3.bind(var5)(var4);
            var1['deadlineMs'] = var3;
            var3 = global;
            var5 = var3.performance;
            var3 = var5.now;
            var3 = var3.bind(var5)();
            var2 = var2._startMs;
            var3 = var3 - var2;
            var2 = var3.toFixed;
            var2 = var2.bind(var3)(var4);
            var1['timeSinceStartMs'] = var2;
            return var1;
        };
        var1['value'] = var5;
        var2[3] = var1;
        var1 = undefined;
        var1 = var4.bind(var1)(var3, var2);
        return var1;
    };
    var2 = var2.bind(var1)();
    var5 = 2;
    var6 = var4[var5];
    var4 = require;
    var7 = var4.bind(var1)(var6);
    var6 = var7.fileFinishedImporting;
    var4 = 'modules/gateway/DispatcherWorkConstants.tsx';
    var4 = var6.bind(var7)(var4);
    var4 = 50;
    var3['DISPATCHER_STANDARD_TIMEOUT_MS'] = var4;
    var3['DISPATCHER_IDEAL_TIME_LIMIT_MS'] = var4;
    var6 = 2.0833333333333335;
    var3['DISPATCHER_MIN_DEADLINE_TIME_MS'] = var6;
    var6 = 3.3333333333333335;
    var3['DISPATCHER_DEADLINE_OVERHEAD_MS'] = var6;
    var6 = 5.555555555555556;
    var3['NATIVE_WORK_DEADLINE_MS'] = var6;
    var6 = 4.166666666666667;
    var3['NATIVE_WORK_BACKOFF_MS'] = var6;
    var6 = 200;
    var3['DISPATCHER_LONG_TIMEOUT_MS'] = var6;
    var6 = 1000;
    var3['MAX_DISPATCHER_TIMEOUT_MS'] = var6;
    var3['MAX_DISPATCHER_FLUSH_DEADLINE_TRIES'] = var5;
    var3['DISPATCHER_CALLBACK_MAX_TIME_REMAINING_MS'] = var4;
    var3['WorkIdleDeadline'] = var2;
    return var1;
})();