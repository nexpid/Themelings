// app/modules/age_gate/native/components/NsfwGateGuild.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.Image;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.NsfwGateSource;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AnalyticEvents;
    var _closure1_slot9 = golfie;
    tangon = tangon.HelpdeskArticles;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot11 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot12 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'alignItems': 'center', 'justifyContent': 'center', 'padding': 16};
    offset = 16;
    yankee = 8;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = yankee;
    tangon['container'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 8};
    tangon['header'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 16};
    tangon['description'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['image'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot13 = tangon;
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/age_gate/native/components/NsfwGateGuild.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        michal = argFoo;
        backup = michal.onClose;
        option = michal.guildId;
        var _closure2_slot0 = option;
        michal = _closure1_slot13;
        tangon = undefined;
        kiloes = michal.bind(tangon)();
        romeon = _closure1_slot0;
        foxtra = _closure1_slot2;
        verify = 9;
        michal = foxtra[verify];
        michal = romeon.bind(tangon)(michal);
        report = michal.intl;
        zuuluu = report.string;
        michal = foxtra[verify];
        michal = romeon.bind(tangon)(michal);
        michal = michal.t;
        michal = michal.vAymlJ;
        result = zuuluu.bind(report)(michal);
        michal = foxtra[verify];
        michal = romeon.bind(tangon)(michal);
        report = michal.intl;
        zuuluu = report.string;
        michal = foxtra[verify];
        michal = romeon.bind(tangon)(michal);
        michal = michal.t;
        michal = michal.Crj6eH;
        output = zuuluu.bind(report)(michal);
        michal = foxtra[verify];
        michal = romeon.bind(tangon)(michal);
        golfie = michal.intl;
        report = golfie.format;
        michal = foxtra[verify];
        michal = romeon.bind(tangon)(michal);
        michal = michal.t;
        zuuluu = michal.Z12LNT;
        michal = {};
        yankee = _closure1_slot1;
        offset = 10;
        offset = foxtra[offset];
        echoed = yankee.bind(tangon)(offset);
        sizing = echoed.getArticleURL;
        offset = _closure1_slot10;
        offset = offset.NSFW_GUILD_GUIDELINES;
        offset = sizing.bind(echoed)(offset);
        michal['helpURL'] = offset;
        offset = report.bind(golfie)(zuuluu, michal);
        zuuluu = _closure1_slot7;
        michal = zuuluu.getCurrentUser;
        golfie = michal.bind(zuuluu)();
        var _closure2_slot1 = golfie;
        report = _closure1_slot3;
        zuuluu = report.useEffect;
        michal = new Array(2);
        michal[0] = option;
        michal[1] = golfie;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 11;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.track;
                michal = _closure1_slot9;
                zuuluu = michal.GUILD_NSFW_GATE_VIEWED;
                michal = {};
                golfie = _closure2_slot0;
                michal['guild_id'] = golfie;
                golfie = _closure2_slot1;
                verify = null;
                offset = verify == golfie;
                golfie = undefined;
                if(offset) { _fun00002_ip = 77; continue _fun00001 }
 68:
                offset = _closure2_slot1;
                golfie = offset.id;
 77:
                michal['user_id'] = golfie;
                romeon = _closure1_slot6;
                yankee = romeon.isMember;
                offset = _closure2_slot0;
                golfie = _closure2_slot1;
                foxtra = verify == golfie;
                golfie = undefined;
                if(foxtra) { _fun00002_ip = 118; continue _fun00001 }
 109:
                foxtra = _closure2_slot1;
                golfie = foxtra.id;
 118:
                golfie = yankee.bind(romeon)(offset, golfie);
                michal['is_member'] = golfie;
                golfie = _closure2_slot1;
                verify = verify == golfie;
                golfie = undefined;
                if(verify) { _fun00002_ip = 152; continue _fun00001 }
 142:
                option = _closure2_slot1;
                golfie = option.nsfwAllowed;
 152:
                if(!golfie) { _fun00002_ip = 191; continue _fun00001 }
 155:
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                option = 12;
                option = offset[option];
                option = verify.bind(entity)(option);
                verify = option.ViewNsfwGuilds;
                option = verify.getSetting;
                golfie = option.bind(verify)();
 191:
                michal['is_user_opted_in_to_age_restricted_servers'] = golfie;
                oscard = _closure1_slot8;
                oscard = oscard.MODAL;
                michal['source'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            }
        };
        entity = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot12;
        michal = _closure1_slot4;
        entity = {};
        report = kiloes.container;
        entity['style'] = report;
        option = _closure1_slot11;
        report = 13;
        report = foxtra[report];
        golfie = yankee.bind(tangon)(report);
        report = {};
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(6);
        report[0] = golfie;
        golfie = _closure1_slot5;
        oscard = {};
        sizing = 14;
        sizing = foxtra[sizing];
        sizing = yankee.bind(tangon)(sizing);
        oscard['source'] = sizing;
        sizing = kiloes.image;
        oscard['style'] = sizing;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        oscard = 15;
        golfie = foxtra[oscard];
        golfie = romeon.bind(tangon)(golfie);
        sizing = golfie.Text;
        golfie = {'style': null, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
        echoed = kiloes.header;
        golfie['style'] = echoed;
        golfie['children'] = result;
        golfie = option.bind(tangon)(sizing, golfie);
        report[2] = golfie;
        golfie = foxtra[oscard];
        golfie = romeon.bind(tangon)(golfie);
        sizing = golfie.Text;
        golfie = {'style': null, 'variant': 'text-md/normal', 'color': 'header-secondary'};
        result = kiloes.description;
        golfie['style'] = result;
        golfie['children'] = output;
        golfie = option.bind(tangon)(sizing, golfie);
        report[3] = golfie;
        oscard = foxtra[oscard];
        oscard = romeon.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'style': null, 'variant': 'text-md/normal', 'color': 'header-secondary'};
        kiloes = kiloes.description;
        oscard['style'] = kiloes;
        oscard['children'] = offset;
        oscard = option.bind(tangon)(golfie, oscard);
        report[4] = oscard;
        offset = 16;
        oscard = foxtra[offset];
        golfie = yankee.bind(tangon)(oscard);
        oscard = {};
        oscard['onPress'] = backup;
        backup = {};
        backup['flexGrow'] = tangon;
        oscard['style'] = backup;
        backup = foxtra[offset];
        backup = yankee.bind(tangon)(backup);
        backup = backup.Colors;
        backup = backup.BRAND;
        oscard['color'] = backup;
        offset = foxtra[offset];
        offset = yankee.bind(tangon)(offset);
        offset = offset.Sizes;
        offset = offset.MEDIUM;
        oscard['size'] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        verify = verify.t;
        verify = verify.gRqiWV;
        verify = offset.bind(yankee)(verify);
        oscard['text'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[5] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();