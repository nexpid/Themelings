// app/modules/share/native/ShareSearchInput.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    backup = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    offset = 0;
    golfie = oscard[offset];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    kiloes = 1;
    tangon = oscard[kiloes];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    foxtra = 2;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot4 = tangon;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'marginHorizontal': null, 'flexDirection': 'row', 'justifyContent': 'flex-start', 'alignItems': 'center'};
    yankee = 4;
    romeon = oscard[yankee];
    romeon = backup.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginHorizontal'] = romeon;
    tangon['container'] = verify;
    verify = {'position': 'absolute', 'justifyContent': 'center', 'padding': null, 'zIndex': 1};
    romeon = oscard[yankee];
    romeon = backup.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['padding'] = romeon;
    tangon['iconWrapper'] = verify;
    romeon = 20;
    verify = {'height': 20, 'width': 20};
    tangon['inputIcon'] = verify;
    verify = {};
    verify['flex'] = kiloes;
    tangon['inputWrapper'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = backup.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_12;
    yankee = foxtra * yankee;
    yankee = romeon + yankee;
    verify['paddingLeft'] = yankee;
    verify['marginBottom'] = offset;
    tangon['input'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/share/native/ShareSearchInput.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            backup = zuuluu.backgroundColor;
            romeon = zuuluu.icon;
            foxtra = null;
            michal = Object.create(foxtra);
            entity = 0;
            michal['backgroundColor'] = entity;
            michal['icon'] = entity;
            update = {};
            echoed = zuuluu;
            result = michal;
            verify = copyDataProperties(update, echoed, result);
            entity = _closure1_slot6;
            tangon = undefined;
            yankee = entity.bind(tangon)();
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = yankee.container;
            entity['style'] = report;
            oscard = _closure1_slot4;
            report = {};
            golfie = yankee.iconWrapper;
            report['style'] = golfie;
            option = _closure1_slot1;
            output = _closure1_slot2;
            kiloes = 5;
            golfie = output[kiloes];
            option = option.bind(tangon)(golfie);
            golfie = {};
            sizing = _closure1_slot0;
            kiloes = output[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.IconSizes;
            kiloes = kiloes.SMALL;
            golfie['size'] = kiloes;
            sizing = verify.placeholderTextColor;
            kiloes = foxtra == sizing;
            foxtra = undefined;
            if(kiloes) { _fun00002_ip = 163; continue _fun00001 }
 154:
            kiloes = sizing.toString;
            foxtra = kiloes.bind(sizing)();
 163:
            golfie['color'] = foxtra;
            foxtra = yankee.inputIcon;
            golfie['style'] = foxtra;
            golfie['source'] = romeon;
            golfie = oscard.bind(tangon)(option, golfie);
            report['children'] = golfie;
            oscard = oscard.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot4;
            golfie = _closure1_slot1;
            romeon = _closure1_slot2;
            oscard = 6;
            oscard = romeon[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {'style': null, 'textStyle': null, 'keyboardType': null, 'autoCapitalize': 'none', 'autoCorrect': false, 'spellCheck': false};
            foxtra = yankee.inputWrapper;
            oscard['style'] = foxtra;
            foxtra = yankee.input;
            yankee = new Array(2);
            yankee[0] = foxtra;
            foxtra = {};
            foxtra['backgroundColor'] = backup;
            yankee[1] = foxtra;
            oscard['textStyle'] = yankee;
            yankee = _closure1_slot0;
            offset = 7;
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.KeyboardTypes;
            offset = offset.DEFAULT;
            oscard['keyboardType'] = offset;
            update = oscard;
            echoed = verify;
            verify = copyDataProperties(update, echoed);
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();