// app/modules/share/ShareConstants.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    tangon = global;
    verify = tangon.Object;
    option = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, report);
    report = 0;
    option = golfie[report];
    entity = undefined;
    option = oscard.bind(entity)(option);
    option = option.AutocompleterResultTypes;
    verify = option.USER;
    option = new Array(4);
    option[0] = verify;
    verify = golfie[report];
    verify = oscard.bind(entity)(verify);
    verify = verify.AutocompleterResultTypes;
    verify = verify.TEXT_CHANNEL;
    option[1] = verify;
    verify = golfie[report];
    verify = oscard.bind(entity)(verify);
    verify = verify.AutocompleterResultTypes;
    verify = verify.VOICE_CHANNEL;
    option[2] = verify;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.AutocompleterResultTypes;
    report = report.GROUP_DM;
    option[3] = report;
    report = tangon.Array;
    tangon = report.from;
    tangon = tangon.bind(report)(option);
    var _closure1_slot0 = tangon;
    report = 1;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/share/ShareConstants.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['ALLOWED_TYPES'] = tangon;
    michal = function(argFoo) { // Original name: isAllowedType
        zuuluu = _closure1_slot0;
        michal = zuuluu.includes;
        entity = argFoo;
        entity = entity.type;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['isAllowedType'] = michal;
    return entity;
})();