// app/modules/polls/native/EditPollCreationImageAltTextModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    romeo = 1;
    golf = oscar[romeo];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.TouchableOpacity;
    var _closure1_slot5 = golf;
    tango = tango.View;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.MAX_POLL_ANSWER_LENGTH;
    var _closure1_slot7 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 6;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = foxtrot;
    verify['flex'] = romeo;
    tango['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between', 'padding': 18, 'paddingTop': 10};
    tango['header'] = verify;
    verify = {};
    verify['borderBottomWidth'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_MODIFIER_HOVER;
    verify['borderColor'] = romeo;
    tango['separator'] = verify;
    verify = {'flex': 1, 'justifyContent': 'center'};
    tango['contentContainer'] = verify;
    verify = {'borderRadius': null, 'justifyContent': 'center', 'alignItems': 'center', 'alignSelf': 'center', 'overflow': 'hidden', 'aspectRatio': 1};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.lg;
    verify['borderRadius'] = romeo;
    tango['imageContainer'] = verify;
    verify = {};
    romeo = 16;
    verify['paddingHorizontal'] = romeo;
    tango['formContainer'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.REDESIGN_CHAT_INPUT_BACKGROUND;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.lg;
    verify['borderRadius'] = offset;
    tango['textInput'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot10 = tango;
    tango = 19;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/polls/native/EditPollCreationImageAltTextModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: EditPollCreationImageAltTextModal
        _fun119462: for(var _fun119462_ip = 0; ; ) switch(_fun119462_ip) {
 0:
            zulu = argFoo;
            options = zulu.channelId;
            mike = zulu.answer;
            oscar = zulu.onSave;
            var _closure2_slot0 = oscar;
            golf = zulu.imageSize;
            tango = undefined;
            var _closure2_slot1 = tango;
            zulu = _closure1_slot10;
            vacuum = zulu.bind(tango)();
            report = _closure1_slot1;
            verify = _closure1_slot2;
            zulu = 7;
            zulu = verify[zulu];
            report = report.bind(tango)(zulu);
            lima = mike.localCreationAnswerId;
            sierra = mike.image;
            equality = undefined;
            whiskey = options;
            status = golf;
            target = golf;
            mike = equality[report](whiskey, lima, sierra, status, target, papa);
            verify = mike.renderImage;
            options = mike.upload;
            report = _closure1_slot4;
            zulu = report.useState;
            mike = null;
            offset = mike == options;
            golf = undefined;
            if(offset) { _fun119462_ip = 133; continue _fun119462 }
 128:
            golf = options.description;
 133:
            options = mike != golf;
            mike = '';
            if(!options) { _fun119462_ip = 147; continue _fun119462 }
 144:
            mike = golf;
 147:
            report = zulu.bind(report)(mike);
            zulu = _closure1_slot3;
            mike = 2;
            zulu = zulu.bind(tango)(report, mike);
            mike = 0;
            config = zulu[mike];
            _closure2_slot1 = config;
            mike = 1;
            sequence = zulu[mike];
            report = _closure1_slot4;
            zulu = report.useCallback;
            mike = new Array(2);
            mike[0] = oscar;
            mike[1] = config;
            entity = function() {
                _fun119463: for(var _fun119463_ip = 0; ; ) switch(_fun119463_ip) {
 0:
                    zulu = _closure2_slot1;
                    mike = null;
                    if(!(mike != zulu)) { _fun119463_ip = 28; continue _fun119463 }
 13:
                    zulu = _closure2_slot0;
                    mike = _closure2_slot1;
                    entity = undefined;
                    entity = zulu.bind(entity)(mike);
 28:
                    zulu = _closure1_slot0;
                    mike = _closure1_slot2;
                    entity = 8;
                    mike = mike[entity];
                    entity = undefined;
                    zulu = zulu.bind(entity)(mike);
                    mike = zulu.closeEditPollCreationImageAltTextModal;
                    mike = mike.bind(zulu)();
                    return entity;
                }
            };
            kilo = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot9;
            control = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 9;
            entity = sizing[entity];
            entity = control.bind(tango)(entity);
            mike = entity.SafeAreaPaddingView;
            entity = {};
            update = true;
            entity['top'] = update;
            report = vacuum.container;
            entity['style'] = report;
            offset = _closure1_slot6;
            report = {};
            oscar = vacuum.header;
            report['style'] = oscar;
            backup = _closure1_slot8;
            options = _closure1_slot5;
            oscar = {'onPress': null, 'activeOpacity': 0.5, 'accessibilityRole': 'button'};
            golf = 8;
            golf = sizing[golf];
            golf = control.bind(tango)(golf);
            golf = golf.closeEditPollCreationImageAltTextModal;
            oscar['onPress'] = golf;
            romeo = 0.5;
            echo = 10;
            golf = sizing[echo];
            golf = control.bind(tango)(golf);
            foxtrot = golf.intl;
            yankee = foxtrot.string;
            golf = sizing[echo];
            golf = control.bind(tango)(golf);
            golf = golf.t;
            golf = golf.cpT0Cg;
            golf = yankee.bind(foxtrot)(golf);
            oscar['accessibilityLabel'] = golf;
            foxtrot = _closure1_slot1;
            golf = 11;
            golf = sizing[golf];
            yankee = foxtrot.bind(tango)(golf);
            golf = {};
            output = 12;
            output = sizing[output];
            output = foxtrot.bind(tango)(output);
            golf['source'] = output;
            golf = backup.bind(tango)(yankee, golf);
            oscar['children'] = golf;
            golf = backup.bind(tango)(options, oscar);
            oscar = new Array(3);
            oscar[0] = golf;
            yankee = 13;
            golf = sizing[yankee];
            golf = control.bind(tango)(golf);
            output = golf.Text;
            golf = {'variant': 'redesign/heading-18/bold', 'color': 'header-primary'};
            result = sizing[echo];
            result = control.bind(tango)(result);
            context = result.intl;
            record = context.string;
            result = sizing[echo];
            result = control.bind(tango)(result);
            result = result.t;
            result = result.Cq44Rk;
            result = record.bind(context)(result);
            golf['children'] = result;
            golf = backup.bind(tango)(output, golf);
            oscar[1] = golf;
            golf = {};
            golf['onPress'] = kilo;
            golf['activeOpacity'] = romeo;
            yankee = sizing[yankee];
            yankee = control.bind(tango)(yankee);
            romeo = yankee.Text;
            yankee = {'variant': 'text-md/medium', 'color': 'text-brand'};
            kilo = sizing[echo];
            kilo = control.bind(tango)(kilo);
            result = kilo.intl;
            output = result.string;
            kilo = sizing[echo];
            kilo = control.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.R3BPHx;
            kilo = output.bind(result)(kilo);
            yankee['children'] = kilo;
            yankee = backup.bind(tango)(romeo, yankee);
            golf['children'] = yankee;
            golf = backup.bind(tango)(options, golf);
            oscar[2] = golf;
            report['children'] = oscar;
            oscar = zulu.bind(tango)(offset, report);
            report = new Array(3);
            report[0] = oscar;
            oscar = {};
            golf = vacuum.separator;
            oscar['style'] = golf;
            oscar = backup.bind(tango)(offset, oscar);
            report[1] = oscar;
            oscar = 14;
            oscar = sizing[oscar];
            golf = foxtrot.bind(tango)(oscar);
            oscar = {};
            options = vacuum.contentContainer;
            oscar['style'] = options;
            options = {};
            yankee = vacuum.imageContainer;
            options['style'] = yankee;
            options['children'] = verify;
            verify = backup.bind(tango)(offset, options);
            options = new Array(2);
            options[0] = verify;
            verify = {};
            yankee = vacuum.formContainer;
            verify['style'] = yankee;
            romeo = 15;
            yankee = sizing[romeo];
            output = foxtrot.bind(tango)(yankee);
            yankee = {};
            kilo = 27;
            yankee['size'] = kilo;
            output = backup.bind(tango)(output, yankee);
            yankee = new Array(4);
            yankee[0] = output;
            output = 16;
            output = sizing[output];
            result = foxtrot.bind(tango)(output);
            output = {};
            record = sizing[echo];
            record = control.bind(tango)(record);
            papa = record.intl;
            context = papa.string;
            record = sizing[echo];
            record = control.bind(tango)(record);
            record = record.t;
            record = record./2Gnoa;
            record = context.bind(papa)(record);
            output['children'] = record;
            output = backup.bind(tango)(result, output);
            yankee[1] = output;
            output = 17;
            output = sizing[output];
            output = control.bind(tango)(output);
            result = output.FormInput;
            output = {'showTopContainer': false, 'showBorder': false, 'multiline': false};
            output['value'] = config;
            output['onChange'] = sequence;
            sequence = 18;
            sequence = sizing[sequence];
            sequence = control.bind(tango)(sequence);
            sequence = sequence.ClearButtonVisibility;
            sequence = sequence.WITH_CONTENT;
            output['clearButtonVisibility'] = sequence;
            vacuum = vacuum.textInput;
            output['style'] = vacuum;
            vacuum = 'none';
            output['textContentType'] = vacuum;
            source = _closure1_slot7;
            output['maxLength'] = source;
            output['autoFocus'] = update;
            output['autoCorrect'] = update;
            update = sizing[echo];
            update = control.bind(tango)(update);
            source = update.intl;
            update = source.string;
            echo = sizing[echo];
            echo = control.bind(tango)(echo);
            echo = echo.t;
            echo = echo./2Gnoa;
            echo = update.bind(source)(echo);
            output['accessibilityLabel'] = echo;
            output = backup.bind(tango)(result, output);
            yankee[2] = output;
            romeo = sizing[romeo];
            foxtrot = foxtrot.bind(tango)(romeo);
            romeo = {};
            romeo['size'] = kilo;
            romeo = backup.bind(tango)(foxtrot, romeo);
            yankee[3] = romeo;
            verify['children'] = yankee;
            verify = zulu.bind(tango)(offset, verify);
            options[1] = verify;
            oscar['children'] = options;
            oscar = zulu.bind(tango)(golf, oscar);
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();