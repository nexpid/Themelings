// app/modules/polls/native/EditPollCreationImageAltTextModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    romeon = 1;
    golfie = oscard[romeon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.TouchableOpacity;
    var _closure1_slot5 = golfie;
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MAX_POLL_ANSWER_LENGTH;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot8 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 6;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = foxtra;
    verify['flex'] = romeon;
    tangon['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between', 'padding': 18, 'paddingTop': 10};
    tangon['header'] = verify;
    verify = {};
    verify['borderBottomWidth'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_HOVER;
    verify['borderColor'] = romeon;
    tangon['separator'] = verify;
    verify = {'flex': 1, 'justifyContent': 'center'};
    tangon['contentContainer'] = verify;
    verify = {'borderRadius': null, 'justifyContent': 'center', 'alignItems': 'center', 'alignSelf': 'center', 'overflow': 'hidden', 'aspectRatio': 1};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.lg;
    verify['borderRadius'] = romeon;
    tangon['imageContainer'] = verify;
    verify = {};
    romeon = 16;
    verify['paddingHorizontal'] = romeon;
    tangon['formContainer'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.REDESIGN_CHAT_INPUT_BACKGROUND;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.lg;
    verify['borderRadius'] = offset;
    tangon['textInput'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 19;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/polls/native/EditPollCreationImageAltTextModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: EditPollCreationImageAltTextModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            option = zuuluu.channelId;
            michal = zuuluu.answer;
            oscard = zuuluu.onSave;
            var _closure2_slot0 = oscard;
            golfie = zuuluu.imageSize;
            tangon = undefined;
            var _closure2_slot1 = tangon;
            zuuluu = _closure1_slot10;
            vacuum = zuuluu.bind(tangon)();
            report = _closure1_slot1;
            verify = _closure1_slot2;
            zuuluu = 7;
            zuuluu = verify[zuuluu];
            report = report.bind(tangon)(zuuluu);
            limora = michal.localCreationAnswerId;
            sierra = michal.image;
            equals = undefined;
            whisks = option;
            status = golfie;
            target = golfie;
            michal = equals[report](whisks, limora, sierra, status, target, papara);
            verify = michal.renderImage;
            option = michal.upload;
            report = _closure1_slot4;
            zuuluu = report.useState;
            michal = null;
            offset = michal == option;
            golfie = undefined;
            if(offset) { _fun00002_ip = 133; continue _fun00001 }
 128:
            golfie = option.description;
 133:
            option = michal != golfie;
            michal = '';
            if(!option) { _fun00002_ip = 147; continue _fun00001 }
 144:
            michal = golfie;
 147:
            report = zuuluu.bind(report)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(report, michal);
            michal = 0;
            config = zuuluu[michal];
            _closure2_slot1 = config;
            michal = 1;
            sequen = zuuluu[michal];
            report = _closure1_slot4;
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = oscard;
            michal[1] = config;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot1;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00004_ip = 28; continue _fun00003 }
 13:
                    zuuluu = _closure2_slot0;
                    michal = _closure2_slot1;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
 28:
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 8;
                    michal = michal[entity];
                    entity = undefined;
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.closeEditPollCreationImageAltTextModal;
                    michal = michal.bind(zuuluu)();
                    return entity;
                }
            };
            kiloes = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot9;
            ctrled = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 9;
            entity = sizing[entity];
            entity = ctrled.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            update = true;
            entity['top'] = update;
            report = vacuum.container;
            entity['style'] = report;
            offset = _closure1_slot6;
            report = {};
            oscard = vacuum.header;
            report['style'] = oscard;
            backup = _closure1_slot8;
            option = _closure1_slot5;
            oscard = {'onPress': null, 'activeOpacity': 0.5, 'accessibilityRole': 'button'};
            golfie = 8;
            golfie = sizing[golfie];
            golfie = ctrled.bind(tangon)(golfie);
            golfie = golfie.closeEditPollCreationImageAltTextModal;
            oscard['onPress'] = golfie;
            romeon = 0.5;
            echoed = 10;
            golfie = sizing[echoed];
            golfie = ctrled.bind(tangon)(golfie);
            foxtra = golfie.intl;
            yankee = foxtra.string;
            golfie = sizing[echoed];
            golfie = ctrled.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.cpT0Cg;
            golfie = yankee.bind(foxtra)(golfie);
            oscard['accessibilityLabel'] = golfie;
            foxtra = _closure1_slot1;
            golfie = 11;
            golfie = sizing[golfie];
            yankee = foxtra.bind(tangon)(golfie);
            golfie = {};
            output = 12;
            output = sizing[output];
            output = foxtra.bind(tangon)(output);
            golfie['source'] = output;
            golfie = backup.bind(tangon)(yankee, golfie);
            oscard['children'] = golfie;
            golfie = backup.bind(tangon)(option, oscard);
            oscard = new Array(3);
            oscard[0] = golfie;
            yankee = 13;
            golfie = sizing[yankee];
            golfie = ctrled.bind(tangon)(golfie);
            output = golfie.Text;
            golfie = {'variant': 'redesign/heading-18/bold', 'color': 'header-primary'};
            result = sizing[echoed];
            result = ctrled.bind(tangon)(result);
            cntext = result.intl;
            record = cntext.string;
            result = sizing[echoed];
            result = ctrled.bind(tangon)(result);
            result = result.t;
            result = result.Cq44Rk;
            result = record.bind(cntext)(result);
            golfie['children'] = result;
            golfie = backup.bind(tangon)(output, golfie);
            oscard[1] = golfie;
            golfie = {};
            golfie['onPress'] = kiloes;
            golfie['activeOpacity'] = romeon;
            yankee = sizing[yankee];
            yankee = ctrled.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {'variant': 'text-md/medium', 'color': 'text-brand'};
            kiloes = sizing[echoed];
            kiloes = ctrled.bind(tangon)(kiloes);
            result = kiloes.intl;
            output = result.string;
            kiloes = sizing[echoed];
            kiloes = ctrled.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.R3BPHx;
            kiloes = output.bind(result)(kiloes);
            yankee['children'] = kiloes;
            yankee = backup.bind(tangon)(romeon, yankee);
            golfie['children'] = yankee;
            golfie = backup.bind(tangon)(option, golfie);
            oscard[2] = golfie;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(offset, report);
            report = new Array(3);
            report[0] = oscard;
            oscard = {};
            golfie = vacuum.separator;
            oscard['style'] = golfie;
            oscard = backup.bind(tangon)(offset, oscard);
            report[1] = oscard;
            oscard = 14;
            oscard = sizing[oscard];
            golfie = foxtra.bind(tangon)(oscard);
            oscard = {};
            option = vacuum.contentContainer;
            oscard['style'] = option;
            option = {};
            yankee = vacuum.imageContainer;
            option['style'] = yankee;
            option['children'] = verify;
            verify = backup.bind(tangon)(offset, option);
            option = new Array(2);
            option[0] = verify;
            verify = {};
            yankee = vacuum.formContainer;
            verify['style'] = yankee;
            romeon = 15;
            yankee = sizing[romeon];
            output = foxtra.bind(tangon)(yankee);
            yankee = {};
            kiloes = 27;
            yankee['size'] = kiloes;
            output = backup.bind(tangon)(output, yankee);
            yankee = new Array(4);
            yankee[0] = output;
            output = 16;
            output = sizing[output];
            result = foxtra.bind(tangon)(output);
            output = {};
            record = sizing[echoed];
            record = ctrled.bind(tangon)(record);
            papara = record.intl;
            cntext = papara.string;
            record = sizing[echoed];
            record = ctrled.bind(tangon)(record);
            record = record.t;
            record = record./2Gnoa;
            record = cntext.bind(papara)(record);
            output['children'] = record;
            output = backup.bind(tangon)(result, output);
            yankee[1] = output;
            output = 17;
            output = sizing[output];
            output = ctrled.bind(tangon)(output);
            result = output.FormInput;
            output = {'showTopContainer': false, 'showBorder': false, 'multiline': false};
            output['value'] = config;
            output['onChange'] = sequen;
            sequen = 18;
            sequen = sizing[sequen];
            sequen = ctrled.bind(tangon)(sequen);
            sequen = sequen.ClearButtonVisibility;
            sequen = sequen.WITH_CONTENT;
            output['clearButtonVisibility'] = sequen;
            vacuum = vacuum.textInput;
            output['style'] = vacuum;
            vacuum = 'none';
            output['textContentType'] = vacuum;
            source = _closure1_slot7;
            output['maxLength'] = source;
            output['autoFocus'] = update;
            output['autoCorrect'] = update;
            update = sizing[echoed];
            update = ctrled.bind(tangon)(update);
            source = update.intl;
            update = source.string;
            echoed = sizing[echoed];
            echoed = ctrled.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed./2Gnoa;
            echoed = update.bind(source)(echoed);
            output['accessibilityLabel'] = echoed;
            output = backup.bind(tangon)(result, output);
            yankee[2] = output;
            romeon = sizing[romeon];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            romeon['size'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            yankee[3] = romeon;
            verify['children'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();