// app/modules/polls/native/PollCreation.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
        report = argBar;
        romeon = argBaz;
        zuuluu = argFre;
        oscard = argPlu;
        var _closure1_slot0 = report;
        var _closure1_slot1 = romeon;
        var _closure1_slot2 = oscard;
        entity = function(argFoo) { // Original name: UnsavedChangesAlertModal
            entity = argFoo;
            option = entity.onConfirm;
            tangon = _closure1_slot9;
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = 7;
            entity = sizing[offset];
            zuuluu = undefined;
            entity = kiloes.bind(zuuluu)(entity);
            michal = entity.AlertModal;
            entity = {};
            verify = 8;
            report = sizing[verify];
            report = kiloes.bind(zuuluu)(report);
            golfie = report.intl;
            oscard = golfie.string;
            report = sizing[verify];
            report = kiloes.bind(zuuluu)(report);
            report = report.t;
            report = report.HMrgcn;
            report = oscard.bind(golfie)(report);
            entity['title'] = report;
            report = sizing[verify];
            report = kiloes.bind(zuuluu)(report);
            golfie = report.intl;
            oscard = golfie.string;
            report = sizing[verify];
            report = kiloes.bind(zuuluu)(report);
            report = report.t;
            report = report.Wxa/j4;
            report = oscard.bind(golfie)(report);
            entity['content'] = report;
            golfie = _closure1_slot11;
            oscard = _closure1_slot10;
            report = {};
            backup = _closure1_slot9;
            romeon = sizing[offset];
            romeon = kiloes.bind(zuuluu)(romeon);
            foxtra = romeon.AlertActionButton;
            romeon = {};
            output = sizing[verify];
            output = kiloes.bind(zuuluu)(output);
            echoed = output.intl;
            result = echoed.string;
            output = sizing[verify];
            output = kiloes.bind(zuuluu)(output);
            output = output.t;
            output = output.TzJA4u;
            output = result.bind(echoed)(output);
            romeon['text'] = output;
            romeon['onPress'] = option;
            option = 'confirm';
            romeon = backup.bind(zuuluu)(foxtra, romeon, option);
            option = new Array(2);
            option[0] = romeon;
            romeon = _closure1_slot9;
            offset = sizing[offset];
            offset = kiloes.bind(zuuluu)(offset);
            yankee = offset.AlertActionButton;
            offset = {};
            foxtra = 'secondary';
            offset['variant'] = foxtra;
            foxtra = sizing[verify];
            foxtra = kiloes.bind(zuuluu)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            verify = sizing[verify];
            verify = kiloes.bind(zuuluu)(verify);
            verify = verify.t;
            verify = verify.2BR5R0;
            verify = foxtra.bind(backup)(verify);
            offset['text'] = verify;
            verify = 'back';
            verify = romeon.bind(zuuluu)(yankee, offset, verify);
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(zuuluu)(oscard, report);
            entity['actions'] = report;
            entity = tangon.bind(zuuluu)(michal, entity);
            return entity;
        };
        var _closure1_slot14 = entity;
        entity = function(argFoo) { // Original name: AddAnswerButton
            entity = argFoo;
            option = entity.onPress;
            entity = _closure1_slot12;
            tangon = undefined;
            golfie = entity.bind(tangon)();
            report = golfie.addAnswerButtonDefault;
            zuuluu = _closure1_slot9;
            offset = _closure1_slot1;
            foxtra = _closure1_slot2;
            verify = 10;
            entity = foxtra[verify];
            michal = offset.bind(tangon)(entity);
            entity = {};
            yankee = 11;
            yankee = foxtra[yankee];
            yankee = offset.bind(tangon)(yankee);
            entity['source'] = yankee;
            verify = foxtra[verify];
            verify = offset.bind(tangon)(verify);
            verify = verify.Sizes;
            verify = verify.LARGE;
            entity['size'] = verify;
            golfie = golfie.addAnswerIcon;
            golfie = golfie.color;
            entity['color'] = golfie;
            golfie = zuuluu.bind(tangon)(michal, entity);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot4;
            entity = {};
            entity['onPress'] = option;
            entity['style'] = report;
            report = 'button';
            entity['accessibilityRole'] = report;
            romeon = _closure1_slot0;
            verify = 8;
            report = foxtra[verify];
            report = romeon.bind(tangon)(report);
            offset = report.intl;
            option = offset.string;
            report = foxtra[verify];
            report = romeon.bind(tangon)(report);
            report = report.t;
            report = report.B2UvmZ;
            report = option.bind(offset)(report);
            entity['accessibilityLabel'] = report;
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot9;
            oscard = 12;
            oscard = foxtra[oscard];
            oscard = romeon.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'text-md/medium', 'color': 'text-muted'};
            offset = foxtra[verify];
            offset = romeon.bind(tangon)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = foxtra[verify];
            verify = romeon.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.B2UvmZ;
            verify = offset.bind(yankee)(verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        };
        var _closure1_slot15 = entity;
        entity = function(argFoo) { // Original name: PollDurationSelectionRow
            entity = argFoo;
            michal = entity.selectedDuration;
            var _closure2_slot0 = michal;
            entity = entity.onChange;
            var _closure2_slot1 = entity;
            zuuluu = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 13;
            entity = verify[entity];
            tangon = undefined;
            entity = zuuluu.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            option = entity[michal];
            zuuluu = _closure1_slot9;
            oscard = _closure1_slot0;
            entity = 17;
            entity = verify[entity];
            entity = oscard.bind(tangon)(entity);
            michal = entity.TableRow;
            entity = {};
            offset = 8;
            yankee = verify[offset];
            yankee = oscard.bind(tangon)(yankee);
            foxtra = yankee.intl;
            romeon = foxtra.string;
            yankee = verify[offset];
            yankee = oscard.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.bGHzxc;
            yankee = romeon.bind(foxtra)(yankee);
            entity['label'] = yankee;
            yankee = verify[offset];
            yankee = oscard.bind(tangon)(yankee);
            foxtra = yankee.intl;
            romeon = foxtra.string;
            yankee = verify[offset];
            yankee = oscard.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.bGHzxc;
            backup = romeon.bind(foxtra)(yankee);
            yankee = global;
            yankee = yankee.HermesInternal;
            foxtra = yankee.concat;
            romeon = '';
            yankee = ' ';
            yankee = foxtra.bind(romeon)(backup, yankee, option);
            entity['accessibilityLabel'] = yankee;
            yankee = verify[offset];
            yankee = oscard.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = verify[offset];
            offset = oscard.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.A4PJ1t;
            offset = yankee.bind(romeon)(offset);
            entity['accessibilityHint'] = offset;
            golfie = function() { // Original name: onPress
                golfie = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 18;
                tangon = zuuluu[entity];
                entity = undefined;
                report = golfie.bind(entity)(tangon);
                tangon = report.dismissKeyboard;
                tangon = tangon.bind(report)();
                report = _closure1_slot1;
                tangon = 14;
                tangon = zuuluu[tangon];
                oscard = report.bind(entity)(tangon);
                report = oscard.openLazy;
                tangon = 16;
                tangon = zuuluu[tangon];
                golfie = golfie.bind(entity)(tangon);
                tangon = 15;
                tangon = zuuluu[tangon];
                zuuluu = zuuluu.paths;
                tangon = golfie.bind(entity)(tangon, zuuluu);
                zuuluu = _closure1_slot8;
                michal = {};
                option = _closure2_slot0;
                michal['selectedDuration'] = option;
                golfie = _closure2_slot1;
                michal['onChange'] = golfie;
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                return entity;
            };
            entity['onPress'] = golfie;
            golfie = _closure1_slot9;
            report = 12;
            report = verify[report];
            report = oscard.bind(tangon)(report);
            oscard = report.Text;
            report = {'variant': 'text-md/normal', 'color': 'text-muted'};
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['trailing'] = report;
            report = true;
            entity['arrow'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        };
        var _closure1_slot16 = entity;
        entity = global;
        option = entity.Object;
        golfie = option.defineProperty;
        tangon = {};
        entity = true;
        tangon['value'] = entity;
        entity = '__esModule';
        entity = golfie.bind(option)(zuuluu, entity, tangon);
        entity = 0;
        golfie = oscard[entity];
        tangon = argCor;
        entity = undefined;
        option = tangon.bind(entity)(golfie);
        var _closure1_slot3 = option;
        foxtra = 1;
        tangon = oscard[foxtra];
        tangon = report.bind(entity)(tangon);
        golfie = tangon.TouchableOpacity;
        var _closure1_slot4 = golfie;
        golfie = tangon.View;
        var _closure1_slot5 = golfie;
        tangon = tangon.ScrollView;
        var _closure1_slot6 = tangon;
        tangon = 2;
        tangon = oscard[tangon];
        tangon = report.bind(entity)(tangon);
        golfie = tangon.MAX_POLL_QUESTION_LENGTH;
        var _closure1_slot7 = golfie;
        tangon = tangon.POLL_CREATION_DURATION_ACTION_SHEET_KEY;
        var _closure1_slot8 = tangon;
        tangon = 3;
        tangon = oscard[tangon];
        tangon = report.bind(entity)(tangon);
        golfie = tangon.jsx;
        var _closure1_slot9 = golfie;
        golfie = tangon.Fragment;
        var _closure1_slot10 = golfie;
        tangon = tangon.jsxs;
        var _closure1_slot11 = tangon;
        tangon = 4;
        tangon = oscard[tangon];
        verify = report.bind(entity)(tangon);
        golfie = verify.createStyles;
        tangon = {};
        offset = {};
        yankee = 18;
        offset['paddingHorizontal'] = yankee;
        tangon['viewPadding'] = offset;
        offset = {'paddingVertical': 20, 'gap': 16};
        tangon['scrollContainer'] = offset;
        offset = {};
        offset['flex'] = foxtra;
        tangon['container'] = offset;
        offset = {};
        yankee = 5;
        backup = oscard[yankee];
        backup = romeon.bind(entity)(backup);
        backup = backup.colors;
        backup = backup.BACKGROUND_PRIMARY;
        offset['backgroundColor'] = backup;
        offset['flex'] = foxtra;
        tangon['safeAreaContainer'] = offset;
        kiloes = 10;
        offset = {'flexDirection': 'row', 'paddingHorizontal': 18, 'paddingVertical': 10};
        tangon['header'] = offset;
        offset = {'flex': 0, 'justifyContent': 'flex-start', 'minWidth': 48, 'paddingHorizontal': 0, 'marginHorizontal': 0};
        tangon['actionButton'] = offset;
        offset = {};
        backup = 'flex-end';
        offset['justifyContent'] = backup;
        tangon['postButton'] = offset;
        offset = {'textAlign': 'center', 'flexGrow': 1};
        tangon['title'] = offset;
        offset = {};
        backup = 14;
        offset['fontSize'] = backup;
        tangon['label'] = offset;
        offset = {'marginVertical': 20, 'rowGap': 16};
        tangon['answerInputsContainer'] = offset;
        offset = {'paddingVertical': null, 'paddingLeft': 14, 'marginRight': 30, 'display': 'flex', 'flexDirection': 'row', 'gap': 16, 'alignItems': 'center', 'justifyContent': 'flex-start'};
        backup = 6;
        backup = oscard[backup];
        sizing = report.bind(entity)(backup);
        backup = sizing.isAndroid;
        sizing = backup.bind(sizing)();
        backup = 8;
        if(!sizing) { _fun00002_ip = 476; continue _fun00001 }
 473:
        backup = kiloes;
 476:
        offset['paddingVertical'] = backup;
        backup = oscard[yankee];
        backup = romeon.bind(entity)(backup);
        backup = backup.colors;
        backup = backup.BACKGROUND_MESSAGE_HOVER;
        offset['backgroundColor'] = backup;
        backup = oscard[yankee];
        backup = romeon.bind(entity)(backup);
        backup = backup.radii;
        backup = backup.lg;
        offset['borderRadius'] = backup;
        tangon['addAnswerButtonDefault'] = offset;
        offset = {};
        backup = oscard[yankee];
        backup = romeon.bind(entity)(backup);
        backup = backup.colors;
        backup = backup.TEXT_MUTED;
        offset['color'] = backup;
        tangon['addAnswerIcon'] = offset;
        offset = {};
        offset['borderTopWidth'] = foxtra;
        yankee = oscard[yankee];
        yankee = romeon.bind(entity)(yankee);
        yankee = yankee.colors;
        yankee = yankee.BACKGROUND_MODIFIER_HOVER;
        offset['borderColor'] = yankee;
        tangon['pollConfigSection'] = offset;
        tangon = golfie.bind(verify)(tangon);
        var _closure1_slot12 = tangon;
        golfie = option.forwardRef;
        tangon = function(argFoo, argBar) {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = argFoo;
                report = entity.onChange;
                oscard = entity.onSubmitEditing;
                option = entity.error;
                tangon = _closure1_slot9;
                romeon = _closure1_slot0;
                foxtra = _closure1_slot2;
                entity = 9;
                entity = foxtra[entity];
                zuuluu = undefined;
                entity = romeon.bind(zuuluu)(entity);
                michal = entity.TextInput;
                entity = {};
                verify = argBar;
                entity['ref'] = verify;
                verify = 'center';
                entity['textAlignVertical'] = verify;
                verify = 8;
                offset = foxtra[verify];
                offset = romeon.bind(zuuluu)(offset);
                backup = offset.intl;
                yankee = backup.string;
                offset = foxtra[verify];
                offset = romeon.bind(zuuluu)(offset);
                offset = offset.t;
                offset = offset.WBiKnJ;
                offset = yankee.bind(backup)(offset);
                entity['label'] = offset;
                offset = foxtra[verify];
                offset = romeon.bind(zuuluu)(offset);
                backup = offset.intl;
                yankee = backup.string;
                offset = foxtra[verify];
                offset = romeon.bind(zuuluu)(offset);
                offset = offset.t;
                offset = offset.WBiKnJ;
                offset = yankee.bind(backup)(offset);
                entity['accessibilityLabel'] = offset;
                offset = foxtra[verify];
                offset = romeon.bind(zuuluu)(offset);
                yankee = offset.intl;
                offset = yankee.string;
                verify = foxtra[verify];
                verify = romeon.bind(zuuluu)(verify);
                verify = verify.t;
                verify = verify./uQqJS;
                verify = offset.bind(yankee)(verify);
                entity['placeholder'] = verify;
                entity['onChange'] = report;
                report = true;
                entity['isClearable'] = report;
                verify = null;
                offset = verify != option;
                verify = 'default';
                if(!offset) { _fun00004_ip = 252; continue _fun00003 }
 248:
                verify = 'error';
 252:
                entity['status'] = verify;
                entity['errorMessage'] = option;
                golfie = _closure1_slot7;
                entity['maxLength'] = golfie;
                golfie = 'next';
                entity['returnKeyType'] = golfie;
                golfie = false;
                entity['blurOnSubmit'] = golfie;
                entity['onSubmitEditing'] = oscard;
                oscard = 'none';
                entity['textContentType'] = oscard;
                entity['autoFocus'] = report;
                entity['autoCorrect'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            }
        };
        tangon = golfie.bind(option)(tangon);
        var _closure1_slot13 = tangon;
        tangon = 36;
        tangon = oscard[tangon];
        oscard = report.bind(entity)(tangon);
        report = oscard.fileFinishedImporting;
        tangon = 'modules/polls/native/PollCreation.tsx';
        tangon = report.bind(oscard)(tangon);
        michal = function(argFoo) { // Original name: PollCreation
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                entity = argFoo;
                zuuluu = entity.channel;
                var _closure2_slot0 = zuuluu;
                status = _closure1_slot1;
                source = _closure1_slot2;
                entity = 19;
                entity = source[entity];
                tangon = undefined;
                michal = status.bind(tangon)(entity);
                entity = {};
                sierra = _closure1_slot0;
                report = 20;
                oscard = source[report];
                oscard = sierra.bind(tangon)(oscard);
                oscard = oscard.ImpressionTypes;
                oscard = oscard.VIEW;
                entity['type'] = oscard;
                report = source[report];
                report = sierra.bind(tangon)(report);
                report = report.ImpressionNames;
                report = report.POLL_EDITOR_VIEWED;
                entity['name'] = report;
                entity = michal.bind(tangon)(entity);
                entity = _closure1_slot12;
                romeon = entity.bind(tangon)();
                entity = 21;
                entity = source[entity];
                michal = status.bind(tangon)(entity);
                entity = {};
                report = true;
                entity['includeKeyboardHeightIOS'] = report;
                entity = michal.bind(tangon)(entity);
                golfie = entity.insets;
                entity = 22;
                entity = source[entity];
                michal = status.bind(tangon)(entity);
                entity = 23;
                entity = source[entity];
                entity = sierra.bind(tangon)(entity);
                entity = entity.closeCreatePollModal;
                michal = michal.bind(tangon)(zuuluu, entity);
                cntext = michal.answers;
                var _closure2_slot1 = cntext;
                entity = michal.question;
                var _closure2_slot2 = entity;
                output = michal.allowMultiSelect;
                var _closure2_slot3 = output;
                entity = michal.setAllowMultiSelect;
                var _closure2_slot4 = entity;
                sequen = michal.canAddMoreAnswers;
                entity = michal.canRemoveMoreAnswers;
                var _closure2_slot5 = entity;
                target = michal.handleQuestionChange;
                entity = michal.handleAnswerTextChange;
                var _closure2_slot6 = entity;
                entity = michal.handleEmojiSelect;
                var _closure2_slot7 = entity;
                papara = michal.handleAddAnswer;
                var _closure2_slot8 = papara;
                entity = michal.handleRemoveAnswer;
                var _closure2_slot9 = entity;
                entity = michal.handleRemoveAnswerImage;
                var _closure2_slot10 = entity;
                kiloes = michal.handleSubmitPoll;
                config = michal.fieldErrors;
                var _closure2_slot11 = config;
                echoed = michal.duration;
                result = michal.setDuration;
                limora = michal.createPollError;
                update = michal.submitting;
                entity = michal.shouldFocusOnInvalidField;
                var _closure2_slot12 = entity;
                oscard = michal.setShouldFocusOnInvalidField;
                var _closure2_slot13 = oscard;
                michal = 24;
                michal = source[michal];
                zuuluu = sierra.bind(tangon)(michal);
                michal = zuuluu.useTrackPollCreationEvents;
                michal = michal.bind(zuuluu)(cntext, output);
                michal = michal.trackPollCreationCancelled;
                var _closure2_slot14 = michal;
                michal = function() { // Original name: handleClose
                    michal = _closure2_slot14;
                    entity = undefined;
                    michal = michal.bind(entity)();
                    zuuluu = _closure1_slot0;
                    tangon = _closure1_slot2;
                    michal = 23;
                    michal = tangon[michal];
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.closeCreatePollModal;
                    michal = michal.bind(zuuluu)();
                    return entity;
                };
                var _closure2_slot15 = michal;
                michal = 25;
                michal = source[michal];
                report = sierra.bind(tangon)(michal);
                zuuluu = report.useNavigatorBackPressHandler;
                michal = function() {
                    _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                        tangon = _closure1_slot0;
                        zuuluu = _closure1_slot2;
                        michal = 26;
                        michal = zuuluu[michal];
                        zuuluu = undefined;
                        golfie = tangon.bind(zuuluu)(michal);
                        oscard = golfie.isPollCreationEmpty;
                        report = _closure2_slot2;
                        tangon = _closure2_slot1;
                        tangon = oscard.bind(golfie)(report, tangon);
                        if(tangon) { _fun00008_ip = 118; continue _fun00007 }
 51:
                        report = _closure1_slot0;
                        oscard = _closure1_slot2;
                        tangon = 27;
                        tangon = oscard[tangon];
                        oscard = report.bind(zuuluu)(tangon);
                        report = oscard.openAlert;
                        golfie = _closure1_slot9;
                        tangon = _closure1_slot14;
                        entity = {};
                        option = _closure2_slot15;
                        entity['onConfirm'] = option;
                        tangon = golfie.bind(zuuluu)(tangon, entity);
                        entity = 'poll-creation-unsaved-changes';
                        entity = report.bind(oscard)(entity, tangon);
                        entity = true;
                        _fun00008_ip = 128; continue _fun00007;
 118:
                        michal = _closure2_slot14;
                        michal = michal.bind(zuuluu)();
                        entity = false;
 128:
                        return entity;
                    }
                };
                michal = zuuluu.bind(report)(michal);
                michal = 28;
                michal = source[michal];
                zuuluu = status.bind(tangon)(michal);
                michal = {};
                report = function() { // Original name: onAddAnswer
                    michal = _closure2_slot8;
                    entity = undefined;
                    michal = michal.bind(entity)();
                    return entity;
                };
                michal['onAddAnswer'] = report;
                record = zuuluu.bind(tangon)(michal);
                var _closure2_slot16 = record;
                report = _closure1_slot3;
                zuuluu = report.useEffect;
                michal = new Array(4);
                michal[0] = config;
                michal[1] = record;
                michal[2] = oscard;
                michal[3] = entity;
                entity = function() {
                    _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                        entity = global;
                        tangon = entity.Object;
                        zuuluu = tangon.keys;
                        michal = _closure2_slot11;
                        tangon = zuuluu.bind(tangon)(michal);
                        zuuluu = tangon.length;
                        michal = 0;
                        if(!(zuuluu > michal)) { _fun00010_ip = 182; continue _fun00009 }
 39:
                        oscard = _closure1_slot0;
                        option = _closure1_slot2;
                        report = 8;
                        golfie = option[report];
                        zuuluu = undefined;
                        golfie = oscard.bind(zuuluu)(golfie);
                        offset = golfie.intl;
                        verify = offset.formatToPlainString;
                        report = option[report];
                        report = oscard.bind(zuuluu)(report);
                        report = report.t;
                        golfie = report.w8e4qK;
                        report = {};
                        yankee = tangon.length;
                        report['numOfErrors'] = yankee;
                        golfie = verify.bind(offset)(golfie, report);
                        report = 29;
                        report = option[report];
                        report = oscard.bind(zuuluu)(report);
                        oscard = report.AccessibilityAnnouncer;
                        report = oscard.announce;
                        report = report.bind(oscard)(golfie);
                        report = _closure2_slot12;
                        if(!report) { _fun00010_ip = 182; continue _fun00009 }
 152:
                        report = tangon[michal];
                        tangon = _closure2_slot16;
                        michal = tangon.focus;
                        michal = michal.bind(tangon)(report);
                        michal = _closure2_slot13;
                        entity = false;
                        entity = michal.bind(zuuluu)(entity);
 182:
                        entity = undefined;
                        return entity;
                    }
                };
                entity = zuuluu.bind(report)(entity, michal);
                zuuluu = _closure1_slot9;
                michal = _closure1_slot5;
                entity = {};
                oscard = romeon.safeAreaContainer;
                report = new Array(2);
                report[0] = oscard;
                oscard = {};
                option = golfie.top;
                oscard['paddingTop'] = option;
                golfie = golfie.bottom;
                oscard['paddingBottom'] = golfie;
                report[1] = oscard;
                entity['style'] = report;
                golfie = _closure1_slot11;
                oscard = _closure1_slot10;
                report = {};
                option = {};
                verify = romeon.header;
                option['style'] = verify;
                backup = _closure1_slot9;
                offset = 30;
                verify = source[offset];
                verify = sierra.bind(tangon)(verify);
                yankee = verify.HeaderActionButton;
                verify = {};
                ctrled = 8;
                vacuum = source[ctrled];
                vacuum = sierra.bind(tangon)(vacuum);
                equals = vacuum.intl;
                whisks = equals.string;
                vacuum = source[ctrled];
                vacuum = sierra.bind(tangon)(vacuum);
                vacuum = vacuum.t;
                vacuum = vacuum.ETE/oK;
                vacuum = whisks.bind(equals)(vacuum);
                verify['accessibilityLabel'] = vacuum;
                vacuum = function() { // Original name: onPress
                    _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                        tangon = _closure1_slot0;
                        michal = _closure1_slot2;
                        entity = 26;
                        michal = michal[entity];
                        entity = undefined;
                        golfie = tangon.bind(entity)(michal);
                        oscard = golfie.isPollCreationEmpty;
                        report = _closure2_slot2;
                        tangon = _closure2_slot1;
                        tangon = oscard.bind(golfie)(report, tangon);
                        if(tangon) { _fun00012_ip = 116; continue _fun00011 }
 51:
                        report = _closure1_slot0;
                        oscard = _closure1_slot2;
                        tangon = 27;
                        tangon = oscard[tangon];
                        oscard = report.bind(entity)(tangon);
                        report = oscard.openAlert;
                        golfie = _closure1_slot9;
                        tangon = _closure1_slot14;
                        zuuluu = {};
                        option = _closure2_slot15;
                        zuuluu['onConfirm'] = option;
                        tangon = golfie.bind(entity)(tangon, zuuluu);
                        zuuluu = 'poll-creation-unsaved-changes';
                        zuuluu = report.bind(oscard)(zuuluu, tangon);
                        _fun00012_ip = 124; continue _fun00011;
 116:
                        michal = _closure2_slot15;
                        michal = michal.bind(entity)();
 124:
                        return entity;
                    }
                };
                verify['onPress'] = vacuum;
                vacuum = 31;
                vacuum = source[vacuum];
                vacuum = status.bind(tangon)(vacuum);
                verify['source'] = vacuum;
                vacuum = romeon.actionButton;
                verify['style'] = vacuum;
                yankee = backup.bind(tangon)(yankee, verify);
                verify = new Array(3);
                verify[0] = yankee;
                vacuum = _closure1_slot9;
                yankee = 12;
                yankee = source[yankee];
                yankee = sierra.bind(tangon)(yankee);
                backup = yankee.Text;
                yankee = {'accessibilityRole': 'header', 'variant': 'redesign/heading-18/bold', 'color': 'header-primary'};
                status = romeon.title;
                yankee['style'] = status;
                status = source[ctrled];
                status = sierra.bind(tangon)(status);
                equals = status.intl;
                whisks = equals.string;
                status = source[ctrled];
                status = sierra.bind(tangon)(status);
                status = status.t;
                status = status.Flr51t;
                status = whisks.bind(equals)(status);
                yankee['children'] = status;
                yankee = vacuum.bind(tangon)(backup, yankee);
                verify[1] = yankee;
                backup = _closure1_slot9;
                offset = source[offset];
                offset = sierra.bind(tangon)(offset);
                yankee = offset.HeaderActionButton;
                offset = {};
                vacuum = source[ctrled];
                vacuum = sierra.bind(tangon)(vacuum);
                status = vacuum.intl;
                vacuum = status.string;
                source = source[ctrled];
                source = sierra.bind(tangon)(source);
                source = source.t;
                source = source.JOj8Zm;
                source = vacuum.bind(status)(source);
                offset['text'] = source;
                vacuum = romeon.actionButton;
                source = new Array(2);
                source[0] = vacuum;
                vacuum = romeon.postButton;
                source[1] = vacuum;
                offset['style'] = source;
                offset['disabled'] = update;
                offset['onPress'] = kiloes;
                offset = backup.bind(tangon)(yankee, offset);
                verify[2] = offset;
                option['children'] = verify;
                verify = golfie.bind(tangon)(michal, option);
                option = new Array(3);
                option[0] = verify;
                yankee = _closure1_slot11;
                offset = _closure1_slot6;
                verify = {};
                backup = romeon.viewPadding;
                verify['style'] = backup;
                backup = romeon.scrollContainer;
                verify['contentContainerStyle'] = backup;
                vacuum = null;
                kiloes = vacuum != limora;
                if(!kiloes) { _fun00006_ip = 1037; continue _fun00005 }
 982:
                source = _closure1_slot9;
                update = _closure1_slot1;
                status = _closure1_slot2;
                backup = 32;
                backup = status[backup];
                update = update.bind(tangon)(backup);
                backup = {};
                sierra = vacuum == limora;
                status = undefined;
                if(sierra) { _fun00006_ip = 1027; continue _fun00005 }
 1017:
                sierra = limora.getAnyErrorMessage;
                status = sierra.bind(limora)();
 1027:
                backup['children'] = status;
                kiloes = source.bind(tangon)(update, backup);
 1037:
                backup = new Array(3);
                backup[0] = kiloes;
                source = _closure1_slot9;
                update = _closure1_slot13;
                kiloes = {};
                sierra = record.refWithKey;
                status = 'question';
                status = sierra.bind(record)(status);
                kiloes['ref'] = status;
                kiloes['onChange'] = target;
                record = record.focusNext;
                kiloes['onSubmitEditing'] = record;
                record = vacuum == config;
                vacuum = undefined;
                if(record) { _fun00006_ip = 1105; continue _fun00005 }
 1099:
                vacuum = config.question;
 1105:
                kiloes['error'] = vacuum;
                kiloes = source.bind(tangon)(update, kiloes);
                backup[1] = kiloes;
                source = _closure1_slot11;
                update = _closure1_slot5;
                kiloes = {};
                vacuum = romeon.answerInputsContainer;
                kiloes['style'] = vacuum;
                record = _closure1_slot9;
                limora = _closure1_slot0;
                target = _closure1_slot2;
                vacuum = 33;
                vacuum = target[vacuum];
                vacuum = limora.bind(tangon)(vacuum);
                config = vacuum.FormLabel;
                vacuum = {};
                status = target[ctrled];
                status = limora.bind(tangon)(status);
                sierra = status.intl;
                status = sierra.string;
                target = target[ctrled];
                target = limora.bind(tangon)(target);
                target = target.t;
                target = target.oMBfeX;
                target = status.bind(sierra)(target);
                vacuum['text'] = target;
                target = 'text-secondary';
                vacuum['color'] = target;
                target = romeon.label;
                vacuum['style'] = target;
                config = record.bind(tangon)(config, vacuum);
                vacuum = new Array(3);
                vacuum[0] = config;
                record = cntext.map;
                config = function(argFoo, argBar) {
                    _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
                        entity = argFoo;
                        report = _closure1_slot9;
                        zuuluu = _closure1_slot1;
                        tangon = _closure1_slot2;
                        michal = 34;
                        michal = tangon[michal];
                        tangon = undefined;
                        zuuluu = zuuluu.bind(tangon)(michal);
                        michal = {};
                        oscard = _closure2_slot16;
                        yankee = oscard.refWithKey;
                        romeon = entity.localCreationAnswerId;
                        golfie = global;
                        verify = golfie.HermesInternal;
                        verify = verify.concat;
                        offset = 'answer-';
                        verify = verify.bind(offset)(romeon);
                        verify = yankee.bind(oscard)(verify);
                        michal['inputRef'] = verify;
                        michal['answer'] = entity;
                        verify = argBar;
                        michal['index'] = verify;
                        verify = _closure2_slot0;
                        verify = verify.id;
                        michal['channelId'] = verify;
                        oscard = oscard.focusNext;
                        michal['onSubmitEditing'] = oscard;
                        oscard = _closure2_slot6;
                        michal['onAnswerTextChange'] = oscard;
                        oscard = _closure2_slot7;
                        michal['onAnswerEmojiSelect'] = oscard;
                        oscard = _closure2_slot9;
                        michal['onRemoveAnswer'] = oscard;
                        oscard = _closure2_slot10;
                        michal['onRemoveAnswerImage'] = oscard;
                        oscard = _closure2_slot5;
                        michal['canRemoveAnswer'] = oscard;
                        verify = _closure2_slot11;
                        oscard = null;
                        verify = oscard == verify;
                        oscard = undefined;
                        if(verify) { _fun00014_ip = 213; continue _fun00013 }
 183:
                        option = _closure2_slot11;
                        verify = entity.localCreationAnswerId;
                        golfie = golfie.HermesInternal;
                        golfie = golfie.concat;
                        golfie = golfie.bind(offset)(verify);
                        oscard = option[golfie];
 213:
                        michal['error'] = oscard;
                        entity = entity.localCreationAnswerId;
                        entity = report.bind(tangon)(zuuluu, michal, entity);
                        return entity;
                    }
                };
                config = record.bind(cntext)(config);
                vacuum[1] = config;
                if(!sequen) { _fun00006_ip = 1298; continue _fun00005 }
 1278:
                cntext = _closure1_slot9;
                record = _closure1_slot15;
                config = {};
                config['onPress'] = papara;
                sequen = cntext.bind(tangon)(record, config);
 1298:
                vacuum[2] = sequen;
                kiloes['children'] = vacuum;
                kiloes = source.bind(tangon)(update, kiloes);
                backup[2] = kiloes;
                verify['children'] = backup;
                verify = yankee.bind(tangon)(offset, verify);
                option[1] = verify;
                yankee = _closure1_slot11;
                offset = _closure1_slot5;
                verify = {};
                romeon = romeon.pollConfigSection;
                verify['style'] = romeon;
                kiloes = _closure1_slot9;
                backup = _closure1_slot16;
                romeon = {};
                romeon['selectedDuration'] = echoed;
                romeon['onChange'] = result;
                backup = kiloes.bind(tangon)(backup, romeon);
                romeon = new Array(2);
                romeon[0] = backup;
                kiloes = _closure1_slot9;
                source = _closure1_slot0;
                result = _closure1_slot2;
                foxtra = 35;
                foxtra = result[foxtra];
                foxtra = source.bind(tangon)(foxtra);
                backup = foxtra.TableCheckboxRow;
                foxtra = {};
                echoed = result[ctrled];
                echoed = source.bind(tangon)(echoed);
                update = echoed.intl;
                echoed = update.string;
                result = result[ctrled];
                result = source.bind(tangon)(result);
                result = result.t;
                result = result.Ux+iQU;
                result = echoed.bind(update)(result);
                foxtra['label'] = result;
                foxtra['checked'] = output;
                sizing = function() { // Original name: onPress
                    zuuluu = _closure2_slot4;
                    entity = _closure2_slot3;
                    michal = !entity;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
                    return entity;
                };
                foxtra['onPress'] = sizing;
                foxtra = kiloes.bind(tangon)(backup, foxtra);
                romeon[1] = foxtra;
                verify['children'] = romeon;
                verify = yankee.bind(tangon)(offset, verify);
                option[2] = verify;
                report['children'] = option;
                report = golfie.bind(tangon)(oscard, report);
                entity['children'] = report;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            }
        };
        zuuluu['default'] = michal;
        return entity;
    }
})();