// app/modules/app_startup/native/executeHeadlessTask.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    entity = argCor;
    var _closure1_slot2 = entity;
    var _closure1_slot3 = oscard;
    entity = function() { // Original name: _executeHeadlessTask
        report = undefined;
        entity = undefined;
        tangon = _closure1_slot4;
        zuuluu = function* (argFoo, argBar, argBaz) {
            entity = function* (argFoo, argBar, argBaz) { // Original name: ?anon_0_
                _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                    StartGenerator();
                    output = argFoo;
                    ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                    if(michal) { _fun00002_ip = 1163; continue _fun00001 }
 13:
                    kiloes = output;
                    offset = argBar;
                    verify = argBaz;
                    oscard = undefined;
                    tangon = undefined;
                    romeon = undefined;
                    backup = undefined;
                    report = _closure1_slot1;
                    golfie = _closure1_slot3;
                    michal = 3;
                    michal = golfie[michal];
                    yankee = report.bind(oscard)(michal);
                    foxtra = global;
                    michal = foxtra.HermesInternal;
                    option = michal.concat;
                    michal = 'Task ';
                    source = option.bind(michal)(output);
                    option = yankee.prototype;
                    option = Object.create(option, {constructor: {value: yankee}});
                    ctrled = option;
                    michal = new ctrled[yankee](source, update);
                    tangon = michal instanceof Object ? michal : option;
                    option = foxtra.Date;
                    michal = option.now;
                    romeon = michal.bind(option)();
                    option = 4;
                    michal = golfie[option];
                    yankee = report.bind(oscard)(michal);
                    report = yankee.addBreadcrumb;
                    michal = {};
                    sizing = 'Executing headless task.';
                    michal['message'] = sizing;
                    sizing = {};
                    sizing['name'] = output;
                    michal['data'] = sizing;
                    michal = report.bind(yankee)(michal);
                    report = _closure1_slot0;
                    michal = 5;
                    michal = golfie[michal];
                    report = report.bind(oscard)(michal);
                    michal = report.closeFastConnectSocket;
                    michal = michal.bind(report)();
                    report = false;
                    backup = false;
 187: // try_start_0
                    golfie = _closure1_slot1;
                    michal = _closure1_slot3;
                    yankee = 6;
                    michal = michal[yankee];
                    michal = golfie.bind(oscard)(michal);
                    michal = michal.wasEverActive;
                    if(michal) { _fun00002_ip = 247; continue _fun00001 }
 216:
                    golfie = _closure1_slot1;
                    michal = _closure1_slot3;
                    michal = michal[yankee];
                    michal = golfie.bind(oscard)(michal);
                    golfie = michal.extraProperties;
                    michal = true;
                    golfie['headless_task_ran'] = michal;
 247:
                    michal = _closure1_slot5;
                    golfie = michal.currentState;
                    michal = 'active';
                    if(!(michal !== golfie)) { _fun00002_ip = 318; continue _fun00001 }
 265:
                    yankee = tangon;
                    golfie = yankee.log;
                    michal = 'Pausing socket in headless task because app state is not active';
                    michal = golfie.bind(yankee)(michal);
                    golfie = _closure1_slot2;
                    yankee = _closure1_slot3;
                    michal = 7;
                    michal = yankee[michal];
                    yankee = golfie.bind(oscard)(michal);
                    golfie = yankee.setIsPaused;
                    michal = true;
                    michal = golfie.bind(yankee)(michal);
 318:
                    michal = _closure1_slot6;
                    michal = michal.bind(oscard)();
                    SaveGenerator(address=330);
 328:
                    return michal;
 330:
                    ResumeGenerator(result_out_reg=1, return_bool_out_reg=6);
                    if(golfie) { _fun00002_ip = 881; continue _fun00001 }
 339:
                    sizing = tangon;
                    yankee = sizing.log;
                    golfie = 'initHeadlessTask completed';
                    golfie = yankee.bind(sizing)(golfie);
                    golfie = _closure1_slot7;
                    golfie = golfie.promise;
                    SaveGenerator(address=373);
 371:
                    return golfie;
 373:
                    ResumeGenerator(result_out_reg=6, return_bool_out_reg=10);
                    if(yankee) { _fun00002_ip = 736; continue _fun00001 }
 382:
                    output = tangon;
                    sizing = output.log;
                    yankee = 'Flux Initialized';
                    yankee = sizing.bind(output)(yankee);
                    offset = offset.bind(oscard)();
                    verify = offset.bind(oscard)(verify);
                    SaveGenerator(address=415);
 413:
                    return verify;
 415:
                    ResumeGenerator(result_out_reg=8, return_bool_out_reg=9);
                    if(offset) { _fun00002_ip = 591; continue _fun00001 }
 424:
                    backup = true;
                    sizing = tangon;
                    yankee = sizing.log;
                    offset = 'Task completed successfully';
                    offset = yankee.bind(sizing)(offset);
 446: // try_end0
                    yankee = _closure1_slot1;
                    sizing = _closure1_slot3;
                    offset = sizing[option];
                    output = yankee.bind(oscard)(offset);
                    yankee = output.addBreadcrumb;
                    offset = {};
                    result = 'Finished headless task.';
                    offset['message'] = result;
                    result = {};
                    echoed = kiloes;
                    result['name'] = echoed;
                    echoed = backup;
                    result['success'] = echoed;
                    update = foxtra.Date;
                    echoed = update.now;
                    update = echoed.bind(update)();
                    echoed = romeon;
                    update = update - echoed;
                    echoed = 'ms';
                    echoed = update + echoed;
                    result['duration'] = echoed;
                    offset['data'] = result;
                    offset = yankee.bind(output)(offset);
                    output = tangon;
                    yankee = output.log;
                    offset = 'Unpausing socket';
                    offset = yankee.bind(output)(offset);
                    yankee = _closure1_slot2;
                    offset = 7;
                    offset = sizing[offset];
                    yankee = yankee.bind(oscard)(offset);
                    offset = yankee.setIsPaused;
                    offset = offset.bind(yankee)(report);
                    return oscard;
 591:
                    yankee = _closure1_slot1;
                    sizing = _closure1_slot3;
                    offset = sizing[option];
                    output = yankee.bind(oscard)(offset);
                    yankee = output.addBreadcrumb;
                    offset = {};
                    result = 'Finished headless task.';
                    offset['message'] = result;
                    result = {};
                    echoed = kiloes;
                    result['name'] = echoed;
                    echoed = backup;
                    result['success'] = echoed;
                    update = foxtra.Date;
                    echoed = update.now;
                    update = echoed.bind(update)();
                    echoed = romeon;
                    update = update - echoed;
                    echoed = 'ms';
                    echoed = update + echoed;
                    result['duration'] = echoed;
                    offset['data'] = result;
                    offset = yankee.bind(output)(offset);
                    output = tangon;
                    yankee = output.log;
                    offset = 'Unpausing socket';
                    offset = yankee.bind(output)(offset);
                    yankee = _closure1_slot2;
                    offset = 7;
                    offset = sizing[offset];
                    yankee = yankee.bind(oscard)(offset);
                    offset = yankee.setIsPaused;
                    offset = offset.bind(yankee)(report);
                    return verify;
 736:
                    offset = _closure1_slot1;
                    yankee = _closure1_slot3;
                    verify = yankee[option];
                    sizing = offset.bind(oscard)(verify);
                    offset = sizing.addBreadcrumb;
                    verify = {};
                    output = 'Finished headless task.';
                    verify['message'] = output;
                    output = {};
                    result = kiloes;
                    output['name'] = result;
                    result = backup;
                    output['success'] = result;
                    echoed = foxtra.Date;
                    result = echoed.now;
                    echoed = result.bind(echoed)();
                    result = romeon;
                    echoed = echoed - result;
                    result = 'ms';
                    result = echoed + result;
                    output['duration'] = result;
                    verify['data'] = output;
                    verify = offset.bind(sizing)(verify);
                    sizing = tangon;
                    offset = sizing.log;
                    verify = 'Unpausing socket';
                    verify = offset.bind(sizing)(verify);
                    offset = _closure1_slot2;
                    verify = 7;
                    verify = yankee[verify];
                    offset = offset.bind(oscard)(verify);
                    verify = offset.setIsPaused;
                    verify = verify.bind(offset)(report);
                    return golfie;
 881:
                    verify = _closure1_slot1;
                    offset = _closure1_slot3;
                    golfie = offset[option];
                    yankee = verify.bind(oscard)(golfie);
                    verify = yankee.addBreadcrumb;
                    golfie = {};
                    sizing = 'Finished headless task.';
                    golfie['message'] = sizing;
                    sizing = {};
                    output = kiloes;
                    sizing['name'] = output;
                    output = backup;
                    sizing['success'] = output;
                    result = foxtra.Date;
                    output = result.now;
                    result = output.bind(result)();
                    output = romeon;
                    result = result - output;
                    output = 'ms';
                    output = result + output;
                    sizing['duration'] = output;
                    golfie['data'] = sizing;
                    golfie = verify.bind(yankee)(golfie);
                    yankee = tangon;
                    verify = yankee.log;
                    golfie = 'Unpausing socket';
                    golfie = verify.bind(yankee)(golfie);
                    verify = _closure1_slot2;
                    golfie = 7;
                    golfie = offset[golfie];
                    verify = verify.bind(oscard)(golfie);
                    golfie = verify.setIsPaused;
                    golfie = golfie.bind(verify)(report);
                    return michal;
 1026: // catch_target0
                    CatchBlockStart(arg_register=1);
                    verify = _closure1_slot1;
                    golfie = _closure1_slot3;
                    option = golfie[option];
                    offset = verify.bind(oscard)(option);
                    verify = offset.addBreadcrumb;
                    option = {};
                    yankee = 'Finished headless task.';
                    option['message'] = yankee;
                    yankee = {};
                    yankee['name'] = kiloes;
                    yankee['success'] = backup;
                    backup = foxtra.Date;
                    foxtra = backup.now;
                    foxtra = foxtra.bind(backup)();
                    foxtra = foxtra - romeon;
                    romeon = 'ms';
                    romeon = foxtra + romeon;
                    yankee['duration'] = romeon;
                    option['data'] = yankee;
                    option = verify.bind(offset)(option);
                    verify = tangon;
                    option = verify.log;
                    tangon = 'Unpausing socket';
                    tangon = option.bind(verify)(tangon);
                    tangon = _closure1_slot2;
                    zuuluu = 7;
                    zuuluu = golfie[zuuluu];
                    tangon = tangon.bind(oscard)(zuuluu);
                    zuuluu = tangon.setIsPaused;
                    zuuluu = zuuluu.bind(tangon)(report);
                    throw michal;
 1163:
                    return entity;
                }
            };
            return entity;
        };
        tangon = tangon.bind(report)(zuuluu);
        _closure1_slot8 = tangon;
        zuuluu = tangon.apply;
        entity = arguments;
        michal = entity;
        entity = this;
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    var _closure1_slot8 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AppState;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.initHeadlessTask;
    var _closure1_slot6 = golfie;
    tangon = tangon.applicationReady;
    var _closure1_slot7 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/app_startup/native/executeHeadlessTask.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: executeHeadlessTask
        entity = undefined;
        tangon = _closure1_slot8;
        zuuluu = tangon.apply;
        entity = arguments;
        michal = entity;
        entity = this;
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();