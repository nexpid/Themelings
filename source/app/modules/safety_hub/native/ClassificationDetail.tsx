// app/modules/safety_hub/native/ClassificationDetail.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: ClassificationHeader
        michal = argFoo;
        option = michal.classificationTypeText;
        var _closure2_slot0 = option;
        golfie = michal.guildMetadata;
        var _closure2_slot1 = golfie;
        michal = _closure1_slot17;
        tangon = undefined;
        offset = michal.bind(tangon)();
        report = _closure1_slot3;
        zuuluu = report.useMemo;
        michal = new Array(2);
        michal[0] = option;
        michal[1] = golfie;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                verify = {};
                entity = _closure2_slot0;
                verify['classification_type'] = entity;
                entity = function(argFoo, argBar) { // Original name: classificationHook
                    report = _closure1_slot14;
                    michal = _closure1_slot0;
                    zuuluu = _closure1_slot2;
                    entity = 10;
                    entity = zuuluu[entity];
                    tangon = undefined;
                    entity = michal.bind(tangon)(entity);
                    zuuluu = entity.Text;
                    michal = {};
                    entity = 'heading-xl/bold';
                    michal['variant'] = entity;
                    entity = argFoo;
                    michal['children'] = entity;
                    entity = argBar;
                    entity = report.bind(tangon)(zuuluu, michal, entity);
                    return entity;
                };
                verify['classificationHook'] = entity;
                entity = _closure2_slot1;
                offset = null;
                if(!(offset == entity)) { _fun00002_ip = 106; continue _fun00001 }
 38:
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 12;
                michal = oscard[entity];
                tangon = undefined;
                michal = report.bind(tangon)(michal);
                zuuluu = michal.intl;
                michal = zuuluu.format;
                entity = oscard[entity];
                entity = report.bind(tangon)(entity);
                entity = entity.t;
                entity = entity.39jfOz;
                entity = michal.bind(zuuluu)(entity, verify);
                _fun00002_ip = 375; continue _fun00001;
 106:
                michal = _closure2_slot1;
                michal = offset == michal;
                option = undefined;
                tangon = undefined;
                if(michal) { _fun00002_ip = 131; continue _fun00001 }
 121:
                michal = _closure2_slot1;
                tangon = michal.member_type;
 131:
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                michal = 11;
                michal = oscard[michal];
                michal = report.bind(option)(michal);
                michal = michal.MemberType;
                michal = michal.OWNER;
                if(!(tangon !== michal)) { _fun00002_ip = 271; continue _fun00001 }
 170:
                tangon = _closure1_slot0;
                yankee = _closure1_slot2;
                michal = 12;
                report = yankee[michal];
                report = tangon.bind(option)(report);
                oscard = report.intl;
                report = oscard.format;
                michal = yankee[michal];
                michal = tangon.bind(option)(michal);
                michal = michal.t;
                tangon = michal.rmpEPD;
                michal = {};
                backup = michal;
                foxtra = verify;
                yankee = copyDataProperties(backup, foxtra);
                yankee = _closure2_slot1;
                yankee = offset == yankee;
                romeon = undefined;
                if(yankee) { _fun00002_ip = 254; continue _fun00001 }
 245:
                yankee = _closure2_slot1;
                romeon = yankee.name;
 254:
                yankee = 'guildName';
                michal[yankee] = romeon;
                michal = report.bind(oscard)(tangon, michal);
                _fun00002_ip = 372; continue _fun00001;
 271:
                tangon = _closure1_slot0;
                yankee = _closure1_slot2;
                zuuluu = 12;
                report = yankee[zuuluu];
                report = tangon.bind(option)(report);
                oscard = report.intl;
                report = oscard.format;
                zuuluu = yankee[zuuluu];
                zuuluu = tangon.bind(option)(zuuluu);
                zuuluu = zuuluu.t;
                tangon = zuuluu.X1ngSU;
                zuuluu = {};
                backup = zuuluu;
                foxtra = verify;
                verify = copyDataProperties(backup, foxtra);
                verify = _closure2_slot1;
                verify = offset == verify;
                option = undefined;
                if(verify) { _fun00002_ip = 357; continue _fun00001 }
 348:
                golfie = _closure2_slot1;
                option = golfie.name;
 357:
                golfie = 'guildName';
                zuuluu[golfie] = option;
                michal = report.bind(oscard)(tangon, zuuluu);
 372:
                entity = michal;
 375:
                return entity;
            }
        };
        verify = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot15;
        michal = _closure1_slot4;
        entity = {};
        report = offset.header;
        entity['style'] = report;
        option = _closure1_slot14;
        golfie = _closure1_slot5;
        report = {};
        foxtra = _closure1_slot1;
        yankee = _closure1_slot2;
        romeon = 13;
        romeon = yankee[romeon];
        romeon = foxtra.bind(tangon)(romeon);
        report['source'] = romeon;
        romeon = offset.art;
        report['style'] = romeon;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        option = _closure1_slot14;
        golfie = _closure1_slot0;
        oscard = 10;
        oscard = yankee[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'variant': 'text-lg/normal', 'style': null, 'color': 'header-primary'};
        offset = offset.headerText;
        oscard['style'] = offset;
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot21 = entity;
    entity = function(argFoo) { // Original name: ClassificationActionsTaken
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            zuuluu = entity.actions;
            record = entity.classificationExpiration;
            michal = _closure1_slot0;
            tangon = _closure1_slot2;
            entity = 14;
            entity = tangon[entity];
            report = undefined;
            oscard = michal.bind(report)(entity);
            tangon = oscard.useStateFromStores;
            entity = _closure1_slot8;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = _closure1_slot8;
                entity = entity.locale;
                return entity;
            };
            config = tangon.bind(oscard)(michal, entity);
            entity = _closure1_slot17;
            romeon = entity.bind(report)();
            michal = zuuluu.filter;
            entity = function(argFoo) {
                entity = argFoo;
                entity = entity.descriptions;
                michal = entity.length;
                entity = 0;
                entity = michal > entity;
                return entity;
            };
            foxtra = michal.bind(zuuluu)(entity);
            michal = foxtra.length;
            entity = 0;
            if(!(entity === michal)) { _fun00004_ip = 120; continue _fun00003 }
 108:
            entity = null;
            michal = entity == record;
            if(michal) { _fun00004_ip = 559; continue _fun00003 }
 120:
            tangon = _closure1_slot15;
            zuuluu = _closure1_slot4;
            michal = {};
            oscard = romeon.sectionContainer;
            michal['style'] = oscard;
            option = _closure1_slot14;
            kiloes = _closure1_slot0;
            verify = _closure1_slot2;
            sizing = 10;
            oscard = verify[sizing];
            oscard = kiloes.bind(report)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'eyebrow', 'color': 'text-muted'};
            vacuum = 12;
            yankee = verify[vacuum];
            yankee = kiloes.bind(report)(yankee);
            backup = yankee.intl;
            yankee = backup.string;
            verify = verify[vacuum];
            verify = kiloes.bind(report)(verify);
            verify = verify.t;
            verify = verify.O2nYk5;
            verify = yankee.bind(backup)(verify);
            oscard['children'] = verify;
            golfie = option.bind(report)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            verify = _closure1_slot15;
            option = _closure1_slot4;
            golfie = {};
            backup = romeon.actionsTaken;
            yankee = new Array(1);
            yankee[0] = backup;
            golfie['style'] = yankee;
            yankee = foxtra.map;
            offset = function(argFoo) {
                entity = argFoo;
                report = _closure1_slot14;
                tangon = _closure1_slot23;
                zuuluu = {};
                zuuluu['action'] = entity;
                michal = entity.id;
                entity = undefined;
                entity = report.bind(entity)(tangon, zuuluu, michal);
                return entity;
            };
            yankee = yankee.bind(foxtra)(offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = null;
            foxtra = yankee != record;
            if(!foxtra) { _fun00004_ip = 531; continue _fun00003 }
 315:
            kiloes = _closure1_slot15;
            backup = _closure1_slot4;
            foxtra = {};
            romeon = romeon.classificationActionDescription;
            foxtra['style'] = romeon;
            ctrled = _closure1_slot15;
            update = _closure1_slot0;
            echoed = _closure1_slot2;
            romeon = echoed[sizing];
            romeon = update.bind(report)(romeon);
            result = romeon.Text;
            romeon = {};
            source = 'text-xs/normal';
            romeon['variant'] = source;
            sequen = [' ', '•'];
            romeon['children'] = sequen;
            result = ctrled.bind(report)(result, romeon);
            romeon = new Array(2);
            romeon[0] = result;
            result = _closure1_slot14;
            sizing = echoed[sizing];
            sizing = update.bind(report)(sizing);
            output = sizing.Text;
            sizing = {};
            sizing['variant'] = source;
            source = echoed[vacuum];
            source = update.bind(report)(source);
            ctrled = source.intl;
            source = ctrled.format;
            echoed = echoed[vacuum];
            echoed = update.bind(report)(echoed);
            echoed = echoed.t;
            update = echoed.TByIjY;
            echoed = {};
            sequen = record.toLocaleDateString;
            vacuum = {};
            cntext = 'medium';
            vacuum['dateStyle'] = cntext;
            vacuum = sequen.bind(record)(config, vacuum);
            echoed['expirationDate'] = vacuum;
            echoed = source.bind(ctrled)(update, echoed);
            sizing['children'] = echoed;
            sizing = result.bind(report)(output, sizing);
            romeon[1] = sizing;
            foxtra['children'] = romeon;
            romeon = 'expiration';
            yankee = kiloes.bind(report)(backup, foxtra, romeon);
 531:
            offset[1] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 559:
            return entity;
        }
    };
    var _closure1_slot22 = entity;
    entity = function(argFoo) { // Original name: ClassificationActionsTakenRows
        entity = argFoo;
        oscard = entity.action;
        michal = _closure1_slot17;
        tangon = undefined;
        michal = michal.bind(tangon)();
        var _closure2_slot0 = michal;
        zuuluu = _closure1_slot14;
        michal = _closure1_slot16;
        entity = {};
        golfie = oscard.descriptions;
        oscard = golfie.map;
        report = function(argFoo, argBar) {
            report = _closure1_slot15;
            tangon = _closure1_slot4;
            zuuluu = {};
            entity = _closure2_slot0;
            entity = entity.classificationActionDescription;
            zuuluu['style'] = entity;
            romeon = _closure1_slot15;
            golfie = _closure1_slot0;
            offset = _closure1_slot2;
            oscard = 10;
            entity = offset[oscard];
            michal = undefined;
            entity = golfie.bind(michal)(entity);
            yankee = entity.Text;
            entity = {};
            verify = 'text-xs/normal';
            entity['variant'] = verify;
            foxtra = [' ', '•'];
            entity['children'] = foxtra;
            yankee = romeon.bind(michal)(yankee, entity);
            entity = new Array(2);
            entity[0] = yankee;
            option = _closure1_slot14;
            oscard = offset[oscard];
            oscard = golfie.bind(michal)(oscard);
            golfie = oscard.Text;
            oscard = {};
            oscard['variant'] = verify;
            verify = argFoo;
            oscard['children'] = verify;
            oscard = option.bind(michal)(golfie, oscard);
            entity[1] = oscard;
            zuuluu['children'] = entity;
            entity = argBar;
            entity = report.bind(michal)(tangon, zuuluu, entity);
            return entity;
        };
        report = oscard.bind(golfie)(report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot23 = entity;
    entity = function(argFoo) { // Original name: ClassificationGuidance
        entity = argFoo;
        result = entity.tosLink;
        output = entity.communityGuidelinesLink;
        yankee = entity.classificationTypeText;
        offset = entity.policyExplainerLink;
        oscard = entity.appealComponent;
        entity = _closure1_slot17;
        tangon = undefined;
        report = entity.bind(tangon)();
        zuuluu = _closure1_slot15;
        michal = _closure1_slot4;
        entity = {};
        report = report.sectionContainer;
        entity['style'] = report;
        verify = _closure1_slot14;
        backup = _closure1_slot0;
        echoed = _closure1_slot2;
        report = 10;
        report = echoed[report];
        report = backup.bind(tangon)(report);
        option = report.Text;
        report = {'variant': 'eyebrow', 'color': 'text-muted'};
        foxtra = 12;
        romeon = echoed[foxtra];
        romeon = backup.bind(tangon)(romeon);
        sizing = romeon.intl;
        kiloes = sizing.string;
        romeon = echoed[foxtra];
        romeon = backup.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.977ien;
        romeon = kiloes.bind(sizing)(romeon);
        report['children'] = romeon;
        option = verify.bind(tangon)(option, report);
        report = new Array(4);
        report[0] = option;
        romeon = _closure1_slot14;
        option = 15;
        option = echoed[option];
        option = backup.bind(tangon)(option);
        verify = option.TextWithIOSLinkWorkaround;
        option = {};
        kiloes = 'text-sm/normal';
        option['variant'] = kiloes;
        kiloes = echoed[foxtra];
        kiloes = backup.bind(tangon)(kiloes);
        sizing = kiloes.intl;
        kiloes = sizing.format;
        foxtra = echoed[foxtra];
        foxtra = backup.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        backup = foxtra.1Z/+aG;
        foxtra = {};
        foxtra['tosLink'] = result;
        foxtra['communityGuidelinesLink'] = output;
        foxtra = kiloes.bind(sizing)(backup, foxtra);
        option['children'] = foxtra;
        option = romeon.bind(tangon)(verify, option);
        report[1] = option;
        verify = _closure1_slot14;
        option = _closure1_slot25;
        golfie = {};
        golfie['classificationTypeText'] = yankee;
        golfie['policyExplainerLink'] = offset;
        golfie = verify.bind(tangon)(option, golfie);
        report[2] = golfie;
        report[3] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot24 = entity;
    entity = function(argFoo) { // Original name: ClassificationPolicyCard
        entity = argFoo;
        echoed = entity.classificationTypeText;
        entity = entity.policyExplainerLink;
        var _closure2_slot0 = entity;
        entity = _closure1_slot17;
        tangon = undefined;
        foxtra = entity.bind(tangon)();
        zuuluu = _closure1_slot14;
        michal = _closure1_slot4;
        entity = {};
        golfie = _closure1_slot15;
        result = _closure1_slot1;
        update = _closure1_slot2;
        report = 16;
        report = update[report];
        oscard = result.bind(tangon)(report);
        report = {};
        option = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 17;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.openURL;
            michal = _closure2_slot0;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        report['onPress'] = option;
        verify = foxtra.classificationPolicyCard;
        option = new Array(1);
        option[0] = verify;
        report['style'] = option;
        offset = _closure1_slot14;
        verify = _closure1_slot4;
        option = {};
        yankee = foxtra.classificationPolicyCardIcon;
        option['style'] = yankee;
        kiloes = _closure1_slot14;
        sizing = _closure1_slot0;
        yankee = 18;
        yankee = update[yankee];
        yankee = sizing.bind(tangon)(yankee);
        backup = yankee.ShieldIcon;
        yankee = {};
        output = 'sm';
        yankee['size'] = output;
        output = 8;
        output = update[output];
        output = result.bind(tangon)(output);
        output = output.colors;
        output = output.TEXT_LINK;
        yankee['color'] = output;
        yankee = kiloes.bind(tangon)(backup, yankee);
        option['children'] = yankee;
        verify = offset.bind(tangon)(verify, option);
        option = new Array(2);
        option[0] = verify;
        yankee = _closure1_slot14;
        offset = _closure1_slot4;
        verify = {};
        foxtra = foxtra.classificationPolicyCardContent;
        verify['style'] = foxtra;
        backup = _closure1_slot14;
        romeon = 10;
        romeon = update[romeon];
        romeon = sizing.bind(tangon)(romeon);
        foxtra = romeon.Text;
        romeon = {'variant': 'heading-md/semibold', 'color': 'header-primary'};
        kiloes = 12;
        output = update[kiloes];
        output = sizing.bind(tangon)(output);
        result = output.intl;
        output = result.format;
        kiloes = update[kiloes];
        kiloes = sizing.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        sizing = kiloes.zxUdpq;
        kiloes = {};
        kiloes['classificationDescription'] = echoed;
        kiloes = output.bind(result)(sizing, kiloes);
        romeon['children'] = kiloes;
        romeon = backup.bind(tangon)(foxtra, romeon);
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot25 = entity;
    entity = function(argFoo) { // Original name: ClassificationDetailFooter
        entity = argFoo;
        report = entity.onClose;
        entity = _closure1_slot17;
        tangon = undefined;
        verify = entity.bind(tangon)();
        zuuluu = _closure1_slot14;
        option = _closure1_slot1;
        offset = _closure1_slot2;
        golfie = 19;
        entity = offset[golfie];
        michal = option.bind(tangon)(entity);
        entity = {};
        verify = verify.redirectButton;
        entity['style'] = verify;
        golfie = offset[golfie];
        golfie = option.bind(tangon)(golfie);
        golfie = golfie.Sizes;
        golfie = golfie.MEDIUM;
        entity['size'] = golfie;
        verify = _closure1_slot0;
        oscard = 12;
        golfie = offset[oscard];
        golfie = verify.bind(tangon)(golfie);
        option = golfie.intl;
        golfie = option.string;
        oscard = offset[oscard];
        oscard = verify.bind(tangon)(oscard);
        oscard = oscard.t;
        oscard = oscard.elrEjI;
        oscard = golfie.bind(option)(oscard);
        entity['text'] = oscard;
        entity['onPress'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot26 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    golfie = tangon.Image;
    var _closure1_slot5 = golfie;
    golfie = tangon.ActivityIndicator;
    var _closure1_slot6 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot7 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.SafetyHubAnalyticsActionSource;
    var _closure1_slot10 = golfie;
    golfie = tangon.SafetyHubAnalyticsActions;
    var _closure1_slot11 = golfie;
    tangon = tangon.SafetyHubLinks;
    var _closure1_slot12 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot13 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot14 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot15 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot16 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 8;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_SECONDARY;
    verify['backgroundColor'] = foxtra;
    tangon['root'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'column', 'height': '100%'};
    foxtra = 'flex';
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingTop'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingHorizontal'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_32;
    verify['gap'] = backup;
    tangon['container'] = verify;
    verify = {'display': 'flex', 'textAlign': 'center', 'alignItems': 'center', 'flexDirection': 'column'};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['gap'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['marginBottom'] = backup;
    tangon['header'] = verify;
    verify = {'textAlign': 'center', 'maxWidth': 260};
    tangon['headerText'] = verify;
    verify = {'height': 88, 'width': 98};
    tangon['art'] = verify;
    verify = {};
    verify['display'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['gap'] = foxtra;
    tangon['sectionContainer'] = verify;
    verify = 9;
    foxtra = oscard[verify];
    backup = report.bind(entity)(foxtra);
    foxtra = backup.generateBoxShadowStyle;
    verify = oscard[verify];
    verify = report.bind(entity)(verify);
    verify = verify.FOUR_DP_ELEVATION_SHADOW_PARAMS;
    verify = foxtra.bind(backup)(verify);
    tangon['cardShadow'] = verify;
    verify = {'display': 'flex', 'paddingLeft': null, 'flexDirection': 'column'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    verify['paddingLeft'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['gap'] = foxtra;
    tangon['actionsTaken'] = verify;
    verify = {'display': 'flex', 'padding': null, 'flexDirection': 'column'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['padding'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    verify['borderRadius'] = foxtra;
    tangon['policy'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'column'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_32;
    verify['gap'] = foxtra;
    tangon['classificationDetailContainer'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center'};
    tangon['letUsKnowContainer'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['gap'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['padding'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    verify['marginTop'] = foxtra;
    verify['flexShrink'] = romeon;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_TERTIARY;
    verify['backgroundColor'] = foxtra;
    tangon['classificationPolicyCard'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'backgroundColor': null, 'width': 32, 'height': 32};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_MOD_STRONG;
    verify['backgroundColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xxl;
    verify['borderRadius'] = foxtra;
    tangon['classificationPolicyCardIcon'] = verify;
    verify = {};
    verify['flex'] = romeon;
    tangon['classificationPolicyCardContent'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    verify['gap'] = romeon;
    tangon['classificationActionsTakenRow'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    verify['gap'] = romeon;
    tangon['classificationActionDescription'] = verify;
    verify = {'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'width': 24, 'height': 24};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xxl;
    verify['borderRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeon;
    tangon['actionRowIconBackground'] = verify;
    verify = {'width': 12, 'height': 12};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    tangon['actionRowIcon'] = verify;
    verify = {'borderRadius': null, 'width': 300, 'alignSelf': 'center'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xs;
    verify['borderRadius'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_32;
    verify['marginTop'] = offset;
    tangon['redirectButton'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot17 = tangon;
    tangon = function() { // Original name: AppealStatus
        tangon = _closure1_slot14;
        option = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 10;
        entity = verify[entity];
        zuuluu = undefined;
        entity = option.bind(zuuluu)(entity);
        michal = entity.Text;
        entity = {'variant': 'text-md/normal', 'color': 'text-muted'};
        report = 12;
        oscard = verify[report];
        oscard = option.bind(zuuluu)(oscard);
        golfie = oscard.intl;
        oscard = golfie.string;
        report = verify[report];
        report = option.bind(zuuluu)(report);
        report = report.t;
        report = report.I2H0/P;
        report = oscard.bind(golfie)(report);
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot18 = tangon;
    tangon = function(argFoo) { // Original name: LetUsKnow
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot14;
        oscard = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 10;
        entity = offset[entity];
        zuuluu = undefined;
        entity = oscard.bind(zuuluu)(entity);
        michal = entity.Text;
        entity = {'variant': 'text-sm/normal', 'color': 'text-muted'};
        report = 12;
        golfie = offset[report];
        golfie = oscard.bind(zuuluu)(golfie);
        option = golfie.intl;
        golfie = option.format;
        report = offset[report];
        report = oscard.bind(zuuluu)(report);
        report = report.t;
        oscard = report.IFxUaW;
        report = {};
        verify = function(argFoo, argBar) { // Original name: letUsKnowHook
            report = _closure1_slot14;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 10;
            entity = zuuluu[entity];
            tangon = undefined;
            entity = michal.bind(tangon)(entity);
            zuuluu = entity.Text;
            michal = {'onPress': null, 'variant': 'text-sm/normal', 'color': 'text-link'};
            entity = _closure2_slot0;
            entity = entity.onPressLetUsKnow;
            michal['onPress'] = entity;
            entity = argFoo;
            michal['children'] = entity;
            entity = argBar;
            entity = report.bind(tangon)(zuuluu, michal, entity);
            return entity;
        };
        report['letUsKnowHook'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot19 = tangon;
    tangon = function(argFoo) { // Original name: AppealFooter
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            verify = argFoo;
            entity = _closure1_slot17;
            tangon = undefined;
            report = entity.bind(tangon)();
            zuuluu = _closure1_slot14;
            michal = _closure1_slot4;
            entity = {};
            report = report.letUsKnowContainer;
            entity['style'] = report;
            report = verify.hasBeenAppealed;
            option = _closure1_slot14;
            if(report) { _fun00006_ip = 74; continue _fun00005 }
 49:
            golfie = _closure1_slot19;
            report = {};
            verify = verify.onPressLetUsKnow;
            report['onPressLetUsKnow'] = verify;
            report = option.bind(tangon)(golfie, report);
            _fun00006_ip = 86; continue _fun00005;
 74:
            golfie = _closure1_slot18;
            oscard = {};
            report = option.bind(tangon)(golfie, oscard);
 86:
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot20 = tangon;
    tangon = 30;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/safety_hub/native/ClassificationDetail.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ConnectedClassificationDetail
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            option = entity.classificationId;
            var _closure2_slot0 = option;
            report = entity.source;
            var _closure2_slot1 = report;
            result = entity.onClose;
            var _closure2_slot2 = result;
            tangon = entity.onError;
            oscard = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 20;
            entity = golfie[entity];
            zuuluu = undefined;
            michal = oscard.bind(zuuluu)(entity);
            entity = michal.useSafetyHubClassification;
            entity = entity.bind(michal)(option);
            var _closure2_slot3 = entity;
            vacuum = entity.classification;
            var _closure2_slot4 = vacuum;
            michal = entity.isAppealEligible;
            var _closure2_slot5 = michal;
            michal = _closure1_slot17;
            backup = michal.bind(zuuluu)();
            michal = 14;
            michal = golfie[michal];
            verify = oscard.bind(zuuluu)(michal);
            golfie = verify.useStateFromStores;
            michal = _closure1_slot9;
            oscard = new Array(1);
            oscard[0] = michal;
            michal = function() {
                michal = _closure1_slot9;
                entity = michal.getAppealEligibility;
                entity = entity.bind(michal)();
                return entity;
            };
            foxtra = golfie.bind(verify)(oscard, michal);
            michal = null;
            golfie = michal == vacuum;
            oscard = undefined;
            if(golfie) { _fun00008_ip = 167; continue _fun00007 }
 161:
            oscard = vacuum.flagged_content;
 167:
            oscard = michal != oscard;
            if(!oscard) { _fun00008_ip = 200; continue _fun00007 }
 174:
            golfie = michal == vacuum;
            verify = undefined;
            if(golfie) { _fun00008_ip = 194; continue _fun00007 }
 183:
            golfie = vacuum.flagged_content;
            verify = golfie.length;
 194:
            golfie = 0;
            oscard = verify > golfie;
 200:
            var _closure2_slot6 = oscard;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = 21;
            golfie = offset[golfie];
            verify = verify.bind(zuuluu)(golfie);
            golfie = verify.useSafetyHubAccountStanding;
            verify = golfie.bind(verify)();
            var _closure2_slot7 = verify;
            offset = michal == vacuum;
            if(offset) { _fun00008_ip = 254; continue _fun00007 }
 245:
            golfie = vacuum.is_coppa;
            offset = !golfie;
 254:
            golfie = !offset;
            if(offset) { _fun00008_ip = 302; continue _fun00007 }
 260:
            romeon = foxtra.includes;
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = 11;
            offset = sizing[offset];
            offset = kiloes.bind(zuuluu)(offset);
            offset = offset.AppealEligibility;
            offset = offset.AGE_VERIFY_ELIGIBLE;
            golfie = romeon.bind(foxtra)(offset);
 302:
            var _closure2_slot8 = golfie;
            golfie = {};
            golfie['accountStanding'] = verify;
            golfie['classificationId'] = option;
            golfie['classificationState'] = entity;
            golfie['hasFlaggedContent'] = oscard;
            golfie['source'] = report;
            var _closure2_slot9 = golfie;
            oscard = _closure1_slot3;
            report = oscard.useRef;
            report = report.bind(oscard)(golfie);
            var _closure2_slot10 = report;
            golfie = _closure1_slot3;
            oscard = golfie.useEffect;
            report = function() {
                michal = _closure2_slot10;
                entity = _closure2_slot9;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            report = oscard.bind(golfie)(report);
            option = _closure1_slot3;
            golfie = option.useEffect;
            oscard = new Array(1);
            oscard[0] = vacuum;
            report = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    michal = _closure2_slot4;
                    verify = null;
                    if(!(verify != michal)) { _fun00010_ip = 197; continue _fun00009 }
 16:
                    entity = _closure2_slot10;
                    entity = entity.current;
                    offset = entity.accountStanding;
                    romeon = entity.classificationId;
                    report = entity.classificationState;
                    oscard = entity.hasFlaggedContent;
                    golfie = entity.source;
                    michal = _closure1_slot1;
                    zuuluu = _closure1_slot2;
                    entity = 22;
                    entity = zuuluu[entity];
                    yankee = undefined;
                    tangon = michal.bind(yankee)(entity);
                    zuuluu = tangon.track;
                    entity = _closure1_slot13;
                    michal = entity.SAFETY_HUB_ACTION;
                    entity = {};
                    foxtra = _closure1_slot11;
                    foxtra = foxtra.ViewViolationDetail;
                    entity['action'] = foxtra;
                    offset = offset.state;
                    entity['account_standing'] = offset;
                    offset = global;
                    offset = offset.Number;
                    yankee = offset.bind(yankee)(romeon);
                    offset = new Array(1);
                    offset[0] = yankee;
                    entity['classification_ids'] = offset;
                    if(!(verify == golfie)) { _fun00010_ip = 160; continue _fun00009 }
 150:
                    option = _closure1_slot10;
                    golfie = option.SystemDM;
 160:
                    entity['source'] = golfie;
                    entity['is_violative_content_shown'] = oscard;
                    oscard = report.isDsaEligible;
                    entity['is_dsa_eligible'] = oscard;
                    report = report.violationType;
                    entity['violation_type'] = report;
                    entity = zuuluu.bind(tangon)(michal, entity);
 197:
                    entity = undefined;
                    return entity;
                }
            };
            report = golfie.bind(option)(report, oscard);
            if(!(michal == vacuum)) { _fun00008_ip = 454; continue _fun00007 }
 409:
            report = entity.classificationRequestState;
            oscard = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 11;
            entity = golfie[entity];
            entity = oscard.bind(zuuluu)(entity);
            entity = entity.ClassificationRequestState;
            entity = entity.FAILED;
            if(!(report !== entity)) { _fun00008_ip = 932; continue _fun00007 }
 454:
            oscard = _closure1_slot14;
            report = _closure1_slot7;
            entity = {};
            golfie = backup.root;
            entity['style'] = golfie;
            verify = _closure1_slot14;
            option = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = 23;
            golfie = offset[golfie];
            golfie = option.bind(zuuluu)(golfie);
            option = golfie.SafeAreaPaddingView;
            golfie = {};
            offset = backup.container;
            golfie['style'] = offset;
            offset = true;
            golfie['bottom'] = offset;
            if(!(michal != vacuum)) { _fun00008_ip = 886; continue _fun00007 }
 528:
            foxtra = _closure1_slot15;
            romeon = _closure1_slot4;
            offset = {};
            kiloes = backup.classificationDetailContainer;
            backup = new Array(1);
            backup[0] = kiloes;
            offset['style'] = backup;
            sizing = _closure1_slot14;
            kiloes = _closure1_slot21;
            backup = {};
            output = vacuum.description;
            backup['classificationTypeText'] = output;
            output = vacuum.guild_metadata;
            backup['guildMetadata'] = output;
            kiloes = sizing.bind(zuuluu)(kiloes, backup);
            backup = new Array(5);
            backup[0] = kiloes;
            output = _closure1_slot14;
            sizing = _closure1_slot1;
            echoed = _closure1_slot2;
            kiloes = 24;
            kiloes = echoed[kiloes];
            sizing = sizing.bind(zuuluu)(kiloes);
            kiloes = {};
            echoed = vacuum.flagged_content;
            if(!(michal == echoed)) { _fun00008_ip = 641; continue _fun00007 }
 637:
            echoed = new Array(0);
 641:
            kiloes['flaggedContent'] = echoed;
            kiloes = output.bind(zuuluu)(sizing, kiloes);
            backup[1] = kiloes;
            output = _closure1_slot14;
            sizing = _closure1_slot22;
            kiloes = {};
            echoed = vacuum.actions;
            kiloes['actions'] = echoed;
            update = _closure1_slot0;
            source = _closure1_slot2;
            echoed = 25;
            echoed = source[echoed];
            update = update.bind(zuuluu)(echoed);
            echoed = update.getClassificationExpiration;
            echoed = echoed.bind(update)(vacuum);
            kiloes['classificationExpiration'] = echoed;
            kiloes = output.bind(zuuluu)(sizing, kiloes);
            backup[2] = kiloes;
            output = _closure1_slot14;
            sizing = _closure1_slot24;
            kiloes = {};
            echoed = _closure1_slot12;
            update = echoed.APPEALS_LINK;
            kiloes['appealLink'] = update;
            update = echoed.COMMUNITY_GUIDELINES;
            kiloes['communityGuidelinesLink'] = update;
            echoed = echoed.TOS_LINK;
            kiloes['tosLink'] = echoed;
            echoed = vacuum.description;
            kiloes['classificationTypeText'] = echoed;
            echoed = vacuum.explainer_link;
            kiloes['policyExplainerLink'] = echoed;
            source = _closure1_slot14;
            update = _closure1_slot20;
            echoed = {};
            vacuum = vacuum.appeal_status;
            vacuum = michal != vacuum;
            echoed['hasBeenAppealed'] = vacuum;
            ctrled = function() { // Original name: onPressLetUsKnow
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    tangon = _closure1_slot1;
                    michal = _closure1_slot2;
                    entity = 22;
                    michal = michal[entity];
                    entity = undefined;
                    golfie = tangon.bind(entity)(michal);
                    oscard = golfie.track;
                    michal = _closure1_slot13;
                    report = michal.SAFETY_HUB_ACTION;
                    tangon = {};
                    michal = _closure1_slot11;
                    michal = michal.ClickLetUsKnow;
                    tangon['action'] = michal;
                    option = _closure2_slot7;
                    option = option.state;
                    tangon['account_standing'] = option;
                    option = global;
                    verify = option.Number;
                    option = _closure2_slot0;
                    verify = verify.bind(entity)(option);
                    option = new Array(1);
                    option[0] = verify;
                    tangon['classification_ids'] = option;
                    verify = _closure2_slot1;
                    option = null;
                    if(!(option == verify)) { _fun00012_ip = 125; continue _fun00011 }
 113:
                    option = _closure1_slot10;
                    option = option.SystemDM;
                    _fun00012_ip = 129; continue _fun00011;
 125:
                    option = _closure2_slot1;
 129:
                    tangon['source'] = option;
                    option = _closure2_slot6;
                    tangon['is_violative_content_shown'] = option;
                    option = _closure2_slot3;
                    verify = option.isDsaEligible;
                    tangon['is_dsa_eligible'] = verify;
                    option = option.violationType;
                    tangon['violation_type'] = option;
                    tangon = oscard.bind(golfie)(report, tangon);
                    tangon = _closure2_slot8;
                    if(tangon) { _fun00012_ip = 330; continue _fun00011 }
 184:
                    tangon = _closure2_slot5;
                    report = _closure1_slot1;
                    oscard = _closure1_slot2;
                    if(tangon) { _fun00012_ip = 237; continue _fun00011 }
 199:
                    tangon = 17;
                    tangon = oscard[tangon];
                    option = report.bind(entity)(tangon);
                    golfie = option.openURL;
                    tangon = _closure1_slot12;
                    tangon = tangon.APPEALS_LINK;
                    tangon = golfie.bind(option)(tangon);
                    _fun00012_ip = 370; continue _fun00011;
 237:
                    tangon = 27;
                    tangon = oscard[tangon];
                    option = report.bind(entity)(tangon);
                    golfie = option.increment;
                    tangon = {};
                    offset = _closure1_slot0;
                    verify = 28;
                    verify = oscard[verify];
                    verify = offset.bind(entity)(verify);
                    verify = verify.MetricEvents;
                    verify = verify.APPEAL_INGESTION_VIEW;
                    tangon['name'] = verify;
                    tangon = golfie.bind(option)(tangon);
                    tangon = 29;
                    tangon = oscard[tangon];
                    oscard = report.bind(entity)(tangon);
                    report = oscard.open;
                    tangon = {};
                    golfie = _closure2_slot0;
                    tangon['classificationId'] = golfie;
                    tangon = report.bind(oscard)(tangon);
                    _fun00012_ip = 370; continue _fun00011;
 330:
                    tangon = _closure1_slot1;
                    report = _closure1_slot2;
                    zuuluu = 26;
                    zuuluu = report[zuuluu];
                    report = tangon.bind(entity)(zuuluu);
                    tangon = report.open;
                    zuuluu = _closure2_slot0;
                    michal = _closure2_slot2;
                    michal = tangon.bind(report)(zuuluu, michal);
 370:
                    return entity;
                }
            };
            echoed['onPressLetUsKnow'] = ctrled;
            echoed = source.bind(zuuluu)(update, echoed);
            kiloes['appealComponent'] = echoed;
            kiloes = output.bind(zuuluu)(sizing, kiloes);
            backup[3] = kiloes;
            output = _closure1_slot14;
            sizing = _closure1_slot26;
            kiloes = {};
            kiloes['onClose'] = result;
            kiloes = output.bind(zuuluu)(sizing, kiloes);
            backup[4] = kiloes;
            offset['children'] = backup;
            offset = foxtra.bind(zuuluu)(romeon, offset);
            _fun00008_ip = 910; continue _fun00007;
 886:
            foxtra = _closure1_slot14;
            romeon = _closure1_slot6;
            yankee = {};
            backup = 'large';
            yankee['size'] = backup;
            offset = foxtra.bind(zuuluu)(romeon, yankee);
 910:
            golfie['children'] = offset;
            golfie = verify.bind(zuuluu)(option, golfie);
            entity['children'] = golfie;
            entity = oscard.bind(zuuluu)(report, entity);
            _fun00008_ip = 938; continue _fun00007;
 932:
            zuuluu = tangon.bind(zuuluu)();
            entity = null;
 938:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();