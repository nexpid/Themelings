// app/modules/safety_hub/native/ClassificationDetail.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: ClassificationHeader
        mike = argFoo;
        options = mike.classificationTypeText;
        var _closure2_slot0 = options;
        golf = mike.guildMetadata;
        var _closure2_slot1 = golf;
        mike = _closure1_slot17;
        tango = undefined;
        offset = mike.bind(tango)();
        report = _closure1_slot3;
        zulu = report.useMemo;
        mike = new Array(2);
        mike[0] = options;
        mike[1] = golf;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                verify = {};
                entity = _closure2_slot0;
                verify['classification_type'] = entity;
                entity = function(argFoo, argBar) { // Original name: classificationHook
                    report = _closure1_slot14;
                    mike = _closure1_slot0;
                    zulu = _closure1_slot2;
                    entity = 10;
                    entity = zulu[entity];
                    tango = undefined;
                    entity = mike.bind(tango)(entity);
                    zulu = entity.Text;
                    mike = {};
                    entity = 'heading-xl/bold';
                    mike['variant'] = entity;
                    entity = argFoo;
                    mike['children'] = entity;
                    entity = argBar;
                    entity = report.bind(tango)(zulu, mike, entity);
                    return entity;
                };
                verify['classificationHook'] = entity;
                entity = _closure2_slot1;
                offset = null;
                if(!(offset == entity)) { _fun00002_ip = 106; continue _fun00001 }
 38:
                report = _closure1_slot0;
                oscar = _closure1_slot2;
                entity = 12;
                mike = oscar[entity];
                tango = undefined;
                mike = report.bind(tango)(mike);
                zulu = mike.intl;
                mike = zulu.format;
                entity = oscar[entity];
                entity = report.bind(tango)(entity);
                entity = entity.t;
                entity = entity.39jfOz;
                entity = mike.bind(zulu)(entity, verify);
                _fun00002_ip = 375; continue _fun00001;
 106:
                mike = _closure2_slot1;
                mike = offset == mike;
                options = undefined;
                tango = undefined;
                if(mike) { _fun00002_ip = 131; continue _fun00001 }
 121:
                mike = _closure2_slot1;
                tango = mike.member_type;
 131:
                report = _closure1_slot0;
                oscar = _closure1_slot2;
                mike = 11;
                mike = oscar[mike];
                mike = report.bind(options)(mike);
                mike = mike.MemberType;
                mike = mike.OWNER;
                if(!(tango !== mike)) { _fun00002_ip = 271; continue _fun00001 }
 170:
                tango = _closure1_slot0;
                yankee = _closure1_slot2;
                mike = 12;
                report = yankee[mike];
                report = tango.bind(options)(report);
                oscar = report.intl;
                report = oscar.format;
                mike = yankee[mike];
                mike = tango.bind(options)(mike);
                mike = mike.t;
                tango = mike.rmpEPD;
                mike = {};
                backup = mike;
                foxtrot = verify;
                yankee = copyDataProperties(backup, foxtrot);
                yankee = _closure2_slot1;
                yankee = offset == yankee;
                romeo = undefined;
                if(yankee) { _fun00002_ip = 254; continue _fun00001 }
 245:
                yankee = _closure2_slot1;
                romeo = yankee.name;
 254:
                yankee = 'guildName';
                mike[yankee] = romeo;
                mike = report.bind(oscar)(tango, mike);
                _fun00002_ip = 372; continue _fun00001;
 271:
                tango = _closure1_slot0;
                yankee = _closure1_slot2;
                zulu = 12;
                report = yankee[zulu];
                report = tango.bind(options)(report);
                oscar = report.intl;
                report = oscar.format;
                zulu = yankee[zulu];
                zulu = tango.bind(options)(zulu);
                zulu = zulu.t;
                tango = zulu.X1ngSU;
                zulu = {};
                backup = zulu;
                foxtrot = verify;
                verify = copyDataProperties(backup, foxtrot);
                verify = _closure2_slot1;
                verify = offset == verify;
                options = undefined;
                if(verify) { _fun00002_ip = 357; continue _fun00001 }
 348:
                golf = _closure2_slot1;
                options = golf.name;
 357:
                golf = 'guildName';
                zulu[golf] = options;
                mike = report.bind(oscar)(tango, zulu);
 372:
                entity = mike;
 375:
                return entity;
            }
        };
        verify = zulu.bind(report)(entity, mike);
        zulu = _closure1_slot15;
        mike = _closure1_slot4;
        entity = {};
        report = offset.header;
        entity['style'] = report;
        options = _closure1_slot14;
        golf = _closure1_slot5;
        report = {};
        foxtrot = _closure1_slot1;
        yankee = _closure1_slot2;
        romeo = 13;
        romeo = yankee[romeo];
        romeo = foxtrot.bind(tango)(romeo);
        report['source'] = romeo;
        romeo = offset.art;
        report['style'] = romeo;
        golf = options.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        options = _closure1_slot14;
        golf = _closure1_slot0;
        oscar = 10;
        oscar = yankee[oscar];
        oscar = golf.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {'variant': 'text-lg/normal', 'style': null, 'color': 'header-primary'};
        offset = offset.headerText;
        oscar['style'] = offset;
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot21 = entity;
    entity = function(argFoo) { // Original name: ClassificationActionsTaken
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            zulu = entity.actions;
            record = entity.classificationExpiration;
            mike = _closure1_slot0;
            tango = _closure1_slot2;
            entity = 14;
            entity = tango[entity];
            report = undefined;
            oscar = mike.bind(report)(entity);
            tango = oscar.useStateFromStores;
            entity = _closure1_slot8;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = _closure1_slot8;
                entity = entity.locale;
                return entity;
            };
            config = tango.bind(oscar)(mike, entity);
            entity = _closure1_slot17;
            romeo = entity.bind(report)();
            mike = zulu.filter;
            entity = function(argFoo) {
                entity = argFoo;
                entity = entity.descriptions;
                mike = entity.length;
                entity = 0;
                entity = mike > entity;
                return entity;
            };
            foxtrot = mike.bind(zulu)(entity);
            mike = foxtrot.length;
            entity = 0;
            if(!(entity === mike)) { _fun00004_ip = 120; continue _fun00003 }
 108:
            entity = null;
            mike = entity == record;
            if(mike) { _fun00004_ip = 559; continue _fun00003 }
 120:
            tango = _closure1_slot15;
            zulu = _closure1_slot4;
            mike = {};
            oscar = romeo.sectionContainer;
            mike['style'] = oscar;
            options = _closure1_slot14;
            kilo = _closure1_slot0;
            verify = _closure1_slot2;
            sizing = 10;
            oscar = verify[sizing];
            oscar = kilo.bind(report)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'eyebrow', 'color': 'text-muted'};
            vacuum = 12;
            yankee = verify[vacuum];
            yankee = kilo.bind(report)(yankee);
            backup = yankee.intl;
            yankee = backup.string;
            verify = verify[vacuum];
            verify = kilo.bind(report)(verify);
            verify = verify.t;
            verify = verify.O2nYk5;
            verify = yankee.bind(backup)(verify);
            oscar['children'] = verify;
            golf = options.bind(report)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            verify = _closure1_slot15;
            options = _closure1_slot4;
            golf = {};
            backup = romeo.actionsTaken;
            yankee = new Array(1);
            yankee[0] = backup;
            golf['style'] = yankee;
            yankee = foxtrot.map;
            offset = function(argFoo) {
                entity = argFoo;
                report = _closure1_slot14;
                tango = _closure1_slot23;
                zulu = {};
                zulu['action'] = entity;
                mike = entity.id;
                entity = undefined;
                entity = report.bind(entity)(tango, zulu, mike);
                return entity;
            };
            yankee = yankee.bind(foxtrot)(offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = null;
            foxtrot = yankee != record;
            if(!foxtrot) { _fun00004_ip = 531; continue _fun00003 }
 315:
            kilo = _closure1_slot15;
            backup = _closure1_slot4;
            foxtrot = {};
            romeo = romeo.classificationActionDescription;
            foxtrot['style'] = romeo;
            control = _closure1_slot15;
            update = _closure1_slot0;
            echo = _closure1_slot2;
            romeo = echo[sizing];
            romeo = update.bind(report)(romeo);
            result = romeo.Text;
            romeo = {};
            source = 'text-xs/normal';
            romeo['variant'] = source;
            sequence = [' ', '•'];
            romeo['children'] = sequence;
            result = control.bind(report)(result, romeo);
            romeo = new Array(2);
            romeo[0] = result;
            result = _closure1_slot14;
            sizing = echo[sizing];
            sizing = update.bind(report)(sizing);
            output = sizing.Text;
            sizing = {};
            sizing['variant'] = source;
            source = echo[vacuum];
            source = update.bind(report)(source);
            control = source.intl;
            source = control.format;
            echo = echo[vacuum];
            echo = update.bind(report)(echo);
            echo = echo.t;
            update = echo.TByIjY;
            echo = {};
            sequence = record.toLocaleDateString;
            vacuum = {};
            context = 'medium';
            vacuum['dateStyle'] = context;
            vacuum = sequence.bind(record)(config, vacuum);
            echo['expirationDate'] = vacuum;
            echo = source.bind(control)(update, echo);
            sizing['children'] = echo;
            sizing = result.bind(report)(output, sizing);
            romeo[1] = sizing;
            foxtrot['children'] = romeo;
            romeo = 'expiration';
            yankee = kilo.bind(report)(backup, foxtrot, romeo);
 531:
            offset[1] = yankee;
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 559:
            return entity;
        }
    };
    var _closure1_slot22 = entity;
    entity = function(argFoo) { // Original name: ClassificationActionsTakenRows
        entity = argFoo;
        oscar = entity.action;
        mike = _closure1_slot17;
        tango = undefined;
        mike = mike.bind(tango)();
        var _closure2_slot0 = mike;
        zulu = _closure1_slot14;
        mike = _closure1_slot16;
        entity = {};
        golf = oscar.descriptions;
        oscar = golf.map;
        report = function(argFoo, argBar) {
            report = _closure1_slot15;
            tango = _closure1_slot4;
            zulu = {};
            entity = _closure2_slot0;
            entity = entity.classificationActionDescription;
            zulu['style'] = entity;
            romeo = _closure1_slot15;
            golf = _closure1_slot0;
            offset = _closure1_slot2;
            oscar = 10;
            entity = offset[oscar];
            mike = undefined;
            entity = golf.bind(mike)(entity);
            yankee = entity.Text;
            entity = {};
            verify = 'text-xs/normal';
            entity['variant'] = verify;
            foxtrot = [' ', '•'];
            entity['children'] = foxtrot;
            yankee = romeo.bind(mike)(yankee, entity);
            entity = new Array(2);
            entity[0] = yankee;
            options = _closure1_slot14;
            oscar = offset[oscar];
            oscar = golf.bind(mike)(oscar);
            golf = oscar.Text;
            oscar = {};
            oscar['variant'] = verify;
            verify = argFoo;
            oscar['children'] = verify;
            oscar = options.bind(mike)(golf, oscar);
            entity[1] = oscar;
            zulu['children'] = entity;
            entity = argBar;
            entity = report.bind(mike)(tango, zulu, entity);
            return entity;
        };
        report = oscar.bind(golf)(report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot23 = entity;
    entity = function(argFoo) { // Original name: ClassificationGuidance
        entity = argFoo;
        result = entity.tosLink;
        output = entity.communityGuidelinesLink;
        yankee = entity.classificationTypeText;
        offset = entity.policyExplainerLink;
        oscar = entity.appealComponent;
        entity = _closure1_slot17;
        tango = undefined;
        report = entity.bind(tango)();
        zulu = _closure1_slot15;
        mike = _closure1_slot4;
        entity = {};
        report = report.sectionContainer;
        entity['style'] = report;
        verify = _closure1_slot14;
        backup = _closure1_slot0;
        echo = _closure1_slot2;
        report = 10;
        report = echo[report];
        report = backup.bind(tango)(report);
        options = report.Text;
        report = {'variant': 'eyebrow', 'color': 'text-muted'};
        foxtrot = 12;
        romeo = echo[foxtrot];
        romeo = backup.bind(tango)(romeo);
        sizing = romeo.intl;
        kilo = sizing.string;
        romeo = echo[foxtrot];
        romeo = backup.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.977ien;
        romeo = kilo.bind(sizing)(romeo);
        report['children'] = romeo;
        options = verify.bind(tango)(options, report);
        report = new Array(4);
        report[0] = options;
        romeo = _closure1_slot14;
        options = 15;
        options = echo[options];
        options = backup.bind(tango)(options);
        verify = options.TextWithIOSLinkWorkaround;
        options = {};
        kilo = 'text-sm/normal';
        options['variant'] = kilo;
        kilo = echo[foxtrot];
        kilo = backup.bind(tango)(kilo);
        sizing = kilo.intl;
        kilo = sizing.format;
        foxtrot = echo[foxtrot];
        foxtrot = backup.bind(tango)(foxtrot);
        foxtrot = foxtrot.t;
        backup = foxtrot.1Z/+aG;
        foxtrot = {};
        foxtrot['tosLink'] = result;
        foxtrot['communityGuidelinesLink'] = output;
        foxtrot = kilo.bind(sizing)(backup, foxtrot);
        options['children'] = foxtrot;
        options = romeo.bind(tango)(verify, options);
        report[1] = options;
        verify = _closure1_slot14;
        options = _closure1_slot25;
        golf = {};
        golf['classificationTypeText'] = yankee;
        golf['policyExplainerLink'] = offset;
        golf = verify.bind(tango)(options, golf);
        report[2] = golf;
        report[3] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot24 = entity;
    entity = function(argFoo) { // Original name: ClassificationPolicyCard
        entity = argFoo;
        echo = entity.classificationTypeText;
        entity = entity.policyExplainerLink;
        var _closure2_slot0 = entity;
        entity = _closure1_slot17;
        tango = undefined;
        foxtrot = entity.bind(tango)();
        zulu = _closure1_slot14;
        mike = _closure1_slot4;
        entity = {};
        golf = _closure1_slot15;
        result = _closure1_slot1;
        update = _closure1_slot2;
        report = 16;
        report = update[report];
        oscar = result.bind(tango)(report);
        report = {};
        options = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 17;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.openURL;
            mike = _closure2_slot0;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        report['onPress'] = options;
        verify = foxtrot.classificationPolicyCard;
        options = new Array(1);
        options[0] = verify;
        report['style'] = options;
        offset = _closure1_slot14;
        verify = _closure1_slot4;
        options = {};
        yankee = foxtrot.classificationPolicyCardIcon;
        options['style'] = yankee;
        kilo = _closure1_slot14;
        sizing = _closure1_slot0;
        yankee = 18;
        yankee = update[yankee];
        yankee = sizing.bind(tango)(yankee);
        backup = yankee.ShieldIcon;
        yankee = {};
        output = 'sm';
        yankee['size'] = output;
        output = 8;
        output = update[output];
        output = result.bind(tango)(output);
        output = output.colors;
        output = output.TEXT_LINK;
        yankee['color'] = output;
        yankee = kilo.bind(tango)(backup, yankee);
        options['children'] = yankee;
        verify = offset.bind(tango)(verify, options);
        options = new Array(2);
        options[0] = verify;
        yankee = _closure1_slot14;
        offset = _closure1_slot4;
        verify = {};
        foxtrot = foxtrot.classificationPolicyCardContent;
        verify['style'] = foxtrot;
        backup = _closure1_slot14;
        romeo = 10;
        romeo = update[romeo];
        romeo = sizing.bind(tango)(romeo);
        foxtrot = romeo.Text;
        romeo = {'variant': 'heading-md/semibold', 'color': 'header-primary'};
        kilo = 12;
        output = update[kilo];
        output = sizing.bind(tango)(output);
        result = output.intl;
        output = result.format;
        kilo = update[kilo];
        kilo = sizing.bind(tango)(kilo);
        kilo = kilo.t;
        sizing = kilo.zxUdpq;
        kilo = {};
        kilo['classificationDescription'] = echo;
        kilo = output.bind(result)(sizing, kilo);
        romeo['children'] = kilo;
        romeo = backup.bind(tango)(foxtrot, romeo);
        verify['children'] = romeo;
        verify = yankee.bind(tango)(offset, verify);
        options[1] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot25 = entity;
    entity = function(argFoo) { // Original name: ClassificationDetailFooter
        entity = argFoo;
        report = entity.onClose;
        entity = _closure1_slot17;
        tango = undefined;
        verify = entity.bind(tango)();
        zulu = _closure1_slot14;
        options = _closure1_slot1;
        offset = _closure1_slot2;
        golf = 19;
        entity = offset[golf];
        mike = options.bind(tango)(entity);
        entity = {};
        verify = verify.redirectButton;
        entity['style'] = verify;
        golf = offset[golf];
        golf = options.bind(tango)(golf);
        golf = golf.Sizes;
        golf = golf.MEDIUM;
        entity['size'] = golf;
        verify = _closure1_slot0;
        oscar = 12;
        golf = offset[oscar];
        golf = verify.bind(tango)(golf);
        options = golf.intl;
        golf = options.string;
        oscar = offset[oscar];
        oscar = verify.bind(tango)(oscar);
        oscar = oscar.t;
        oscar = oscar.elrEjI;
        oscar = golf.bind(options)(oscar);
        entity['text'] = oscar;
        entity['onPress'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot26 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    romeo = 1;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot4 = golf;
    golf = tango.Image;
    var _closure1_slot5 = golf;
    golf = tango.ActivityIndicator;
    var _closure1_slot6 = golf;
    tango = tango.ScrollView;
    var _closure1_slot7 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot8 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot9 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.SafetyHubAnalyticsActionSource;
    var _closure1_slot10 = golf;
    golf = tango.SafetyHubAnalyticsActions;
    var _closure1_slot11 = golf;
    tango = tango.SafetyHubLinks;
    var _closure1_slot12 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot13 = tango;
    tango = 6;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot14 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot15 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot16 = tango;
    tango = 7;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 8;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BASE_SECONDARY;
    verify['backgroundColor'] = foxtrot;
    tango['root'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'column', 'height': '100%'};
    foxtrot = 'flex';
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingTop'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingHorizontal'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_32;
    verify['gap'] = backup;
    tango['container'] = verify;
    verify = {'display': 'flex', 'textAlign': 'center', 'alignItems': 'center', 'flexDirection': 'column'};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['gap'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    verify['marginBottom'] = backup;
    tango['header'] = verify;
    verify = {'textAlign': 'center', 'maxWidth': 260};
    tango['headerText'] = verify;
    verify = {'height': 88, 'width': 98};
    tango['art'] = verify;
    verify = {};
    verify['display'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_8;
    verify['gap'] = foxtrot;
    tango['sectionContainer'] = verify;
    verify = 9;
    foxtrot = oscar[verify];
    backup = report.bind(entity)(foxtrot);
    foxtrot = backup.generateBoxShadowStyle;
    verify = oscar[verify];
    verify = report.bind(entity)(verify);
    verify = verify.FOUR_DP_ELEVATION_SHADOW_PARAMS;
    verify = foxtrot.bind(backup)(verify);
    tango['cardShadow'] = verify;
    verify = {'display': 'flex', 'paddingLeft': null, 'flexDirection': 'column'};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_4;
    verify['paddingLeft'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_8;
    verify['gap'] = foxtrot;
    tango['actionsTaken'] = verify;
    verify = {'display': 'flex', 'padding': null, 'flexDirection': 'column'};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_12;
    verify['padding'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.sm;
    verify['borderRadius'] = foxtrot;
    tango['policy'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'column'};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_32;
    verify['gap'] = foxtrot;
    tango['classificationDetailContainer'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center'};
    tango['letUsKnowContainer'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_12;
    verify['gap'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_12;
    verify['padding'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_4;
    verify['marginTop'] = foxtrot;
    verify['flexShrink'] = romeo;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BASE_TERTIARY;
    verify['backgroundColor'] = foxtrot;
    tango['classificationPolicyCard'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'backgroundColor': null, 'width': 32, 'height': 32};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_MOD_STRONG;
    verify['backgroundColor'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.xxl;
    verify['borderRadius'] = foxtrot;
    tango['classificationPolicyCardIcon'] = verify;
    verify = {};
    verify['flex'] = romeo;
    tango['classificationPolicyCardContent'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    verify['gap'] = romeo;
    tango['classificationActionsTakenRow'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    verify['gap'] = romeo;
    tango['classificationActionDescription'] = verify;
    verify = {'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'width': 24, 'height': 24};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.xxl;
    verify['borderRadius'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeo;
    tango['actionRowIconBackground'] = verify;
    verify = {'width': 12, 'height': 12};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderRadius'] = romeo;
    tango['actionRowIcon'] = verify;
    verify = {'borderRadius': null, 'width': 300, 'alignSelf': 'center'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.xs;
    verify['borderRadius'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_32;
    verify['marginTop'] = offset;
    tango['redirectButton'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot17 = tango;
    tango = function() { // Original name: AppealStatus
        tango = _closure1_slot14;
        options = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 10;
        entity = verify[entity];
        zulu = undefined;
        entity = options.bind(zulu)(entity);
        mike = entity.Text;
        entity = {'variant': 'text-md/normal', 'color': 'text-muted'};
        report = 12;
        oscar = verify[report];
        oscar = options.bind(zulu)(oscar);
        golf = oscar.intl;
        oscar = golf.string;
        report = verify[report];
        report = options.bind(zulu)(report);
        report = report.t;
        report = report.I2H0/P;
        report = oscar.bind(golf)(report);
        entity['children'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    var _closure1_slot18 = tango;
    tango = function(argFoo) { // Original name: LetUsKnow
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot14;
        oscar = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 10;
        entity = offset[entity];
        zulu = undefined;
        entity = oscar.bind(zulu)(entity);
        mike = entity.Text;
        entity = {'variant': 'text-sm/normal', 'color': 'text-muted'};
        report = 12;
        golf = offset[report];
        golf = oscar.bind(zulu)(golf);
        options = golf.intl;
        golf = options.format;
        report = offset[report];
        report = oscar.bind(zulu)(report);
        report = report.t;
        oscar = report.IFxUaW;
        report = {};
        verify = function(argFoo, argBar) { // Original name: letUsKnowHook
            report = _closure1_slot14;
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 10;
            entity = zulu[entity];
            tango = undefined;
            entity = mike.bind(tango)(entity);
            zulu = entity.Text;
            mike = {'onPress': null, 'variant': 'text-sm/normal', 'color': 'text-link'};
            entity = _closure2_slot0;
            entity = entity.onPressLetUsKnow;
            mike['onPress'] = entity;
            entity = argFoo;
            mike['children'] = entity;
            entity = argBar;
            entity = report.bind(tango)(zulu, mike, entity);
            return entity;
        };
        report['letUsKnowHook'] = verify;
        report = golf.bind(options)(oscar, report);
        entity['children'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    var _closure1_slot19 = tango;
    tango = function(argFoo) { // Original name: AppealFooter
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            verify = argFoo;
            entity = _closure1_slot17;
            tango = undefined;
            report = entity.bind(tango)();
            zulu = _closure1_slot14;
            mike = _closure1_slot4;
            entity = {};
            report = report.letUsKnowContainer;
            entity['style'] = report;
            report = verify.hasBeenAppealed;
            options = _closure1_slot14;
            if(report) { _fun00006_ip = 74; continue _fun00005 }
 49:
            golf = _closure1_slot19;
            report = {};
            verify = verify.onPressLetUsKnow;
            report['onPressLetUsKnow'] = verify;
            report = options.bind(tango)(golf, report);
            _fun00006_ip = 86; continue _fun00005;
 74:
            golf = _closure1_slot18;
            oscar = {};
            report = options.bind(tango)(golf, oscar);
 86:
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot20 = tango;
    tango = 30;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/safety_hub/native/ClassificationDetail.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ConnectedClassificationDetail
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            options = entity.classificationId;
            var _closure2_slot0 = options;
            report = entity.source;
            var _closure2_slot1 = report;
            result = entity.onClose;
            var _closure2_slot2 = result;
            tango = entity.onError;
            oscar = _closure1_slot0;
            golf = _closure1_slot2;
            entity = 20;
            entity = golf[entity];
            zulu = undefined;
            mike = oscar.bind(zulu)(entity);
            entity = mike.useSafetyHubClassification;
            entity = entity.bind(mike)(options);
            var _closure2_slot3 = entity;
            vacuum = entity.classification;
            var _closure2_slot4 = vacuum;
            mike = entity.isAppealEligible;
            var _closure2_slot5 = mike;
            mike = _closure1_slot17;
            backup = mike.bind(zulu)();
            mike = 14;
            mike = golf[mike];
            verify = oscar.bind(zulu)(mike);
            golf = verify.useStateFromStores;
            mike = _closure1_slot9;
            oscar = new Array(1);
            oscar[0] = mike;
            mike = function() {
                mike = _closure1_slot9;
                entity = mike.getAppealEligibility;
                entity = entity.bind(mike)();
                return entity;
            };
            foxtrot = golf.bind(verify)(oscar, mike);
            mike = null;
            golf = mike == vacuum;
            oscar = undefined;
            if(golf) { _fun00008_ip = 167; continue _fun00007 }
 161:
            oscar = vacuum.flagged_content;
 167:
            oscar = mike != oscar;
            if(!oscar) { _fun00008_ip = 200; continue _fun00007 }
 174:
            golf = mike == vacuum;
            verify = undefined;
            if(golf) { _fun00008_ip = 194; continue _fun00007 }
 183:
            golf = vacuum.flagged_content;
            verify = golf.length;
 194:
            golf = 0;
            oscar = verify > golf;
 200:
            var _closure2_slot6 = oscar;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            golf = 21;
            golf = offset[golf];
            verify = verify.bind(zulu)(golf);
            golf = verify.useSafetyHubAccountStanding;
            verify = golf.bind(verify)();
            var _closure2_slot7 = verify;
            offset = mike == vacuum;
            if(offset) { _fun00008_ip = 254; continue _fun00007 }
 245:
            golf = vacuum.is_coppa;
            offset = !golf;
 254:
            golf = !offset;
            if(offset) { _fun00008_ip = 302; continue _fun00007 }
 260:
            romeo = foxtrot.includes;
            kilo = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = 11;
            offset = sizing[offset];
            offset = kilo.bind(zulu)(offset);
            offset = offset.AppealEligibility;
            offset = offset.AGE_VERIFY_ELIGIBLE;
            golf = romeo.bind(foxtrot)(offset);
 302:
            var _closure2_slot8 = golf;
            golf = {};
            golf['accountStanding'] = verify;
            golf['classificationId'] = options;
            golf['classificationState'] = entity;
            golf['hasFlaggedContent'] = oscar;
            golf['source'] = report;
            var _closure2_slot9 = golf;
            oscar = _closure1_slot3;
            report = oscar.useRef;
            report = report.bind(oscar)(golf);
            var _closure2_slot10 = report;
            golf = _closure1_slot3;
            oscar = golf.useEffect;
            report = function() {
                mike = _closure2_slot10;
                entity = _closure2_slot9;
                mike['current'] = entity;
                entity = undefined;
                return entity;
            };
            report = oscar.bind(golf)(report);
            options = _closure1_slot3;
            golf = options.useEffect;
            oscar = new Array(1);
            oscar[0] = vacuum;
            report = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    mike = _closure2_slot4;
                    verify = null;
                    if(!(verify != mike)) { _fun00010_ip = 197; continue _fun00009 }
 16:
                    entity = _closure2_slot10;
                    entity = entity.current;
                    offset = entity.accountStanding;
                    romeo = entity.classificationId;
                    report = entity.classificationState;
                    oscar = entity.hasFlaggedContent;
                    golf = entity.source;
                    mike = _closure1_slot1;
                    zulu = _closure1_slot2;
                    entity = 22;
                    entity = zulu[entity];
                    yankee = undefined;
                    tango = mike.bind(yankee)(entity);
                    zulu = tango.track;
                    entity = _closure1_slot13;
                    mike = entity.SAFETY_HUB_ACTION;
                    entity = {};
                    foxtrot = _closure1_slot11;
                    foxtrot = foxtrot.ViewViolationDetail;
                    entity['action'] = foxtrot;
                    offset = offset.state;
                    entity['account_standing'] = offset;
                    offset = global;
                    offset = offset.Number;
                    yankee = offset.bind(yankee)(romeo);
                    offset = new Array(1);
                    offset[0] = yankee;
                    entity['classification_ids'] = offset;
                    if(!(verify == golf)) { _fun00010_ip = 160; continue _fun00009 }
 150:
                    options = _closure1_slot10;
                    golf = options.SystemDM;
 160:
                    entity['source'] = golf;
                    entity['is_violative_content_shown'] = oscar;
                    oscar = report.isDsaEligible;
                    entity['is_dsa_eligible'] = oscar;
                    report = report.violationType;
                    entity['violation_type'] = report;
                    entity = zulu.bind(tango)(mike, entity);
 197:
                    entity = undefined;
                    return entity;
                }
            };
            report = golf.bind(options)(report, oscar);
            if(!(mike == vacuum)) { _fun00008_ip = 454; continue _fun00007 }
 409:
            report = entity.classificationRequestState;
            oscar = _closure1_slot0;
            golf = _closure1_slot2;
            entity = 11;
            entity = golf[entity];
            entity = oscar.bind(zulu)(entity);
            entity = entity.ClassificationRequestState;
            entity = entity.FAILED;
            if(!(report !== entity)) { _fun00008_ip = 932; continue _fun00007 }
 454:
            oscar = _closure1_slot14;
            report = _closure1_slot7;
            entity = {};
            golf = backup.root;
            entity['style'] = golf;
            verify = _closure1_slot14;
            options = _closure1_slot0;
            offset = _closure1_slot2;
            golf = 23;
            golf = offset[golf];
            golf = options.bind(zulu)(golf);
            options = golf.SafeAreaPaddingView;
            golf = {};
            offset = backup.container;
            golf['style'] = offset;
            offset = true;
            golf['bottom'] = offset;
            if(!(mike != vacuum)) { _fun00008_ip = 886; continue _fun00007 }
 528:
            foxtrot = _closure1_slot15;
            romeo = _closure1_slot4;
            offset = {};
            kilo = backup.classificationDetailContainer;
            backup = new Array(1);
            backup[0] = kilo;
            offset['style'] = backup;
            sizing = _closure1_slot14;
            kilo = _closure1_slot21;
            backup = {};
            output = vacuum.description;
            backup['classificationTypeText'] = output;
            output = vacuum.guild_metadata;
            backup['guildMetadata'] = output;
            kilo = sizing.bind(zulu)(kilo, backup);
            backup = new Array(5);
            backup[0] = kilo;
            output = _closure1_slot14;
            sizing = _closure1_slot1;
            echo = _closure1_slot2;
            kilo = 24;
            kilo = echo[kilo];
            sizing = sizing.bind(zulu)(kilo);
            kilo = {};
            echo = vacuum.flagged_content;
            if(!(mike == echo)) { _fun00008_ip = 641; continue _fun00007 }
 637:
            echo = new Array(0);
 641:
            kilo['flaggedContent'] = echo;
            kilo = output.bind(zulu)(sizing, kilo);
            backup[1] = kilo;
            output = _closure1_slot14;
            sizing = _closure1_slot22;
            kilo = {};
            echo = vacuum.actions;
            kilo['actions'] = echo;
            update = _closure1_slot0;
            source = _closure1_slot2;
            echo = 25;
            echo = source[echo];
            update = update.bind(zulu)(echo);
            echo = update.getClassificationExpiration;
            echo = echo.bind(update)(vacuum);
            kilo['classificationExpiration'] = echo;
            kilo = output.bind(zulu)(sizing, kilo);
            backup[2] = kilo;
            output = _closure1_slot14;
            sizing = _closure1_slot24;
            kilo = {};
            echo = _closure1_slot12;
            update = echo.APPEALS_LINK;
            kilo['appealLink'] = update;
            update = echo.COMMUNITY_GUIDELINES;
            kilo['communityGuidelinesLink'] = update;
            echo = echo.TOS_LINK;
            kilo['tosLink'] = echo;
            echo = vacuum.description;
            kilo['classificationTypeText'] = echo;
            echo = vacuum.explainer_link;
            kilo['policyExplainerLink'] = echo;
            source = _closure1_slot14;
            update = _closure1_slot20;
            echo = {};
            vacuum = vacuum.appeal_status;
            vacuum = mike != vacuum;
            echo['hasBeenAppealed'] = vacuum;
            control = function() { // Original name: onPressLetUsKnow
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    tango = _closure1_slot1;
                    mike = _closure1_slot2;
                    entity = 22;
                    mike = mike[entity];
                    entity = undefined;
                    golf = tango.bind(entity)(mike);
                    oscar = golf.track;
                    mike = _closure1_slot13;
                    report = mike.SAFETY_HUB_ACTION;
                    tango = {};
                    mike = _closure1_slot11;
                    mike = mike.ClickLetUsKnow;
                    tango['action'] = mike;
                    options = _closure2_slot7;
                    options = options.state;
                    tango['account_standing'] = options;
                    options = global;
                    verify = options.Number;
                    options = _closure2_slot0;
                    verify = verify.bind(entity)(options);
                    options = new Array(1);
                    options[0] = verify;
                    tango['classification_ids'] = options;
                    verify = _closure2_slot1;
                    options = null;
                    if(!(options == verify)) { _fun00012_ip = 125; continue _fun00011 }
 113:
                    options = _closure1_slot10;
                    options = options.SystemDM;
                    _fun00012_ip = 129; continue _fun00011;
 125:
                    options = _closure2_slot1;
 129:
                    tango['source'] = options;
                    options = _closure2_slot6;
                    tango['is_violative_content_shown'] = options;
                    options = _closure2_slot3;
                    verify = options.isDsaEligible;
                    tango['is_dsa_eligible'] = verify;
                    options = options.violationType;
                    tango['violation_type'] = options;
                    tango = oscar.bind(golf)(report, tango);
                    tango = _closure2_slot8;
                    if(tango) { _fun00012_ip = 330; continue _fun00011 }
 184:
                    tango = _closure2_slot5;
                    report = _closure1_slot1;
                    oscar = _closure1_slot2;
                    if(tango) { _fun00012_ip = 237; continue _fun00011 }
 199:
                    tango = 17;
                    tango = oscar[tango];
                    options = report.bind(entity)(tango);
                    golf = options.openURL;
                    tango = _closure1_slot12;
                    tango = tango.APPEALS_LINK;
                    tango = golf.bind(options)(tango);
                    _fun00012_ip = 365; continue _fun00011;
 237:
                    tango = 27;
                    tango = oscar[tango];
                    options = report.bind(entity)(tango);
                    golf = options.increment;
                    tango = {};
                    offset = _closure1_slot0;
                    verify = 28;
                    verify = oscar[verify];
                    verify = offset.bind(entity)(verify);
                    verify = verify.MetricEvents;
                    verify = verify.APPEAL_INGESTION_VIEW;
                    tango['name'] = verify;
                    tango = golf.bind(options)(tango);
                    tango = 29;
                    tango = oscar[tango];
                    oscar = report.bind(entity)(tango);
                    report = oscar.open;
                    tango = {};
                    golf = _closure2_slot0;
                    tango['classificationId'] = golf;
                    tango = report.bind(oscar)(tango);
                    _fun00012_ip = 365; continue _fun00011;
 330:
                    tango = _closure1_slot1;
                    report = _closure1_slot2;
                    zulu = 26;
                    zulu = report[zulu];
                    tango = tango.bind(entity)(zulu);
                    zulu = tango.open;
                    mike = _closure2_slot2;
                    mike = zulu.bind(tango)(mike);
 365:
                    return entity;
                }
            };
            echo['onPressLetUsKnow'] = control;
            echo = source.bind(zulu)(update, echo);
            kilo['appealComponent'] = echo;
            kilo = output.bind(zulu)(sizing, kilo);
            backup[3] = kilo;
            output = _closure1_slot14;
            sizing = _closure1_slot26;
            kilo = {};
            kilo['onClose'] = result;
            kilo = output.bind(zulu)(sizing, kilo);
            backup[4] = kilo;
            offset['children'] = backup;
            offset = foxtrot.bind(zulu)(romeo, offset);
            _fun00008_ip = 910; continue _fun00007;
 886:
            foxtrot = _closure1_slot14;
            romeo = _closure1_slot6;
            yankee = {};
            backup = 'large';
            yankee['size'] = backup;
            offset = foxtrot.bind(zulu)(romeo, yankee);
 910:
            golf['children'] = offset;
            golf = verify.bind(zulu)(options, golf);
            entity['children'] = golf;
            entity = oscar.bind(zulu)(report, entity);
            _fun00008_ip = 938; continue _fun00007;
 932:
            zulu = tango.bind(zulu)();
            entity = null;
 938:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();