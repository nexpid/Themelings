// app/modules/safety_hub/native/AppealIngestionPolicySummary.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot2 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot3 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 8;
    verify['marginBottom'] = offset;
    tango['sectionTitle'] = verify;
    verify = {};
    offset = 16;
    verify['marginBottom'] = offset;
    tango['policy'] = verify;
    verify = {};
    offset = 4;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.HEADER_PRIMARY;
    verify['color'] = romeo;
    tango['borderColor'] = verify;
    verify = {'marginTop': 8, 'justifyContent': 'flex-start', 'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 18};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.sm;
    verify['borderRadius'] = offset;
    tango['userContainer'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot5 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/safety_hub/native/AppealIngestionPolicySummary.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: AppealIngestionPolicySummary
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            oscar = entity.classification;
            entity = _closure1_slot5;
            tango = undefined;
            romeo = entity.bind(tango)();
            mike = _closure1_slot0;
            zulu = _closure1_slot1;
            entity = 5;
            entity = zulu[entity];
            zulu = mike.bind(tango)(entity);
            mike = zulu.capitalizeText;
            entity = null;
            golf = entity == oscar;
            entity = undefined;
            if(golf) { _fun00002_ip = 64; continue _fun00001 }
 59:
            entity = oscar.description;
 64:
            offset = mike.bind(zulu)(entity);
            verify = _closure1_slot0;
            yankee = _closure1_slot1;
            entity = 6;
            entity = yankee[entity];
            oscar = verify.bind(tango)(entity);
            zulu = oscar.hexWithOpacity;
            entity = romeo.borderColor;
            mike = entity.color;
            entity = 0.08;
            backup = zulu.bind(oscar)(mike, entity);
            zulu = _closure1_slot4;
            mike = _closure1_slot2;
            entity = {};
            oscar = romeo.policy;
            entity['style'] = oscar;
            golf = _closure1_slot3;
            options = 7;
            report = yankee[options];
            report = verify.bind(tango)(report);
            oscar = report.Text;
            report = {};
            foxtrot = romeo.sectionTitle;
            report['style'] = foxtrot;
            foxtrot = 'text-sm/bold';
            report['variant'] = foxtrot;
            foxtrot = 8;
            kilo = yankee[foxtrot];
            kilo = verify.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            foxtrot = yankee[foxtrot];
            foxtrot = verify.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.xsdcxs;
            foxtrot = kilo.bind(sizing)(foxtrot);
            report['children'] = foxtrot;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            foxtrot = romeo.userContainer;
            romeo = new Array(2);
            romeo[0] = foxtrot;
            foxtrot = {};
            foxtrot['borderColor'] = backup;
            romeo[1] = foxtrot;
            oscar['style'] = romeo;
            options = yankee[options];
            options = verify.bind(tango)(options);
            verify = options.Text;
            options = {};
            yankee = 'text-md/semibold';
            options['variant'] = yankee;
            options['children'] = offset;
            options = golf.bind(tango)(verify, options);
            oscar['children'] = options;
            oscar = golf.bind(tango)(mike, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();