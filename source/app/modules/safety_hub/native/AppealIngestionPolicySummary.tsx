// app/modules/safety_hub/native/AppealIngestionPolicySummary.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot2 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot3 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 8;
    verify['marginBottom'] = offset;
    tangon['sectionTitle'] = verify;
    verify = {};
    offset = 16;
    verify['marginBottom'] = offset;
    tangon['policy'] = verify;
    verify = {};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.HEADER_PRIMARY;
    verify['color'] = romeon;
    tangon['borderColor'] = verify;
    verify = {'marginTop': 8, 'justifyContent': 'flex-start', 'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 18};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.sm;
    verify['borderRadius'] = offset;
    tangon['userContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/safety_hub/native/AppealIngestionPolicySummary.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AppealIngestionPolicySummary
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            oscard = entity.classification;
            entity = _closure1_slot5;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            michal = _closure1_slot0;
            zuuluu = _closure1_slot1;
            entity = 5;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.capitalizeText;
            entity = null;
            golfie = entity == oscard;
            entity = undefined;
            if(golfie) { _fun00002_ip = 64; continue _fun00001 }
 59:
            entity = oscard.description;
 64:
            offset = michal.bind(zuuluu)(entity);
            verify = _closure1_slot0;
            yankee = _closure1_slot1;
            entity = 6;
            entity = yankee[entity];
            oscard = verify.bind(tangon)(entity);
            zuuluu = oscard.hexWithOpacity;
            entity = romeon.borderColor;
            michal = entity.color;
            entity = 0.08;
            backup = zuuluu.bind(oscard)(michal, entity);
            zuuluu = _closure1_slot4;
            michal = _closure1_slot2;
            entity = {};
            oscard = romeon.policy;
            entity['style'] = oscard;
            golfie = _closure1_slot3;
            option = 7;
            report = yankee[option];
            report = verify.bind(tangon)(report);
            oscard = report.Text;
            report = {};
            foxtra = romeon.sectionTitle;
            report['style'] = foxtra;
            foxtra = 'text-sm/bold';
            report['variant'] = foxtra;
            foxtra = 8;
            kiloes = yankee[foxtra];
            kiloes = verify.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            foxtra = yankee[foxtra];
            foxtra = verify.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.xsdcxs;
            foxtra = kiloes.bind(sizing)(foxtra);
            report['children'] = foxtra;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            foxtra = romeon.userContainer;
            romeon = new Array(2);
            romeon[0] = foxtra;
            foxtra = {};
            foxtra['borderColor'] = backup;
            romeon[1] = foxtra;
            oscard['style'] = romeon;
            option = yankee[option];
            option = verify.bind(tangon)(option);
            verify = option.Text;
            option = {};
            yankee = 'text-md/semibold';
            option['variant'] = yankee;
            option['children'] = offset;
            option = golfie.bind(tangon)(verify, option);
            oscard['children'] = option;
            oscard = golfie.bind(tangon)(michal, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();