// app/modules/safety_hub/native/AppealIngestionCollectSignal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AppealIngestionSignal;
    var _closure1_slot4 = golfie;
    tangon = tangon.AppealIngestionSignalOrder;
    var _closure1_slot5 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = 16;
    offset = {'flex': 1, 'paddingHorizontal': 16};
    golfie['container'] = offset;
    offset = {};
    offset['marginBottom'] = tangon;
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_PRIMARY;
    offset['backgroundColor'] = foxtra;
    golfie['form'] = offset;
    offset = {};
    offset['paddingVertical'] = tangon;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_TERTIARY;
    offset['backgroundColor'] = yankee;
    golfie['formRow'] = offset;
    offset = {};
    yankee = 8;
    offset['marginBottom'] = yankee;
    golfie['formDivider'] = offset;
    offset = {};
    offset['gap'] = yankee;
    golfie['formSection'] = offset;
    offset = {};
    yankee = 24;
    offset['marginTop'] = yankee;
    golfie['disclaimer'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/safety_hub/native/AppealIngestionCollectSignal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AppealIngestionCollectSignal
        entity = argFoo;
        entity = entity.isDsaEligible;
        var _closure2_slot0 = entity;
        entity = _closure1_slot8;
        tangon = undefined;
        foxtra = entity.bind(tangon)();
        var _closure2_slot2 = foxtra;
        sizing = _closure1_slot0;
        echoed = _closure1_slot2;
        entity = 6;
        entity = echoed[entity];
        michal = sizing.bind(tangon)(entity);
        entity = michal.useSafetyHubAppealSignal;
        entity = entity.bind(michal)();
        var _closure2_slot3 = entity;
        kiloes = 11;
        entity = echoed[kiloes];
        entity = sizing.bind(tangon)(entity);
        zuuluu = entity.intl;
        michal = zuuluu.string;
        entity = echoed[kiloes];
        entity = sizing.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.C5q+pa;
        verify = michal.bind(zuuluu)(entity);
        entity = echoed[kiloes];
        entity = sizing.bind(tangon)(entity);
        zuuluu = entity.intl;
        michal = zuuluu.string;
        entity = echoed[kiloes];
        entity = sizing.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.VEcRh4;
        golfie = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot7;
        report = 12;
        entity = echoed[report];
        entity = sizing.bind(tangon)(entity);
        michal = entity.AppealIngestionModalScreen;
        entity = {};
        option = _closure1_slot6;
        report = echoed[report];
        report = sizing.bind(tangon)(report);
        oscard = report.AppealIngestionModalHeader;
        report = {};
        report['headerText'] = verify;
        report['subHeaderText'] = golfie;
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        golfie = _closure1_slot3;
        oscard = {};
        verify = foxtra.container;
        oscard['style'] = verify;
        yankee = 13;
        verify = echoed[yankee];
        verify = sizing.bind(tangon)(verify);
        offset = verify.Form;
        verify = {};
        backup = foxtra.form;
        verify['style'] = backup;
        backup = new Array(0);
        var _closure2_slot1 = backup;
        result = _closure1_slot5;
        output = result.forEach;
        romeon = function(argFoo, argBar) {
            offset = argFoo;
            var _closure3_slot0 = offset;
            tangon = _closure2_slot1;
            zuuluu = tangon.push;
            golfie = _closure1_slot6;
            verify = _closure1_slot0;
            yankee = _closure1_slot2;
            michal = 13;
            report = yankee[michal];
            entity = undefined;
            report = verify.bind(entity)(report);
            oscard = report.FormRow;
            report = {};
            foxtra = _closure2_slot2;
            foxtra = foxtra.formRow;
            report['style'] = foxtra;
            foxtra = yankee[michal];
            foxtra = verify.bind(entity)(foxtra);
            foxtra = foxtra.FormRow;
            backup = foxtra.Label;
            foxtra = {};
            kiloes = 14;
            kiloes = yankee[kiloes];
            sizing = verify.bind(entity)(kiloes);
            kiloes = sizing.getAppealSignalDisplayText;
            kiloes = kiloes.bind(sizing)(offset);
            foxtra['text'] = kiloes;
            foxtra = golfie.bind(entity)(backup, foxtra);
            report['label'] = foxtra;
            romeon = function() { // Original name: onPress
                zuuluu = _closure3_slot0;
                michal = function(argFoo) {
                    _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                        oscard = argFoo;
                        report = _closure1_slot1;
                        zuuluu = _closure1_slot2;
                        entity = 7;
                        zuuluu = zuuluu[entity];
                        entity = undefined;
                        golfie = report.bind(entity)(zuuluu);
                        report = golfie.dispatch;
                        zuuluu = {};
                        option = 'SAFETY_HUB_APPEAL_SIGNAL_SELECT';
                        zuuluu['type'] = option;
                        zuuluu['signal'] = oscard;
                        zuuluu = report.bind(golfie)(zuuluu);
                        zuuluu = _closure2_slot0;
                        if(!zuuluu) { _fun00002_ip = 81; continue _fun00001 }
 67:
                        report = _closure1_slot4;
                        report = report.SOMETHING_ELSE;
                        zuuluu = oscard === report;
 81:
                        if(!zuuluu) { _fun00002_ip = 183; continue _fun00001 }
 84:
                        oscard = _closure1_slot1;
                        zuuluu = _closure1_slot2;
                        report = 8;
                        report = zuuluu[report];
                        oscard = oscard.bind(entity)(report);
                        report = oscard.openLazy;
                        golfie = _closure1_slot0;
                        tangon = 10;
                        tangon = zuuluu[tangon];
                        golfie = golfie.bind(entity)(tangon);
                        tangon = 9;
                        tangon = zuuluu[tangon];
                        zuuluu = zuuluu.paths;
                        tangon = golfie.bind(entity)(tangon, zuuluu);
                        zuuluu = {};
                        golfie = function(argFoo) { // Original name: onSave
                            zuuluu = _closure1_slot1;
                            tangon = _closure1_slot2;
                            entity = 7;
                            michal = tangon[entity];
                            entity = undefined;
                            oscard = zuuluu.bind(entity)(michal);
                            report = oscard.dispatch;
                            michal = {};
                            golfie = 'SAFETY_HUB_APPEAL_SIGNAL_CUSTOM_INPUT_CHANGE';
                            michal['type'] = golfie;
                            golfie = argFoo;
                            michal['userInput'] = golfie;
                            michal = report.bind(oscard)(michal);
                            michal = 8;
                            michal = tangon[michal];
                            tangon = zuuluu.bind(entity)(michal);
                            zuuluu = tangon.hideActionSheet;
                            michal = 'AppealIngestionFreeTextAppealReasonActionSheet';
                            michal = zuuluu.bind(tangon)(michal);
                            return entity;
                        };
                        zuuluu['onSave'] = golfie;
                        michal = function() { // Original name: onClose
                            zuuluu = _closure1_slot1;
                            michal = _closure1_slot2;
                            entity = 8;
                            michal = michal[entity];
                            entity = undefined;
                            zuuluu = zuuluu.bind(entity)(michal);
                            michal = zuuluu.hideActionSheet;
                            entity = 'AppealIngestionFreeTextAppealReasonActionSheet';
                            entity = michal.bind(zuuluu)(entity);
                            return entity;
                        };
                        zuuluu['onClose'] = michal;
                        michal = 'AppealIngestionFreeTextAppealReasonActionSheet';
                        michal = report.bind(oscard)(tangon, michal, zuuluu);
 183:
                        return entity;
                    }
                };
                entity = undefined;
                michal = michal.bind(entity)(zuuluu);
                return entity;
            };
            report['onPress'] = romeon;
            michal = yankee[michal];
            michal = verify.bind(entity)(michal);
            michal = michal.FormRow;
            verify = michal.Radio;
            michal = {};
            option = _closure2_slot3;
            option = offset === option;
            michal['selected'] = option;
            michal = golfie.bind(entity)(verify, michal);
            report['trailing'] = michal;
            michal = 'radio';
            report['accessibilityRole'] = michal;
            michal = {};
            michal['selected'] = option;
            report['accessibilityState'] = michal;
            michal = global;
            michal = michal.HermesInternal;
            verify = michal.concat;
            option = 'formrow-';
            michal = argBar;
            michal = verify.bind(option)(michal);
            michal = golfie.bind(entity)(oscard, report, michal);
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        romeon = output.bind(result)(romeon);
        yankee = echoed[yankee];
        yankee = sizing.bind(tangon)(yankee);
        romeon = yankee.FormSection;
        yankee = {};
        output = foxtra.formSection;
        yankee['sectionBodyStyle'] = output;
        output = 'radiogroup';
        yankee['accessibilityRole'] = output;
        yankee['children'] = backup;
        romeon = option.bind(tangon)(romeon, yankee);
        yankee = new Array(2);
        yankee[0] = romeon;
        romeon = {};
        foxtra = foxtra.disclaimer;
        romeon['style'] = foxtra;
        foxtra = 15;
        foxtra = echoed[foxtra];
        foxtra = sizing.bind(tangon)(foxtra);
        backup = foxtra.TextWithIOSLinkWorkaround;
        foxtra = {};
        output = 'text-sm/normal';
        foxtra['variant'] = output;
        output = echoed[kiloes];
        output = sizing.bind(tangon)(output);
        result = output.intl;
        output = result.format;
        kiloes = echoed[kiloes];
        kiloes = sizing.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        sizing = kiloes.8k9GCQ;
        kiloes = {};
        kiloes = output.bind(result)(sizing, kiloes);
        foxtra['children'] = kiloes;
        foxtra = option.bind(tangon)(backup, foxtra);
        romeon['children'] = foxtra;
        romeon = option.bind(tangon)(golfie, romeon);
        yankee[1] = romeon;
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();