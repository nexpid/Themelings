// app/modules/safety_hub/native/AppealIngestionCollectSignal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.AppealIngestionSignal;
    var _closure1_slot4 = golf;
    tango = tango.AppealIngestionSignalOrder;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    golf = {};
    tango = 16;
    offset = {'flex': 1, 'paddingHorizontal': 16};
    golf['container'] = offset;
    offset = {};
    offset['marginBottom'] = tango;
    yankee = 5;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BASE_PRIMARY;
    offset['backgroundColor'] = foxtrot;
    golf['form'] = offset;
    offset = {};
    offset['paddingVertical'] = tango;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_TERTIARY;
    offset['backgroundColor'] = yankee;
    golf['formRow'] = offset;
    offset = {};
    yankee = 8;
    offset['marginBottom'] = yankee;
    golf['formDivider'] = offset;
    offset = {};
    offset['gap'] = yankee;
    golf['formSection'] = offset;
    offset = {};
    yankee = 24;
    offset['marginTop'] = yankee;
    golf['disclaimer'] = offset;
    golf = options.bind(verify)(golf);
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/safety_hub/native/AppealIngestionCollectSignal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: AppealIngestionCollectSignal
        entity = argFoo;
        entity = entity.isDsaEligible;
        var _closure2_slot0 = entity;
        entity = _closure1_slot8;
        tango = undefined;
        foxtrot = entity.bind(tango)();
        var _closure2_slot2 = foxtrot;
        sizing = _closure1_slot0;
        echo = _closure1_slot2;
        entity = 6;
        entity = echo[entity];
        mike = sizing.bind(tango)(entity);
        entity = mike.useSafetyHubAppealSignal;
        entity = entity.bind(mike)();
        var _closure2_slot3 = entity;
        kilo = 11;
        entity = echo[kilo];
        entity = sizing.bind(tango)(entity);
        zulu = entity.intl;
        mike = zulu.string;
        entity = echo[kilo];
        entity = sizing.bind(tango)(entity);
        entity = entity.t;
        entity = entity.C5q+pa;
        verify = mike.bind(zulu)(entity);
        entity = echo[kilo];
        entity = sizing.bind(tango)(entity);
        zulu = entity.intl;
        mike = zulu.string;
        entity = echo[kilo];
        entity = sizing.bind(tango)(entity);
        entity = entity.t;
        entity = entity.VEcRh4;
        golf = mike.bind(zulu)(entity);
        zulu = _closure1_slot7;
        report = 12;
        entity = echo[report];
        entity = sizing.bind(tango)(entity);
        mike = entity.AppealIngestionModalScreen;
        entity = {};
        options = _closure1_slot6;
        report = echo[report];
        report = sizing.bind(tango)(report);
        oscar = report.AppealIngestionModalHeader;
        report = {};
        report['headerText'] = verify;
        report['subHeaderText'] = golf;
        oscar = options.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        golf = _closure1_slot3;
        oscar = {};
        verify = foxtrot.container;
        oscar['style'] = verify;
        yankee = 13;
        verify = echo[yankee];
        verify = sizing.bind(tango)(verify);
        offset = verify.Form;
        verify = {};
        backup = foxtrot.form;
        verify['style'] = backup;
        backup = new Array(0);
        var _closure2_slot1 = backup;
        result = _closure1_slot5;
        output = result.forEach;
        romeo = function(argFoo, argBar) {
            offset = argFoo;
            var _closure3_slot0 = offset;
            tango = _closure2_slot1;
            zulu = tango.push;
            golf = _closure1_slot6;
            verify = _closure1_slot0;
            yankee = _closure1_slot2;
            mike = 13;
            report = yankee[mike];
            entity = undefined;
            report = verify.bind(entity)(report);
            oscar = report.FormRow;
            report = {};
            foxtrot = _closure2_slot2;
            foxtrot = foxtrot.formRow;
            report['style'] = foxtrot;
            foxtrot = yankee[mike];
            foxtrot = verify.bind(entity)(foxtrot);
            foxtrot = foxtrot.FormRow;
            backup = foxtrot.Label;
            foxtrot = {};
            kilo = 14;
            kilo = yankee[kilo];
            sizing = verify.bind(entity)(kilo);
            kilo = sizing.getAppealSignalDisplayText;
            kilo = kilo.bind(sizing)(offset);
            foxtrot['text'] = kilo;
            foxtrot = golf.bind(entity)(backup, foxtrot);
            report['label'] = foxtrot;
            romeo = function() { // Original name: onPress
                zulu = _closure3_slot0;
                mike = function(argFoo) {
                    _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                        oscar = argFoo;
                        report = _closure1_slot1;
                        zulu = _closure1_slot2;
                        entity = 7;
                        zulu = zulu[entity];
                        entity = undefined;
                        golf = report.bind(entity)(zulu);
                        report = golf.dispatch;
                        zulu = {};
                        options = 'SAFETY_HUB_APPEAL_SIGNAL_SELECT';
                        zulu['type'] = options;
                        zulu['signal'] = oscar;
                        zulu = report.bind(golf)(zulu);
                        zulu = _closure2_slot0;
                        if(!zulu) { _fun00002_ip = 81; continue _fun00001 }
 67:
                        report = _closure1_slot4;
                        report = report.SOMETHING_ELSE;
                        zulu = oscar === report;
 81:
                        if(!zulu) { _fun00002_ip = 183; continue _fun00001 }
 84:
                        oscar = _closure1_slot1;
                        zulu = _closure1_slot2;
                        report = 8;
                        report = zulu[report];
                        oscar = oscar.bind(entity)(report);
                        report = oscar.openLazy;
                        golf = _closure1_slot0;
                        tango = 10;
                        tango = zulu[tango];
                        golf = golf.bind(entity)(tango);
                        tango = 9;
                        tango = zulu[tango];
                        zulu = zulu.paths;
                        tango = golf.bind(entity)(tango, zulu);
                        zulu = {};
                        golf = function(argFoo) { // Original name: onSave
                            zulu = _closure1_slot1;
                            tango = _closure1_slot2;
                            entity = 7;
                            mike = tango[entity];
                            entity = undefined;
                            oscar = zulu.bind(entity)(mike);
                            report = oscar.dispatch;
                            mike = {};
                            golf = 'SAFETY_HUB_APPEAL_SIGNAL_CUSTOM_INPUT_CHANGE';
                            mike['type'] = golf;
                            golf = argFoo;
                            mike['userInput'] = golf;
                            mike = report.bind(oscar)(mike);
                            mike = 8;
                            mike = tango[mike];
                            tango = zulu.bind(entity)(mike);
                            zulu = tango.hideActionSheet;
                            mike = 'AppealIngestionFreeTextAppealReasonActionSheet';
                            mike = zulu.bind(tango)(mike);
                            return entity;
                        };
                        zulu['onSave'] = golf;
                        mike = function() { // Original name: onClose
                            zulu = _closure1_slot1;
                            mike = _closure1_slot2;
                            entity = 8;
                            mike = mike[entity];
                            entity = undefined;
                            zulu = zulu.bind(entity)(mike);
                            mike = zulu.hideActionSheet;
                            entity = 'AppealIngestionFreeTextAppealReasonActionSheet';
                            entity = mike.bind(zulu)(entity);
                            return entity;
                        };
                        zulu['onClose'] = mike;
                        mike = 'AppealIngestionFreeTextAppealReasonActionSheet';
                        mike = report.bind(oscar)(tango, mike, zulu);
 183:
                        return entity;
                    }
                };
                entity = undefined;
                mike = mike.bind(entity)(zulu);
                return entity;
            };
            report['onPress'] = romeo;
            mike = yankee[mike];
            mike = verify.bind(entity)(mike);
            mike = mike.FormRow;
            verify = mike.Radio;
            mike = {};
            options = _closure2_slot3;
            options = offset === options;
            mike['selected'] = options;
            mike = golf.bind(entity)(verify, mike);
            report['trailing'] = mike;
            mike = 'radio';
            report['accessibilityRole'] = mike;
            mike = {};
            mike['selected'] = options;
            report['accessibilityState'] = mike;
            mike = global;
            mike = mike.HermesInternal;
            verify = mike.concat;
            options = 'formrow-';
            mike = argBar;
            mike = verify.bind(options)(mike);
            mike = golf.bind(entity)(oscar, report, mike);
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        romeo = output.bind(result)(romeo);
        yankee = echo[yankee];
        yankee = sizing.bind(tango)(yankee);
        romeo = yankee.FormSection;
        yankee = {};
        output = foxtrot.formSection;
        yankee['sectionBodyStyle'] = output;
        output = 'radiogroup';
        yankee['accessibilityRole'] = output;
        yankee['children'] = backup;
        romeo = options.bind(tango)(romeo, yankee);
        yankee = new Array(2);
        yankee[0] = romeo;
        romeo = {};
        foxtrot = foxtrot.disclaimer;
        romeo['style'] = foxtrot;
        foxtrot = 15;
        foxtrot = echo[foxtrot];
        foxtrot = sizing.bind(tango)(foxtrot);
        backup = foxtrot.TextWithIOSLinkWorkaround;
        foxtrot = {};
        output = 'text-sm/normal';
        foxtrot['variant'] = output;
        output = echo[kilo];
        output = sizing.bind(tango)(output);
        result = output.intl;
        output = result.format;
        kilo = echo[kilo];
        kilo = sizing.bind(tango)(kilo);
        kilo = kilo.t;
        sizing = kilo.8k9GCQ;
        kilo = {};
        kilo = output.bind(result)(sizing, kilo);
        foxtrot['children'] = kilo;
        foxtrot = options.bind(tango)(backup, foxtrot);
        romeo['children'] = foxtrot;
        romeo = options.bind(tango)(golf, romeo);
        yankee[1] = romeo;
        verify['children'] = yankee;
        verify = zulu.bind(tango)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();