// app/modules/safety_hub/native/AppealIngestionConfirmSubmission.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.EMPTY_STRING_SNOWFLAKE_ID;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 16;
    verify = {'flex': 1, 'paddingHorizontal': 16};
    tangon['container'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['detailsAction'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 19;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/safety_hub/native/AppealIngestionConfirmSubmission.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AppealIngestionConfirmSubmission
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.isDsaEligible;
            entity = _closure1_slot8;
            tangon = undefined;
            result = entity.bind(tangon)();
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            oscard = 6;
            entity = report[oscard];
            option = zuuluu.bind(tangon)(entity);
            golfie = option.useStateFromStores;
            entity = _closure1_slot4;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure1_slot4;
                entity = michal.getAppealClassificationId;
                entity = entity.bind(michal)();
                return entity;
            };
            michal = golfie.bind(option)(michal, entity);
            entity = 7;
            entity = report[entity];
            report = zuuluu.bind(tangon)(entity);
            zuuluu = report.useSafetyHubClassification;
            entity = null;
            if(!(entity == michal)) { _fun00002_ip = 102; continue _fun00001 }
 98:
            michal = _closure1_slot5;
 102:
            romeon = zuuluu.bind(report)(michal);
            report = _closure1_slot0;
            zuuluu = _closure1_slot2;
            michal = zuuluu[oscard];
            foxtra = report.bind(tangon)(michal);
            yankee = foxtra.useStateFromStores;
            michal = _closure1_slot4;
            option = new Array(1);
            option[0] = michal;
            golfie = function() {
                michal = _closure1_slot4;
                entity = michal.getAppealSignal;
                entity = entity.bind(michal)();
                return entity;
            };
            update = yankee.bind(foxtra)(option, golfie);
            zuuluu = zuuluu[oscard];
            oscard = report.bind(tangon)(zuuluu);
            report = oscard.useStateFromStores;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot4;
                entity = michal.getFreeTextAppealReason;
                entity = entity.bind(michal)();
                return entity;
            };
            sizing = report.bind(oscard)(zuuluu, michal);
            michal = romeon.classification;
            zuuluu = entity == michal;
            kiloes = undefined;
            if(zuuluu) { _fun00002_ip = 210; continue _fun00001 }
 204:
            kiloes = michal.flagged_content;
 210:
            if(!(entity == kiloes)) { _fun00002_ip = 218; continue _fun00001 }
 214:
            kiloes = new Array(0);
 218:
            echoed = _closure1_slot0;
            ctrled = _closure1_slot2;
            source = 8;
            entity = ctrled[source];
            entity = echoed.bind(tangon)(entity);
            zuuluu = entity.intl;
            michal = zuuluu.string;
            entity = ctrled[source];
            entity = echoed.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.C5q+pa;
            option = michal.bind(zuuluu)(entity);
            entity = ctrled[source];
            entity = echoed.bind(tangon)(entity);
            zuuluu = entity.intl;
            michal = zuuluu.string;
            entity = ctrled[source];
            entity = echoed.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.G2g/g4;
            golfie = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot7;
            report = 9;
            entity = ctrled[report];
            entity = echoed.bind(tangon)(entity);
            michal = entity.AppealIngestionModalScreen;
            entity = {};
            foxtra = _closure1_slot6;
            report = ctrled[report];
            report = echoed.bind(tangon)(report);
            oscard = report.AppealIngestionModalHeader;
            report = {};
            report['headerText'] = option;
            report['subHeaderText'] = golfie;
            oscard = foxtra.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            golfie = _closure1_slot3;
            oscard = {};
            option = result.container;
            oscard['style'] = option;
            yankee = _closure1_slot1;
            option = 10;
            option = ctrled[option];
            yankee = yankee.bind(tangon)(option);
            option = {};
            backup = 11;
            backup = ctrled[backup];
            echoed = echoed.bind(tangon)(backup);
            backup = echoed.getAppealSignalDisplayText;
            backup = backup.bind(echoed)(update);
            update = new Array(2);
            update[0] = backup;
            update[1] = sizing;
            echoed = update.filter;
            backup = function(argFoo) {
                entity = argFoo;
                michal = entity.length;
                entity = 0;
                entity = michal > entity;
                return entity;
            };
            backup = echoed.bind(update)(backup);
            option['reasons'] = backup;
            yankee = foxtra.bind(tangon)(yankee, option);
            option = new Array(4);
            option[0] = yankee;
            if(!offset) { _fun00002_ip = 689; continue _fun00001 }
 498:
            backup = _closure1_slot6;
            foxtra = _closure1_slot0;
            echoed = _closure1_slot2;
            yankee = 12;
            yankee = echoed[yankee];
            yankee = foxtra.bind(tangon)(yankee);
            foxtra = yankee.Text;
            yankee = {'variant': 'heading-md/normal', 'color': 'text-link'};
            result = result.detailsAction;
            yankee['style'] = result;
            output = function() { // Original name: onPress
                report = _closure1_slot1;
                michal = _closure1_slot2;
                tangon = 13;
                tangon = michal[tangon];
                golfie = undefined;
                report = report.bind(golfie)(tangon);
                tangon = report.openLazy;
                oscard = _closure1_slot0;
                zuuluu = 15;
                zuuluu = michal[zuuluu];
                oscard = oscard.bind(golfie)(zuuluu);
                zuuluu = 14;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                zuuluu = oscard.bind(golfie)(zuuluu, michal);
                michal = {};
                oscard = function(argFoo) { // Original name: onSave
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    entity = 16;
                    michal = tangon[entity];
                    entity = undefined;
                    oscard = zuuluu.bind(entity)(michal);
                    report = oscard.dispatch;
                    michal = {};
                    golfie = 'SAFETY_HUB_APPEAL_SIGNAL_CUSTOM_INPUT_CHANGE';
                    michal['type'] = golfie;
                    golfie = argFoo;
                    michal['userInput'] = golfie;
                    michal = report.bind(oscard)(michal);
                    michal = 13;
                    michal = tangon[michal];
                    tangon = zuuluu.bind(entity)(michal);
                    zuuluu = tangon.hideActionSheet;
                    michal = 'AppealIngestionFreeTextAppealReasonActionSheet';
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                };
                michal['onSave'] = oscard;
                entity = function() { // Original name: onClose
                    zuuluu = _closure1_slot1;
                    michal = _closure1_slot2;
                    entity = 13;
                    michal = michal[entity];
                    entity = undefined;
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.hideActionSheet;
                    entity = 'AppealIngestionFreeTextAppealReasonActionSheet';
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
                };
                michal['onClose'] = entity;
                entity = 'AppealIngestionFreeTextAppealReasonActionSheet';
                entity = tangon.bind(report)(zuuluu, entity, michal);
                return entity;
            };
            yankee['onPress'] = output;
            output = sizing.length;
            sizing = 0;
            if(!(!(output > sizing))) { _fun00002_ip = 627; continue _fun00001 }
 573:
            echoed = _closure1_slot0;
            sizing = _closure1_slot2;
            output = sizing[source];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = sizing[source];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.uoQFIi;
            sizing = output.bind(result)(sizing);
            _fun00002_ip = 679; continue _fun00001;
 627:
            update = _closure1_slot0;
            output = _closure1_slot2;
            result = output[source];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[source];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.tnE3bW;
            sizing = result.bind(echoed)(output);
 679:
            yankee['children'] = sizing;
            offset = backup.bind(tangon)(foxtra, yankee);
 689:
            option[1] = offset;
            yankee = kiloes.length;
            offset = 0;
            offset = yankee > offset;
            if(!offset) { _fun00002_ip = 744; continue _fun00001 }
 707:
            backup = _closure1_slot6;
            foxtra = _closure1_slot1;
            sizing = _closure1_slot2;
            yankee = 17;
            yankee = sizing[yankee];
            foxtra = foxtra.bind(tangon)(yankee);
            yankee = {};
            yankee['flaggedContent'] = kiloes;
            offset = backup.bind(tangon)(foxtra, yankee);
 744:
            option[2] = offset;
            yankee = _closure1_slot6;
            offset = _closure1_slot1;
            foxtra = _closure1_slot2;
            verify = 18;
            verify = foxtra[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            romeon = romeon.classification;
            verify['classification'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[3] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();