// app/modules/safety_hub/native/AppealIngestionFreeTextAppealReasonActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    offset = tango.Fonts;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 6;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    romeo = 14;
    verify['fontSize'] = romeo;
    offset = offset.PRIMARY_SEMIBOLD;
    verify['fontFamily'] = offset;
    tango['buttonTextStyles'] = verify;
    verify = {};
    offset = 'center';
    verify['textAlign'] = offset;
    tango['footerText'] = verify;
    verify = {'marginTop': 4294967280, 'marginBottom': 36};
    tango['textArea'] = verify;
    verify = {'height': 1, 'backgroundColor': null, 'marginHorizontal': 4294967280};
    offset = 7;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = offset;
    tango['separator'] = verify;
    verify = {'alignSelf': 'flex-end', 'flexDirection': 'row', 'marginBottom': 4294967270};
    tango['closeIcon'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 18;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/safety_hub/native/AppealIngestionFreeTextAppealReasonActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: AppealIngestionFreeTextAppealReasonActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            mike = entity.onSave;
            var _closure2_slot0 = mike;
            output = entity.onClose;
            entity = _closure1_slot9;
            tango = undefined;
            romeo = entity.bind(tango)();
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 8;
            entity = zulu[entity];
            report = mike.bind(tango)(entity);
            zulu = report.useStateFromStores;
            entity = _closure1_slot6;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                mike = _closure1_slot6;
                entity = mike.getFreeTextAppealReason;
                entity = entity.bind(mike)();
                return entity;
            };
            mike = zulu.bind(report)(mike, entity);
            zulu = _closure1_slot4;
            entity = zulu.useState;
            report = entity.bind(zulu)(mike);
            zulu = _closure1_slot3;
            entity = 2;
            zulu = zulu.bind(tango)(report, entity);
            entity = 0;
            echo = zulu[entity];
            var _closure2_slot1 = echo;
            entity = 1;
            result = zulu[entity];
            entity = '';
            if(!(entity !== mike)) { _fun00002_ip = 193; continue _fun00001 }
 136:
            report = _closure1_slot0;
            oscar = _closure1_slot2;
            entity = 9;
            mike = oscar[entity];
            mike = report.bind(tango)(mike);
            zulu = mike.intl;
            mike = zulu.string;
            entity = oscar[entity];
            entity = report.bind(tango)(entity);
            entity = entity.t;
            entity = entity.tnE3bW;
            source = mike.bind(zulu)(entity);
            _fun00002_ip = 248; continue _fun00001;
 193:
            report = _closure1_slot0;
            oscar = _closure1_slot2;
            entity = 9;
            mike = oscar[entity];
            mike = report.bind(tango)(mike);
            zulu = mike.intl;
            mike = zulu.string;
            entity = oscar[entity];
            entity = report.bind(tango)(entity);
            entity = entity.t;
            entity = entity.uoQFIi;
            source = mike.bind(zulu)(entity);
 248:
            backup = _closure1_slot0;
            kilo = _closure1_slot2;
            yankee = 9;
            entity = kilo[yankee];
            entity = backup.bind(tango)(entity);
            zulu = entity.intl;
            mike = zulu.string;
            entity = kilo[yankee];
            entity = backup.bind(tango)(entity);
            entity = entity.t;
            entity = entity.Rk+uJy;
            update = mike.bind(zulu)(entity);
            zulu = _closure1_slot7;
            entity = 10;
            entity = kilo[entity];
            entity = backup.bind(tango)(entity);
            mike = entity.BottomSheet;
            entity = {};
            report = true;
            entity['startExpanded'] = report;
            golf = _closure1_slot8;
            report = 11;
            report = kilo[report];
            report = backup.bind(tango)(report);
            oscar = report.Stack;
            report = {};
            offset = 16;
            report['spacing'] = offset;
            options = 12;
            options = kilo[options];
            options = backup.bind(tango)(options);
            sizing = options.PressableOpacity;
            options = {};
            options['onPress'] = output;
            output = romeo.closeIcon;
            options['style'] = output;
            output = 13;
            output = kilo[output];
            output = backup.bind(tango)(output);
            control = output.XSmallIcon;
            output = {};
            vacuum = 'md';
            output['size'] = vacuum;
            output = zulu.bind(tango)(control, output);
            options['children'] = output;
            sizing = zulu.bind(tango)(sizing, options);
            options = new Array(6);
            options[0] = sizing;
            sizing = 14;
            sizing = kilo[sizing];
            sizing = backup.bind(tango)(sizing);
            output = sizing.AppealIngestionModalHeader;
            sizing = {};
            sizing['headerText'] = source;
            sizing['subHeaderText'] = update;
            sizing = zulu.bind(tango)(output, sizing);
            options[1] = sizing;
            sizing = 15;
            sizing = kilo[sizing];
            sizing = backup.bind(tango)(sizing);
            output = sizing.TextArea;
            sizing = {};
            update = 1024;
            sizing['maxLength'] = update;
            update = kilo[yankee];
            update = backup.bind(tango)(update);
            control = update.intl;
            source = control.string;
            update = kilo[yankee];
            update = backup.bind(tango)(update);
            update = update.t;
            update = update.bQrZIC;
            update = source.bind(control)(update);
            sizing['placeholder'] = update;
            update = romeo.textArea;
            sizing['containerStyle'] = update;
            sizing['value'] = echo;
            sizing['onChange'] = result;
            sizing = zulu.bind(tango)(output, sizing);
            options[2] = sizing;
            output = _closure1_slot5;
            sizing = {};
            result = romeo.separator;
            sizing['style'] = result;
            sizing = zulu.bind(tango)(output, sizing);
            options[3] = sizing;
            offset = kilo[offset];
            offset = backup.bind(tango)(offset);
            sizing = offset.Text;
            offset = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            output = romeo.footerText;
            offset['style'] = output;
            output = kilo[yankee];
            output = backup.bind(tango)(output);
            echo = output.intl;
            result = echo.string;
            output = kilo[yankee];
            output = backup.bind(tango)(output);
            output = output.t;
            output = output.xfNY3N;
            output = result.bind(echo)(output);
            offset['children'] = output;
            offset = zulu.bind(tango)(sizing, offset);
            options[4] = offset;
            offset = _closure1_slot1;
            verify = 17;
            verify = kilo[verify];
            offset = offset.bind(tango)(verify);
            verify = {};
            foxtrot = function() { // Original name: onPress
                zulu = _closure2_slot0;
                mike = _closure2_slot1;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            verify['onPress'] = foxtrot;
            romeo = romeo.buttonTextStyles;
            verify['textStyle'] = romeo;
            romeo = kilo[yankee];
            romeo = backup.bind(tango)(romeo);
            foxtrot = romeo.intl;
            romeo = foxtrot.string;
            yankee = kilo[yankee];
            yankee = backup.bind(tango)(yankee);
            yankee = yankee.t;
            yankee = yankee.R3BPHx;
            yankee = romeo.bind(foxtrot)(yankee);
            verify['text'] = yankee;
            verify = zulu.bind(tango)(offset, verify);
            options[5] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();