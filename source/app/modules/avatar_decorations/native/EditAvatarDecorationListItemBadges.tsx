// app/modules/avatar_decorations/native/EditAvatarDecorationListItemBadges.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    romeo = 2;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    tango = tango.PremiumTypes;
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 5;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BRAND;
    verify['backgroundColor'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.round;
    verify['borderRadius'] = foxtrot;
    foxtrot = 6;
    verify['paddingHorizontal'] = foxtrot;
    verify['paddingVertical'] = romeo;
    tango['newIconBadge'] = verify;
    verify = {};
    romeo = 'uppercase';
    verify['textTransform'] = romeo;
    tango['newIconBadgeText'] = verify;
    verify = {};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_ACCENT;
    verify['backgroundColor'] = foxtrot;
    verify['padding'] = offset;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.round;
    verify['borderRadius'] = foxtrot;
    tango['lockIconBadge'] = verify;
    verify = {'backgroundColor': null, 'flexDirection': 'row', 'paddingHorizontal': 5, 'paddingVertical': 3, 'borderRadius': null, 'alignItems': 'center', 'gap': 2};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.unsafe_rawColors;
    foxtrot = foxtrot.PREMIUM_TIER_2_PINK_FOR_GRADIENTS_2;
    verify['backgroundColor'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.round;
    verify['borderRadius'] = foxtrot;
    tango['newLockIconBadge'] = verify;
    verify = {};
    verify['textTransform'] = romeo;
    tango['newLockIconBadgeText'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.INTERACTIVE_ACTIVE;
    verify['tintColor'] = offset;
    tango['lockIcon'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/avatar_decorations/native/EditAvatarDecorationListItemBadges.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo) {
        entity = argFoo;
        options = entity.style;
        entity = _closure1_slot7;
        tango = undefined;
        golf = entity.bind(tango)();
        zulu = _closure1_slot5;
        mike = _closure1_slot3;
        entity = {};
        verify = golf.newIconBadge;
        oscar = new Array(2);
        oscar[0] = verify;
        oscar[1] = options;
        entity['style'] = oscar;
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 6;
        report = yankee[report];
        report = offset.bind(tango)(report);
        oscar = report.Text;
        report = {'variant': 'text-sm/bold', 'color': 'white'};
        golf = golf.newIconBadgeText;
        report['style'] = golf;
        golf = 7;
        options = yankee[golf];
        options = offset.bind(tango)(options);
        verify = options.intl;
        options = verify.string;
        golf = yankee[golf];
        golf = offset.bind(tango)(golf);
        golf = golf.t;
        golf = golf.y2b7CA;
        golf = options.bind(verify)(golf);
        report['children'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['NewBadge'] = tango;
    mike = function(argFoo) {
        _fun64054: for(var _fun64054_ip = 0; ; ) switch(_fun64054_ip) {
 0:
            mike = argFoo;
            entity = mike.isNew;
            report = undefined;
            if(!(entity === report)) { _fun64054_ip = 17; continue _fun64054 }
 15:
            entity = false;
 17:
            options = mike.style;
            mike = _closure1_slot7;
            offset = mike.bind(report)();
            if(entity) { _fun64054_ip = 156; continue _fun64054 }
 36:
            zulu = _closure1_slot5;
            mike = _closure1_slot3;
            entity = {};
            golf = offset.lockIconBadge;
            tango = new Array(2);
            tango[0] = golf;
            tango[1] = options;
            entity['style'] = tango;
            golf = _closure1_slot0;
            romeo = _closure1_slot2;
            tango = 9;
            tango = romeo[tango];
            tango = golf.bind(report)(tango);
            golf = tango.LockIcon;
            tango = {};
            verify = 'sm';
            tango['size'] = verify;
            yankee = _closure1_slot1;
            verify = 5;
            verify = romeo[verify];
            verify = yankee.bind(report)(verify);
            verify = verify.colors;
            verify = verify.WHITE;
            tango['color'] = verify;
            tango = zulu.bind(report)(golf, tango);
            entity['children'] = tango;
            entity = zulu.bind(report)(mike, entity);
            _fun64054_ip = 404; continue _fun64054;
 156:
            tango = _closure1_slot6;
            yankee = _closure1_slot1;
            backup = _closure1_slot2;
            mike = 8;
            mike = backup[mike];
            zulu = yankee.bind(report)(mike);
            mike = {};
            golf = _closure1_slot4;
            golf = golf.TIER_2;
            mike['premiumType'] = golf;
            verify = offset.newLockIconBadge;
            golf = new Array(2);
            golf[0] = verify;
            golf[1] = options;
            mike['style'] = golf;
            verify = _closure1_slot5;
            foxtrot = _closure1_slot0;
            oscar = 9;
            oscar = backup[oscar];
            oscar = foxtrot.bind(report)(oscar);
            golf = oscar.LockIcon;
            oscar = {};
            options = 'xxs';
            oscar['size'] = options;
            options = 5;
            options = backup[options];
            options = yankee.bind(report)(options);
            options = options.colors;
            options = options.WHITE;
            oscar['color'] = options;
            golf = verify.bind(report)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            golf = 6;
            golf = backup[golf];
            golf = foxtrot.bind(report)(golf);
            options = golf.Text;
            golf = {'variant': 'text-xs/bold', 'color': 'white'};
            offset = offset.newLockIconBadgeText;
            golf['style'] = offset;
            offset = 7;
            yankee = backup[offset];
            yankee = foxtrot.bind(report)(yankee);
            romeo = yankee.intl;
            yankee = romeo.string;
            offset = backup[offset];
            offset = foxtrot.bind(report)(offset);
            offset = offset.t;
            offset = offset.y2b7CA;
            offset = yankee.bind(romeo)(offset);
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 404:
            return entity;
        }
    };
    zulu['LockBadge'] = mike;
    return entity;
})();