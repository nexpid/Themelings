// app/modules/avatar_decorations/native/EditAvatarDecorationListItemBadges.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    romeon = 2;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.PremiumTypes;
    var _closure1_slot4 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 5;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BRAND;
    verify['backgroundColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    verify['borderRadius'] = foxtra;
    foxtra = 6;
    verify['paddingHorizontal'] = foxtra;
    verify['paddingVertical'] = romeon;
    tangon['newIconBadge'] = verify;
    verify = {};
    romeon = 'uppercase';
    verify['textTransform'] = romeon;
    tangon['newIconBadgeText'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_ACCENT;
    verify['backgroundColor'] = foxtra;
    verify['padding'] = offset;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    verify['borderRadius'] = foxtra;
    tangon['lockIconBadge'] = verify;
    verify = {'backgroundColor': null, 'flexDirection': 'row', 'paddingHorizontal': 5, 'paddingVertical': 3, 'borderRadius': null, 'alignItems': 'center', 'gap': 2};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.unsafe_rawColors;
    foxtra = foxtra.PREMIUM_TIER_2_PINK_FOR_GRADIENTS_2;
    verify['backgroundColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    verify['borderRadius'] = foxtra;
    tangon['newLockIconBadge'] = verify;
    verify = {};
    verify['textTransform'] = romeon;
    tangon['newLockIconBadgeText'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.INTERACTIVE_ACTIVE;
    verify['tintColor'] = offset;
    tangon['lockIcon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/avatar_decorations/native/EditAvatarDecorationListItemBadges.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) {
        entity = argFoo;
        option = entity.style;
        entity = _closure1_slot7;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        zuuluu = _closure1_slot5;
        michal = _closure1_slot3;
        entity = {};
        verify = golfie.newIconBadge;
        oscard = new Array(2);
        oscard[0] = verify;
        oscard[1] = option;
        entity['style'] = oscard;
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 6;
        report = yankee[report];
        report = offset.bind(tangon)(report);
        oscard = report.Text;
        report = {'variant': 'text-sm/bold', 'color': 'white'};
        golfie = golfie.newIconBadgeText;
        report['style'] = golfie;
        golfie = 7;
        option = yankee[golfie];
        option = offset.bind(tangon)(option);
        verify = option.intl;
        option = verify.string;
        golfie = yankee[golfie];
        golfie = offset.bind(tangon)(golfie);
        golfie = golfie.t;
        golfie = golfie.y2b7CA;
        golfie = option.bind(verify)(golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['NewBadge'] = tangon;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.isNew;
            report = undefined;
            if(!(entity === report)) { _fun00002_ip = 17; continue _fun00001 }
 15:
            entity = false;
 17:
            option = michal.style;
            michal = _closure1_slot7;
            offset = michal.bind(report)();
            if(entity) { _fun00002_ip = 156; continue _fun00001 }
 36:
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            golfie = offset.lockIconBadge;
            tangon = new Array(2);
            tangon[0] = golfie;
            tangon[1] = option;
            entity['style'] = tangon;
            golfie = _closure1_slot0;
            romeon = _closure1_slot2;
            tangon = 9;
            tangon = romeon[tangon];
            tangon = golfie.bind(report)(tangon);
            golfie = tangon.LockIcon;
            tangon = {};
            verify = 'sm';
            tangon['size'] = verify;
            yankee = _closure1_slot1;
            verify = 5;
            verify = romeon[verify];
            verify = yankee.bind(report)(verify);
            verify = verify.colors;
            verify = verify.WHITE;
            tangon['color'] = verify;
            tangon = zuuluu.bind(report)(golfie, tangon);
            entity['children'] = tangon;
            entity = zuuluu.bind(report)(michal, entity);
            _fun00002_ip = 408; continue _fun00001;
 156:
            tangon = _closure1_slot6;
            yankee = _closure1_slot1;
            backup = _closure1_slot2;
            michal = 8;
            michal = backup[michal];
            zuuluu = yankee.bind(report)(michal);
            michal = {};
            golfie = _closure1_slot4;
            golfie = golfie.TIER_2;
            michal['premiumType'] = golfie;
            verify = offset.newLockIconBadge;
            golfie = new Array(2);
            golfie[0] = verify;
            golfie[1] = option;
            michal['style'] = golfie;
            verify = _closure1_slot5;
            foxtra = _closure1_slot0;
            oscard = 9;
            oscard = backup[oscard];
            oscard = foxtra.bind(report)(oscard);
            golfie = oscard.LockIcon;
            oscard = {};
            option = 'xxs';
            oscard['size'] = option;
            option = 5;
            option = backup[option];
            option = yankee.bind(report)(option);
            option = option.colors;
            option = option.WHITE;
            oscard['color'] = option;
            golfie = verify.bind(report)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = 6;
            golfie = backup[golfie];
            golfie = foxtra.bind(report)(golfie);
            option = golfie.Text;
            golfie = {'variant': 'text-xs/bold', 'color': 'white'};
            offset = offset.newLockIconBadgeText;
            golfie['style'] = offset;
            offset = 7;
            yankee = backup[offset];
            yankee = foxtra.bind(report)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = backup[offset];
            offset = foxtra.bind(report)(offset);
            offset = offset.t;
            offset = offset.y2b7CA;
            offset = yankee.bind(romeon)(offset);
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 408:
            return entity;
        }
    };
    zuuluu['LockBadge'] = michal;
    return entity;
})();