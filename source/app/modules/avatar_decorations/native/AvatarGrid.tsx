// app/modules/avatar_decorations/native/AvatarGrid.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: GridAvatar
        _fun64012: for(var _fun64012_ip = 0; ; ) switch(_fun64012_ip) {
 0:
            zulu = argFoo;
            mike = zulu.size;
            verify = zulu.showStatus;
            romeo = zulu.pendingAvatar;
            tango = zulu.pendingAvatarDecoration;
            zulu = _closure1_slot9;
            report = undefined;
            zulu = zulu.bind(report)();
            offset = _closure1_slot0;
            foxtrot = _closure1_slot2;
            golf = 8;
            oscar = foxtrot[golf];
            kilo = offset.bind(report)(oscar);
            backup = kilo.useStateFromStores;
            oscar = _closure1_slot6;
            yankee = new Array(1);
            yankee[0] = oscar;
            oscar = function() {
                mike = _closure1_slot6;
                entity = mike.getCurrentUser;
                entity = entity.bind(mike)();
                return entity;
            };
            yankee = backup.bind(kilo)(yankee, oscar);
            var _closure2_slot0 = yankee;
            oscar = foxtrot[golf];
            sizing = offset.bind(report)(oscar);
            kilo = sizing.useStateFromStores;
            oscar = _closure1_slot5;
            backup = new Array(1);
            backup[0] = oscar;
            oscar = function() {
                _fun64014: for(var _fun64014_ip = 0; ; ) switch(_fun64014_ip) {
 0:
                    zulu = _closure2_slot0;
                    entity = null;
                    zulu = entity != zulu;
                    if(!zulu) { _fun64014_ip = 43; continue _fun64014 }
 16:
                    tango = _closure1_slot5;
                    zulu = tango.getStatus;
                    mike = _closure2_slot0;
                    mike = mike.id;
                    entity = zulu.bind(tango)(mike);
 43:
                    return entity;
                }
            };
            oscar = kilo.bind(sizing)(backup, oscar);
            golf = foxtrot[golf];
            foxtrot = offset.bind(report)(golf);
            offset = foxtrot.useStateFromStores;
            backup = _closure1_slot4;
            golf = new Array(1);
            golf[0] = backup;
            entity = function() {
                entity = _closure1_slot4;
                entity = entity.useReducedMotion;
                return entity;
            };
            offset = offset.bind(foxtrot)(golf, entity);
            entity = null;
            if(!(entity != yankee)) { _fun64012_ip = 341; continue _fun64012 }
 176:
            golf = {};
            if(!(report === tango)) { _fun64012_ip = 188; continue _fun64012 }
 182:
            tango = yankee.avatarDecoration;
 188:
            golf['avatarDecoration'] = tango;
            tango = undefined;
            if(!verify) { _fun64012_ip = 201; continue _fun64012 }
 198:
            tango = oscar;
 201:
            golf['status'] = tango;
            zulu = zulu.avatarStatusStyle;
            golf['statusStyle'] = zulu;
            golf['size'] = mike;
            tango = _closure1_slot7;
            zulu = _closure1_slot1;
            oscar = _closure1_slot2;
            mike = 9;
            mike = oscar[mike];
            zulu = zulu.bind(report)(mike);
            if(!(report === romeo)) { _fun64012_ip = 270; continue _fun64012 }
 248:
            mike = {};
            mike['user'] = yankee;
            mike['guildId'] = report;
            update = mike;
            echo = golf;
            oscar = copyDataProperties(update, echo);
            _fun64012_ip = 333; continue _fun64012;
 270:
            oscar = {};
            verify = _closure1_slot0;
            foxtrot = _closure1_slot2;
            options = 10;
            options = foxtrot[options];
            verify = verify.bind(report)(options);
            options = verify.getAvatarSource;
            source = verify;
            update = yankee;
            echo = null;
            result = romeo;
            output = offset;
            options = source[options](update, echo, result, output, sizing);
            oscar['source'] = options;
            update = oscar;
            echo = golf;
            golf = copyDataProperties(update, echo);
            mike = oscar;
 333:
            mike = tango.bind(report)(zulu, mike);
            return mike;
 341:
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 6;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-around'};
    tango['avatarRow'] = verify;
    verify = {};
    offset = 7;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_FLOATING;
    verify['backgroundColor'] = romeo;
    tango['avatarStatusStyle'] = verify;
    verify = {'width': 108, 'height': 108, 'justifyContent': 'space-around', 'marginLeft': 28};
    tango['gridContainer'] = verify;
    verify = {'width': 56, 'height': 208, 'display': 'flex', 'alignItems': 'center', 'backgroundColor': null, 'marginLeft': 12};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_FLOATING;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tango['columnContainer'] = verify;
    verify = {};
    offset = 8;
    verify['padding'] = offset;
    tango['columnAvatarContainer'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/avatar_decorations/native/AvatarGrid.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo) { // Original name: AvatarGrid
        yankee = argFoo;
        entity = _closure1_slot9;
        tango = undefined;
        golf = entity.bind(tango)();
        zulu = _closure1_slot8;
        mike = _closure1_slot3;
        entity = {};
        report = golf.gridContainer;
        entity['style'] = report;
        report = {};
        oscar = golf.avatarRow;
        report['style'] = oscar;
        verify = _closure1_slot7;
        offset = _closure1_slot10;
        oscar = {};
        backup = _closure1_slot0;
        kilo = _closure1_slot2;
        foxtrot = 9;
        romeo = kilo[foxtrot];
        romeo = backup.bind(tango)(romeo);
        romeo = romeo.AvatarSizes;
        romeo = romeo.NORMAL;
        oscar['size'] = romeo;
        echo = oscar;
        result = yankee;
        romeo = copyDataProperties(echo, result);
        verify = verify.bind(tango)(offset, oscar);
        oscar = new Array(2);
        oscar[0] = verify;
        sizing = _closure1_slot7;
        verify = {};
        romeo = kilo[foxtrot];
        romeo = backup.bind(tango)(romeo);
        romeo = romeo.AvatarSizes;
        romeo = romeo.NORMAL;
        verify['size'] = romeo;
        romeo = true;
        verify['showStatus'] = romeo;
        echo = verify;
        result = yankee;
        output = copyDataProperties(echo, result);
        verify = sizing.bind(tango)(offset, verify);
        oscar[1] = verify;
        report['children'] = oscar;
        oscar = zulu.bind(tango)(mike, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = {};
        golf = golf.avatarRow;
        oscar['style'] = golf;
        verify = _closure1_slot7;
        golf = {};
        sizing = kilo[foxtrot];
        sizing = backup.bind(tango)(sizing);
        sizing = sizing.AvatarSizes;
        sizing = sizing.REFRESH_MEDIUM_32;
        golf['size'] = sizing;
        echo = golf;
        result = yankee;
        sizing = copyDataProperties(echo, result);
        verify = verify.bind(tango)(offset, golf);
        golf = new Array(2);
        golf[0] = verify;
        verify = _closure1_slot7;
        options = {};
        foxtrot = kilo[foxtrot];
        foxtrot = backup.bind(tango)(foxtrot);
        foxtrot = foxtrot.AvatarSizes;
        foxtrot = foxtrot.REFRESH_MEDIUM_32;
        options['size'] = foxtrot;
        options['showStatus'] = romeo;
        echo = options;
        result = yankee;
        yankee = copyDataProperties(echo, result);
        options = verify.bind(tango)(offset, options);
        golf[1] = options;
        oscar['children'] = golf;
        oscar = zulu.bind(tango)(mike, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = tango;
    mike = function(argFoo) { // Original name: AvatarColumn
        yankee = argFoo;
        entity = _closure1_slot9;
        tango = undefined;
        verify = entity.bind(tango)();
        zulu = _closure1_slot8;
        mike = _closure1_slot3;
        entity = {};
        report = verify.columnContainer;
        entity['style'] = report;
        oscar = _closure1_slot7;
        report = {};
        golf = verify.columnAvatarContainer;
        report['style'] = golf;
        romeo = _closure1_slot7;
        offset = _closure1_slot10;
        golf = {};
        backup = _closure1_slot0;
        kilo = _closure1_slot2;
        foxtrot = 9;
        sizing = kilo[foxtrot];
        sizing = backup.bind(tango)(sizing);
        sizing = sizing.AvatarSizes;
        sizing = sizing.NORMAL;
        golf['size'] = sizing;
        update = golf;
        echo = yankee;
        sizing = copyDataProperties(update, echo);
        golf = romeo.bind(tango)(offset, golf);
        report['children'] = golf;
        oscar = oscar.bind(tango)(mike, report);
        report = new Array(4);
        report[0] = oscar;
        golf = _closure1_slot7;
        oscar = {};
        romeo = verify.columnAvatarContainer;
        oscar['style'] = romeo;
        sizing = _closure1_slot7;
        romeo = {};
        output = kilo[foxtrot];
        output = backup.bind(tango)(output);
        output = output.AvatarSizes;
        output = output.REFRESH_MEDIUM_32;
        romeo['size'] = output;
        update = romeo;
        echo = yankee;
        output = copyDataProperties(update, echo);
        romeo = sizing.bind(tango)(offset, romeo);
        oscar['children'] = romeo;
        oscar = golf.bind(tango)(mike, oscar);
        report[1] = oscar;
        golf = _closure1_slot7;
        oscar = {};
        romeo = verify.columnAvatarContainer;
        oscar['style'] = romeo;
        output = _closure1_slot7;
        sizing = {};
        romeo = kilo[foxtrot];
        romeo = backup.bind(tango)(romeo);
        romeo = romeo.AvatarSizes;
        romeo = romeo.NORMAL;
        sizing['size'] = romeo;
        romeo = true;
        sizing['showStatus'] = romeo;
        update = sizing;
        echo = yankee;
        result = copyDataProperties(update, echo);
        sizing = output.bind(tango)(offset, sizing);
        oscar['children'] = sizing;
        oscar = golf.bind(tango)(mike, oscar);
        report[2] = oscar;
        golf = _closure1_slot7;
        oscar = {};
        verify = verify.columnAvatarContainer;
        oscar['style'] = verify;
        verify = _closure1_slot7;
        options = {};
        foxtrot = kilo[foxtrot];
        foxtrot = backup.bind(tango)(foxtrot);
        foxtrot = foxtrot.AvatarSizes;
        foxtrot = foxtrot.REFRESH_MEDIUM_32;
        options['size'] = foxtrot;
        options['showStatus'] = romeo;
        update = options;
        echo = yankee;
        yankee = copyDataProperties(update, echo);
        options = verify.bind(tango)(offset, options);
        oscar['children'] = options;
        oscar = golf.bind(tango)(mike, oscar);
        report[3] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['AvatarColumn'] = mike;
    return entity;
})();