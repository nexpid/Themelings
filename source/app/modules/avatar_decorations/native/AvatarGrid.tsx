// app/modules/avatar_decorations/native/AvatarGrid.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: GridAvatar
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            michal = zuuluu.size;
            verify = zuuluu.showStatus;
            romeon = zuuluu.pendingAvatar;
            tangon = zuuluu.pendingAvatarDecoration;
            zuuluu = _closure1_slot9;
            report = undefined;
            zuuluu = zuuluu.bind(report)();
            offset = _closure1_slot0;
            foxtra = _closure1_slot2;
            golfie = 8;
            oscard = foxtra[golfie];
            kiloes = offset.bind(report)(oscard);
            backup = kiloes.useStateFromStores;
            oscard = _closure1_slot6;
            yankee = new Array(1);
            yankee[0] = oscard;
            oscard = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            yankee = backup.bind(kiloes)(yankee, oscard);
            var _closure2_slot0 = yankee;
            oscard = foxtra[golfie];
            sizing = offset.bind(report)(oscard);
            kiloes = sizing.useStateFromStores;
            oscard = _closure1_slot5;
            backup = new Array(1);
            backup[0] = oscard;
            oscard = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot0;
                    entity = null;
                    zuuluu = entity != zuuluu;
                    if(!zuuluu) { _fun00004_ip = 43; continue _fun00003 }
 16:
                    tangon = _closure1_slot5;
                    zuuluu = tangon.getStatus;
                    michal = _closure2_slot0;
                    michal = michal.id;
                    entity = zuuluu.bind(tangon)(michal);
 43:
                    return entity;
                }
            };
            oscard = kiloes.bind(sizing)(backup, oscard);
            golfie = foxtra[golfie];
            foxtra = offset.bind(report)(golfie);
            offset = foxtra.useStateFromStores;
            backup = _closure1_slot4;
            golfie = new Array(1);
            golfie[0] = backup;
            entity = function() {
                entity = _closure1_slot4;
                entity = entity.useReducedMotion;
                return entity;
            };
            offset = offset.bind(foxtra)(golfie, entity);
            entity = null;
            if(!(entity != yankee)) { _fun00002_ip = 341; continue _fun00001 }
 176:
            golfie = {};
            if(!(report === tangon)) { _fun00002_ip = 188; continue _fun00001 }
 182:
            tangon = yankee.avatarDecoration;
 188:
            golfie['avatarDecoration'] = tangon;
            tangon = undefined;
            if(!verify) { _fun00002_ip = 201; continue _fun00001 }
 198:
            tangon = oscard;
 201:
            golfie['status'] = tangon;
            zuuluu = zuuluu.avatarStatusStyle;
            golfie['statusStyle'] = zuuluu;
            golfie['size'] = michal;
            tangon = _closure1_slot7;
            zuuluu = _closure1_slot1;
            oscard = _closure1_slot2;
            michal = 9;
            michal = oscard[michal];
            zuuluu = zuuluu.bind(report)(michal);
            if(!(report === romeon)) { _fun00002_ip = 270; continue _fun00001 }
 248:
            michal = {};
            michal['user'] = yankee;
            michal['guildId'] = report;
            update = michal;
            echoed = golfie;
            oscard = copyDataProperties(update, echoed);
            _fun00002_ip = 333; continue _fun00001;
 270:
            oscard = {};
            verify = _closure1_slot0;
            foxtra = _closure1_slot2;
            option = 10;
            option = foxtra[option];
            verify = verify.bind(report)(option);
            option = verify.getAvatarSource;
            source = verify;
            update = yankee;
            echoed = null;
            result = romeon;
            output = offset;
            option = source[option](update, echoed, result, output, sizing);
            oscard['source'] = option;
            update = oscard;
            echoed = golfie;
            golfie = copyDataProperties(update, echoed);
            michal = oscard;
 333:
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 341:
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-around'};
    tangon['avatarRow'] = verify;
    verify = {};
    offset = 7;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_FLOATING;
    verify['backgroundColor'] = romeon;
    tangon['avatarStatusStyle'] = verify;
    verify = {'width': 108, 'height': 108, 'justifyContent': 'space-around', 'marginLeft': 28};
    tangon['gridContainer'] = verify;
    verify = {'width': 56, 'height': 208, 'display': 'flex', 'alignItems': 'center', 'backgroundColor': null, 'marginLeft': 12};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_FLOATING;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['columnContainer'] = verify;
    verify = {};
    offset = 8;
    verify['padding'] = offset;
    tangon['columnAvatarContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/avatar_decorations/native/AvatarGrid.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: AvatarGrid
        yankee = argFoo;
        entity = _closure1_slot9;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        zuuluu = _closure1_slot8;
        michal = _closure1_slot3;
        entity = {};
        report = golfie.gridContainer;
        entity['style'] = report;
        report = {};
        oscard = golfie.avatarRow;
        report['style'] = oscard;
        verify = _closure1_slot7;
        offset = _closure1_slot10;
        oscard = {};
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        foxtra = 9;
        romeon = kiloes[foxtra];
        romeon = backup.bind(tangon)(romeon);
        romeon = romeon.AvatarSizes;
        romeon = romeon.NORMAL;
        oscard['size'] = romeon;
        echoed = oscard;
        result = yankee;
        romeon = copyDataProperties(echoed, result);
        verify = verify.bind(tangon)(offset, oscard);
        oscard = new Array(2);
        oscard[0] = verify;
        sizing = _closure1_slot7;
        verify = {};
        romeon = kiloes[foxtra];
        romeon = backup.bind(tangon)(romeon);
        romeon = romeon.AvatarSizes;
        romeon = romeon.NORMAL;
        verify['size'] = romeon;
        romeon = true;
        verify['showStatus'] = romeon;
        echoed = verify;
        result = yankee;
        output = copyDataProperties(echoed, result);
        verify = sizing.bind(tangon)(offset, verify);
        oscard[1] = verify;
        report['children'] = oscard;
        oscard = zuuluu.bind(tangon)(michal, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        golfie = golfie.avatarRow;
        oscard['style'] = golfie;
        verify = _closure1_slot7;
        golfie = {};
        sizing = kiloes[foxtra];
        sizing = backup.bind(tangon)(sizing);
        sizing = sizing.AvatarSizes;
        sizing = sizing.REFRESH_MEDIUM_32;
        golfie['size'] = sizing;
        echoed = golfie;
        result = yankee;
        sizing = copyDataProperties(echoed, result);
        verify = verify.bind(tangon)(offset, golfie);
        golfie = new Array(2);
        golfie[0] = verify;
        verify = _closure1_slot7;
        option = {};
        foxtra = kiloes[foxtra];
        foxtra = backup.bind(tangon)(foxtra);
        foxtra = foxtra.AvatarSizes;
        foxtra = foxtra.REFRESH_MEDIUM_32;
        option['size'] = foxtra;
        option['showStatus'] = romeon;
        echoed = option;
        result = yankee;
        yankee = copyDataProperties(echoed, result);
        option = verify.bind(tangon)(offset, option);
        golfie[1] = option;
        oscard['children'] = golfie;
        oscard = zuuluu.bind(tangon)(michal, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: AvatarColumn
        yankee = argFoo;
        entity = _closure1_slot9;
        tangon = undefined;
        verify = entity.bind(tangon)();
        zuuluu = _closure1_slot8;
        michal = _closure1_slot3;
        entity = {};
        report = verify.columnContainer;
        entity['style'] = report;
        oscard = _closure1_slot7;
        report = {};
        golfie = verify.columnAvatarContainer;
        report['style'] = golfie;
        romeon = _closure1_slot7;
        offset = _closure1_slot10;
        golfie = {};
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        foxtra = 9;
        sizing = kiloes[foxtra];
        sizing = backup.bind(tangon)(sizing);
        sizing = sizing.AvatarSizes;
        sizing = sizing.NORMAL;
        golfie['size'] = sizing;
        update = golfie;
        echoed = yankee;
        sizing = copyDataProperties(update, echoed);
        golfie = romeon.bind(tangon)(offset, golfie);
        report['children'] = golfie;
        oscard = oscard.bind(tangon)(michal, report);
        report = new Array(4);
        report[0] = oscard;
        golfie = _closure1_slot7;
        oscard = {};
        romeon = verify.columnAvatarContainer;
        oscard['style'] = romeon;
        sizing = _closure1_slot7;
        romeon = {};
        output = kiloes[foxtra];
        output = backup.bind(tangon)(output);
        output = output.AvatarSizes;
        output = output.REFRESH_MEDIUM_32;
        romeon['size'] = output;
        update = romeon;
        echoed = yankee;
        output = copyDataProperties(update, echoed);
        romeon = sizing.bind(tangon)(offset, romeon);
        oscard['children'] = romeon;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[1] = oscard;
        golfie = _closure1_slot7;
        oscard = {};
        romeon = verify.columnAvatarContainer;
        oscard['style'] = romeon;
        output = _closure1_slot7;
        sizing = {};
        romeon = kiloes[foxtra];
        romeon = backup.bind(tangon)(romeon);
        romeon = romeon.AvatarSizes;
        romeon = romeon.NORMAL;
        sizing['size'] = romeon;
        romeon = true;
        sizing['showStatus'] = romeon;
        update = sizing;
        echoed = yankee;
        result = copyDataProperties(update, echoed);
        sizing = output.bind(tangon)(offset, sizing);
        oscard['children'] = sizing;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[2] = oscard;
        golfie = _closure1_slot7;
        oscard = {};
        verify = verify.columnAvatarContainer;
        oscard['style'] = verify;
        verify = _closure1_slot7;
        option = {};
        foxtra = kiloes[foxtra];
        foxtra = backup.bind(tangon)(foxtra);
        foxtra = foxtra.AvatarSizes;
        foxtra = foxtra.REFRESH_MEDIUM_32;
        option['size'] = foxtra;
        option['showStatus'] = romeon;
        update = option;
        echoed = yankee;
        yankee = copyDataProperties(update, echoed);
        option = verify.bind(tangon)(offset, option);
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[3] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['AvatarColumn'] = michal;
    return entity;
})();