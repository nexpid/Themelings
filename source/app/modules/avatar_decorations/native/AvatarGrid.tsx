// app/modules/avatar_decorations/native/AvatarGrid.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: GridAvatar
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            romeon = michal.user;
            var _closure2_slot0 = romeon;
            yankee = michal.guildId;
            entity = michal.size;
            option = michal.showStatus;
            offset = michal.pendingAvatarSrc;
            zuuluu = michal.pendingAvatarDecoration;
            michal = _closure1_slot8;
            tangon = undefined;
            michal = michal.bind(tangon)();
            foxtra = _closure1_slot0;
            backup = _closure1_slot2;
            verify = 7;
            report = backup[verify];
            output = foxtra.bind(tangon)(report);
            sizing = output.useStateFromStores;
            report = _closure1_slot5;
            kiloes = new Array(1);
            kiloes[0] = report;
            report = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.getStatus;
                entity = _closure2_slot0;
                entity = entity.id;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            report = sizing.bind(output)(kiloes, report);
            verify = backup[verify];
            backup = foxtra.bind(tangon)(verify);
            foxtra = backup.useStateFromStores;
            kiloes = _closure1_slot4;
            verify = new Array(1);
            verify[0] = kiloes;
            oscard = function() {
                entity = _closure1_slot4;
                entity = entity.useReducedMotion;
                return entity;
            };
            verify = foxtra.bind(backup)(verify, oscard);
            oscard = {};
            if(!(tangon === zuuluu)) { _fun00002_ip = 152; continue _fun00001 }
 146:
            zuuluu = romeon.avatarDecoration;
 152:
            oscard['avatarDecoration'] = zuuluu;
            zuuluu = undefined;
            if(!option) { _fun00002_ip = 165; continue _fun00001 }
 162:
            zuuluu = report;
 165:
            oscard['status'] = zuuluu;
            michal = michal.avatarStatusStyle;
            oscard['statusStyle'] = michal;
            oscard['size'] = entity;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot1;
            report = _closure1_slot2;
            entity = 8;
            entity = report[entity];
            michal = michal.bind(tangon)(entity);
            if(!(tangon === offset)) { _fun00002_ip = 234; continue _fun00001 }
 212:
            entity = {};
            entity['user'] = romeon;
            entity['guildId'] = yankee;
            source = entity;
            update = oscard;
            report = copyDataProperties(source, update);
            _fun00002_ip = 298; continue _fun00001;
 234:
            report = {};
            option = _closure1_slot0;
            foxtra = _closure1_slot2;
            golfie = 9;
            golfie = foxtra[golfie];
            option = option.bind(tangon)(golfie);
            golfie = option.getAvatarSource;
            ctrled = option;
            source = romeon;
            update = yankee;
            echoed = offset;
            result = verify;
            golfie = ctrled[golfie](source, update, echoed, result, output);
            report['source'] = golfie;
            source = report;
            update = oscard;
            oscard = copyDataProperties(source, update);
            entity = report;
 298:
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot9 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-around'};
    tangon['avatarRow'] = verify;
    verify = {};
    offset = 6;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_FLOATING;
    verify['backgroundColor'] = romeon;
    tangon['avatarStatusStyle'] = verify;
    verify = {'width': 108, 'height': 108, 'justifyContent': 'space-around', 'marginLeft': 28};
    tangon['gridContainer'] = verify;
    verify = {'width': 56, 'height': 208, 'display': 'flex', 'alignItems': 'center', 'backgroundColor': null, 'marginLeft': 12};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_FLOATING;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['columnContainer'] = verify;
    verify = {};
    offset = 8;
    verify['padding'] = offset;
    tangon['columnAvatarContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/avatar_decorations/native/AvatarGrid.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AvatarGrid
        yankee = argFoo;
        entity = _closure1_slot8;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        zuuluu = _closure1_slot7;
        michal = _closure1_slot3;
        entity = {};
        report = golfie.gridContainer;
        entity['style'] = report;
        report = {};
        oscard = golfie.avatarRow;
        report['style'] = oscard;
        verify = _closure1_slot6;
        offset = _closure1_slot9;
        oscard = {};
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        foxtra = 8;
        romeon = kiloes[foxtra];
        romeon = backup.bind(tangon)(romeon);
        romeon = romeon.AvatarSizes;
        romeon = romeon.NORMAL;
        oscard['size'] = romeon;
        echoed = oscard;
        result = yankee;
        romeon = copyDataProperties(echoed, result);
        verify = verify.bind(tangon)(offset, oscard);
        oscard = new Array(2);
        oscard[0] = verify;
        sizing = _closure1_slot6;
        verify = {};
        romeon = kiloes[foxtra];
        romeon = backup.bind(tangon)(romeon);
        romeon = romeon.AvatarSizes;
        romeon = romeon.NORMAL;
        verify['size'] = romeon;
        romeon = true;
        verify['showStatus'] = romeon;
        echoed = verify;
        result = yankee;
        output = copyDataProperties(echoed, result);
        verify = sizing.bind(tangon)(offset, verify);
        oscard[1] = verify;
        report['children'] = oscard;
        oscard = zuuluu.bind(tangon)(michal, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        golfie = golfie.avatarRow;
        oscard['style'] = golfie;
        verify = _closure1_slot6;
        golfie = {};
        sizing = kiloes[foxtra];
        sizing = backup.bind(tangon)(sizing);
        sizing = sizing.AvatarSizes;
        sizing = sizing.REFRESH_MEDIUM_32;
        golfie['size'] = sizing;
        echoed = golfie;
        result = yankee;
        sizing = copyDataProperties(echoed, result);
        verify = verify.bind(tangon)(offset, golfie);
        golfie = new Array(2);
        golfie[0] = verify;
        verify = _closure1_slot6;
        option = {};
        foxtra = kiloes[foxtra];
        foxtra = backup.bind(tangon)(foxtra);
        foxtra = foxtra.AvatarSizes;
        foxtra = foxtra.REFRESH_MEDIUM_32;
        option['size'] = foxtra;
        option['showStatus'] = romeon;
        echoed = option;
        result = yankee;
        yankee = copyDataProperties(echoed, result);
        option = verify.bind(tangon)(offset, option);
        golfie[1] = option;
        oscard['children'] = golfie;
        oscard = zuuluu.bind(tangon)(michal, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();