// app/modules/custom_status/native/ClearAfterOptionsActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 3;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tangon['content'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/custom_status/native/ClearAfterOptionsActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ClearAfterOptionsActionSheet
        entity = argFoo;
        option = entity.initialValue;
        entity = entity.onChange;
        var _closure2_slot0 = entity;
        michal = _closure1_slot4;
        tangon = undefined;
        report = michal.bind(tangon)();
        zuuluu = _closure1_slot3;
        verify = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 4;
        entity = offset[entity];
        entity = verify.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        report = report.content;
        entity['contentStyles'] = report;
        report = 5;
        report = offset[report];
        report = verify.bind(tangon)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        yankee = 6;
        romeon = offset[yankee];
        romeon = verify.bind(tangon)(romeon);
        backup = romeon.intl;
        foxtra = backup.string;
        romeon = offset[yankee];
        romeon = verify.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.5XnRQ0;
        romeon = foxtra.bind(backup)(romeon);
        report['title'] = romeon;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['header'] = report;
        report = 7;
        report = offset[report];
        report = verify.bind(tangon)(report);
        oscard = report.TableRadioGroup;
        report = {};
        romeon = function(argFoo) { // Original name: onChange
            zuuluu = _closure2_slot0;
            entity = undefined;
            michal = argFoo;
            michal = zuuluu.bind(entity)(michal);
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            michal = 8;
            michal = tangon[michal];
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.hideActionSheet;
            michal = michal.bind(zuuluu)();
            return entity;
        };
        report['onChange'] = romeon;
        romeon = offset[yankee];
        romeon = verify.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = offset[yankee];
        yankee = verify.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.E45wvL;
        yankee = romeon.bind(foxtra)(yankee);
        report['title'] = yankee;
        report['value'] = option;
        option = 9;
        option = offset[option];
        option = verify.bind(tangon)(option);
        verify = option.CLEAR_AFTER_OPTIONS;
        option = verify.map;
        golfie = function(argFoo) {
            entity = argFoo;
            report = _closure1_slot3;
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 10;
            michal = tangon[michal];
            tangon = undefined;
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = michal.TableRadioRow;
            michal = {};
            oscard = entity.getLabel;
            oscard = oscard.bind(entity)();
            michal['label'] = oscard;
            oscard = entity.value;
            michal['value'] = oscard;
            entity = entity.value;
            entity = report.bind(tangon)(zuuluu, michal, entity);
            return entity;
        };
        golfie = option.bind(verify)(golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();