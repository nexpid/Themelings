// app/modules/custom_status/native/ClearAfterOptionsActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ClearAfterOptions;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 4;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tangon['content'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/custom_status/native/ClearAfterOptionsActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ClearAfterOptionsActionSheet
        entity = argFoo;
        verify = entity.initialValue;
        entity = entity.onChange;
        var _closure2_slot0 = entity;
        entity = _closure1_slot5;
        tangon = undefined;
        report = entity.bind(tangon)();
        foxtra = _closure1_slot0;
        backup = _closure1_slot2;
        entity = 5;
        entity = backup[entity];
        zuuluu = foxtra.bind(tangon)(entity);
        michal = zuuluu.useIsEligibleForCustomStatusClearAfterTimesExperiment;
        entity = {};
        oscard = 'ClearAfterOptionsActionSheet';
        entity['location'] = oscard;
        entity = michal.bind(zuuluu)(entity);
        var _closure2_slot1 = entity;
        zuuluu = _closure1_slot4;
        entity = 6;
        entity = backup[entity];
        entity = foxtra.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        report = report.content;
        entity['contentStyles'] = report;
        report = 7;
        report = backup[report];
        report = foxtra.bind(tangon)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        offset = 8;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        kiloes = yankee.intl;
        romeon = kiloes.string;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.5XnRQ0;
        yankee = romeon.bind(kiloes)(yankee);
        report['title'] = yankee;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['header'] = report;
        report = 9;
        report = backup[report];
        report = foxtra.bind(tangon)(report);
        oscard = report.TableRadioGroup;
        report = {};
        yankee = function(argFoo) { // Original name: onChange
            zuuluu = _closure2_slot0;
            entity = undefined;
            michal = argFoo;
            michal = zuuluu.bind(entity)(michal);
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            michal = 10;
            michal = tangon[michal];
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.hideActionSheet;
            michal = michal.bind(zuuluu)();
            return entity;
        };
        report['onChange'] = yankee;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = backup[offset];
        offset = foxtra.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.E45wvL;
        offset = yankee.bind(romeon)(offset);
        report['title'] = offset;
        report['defaultValue'] = verify;
        verify = _closure1_slot3;
        option = verify.map;
        golfie = function(argFoo) {
            report = argFoo;
            tangon = _closure1_slot4;
            michal = _closure1_slot0;
            option = _closure1_slot2;
            entity = 11;
            entity = option[entity];
            zuuluu = undefined;
            entity = michal.bind(zuuluu)(entity);
            michal = entity.TableRadioRow;
            entity = {};
            entity['value'] = report;
            golfie = _closure1_slot1;
            oscard = 12;
            oscard = option[oscard];
            golfie = golfie.bind(zuuluu)(oscard);
            oscard = _closure2_slot1;
            oscard = golfie.bind(zuuluu)(report, oscard);
            entity['label'] = oscard;
            entity = tangon.bind(zuuluu)(michal, entity, report);
            return entity;
        };
        golfie = option.bind(verify)(golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();