// app/modules/haptics/HapticFeedbackTypes.tsx
export default (function(_, argBar, __, ___, ____, argFred, argPlugh) {
    zulu = argFred;
    entity = global;
    report = entity.Object;
    tango = report.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(report)(zulu, entity, mike);
    mike = {};
    tango = 0;
    mike['IMPACT_LIGHT'] = tango;
    entity = 'IMPACT_LIGHT';
    mike[tango] = entity;
    report = 1;
    mike['IMPACT_MEDIUM'] = report;
    entity = 'IMPACT_MEDIUM';
    mike[report] = entity;
    report = 2;
    mike['IMPACT_HEAVY'] = report;
    entity = 'IMPACT_HEAVY';
    mike[report] = entity;
    report = 3;
    mike['NOTIFICATION_ERROR'] = report;
    entity = 'NOTIFICATION_ERROR';
    mike[report] = entity;
    report = 4;
    mike['DRAG_AND_DROP_START'] = report;
    entity = 'DRAG_AND_DROP_START';
    mike[report] = entity;
    report = 5;
    mike['DRAG_AND_DROP_END'] = report;
    entity = 'DRAG_AND_DROP_END';
    mike[report] = entity;
    report = 6;
    mike['DRAG_AND_DROP_MOVE'] = report;
    entity = 'DRAG_AND_DROP_MOVE';
    mike[report] = entity;
    entity = argPlugh;
    report = entity[tango];
    tango = argBar;
    entity = undefined;
    oscar = tango.bind(entity)(report);
    report = oscar.fileFinishedImporting;
    tango = 'modules/haptics/HapticFeedbackTypes.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();