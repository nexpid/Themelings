// app/modules/guild_member_verification/native/components/MemberVerificationGuildHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    output = 0;
    golfie = oscard[output];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    kiloes = 2;
    tangon = oscard[kiloes];
    tangon = report.bind(entity)(tangon);
    foxtra = tangon.AVATAR_BORDER_WIDTH;
    backup = tangon.AVATAR_SIZE;
    var _closure1_slot4 = backup;
    tangon = tangon.useBannerHeight;
    var _closure1_slot5 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'flexDirection': 'column', 'justifyContent': 'flex-end', 'alignItems': 'center', 'marginBottom': 12};
    tangon['header'] = verify;
    sizing = 20;
    romeon = 16;
    verify = {'alignItems': 'center', 'marginTop': 4294967248, 'paddingTop': 20, 'paddingBottom': 0, 'paddingHorizontal': 16};
    tangon['headerContent'] = verify;
    verify = {'position': 'absolute', 'height': 140, 'top': 0, 'right': 0, 'left': 0};
    tangon['linearGradient'] = verify;
    verify = {};
    offset = 5;
    result = oscard[offset];
    result = yankee.bind(entity)(result);
    result = result.radii;
    result = result.lg;
    verify['borderRadius'] = result;
    verify['borderWidth'] = output;
    result = oscard[offset];
    result = yankee.bind(entity)(result);
    result = result.colors;
    result = result.BG_BASE_SECONDARY;
    verify['borderColor'] = result;
    verify['height'] = backup;
    verify['width'] = backup;
    verify['margin'] = output;
    output = oscard[offset];
    output = yankee.bind(entity)(output);
    output = output.colors;
    output = output.BG_BACKDROP;
    verify['backgroundColor'] = output;
    tangon['avatar'] = verify;
    verify = {};
    verify['borderRadius'] = sizing;
    verify['borderWidth'] = foxtra;
    sizing = oscard[offset];
    sizing = yankee.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BG_BASE_SECONDARY;
    verify['borderColor'] = sizing;
    sizing = kiloes * foxtra;
    sizing = backup + sizing;
    verify['height'] = sizing;
    foxtra = kiloes * foxtra;
    foxtra = backup + foxtra;
    verify['width'] = foxtra;
    verify['marginBottom'] = romeon;
    romeon = -16;
    verify['marginTop'] = romeon;
    romeon = -4;
    verify['marginLeft'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_BASE_SECONDARY;
    verify['backgroundColor'] = offset;
    tangon['avatarContainer'] = verify;
    verify = {'position': 'absolute', 'top': 56, 'right': 4294967288};
    tangon['featureIcon'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 8};
    tangon['headerTitle'] = verify;
    verify = {'lineHeight': 18, 'textAlign': 'center'};
    tangon['headerDescription'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = {};
    golfie = 'function MemberVerificationGuildHeaderTsx1(){const{scrollTop}=this.__closure;return scrollTop.get()*-1;}';
    tangon['code'] = golfie;
    var _closure1_slot9 = tangon;
    tangon = {};
    golfie = "function MemberVerificationGuildHeaderTsx2(){const{height,interpolate,scrollTop,safeAreaTop,scrollTopNegative}=this.__closure;return{width:'100%',height:height,opacity:interpolate(scrollTop.get(),[0,height-safeAreaTop],[1,0],'clamp'),transform:[{translateY:interpolate(scrollTopNegative.get(),[0,height],[0,-height],'clamp')},{scale:interpolate(scrollTopNegative.get(),[0,height],[1,1.08],'clamp')}]};}";
    tangon['code'] = golfie;
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = "function MemberVerificationGuildHeaderTsx3(){const{interpolate,scrollTopNegative,height,ANIMATION_GOLDEN_RATIO,AVATAR_SIZE}=this.__closure;return{transform:[{translateY:interpolate(scrollTopNegative.get(),[0,height],[0,-(height/ANIMATION_GOLDEN_RATIO)],'clamp')},{scale:interpolate(scrollTopNegative.get(),[0,AVATAR_SIZE],[1,ANIMATION_GOLDEN_RATIO],'clamp')}]};}";
    tangon['code'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_member_verification/native/components/MemberVerificationGuildHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: MemberVerificationGuildHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            source = michal.guild;
            kiloes = michal.scrollTop;
            var _closure2_slot0 = kiloes;
            yankee = michal.hasManualFormFields;
            michal = _closure1_slot8;
            tangon = undefined;
            foxtra = michal.bind(tangon)();
            zuuluu = source.banner;
            michal = null;
            if(!(michal == zuuluu)) { _fun00002_ip = 73; continue _fun00001 }
 51:
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 7;
            michal = report[michal];
            result = zuuluu.bind(tangon)(michal);
            _fun00002_ip = 104; continue _fun00001;
 73:
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 6;
            michal = report[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.getGuildBannerSource;
            result = michal.bind(zuuluu)(source);
 104:
            michal = _closure1_slot5;
            update = michal.bind(tangon)();
            var _closure2_slot1 = update;
            output = _closure1_slot1;
            option = _closure1_slot2;
            michal = 8;
            michal = option[michal];
            michal = output.bind(tangon)(michal);
            michal = michal.bind(tangon)();
            backup = michal.top;
            var _closure2_slot2 = backup;
            verify = _closure1_slot0;
            golfie = 9;
            michal = option[golfie];
            report = verify.bind(tangon)(michal);
            zuuluu = report.useDerivedValue;
            michal = function() { // Original name: N
                michal = _closure2_slot0;
                entity = michal.get;
                michal = entity.bind(michal)();
                entity = -1;
                entity = entity * michal;
                return entity;
            };
            oscard = {};
            oscard['scrollTop'] = kiloes;
            michal['__closure'] = oscard;
            oscard = 6997429707371.0;
            michal['__workletHash'] = oscard;
            oscard = _closure1_slot9;
            michal['__initData'] = oscard;
            oscard = zuuluu.bind(report)(michal);
            var _closure2_slot3 = oscard;
            michal = option[golfie];
            report = verify.bind(tangon)(michal);
            zuuluu = report.useAnimatedStyle;
            michal = function() { // Original name: I
                entity = {};
                michal = '100%';
                entity['width'] = michal;
                tangon = _closure2_slot1;
                entity['height'] = tangon;
                option = _closure1_slot0;
                offset = _closure1_slot2;
                report = 9;
                zuuluu = offset[report];
                golfie = undefined;
                foxtra = option.bind(golfie)(zuuluu);
                romeon = foxtra.interpolate;
                oscard = _closure2_slot0;
                zuuluu = oscard.get;
                echoed = zuuluu.bind(oscard)();
                zuuluu = _closure2_slot2;
                zuuluu = tangon - zuuluu;
                oscard = [0];
                oscard[1] = zuuluu;
                output = [1, 0];
                verify = 'clamp';
                update = foxtra;
                result = oscard;
                sizing = verify;
                zuuluu = update[romeon](echoed, result, output, sizing, kiloes);
                entity['opacity'] = zuuluu;
                zuuluu = {};
                oscard = offset[report];
                backup = option.bind(golfie)(oscard);
                foxtra = backup.interpolate;
                oscard = _closure2_slot3;
                michal = oscard.get;
                echoed = michal.bind(oscard)();
                yankee = [0];
                yankee[1] = tangon;
                kiloes = -tangon;
                michal = [0];
                michal[1] = kiloes;
                update = backup;
                result = yankee;
                output = michal;
                michal = update[foxtra](echoed, result, output, sizing, kiloes);
                zuuluu['translateY'] = michal;
                michal = new Array(2);
                michal[0] = zuuluu;
                zuuluu = {};
                report = offset[report];
                option = option.bind(golfie)(report);
                golfie = option.interpolate;
                report = oscard.get;
                echoed = report.bind(oscard)();
                report = [0];
                report[1] = tangon;
                output = [1, 1.08];
                update = option;
                result = report;
                tangon = update[golfie](echoed, result, output, sizing, kiloes);
                zuuluu['scale'] = tangon;
                michal[1] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            offset = {};
            offset['height'] = update;
            sizing = option[golfie];
            sizing = verify.bind(tangon)(sizing);
            sizing = sizing.interpolate;
            offset['interpolate'] = sizing;
            offset['scrollTop'] = kiloes;
            offset['safeAreaTop'] = backup;
            offset['scrollTopNegative'] = oscard;
            michal['__closure'] = offset;
            offset = 15738371977789.0;
            michal['__workletHash'] = offset;
            offset = _closure1_slot10;
            michal['__initData'] = offset;
            offset = zuuluu.bind(report)(michal);
            michal = option[golfie];
            zuuluu = verify.bind(tangon)(michal);
            michal = zuuluu.useAnimatedStyle;
            entity = function() { // Original name: b
                entity = {};
                zuuluu = {};
                option = _closure1_slot0;
                yankee = _closure1_slot2;
                report = 9;
                michal = yankee[report];
                golfie = undefined;
                kiloes = option.bind(golfie)(michal);
                backup = kiloes.interpolate;
                oscard = _closure2_slot3;
                verify = oscard.get;
                echoed = verify.bind(oscard)();
                michal = _closure2_slot1;
                romeon = [0];
                romeon[1] = michal;
                michal = -michal;
                offset = 1.20225424859375;
                verify = michal / offset;
                michal = [0];
                michal[1] = verify;
                verify = 'clamp';
                update = kiloes;
                result = romeon;
                output = michal;
                sizing = verify;
                michal = update[backup](echoed, result, output, sizing, kiloes);
                zuuluu['translateY'] = michal;
                michal = new Array(2);
                michal[0] = zuuluu;
                zuuluu = {};
                report = yankee[report];
                option = option.bind(golfie)(report);
                golfie = option.interpolate;
                report = oscard.get;
                echoed = report.bind(oscard)();
                tangon = _closure1_slot4;
                report = [0];
                report[1] = tangon;
                tangon = [1];
                tangon[1] = offset;
                update = option;
                result = report;
                output = tangon;
                tangon = update[golfie](echoed, result, output, sizing, kiloes);
                zuuluu['scale'] = tangon;
                michal[1] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            report = {};
            backup = option[golfie];
            backup = verify.bind(tangon)(backup);
            backup = backup.interpolate;
            report['interpolate'] = backup;
            report['scrollTopNegative'] = oscard;
            report['height'] = update;
            oscard = 1.20225424859375;
            report['ANIMATION_GOLDEN_RATIO'] = oscard;
            oscard = _closure1_slot4;
            report['AVATAR_SIZE'] = oscard;
            entity['__closure'] = report;
            report = 62412230968.0;
            entity['__workletHash'] = report;
            report = _closure1_slot11;
            entity['__initData'] = report;
            sizing = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot7;
            michal = _closure1_slot3;
            entity = {};
            report = foxtra.header;
            entity['style'] = report;
            report = option[golfie];
            report = output.bind(tangon)(report);
            oscard = report.View;
            report = {};
            report['style'] = offset;
            offset = _closure1_slot6;
            backup = option[golfie];
            backup = output.bind(tangon)(backup);
            kiloes = backup.Image;
            backup = {};
            echoed = {};
            ctrled = '100%';
            echoed['width'] = ctrled;
            echoed['height'] = update;
            backup['style'] = echoed;
            backup['source'] = result;
            kiloes = offset.bind(tangon)(kiloes, backup);
            backup = new Array(2);
            backup[0] = kiloes;
            kiloes = 10;
            kiloes = option[kiloes];
            result = output.bind(tangon)(kiloes);
            kiloes = {};
            echoed = {'x': 0, 'y': 0};
            kiloes['start'] = echoed;
            echoed = {'x': 0, 'y': 1};
            kiloes['end'] = echoed;
            echoed = foxtra.linearGradient;
            kiloes['style'] = echoed;
            echoed = ['rgba(0,0,0,0.7)', 'transparent'];
            kiloes['colors'] = echoed;
            kiloes = offset.bind(tangon)(result, kiloes);
            backup[1] = kiloes;
            report['children'] = backup;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            backup = foxtra.headerContent;
            oscard['style'] = backup;
            golfie = option[golfie];
            golfie = output.bind(tangon)(golfie);
            backup = golfie.View;
            golfie = {};
            result = foxtra.avatarContainer;
            kiloes = new Array(2);
            kiloes[0] = result;
            kiloes[1] = sizing;
            golfie['style'] = kiloes;
            result = 11;
            kiloes = option[result];
            sizing = output.bind(tangon)(kiloes);
            kiloes = {};
            echoed = foxtra.avatar;
            kiloes['style'] = echoed;
            kiloes['guild'] = source;
            result = option[result];
            result = verify.bind(tangon)(result);
            result = result.GuildIconSizes;
            result = result.XLARGE;
            kiloes['size'] = result;
            result = true;
            kiloes['animate'] = result;
            sizing = offset.bind(tangon)(sizing, kiloes);
            kiloes = new Array(2);
            kiloes[0] = sizing;
            sizing = 12;
            sizing = option[sizing];
            output = output.bind(tangon)(sizing);
            sizing = {};
            echoed = foxtra.featureIcon;
            sizing['style'] = echoed;
            sizing['guild'] = source;
            sizing['disableColor'] = result;
            sizing = offset.bind(tangon)(output, sizing);
            kiloes[1] = sizing;
            golfie['children'] = kiloes;
            backup = zuuluu.bind(tangon)(backup, golfie);
            golfie = new Array(3);
            golfie[0] = backup;
            backup = 13;
            option = option[backup];
            option = verify.bind(tangon)(option);
            verify = option.Text;
            option = {'style': null, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            kiloes = foxtra.headerTitle;
            option['style'] = kiloes;
            output = _closure1_slot0;
            kiloes = _closure1_slot2;
            sizing = 14;
            result = kiloes[sizing];
            result = output.bind(tangon)(result);
            update = result.intl;
            echoed = update.format;
            kiloes = kiloes[sizing];
            kiloes = output.bind(tangon)(kiloes);
            output = kiloes.t;
            if(yankee) { _fun00002_ip = 937; continue _fun00001 }
 909:
            result = output.VnxBOD;
            kiloes = {};
            ctrled = source.name;
            kiloes['guildName'] = ctrled;
            kiloes = echoed.bind(update)(result, kiloes);
            _fun00002_ip = 963; continue _fun00001;
 937:
            result = output.cgX47e;
            output = {};
            source = source.name;
            output['guildName'] = source;
            kiloes = echoed.bind(update)(result, output);
 963:
            option['children'] = kiloes;
            option = offset.bind(tangon)(verify, option);
            golfie[1] = option;
            offset = _closure1_slot6;
            verify = _closure1_slot0;
            option = _closure1_slot2;
            option = option[backup];
            option = verify.bind(tangon)(option);
            verify = option.Text;
            option = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            foxtra = foxtra.headerDescription;
            option['style'] = foxtra;
            kiloes = _closure1_slot0;
            romeon = _closure1_slot2;
            foxtra = romeon[sizing];
            foxtra = kiloes.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            romeon = romeon[sizing];
            romeon = kiloes.bind(tangon)(romeon);
            romeon = romeon.t;
            if(yankee) { _fun00002_ip = 1088; continue _fun00001 }
 1073:
            yankee = romeon.7D3C5u;
            yankee = foxtra.bind(backup)(yankee);
            _fun00002_ip = 1101; continue _fun00001;
 1088:
            romeon = romeon.3smSPD;
            yankee = foxtra.bind(backup)(romeon);
 1101:
            option['children'] = yankee;
            option = offset.bind(tangon)(verify, option);
            golfie[2] = option;
            oscard['children'] = golfie;
            oscard = zuuluu.bind(tangon)(michal, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();