// app/modules/guild_member_verification/native/components/MemberVerificationGuildHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    output = 0;
    golf = oscar[output];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    kilo = 2;
    tango = oscar[kilo];
    tango = report.bind(entity)(tango);
    foxtrot = tango.AVATAR_BORDER_WIDTH;
    backup = tango.AVATAR_SIZE;
    var _closure1_slot4 = backup;
    tango = tango.useBannerHeight;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flex': 1, 'flexDirection': 'column', 'justifyContent': 'flex-end', 'alignItems': 'center', 'marginBottom': 12};
    tango['header'] = verify;
    sizing = 20;
    romeo = 16;
    verify = {'alignItems': 'center', 'marginTop': 4294967248, 'paddingTop': 20, 'paddingBottom': 0, 'paddingHorizontal': 16};
    tango['headerContent'] = verify;
    verify = {'position': 'absolute', 'height': 140, 'top': 0, 'right': 0, 'left': 0};
    tango['linearGradient'] = verify;
    verify = {};
    offset = 5;
    result = oscar[offset];
    result = yankee.bind(entity)(result);
    result = result.radii;
    result = result.lg;
    verify['borderRadius'] = result;
    verify['borderWidth'] = output;
    result = oscar[offset];
    result = yankee.bind(entity)(result);
    result = result.colors;
    result = result.BACKGROUND_PRIMARY;
    verify['borderColor'] = result;
    verify['height'] = backup;
    verify['width'] = backup;
    verify['margin'] = output;
    output = oscar[offset];
    output = yankee.bind(entity)(output);
    output = output.colors;
    output = output.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = output;
    tango['avatar'] = verify;
    verify = {};
    verify['borderRadius'] = sizing;
    verify['borderWidth'] = foxtrot;
    sizing = oscar[offset];
    sizing = yankee.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BACKGROUND_PRIMARY;
    verify['borderColor'] = sizing;
    sizing = kilo * foxtrot;
    sizing = backup + sizing;
    verify['height'] = sizing;
    foxtrot = kilo * foxtrot;
    foxtrot = backup + foxtrot;
    verify['width'] = foxtrot;
    verify['marginBottom'] = romeo;
    romeo = -16;
    verify['marginTop'] = romeo;
    romeo = -4;
    verify['marginLeft'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    tango['avatarContainer'] = verify;
    verify = {'position': 'absolute', 'top': 56, 'right': 4294967288};
    tango['featureIcon'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 8};
    tango['headerTitle'] = verify;
    verify = {'lineHeight': 18, 'textAlign': 'center'};
    tango['headerDescription'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = {};
    golf = 'function MemberVerificationGuildHeaderTsx1(){const{scrollTop}=this.__closure;return scrollTop.get()*-1;}';
    tango['code'] = golf;
    var _closure1_slot9 = tango;
    tango = {};
    golf = "function MemberVerificationGuildHeaderTsx2(){const{height,interpolate,scrollTop,safeAreaTop,scrollTopNegative}=this.__closure;return{width:'100%',height:height,opacity:interpolate(scrollTop.get(),[0,height-safeAreaTop],[1,0],'clamp'),transform:[{translateY:interpolate(scrollTopNegative.get(),[0,height],[0,-height],'clamp')},{scale:interpolate(scrollTopNegative.get(),[0,height],[1,1.08],'clamp')}]};}";
    tango['code'] = golf;
    var _closure1_slot10 = tango;
    tango = {};
    golf = "function MemberVerificationGuildHeaderTsx3(){const{interpolate,scrollTopNegative,height,ANIMATION_GOLDEN_RATIO,AVATAR_SIZE}=this.__closure;return{transform:[{translateY:interpolate(scrollTopNegative.get(),[0,height],[0,-(height/ANIMATION_GOLDEN_RATIO)],'clamp')},{scale:interpolate(scrollTopNegative.get(),[0,AVATAR_SIZE],[1,ANIMATION_GOLDEN_RATIO],'clamp')}]};}";
    tango['code'] = golf;
    var _closure1_slot11 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_member_verification/native/components/MemberVerificationGuildHeader.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: MemberVerificationGuildHeader
        _fun88546: for(var _fun88546_ip = 0; ; ) switch(_fun88546_ip) {
 0:
            mike = argFoo;
            source = mike.guild;
            kilo = mike.scrollTop;
            var _closure2_slot0 = kilo;
            yankee = mike.hasManualFormFields;
            mike = _closure1_slot8;
            tango = undefined;
            foxtrot = mike.bind(tango)();
            zulu = source.banner;
            mike = null;
            if(!(mike == zulu)) { _fun88546_ip = 73; continue _fun88546 }
 51:
            zulu = _closure1_slot1;
            report = _closure1_slot2;
            mike = 7;
            mike = report[mike];
            result = zulu.bind(tango)(mike);
            _fun88546_ip = 104; continue _fun88546;
 73:
            zulu = _closure1_slot1;
            report = _closure1_slot2;
            mike = 6;
            mike = report[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.getGuildBannerSource;
            result = mike.bind(zulu)(source);
 104:
            mike = _closure1_slot5;
            update = mike.bind(tango)();
            var _closure2_slot1 = update;
            output = _closure1_slot1;
            options = _closure1_slot2;
            mike = 8;
            mike = options[mike];
            mike = output.bind(tango)(mike);
            mike = mike.bind(tango)();
            backup = mike.top;
            var _closure2_slot2 = backup;
            verify = _closure1_slot0;
            golf = 9;
            mike = options[golf];
            report = verify.bind(tango)(mike);
            zulu = report.useDerivedValue;
            mike = function() { // Original name: I
                mike = _closure2_slot0;
                entity = mike.get;
                mike = entity.bind(mike)();
                entity = -1;
                entity = entity * mike;
                return entity;
            };
            oscar = {};
            oscar['scrollTop'] = kilo;
            mike['__closure'] = oscar;
            oscar = 6997429707371.0;
            mike['__workletHash'] = oscar;
            oscar = _closure1_slot9;
            mike['__initData'] = oscar;
            oscar = zulu.bind(report)(mike);
            var _closure2_slot3 = oscar;
            mike = options[golf];
            report = verify.bind(tango)(mike);
            zulu = report.useAnimatedStyle;
            mike = function() { // Original name: N
                entity = {};
                mike = '100%';
                entity['width'] = mike;
                tango = _closure2_slot1;
                entity['height'] = tango;
                options = _closure1_slot0;
                offset = _closure1_slot2;
                report = 9;
                zulu = offset[report];
                golf = undefined;
                foxtrot = options.bind(golf)(zulu);
                romeo = foxtrot.interpolate;
                oscar = _closure2_slot0;
                zulu = oscar.get;
                echo = zulu.bind(oscar)();
                zulu = _closure2_slot2;
                zulu = tango - zulu;
                oscar = [0];
                oscar[1] = zulu;
                output = [1, 0];
                verify = 'clamp';
                update = foxtrot;
                result = oscar;
                sizing = verify;
                zulu = update[romeo](echo, result, output, sizing, kilo);
                entity['opacity'] = zulu;
                zulu = {};
                oscar = offset[report];
                backup = options.bind(golf)(oscar);
                foxtrot = backup.interpolate;
                oscar = _closure2_slot3;
                mike = oscar.get;
                echo = mike.bind(oscar)();
                yankee = [0];
                yankee[1] = tango;
                kilo = -tango;
                mike = [0];
                mike[1] = kilo;
                update = backup;
                result = yankee;
                output = mike;
                mike = update[foxtrot](echo, result, output, sizing, kilo);
                zulu['translateY'] = mike;
                mike = new Array(2);
                mike[0] = zulu;
                zulu = {};
                report = offset[report];
                options = options.bind(golf)(report);
                golf = options.interpolate;
                report = oscar.get;
                echo = report.bind(oscar)();
                report = [0];
                report[1] = tango;
                output = [1, 1.08];
                update = options;
                result = report;
                tango = update[golf](echo, result, output, sizing, kilo);
                zulu['scale'] = tango;
                mike[1] = zulu;
                entity['transform'] = mike;
                return entity;
            };
            offset = {};
            offset['height'] = update;
            sizing = options[golf];
            sizing = verify.bind(tango)(sizing);
            sizing = sizing.interpolate;
            offset['interpolate'] = sizing;
            offset['scrollTop'] = kilo;
            offset['safeAreaTop'] = backup;
            offset['scrollTopNegative'] = oscar;
            mike['__closure'] = offset;
            offset = 15738371977789.0;
            mike['__workletHash'] = offset;
            offset = _closure1_slot10;
            mike['__initData'] = offset;
            offset = zulu.bind(report)(mike);
            mike = options[golf];
            zulu = verify.bind(tango)(mike);
            mike = zulu.useAnimatedStyle;
            entity = function() { // Original name: R
                entity = {};
                zulu = {};
                options = _closure1_slot0;
                yankee = _closure1_slot2;
                report = 9;
                mike = yankee[report];
                golf = undefined;
                kilo = options.bind(golf)(mike);
                backup = kilo.interpolate;
                oscar = _closure2_slot3;
                verify = oscar.get;
                echo = verify.bind(oscar)();
                mike = _closure2_slot1;
                romeo = [0];
                romeo[1] = mike;
                mike = -mike;
                offset = 1.20225424859375;
                verify = mike / offset;
                mike = [0];
                mike[1] = verify;
                verify = 'clamp';
                update = kilo;
                result = romeo;
                output = mike;
                sizing = verify;
                mike = update[backup](echo, result, output, sizing, kilo);
                zulu['translateY'] = mike;
                mike = new Array(2);
                mike[0] = zulu;
                zulu = {};
                report = yankee[report];
                options = options.bind(golf)(report);
                golf = options.interpolate;
                report = oscar.get;
                echo = report.bind(oscar)();
                tango = _closure1_slot4;
                report = [0];
                report[1] = tango;
                tango = [1];
                tango[1] = offset;
                update = options;
                result = report;
                output = tango;
                tango = update[golf](echo, result, output, sizing, kilo);
                zulu['scale'] = tango;
                mike[1] = zulu;
                entity['transform'] = mike;
                return entity;
            };
            report = {};
            backup = options[golf];
            backup = verify.bind(tango)(backup);
            backup = backup.interpolate;
            report['interpolate'] = backup;
            report['scrollTopNegative'] = oscar;
            report['height'] = update;
            oscar = 1.20225424859375;
            report['ANIMATION_GOLDEN_RATIO'] = oscar;
            oscar = _closure1_slot4;
            report['AVATAR_SIZE'] = oscar;
            entity['__closure'] = report;
            report = 62412230968.0;
            entity['__workletHash'] = report;
            report = _closure1_slot11;
            entity['__initData'] = report;
            sizing = mike.bind(zulu)(entity);
            zulu = _closure1_slot7;
            mike = _closure1_slot3;
            entity = {};
            report = foxtrot.header;
            entity['style'] = report;
            report = options[golf];
            report = output.bind(tango)(report);
            oscar = report.View;
            report = {};
            report['style'] = offset;
            offset = _closure1_slot6;
            backup = options[golf];
            backup = output.bind(tango)(backup);
            kilo = backup.Image;
            backup = {};
            echo = {};
            control = '100%';
            echo['width'] = control;
            echo['height'] = update;
            backup['style'] = echo;
            backup['source'] = result;
            kilo = offset.bind(tango)(kilo, backup);
            backup = new Array(2);
            backup[0] = kilo;
            kilo = 10;
            kilo = options[kilo];
            result = output.bind(tango)(kilo);
            kilo = {};
            echo = {'x': 0, 'y': 0};
            kilo['start'] = echo;
            echo = {'x': 0, 'y': 1};
            kilo['end'] = echo;
            echo = foxtrot.linearGradient;
            kilo['style'] = echo;
            echo = ['rgba(0,0,0,0.7)', 'transparent'];
            kilo['colors'] = echo;
            kilo = offset.bind(tango)(result, kilo);
            backup[1] = kilo;
            report['children'] = backup;
            oscar = zulu.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            backup = foxtrot.headerContent;
            oscar['style'] = backup;
            golf = options[golf];
            golf = output.bind(tango)(golf);
            backup = golf.View;
            golf = {};
            result = foxtrot.avatarContainer;
            kilo = new Array(2);
            kilo[0] = result;
            kilo[1] = sizing;
            golf['style'] = kilo;
            result = 11;
            kilo = options[result];
            sizing = output.bind(tango)(kilo);
            kilo = {};
            echo = foxtrot.avatar;
            kilo['style'] = echo;
            kilo['guild'] = source;
            result = options[result];
            result = verify.bind(tango)(result);
            result = result.GuildIconSizes;
            result = result.XLARGE;
            kilo['size'] = result;
            result = true;
            kilo['animate'] = result;
            sizing = offset.bind(tango)(sizing, kilo);
            kilo = new Array(2);
            kilo[0] = sizing;
            sizing = 12;
            sizing = options[sizing];
            output = output.bind(tango)(sizing);
            sizing = {};
            echo = foxtrot.featureIcon;
            sizing['style'] = echo;
            sizing['guild'] = source;
            sizing['disableColor'] = result;
            sizing = offset.bind(tango)(output, sizing);
            kilo[1] = sizing;
            golf['children'] = kilo;
            backup = zulu.bind(tango)(backup, golf);
            golf = new Array(3);
            golf[0] = backup;
            backup = 13;
            options = options[backup];
            options = verify.bind(tango)(options);
            verify = options.Text;
            options = {'style': null, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            kilo = foxtrot.headerTitle;
            options['style'] = kilo;
            output = _closure1_slot0;
            kilo = _closure1_slot2;
            sizing = 14;
            result = kilo[sizing];
            result = output.bind(tango)(result);
            update = result.intl;
            echo = update.format;
            kilo = kilo[sizing];
            kilo = output.bind(tango)(kilo);
            output = kilo.t;
            if(yankee) { _fun88546_ip = 935; continue _fun88546 }
 909:
            result = output.VnxBOD;
            kilo = {};
            control = source.name;
            kilo['guildName'] = control;
            kilo = echo.bind(update)(result, kilo);
            _fun88546_ip = 959; continue _fun88546;
 935:
            result = output.cgX47e;
            output = {};
            source = source.name;
            output['guildName'] = source;
            kilo = echo.bind(update)(result, output);
 959:
            options['children'] = kilo;
            options = offset.bind(tango)(verify, options);
            golf[1] = options;
            offset = _closure1_slot6;
            verify = _closure1_slot0;
            options = _closure1_slot2;
            options = options[backup];
            options = verify.bind(tango)(options);
            verify = options.Text;
            options = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            foxtrot = foxtrot.headerDescription;
            options['style'] = foxtrot;
            kilo = _closure1_slot0;
            romeo = _closure1_slot2;
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            romeo = romeo[sizing];
            romeo = kilo.bind(tango)(romeo);
            romeo = romeo.t;
            if(yankee) { _fun88546_ip = 1082; continue _fun88546 }
 1069:
            yankee = romeo.7D3C5u;
            yankee = foxtrot.bind(backup)(yankee);
            _fun88546_ip = 1093; continue _fun88546;
 1082:
            romeo = romeo.3smSPD;
            yankee = foxtrot.bind(backup)(romeo);
 1093:
            options['children'] = yankee;
            options = offset.bind(tango)(verify, options);
            golf[2] = options;
            oscar['children'] = golf;
            oscar = zulu.bind(tango)(mike, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();