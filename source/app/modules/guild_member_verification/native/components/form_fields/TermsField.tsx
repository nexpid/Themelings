// app/modules/guild_member_verification/native/components/form_fields/TermsField.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    foxtra = 0;
    golfie = oscard[foxtra];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    romeon = tangon.Fonts;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'marginVertical': 12, 'flexDirection': 'column'};
    tangon['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'stretch', 'justifyContent': 'space-between', 'paddingTop': 0, 'paddingBottom': 0, 'paddingHorizontal': 0};
    offset = 5;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = backup;
    tangon['checkboxContainer'] = verify;
    verify = {};
    verify['marginLeft'] = foxtra;
    tangon['checkboxText'] = verify;
    verify = {};
    foxtra = 6;
    foxtra = oscard[foxtra];
    backup = yankee.bind(entity)(foxtra);
    foxtra = romeon.DISPLAY_SEMIBOLD;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    output = offset.HEADER_PRIMARY;
    offset = {};
    yankee = false;
    offset['uppercase'] = yankee;
    yankee = 16;
    echoed = undefined;
    result = foxtra;
    sizing = yankee;
    kiloes = offset;
    output = echoed[backup](result, output, sizing, kiloes, backup);
    result = verify;
    offset = copyDataProperties(result, output);
    offset = 'paddingBottom';
    verify[offset] = yankee;
    tangon['formHeader'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_member_verification/native/components/form_fields/TermsField.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: TermsField
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.field;
            zuuluu = michal.onChange;
            var _closure2_slot0 = zuuluu;
            verify = michal.rulesChannelId;
            tangon = undefined;
            var _closure2_slot1 = tangon;
            michal = _closure1_slot6;
            sizing = michal.bind(tangon)();
            offset = entity.values;
            entity = entity.response;
            michal = null;
            yankee = michal != entity;
            if(!yankee) { _fun00002_ip = 67; continue _fun00001 }
 64:
            yankee = entity;
 67:
            _closure2_slot1 = yankee;
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = sizing.container;
            entity['style'] = report;
            option = _closure1_slot4;
            golfie = _closure1_slot1;
            romeon = _closure1_slot2;
            report = 7;
            report = romeon[report];
            golfie = golfie.bind(tangon)(report);
            report = {};
            report['rules'] = offset;
            report['rulesChannelId'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            offset = _closure1_slot0;
            verify = 8;
            oscard = romeon[verify];
            oscard = offset.bind(tangon)(oscard);
            golfie = oscard.FormRow;
            oscard = {'start': true, 'end': true, 'accessibilityRole': 'checkbox'};
            backup = {};
            backup['checked'] = yankee;
            oscard['accessibilityState'] = backup;
            backup = 9;
            backup = romeon[backup];
            backup = offset.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {'style': null, 'variant': 'text-md/semibold', 'color': 'header-primary'};
            sizing = sizing.checkboxText;
            backup['style'] = sizing;
            sizing = 10;
            output = romeon[sizing];
            output = offset.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = romeon[sizing];
            sizing = offset.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.2EXfGB;
            sizing = output.bind(result)(sizing);
            backup['children'] = sizing;
            backup = option.bind(tangon)(kiloes, backup);
            oscard['label'] = backup;
            foxtra = function() { // Original name: onPress
                zuuluu = _closure2_slot0;
                entity = _closure2_slot1;
                michal = !entity;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            oscard['onPress'] = foxtra;
            verify = romeon[verify];
            verify = offset.bind(tangon)(verify);
            verify = verify.FormRow;
            offset = verify.Checkbox;
            verify = {};
            verify['selected'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            oscard['leading'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();