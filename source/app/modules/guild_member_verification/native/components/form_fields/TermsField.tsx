// app/modules/guild_member_verification/native/components/form_fields/TermsField.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    foxtrot = 0;
    golf = oscar[foxtrot];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    romeo = tango.Fonts;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'marginTop': 32, 'marginBottom': 20, 'flexDirection': 'column'};
    tango['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'stretch', 'justifyContent': 'space-between', 'paddingTop': 0, 'paddingBottom': 0, 'paddingHorizontal': 0};
    offset = 5;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = backup;
    tango['checkboxContainer'] = verify;
    verify = {};
    verify['marginLeft'] = foxtrot;
    tango['checkboxText'] = verify;
    verify = {};
    foxtrot = 6;
    foxtrot = oscar[foxtrot];
    backup = yankee.bind(entity)(foxtrot);
    foxtrot = romeo.DISPLAY_SEMIBOLD;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    output = offset.HEADER_PRIMARY;
    offset = {};
    yankee = false;
    offset['uppercase'] = yankee;
    yankee = 16;
    echo = undefined;
    result = foxtrot;
    sizing = yankee;
    kilo = offset;
    output = echo[backup](result, output, sizing, kilo, backup);
    result = verify;
    offset = copyDataProperties(result, output);
    offset = 'paddingBottom';
    verify[offset] = yankee;
    tango['formHeader'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_member_verification/native/components/form_fields/TermsField.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: TermsField
        _fun88580: for(var _fun88580_ip = 0; ; ) switch(_fun88580_ip) {
 0:
            mike = argFoo;
            entity = mike.field;
            zulu = mike.onChange;
            var _closure2_slot0 = zulu;
            verify = mike.rulesChannelId;
            tango = undefined;
            var _closure2_slot1 = tango;
            mike = _closure1_slot6;
            foxtrot = mike.bind(tango)();
            offset = entity.values;
            entity = entity.response;
            mike = null;
            yankee = mike != entity;
            if(!yankee) { _fun88580_ip = 67; continue _fun88580 }
 64:
            yankee = entity;
 67:
            _closure2_slot1 = yankee;
            zulu = _closure1_slot5;
            mike = _closure1_slot3;
            entity = {};
            report = foxtrot.container;
            entity['style'] = report;
            options = _closure1_slot4;
            golf = _closure1_slot1;
            romeo = _closure1_slot2;
            report = 7;
            report = romeo[report];
            golf = golf.bind(tango)(report);
            report = {};
            report['rules'] = offset;
            report['rulesChannelId'] = verify;
            golf = options.bind(tango)(golf, report);
            report = new Array(2);
            report[0] = golf;
            offset = _closure1_slot0;
            verify = 8;
            oscar = romeo[verify];
            oscar = offset.bind(tango)(oscar);
            golf = oscar.FormRow;
            oscar = {};
            kilo = 'checkbox';
            oscar['accessibilityRole'] = kilo;
            kilo = {};
            kilo['checked'] = yankee;
            oscar['accessibilityState'] = kilo;
            kilo = 9;
            kilo = romeo[kilo];
            kilo = offset.bind(tango)(kilo);
            sizing = kilo.Text;
            kilo = {'style': null, 'variant': 'text-md/semibold', 'color': 'header-primary'};
            output = foxtrot.checkboxText;
            kilo['style'] = output;
            output = 10;
            result = romeo[output];
            result = offset.bind(tango)(result);
            echo = result.intl;
            result = echo.string;
            output = romeo[output];
            output = offset.bind(tango)(output);
            output = output.t;
            output = output.2EXfGB;
            output = result.bind(echo)(output);
            kilo['children'] = output;
            kilo = options.bind(tango)(sizing, kilo);
            oscar['label'] = kilo;
            backup = function() { // Original name: onPress
                zulu = _closure2_slot0;
                entity = _closure2_slot1;
                mike = !entity;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            oscar['onPress'] = backup;
            foxtrot = foxtrot.checkboxContainer;
            oscar['DEPRECATED_style'] = foxtrot;
            verify = romeo[verify];
            verify = offset.bind(tango)(verify);
            verify = verify.FormRow;
            offset = verify.Checkbox;
            verify = {};
            verify['selected'] = yankee;
            verify = options.bind(tango)(offset, verify);
            oscar['leading'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();