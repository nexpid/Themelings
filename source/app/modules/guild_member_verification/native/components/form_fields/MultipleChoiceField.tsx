// app/modules/guild_member_verification/native/components/form_fields/MultipleChoiceField.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    romeon = tangon.Fonts;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'marginVertical': 12, 'flexDirection': 'column'};
    tangon['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'stretch', 'justifyContent': 'space-between', 'padding': 8, 'marginVertical': 4};
    offset = 5;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xs;
    verify['borderRadius'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtra;
    tangon['checkboxContainer'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.unsafe_rawColors;
    foxtra = foxtra.BRAND_400;
    verify['backgroundColor'] = foxtra;
    tangon['checkboxRowSelected'] = verify;
    verify = {};
    foxtra = 0.5;
    verify['opacity'] = foxtra;
    tangon['checkboxRowActive'] = verify;
    verify = {'marginLeft': 0, 'fontSize': 16};
    foxtra = 16;
    backup = romeon.PRIMARY_MEDIUM;
    verify['fontFamily'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    verify['color'] = backup;
    tangon['checkboxText'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.WHITE;
    verify['color'] = backup;
    backup = romeon.PRIMARY_SEMIBOLD;
    verify['fontFamily'] = backup;
    tangon['checkboxTextActive'] = verify;
    verify = {};
    backup = 6;
    backup = oscard[backup];
    sizing = yankee.bind(entity)(backup);
    kiloes = romeon.DISPLAY_SEMIBOLD;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    update = romeon.HEADER_PRIMARY;
    romeon = {};
    output = false;
    romeon['uppercase'] = output;
    ctrled = undefined;
    source = kiloes;
    echoed = foxtra;
    result = romeon;
    update = ctrled[sizing](source, update, echoed, result, output);
    source = verify;
    romeon = copyDataProperties(source, update);
    romeon = 'paddingBottom';
    verify[romeon] = foxtra;
    tangon['formHeader'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = offset;
    tangon['radio'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_member_verification/native/components/form_fields/MultipleChoiceField.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: MultipleChoiceField
        entity = argFoo;
        michal = entity.field;
        entity = entity.onChange;
        var _closure2_slot0 = entity;
        entity = _closure1_slot7;
        tangon = undefined;
        verify = entity.bind(tangon)();
        backup = michal.label;
        entity = michal.choices;
        var _closure2_slot1 = entity;
        yankee = michal.response;
        report = _closure1_slot3;
        zuuluu = report.useMemo;
        michal = new Array(1);
        michal[0] = entity;
        entity = function() {
            zuuluu = _closure2_slot1;
            michal = zuuluu.map;
            entity = function(argFoo, argBar) {
                entity = {};
                michal = argFoo;
                entity['name'] = michal;
                michal = argBar;
                entity['value'] = michal;
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        offset = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot6;
        michal = _closure1_slot4;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        option = _closure1_slot5;
        golfie = _closure1_slot0;
        foxtra = _closure1_slot2;
        report = 7;
        report = foxtra[report];
        report = golfie.bind(tangon)(report);
        golfie = report.Text;
        report = {'style': null, 'variant': 'heading-md/semibold', 'color': 'header-primary'};
        kiloes = verify.formHeader;
        report['style'] = kiloes;
        report['children'] = backup;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        golfie = _closure1_slot1;
        oscard = 8;
        oscard = foxtra[oscard];
        golfie = golfie.bind(tangon)(oscard);
        oscard = {};
        romeon = function(argFoo) { // Original name: onChange
            zuuluu = _closure2_slot0;
            entity = argFoo;
            michal = entity.value;
            entity = undefined;
            entity = zuuluu.bind(entity)(michal);
            return entity;
        };
        oscard['onChange'] = romeon;
        oscard['value'] = yankee;
        oscard['options'] = offset;
        offset = true;
        oscard['withSpacing'] = offset;
        verify = verify.radio;
        oscard['style'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();