// app/modules/guild_member_verification/native/components/form_fields/MultipleChoiceField.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    offset = tangon.Fonts;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'marginVertical': 12, 'flexDirection': 'column'};
    tangon['container'] = verify;
    verify = {};
    romeon = 5;
    romeon = oscard[romeon];
    backup = yankee.bind(entity)(romeon);
    foxtra = offset.DISPLAY_SEMIBOLD;
    offset = 6;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    output = offset.HEADER_PRIMARY;
    offset = {};
    yankee = false;
    offset['uppercase'] = yankee;
    yankee = 16;
    echoed = undefined;
    result = foxtra;
    sizing = yankee;
    kiloes = offset;
    output = echoed[backup](result, output, sizing, kiloes, backup);
    result = verify;
    offset = copyDataProperties(result, output);
    offset = 'paddingBottom';
    verify[offset] = yankee;
    tangon['formHeader'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_member_verification/native/components/form_fields/MultipleChoiceField.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: MultipleChoiceField
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.field;
            entity = entity.onChange;
            var _closure2_slot0 = entity;
            entity = _closure1_slot6;
            tangon = undefined;
            backup = entity.bind(tangon)();
            foxtra = michal.label;
            entity = michal.choices;
            var _closure2_slot1 = entity;
            romeon = michal.response;
            oscard = _closure1_slot2;
            zuuluu = oscard.useMemo;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure2_slot1;
                michal = zuuluu.map;
                entity = function(argFoo, argBar) {
                    entity = {};
                    michal = argFoo;
                    entity['name'] = michal;
                    michal = argBar;
                    entity['value'] = michal;
                    return entity;
                };
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            yankee = zuuluu.bind(oscard)(entity, michal);
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            oscard = backup.container;
            entity['style'] = oscard;
            option = _closure1_slot4;
            golfie = _closure1_slot0;
            offset = _closure1_slot1;
            report = 7;
            report = offset[report];
            report = golfie.bind(tangon)(report);
            oscard = report.Text;
            report = {'style': null, 'variant': 'heading-md/semibold', 'color': 'header-primary'};
            backup = backup.formHeader;
            report['style'] = backup;
            report['children'] = foxtra;
            oscard = option.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = 8;
            oscard = offset[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.TableRadioGroup;
            oscard = {};
            offset = null;
            foxtra = offset != romeon;
            offset = -1;
            if(!foxtra) { _fun00002_ip = 215; continue _fun00001 }
 212:
            offset = romeon;
 215:
            oscard['value'] = offset;
            offset = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot0;
                michal = undefined;
                entity = argFoo;
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            oscard['onChange'] = offset;
            offset = false;
            oscard['hasIcons'] = offset;
            offset = yankee.map;
            verify = function(argFoo) {
                entity = argFoo;
                report = _closure1_slot4;
                zuuluu = _closure1_slot0;
                tangon = _closure1_slot1;
                michal = 9;
                michal = tangon[michal];
                tangon = undefined;
                michal = zuuluu.bind(tangon)(michal);
                zuuluu = michal.TableRadioRow;
                michal = {};
                oscard = entity.name;
                michal['label'] = oscard;
                oscard = entity.value;
                michal['value'] = oscard;
                entity = entity.value;
                entity = report.bind(tangon)(zuuluu, michal, entity);
                return entity;
            };
            verify = offset.bind(yankee)(verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();