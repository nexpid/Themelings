// app/modules/guild_member_verification/native/components/form_fields/MultipleChoiceField.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    romeo = tango.Fonts;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'marginVertical': 12, 'flexDirection': 'column'};
    tango['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'stretch', 'justifyContent': 'space-between', 'padding': 8, 'marginVertical': 4};
    offset = 5;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.xs;
    verify['borderRadius'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtrot;
    tango['checkboxContainer'] = verify;
    verify = {};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.unsafe_rawColors;
    foxtrot = foxtrot.BRAND_400;
    verify['backgroundColor'] = foxtrot;
    tango['checkboxRowSelected'] = verify;
    verify = {};
    foxtrot = 0.5;
    verify['opacity'] = foxtrot;
    tango['checkboxRowActive'] = verify;
    verify = {'marginLeft': 0, 'fontSize': 16};
    foxtrot = 16;
    backup = romeo.PRIMARY_MEDIUM;
    verify['fontFamily'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    verify['color'] = backup;
    tango['checkboxText'] = verify;
    verify = {};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.WHITE;
    verify['color'] = backup;
    backup = romeo.PRIMARY_SEMIBOLD;
    verify['fontFamily'] = backup;
    tango['checkboxTextActive'] = verify;
    verify = {};
    backup = 6;
    backup = oscar[backup];
    sizing = yankee.bind(entity)(backup);
    kilo = romeo.DISPLAY_SEMIBOLD;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    update = romeo.HEADER_PRIMARY;
    romeo = {};
    output = false;
    romeo['uppercase'] = output;
    control = undefined;
    source = kilo;
    echo = foxtrot;
    result = romeo;
    update = control[sizing](source, update, echo, result, output);
    source = verify;
    romeo = copyDataProperties(source, update);
    romeo = 'paddingBottom';
    verify[romeo] = foxtrot;
    tango['formHeader'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = offset;
    tango['radio'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_member_verification/native/components/form_fields/MultipleChoiceField.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: MultipleChoiceField
        entity = argFoo;
        mike = entity.field;
        entity = entity.onChange;
        var _closure2_slot0 = entity;
        entity = _closure1_slot7;
        tango = undefined;
        verify = entity.bind(tango)();
        backup = mike.label;
        entity = mike.choices;
        var _closure2_slot1 = entity;
        yankee = mike.response;
        report = _closure1_slot3;
        zulu = report.useMemo;
        mike = new Array(1);
        mike[0] = entity;
        entity = function() {
            zulu = _closure2_slot1;
            mike = zulu.map;
            entity = function(argFoo, argBar) {
                entity = {};
                mike = argFoo;
                entity['name'] = mike;
                mike = argBar;
                entity['value'] = mike;
                return entity;
            };
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        offset = zulu.bind(report)(entity, mike);
        zulu = _closure1_slot6;
        mike = _closure1_slot4;
        entity = {};
        report = verify.container;
        entity['style'] = report;
        options = _closure1_slot5;
        golf = _closure1_slot0;
        foxtrot = _closure1_slot2;
        report = 7;
        report = foxtrot[report];
        report = golf.bind(tango)(report);
        golf = report.Text;
        report = {'style': null, 'variant': 'heading-md/semibold', 'color': 'header-primary'};
        kilo = verify.formHeader;
        report['style'] = kilo;
        report['children'] = backup;
        golf = options.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        golf = _closure1_slot1;
        oscar = 8;
        oscar = foxtrot[oscar];
        golf = golf.bind(tango)(oscar);
        oscar = {};
        romeo = function(argFoo) { // Original name: onChange
            zulu = _closure2_slot0;
            entity = argFoo;
            mike = entity.value;
            entity = undefined;
            entity = zulu.bind(entity)(mike);
            return entity;
        };
        oscar['onChange'] = romeo;
        oscar['value'] = yankee;
        oscar['options'] = offset;
        offset = true;
        oscar['withSpacing'] = offset;
        verify = verify.radio;
        oscar['style'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();