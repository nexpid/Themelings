// app/modules/guild_member_verification/native/components/form_fields/ParagraphField.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot2 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.MAX_PARAGRAPH_RESPONSE_LENGTH;
    var _closure1_slot3 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    romeo = tango.Fonts;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'marginVertical': 12, 'flexDirection': 'column'};
    tango['container'] = verify;
    verify = {};
    tango['fieldDescription'] = verify;
    verify = {'padding': 8, 'width': '100%', 'borderRadius': null, 'lineHeight': 20};
    offset = 6;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.xs;
    verify['borderRadius'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = foxtrot;
    tango['textInput'] = verify;
    verify = {};
    foxtrot = 7;
    foxtrot = oscar[foxtrot];
    backup = yankee.bind(entity)(foxtrot);
    foxtrot = romeo.DISPLAY_SEMIBOLD;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    output = offset.HEADER_PRIMARY;
    offset = {};
    yankee = false;
    offset['uppercase'] = yankee;
    yankee = 16;
    echo = undefined;
    result = foxtrot;
    sizing = yankee;
    kilo = offset;
    output = echo[backup](result, output, sizing, kilo, backup);
    result = verify;
    offset = copyDataProperties(result, output);
    offset = 'paddingBottom';
    verify[offset] = yankee;
    tango['formHeader'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_member_verification/native/components/form_fields/ParagraphField.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ParagraphField
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            entity = mike.field;
            verify = mike.onChange;
            mike = _closure1_slot6;
            tango = undefined;
            foxtrot = mike.bind(tango)();
            kilo = entity.label;
            offset = entity.placeholder;
            romeo = entity.response;
            zulu = _closure1_slot5;
            mike = _closure1_slot2;
            entity = {};
            report = foxtrot.container;
            entity['style'] = report;
            options = _closure1_slot4;
            golf = _closure1_slot0;
            backup = _closure1_slot1;
            report = 8;
            report = backup[report];
            report = golf.bind(tango)(report);
            oscar = report.Text;
            report = {'style': null, 'variant': 'heading-md/semibold', 'color': 'header-primary'};
            sizing = foxtrot.formHeader;
            report['style'] = sizing;
            report['children'] = kilo;
            oscar = options.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = 9;
            oscar = backup[oscar];
            oscar = golf.bind(tango)(oscar);
            golf = oscar.FormInput;
            oscar = {'style': null, 'showTopContainer': false, 'showBorder': false, 'multiline': true, 'showCharactersRemaining': true, 'numberOfLines': 3};
            foxtrot = foxtrot.textInput;
            oscar['style'] = foxtrot;
            yankee = _closure1_slot3;
            oscar['maxLength'] = yankee;
            yankee = null;
            foxtrot = yankee != romeo;
            yankee = '';
            if(!foxtrot) { _fun00002_ip = 206; continue _fun00001 }
 203:
            yankee = romeo;
 206:
            oscar['value'] = yankee;
            oscar['placeholder'] = offset;
            oscar['onChange'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();