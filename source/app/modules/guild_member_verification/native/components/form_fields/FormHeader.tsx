// app/modules/guild_member_verification/native/components/form_fields/FormHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    offset = true;
    tangon['value'] = offset;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.Fonts;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot2 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    foxtra = 4;
    foxtra = oscard[foxtra];
    backup = romeon.bind(entity)(foxtra);
    foxtra = yankee.DISPLAY_EXTRABOLD;
    yankee = 5;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    output = yankee.HEADER_SECONDARY;
    yankee = {};
    yankee['uppercase'] = offset;
    sizing = 12;
    echoed = undefined;
    result = foxtra;
    kiloes = yankee;
    output = echoed[backup](result, output, sizing, kiloes, backup);
    result = verify;
    offset = copyDataProperties(result, output);
    yankee = 8;
    offset = 'paddingBottom';
    verify[offset] = yankee;
    tangon['fieldHeader'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_member_verification/native/components/form_fields/FormHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: FormHeader
        zuuluu = argFoo;
        oscard = zuuluu.children;
        entity = null;
        michal = Object.create(entity);
        entity = 0;
        michal['children'] = entity;
        yankee = {};
        offset = zuuluu;
        verify = michal;
        report = copyDataProperties(yankee, offset, verify);
        michal = _closure1_slot3;
        tangon = undefined;
        golfie = michal.bind(tangon)();
        zuuluu = _closure1_slot2;
        michal = _closure1_slot0;
        option = _closure1_slot1;
        entity = 6;
        entity = option[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.LegacyText;
        entity = {};
        yankee = entity;
        offset = report;
        option = copyDataProperties(yankee, offset);
        option = golfie.fieldHeader;
        golfie = new Array(2);
        golfie[0] = option;
        report = report.style;
        golfie[1] = report;
        report = 'style';
        entity[report] = golfie;
        report = 'children';
        entity[report] = oscard;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();