// app/modules/guild_member_verification/native/components/form_fields/TermsFieldList.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: TermsFieldListItem
        entity = argFoo;
        result = entity.rowNumber;
        foxtra = entity.rule;
        verify = entity.rulesChannelId;
        entity = _closure1_slot8;
        tangon = undefined;
        yankee = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot4;
        entity = {};
        report = yankee.termsRow;
        entity['style'] = report;
        backup = _closure1_slot5;
        golfie = _closure1_slot0;
        romeon = _closure1_slot2;
        oscard = 5;
        report = romeon[oscard];
        report = golfie.bind(tangon)(report);
        option = report.Text;
        report = {'style': null, 'variant': 'text-sm/medium', 'color': 'text-muted'};
        kiloes = yankee.termsRowNumber;
        report['style'] = kiloes;
        kiloes = global;
        kiloes = kiloes.HermesInternal;
        output = kiloes.concat;
        sizing = '';
        kiloes = '.';
        kiloes = output.bind(sizing)(result, kiloes);
        report['children'] = kiloes;
        option = backup.bind(tangon)(option, report);
        report = new Array(2);
        report[0] = option;
        option = _closure1_slot5;
        oscard = romeon[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {};
        yankee = yankee.termsRowContent;
        oscard['style'] = yankee;
        yankee = 'text-md/medium';
        oscard['variant'] = yankee;
        yankee = _closure1_slot1;
        offset = 6;
        offset = romeon[offset];
        romeon = yankee.bind(tangon)(offset);
        yankee = romeon.parseGuildVerificationFormRule;
        offset = {};
        offset['channelId'] = verify;
        verify = true;
        verify = yankee.bind(romeon)(foxtra, verify, offset);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'padding': 16, 'flexDirection': 'column', 'justifyContent': 'space-between'};
    offset = 16;
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.CARD_PRIMARY_BG;
    verify['backgroundColor'] = foxtra;
    tangon['termsContainer'] = verify;
    verify = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    verify['borderTopLeftRadius'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    verify['borderTopRightRadius'] = foxtra;
    tangon['firstItem'] = verify;
    verify = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    verify['borderBottomLeftRadius'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.sm;
    verify['borderBottomRightRadius'] = yankee;
    yankee = 12;
    verify['marginBottom'] = yankee;
    tangon['lastItem'] = verify;
    verify = {};
    yankee = 'row';
    verify['flexDirection'] = yankee;
    tangon['termsRow'] = verify;
    verify = {'flex': 1, 'lineHeight': 20};
    tangon['termsRowContent'] = verify;
    yankee = 8;
    verify = {'paddingRight': 8, 'width': 20, 'height': 20};
    tangon['termsRowNumber'] = verify;
    verify = {};
    verify['marginBottom'] = yankee;
    tangon['countText'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['title'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_member_verification/native/components/form_fields/TermsFieldList.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: TermsFieldList
        entity = argFoo;
        option = entity.rules;
        var _closure2_slot0 = option;
        entity = entity.rulesChannelId;
        var _closure2_slot1 = entity;
        entity = _closure1_slot8;
        tangon = undefined;
        offset = entity.bind(tangon)();
        var _closure2_slot2 = offset;
        zuuluu = _closure1_slot6;
        michal = _closure1_slot7;
        entity = {};
        verify = _closure1_slot5;
        foxtra = _closure1_slot0;
        backup = _closure1_slot2;
        report = 5;
        report = backup[report];
        report = foxtra.bind(tangon)(report);
        golfie = report.Text;
        report = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-md/semibold', 'color': 'header-primary'};
        offset = offset.title;
        report['style'] = offset;
        offset = 7;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = backup[offset];
        offset = foxtra.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.prJqwc;
        offset = yankee.bind(romeon)(offset);
        report['children'] = offset;
        golfie = verify.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        golfie = option.map;
        oscard = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                verify = argFoo;
                option = argBar;
                report = _closure1_slot6;
                entity = _closure1_slot3;
                tangon = entity.Fragment;
                zuuluu = {};
                foxtra = _closure1_slot5;
                romeon = _closure1_slot4;
                entity = {};
                michal = _closure2_slot2;
                oscard = michal.termsContainer;
                michal = new Array(3);
                michal[0] = oscard;
                backup = 0;
                yankee = null;
                if(!(backup === option)) { _fun00002_ip = 73; continue _fun00001 }
 63:
                backup = _closure2_slot2;
                yankee = backup.firstItem;
 73:
                michal[1] = yankee;
                yankee = _closure2_slot0;
                backup = yankee.length;
                yankee = 1;
                kiloes = backup - yankee;
                backup = null;
                if(!(option === kiloes)) { _fun00002_ip = 109; continue _fun00001 }
 99:
                kiloes = _closure2_slot2;
                backup = kiloes.lastItem;
 109:
                michal[2] = backup;
                entity['style'] = michal;
                sizing = _closure1_slot5;
                kiloes = _closure1_slot9;
                backup = {};
                backup['rule'] = verify;
                michal = option + yankee;
                backup['rowNumber'] = michal;
                michal = _closure2_slot1;
                backup['rulesChannelId'] = michal;
                michal = undefined;
                backup = sizing.bind(michal)(kiloes, backup);
                entity['children'] = backup;
                romeon = foxtra.bind(michal)(romeon, entity);
                entity = new Array(2);
                entity[0] = romeon;
                offset = _closure2_slot0;
                offset = offset.length;
                offset = offset - yankee;
                oscard = null;
                if(!(option !== offset)) { _fun00002_ip = 233; continue _fun00001 }
 195:
                yankee = _closure1_slot5;
                offset = _closure1_slot0;
                romeon = _closure1_slot2;
                golfie = 8;
                golfie = romeon[golfie];
                golfie = offset.bind(michal)(golfie);
                offset = golfie.TableRowDivider;
                golfie = {};
                oscard = yankee.bind(michal)(offset, golfie);
 233:
                entity[1] = oscard;
                zuuluu['children'] = entity;
                entity = global;
                entity = entity.HermesInternal;
                golfie = entity.concat;
                oscard = 'term-';
                entity = '-';
                entity = golfie.bind(oscard)(verify, entity, option);
                entity = report.bind(michal)(tangon, zuuluu, entity);
                return entity;
            }
        };
        oscard = golfie.bind(option)(oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();