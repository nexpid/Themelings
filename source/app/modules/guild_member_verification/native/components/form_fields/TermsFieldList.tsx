// app/modules/guild_member_verification/native/components/form_fields/TermsFieldList.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: TermsFieldListItem
        entity = argFoo;
        result = entity.rowNumber;
        foxtrot = entity.rule;
        verify = entity.rulesChannelId;
        entity = _closure1_slot8;
        tango = undefined;
        yankee = entity.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot4;
        entity = {};
        report = yankee.termsRow;
        entity['style'] = report;
        backup = _closure1_slot5;
        golf = _closure1_slot0;
        romeo = _closure1_slot2;
        oscar = 5;
        report = romeo[oscar];
        report = golf.bind(tango)(report);
        options = report.Text;
        report = {'style': null, 'variant': 'text-sm/medium', 'color': 'text-muted'};
        kilo = yankee.termsRowNumber;
        report['style'] = kilo;
        kilo = global;
        kilo = kilo.HermesInternal;
        output = kilo.concat;
        sizing = '';
        kilo = '.';
        kilo = output.bind(sizing)(result, kilo);
        report['children'] = kilo;
        options = backup.bind(tango)(options, report);
        report = new Array(2);
        report[0] = options;
        options = _closure1_slot5;
        oscar = romeo[oscar];
        oscar = golf.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {};
        yankee = yankee.termsRowContent;
        oscar['style'] = yankee;
        yankee = 'text-md/medium';
        oscar['variant'] = yankee;
        yankee = _closure1_slot1;
        offset = 6;
        offset = romeo[offset];
        romeo = yankee.bind(tango)(offset);
        yankee = romeo.parseGuildVerificationFormRule;
        offset = {};
        offset['channelId'] = verify;
        verify = true;
        verify = yankee.bind(romeo)(foxtrot, verify, offset);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    offset = 1;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot7 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'paddingTop': 6, 'paddingBottom': 6, 'paddingLeft': 16, 'paddingRight': 16, 'flexDirection': 'column', 'justifyContent': 'space-between', 'backgroundColor': null, 'borderColor': null, 'borderWidth': 1};
    foxtrot = 16;
    yankee = 4;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    verify['borderColor'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_SECONDARY;
    verify['borderBottomColor'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_SECONDARY;
    verify['borderTopColor'] = backup;
    tango['termsContainer'] = verify;
    verify = {};
    verify['paddingTop'] = foxtrot;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderTopLeftRadius'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderTopRightRadius'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    verify['borderTopColor'] = backup;
    tango['firstItem'] = verify;
    verify = {};
    verify['paddingBottom'] = foxtrot;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderBottomLeftRadius'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderBottomRightRadius'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    verify['borderBottomColor'] = backup;
    backup = 24;
    verify['marginBottom'] = backup;
    tango['lastItem'] = verify;
    verify = {};
    backup = 'row';
    verify['flexDirection'] = backup;
    tango['termsRow'] = verify;
    verify = {'flex': 1, 'lineHeight': 20};
    tango['termsRowContent'] = verify;
    backup = 8;
    verify = {'paddingRight': 8, 'width': 20, 'height': 20};
    tango['termsRowNumber'] = verify;
    verify = {};
    verify['marginBottom'] = backup;
    tango['countText'] = verify;
    verify = {};
    verify['marginBottom'] = foxtrot;
    tango['title'] = verify;
    verify = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_TERTIARY;
    verify['borderColor'] = yankee;
    verify['borderLeftWidth'] = offset;
    verify['borderRightWidth'] = offset;
    tango['separator'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_member_verification/native/components/form_fields/TermsFieldList.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: TermsFieldList
        entity = argFoo;
        options = entity.rules;
        var _closure2_slot0 = options;
        entity = entity.rulesChannelId;
        var _closure2_slot1 = entity;
        entity = _closure1_slot8;
        tango = undefined;
        offset = entity.bind(tango)();
        var _closure2_slot2 = offset;
        zulu = _closure1_slot6;
        mike = _closure1_slot7;
        entity = {};
        verify = _closure1_slot5;
        foxtrot = _closure1_slot0;
        backup = _closure1_slot2;
        report = 5;
        report = backup[report];
        report = foxtrot.bind(tango)(report);
        golf = report.Text;
        report = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-md/semibold', 'color': 'header-primary'};
        offset = offset.title;
        report['style'] = offset;
        offset = 7;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        romeo = yankee.intl;
        yankee = romeo.string;
        offset = backup[offset];
        offset = foxtrot.bind(tango)(offset);
        offset = offset.t;
        offset = offset.prJqwc;
        offset = yankee.bind(romeo)(offset);
        report['children'] = offset;
        golf = verify.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        golf = options.map;
        oscar = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                verify = argFoo;
                options = argBar;
                report = _closure1_slot6;
                entity = _closure1_slot3;
                tango = entity.Fragment;
                zulu = {};
                golf = _closure1_slot5;
                oscar = _closure1_slot4;
                entity = {};
                mike = _closure2_slot2;
                offset = mike.termsContainer;
                mike = new Array(3);
                mike[0] = offset;
                backup = 0;
                offset = null;
                if(!(backup === options)) { _fun00002_ip = 73; continue _fun00001 }
 63:
                backup = _closure2_slot2;
                offset = backup.firstItem;
 73:
                mike[1] = offset;
                offset = _closure2_slot0;
                offset = offset.length;
                backup = 1;
                kilo = offset - backup;
                offset = null;
                if(!(options === kilo)) { _fun00002_ip = 109; continue _fun00001 }
 99:
                kilo = _closure2_slot2;
                offset = kilo.lastItem;
 109:
                mike[2] = offset;
                entity['style'] = mike;
                sizing = _closure1_slot5;
                kilo = _closure1_slot9;
                offset = {};
                offset['rule'] = verify;
                mike = options + backup;
                offset['rowNumber'] = mike;
                mike = _closure2_slot1;
                offset['rulesChannelId'] = mike;
                mike = undefined;
                offset = sizing.bind(mike)(kilo, offset);
                entity['children'] = offset;
                oscar = golf.bind(mike)(oscar, entity);
                entity = new Array(2);
                entity[0] = oscar;
                offset = _closure1_slot5;
                golf = _closure1_slot4;
                oscar = {};
                kilo = _closure2_slot2;
                kilo = kilo.separator;
                oscar['style'] = kilo;
                foxtrot = _closure2_slot0;
                foxtrot = foxtrot.length;
                foxtrot = foxtrot - backup;
                yankee = null;
                if(!(options !== foxtrot)) { _fun00002_ip = 251; continue _fun00001 }
 219:
                backup = _closure1_slot5;
                foxtrot = _closure1_slot1;
                kilo = _closure1_slot2;
                romeo = 8;
                romeo = kilo[romeo];
                foxtrot = foxtrot.bind(mike)(romeo);
                romeo = {};
                yankee = backup.bind(mike)(foxtrot, romeo);
 251:
                oscar['children'] = yankee;
                oscar = offset.bind(mike)(golf, oscar);
                entity[1] = oscar;
                zulu['children'] = entity;
                entity = global;
                entity = entity.HermesInternal;
                golf = entity.concat;
                oscar = 'term-';
                entity = '-';
                entity = golf.bind(oscar)(verify, entity, options);
                entity = report.bind(mike)(tango, zulu, entity);
                return entity;
            }
        };
        oscar = golf.bind(options)(oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();