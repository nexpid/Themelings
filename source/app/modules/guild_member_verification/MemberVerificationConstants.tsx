// app/modules/guild_member_verification/MemberVerificationConstants.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    option = argBar;
    zuuluu = argFre;
    verify = argPlu;
    michal = global;
    oscard = michal.Object;
    report = oscard.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, tangon);
    report = {};
    tangon = 0;
    oscard = verify[tangon];
    entity = undefined;
    oscard = option.bind(entity)(oscard);
    oscard = oscard.VerificationFormFieldTypes;
    oscard = oscard.VERIFICATION;
    report['field_type'] = oscard;
    oscard = new Array(1);
    oscard[0] = report;
    offset = michal.Set;
    report = verify[tangon];
    report = option.bind(entity)(report);
    report = report.VerificationFormFieldTypes;
    golfie = report.TERMS;
    report = new Array(1);
    report[0] = golfie;
    golfie = offset.prototype;
    golfie = Object.create(golfie, {constructor: {value: offset}});
    backup = golfie;
    foxtra = report;
    report = new backup[offset](foxtra, romeon);
    report = report instanceof Object ? report : golfie;
    golfie = michal.Set;
    michal = verify[tangon];
    michal = option.bind(entity)(michal);
    michal = michal.VerificationFormFieldTypes;
    offset = michal.MULTIPLE_CHOICE;
    michal = new Array(3);
    michal[0] = offset;
    offset = verify[tangon];
    offset = option.bind(entity)(offset);
    offset = offset.VerificationFormFieldTypes;
    offset = offset.TEXT_INPUT;
    michal[1] = offset;
    tangon = verify[tangon];
    tangon = option.bind(entity)(tangon);
    tangon = tangon.VerificationFormFieldTypes;
    tangon = tangon.PARAGRAPH;
    michal[2] = tangon;
    tangon = golfie.prototype;
    tangon = Object.create(tangon, {constructor: {value: golfie}});
    backup = tangon;
    foxtra = michal;
    michal = new backup[golfie](foxtra, romeon);
    tangon = michal instanceof Object ? michal : tangon;
    michal = {};
    golfie = 'VERIFICATION_INFO';
    michal['VERIFICATION_INFO'] = golfie;
    golfie = 1;
    golfie = verify[golfie];
    verify = option.bind(entity)(golfie);
    option = verify.fileFinishedImporting;
    golfie = 'modules/guild_member_verification/MemberVerificationConstants.tsx';
    golfie = option.bind(verify)(golfie);
    zuuluu['REQUIRED_FORM_FIELDS'] = oscard;
    zuuluu['AUTOMATIC_APPROVAL_FORM_FIELDS'] = report;
    zuuluu['MANUAL_APPROVAL_FORM_FIELDS'] = tangon;
    tangon = 5;
    zuuluu['MAX_FORM_ELEMENTS'] = tangon;
    tangon = 16;
    zuuluu['MAX_NUM_RULES'] = tangon;
    tangon = 300;
    zuuluu['MAX_RULE_LENGTH'] = tangon;
    zuuluu['MAX_QUESTION_LENGTH'] = tangon;
    report = 150;
    zuuluu['MAX_PLACEHOLDER_LENGTH'] = report;
    oscard = 8;
    zuuluu['MAX_NUM_CHOICES'] = oscard;
    zuuluu['MAX_CHOICE_LENGTH'] = report;
    zuuluu['MAX_TEXT_RESPONSE_LENGTH'] = report;
    report = 1000;
    zuuluu['MAX_PARAGRAPH_RESPONSE_LENGTH'] = report;
    zuuluu['MAX_DESCRIPTION_LENGTH'] = tangon;
    tangon = 'Membership Gating';
    zuuluu['MEMBER_VERIFICATION_TYPE'] = tangon;
    tangon = 'in-app-member-verification';
    zuuluu['IN_APP_MEMBER_VERIFICATION_MODAL_KEY'] = tangon;
    zuuluu['MemberVerificationModalStates'] = michal;
    return entity;
})();