// app/modules/people/native/ClearAllIncomingRequestsConfirmation.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    romeon = 1;
    golfie = oscard[romeon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot6 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.Fragment;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'display': 'flex', 'flexDirection': 'column', 'backgroundColor': null, 'height': '100%'};
    offset = 5;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['paddingTop'] = foxtra;
    tangon['root'] = verify;
    verify = {'marginRight': 8, 'alignSelf': 'flex-end'};
    tangon['closeButton'] = verify;
    verify = {};
    verify['flexGrow'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['padding'] = romeon;
    tangon['content'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'column', 'height': '100%'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_24;
    verify['marginTop'] = romeon;
    tangon['container'] = verify;
    verify = {'flexGrow': 0, 'flexShrink': 1};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_24;
    verify['paddingVertical'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['paddingHorizontal'] = romeon;
    tangon['footer'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginBottom'] = romeon;
    tangon['header'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginTop'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_4;
    verify['marginBottom'] = romeon;
    tangon['headerText'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_24;
    verify['padding'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    tangon['body'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_4;
    verify['marginBottom'] = romeon;
    tangon['noticeHeader'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_4;
    verify['marginBottom'] = offset;
    tangon['button'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/people/native/ClearAllIncomingRequestsConfirmation.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ClearAllIncomingRequestsConfirmationModal
        entity = argFoo;
        sierra = entity.incomingPendingRequestCount;
        entity = _closure1_slot10;
        tangon = undefined;
        config = entity.bind(tangon)();
        report = _closure1_slot4;
        michal = report.useState;
        entity = false;
        zuuluu = michal.bind(report)(entity);
        michal = _closure1_slot3;
        entity = 2;
        michal = michal.bind(tangon)(zuuluu, entity);
        entity = 0;
        vacuum = michal[entity];
        entity = 1;
        entity = michal[entity];
        var _closure2_slot0 = entity;
        zuuluu = report.useCallback;
        michal = function() {
            zuuluu = _closure2_slot0;
            entity = undefined;
            michal = false;
            michal = zuuluu.bind(entity)(michal);
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            michal = 6;
            michal = tangon[michal];
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.pop;
            michal = michal.bind(zuuluu)();
            return entity;
        };
        entity = new Array(0);
        oscard = zuuluu.bind(report)(michal, entity);
        var _closure2_slot1 = oscard;
        zuuluu = report.useCallback;
        michal = function() {
            zuuluu = _closure2_slot0;
            entity = undefined;
            michal = false;
            michal = zuuluu.bind(entity)(michal);
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            michal = 7;
            michal = option[michal];
            tangon = golfie.bind(entity)(michal);
            zuuluu = tangon.presentFailedToast;
            michal = 8;
            report = option[michal];
            report = golfie.bind(entity)(report);
            oscard = report.intl;
            report = oscard.string;
            michal = option[michal];
            michal = golfie.bind(entity)(michal);
            michal = michal.t;
            michal = michal.R0RpRU;
            michal = report.bind(oscard)(michal);
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        entity = new Array(0);
        entity = zuuluu.bind(report)(michal, entity);
        var _closure2_slot2 = entity;
        zuuluu = report.useCallback;
        michal = new Array(2);
        michal[0] = oscard;
        michal[1] = entity;
        entity = function() {
            tangon = _closure2_slot0;
            entity = undefined;
            zuuluu = true;
            zuuluu = tangon.bind(entity)(zuuluu);
            tangon = _closure1_slot1;
            report = _closure1_slot2;
            zuuluu = 9;
            zuuluu = report[zuuluu];
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = tangon.clearPendingRelationships;
            report = zuuluu.bind(tangon)();
            tangon = report.then;
            zuuluu = _closure2_slot1;
            tangon = tangon.bind(report)(zuuluu);
            zuuluu = tangon.catch;
            michal = _closure2_slot2;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        result = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot7;
        sequen = _closure1_slot0;
        source = _closure1_slot2;
        romeon = 10;
        entity = source[romeon];
        entity = sequen.bind(tangon)(entity);
        michal = entity.SafeAreaPaddingView;
        entity = {};
        backup = true;
        entity['top'] = backup;
        golfie = _closure1_slot9;
        oscard = _closure1_slot5;
        report = {};
        option = config.root;
        report['style'] = option;
        update = _closure1_slot1;
        option = 11;
        option = source[option];
        verify = update.bind(tangon)(option);
        option = {};
        yankee = 'button';
        option['accessibilityRole'] = yankee;
        echoed = 8;
        yankee = source[echoed];
        yankee = sequen.bind(tangon)(yankee);
        sizing = yankee.intl;
        kiloes = sizing.string;
        yankee = source[echoed];
        yankee = sequen.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.cpT0Cg;
        yankee = kiloes.bind(sizing)(yankee);
        option['accessibilityLabel'] = yankee;
        yankee = 12;
        yankee = source[yankee];
        yankee = update.bind(tangon)(yankee);
        option['source'] = yankee;
        kiloes = config.closeButton;
        yankee = new Array(1);
        yankee[0] = kiloes;
        option['style'] = yankee;
        offset = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 6;
            michal = michal[entity];
            entity = undefined;
            michal = zuuluu.bind(entity)(michal);
            entity = michal.pop;
            entity = entity.bind(michal)();
            return entity;
        };
        option['onPress'] = offset;
        verify = zuuluu.bind(tangon)(verify, option);
        option = new Array(2);
        option[0] = verify;
        verify = {};
        offset = config.container;
        verify['style'] = offset;
        yankee = _closure1_slot6;
        offset = {};
        kiloes = config.content;
        offset['style'] = kiloes;
        kiloes = _closure1_slot8;
        foxtra = {};
        sizing = {};
        output = config.header;
        sizing['style'] = output;
        ctrled = 13;
        output = source[ctrled];
        output = sequen.bind(tangon)(output);
        record = output.Text;
        output = {};
        cntext = config.headerText;
        output['style'] = cntext;
        cntext = 'text-lg/bold';
        output['variant'] = cntext;
        cntext = source[echoed];
        cntext = sequen.bind(tangon)(cntext);
        target = cntext.intl;
        papara = target.string;
        cntext = source[echoed];
        cntext = sequen.bind(tangon)(cntext);
        cntext = cntext.t;
        cntext = cntext.eVjfAg;
        cntext = papara.bind(target)(cntext);
        output['children'] = cntext;
        output = zuuluu.bind(tangon)(record, output);
        sizing['children'] = output;
        output = zuuluu.bind(tangon)(oscard, sizing);
        sizing = new Array(2);
        sizing[0] = output;
        output = {};
        record = config.body;
        output['style'] = record;
        ctrled = source[ctrled];
        ctrled = sequen.bind(tangon)(ctrled);
        record = ctrled.Text;
        ctrled = {'style': null, 'variant': 'text-xs/normal', 'color': 'header-primary'};
        cntext = config.noticeHeader;
        ctrled['style'] = cntext;
        cntext = source[echoed];
        cntext = sequen.bind(tangon)(cntext);
        status = cntext.intl;
        target = status.format;
        cntext = source[echoed];
        cntext = sequen.bind(tangon)(cntext);
        cntext = cntext.t;
        papara = cntext.jaXsAw;
        cntext = {};
        cntext['incomingRequestCount'] = sierra;
        cntext = target.bind(status)(papara, cntext);
        ctrled['children'] = cntext;
        ctrled = zuuluu.bind(tangon)(record, ctrled);
        output['children'] = ctrled;
        output = zuuluu.bind(tangon)(oscard, output);
        sizing[1] = output;
        foxtra['children'] = sizing;
        foxtra = golfie.bind(tangon)(kiloes, foxtra);
        offset['children'] = foxtra;
        yankee = zuuluu.bind(tangon)(yankee, offset);
        offset = new Array(2);
        offset[0] = yankee;
        yankee = {};
        foxtra = config.footer;
        yankee['style'] = foxtra;
        romeon = source[romeon];
        romeon = sequen.bind(tangon)(romeon);
        foxtra = romeon.SafeAreaPaddingView;
        romeon = {};
        romeon['bottom'] = backup;
        backup = {};
        ctrled = 14;
        sizing = source[ctrled];
        output = update.bind(tangon)(sizing);
        sizing = {};
        sizing['disabled'] = vacuum;
        sizing['loading'] = vacuum;
        vacuum = config.button;
        sizing['style'] = vacuum;
        vacuum = 5;
        record = source[vacuum];
        record = update.bind(tangon)(record);
        record = record.radii;
        record = record.xs;
        sizing['cornerRadius'] = record;
        record = source[ctrled];
        record = update.bind(tangon)(record);
        record = record.Sizes;
        record = record.MEDIUM;
        sizing['size'] = record;
        record = source[ctrled];
        record = update.bind(tangon)(record);
        record = record.Colors;
        record = record.RED;
        sizing['color'] = record;
        record = source[echoed];
        record = sequen.bind(tangon)(record);
        papara = record.intl;
        cntext = papara.string;
        record = source[echoed];
        record = sequen.bind(tangon)(record);
        record = record.t;
        record = record.Eq9seX;
        record = cntext.bind(papara)(record);
        sizing['text'] = record;
        sizing['onPress'] = result;
        output = zuuluu.bind(tangon)(output, sizing);
        sizing = new Array(2);
        sizing[0] = output;
        output = source[ctrled];
        result = update.bind(tangon)(output);
        output = {};
        config = config.button;
        output['style'] = config;
        vacuum = source[vacuum];
        vacuum = update.bind(tangon)(vacuum);
        vacuum = vacuum.radii;
        vacuum = vacuum.xs;
        output['cornerRadius'] = vacuum;
        vacuum = source[ctrled];
        vacuum = update.bind(tangon)(vacuum);
        vacuum = vacuum.Colors;
        vacuum = vacuum.TRANSPARENT;
        output['color'] = vacuum;
        ctrled = source[ctrled];
        ctrled = update.bind(tangon)(ctrled);
        ctrled = ctrled.Sizes;
        ctrled = ctrled.MEDIUM;
        output['size'] = ctrled;
        ctrled = source[echoed];
        ctrled = sequen.bind(tangon)(ctrled);
        vacuum = ctrled.intl;
        ctrled = vacuum.string;
        echoed = source[echoed];
        echoed = sequen.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.ETE/oK;
        echoed = ctrled.bind(vacuum)(echoed);
        output['text'] = echoed;
        echoed = 6;
        echoed = source[echoed];
        echoed = update.bind(tangon)(echoed);
        echoed = echoed.pop;
        output['onPress'] = echoed;
        output = zuuluu.bind(tangon)(result, output);
        sizing[1] = output;
        backup['children'] = sizing;
        backup = golfie.bind(tangon)(kiloes, backup);
        romeon['children'] = backup;
        romeon = zuuluu.bind(tangon)(foxtra, romeon);
        yankee['children'] = romeon;
        yankee = zuuluu.bind(tangon)(oscard, yankee);
        offset[1] = yankee;
        verify['children'] = offset;
        verify = golfie.bind(tangon)(oscard, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();