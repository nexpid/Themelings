// app/modules/people/native/ClearAllIncomingRequestsConfirmation.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    romeo = 1;
    golf = oscar[romeo];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot5 = golf;
    tango = tango.ScrollView;
    var _closure1_slot6 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'display': 'flex', 'flexDirection': 'column', 'backgroundColor': null, 'height': '100%'};
    offset = 5;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_24;
    verify['paddingTop'] = foxtrot;
    tango['root'] = verify;
    verify = {'marginRight': 8, 'alignSelf': 'flex-end'};
    tango['closeButton'] = verify;
    verify = {};
    verify['flexGrow'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['padding'] = romeo;
    tango['content'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'column', 'height': '100%'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_24;
    verify['marginTop'] = romeo;
    tango['container'] = verify;
    verify = {'flexGrow': 0, 'flexShrink': 1};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_24;
    verify['paddingVertical'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['paddingHorizontal'] = romeo;
    tango['footer'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['marginBottom'] = romeo;
    tango['header'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['marginTop'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_4;
    verify['marginBottom'] = romeo;
    tango['headerText'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_24;
    verify['padding'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.md;
    verify['borderRadius'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeo;
    tango['body'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_4;
    verify['marginBottom'] = romeo;
    tango['noticeHeader'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_4;
    verify['marginBottom'] = offset;
    tango['button'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot10 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/people/native/ClearAllIncomingRequestsConfirmation.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ClearAllIncomingRequestsConfirmationModal
        entity = argFoo;
        sierra = entity.incomingPendingRequestCount;
        entity = _closure1_slot10;
        tango = undefined;
        config = entity.bind(tango)();
        report = _closure1_slot4;
        mike = report.useState;
        entity = false;
        zulu = mike.bind(report)(entity);
        mike = _closure1_slot3;
        entity = 2;
        mike = mike.bind(tango)(zulu, entity);
        entity = 0;
        vacuum = mike[entity];
        entity = 1;
        entity = mike[entity];
        var _closure2_slot0 = entity;
        zulu = report.useCallback;
        mike = function() {
            zulu = _closure2_slot0;
            entity = undefined;
            mike = false;
            mike = zulu.bind(entity)(mike);
            zulu = _closure1_slot1;
            tango = _closure1_slot2;
            mike = 6;
            mike = tango[mike];
            zulu = zulu.bind(entity)(mike);
            mike = zulu.pop;
            mike = mike.bind(zulu)();
            return entity;
        };
        entity = new Array(0);
        oscar = zulu.bind(report)(mike, entity);
        var _closure2_slot1 = oscar;
        zulu = report.useCallback;
        mike = function() {
            zulu = _closure2_slot0;
            entity = undefined;
            mike = false;
            mike = zulu.bind(entity)(mike);
            golf = _closure1_slot0;
            options = _closure1_slot2;
            mike = 7;
            mike = options[mike];
            tango = golf.bind(entity)(mike);
            zulu = tango.presentFailedToast;
            mike = 8;
            report = options[mike];
            report = golf.bind(entity)(report);
            oscar = report.intl;
            report = oscar.string;
            mike = options[mike];
            mike = golf.bind(entity)(mike);
            mike = mike.t;
            mike = mike.R0RpRU;
            mike = report.bind(oscar)(mike);
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        var _closure2_slot2 = entity;
        zulu = report.useCallback;
        mike = new Array(2);
        mike[0] = oscar;
        mike[1] = entity;
        entity = function() {
            tango = _closure2_slot0;
            entity = undefined;
            zulu = true;
            zulu = tango.bind(entity)(zulu);
            tango = _closure1_slot1;
            report = _closure1_slot2;
            zulu = 9;
            zulu = report[zulu];
            tango = tango.bind(entity)(zulu);
            zulu = tango.clearPendingRelationships;
            report = zulu.bind(tango)();
            tango = report.then;
            zulu = _closure2_slot1;
            tango = tango.bind(report)(zulu);
            zulu = tango.catch;
            mike = _closure2_slot2;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        result = zulu.bind(report)(entity, mike);
        zulu = _closure1_slot7;
        sequence = _closure1_slot0;
        source = _closure1_slot2;
        romeo = 10;
        entity = source[romeo];
        entity = sequence.bind(tango)(entity);
        mike = entity.SafeAreaPaddingView;
        entity = {};
        backup = true;
        entity['top'] = backup;
        golf = _closure1_slot9;
        oscar = _closure1_slot5;
        report = {};
        options = config.root;
        report['style'] = options;
        update = _closure1_slot1;
        options = 11;
        options = source[options];
        verify = update.bind(tango)(options);
        options = {};
        yankee = 'button';
        options['accessibilityRole'] = yankee;
        echo = 8;
        yankee = source[echo];
        yankee = sequence.bind(tango)(yankee);
        sizing = yankee.intl;
        kilo = sizing.string;
        yankee = source[echo];
        yankee = sequence.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.cpT0Cg;
        yankee = kilo.bind(sizing)(yankee);
        options['accessibilityLabel'] = yankee;
        yankee = 12;
        yankee = source[yankee];
        yankee = update.bind(tango)(yankee);
        options['source'] = yankee;
        kilo = config.closeButton;
        yankee = new Array(1);
        yankee[0] = kilo;
        options['style'] = yankee;
        offset = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 6;
            mike = mike[entity];
            entity = undefined;
            mike = zulu.bind(entity)(mike);
            entity = mike.pop;
            entity = entity.bind(mike)();
            return entity;
        };
        options['onPress'] = offset;
        verify = zulu.bind(tango)(verify, options);
        options = new Array(2);
        options[0] = verify;
        verify = {};
        offset = config.container;
        verify['style'] = offset;
        yankee = _closure1_slot6;
        offset = {};
        kilo = config.content;
        offset['style'] = kilo;
        kilo = _closure1_slot8;
        foxtrot = {};
        sizing = {};
        output = config.header;
        sizing['style'] = output;
        control = 13;
        output = source[control];
        output = sequence.bind(tango)(output);
        record = output.Text;
        output = {};
        context = config.headerText;
        output['style'] = context;
        context = 'text-lg/bold';
        output['variant'] = context;
        context = source[echo];
        context = sequence.bind(tango)(context);
        target = context.intl;
        papa = target.string;
        context = source[echo];
        context = sequence.bind(tango)(context);
        context = context.t;
        context = context.eVjfAg;
        context = papa.bind(target)(context);
        output['children'] = context;
        output = zulu.bind(tango)(record, output);
        sizing['children'] = output;
        output = zulu.bind(tango)(oscar, sizing);
        sizing = new Array(2);
        sizing[0] = output;
        output = {};
        record = config.body;
        output['style'] = record;
        control = source[control];
        control = sequence.bind(tango)(control);
        record = control.Text;
        control = {'style': null, 'variant': 'text-xs/normal', 'color': 'header-primary'};
        context = config.noticeHeader;
        control['style'] = context;
        context = source[echo];
        context = sequence.bind(tango)(context);
        status = context.intl;
        target = status.format;
        context = source[echo];
        context = sequence.bind(tango)(context);
        context = context.t;
        papa = context.jaXsAw;
        context = {};
        context['incomingRequestCount'] = sierra;
        context = target.bind(status)(papa, context);
        control['children'] = context;
        control = zulu.bind(tango)(record, control);
        output['children'] = control;
        output = zulu.bind(tango)(oscar, output);
        sizing[1] = output;
        foxtrot['children'] = sizing;
        foxtrot = golf.bind(tango)(kilo, foxtrot);
        offset['children'] = foxtrot;
        yankee = zulu.bind(tango)(yankee, offset);
        offset = new Array(2);
        offset[0] = yankee;
        yankee = {};
        foxtrot = config.footer;
        yankee['style'] = foxtrot;
        romeo = source[romeo];
        romeo = sequence.bind(tango)(romeo);
        foxtrot = romeo.SafeAreaPaddingView;
        romeo = {};
        romeo['bottom'] = backup;
        backup = {};
        control = 14;
        sizing = source[control];
        output = update.bind(tango)(sizing);
        sizing = {};
        sizing['disabled'] = vacuum;
        sizing['loading'] = vacuum;
        vacuum = config.button;
        sizing['style'] = vacuum;
        vacuum = 5;
        record = source[vacuum];
        record = update.bind(tango)(record);
        record = record.radii;
        record = record.xs;
        sizing['cornerRadius'] = record;
        record = source[control];
        record = update.bind(tango)(record);
        record = record.Sizes;
        record = record.MEDIUM;
        sizing['size'] = record;
        record = source[control];
        record = update.bind(tango)(record);
        record = record.Colors;
        record = record.RED;
        sizing['color'] = record;
        record = source[echo];
        record = sequence.bind(tango)(record);
        papa = record.intl;
        context = papa.string;
        record = source[echo];
        record = sequence.bind(tango)(record);
        record = record.t;
        record = record.Eq9seX;
        record = context.bind(papa)(record);
        sizing['text'] = record;
        sizing['onPress'] = result;
        output = zulu.bind(tango)(output, sizing);
        sizing = new Array(2);
        sizing[0] = output;
        output = source[control];
        result = update.bind(tango)(output);
        output = {};
        config = config.button;
        output['style'] = config;
        vacuum = source[vacuum];
        vacuum = update.bind(tango)(vacuum);
        vacuum = vacuum.radii;
        vacuum = vacuum.xs;
        output['cornerRadius'] = vacuum;
        vacuum = source[control];
        vacuum = update.bind(tango)(vacuum);
        vacuum = vacuum.Colors;
        vacuum = vacuum.TRANSPARENT;
        output['color'] = vacuum;
        control = source[control];
        control = update.bind(tango)(control);
        control = control.Sizes;
        control = control.MEDIUM;
        output['size'] = control;
        control = source[echo];
        control = sequence.bind(tango)(control);
        vacuum = control.intl;
        control = vacuum.string;
        echo = source[echo];
        echo = sequence.bind(tango)(echo);
        echo = echo.t;
        echo = echo.ETE/oK;
        echo = control.bind(vacuum)(echo);
        output['text'] = echo;
        echo = 6;
        echo = source[echo];
        echo = update.bind(tango)(echo);
        echo = echo.pop;
        output['onPress'] = echo;
        output = zulu.bind(tango)(result, output);
        sizing[1] = output;
        backup['children'] = sizing;
        backup = golf.bind(tango)(kilo, backup);
        romeo['children'] = backup;
        romeo = zulu.bind(tango)(foxtrot, romeo);
        yankee['children'] = romeo;
        yankee = zulu.bind(tango)(oscar, yankee);
        offset[1] = yankee;
        verify['children'] = offset;
        verify = golf.bind(tango)(oscar, verify);
        options[1] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();