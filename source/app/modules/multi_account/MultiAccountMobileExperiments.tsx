// app/modules/multi_account/MultiAccountMobileExperiments.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    romeon = true;
    michal['value'] = romeon;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    michal = 0;
    tangon = golfie[michal];
    entity = undefined;
    verify = oscard.bind(entity)(tangon);
    option = verify.createExperiment;
    tangon = {'kind': 'user', 'id': '2022-09_mobile_account_switcher', 'label': 'Mobile Account Switcher'};
    yankee = false;
    report = {'isMultiAccountMobileEnabled': false, 'clearCanUseMultiAccountMobile': false};
    tangon['defaultConfig'] = report;
    foxtra = {'id': 1, 'label': 'Enable Account Switcher on Mobile'};
    report = 1;
    offset = {'isMultiAccountMobileEnabled': true, 'clearCanUseMultiAccountMobile': false};
    foxtra['config'] = offset;
    offset = new Array(2);
    offset[0] = foxtra;
    foxtra = {'id': 2, 'label': 'Unenroll Account Switcher on Mobile and Clear Local Flag'};
    backup = {'isMultiAccountMobileEnabled': false, 'clearCanUseMultiAccountMobile': true};
    foxtra['config'] = backup;
    offset[1] = foxtra;
    tangon['treatments'] = offset;
    tangon = option.bind(verify)(tangon);
    michal = golfie[michal];
    verify = oscard.bind(entity)(michal);
    option = verify.createExperiment;
    michal = {'kind': 'user', 'id': '2022-11_mobile_account_switcher_notifications', 'label': 'Mobile Account Switcher: Notifications'};
    offset = {};
    offset['isMultiAccountMobileNotificationsEnabled'] = yankee;
    michal['defaultConfig'] = offset;
    yankee = {'id': 1, 'label': 'Enable notifications for multiple accounts'};
    offset = {};
    offset['isMultiAccountMobileNotificationsEnabled'] = romeon;
    yankee['config'] = offset;
    offset = new Array(1);
    offset[0] = yankee;
    michal['treatments'] = offset;
    michal = option.bind(verify)(michal);
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/multi_account/MultiAccountMobileExperiments.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['MultiAccountMobileExperiment'] = tangon;
    zuuluu['MultiAccountMobileNotificationsExperiment'] = michal;
    return entity;
})();