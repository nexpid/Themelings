// app/modules/multi_account/native/ChooseAccount.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MultiAccountTokenStatus;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MAX_ACCOUNTS;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AnalyticEvents;
    var _closure1_slot8 = golfie;
    tangon = tangon.AuthStates;
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot10 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 8;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['paddingTop'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['margin'] = romeon;
    tangon['container'] = verify;
    verify = {'marginVertical': null, 'borderRadius': null, 'flexDirection': 'column', 'alignItems': 'stretch', 'alignSelf': 'stretch', 'display': 'flex'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginVertical'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    tangon['mainCard'] = verify;
    verify = {'marginTop': 8, 'marginLeft': 0};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeon;
    tangon['divider'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_LINK;
    verify['color'] = offset;
    tangon['addAccountLabel'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 26;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/multi_account/native/ChooseAccount.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: ChooseAccount
        entity = _closure1_slot12;
        tangon = undefined;
        romeon = entity.bind(tangon)();
        sizing = _closure1_slot0;
        output = _closure1_slot3;
        entity = 9;
        entity = output[entity];
        michal = sizing.bind(tangon)(entity);
        entity = michal.useNavigation;
        entity = entity.bind(michal)();
        var _closure2_slot0 = entity;
        entity = 10;
        entity = output[entity];
        michal = sizing.bind(tangon)(entity);
        entity = michal.useMultiAccountUsers;
        entity = entity.bind(michal)();
        offset = entity.multiAccountUsers;
        var _closure2_slot1 = offset;
        entity = function(argFoo) { // Original name: handlePressUser
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = argFoo;
                tangon = zuuluu.tokenStatus;
                michal = _closure1_slot6;
                michal = michal.INVALID;
                if(!(tangon !== michal)) { _fun00002_ip = 66; continue _fun00001 }
 26:
                report = _closure1_slot2;
                tangon = _closure1_slot3;
                michal = 12;
                tangon = tangon[michal];
                michal = undefined;
                report = report.bind(michal)(tangon);
                tangon = report.switchAccount;
                zuuluu = zuuluu.id;
                zuuluu = tangon.bind(report)(zuuluu);
                return michal;
 66:
                tangon = _closure2_slot0;
                zuuluu = tangon.push;
                michal = _closure1_slot9;
                michal = michal.LOGIN;
                michal = zuuluu.bind(tangon)(michal);
                tangon = _closure1_slot1;
                zuuluu = _closure1_slot3;
                michal = 11;
                zuuluu = zuuluu[michal];
                michal = undefined;
                tangon = tangon.bind(michal)(zuuluu);
                zuuluu = tangon.track;
                entity = _closure1_slot8;
                michal = entity.LOGIN_VIEWED;
                entity = {};
                report = 'choose_account_user_invalid';
                entity['source'] = report;
                entity = zuuluu.bind(tangon)(michal, entity);
                entity = undefined;
                return entity;
            }
        };
        var _closure2_slot2 = entity;
        entity = function() {
            tangon = _closure1_slot4;
            zuuluu = undefined;
            michal = function* (argFoo) {
                entity = function* (argFoo) { // Original name: ?anon_0_
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        StartGenerator();
                        tangon = argFoo;
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00004_ip = 468; continue _fun00003 }
 13:
                        oscard = _closure1_slot1;
                        option = _closure1_slot3;
                        michal = 13;
                        michal = option[michal];
                        zuuluu = undefined;
                        golfie = oscard.bind(zuuluu)(michal);
                        oscard = golfie.confirm;
                        michal = {};
                        verify = _closure1_slot0;
                        romeon = 14;
                        offset = option[romeon];
                        offset = verify.bind(zuuluu)(offset);
                        foxtra = offset.intl;
                        yankee = foxtra.string;
                        offset = option[romeon];
                        offset = verify.bind(zuuluu)(offset);
                        offset = offset.t;
                        offset = offset.n0Fbg4;
                        offset = yankee.bind(foxtra)(offset);
                        michal['title'] = offset;
                        offset = option[romeon];
                        offset = verify.bind(zuuluu)(offset);
                        yankee = offset.intl;
                        offset = yankee.formatToPlainString;
                        option = option[romeon];
                        option = verify.bind(zuuluu)(option);
                        option = option.t;
                        verify = option.phEQmZ;
                        option = {};
                        backup = tangon.discriminator;
                        foxtra = '0';
                        if(!(foxtra !== backup)) { _fun00004_ip = 199; continue _fun00003 }
 158:
                        output = tangon.username;
                        sizing = tangon.discriminator;
                        foxtra = global;
                        foxtra = foxtra.HermesInternal;
                        kiloes = foxtra.concat;
                        backup = '';
                        foxtra = '#';
                        foxtra = kiloes.bind(backup)(output, foxtra, sizing);
                        _fun00004_ip = 226; continue _fun00003;
 199:
                        sizing = tangon.username;
                        backup = global;
                        backup = backup.HermesInternal;
                        kiloes = backup.concat;
                        backup = '';
                        foxtra = kiloes.bind(backup)(sizing);
 226:
                        option['username'] = foxtra;
                        option = offset.bind(yankee)(verify, option);
                        michal['body'] = option;
                        yankee = _closure1_slot0;
                        option = _closure1_slot3;
                        verify = option[romeon];
                        verify = yankee.bind(zuuluu)(verify);
                        foxtra = verify.intl;
                        offset = foxtra.string;
                        verify = option[romeon];
                        verify = yankee.bind(zuuluu)(verify);
                        verify = verify.t;
                        verify = verify.N86XcH;
                        verify = offset.bind(foxtra)(verify);
                        michal['confirmText'] = verify;
                        verify = 15;
                        verify = option[verify];
                        verify = yankee.bind(zuuluu)(verify);
                        verify = verify.ButtonColors;
                        verify = verify.RED;
                        michal['confirmColor'] = verify;
                        verify = option[romeon];
                        verify = yankee.bind(zuuluu)(verify);
                        offset = verify.intl;
                        verify = offset.string;
                        option = option[romeon];
                        option = yankee.bind(zuuluu)(option);
                        option = option.t;
                        option = option.ETE/oK;
                        option = verify.bind(offset)(option);
                        michal['cancelText'] = option;
                        option = true;
                        michal['isDismissable'] = option;
                        michal = oscard.bind(golfie)(michal);
                        SaveGenerator(address=391);
 389:
                        return michal;
 391:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=5);
                        if(oscard) { _fun00004_ip = 465; continue _fun00003 }
 397:
                        if(!michal) { _fun00004_ip = 462; continue _fun00003 }
 400:
                        option = _closure1_slot1;
                        golfie = _closure1_slot3;
                        oscard = 16;
                        oscard = golfie[oscard];
                        option = option.bind(zuuluu)(oscard);
                        oscard = option.hideActionSheet;
                        oscard = oscard.bind(option)();
                        oscard = _closure1_slot2;
                        report = 12;
                        report = golfie[report];
                        oscard = oscard.bind(zuuluu)(report);
                        report = oscard.removeAccount;
                        tangon = tangon.id;
                        tangon = report.bind(oscard)(tangon);
 462:
                        return zuuluu;
 465:
                        return michal;
 468:
                        return entity;
                    }
                };
                return entity;
            };
            michal = tangon.bind(zuuluu)(michal);
            var _closure3_slot0 = michal;
            entity = function() {
                entity = undefined;
                tangon = _closure3_slot0;
                zuuluu = tangon.apply;
                entity = arguments;
                michal = entity;
                entity = this;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            return entity;
        };
        entity = entity.bind(tangon)();
        var _closure2_slot3 = entity;
        zuuluu = _closure1_slot10;
        echoed = _closure1_slot1;
        entity = 18;
        entity = output[entity];
        michal = echoed.bind(tangon)(entity);
        entity = {};
        foxtra = 14;
        oscard = output[foxtra];
        oscard = sizing.bind(tangon)(oscard);
        option = oscard.intl;
        golfie = option.string;
        oscard = output[foxtra];
        oscard = sizing.bind(tangon)(oscard);
        oscard = oscard.t;
        oscard = oscard.bVbB6+;
        oscard = golfie.bind(option)(oscard);
        entity['headerText'] = oscard;
        oscard = output[foxtra];
        oscard = sizing.bind(tangon)(oscard);
        option = oscard.intl;
        golfie = option.string;
        oscard = output[foxtra];
        oscard = sizing.bind(tangon)(oscard);
        oscard = oscard.t;
        oscard = oscard.0M5fNz;
        oscard = golfie.bind(option)(oscard);
        entity['subHeaderText'] = oscard;
        oscard = 19;
        oscard = output[oscard];
        oscard = echoed.bind(tangon)(oscard);
        entity['backgroundImageSource'] = oscard;
        oscard = true;
        entity['backgroundImageCover'] = oscard;
        oscard = romeon.container;
        entity['contentStyle'] = oscard;
        golfie = _closure1_slot11;
        oscard = _closure1_slot5;
        report = {};
        option = romeon.mainCard;
        report['style'] = option;
        verify = offset.map;
        option = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            report = _closure1_slot10;
            yankee = _closure1_slot1;
            romeon = _closure1_slot3;
            michal = 20;
            michal = romeon[michal];
            tangon = undefined;
            zuuluu = yankee.bind(tangon)(michal);
            michal = {};
            michal['user'] = entity;
            golfie = function() { // Original name: onPressUser
                zuuluu = _closure2_slot2;
                michal = _closure3_slot0;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal['onPressUser'] = golfie;
            golfie = _closure1_slot0;
            oscard = 21;
            oscard = romeon[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.PressableOpacity;
            oscard = {};
            verify = 'button';
            oscard['accessibilityRole'] = verify;
            option = function() { // Original name: onPress
                zuuluu = _closure3_slot0;
                michal = function(argFoo) {
                    entity = argFoo;
                    var _closure5_slot0 = entity;
                    tangon = _closure1_slot1;
                    romeon = _closure1_slot3;
                    entity = 16;
                    zuuluu = romeon[entity];
                    entity = undefined;
                    tangon = tangon.bind(entity)(zuuluu);
                    zuuluu = tangon.hideActionSheet;
                    zuuluu = zuuluu.bind(tangon)();
                    yankee = _closure1_slot0;
                    michal = 17;
                    michal = romeon[michal];
                    tangon = yankee.bind(entity)(michal);
                    zuuluu = tangon.showSimpleActionSheet;
                    michal = {};
                    report = 'RemoveAccount';
                    michal['key'] = report;
                    oscard = {};
                    option = 14;
                    report = romeon[option];
                    report = yankee.bind(entity)(report);
                    offset = report.intl;
                    verify = offset.string;
                    report = romeon[option];
                    report = yankee.bind(entity)(report);
                    report = report.t;
                    report = report.DSN+h4;
                    report = verify.bind(offset)(report);
                    oscard['label'] = report;
                    report = function() { // Original name: onPress
                        zuuluu = _closure2_slot2;
                        michal = _closure5_slot0;
                        entity = undefined;
                        entity = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    oscard['onPress'] = report;
                    report = new Array(2);
                    report[0] = oscard;
                    oscard = {};
                    verify = romeon[option];
                    verify = yankee.bind(entity)(verify);
                    offset = verify.intl;
                    verify = offset.string;
                    option = romeon[option];
                    option = yankee.bind(entity)(option);
                    option = option.t;
                    option = option.lSLMaW;
                    option = verify.bind(offset)(option);
                    oscard['label'] = option;
                    golfie = function() { // Original name: onPress
                        zuuluu = _closure2_slot3;
                        michal = _closure5_slot0;
                        entity = undefined;
                        entity = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    oscard['onPress'] = golfie;
                    golfie = true;
                    oscard['isDestructive'] = golfie;
                    report[1] = oscard;
                    michal['options'] = report;
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                };
                entity = undefined;
                michal = michal.bind(entity)(zuuluu);
                return entity;
            };
            oscard['onPress'] = option;
            offset = 22;
            option = romeon[offset];
            verify = yankee.bind(tangon)(option);
            option = {};
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.Sizes;
            offset = offset.SMALL_20;
            option['size'] = offset;
            offset = 23;
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            option['source'] = offset;
            offset = true;
            option['disableColor'] = offset;
            option = report.bind(tangon)(verify, option);
            oscard['children'] = option;
            oscard = report.bind(tangon)(golfie, oscard);
            michal['trailing'] = oscard;
            entity = entity.id;
            entity = report.bind(tangon)(zuuluu, michal, entity);
            return entity;
        };
        verify = verify.bind(offset)(option);
        option = new Array(2);
        option[0] = verify;
        backup = 24;
        verify = output[backup];
        verify = sizing.bind(tangon)(verify);
        offset = verify.FormRow;
        verify = {};
        backup = output[backup];
        backup = sizing.bind(tangon)(backup);
        backup = backup.FormRow;
        kiloes = backup.Icon;
        backup = {};
        result = 8;
        result = output[result];
        result = echoed.bind(tangon)(result);
        result = result.colors;
        result = result.TEXT_LINK;
        backup['themedColor'] = result;
        result = 22;
        result = output[result];
        result = echoed.bind(tangon)(result);
        result = result.Sizes;
        result = result.SMALL_20;
        backup['size'] = result;
        result = 25;
        result = output[result];
        result = echoed.bind(tangon)(result);
        backup['source'] = result;
        backup = zuuluu.bind(tangon)(kiloes, backup);
        verify['leading'] = backup;
        backup = output[foxtra];
        backup = sizing.bind(tangon)(backup);
        kiloes = backup.intl;
        backup = kiloes.string;
        foxtra = output[foxtra];
        foxtra = sizing.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        foxtra = foxtra.bPP34e;
        foxtra = backup.bind(kiloes)(foxtra);
        verify['label'] = foxtra;
        romeon = romeon.addAccountLabel;
        verify['labelStyle'] = romeon;
        yankee = function() { // Original name: onPress
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                michal = _closure2_slot1;
                zuuluu = michal.length;
                michal = _closure1_slot7;
                if(!(!(zuuluu >= michal))) { _fun00006_ip = 107; continue _fun00005 }
 23:
                zuuluu = _closure2_slot0;
                michal = zuuluu.push;
                entity = _closure1_slot9;
                entity = entity.LOGIN;
                entity = michal.bind(zuuluu)(entity);
                zuuluu = _closure1_slot1;
                michal = _closure1_slot3;
                entity = 11;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.track;
                entity = _closure1_slot8;
                michal = entity.LOGIN_VIEWED;
                entity = {};
                report = 'choose_account_add_account';
                entity['source'] = report;
                entity = zuuluu.bind(tangon)(michal, entity);
                _fun00006_ip = 264; continue _fun00005;
 107:
                michal = _closure1_slot1;
                offset = _closure1_slot3;
                entity = 13;
                entity = offset[entity];
                verify = undefined;
                zuuluu = michal.bind(verify)(entity);
                michal = zuuluu.show;
                entity = {};
                report = _closure1_slot0;
                tangon = 14;
                oscard = offset[tangon];
                oscard = report.bind(verify)(oscard);
                yankee = oscard.intl;
                golfie = yankee.string;
                oscard = offset[tangon];
                oscard = report.bind(verify)(oscard);
                oscard = oscard.t;
                oscard = oscard.w7wfXl;
                oscard = golfie.bind(yankee)(oscard);
                entity['title'] = oscard;
                oscard = offset[tangon];
                oscard = report.bind(verify)(oscard);
                golfie = oscard.intl;
                oscard = golfie.formatToPlainString;
                tangon = offset[tangon];
                tangon = report.bind(verify)(tangon);
                tangon = tangon.t;
                report = tangon.WOyelJ;
                tangon = {};
                option = _closure1_slot7;
                tangon['maxNumAccounts'] = option;
                tangon = oscard.bind(golfie)(report, tangon);
                entity['body'] = tangon;
                tangon = true;
                entity['isDismissable'] = tangon;
                entity = michal.bind(zuuluu)(entity);
 264:
                entity = undefined;
                return entity;
            }
        };
        verify['onPress'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();