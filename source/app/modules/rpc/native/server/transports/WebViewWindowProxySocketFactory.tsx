// app/modules/rpc/native/server/transports/WebViewWindowProxySocketFactory.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var3 = exports;
    var4 = dependencyMap;
    var1 = metroImportDefault;
    var _closure1_slot0 = var1;
    var _closure1_slot1 = var4;
    var1 = global;
    var7 = var1.Object;
    var6 = var7.defineProperty;
    var5 = {};
    var1 = true;
    var5['value'] = var1;
    var1 = '__esModule';
    var1 = var6.bind(var7)(var3, var1, var5);
    var1 = 2;
    var5 = var4[var1];
    var4 = require;
    var1 = undefined;
    var6 = var4.bind(var1)(var5);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/rpc/native/server/transports/WebViewWindowProxySocketFactory.tsx';
    var4 = var5.bind(var6)(var4);
    var2 = function _default(arg1) {
        var1 = arg1;
        var10 = var1.origin;
        var9 = var1.postMessageToRPCClient;
        var8 = var1.frameId;
        var7 = var1.version;
        var6 = var1.encoding;
        var5 = var1.logger;
        var _closure2_slot0 = var5;
        var4 = var1.postClose;
        var11 = _closure1_slot0;
        var3 = _closure1_slot1;
        var1 = 0;
        var3 = var3[var1];
        var1 = undefined;
        var3 = var11.bind(var1)(var3);
        var1 = {};
        var1['origin'] = var10;
        var1['postMessageToRPCClient'] = var9;
        var1['frameId'] = var8;
        var1['version'] = var7;
        var1['encoding'] = var6;
        var1['logger'] = var5;
        var1['postClose'] = var4;
        var2 = function onSendingToRPCClient(arg1, arg2) {
            var5 = _closure2_slot0;
            var4 = var5.info;
            var1 = global;
            var1 = var1.HermesInternal;
            var3 = var1.concat;
            var2 = 'Socket Emit: ';
            var1 = arg2;
            var3 = var3.bind(var2)(var1);
            var6 = _closure1_slot0;
            var2 = _closure1_slot1;
            var1 = 1;
            var2 = var2[var1];
            var1 = undefined;
            var6 = var6.bind(var1)(var2);
            var2 = arg1;
            var2 = var6.bind(var1)(var2);
            var2 = var4.bind(var5)(var3, var2);
            return var1;
        };
        var1['onSendingToRPCClient'] = var2;
        var2 = var3.prototype;
        var2 = Object.create(var2, {constructor: {value: var3}});
        var13 = var2;
        var12 = var1;
        var1 = new var13[var3](var12, var11);
        var1 = var1 instanceof Object ? var1 : var2;
        return var1;
    };
    var3['default'] = var2;
    return var1;
})();