// app/modules/rpc/native/server/transports/WebViewWindowProxySocketFactory.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    zuuluu = argFre;
    tangon = argPlu;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = tangon;
    entity = global;
    golfie = entity.Object;
    oscard = golfie.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = oscard.bind(golfie)(zuuluu, entity, report);
    entity = 2;
    report = tangon[entity];
    tangon = argBar;
    entity = undefined;
    oscard = tangon.bind(entity)(report);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rpc/native/server/transports/WebViewWindowProxySocketFactory.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        offset = entity.origin;
        verify = entity.postMessageToRPCClient;
        option = entity.frameId;
        golfie = entity.version;
        oscard = entity.encoding;
        report = entity.logger;
        var _closure2_slot0 = report;
        tangon = entity.postClose;
        yankee = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 0;
        zuuluu = zuuluu[entity];
        entity = undefined;
        zuuluu = yankee.bind(entity)(zuuluu);
        entity = {};
        entity['origin'] = offset;
        entity['postMessageToRPCClient'] = verify;
        entity['frameId'] = option;
        entity['version'] = golfie;
        entity['encoding'] = oscard;
        entity['logger'] = report;
        entity['postClose'] = tangon;
        michal = function(argFoo, argBar) { // Original name: onSendingToRPCClient
            report = _closure2_slot0;
            tangon = report.info;
            entity = global;
            entity = entity.HermesInternal;
            zuuluu = entity.concat;
            michal = 'Socket Emit: ';
            entity = argBar;
            zuuluu = zuuluu.bind(michal)(entity);
            oscard = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 1;
            michal = michal[entity];
            entity = undefined;
            oscard = oscard.bind(entity)(michal);
            michal = argFoo;
            michal = oscard.bind(entity)(michal);
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        };
        entity['onSendingToRPCClient'] = michal;
        michal = zuuluu.prototype;
        michal = Object.create(michal, {constructor: {value: zuuluu}});
        foxtra = michal;
        romeon = entity;
        entity = new foxtra[zuuluu](romeon, yankee);
        entity = entity instanceof Object ? entity : michal;
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();