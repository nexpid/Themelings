// app/modules/rpc/server/commands/config.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscard;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    tangon = michal.TransportTypes;
    var _closure1_slot2 = tangon;
    verify = michal.RPC_AUTHENTICATED_SCOPE;
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    tangon = michal.RPCCommands;
    michal = michal.RPCErrors;
    var _closure1_slot3 = michal;
    michal = {};
    golfie = tangon.SET_CONFIG;
    tangon = {};
    tangon['scope'] = verify;
    verify = function(argFoo) { // Original name: validation
        report = argFoo;
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        entity = michal[entity];
        michal = undefined;
        entity = zuuluu.bind(michal)(entity);
        michal = entity.bind(michal)(report);
        entity = michal.required;
        zuuluu = entity.bind(michal)();
        michal = zuuluu.keys;
        entity = {};
        tangon = report.boolean;
        tangon = tangon.bind(report)();
        entity['use_interactive_pip'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['validation'] = verify;
    option = function(argFoo) { // Original name: handler
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.socket;
            michal = michal.args;
            oscard = michal.use_interactive_pip;
            tangon = entity.transport;
            zuuluu = _closure1_slot2;
            zuuluu = zuuluu.POST_MESSAGE;
            if(!(tangon === zuuluu)) { _fun00002_ip = 230; continue _fun00001 }
 47:
            zuuluu = entity.application;
            tangon = zuuluu.id;
            zuuluu = null;
            if(!(zuuluu != tangon)) { _fun00002_ip = 160; continue _fun00001 }
 63:
            report = _closure1_slot0;
            tangon = _closure1_slot1;
            zuuluu = 4;
            tangon = tangon[zuuluu];
            zuuluu = undefined;
            report = report.bind(zuuluu)(tangon);
            tangon = report.dispatch;
            zuuluu = {};
            golfie = 'EMBEDDED_ACTIVITY_SET_CONFIG';
            zuuluu['type'] = golfie;
            golfie = entity.application;
            golfie = golfie.id;
            zuuluu['applicationId'] = golfie;
            golfie = {};
            golfie['useInteractivePIP'] = oscard;
            zuuluu['config'] = golfie;
            zuuluu = tangon.bind(report)(zuuluu);
            zuuluu = global;
            report = zuuluu.Promise;
            tangon = report.resolve;
            zuuluu = {};
            zuuluu['use_interactive_pip'] = oscard;
            zuuluu = tangon.bind(report)(zuuluu);
            return zuuluu;
 160:
            report = _closure1_slot0;
            tangon = _closure1_slot1;
            zuuluu = 3;
            tangon = tangon[zuuluu];
            zuuluu = undefined;
            oscard = report.bind(zuuluu)(tangon);
            report = {};
            zuuluu = _closure1_slot3;
            zuuluu = zuuluu.INVALID_COMMAND;
            report['errorCode'] = zuuluu;
            zuuluu = oscard.prototype;
            tangon = Object.create(zuuluu, {constructor: {value: oscard}});
            verify = 'invalid application';
            yankee = tangon;
            offset = report;
            zuuluu = new yankee[oscard](offset, verify, option);
            zuuluu = zuuluu instanceof Object ? zuuluu : tangon;
            throw zuuluu;
 230:
            report = _closure1_slot0;
            tangon = _closure1_slot1;
            zuuluu = 3;
            tangon = tangon[zuuluu];
            zuuluu = undefined;
            tangon = report.bind(zuuluu)(tangon);
            zuuluu = {};
            michal = _closure1_slot3;
            michal = michal.INVALID_COMMAND;
            zuuluu['errorCode'] = michal;
            oscard = entity.transport;
            entity = global;
            entity = entity.HermesInternal;
            report = entity.concat;
            michal = 'command not available from "';
            entity = ' transport';
            verify = report.bind(michal)(oscard, entity);
            michal = tangon.prototype;
            michal = Object.create(michal, {constructor: {value: tangon}});
            yankee = michal;
            offset = zuuluu;
            entity = new yankee[tangon](offset, verify, option);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
        }
    };
    tangon['handler'] = option;
    michal[golfie] = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rpc/server/commands/config.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();