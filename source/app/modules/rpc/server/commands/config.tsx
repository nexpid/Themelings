// app/modules/rpc/server/commands/config.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscar;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    entity = 0;
    mike = oscar[entity];
    entity = undefined;
    mike = report.bind(entity)(mike);
    tango = mike.TransportTypes;
    var _closure1_slot2 = tango;
    verify = mike.RPC_AUTHENTICATED_SCOPE;
    mike = 1;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    tango = mike.RPCCommands;
    mike = mike.RPCErrors;
    var _closure1_slot3 = mike;
    mike = {};
    golf = tango.SET_CONFIG;
    tango = {};
    tango['scope'] = verify;
    verify = function(argFoo) { // Original name: validation
        report = argFoo;
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        entity = mike[entity];
        mike = undefined;
        entity = zulu.bind(mike)(entity);
        mike = entity.bind(mike)(report);
        entity = mike.required;
        zulu = entity.bind(mike)();
        mike = zulu.keys;
        entity = {};
        tango = report.boolean;
        tango = tango.bind(report)();
        entity['use_interactive_pip'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['validation'] = verify;
    options = function(argFoo) { // Original name: handler
        _fun109560: for(var _fun109560_ip = 0; ; ) switch(_fun109560_ip) {
 0:
            mike = argFoo;
            entity = mike.socket;
            mike = mike.args;
            oscar = mike.use_interactive_pip;
            tango = entity.transport;
            zulu = _closure1_slot2;
            zulu = zulu.POST_MESSAGE;
            if(!(tango === zulu)) { _fun109560_ip = 232; continue _fun109560 }
 47:
            zulu = entity.application;
            tango = zulu.id;
            zulu = null;
            if(!(zulu != tango)) { _fun109560_ip = 162; continue _fun109560 }
 63:
            report = _closure1_slot0;
            tango = _closure1_slot1;
            zulu = 4;
            tango = tango[zulu];
            zulu = undefined;
            report = report.bind(zulu)(tango);
            tango = report.dispatch;
            zulu = {};
            golf = 'EMBEDDED_ACTIVITY_SET_CONFIG';
            zulu['type'] = golf;
            golf = entity.application;
            golf = golf.id;
            zulu['applicationId'] = golf;
            golf = {};
            golf['useInteractivePIP'] = oscar;
            zulu['config'] = golf;
            zulu = tango.bind(report)(zulu);
            zulu = global;
            report = zulu.Promise;
            tango = report.resolve;
            zulu = {};
            zulu['use_interactive_pip'] = oscar;
            zulu = tango.bind(report)(zulu);
            return zulu;
 162:
            report = _closure1_slot0;
            tango = _closure1_slot1;
            zulu = 3;
            tango = tango[zulu];
            zulu = undefined;
            oscar = report.bind(zulu)(tango);
            report = {};
            zulu = _closure1_slot3;
            zulu = zulu.INVALID_COMMAND;
            report['errorCode'] = zulu;
            zulu = oscar.prototype;
            tango = Object.create(zulu, {constructor: {value: oscar}});
            verify = 'invalid application';
            yankee = tango;
            offset = report;
            zulu = new yankee[oscar](offset, verify, options);
            zulu = zulu instanceof Object ? zulu : tango;
            throw zulu;
 232:
            report = _closure1_slot0;
            tango = _closure1_slot1;
            zulu = 3;
            tango = tango[zulu];
            zulu = undefined;
            tango = report.bind(zulu)(tango);
            zulu = {};
            mike = _closure1_slot3;
            mike = mike.INVALID_COMMAND;
            zulu['errorCode'] = mike;
            oscar = entity.transport;
            entity = global;
            entity = entity.HermesInternal;
            report = entity.concat;
            mike = 'command not available from "';
            entity = ' transport';
            verify = report.bind(mike)(oscar, entity);
            mike = tango.prototype;
            mike = Object.create(mike, {constructor: {value: tango}});
            yankee = mike;
            offset = zulu;
            entity = new yankee[tango](offset, verify, options);
            entity = entity instanceof Object ? entity : mike;
            throw entity;
        }
    };
    tango['handler'] = options;
    mike[golf] = tango;
    tango = 5;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/rpc/server/commands/config.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();