// app/modules/rpc/server/commands/setOrientationLockState.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscard;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    michal = michal.OrientationLockState;
    var _closure1_slot2 = michal;
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    tangon = michal.RPCCommands;
    michal = michal.RPCErrors;
    var _closure1_slot3 = michal;
    michal = {};
    golfie = tangon.SET_ORIENTATION_LOCK_STATE;
    tangon = {};
    verify = function(argFoo) { // Original name: validation
        golfie = argFoo;
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 2;
        entity = michal[entity];
        michal = undefined;
        entity = zuuluu.bind(michal)(entity);
        michal = entity.bind(michal)(golfie);
        entity = michal.required;
        zuuluu = entity.bind(michal)();
        michal = zuuluu.keys;
        entity = {};
        report = golfie.number;
        offset = report.bind(golfie)();
        verify = offset.valid;
        tangon = _closure1_slot2;
        option = tangon.UNLOCKED;
        oscard = tangon.PORTRAIT;
        report = tangon.LANDSCAPE;
        oscard = verify.bind(offset)(option, oscard, report);
        report = oscard.required;
        report = report.bind(oscard)();
        entity['lock_state'] = report;
        report = golfie.number;
        offset = report.bind(golfie)();
        verify = offset.valid;
        option = tangon.UNLOCKED;
        oscard = tangon.PORTRAIT;
        report = tangon.LANDSCAPE;
        option = verify.bind(offset)(option, oscard, report);
        report = option.allow;
        oscard = null;
        option = report.bind(option)(oscard);
        report = option.optional;
        report = report.bind(option)();
        entity['picture_in_picture_lock_state'] = report;
        report = golfie.number;
        verify = report.bind(golfie)();
        option = verify.valid;
        golfie = tangon.UNLOCKED;
        report = tangon.PORTRAIT;
        tangon = tangon.LANDSCAPE;
        report = option.bind(verify)(golfie, report, tangon);
        tangon = report.allow;
        report = tangon.bind(report)(oscard);
        tangon = report.optional;
        tangon = tangon.bind(report)();
        entity['grid_lock_state'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['validation'] = verify;
    option = function(argFoo) { // Original name: handler
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.socket;
            michal = michal.args;
            golfie = michal.lock_state;
            oscard = michal.picture_in_picture_lock_state;
            report = michal.grid_lock_state;
            entity = entity.application;
            option = entity.id;
            entity = null;
            if(!(entity != option)) { _fun00002_ip = 117; continue _fun00001 }
 49:
            zuuluu = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 3;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.dispatch;
            michal = {};
            verify = 'EMBEDDED_ACTIVITY_SET_ORIENTATION_LOCK_STATE';
            michal['type'] = verify;
            michal['applicationId'] = option;
            michal['lockState'] = golfie;
            michal['pictureInPictureLockState'] = oscard;
            michal['gridLockState'] = report;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
 117:
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot1;
            michal = 4;
            zuuluu = zuuluu[michal];
            michal = undefined;
            tangon = tangon.bind(michal)(zuuluu);
            zuuluu = {};
            entity = _closure1_slot3;
            entity = entity.INVALID_COMMAND;
            zuuluu['errorCode'] = entity;
            entity = tangon.prototype;
            michal = Object.create(entity, {constructor: {value: tangon}});
            offset = 'No application.';
            romeon = michal;
            yankee = zuuluu;
            entity = new romeon[tangon](yankee, offset, verify);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
        }
    };
    tangon['handler'] = option;
    michal[golfie] = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rpc/server/commands/setOrientationLockState.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();