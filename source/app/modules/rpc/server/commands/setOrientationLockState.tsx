// app/modules/rpc/server/commands/setOrientationLockState.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var3 = exports;
    var6 = dependencyMap;
    var1 = metroImportDefault;
    var _closure1_slot0 = var1;
    var _closure1_slot1 = var6;
    var1 = global;
    var7 = var1.Object;
    var4 = var7.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var4.bind(var7)(var3, var1, var2);
    var1 = 0;
    var2 = var6[var1];
    var1 = undefined;
    var2 = var5.bind(var1)(var2);
    var2 = var2.OrientationLockState;
    var _closure1_slot2 = var2;
    var2 = 1;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var4 = var2.RPCCommands;
    var2 = var2.RPCErrors;
    var _closure1_slot3 = var2;
    var2 = {};
    var7 = var4.SET_ORIENTATION_LOCK_STATE;
    var4 = {};
    var9 = function validation(arg1) {
        var7 = arg1;
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 2;
        var1 = var2[var1];
        var2 = undefined;
        var1 = var3.bind(var2)(var1);
        var2 = var1.bind(var2)(var7);
        var1 = var2.required;
        var3 = var1.bind(var2)();
        var2 = var3.keys;
        var1 = {};
        var5 = var7.number;
        var10 = var5.bind(var7)();
        var9 = var10.valid;
        var4 = _closure1_slot2;
        var8 = var4.UNLOCKED;
        var6 = var4.PORTRAIT;
        var5 = var4.LANDSCAPE;
        var6 = var9.bind(var10)(var8, var6, var5);
        var5 = var6.required;
        var5 = var5.bind(var6)();
        var1['lock_state'] = var5;
        var5 = var7.number;
        var10 = var5.bind(var7)();
        var9 = var10.valid;
        var8 = var4.UNLOCKED;
        var6 = var4.PORTRAIT;
        var5 = var4.LANDSCAPE;
        var8 = var9.bind(var10)(var8, var6, var5);
        var5 = var8.allow;
        var6 = null;
        var8 = var5.bind(var8)(var6);
        var5 = var8.optional;
        var5 = var5.bind(var8)();
        var1['picture_in_picture_lock_state'] = var5;
        var5 = var7.number;
        var9 = var5.bind(var7)();
        var8 = var9.valid;
        var7 = var4.UNLOCKED;
        var5 = var4.PORTRAIT;
        var4 = var4.LANDSCAPE;
        var5 = var8.bind(var9)(var7, var5, var4);
        var4 = var5.allow;
        var5 = var4.bind(var5)(var6);
        var4 = var5.optional;
        var4 = var4.bind(var5)();
        var1['grid_lock_state'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['validation'] = var9;
    var8 = function handler(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var2 = arg1;
            var1 = var2.socket;
            var2 = var2.args;
            var7 = var2.lock_state;
            var6 = var2.picture_in_picture_lock_state;
            var5 = var2.grid_lock_state;
            var1 = var1.application;
            var8 = var1.id;
            var1 = null;
            if(!(var1 != var8)) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var3 = _closure1_slot0;
            var2 = _closure1_slot1;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var4 = var3.bind(var1)(var2);
            var3 = var4.dispatch;
            var2 = {};
            var9 = 'EMBEDDED_ACTIVITY_SET_ORIENTATION_LOCK_STATE';
            var2['type'] = var9;
            var2['applicationId'] = var8;
            var2['lockState'] = var7;
            var2['pictureInPictureLockState'] = var6;
            var2['gridLockState'] = var5;
            var2 = var3.bind(var4)(var2);
            return var1;
case 2:
            var4 = _closure1_slot0;
            var3 = _closure1_slot1;
            var2 = 4;
            var3 = var3[var2];
            var2 = undefined;
            var4 = var4.bind(var2)(var3);
            var3 = {};
            var1 = _closure1_slot3;
            var1 = var1.INVALID_COMMAND;
            var3['errorCode'] = var1;
            var1 = var4.prototype;
            var2 = Object.create(var1, {constructor: {value: var4}});
            var10 = 'No application.';
            var12 = var2;
            var11 = var3;
            var1 = new var12[var4](var11, var10, var9);
            var1 = var1 instanceof Object ? var1 : var2;
            throw var1;
        }
    };
    var4['handler'] = var8;
    var2[var7] = var4;
    var4 = 5;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/rpc/server/commands/setOrientationLockState.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();