// app/modules/rpc/server/commands/setOrientationLockState.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscar;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    entity = 0;
    mike = oscar[entity];
    entity = undefined;
    mike = report.bind(entity)(mike);
    mike = mike.OrientationLockState;
    var _closure1_slot2 = mike;
    mike = 1;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    tango = mike.RPCCommands;
    mike = mike.RPCErrors;
    var _closure1_slot3 = mike;
    mike = {};
    golf = tango.SET_ORIENTATION_LOCK_STATE;
    tango = {};
    verify = function(argFoo) { // Original name: validation
        golf = argFoo;
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 2;
        entity = mike[entity];
        mike = undefined;
        entity = zulu.bind(mike)(entity);
        mike = entity.bind(mike)(golf);
        entity = mike.required;
        zulu = entity.bind(mike)();
        mike = zulu.keys;
        entity = {};
        report = golf.number;
        offset = report.bind(golf)();
        verify = offset.valid;
        tango = _closure1_slot2;
        options = tango.UNLOCKED;
        oscar = tango.PORTRAIT;
        report = tango.LANDSCAPE;
        oscar = verify.bind(offset)(options, oscar, report);
        report = oscar.required;
        report = report.bind(oscar)();
        entity['lock_state'] = report;
        report = golf.number;
        offset = report.bind(golf)();
        verify = offset.valid;
        options = tango.UNLOCKED;
        oscar = tango.PORTRAIT;
        report = tango.LANDSCAPE;
        options = verify.bind(offset)(options, oscar, report);
        report = options.allow;
        oscar = null;
        options = report.bind(options)(oscar);
        report = options.optional;
        report = report.bind(options)();
        entity['picture_in_picture_lock_state'] = report;
        report = golf.number;
        verify = report.bind(golf)();
        options = verify.valid;
        golf = tango.UNLOCKED;
        report = tango.PORTRAIT;
        tango = tango.LANDSCAPE;
        report = options.bind(verify)(golf, report, tango);
        tango = report.allow;
        report = tango.bind(report)(oscar);
        tango = report.optional;
        tango = tango.bind(report)();
        entity['grid_lock_state'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['validation'] = verify;
    options = function(argFoo) { // Original name: handler
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            entity = mike.socket;
            mike = mike.args;
            golf = mike.lock_state;
            oscar = mike.picture_in_picture_lock_state;
            report = mike.grid_lock_state;
            entity = entity.application;
            options = entity.id;
            entity = null;
            if(!(entity != options)) { _fun00002_ip = 117; continue _fun00001 }
 49:
            zulu = _closure1_slot0;
            mike = _closure1_slot1;
            entity = 3;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.dispatch;
            mike = {};
            verify = 'EMBEDDED_ACTIVITY_SET_ORIENTATION_LOCK_STATE';
            mike['type'] = verify;
            mike['applicationId'] = options;
            mike['lockState'] = golf;
            mike['pictureInPictureLockState'] = oscar;
            mike['gridLockState'] = report;
            mike = zulu.bind(tango)(mike);
            return entity;
 117:
            tango = _closure1_slot0;
            zulu = _closure1_slot1;
            mike = 4;
            zulu = zulu[mike];
            mike = undefined;
            tango = tango.bind(mike)(zulu);
            zulu = {};
            entity = _closure1_slot3;
            entity = entity.INVALID_COMMAND;
            zulu['errorCode'] = entity;
            entity = tango.prototype;
            mike = Object.create(entity, {constructor: {value: tango}});
            offset = 'No application.';
            romeo = mike;
            yankee = zulu;
            entity = new romeo[tango](yankee, offset, verify);
            entity = entity instanceof Object ? entity : mike;
            throw entity;
        }
    };
    tango['handler'] = options;
    mike[golf] = tango;
    tango = 5;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/rpc/server/commands/setOrientationLockState.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();