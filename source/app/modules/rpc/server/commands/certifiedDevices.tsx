// app/modules/rpc/server/commands/certifiedDevices.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var1 = metroImportDefault;
    var _closure1_slot1 = var1;
    var _closure1_slot2 = var6;
    var1 = global;
    var7 = var1.Object;
    var4 = var7.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var4.bind(var7)(var3, var1, var2);
    var1 = 0;
    var2 = var6[var1];
    var1 = undefined;
    var2 = var5.bind(var1)(var2);
    var12 = var2.RPC_LOCAL_SCOPE;
    var10 = var2.RPC_SCOPE_CONFIG;
    var2 = 1;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var4 = var2.RPCCommands;
    var2 = var2.RPCErrors;
    var _closure1_slot3 = var2;
    var2 = 2;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var2 = var2.DeviceTypes;
    var _closure1_slot4 = var2;
    var2 = {};
    var7 = var4.SET_CERTIFIED_DEVICES;
    var4 = {};
    var9 = {};
    var11 = var10.ANY;
    var10 = 3;
    var10 = var6[var10];
    var10 = var5.bind(var1)(var10);
    var10 = var10.OAuth2Scopes;
    var13 = var10.RPC;
    var10 = new Array(2);
    var10[0] = var13;
    var10[1] = var12;
    var9[var11] = var10;
    var4['scope'] = var9;
    var9 = function validation(arg1) {
        var10 = arg1;
        var12 = _closure1_slot1;
        var13 = _closure1_slot2;
        var9 = 4;
        var1 = var13[var9];
        var11 = undefined;
        var1 = var12.bind(var11)(var1);
        var2 = var1.bind(var11)(var10);
        var1 = var2.required;
        var3 = var1.bind(var2)();
        var2 = var3.keys;
        var1 = {};
        var4 = var10.array;
        var6 = var4.bind(var10)();
        var5 = var6.items;
        var4 = var13[var9];
        var4 = var12.bind(var11)(var4);
        var8 = var4.bind(var11)(var10);
        var7 = var8.keys;
        var4 = {};
        var15 = var10.string;
        var16 = var15.bind(var10)();
        var15 = var16.required;
        var16 = var15.bind(var16)();
        var15 = var16.valid;
        var17 = _closure1_slot4;
        var18 = var17.AUDIO_INPUT;
        var14 = new Array(3);
        var14[0] = var18;
        var18 = var17.AUDIO_OUTPUT;
        var14[1] = var18;
        var17 = var17.VIDEO_INPUT;
        var14[2] = var17;
        var14 = var15.bind(var16)(var14);
        var4['type'] = var14;
        var14 = var10.string;
        var15 = var14.bind(var10)();
        var14 = var15.required;
        var16 = var14.bind(var15)();
        var15 = var16.min;
        var14 = 1;
        var15 = var15.bind(var16)(var14);
        var4['id'] = var15;
        var15 = var13[var9];
        var15 = var12.bind(var11)(var15);
        var16 = var15.bind(var11)(var10);
        var15 = var16.required;
        var17 = var15.bind(var16)();
        var16 = var17.keys;
        var15 = {};
        var18 = var10.string;
        var19 = var18.bind(var10)();
        var18 = var19.min;
        var18 = var18.bind(var19)(var14);
        var15['name'] = var18;
        var18 = var10.string;
        var19 = var18.bind(var10)();
        var18 = var19.min;
        var18 = var18.bind(var19)(var14);
        var15['url'] = var18;
        var15 = var16.bind(var17)(var15);
        var4['vendor'] = var15;
        var9 = var13[var9];
        var9 = var12.bind(var11)(var9);
        var11 = var9.bind(var11)(var10);
        var9 = var11.required;
        var12 = var9.bind(var11)();
        var11 = var12.keys;
        var9 = {};
        var13 = var10.string;
        var15 = var13.bind(var10)();
        var13 = var15.min;
        var13 = var13.bind(var15)(var14);
        var9['name'] = var13;
        var13 = var10.string;
        var15 = var13.bind(var10)();
        var13 = var15.min;
        var13 = var13.bind(var15)(var14);
        var9['url'] = var13;
        var9 = var11.bind(var12)(var9);
        var4['model'] = var9;
        var9 = var10.array;
        var12 = var9.bind(var10)();
        var11 = var12.items;
        var9 = var10.string;
        var13 = var9.bind(var10)();
        var9 = var13.min;
        var9 = var9.bind(var13)(var14);
        var9 = var11.bind(var12)(var9);
        var4['related'] = var9;
        var9 = var10.boolean;
        var9 = var9.bind(var10)();
        var4['echo_cancellation'] = var9;
        var9 = var10.boolean;
        var9 = var9.bind(var10)();
        var4['noise_suppression'] = var9;
        var9 = var10.boolean;
        var9 = var9.bind(var10)();
        var4['automatic_gain_control'] = var9;
        var9 = var10.boolean;
        var9 = var9.bind(var10)();
        var4['hardware_mute'] = var9;
        var4 = var7.bind(var8)(var4);
        var4 = var5.bind(var6)(var4);
        var1['devices'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['validation'] = var9;
    var8 = function handler(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var1 = arg1;
            var3 = var1.socket;
            var1 = var1.args;
            var7 = var1.devices;
            var _closure2_slot0 = var7;
            var1 = var3.application;
            var4 = var1.id;
            var1 = null;
            if(!(var1 != var4)) { _fun0001_ip = 109; continue _fun0001 }
 43:
            var5 = _closure1_slot0;
            var4 = _closure1_slot2;
            var1 = 6;
            var4 = var4[var1];
            var1 = undefined;
            var5 = var5.bind(var1)(var4);
            var4 = var5.setCertifiedDevices;
            var3 = var3.application;
            var3 = var3.id;
            var6 = var7.map;
            var2 = function(arg1) {
                var2 = arg1;
                var1 = {};
                var3 = var2.type;
                var1['type'] = var3;
                var3 = var2.id;
                var1['id'] = var3;
                var3 = var2.vendor;
                var1['vendor'] = var3;
                var3 = var2.model;
                var1['model'] = var3;
                var5 = var2.related;
                var4 = var5.filter;
                var3 = function(arg1) {
                    var2 = arg1;
                    var _closure4_slot0 = var2;
                    var3 = _closure2_slot0;
                    var2 = var3.some;
                    var1 = function(arg1) {
                        var1 = arg1;
                        var2 = var1.id;
                        var1 = _closure4_slot0;
                        var1 = var2 === var1;
                        return var1;
                    };
                    var1 = var2.bind(var3)(var1);
                    return var1;
                };
                var3 = var4.bind(var5)(var3);
                var1['related'] = var3;
                var3 = var2.echo_cancellation;
                var1['echoCancellation'] = var3;
                var3 = var2.noise_suppression;
                var1['noiseSuppression'] = var3;
                var3 = var2.automatic_gain_control;
                var1['automaticGainControl'] = var3;
                var2 = var2.hardware_mute;
                var1['hardwareMute'] = var2;
                return var1;
            };
            var2 = var6.bind(var7)(var2);
            var2 = var4.bind(var5)(var3, var2);
            return var1;
 109:
            var4 = _closure1_slot1;
            var3 = _closure1_slot2;
            var2 = 5;
            var3 = var3[var2];
            var2 = undefined;
            var4 = var4.bind(var2)(var3);
            var3 = {};
            var1 = _closure1_slot3;
            var1 = var1.INVALID_COMMAND;
            var3['errorCode'] = var1;
            var1 = var4.prototype;
            var2 = Object.create(var1, {constructor: {value: var4}});
            var8 = 'No application.';
            var10 = var2;
            var9 = var3;
            var1 = new var10[var4](var9, var8, var7);
            var1 = var1 instanceof Object ? var1 : var2;
            throw var1;
        }
    };
    var4['handler'] = var8;
    var2[var7] = var4;
    var4 = 7;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/rpc/server/commands/certifiedDevices.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();