// app/modules/rpc/server/commands/certifiedDevices.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    romeon = michal.RPC_LOCAL_SCOPE;
    offset = michal.RPC_SCOPE_CONFIG;
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    tangon = michal.RPCCommands;
    michal = michal.RPCErrors;
    var _closure1_slot3 = michal;
    michal = 2;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    michal = michal.DeviceTypes;
    var _closure1_slot4 = michal;
    michal = {};
    golfie = tangon.SET_CERTIFIED_DEVICES;
    tangon = {};
    verify = {};
    yankee = offset.ANY;
    offset = 3;
    offset = oscard[offset];
    offset = report.bind(entity)(offset);
    offset = offset.OAuth2Scopes;
    foxtra = offset.RPC;
    offset = new Array(2);
    offset[0] = foxtra;
    offset[1] = romeon;
    verify[yankee] = offset;
    tangon['scope'] = verify;
    verify = function(argFoo) { // Original name: validation
        offset = argFoo;
        romeon = _closure1_slot1;
        foxtra = _closure1_slot2;
        verify = 4;
        entity = foxtra[verify];
        yankee = undefined;
        entity = romeon.bind(yankee)(entity);
        michal = entity.bind(yankee)(offset);
        entity = michal.required;
        zuuluu = entity.bind(michal)();
        michal = zuuluu.keys;
        entity = {};
        tangon = offset.array;
        oscard = tangon.bind(offset)();
        report = oscard.items;
        tangon = foxtra[verify];
        tangon = romeon.bind(yankee)(tangon);
        option = tangon.bind(yankee)(offset);
        golfie = option.keys;
        tangon = {};
        kiloes = offset.string;
        sizing = kiloes.bind(offset)();
        kiloes = sizing.required;
        sizing = kiloes.bind(sizing)();
        kiloes = sizing.valid;
        output = _closure1_slot4;
        result = output.AUDIO_INPUT;
        backup = new Array(3);
        backup[0] = result;
        result = output.AUDIO_OUTPUT;
        backup[1] = result;
        output = output.VIDEO_INPUT;
        backup[2] = output;
        backup = kiloes.bind(sizing)(backup);
        tangon['type'] = backup;
        backup = offset.string;
        kiloes = backup.bind(offset)();
        backup = kiloes.required;
        sizing = backup.bind(kiloes)();
        kiloes = sizing.min;
        backup = 1;
        kiloes = kiloes.bind(sizing)(backup);
        tangon['id'] = kiloes;
        kiloes = foxtra[verify];
        kiloes = romeon.bind(yankee)(kiloes);
        sizing = kiloes.bind(yankee)(offset);
        kiloes = sizing.required;
        output = kiloes.bind(sizing)();
        sizing = output.keys;
        kiloes = {};
        result = offset.string;
        echoed = result.bind(offset)();
        result = echoed.min;
        result = result.bind(echoed)(backup);
        kiloes['name'] = result;
        result = offset.string;
        echoed = result.bind(offset)();
        result = echoed.min;
        result = result.bind(echoed)(backup);
        kiloes['url'] = result;
        kiloes = sizing.bind(output)(kiloes);
        tangon['vendor'] = kiloes;
        verify = foxtra[verify];
        verify = romeon.bind(yankee)(verify);
        yankee = verify.bind(yankee)(offset);
        verify = yankee.required;
        romeon = verify.bind(yankee)();
        yankee = romeon.keys;
        verify = {};
        foxtra = offset.string;
        kiloes = foxtra.bind(offset)();
        foxtra = kiloes.min;
        foxtra = foxtra.bind(kiloes)(backup);
        verify['name'] = foxtra;
        foxtra = offset.string;
        kiloes = foxtra.bind(offset)();
        foxtra = kiloes.min;
        foxtra = foxtra.bind(kiloes)(backup);
        verify['url'] = foxtra;
        verify = yankee.bind(romeon)(verify);
        tangon['model'] = verify;
        verify = offset.array;
        romeon = verify.bind(offset)();
        yankee = romeon.items;
        verify = offset.string;
        foxtra = verify.bind(offset)();
        verify = foxtra.min;
        verify = verify.bind(foxtra)(backup);
        verify = yankee.bind(romeon)(verify);
        tangon['related'] = verify;
        verify = offset.boolean;
        verify = verify.bind(offset)();
        tangon['echo_cancellation'] = verify;
        verify = offset.boolean;
        verify = verify.bind(offset)();
        tangon['noise_suppression'] = verify;
        verify = offset.boolean;
        verify = verify.bind(offset)();
        tangon['automatic_gain_control'] = verify;
        verify = offset.boolean;
        verify = verify.bind(offset)();
        tangon['hardware_mute'] = verify;
        tangon = golfie.bind(option)(tangon);
        tangon = report.bind(oscard)(tangon);
        entity['devices'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['validation'] = verify;
    option = function(argFoo) { // Original name: handler
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            zuuluu = entity.socket;
            entity = entity.args;
            golfie = entity.devices;
            var _closure2_slot0 = golfie;
            entity = zuuluu.application;
            tangon = entity.id;
            entity = null;
            if(!(entity != tangon)) { _fun00002_ip = 109; continue _fun00001 }
 43:
            report = _closure1_slot0;
            tangon = _closure1_slot2;
            entity = 6;
            tangon = tangon[entity];
            entity = undefined;
            report = report.bind(entity)(tangon);
            tangon = report.setCertifiedDevices;
            zuuluu = zuuluu.application;
            zuuluu = zuuluu.id;
            oscard = golfie.map;
            michal = function(argFoo) {
                michal = argFoo;
                entity = {};
                zuuluu = michal.type;
                entity['type'] = zuuluu;
                zuuluu = michal.id;
                entity['id'] = zuuluu;
                zuuluu = michal.vendor;
                entity['vendor'] = zuuluu;
                zuuluu = michal.model;
                entity['model'] = zuuluu;
                report = michal.related;
                tangon = report.filter;
                zuuluu = function(argFoo) {
                    michal = argFoo;
                    var _closure4_slot0 = michal;
                    zuuluu = _closure2_slot0;
                    michal = zuuluu.some;
                    entity = function(argFoo) {
                        entity = argFoo;
                        michal = entity.id;
                        entity = _closure4_slot0;
                        entity = michal === entity;
                        return entity;
                    };
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
                };
                zuuluu = tangon.bind(report)(zuuluu);
                entity['related'] = zuuluu;
                zuuluu = michal.echo_cancellation;
                entity['echoCancellation'] = zuuluu;
                zuuluu = michal.noise_suppression;
                entity['noiseSuppression'] = zuuluu;
                zuuluu = michal.automatic_gain_control;
                entity['automaticGainControl'] = zuuluu;
                michal = michal.hardware_mute;
                entity['hardwareMute'] = michal;
                return entity;
            };
            michal = oscard.bind(golfie)(michal);
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
 109:
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            michal = 5;
            zuuluu = zuuluu[michal];
            michal = undefined;
            tangon = tangon.bind(michal)(zuuluu);
            zuuluu = {};
            entity = _closure1_slot3;
            entity = entity.INVALID_COMMAND;
            zuuluu['errorCode'] = entity;
            entity = tangon.prototype;
            michal = Object.create(entity, {constructor: {value: tangon}});
            option = 'No application.';
            offset = michal;
            verify = zuuluu;
            entity = new offset[tangon](verify, option, golfie);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
        }
    };
    tangon['handler'] = option;
    michal[golfie] = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rpc/server/commands/certifiedDevices.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();