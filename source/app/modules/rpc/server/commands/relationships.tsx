// app/modules/rpc/server/commands/relationships.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    tangon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = tangon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = tangon.bind(entity)(michal);
    var _closure1_slot3 = michal;
    michal = 1;
    michal = oscard[michal];
    michal = tangon.bind(entity)(michal);
    var _closure1_slot4 = michal;
    michal = 2;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    foxtra = michal.RPC_SCOPE_CONFIG;
    michal = 3;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    tangon = michal.RelationshipTypes;
    var _closure1_slot5 = tangon;
    tangon = michal.RPCCommands;
    michal = {};
    golfie = tangon.GET_RELATIONSHIPS;
    option = 4;
    option = oscard[option];
    offset = report.bind(entity)(option);
    verify = offset.createRPCCommand;
    option = tangon.GET_RELATIONSHIPS;
    tangon = {};
    romeon = {};
    backup = foxtra.ANY;
    foxtra = 5;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    foxtra = foxtra.OAuth2Scopes;
    kiloes = foxtra.RELATIONSHIPS_READ;
    foxtra = new Array(1);
    foxtra[0] = kiloes;
    romeon[backup] = foxtra;
    tangon['scope'] = romeon;
    yankee = function(argFoo) { // Original name: handler
        entity = argFoo;
        var _closure2_slot0 = entity;
        report = _closure1_slot1;
        golfie = _closure1_slot2;
        tangon = 6;
        entity = golfie[tangon];
        oscard = undefined;
        offset = report.bind(oscard)(entity);
        verify = offset.pickBy;
        option = {};
        yankee = _closure1_slot3;
        entity = yankee.getRelationships;
        romeon = entity.bind(yankee)();
        foxtra = option;
        entity = copyDataProperties(foxtra, romeon);
        entity = function(argFoo) {
            entity = _closure1_slot5;
            michal = entity.NONE;
            entity = argFoo;
            entity = entity !== michal;
            return entity;
        };
        option = verify.bind(offset)(option, entity);
        entity = {};
        tangon = golfie[tangon];
        report = report.bind(oscard)(tangon);
        tangon = report.map;
        zuuluu = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                tangon = _closure1_slot4;
                zuuluu = tangon.getUser;
                entity = argBar;
                verify = zuuluu.bind(tangon)(entity);
                entity = null;
                if(!(entity != verify)) { _fun00002_ip = 110; continue _fun00001 }
 27:
                tangon = _closure1_slot0;
                oscard = _closure1_slot2;
                michal = 7;
                report = oscard[michal];
                zuuluu = undefined;
                option = tangon.bind(zuuluu)(report);
                golfie = option.transformBaseRelationship;
                report = argFoo;
                report = golfie.bind(option)(report, verify);
                michal = oscard[michal];
                tangon = tangon.bind(zuuluu)(michal);
                zuuluu = tangon.transformApplicationRelationship;
                michal = _closure2_slot0;
                michal = michal.socket;
                michal = michal.application;
                michal = michal.id;
                michal = zuuluu.bind(tangon)(report, michal);
                return michal;
 110:
                return entity;
            }
        };
        tangon = tangon.bind(report)(option, zuuluu);
        zuuluu = tangon.filter;
        report = _closure1_slot0;
        michal = 8;
        michal = golfie[michal];
        michal = report.bind(oscard)(michal);
        michal = michal.isNotNullish;
        michal = zuuluu.bind(tangon)(michal);
        entity['relationships'] = michal;
        return entity;
    };
    tangon['handler'] = yankee;
    tangon = verify.bind(offset)(option, tangon);
    michal[golfie] = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rpc/server/commands/relationships.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();