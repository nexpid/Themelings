// app/modules/rpc/server/commands/users.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    verify = michal.RPC_LOCAL_SCOPE;
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    tangon = michal.RPCCommands;
    michal = michal.RPCErrors;
    var _closure1_slot3 = michal;
    michal = {};
    golfie = tangon.GET_USER;
    tangon = {};
    tangon['scope'] = verify;
    verify = function(argFoo) { // Original name: validation
        report = argFoo;
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        entity = michal[entity];
        michal = undefined;
        entity = zuuluu.bind(michal)(entity);
        michal = entity.bind(michal)(report);
        entity = michal.required;
        zuuluu = entity.bind(michal)();
        michal = zuuluu.keys;
        entity = {};
        tangon = report.string;
        report = tangon.bind(report)();
        tangon = report.required;
        tangon = tangon.bind(report)();
        entity['id'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['validation'] = verify;
    option = function(argFoo) { // Original name: handler
        michal = argFoo;
        michal = michal.args;
        report = michal.id;
        var _closure2_slot0 = report;
        tangon = _closure1_slot0;
        golfie = _closure1_slot2;
        zuuluu = 3;
        zuuluu = golfie[zuuluu];
        oscard = undefined;
        tangon = tangon.bind(oscard)(zuuluu);
        zuuluu = tangon.getUser;
        tangon = zuuluu.bind(tangon)(report);
        zuuluu = tangon.then;
        report = _closure1_slot1;
        michal = 4;
        michal = golfie[michal];
        michal = report.bind(oscard)(michal);
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.catch;
        entity = function() {
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            michal = 5;
            zuuluu = zuuluu[michal];
            michal = undefined;
            tangon = tangon.bind(michal)(zuuluu);
            zuuluu = {};
            entity = _closure1_slot3;
            entity = entity.INVALID_USER;
            zuuluu['errorCode'] = entity;
            report = _closure2_slot0;
            entity = global;
            entity = entity.HermesInternal;
            michal = entity.concat;
            entity = 'Invalid user id: ';
            oscard = michal.bind(entity)(report);
            michal = tangon.prototype;
            michal = Object.create(michal, {constructor: {value: tangon}});
            option = michal;
            golfie = zuuluu;
            entity = new option[tangon](golfie, oscard, report);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
        };
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['handler'] = option;
    michal[golfie] = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rpc/server/commands/users.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();