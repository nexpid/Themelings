// app/modules/rpc/server/commands/users.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    entity = 0;
    mike = oscar[entity];
    entity = undefined;
    mike = report.bind(entity)(mike);
    verify = mike.RPC_LOCAL_SCOPE;
    mike = 1;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    tango = mike.RPCCommands;
    mike = mike.RPCErrors;
    var _closure1_slot3 = mike;
    mike = {};
    golf = tango.GET_USER;
    tango = {};
    tango['scope'] = verify;
    verify = function(argFoo) { // Original name: validation
        report = argFoo;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 2;
        entity = mike[entity];
        mike = undefined;
        entity = zulu.bind(mike)(entity);
        mike = entity.bind(mike)(report);
        entity = mike.required;
        zulu = entity.bind(mike)();
        mike = zulu.keys;
        entity = {};
        tango = report.string;
        report = tango.bind(report)();
        tango = report.required;
        tango = tango.bind(report)();
        entity['id'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['validation'] = verify;
    options = function(argFoo) { // Original name: handler
        mike = argFoo;
        mike = mike.args;
        report = mike.id;
        var _closure2_slot0 = report;
        tango = _closure1_slot0;
        golf = _closure1_slot2;
        zulu = 3;
        zulu = golf[zulu];
        oscar = undefined;
        tango = tango.bind(oscar)(zulu);
        zulu = tango.getUser;
        tango = zulu.bind(tango)(report);
        zulu = tango.then;
        report = _closure1_slot1;
        mike = 4;
        mike = golf[mike];
        mike = report.bind(oscar)(mike);
        zulu = zulu.bind(tango)(mike);
        mike = zulu.catch;
        entity = function() {
            tango = _closure1_slot1;
            zulu = _closure1_slot2;
            mike = 5;
            zulu = zulu[mike];
            mike = undefined;
            tango = tango.bind(mike)(zulu);
            zulu = {};
            entity = _closure1_slot3;
            entity = entity.INVALID_USER;
            zulu['errorCode'] = entity;
            report = _closure2_slot0;
            entity = global;
            entity = entity.HermesInternal;
            mike = entity.concat;
            entity = 'Invalid user id: ';
            oscar = mike.bind(entity)(report);
            mike = tango.prototype;
            mike = Object.create(mike, {constructor: {value: tango}});
            options = mike;
            golf = zulu;
            entity = new options[tango](golf, oscar, report);
            entity = entity instanceof Object ? entity : mike;
            throw entity;
        };
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['handler'] = options;
    mike[golf] = tango;
    tango = 6;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/rpc/server/commands/users.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();