// app/modules/media_panel/native/MediaPlaybackPanelStateContext.tsx
export default (function(_, argBar, __, argCor, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    romeon = true;
    michal['value'] = romeon;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    foxtra = 0;
    tangon = oscard[foxtra];
    michal = argCor;
    entity = undefined;
    golfie = michal.bind(entity)(tangon);
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    yankee = michal.MediaPlaybackPanelModes;
    michal = 2;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    offset = michal.MorphablePanelModes;
    tangon = golfie.createContext;
    michal = {};
    option = 3;
    backup = oscard[option];
    kiloes = report.bind(entity)(backup);
    backup = kiloes.createFakeSharedValue;
    yankee = yankee.PIP;
    yankee = backup.bind(kiloes)(yankee);
    michal['mode'] = yankee;
    yankee = function() { // Original name: setMode
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'MediaPlaybackPanelModes.Provider.setMode: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['setMode'] = yankee;
    yankee = oscard[option];
    backup = report.bind(entity)(yankee);
    yankee = backup.createFakeSharedValue;
    offset = offset.PIP;
    offset = yankee.bind(backup)(offset);
    michal['morphablePanelMode'] = offset;
    offset = oscard[option];
    backup = report.bind(entity)(offset);
    yankee = backup.createFakeSharedValue;
    offset = {'width': 0, 'height': 0};
    offset = yankee.bind(backup)(offset);
    michal['wrapperDimensions'] = offset;
    offset = oscard[option];
    backup = report.bind(entity)(offset);
    offset = backup.createFakeSharedValue;
    yankee = false;
    offset = offset.bind(backup)(yankee);
    michal['useReducedMotion'] = offset;
    offset = oscard[option];
    kiloes = report.bind(entity)(offset);
    backup = kiloes.createFakeSharedValue;
    offset = {'x': 4294967295, 'y': 4294967295};
    offset = backup.bind(kiloes)(offset);
    michal['pipState'] = offset;
    offset = oscard[option];
    kiloes = report.bind(entity)(offset);
    backup = kiloes.createFakeSharedValue;
    offset = {'top': 0, 'bottom': 0};
    offset = backup.bind(kiloes)(offset);
    michal['pipAvoidanceSpecs'] = offset;
    offset = {};
    offset['current'] = entity;
    michal['dismissToPipGestureRef'] = offset;
    verify = function() { // Original name: dismissPanel
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.dismissDrawer: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['dismissPanel'] = verify;
    verify = oscard[option];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(foxtra);
    michal['scrollPosition'] = verify;
    verify = oscard[option];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(romeon);
    michal['canShowPIP'] = verify;
    verify = oscard[option];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(yankee);
    michal['lockScrolling'] = verify;
    option = oscard[option];
    offset = report.bind(entity)(option);
    verify = offset.createFakeSharedValue;
    option = {'x': 0, 'y': 0, 'gestureActive': false};
    option = verify.bind(offset)(option);
    michal['wrapperOffset'] = option;
    michal = tangon.bind(golfie)(michal);
    tangon = 4;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/media_panel/native/MediaPlaybackPanelStateContext.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();