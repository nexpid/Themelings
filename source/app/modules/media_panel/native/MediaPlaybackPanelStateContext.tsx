// app/modules/media_panel/native/MediaPlaybackPanelStateContext.tsx
export default (function(_, argBar, __, argCorge, ___, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    romeo = true;
    mike['value'] = romeo;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    foxtrot = 0;
    tango = oscar[foxtrot];
    mike = argCorge;
    entity = undefined;
    golf = mike.bind(entity)(tango);
    mike = 1;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    yankee = mike.MediaPlaybackPanelModes;
    mike = 2;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    offset = mike.MorphablePanelModes;
    tango = golf.createContext;
    mike = {};
    options = 3;
    backup = oscar[options];
    kilo = report.bind(entity)(backup);
    backup = kilo.createFakeSharedValue;
    yankee = yankee.PIP;
    yankee = backup.bind(kilo)(yankee);
    mike['mode'] = yankee;
    yankee = function() { // Original name: setMode
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'MediaPlaybackPanelModes.Provider.setMode: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['setMode'] = yankee;
    yankee = oscar[options];
    backup = report.bind(entity)(yankee);
    yankee = backup.createFakeSharedValue;
    offset = offset.PIP;
    offset = yankee.bind(backup)(offset);
    mike['morphablePanelMode'] = offset;
    offset = oscar[options];
    backup = report.bind(entity)(offset);
    yankee = backup.createFakeSharedValue;
    offset = {'width': 0, 'height': 0};
    offset = yankee.bind(backup)(offset);
    mike['wrapperDimensions'] = offset;
    offset = oscar[options];
    backup = report.bind(entity)(offset);
    offset = backup.createFakeSharedValue;
    yankee = false;
    offset = offset.bind(backup)(yankee);
    mike['useReducedMotion'] = offset;
    offset = oscar[options];
    kilo = report.bind(entity)(offset);
    backup = kilo.createFakeSharedValue;
    offset = {'x': 4294967295, 'y': 4294967295};
    offset = backup.bind(kilo)(offset);
    mike['pipState'] = offset;
    offset = oscar[options];
    kilo = report.bind(entity)(offset);
    backup = kilo.createFakeSharedValue;
    offset = {'top': 0, 'bottom': 0};
    offset = backup.bind(kilo)(offset);
    mike['pipAvoidanceSpecs'] = offset;
    offset = {};
    offset['current'] = entity;
    mike['dismissToPipGestureRef'] = offset;
    verify = function() { // Original name: dismissPanel
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.dismissDrawer: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['dismissPanel'] = verify;
    verify = oscar[options];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(foxtrot);
    mike['scrollPosition'] = verify;
    verify = oscar[options];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(romeo);
    mike['canShowPIP'] = verify;
    verify = oscar[options];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(yankee);
    mike['lockScrolling'] = verify;
    options = oscar[options];
    offset = report.bind(entity)(options);
    verify = offset.createFakeSharedValue;
    options = {'x': 0, 'y': 0, 'gestureActive': false};
    options = verify.bind(offset)(options);
    mike['wrapperOffset'] = options;
    mike = tango.bind(golf)(mike);
    tango = 4;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/media_panel/native/MediaPlaybackPanelStateContext.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();