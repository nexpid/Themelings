// app/modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingProgressBar.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    report = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = report;
    var _closure1_slot2 = golf;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, mike);
    entity = 0;
    mike = golf[entity];
    entity = undefined;
    mike = report.bind(entity)(mike);
    var _closure1_slot3 = mike;
    mike = 1;
    options = golf[mike];
    mike = argCorge;
    mike = mike.bind(entity)(options);
    var _closure1_slot4 = mike;
    backup = 2;
    mike = golf[backup];
    mike = oscar.bind(entity)(mike);
    mike = mike.View;
    var _closure1_slot5 = mike;
    mike = 3;
    mike = golf[mike];
    mike = report.bind(entity)(mike);
    var _closure1_slot6 = mike;
    sizing = 4;
    mike = golf[sizing];
    mike = oscar.bind(entity)(mike);
    report = mike.AppliedGuildBoostsRequiredForBoostedGuildTier;
    var _closure1_slot7 = report;
    options = mike.BoostedGuildTiers;
    var _closure1_slot8 = options;
    mike = 5;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot9 = report;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot10 = mike;
    mike = 6;
    mike = golf[mike];
    offset = oscar.bind(entity)(mike);
    verify = offset.createStyles;
    report = {};
    yankee = {'display': 'flex', 'alignItems': 'center', 'width': '100%', 'marginTop': 40};
    mike = 40;
    foxtrot = 7;
    romeo = golf[foxtrot];
    romeo = oscar.bind(entity)(romeo);
    romeo = romeo.MARKER_DIMENSIONS;
    kilo = romeo / backup;
    romeo = 34;
    romeo = kilo + romeo;
    yankee['paddingHorizontal'] = romeo;
    report['progressBarContainer'] = yankee;
    yankee = {'height': 54, 'maxWidth': 660, 'width': '100%'};
    report['progressBar'] = yankee;
    yankee = {};
    romeo = 8;
    yankee['height'] = romeo;
    kilo = golf[foxtrot];
    kilo = oscar.bind(entity)(kilo);
    kilo = kilo.MARKER_DIMENSIONS;
    kilo = kilo / backup;
    kilo = kilo - sizing;
    yankee['top'] = kilo;
    foxtrot = golf[foxtrot];
    foxtrot = oscar.bind(entity)(foxtrot);
    foxtrot = foxtrot.MARKER_DIMENSIONS;
    foxtrot = foxtrot / backup;
    foxtrot = foxtrot + backup;
    yankee['marginHorizontal'] = foxtrot;
    report['progressBarScrubber'] = yankee;
    yankee = {'borderRadius': 8, 'height': '100%', 'width': '100%', 'position': 'absolute', 'zIndex': 0};
    romeo = golf[romeo];
    romeo = oscar.bind(entity)(romeo);
    romeo = romeo.DARK_WHITE_500_WITH_OPACITY_LIGHT_PRIMARY_160;
    yankee['backgroundColor'] = romeo;
    report['progressBarTrack'] = yankee;
    yankee = {'borderRadius': 8, 'position': 'absolute', 'height': '100%', 'left': 0, 'zIndex': 1};
    report['progressBarFill'] = yankee;
    yankee = {'height': '100%', 'width': '100%', 'borderRadius': 8};
    report['progressBarGradientFill'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot11 = report;
    verify = options.NONE;
    report = new Array(4);
    report[0] = verify;
    verify = options.TIER_1;
    report[1] = verify;
    verify = options.TIER_2;
    report[2] = verify;
    options = options.TIER_3;
    report[3] = options;
    var _closure1_slot12 = report;
    report = {'stiffness': 27, 'damping': 10};
    var _closure1_slot13 = report;
    report = {};
    options = 'function GuildBoostingMarketingProgressBarTsx1(){const{width}=this.__closure;return{width:width.get()+"%"};}';
    report['code'] = options;
    var _closure1_slot14 = report;
    report = {};
    options = 'function GuildBoostingMarketingProgressBarTsx2(){const{width}=this.__closure;return width.get();}';
    report['code'] = options;
    var _closure1_slot15 = report;
    report = {};
    options = 'function GuildBoostingMarketingProgressBarTsx3(width){const{BoostedGuildTiers,TIER_REACHED_OFFSET,revealedTier,runOnJS,setRevealedTier}=this.__closure;let tier=BoostedGuildTiers.NONE;if(width>=33.33-TIER_REACHED_OFFSET)tier=BoostedGuildTiers.TIER_1;if(width>=66.67-TIER_REACHED_OFFSET)tier=BoostedGuildTiers.TIER_2;if(width>=100-TIER_REACHED_OFFSET)tier=BoostedGuildTiers.TIER_3;if(tier!==revealedTier)runOnJS(setRevealedTier)(tier);}';
    report['code'] = options;
    var _closure1_slot16 = report;
    report = 16;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingProgressBar.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: ProgressBar
        _fun105137: for(var _fun105137_ip = 0; ; ) switch(_fun105137_ip) {
 0:
            entity = argFoo;
            offset = entity.guild;
            var _closure2_slot0 = offset;
            tango = undefined;
            var _closure2_slot2 = tango;
            var _closure2_slot3 = tango;
            var _closure2_slot4 = tango;
            var _closure2_slot5 = tango;
            entity = _closure1_slot11;
            backup = entity.bind(tango)();
            mike = _closure1_slot1;
            foxtrot = _closure1_slot2;
            entity = 9;
            entity = foxtrot[entity];
            entity = mike.bind(tango)(entity);
            output = entity.bind(tango)();
            romeo = _closure1_slot0;
            entity = 10;
            entity = foxtrot[entity];
            report = romeo.bind(tango)(entity);
            zulu = report.useStateFromStores;
            entity = _closure1_slot6;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = _closure1_slot6;
                entity = entity.useReducedMotion;
                return entity;
            };
            entity = zulu.bind(report)(mike, entity);
            var _closure2_slot1 = entity;
            mike = global;
            yankee = mike.Math;
            oscar = yankee.min;
            golf = _closure1_slot8;
            report = golf.TIER_3;
            mike = offset.premiumTier;
            zulu = 1;
            mike = mike + zulu;
            yankee = oscar.bind(yankee)(report, mike);
            mike = _closure1_slot7;
            report = offset.premiumTier;
            oscar = mike[report];
            mike = mike[yankee];
            report = offset.premiumSubscriberCount;
            report = report - oscar;
            mike = mike - oscar;
            oscar = report / mike;
            mike = 7;
            report = foxtrot[mike];
            report = romeo.bind(tango)(report);
            kilo = report.TierMarkerPositions;
            report = offset.premiumTier;
            report = kilo[report];
            mike = foxtrot[mike];
            mike = romeo.bind(tango)(mike);
            mike = mike.TierMarkerPositions;
            mike = mike[yankee];
            yankee = offset.premiumTier;
            offset = golf.TIER_3;
            golf = zulu;
            if(!(yankee !== offset)) { _fun105137_ip = 273; continue _fun105137 }
 261:
            mike = mike - report;
            mike = oscar * mike;
            golf = mike + report;
 273:
            _closure2_slot2 = golf;
            sizing = _closure1_slot0;
            result = _closure1_slot2;
            offset = 11;
            mike = result[offset];
            report = sizing.bind(tango)(mike);
            mike = report.useSharedValue;
            yankee = 0;
            oscar = mike.bind(report)(yankee);
            _closure2_slot3 = oscar;
            report = _closure1_slot4;
            romeo = report.useState;
            source = _closure1_slot8;
            mike = source.NONE;
            foxtrot = romeo.bind(report)(mike);
            romeo = _closure1_slot3;
            mike = 2;
            mike = romeo.bind(tango)(foxtrot, mike);
            update = mike[yankee];
            _closure2_slot4 = update;
            echo = mike[zulu];
            _closure2_slot5 = echo;
            mike = result[offset];
            yankee = sizing.bind(tango)(mike);
            zulu = yankee.useAnimatedStyle;
            mike = function() { // Original name: S
                entity = {};
                zulu = _closure2_slot3;
                mike = zulu.get;
                report = mike.bind(zulu)();
                mike = global;
                mike = mike.HermesInternal;
                tango = mike.concat;
                zulu = '';
                mike = '%';
                mike = tango.bind(zulu)(report, mike);
                entity['width'] = mike;
                return entity;
            };
            romeo = {};
            romeo['width'] = oscar;
            mike['__closure'] = romeo;
            romeo = 8013193810386.0;
            mike['__workletHash'] = romeo;
            romeo = _closure1_slot14;
            mike['__initData'] = romeo;
            kilo = zulu.bind(yankee)(mike);
            mike = result[offset];
            romeo = sizing.bind(tango)(mike);
            yankee = romeo.useAnimatedReaction;
            zulu = function() { // Original name: f
                mike = _closure2_slot3;
                entity = mike.get;
                entity = entity.bind(mike)();
                return entity;
            };
            mike = {};
            mike['width'] = oscar;
            zulu['__closure'] = mike;
            mike = 5482324713221.0;
            zulu['__workletHash'] = mike;
            mike = _closure1_slot15;
            zulu['__initData'] = mike;
            mike = function(argFoo) { // Original name: w
                _fun105141: for(var _fun105141_ip = 0; ; ) switch(_fun105141_ip) {
 0:
                    tango = argFoo;
                    entity = _closure1_slot8;
                    zulu = entity.NONE;
                    entity = 28.33;
                    if(!(tango >= entity)) { _fun105141_ip = 40; continue _fun105141 }
 30:
                    entity = _closure1_slot8;
                    zulu = entity.TIER_1;
 40:
                    entity = 61.67;
                    if(!(tango >= entity)) { _fun105141_ip = 64; continue _fun105141 }
 54:
                    entity = _closure1_slot8;
                    zulu = entity.TIER_2;
 64:
                    entity = 95;
                    if(!(tango >= entity)) { _fun105141_ip = 81; continue _fun105141 }
 71:
                    entity = _closure1_slot8;
                    zulu = entity.TIER_3;
 81:
                    tango = _closure2_slot4;
                    if(!(zulu !== tango)) { _fun105141_ip = 133; continue _fun105141 }
 92:
                    report = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 11;
                    tango = tango[mike];
                    mike = undefined;
                    report = report.bind(mike)(tango);
                    tango = report.runOnJS;
                    entity = _closure2_slot5;
                    entity = tango.bind(report)(entity);
                    entity = entity.bind(mike)(zulu);
 133:
                    entity = undefined;
                    return entity;
                }
            };
            foxtrot = {};
            foxtrot['BoostedGuildTiers'] = source;
            source = 5;
            foxtrot['TIER_REACHED_OFFSET'] = source;
            foxtrot['revealedTier'] = update;
            update = result[offset];
            update = sizing.bind(tango)(update);
            update = update.runOnJS;
            foxtrot['runOnJS'] = update;
            foxtrot['setRevealedTier'] = echo;
            mike['__closure'] = foxtrot;
            foxtrot = 4844648302516.0;
            mike['__workletHash'] = foxtrot;
            foxtrot = _closure1_slot16;
            mike['__initData'] = foxtrot;
            mike = yankee.bind(romeo)(zulu, mike);
            zulu = report.useEffect;
            mike = new Array(3);
            mike[0] = golf;
            mike[1] = oscar;
            mike[2] = entity;
            entity = function() {
                _fun105142: for(var _fun105142_ip = 0; ; ) switch(_fun105142_ip) {
 0:
                    tango = _closure2_slot2;
                    zulu = 100;
                    tango = zulu * tango;
                    var _closure3_slot0 = tango;
                    zulu = -1;
                    var _closure3_slot1 = zulu;
                    zulu = _closure2_slot1;
                    if(zulu) { _fun105142_ip = 72; continue _fun105142 }
 37:
                    zulu = global;
                    golf = zulu.setTimeout;
                    oscar = undefined;
                    report = function() {
                        tango = _closure2_slot3;
                        zulu = tango.set;
                        oscar = _closure1_slot0;
                        report = _closure1_slot2;
                        entity = 12;
                        report = report[entity];
                        entity = undefined;
                        golf = oscar.bind(entity)(report);
                        oscar = golf.withSpring;
                        report = _closure3_slot0;
                        mike = _closure1_slot13;
                        mike = oscar.bind(golf)(report, mike);
                        mike = zulu.bind(tango)(mike);
                        return entity;
                    };
                    zulu = 750;
                    zulu = golf.bind(oscar)(report, zulu);
                    _closure3_slot1 = zulu;
                    _fun105142_ip = 86; continue _fun105142;
 72:
                    zulu = _closure2_slot3;
                    mike = zulu.set;
                    mike = mike.bind(zulu)(tango);
 86:
                    entity = function() {
                        entity = global;
                        zulu = entity.window;
                        mike = zulu.clearTimeout;
                        entity = _closure3_slot1;
                        entity = mike.bind(zulu)(entity);
                        entity = undefined;
                        return entity;
                    };
                    return entity;
                }
            };
            entity = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot9;
            mike = _closure1_slot5;
            entity = {};
            report = backup.progressBarContainer;
            entity['style'] = report;
            oscar = _closure1_slot10;
            report = {};
            golf = backup.progressBar;
            report['style'] = golf;
            golf = {};
            yankee = backup.progressBarScrubber;
            golf['style'] = yankee;
            foxtrot = _closure1_slot1;
            offset = result[offset];
            offset = foxtrot.bind(tango)(offset);
            yankee = offset.View;
            offset = {};
            echo = backup.progressBarFill;
            romeo = new Array(2);
            romeo[0] = echo;
            romeo[1] = kilo;
            offset['style'] = romeo;
            romeo = 13;
            romeo = result[romeo];
            foxtrot = foxtrot.bind(tango)(romeo);
            romeo = {'useAngle': true, 'angle': 90};
            kilo = 14;
            kilo = result[kilo];
            sizing = sizing.bind(tango)(kilo);
            kilo = sizing.isThemeDark;
            kilo = kilo.bind(sizing)(output);
            sizing = '#515359';
            if(kilo) { _fun105137_ip = 796; continue _fun105137 }
 765:
            output = _closure1_slot1;
            result = _closure1_slot2;
            kilo = 15;
            kilo = result[kilo];
            kilo = output.bind(tango)(kilo);
            kilo = kilo.unsafe_rawColors;
            sizing = kilo.PRIMARY_160;
 796:
            kilo = new Array(2);
            kilo[0] = sizing;
            sizing = '#AB77F2';
            kilo[1] = sizing;
            romeo['colors'] = kilo;
            kilo = [0.1577, 0.9905];
            romeo['locations'] = kilo;
            kilo = backup.progressBarGradientFill;
            romeo['style'] = kilo;
            romeo = zulu.bind(tango)(foxtrot, romeo);
            offset['children'] = romeo;
            yankee = zulu.bind(tango)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            foxtrot = _closure1_slot9;
            romeo = _closure1_slot5;
            yankee = {};
            backup = backup.progressBarTrack;
            yankee['style'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[1] = yankee;
            golf['children'] = offset;
            offset = oscar.bind(tango)(mike, golf);
            golf = new Array(2);
            golf[0] = offset;
            offset = _closure1_slot12;
            verify = offset.map;
            options = function(argFoo) {
                report = argFoo;
                tango = _closure1_slot9;
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 7;
                entity = zulu[entity];
                zulu = undefined;
                mike = mike.bind(zulu)(entity);
                entity = {};
                golf = _closure2_slot0;
                entity['guild'] = golf;
                entity['tier'] = report;
                golf = _closure2_slot4;
                entity['revealedTier'] = golf;
                oscar = _closure2_slot1;
                entity['useReducedMotion'] = oscar;
                entity = tango.bind(zulu)(mike, entity, report);
                return entity;
            };
            options = verify.bind(offset)(options);
            golf[1] = options;
            report['children'] = golf;
            report = oscar.bind(tango)(mike, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['PROGRESS_BAR_SPACING'] = mike;
    return entity;
})();