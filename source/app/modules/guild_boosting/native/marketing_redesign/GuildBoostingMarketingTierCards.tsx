// app/modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingTierCards.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: TierFeatures
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            zuuluu = _closure1_slot16;
            tangon = undefined;
            offset = zuuluu.bind(tangon)();
            var _closure2_slot0 = offset;
            golfie = entity.features;
            var _closure2_slot1 = golfie;
            verify = entity.isVisible;
            var _closure2_slot2 = verify;
            backup = _closure1_slot0;
            oscard = _closure1_slot2;
            entity = 31;
            zuuluu = oscard[entity];
            yankee = backup.bind(tangon)(zuuluu);
            option = yankee.useAnimatedStyle;
            zuuluu = function() { // Original name: o
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    backup = 31;
                    michal = michal[backup];
                    foxtra = undefined;
                    report = zuuluu.bind(foxtra)(michal);
                    tangon = report.withDelay;
                    oscard = _closure2_slot2;
                    zuuluu = 0;
                    if(!oscard) { _fun00004_ip = 48; continue _fun00003 }
 45:
                    zuuluu = 150;
 48:
                    golfie = _closure1_slot0;
                    offset = _closure1_slot2;
                    oscard = 32;
                    oscard = offset[oscard];
                    golfie = golfie.bind(foxtra)(oscard);
                    oscard = golfie.withTiming;
                    michal = _closure2_slot2;
                    option = 0;
                    if(!michal) { _fun00004_ip = 85; continue _fun00003 }
 82:
                    option = 1;
 85:
                    michal = {};
                    offset = 150;
                    michal['duration'] = offset;
                    romeon = _closure1_slot0;
                    verify = _closure1_slot2;
                    offset = verify[backup];
                    offset = romeon.bind(foxtra)(offset);
                    yankee = offset.Easing;
                    offset = yankee.inOut;
                    verify = verify[backup];
                    verify = romeon.bind(foxtra)(verify);
                    verify = verify.Easing;
                    verify = verify.quad;
                    verify = offset.bind(yankee)(verify);
                    michal['easing'] = verify;
                    michal = oscard.bind(golfie)(option, michal);
                    michal = tangon.bind(report)(zuuluu, michal);
                    entity['opacity'] = michal;
                    return entity;
                }
            };
            romeon = {};
            foxtra = oscard[entity];
            foxtra = backup.bind(tangon)(foxtra);
            foxtra = foxtra.withDelay;
            romeon['withDelay'] = foxtra;
            romeon['isVisible'] = verify;
            foxtra = 150;
            romeon['TIER_FEATURE_ANIMATION_DURATION_MS'] = foxtra;
            foxtra = 32;
            foxtra = oscard[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            foxtra = foxtra.withTiming;
            romeon['withTiming'] = foxtra;
            foxtra = oscard[entity];
            foxtra = backup.bind(tangon)(foxtra);
            foxtra = foxtra.Easing;
            romeon['Easing'] = foxtra;
            zuuluu['__closure'] = romeon;
            romeon = 13329849944491.0;
            zuuluu['__workletHash'] = romeon;
            romeon = _closure1_slot17;
            zuuluu['__initData'] = romeon;
            option = option.bind(yankee)(zuuluu);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot1;
            entity = oscard[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.View;
            entity = {};
            oscard = !verify;
            entity['accessibilityElementsHidden'] = oscard;
            oscard = 'no-hide-descendants';
            if(!verify) { _fun00002_ip = 233; continue _fun00001 }
 231:
            oscard = undefined;
 233:
            entity['importantForAccessibility'] = oscard;
            yankee = offset.cardFeatures;
            oscard = new Array(3);
            oscard[0] = yankee;
            verify = !verify;
            if(!verify) { _fun00002_ip = 264; continue _fun00001 }
 258:
            verify = offset.cardFeaturesInvisible;
 264:
            oscard[1] = verify;
            oscard[2] = option;
            entity['style'] = oscard;
            oscard = golfie.map;
            report = function(argFoo, argBar) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    yankee = argFoo;
                    report = argBar;
                    tangon = _closure1_slot12;
                    zuuluu = _closure1_slot5;
                    michal = {};
                    entity = _closure2_slot0;
                    oscard = entity.cardFeature;
                    entity = new Array(3);
                    entity[0] = oscard;
                    oscard = yankee.isIncluded;
                    oscard = !oscard;
                    if(!oscard) { _fun00006_ip = 62; continue _fun00005 }
 52:
                    option = _closure2_slot0;
                    oscard = option.cardFeatureExcluded;
 62:
                    entity[1] = oscard;
                    oscard = _closure2_slot1;
                    option = oscard.length;
                    oscard = 1;
                    oscard = option - oscard;
                    oscard = report === oscard;
                    if(!oscard) { _fun00006_ip = 99; continue _fun00005 }
 89:
                    option = _closure2_slot0;
                    oscard = option.cardFeatureLast;
 99:
                    entity[2] = oscard;
                    michal['style'] = entity;
                    verify = _closure1_slot11;
                    option = yankee.IconComponent;
                    oscard = {'size': 'custom', 'style': null, 'color': 'white'};
                    entity = _closure2_slot0;
                    entity = entity.cardFeatureIcon;
                    oscard['style'] = entity;
                    entity = undefined;
                    option = verify.bind(entity)(option, oscard);
                    oscard = new Array(2);
                    oscard[0] = option;
                    verify = _closure1_slot11;
                    option = _closure1_slot0;
                    romeon = _closure1_slot2;
                    golfie = 33;
                    golfie = romeon[golfie];
                    golfie = option.bind(entity)(golfie);
                    option = golfie.Text;
                    golfie = {'style': null, 'color': 'always-white', 'variant': 'text-md/semibold'};
                    romeon = yankee.isIncluded;
                    romeon = !romeon;
                    if(!romeon) { _fun00006_ip = 228; continue _fun00005 }
 218:
                    offset = _closure2_slot0;
                    romeon = offset.cardFeatureExcludedCopy;
 228:
                    offset = new Array(1);
                    offset[0] = romeon;
                    golfie['style'] = offset;
                    offset = yankee.getCopy;
                    offset = offset.bind(yankee)();
                    golfie['children'] = offset;
                    golfie = verify.bind(entity)(option, golfie);
                    oscard[1] = golfie;
                    michal['children'] = oscard;
                    entity = tangon.bind(entity)(zuuluu, michal, report);
                    return entity;
                }
            };
            report = oscard.bind(golfie)(report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot19 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    sizing = true;
    tangon['value'] = sizing;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    kiloes = 0;
    tangon = oscard[kiloes];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    backup = 1;
    golfie = oscard[backup];
    tangon = argCor;
    option = tangon.bind(entity)(golfie);
    var _closure1_slot4 = option;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AppliedGuildBoostsRequiredForBoostedGuildTier;
    var _closure1_slot8 = golfie;
    golfie = tangon.BoostedGuildTiers;
    var _closure1_slot9 = golfie;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.BoostedGuildFeatures;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    verify = tangon.jsx;
    var _closure1_slot11 = verify;
    verify = tangon.jsxs;
    var _closure1_slot12 = verify;
    tangon = tangon.Fragment;
    var _closure1_slot13 = tangon;
    tangon = {};
    verify = golfie.TIER_1;
    tangon['tier'] = verify;
    offset = {'orderCollapsed': 0, 'isIncluded': true};
    verify = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 7;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = verify;
    romeon = 8;
    verify = oscard[romeon];
    verify = report.bind(entity)(verify);
    verify = verify.ReactionIcon;
    offset['IconComponent'] = verify;
    verify = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Tlz0x8;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscard[report];
        report = report.limits;
        report = report.emoji;
        entity['numEmojiSlots'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = verify;
    verify = new Array(11);
    verify[0] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 10;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    vacuum = 11;
    yankee = oscard[vacuum];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.StickerIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.WgHNGB;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscard[report];
        report = report.limits;
        report = report.stickers;
        entity['numStickerSlots'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[1] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 12;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    ctrled = 13;
    yankee = oscard[ctrled];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ScreenArrowIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Jbg8oa;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscard[report];
        report = report.limits;
        report = report.screenShareQualityResolution;
        entity['resolution'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[2] = offset;
    offset = {'orderCollapsed': 2, 'isIncluded': true};
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 14;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    source = 15;
    yankee = oscard[source];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.VoiceNormalIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscard = undefined;
        entity = offset.bind(oscard)(entity);
        tangon = entity.intl;
        zuuluu = tangon.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscard)(entity);
        entity = entity.t;
        michal = entity.vBfZzM;
        entity = {};
        golfie = yankee[report];
        golfie = offset.bind(oscard)(golfie);
        option = golfie.intl;
        golfie = option.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscard)(report);
        report = report.t;
        oscard = report.w1gmLi;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_1;
        verify = offset[verify];
        verify = verify.limits;
        offset = verify.bitrate;
        verify = 1000;
        verify = offset / verify;
        report['bitrate'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['bitrate'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[3] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 16;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    update = 17;
    yankee = oscard[update];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.StageIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Mrvzjo;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscard[report];
        report = report.limits;
        report = report.stageVideoUsers;
        entity['numStageSeats'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[4] = offset;
    offset = {'orderCollapsed': 1, 'isIncluded': true};
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 18;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    echoed = 19;
    yankee = oscard[echoed];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.GifIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.PbAyub;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[5] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 20;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    output = 21;
    yankee = oscard[output];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ServerGridIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.tzGY0t;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[6] = offset;
    offset = {};
    config = false;
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 22;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    result = 23;
    yankee = oscard[result];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.UploadIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscard = undefined;
        entity = offset.bind(oscard)(entity);
        tangon = entity.intl;
        zuuluu = tangon.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscard)(entity);
        entity = entity.t;
        michal = entity.aFRl5+;
        entity = {};
        golfie = yankee[report];
        golfie = offset.bind(oscard)(golfie);
        option = golfie.intl;
        golfie = option.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscard)(report);
        report = report.t;
        oscard = report.pIn7AQ;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_2;
        verify = offset[verify];
        verify = verify.limits;
        verify = verify.fileSize;
        offset = 1024;
        verify = verify / offset;
        verify = verify / offset;
        report['size'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['uploadSizeLimit'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[7] = offset;
    offset = {};
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 20;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    yankee = oscard[output];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ServerGridIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.1a5rjo;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[8] = offset;
    offset = {};
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 24;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    yankee = oscard[romeon];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ReactionIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.6PV6QU;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[9] = offset;
    offset = {};
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 25;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = yankee;
    yankee = 26;
    sequen = oscard[yankee];
    sequen = report.bind(entity)(sequen);
    sequen = sequen.LinkIcon;
    offset['IconComponent'] = sequen;
    sequen = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.adNGjY;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = sequen;
    verify[10] = offset;
    tangon['features'] = verify;
    verify = new Array(3);
    verify[0] = tangon;
    tangon = {};
    offset = golfie.TIER_2;
    tangon['tier'] = offset;
    sequen = {};
    sequen['isIncluded'] = sizing;
    offset = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 7;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = offset;
    offset = oscard[romeon];
    offset = report.bind(entity)(offset);
    offset = offset.ReactionIcon;
    sequen['IconComponent'] = offset;
    offset = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Tlz0x8;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscard[report];
        report = report.limits;
        report = report.emoji;
        entity['numEmojiSlots'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    sequen['getCopy'] = offset;
    offset = new Array(11);
    offset[0] = sequen;
    sequen = {};
    sequen['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 10;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[vacuum];
    record = report.bind(entity)(record);
    record = record.StickerIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.WgHNGB;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscard[report];
        report = report.limits;
        report = report.stickers;
        entity['numStickerSlots'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[1] = sequen;
    sequen = {'orderCollapsed': 0, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 12;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[ctrled];
    record = report.bind(entity)(record);
    record = record.ScreenArrowIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Jbg8oa;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscard[report];
        report = report.limits;
        report = report.screenShareQualityResolution;
        entity['resolution'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[2] = sequen;
    sequen = {};
    sequen['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 14;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[source];
    record = report.bind(entity)(record);
    record = record.VoiceNormalIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscard = undefined;
        entity = offset.bind(oscard)(entity);
        tangon = entity.intl;
        zuuluu = tangon.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscard)(entity);
        entity = entity.t;
        michal = entity.vBfZzM;
        entity = {};
        golfie = yankee[report];
        golfie = offset.bind(oscard)(golfie);
        option = golfie.intl;
        golfie = option.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscard)(report);
        report = report.t;
        oscard = report.w1gmLi;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_2;
        verify = offset[verify];
        verify = verify.limits;
        offset = verify.bitrate;
        verify = 1000;
        verify = offset / verify;
        report['bitrate'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['bitrate'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[3] = sequen;
    sequen = {};
    sequen['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 16;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[update];
    record = report.bind(entity)(record);
    record = record.StageIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Mrvzjo;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscard[report];
        report = report.limits;
        report = report.stageVideoUsers;
        entity['numStageSeats'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[4] = sequen;
    sequen = {};
    sequen['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 18;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[echoed];
    record = report.bind(entity)(record);
    record = record.GifIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.PbAyub;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[5] = sequen;
    sequen = {};
    sequen['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 20;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[output];
    record = report.bind(entity)(record);
    record = record.ServerGridIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.tzGY0t;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[6] = sequen;
    sequen = {'orderCollapsed': 1, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 22;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[result];
    record = report.bind(entity)(record);
    record = record.UploadIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscard = undefined;
        entity = offset.bind(oscard)(entity);
        tangon = entity.intl;
        zuuluu = tangon.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscard)(entity);
        entity = entity.t;
        michal = entity.aFRl5+;
        entity = {};
        golfie = yankee[report];
        golfie = offset.bind(oscard)(golfie);
        option = golfie.intl;
        golfie = option.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscard)(report);
        report = report.t;
        oscard = report.pIn7AQ;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_2;
        verify = offset[verify];
        verify = verify.limits;
        verify = verify.fileSize;
        offset = 1024;
        verify = verify / offset;
        verify = verify / offset;
        report['size'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['uploadSizeLimit'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[7] = sequen;
    sequen = {'orderCollapsed': 3, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 20;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[output];
    record = report.bind(entity)(record);
    record = record.ServerGridIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.1a5rjo;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[8] = sequen;
    sequen = {'orderCollapsed': 2, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 24;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = record;
    record = oscard[romeon];
    record = report.bind(entity)(record);
    record = record.ReactionIcon;
    sequen['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.6PV6QU;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    sequen['getCopy'] = record;
    offset[9] = sequen;
    sequen = {};
    sequen['isIncluded'] = config;
    config = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 25;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    sequen['getIcon'] = config;
    config = oscard[yankee];
    config = report.bind(entity)(config);
    config = config.LinkIcon;
    sequen['IconComponent'] = config;
    config = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.adNGjY;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    sequen['getCopy'] = config;
    offset[10] = sequen;
    tangon['features'] = offset;
    verify[1] = tangon;
    tangon = {};
    golfie = golfie.TIER_3;
    tangon['tier'] = golfie;
    offset = {};
    offset['isIncluded'] = sizing;
    golfie = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 7;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = golfie;
    golfie = oscard[romeon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.ReactionIcon;
    offset['IconComponent'] = golfie;
    golfie = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Tlz0x8;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscard[report];
        report = report.limits;
        report = report.emoji;
        entity['numEmojiSlots'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = golfie;
    golfie = new Array(11);
    golfie[0] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    sequen = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 10;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = sequen;
    vacuum = oscard[vacuum];
    vacuum = report.bind(entity)(vacuum);
    vacuum = vacuum.StickerIcon;
    offset['IconComponent'] = vacuum;
    vacuum = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.WgHNGB;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscard[report];
        report = report.limits;
        report = report.stickers;
        entity['numStickerSlots'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = vacuum;
    golfie[1] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    vacuum = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 12;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = vacuum;
    ctrled = oscard[ctrled];
    ctrled = report.bind(entity)(ctrled);
    ctrled = ctrled.ScreenArrowIcon;
    offset['IconComponent'] = ctrled;
    ctrled = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Jbg8oa;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscard[report];
        report = report.limits;
        report = report.screenShareQualityResolution;
        entity['resolution'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = ctrled;
    golfie[2] = offset;
    offset = {'orderCollapsed': 2, 'isIncluded': true};
    ctrled = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 14;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = ctrled;
    source = oscard[source];
    source = report.bind(entity)(source);
    source = source.VoiceNormalIcon;
    offset['IconComponent'] = source;
    source = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscard = undefined;
        entity = offset.bind(oscard)(entity);
        tangon = entity.intl;
        zuuluu = tangon.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscard)(entity);
        entity = entity.t;
        michal = entity.vBfZzM;
        entity = {};
        golfie = yankee[report];
        golfie = offset.bind(oscard)(golfie);
        option = golfie.intl;
        golfie = option.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscard)(report);
        report = report.t;
        oscard = report.w1gmLi;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_3;
        verify = offset[verify];
        verify = verify.limits;
        offset = verify.bitrate;
        verify = 1000;
        verify = offset / verify;
        report['bitrate'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['bitrate'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = source;
    golfie[3] = offset;
    offset = {'orderCollapsed': 4, 'isIncluded': true};
    source = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 16;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = source;
    update = oscard[update];
    update = report.bind(entity)(update);
    update = update.StageIcon;
    offset['IconComponent'] = update;
    update = function() { // Original name: getCopy
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 9;
        zuuluu = golfie[entity];
        michal = undefined;
        zuuluu = oscard.bind(michal)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.formatToPlainString;
        entity = golfie[entity];
        entity = oscard.bind(michal)(entity);
        entity = entity.t;
        michal = entity.Mrvzjo;
        entity = {};
        oscard = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscard[report];
        report = report.limits;
        report = report.stageVideoUsers;
        entity['numStageSeats'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = update;
    golfie[4] = offset;
    offset = {'orderCollapsed': 3, 'isIncluded': true};
    update = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 18;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = update;
    echoed = oscard[echoed];
    echoed = report.bind(entity)(echoed);
    echoed = echoed.GifIcon;
    offset['IconComponent'] = echoed;
    echoed = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.PbAyub;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = echoed;
    golfie[5] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    echoed = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 20;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = echoed;
    echoed = oscard[output];
    echoed = report.bind(entity)(echoed);
    echoed = echoed.ServerGridIcon;
    offset['IconComponent'] = echoed;
    echoed = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.tzGY0t;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = echoed;
    golfie[6] = offset;
    offset = {'orderCollapsed': 1, 'isIncluded': true};
    echoed = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 22;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = echoed;
    result = oscard[result];
    result = report.bind(entity)(result);
    result = result.UploadIcon;
    offset['IconComponent'] = result;
    result = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscard = undefined;
        entity = offset.bind(oscard)(entity);
        tangon = entity.intl;
        zuuluu = tangon.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscard)(entity);
        entity = entity.t;
        michal = entity.aFRl5+;
        entity = {};
        golfie = yankee[report];
        golfie = offset.bind(oscard)(golfie);
        option = golfie.intl;
        golfie = option.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscard)(report);
        report = report.t;
        oscard = report.pIn7AQ;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_3;
        verify = offset[verify];
        verify = verify.limits;
        verify = verify.fileSize;
        offset = 1024;
        verify = verify / offset;
        verify = verify / offset;
        report['size'] = verify;
        report = golfie.bind(option)(oscard, report);
        entity['uploadSizeLimit'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    offset['getCopy'] = result;
    golfie[7] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    result = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 20;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = result;
    output = oscard[output];
    output = report.bind(entity)(output);
    output = output.ServerGridIcon;
    offset['IconComponent'] = output;
    output = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.1a5rjo;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = output;
    golfie[8] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    sizing = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 24;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = sizing;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    romeon = romeon.ReactionIcon;
    offset['IconComponent'] = romeon;
    romeon = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.6PV6QU;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = romeon;
    golfie[9] = offset;
    offset = {'orderCollapsed': 0, 'isIncluded': true};
    romeon = function() { // Original name: getIcon
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 25;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    offset['getIcon'] = romeon;
    yankee = oscard[yankee];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.LinkIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 9;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.adNGjY;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    golfie[10] = offset;
    tangon['features'] = golfie;
    verify[2] = tangon;
    var _closure1_slot14 = verify;
    golfie = verify.map;
    tangon = function(argFoo, argBar) {
        michal = argBar;
        entity = 1;
        michal = michal + entity;
        entity = 300;
        entity = entity * michal;
        return entity;
    };
    tangon = golfie.bind(verify)(tangon);
    var _closure1_slot15 = tangon;
    tangon = 27;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    golfie = verify.createStyles;
    tangon = {};
    yankee = 10;
    offset = {'marginRight': 10, 'width': 290};
    tangon['cardWrapper'] = offset;
    offset = {};
    romeon = 28;
    sizing = oscard[romeon];
    sizing = foxtra.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.lg;
    offset['borderRadius'] = sizing;
    sizing = '100%';
    offset['height'] = sizing;
    tangon['card'] = offset;
    offset = {'display': 'flex', 'padding': 24, 'height': '100%'};
    tangon['cardContent'] = offset;
    offset = {'borderRadius': null, 'overflow': 'hidden', 'height': '100%'};
    sizing = oscard[romeon];
    sizing = foxtra.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.lg;
    offset['borderRadius'] = sizing;
    tangon['pressableWrapper'] = offset;
    offset = {'alignItems': 'baseline', 'display': 'flex', 'flexDirection': 'row', 'flexGrow': 0, 'flexShrink': 0, 'marginBottom': 16};
    tangon['cardHeading'] = offset;
    offset = {};
    offset['marginRight'] = yankee;
    tangon['cardTierName'] = offset;
    offset = {};
    yankee = 0.7;
    offset['opacity'] = yankee;
    tangon['cardTierBoostcount'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 0};
    tangon['cardFeatures'] = offset;
    yankee = 'absolute';
    offset = {'position': 'absolute', 'top': 0, 'left': 0, 'height': '100%', 'width': '100%'};
    tangon['cardFeaturesInvisible'] = offset;
    offset = {'alignSelf': 'stretch', 'flexGrow': 1, 'position': 'relative'};
    tangon['cardFeaturesWrapper'] = offset;
    offset = {'alignItems': 'center', 'display': 'flex', 'flexDirection': 'row', 'marginBottom': 10};
    tangon['cardFeature'] = offset;
    offset = {};
    sizing = 0.5;
    offset['opacity'] = sizing;
    tangon['cardFeatureExcluded'] = offset;
    offset = {};
    sizing = 'line-through';
    offset['textDecorationLine'] = sizing;
    tangon['cardFeatureExcludedCopy'] = offset;
    offset = {};
    offset['marginBottom'] = kiloes;
    tangon['cardFeatureLast'] = offset;
    offset = {};
    offset['flex'] = backup;
    backup = 29;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    backup = backup.PROGRESS_BAR_SPACING;
    offset['marginTop'] = backup;
    tangon['cardsScroller'] = offset;
    offset = {'alignItems': 'flex-start', 'display': 'flex', 'flexDirection': 'row', 'paddingHorizontal': 8, 'paddingTop': 16, 'paddingBottom': 20};
    tangon['cardsScrollerContent'] = offset;
    offset = {'height': 24, 'marginRight': 6, 'width': 24};
    tangon['cardFeatureIcon'] = offset;
    offset = {'display': 'flex', 'flexDirection': 'row', 'marginTop': 24};
    tangon['cardFooter'] = offset;
    offset = {'flexGrow': 0, 'flexShrink': 0, 'height': 24, 'marginLeft': 8, 'width': 24};
    tangon['cardFooterIcon'] = offset;
    offset = {'borderRadius': null, 'paddingHorizontal': 8, 'paddingVertical': 4, 'position': 'absolute', 'top': 4294967280, 'left': 24};
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    offset['borderRadius'] = romeon;
    tangon['cardTierBadge'] = offset;
    offset = {};
    romeon = 'uppercase';
    offset['textTransform'] = romeon;
    tangon['cardTierBadgeCopy'] = offset;
    offset = {};
    offset['position'] = yankee;
    yankee = 30;
    yankee = oscard[yankee];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.DARK_WHITE_500_LIGHT_GUILD_BOOSTING_PINK;
    offset['tintColor'] = yankee;
    tangon['sparkleStar'] = offset;
    offset = {'height': 15, 'width': 18};
    tangon['sparkleStarPointed'] = offset;
    offset = {'height': 45, 'width': 23};
    tangon['sparkleStarElongated'] = offset;
    offset = {'top': 4294967289, 'right': 35};
    tangon['sparkleStarPointed1'] = offset;
    offset = {'top': 20, 'right': 55};
    tangon['sparkleStarPointed2'] = offset;
    offset = {'bottom': 4294967289, 'left': 70};
    tangon['sparkleStarPointed3'] = offset;
    offset = {'right': 15, 'top': 10};
    tangon['sparkleStarElongated1'] = offset;
    offset = {'position': 'absolute', 'height': 1, 'width': 60};
    tangon['gradientHighlight'] = offset;
    offset = {'right': 15, 'top': 0};
    tangon['gradientHighlightTop'] = offset;
    offset = {'left': 48, 'bottom': 0};
    tangon['gradientHighlightBottom'] = offset;
    tangon = golfie.bind(verify)(tangon);
    var _closure1_slot16 = tangon;
    tangon = {};
    golfie = 'function GuildBoostingMarketingTierCardsTsx1(){const{withDelay,isVisible,TIER_FEATURE_ANIMATION_DURATION_MS,withTiming,Easing}=this.__closure;return{opacity:withDelay(isVisible?TIER_FEATURE_ANIMATION_DURATION_MS:0,withTiming(isVisible?1:0,{duration:TIER_FEATURE_ANIMATION_DURATION_MS,easing:Easing.inOut(Easing.quad)}))};}';
    tangon['code'] = golfie;
    var _closure1_slot17 = tangon;
    golfie = option.forwardRef;
    tangon = function(argFoo, argBar) {
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            zuuluu = argFoo;
            entity = _closure1_slot16;
            tangon = undefined;
            kiloes = entity.bind(tangon)();
            entity = zuuluu.guild;
            variable37 = zuuluu.features;
            var _closure2_slot0 = variable37;
            quebec = zuuluu.isExpanded;
            echoed = zuuluu.onCardPress;
            golfie = zuuluu.tier;
            oscard = _closure1_slot1;
            report = _closure1_slot2;
            zuuluu = 34;
            zuuluu = report[zuuluu];
            zuuluu = oscard.bind(tangon)(zuuluu);
            zuuluu = zuuluu.bind(tangon)();
            verify = _closure1_slot4;
            option = verify.useMemo;
            oscard = new Array(1);
            oscard[0] = variable37;
            michal = function() {
                tangon = _closure2_slot0;
                zuuluu = tangon.filter;
                michal = function(argFoo) {
                    entity = argFoo;
                    michal = entity.orderCollapsed;
                    entity = null;
                    entity = entity != michal;
                    return entity;
                };
                zuuluu = zuuluu.bind(tangon)(michal);
                michal = zuuluu.sort;
                entity = function(argFoo, argBar) {
                    _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                        zuuluu = argFoo;
                        michal = argBar;
                        entity = zuuluu.orderCollapsed;
                        report = null;
                        tangon = report == entity;
                        entity = 0;
                        if(tangon) { _fun00010_ip = 87; continue _fun00009 }
 23:
                        tangon = michal.orderCollapsed;
                        tangon = report == tangon;
                        entity = 0;
                        if(tangon) { _fun00010_ip = 87; continue _fun00009 }
 38:
                        report = zuuluu.orderCollapsed;
                        tangon = michal.orderCollapsed;
                        entity = 0;
                        if(!(report !== tangon)) { _fun00010_ip = 87; continue _fun00009 }
 56:
                        zuuluu = zuuluu.orderCollapsed;
                        michal = michal.orderCollapsed;
                        zuuluu = zuuluu > michal;
                        michal = -1;
                        if(!zuuluu) { _fun00010_ip = 84; continue _fun00009 }
 81:
                        michal = 1;
 84:
                        entity = michal;
 87:
                        return entity;
                    }
                };
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            equals = option.bind(verify)(michal, oscard);
            michal = entity.premiumTier;
            option = michal === golfie;
            entity = entity.premiumTier;
            record = 1;
            entity = entity + record;
            result = golfie === entity;
            michal = _closure1_slot0;
            entity = 35;
            entity = report[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.isThemeDark;
            michal = entity.bind(michal)(zuuluu);
            zuuluu = _closure1_slot1;
            entity = _closure1_slot2;
            update = 28;
            entity = entity[update];
            entity = zuuluu.bind(tangon)(entity);
            entity = entity.unsafe_rawColors;
            if(michal) { _fun00008_ip = 195; continue _fun00007 }
 187:
            vacuum = entity.GUILD_BOOSTING_PINK;
            _fun00008_ip = 201; continue _fun00007;
 195:
            vacuum = entity.WHITE_500;
 201:
            zuuluu = _closure1_slot12;
            michal = _closure1_slot5;
            entity = {};
            report = kiloes.cardWrapper;
            entity['style'] = report;
            report = argBar;
            entity['ref'] = report;
            verify = _closure1_slot11;
            sizing = _closure1_slot1;
            yankee = _closure1_slot2;
            foxtra = 36;
            report = yankee[foxtra];
            oscard = sizing.bind(tangon)(report);
            report = {};
            offset = 45;
            report['angle'] = offset;
            offset = {'x': 0.5, 'y': 0.5};
            report['angleCenter'] = offset;
            offset = yankee[update];
            offset = sizing.bind(tangon)(offset);
            offset = offset.unsafe_rawColors;
            backup = offset.GUILD_BOOSTING_BLUE;
            offset = new Array(2);
            offset[0] = backup;
            backup = yankee[update];
            backup = sizing.bind(tangon)(backup);
            backup = backup.unsafe_rawColors;
            backup = backup.GUILD_BOOSTING_PURPLE;
            offset[1] = backup;
            report['colors'] = offset;
            offset = [0, 1];
            report['locations'] = offset;
            offset = kiloes.card;
            report['style'] = offset;
            sizing = true;
            report['useAngle'] = sizing;
            output = _closure1_slot11;
            backup = _closure1_slot5;
            offset = {};
            source = kiloes.pressableWrapper;
            offset['style'] = source;
            config = _closure1_slot12;
            sierra = _closure1_slot0;
            source = 37;
            source = yankee[source];
            source = sierra.bind(tangon)(source);
            ctrled = source.PressableHighlight;
            source = {};
            source['onPress'] = echoed;
            echoed = kiloes.cardContent;
            source['style'] = echoed;
            target = _closure1_slot12;
            papara = _closure1_slot5;
            cntext = {};
            echoed = kiloes.cardHeading;
            cntext['style'] = echoed;
            limora = _closure1_slot11;
            echoed = 33;
            sequen = yankee[echoed];
            sequen = sierra.bind(tangon)(sequen);
            status = sequen.Text;
            sequen = {'color': 'always-white', 'style': null, 'variant': 'heading-xxl/extrabold'};
            whisks = kiloes.cardTierName;
            sequen['style'] = whisks;
            whisks = 38;
            whisks = yankee[whisks];
            variable38 = sierra.bind(tangon)(whisks);
            variable36 = variable38.getTierName;
            whisks = {};
            variable39 = false;
            whisks['useLevels'] = variable39;
            whisks = variable36.bind(variable38)(golfie, whisks);
            sequen['children'] = whisks;
            sequen = limora.bind(tangon)(status, sequen);
            status = new Array(2);
            status[0] = sequen;
            variable36 = _closure1_slot11;
            sequen = yankee[echoed];
            sequen = sierra.bind(tangon)(sequen);
            whisks = sequen.Text;
            limora = {'color': 'always-white', 'style': null, 'variant': 'text-md/medium'};
            sequen = kiloes.cardTierBoostcount;
            limora['style'] = sequen;
            sequen = 9;
            variable38 = yankee[sequen];
            variable38 = sierra.bind(tangon)(variable38);
            variable41 = variable38.intl;
            variable40 = variable41.format;
            variable38 = yankee[sequen];
            variable38 = sierra.bind(tangon)(variable38);
            variable38 = variable38.t;
            variable39 = variable38.gDsyBw;
            variable38 = {};
            variable42 = _closure1_slot8;
            variable42 = variable42[golfie];
            variable38['numSubscriptions'] = variable42;
            variable38 = variable40.bind(variable41)(variable39, variable38);
            limora['children'] = variable38;
            limora = variable36.bind(tangon)(whisks, limora);
            status[1] = limora;
            cntext['children'] = status;
            papara = target.bind(tangon)(papara, cntext);
            cntext = new Array(3);
            cntext[0] = papara;
            status = _closure1_slot12;
            target = _closure1_slot5;
            papara = {};
            limora = kiloes.cardFeaturesWrapper;
            papara['style'] = limora;
            whisks = _closure1_slot11;
            variable36 = _closure1_slot19;
            limora = {};
            limora['features'] = equals;
            equals = !quebec;
            limora['isVisible'] = equals;
            whisks = whisks.bind(tangon)(variable36, limora);
            limora = new Array(2);
            limora[0] = whisks;
            equals = _closure1_slot11;
            whisks = {};
            whisks['features'] = variable37;
            whisks['isVisible'] = quebec;
            whisks = equals.bind(tangon)(variable36, whisks);
            limora[1] = whisks;
            papara['children'] = limora;
            papara = status.bind(tangon)(target, papara);
            cntext[1] = papara;
            status = _closure1_slot12;
            target = _closure1_slot5;
            papara = {};
            limora = kiloes.cardFooter;
            papara['style'] = limora;
            limora = _closure1_slot11;
            yankee = yankee[echoed];
            yankee = sierra.bind(tangon)(yankee);
            sierra = yankee.Text;
            yankee = {'color': 'always-white', 'variant': 'text-md/semibold'};
            equals = _closure1_slot0;
            whisks = _closure1_slot2;
            variable36 = whisks[sequen];
            variable36 = equals.bind(tangon)(variable36);
            variable37 = variable36.intl;
            variable36 = variable37.string;
            whisks = whisks[sequen];
            whisks = equals.bind(tangon)(whisks);
            equals = whisks.t;
            if(quebec) { _fun00008_ip = 892; continue _fun00007 }
 877:
            whisks = equals.agC5xs;
            whisks = variable36.bind(variable37)(whisks);
            _fun00008_ip = 905; continue _fun00007;
 892:
            equals = equals.DFwxsb;
            whisks = variable36.bind(variable37)(equals);
 905:
            yankee['children'] = whisks;
            yankee = limora.bind(tangon)(sierra, yankee);
            sierra = new Array(2);
            sierra[0] = yankee;
            equals = _closure1_slot11;
            variable36 = _closure1_slot1;
            variable37 = _closure1_slot2;
            yankee = 39;
            limora = variable37[yankee];
            whisks = variable36.bind(tangon)(limora);
            limora = {};
            variable37 = variable37[update];
            variable37 = variable36.bind(tangon)(variable37);
            variable37 = variable37.unsafe_rawColors;
            variable37 = variable37.WHITE_500;
            limora['color'] = variable37;
            variable37 = kiloes.cardFooterIcon;
            limora['style'] = variable37;
            variable38 = _closure1_slot2;
            if(quebec) { _fun00008_ip = 999; continue _fun00007 }
 990:
            quebec = 41;
            quebec = variable38[quebec];
            _fun00008_ip = 1006; continue _fun00007;
 999:
            variable37 = 40;
            quebec = variable38[variable37];
 1006:
            quebec = variable36.bind(tangon)(quebec);
            limora['source'] = quebec;
            limora = equals.bind(tangon)(whisks, limora);
            sierra[1] = limora;
            papara['children'] = sierra;
            papara = status.bind(tangon)(target, papara);
            cntext[2] = papara;
            source['children'] = cntext;
            source = config.bind(tangon)(ctrled, source);
            offset['children'] = source;
            offset = output.bind(tangon)(backup, offset);
            report['children'] = offset;
            oscard = verify.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            oscard = result;
            if(oscard) { _fun00008_ip = 1103; continue _fun00007 }
 1083:
            if(!option) { _fun00008_ip = 1100; continue _fun00007 }
 1086:
            verify = _closure1_slot9;
            verify = verify.TIER_3;
            option = golfie === verify;
 1100:
            oscard = option;
 1103:
            if(!oscard) { _fun00008_ip = 1385; continue _fun00007 }
 1109:
            offset = _closure1_slot11;
            source = _closure1_slot1;
            backup = _closure1_slot2;
            option = backup[foxtra];
            verify = source.bind(tangon)(option);
            option = {};
            output = 3;
            option['angle'] = output;
            output = {'x': 0.5, 'y': 0.2};
            option['angleCenter'] = output;
            output = backup[update];
            output = source.bind(tangon)(output);
            output = output.unsafe_rawColors;
            ctrled = output.GUILD_BOOSTING_BLUE;
            output = new Array(2);
            output[0] = ctrled;
            update = backup[update];
            update = source.bind(tangon)(update);
            update = update.unsafe_rawColors;
            update = update.GUILD_BOOSTING_PURPLE;
            output[1] = update;
            option['colors'] = output;
            output = [0, 1];
            option['locations'] = output;
            output = kiloes.cardTierBadge;
            option['style'] = output;
            option['useAngle'] = sizing;
            output = _closure1_slot11;
            sizing = _closure1_slot0;
            backup = backup[echoed];
            backup = sizing.bind(tangon)(backup);
            sizing = backup.Text;
            backup = {'color': 'always-white', 'style': null, 'variant': 'text-xs/bold'};
            echoed = kiloes.cardTierBadgeCopy;
            backup['style'] = echoed;
            ctrled = _closure1_slot0;
            echoed = _closure1_slot2;
            update = echoed[sequen];
            update = ctrled.bind(tangon)(update);
            source = update.intl;
            update = source.string;
            echoed = echoed[sequen];
            echoed = ctrled.bind(tangon)(echoed);
            echoed = echoed.t;
            if(result) { _fun00008_ip = 1352; continue _fun00007 }
 1337:
            result = echoed.9JbE3N;
            result = update.bind(source)(result);
            _fun00008_ip = 1365; continue _fun00007;
 1352:
            echoed = echoed.9NBo7e;
            result = update.bind(source)(echoed);
 1365:
            backup['children'] = result;
            backup = output.bind(tangon)(sizing, backup);
            option['children'] = backup;
            oscard = offset.bind(tangon)(verify, option);
 1385:
            report[1] = oscard;
            oscard = _closure1_slot9;
            oscard = oscard.TIER_3;
            oscard = golfie === oscard;
            if(!oscard) { _fun00008_ip = 2118; continue _fun00007 }
 1409:
            verify = _closure1_slot12;
            option = _closure1_slot13;
            golfie = {};
            result = _closure1_slot11;
            sizing = _closure1_slot1;
            output = _closure1_slot2;
            offset = output[foxtra];
            backup = sizing.bind(tangon)(offset);
            offset = {};
            source = _closure1_slot0;
            update = 42;
            echoed = output[update];
            sequen = source.bind(tangon)(echoed);
            echoed = sequen.hexWithOpacity;
            ctrled = 0;
            sequen = echoed.bind(sequen)(vacuum, ctrled);
            echoed = new Array(3);
            echoed[0] = sequen;
            sequen = output[update];
            config = source.bind(tangon)(sequen);
            sequen = config.hexWithOpacity;
            sequen = sequen.bind(config)(vacuum, record);
            echoed[1] = sequen;
            sequen = output[update];
            config = source.bind(tangon)(sequen);
            sequen = config.hexWithOpacity;
            sequen = sequen.bind(config)(vacuum, ctrled);
            echoed[2] = sequen;
            offset['colors'] = echoed;
            echoed = {'x': 0, 'y': 0};
            offset['start'] = echoed;
            echoed = {'x': 1, 'y': 0};
            offset['end'] = echoed;
            echoed = [0, 0.5, 1];
            offset['locations'] = echoed;
            sequen = kiloes.gradientHighlight;
            echoed = new Array(2);
            echoed[0] = sequen;
            sequen = kiloes.gradientHighlightTop;
            echoed[1] = sequen;
            offset['style'] = echoed;
            backup = result.bind(tangon)(backup, offset);
            offset = new Array(6);
            offset[0] = backup;
            result = _closure1_slot11;
            foxtra = output[foxtra];
            backup = sizing.bind(tangon)(foxtra);
            foxtra = {};
            echoed = output[update];
            sequen = source.bind(tangon)(echoed);
            echoed = sequen.hexWithOpacity;
            sequen = echoed.bind(sequen)(vacuum, ctrled);
            echoed = new Array(3);
            echoed[0] = sequen;
            sequen = output[update];
            config = source.bind(tangon)(sequen);
            sequen = config.hexWithOpacity;
            sequen = sequen.bind(config)(vacuum, record);
            echoed[1] = sequen;
            update = output[update];
            source = source.bind(tangon)(update);
            update = source.hexWithOpacity;
            update = update.bind(source)(vacuum, ctrled);
            echoed[2] = update;
            foxtra['colors'] = echoed;
            echoed = {'x': 0, 'y': 0};
            foxtra['start'] = echoed;
            echoed = {'x': 1, 'y': 0};
            foxtra['end'] = echoed;
            echoed = [0, 0.5, 1];
            foxtra['locations'] = echoed;
            update = kiloes.gradientHighlight;
            echoed = new Array(2);
            echoed[0] = update;
            update = kiloes.gradientHighlightBottom;
            echoed[1] = update;
            foxtra['style'] = echoed;
            foxtra = result.bind(tangon)(backup, foxtra);
            offset[1] = foxtra;
            result = _closure1_slot11;
            foxtra = output[yankee];
            backup = sizing.bind(tangon)(foxtra);
            foxtra = {};
            echoed = 43;
            update = output[echoed];
            update = sizing.bind(tangon)(update);
            foxtra['source'] = update;
            source = kiloes.sparkleStar;
            update = new Array(3);
            update[0] = source;
            source = kiloes.sparkleStarPointed;
            update[1] = source;
            source = kiloes.sparkleStarPointed1;
            update[2] = source;
            foxtra['style'] = update;
            foxtra = result.bind(tangon)(backup, foxtra);
            offset[2] = foxtra;
            result = _closure1_slot11;
            foxtra = output[yankee];
            backup = sizing.bind(tangon)(foxtra);
            foxtra = {};
            update = output[echoed];
            update = sizing.bind(tangon)(update);
            foxtra['source'] = update;
            source = kiloes.sparkleStar;
            update = new Array(3);
            update[0] = source;
            source = kiloes.sparkleStarPointed;
            update[1] = source;
            source = kiloes.sparkleStarPointed2;
            update[2] = source;
            foxtra['style'] = update;
            foxtra = result.bind(tangon)(backup, foxtra);
            offset[3] = foxtra;
            result = _closure1_slot11;
            foxtra = output[yankee];
            backup = sizing.bind(tangon)(foxtra);
            foxtra = {};
            echoed = output[echoed];
            echoed = sizing.bind(tangon)(echoed);
            foxtra['source'] = echoed;
            update = kiloes.sparkleStar;
            echoed = new Array(3);
            echoed[0] = update;
            update = kiloes.sparkleStarPointed;
            echoed[1] = update;
            update = kiloes.sparkleStarPointed3;
            echoed[2] = update;
            foxtra['style'] = echoed;
            foxtra = result.bind(tangon)(backup, foxtra);
            offset[4] = foxtra;
            foxtra = _closure1_slot11;
            yankee = output[yankee];
            romeon = sizing.bind(tangon)(yankee);
            yankee = {};
            backup = 44;
            backup = output[backup];
            backup = sizing.bind(tangon)(backup);
            yankee['source'] = backup;
            sizing = kiloes.sparkleStar;
            backup = new Array(3);
            backup[0] = sizing;
            sizing = kiloes.sparkleStarElongated;
            backup[1] = sizing;
            kiloes = kiloes.sparkleStarElongated1;
            backup[2] = kiloes;
            yankee['style'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[5] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 2118:
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot18 = tangon;
    tangon = 47;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingTierCards.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildBoostingMarketingTierCards
        entity = function() { // Original name: handleCardPress
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 46;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.DeprecatedLayoutAnimation;
            michal = michal.bind(zuuluu)();
            zuuluu = _closure2_slot4;
            michal = function(argFoo) {
                entity = argFoo;
                entity = !entity;
                return entity;
            };
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        var _closure2_slot6 = entity;
        entity = _closure1_slot16;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        entity = argFoo;
        michal = entity.guild;
        var _closure2_slot0 = michal;
        verify = _closure1_slot4;
        entity = verify.useRef;
        zuuluu = null;
        option = entity.bind(verify)(zuuluu);
        var _closure2_slot1 = option;
        entity = verify.useRef;
        entity = entity.bind(verify)(zuuluu);
        var _closure2_slot2 = entity;
        zuuluu = verify.useState;
        entity = false;
        offset = zuuluu.bind(verify)(entity);
        zuuluu = _closure1_slot3;
        entity = 2;
        zuuluu = zuuluu.bind(tangon)(offset, entity);
        entity = 0;
        entity = zuuluu[entity];
        var _closure2_slot3 = entity;
        entity = 1;
        entity = zuuluu[entity];
        var _closure2_slot4 = entity;
        zuuluu = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 45;
        entity = offset[entity];
        yankee = zuuluu.bind(tangon)(entity);
        offset = yankee.useStateFromStores;
        entity = _closure1_slot7;
        zuuluu = new Array(1);
        zuuluu[0] = entity;
        entity = function() {
            entity = _closure1_slot7;
            entity = entity.useReducedMotion;
            return entity;
        };
        entity = offset.bind(yankee)(zuuluu, entity);
        var _closure2_slot5 = entity;
        zuuluu = verify.useEffect;
        offset = michal.premiumTier;
        michal = new Array(2);
        michal[0] = offset;
        michal[1] = entity;
        entity = function() {
            michal = global;
            report = michal.window;
            tangon = report.setTimeout;
            zuuluu = function() {
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    michal = _closure2_slot2;
                    zuuluu = michal.current;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00012_ip = 47; continue _fun00011 }
 18:
                    entity = _closure2_slot2;
                    zuuluu = entity.current;
                    michal = zuuluu.measure;
                    entity = function(argFoo) {
                        _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
                            entity = _closure2_slot1;
                            michal = entity.current;
                            entity = null;
                            if(!(entity != michal)) { _fun00014_ip = 66; continue _fun00013 }
 18:
                            entity = _closure2_slot1;
                            zuuluu = entity.current;
                            michal = zuuluu.scrollTo;
                            entity = {};
                            oscard = argFoo;
                            report = 8;
                            report = oscard - report;
                            entity['x'] = report;
                            tangon = _closure2_slot5;
                            tangon = !tangon;
                            entity['animated'] = tangon;
                            entity = michal.bind(zuuluu)(entity);
 66:
                            entity = undefined;
                            return entity;
                        }
                    };
                    entity = michal.bind(zuuluu)(entity);
 47:
                    entity = undefined;
                    return entity;
                }
            };
            michal = 400;
            michal = tangon.bind(report)(zuuluu, michal);
            var _closure3_slot0 = michal;
            entity = function() {
                entity = global;
                zuuluu = entity.window;
                michal = zuuluu.clearTimeout;
                entity = _closure3_slot0;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            return entity;
        };
        entity = zuuluu.bind(verify)(entity, michal);
        zuuluu = _closure1_slot11;
        michal = _closure1_slot6;
        entity = {'centerContent': true, 'contentContainerStyle': null, 'decelerationRate': 0.1, 'horizontal': true};
        verify = golfie.cardsScrollerContent;
        entity['contentContainerStyle'] = verify;
        entity['ref'] = option;
        option = _closure1_slot15;
        entity['snapToOffsets'] = option;
        golfie = golfie.cardsScroller;
        entity['style'] = golfie;
        golfie = _closure1_slot14;
        oscard = golfie.map;
        report = function(argFoo) {
            michal = argFoo;
            report = michal.tier;
            option = michal.features;
            michal = global;
            offset = michal.Math;
            verify = offset.min;
            zuuluu = _closure1_slot9;
            tangon = zuuluu.TIER_3;
            golfie = _closure2_slot0;
            yankee = golfie.premiumTier;
            zuuluu = 1;
            zuuluu = yankee + zuuluu;
            zuuluu = verify.bind(offset)(tangon, zuuluu);
            zuuluu = report === zuuluu;
            var _closure3_slot0 = zuuluu;
            tangon = _closure1_slot11;
            zuuluu = _closure1_slot18;
            michal = {};
            michal['features'] = option;
            michal['guild'] = golfie;
            golfie = _closure2_slot3;
            michal['isExpanded'] = golfie;
            oscard = _closure2_slot6;
            michal['onCardPress'] = oscard;
            entity = function(argFoo) { // Original name: ref
                _fun00015: for(var _fun00016_ip = 0; ; ) switch(_fun00016_ip) {
 0:
                    entity = _closure3_slot0;
                    if(!entity) { _fun00016_ip = 26; continue _fun00015 }
 10:
                    michal = _closure2_slot2;
                    entity = argFoo;
                    michal['current'] = entity;
 26:
                    entity = undefined;
                    return entity;
                }
            };
            michal['ref'] = entity;
            michal['tier'] = report;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal, report);
            return entity;
        };
        report = oscard.bind(golfie)(report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();