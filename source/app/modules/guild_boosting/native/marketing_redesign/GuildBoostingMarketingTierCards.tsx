// app/modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingTierCards.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: TierFeatures
        _fun105157: for(var _fun105157_ip = 0; ; ) switch(_fun105157_ip) {
 0:
            entity = argFoo;
            zulu = _closure1_slot16;
            tango = undefined;
            offset = zulu.bind(tango)();
            var _closure2_slot0 = offset;
            golf = entity.features;
            var _closure2_slot1 = golf;
            verify = entity.isVisible;
            var _closure2_slot2 = verify;
            backup = _closure1_slot0;
            oscar = _closure1_slot2;
            entity = 31;
            zulu = oscar[entity];
            yankee = backup.bind(tango)(zulu);
            options = yankee.useAnimatedStyle;
            zulu = function() { // Original name: o
                _fun105158: for(var _fun105158_ip = 0; ; ) switch(_fun105158_ip) {
 0:
                    entity = {};
                    zulu = _closure1_slot0;
                    mike = _closure1_slot2;
                    backup = 31;
                    mike = mike[backup];
                    foxtrot = undefined;
                    report = zulu.bind(foxtrot)(mike);
                    tango = report.withDelay;
                    oscar = _closure2_slot2;
                    zulu = 0;
                    if(!oscar) { _fun105158_ip = 48; continue _fun105158 }
 45:
                    zulu = 150;
 48:
                    golf = _closure1_slot0;
                    offset = _closure1_slot2;
                    oscar = 32;
                    oscar = offset[oscar];
                    golf = golf.bind(foxtrot)(oscar);
                    oscar = golf.withTiming;
                    mike = _closure2_slot2;
                    options = 0;
                    if(!mike) { _fun105158_ip = 85; continue _fun105158 }
 82:
                    options = 1;
 85:
                    mike = {};
                    offset = 150;
                    mike['duration'] = offset;
                    romeo = _closure1_slot0;
                    verify = _closure1_slot2;
                    offset = verify[backup];
                    offset = romeo.bind(foxtrot)(offset);
                    yankee = offset.Easing;
                    offset = yankee.inOut;
                    verify = verify[backup];
                    verify = romeo.bind(foxtrot)(verify);
                    verify = verify.Easing;
                    verify = verify.quad;
                    verify = offset.bind(yankee)(verify);
                    mike['easing'] = verify;
                    mike = oscar.bind(golf)(options, mike);
                    mike = tango.bind(report)(zulu, mike);
                    entity['opacity'] = mike;
                    return entity;
                }
            };
            romeo = {};
            foxtrot = oscar[entity];
            foxtrot = backup.bind(tango)(foxtrot);
            foxtrot = foxtrot.withDelay;
            romeo['withDelay'] = foxtrot;
            romeo['isVisible'] = verify;
            foxtrot = 150;
            romeo['TIER_FEATURE_ANIMATION_DURATION_MS'] = foxtrot;
            foxtrot = 32;
            foxtrot = oscar[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            foxtrot = foxtrot.withTiming;
            romeo['withTiming'] = foxtrot;
            foxtrot = oscar[entity];
            foxtrot = backup.bind(tango)(foxtrot);
            foxtrot = foxtrot.Easing;
            romeo['Easing'] = foxtrot;
            zulu['__closure'] = romeo;
            romeo = 13329849944491.0;
            zulu['__workletHash'] = romeo;
            romeo = _closure1_slot17;
            zulu['__initData'] = romeo;
            options = options.bind(yankee)(zulu);
            zulu = _closure1_slot11;
            mike = _closure1_slot1;
            entity = oscar[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.View;
            entity = {};
            oscar = !verify;
            entity['accessibilityElementsHidden'] = oscar;
            oscar = 'no-hide-descendants';
            if(!verify) { _fun105157_ip = 233; continue _fun105157 }
 231:
            oscar = undefined;
 233:
            entity['importantForAccessibility'] = oscar;
            yankee = offset.cardFeatures;
            oscar = new Array(3);
            oscar[0] = yankee;
            verify = !verify;
            if(!verify) { _fun105157_ip = 264; continue _fun105157 }
 258:
            verify = offset.cardFeaturesInvisible;
 264:
            oscar[1] = verify;
            oscar[2] = options;
            entity['style'] = oscar;
            oscar = golf.map;
            report = function(argFoo, argBar) {
                _fun105159: for(var _fun105159_ip = 0; ; ) switch(_fun105159_ip) {
 0:
                    yankee = argFoo;
                    report = argBar;
                    tango = _closure1_slot12;
                    zulu = _closure1_slot5;
                    mike = {};
                    entity = _closure2_slot0;
                    oscar = entity.cardFeature;
                    entity = new Array(3);
                    entity[0] = oscar;
                    oscar = yankee.isIncluded;
                    oscar = !oscar;
                    if(!oscar) { _fun105159_ip = 62; continue _fun105159 }
 52:
                    options = _closure2_slot0;
                    oscar = options.cardFeatureExcluded;
 62:
                    entity[1] = oscar;
                    oscar = _closure2_slot1;
                    options = oscar.length;
                    oscar = 1;
                    oscar = options - oscar;
                    oscar = report === oscar;
                    if(!oscar) { _fun105159_ip = 99; continue _fun105159 }
 89:
                    options = _closure2_slot0;
                    oscar = options.cardFeatureLast;
 99:
                    entity[2] = oscar;
                    mike['style'] = entity;
                    verify = _closure1_slot11;
                    options = yankee.IconComponent;
                    oscar = {'size': 'custom', 'style': null, 'color': 'white'};
                    entity = _closure2_slot0;
                    entity = entity.cardFeatureIcon;
                    oscar['style'] = entity;
                    entity = undefined;
                    options = verify.bind(entity)(options, oscar);
                    oscar = new Array(2);
                    oscar[0] = options;
                    verify = _closure1_slot11;
                    options = _closure1_slot0;
                    romeo = _closure1_slot2;
                    golf = 33;
                    golf = romeo[golf];
                    golf = options.bind(entity)(golf);
                    options = golf.Text;
                    golf = {'style': null, 'color': 'always-white', 'variant': 'text-md/semibold'};
                    romeo = yankee.isIncluded;
                    romeo = !romeo;
                    if(!romeo) { _fun105159_ip = 224; continue _fun105159 }
 214:
                    offset = _closure2_slot0;
                    romeo = offset.cardFeatureExcludedCopy;
 224:
                    offset = new Array(1);
                    offset[0] = romeo;
                    golf['style'] = offset;
                    offset = yankee.getCopy;
                    offset = offset.bind(yankee)();
                    golf['children'] = offset;
                    golf = verify.bind(entity)(options, golf);
                    oscar[1] = golf;
                    mike['children'] = oscar;
                    entity = tango.bind(entity)(zulu, mike, report);
                    return entity;
                }
            };
            report = oscar.bind(golf)(report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot19 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    sizing = true;
    tango['value'] = sizing;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    kilo = 0;
    tango = oscar[kilo];
    entity = undefined;
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot3 = tango;
    backup = 1;
    golf = oscar[backup];
    tango = argCorge;
    options = tango.bind(entity)(golf);
    var _closure1_slot4 = options;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot5 = golf;
    tango = tango.ScrollView;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.AppliedGuildBoostsRequiredForBoostedGuildTier;
    var _closure1_slot8 = golf;
    golf = tango.BoostedGuildTiers;
    var _closure1_slot9 = golf;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.BoostedGuildFeatures;
    var _closure1_slot10 = tango;
    tango = 6;
    verify = oscar[tango];
    verify = report.bind(entity)(verify);
    verify = verify.jsx;
    var _closure1_slot11 = verify;
    verify = oscar[tango];
    verify = report.bind(entity)(verify);
    verify = verify.jsxs;
    var _closure1_slot12 = verify;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot13 = tango;
    tango = {};
    verify = golf.TIER_1;
    tango['tier'] = verify;
    offset = {'orderCollapsed': 0, 'isIncluded': true};
    verify = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 7;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = verify;
    romeo = 8;
    verify = oscar[romeo];
    verify = report.bind(entity)(verify);
    verify = verify.ReactionIcon;
    offset['IconComponent'] = verify;
    verify = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Tlz0x8;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscar[report];
        report = report.limits;
        report = report.emoji;
        entity['numEmojiSlots'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = verify;
    verify = new Array(11);
    verify[0] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 10;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    vacuum = 11;
    yankee = oscar[vacuum];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.StickerIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.WgHNGB;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscar[report];
        report = report.limits;
        report = report.stickers;
        entity['numStickerSlots'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[1] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 12;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    control = 13;
    yankee = oscar[control];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ScreenArrowIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Jbg8oa;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscar[report];
        report = report.limits;
        report = report.screenShareQualityResolution;
        entity['resolution'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[2] = offset;
    offset = {'orderCollapsed': 2, 'isIncluded': true};
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 14;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    source = 15;
    yankee = oscar[source];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.VoiceNormalIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscar = undefined;
        entity = offset.bind(oscar)(entity);
        tango = entity.intl;
        zulu = tango.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscar)(entity);
        entity = entity.t;
        mike = entity.vBfZzM;
        entity = {};
        golf = yankee[report];
        golf = offset.bind(oscar)(golf);
        options = golf.intl;
        golf = options.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscar)(report);
        report = report.t;
        oscar = report.w1gmLi;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_1;
        verify = offset[verify];
        verify = verify.limits;
        offset = verify.bitrate;
        verify = 1000;
        verify = offset / verify;
        report['bitrate'] = verify;
        report = golf.bind(options)(oscar, report);
        entity['bitrate'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[3] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 16;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    update = 17;
    yankee = oscar[update];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.StageIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Mrvzjo;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_1;
        report = oscar[report];
        report = report.limits;
        report = report.stageVideoUsers;
        entity['numStageSeats'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[4] = offset;
    offset = {'orderCollapsed': 1, 'isIncluded': true};
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 18;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    echo = 19;
    yankee = oscar[echo];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.GifIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.PbAyub;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[5] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 20;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    output = 21;
    yankee = oscar[output];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ServerGridIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.tzGY0t;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[6] = offset;
    offset = {};
    config = false;
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 22;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    result = 23;
    yankee = oscar[result];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.UploadIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscar = undefined;
        entity = offset.bind(oscar)(entity);
        tango = entity.intl;
        zulu = tango.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscar)(entity);
        entity = entity.t;
        mike = entity.aFRl5+;
        entity = {};
        golf = yankee[report];
        golf = offset.bind(oscar)(golf);
        options = golf.intl;
        golf = options.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscar)(report);
        report = report.t;
        oscar = report.pIn7AQ;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_2;
        verify = offset[verify];
        verify = verify.limits;
        verify = verify.fileSize;
        offset = 1024;
        verify = verify / offset;
        verify = verify / offset;
        report['size'] = verify;
        report = golf.bind(options)(oscar, report);
        entity['uploadSizeLimit'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[7] = offset;
    offset = {};
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 20;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    yankee = oscar[output];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ServerGridIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.1a5rjo;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[8] = offset;
    offset = {};
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 24;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    yankee = oscar[romeo];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.ReactionIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.6PV6QU;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    verify[9] = offset;
    offset = {};
    offset['isIncluded'] = config;
    yankee = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 25;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = yankee;
    yankee = 26;
    sequence = oscar[yankee];
    sequence = report.bind(entity)(sequence);
    sequence = sequence.LinkIcon;
    offset['IconComponent'] = sequence;
    sequence = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.adNGjY;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = sequence;
    verify[10] = offset;
    tango['features'] = verify;
    verify = new Array(3);
    verify[0] = tango;
    tango = {};
    offset = golf.TIER_2;
    tango['tier'] = offset;
    sequence = {};
    sequence['isIncluded'] = sizing;
    offset = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 7;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = offset;
    offset = oscar[romeo];
    offset = report.bind(entity)(offset);
    offset = offset.ReactionIcon;
    sequence['IconComponent'] = offset;
    offset = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Tlz0x8;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscar[report];
        report = report.limits;
        report = report.emoji;
        entity['numEmojiSlots'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    sequence['getCopy'] = offset;
    offset = new Array(11);
    offset[0] = sequence;
    sequence = {};
    sequence['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 10;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[vacuum];
    record = report.bind(entity)(record);
    record = record.StickerIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.WgHNGB;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscar[report];
        report = report.limits;
        report = report.stickers;
        entity['numStickerSlots'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[1] = sequence;
    sequence = {'orderCollapsed': 0, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 12;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[control];
    record = report.bind(entity)(record);
    record = record.ScreenArrowIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Jbg8oa;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscar[report];
        report = report.limits;
        report = report.screenShareQualityResolution;
        entity['resolution'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[2] = sequence;
    sequence = {};
    sequence['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 14;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[source];
    record = report.bind(entity)(record);
    record = record.VoiceNormalIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscar = undefined;
        entity = offset.bind(oscar)(entity);
        tango = entity.intl;
        zulu = tango.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscar)(entity);
        entity = entity.t;
        mike = entity.vBfZzM;
        entity = {};
        golf = yankee[report];
        golf = offset.bind(oscar)(golf);
        options = golf.intl;
        golf = options.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscar)(report);
        report = report.t;
        oscar = report.w1gmLi;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_2;
        verify = offset[verify];
        verify = verify.limits;
        offset = verify.bitrate;
        verify = 1000;
        verify = offset / verify;
        report['bitrate'] = verify;
        report = golf.bind(options)(oscar, report);
        entity['bitrate'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[3] = sequence;
    sequence = {};
    sequence['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 16;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[update];
    record = report.bind(entity)(record);
    record = record.StageIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Mrvzjo;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_2;
        report = oscar[report];
        report = report.limits;
        report = report.stageVideoUsers;
        entity['numStageSeats'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[4] = sequence;
    sequence = {};
    sequence['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 18;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[echo];
    record = report.bind(entity)(record);
    record = record.GifIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.PbAyub;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[5] = sequence;
    sequence = {};
    sequence['isIncluded'] = sizing;
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 20;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[output];
    record = report.bind(entity)(record);
    record = record.ServerGridIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.tzGY0t;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[6] = sequence;
    sequence = {'orderCollapsed': 1, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 22;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[result];
    record = report.bind(entity)(record);
    record = record.UploadIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscar = undefined;
        entity = offset.bind(oscar)(entity);
        tango = entity.intl;
        zulu = tango.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscar)(entity);
        entity = entity.t;
        mike = entity.aFRl5+;
        entity = {};
        golf = yankee[report];
        golf = offset.bind(oscar)(golf);
        options = golf.intl;
        golf = options.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscar)(report);
        report = report.t;
        oscar = report.pIn7AQ;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_2;
        verify = offset[verify];
        verify = verify.limits;
        verify = verify.fileSize;
        offset = 1024;
        verify = verify / offset;
        verify = verify / offset;
        report['size'] = verify;
        report = golf.bind(options)(oscar, report);
        entity['uploadSizeLimit'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[7] = sequence;
    sequence = {'orderCollapsed': 3, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 20;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[output];
    record = report.bind(entity)(record);
    record = record.ServerGridIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.1a5rjo;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[8] = sequence;
    sequence = {'orderCollapsed': 2, 'isIncluded': true};
    record = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 24;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = record;
    record = oscar[romeo];
    record = report.bind(entity)(record);
    record = record.ReactionIcon;
    sequence['IconComponent'] = record;
    record = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.6PV6QU;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    sequence['getCopy'] = record;
    offset[9] = sequence;
    sequence = {};
    sequence['isIncluded'] = config;
    config = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 25;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    sequence['getIcon'] = config;
    config = oscar[yankee];
    config = report.bind(entity)(config);
    config = config.LinkIcon;
    sequence['IconComponent'] = config;
    config = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.adNGjY;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    sequence['getCopy'] = config;
    offset[10] = sequence;
    tango['features'] = offset;
    verify[1] = tango;
    tango = {};
    golf = golf.TIER_3;
    tango['tier'] = golf;
    offset = {};
    offset['isIncluded'] = sizing;
    golf = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 7;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = golf;
    golf = oscar[romeo];
    golf = report.bind(entity)(golf);
    golf = golf.ReactionIcon;
    offset['IconComponent'] = golf;
    golf = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Tlz0x8;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscar[report];
        report = report.limits;
        report = report.emoji;
        entity['numEmojiSlots'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = golf;
    golf = new Array(11);
    golf[0] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    sequence = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 10;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = sequence;
    vacuum = oscar[vacuum];
    vacuum = report.bind(entity)(vacuum);
    vacuum = vacuum.StickerIcon;
    offset['IconComponent'] = vacuum;
    vacuum = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.WgHNGB;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscar[report];
        report = report.limits;
        report = report.stickers;
        entity['numStickerSlots'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = vacuum;
    golf[1] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    vacuum = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 12;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = vacuum;
    control = oscar[control];
    control = report.bind(entity)(control);
    control = control.ScreenArrowIcon;
    offset['IconComponent'] = control;
    control = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Jbg8oa;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscar[report];
        report = report.limits;
        report = report.screenShareQualityResolution;
        entity['resolution'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = control;
    golf[2] = offset;
    offset = {'orderCollapsed': 2, 'isIncluded': true};
    control = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 14;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = control;
    source = oscar[source];
    source = report.bind(entity)(source);
    source = source.VoiceNormalIcon;
    offset['IconComponent'] = source;
    source = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscar = undefined;
        entity = offset.bind(oscar)(entity);
        tango = entity.intl;
        zulu = tango.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscar)(entity);
        entity = entity.t;
        mike = entity.vBfZzM;
        entity = {};
        golf = yankee[report];
        golf = offset.bind(oscar)(golf);
        options = golf.intl;
        golf = options.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscar)(report);
        report = report.t;
        oscar = report.w1gmLi;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_3;
        verify = offset[verify];
        verify = verify.limits;
        offset = verify.bitrate;
        verify = 1000;
        verify = offset / verify;
        report['bitrate'] = verify;
        report = golf.bind(options)(oscar, report);
        entity['bitrate'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = source;
    golf[3] = offset;
    offset = {'orderCollapsed': 4, 'isIncluded': true};
    source = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 16;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = source;
    update = oscar[update];
    update = report.bind(entity)(update);
    update = update.StageIcon;
    offset['IconComponent'] = update;
    update = function() { // Original name: getCopy
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 9;
        zulu = golf[entity];
        mike = undefined;
        zulu = oscar.bind(mike)(zulu);
        tango = zulu.intl;
        zulu = tango.formatToPlainString;
        entity = golf[entity];
        entity = oscar.bind(mike)(entity);
        entity = entity.t;
        mike = entity.Mrvzjo;
        entity = {};
        oscar = _closure1_slot10;
        report = _closure1_slot9;
        report = report.TIER_3;
        report = oscar[report];
        report = report.limits;
        report = report.stageVideoUsers;
        entity['numStageSeats'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = update;
    golf[4] = offset;
    offset = {'orderCollapsed': 3, 'isIncluded': true};
    update = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 18;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = update;
    echo = oscar[echo];
    echo = report.bind(entity)(echo);
    echo = echo.GifIcon;
    offset['IconComponent'] = echo;
    echo = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.PbAyub;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = echo;
    golf[5] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    echo = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 20;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = echo;
    echo = oscar[output];
    echo = report.bind(entity)(echo);
    echo = echo.ServerGridIcon;
    offset['IconComponent'] = echo;
    echo = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.tzGY0t;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = echo;
    golf[6] = offset;
    offset = {'orderCollapsed': 1, 'isIncluded': true};
    echo = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 22;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = echo;
    result = oscar[result];
    result = report.bind(entity)(result);
    result = result.UploadIcon;
    offset['IconComponent'] = result;
    result = function() { // Original name: getCopy
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 9;
        entity = yankee[report];
        oscar = undefined;
        entity = offset.bind(oscar)(entity);
        tango = entity.intl;
        zulu = tango.formatToPlainString;
        entity = yankee[report];
        entity = offset.bind(oscar)(entity);
        entity = entity.t;
        mike = entity.aFRl5+;
        entity = {};
        golf = yankee[report];
        golf = offset.bind(oscar)(golf);
        options = golf.intl;
        golf = options.formatToPlainString;
        report = yankee[report];
        report = offset.bind(oscar)(report);
        report = report.t;
        oscar = report.pIn7AQ;
        report = {};
        offset = _closure1_slot10;
        verify = _closure1_slot9;
        verify = verify.TIER_3;
        verify = offset[verify];
        verify = verify.limits;
        verify = verify.fileSize;
        offset = 1024;
        verify = verify / offset;
        verify = verify / offset;
        report['size'] = verify;
        report = golf.bind(options)(oscar, report);
        entity['uploadSizeLimit'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    offset['getCopy'] = result;
    golf[7] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    result = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 20;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = result;
    output = oscar[output];
    output = report.bind(entity)(output);
    output = output.ServerGridIcon;
    offset['IconComponent'] = output;
    output = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.1a5rjo;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = output;
    golf[8] = offset;
    offset = {};
    offset['isIncluded'] = sizing;
    sizing = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 24;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = sizing;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    romeo = romeo.ReactionIcon;
    offset['IconComponent'] = romeo;
    romeo = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.6PV6QU;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = romeo;
    golf[9] = offset;
    offset = {'orderCollapsed': 0, 'isIncluded': true};
    romeo = function() { // Original name: getIcon
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 25;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        return entity;
    };
    offset['getIcon'] = romeo;
    yankee = oscar[yankee];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.LinkIcon;
    offset['IconComponent'] = yankee;
    yankee = function() { // Original name: getCopy
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 9;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.adNGjY;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    offset['getCopy'] = yankee;
    golf[10] = offset;
    tango['features'] = golf;
    verify[2] = tango;
    var _closure1_slot14 = verify;
    golf = verify.map;
    tango = function(argFoo, argBar) {
        mike = argBar;
        entity = 1;
        mike = mike + entity;
        entity = 300;
        entity = entity * mike;
        return entity;
    };
    tango = golf.bind(verify)(tango);
    var _closure1_slot15 = tango;
    tango = 27;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    golf = verify.createStyles;
    tango = {};
    yankee = 10;
    offset = {'marginRight': 10, 'width': 290};
    tango['cardWrapper'] = offset;
    offset = {};
    romeo = 28;
    sizing = oscar[romeo];
    sizing = foxtrot.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.lg;
    offset['borderRadius'] = sizing;
    sizing = '100%';
    offset['height'] = sizing;
    tango['card'] = offset;
    offset = {'display': 'flex', 'padding': 24, 'height': '100%'};
    tango['cardContent'] = offset;
    offset = {'borderRadius': null, 'overflow': 'hidden', 'height': '100%'};
    sizing = oscar[romeo];
    sizing = foxtrot.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.lg;
    offset['borderRadius'] = sizing;
    tango['pressableWrapper'] = offset;
    offset = {'alignItems': 'baseline', 'display': 'flex', 'flexDirection': 'row', 'flexGrow': 0, 'flexShrink': 0, 'marginBottom': 16};
    tango['cardHeading'] = offset;
    offset = {};
    offset['marginRight'] = yankee;
    tango['cardTierName'] = offset;
    offset = {};
    yankee = 0.7;
    offset['opacity'] = yankee;
    tango['cardTierBoostcount'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 0};
    tango['cardFeatures'] = offset;
    yankee = 'absolute';
    offset = {'position': 'absolute', 'top': 0, 'left': 0, 'height': '100%', 'width': '100%'};
    tango['cardFeaturesInvisible'] = offset;
    offset = {'alignSelf': 'stretch', 'flexGrow': 1, 'position': 'relative'};
    tango['cardFeaturesWrapper'] = offset;
    offset = {'alignItems': 'center', 'display': 'flex', 'flexDirection': 'row', 'marginBottom': 10};
    tango['cardFeature'] = offset;
    offset = {};
    sizing = 0.5;
    offset['opacity'] = sizing;
    tango['cardFeatureExcluded'] = offset;
    offset = {};
    sizing = 'line-through';
    offset['textDecorationLine'] = sizing;
    tango['cardFeatureExcludedCopy'] = offset;
    offset = {};
    offset['marginBottom'] = kilo;
    tango['cardFeatureLast'] = offset;
    offset = {};
    offset['flex'] = backup;
    backup = 29;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    backup = backup.PROGRESS_BAR_SPACING;
    offset['marginTop'] = backup;
    tango['cardsScroller'] = offset;
    offset = {'alignItems': 'flex-start', 'display': 'flex', 'flexDirection': 'row', 'paddingHorizontal': 8, 'paddingTop': 16, 'paddingBottom': 20};
    tango['cardsScrollerContent'] = offset;
    offset = {'height': 24, 'marginRight': 6, 'width': 24};
    tango['cardFeatureIcon'] = offset;
    offset = {'display': 'flex', 'flexDirection': 'row', 'marginTop': 24};
    tango['cardFooter'] = offset;
    offset = {'flexGrow': 0, 'flexShrink': 0, 'height': 24, 'marginLeft': 8, 'width': 24};
    tango['cardFooterIcon'] = offset;
    offset = {'borderRadius': null, 'paddingHorizontal': 8, 'paddingVertical': 4, 'position': 'absolute', 'top': 4294967280, 'left': 24};
    romeo = oscar[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    offset['borderRadius'] = romeo;
    tango['cardTierBadge'] = offset;
    offset = {};
    romeo = 'uppercase';
    offset['textTransform'] = romeo;
    tango['cardTierBadgeCopy'] = offset;
    offset = {};
    offset['position'] = yankee;
    yankee = 30;
    yankee = oscar[yankee];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.DARK_WHITE_500_LIGHT_GUILD_BOOSTING_PINK;
    offset['tintColor'] = yankee;
    tango['sparkleStar'] = offset;
    offset = {'height': 15, 'width': 18};
    tango['sparkleStarPointed'] = offset;
    offset = {'height': 45, 'width': 23};
    tango['sparkleStarElongated'] = offset;
    offset = {'top': 4294967289, 'right': 35};
    tango['sparkleStarPointed1'] = offset;
    offset = {'top': 20, 'right': 55};
    tango['sparkleStarPointed2'] = offset;
    offset = {'bottom': 4294967289, 'left': 70};
    tango['sparkleStarPointed3'] = offset;
    offset = {'right': 15, 'top': 10};
    tango['sparkleStarElongated1'] = offset;
    offset = {'position': 'absolute', 'height': 1, 'width': 60};
    tango['gradientHighlight'] = offset;
    offset = {'right': 15, 'top': 0};
    tango['gradientHighlightTop'] = offset;
    offset = {'left': 48, 'bottom': 0};
    tango['gradientHighlightBottom'] = offset;
    tango = golf.bind(verify)(tango);
    var _closure1_slot16 = tango;
    tango = {};
    golf = 'function GuildBoostingMarketingTierCardsTsx1(){const{withDelay,isVisible,TIER_FEATURE_ANIMATION_DURATION_MS,withTiming,Easing}=this.__closure;return{opacity:withDelay(isVisible?TIER_FEATURE_ANIMATION_DURATION_MS:0,withTiming(isVisible?1:0,{duration:TIER_FEATURE_ANIMATION_DURATION_MS,easing:Easing.inOut(Easing.quad)}))};}';
    tango['code'] = golf;
    var _closure1_slot17 = tango;
    golf = options.forwardRef;
    tango = function(argFoo, argBar) {
        _fun105227: for(var _fun105227_ip = 0; ; ) switch(_fun105227_ip) {
 0:
            zulu = argFoo;
            entity = _closure1_slot16;
            tango = undefined;
            kilo = entity.bind(tango)();
            entity = zulu.guild;
            variable37 = zulu.features;
            var _closure2_slot0 = variable37;
            quebec = zulu.isExpanded;
            echo = zulu.onCardPress;
            golf = zulu.tier;
            oscar = _closure1_slot1;
            report = _closure1_slot2;
            zulu = 34;
            zulu = report[zulu];
            zulu = oscar.bind(tango)(zulu);
            zulu = zulu.bind(tango)();
            verify = _closure1_slot4;
            options = verify.useMemo;
            oscar = new Array(1);
            oscar[0] = variable37;
            mike = function() {
                tango = _closure2_slot0;
                zulu = tango.filter;
                mike = function(argFoo) {
                    entity = argFoo;
                    mike = entity.orderCollapsed;
                    entity = null;
                    entity = entity != mike;
                    return entity;
                };
                zulu = zulu.bind(tango)(mike);
                mike = zulu.sort;
                entity = function(argFoo, argBar) {
                    _fun105230: for(var _fun105230_ip = 0; ; ) switch(_fun105230_ip) {
 0:
                        zulu = argFoo;
                        mike = argBar;
                        entity = zulu.orderCollapsed;
                        report = null;
                        tango = report == entity;
                        entity = 0;
                        if(tango) { _fun105230_ip = 87; continue _fun105230 }
 23:
                        tango = mike.orderCollapsed;
                        tango = report == tango;
                        entity = 0;
                        if(tango) { _fun105230_ip = 87; continue _fun105230 }
 38:
                        report = zulu.orderCollapsed;
                        tango = mike.orderCollapsed;
                        entity = 0;
                        if(!(report !== tango)) { _fun105230_ip = 87; continue _fun105230 }
 56:
                        zulu = zulu.orderCollapsed;
                        mike = mike.orderCollapsed;
                        zulu = zulu > mike;
                        mike = -1;
                        if(!zulu) { _fun105230_ip = 84; continue _fun105230 }
 81:
                        mike = 1;
 84:
                        entity = mike;
 87:
                        return entity;
                    }
                };
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            equality = options.bind(verify)(mike, oscar);
            mike = entity.premiumTier;
            options = mike === golf;
            entity = entity.premiumTier;
            record = 1;
            entity = entity + record;
            result = golf === entity;
            mike = _closure1_slot0;
            entity = 35;
            entity = report[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.isThemeDark;
            mike = entity.bind(mike)(zulu);
            zulu = _closure1_slot1;
            entity = _closure1_slot2;
            update = 28;
            entity = entity[update];
            entity = zulu.bind(tango)(entity);
            entity = entity.unsafe_rawColors;
            if(mike) { _fun105227_ip = 195; continue _fun105227 }
 187:
            vacuum = entity.GUILD_BOOSTING_PINK;
            _fun105227_ip = 201; continue _fun105227;
 195:
            vacuum = entity.WHITE_500;
 201:
            zulu = _closure1_slot12;
            mike = _closure1_slot5;
            entity = {};
            report = kilo.cardWrapper;
            entity['style'] = report;
            report = argBar;
            entity['ref'] = report;
            verify = _closure1_slot11;
            sizing = _closure1_slot1;
            yankee = _closure1_slot2;
            foxtrot = 36;
            report = yankee[foxtrot];
            oscar = sizing.bind(tango)(report);
            report = {};
            offset = 45;
            report['angle'] = offset;
            offset = {'x': 0.5, 'y': 0.5};
            report['angleCenter'] = offset;
            offset = yankee[update];
            offset = sizing.bind(tango)(offset);
            offset = offset.unsafe_rawColors;
            backup = offset.GUILD_BOOSTING_BLUE;
            offset = new Array(2);
            offset[0] = backup;
            backup = yankee[update];
            backup = sizing.bind(tango)(backup);
            backup = backup.unsafe_rawColors;
            backup = backup.GUILD_BOOSTING_PURPLE;
            offset[1] = backup;
            report['colors'] = offset;
            offset = [0, 1];
            report['locations'] = offset;
            offset = kilo.card;
            report['style'] = offset;
            sizing = true;
            report['useAngle'] = sizing;
            output = _closure1_slot11;
            backup = _closure1_slot5;
            offset = {};
            source = kilo.pressableWrapper;
            offset['style'] = source;
            config = _closure1_slot12;
            sierra = _closure1_slot0;
            source = 37;
            source = yankee[source];
            source = sierra.bind(tango)(source);
            control = source.PressableHighlight;
            source = {};
            source['onPress'] = echo;
            echo = kilo.cardContent;
            source['style'] = echo;
            target = _closure1_slot12;
            papa = _closure1_slot5;
            context = {};
            echo = kilo.cardHeading;
            context['style'] = echo;
            lima = _closure1_slot11;
            echo = 33;
            sequence = yankee[echo];
            sequence = sierra.bind(tango)(sequence);
            status = sequence.Text;
            sequence = {'color': 'always-white', 'style': null, 'variant': 'heading-xxl/extrabold'};
            whiskey = kilo.cardTierName;
            sequence['style'] = whiskey;
            whiskey = 38;
            whiskey = yankee[whiskey];
            variable38 = sierra.bind(tango)(whiskey);
            variable36 = variable38.getTierName;
            whiskey = {};
            variable39 = false;
            whiskey['useLevels'] = variable39;
            whiskey = variable36.bind(variable38)(golf, whiskey);
            sequence['children'] = whiskey;
            sequence = lima.bind(tango)(status, sequence);
            status = new Array(2);
            status[0] = sequence;
            variable36 = _closure1_slot11;
            sequence = yankee[echo];
            sequence = sierra.bind(tango)(sequence);
            whiskey = sequence.Text;
            lima = {'color': 'always-white', 'style': null, 'variant': 'text-md/medium'};
            sequence = kilo.cardTierBoostcount;
            lima['style'] = sequence;
            sequence = 9;
            variable38 = yankee[sequence];
            variable38 = sierra.bind(tango)(variable38);
            variable41 = variable38.intl;
            variable40 = variable41.format;
            variable38 = yankee[sequence];
            variable38 = sierra.bind(tango)(variable38);
            variable38 = variable38.t;
            variable39 = variable38.gDsyBw;
            variable38 = {};
            variable42 = _closure1_slot8;
            variable42 = variable42[golf];
            variable38['numSubscriptions'] = variable42;
            variable38 = variable40.bind(variable41)(variable39, variable38);
            lima['children'] = variable38;
            lima = variable36.bind(tango)(whiskey, lima);
            status[1] = lima;
            context['children'] = status;
            papa = target.bind(tango)(papa, context);
            context = new Array(3);
            context[0] = papa;
            status = _closure1_slot12;
            target = _closure1_slot5;
            papa = {};
            lima = kilo.cardFeaturesWrapper;
            papa['style'] = lima;
            whiskey = _closure1_slot11;
            variable36 = _closure1_slot19;
            lima = {};
            lima['features'] = equality;
            equality = !quebec;
            lima['isVisible'] = equality;
            whiskey = whiskey.bind(tango)(variable36, lima);
            lima = new Array(2);
            lima[0] = whiskey;
            equality = _closure1_slot11;
            whiskey = {};
            whiskey['features'] = variable37;
            whiskey['isVisible'] = quebec;
            whiskey = equality.bind(tango)(variable36, whiskey);
            lima[1] = whiskey;
            papa['children'] = lima;
            papa = status.bind(tango)(target, papa);
            context[1] = papa;
            status = _closure1_slot12;
            target = _closure1_slot5;
            papa = {};
            lima = kilo.cardFooter;
            papa['style'] = lima;
            lima = _closure1_slot11;
            yankee = yankee[echo];
            yankee = sierra.bind(tango)(yankee);
            sierra = yankee.Text;
            yankee = {'color': 'always-white', 'variant': 'text-md/semibold'};
            equality = _closure1_slot0;
            whiskey = _closure1_slot2;
            variable36 = whiskey[sequence];
            variable36 = equality.bind(tango)(variable36);
            variable37 = variable36.intl;
            variable36 = variable37.string;
            whiskey = whiskey[sequence];
            whiskey = equality.bind(tango)(whiskey);
            equality = whiskey.t;
            if(quebec) { _fun105227_ip = 894; continue _fun105227 }
 881:
            whiskey = equality.agC5xs;
            whiskey = variable36.bind(variable37)(whiskey);
            _fun105227_ip = 905; continue _fun105227;
 894:
            equality = equality.DFwxsb;
            whiskey = variable36.bind(variable37)(equality);
 905:
            yankee['children'] = whiskey;
            yankee = lima.bind(tango)(sierra, yankee);
            sierra = new Array(2);
            sierra[0] = yankee;
            equality = _closure1_slot11;
            variable36 = _closure1_slot1;
            variable37 = _closure1_slot2;
            yankee = 39;
            lima = variable37[yankee];
            whiskey = variable36.bind(tango)(lima);
            lima = {};
            variable37 = variable37[update];
            variable37 = variable36.bind(tango)(variable37);
            variable37 = variable37.unsafe_rawColors;
            variable37 = variable37.WHITE_500;
            lima['color'] = variable37;
            variable37 = kilo.cardFooterIcon;
            lima['style'] = variable37;
            variable38 = _closure1_slot2;
            if(quebec) { _fun105227_ip = 999; continue _fun105227 }
 990:
            quebec = 41;
            quebec = variable38[quebec];
            _fun105227_ip = 1006; continue _fun105227;
 999:
            variable37 = 40;
            quebec = variable38[variable37];
 1006:
            quebec = variable36.bind(tango)(quebec);
            lima['source'] = quebec;
            lima = equality.bind(tango)(whiskey, lima);
            sierra[1] = lima;
            papa['children'] = sierra;
            papa = status.bind(tango)(target, papa);
            context[2] = papa;
            source['children'] = context;
            source = config.bind(tango)(control, source);
            offset['children'] = source;
            offset = output.bind(tango)(backup, offset);
            report['children'] = offset;
            oscar = verify.bind(tango)(oscar, report);
            report = new Array(3);
            report[0] = oscar;
            oscar = result;
            if(oscar) { _fun105227_ip = 1103; continue _fun105227 }
 1083:
            if(!options) { _fun105227_ip = 1100; continue _fun105227 }
 1086:
            verify = _closure1_slot9;
            verify = verify.TIER_3;
            options = golf === verify;
 1100:
            oscar = options;
 1103:
            if(!oscar) { _fun105227_ip = 1381; continue _fun105227 }
 1109:
            offset = _closure1_slot11;
            source = _closure1_slot1;
            backup = _closure1_slot2;
            options = backup[foxtrot];
            verify = source.bind(tango)(options);
            options = {};
            output = 3;
            options['angle'] = output;
            output = {'x': 0.5, 'y': 0.2};
            options['angleCenter'] = output;
            output = backup[update];
            output = source.bind(tango)(output);
            output = output.unsafe_rawColors;
            control = output.GUILD_BOOSTING_BLUE;
            output = new Array(2);
            output[0] = control;
            update = backup[update];
            update = source.bind(tango)(update);
            update = update.unsafe_rawColors;
            update = update.GUILD_BOOSTING_PURPLE;
            output[1] = update;
            options['colors'] = output;
            output = [0, 1];
            options['locations'] = output;
            output = kilo.cardTierBadge;
            options['style'] = output;
            options['useAngle'] = sizing;
            output = _closure1_slot11;
            sizing = _closure1_slot0;
            backup = backup[echo];
            backup = sizing.bind(tango)(backup);
            sizing = backup.Text;
            backup = {'color': 'always-white', 'style': null, 'variant': 'text-xs/bold'};
            echo = kilo.cardTierBadgeCopy;
            backup['style'] = echo;
            control = _closure1_slot0;
            echo = _closure1_slot2;
            update = echo[sequence];
            update = control.bind(tango)(update);
            source = update.intl;
            update = source.string;
            echo = echo[sequence];
            echo = control.bind(tango)(echo);
            echo = echo.t;
            if(result) { _fun105227_ip = 1350; continue _fun105227 }
 1337:
            result = echo.9JbE3N;
            result = update.bind(source)(result);
            _fun105227_ip = 1361; continue _fun105227;
 1350:
            echo = echo.9NBo7e;
            result = update.bind(source)(echo);
 1361:
            backup['children'] = result;
            backup = output.bind(tango)(sizing, backup);
            options['children'] = backup;
            oscar = offset.bind(tango)(verify, options);
 1381:
            report[1] = oscar;
            oscar = _closure1_slot9;
            oscar = oscar.TIER_3;
            oscar = golf === oscar;
            if(!oscar) { _fun105227_ip = 2114; continue _fun105227 }
 1405:
            verify = _closure1_slot12;
            options = _closure1_slot13;
            golf = {};
            result = _closure1_slot11;
            sizing = _closure1_slot1;
            output = _closure1_slot2;
            offset = output[foxtrot];
            backup = sizing.bind(tango)(offset);
            offset = {};
            source = _closure1_slot0;
            update = 42;
            echo = output[update];
            sequence = source.bind(tango)(echo);
            echo = sequence.hexWithOpacity;
            control = 0;
            sequence = echo.bind(sequence)(vacuum, control);
            echo = new Array(3);
            echo[0] = sequence;
            sequence = output[update];
            config = source.bind(tango)(sequence);
            sequence = config.hexWithOpacity;
            sequence = sequence.bind(config)(vacuum, record);
            echo[1] = sequence;
            sequence = output[update];
            config = source.bind(tango)(sequence);
            sequence = config.hexWithOpacity;
            sequence = sequence.bind(config)(vacuum, control);
            echo[2] = sequence;
            offset['colors'] = echo;
            echo = {'x': 0, 'y': 0};
            offset['start'] = echo;
            echo = {'x': 1, 'y': 0};
            offset['end'] = echo;
            echo = [0, 0.5, 1];
            offset['locations'] = echo;
            sequence = kilo.gradientHighlight;
            echo = new Array(2);
            echo[0] = sequence;
            sequence = kilo.gradientHighlightTop;
            echo[1] = sequence;
            offset['style'] = echo;
            backup = result.bind(tango)(backup, offset);
            offset = new Array(6);
            offset[0] = backup;
            result = _closure1_slot11;
            foxtrot = output[foxtrot];
            backup = sizing.bind(tango)(foxtrot);
            foxtrot = {};
            echo = output[update];
            sequence = source.bind(tango)(echo);
            echo = sequence.hexWithOpacity;
            sequence = echo.bind(sequence)(vacuum, control);
            echo = new Array(3);
            echo[0] = sequence;
            sequence = output[update];
            config = source.bind(tango)(sequence);
            sequence = config.hexWithOpacity;
            sequence = sequence.bind(config)(vacuum, record);
            echo[1] = sequence;
            update = output[update];
            source = source.bind(tango)(update);
            update = source.hexWithOpacity;
            update = update.bind(source)(vacuum, control);
            echo[2] = update;
            foxtrot['colors'] = echo;
            echo = {'x': 0, 'y': 0};
            foxtrot['start'] = echo;
            echo = {'x': 1, 'y': 0};
            foxtrot['end'] = echo;
            echo = [0, 0.5, 1];
            foxtrot['locations'] = echo;
            update = kilo.gradientHighlight;
            echo = new Array(2);
            echo[0] = update;
            update = kilo.gradientHighlightBottom;
            echo[1] = update;
            foxtrot['style'] = echo;
            foxtrot = result.bind(tango)(backup, foxtrot);
            offset[1] = foxtrot;
            result = _closure1_slot11;
            foxtrot = output[yankee];
            backup = sizing.bind(tango)(foxtrot);
            foxtrot = {};
            echo = 43;
            update = output[echo];
            update = sizing.bind(tango)(update);
            foxtrot['source'] = update;
            source = kilo.sparkleStar;
            update = new Array(3);
            update[0] = source;
            source = kilo.sparkleStarPointed;
            update[1] = source;
            source = kilo.sparkleStarPointed1;
            update[2] = source;
            foxtrot['style'] = update;
            foxtrot = result.bind(tango)(backup, foxtrot);
            offset[2] = foxtrot;
            result = _closure1_slot11;
            foxtrot = output[yankee];
            backup = sizing.bind(tango)(foxtrot);
            foxtrot = {};
            update = output[echo];
            update = sizing.bind(tango)(update);
            foxtrot['source'] = update;
            source = kilo.sparkleStar;
            update = new Array(3);
            update[0] = source;
            source = kilo.sparkleStarPointed;
            update[1] = source;
            source = kilo.sparkleStarPointed2;
            update[2] = source;
            foxtrot['style'] = update;
            foxtrot = result.bind(tango)(backup, foxtrot);
            offset[3] = foxtrot;
            result = _closure1_slot11;
            foxtrot = output[yankee];
            backup = sizing.bind(tango)(foxtrot);
            foxtrot = {};
            echo = output[echo];
            echo = sizing.bind(tango)(echo);
            foxtrot['source'] = echo;
            update = kilo.sparkleStar;
            echo = new Array(3);
            echo[0] = update;
            update = kilo.sparkleStarPointed;
            echo[1] = update;
            update = kilo.sparkleStarPointed3;
            echo[2] = update;
            foxtrot['style'] = echo;
            foxtrot = result.bind(tango)(backup, foxtrot);
            offset[4] = foxtrot;
            foxtrot = _closure1_slot11;
            yankee = output[yankee];
            romeo = sizing.bind(tango)(yankee);
            yankee = {};
            backup = 44;
            backup = output[backup];
            backup = sizing.bind(tango)(backup);
            yankee['source'] = backup;
            sizing = kilo.sparkleStar;
            backup = new Array(3);
            backup[0] = sizing;
            sizing = kilo.sparkleStarElongated;
            backup[1] = sizing;
            kilo = kilo.sparkleStarElongated1;
            backup[2] = kilo;
            yankee['style'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[5] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 2114:
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    tango = golf.bind(options)(tango);
    var _closure1_slot18 = tango;
    tango = 47;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingTierCards.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildBoostingMarketingTierCards
        entity = function() { // Original name: handleCardPress
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 46;
            mike = mike[entity];
            entity = undefined;
            zulu = zulu.bind(entity)(mike);
            mike = zulu.DeprecatedLayoutAnimation;
            mike = mike.bind(zulu)();
            zulu = _closure2_slot4;
            mike = function(argFoo) {
                entity = argFoo;
                entity = !entity;
                return entity;
            };
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        var _closure2_slot6 = entity;
        entity = _closure1_slot16;
        tango = undefined;
        golf = entity.bind(tango)();
        entity = argFoo;
        mike = entity.guild;
        var _closure2_slot0 = mike;
        verify = _closure1_slot4;
        entity = verify.useRef;
        zulu = null;
        options = entity.bind(verify)(zulu);
        var _closure2_slot1 = options;
        entity = verify.useRef;
        entity = entity.bind(verify)(zulu);
        var _closure2_slot2 = entity;
        zulu = verify.useState;
        entity = false;
        offset = zulu.bind(verify)(entity);
        zulu = _closure1_slot3;
        entity = 2;
        zulu = zulu.bind(tango)(offset, entity);
        entity = 0;
        entity = zulu[entity];
        var _closure2_slot3 = entity;
        entity = 1;
        entity = zulu[entity];
        var _closure2_slot4 = entity;
        zulu = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 45;
        entity = offset[entity];
        yankee = zulu.bind(tango)(entity);
        offset = yankee.useStateFromStores;
        entity = _closure1_slot7;
        zulu = new Array(1);
        zulu[0] = entity;
        entity = function() {
            entity = _closure1_slot7;
            entity = entity.useReducedMotion;
            return entity;
        };
        entity = offset.bind(yankee)(zulu, entity);
        var _closure2_slot5 = entity;
        zulu = verify.useEffect;
        offset = mike.premiumTier;
        mike = new Array(2);
        mike[0] = offset;
        mike[1] = entity;
        entity = function() {
            mike = global;
            report = mike.window;
            tango = report.setTimeout;
            zulu = function() {
                _fun105236: for(var _fun105236_ip = 0; ; ) switch(_fun105236_ip) {
 0:
                    mike = _closure2_slot2;
                    zulu = mike.current;
                    mike = null;
                    if(!(mike != zulu)) { _fun105236_ip = 47; continue _fun105236 }
 18:
                    entity = _closure2_slot2;
                    zulu = entity.current;
                    mike = zulu.measure;
                    entity = function(argFoo) {
                        _fun105237: for(var _fun105237_ip = 0; ; ) switch(_fun105237_ip) {
 0:
                            entity = _closure2_slot1;
                            mike = entity.current;
                            entity = null;
                            if(!(entity != mike)) { _fun105237_ip = 66; continue _fun105237 }
 18:
                            entity = _closure2_slot1;
                            zulu = entity.current;
                            mike = zulu.scrollTo;
                            entity = {};
                            oscar = argFoo;
                            report = 8;
                            report = oscar - report;
                            entity['x'] = report;
                            tango = _closure2_slot5;
                            tango = !tango;
                            entity['animated'] = tango;
                            entity = mike.bind(zulu)(entity);
 66:
                            entity = undefined;
                            return entity;
                        }
                    };
                    entity = mike.bind(zulu)(entity);
 47:
                    entity = undefined;
                    return entity;
                }
            };
            mike = 400;
            mike = tango.bind(report)(zulu, mike);
            var _closure3_slot0 = mike;
            entity = function() {
                entity = global;
                zulu = entity.window;
                mike = zulu.clearTimeout;
                entity = _closure3_slot0;
                entity = mike.bind(zulu)(entity);
                entity = undefined;
                return entity;
            };
            return entity;
        };
        entity = zulu.bind(verify)(entity, mike);
        zulu = _closure1_slot11;
        mike = _closure1_slot6;
        entity = {'centerContent': true, 'contentContainerStyle': null, 'decelerationRate': 0.1, 'horizontal': true};
        verify = golf.cardsScrollerContent;
        entity['contentContainerStyle'] = verify;
        entity['ref'] = options;
        options = _closure1_slot15;
        entity['snapToOffsets'] = options;
        golf = golf.cardsScroller;
        entity['style'] = golf;
        golf = _closure1_slot14;
        oscar = golf.map;
        report = function(argFoo) {
            mike = argFoo;
            report = mike.tier;
            options = mike.features;
            mike = global;
            offset = mike.Math;
            verify = offset.min;
            zulu = _closure1_slot9;
            tango = zulu.TIER_3;
            golf = _closure2_slot0;
            yankee = golf.premiumTier;
            zulu = 1;
            zulu = yankee + zulu;
            zulu = verify.bind(offset)(tango, zulu);
            zulu = report === zulu;
            var _closure3_slot0 = zulu;
            tango = _closure1_slot11;
            zulu = _closure1_slot18;
            mike = {};
            mike['features'] = options;
            mike['guild'] = golf;
            golf = _closure2_slot3;
            mike['isExpanded'] = golf;
            oscar = _closure2_slot6;
            mike['onCardPress'] = oscar;
            entity = function(argFoo) { // Original name: ref
                _fun105240: for(var _fun105240_ip = 0; ; ) switch(_fun105240_ip) {
 0:
                    entity = _closure3_slot0;
                    if(!entity) { _fun105240_ip = 26; continue _fun105240 }
 10:
                    mike = _closure2_slot2;
                    entity = argFoo;
                    mike['current'] = entity;
 26:
                    entity = undefined;
                    return entity;
                }
            };
            mike['ref'] = entity;
            mike['tier'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        report = oscar.bind(golf)(report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();