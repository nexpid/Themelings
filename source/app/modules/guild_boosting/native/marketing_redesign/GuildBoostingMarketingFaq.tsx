// app/modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingFaq.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    offset = 1;
    golfie = oscard[offset];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.HelpdeskArticles;
    var _closure1_slot6 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignSelf': 'center', 'marginTop': 50, 'marginBottom': null, 'maxWidth': 800, 'paddingHorizontal': 16, 'width': '100%'};
    foxtra = 6;
    yankee = oscard[foxtra];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.VISIBILITY_OFFSET;
    verify['marginBottom'] = yankee;
    backup = 16;
    tangon['wrapper'] = verify;
    verify = {};
    yankee = 7;
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_SECONDARY_ALT;
    verify['backgroundColor'] = kiloes;
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.sm;
    verify['borderRadius'] = kiloes;
    verify['paddingHorizontal'] = backup;
    backup = 28;
    verify['paddingVertical'] = backup;
    tangon['content'] = verify;
    verify = {'marginBottom': 20, 'textAlign': 'center'};
    tangon['heading'] = verify;
    verify = {};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.INTERACTIVE_MUTED;
    verify['borderTopColor'] = backup;
    verify['borderTopWidth'] = offset;
    tangon['list'] = verify;
    verify = {};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.INTERACTIVE_MUTED;
    verify['borderBottomColor'] = backup;
    verify['borderBottomWidth'] = offset;
    tangon['listItem'] = verify;
    offset = 10;
    verify = {'display': 'flex', 'flexDirection': 'row', 'paddingVertical': 10};
    tangon['questionWrapper'] = verify;
    verify = {};
    verify['paddingBottom'] = foxtra;
    tangon['questionWrapperExpanded'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1, 'paddingRight': 8};
    tangon['question'] = verify;
    verify = {'flexGrow': 0, 'flexShrink': 0};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.INTERACTIVE_MUTED;
    verify['tintColor'] = yankee;
    tangon['questionIcon'] = verify;
    verify = {};
    romeon = {};
    yankee = '45deg';
    romeon['rotate'] = yankee;
    yankee = new Array(1);
    yankee[0] = romeon;
    verify['transform'] = yankee;
    tangon['questionIconExpanded'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['answer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    golfie = {};
    tangon = function() { // Original name: getQuestion
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 8;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.C4J8UF;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['getQuestion'] = tangon;
    tangon = function() { // Original name: getAnswer
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 8;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.nhkk6u;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['getAnswer'] = tangon;
    tangon = new Array(4);
    tangon[0] = golfie;
    golfie = {};
    option = function() { // Original name: getQuestion
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 8;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.ai4ym5;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['getQuestion'] = option;
    option = function() { // Original name: getAnswer
        michal = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 8;
        zuuluu = verify[entity];
        option = undefined;
        zuuluu = michal.bind(option)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.format;
        entity = verify[entity];
        entity = michal.bind(option)(entity);
        entity = entity.t;
        michal = entity.8zlqlJ;
        entity = {};
        golfie = _closure1_slot1;
        oscard = 9;
        oscard = verify[oscard];
        golfie = golfie.bind(option)(oscard);
        oscard = golfie.getArticleURL;
        report = _closure1_slot6;
        report = report.GUILD_BOOSTING_FAQ;
        report = oscard.bind(golfie)(report);
        entity['helpCenterUrl'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    golfie['getAnswer'] = option;
    tangon[1] = golfie;
    golfie = {};
    option = function() { // Original name: getQuestion
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 8;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.kMVGsL;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['getQuestion'] = option;
    option = function() { // Original name: getAnswer
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 8;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.Vz/SCQ;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['getAnswer'] = option;
    tangon[2] = golfie;
    golfie = {};
    option = function() { // Original name: getQuestion
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 8;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.kYmXWF;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['getQuestion'] = option;
    option = function() { // Original name: getAnswer
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 8;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.+OURPj;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['getAnswer'] = option;
    tangon[3] = golfie;
    var _closure1_slot10 = tangon;
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingFaq.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: GuildBoostingMarketingFaq
        entity = _closure1_slot9;
        tangon = undefined;
        yankee = entity.bind(tangon)();
        var _closure2_slot0 = yankee;
        zuuluu = _closure1_slot4;
        michal = zuuluu.useState;
        entity = null;
        zuuluu = michal.bind(zuuluu)(entity);
        michal = _closure1_slot3;
        entity = 2;
        michal = michal.bind(tangon)(zuuluu, entity);
        entity = 0;
        entity = michal[entity];
        var _closure2_slot1 = entity;
        entity = 1;
        entity = michal[entity];
        var _closure2_slot2 = entity;
        zuuluu = _closure1_slot7;
        michal = _closure1_slot5;
        entity = {};
        report = yankee.wrapper;
        entity['style'] = report;
        oscard = _closure1_slot8;
        report = {};
        golfie = yankee.content;
        report['style'] = golfie;
        kiloes = _closure1_slot0;
        sizing = _closure1_slot2;
        golfie = 10;
        golfie = sizing[golfie];
        golfie = kiloes.bind(tangon)(golfie);
        option = golfie.Text;
        golfie = {};
        romeon = yankee.heading;
        golfie['style'] = romeon;
        romeon = 'heading-xxl/bold';
        golfie['variant'] = romeon;
        romeon = 8;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.HPJ6Nj;
        romeon = foxtra.bind(backup)(romeon);
        golfie['children'] = romeon;
        option = zuuluu.bind(tangon)(option, golfie);
        golfie = new Array(2);
        golfie[0] = option;
        option = {};
        yankee = yankee.list;
        option['style'] = yankee;
        yankee = _closure1_slot10;
        offset = yankee.map;
        verify = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                romeon = argFoo;
                report = argBar;
                var _closure3_slot0 = report;
                entity = _closure2_slot1;
                golfie = entity === report;
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot5;
                michal = {};
                foxtra = _closure2_slot0;
                entity = foxtra.listItem;
                michal['style'] = entity;
                verify = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 11;
                oscard = oscard[entity];
                entity = undefined;
                oscard = verify.bind(entity)(oscard);
                verify = oscard.PressableOpacity;
                oscard = {};
                backup = foxtra.questionWrapper;
                foxtra = new Array(2);
                foxtra[0] = backup;
                backup = golfie;
                if(!golfie) { _fun00002_ip = 110; continue _fun00001 }
 100:
                kiloes = _closure2_slot0;
                backup = kiloes.questionWrapperExpanded;
 110:
                foxtra[1] = backup;
                oscard['style'] = foxtra;
                offset = function() { // Original name: onPress
                    zuuluu = _closure2_slot2;
                    michal = undefined;
                    entity = function(argFoo) {
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            tangon = _closure3_slot0;
                            zuuluu = argFoo;
                            entity = null;
                            if(!(zuuluu !== tangon)) { _fun00004_ip = 20; continue _fun00003 }
 16:
                            entity = _closure3_slot0;
 20:
                            return entity;
                        }
                    };
                    entity = zuuluu.bind(michal)(entity);
                    return entity;
                };
                oscard['onPress'] = offset;
                kiloes = _closure1_slot7;
                backup = _closure1_slot0;
                offset = _closure1_slot2;
                foxtra = 10;
                offset = offset[foxtra];
                offset = backup.bind(entity)(offset);
                backup = offset.Text;
                offset = {};
                sizing = 'interactive-normal';
                if(!golfie) { _fun00002_ip = 175; continue _fun00001 }
 169:
                sizing = 'interactive-active';
 175:
                offset['color'] = sizing;
                output = _closure2_slot0;
                sizing = output.question;
                offset['style'] = sizing;
                sizing = 'text-md/normal';
                offset['variant'] = sizing;
                sizing = romeon.getQuestion;
                sizing = sizing.bind(romeon)();
                offset['children'] = sizing;
                backup = kiloes.bind(entity)(backup, offset);
                offset = new Array(2);
                offset[0] = backup;
                sizing = _closure1_slot7;
                echoed = _closure1_slot1;
                update = _closure1_slot2;
                backup = 12;
                backup = update[backup];
                kiloes = echoed.bind(entity)(backup);
                backup = {};
                result = 13;
                result = update[result];
                result = echoed.bind(entity)(result);
                backup['source'] = result;
                result = output.questionIcon;
                output = new Array(2);
                output[0] = result;
                result = golfie;
                if(!golfie) { _fun00002_ip = 303; continue _fun00001 }
 293:
                echoed = _closure2_slot0;
                result = echoed.questionIconExpanded;
 303:
                output[1] = result;
                backup['style'] = output;
                backup = sizing.bind(entity)(kiloes, backup);
                offset[1] = backup;
                oscard['children'] = offset;
                verify = tangon.bind(entity)(verify, oscard);
                oscard = new Array(2);
                oscard[0] = verify;
                if(!golfie) { _fun00002_ip = 418; continue _fun00001 }
 342:
                offset = _closure1_slot7;
                verify = _closure1_slot0;
                option = _closure1_slot2;
                option = option[foxtra];
                option = verify.bind(entity)(option);
                verify = option.Text;
                option = {'style': null, 'color': 'interactive-active', 'variant': 'text-sm/normal'};
                yankee = _closure2_slot0;
                yankee = yankee.answer;
                option['style'] = yankee;
                yankee = romeon.getAnswer;
                yankee = yankee.bind(romeon)();
                option['children'] = yankee;
                golfie = offset.bind(entity)(verify, option);
 418:
                oscard[1] = golfie;
                michal['children'] = oscard;
                entity = tangon.bind(entity)(zuuluu, michal, report);
                return entity;
            }
        };
        verify = offset.bind(yankee)(verify);
        option['children'] = verify;
        option = zuuluu.bind(tangon)(michal, option);
        golfie[1] = option;
        report['children'] = golfie;
        report = oscard.bind(tangon)(michal, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();