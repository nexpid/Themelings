// app/modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingTopPerksCards.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    yankee = 0;
    golfie = oscard[yankee];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 50;
    verify['marginTop'] = offset;
    tangon['wrapper'] = verify;
    offset = 'center';
    verify = {'marginBottom': 20, 'textAlign': 'center'};
    tangon['heading'] = verify;
    verify = {'alignItems': 'stretch', 'flexDirection': 'row', 'paddingHorizontal': 16, 'paddingBottom': 16};
    tangon['scrollerContent'] = verify;
    verify = {'backgroundColor': null, 'borderRadius': null, 'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'marginRight': 16, 'padding': 24, 'width': 324};
    romeon = 5;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_SECONDARY_ALT;
    verify['backgroundColor'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.lg;
    verify['borderRadius'] = backup;
    tangon['card'] = verify;
    verify = {'borderRadius': null, 'height': 128, 'marginBottom': 16, 'overflow': 'hidden', 'width': 211};
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xs;
    verify['borderRadius'] = romeon;
    tangon['cardGraphic'] = verify;
    verify = {};
    verify['marginRight'] = yankee;
    tangon['cardLast'] = verify;
    verify = {'marginBottom': 4, 'textAlign': 'center'};
    tangon['cardHeading'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['cardBody'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = {};
    golfie = function() { // Original name: getHeadingCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.y4ft4O;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getHeadingCopy'] = golfie;
    golfie = function() { // Original name: getBodyCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.HTvLGh;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getBodyCopy'] = golfie;
    golfie = function(argFoo) { // Original name: getGraphic
        tangon = _closure1_slot7;
        zuuluu = _closure1_slot3;
        michal = {};
        report = argFoo;
        michal['style'] = report;
        oscard = _closure1_slot1;
        report = _closure1_slot2;
        entity = 7;
        report = report[entity];
        entity = undefined;
        report = oscard.bind(entity)(report);
        michal['source'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    tangon['getGraphic'] = golfie;
    option = new Array(3);
    option[0] = tangon;
    tangon = {};
    golfie = function() { // Original name: getHeadingCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.PbAyub;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getHeadingCopy'] = golfie;
    golfie = function() { // Original name: getBodyCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.wOYbTk;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getBodyCopy'] = golfie;
    golfie = function(argFoo) { // Original name: getGraphic
        tangon = _closure1_slot7;
        michal = _closure1_slot1;
        option = _closure1_slot2;
        entity = 8;
        entity = option[entity];
        zuuluu = undefined;
        michal = michal.bind(zuuluu)(entity);
        entity = {};
        golfie = _closure1_slot0;
        oscard = 9;
        oscard = option[oscard];
        oscard = golfie.bind(zuuluu)(oscard);
        entity['source'] = oscard;
        report = _closure1_slot6;
        report = report.useReducedMotion;
        report = !report;
        entity['autoPlay'] = report;
        report = argFoo;
        entity['style'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    tangon['getGraphic'] = golfie;
    option[1] = tangon;
    tangon = {};
    golfie = function() { // Original name: getHeadingCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity./bX4Ji;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getHeadingCopy'] = golfie;
    golfie = function() { // Original name: getBodyCopy
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 6;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.yCjoUF;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getBodyCopy'] = golfie;
    golfie = function(argFoo) { // Original name: getGraphic
        tangon = _closure1_slot7;
        zuuluu = _closure1_slot3;
        michal = {};
        report = argFoo;
        michal['style'] = report;
        oscard = _closure1_slot1;
        report = _closure1_slot2;
        entity = 10;
        report = report[entity];
        entity = undefined;
        report = oscard.bind(entity)(report);
        michal['source'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    tangon['getGraphic'] = golfie;
    option[2] = tangon;
    var _closure1_slot10 = option;
    golfie = option.map;
    tangon = function(argFoo, argBar) {
        michal = argBar;
        entity = 1;
        michal = michal + entity;
        entity = 340;
        entity = entity * michal;
        return entity;
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingTopPerksCards.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: GuildBoostingMarketingTopPerksCards
        entity = _closure1_slot9;
        tangon = undefined;
        yankee = entity.bind(tangon)();
        var _closure2_slot0 = yankee;
        zuuluu = _closure1_slot8;
        michal = _closure1_slot4;
        entity = {};
        report = yankee.wrapper;
        entity['style'] = report;
        option = _closure1_slot7;
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        report = 11;
        report = kiloes[report];
        report = backup.bind(tangon)(report);
        oscard = report.Text;
        report = {'style': null, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
        golfie = yankee.heading;
        report['style'] = golfie;
        golfie = 6;
        romeon = kiloes[golfie];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        golfie = kiloes[golfie];
        golfie = backup.bind(tangon)(golfie);
        golfie = golfie.t;
        golfie = golfie.aGdB3N;
        golfie = romeon.bind(foxtra)(golfie);
        report['children'] = golfie;
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        golfie = _closure1_slot5;
        oscard = {'centerContent': true, 'contentContainerStyle': null, 'decelerationRate': 0.1, 'horizontal': true};
        yankee = yankee.scrollerContent;
        oscard['contentContainerStyle'] = yankee;
        yankee = _closure1_slot11;
        oscard['snapToOffsets'] = yankee;
        yankee = _closure1_slot10;
        offset = yankee.map;
        verify = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                yankee = argFoo;
                report = argBar;
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot4;
                michal = {};
                golfie = _closure2_slot0;
                option = golfie.card;
                golfie = new Array(2);
                golfie[0] = option;
                option = _closure1_slot10;
                verify = option.length;
                option = 1;
                option = verify - option;
                option = report === option;
                if(!option) { _fun00002_ip = 73; continue _fun00001 }
 63:
                verify = _closure2_slot0;
                option = verify.cardLast;
 73:
                golfie[1] = option;
                michal['style'] = golfie;
                golfie = yankee.getGraphic;
                offset = _closure2_slot0;
                oscard = offset.cardGraphic;
                golfie = golfie.bind(yankee)(oscard);
                oscard = new Array(3);
                oscard[0] = golfie;
                verify = _closure1_slot7;
                option = _closure1_slot0;
                romeon = _closure1_slot2;
                golfie = 11;
                foxtra = romeon[golfie];
                entity = undefined;
                foxtra = option.bind(entity)(foxtra);
                backup = foxtra.Text;
                foxtra = {'style': null, 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
                kiloes = offset.cardHeading;
                foxtra['style'] = kiloes;
                kiloes = yankee.getHeadingCopy;
                kiloes = kiloes.bind(yankee)();
                foxtra['children'] = kiloes;
                foxtra = verify.bind(entity)(backup, foxtra);
                oscard[1] = foxtra;
                golfie = romeon[golfie];
                golfie = option.bind(entity)(golfie);
                option = golfie.Text;
                golfie = {'style': null, 'variant': 'text-sm/normal', 'color': 'header-secondary'};
                offset = offset.cardBody;
                golfie['style'] = offset;
                offset = yankee.getBodyCopy;
                offset = offset.bind(yankee)();
                golfie['children'] = offset;
                golfie = verify.bind(entity)(option, golfie);
                oscard[2] = golfie;
                michal['children'] = oscard;
                entity = tangon.bind(entity)(zuuluu, michal, report);
                return entity;
            }
        };
        verify = offset.bind(yankee)(verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();