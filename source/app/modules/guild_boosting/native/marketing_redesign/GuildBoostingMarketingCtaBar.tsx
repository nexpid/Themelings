// app/modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingCtaBar.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: useBoostCountAnimatedStyles
        oscard = argFoo;
        var _closure2_slot0 = oscard;
        verify = _closure1_slot0;
        offset = _closure1_slot2;
        michal = 12;
        michal = offset[michal];
        option = undefined;
        zuuluu = verify.bind(option)(michal);
        michal = zuuluu.useAnimatedStyle;
        entity = function() { // Original name: o
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = {};
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot2;
                michal = 13;
                zuuluu = zuuluu[michal];
                michal = undefined;
                report = tangon.bind(michal)(zuuluu);
                tangon = report.withTiming;
                michal = _closure2_slot0;
                zuuluu = 0;
                if(!michal) { _fun00002_ip = 47; continue _fun00001 }
 44:
                zuuluu = 1;
 47:
                michal = {};
                oscard = 250;
                michal['duration'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                entity['opacity'] = michal;
                return entity;
            }
        };
        report = {};
        golfie = 13;
        golfie = offset[golfie];
        golfie = verify.bind(option)(golfie);
        golfie = golfie.withTiming;
        report['withTiming'] = golfie;
        report['isVisible'] = oscard;
        entity['__closure'] = report;
        report = 6895237370657.0;
        entity['__workletHash'] = report;
        tangon = _closure1_slot16;
        entity['__initData'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot17 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AnalyticsObjects;
    var _closure1_slot8 = golfie;
    golfie = tangon.AnalyticsPages;
    var _closure1_slot9 = golfie;
    tangon = tangon.AnalyticsSections;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.FractionalPremiumStates;
    var _closure1_slot11 = tangon;
    tangon = 7;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot12 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    offset = 8;
    tangon = oscard[offset];
    tangon = foxtra.bind(entity)(tangon);
    tangon = tangon.Millis;
    tangon = tangon.SECOND;
    yankee = 10;
    tangon = yankee * tangon;
    var _closure1_slot14 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    romeon = 'center';
    verify = {'alignSelf': 'center', 'marginBottom': 24, 'maxWidth': 395, 'paddingHorizontal': 16, 'textAlign': 'center'};
    tangon['heading'] = verify;
    backup = 'relative';
    verify = {'paddingHorizontal': 16, 'paddingTop': 32, 'position': 'relative', 'zIndex': 2};
    tangon['headerContent'] = verify;
    verify = {'alignSelf': 'center', 'borderRadius': 24, 'backgroundColor': null, 'marginBottom': 10, 'height': 48, 'width': 48};
    kiloes = oscard[yankee];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = kiloes;
    tangon['guildIcon'] = verify;
    verify = {};
    kiloes = oscard[yankee];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.HEADER_PRIMARY;
    verify['color'] = kiloes;
    tangon['guildIconText'] = verify;
    verify = {'alignSelf': 'center', 'maxWidth': '50%', 'textAlign': 'center'};
    tangon['guildName'] = verify;
    verify = {};
    verify['position'] = backup;
    tangon['guildBoostCountWrapper'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'center', 'marginBottom': 16, 'paddingBottom': 16, 'paddingTop': 3, 'position': 'relative'};
    tangon['totalBoostCountWrapper'] = verify;
    verify = {'flexGrow': 0, 'flexShrink': 0, 'marginRight': 3};
    tangon['guildBoostCountIcon'] = verify;
    verify = {'flexGrow': 0, 'flexShrink': 1, 'opacity': 0.6};
    tangon['guildBoostCount'] = verify;
    verify = {'position': 'absolute', 'top': 3, 'width': '100%'};
    tangon['guildBoostCurrentUserCountWrapper'] = verify;
    verify = {};
    verify['alignSelf'] = romeon;
    tangon['guildBoostCurrentUserCount'] = verify;
    verify = {'alignSelf': 'center', 'borderRadius': null, 'maxWidth': 300, 'width': '90%'};
    romeon = oscard[yankee];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xl;
    verify['borderRadius'] = romeon;
    tangon['cta'] = verify;
    verify = {};
    romeon = 11;
    foxtra = oscard[romeon];
    backup = report.bind(entity)(foxtra);
    foxtra = backup.generateBoxShadowStyle;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    romeon = romeon.EIGHT_DP_ELEVATION_SHADOW_PARAMS;
    output = foxtra.bind(backup)(romeon);
    result = verify;
    romeon = copyDataProperties(result, output);
    tangon['ctaPrimary'] = verify;
    verify = {};
    verify['marginTop'] = yankee;
    tangon['ctaSecondary'] = verify;
    verify = {};
    verify['marginRight'] = offset;
    tangon['giftIcon'] = verify;
    verify = {};
    offset = 'visible';
    verify['overflow'] = offset;
    tangon['gradient'] = verify;
    verify = {'bottom': 4294967295, 'left': '-20%', 'position': 'absolute', 'height': 190, 'width': '150%', 'zIndex': 1};
    tangon['headerWave'] = verify;
    verify = {'height': '75%', 'left': '5%', 'opacity': 0.9, 'position': 'absolute', 'top': 0, 'width': '90%', 'zIndex': 1};
    tangon['headerStars'] = verify;
    verify = {'marginTop': 4294967283, 'marginBottom': 23};
    tangon['fpCountdownPill'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot15 = tangon;
    tangon = {};
    golfie = 'function GuildBoostingMarketingCtaBarTsx1(){const{withTiming,isVisible}=this.__closure;return{opacity:withTiming(isVisible?1:0,{duration:250})};}';
    tangon['code'] = golfie;
    var _closure1_slot16 = tangon;
    tangon = 40;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_boosting/native/marketing_redesign/GuildBoostingMarketingCtaBar.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildBoostingMarketingCtaBar
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            michal = _closure1_slot15;
            tangon = undefined;
            kiloes = michal.bind(tangon)();
            var _closure2_slot0 = kiloes;
            source = entity.fractionalPremiumInfo;
            vacuum = entity.guild;
            var _closure2_slot1 = vacuum;
            ctrled = entity.previousGuildSubscriptionSlot;
            golfie = entity.onLayout;
            oscard = _closure1_slot4;
            michal = oscard.useState;
            entity = false;
            zuuluu = michal.bind(oscard)(entity);
            michal = _closure1_slot3;
            entity = 2;
            zuuluu = michal.bind(tangon)(zuuluu, entity);
            option = 0;
            entity = zuuluu[option];
            var _closure2_slot2 = entity;
            michal = 1;
            michal = zuuluu[michal];
            var _closure2_slot3 = michal;
            status = _closure1_slot1;
            whisks = _closure1_slot2;
            michal = 14;
            michal = whisks[michal];
            michal = status.bind(tangon)(michal);
            record = michal.bind(tangon)();
            michal = 15;
            michal = whisks[michal];
            zuuluu = status.bind(tangon)(michal);
            michal = 16;
            michal = whisks[michal];
            michal = status.bind(tangon)(michal);
            michal = michal.BOOSTED_GUILD_PERKS_MODAL;
            michal = zuuluu.bind(tangon)(michal);
            michal = michal.analyticsLocations;
            var _closure2_slot4 = michal;
            equals = _closure1_slot0;
            michal = 17;
            zuuluu = whisks[michal];
            yankee = equals.bind(tangon)(zuuluu);
            verify = yankee.useStateFromStores;
            zuuluu = _closure1_slot6;
            report = new Array(1);
            report[0] = zuuluu;
            zuuluu = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            zuuluu = verify.bind(yankee)(report, zuuluu);
            michal = whisks[michal];
            yankee = equals.bind(tangon)(michal);
            verify = yankee.useStateFromStores;
            michal = _closure1_slot7;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                entity = _closure1_slot7;
                entity = entity.boostSlots;
                return entity;
            };
            michal = verify.bind(yankee)(report, michal);
            var _closure2_slot5 = michal;
            verify = oscard.useMemo;
            report = new Array(2);
            report[0] = michal;
            michal = vacuum.id;
            report[1] = michal;
            michal = function() {
                entity = global;
                zuuluu = entity.Object;
                michal = zuuluu.keys;
                entity = _closure2_slot5;
                zuuluu = michal.bind(zuuluu)(entity);
                michal = zuuluu.filter;
                entity = function(argFoo) {
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        zuuluu = _closure2_slot5;
                        entity = argFoo;
                        zuuluu = zuuluu[entity];
                        tangon = zuuluu.premiumGuildSubscription;
                        entity = null;
                        entity = entity != tangon;
                        if(!entity) { _fun00006_ip = 53; continue _fun00005 }
 29:
                        zuuluu = zuuluu.premiumGuildSubscription;
                        zuuluu = zuuluu.guildId;
                        michal = _closure2_slot1;
                        michal = michal.id;
                        entity = zuuluu === michal;
 53:
                        return entity;
                    }
                };
                entity = michal.bind(zuuluu)(entity);
                entity = entity.length;
                return entity;
            };
            variable37 = verify.bind(oscard)(michal, report);
            var _closure2_slot6 = variable37;
            report = _closure1_slot17;
            quebec = report.bind(tangon)(entity);
            michal = !entity;
            variable38 = report.bind(tangon)(michal);
            michal = 18;
            report = whisks[michal];
            verify = status.bind(tangon)(report);
            report = source.endsAt;
            michal = whisks[michal];
            michal = equals.bind(tangon)(michal);
            michal = michal.CountDownMessageTypes;
            michal = michal.LONG_TIME_LEFT;
            config = verify.bind(tangon)(report, michal);
            michal = 19;
            michal = whisks[michal];
            report = equals.bind(tangon)(michal);
            michal = report.useIsInReverseTrial;
            sequen = michal.bind(report)();
            report = oscard.useRef;
            michal = -1;
            michal = report.bind(oscard)(michal);
            var _closure2_slot7 = michal;
            report = oscard.useEffect;
            michal = new Array(2);
            michal[0] = entity;
            michal[1] = variable37;
            entity = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    tangon = _closure2_slot6;
                    zuuluu = 0;
                    zuuluu = tangon > zuuluu;
                    if(zuuluu) { _fun00008_ip = 22; continue _fun00007 }
 18:
                    zuuluu = _closure2_slot2;
 22:
                    if(!zuuluu) { _fun00008_ip = 68; continue _fun00007 }
 25:
                    zuuluu = _closure2_slot7;
                    michal = global;
                    oscard = michal.window;
                    report = oscard.setTimeout;
                    tangon = _closure1_slot14;
                    michal = function() {
                        zuuluu = _closure2_slot3;
                        entity = undefined;
                        michal = function(argFoo) {
                            entity = argFoo;
                            entity = !entity;
                            return entity;
                        };
                        michal = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    michal = report.bind(oscard)(michal, tangon);
                    zuuluu['current'] = michal;
 68:
                    entity = function() {
                        entity = global;
                        zuuluu = entity.window;
                        michal = zuuluu.clearTimeout;
                        entity = _closure2_slot7;
                        entity = entity.current;
                        entity = michal.bind(zuuluu)(entity);
                        entity = undefined;
                        return entity;
                    };
                    return entity;
                }
            };
            entity = report.bind(oscard)(entity, michal);
            entity = 20;
            entity = whisks[entity];
            michal = status.bind(tangon)(entity);
            entity = michal.isPremium;
            oscard = entity.bind(michal)(zuuluu);
            zuuluu = _closure1_slot13;
            michal = _closure1_slot5;
            entity = {};
            sizing = _closure1_slot12;
            verify = 21;
            report = whisks[verify];
            yankee = status.bind(tangon)(report);
            report = {};
            report['onLayout'] = golfie;
            golfie = 160;
            report['angle'] = golfie;
            golfie = {'x': 0.5, 'y': 0.5};
            report['angleCenter'] = golfie;
            cntext = 10;
            golfie = whisks[cntext];
            golfie = status.bind(tangon)(golfie);
            golfie = golfie.unsafe_rawColors;
            foxtra = golfie.PREMIUM_TIER_0_HEADER_GRADIENT_1;
            golfie = new Array(5);
            golfie[0] = foxtra;
            foxtra = whisks[cntext];
            foxtra = status.bind(tangon)(foxtra);
            foxtra = foxtra.unsafe_rawColors;
            foxtra = foxtra.PREMIUM_TIER_0_HEADER_GRADIENT_2;
            golfie[1] = foxtra;
            foxtra = whisks[cntext];
            foxtra = status.bind(tangon)(foxtra);
            foxtra = foxtra.unsafe_rawColors;
            foxtra = foxtra.PREMIUM_TIER_0_HEADER_GRADIENT_3;
            golfie[2] = foxtra;
            foxtra = whisks[cntext];
            foxtra = status.bind(tangon)(foxtra);
            foxtra = foxtra.unsafe_rawColors;
            foxtra = foxtra.PREMIUM_TIER_0_HEADER_GRADIENT_4;
            golfie[3] = foxtra;
            foxtra = whisks[cntext];
            foxtra = status.bind(tangon)(foxtra);
            foxtra = foxtra.unsafe_rawColors;
            foxtra = foxtra.PREMIUM_TIER_0_HEADER_GRADIENT_5;
            golfie[4] = foxtra;
            report['colors'] = golfie;
            golfie = [0, 0.3221, 0.429, 0.7606, 1];
            report['locations'] = golfie;
            golfie = true;
            report['useAngle'] = golfie;
            foxtra = kiloes.gradient;
            report['style'] = foxtra;
            verify = whisks[verify];
            result = status.bind(tangon)(verify);
            output = {};
            output['angle'] = option;
            option = {'x': 0.5, 'y': 0.5};
            output['angleCenter'] = option;
            option = ['rgba(0, 0, 0, 0.7)', 'rgba(0, 0, 0, 0)'];
            output['colors'] = option;
            option = [0.12, 0.5];
            output['locations'] = option;
            output['useAngle'] = golfie;
            golfie = kiloes.gradient;
            output['style'] = golfie;
            golfie = {};
            option = kiloes.headerContent;
            golfie['style'] = option;
            sierra = 22;
            option = whisks[sierra];
            option = equals.bind(tangon)(option);
            verify = option.Text;
            option = {'style': null, 'color': 'always-white', 'variant': 'display-sm'};
            foxtra = kiloes.heading;
            option['style'] = foxtra;
            backup = 23;
            foxtra = whisks[backup];
            foxtra = equals.bind(tangon)(foxtra);
            update = foxtra.intl;
            echoed = update.string;
            foxtra = whisks[backup];
            foxtra = equals.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.AF+Tys;
            foxtra = echoed.bind(update)(foxtra);
            option['children'] = foxtra;
            verify = sizing.bind(tangon)(verify, option);
            option = new Array(5);
            option[0] = verify;
            echoed = 24;
            verify = whisks[echoed];
            foxtra = status.bind(tangon)(verify);
            verify = {};
            update = kiloes.guildIcon;
            verify['style'] = update;
            update = kiloes.guildIconText;
            verify['textStyle'] = update;
            verify['guild'] = vacuum;
            echoed = whisks[echoed];
            echoed = equals.bind(tangon)(echoed);
            echoed = echoed.GuildIconSizes;
            echoed = echoed.LARGE;
            verify['size'] = echoed;
            verify = sizing.bind(tangon)(foxtra, verify);
            option[1] = verify;
            verify = 25;
            verify = whisks[verify];
            verify = equals.bind(tangon)(verify);
            foxtra = verify.PressableOpacity;
            verify = {};
            echoed = function() { // Original name: onPress
                entity = global;
                tangon = entity.window;
                zuuluu = tangon.clearTimeout;
                michal = _closure2_slot7;
                michal = michal.current;
                michal = zuuluu.bind(tangon)(michal);
                zuuluu = _closure2_slot3;
                entity = undefined;
                michal = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            verify['onPress'] = echoed;
            echoed = whisks[sierra];
            echoed = equals.bind(tangon)(echoed);
            update = echoed.Text;
            echoed = {'style': null, 'color': 'always-white', 'variant': 'text-md/bold'};
            papara = kiloes.guildName;
            echoed['style'] = papara;
            papara = vacuum.name;
            echoed['children'] = papara;
            update = sizing.bind(tangon)(update, echoed);
            echoed = new Array(2);
            echoed[0] = update;
            update = {};
            papara = kiloes.guildBoostCountWrapper;
            update['style'] = papara;
            target = 12;
            papara = whisks[target];
            papara = status.bind(tangon)(papara);
            limora = papara.View;
            papara = {};
            variable36 = new Array(2);
            variable36[0] = variable38;
            variable38 = kiloes.totalBoostCountWrapper;
            variable36[1] = variable38;
            papara['style'] = variable36;
            variable39 = 26;
            variable36 = whisks[variable39];
            variable38 = status.bind(tangon)(variable36);
            variable36 = {};
            variable40 = kiloes.guildBoostCountIcon;
            variable36['style'] = variable40;
            variable40 = 27;
            variable40 = whisks[variable40];
            variable40 = status.bind(tangon)(variable40);
            variable36['source'] = variable40;
            variable40 = whisks[cntext];
            variable40 = status.bind(tangon)(variable40);
            variable40 = variable40.unsafe_rawColors;
            variable40 = variable40.GUILD_BOOSTING_PINK;
            variable36['color'] = variable40;
            variable39 = whisks[variable39];
            variable39 = status.bind(tangon)(variable39);
            variable39 = variable39.Sizes;
            variable39 = variable39.SMALL;
            variable36['size'] = variable39;
            variable38 = sizing.bind(tangon)(variable38, variable36);
            variable36 = new Array(2);
            variable36[0] = variable38;
            variable38 = whisks[sierra];
            variable38 = equals.bind(tangon)(variable38);
            variable39 = variable38.Text;
            variable38 = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-sm/bold', 'color': 'always-white'};
            variable40 = kiloes.guildBoostCount;
            variable38['style'] = variable40;
            variable40 = whisks[backup];
            variable40 = equals.bind(tangon)(variable40);
            variable43 = variable40.intl;
            variable42 = variable43.format;
            variable40 = whisks[backup];
            variable40 = equals.bind(tangon)(variable40);
            variable40 = variable40.t;
            variable41 = variable40.pob/cH;
            variable40 = {};
            variable44 = vacuum.premiumSubscriberCount;
            variable40['subscriptions'] = variable44;
            variable40 = variable42.bind(variable43)(variable41, variable40);
            variable38['children'] = variable40;
            variable38 = sizing.bind(tangon)(variable39, variable38);
            variable36[1] = variable38;
            papara['children'] = variable36;
            limora = zuuluu.bind(tangon)(limora, papara);
            papara = new Array(2);
            papara[0] = limora;
            target = whisks[target];
            target = status.bind(tangon)(target);
            status = target.View;
            target = {};
            limora = new Array(2);
            limora[0] = quebec;
            quebec = kiloes.guildBoostCurrentUserCountWrapper;
            limora[1] = quebec;
            target['style'] = limora;
            sierra = whisks[sierra];
            sierra = equals.bind(tangon)(sierra);
            limora = sierra.Text;
            sierra = {'style': null, 'variant': 'text-sm/bold', 'color': 'always-white'};
            variable36 = kiloes.guildBoostCount;
            quebec = new Array(2);
            quebec[0] = variable36;
            variable36 = kiloes.guildBoostCurrentUserCount;
            quebec[1] = variable36;
            sierra['style'] = quebec;
            quebec = whisks[backup];
            quebec = equals.bind(tangon)(quebec);
            variable36 = quebec.intl;
            quebec = variable36.format;
            whisks = whisks[backup];
            whisks = equals.bind(tangon)(whisks);
            whisks = whisks.t;
            equals = whisks.xXb78v;
            whisks = {};
            whisks['numSubscriptions'] = variable37;
            whisks = quebec.bind(variable36)(equals, whisks);
            sierra['children'] = whisks;
            sierra = sizing.bind(tangon)(limora, sierra);
            target['children'] = sierra;
            target = sizing.bind(tangon)(status, target);
            papara[1] = target;
            update['children'] = papara;
            update = zuuluu.bind(tangon)(michal, update);
            echoed[1] = update;
            verify['children'] = echoed;
            verify = zuuluu.bind(tangon)(foxtra, verify);
            option[2] = verify;
            echoed = source.fractionalState;
            verify = _closure1_slot11;
            foxtra = verify.NONE;
            verify = null;
            if(!(echoed !== foxtra)) { _fun00004_ip = 1607; continue _fun00003 }
 1555:
            update = _closure1_slot12;
            echoed = _closure1_slot1;
            papara = _closure1_slot2;
            foxtra = 28;
            foxtra = papara[foxtra];
            echoed = echoed.bind(tangon)(foxtra);
            foxtra = {};
            foxtra['fpDurationText'] = config;
            foxtra['isInReverseTrial'] = sequen;
            sequen = kiloes.fpCountdownPill;
            foxtra['style'] = sequen;
            verify = update.bind(tangon)(echoed, foxtra);
 1607:
            option[3] = verify;
            update = _closure1_slot12;
            echoed = _closure1_slot1;
            foxtra = _closure1_slot2;
            verify = 29;
            verify = foxtra[verify];
            echoed = echoed.bind(tangon)(verify);
            verify = {};
            config = kiloes.cta;
            sequen = new Array(2);
            sequen[0] = config;
            config = kiloes.ctaPrimary;
            sequen[1] = config;
            verify['styles'] = sequen;
            sequen = _closure1_slot0;
            papara = 30;
            foxtra = foxtra[papara];
            sequen = sequen.bind(tangon)(foxtra);
            foxtra = sequen.isThemeDark;
            sequen = foxtra.bind(sequen)(record);
            target = _closure1_slot1;
            config = _closure1_slot2;
            foxtra = 31;
            config = config[foxtra];
            config = target.bind(tangon)(config);
            config = config.Colors;
            if(sequen) { _fun00004_ip = 1730; continue _fun00003 }
 1722:
            sequen = config.BRAND;
            _fun00004_ip = 1736; continue _fun00003;
 1730:
            sequen = config.WHITE;
 1736:
            verify['buttonColor'] = sequen;
            config = _closure1_slot0;
            sequen = _closure1_slot2;
            sequen = sequen[papara];
            config = config.bind(tangon)(sequen);
            sequen = config.isThemeDark;
            sequen = sequen.bind(config)(record);
            record = _closure1_slot1;
            config = _closure1_slot2;
            config = config[cntext];
            config = record.bind(tangon)(config);
            config = config.unsafe_rawColors;
            if(sequen) { _fun00004_ip = 1802; continue _fun00003 }
 1794:
            sequen = config.WHITE_500;
            _fun00004_ip = 1808; continue _fun00003;
 1802:
            sequen = config.BRAND_500;
 1808:
            verify['buttonTextColor'] = sequen;
            verify['guild'] = vacuum;
            verify['previousGuildSubscriptionSlot'] = ctrled;
            ctrled = _closure1_slot10;
            ctrled = ctrled.HEADER;
            verify['analyticsSection'] = ctrled;
            source = source.fractionalState;
            verify['fractionalPremiumState'] = source;
            verify = update.bind(tangon)(echoed, verify);
            option[4] = verify;
            golfie['children'] = option;
            golfie = zuuluu.bind(tangon)(michal, golfie);
            echoed = new Array(3);
            echoed[0] = golfie;
            option = _closure1_slot12;
            verify = _closure1_slot1;
            golfie = _closure1_slot2;
            update = 32;
            update = golfie[update];
            source = verify.bind(tangon)(update);
            update = {};
            ctrled = kiloes.headerStars;
            update['style'] = ctrled;
            update = option.bind(tangon)(source, update);
            echoed[1] = update;
            update = 33;
            update = golfie[update];
            source = verify.bind(tangon)(update);
            update = {};
            ctrled = kiloes.headerWave;
            update['style'] = ctrled;
            update = option.bind(tangon)(source, update);
            echoed[2] = update;
            output['children'] = echoed;
            output = zuuluu.bind(tangon)(result, output);
            report['children'] = output;
            yankee = sizing.bind(tangon)(yankee, report);
            report = new Array(2);
            report[0] = yankee;
            golfie = golfie[foxtra];
            golfie = verify.bind(tangon)(golfie);
            if(oscard) { _fun00004_ip = 2156; continue _fun00003 }
 1999:
            oscard = {};
            yankee = kiloes.cta;
            verify = new Array(2);
            verify[0] = yankee;
            yankee = kiloes.ctaSecondary;
            verify[1] = yankee;
            oscard['style'] = verify;
            result = _closure1_slot0;
            verify = _closure1_slot2;
            yankee = verify[foxtra];
            yankee = result.bind(tangon)(yankee);
            yankee = yankee.ButtonLooks;
            yankee = yankee.OUTLINED;
            oscard['look'] = yankee;
            yankee = verify[backup];
            yankee = result.bind(tangon)(yankee);
            output = yankee.intl;
            sizing = output.string;
            yankee = verify[backup];
            yankee = result.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.pj0XBA;
            yankee = sizing.bind(output)(yankee);
            oscard['text'] = yankee;
            yankee = _closure1_slot1;
            verify = verify[foxtra];
            verify = yankee.bind(tangon)(verify);
            verify = verify.Colors;
            verify = verify.GREY;
            oscard['color'] = verify;
            verify = function() { // Original name: onPress
                tangon = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 37;
                zuuluu = michal[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.pushLazy;
                oscard = _closure1_slot0;
                zuuluu = 39;
                zuuluu = michal[zuuluu];
                oscard = oscard.bind(entity)(zuuluu);
                zuuluu = 38;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                zuuluu = oscard.bind(entity)(zuuluu, michal);
                michal = {};
                oscard = {};
                option = _closure1_slot9;
                option = option.PREMIUM_GUILD_USER_MODAL;
                oscard['page'] = option;
                option = _closure1_slot10;
                option = option.HEADER;
                oscard['section'] = option;
                golfie = _closure1_slot8;
                golfie = golfie.BUTTON_CTA;
                oscard['object'] = golfie;
                michal['analyticsLocation'] = oscard;
                oscard = _closure2_slot4;
                michal['analyticsLocations'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            oscard['onPress'] = verify;
            _fun00004_ip = 2325; continue _fun00003;
 2156:
            verify = {};
            sizing = kiloes.cta;
            yankee = new Array(2);
            yankee[0] = sizing;
            kiloes = kiloes.ctaSecondary;
            yankee[1] = kiloes;
            verify['style'] = yankee;
            output = _closure1_slot0;
            yankee = _closure1_slot2;
            kiloes = yankee[foxtra];
            kiloes = output.bind(tangon)(kiloes);
            kiloes = kiloes.ButtonLooks;
            kiloes = kiloes.OUTLINED;
            verify['look'] = kiloes;
            kiloes = yankee[backup];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = yankee[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.8MYSQ0;
            backup = kiloes.bind(sizing)(backup);
            verify['text'] = backup;
            romeon = _closure1_slot1;
            yankee = yankee[foxtra];
            yankee = romeon.bind(tangon)(yankee);
            yankee = yankee.Colors;
            yankee = yankee.GREY;
            verify['color'] = yankee;
            yankee = function() { // Original name: onPress
                zuuluu = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 34;
                michal = tangon[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                michal = report.closeApplyBoostModal;
                michal = michal.bind(report)();
                michal = 35;
                michal = tangon[michal];
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openGiftModal;
                michal = {};
                report = {};
                golfie = _closure1_slot9;
                golfie = golfie.PREMIUM_GUILD_USER_MODAL;
                report['page'] = golfie;
                golfie = _closure1_slot10;
                golfie = golfie.HEADER;
                report['section'] = golfie;
                oscard = _closure1_slot8;
                oscard = oscard.BUTTON_CTA;
                report['object'] = oscard;
                michal['analyticsLocation'] = report;
                report = _closure2_slot4;
                michal['analyticsLocations'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            verify['onPress'] = yankee;
            offset = function() { // Original name: renderIcon
                tangon = _closure1_slot12;
                oscard = _closure1_slot1;
                golfie = _closure1_slot2;
                report = 26;
                entity = golfie[report];
                zuuluu = undefined;
                michal = oscard.bind(zuuluu)(entity);
                entity = {};
                report = golfie[report];
                report = oscard.bind(zuuluu)(report);
                report = report.Sizes;
                report = report.SMALL;
                entity['size'] = report;
                report = 36;
                report = golfie[report];
                report = oscard.bind(zuuluu)(report);
                entity['source'] = report;
                report = _closure2_slot0;
                report = report.giftIcon;
                entity['style'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            verify['renderIcon'] = offset;
            oscard = verify;
 2325:
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();