// app/modules/devtools/native/components/screens/DevToolsOTATestScreen.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    foxtrot = 1;
    golf = oscar[foxtrot];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    offset = tango.Fonts;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    yankee = 6;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = backup;
    verify['flex'] = foxtrot;
    tango['wrap'] = verify;
    verify = {};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    verify['padding'] = yankee;
    tango['contentContainer'] = verify;
    verify = {};
    offset = offset.CODE_BOLD;
    verify['fontFamily'] = offset;
    tango['path'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/devtools/native/components/screens/DevToolsOTATestScreen.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: DevToolsOTATestScreen
        _fun98501: for(var _fun98501_ip = 0; ; ) switch(_fun98501_ip) {
 0:
            entity = _closure1_slot8;
            tango = undefined;
            report = entity.bind(tango)();
            oscar = _closure1_slot4;
            mike = oscar.useState;
            entity = '';
            entity = mike.bind(oscar)(entity);
            golf = _closure1_slot3;
            sequence = 2;
            entity = golf.bind(tango)(entity, sequence);
            zulu = 0;
            result = entity[zulu];
            var _closure2_slot0 = result;
            mike = 1;
            entity = entity[mike];
            var _closure2_slot1 = entity;
            entity = oscar.useState;
            vacuum = null;
            entity = entity.bind(oscar)(vacuum);
            entity = golf.bind(tango)(entity, sequence);
            echo = entity[zulu];
            entity = entity[mike];
            var _closure2_slot2 = entity;
            entity = oscar.useState;
            entity = entity.bind(oscar)(vacuum);
            entity = golf.bind(tango)(entity, sequence);
            control = entity[zulu];
            entity = entity[mike];
            var _closure2_slot3 = entity;
            zulu = oscar.useEffect;
            mike = function() {
                tango = _closure1_slot1;
                report = _closure1_slot2;
                zulu = 7;
                mike = report[zulu];
                entity = undefined;
                oscar = tango.bind(entity)(mike);
                mike = oscar.getOtaRootPath;
                options = mike.bind(oscar)();
                golf = options.then;
                oscar = _closure2_slot1;
                oscar = golf.bind(options)(oscar);
                oscar = report[zulu];
                golf = tango.bind(entity)(oscar);
                oscar = golf.getManifestInfo;
                options = oscar.bind(golf)();
                golf = options.then;
                oscar = _closure2_slot2;
                oscar = golf.bind(options)(oscar);
                zulu = report[zulu];
                tango = tango.bind(entity)(zulu);
                zulu = tango.getBuildOverrideCookieContents;
                tango = zulu.bind(tango)();
                zulu = tango.then;
                mike = _closure2_slot3;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity = new Array(0);
            entity = zulu.bind(oscar)(mike, entity);
            zulu = _closure1_slot6;
            mike = _closure1_slot5;
            entity = {};
            oscar = report.wrap;
            entity['style'] = oscar;
            report = report.contentContainer;
            entity['contentContainerStyle'] = report;
            golf = _closure1_slot7;
            kilo = _closure1_slot0;
            foxtrot = _closure1_slot2;
            report = 8;
            report = foxtrot[report];
            report = kilo.bind(tango)(report);
            oscar = report.Stack;
            report = {};
            options = 16;
            report['spacing'] = options;
            verify = 9;
            options = foxtrot[verify];
            options = kilo.bind(tango)(options);
            offset = options.TableRowGroup;
            options = {};
            yankee = 'OTA Root Path (tap to copy)';
            options['title'] = yankee;
            romeo = 10;
            yankee = foxtrot[romeo];
            yankee = kilo.bind(tango)(yankee);
            sizing = yankee.TableRow;
            yankee = {};
            yankee['label'] = result;
            output = function() { // Original name: onPress
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 11;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.copy;
                mike = _closure2_slot0;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            yankee['onPress'] = output;
            yankee = zulu.bind(tango)(sizing, yankee);
            options['children'] = yankee;
            offset = zulu.bind(tango)(offset, options);
            options = new Array(4);
            options[0] = offset;
            offset = foxtrot[verify];
            offset = kilo.bind(tango)(offset);
            yankee = offset.TableRowGroup;
            offset = {};
            sizing = 'Manifest';
            offset['title'] = sizing;
            foxtrot = foxtrot[romeo];
            foxtrot = kilo.bind(tango)(foxtrot);
            kilo = foxtrot.TableRow;
            foxtrot = {};
            sizing = 'Manifest Source';
            foxtrot['label'] = sizing;
            sizing = vacuum == echo;
            output = undefined;
            if(sizing) { _fun98501_ip = 372; continue _fun98501 }
 367:
            output = echo.source;
 372:
            result = vacuum != output;
            sizing = 'Unknown';
            if(!result) { _fun98501_ip = 386; continue _fun98501 }
 383:
            sizing = output;
 386:
            foxtrot['subLabel'] = sizing;
            output = _closure1_slot6;
            update = _closure1_slot0;
            source = _closure1_slot2;
            config = 12;
            sizing = source[config];
            sizing = update.bind(tango)(sizing);
            result = sizing.WrenchIcon;
            sizing = {};
            sizing = output.bind(tango)(result, sizing);
            foxtrot['icon'] = sizing;
            kilo = zulu.bind(tango)(kilo, foxtrot);
            foxtrot = new Array(2);
            foxtrot[0] = kilo;
            kilo = source[romeo];
            kilo = update.bind(tango)(kilo);
            sizing = kilo.TableRow;
            kilo = {};
            result = 13;
            result = source[result];
            result = update.bind(tango)(result);
            update = result.PaperIcon;
            result = {};
            result = output.bind(tango)(update, result);
            kilo['icon'] = result;
            update = vacuum != echo;
            result = '{}';
            if(!update) { _fun98501_ip = 540; continue _fun98501 }
 507:
            update = global;
            source = update.JSON;
            update = source.stringify;
            echo = echo.metadata;
            if(!(vacuum == echo)) { _fun98501_ip = 533; continue _fun98501 }
 531:
            echo = {};
 533:
            result = update.bind(source)(echo, vacuum, sequence);
 540:
            kilo['label'] = result;
            kilo = output.bind(tango)(sizing, kilo);
            foxtrot[1] = kilo;
            offset['children'] = foxtrot;
            offset = golf.bind(tango)(yankee, offset);
            options[1] = offset;
            foxtrot = _closure1_slot7;
            echo = _closure1_slot0;
            result = _closure1_slot2;
            offset = result[verify];
            offset = echo.bind(tango)(offset);
            yankee = offset.TableRowGroup;
            offset = {};
            kilo = 'Build Override Cookie';
            offset['title'] = kilo;
            output = _closure1_slot6;
            kilo = result[romeo];
            kilo = echo.bind(tango)(kilo);
            sizing = kilo.TableRow;
            kilo = {};
            result = result[config];
            result = echo.bind(tango)(result);
            echo = result.WrenchIcon;
            result = {};
            result = output.bind(tango)(echo, result);
            kilo['icon'] = result;
            result = 'Is cookie set?';
            kilo['label'] = result;
            echo = vacuum == control;
            result = 'Yes';
            if(!echo) { _fun98501_ip = 684; continue _fun98501 }
 678:
            result = 'No';
 684:
            kilo['subLabel'] = result;
            sizing = output.bind(tango)(sizing, kilo);
            kilo = new Array(2);
            kilo[0] = sizing;
            sizing = vacuum != control;
            if(!sizing) { _fun98501_ip = 797; continue _fun98501 }
 710:
            echo = _closure1_slot6;
            source = _closure1_slot0;
            update = _closure1_slot2;
            output = update[romeo];
            output = source.bind(tango)(output);
            result = output.TableRow;
            output = {};
            update = update[config];
            update = source.bind(tango)(update);
            source = update.WrenchIcon;
            update = {};
            update = echo.bind(tango)(source, update);
            output['icon'] = update;
            update = global;
            source = update.JSON;
            update = source.stringify;
            update = update.bind(source)(control, vacuum, sequence);
            output['label'] = update;
            sizing = echo.bind(tango)(result, output);
 797:
            kilo[1] = sizing;
            offset['children'] = kilo;
            offset = foxtrot.bind(tango)(yankee, offset);
            options[2] = offset;
            yankee = _closure1_slot6;
            output = _closure1_slot0;
            sizing = _closure1_slot2;
            verify = sizing[verify];
            verify = output.bind(tango)(verify);
            offset = verify.TableRowGroup;
            verify = {};
            foxtrot = 'Actions';
            verify['title'] = foxtrot;
            romeo = sizing[romeo];
            romeo = output.bind(tango)(romeo);
            foxtrot = romeo.TableRow;
            romeo = {};
            kilo = 'Check for Update & Reload';
            romeo['label'] = kilo;
            kilo = 14;
            kilo = sizing[kilo];
            kilo = output.bind(tango)(kilo);
            output = kilo.DownloadIcon;
            kilo = {};
            kilo = yankee.bind(tango)(output, kilo);
            romeo['icon'] = kilo;
            kilo = _closure1_slot1;
            backup = 7;
            backup = sizing[backup];
            backup = kilo.bind(tango)(backup);
            backup = backup.checkForUpdateAndReload;
            romeo['onPress'] = backup;
            romeo = yankee.bind(tango)(foxtrot, romeo);
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[3] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();