// app/modules/devtools/native/components/screens/DevToolsOTATestScreen.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    foxtra = 1;
    golfie = oscard[foxtra];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    offset = tangon.Fonts;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 6;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = backup;
    verify['flex'] = foxtra;
    tangon['wrap'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    verify['padding'] = yankee;
    tangon['contentContainer'] = verify;
    verify = {};
    offset = offset.CODE_BOLD;
    verify['fontFamily'] = offset;
    tangon['path'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/devtools/native/components/screens/DevToolsOTATestScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: DevToolsOTATestScreen
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot8;
            tangon = undefined;
            report = entity.bind(tangon)();
            oscard = _closure1_slot4;
            michal = oscard.useState;
            entity = '';
            entity = michal.bind(oscard)(entity);
            golfie = _closure1_slot3;
            sequen = 2;
            entity = golfie.bind(tangon)(entity, sequen);
            zuuluu = 0;
            result = entity[zuuluu];
            var _closure2_slot0 = result;
            michal = 1;
            entity = entity[michal];
            var _closure2_slot1 = entity;
            entity = oscard.useState;
            vacuum = null;
            entity = entity.bind(oscard)(vacuum);
            entity = golfie.bind(tangon)(entity, sequen);
            echoed = entity[zuuluu];
            entity = entity[michal];
            var _closure2_slot2 = entity;
            entity = oscard.useState;
            entity = entity.bind(oscard)(vacuum);
            entity = golfie.bind(tangon)(entity, sequen);
            ctrled = entity[zuuluu];
            entity = entity[michal];
            var _closure2_slot3 = entity;
            zuuluu = oscard.useEffect;
            michal = function() {
                tangon = _closure1_slot1;
                report = _closure1_slot2;
                zuuluu = 7;
                michal = report[zuuluu];
                entity = undefined;
                oscard = tangon.bind(entity)(michal);
                michal = oscard.getOtaRootPath;
                option = michal.bind(oscard)();
                golfie = option.then;
                oscard = _closure2_slot1;
                oscard = golfie.bind(option)(oscard);
                oscard = report[zuuluu];
                golfie = tangon.bind(entity)(oscard);
                oscard = golfie.getManifestInfo;
                option = oscard.bind(golfie)();
                golfie = option.then;
                oscard = _closure2_slot2;
                oscard = golfie.bind(option)(oscard);
                zuuluu = report[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = tangon.getBuildOverrideCookieContents;
                tangon = zuuluu.bind(tangon)();
                zuuluu = tangon.then;
                michal = _closure2_slot3;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = new Array(0);
            entity = zuuluu.bind(oscard)(michal, entity);
            zuuluu = _closure1_slot6;
            michal = _closure1_slot5;
            entity = {};
            oscard = report.wrap;
            entity['style'] = oscard;
            report = report.contentContainer;
            entity['contentContainerStyle'] = report;
            golfie = _closure1_slot7;
            kiloes = _closure1_slot0;
            foxtra = _closure1_slot2;
            report = 8;
            report = foxtra[report];
            report = kiloes.bind(tangon)(report);
            oscard = report.Stack;
            report = {};
            option = 16;
            report['spacing'] = option;
            verify = 9;
            option = foxtra[verify];
            option = kiloes.bind(tangon)(option);
            offset = option.TableRowGroup;
            option = {};
            yankee = 'OTA Root Path (tap to copy)';
            option['title'] = yankee;
            romeon = 10;
            yankee = foxtra[romeon];
            yankee = kiloes.bind(tangon)(yankee);
            sizing = yankee.TableRow;
            yankee = {};
            yankee['label'] = result;
            output = function() { // Original name: onPress
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 11;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.copy;
                michal = _closure2_slot0;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            yankee['onPress'] = output;
            yankee = zuuluu.bind(tangon)(sizing, yankee);
            option['children'] = yankee;
            offset = zuuluu.bind(tangon)(offset, option);
            option = new Array(4);
            option[0] = offset;
            offset = foxtra[verify];
            offset = kiloes.bind(tangon)(offset);
            yankee = offset.TableRowGroup;
            offset = {};
            sizing = 'Manifest';
            offset['title'] = sizing;
            foxtra = foxtra[romeon];
            foxtra = kiloes.bind(tangon)(foxtra);
            kiloes = foxtra.TableRow;
            foxtra = {};
            sizing = 'Manifest Source';
            foxtra['label'] = sizing;
            sizing = vacuum == echoed;
            output = undefined;
            if(sizing) { _fun00002_ip = 372; continue _fun00001 }
 367:
            output = echoed.source;
 372:
            result = vacuum != output;
            sizing = 'Unknown';
            if(!result) { _fun00002_ip = 386; continue _fun00001 }
 383:
            sizing = output;
 386:
            foxtra['subLabel'] = sizing;
            output = _closure1_slot6;
            update = _closure1_slot0;
            source = _closure1_slot2;
            config = 12;
            sizing = source[config];
            sizing = update.bind(tangon)(sizing);
            result = sizing.WrenchIcon;
            sizing = {};
            sizing = output.bind(tangon)(result, sizing);
            foxtra['icon'] = sizing;
            kiloes = zuuluu.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            kiloes = source[romeon];
            kiloes = update.bind(tangon)(kiloes);
            sizing = kiloes.TableRow;
            kiloes = {};
            result = 13;
            result = source[result];
            result = update.bind(tangon)(result);
            update = result.PaperIcon;
            result = {};
            result = output.bind(tangon)(update, result);
            kiloes['icon'] = result;
            update = vacuum != echoed;
            result = '{}';
            if(!update) { _fun00002_ip = 540; continue _fun00001 }
 507:
            update = global;
            source = update.JSON;
            update = source.stringify;
            echoed = echoed.metadata;
            if(!(vacuum == echoed)) { _fun00002_ip = 533; continue _fun00001 }
 531:
            echoed = {};
 533:
            result = update.bind(source)(echoed, vacuum, sequen);
 540:
            kiloes['label'] = result;
            kiloes = output.bind(tangon)(sizing, kiloes);
            foxtra[1] = kiloes;
            offset['children'] = foxtra;
            offset = golfie.bind(tangon)(yankee, offset);
            option[1] = offset;
            foxtra = _closure1_slot7;
            echoed = _closure1_slot0;
            result = _closure1_slot2;
            offset = result[verify];
            offset = echoed.bind(tangon)(offset);
            yankee = offset.TableRowGroup;
            offset = {};
            kiloes = 'Build Override Cookie';
            offset['title'] = kiloes;
            output = _closure1_slot6;
            kiloes = result[romeon];
            kiloes = echoed.bind(tangon)(kiloes);
            sizing = kiloes.TableRow;
            kiloes = {};
            result = result[config];
            result = echoed.bind(tangon)(result);
            echoed = result.WrenchIcon;
            result = {};
            result = output.bind(tangon)(echoed, result);
            kiloes['icon'] = result;
            result = 'Is cookie set?';
            kiloes['label'] = result;
            echoed = vacuum == ctrled;
            result = 'Yes';
            if(!echoed) { _fun00002_ip = 684; continue _fun00001 }
 678:
            result = 'No';
 684:
            kiloes['subLabel'] = result;
            sizing = output.bind(tangon)(sizing, kiloes);
            kiloes = new Array(2);
            kiloes[0] = sizing;
            sizing = vacuum != ctrled;
            if(!sizing) { _fun00002_ip = 797; continue _fun00001 }
 710:
            echoed = _closure1_slot6;
            source = _closure1_slot0;
            update = _closure1_slot2;
            output = update[romeon];
            output = source.bind(tangon)(output);
            result = output.TableRow;
            output = {};
            update = update[config];
            update = source.bind(tangon)(update);
            source = update.WrenchIcon;
            update = {};
            update = echoed.bind(tangon)(source, update);
            output['icon'] = update;
            update = global;
            source = update.JSON;
            update = source.stringify;
            update = update.bind(source)(ctrled, vacuum, sequen);
            output['label'] = update;
            sizing = echoed.bind(tangon)(result, output);
 797:
            kiloes[1] = sizing;
            offset['children'] = kiloes;
            offset = foxtra.bind(tangon)(yankee, offset);
            option[2] = offset;
            yankee = _closure1_slot6;
            output = _closure1_slot0;
            sizing = _closure1_slot2;
            verify = sizing[verify];
            verify = output.bind(tangon)(verify);
            offset = verify.TableRowGroup;
            verify = {};
            foxtra = 'Actions';
            verify['title'] = foxtra;
            romeon = sizing[romeon];
            romeon = output.bind(tangon)(romeon);
            foxtra = romeon.TableRow;
            romeon = {};
            kiloes = 'Check for Update & Reload';
            romeon['label'] = kiloes;
            kiloes = 14;
            kiloes = sizing[kiloes];
            kiloes = output.bind(tangon)(kiloes);
            output = kiloes.DownloadIcon;
            kiloes = {};
            kiloes = yankee.bind(tangon)(output, kiloes);
            romeon['icon'] = kiloes;
            kiloes = _closure1_slot1;
            backup = 7;
            backup = sizing[backup];
            backup = kiloes.bind(tangon)(backup);
            backup = backup.checkForUpdateAndReload;
            romeon['onPress'] = backup;
            romeon = yankee.bind(tangon)(foxtra, romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[3] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();