// app/modules/devtools/native/components/screens/DevToolsProfilingScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: TableRowGroupReactProfiling
        oscard = _closure1_slot4;
        zuuluu = oscard.useState;
        golfie = _closure1_slot1;
        offset = _closure1_slot2;
        michal = 7;
        michal = offset[michal];
        tangon = undefined;
        golfie = golfie.bind(tangon)(michal);
        michal = golfie.reactProfilingEnabled;
        michal = michal.bind(golfie)();
        oscard = zuuluu.bind(oscard)(michal);
        zuuluu = _closure1_slot3;
        michal = 2;
        zuuluu = zuuluu.bind(tangon)(oscard, michal);
        michal = 0;
        option = zuuluu[michal];
        var _closure2_slot0 = option;
        michal = 1;
        verify = zuuluu[michal];
        oscard = _closure1_slot4;
        zuuluu = oscard.useEffect;
        michal = new Array(1);
        michal[0] = option;
        entity = function() {
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 7;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.setReactProfilingEnabled;
            michal = _closure2_slot0;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        entity = zuuluu.bind(oscard)(entity, michal);
        zuuluu = _closure1_slot6;
        oscard = _closure1_slot0;
        entity = 8;
        entity = offset[entity];
        entity = oscard.bind(tangon)(entity);
        michal = entity.TableRowGroup;
        entity = {};
        golfie = 'React Profiling Renderer';
        entity['title'] = golfie;
        golfie = _closure1_slot6;
        report = 9;
        report = offset[report];
        report = oscard.bind(tangon)(report);
        oscard = report.TableSwitchRow;
        report = {'label': 'Enable React Profiling Renderer', 'subLabel': 'Enables React.Profiler, app restart required after change.'};
        report['onValueChange'] = verify;
        report['value'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot10 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    golfie = report.bind(entity)(tangon);
    tangon = golfie.StyleSheet;
    golfie = golfie.ScrollView;
    var _closure1_slot5 = golfie;
    golfie = 3;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    yankee = golfie.Fonts;
    golfie = 4;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot6 = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.Fragment;
    var _closure1_slot7 = option;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot8 = golfie;
    golfie = 5;
    golfie = oscard[golfie];
    verify = report.bind(entity)(golfie);
    option = verify.createStyles;
    golfie = {};
    offset = {};
    backup = tangon.absoluteFillObject;
    kiloes = offset;
    tangon = copyDataProperties(kiloes, backup);
    tangon = 6;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    tangon = tangon.colors;
    romeon = tangon.BACKGROUND_PRIMARY;
    tangon = 'backgroundColor';
    offset[tangon] = romeon;
    tangon = 16;
    romeon = 'padding';
    offset[romeon] = tangon;
    golfie['container'] = offset;
    offset = {};
    yankee = yankee.CODE_BOLD;
    offset['fontFamily'] = yankee;
    golfie['monospace'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/devtools/native/components/screens/DevToolsProfilingScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: DevToolsProfilingScreen
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            entity = false;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot3;
            tangon = undefined;
            entity = 2;
            zuuluu = michal.bind(tangon)(zuuluu, entity);
            michal = 0;
            entity = zuuluu[michal];
            entity = 1;
            entity = zuuluu[entity];
            var _closure2_slot0 = entity;
            oscard = _closure1_slot4;
            report = oscard.useCallback;
            zuuluu = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 10;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.clearComponentRenderStats;
                michal = michal.bind(zuuluu)();
                zuuluu = _closure2_slot0;
                michal = true;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            entity = new Array(0);
            ctrled = report.bind(oscard)(zuuluu, entity);
            entity = _closure1_slot9;
            config = entity.bind(tangon)();
            var _closure2_slot1 = config;
            oscard = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 10;
            entity = verify[entity];
            zuuluu = oscard.bind(tangon)(entity);
            entity = zuuluu.getComponentRenderStats;
            output = entity.bind(zuuluu)();
            var _closure2_slot2 = output;
            kiloes = global;
            zuuluu = kiloes.Object;
            entity = zuuluu.keys;
            entity = entity.bind(zuuluu)(output);
            entity = entity.length;
            option = entity > michal;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot5;
            entity = {};
            report = config.container;
            entity['style'] = report;
            golfie = _closure1_slot8;
            report = 11;
            report = verify[report];
            report = oscard.bind(tangon)(report);
            oscard = report.Stack;
            report = {};
            verify = 16;
            report['spacing'] = verify;
            if(option) { _fun00002_ip = 429; continue _fun00001 }
 208:
            yankee = _closure1_slot6;
            vacuum = _closure1_slot0;
            record = _closure1_slot2;
            option = 8;
            option = record[option];
            option = vacuum.bind(tangon)(option);
            verify = option.TableRowGroup;
            option = {};
            romeon = 'Component Profiler';
            option['title'] = romeon;
            sizing = _closure1_slot6;
            romeon = 12;
            romeon = record[romeon];
            romeon = vacuum.bind(tangon)(romeon);
            foxtra = romeon.TableRow;
            romeon = {};
            result = 'No components rendered yet.';
            romeon['label'] = result;
            update = _closure1_slot8;
            source = 13;
            result = record[source];
            result = vacuum.bind(tangon)(result);
            echoed = result.Text;
            result = {'variant': 'text-xs/medium', 'color': 'text-secondary'};
            sequen = _closure1_slot6;
            source = record[source];
            source = vacuum.bind(tangon)(source);
            vacuum = source.Text;
            source = {'variant': 'text-xs/semibold', 'style': null, 'children': '<ComponentProfiler />'};
            config = config.monospace;
            source['style'] = config;
            vacuum = sequen.bind(tangon)(vacuum, source);
            source = ['Make sure you wrap your component in '];
            source[1] = vacuum;
            vacuum = ' to enable measurements.';
            source[2] = vacuum;
            result['children'] = source;
            result = update.bind(tangon)(echoed, result);
            romeon['subLabel'] = result;
            romeon = sizing.bind(tangon)(foxtra, romeon);
            option['children'] = romeon;
            verify = yankee.bind(tangon)(verify, option);
            _fun00002_ip = 592; continue _fun00001;
 429:
            romeon = _closure1_slot8;
            yankee = _closure1_slot7;
            option = {};
            result = _closure1_slot6;
            update = _closure1_slot0;
            vacuum = _closure1_slot2;
            foxtra = 8;
            foxtra = vacuum[foxtra];
            foxtra = update.bind(tangon)(foxtra);
            sizing = foxtra.TableRowGroup;
            foxtra = {};
            echoed = 'Component Profiler';
            foxtra['title'] = echoed;
            source = _closure1_slot6;
            echoed = 12;
            echoed = vacuum[echoed];
            echoed = update.bind(tangon)(echoed);
            update = echoed.TableRow;
            echoed = {'variant': 'danger', 'arrow': true, 'label': 'Reset Stats'};
            echoed['onPress'] = ctrled;
            echoed = source.bind(tangon)(update, echoed);
            foxtra['children'] = echoed;
            sizing = result.bind(tangon)(sizing, foxtra);
            foxtra = new Array(2);
            foxtra[0] = sizing;
            sizing = kiloes.Object;
            kiloes = sizing.keys;
            sizing = kiloes.bind(sizing)(output);
            kiloes = sizing.map;
            backup = function(argFoo) {
                report = argFoo;
                entity = _closure2_slot2;
                entity = entity[report];
                option = entity.mount;
                verify = entity.update;
                golfie = entity.nestedUpdate;
                tangon = _closure1_slot6;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 8;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.TableRowGroup;
                entity = {};
                oscard = global;
                oscard = oscard.HermesInternal;
                yankee = oscard.concat;
                offset = "Component Profiler Target: '";
                oscard = "'";
                oscard = yankee.bind(offset)(report, oscard);
                entity['title'] = oscard;
                oscard = {};
                oscard['stat'] = option;
                option = 'Mount';
                oscard['label'] = option;
                option = new Array(3);
                option[0] = oscard;
                oscard = {};
                oscard['stat'] = verify;
                verify = 'Update';
                oscard['label'] = verify;
                option[1] = oscard;
                oscard = {};
                oscard['stat'] = golfie;
                golfie = 'Nested Update';
                oscard['label'] = golfie;
                option[2] = oscard;
                golfie = option.map;
                oscard = function(argFoo, argBar) {
                    entity = argFoo;
                    backup = entity.stat;
                    entity = entity.label;
                    report = _closure1_slot6;
                    yankee = _closure1_slot0;
                    sizing = _closure1_slot2;
                    michal = 12;
                    michal = sizing[michal];
                    tangon = undefined;
                    michal = yankee.bind(tangon)(michal);
                    zuuluu = michal.TableRow;
                    michal = {};
                    option = _closure1_slot8;
                    golfie = _closure1_slot7;
                    oscard = {};
                    result = _closure1_slot6;
                    offset = 13;
                    verify = sizing[offset];
                    verify = yankee.bind(tangon)(verify);
                    output = verify.Text;
                    verify = {'variant': 'text-sm/medium', 'color': 'text-secondary'};
                    kiloes = _closure2_slot1;
                    foxtra = kiloes.monospace;
                    verify['style'] = foxtra;
                    source = backup.count;
                    foxtra = global;
                    echoed = foxtra.HermesInternal;
                    update = echoed.concat;
                    echoed = 'Count - ';
                    echoed = update.bind(echoed)(source);
                    verify['children'] = echoed;
                    output = result.bind(tangon)(output, verify);
                    verify = new Array(2);
                    verify[0] = output;
                    romeon = _closure1_slot6;
                    offset = sizing[offset];
                    offset = yankee.bind(tangon)(offset);
                    yankee = offset.Text;
                    offset = {'variant': 'text-sm/medium', 'color': 'text-secondary'};
                    kiloes = kiloes.monospace;
                    offset['style'] = kiloes;
                    kiloes = backup.mean;
                    foxtra = foxtra.HermesInternal;
                    backup = foxtra.concat;
                    foxtra = 'Mean - ';
                    foxtra = backup.bind(foxtra)(kiloes);
                    offset['children'] = foxtra;
                    offset = romeon.bind(tangon)(yankee, offset);
                    verify[1] = offset;
                    oscard['children'] = verify;
                    oscard = option.bind(tangon)(golfie, oscard);
                    michal['subLabel'] = oscard;
                    michal['label'] = entity;
                    entity = argBar;
                    entity = report.bind(tangon)(zuuluu, michal, entity);
                    return entity;
                };
                oscard = golfie.bind(option)(oscard);
                entity['children'] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity, report);
                return entity;
            };
            backup = kiloes.bind(sizing)(backup);
            foxtra[1] = backup;
            option['children'] = foxtra;
            verify = romeon.bind(tangon)(yankee, option);
 592:
            option = new Array(3);
            option[0] = verify;
            backup = _closure1_slot6;
            yankee = _closure1_slot0;
            romeon = _closure1_slot2;
            verify = 14;
            verify = romeon[verify];
            verify = yankee.bind(tangon)(verify);
            foxtra = verify.DevToolsProfilingUseStateFromStores;
            verify = {};
            verify = backup.bind(tangon)(foxtra, verify);
            option[1] = verify;
            verify = 15;
            verify = romeon[verify];
            yankee = yankee.bind(tangon)(verify);
            verify = yankee.isAndroid;
            yankee = verify.bind(yankee)();
            verify = null;
            if(!yankee) { _fun00002_ip = 684; continue _fun00001 }
 668:
            romeon = _closure1_slot6;
            yankee = _closure1_slot10;
            offset = {};
            verify = romeon.bind(tangon)(yankee, offset);
 684:
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();