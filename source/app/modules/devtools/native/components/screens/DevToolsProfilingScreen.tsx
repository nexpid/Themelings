// app/modules/devtools/native/components/screens/DevToolsProfilingScreen.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function() { // Original name: TableRowGroupReactProfiling
        oscar = _closure1_slot4;
        zulu = oscar.useState;
        golf = _closure1_slot1;
        offset = _closure1_slot2;
        mike = 7;
        mike = offset[mike];
        tango = undefined;
        golf = golf.bind(tango)(mike);
        mike = golf.reactProfilingEnabled;
        mike = mike.bind(golf)();
        oscar = zulu.bind(oscar)(mike);
        zulu = _closure1_slot3;
        mike = 2;
        zulu = zulu.bind(tango)(oscar, mike);
        mike = 0;
        options = zulu[mike];
        var _closure2_slot0 = options;
        mike = 1;
        verify = zulu[mike];
        oscar = _closure1_slot4;
        zulu = oscar.useEffect;
        mike = new Array(1);
        mike[0] = options;
        entity = function() {
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 7;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.setReactProfilingEnabled;
            mike = _closure2_slot0;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = zulu.bind(oscar)(entity, mike);
        zulu = _closure1_slot6;
        oscar = _closure1_slot0;
        entity = 8;
        entity = offset[entity];
        entity = oscar.bind(tango)(entity);
        mike = entity.TableRowGroup;
        entity = {};
        golf = 'React Profiling Renderer';
        entity['title'] = golf;
        golf = _closure1_slot6;
        report = 9;
        report = offset[report];
        report = oscar.bind(tango)(report);
        oscar = report.TableSwitchRow;
        report = {'label': 'Enable React Profiling Renderer', 'subLabel': 'Enables React.Profiler, app restart required after change.'};
        report['onValueChange'] = verify;
        report['value'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot10 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    golf = report.bind(entity)(tango);
    tango = golf.StyleSheet;
    golf = golf.ScrollView;
    var _closure1_slot5 = golf;
    golf = 3;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    yankee = golf.Fonts;
    golf = 4;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot6 = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.Fragment;
    var _closure1_slot7 = options;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot8 = golf;
    golf = 5;
    golf = oscar[golf];
    verify = report.bind(entity)(golf);
    options = verify.createStyles;
    golf = {};
    offset = {};
    backup = tango.absoluteFillObject;
    kilo = offset;
    tango = copyDataProperties(kilo, backup);
    tango = 6;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    tango = tango.colors;
    romeo = tango.BACKGROUND_PRIMARY;
    tango = 'backgroundColor';
    offset[tango] = romeo;
    tango = 16;
    romeo = 'padding';
    offset[romeo] = tango;
    golf['container'] = offset;
    offset = {};
    yankee = yankee.CODE_BOLD;
    offset['fontFamily'] = yankee;
    golf['monospace'] = offset;
    golf = options.bind(verify)(golf);
    var _closure1_slot9 = golf;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/devtools/native/components/screens/DevToolsProfilingScreen.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: DevToolsProfilingScreen
        _fun98517: for(var _fun98517_ip = 0; ; ) switch(_fun98517_ip) {
 0:
            zulu = _closure1_slot4;
            mike = zulu.useState;
            entity = false;
            zulu = mike.bind(zulu)(entity);
            mike = _closure1_slot3;
            tango = undefined;
            entity = 2;
            zulu = mike.bind(tango)(zulu, entity);
            mike = 0;
            entity = zulu[mike];
            entity = 1;
            entity = zulu[entity];
            var _closure2_slot0 = entity;
            oscar = _closure1_slot4;
            report = oscar.useCallback;
            zulu = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 10;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.clearComponentRenderStats;
                mike = mike.bind(zulu)();
                zulu = _closure2_slot0;
                mike = true;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            entity = new Array(0);
            control = report.bind(oscar)(zulu, entity);
            entity = _closure1_slot9;
            config = entity.bind(tango)();
            var _closure2_slot1 = config;
            oscar = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 10;
            entity = verify[entity];
            zulu = oscar.bind(tango)(entity);
            entity = zulu.getComponentRenderStats;
            output = entity.bind(zulu)();
            var _closure2_slot2 = output;
            kilo = global;
            zulu = kilo.Object;
            entity = zulu.keys;
            entity = entity.bind(zulu)(output);
            entity = entity.length;
            options = entity > mike;
            zulu = _closure1_slot6;
            mike = _closure1_slot5;
            entity = {};
            report = config.container;
            entity['style'] = report;
            golf = _closure1_slot8;
            report = 11;
            report = verify[report];
            report = oscar.bind(tango)(report);
            oscar = report.Stack;
            report = {};
            verify = 16;
            report['spacing'] = verify;
            if(options) { _fun98517_ip = 429; continue _fun98517 }
 208:
            yankee = _closure1_slot6;
            vacuum = _closure1_slot0;
            record = _closure1_slot2;
            options = 8;
            options = record[options];
            options = vacuum.bind(tango)(options);
            verify = options.TableRowGroup;
            options = {};
            romeo = 'Component Profiler';
            options['title'] = romeo;
            sizing = _closure1_slot6;
            romeo = 12;
            romeo = record[romeo];
            romeo = vacuum.bind(tango)(romeo);
            foxtrot = romeo.TableRow;
            romeo = {};
            result = 'No components rendered yet.';
            romeo['label'] = result;
            update = _closure1_slot8;
            source = 13;
            result = record[source];
            result = vacuum.bind(tango)(result);
            echo = result.Text;
            result = {'variant': 'text-xs/medium', 'color': 'text-secondary'};
            sequence = _closure1_slot6;
            source = record[source];
            source = vacuum.bind(tango)(source);
            vacuum = source.Text;
            source = {'variant': 'text-xs/semibold', 'style': null, 'children': '<ComponentProfiler />'};
            config = config.monospace;
            source['style'] = config;
            vacuum = sequence.bind(tango)(vacuum, source);
            source = ['Make sure you wrap your component in '];
            source[1] = vacuum;
            vacuum = ' to enable measurements.';
            source[2] = vacuum;
            result['children'] = source;
            result = update.bind(tango)(echo, result);
            romeo['subLabel'] = result;
            romeo = sizing.bind(tango)(foxtrot, romeo);
            options['children'] = romeo;
            verify = yankee.bind(tango)(verify, options);
            _fun98517_ip = 592; continue _fun98517;
 429:
            romeo = _closure1_slot8;
            yankee = _closure1_slot7;
            options = {};
            result = _closure1_slot6;
            update = _closure1_slot0;
            vacuum = _closure1_slot2;
            foxtrot = 8;
            foxtrot = vacuum[foxtrot];
            foxtrot = update.bind(tango)(foxtrot);
            sizing = foxtrot.TableRowGroup;
            foxtrot = {};
            echo = 'Component Profiler';
            foxtrot['title'] = echo;
            source = _closure1_slot6;
            echo = 12;
            echo = vacuum[echo];
            echo = update.bind(tango)(echo);
            update = echo.TableRow;
            echo = {'variant': 'danger', 'arrow': true, 'label': 'Reset Stats'};
            echo['onPress'] = control;
            echo = source.bind(tango)(update, echo);
            foxtrot['children'] = echo;
            sizing = result.bind(tango)(sizing, foxtrot);
            foxtrot = new Array(2);
            foxtrot[0] = sizing;
            sizing = kilo.Object;
            kilo = sizing.keys;
            sizing = kilo.bind(sizing)(output);
            kilo = sizing.map;
            backup = function(argFoo) {
                report = argFoo;
                entity = _closure2_slot2;
                entity = entity[report];
                options = entity.mount;
                verify = entity.update;
                golf = entity.nestedUpdate;
                tango = _closure1_slot6;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 8;
                entity = zulu[entity];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.TableRowGroup;
                entity = {};
                oscar = global;
                oscar = oscar.HermesInternal;
                yankee = oscar.concat;
                offset = "Component Profiler Target: '";
                oscar = "'";
                oscar = yankee.bind(offset)(report, oscar);
                entity['title'] = oscar;
                oscar = {};
                oscar['stat'] = options;
                options = 'Mount';
                oscar['label'] = options;
                options = new Array(3);
                options[0] = oscar;
                oscar = {};
                oscar['stat'] = verify;
                verify = 'Update';
                oscar['label'] = verify;
                options[1] = oscar;
                oscar = {};
                oscar['stat'] = golf;
                golf = 'Nested Update';
                oscar['label'] = golf;
                options[2] = oscar;
                golf = options.map;
                oscar = function(argFoo, argBar) {
                    entity = argFoo;
                    backup = entity.stat;
                    entity = entity.label;
                    report = _closure1_slot6;
                    yankee = _closure1_slot0;
                    sizing = _closure1_slot2;
                    mike = 12;
                    mike = sizing[mike];
                    tango = undefined;
                    mike = yankee.bind(tango)(mike);
                    zulu = mike.TableRow;
                    mike = {};
                    options = _closure1_slot8;
                    golf = _closure1_slot7;
                    oscar = {};
                    result = _closure1_slot6;
                    offset = 13;
                    verify = sizing[offset];
                    verify = yankee.bind(tango)(verify);
                    output = verify.Text;
                    verify = {'variant': 'text-sm/medium', 'color': 'text-secondary'};
                    kilo = _closure2_slot1;
                    foxtrot = kilo.monospace;
                    verify['style'] = foxtrot;
                    source = backup.count;
                    foxtrot = global;
                    echo = foxtrot.HermesInternal;
                    update = echo.concat;
                    echo = 'Count - ';
                    echo = update.bind(echo)(source);
                    verify['children'] = echo;
                    output = result.bind(tango)(output, verify);
                    verify = new Array(2);
                    verify[0] = output;
                    romeo = _closure1_slot6;
                    offset = sizing[offset];
                    offset = yankee.bind(tango)(offset);
                    yankee = offset.Text;
                    offset = {'variant': 'text-sm/medium', 'color': 'text-secondary'};
                    kilo = kilo.monospace;
                    offset['style'] = kilo;
                    kilo = backup.mean;
                    foxtrot = foxtrot.HermesInternal;
                    backup = foxtrot.concat;
                    foxtrot = 'Mean - ';
                    foxtrot = backup.bind(foxtrot)(kilo);
                    offset['children'] = foxtrot;
                    offset = romeo.bind(tango)(yankee, offset);
                    verify[1] = offset;
                    oscar['children'] = verify;
                    oscar = options.bind(tango)(golf, oscar);
                    mike['subLabel'] = oscar;
                    mike['label'] = entity;
                    entity = argBar;
                    entity = report.bind(tango)(zulu, mike, entity);
                    return entity;
                };
                oscar = golf.bind(options)(oscar);
                entity['children'] = oscar;
                entity = tango.bind(zulu)(mike, entity, report);
                return entity;
            };
            backup = kilo.bind(sizing)(backup);
            foxtrot[1] = backup;
            options['children'] = foxtrot;
            verify = romeo.bind(tango)(yankee, options);
 592:
            options = new Array(3);
            options[0] = verify;
            backup = _closure1_slot6;
            yankee = _closure1_slot0;
            romeo = _closure1_slot2;
            verify = 14;
            verify = romeo[verify];
            verify = yankee.bind(tango)(verify);
            foxtrot = verify.DevToolsProfilingUseStateFromStores;
            verify = {};
            verify = backup.bind(tango)(foxtrot, verify);
            options[1] = verify;
            verify = 15;
            verify = romeo[verify];
            yankee = yankee.bind(tango)(verify);
            verify = yankee.isAndroid;
            yankee = verify.bind(yankee)();
            verify = null;
            if(!yankee) { _fun98517_ip = 684; continue _fun98517 }
 668:
            romeo = _closure1_slot6;
            yankee = _closure1_slot10;
            offset = {};
            verify = romeo.bind(tango)(yankee, offset);
 684:
            options[2] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();