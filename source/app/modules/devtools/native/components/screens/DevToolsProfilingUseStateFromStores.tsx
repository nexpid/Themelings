// app/modules/devtools/native/components/screens/DevToolsProfilingUseStateFromStores.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argBaz;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    golfie = tangon.Fragment;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/devtools/native/components/screens/DevToolsProfilingUseStateFromStores.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: DevToolsProfilingUseStateFromStores
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot3;
            report = michal.useState;
            romeon = _closure1_slot0;
            kiloes = _closure1_slot1;
            entity = 3;
            zuuluu = kiloes[entity];
            tangon = undefined;
            oscard = romeon.bind(tangon)(zuuluu);
            zuuluu = oscard.getUseStateFromStoresDebuggingEnabled;
            zuuluu = zuuluu.bind(oscard)();
            zuuluu = report.bind(michal)(zuuluu);
            golfie = _closure1_slot2;
            oscard = 2;
            verify = golfie.bind(tangon)(zuuluu, oscard);
            report = 0;
            option = verify[report];
            var _closure2_slot0 = option;
            zuuluu = 1;
            foxtra = verify[zuuluu];
            offset = michal.useState;
            verify = kiloes[entity];
            yankee = romeon.bind(tangon)(verify);
            verify = yankee.getUseStateFromStoresExecutionWindowThresholdMs;
            verify = verify.bind(yankee)();
            verify = offset.bind(michal)(verify);
            verify = golfie.bind(tangon)(verify, oscard);
            papara = verify[report];
            var _closure2_slot1 = papara;
            verify = verify[zuuluu];
            var _closure2_slot2 = verify;
            offset = michal.useState;
            verify = kiloes[entity];
            yankee = romeon.bind(tangon)(verify);
            verify = yankee.getUseStateFromStoresExecutionTimeWarningThresholdMs;
            verify = verify.bind(yankee)();
            verify = offset.bind(michal)(verify);
            verify = golfie.bind(tangon)(verify, oscard);
            target = verify[report];
            var _closure2_slot3 = target;
            verify = verify[zuuluu];
            var _closure2_slot4 = verify;
            offset = michal.useState;
            verify = kiloes[entity];
            yankee = romeon.bind(tangon)(verify);
            verify = yankee.getUseStateFromStoresExecutionCountWarningThreshold;
            verify = verify.bind(yankee)();
            verify = offset.bind(michal)(verify);
            verify = golfie.bind(tangon)(verify, oscard);
            cntext = verify[report];
            var _closure2_slot5 = cntext;
            verify = verify[zuuluu];
            var _closure2_slot6 = verify;
            verify = michal.useState;
            entity = kiloes[entity];
            offset = romeon.bind(tangon)(entity);
            entity = offset.getUseStateFromStoresSpecificHookFilter;
            entity = entity.bind(offset)();
            entity = verify.bind(michal)(entity);
            entity = golfie.bind(tangon)(entity, oscard);
            update = entity[report];
            var _closure2_slot7 = update;
            entity = entity[zuuluu];
            var _closure2_slot8 = entity;
            report = michal.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = option;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot1;
                entity = 3;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setUseStateFromStoresDebuggingEnabled;
                michal = _closure2_slot0;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = report.bind(michal)(entity, zuuluu);
            report = michal.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = papara;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot1;
                entity = 3;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setUseStateFromStoresExecutionWindowThresholdMs;
                michal = _closure2_slot1;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = report.bind(michal)(entity, zuuluu);
            report = michal.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = target;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot1;
                entity = 3;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setUseStateFromStoresExecutionTimeWarningThresholdMs;
                michal = _closure2_slot3;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = report.bind(michal)(entity, zuuluu);
            report = michal.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = cntext;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot1;
                entity = 3;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setUseStateFromStoresExecutionCountWarningThreshold;
                michal = _closure2_slot5;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = report.bind(michal)(entity, zuuluu);
            report = michal.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = update;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot1;
                entity = 3;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setUseStateFromStoresSpecificHookFilter;
                michal = _closure2_slot7;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = report.bind(michal)(entity, zuuluu);
            entity = michal.useRef;
            oscard = null;
            vacuum = entity.bind(michal)(oscard);
            var _closure2_slot9 = vacuum;
            result = function(argFoo) { // Original name: renderLabel
                tangon = _closure1_slot4;
                michal = _closure1_slot0;
                entity = _closure1_slot1;
                oscard = 4;
                entity = entity[oscard];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.Text;
                entity = {'variant': 'text-xs/medium', 'color': 'text-secondary'};
                report = {};
                report['marginBottom'] = oscard;
                entity['style'] = report;
                report = argFoo;
                entity['children'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            zuuluu = _closure1_slot6;
            michal = _closure1_slot5;
            entity = {};
            offset = _closure1_slot4;
            golfie = 5;
            report = kiloes[golfie];
            report = romeon.bind(tangon)(report);
            verify = report.TableRowGroup;
            report = {};
            yankee = 'useStateFromStores Profiling';
            report['title'] = yankee;
            yankee = 6;
            yankee = kiloes[yankee];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.TableSwitchRow;
            yankee = {'label': 'Enable useStateFromStores profiling', 'subLabel': 'May require app restart after changes.'};
            yankee['onValueChange'] = foxtra;
            yankee['value'] = option;
            yankee = offset.bind(tangon)(romeon, yankee);
            report['children'] = yankee;
            verify = offset.bind(tangon)(verify, report);
            report = new Array(2);
            report[0] = verify;
            if(!option) { _fun00002_ip = 1356; continue _fun00001 }
 553:
            verify = _closure1_slot6;
            sequen = _closure1_slot0;
            config = _closure1_slot1;
            golfie = config[golfie];
            golfie = sequen.bind(tangon)(golfie);
            option = golfie.TableRowGroup;
            golfie = {};
            offset = 'useStateFromStores Config';
            golfie['title'] = offset;
            foxtra = _closure1_slot4;
            yankee = 7;
            offset = config[yankee];
            offset = sequen.bind(tangon)(offset);
            romeon = offset.TableRow;
            offset = {};
            kiloes = 'Execution time window threshold';
            offset['label'] = kiloes;
            kiloes = _closure1_slot5;
            backup = {};
            sizing = 'Time window to wait for before reporting violations.';
            output = result.bind(tangon)(sizing);
            sizing = new Array(2);
            sizing[0] = output;
            output = 8;
            source = config[output];
            source = sequen.bind(tangon)(source);
            ctrled = source.TextField;
            source = {'size': 'sm', 'defaultValue': null, 'onChange': null, 'keyboardType': 'numeric', 'leadingIcon': null, 'trailingText': 'ms'};
            record = papara.toString;
            record = record.bind(papara)();
            source['defaultValue'] = record;
            record = function(argFoo) { // Original name: onChange
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = global;
                    tangon = michal.Number;
                    entity = undefined;
                    zuuluu = argFoo;
                    zuuluu = tangon.bind(entity)(zuuluu);
                    michal = michal.isNaN;
                    michal = michal.bind(entity)(zuuluu);
                    if(michal) { _fun00004_ip = 56; continue _fun00003 }
 32:
                    michal = 1000;
                    if(!(zuuluu > michal)) { _fun00004_ip = 56; continue _fun00003 }
 42:
                    michal = _closure2_slot2;
                    michal = michal.bind(entity)(zuuluu);
                    _fun00004_ip = 91; continue _fun00003;
 56:
                    michal = _closure2_slot9;
                    tangon = michal.current;
                    michal = null;
                    if(!(michal != tangon)) { _fun00004_ip = 91; continue _fun00003 }
 74:
                    zuuluu = tangon.setText;
                    michal = '60000';
                    michal = zuuluu.bind(tangon)(michal);
 91:
                    return entity;
                }
            };
            source['onChange'] = record;
            record = 9;
            papara = config[record];
            papara = sequen.bind(tangon)(papara);
            papara = papara.TimerIcon;
            source['leadingIcon'] = papara;
            source['ref'] = vacuum;
            source = foxtra.bind(tangon)(ctrled, source);
            sizing[1] = source;
            backup['children'] = sizing;
            backup = verify.bind(tangon)(kiloes, backup);
            offset['subLabel'] = backup;
            romeon = foxtra.bind(tangon)(romeon, offset);
            offset = new Array(4);
            offset[0] = romeon;
            romeon = config[yankee];
            romeon = sequen.bind(tangon)(romeon);
            backup = romeon.TableRow;
            romeon = {};
            sizing = 'Cumulative execution time warning threshold';
            romeon['label'] = sizing;
            sizing = {};
            source = 'Total execution time limit for hooks before reporting violations.';
            ctrled = result.bind(tangon)(source);
            source = new Array(2);
            source[0] = ctrled;
            ctrled = config[output];
            ctrled = sequen.bind(tangon)(ctrled);
            vacuum = ctrled.TextField;
            ctrled = {'size': 'sm', 'defaultValue': null, 'keyboardType': 'numeric', 'leadingIcon': null, 'trailingText': 'ms'};
            papara = target.toString;
            papara = papara.bind(target)();
            ctrled['defaultValue'] = papara;
            record = config[record];
            record = sequen.bind(tangon)(record);
            record = record.TimerIcon;
            ctrled['leadingIcon'] = record;
            record = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot4;
                entity = global;
                tangon = entity.Number;
                entity = undefined;
                michal = argFoo;
                michal = tangon.bind(entity)(michal);
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            ctrled['onChange'] = record;
            ctrled = foxtra.bind(tangon)(vacuum, ctrled);
            source[1] = ctrled;
            sizing['children'] = source;
            sizing = verify.bind(tangon)(kiloes, sizing);
            romeon['subLabel'] = sizing;
            romeon = foxtra.bind(tangon)(backup, romeon);
            offset[1] = romeon;
            romeon = config[yankee];
            romeon = sequen.bind(tangon)(romeon);
            backup = romeon.TableRow;
            romeon = {};
            sizing = 'Cumulative execution count warning threshold';
            romeon['label'] = sizing;
            sizing = {};
            source = 'Execution counts limit for hooks before reporting violations.';
            ctrled = result.bind(tangon)(source);
            source = new Array(2);
            source[0] = ctrled;
            ctrled = config[output];
            ctrled = sequen.bind(tangon)(ctrled);
            vacuum = ctrled.TextField;
            ctrled = {'size': 'sm', 'defaultValue': null, 'keyboardType': 'numeric', 'leadingIcon': null, 'trailingText': 'times'};
            record = cntext.toString;
            record = record.bind(cntext)();
            ctrled['defaultValue'] = record;
            record = 10;
            record = config[record];
            record = sequen.bind(tangon)(record);
            record = record.AnalyticsIcon;
            ctrled['leadingIcon'] = record;
            record = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot6;
                entity = global;
                tangon = entity.Number;
                entity = undefined;
                michal = argFoo;
                michal = tangon.bind(entity)(michal);
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            ctrled['onChange'] = record;
            ctrled = foxtra.bind(tangon)(vacuum, ctrled);
            source[1] = ctrled;
            sizing['children'] = source;
            sizing = verify.bind(tangon)(kiloes, sizing);
            romeon['subLabel'] = sizing;
            romeon = foxtra.bind(tangon)(backup, romeon);
            offset[2] = romeon;
            yankee = config[yankee];
            yankee = sequen.bind(tangon)(yankee);
            romeon = yankee.TableRow;
            yankee = {};
            backup = 'Track specific hook';
            yankee['label'] = backup;
            backup = {};
            sizing = 'Include a specific hook in the profiling regardless of limits.';
            result = result.bind(tangon)(sizing);
            sizing = new Array(2);
            sizing[0] = result;
            output = config[output];
            output = sequen.bind(tangon)(output);
            result = output.TextField;
            output = {'size': 'sm', 'keyboardType': 'email-address', 'autoCapitalize': 'none', 'autoCorrect': false, 'defaultValue': null, 'placeholder': 'hookName'};
            output['defaultValue'] = update;
            update = 11;
            update = config[update];
            update = sequen.bind(tangon)(update);
            update = update.LettersIcon;
            output['leadingIcon'] = update;
            update = 12;
            update = config[update];
            update = sequen.bind(tangon)(update);
            update = update.TrashIcon;
            output['trailingIcon'] = update;
            update = {};
            source = 13;
            ctrled = config[source];
            ctrled = sequen.bind(tangon)(ctrled);
            vacuum = ctrled.intl;
            ctrled = vacuum.string;
            source = config[source];
            source = sequen.bind(tangon)(source);
            source = source.t;
            source = source.VkKicX;
            source = ctrled.bind(vacuum)(source);
            update['accessibilityLabel'] = source;
            source = function() { // Original name: onPress
                zuuluu = _closure2_slot8;
                entity = undefined;
                michal = '';
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            update['onPress'] = source;
            output['trailingPressableProps'] = update;
            echoed = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot8;
                entity = undefined;
                michal = argFoo;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            output['onChange'] = echoed;
            output = foxtra.bind(tangon)(result, output);
            sizing[1] = output;
            backup['children'] = sizing;
            backup = verify.bind(tangon)(kiloes, backup);
            yankee['subLabel'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[3] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 1356:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['DevToolsProfilingUseStateFromStores'] = michal;
    return entity;
})();