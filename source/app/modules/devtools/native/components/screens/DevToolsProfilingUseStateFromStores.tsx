// app/modules/devtools/native/components/screens/DevToolsProfilingUseStateFromStores.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argBaz;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot2 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 14;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/devtools/native/components/screens/DevToolsProfilingUseStateFromStores.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: DevToolsProfilingUseStateFromStores
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = _closure1_slot3;
            report = mike.useState;
            romeo = _closure1_slot0;
            kilo = _closure1_slot1;
            entity = 3;
            zulu = kilo[entity];
            tango = undefined;
            oscar = romeo.bind(tango)(zulu);
            zulu = oscar.getUseStateFromStoresDebuggingEnabled;
            zulu = zulu.bind(oscar)();
            zulu = report.bind(mike)(zulu);
            golf = _closure1_slot2;
            oscar = 2;
            verify = golf.bind(tango)(zulu, oscar);
            report = 0;
            options = verify[report];
            var _closure2_slot0 = options;
            zulu = 1;
            foxtrot = verify[zulu];
            offset = mike.useState;
            verify = kilo[entity];
            yankee = romeo.bind(tango)(verify);
            verify = yankee.getUseStateFromStoresExecutionWindowThresholdMs;
            verify = verify.bind(yankee)();
            verify = offset.bind(mike)(verify);
            verify = golf.bind(tango)(verify, oscar);
            papa = verify[report];
            var _closure2_slot1 = papa;
            verify = verify[zulu];
            var _closure2_slot2 = verify;
            offset = mike.useState;
            verify = kilo[entity];
            yankee = romeo.bind(tango)(verify);
            verify = yankee.getUseStateFromStoresExecutionTimeWarningThresholdMs;
            verify = verify.bind(yankee)();
            verify = offset.bind(mike)(verify);
            verify = golf.bind(tango)(verify, oscar);
            target = verify[report];
            var _closure2_slot3 = target;
            verify = verify[zulu];
            var _closure2_slot4 = verify;
            offset = mike.useState;
            verify = kilo[entity];
            yankee = romeo.bind(tango)(verify);
            verify = yankee.getUseStateFromStoresExecutionCountWarningThreshold;
            verify = verify.bind(yankee)();
            verify = offset.bind(mike)(verify);
            verify = golf.bind(tango)(verify, oscar);
            context = verify[report];
            var _closure2_slot5 = context;
            verify = verify[zulu];
            var _closure2_slot6 = verify;
            verify = mike.useState;
            entity = kilo[entity];
            offset = romeo.bind(tango)(entity);
            entity = offset.getUseStateFromStoresSpecificHookFilter;
            entity = entity.bind(offset)();
            entity = verify.bind(mike)(entity);
            entity = golf.bind(tango)(entity, oscar);
            update = entity[report];
            var _closure2_slot7 = update;
            entity = entity[zulu];
            var _closure2_slot8 = entity;
            report = mike.useEffect;
            zulu = new Array(1);
            zulu[0] = options;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot1;
                entity = 3;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setUseStateFromStoresDebuggingEnabled;
                mike = _closure2_slot0;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity = report.bind(mike)(entity, zulu);
            report = mike.useEffect;
            zulu = new Array(1);
            zulu[0] = papa;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot1;
                entity = 3;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setUseStateFromStoresExecutionWindowThresholdMs;
                mike = _closure2_slot1;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity = report.bind(mike)(entity, zulu);
            report = mike.useEffect;
            zulu = new Array(1);
            zulu[0] = target;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot1;
                entity = 3;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setUseStateFromStoresExecutionTimeWarningThresholdMs;
                mike = _closure2_slot3;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity = report.bind(mike)(entity, zulu);
            report = mike.useEffect;
            zulu = new Array(1);
            zulu[0] = context;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot1;
                entity = 3;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setUseStateFromStoresExecutionCountWarningThreshold;
                mike = _closure2_slot5;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity = report.bind(mike)(entity, zulu);
            report = mike.useEffect;
            zulu = new Array(1);
            zulu[0] = update;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot1;
                entity = 3;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setUseStateFromStoresSpecificHookFilter;
                mike = _closure2_slot7;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity = report.bind(mike)(entity, zulu);
            entity = mike.useRef;
            oscar = null;
            vacuum = entity.bind(mike)(oscar);
            var _closure2_slot9 = vacuum;
            result = function(argFoo) { // Original name: renderLabel
                tango = _closure1_slot4;
                mike = _closure1_slot0;
                entity = _closure1_slot1;
                oscar = 4;
                entity = entity[oscar];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.Text;
                entity = {'variant': 'text-xs/medium', 'color': 'text-secondary'};
                report = {};
                report['marginBottom'] = oscar;
                entity['style'] = report;
                report = argFoo;
                entity['children'] = report;
                entity = tango.bind(zulu)(mike, entity);
                return entity;
            };
            zulu = _closure1_slot6;
            mike = _closure1_slot5;
            entity = {};
            offset = _closure1_slot4;
            golf = 5;
            report = kilo[golf];
            report = romeo.bind(tango)(report);
            verify = report.TableRowGroup;
            report = {};
            yankee = 'useStateFromStores Profiling';
            report['title'] = yankee;
            yankee = 6;
            yankee = kilo[yankee];
            yankee = romeo.bind(tango)(yankee);
            romeo = yankee.TableSwitchRow;
            yankee = {'label': 'Enable useStateFromStores profiling', 'subLabel': 'May require app restart after changes.'};
            yankee['onValueChange'] = foxtrot;
            yankee['value'] = options;
            yankee = offset.bind(tango)(romeo, yankee);
            report['children'] = yankee;
            verify = offset.bind(tango)(verify, report);
            report = new Array(2);
            report[0] = verify;
            if(!options) { _fun00002_ip = 1352; continue _fun00001 }
 553:
            verify = _closure1_slot6;
            sequence = _closure1_slot0;
            config = _closure1_slot1;
            golf = config[golf];
            golf = sequence.bind(tango)(golf);
            options = golf.TableRowGroup;
            golf = {};
            offset = 'useStateFromStores Config';
            golf['title'] = offset;
            foxtrot = _closure1_slot4;
            yankee = 7;
            offset = config[yankee];
            offset = sequence.bind(tango)(offset);
            romeo = offset.TableRow;
            offset = {};
            kilo = 'Execution time window threshold';
            offset['label'] = kilo;
            kilo = _closure1_slot5;
            backup = {};
            sizing = 'Time window to wait for before reporting violations.';
            output = result.bind(tango)(sizing);
            sizing = new Array(2);
            sizing[0] = output;
            output = 8;
            source = config[output];
            source = sequence.bind(tango)(source);
            control = source.TextField;
            source = {'size': 'sm', 'defaultValue': null, 'onChange': null, 'keyboardType': 'numeric', 'leadingIcon': null, 'trailingText': 'ms'};
            record = papa.toString;
            record = record.bind(papa)();
            source['defaultValue'] = record;
            record = function(argFoo) { // Original name: onChange
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    mike = global;
                    tango = mike.Number;
                    entity = undefined;
                    zulu = argFoo;
                    zulu = tango.bind(entity)(zulu);
                    mike = mike.isNaN;
                    mike = mike.bind(entity)(zulu);
                    if(mike) { _fun00004_ip = 56; continue _fun00003 }
 32:
                    mike = 1000;
                    if(!(zulu > mike)) { _fun00004_ip = 56; continue _fun00003 }
 42:
                    mike = _closure2_slot2;
                    mike = mike.bind(entity)(zulu);
                    _fun00004_ip = 91; continue _fun00003;
 56:
                    mike = _closure2_slot9;
                    tango = mike.current;
                    mike = null;
                    if(!(mike != tango)) { _fun00004_ip = 91; continue _fun00003 }
 74:
                    zulu = tango.setText;
                    mike = '60000';
                    mike = zulu.bind(tango)(mike);
 91:
                    return entity;
                }
            };
            source['onChange'] = record;
            record = 9;
            papa = config[record];
            papa = sequence.bind(tango)(papa);
            papa = papa.TimerIcon;
            source['leadingIcon'] = papa;
            source['ref'] = vacuum;
            source = foxtrot.bind(tango)(control, source);
            sizing[1] = source;
            backup['children'] = sizing;
            backup = verify.bind(tango)(kilo, backup);
            offset['subLabel'] = backup;
            romeo = foxtrot.bind(tango)(romeo, offset);
            offset = new Array(4);
            offset[0] = romeo;
            romeo = config[yankee];
            romeo = sequence.bind(tango)(romeo);
            backup = romeo.TableRow;
            romeo = {};
            sizing = 'Cumulative execution time warning threshold';
            romeo['label'] = sizing;
            sizing = {};
            source = 'Total execution time limit for hooks before reporting violations.';
            control = result.bind(tango)(source);
            source = new Array(2);
            source[0] = control;
            control = config[output];
            control = sequence.bind(tango)(control);
            vacuum = control.TextField;
            control = {'size': 'sm', 'defaultValue': null, 'keyboardType': 'numeric', 'leadingIcon': null, 'trailingText': 'ms'};
            papa = target.toString;
            papa = papa.bind(target)();
            control['defaultValue'] = papa;
            record = config[record];
            record = sequence.bind(tango)(record);
            record = record.TimerIcon;
            control['leadingIcon'] = record;
            record = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot4;
                entity = global;
                tango = entity.Number;
                entity = undefined;
                mike = argFoo;
                mike = tango.bind(entity)(mike);
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            control['onChange'] = record;
            control = foxtrot.bind(tango)(vacuum, control);
            source[1] = control;
            sizing['children'] = source;
            sizing = verify.bind(tango)(kilo, sizing);
            romeo['subLabel'] = sizing;
            romeo = foxtrot.bind(tango)(backup, romeo);
            offset[1] = romeo;
            romeo = config[yankee];
            romeo = sequence.bind(tango)(romeo);
            backup = romeo.TableRow;
            romeo = {};
            sizing = 'Cumulative execution count warning threshold';
            romeo['label'] = sizing;
            sizing = {};
            source = 'Execution counts limit for hooks before reporting violations.';
            control = result.bind(tango)(source);
            source = new Array(2);
            source[0] = control;
            control = config[output];
            control = sequence.bind(tango)(control);
            vacuum = control.TextField;
            control = {'size': 'sm', 'defaultValue': null, 'keyboardType': 'numeric', 'leadingIcon': null, 'trailingText': 'times'};
            record = context.toString;
            record = record.bind(context)();
            control['defaultValue'] = record;
            record = 10;
            record = config[record];
            record = sequence.bind(tango)(record);
            record = record.AnalyticsIcon;
            control['leadingIcon'] = record;
            record = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot6;
                entity = global;
                tango = entity.Number;
                entity = undefined;
                mike = argFoo;
                mike = tango.bind(entity)(mike);
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            control['onChange'] = record;
            control = foxtrot.bind(tango)(vacuum, control);
            source[1] = control;
            sizing['children'] = source;
            sizing = verify.bind(tango)(kilo, sizing);
            romeo['subLabel'] = sizing;
            romeo = foxtrot.bind(tango)(backup, romeo);
            offset[2] = romeo;
            yankee = config[yankee];
            yankee = sequence.bind(tango)(yankee);
            romeo = yankee.TableRow;
            yankee = {};
            backup = 'Track specific hook';
            yankee['label'] = backup;
            backup = {};
            sizing = 'Include a specific hook in the profiling regardless of limits.';
            result = result.bind(tango)(sizing);
            sizing = new Array(2);
            sizing[0] = result;
            output = config[output];
            output = sequence.bind(tango)(output);
            result = output.TextField;
            output = {'size': 'sm', 'keyboardType': 'email-address', 'autoCapitalize': 'none', 'autoCorrect': false, 'defaultValue': null, 'placeholder': 'hookName'};
            output['defaultValue'] = update;
            update = 11;
            update = config[update];
            update = sequence.bind(tango)(update);
            update = update.LettersIcon;
            output['leadingIcon'] = update;
            update = 12;
            update = config[update];
            update = sequence.bind(tango)(update);
            update = update.TrashIcon;
            output['trailingIcon'] = update;
            update = {};
            source = 13;
            control = config[source];
            control = sequence.bind(tango)(control);
            vacuum = control.intl;
            control = vacuum.string;
            source = config[source];
            source = sequence.bind(tango)(source);
            source = source.t;
            source = source.VkKicX;
            source = control.bind(vacuum)(source);
            update['accessibilityLabel'] = source;
            source = function() { // Original name: onPress
                zulu = _closure2_slot8;
                entity = undefined;
                mike = '';
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            update['onPress'] = source;
            output['trailingPressableProps'] = update;
            echo = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot8;
                entity = undefined;
                mike = argFoo;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            output['onChange'] = echo;
            output = foxtrot.bind(tango)(result, output);
            sizing[1] = output;
            backup['children'] = sizing;
            backup = verify.bind(tango)(kilo, backup);
            yankee['subLabel'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[3] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 1352:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['DevToolsProfilingUseStateFromStores'] = mike;
    return entity;
})();