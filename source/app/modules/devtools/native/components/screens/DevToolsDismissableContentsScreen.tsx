// app/modules/devtools/native/components/screens/DevToolsDismissableContentsScreen.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    foxtrot = 1;
    golf = oscar[foxtrot];
    tango = argCorge;
    options = tango.bind(entity)(golf);
    var _closure1_slot4 = options;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot8 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot9 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot10 = tango;
    tango = 6;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    golf = verify.createStyles;
    tango = {};
    offset = {};
    yankee = 7;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['paddingTop'] = backup;
    offset['flex'] = foxtrot;
    tango['container'] = offset;
    offset = {};
    offset['flex'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['paddingHorizontal'] = foxtrot;
    tango['list'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['paddingHorizontal'] = foxtrot;
    tango['search'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['paddingHorizontal'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['paddingBottom'] = foxtrot;
    tango['section'] = offset;
    offset = {'backgroundColor': null, 'verticalAlign': 'middle', 'flexDirection': 'row', 'alignItems': 'center', 'flex': 1};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = foxtrot;
    tango['sectionHeader'] = offset;
    offset = {'marginVertical': null, 'justifyContent': 'center', 'alignItems': 'center', 'flex': 1};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_32;
    offset['marginVertical'] = yankee;
    tango['emptyState'] = offset;
    tango = golf.bind(verify)(tango);
    var _closure1_slot11 = tango;
    golf = options.memo;
    tango = function(argFoo) {
        _fun98445: for(var _fun98445_ip = 0; ; ) switch(_fun98445_ip) {
 0:
            entity = argFoo;
            golf = entity.contents;
            report = entity.content;
            verify = entity.start;
            options = entity.end;
            zulu = _closure1_slot0;
            offset = _closure1_slot2;
            mike = 8;
            mike = offset[mike];
            tango = undefined;
            mike = zulu.bind(tango)(mike);
            mike = mike.DismissibleContent;
            oscar = mike[report];
            mike = 9;
            mike = offset[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.toggleDismissibleContentDismissState;
            offset = null;
            if(!(offset == golf)) { _fun98445_ip = 111; continue _fun98445 }
 83:
            offset = global;
            offset = offset.Uint8Array;
            yankee = offset.prototype;
            yankee = Object.create(yankee, {constructor: {value: offset}});
            backup = yankee;
            offset = new backup[offset](foxtrot);
            golf = offset instanceof Object ? offset : yankee;
 111:
            mike = mike.bind(zulu)(oscar, golf);
            oscar = mike.isDismissed;
            golf = mike.handleToggleDismissState;
            zulu = _closure1_slot8;
            mike = _closure1_slot0;
            offset = _closure1_slot2;
            entity = 10;
            entity = offset[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.TableSwitchRow;
            entity = {};
            entity['start'] = verify;
            entity['end'] = options;
            entity['onValueChange'] = golf;
            entity['value'] = oscar;
            entity['label'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    tango = golf.bind(options)(tango);
    var _closure1_slot12 = tango;
    tango = 29;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/devtools/native/components/screens/DevToolsDismissableContentsScreen.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: DevToolsDismissableContentsScreen
        _fun98446: for(var _fun98446_ip = 0; ; ) switch(_fun98446_ip) {
 0:
            entity = _closure1_slot11;
            tango = undefined;
            update = entity.bind(tango)();
            var _closure2_slot0 = update;
            zulu = _closure1_slot1;
            control = _closure1_slot2;
            entity = 11;
            entity = control[entity];
            entity = zulu.bind(tango)(entity);
            yankee = entity.bind(tango)();
            entity = 12;
            entity = control[entity];
            entity = zulu.bind(tango)(entity);
            echo = entity.bind(tango)();
            entity = 13;
            entity = control[entity];
            entity = zulu.bind(tango)(entity);
            romeo = entity.bind(tango)();
            report = _closure1_slot4;
            golf = report.useCallback;
            mike = function(argFoo) {
                _fun98447: for(var _fun98447_ip = 0; ; ) switch(_fun98447_ip) {
 0:
                    romeo = argFoo;
                    mike = new Array(0);
                    zulu = _closure1_slot0;
                    tango = _closure1_slot2;
                    entity = 8;
                    entity = tango[entity];
                    oscar = undefined;
                    entity = zulu.bind(oscar)(entity);
                    offset = entity.DismissibleContent;
                    tango = global;
                    zulu = 14;
                    entity = '';
                    entity = entity === romeo;
                    for(report in offset)
 59:
                    {
 68:
                        backup = report;
                        foxtrot = entity;
                        if(foxtrot) { _fun98447_ip = 120; continue _fun98447 }
 77:
                        sizing = _closure1_slot1;
                        kilo = _closure1_slot2;
                        kilo = kilo[zulu];
                        output = sizing.bind(oscar)(kilo);
                        kilo = romeo.toLowerCase;
                        sizing = kilo.bind(romeo)();
                        kilo = backup.toLowerCase;
                        kilo = kilo.bind(backup)();
                        foxtrot = output.bind(oscar)(sizing, kilo);
 120:
                        if(!foxtrot) { _fun98447_ip = 145; continue _fun98447 }
 123:
                        sizing = tango.isNaN;
                        kilo = tango.Number;
                        kilo = kilo.bind(oscar)(backup);
                        foxtrot = sizing.bind(oscar)(kilo);
 145:
                        if(!foxtrot) { _fun98447_ip = 59; continue _fun98447 }
 148:
                        foxtrot = mike.push;
                        foxtrot = foxtrot.bind(mike)(backup);
                        _fun98447_ip = 59; continue _fun98447;
                    }
 160:
                    zulu = mike.sort;
                    entity = function(argFoo, argBar) {
                        zulu = argFoo;
                        mike = zulu.localeCompare;
                        entity = argBar;
                        entity = mike.bind(zulu)(entity);
                        return entity;
                    };
                    entity = zulu.bind(mike)(entity);
                    entity = {};
                    entity['dismissableContent'] = mike;
                    zulu = mike.length;
                    mike = new Array(1);
                    mike[0] = zulu;
                    entity['sections'] = mike;
                    return entity;
                }
            };
            entity = new Array(0);
            entity = golf.bind(report)(mike, entity);
            var _closure2_slot1 = entity;
            mike = report.useState;
            entity = function() {
                zulu = _closure2_slot1;
                mike = undefined;
                entity = '';
                entity = zulu.bind(mike)(entity);
                return entity;
            };
            golf = mike.bind(report)(entity);
            mike = _closure1_slot3;
            entity = 2;
            mike = mike.bind(tango)(golf, entity);
            options = 0;
            entity = mike[options];
            kilo = entity.sections;
            golf = entity.dismissableContent;
            var _closure2_slot2 = golf;
            entity = 1;
            entity = mike[entity];
            var _closure2_slot3 = entity;
            backup = _closure1_slot0;
            mike = 15;
            entity = control[mike];
            foxtrot = backup.bind(tango)(entity);
            offset = foxtrot.useStateFromStores;
            entity = _closure1_slot7;
            verify = new Array(1);
            verify[0] = entity;
            entity = function() {
                _fun98450: for(var _fun98450_ip = 0; ; ) switch(_fun98450_ip) {
 0:
                    entity = _closure1_slot7;
                    entity = entity.settings;
                    mike = entity.userContent;
                    entity = null;
                    zulu = entity == mike;
                    entity = undefined;
                    if(zulu) { _fun98450_ip = 36; continue _fun98450 }
 30:
                    entity = mike.dismissedContents;
 36:
                    return entity;
                }
            };
            entity = offset.bind(foxtrot)(verify, entity);
            var _closure2_slot4 = entity;
            mike = control[mike];
            foxtrot = backup.bind(tango)(mike);
            offset = foxtrot.useStateFromStoresObject;
            mike = _closure1_slot6;
            verify = new Array(1);
            verify[0] = mike;
            mike = function() {
                entity = {};
                mike = _closure1_slot6;
                zulu = mike.dailyCapOverridden;
                entity['dailyCapOverridden'] = zulu;
                mike = mike.newUserMinAgeRequiredOverridden;
                entity['newUserMinAgeRequiredOverridden'] = mike;
                return entity;
            };
            mike = offset.bind(foxtrot)(verify, mike);
            target = mike.dailyCapOverridden;
            context = mike.newUserMinAgeRequiredOverridden;
            mike = 16;
            mike = control[mike];
            mike = zulu.bind(tango)(mike);
            result = mike.bind(tango)();
            zulu = report.useCallback;
            mike = new Array(2);
            mike[0] = entity;
            mike[1] = golf;
            entity = function(argFoo, argBar) {
                report = argBar;
                tango = _closure1_slot8;
                zulu = _closure1_slot12;
                mike = {};
                oscar = _closure2_slot4;
                mike['contents'] = oscar;
                entity = _closure2_slot2;
                oscar = entity[report];
                mike['content'] = oscar;
                oscar = 0;
                oscar = oscar === report;
                mike['start'] = oscar;
                oscar = entity.length;
                entity = 1;
                entity = oscar - entity;
                entity = report === entity;
                mike['end'] = entity;
                entity = undefined;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            output = zulu.bind(report)(entity, mike);
            zulu = report.useCallback;
            mike = new Array(1);
            mike[0] = update;
            entity = function() {
                tango = _closure1_slot8;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 17;
                entity = zulu[entity];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.Text;
                entity = {'style': null, 'variant': 'text-sm/semibold', 'color': 'header-secondary', 'children': 'Dismissible Contents'};
                report = _closure2_slot0;
                report = report.sectionHeader;
                entity['style'] = report;
                entity = tango.bind(zulu)(mike, entity);
                return entity;
            };
            sizing = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot9;
            mike = _closure1_slot5;
            entity = {};
            report = update.container;
            entity['style'] = report;
            offset = _closure1_slot8;
            report = {};
            verify = update.section;
            report['style'] = verify;
            foxtrot = 18;
            verify = control[foxtrot];
            verify = backup.bind(tango)(verify);
            vacuum = verify.TableRowGroup;
            verify = {};
            sequence = 'Global Overrides';
            verify['title'] = sequence;
            config = 10;
            sequence = control[config];
            sequence = backup.bind(tango)(sequence);
            record = sequence.TableSwitchRow;
            sequence = {};
            papa = 19;
            status = control[papa];
            status = backup.bind(tango)(status);
            status = status.overrideDismissibleContentFramework;
            sequence['onValueChange'] = status;
            sequence['value'] = target;
            target = 'Daily limit';
            sequence['label'] = target;
            target = 'When enabled, bypass the daily limit of dismissible content shown';
            sequence['subLabel'] = target;
            record = offset.bind(tango)(record, sequence);
            sequence = new Array(2);
            sequence[0] = record;
            config = control[config];
            config = backup.bind(tango)(config);
            record = config.TableSwitchRow;
            config = {};
            papa = control[papa];
            papa = backup.bind(tango)(papa);
            papa = papa.overrideNewUserMinAgeRequired;
            config['onValueChange'] = papa;
            config['value'] = context;
            context = 'New user account minimum age';
            config['label'] = context;
            context = 'When enabled, bypass the minimum age requirement for new user accounts';
            config['subLabel'] = context;
            config = offset.bind(tango)(record, config);
            sequence[1] = config;
            verify['children'] = sequence;
            verify = zulu.bind(tango)(vacuum, verify);
            report['children'] = verify;
            verify = offset.bind(tango)(mike, report);
            report = new Array(5);
            report[0] = verify;
            verify = {};
            vacuum = update.section;
            verify['style'] = vacuum;
            foxtrot = control[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            vacuum = foxtrot.TableRowGroup;
            foxtrot = {};
            sequence = 'Bulk actions';
            foxtrot['title'] = sequence;
            config = 20;
            sequence = control[config];
            sequence = backup.bind(tango)(sequence);
            record = sequence.TableRow;
            sequence = {};
            context = 'Clear all dismissed dismissible contents';
            sequence['label'] = context;
            papa = 21;
            context = control[papa];
            context = backup.bind(tango)(context);
            context = context.clearDismissedContents;
            sequence['onPress'] = context;
            context = 22;
            context = control[context];
            context = backup.bind(tango)(context);
            target = context.TrashIcon;
            context = {};
            context = offset.bind(tango)(target, context);
            sequence['icon'] = context;
            context = 23;
            target = control[context];
            target = backup.bind(tango)(target);
            status = target.TableRowArrow;
            target = {};
            target = offset.bind(tango)(status, target);
            sequence['trailing'] = target;
            record = offset.bind(tango)(record, sequence);
            sequence = new Array(2);
            sequence[0] = record;
            config = control[config];
            config = backup.bind(tango)(config);
            record = config.TableRow;
            config = {};
            target = 'Dismiss all dismissible contents';
            config['label'] = target;
            papa = control[papa];
            papa = backup.bind(tango)(papa);
            papa = papa.checkAllDismissedContents;
            config['onPress'] = papa;
            papa = 24;
            papa = control[papa];
            papa = backup.bind(tango)(papa);
            target = papa.DoubleCheckmarkIcon;
            papa = {};
            papa = offset.bind(tango)(target, papa);
            config['icon'] = papa;
            context = control[context];
            context = backup.bind(tango)(context);
            papa = context.TableRowArrow;
            context = {};
            context = offset.bind(tango)(papa, context);
            config['trailing'] = context;
            config = offset.bind(tango)(record, config);
            sequence[1] = config;
            foxtrot['children'] = sequence;
            foxtrot = zulu.bind(tango)(vacuum, foxtrot);
            verify['children'] = foxtrot;
            verify = offset.bind(tango)(mike, verify);
            report[1] = verify;
            verify = {};
            foxtrot = update.search;
            verify['style'] = foxtrot;
            foxtrot = 25;
            foxtrot = control[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            backup = foxtrot.SearchField;
            foxtrot = {};
            control = 'md';
            foxtrot['size'] = control;
            source = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot3;
                tango = _closure2_slot1;
                entity = undefined;
                mike = argFoo;
                mike = tango.bind(entity)(mike);
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            foxtrot['onChange'] = source;
            foxtrot = offset.bind(tango)(backup, foxtrot);
            verify['children'] = foxtrot;
            verify = offset.bind(tango)(mike, verify);
            report[2] = verify;
            golf = golf.length;
            if(!(!(golf > options))) { _fun98446_ip = 1152; continue _fun98446 }
 975:
            verify = _closure1_slot8;
            options = _closure1_slot10;
            golf = {};
            backup = _closure1_slot9;
            foxtrot = _closure1_slot5;
            offset = {};
            source = update.emptyState;
            offset['style'] = source;
            vacuum = _closure1_slot0;
            sequence = _closure1_slot2;
            source = 17;
            source = sequence[source];
            source = vacuum.bind(tango)(source);
            control = source.Text;
            source = {'style': null, 'variant': 'heading-lg/semibold', 'children': 'No results found'};
            config = {};
            context = _closure1_slot1;
            record = 7;
            record = sequence[record];
            record = context.bind(tango)(record);
            record = record.spacing;
            record = record.PX_16;
            config['marginBottom'] = record;
            source['style'] = config;
            control = verify.bind(tango)(control, source);
            source = new Array(2);
            source[0] = control;
            control = 27;
            control = sequence[control];
            control = vacuum.bind(tango)(control);
            vacuum = control.SearchEmpty;
            control = {};
            control = verify.bind(tango)(vacuum, control);
            source[1] = control;
            offset['children'] = source;
            offset = backup.bind(tango)(foxtrot, offset);
            golf['children'] = offset;
            golf = verify.bind(tango)(options, golf);
            _fun98446_ip = 1277; continue _fun98446;
 1152:
            offset = _closure1_slot8;
            foxtrot = _closure1_slot1;
            backup = _closure1_slot2;
            options = 26;
            options = backup[options];
            verify = foxtrot.bind(tango)(options);
            options = {};
            update = update.list;
            options['style'] = update;
            update = 'windowSize';
            options['estimatedListSize'] = update;
            options['itemSize'] = echo;
            options['placeholderConfig'] = result;
            options['renderItem'] = output;
            options['renderSectionHeader'] = sizing;
            options['sections'] = kilo;
            options['sectionHeaderSize'] = romeo;
            romeo = yankee.bottom;
            yankee = 7;
            yankee = backup[yankee];
            yankee = foxtrot.bind(tango)(yankee);
            yankee = yankee.spacing;
            yankee = yankee.PX_16;
            yankee = romeo + yankee;
            options['insetEnd'] = yankee;
            yankee = true;
            options['wrapChildren'] = yankee;
            golf = offset.bind(tango)(verify, options);
 1277:
            report[3] = golf;
            options = _closure1_slot8;
            golf = _closure1_slot1;
            verify = _closure1_slot2;
            oscar = 28;
            oscar = verify[oscar];
            golf = golf.bind(tango)(oscar);
            oscar = {};
            oscar = options.bind(tango)(golf, oscar);
            report[4] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();