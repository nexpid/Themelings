// app/modules/devtools/native/components/screens/DevToolsDismissableContentsScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    foxtra = 1;
    golfie = oscard[foxtra];
    tangon = argCor;
    option = tangon.bind(entity)(golfie);
    var _closure1_slot4 = option;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    golfie = verify.createStyles;
    tangon = {};
    offset = {};
    yankee = 7;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['paddingTop'] = backup;
    offset['flex'] = foxtra;
    tangon['container'] = offset;
    offset = {};
    offset['flex'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['paddingHorizontal'] = foxtra;
    tangon['list'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['paddingHorizontal'] = foxtra;
    tangon['search'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['paddingHorizontal'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['paddingBottom'] = foxtra;
    tangon['section'] = offset;
    offset = {'backgroundColor': null, 'verticalAlign': 'middle', 'flexDirection': 'row', 'alignItems': 'center', 'flex': 1};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = foxtra;
    tangon['sectionHeader'] = offset;
    offset = {'marginVertical': null, 'justifyContent': 'center', 'alignItems': 'center', 'flex': 1};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_32;
    offset['marginVertical'] = yankee;
    tangon['emptyState'] = offset;
    tangon = golfie.bind(verify)(tangon);
    var _closure1_slot10 = tangon;
    golfie = option.memo;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            golfie = entity.contents;
            report = entity.content;
            verify = entity.start;
            option = entity.end;
            zuuluu = _closure1_slot0;
            offset = _closure1_slot2;
            michal = 8;
            michal = offset[michal];
            tangon = undefined;
            michal = zuuluu.bind(tangon)(michal);
            michal = michal.DismissibleContent;
            oscard = michal[report];
            michal = 9;
            michal = offset[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.toggleDismissibleContentDismissState;
            offset = null;
            if(!(offset == golfie)) { _fun00002_ip = 111; continue _fun00001 }
 83:
            offset = global;
            offset = offset.Uint8Array;
            yankee = offset.prototype;
            yankee = Object.create(yankee, {constructor: {value: offset}});
            backup = yankee;
            offset = new backup[offset](foxtra);
            golfie = offset instanceof Object ? offset : yankee;
 111:
            michal = michal.bind(zuuluu)(oscard, golfie);
            oscard = michal.isDismissed;
            golfie = michal.handleToggleDismissState;
            zuuluu = _closure1_slot8;
            michal = _closure1_slot0;
            offset = _closure1_slot2;
            entity = 10;
            entity = offset[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.TableSwitchRow;
            entity = {};
            entity['start'] = verify;
            entity['end'] = option;
            entity['onValueChange'] = golfie;
            entity['value'] = oscard;
            entity['label'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 29;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/devtools/native/components/screens/DevToolsDismissableContentsScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: DevToolsDismissableContentsScreen
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = _closure1_slot10;
            tangon = undefined;
            update = entity.bind(tangon)();
            var _closure2_slot0 = update;
            zuuluu = _closure1_slot1;
            ctrled = _closure1_slot2;
            entity = 11;
            entity = ctrled[entity];
            entity = zuuluu.bind(tangon)(entity);
            yankee = entity.bind(tangon)();
            entity = 12;
            entity = ctrled[entity];
            entity = zuuluu.bind(tangon)(entity);
            echoed = entity.bind(tangon)();
            entity = 13;
            entity = ctrled[entity];
            entity = zuuluu.bind(tangon)(entity);
            romeon = entity.bind(tangon)();
            report = _closure1_slot4;
            golfie = report.useCallback;
            michal = function(argFoo) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    romeon = argFoo;
                    michal = new Array(0);
                    zuuluu = _closure1_slot0;
                    tangon = _closure1_slot2;
                    entity = 8;
                    entity = tangon[entity];
                    oscard = undefined;
                    entity = zuuluu.bind(oscard)(entity);
                    offset = entity.DismissibleContent;
                    tangon = global;
                    zuuluu = 14;
                    entity = '';
                    entity = entity === romeon;
                    for(report in offset)
 59:
                    {
 68:
                        backup = report;
                        foxtra = entity;
                        if(foxtra) { _fun00006_ip = 120; continue _fun00005 }
 77:
                        sizing = _closure1_slot1;
                        kiloes = _closure1_slot2;
                        kiloes = kiloes[zuuluu];
                        output = sizing.bind(oscard)(kiloes);
                        kiloes = romeon.toLowerCase;
                        sizing = kiloes.bind(romeon)();
                        kiloes = backup.toLowerCase;
                        kiloes = kiloes.bind(backup)();
                        foxtra = output.bind(oscard)(sizing, kiloes);
 120:
                        if(!foxtra) { _fun00006_ip = 145; continue _fun00005 }
 123:
                        sizing = tangon.isNaN;
                        kiloes = tangon.Number;
                        kiloes = kiloes.bind(oscard)(backup);
                        foxtra = sizing.bind(oscard)(kiloes);
 145:
                        if(!foxtra) { _fun00006_ip = 59; continue _fun00005 }
 148:
                        foxtra = michal.push;
                        foxtra = foxtra.bind(michal)(backup);
                        _fun00006_ip = 59; continue _fun00005;
                    }
 160:
                    zuuluu = michal.sort;
                    entity = function(argFoo, argBar) {
                        zuuluu = argFoo;
                        michal = zuuluu.localeCompare;
                        entity = argBar;
                        entity = michal.bind(zuuluu)(entity);
                        return entity;
                    };
                    entity = zuuluu.bind(michal)(entity);
                    entity = {};
                    entity['dismissableContent'] = michal;
                    zuuluu = michal.length;
                    michal = new Array(1);
                    michal[0] = zuuluu;
                    entity['sections'] = michal;
                    return entity;
                }
            };
            entity = new Array(0);
            entity = golfie.bind(report)(michal, entity);
            var _closure2_slot1 = entity;
            michal = report.useState;
            entity = function() {
                zuuluu = _closure2_slot1;
                michal = undefined;
                entity = '';
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            golfie = michal.bind(report)(entity);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(golfie, entity);
            option = 0;
            entity = michal[option];
            kiloes = entity.sections;
            golfie = entity.dismissableContent;
            var _closure2_slot2 = golfie;
            entity = 1;
            entity = michal[entity];
            var _closure2_slot3 = entity;
            backup = _closure1_slot0;
            michal = 15;
            entity = ctrled[michal];
            foxtra = backup.bind(tangon)(entity);
            offset = foxtra.useStateFromStores;
            entity = _closure1_slot7;
            verify = new Array(1);
            verify[0] = entity;
            entity = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = _closure1_slot7;
                    entity = entity.settings;
                    michal = entity.userContent;
                    entity = null;
                    zuuluu = entity == michal;
                    entity = undefined;
                    if(zuuluu) { _fun00008_ip = 36; continue _fun00007 }
 30:
                    entity = michal.dismissedContents;
 36:
                    return entity;
                }
            };
            entity = offset.bind(foxtra)(verify, entity);
            var _closure2_slot4 = entity;
            michal = ctrled[michal];
            foxtra = backup.bind(tangon)(michal);
            offset = foxtra.useStateFromStoresObject;
            michal = _closure1_slot6;
            verify = new Array(1);
            verify[0] = michal;
            michal = function() {
                entity = {};
                michal = _closure1_slot6;
                zuuluu = michal.dailyCapOverridden;
                entity['dailyCapOverridden'] = zuuluu;
                michal = michal.newUserMinAgeRequiredOverridden;
                entity['newUserMinAgeRequiredOverridden'] = michal;
                return entity;
            };
            michal = offset.bind(foxtra)(verify, michal);
            target = michal.dailyCapOverridden;
            cntext = michal.newUserMinAgeRequiredOverridden;
            michal = 16;
            michal = ctrled[michal];
            michal = zuuluu.bind(tangon)(michal);
            result = michal.bind(tangon)();
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = entity;
            michal[1] = golfie;
            entity = function(argFoo, argBar) {
                report = argBar;
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot11;
                michal = {};
                oscard = _closure2_slot4;
                michal['contents'] = oscard;
                entity = _closure2_slot2;
                oscard = entity[report];
                michal['content'] = oscard;
                oscard = 0;
                oscard = oscard === report;
                michal['start'] = oscard;
                oscard = entity.length;
                entity = 1;
                entity = oscard - entity;
                entity = report === entity;
                michal['end'] = entity;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            output = zuuluu.bind(report)(entity, michal);
            zuuluu = report.useCallback;
            michal = new Array(1);
            michal[0] = update;
            entity = function() {
                tangon = _closure1_slot8;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 17;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.Text;
                entity = {'style': null, 'variant': 'text-sm/semibold', 'color': 'header-secondary', 'children': 'Dismissible Contents'};
                report = _closure2_slot0;
                report = report.sectionHeader;
                entity['style'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            sizing = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot9;
            michal = _closure1_slot5;
            entity = {};
            report = update.container;
            entity['style'] = report;
            offset = _closure1_slot8;
            report = {};
            verify = update.section;
            report['style'] = verify;
            foxtra = 18;
            verify = ctrled[foxtra];
            verify = backup.bind(tangon)(verify);
            vacuum = verify.TableRowGroup;
            verify = {};
            sequen = 'Global Overrides';
            verify['title'] = sequen;
            config = 10;
            sequen = ctrled[config];
            sequen = backup.bind(tangon)(sequen);
            record = sequen.TableSwitchRow;
            sequen = {};
            papara = 19;
            status = ctrled[papara];
            status = backup.bind(tangon)(status);
            status = status.overrideDismissibleContentFramework;
            sequen['onValueChange'] = status;
            sequen['value'] = target;
            target = 'Daily limit';
            sequen['label'] = target;
            target = 'When enabled, bypass the daily limit of dismissible content shown';
            sequen['subLabel'] = target;
            record = offset.bind(tangon)(record, sequen);
            sequen = new Array(2);
            sequen[0] = record;
            config = ctrled[config];
            config = backup.bind(tangon)(config);
            record = config.TableSwitchRow;
            config = {};
            papara = ctrled[papara];
            papara = backup.bind(tangon)(papara);
            papara = papara.overrideNewUserMinAgeRequired;
            config['onValueChange'] = papara;
            config['value'] = cntext;
            cntext = 'New user account minimum age';
            config['label'] = cntext;
            cntext = 'When enabled, bypass the minimum age requirement for new user accounts';
            config['subLabel'] = cntext;
            config = offset.bind(tangon)(record, config);
            sequen[1] = config;
            verify['children'] = sequen;
            verify = zuuluu.bind(tangon)(vacuum, verify);
            report['children'] = verify;
            verify = offset.bind(tangon)(michal, report);
            report = new Array(5);
            report[0] = verify;
            verify = {};
            vacuum = update.section;
            verify['style'] = vacuum;
            foxtra = ctrled[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            vacuum = foxtra.TableRowGroup;
            foxtra = {};
            sequen = 'Bulk actions';
            foxtra['title'] = sequen;
            config = 20;
            sequen = ctrled[config];
            sequen = backup.bind(tangon)(sequen);
            record = sequen.TableRow;
            sequen = {};
            cntext = 'Clear all dismissed dismissible contents';
            sequen['label'] = cntext;
            papara = 21;
            cntext = ctrled[papara];
            cntext = backup.bind(tangon)(cntext);
            cntext = cntext.clearDismissedContents;
            sequen['onPress'] = cntext;
            cntext = 22;
            cntext = ctrled[cntext];
            cntext = backup.bind(tangon)(cntext);
            target = cntext.TrashIcon;
            cntext = {};
            cntext = offset.bind(tangon)(target, cntext);
            sequen['icon'] = cntext;
            cntext = 23;
            target = ctrled[cntext];
            target = backup.bind(tangon)(target);
            status = target.TableRowArrow;
            target = {};
            target = offset.bind(tangon)(status, target);
            sequen['trailing'] = target;
            record = offset.bind(tangon)(record, sequen);
            sequen = new Array(2);
            sequen[0] = record;
            config = ctrled[config];
            config = backup.bind(tangon)(config);
            record = config.TableRow;
            config = {};
            target = 'Dismiss all dismissible contents';
            config['label'] = target;
            papara = ctrled[papara];
            papara = backup.bind(tangon)(papara);
            papara = papara.checkAllDismissedContents;
            config['onPress'] = papara;
            papara = 24;
            papara = ctrled[papara];
            papara = backup.bind(tangon)(papara);
            target = papara.DoubleCheckmarkIcon;
            papara = {};
            papara = offset.bind(tangon)(target, papara);
            config['icon'] = papara;
            cntext = ctrled[cntext];
            cntext = backup.bind(tangon)(cntext);
            papara = cntext.TableRowArrow;
            cntext = {};
            cntext = offset.bind(tangon)(papara, cntext);
            config['trailing'] = cntext;
            config = offset.bind(tangon)(record, config);
            sequen[1] = config;
            foxtra['children'] = sequen;
            foxtra = zuuluu.bind(tangon)(vacuum, foxtra);
            verify['children'] = foxtra;
            verify = offset.bind(tangon)(michal, verify);
            report[1] = verify;
            verify = {};
            foxtra = update.search;
            verify['style'] = foxtra;
            foxtra = 25;
            foxtra = ctrled[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.SearchField;
            foxtra = {};
            ctrled = 'md';
            foxtra['size'] = ctrled;
            source = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot3;
                tangon = _closure2_slot1;
                entity = undefined;
                michal = argFoo;
                michal = tangon.bind(entity)(michal);
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            foxtra['onChange'] = source;
            foxtra = offset.bind(tangon)(backup, foxtra);
            verify['children'] = foxtra;
            verify = offset.bind(tangon)(michal, verify);
            report[2] = verify;
            golfie = golfie.length;
            if(!(!(golfie > option))) { _fun00004_ip = 1135; continue _fun00003 }
 975:
            verify = _closure1_slot9;
            option = _closure1_slot5;
            golfie = {};
            offset = update.emptyState;
            golfie['style'] = offset;
            source = _closure1_slot8;
            backup = _closure1_slot0;
            ctrled = _closure1_slot2;
            offset = 17;
            offset = ctrled[offset];
            offset = backup.bind(tangon)(offset);
            foxtra = offset.Text;
            offset = {'style': null, 'variant': 'heading-lg/semibold', 'children': 'No results found'};
            vacuum = {};
            config = _closure1_slot1;
            sequen = 7;
            sequen = ctrled[sequen];
            sequen = config.bind(tangon)(sequen);
            sequen = sequen.spacing;
            sequen = sequen.PX_16;
            vacuum['marginBottom'] = sequen;
            offset['style'] = vacuum;
            foxtra = source.bind(tangon)(foxtra, offset);
            offset = new Array(2);
            offset[0] = foxtra;
            foxtra = 27;
            foxtra = ctrled[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.SearchEmpty;
            foxtra = {};
            foxtra = source.bind(tangon)(backup, foxtra);
            offset[1] = foxtra;
            golfie['children'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            _fun00004_ip = 1259; continue _fun00003;
 1135:
            offset = _closure1_slot8;
            foxtra = _closure1_slot1;
            backup = _closure1_slot2;
            option = 26;
            option = backup[option];
            verify = foxtra.bind(tangon)(option);
            option = {};
            update = update.list;
            option['style'] = update;
            update = 'windowSize';
            option['estimatedListSize'] = update;
            option['itemSize'] = echoed;
            option['placeholderConfig'] = result;
            option['renderItem'] = output;
            option['renderSectionHeader'] = sizing;
            option['sections'] = kiloes;
            option['sectionHeaderSize'] = romeon;
            romeon = yankee.bottom;
            yankee = 7;
            yankee = backup[yankee];
            yankee = foxtra.bind(tangon)(yankee);
            yankee = yankee.spacing;
            yankee = yankee.PX_16;
            yankee = romeon + yankee;
            option['insetEnd'] = yankee;
            yankee = true;
            option['wrapChildren'] = yankee;
            golfie = offset.bind(tangon)(verify, option);
 1259:
            report[3] = golfie;
            option = _closure1_slot8;
            golfie = _closure1_slot1;
            verify = _closure1_slot2;
            oscard = 28;
            oscard = verify[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();