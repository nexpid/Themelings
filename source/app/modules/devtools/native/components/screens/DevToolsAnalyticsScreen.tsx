// app/modules/devtools/native/components/screens/DevToolsAnalyticsScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: CommonProperty
        entity = argFoo;
        verify = entity.name;
        oscard = entity.children;
        entity = _closure1_slot10;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        zuuluu = _closure1_slot9;
        michal = _closure1_slot5;
        entity = {};
        golfie = golfie.commonProperty;
        entity['style'] = golfie;
        option = _closure1_slot8;
        golfie = _closure1_slot0;
        offset = _closure1_slot2;
        report = 9;
        report = offset[report];
        report = golfie.bind(tangon)(report);
        golfie = report.Text;
        report = {'variant': 'text-sm/semibold', 'color': 'header-secondary'};
        report['children'] = verify;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot11 = entity;
    entity = function(argFoo) { // Original name: LoggedEvent
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeon = entity.event;
            output = entity.properties;
            sequen = entity.timestamp;
            status = entity.fingerprint;
            var _closure2_slot0 = status;
            offset = entity.start;
            verify = entity.end;
            entity = _closure1_slot10;
            tangon = undefined;
            kiloes = entity.bind(tangon)();
            var _closure2_slot1 = kiloes;
            michal = _closure1_slot4;
            entity = michal.useState;
            report = false;
            zuuluu = entity.bind(michal)(report);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            oscard = michal[entity];
            entity = 1;
            entity = michal[entity];
            var _closure2_slot2 = entity;
            michal = _closure1_slot6;
            entity = michal.getUser;
            cntext = entity.bind(michal)(status);
            zuuluu = _closure1_slot9;
            michal = _closure1_slot5;
            entity = {};
            entity['collapsable'] = report;
            option = _closure1_slot8;
            sizing = _closure1_slot0;
            echoed = _closure1_slot2;
            report = 10;
            report = echoed[report];
            report = sizing.bind(tangon)(report);
            golfie = report.TableRow;
            report = {};
            foxtra = !oscard;
            report['arrow'] = foxtra;
            result = _closure1_slot8;
            foxtra = 11;
            foxtra = echoed[foxtra];
            foxtra = sizing.bind(tangon)(foxtra);
            sizing = foxtra.AnalyticsIcon;
            foxtra = {};
            foxtra = result.bind(tangon)(sizing, foxtra);
            report['icon'] = foxtra;
            report['label'] = romeon;
            romeon = 'name';
            romeon = romeon in output;
            if(romeon) { _fun00002_ip = 268; continue _fun00001 }
 225:
            result = output.location;
            romeon = null;
            sizing = romeon == result;
            foxtra = undefined;
            if(sizing) { _fun00002_ip = 250; continue _fun00001 }
 241:
            sizing = result.toString;
            foxtra = sizing.bind(result)();
 250:
            sizing = romeon != foxtra;
            romeon = 'N/A';
            if(!sizing) { _fun00002_ip = 266; continue _fun00001 }
 263:
            romeon = foxtra;
 266:
            _fun00002_ip = 273; continue _fun00001;
 268:
            romeon = output.name;
 273:
            report['subLabel'] = romeon;
            romeon = function() { // Original name: onPress
                zuuluu = _closure2_slot2;
                michal = undefined;
                entity = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            report['onPress'] = romeon;
            report['start'] = offset;
            report['end'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            if(!oscard) { _fun00002_ip = 944; continue _fun00001 }
 317:
            verify = _closure1_slot9;
            option = _closure1_slot5;
            golfie = {};
            offset = kiloes.detailsContainer;
            golfie['style'] = offset;
            foxtra = _closure1_slot9;
            romeon = _closure1_slot5;
            offset = {};
            sizing = kiloes.commonPropertiesContainer;
            offset['style'] = sizing;
            echoed = _closure1_slot8;
            result = _closure1_slot11;
            sizing = {};
            update = 'Timestamp (local)';
            sizing['name'] = update;
            ctrled = _closure1_slot8;
            source = _closure1_slot0;
            papara = _closure1_slot2;
            config = 9;
            update = papara[config];
            update = source.bind(tangon)(update);
            source = update.Text;
            update = {'variant': 'text-sm/semibold', 'color': 'header-primary'};
            record = _closure1_slot1;
            vacuum = 12;
            vacuum = papara[vacuum];
            vacuum = record.bind(tangon)(vacuum);
            sequen = vacuum.bind(tangon)(sequen);
            vacuum = sequen.calendar;
            vacuum = vacuum.bind(sequen)();
            update['children'] = vacuum;
            update = ctrled.bind(tangon)(source, update);
            sizing['children'] = update;
            result = echoed.bind(tangon)(result, sizing);
            sizing = new Array(3);
            sizing[0] = result;
            source = null;
            result = source != cntext;
            if(!result) { _fun00002_ip = 554; continue _fun00001 }
 488:
            ctrled = _closure1_slot8;
            update = _closure1_slot11;
            echoed = {};
            vacuum = 'User ';
            echoed['name'] = vacuum;
            record = _closure1_slot8;
            sequen = _closure1_slot1;
            papara = _closure1_slot2;
            vacuum = 13;
            vacuum = papara[vacuum];
            sequen = sequen.bind(tangon)(vacuum);
            vacuum = {};
            vacuum['user'] = cntext;
            vacuum = record.bind(tangon)(sequen, vacuum);
            echoed['children'] = vacuum;
            result = ctrled.bind(tangon)(update, echoed);
 554:
            sizing[1] = result;
            update = _closure1_slot8;
            echoed = _closure1_slot11;
            result = {};
            ctrled = 'Fingerprint';
            result['name'] = ctrled;
            if(!(source == status)) { _fun00002_ip = 645; continue _fun00001 }
 582:
            vacuum = _closure1_slot8;
            ctrled = _closure1_slot0;
            source = _closure1_slot2;
            source = source[config];
            source = ctrled.bind(tangon)(source);
            ctrled = source.Text;
            source = {'variant': 'text-sm/medium', 'color': 'text-muted', 'style': null, 'children': 'null'};
            sequen = kiloes.monospace;
            source['style'] = sequen;
            source = vacuum.bind(tangon)(ctrled, source);
            _fun00002_ip = 832; continue _fun00001;
 645:
            sequen = _closure1_slot9;
            cntext = _closure1_slot0;
            target = _closure1_slot2;
            ctrled = 14;
            ctrled = target[ctrled];
            ctrled = cntext.bind(tangon)(ctrled);
            vacuum = ctrled.PressableOpacity;
            ctrled = {};
            record = kiloes.copyContainer;
            ctrled['style'] = record;
            record = function() { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot0;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00004_ip = 53; continue _fun00003 }
 13:
                    tangon = _closure1_slot0;
                    zuuluu = _closure1_slot2;
                    michal = 15;
                    zuuluu = zuuluu[michal];
                    michal = undefined;
                    zuuluu = tangon.bind(michal)(zuuluu);
                    michal = zuuluu.copy;
                    entity = _closure2_slot0;
                    entity = michal.bind(zuuluu)(entity);
 53:
                    entity = undefined;
                    return entity;
                }
            };
            ctrled['onPress'] = record;
            papara = _closure1_slot8;
            config = target[config];
            config = cntext.bind(tangon)(config);
            record = config.Text;
            config = {'variant': 'text-sm/medium', 'color': 'header-primary'};
            limora = kiloes.monospace;
            sierra = new Array(2);
            sierra[0] = limora;
            limora = {};
            whisks = 4;
            limora['marginRight'] = whisks;
            sierra[1] = limora;
            config['style'] = sierra;
            config['children'] = status;
            record = papara.bind(tangon)(record, config);
            config = new Array(2);
            config[0] = record;
            papara = _closure1_slot8;
            record = 16;
            record = target[record];
            record = cntext.bind(tangon)(record);
            cntext = record.CopyIcon;
            record = {};
            target = 'sm';
            record['size'] = target;
            record = papara.bind(tangon)(cntext, record);
            config[1] = record;
            ctrled['children'] = config;
            source = sequen.bind(tangon)(vacuum, ctrled);
 832:
            result['children'] = source;
            result = update.bind(tangon)(echoed, result);
            sizing[2] = result;
            offset['children'] = sizing;
            romeon = foxtra.bind(tangon)(romeon, offset);
            offset = new Array(2);
            offset[0] = romeon;
            foxtra = _closure1_slot8;
            romeon = _closure1_slot5;
            yankee = {};
            kiloes = kiloes.customPropertiesContainer;
            yankee['style'] = kiloes;
            kiloes = global;
            sizing = kiloes.Object;
            kiloes = sizing.entries;
            sizing = kiloes.bind(sizing)(output);
            kiloes = sizing.map;
            backup = function(argFoo) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = argFoo;
                    entity = zuuluu[Symbol.iterator];
                    zuuluu = entity().next;
                    oscard = zuuluu().value;
                    michal = entity;
                    report = undefined;
                    michal = michal === report;
                    tangon = undefined;
                    if(michal) { _fun00006_ip = 27; continue _fun00005 }
 24:
                    tangon = oscard;
 27:
                    foxtra = undefined;
                    if(michal) { _fun00006_ip = 57; continue _fun00005 }
 32:
                    oscard = zuuluu().value;
                    zuuluu = entity;
                    zuuluu = zuuluu === report;
                    foxtra = undefined;
                    michal = zuuluu;
                    if(zuuluu) { _fun00006_ip = 57; continue _fun00005 }
 51:
                    foxtra = oscard;
                    michal = zuuluu;
 57:
                    if(michal) { _fun00006_ip = 63; continue _fun00005 }
 60:
                    entity.return();
 63:
                    zuuluu = _closure1_slot9;
                    michal = _closure1_slot5;
                    entity = {};
                    kiloes = _closure2_slot1;
                    oscard = kiloes.customProperty;
                    entity['style'] = oscard;
                    backup = _closure1_slot9;
                    option = _closure1_slot0;
                    offset = _closure1_slot2;
                    golfie = 9;
                    oscard = offset[golfie];
                    oscard = option.bind(report)(oscard);
                    romeon = oscard.Text;
                    oscard = {'variant': 'text-sm/semibold', 'color': 'text-brand'};
                    kiloes = kiloes.customPropertyName;
                    oscard['style'] = kiloes;
                    kiloes = new Array(2);
                    kiloes[0] = tangon;
                    sizing = ':';
                    kiloes[1] = sizing;
                    oscard['children'] = kiloes;
                    romeon = backup.bind(report)(romeon, oscard);
                    oscard = new Array(2);
                    oscard[0] = romeon;
                    verify = _closure1_slot8;
                    golfie = offset[golfie];
                    golfie = option.bind(report)(golfie);
                    option = golfie.Text;
                    golfie = null;
                    if(!(golfie == foxtra)) { _fun00006_ip = 232; continue _fun00005 }
 204:
                    golfie = {'variant': 'text-sm/semibold', 'color': 'text-muted', 'style': null, 'children': 'null'};
                    offset = _closure2_slot1;
                    offset = offset.monospace;
                    golfie['style'] = offset;
                    _fun00006_ip = 286; continue _fun00005;
 232:
                    offset = {'variant': 'text-sm/semibold', 'color': 'header-primary'};
                    yankee = _closure2_slot1;
                    yankee = yankee.monospace;
                    offset['style'] = yankee;
                    yankee = global;
                    romeon = yankee.JSON;
                    yankee = romeon.stringify;
                    yankee = yankee.bind(romeon)(foxtra);
                    offset['children'] = yankee;
                    golfie = offset;
 286:
                    golfie = verify.bind(report)(option, golfie);
                    oscard[1] = golfie;
                    entity['children'] = oscard;
                    entity = zuuluu.bind(report)(michal, entity, tangon);
                    return entity;
                }
            };
            backup = kiloes.bind(sizing)(backup);
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 944:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    foxtra = 1;
    golfie = oscard[foxtra];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    offset = tangon.Fonts;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot8 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 8;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = backup;
    verify['flex'] = foxtra;
    tangon['analyticsContainer'] = verify;
    verify = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['padding'] = foxtra;
    tangon['contentContainer'] = verify;
    verify = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtra;
    tangon['detailsContainer'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = yankee;
    yankee = 10;
    verify['paddingHorizontal'] = yankee;
    tangon['commonPropertiesContainer'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between', 'marginVertical': 8, 'height': 20};
    tangon['commonProperty'] = verify;
    verify = {'flexGrow': 0, 'height': 22};
    tangon['commonPropertyDiscordTag'] = verify;
    verify = {'paddingHorizontal': 10, 'paddingVertical': 4};
    tangon['customPropertiesContainer'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'flexWrap': 'wrap', 'justifyContent': 'flex-start', 'marginVertical': 4};
    tangon['customProperty'] = verify;
    verify = {'fontWeight': '600', 'fontFamily': null, 'marginRight': 4};
    yankee = offset.CODE_BOLD;
    verify['fontFamily'] = yankee;
    tangon['customPropertyName'] = verify;
    verify = {};
    offset = offset.CODE_BOLD;
    verify['fontFamily'] = offset;
    tangon['monospace'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    tangon['copyContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 26;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/devtools/native/components/screens/DevToolsAnalyticsScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: DevToolsAnalyticsScreen
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = _closure1_slot10;
            tangon = undefined;
            backup = entity.bind(tangon)();
            update = _closure1_slot0;
            ctrled = _closure1_slot2;
            entity = 17;
            entity = ctrled[entity];
            oscard = update.bind(tangon)(entity);
            report = oscard.useStateFromStores;
            entity = _closure1_slot7;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            michal = function() {
                entity = _closure1_slot7;
                entity = entity.loggedEventsVersion;
                return entity;
            };
            romeon = report.bind(oscard)(zuuluu, michal);
            foxtra = entity.loggedEvents;
            var _closure2_slot0 = foxtra;
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            entity = false;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            yankee = 0;
            offset = michal[yankee];
            entity = 1;
            papara = michal[entity];
            michal = _closure1_slot1;
            entity = 18;
            entity = ctrled[entity];
            entity = michal.bind(tangon)(entity);
            verify = entity.bind(tangon)();
            zuuluu = _closure1_slot8;
            michal = _closure1_slot5;
            entity = {};
            report = backup.analyticsContainer;
            entity['style'] = report;
            golfie = _closure1_slot8;
            report = 19;
            report = ctrled[report];
            report = update.bind(tangon)(report);
            oscard = report.FlashList;
            report = {};
            output = _closure1_slot9;
            kiloes = 20;
            kiloes = ctrled[kiloes];
            kiloes = update.bind(tangon)(kiloes);
            sizing = kiloes.Stack;
            kiloes = {};
            result = 16;
            kiloes['spacing'] = result;
            sequen = _closure1_slot9;
            echoed = 21;
            result = ctrled[echoed];
            result = update.bind(tangon)(result);
            source = result.TableRowGroup;
            result = {'title': 'Actions', 'hasIcons': true};
            cntext = _closure1_slot8;
            config = 22;
            config = ctrled[config];
            config = update.bind(tangon)(config);
            record = config.TableSwitchRow;
            config = {};
            sierra = _closure1_slot8;
            target = 23;
            target = ctrled[target];
            target = update.bind(tangon)(target);
            status = target.ArrowsUpDownIcon;
            target = {};
            target = sierra.bind(tangon)(status, target);
            config['icon'] = target;
            target = 'Reverse Events';
            config['label'] = target;
            config['value'] = offset;
            config['onValueChange'] = papara;
            record = cntext.bind(tangon)(record, config);
            config = new Array(2);
            config[0] = record;
            target = _closure1_slot8;
            record = 10;
            cntext = ctrled[record];
            cntext = update.bind(tangon)(cntext);
            papara = cntext.TableRow;
            cntext = {'arrow': true, 'variant': 'danger', 'icon': null, 'label': 'Clear Analytics Log'};
            limora = _closure1_slot8;
            status = 24;
            status = ctrled[status];
            status = update.bind(tangon)(status);
            sierra = status.TrashIcon;
            status = {};
            whisks = 'text-danger';
            status['color'] = whisks;
            status = limora.bind(tangon)(sierra, status);
            cntext['icon'] = status;
            status = 25;
            status = ctrled[status];
            status = update.bind(tangon)(status);
            status = status.clearAnalyticsLog;
            cntext['onPress'] = status;
            cntext = target.bind(tangon)(papara, cntext);
            config[1] = cntext;
            result['children'] = config;
            source = sequen.bind(tangon)(source, result);
            result = new Array(2);
            result[0] = source;
            source = _closure1_slot8;
            echoed = ctrled[echoed];
            echoed = update.bind(tangon)(echoed);
            update = echoed.TableRowGroup;
            echoed = {};
            ctrled = 'Analytics Events';
            echoed['title'] = ctrled;
            sequen = foxtra.length;
            ctrled = null;
            if(!(yankee === sequen)) { _fun00008_ip = 560; continue _fun00007 }
 515:
            config = _closure1_slot8;
            sequen = _closure1_slot0;
            vacuum = _closure1_slot2;
            vacuum = vacuum[record];
            vacuum = sequen.bind(tangon)(vacuum);
            sequen = vacuum.TableRow;
            vacuum = {};
            record = 'No events logged.';
            vacuum['label'] = record;
            ctrled = config.bind(tangon)(sequen, vacuum);
 560:
            echoed['children'] = ctrled;
            echoed = source.bind(tangon)(update, echoed);
            result[1] = echoed;
            kiloes['children'] = result;
            kiloes = output.bind(tangon)(sizing, kiloes);
            report['ListHeaderComponent'] = kiloes;
            backup = backup.contentContainer;
            report['contentContainerStyle'] = backup;
            report['extraData'] = romeon;
            romeon = new Array(0);
            variable36 = romeon;
            quebec = foxtra;
            equals = 0;
            yankee = arraySpread(variable36, quebec, equals);
            if(offset) { _fun00008_ip = 629; continue _fun00007 }
 624:
            offset = romeon;
            _fun00008_ip = 639; continue _fun00007;
 629:
            yankee = romeon.reverse;
            offset = yankee.bind(romeon)();
 639:
            report['data'] = offset;
            report['estimatedItemSize'] = verify;
            option = function(argFoo) { // Original name: renderItem
                michal = argFoo;
                entity = michal.item;
                oscard = michal.index;
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot12;
                michal = {};
                report = 0;
                report = report === oscard;
                michal['start'] = report;
                report = _closure2_slot0;
                golfie = report.length;
                report = 1;
                report = golfie - report;
                report = oscard === report;
                michal['end'] = report;
                report = entity.event;
                michal['event'] = report;
                report = entity.properties;
                michal['properties'] = report;
                report = entity.timestamp;
                michal['timestamp'] = report;
                entity = entity.fingerprint;
                michal['fingerprint'] = entity;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            report['renderItem'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();