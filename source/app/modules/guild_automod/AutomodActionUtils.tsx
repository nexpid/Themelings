// app/modules/guild_automod/AutomodActionUtils.tsx
export default (function(native1, native2, native3, native4, native5, native6, native7) {
    var6 = native2;
    var3 = native6;
    var7 = native7;
    var2 = function getDefaultActions() {
        var1 = {};
        var2 = _closure1_slot0;
        var3 = var2.BLOCK_MESSAGE;
        var2 = {};
        var5 = _closure1_slot0;
        var5 = var5.BLOCK_MESSAGE;
        var2['type'] = var5;
        var5 = {};
        var6 = undefined;
        var5['customMessage'] = var6;
        var2['metadata'] = var5;
        var1[var3] = var2;
        var2 = _closure1_slot0;
        var3 = var2.FLAG_TO_CHANNEL;
        var2 = {};
        var5 = _closure1_slot0;
        var5 = var5.FLAG_TO_CHANNEL;
        var2['type'] = var5;
        var5 = {};
        var5['channelId'] = var6;
        var2['metadata'] = var5;
        var1[var3] = var2;
        var2 = _closure1_slot0;
        var3 = var2.USER_COMMUNICATION_DISABLED;
        var2 = {};
        var5 = _closure1_slot0;
        var5 = var5.USER_COMMUNICATION_DISABLED;
        var2['type'] = var5;
        var5 = {};
        var6 = 60;
        var5['durationSeconds'] = var6;
        var2['metadata'] = var5;
        var1[var3] = var2;
        var2 = _closure1_slot0;
        var3 = var2.QUARANTINE_USER;
        var2 = {};
        var4 = _closure1_slot0;
        var4 = var4.QUARANTINE_USER;
        var2['type'] = var4;
        var4 = {};
        var2['metadata'] = var4;
        var1[var3] = var2;
        return var1;
    };
    var _closure1_slot1 = var2;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var5 = {};
    var1 = true;
    var5['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var5);
    var1 = 0;
    var5 = var7[var1];
    var1 = undefined;
    var5 = var6.bind(var1)(var5);
    var5 = var5.AutomodActionType;
    var _closure1_slot0 = var5;
    var5 = 1;
    var5 = var7[var5];
    var7 = var6.bind(var1)(var5);
    var6 = var7.fileFinishedImporting;
    var5 = 'modules/guild_automod/AutomodActionUtils.tsx';
    var5 = var6.bind(var7)(var5);
    var5 = function getRuleDefaultActionsFromConfig(arg1) {
        var3 = _closure1_slot1;
        var2 = undefined;
        var2 = var3.bind(var2)();
        var _closure2_slot0 = var2;
        var2 = global;
        var4 = var2.Array;
        var3 = var4.from;
        var2 = arg1;
        var2 = var2.defaultActionTypes;
        var3 = var3.bind(var4)(var2);
        var2 = var3.map;
        var1 = function(arg1) {
            var2 = _closure2_slot0;
            var1 = arg1;
            var1 = var2[var1];
            return var1;
        };
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['getRuleDefaultActionsFromConfig'] = var5;
    var5 = function isActionFlagToChannel(arg1) {
        var1 = arg1;
        var2 = var1.type;
        var1 = _closure1_slot0;
        var1 = var1.FLAG_TO_CHANNEL;
        var1 = var2 === var1;
        return var1;
    };
    var3['isActionFlagToChannel'] = var5;
    var5 = function isActionUserCommunicationDisabled(arg1) {
        var1 = arg1;
        var2 = var1.type;
        var1 = _closure1_slot0;
        var1 = var1.USER_COMMUNICATION_DISABLED;
        var1 = var2 === var1;
        return var1;
    };
    var3['isActionUserCommunicationDisabled'] = var5;
    var5 = function isActionBlockMessage(arg1) {
        var1 = arg1;
        var2 = var1.type;
        var1 = _closure1_slot0;
        var1 = var1.BLOCK_MESSAGE;
        var1 = var2 === var1;
        return var1;
    };
    var3['isActionBlockMessage'] = var5;
    var4 = function isActionQuarantineUser(arg1) {
        var1 = arg1;
        var2 = var1.type;
        var1 = _closure1_slot0;
        var1 = var1.QUARANTINE_USER;
        var1 = var2 === var1;
        return var1;
    };
    var3['isActionQuarantineUser'] = var4;
    var3['getDefaultActions'] = var2;
    return var1;
})();