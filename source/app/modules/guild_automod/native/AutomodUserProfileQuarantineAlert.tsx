// app/modules/guild_automod/native/AutomodUserProfileQuarantineAlert.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 6;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.QUARANTINE_USER_ALERT_KEY;
    var _closure1_slot8 = tango;
    tango = 7;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot9 = tango;
    tango = 8;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.GuildMemberFlags;
    var _closure1_slot10 = tango;
    tango = 9;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot11 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot12 = tango;
    tango = 10;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tango['wrapper'] = verify;
    offset = 'center';
    verify = {'flexDirection': 'column', 'alignItems': 'center'};
    tango['body'] = verify;
    verify = {'width': 48, 'height': 48, 'tintColor': null, 'marginBottom': 16};
    yankee = 11;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_DANGER;
    verify['tintColor'] = yankee;
    tango['mainIcon'] = verify;
    verify = {'marginBottom': 16, 'textAlign': 'center'};
    tango['title'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tango['description'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot13 = tango;
    tango = 24;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_automod/native/AutomodUserProfileQuarantineAlert.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: AutomodUserProfileQuarantineAlert
        _fun91998: for(var _fun91998_ip = 0; ; ) switch(_fun91998_ip) {
 0:
            tango = argFoo;
            yankee = tango.guildId;
            var _closure2_slot0 = yankee;
            options = null;
            zulu = Object.create(options);
            entity = 0;
            zulu['guildId'] = entity;
            sequence = {};
            vacuum = tango;
            control = zulu;
            oscar = copyDataProperties(sequence, vacuum, control);
            tango = undefined;
            var _closure2_slot2 = tango;
            mike = _closure1_slot13;
            foxtrot = mike.bind(tango)();
            zulu = _closure1_slot0;
            offset = _closure1_slot2;
            mike = 12;
            golf = offset[mike];
            kilo = zulu.bind(tango)(golf);
            backup = kilo.useStateFromStores;
            golf = _closure1_slot5;
            romeo = new Array(1);
            romeo[0] = golf;
            golf = function() {
                mike = _closure1_slot5;
                entity = mike.getId;
                entity = entity.bind(mike)();
                return entity;
            };
            golf = backup.bind(kilo)(romeo, golf);
            var _closure2_slot1 = golf;
            romeo = offset[mike];
            sizing = zulu.bind(tango)(romeo);
            kilo = sizing.useStateFromStores;
            romeo = _closure1_slot6;
            backup = new Array(1);
            backup[0] = romeo;
            romeo = new Array(2);
            romeo[0] = yankee;
            romeo[1] = golf;
            golf = function() {
                tango = _closure1_slot6;
                zulu = tango.getMember;
                mike = _closure2_slot0;
                entity = _closure2_slot1;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            golf = kilo.bind(sizing)(backup, golf, romeo);
            mike = offset[mike];
            backup = zulu.bind(tango)(mike);
            romeo = backup.useStateFromStores;
            mike = _closure1_slot7;
            offset = new Array(1);
            offset[0] = mike;
            zulu = new Array(1);
            zulu[0] = yankee;
            mike = function() {
                zulu = _closure1_slot7;
                mike = zulu.getGuild;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            zulu = romeo.bind(backup)(offset, mike, zulu);
            offset = options == zulu;
            mike = undefined;
            if(offset) { _fun91998_ip = 222; continue _fun91998 }
 217:
            mike = zulu.name;
 222:
            zulu = options != mike;
            source = '';
            if(!zulu) { _fun91998_ip = 236; continue _fun91998 }
 233:
            source = mike;
 236:
            zulu = _closure1_slot0;
            offset = _closure1_slot2;
            mike = 13;
            mike = offset[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.getAutomodQuarantinedGuildMemberFlags;
            golf = mike.bind(zulu)(golf);
            zulu = golf.has;
            mike = _closure1_slot10;
            mike = mike.AUTOMOD_QUARANTINED_USERNAME_OR_GUILD_NICKNAME;
            offset = zulu.bind(golf)(mike);
            romeo = _closure1_slot0;
            mike = _closure1_slot2;
            output = 14;
            zulu = mike[output];
            zulu = romeo.bind(tango)(zulu);
            golf = zulu.intl;
            zulu = golf.string;
            mike = mike[output];
            mike = romeo.bind(tango)(mike);
            mike = mike.t;
            if(offset) { _fun91998_ip = 347; continue _fun91998 }
 334:
            offset = mike.QRN+Sk;
            romeo = zulu.bind(golf)(offset);
            _fun91998_ip = 358; continue _fun91998;
 347:
            mike = mike.SpDXIy;
            romeo = zulu.bind(golf)(mike);
 358:
            offset = _closure1_slot1;
            golf = _closure1_slot2;
            mike = 15;
            mike = golf[mike];
            zulu = offset.bind(tango)(mike);
            mike = 16;
            mike = golf[mike];
            mike = offset.bind(tango)(mike);
            mike = mike.AUTOMOD_PROFILE_QUARANTINE_ALERT;
            mike = zulu.bind(tango)(mike);
            offset = mike.analyticsLocations;
            zulu = _closure1_slot0;
            mike = 17;
            mike = golf[mike];
            golf = zulu.bind(tango)(mike);
            zulu = golf.useOpenFixQuarantinedProfileModal;
            mike = {};
            mike['guildId'] = yankee;
            mike['analyticsLocations'] = offset;
            offset = true;
            mike['openWithoutBackstack'] = offset;
            golf = zulu.bind(golf)(mike);
            zulu = _closure1_slot3;
            mike = 2;
            mike = zulu.bind(tango)(golf, mike);
            entity = mike[entity];
            _closure2_slot2 = entity;
            entity = 1;
            golf = mike[entity];
            if(golf) { _fun91998_ip = 535; continue _fun91998 }
 483:
            offset = _closure1_slot0;
            entity = _closure1_slot2;
            mike = entity[output];
            mike = offset.bind(tango)(mike);
            zulu = mike.intl;
            mike = zulu.string;
            entity = entity[output];
            entity = offset.bind(tango)(entity);
            entity = entity.t;
            entity = entity.FFj5Dg;
            romeo = mike.bind(zulu)(entity);
 535:
            offset = _closure1_slot0;
            entity = _closure1_slot2;
            mike = entity[output];
            mike = offset.bind(tango)(mike);
            zulu = mike.intl;
            mike = zulu.string;
            entity = entity[output];
            entity = offset.bind(tango)(entity);
            entity = entity.t;
            if(golf) { _fun91998_ip = 592; continue _fun91998 }
 579:
            golf = entity.WikgZ2;
            golf = mike.bind(zulu)(golf);
            _fun91998_ip = 603; continue _fun91998;
 592:
            entity = entity./PGQf3;
            golf = mike.bind(zulu)(entity);
 603:
            mike = _closure1_slot1;
            offset = _closure1_slot2;
            entity = 18;
            entity = offset[entity];
            zulu = mike.bind(tango)(entity);
            entity = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 19;
                mike = mike[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.track;
                mike = _closure1_slot9;
                zulu = mike.OPEN_MODAL;
                mike = {};
                oscar = _closure1_slot8;
                mike['type'] = oscar;
                golf = _closure2_slot0;
                mike['guild_id'] = golf;
                oscar = _closure2_slot1;
                mike['other_user_id'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            entity = zulu.bind(tango)(entity);
            zulu = _closure1_slot11;
            entity = 20;
            entity = offset[entity];
            mike = mike.bind(tango)(entity);
            entity = {};
            sequence = entity;
            vacuum = oscar;
            yankee = copyDataProperties(sequence, vacuum);
            backup = foxtrot.wrapper;
            yankee = 'style';
            entity[yankee] = backup;
            kilo = _closure1_slot0;
            yankee = offset[output];
            yankee = kilo.bind(tango)(yankee);
            backup = yankee.intl;
            yankee = backup.string;
            offset = offset[output];
            offset = kilo.bind(tango)(offset);
            offset = offset.t;
            offset = offset.ETE/oK;
            yankee = yankee.bind(backup)(offset);
            offset = 'cancelText';
            entity[offset] = yankee;
            offset = options == oscar;
            options = undefined;
            if(offset) { _fun91998_ip = 750; continue _fun91998 }
 744:
            options = oscar.onClose;
 750:
            oscar = 'onCancel';
            entity[oscar] = options;
            oscar = 'confirmText';
            entity[oscar] = golf;
            oscar = function() { // Original name: onConfirm
                mike = _closure2_slot2;
                entity = undefined;
                mike = mike.bind(entity)();
                return entity;
            };
            report = 'onConfirm';
            entity[report] = oscar;
            golf = _closure1_slot12;
            oscar = _closure1_slot4;
            report = {};
            options = foxtrot.body;
            report['style'] = options;
            yankee = _closure1_slot11;
            sizing = _closure1_slot1;
            backup = _closure1_slot2;
            kilo = 21;
            options = backup[kilo];
            offset = sizing.bind(tango)(options);
            options = {};
            result = 22;
            result = backup[result];
            result = sizing.bind(tango)(result);
            options['source'] = result;
            kilo = backup[kilo];
            kilo = sizing.bind(tango)(kilo);
            kilo = kilo.Sizes;
            kilo = kilo.CUSTOM;
            options['size'] = kilo;
            kilo = foxtrot.mainIcon;
            options['style'] = kilo;
            offset = yankee.bind(tango)(offset, options);
            options = new Array(3);
            options[0] = offset;
            offset = _closure1_slot0;
            verify = 23;
            kilo = backup[verify];
            kilo = offset.bind(tango)(kilo);
            sizing = kilo.Text;
            kilo = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-md/medium', 'color': 'header-primary'};
            result = foxtrot.title;
            kilo['style'] = result;
            result = backup[output];
            result = offset.bind(tango)(result);
            update = result.intl;
            echo = update.format;
            output = backup[output];
            output = offset.bind(tango)(output);
            output = output.t;
            result = output.kcYdTk;
            output = {};
            output['guildName'] = source;
            output = echo.bind(update)(result, output);
            kilo['children'] = output;
            kilo = yankee.bind(tango)(sizing, kilo);
            options[1] = kilo;
            verify = backup[verify];
            verify = offset.bind(tango)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            foxtrot = foxtrot.description;
            verify['style'] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[2] = verify;
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = 'children';
            entity[report] = oscar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();