// app/modules/guild_automod/native/AutomodUserProfileQuarantineAlert.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QUARANTINE_USER_ALERT_KEY;
    var _closure1_slot8 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot9 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildMemberFlags;
    var _closure1_slot10 = tangon;
    tangon = 9;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot11 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot12 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tangon['wrapper'] = verify;
    offset = 'center';
    verify = {'flexDirection': 'column', 'alignItems': 'center'};
    tangon['body'] = verify;
    verify = {'width': 48, 'height': 48, 'tintColor': null, 'marginBottom': 16};
    yankee = 11;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_DANGER;
    verify['tintColor'] = yankee;
    tangon['mainIcon'] = verify;
    verify = {'marginBottom': 16, 'textAlign': 'center'};
    tangon['title'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['description'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot13 = tangon;
    tangon = 24;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_automod/native/AutomodUserProfileQuarantineAlert.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AutomodUserProfileQuarantineAlert
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = argFoo;
            yankee = tangon.guildId;
            var _closure2_slot0 = yankee;
            option = null;
            zuuluu = Object.create(option);
            entity = 0;
            zuuluu['guildId'] = entity;
            sequen = {};
            vacuum = tangon;
            ctrled = zuuluu;
            oscard = copyDataProperties(sequen, vacuum, ctrled);
            tangon = undefined;
            var _closure2_slot2 = tangon;
            michal = _closure1_slot13;
            foxtra = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            offset = _closure1_slot2;
            michal = 12;
            golfie = offset[michal];
            kiloes = zuuluu.bind(tangon)(golfie);
            backup = kiloes.useStateFromStores;
            golfie = _closure1_slot5;
            romeon = new Array(1);
            romeon[0] = golfie;
            golfie = function() {
                michal = _closure1_slot5;
                entity = michal.getId;
                entity = entity.bind(michal)();
                return entity;
            };
            golfie = backup.bind(kiloes)(romeon, golfie);
            var _closure2_slot1 = golfie;
            romeon = offset[michal];
            sizing = zuuluu.bind(tangon)(romeon);
            kiloes = sizing.useStateFromStores;
            romeon = _closure1_slot6;
            backup = new Array(1);
            backup[0] = romeon;
            romeon = new Array(2);
            romeon[0] = yankee;
            romeon[1] = golfie;
            golfie = function() {
                tangon = _closure1_slot6;
                zuuluu = tangon.getMember;
                michal = _closure2_slot0;
                entity = _closure2_slot1;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            golfie = kiloes.bind(sizing)(backup, golfie, romeon);
            michal = offset[michal];
            backup = zuuluu.bind(tangon)(michal);
            romeon = backup.useStateFromStores;
            michal = _closure1_slot7;
            offset = new Array(1);
            offset[0] = michal;
            zuuluu = new Array(1);
            zuuluu[0] = yankee;
            michal = function() {
                zuuluu = _closure1_slot7;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            zuuluu = romeon.bind(backup)(offset, michal, zuuluu);
            offset = option == zuuluu;
            michal = undefined;
            if(offset) { _fun00002_ip = 222; continue _fun00001 }
 217:
            michal = zuuluu.name;
 222:
            zuuluu = option != michal;
            source = '';
            if(!zuuluu) { _fun00002_ip = 236; continue _fun00001 }
 233:
            source = michal;
 236:
            zuuluu = _closure1_slot0;
            offset = _closure1_slot2;
            michal = 13;
            michal = offset[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.getAutomodQuarantinedGuildMemberFlags;
            golfie = michal.bind(zuuluu)(golfie);
            zuuluu = golfie.has;
            michal = _closure1_slot10;
            michal = michal.AUTOMOD_QUARANTINED_USERNAME_OR_GUILD_NICKNAME;
            offset = zuuluu.bind(golfie)(michal);
            romeon = _closure1_slot0;
            michal = _closure1_slot2;
            output = 14;
            zuuluu = michal[output];
            zuuluu = romeon.bind(tangon)(zuuluu);
            golfie = zuuluu.intl;
            zuuluu = golfie.string;
            michal = michal[output];
            michal = romeon.bind(tangon)(michal);
            michal = michal.t;
            if(offset) { _fun00002_ip = 349; continue _fun00001 }
 334:
            offset = michal.QRN+Sk;
            romeon = zuuluu.bind(golfie)(offset);
            _fun00002_ip = 362; continue _fun00001;
 349:
            michal = michal.SpDXIy;
            romeon = zuuluu.bind(golfie)(michal);
 362:
            offset = _closure1_slot1;
            golfie = _closure1_slot2;
            michal = 15;
            michal = golfie[michal];
            zuuluu = offset.bind(tangon)(michal);
            michal = 16;
            michal = golfie[michal];
            michal = offset.bind(tangon)(michal);
            michal = michal.AUTOMOD_PROFILE_QUARANTINE_ALERT;
            michal = zuuluu.bind(tangon)(michal);
            offset = michal.analyticsLocations;
            zuuluu = _closure1_slot0;
            michal = 17;
            michal = golfie[michal];
            golfie = zuuluu.bind(tangon)(michal);
            zuuluu = golfie.useOpenFixQuarantinedProfileModal;
            michal = {};
            michal['guildId'] = yankee;
            michal['analyticsLocations'] = offset;
            offset = true;
            michal['openWithoutBackstack'] = offset;
            golfie = zuuluu.bind(golfie)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            michal = zuuluu.bind(tangon)(golfie, michal);
            entity = michal[entity];
            _closure2_slot2 = entity;
            entity = 1;
            golfie = michal[entity];
            if(golfie) { _fun00002_ip = 541; continue _fun00001 }
 487:
            offset = _closure1_slot0;
            entity = _closure1_slot2;
            michal = entity[output];
            michal = offset.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = entity[output];
            entity = offset.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.FFj5Dg;
            romeon = michal.bind(zuuluu)(entity);
 541:
            offset = _closure1_slot0;
            entity = _closure1_slot2;
            michal = entity[output];
            michal = offset.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = entity[output];
            entity = offset.bind(tangon)(entity);
            entity = entity.t;
            if(golfie) { _fun00002_ip = 600; continue _fun00001 }
 585:
            golfie = entity.WikgZ2;
            golfie = michal.bind(zuuluu)(golfie);
            _fun00002_ip = 611; continue _fun00001;
 600:
            entity = entity./PGQf3;
            golfie = michal.bind(zuuluu)(entity);
 611:
            michal = _closure1_slot1;
            offset = _closure1_slot2;
            entity = 18;
            entity = offset[entity];
            zuuluu = michal.bind(tangon)(entity);
            entity = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 19;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.track;
                michal = _closure1_slot9;
                zuuluu = michal.OPEN_MODAL;
                michal = {};
                oscard = _closure1_slot8;
                michal['type'] = oscard;
                golfie = _closure2_slot0;
                michal['guild_id'] = golfie;
                oscard = _closure2_slot1;
                michal['other_user_id'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            entity = zuuluu.bind(tangon)(entity);
            zuuluu = _closure1_slot11;
            entity = 20;
            entity = offset[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            sequen = entity;
            vacuum = oscard;
            yankee = copyDataProperties(sequen, vacuum);
            backup = foxtra.wrapper;
            yankee = 'style';
            entity[yankee] = backup;
            kiloes = _closure1_slot0;
            yankee = offset[output];
            yankee = kiloes.bind(tangon)(yankee);
            backup = yankee.intl;
            yankee = backup.string;
            offset = offset[output];
            offset = kiloes.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.ETE/oK;
            yankee = yankee.bind(backup)(offset);
            offset = 'cancelText';
            entity[offset] = yankee;
            offset = option == oscard;
            option = undefined;
            if(offset) { _fun00002_ip = 758; continue _fun00001 }
 752:
            option = oscard.onClose;
 758:
            oscard = 'onCancel';
            entity[oscard] = option;
            oscard = 'confirmText';
            entity[oscard] = golfie;
            oscard = function() { // Original name: onConfirm
                michal = _closure2_slot2;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            report = 'onConfirm';
            entity[report] = oscard;
            golfie = _closure1_slot12;
            oscard = _closure1_slot4;
            report = {};
            option = foxtra.body;
            report['style'] = option;
            yankee = _closure1_slot11;
            sizing = _closure1_slot1;
            backup = _closure1_slot2;
            kiloes = 21;
            option = backup[kiloes];
            offset = sizing.bind(tangon)(option);
            option = {};
            result = 22;
            result = backup[result];
            result = sizing.bind(tangon)(result);
            option['source'] = result;
            kiloes = backup[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.Sizes;
            kiloes = kiloes.CUSTOM;
            option['size'] = kiloes;
            kiloes = foxtra.mainIcon;
            option['style'] = kiloes;
            offset = yankee.bind(tangon)(offset, option);
            option = new Array(3);
            option[0] = offset;
            offset = _closure1_slot0;
            verify = 23;
            kiloes = backup[verify];
            kiloes = offset.bind(tangon)(kiloes);
            sizing = kiloes.Text;
            kiloes = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-md/medium', 'color': 'header-primary'};
            result = foxtra.title;
            kiloes['style'] = result;
            result = backup[output];
            result = offset.bind(tangon)(result);
            update = result.intl;
            echoed = update.format;
            output = backup[output];
            output = offset.bind(tangon)(output);
            output = output.t;
            result = output.kcYdTk;
            output = {};
            output['guildName'] = source;
            output = echoed.bind(update)(result, output);
            kiloes['children'] = output;
            kiloes = yankee.bind(tangon)(sizing, kiloes);
            option[1] = kiloes;
            verify = backup[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            foxtra = foxtra.description;
            verify['style'] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = 'children';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();