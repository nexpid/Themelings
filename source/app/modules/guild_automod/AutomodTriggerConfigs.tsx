// app/modules/guild_automod/AutomodTriggerConfigs.tsx
export default (function(argFoo, argBar, _, argCorge, __, argFred, argPlugh) {
    verify = argBar;
    zulu = argFred;
    offset = argPlugh;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = offset;
    options = global;
    oscar = options.Object;
    report = oscar.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscar)(zulu, entity, tango);
    kilo = 0;
    report = offset[kilo];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(report);
    var _closure1_slot2 = tango;
    foxtrot = 1;
    tango = offset[foxtrot];
    tango = verify.bind(entity)(tango);
    yankee = tango.AutomodActionType;
    backup = tango.AutomodEventType;
    romeo = tango.AutomodTriggerType;
    var _closure1_slot3 = romeo;
    tango = tango.MENTION_SPAM_LIMIT_DEFAULT;
    var _closure1_slot4 = tango;
    golf = {};
    tango = 'new';
    golf['NEW'] = tango;
    tango = 'recommended';
    golf['RECOMMENDED'] = tango;
    tango = 'beta';
    golf['BETA'] = tango;
    tango = 'alpha';
    golf['ALPHA'] = tango;
    oscar = {};
    report = romeo.SPAM_LINK;
    tango = {};
    sizing = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscar = _closure1_slot1;
        entity = 2;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.ffR2cH;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['getDefaultRuleName'] = sizing;
    sizing = romeo.SPAM_LINK;
    tango['type'] = sizing;
    sizing = backup.MESSAGE_SEND;
    tango['eventType'] = sizing;
    tango['perGuildMaxCount'] = kilo;
    kilo = options.Set;
    sizing = kilo.prototype;
    sizing = Object.create(sizing, {constructor: {value: kilo}});
    source = sizing;
    kilo = new source[kilo](update);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['availableActionTypes'] = kilo;
    kilo = options.Set;
    sizing = kilo.prototype;
    sizing = Object.create(sizing, {constructor: {value: kilo}});
    source = sizing;
    kilo = new source[kilo](update);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['flags'] = kilo;
    kilo = options.Set;
    sizing = kilo.prototype;
    sizing = Object.create(sizing, {constructor: {value: kilo}});
    source = sizing;
    kilo = new source[kilo](update);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['defaultActionTypes'] = kilo;
    oscar[report] = tango;
    report = romeo.KEYWORD;
    tango = {};
    kilo = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscar = _closure1_slot1;
        entity = 2;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.ffR2cH;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['getDefaultRuleName'] = kilo;
    kilo = romeo.KEYWORD;
    tango['type'] = kilo;
    kilo = backup.MESSAGE_SEND;
    tango['eventType'] = kilo;
    kilo = 6;
    tango['perGuildMaxCount'] = kilo;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(3);
    kilo[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kilo[1] = sizing;
    sizing = yankee.USER_COMMUNICATION_DISABLED;
    kilo[2] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['availableActionTypes'] = kilo;
    kilo = options.Set;
    sizing = kilo.prototype;
    sizing = Object.create(sizing, {constructor: {value: kilo}});
    source = sizing;
    kilo = new source[kilo](update);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['flags'] = kilo;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(1);
    kilo[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['defaultActionTypes'] = kilo;
    oscar[report] = tango;
    report = romeo.ML_SPAM;
    tango = {};
    kilo = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscar = _closure1_slot1;
        entity = 2;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.puF/Oj;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['getDefaultRuleName'] = kilo;
    kilo = romeo.ML_SPAM;
    tango['type'] = kilo;
    kilo = backup.MESSAGE_SEND;
    tango['eventType'] = kilo;
    tango['perGuildMaxCount'] = foxtrot;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(2);
    kilo[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kilo[1] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['availableActionTypes'] = kilo;
    output = options.Set;
    kilo = output.prototype;
    sizing = Object.create(kilo, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['flags'] = kilo;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(1);
    kilo[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['defaultActionTypes'] = kilo;
    oscar[report] = tango;
    report = romeo.DEFAULT_KEYWORD_LIST;
    tango = {};
    kilo = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscar = _closure1_slot1;
        entity = 2;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.LnGhZm;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['getDefaultRuleName'] = kilo;
    kilo = romeo.DEFAULT_KEYWORD_LIST;
    tango['type'] = kilo;
    kilo = backup.MESSAGE_SEND;
    tango['eventType'] = kilo;
    tango['perGuildMaxCount'] = foxtrot;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(2);
    kilo[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kilo[1] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['availableActionTypes'] = kilo;
    output = options.Set;
    kilo = output.prototype;
    sizing = Object.create(kilo, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['flags'] = kilo;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(1);
    kilo[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['defaultActionTypes'] = kilo;
    oscar[report] = tango;
    report = romeo.MENTION_SPAM;
    tango = {};
    kilo = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscar = _closure1_slot1;
        entity = 2;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.pX7i6u;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['getDefaultRuleName'] = kilo;
    kilo = romeo.MENTION_SPAM;
    tango['type'] = kilo;
    kilo = backup.MESSAGE_SEND;
    tango['eventType'] = kilo;
    tango['perGuildMaxCount'] = foxtrot;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(3);
    kilo[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kilo[1] = sizing;
    sizing = yankee.USER_COMMUNICATION_DISABLED;
    kilo[2] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['availableActionTypes'] = kilo;
    output = options.Set;
    kilo = output.prototype;
    sizing = Object.create(kilo, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['flags'] = kilo;
    output = options.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kilo = new Array(1);
    kilo[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['defaultActionTypes'] = kilo;
    oscar[report] = tango;
    report = romeo.USER_PROFILE;
    tango = {};
    kilo = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscar = _closure1_slot1;
        entity = 2;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.q1L2v7;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['getDefaultRuleName'] = kilo;
    kilo = romeo.USER_PROFILE;
    tango['type'] = kilo;
    kilo = backup.GUILD_MEMBER_JOIN_OR_UPDATE;
    tango['eventType'] = kilo;
    tango['perGuildMaxCount'] = foxtrot;
    output = options.Set;
    sizing = yankee.QUARANTINE_USER;
    kilo = new Array(2);
    kilo[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kilo[1] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['availableActionTypes'] = kilo;
    output = options.Set;
    kilo = output.prototype;
    sizing = Object.create(kilo, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['flags'] = kilo;
    output = options.Set;
    sizing = yankee.QUARANTINE_USER;
    kilo = new Array(1);
    kilo[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kilo;
    kilo = new source[output](update, echo);
    kilo = kilo instanceof Object ? kilo : sizing;
    tango['defaultActionTypes'] = kilo;
    oscar[report] = tango;
    report = romeo.SERVER_POLICY;
    tango = {};
    kilo = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscar = _closure1_slot1;
        entity = 2;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.ZQr92N;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['getDefaultRuleName'] = kilo;
    kilo = romeo.SERVER_POLICY;
    tango['type'] = kilo;
    backup = backup.MESSAGE_SEND;
    tango['eventType'] = backup;
    tango['perGuildMaxCount'] = foxtrot;
    backup = options.Set;
    foxtrot = yankee.FLAG_TO_CHANNEL;
    yankee = new Array(1);
    yankee[0] = foxtrot;
    foxtrot = backup.prototype;
    foxtrot = Object.create(foxtrot, {constructor: {value: backup}});
    source = foxtrot;
    update = yankee;
    yankee = new source[backup](update, echo);
    yankee = yankee instanceof Object ? yankee : foxtrot;
    tango['availableActionTypes'] = yankee;
    backup = options.Set;
    foxtrot = golf.ALPHA;
    yankee = new Array(1);
    yankee[0] = foxtrot;
    foxtrot = backup.prototype;
    foxtrot = Object.create(foxtrot, {constructor: {value: backup}});
    source = foxtrot;
    update = yankee;
    yankee = new source[backup](update, echo);
    yankee = yankee instanceof Object ? yankee : foxtrot;
    tango['flags'] = yankee;
    options = options.Set;
    yankee = options.prototype;
    yankee = Object.create(yankee, {constructor: {value: options}});
    source = yankee;
    options = new source[options](update);
    options = options instanceof Object ? options : yankee;
    tango['defaultActionTypes'] = options;
    oscar[report] = tango;
    var _closure1_slot5 = oscar;
    report = {};
    tango = 'members';
    report['MEMBERS'] = tango;
    tango = 'content';
    report['CONTENT'] = tango;
    var _closure1_slot6 = report;
    tango = {};
    yankee = report.MEMBERS;
    options = romeo.USER_PROFILE;
    foxtrot = oscar[options];
    options = new Array(1);
    options[0] = foxtrot;
    tango[yankee] = options;
    yankee = report.CONTENT;
    options = romeo.SERVER_POLICY;
    foxtrot = oscar[options];
    options = new Array(5);
    options[0] = foxtrot;
    foxtrot = romeo.MENTION_SPAM;
    foxtrot = oscar[foxtrot];
    options[1] = foxtrot;
    foxtrot = romeo.ML_SPAM;
    foxtrot = oscar[foxtrot];
    options[2] = foxtrot;
    foxtrot = romeo.DEFAULT_KEYWORD_LIST;
    foxtrot = oscar[foxtrot];
    options[3] = foxtrot;
    romeo = romeo.KEYWORD;
    romeo = oscar[romeo];
    options[4] = romeo;
    tango[yankee] = options;
    var _closure1_slot7 = tango;
    options = 5;
    options = offset[options];
    offset = verify.bind(entity)(options);
    verify = offset.fileFinishedImporting;
    options = 'modules/guild_automod/AutomodTriggerConfigs.tsx';
    options = verify.bind(offset)(options);
    zulu['AutomodTriggerConfigFlags'] = golf;
    zulu['triggerConfigs'] = oscar;
    zulu['AutomodTriggerCategory'] = report;
    zulu['AUTOMOD_RULE_CONFIGS_BY_CATEGORY'] = tango;
    tango = function(argFoo, argBar) {
        mike = _closure1_slot5;
        entity = argFoo;
        entity = mike[entity];
        zulu = entity.flags;
        mike = zulu.has;
        entity = argBar;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['checkTriggerTypeForFlag'] = tango;
    tango = function(argFoo) { // Original name: getAvailableActionTypes
        entity = global;
        zulu = entity.Array;
        mike = zulu.from;
        tango = _closure1_slot5;
        entity = argFoo;
        entity = tango[entity];
        entity = entity.availableActionTypes;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['getAvailableActionTypes'] = tango;
    tango = function(argFoo, argBar) { // Original name: validateRuleByTriggerConfigOrThrow
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            options = argBar;
            mike = entity.id;
            var _closure2_slot0 = mike;
            mike = entity.eventType;
            tango = entity.triggerType;
            var _closure2_slot1 = tango;
            oscar = entity.actions;
            entity = _closure1_slot5;
            entity = entity[tango];
            var _closure2_slot2 = entity;
            golf = options.filter;
            report = function(argFoo) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zulu = argFoo;
                    tango = _closure2_slot0;
                    entity = zulu.id;
                    entity = tango !== entity;
                    if(!entity) { _fun00004_ip = 36; continue _fun00003 }
 22:
                    zulu = zulu.triggerType;
                    mike = _closure2_slot1;
                    entity = zulu === mike;
 36:
                    return entity;
                }
            };
            report = golf.bind(options)(report);
            golf = report.length;
            report = entity.perGuildMaxCount;
            if(!(!(golf > report))) { _fun00002_ip = 193; continue _fun00001 }
 86:
            report = oscar.some;
            zulu = function(argFoo) {
                entity = _closure2_slot2;
                zulu = entity.availableActionTypes;
                mike = zulu.has;
                entity = argFoo;
                entity = entity.type;
                entity = mike.bind(zulu)(entity);
                entity = !entity;
                return entity;
            };
            zulu = report.bind(oscar)(zulu);
            if(zulu) { _fun00002_ip = 157; continue _fun00001 }
 107:
            entity = entity.eventType;
            if(!(mike === entity)) { _fun00002_ip = 121; continue _fun00001 }
 117:
            entity = undefined;
            return entity;
 121:
            entity = global;
            zulu = entity.Error;
            entity = zulu.prototype;
            mike = Object.create(entity, {constructor: {value: zulu}});
            verify = 'You have provided an event type that is not available for this trigger type';
            offset = mike;
            entity = new offset[zulu](verify, options);
            entity = entity instanceof Object ? entity : mike;
            throw entity;
 157:
            entity = global;
            zulu = entity.Error;
            entity = zulu.prototype;
            mike = Object.create(entity, {constructor: {value: zulu}});
            verify = 'You have provided an action that is not available for this trigger type';
            offset = mike;
            entity = new offset[zulu](verify, options);
            entity = entity instanceof Object ? entity : mike;
            throw entity;
 193:
            entity = global;
            zulu = entity.Error;
            entity = entity.HermesInternal;
            mike = entity.concat;
            entity = 'You have exceeded the maximum number of rules of type ';
            verify = mike.bind(entity)(tango);
            mike = zulu.prototype;
            mike = Object.create(mike, {constructor: {value: zulu}});
            offset = mike;
            entity = new offset[zulu](verify, options);
            entity = entity instanceof Object ? entity : mike;
            throw entity;
        }
    };
    zulu['validateRuleByTriggerConfigOrThrow'] = tango;
    tango = function(argFoo) { // Original name: useAvailableTriggerTypes
        report = _closure1_slot0;
        tango = _closure1_slot1;
        zulu = 3;
        tango = tango[zulu];
        zulu = undefined;
        report = report.bind(zulu)(tango);
        tango = report.useIsUserProfileRuleEnabled;
        zulu = argFoo;
        report = tango.bind(report)(zulu);
        var _closure2_slot0 = report;
        tango = _closure1_slot2;
        zulu = tango.useMemo;
        mike = new Array(1);
        mike[0] = report;
        entity = function() {
            tango = {};
            mike = _closure1_slot6;
            report = mike.MEMBERS;
            zulu = new Array(0);
            tango[report] = zulu;
            zulu = mike.CONTENT;
            mike = new Array(0);
            tango[zulu] = mike;
            mike = global;
            zulu = mike.Object;
            mike = zulu.keys;
            entity = _closure1_slot7;
            zulu = mike.bind(zulu)(entity);
            mike = zulu.reduce;
            entity = function(argFoo, argBar) {
                entity = argFoo;
                zulu = argBar;
                tango = _closure1_slot7;
                oscar = tango[zulu];
                report = oscar.filter;
                tango = function(argFoo) {
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        zulu = argFoo;
                        tango = zulu.type;
                        entity = _closure1_slot3;
                        entity = entity.SERVER_POLICY;
                        entity = tango !== entity;
                        if(!entity) { _fun00006_ip = 81; continue _fun00005 }
 28:
                        tango = zulu.type;
                        mike = _closure1_slot3;
                        mike = mike.USER_PROFILE;
                        tango = tango === mike;
                        if(!tango) { _fun00006_ip = 60; continue _fun00005 }
 50:
                        mike = _closure2_slot0;
                        tango = !mike;
 60:
                        mike = !tango;
                        if(tango) { _fun00006_ip = 78; continue _fun00005 }
 66:
                        tango = zulu.perGuildMaxCount;
                        zulu = 0;
                        mike = tango > zulu;
 78:
                        entity = mike;
 81:
                        return entity;
                    }
                };
                report = report.bind(oscar)(tango);
                tango = report.map;
                mike = function(argFoo) {
                    entity = argFoo;
                    entity = entity.type;
                    return entity;
                };
                mike = tango.bind(report)(mike);
                entity[zulu] = mike;
                return entity;
            };
            entity = mike.bind(zulu)(entity, tango);
            return entity;
        };
        entity = zulu.bind(tango)(entity, mike);
        return entity;
    };
    zulu['useAvailableTriggerTypes'] = tango;
    mike = function(argFoo, argBar) { // Original name: getDefaultTriggerMetadataForTriggerType
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            report = argFoo;
            tango = _closure1_slot0;
            mike = _closure1_slot1;
            entity = 4;
            mike = mike[entity];
            entity = undefined;
            oscar = tango.bind(entity)(mike);
            tango = oscar.isInMentionRaidExperiment;
            mike = argBar;
            mike = tango.bind(oscar)(mike);
            tango = _closure1_slot3;
            tango = tango.DEFAULT_KEYWORD_LIST;
            if(!(tango !== report)) { _fun00008_ip = 180; continue _fun00007 }
 59:
            tango = _closure1_slot3;
            tango = tango.USER_PROFILE;
            if(!(tango !== report)) { _fun00008_ip = 149; continue _fun00007 }
 73:
            tango = _closure1_slot3;
            tango = tango.KEYWORD;
            if(!(tango !== report)) { _fun00008_ip = 149; continue _fun00007 }
 87:
            tango = _closure1_slot3;
            tango = tango.MENTION_SPAM;
            if(!(tango !== report)) { _fun00008_ip = 127; continue _fun00007 }
 101:
            tango = _closure1_slot3;
            tango = tango.ML_SPAM;
            if(!(tango !== report)) { _fun00008_ip = 125; continue _fun00007 }
 115:
            tango = _closure1_slot3;
            tango = tango.SERVER_POLICY;
 125:
            return entity;
 127:
            entity = {};
            zulu = _closure1_slot4;
            entity['mentionTotalLimit'] = zulu;
            entity['mentionRaidProtectionEnabled'] = mike;
            return entity;
 149:
            entity = {};
            mike = new Array(0);
            entity['keywordFilter'] = mike;
            mike = new Array(0);
            entity['regexPatterns'] = mike;
            mike = new Array(0);
            entity['allowList'] = mike;
            return entity;
 180:
            entity = {};
            mike = new Array(0);
            entity['allowList'] = mike;
            mike = new Array(0);
            entity['presets'] = mike;
            return entity;
        }
    };
    zulu['getDefaultTriggerMetadataForTriggerType'] = mike;
    return entity;
})();