// app/modules/guild_automod/AutomodTriggerConfigs.tsx
export default (function(native1, native2, native3, native4, native5, native6, native7) {
    var9 = native2;
    var3 = native6;
    var10 = native7;
    var _closure1_slot0 = var9;
    var _closure1_slot1 = var10;
    var8 = global;
    var6 = var8.Object;
    var5 = var6.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var5.bind(var6)(var3, var1, var4);
    var15 = 0;
    var5 = var10[var15];
    var4 = native4;
    var1 = undefined;
    var4 = var4.bind(var1)(var5);
    var _closure1_slot2 = var4;
    var13 = 1;
    var4 = var10[var13];
    var4 = var9.bind(var1)(var4);
    var11 = var4.AutomodActionType;
    var14 = var4.AutomodEventType;
    var12 = var4.AutomodTriggerType;
    var _closure1_slot3 = var12;
    var4 = var4.MENTION_SPAM_LIMIT_DEFAULT;
    var _closure1_slot4 = var4;
    var7 = {};
    var4 = 'new';
    var7['NEW'] = var4;
    var4 = 'recommended';
    var7['RECOMMENDED'] = var4;
    var4 = 'beta';
    var7['BETA'] = var4;
    var4 = 'alpha';
    var7['ALPHA'] = var4;
    var6 = {};
    var5 = var12.SPAM_LINK;
    var4 = {};
    var16 = function getDefaultRuleName() {
        var5 = _closure1_slot0;
        var6 = _closure1_slot1;
        var1 = 2;
        var2 = var6[var1];
        var4 = undefined;
        var2 = var5.bind(var4)(var2);
        var3 = var2.intl;
        var2 = var3.string;
        var1 = var6[var1];
        var1 = var5.bind(var4)(var1);
        var1 = var1.t;
        var1 = var1.ffR2cH;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['getDefaultRuleName'] = var16;
    var16 = var12.SPAM_LINK;
    var4['type'] = var16;
    var16 = var14.MESSAGE_SEND;
    var4['eventType'] = var16;
    var4['perGuildMaxCount'] = var15;
    var15 = var8.Set;
    var16 = var15.prototype;
    var16 = Object.create(var16, {constructor: {value: var15}});
    var21 = var16;
    var15 = new var21[var15](var20);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['availableActionTypes'] = var15;
    var15 = var8.Set;
    var16 = var15.prototype;
    var16 = Object.create(var16, {constructor: {value: var15}});
    var21 = var16;
    var15 = new var21[var15](var20);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['flags'] = var15;
    var15 = var8.Set;
    var16 = var15.prototype;
    var16 = Object.create(var16, {constructor: {value: var15}});
    var21 = var16;
    var15 = new var21[var15](var20);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['defaultActionTypes'] = var15;
    var6[var5] = var4;
    var5 = var12.KEYWORD;
    var4 = {};
    var15 = function getDefaultRuleName() {
        var5 = _closure1_slot0;
        var6 = _closure1_slot1;
        var1 = 2;
        var2 = var6[var1];
        var4 = undefined;
        var2 = var5.bind(var4)(var2);
        var3 = var2.intl;
        var2 = var3.string;
        var1 = var6[var1];
        var1 = var5.bind(var4)(var1);
        var1 = var1.t;
        var1 = var1.ffR2cH;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['getDefaultRuleName'] = var15;
    var15 = var12.KEYWORD;
    var4['type'] = var15;
    var15 = var14.MESSAGE_SEND;
    var4['eventType'] = var15;
    var15 = 6;
    var4['perGuildMaxCount'] = var15;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(3);
    var15[0] = var16;
    var16 = var11.FLAG_TO_CHANNEL;
    var15[1] = var16;
    var16 = var11.USER_COMMUNICATION_DISABLED;
    var15[2] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['availableActionTypes'] = var15;
    var15 = var8.Set;
    var16 = var15.prototype;
    var16 = Object.create(var16, {constructor: {value: var15}});
    var21 = var16;
    var15 = new var21[var15](var20);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['flags'] = var15;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(1);
    var15[0] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['defaultActionTypes'] = var15;
    var6[var5] = var4;
    var5 = var12.ML_SPAM;
    var4 = {};
    var15 = function getDefaultRuleName() {
        var5 = _closure1_slot0;
        var6 = _closure1_slot1;
        var1 = 2;
        var2 = var6[var1];
        var4 = undefined;
        var2 = var5.bind(var4)(var2);
        var3 = var2.intl;
        var2 = var3.string;
        var1 = var6[var1];
        var1 = var5.bind(var4)(var1);
        var1 = var1.t;
        var1 = var1.puF/Oj;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['getDefaultRuleName'] = var15;
    var15 = var12.ML_SPAM;
    var4['type'] = var15;
    var15 = var14.MESSAGE_SEND;
    var4['eventType'] = var15;
    var4['perGuildMaxCount'] = var13;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(2);
    var15[0] = var16;
    var16 = var11.FLAG_TO_CHANNEL;
    var15[1] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['availableActionTypes'] = var15;
    var17 = var8.Set;
    var15 = var17.prototype;
    var16 = Object.create(var15, {constructor: {value: var17}});
    var20 = new Array(0);
    var21 = var16;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['flags'] = var15;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(1);
    var15[0] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['defaultActionTypes'] = var15;
    var6[var5] = var4;
    var5 = var12.DEFAULT_KEYWORD_LIST;
    var4 = {};
    var15 = function getDefaultRuleName() {
        var5 = _closure1_slot0;
        var6 = _closure1_slot1;
        var1 = 2;
        var2 = var6[var1];
        var4 = undefined;
        var2 = var5.bind(var4)(var2);
        var3 = var2.intl;
        var2 = var3.string;
        var1 = var6[var1];
        var1 = var5.bind(var4)(var1);
        var1 = var1.t;
        var1 = var1.LnGhZm;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['getDefaultRuleName'] = var15;
    var15 = var12.DEFAULT_KEYWORD_LIST;
    var4['type'] = var15;
    var15 = var14.MESSAGE_SEND;
    var4['eventType'] = var15;
    var4['perGuildMaxCount'] = var13;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(2);
    var15[0] = var16;
    var16 = var11.FLAG_TO_CHANNEL;
    var15[1] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['availableActionTypes'] = var15;
    var17 = var8.Set;
    var15 = var17.prototype;
    var16 = Object.create(var15, {constructor: {value: var17}});
    var20 = new Array(0);
    var21 = var16;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['flags'] = var15;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(1);
    var15[0] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['defaultActionTypes'] = var15;
    var6[var5] = var4;
    var5 = var12.MENTION_SPAM;
    var4 = {};
    var15 = function getDefaultRuleName() {
        var5 = _closure1_slot0;
        var6 = _closure1_slot1;
        var1 = 2;
        var2 = var6[var1];
        var4 = undefined;
        var2 = var5.bind(var4)(var2);
        var3 = var2.intl;
        var2 = var3.string;
        var1 = var6[var1];
        var1 = var5.bind(var4)(var1);
        var1 = var1.t;
        var1 = var1.pX7i6u;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['getDefaultRuleName'] = var15;
    var15 = var12.MENTION_SPAM;
    var4['type'] = var15;
    var15 = var14.MESSAGE_SEND;
    var4['eventType'] = var15;
    var4['perGuildMaxCount'] = var13;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(3);
    var15[0] = var16;
    var16 = var11.FLAG_TO_CHANNEL;
    var15[1] = var16;
    var16 = var11.USER_COMMUNICATION_DISABLED;
    var15[2] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['availableActionTypes'] = var15;
    var17 = var8.Set;
    var15 = var17.prototype;
    var16 = Object.create(var15, {constructor: {value: var17}});
    var20 = new Array(0);
    var21 = var16;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['flags'] = var15;
    var17 = var8.Set;
    var16 = var11.BLOCK_MESSAGE;
    var15 = new Array(1);
    var15[0] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['defaultActionTypes'] = var15;
    var6[var5] = var4;
    var5 = var12.USER_PROFILE;
    var4 = {};
    var15 = function getDefaultRuleName() {
        var5 = _closure1_slot0;
        var6 = _closure1_slot1;
        var1 = 2;
        var2 = var6[var1];
        var4 = undefined;
        var2 = var5.bind(var4)(var2);
        var3 = var2.intl;
        var2 = var3.string;
        var1 = var6[var1];
        var1 = var5.bind(var4)(var1);
        var1 = var1.t;
        var1 = var1.q1L2v7;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['getDefaultRuleName'] = var15;
    var15 = var12.USER_PROFILE;
    var4['type'] = var15;
    var15 = var14.GUILD_MEMBER_JOIN_OR_UPDATE;
    var4['eventType'] = var15;
    var4['perGuildMaxCount'] = var13;
    var17 = var8.Set;
    var16 = var11.QUARANTINE_USER;
    var15 = new Array(2);
    var15[0] = var16;
    var16 = var11.FLAG_TO_CHANNEL;
    var15[1] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['availableActionTypes'] = var15;
    var17 = var8.Set;
    var15 = var17.prototype;
    var16 = Object.create(var15, {constructor: {value: var17}});
    var20 = new Array(0);
    var21 = var16;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['flags'] = var15;
    var17 = var8.Set;
    var16 = var11.QUARANTINE_USER;
    var15 = new Array(1);
    var15[0] = var16;
    var16 = var17.prototype;
    var16 = Object.create(var16, {constructor: {value: var17}});
    var21 = var16;
    var20 = var15;
    var15 = new var21[var17](var20, var19);
    var15 = var15 instanceof Object ? var15 : var16;
    var4['defaultActionTypes'] = var15;
    var6[var5] = var4;
    var5 = var12.SERVER_POLICY;
    var4 = {};
    var15 = function getDefaultRuleName() {
        var5 = _closure1_slot0;
        var6 = _closure1_slot1;
        var1 = 2;
        var2 = var6[var1];
        var4 = undefined;
        var2 = var5.bind(var4)(var2);
        var3 = var2.intl;
        var2 = var3.string;
        var1 = var6[var1];
        var1 = var5.bind(var4)(var1);
        var1 = var1.t;
        var1 = var1.ZQr92N;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var4['getDefaultRuleName'] = var15;
    var15 = var12.SERVER_POLICY;
    var4['type'] = var15;
    var14 = var14.MESSAGE_SEND;
    var4['eventType'] = var14;
    var4['perGuildMaxCount'] = var13;
    var14 = var8.Set;
    var13 = var11.FLAG_TO_CHANNEL;
    var11 = new Array(1);
    var11[0] = var13;
    var13 = var14.prototype;
    var13 = Object.create(var13, {constructor: {value: var14}});
    var21 = var13;
    var20 = var11;
    var11 = new var21[var14](var20, var19);
    var11 = var11 instanceof Object ? var11 : var13;
    var4['availableActionTypes'] = var11;
    var14 = var8.Set;
    var13 = var7.ALPHA;
    var11 = new Array(1);
    var11[0] = var13;
    var13 = var14.prototype;
    var13 = Object.create(var13, {constructor: {value: var14}});
    var21 = var13;
    var20 = var11;
    var11 = new var21[var14](var20, var19);
    var11 = var11 instanceof Object ? var11 : var13;
    var4['flags'] = var11;
    var8 = var8.Set;
    var11 = var8.prototype;
    var11 = Object.create(var11, {constructor: {value: var8}});
    var21 = var11;
    var8 = new var21[var8](var20);
    var8 = var8 instanceof Object ? var8 : var11;
    var4['defaultActionTypes'] = var8;
    var6[var5] = var4;
    var _closure1_slot5 = var6;
    var5 = {};
    var4 = 'members';
    var5['MEMBERS'] = var4;
    var4 = 'content';
    var5['CONTENT'] = var4;
    var _closure1_slot6 = var5;
    var4 = {};
    var11 = var5.MEMBERS;
    var8 = var12.USER_PROFILE;
    var13 = var6[var8];
    var8 = new Array(1);
    var8[0] = var13;
    var4[var11] = var8;
    var11 = var5.CONTENT;
    var8 = var12.SERVER_POLICY;
    var13 = var6[var8];
    var8 = new Array(5);
    var8[0] = var13;
    var13 = var12.MENTION_SPAM;
    var13 = var6[var13];
    var8[1] = var13;
    var13 = var12.ML_SPAM;
    var13 = var6[var13];
    var8[2] = var13;
    var13 = var12.DEFAULT_KEYWORD_LIST;
    var13 = var6[var13];
    var8[3] = var13;
    var12 = var12.KEYWORD;
    var12 = var6[var12];
    var8[4] = var12;
    var4[var11] = var8;
    var _closure1_slot7 = var4;
    var8 = 5;
    var8 = var10[var8];
    var10 = var9.bind(var1)(var8);
    var9 = var10.fileFinishedImporting;
    var8 = 'modules/guild_automod/AutomodTriggerConfigs.tsx';
    var8 = var9.bind(var10)(var8);
    var3['AutomodTriggerConfigFlags'] = var7;
    var3['triggerConfigs'] = var6;
    var3['AutomodTriggerCategory'] = var5;
    var3['AUTOMOD_RULE_CONFIGS_BY_CATEGORY'] = var4;
    var4 = function(arg1, arg2) {
        var2 = _closure1_slot5;
        var1 = arg1;
        var1 = var2[var1];
        var3 = var1.flags;
        var2 = var3.has;
        var1 = arg2;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['checkTriggerTypeForFlag'] = var4;
    var4 = function getAvailableActionTypes(arg1) {
        var1 = global;
        var3 = var1.Array;
        var2 = var3.from;
        var4 = _closure1_slot5;
        var1 = arg1;
        var1 = var4[var1];
        var1 = var1.availableActionTypes;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['getAvailableActionTypes'] = var4;
    var4 = function validateRuleByTriggerConfigOrThrow(arg1, arg2) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var1 = arg1;
            var8 = arg2;
            var2 = var1.id;
            var _closure2_slot0 = var2;
            var2 = var1.eventType;
            var4 = var1.triggerType;
            var _closure2_slot1 = var4;
            var6 = var1.actions;
            var1 = _closure1_slot5;
            var1 = var1[var4];
            var _closure2_slot2 = var1;
            var7 = var8.filter;
            var5 = function(arg1) {
                _fun0002: for(var _fun0002_ip = 0; ; ) switch(_fun0002_ip) {
 0:
                    var3 = arg1;
                    var4 = _closure2_slot0;
                    var1 = var3.id;
                    var1 = var4 !== var1;
                    if(!var1) { _fun0002_ip = 36; continue _fun0002 }
 22:
                    var3 = var3.triggerType;
                    var2 = _closure2_slot1;
                    var1 = var3 === var2;
 36:
                    return var1;
                }
            };
            var5 = var7.bind(var8)(var5);
            var7 = var5.length;
            var5 = var1.perGuildMaxCount;
            if(!(!(var7 > var5))) { _fun0001_ip = 193; continue _fun0001 }
 86:
            var5 = var6.some;
            var3 = function(arg1) {
                var1 = _closure2_slot2;
                var3 = var1.availableActionTypes;
                var2 = var3.has;
                var1 = arg1;
                var1 = var1.type;
                var1 = var2.bind(var3)(var1);
                var1 = !var1;
                return var1;
            };
            var3 = var5.bind(var6)(var3);
            if(var3) { _fun0001_ip = 157; continue _fun0001 }
 107:
            var1 = var1.eventType;
            if(!(var2 === var1)) { _fun0001_ip = 121; continue _fun0001 }
 117:
            var1 = undefined;
            return var1;
 121:
            var1 = global;
            var3 = var1.Error;
            var1 = var3.prototype;
            var2 = Object.create(var1, {constructor: {value: var3}});
            var9 = 'You have provided an event type that is not available for this trigger type';
            var10 = var2;
            var1 = new var10[var3](var9, var8);
            var1 = var1 instanceof Object ? var1 : var2;
            throw var1;
 157:
            var1 = global;
            var3 = var1.Error;
            var1 = var3.prototype;
            var2 = Object.create(var1, {constructor: {value: var3}});
            var9 = 'You have provided an action that is not available for this trigger type';
            var10 = var2;
            var1 = new var10[var3](var9, var8);
            var1 = var1 instanceof Object ? var1 : var2;
            throw var1;
 193:
            var1 = global;
            var3 = var1.Error;
            var1 = var1.HermesInternal;
            var2 = var1.concat;
            var1 = 'You have exceeded the maximum number of rules of type ';
            var9 = var2.bind(var1)(var4);
            var2 = var3.prototype;
            var2 = Object.create(var2, {constructor: {value: var3}});
            var10 = var2;
            var1 = new var10[var3](var9, var8);
            var1 = var1 instanceof Object ? var1 : var2;
            throw var1;
        }
    };
    var3['validateRuleByTriggerConfigOrThrow'] = var4;
    var4 = function useAvailableTriggerTypes(arg1) {
        var5 = _closure1_slot0;
        var4 = _closure1_slot1;
        var3 = 3;
        var4 = var4[var3];
        var3 = undefined;
        var5 = var5.bind(var3)(var4);
        var4 = var5.useIsUserProfileRuleEnabled;
        var3 = arg1;
        var5 = var4.bind(var5)(var3);
        var _closure2_slot0 = var5;
        var4 = _closure1_slot2;
        var3 = var4.useMemo;
        var2 = new Array(1);
        var2[0] = var5;
        var1 = function() {
            var4 = {};
            var2 = _closure1_slot6;
            var5 = var2.MEMBERS;
            var3 = new Array(0);
            var4[var5] = var3;
            var3 = var2.CONTENT;
            var2 = new Array(0);
            var4[var3] = var2;
            var2 = global;
            var3 = var2.Object;
            var2 = var3.keys;
            var1 = _closure1_slot7;
            var3 = var2.bind(var3)(var1);
            var2 = var3.reduce;
            var1 = function(arg1, arg2) {
                var1 = arg1;
                var3 = arg2;
                var4 = _closure1_slot7;
                var6 = var4[var3];
                var5 = var6.filter;
                var4 = function(arg1) {
                    _fun0003: for(var _fun0003_ip = 0; ; ) switch(_fun0003_ip) {
 0:
                        var3 = arg1;
                        var4 = var3.type;
                        var1 = _closure1_slot3;
                        var1 = var1.SERVER_POLICY;
                        var1 = var4 !== var1;
                        if(!var1) { _fun0003_ip = 81; continue _fun0003 }
 28:
                        var4 = var3.type;
                        var2 = _closure1_slot3;
                        var2 = var2.USER_PROFILE;
                        var4 = var4 === var2;
                        if(!var4) { _fun0003_ip = 60; continue _fun0003 }
 50:
                        var2 = _closure2_slot0;
                        var4 = !var2;
 60:
                        var2 = !var4;
                        if(var4) { _fun0003_ip = 78; continue _fun0003 }
 66:
                        var4 = var3.perGuildMaxCount;
                        var3 = 0;
                        var2 = var4 > var3;
 78:
                        var1 = var2;
 81:
                        return var1;
                    }
                };
                var5 = var5.bind(var6)(var4);
                var4 = var5.map;
                var2 = function(arg1) {
                    var1 = arg1;
                    var1 = var1.type;
                    return var1;
                };
                var2 = var4.bind(var5)(var2);
                var1[var3] = var2;
                return var1;
            };
            var1 = var2.bind(var3)(var1, var4);
            return var1;
        };
        var1 = var3.bind(var4)(var1, var2);
        return var1;
    };
    var3['useAvailableTriggerTypes'] = var4;
    var2 = function getDefaultTriggerMetadataForTriggerType(arg1, arg2) {
        _fun0004: for(var _fun0004_ip = 0; ; ) switch(_fun0004_ip) {
 0:
            var5 = arg1;
            var4 = _closure1_slot0;
            var2 = _closure1_slot1;
            var1 = 4;
            var2 = var2[var1];
            var1 = undefined;
            var6 = var4.bind(var1)(var2);
            var4 = var6.isInMentionRaidExperiment;
            var2 = arg2;
            var2 = var4.bind(var6)(var2);
            var4 = _closure1_slot3;
            var4 = var4.DEFAULT_KEYWORD_LIST;
            if(!(var4 !== var5)) { _fun0004_ip = 180; continue _fun0004 }
 59:
            var4 = _closure1_slot3;
            var4 = var4.USER_PROFILE;
            if(!(var4 !== var5)) { _fun0004_ip = 149; continue _fun0004 }
 73:
            var4 = _closure1_slot3;
            var4 = var4.KEYWORD;
            if(!(var4 !== var5)) { _fun0004_ip = 149; continue _fun0004 }
 87:
            var4 = _closure1_slot3;
            var4 = var4.MENTION_SPAM;
            if(!(var4 !== var5)) { _fun0004_ip = 127; continue _fun0004 }
 101:
            var4 = _closure1_slot3;
            var4 = var4.ML_SPAM;
            if(!(var4 !== var5)) { _fun0004_ip = 125; continue _fun0004 }
 115:
            var4 = _closure1_slot3;
            var4 = var4.SERVER_POLICY;
 125:
            return var1;
 127:
            var1 = {};
            var3 = _closure1_slot4;
            var1['mentionTotalLimit'] = var3;
            var1['mentionRaidProtectionEnabled'] = var2;
            return var1;
 149:
            var1 = {};
            var2 = new Array(0);
            var1['keywordFilter'] = var2;
            var2 = new Array(0);
            var1['regexPatterns'] = var2;
            var2 = new Array(0);
            var1['allowList'] = var2;
            return var1;
 180:
            var1 = {};
            var2 = new Array(0);
            var1['allowList'] = var2;
            var2 = new Array(0);
            var1['presets'] = var2;
            return var1;
        }
    };
    var3['getDefaultTriggerMetadataForTriggerType'] = var2;
    return var1;
})();