// app/modules/guild_automod/AutomodTriggerConfigs.tsx
export default (function(argFoo, argBar, _, argCor, __, argFre, argPlu) {
    verify = argBar;
    zuuluu = argFre;
    offset = argPlu;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = offset;
    option = global;
    oscard = option.Object;
    report = oscard.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, tangon);
    kiloes = 0;
    report = offset[kiloes];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(report);
    var _closure1_slot2 = tangon;
    foxtra = 1;
    tangon = offset[foxtra];
    tangon = verify.bind(entity)(tangon);
    yankee = tangon.AutomodActionType;
    backup = tangon.AutomodEventType;
    romeon = tangon.AutomodTriggerType;
    var _closure1_slot3 = romeon;
    tangon = tangon.MENTION_SPAM_LIMIT_DEFAULT;
    var _closure1_slot4 = tangon;
    golfie = {};
    tangon = 'new';
    golfie['NEW'] = tangon;
    tangon = 'recommended';
    golfie['RECOMMENDED'] = tangon;
    tangon = 'beta';
    golfie['BETA'] = tangon;
    tangon = 'alpha';
    golfie['ALPHA'] = tangon;
    oscard = {};
    report = romeon.SPAM_LINK;
    tangon = {};
    sizing = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscard = _closure1_slot1;
        entity = 2;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.ffR2cH;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getDefaultRuleName'] = sizing;
    sizing = romeon.SPAM_LINK;
    tangon['type'] = sizing;
    sizing = backup.MESSAGE_SEND;
    tangon['eventType'] = sizing;
    tangon['perGuildMaxCount'] = kiloes;
    kiloes = option.Set;
    sizing = kiloes.prototype;
    sizing = Object.create(sizing, {constructor: {value: kiloes}});
    source = sizing;
    kiloes = new source[kiloes](update);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['availableActionTypes'] = kiloes;
    kiloes = option.Set;
    sizing = kiloes.prototype;
    sizing = Object.create(sizing, {constructor: {value: kiloes}});
    source = sizing;
    kiloes = new source[kiloes](update);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['flags'] = kiloes;
    kiloes = option.Set;
    sizing = kiloes.prototype;
    sizing = Object.create(sizing, {constructor: {value: kiloes}});
    source = sizing;
    kiloes = new source[kiloes](update);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['defaultActionTypes'] = kiloes;
    oscard[report] = tangon;
    report = romeon.KEYWORD;
    tangon = {};
    kiloes = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscard = _closure1_slot1;
        entity = 2;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.ffR2cH;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getDefaultRuleName'] = kiloes;
    kiloes = romeon.KEYWORD;
    tangon['type'] = kiloes;
    kiloes = backup.MESSAGE_SEND;
    tangon['eventType'] = kiloes;
    kiloes = 6;
    tangon['perGuildMaxCount'] = kiloes;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(3);
    kiloes[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kiloes[1] = sizing;
    sizing = yankee.USER_COMMUNICATION_DISABLED;
    kiloes[2] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['availableActionTypes'] = kiloes;
    kiloes = option.Set;
    sizing = kiloes.prototype;
    sizing = Object.create(sizing, {constructor: {value: kiloes}});
    source = sizing;
    kiloes = new source[kiloes](update);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['flags'] = kiloes;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(1);
    kiloes[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['defaultActionTypes'] = kiloes;
    oscard[report] = tangon;
    report = romeon.ML_SPAM;
    tangon = {};
    kiloes = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscard = _closure1_slot1;
        entity = 2;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.puF/Oj;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getDefaultRuleName'] = kiloes;
    kiloes = romeon.ML_SPAM;
    tangon['type'] = kiloes;
    kiloes = backup.MESSAGE_SEND;
    tangon['eventType'] = kiloes;
    tangon['perGuildMaxCount'] = foxtra;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(2);
    kiloes[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kiloes[1] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['availableActionTypes'] = kiloes;
    output = option.Set;
    kiloes = output.prototype;
    sizing = Object.create(kiloes, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['flags'] = kiloes;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(1);
    kiloes[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['defaultActionTypes'] = kiloes;
    oscard[report] = tangon;
    report = romeon.DEFAULT_KEYWORD_LIST;
    tangon = {};
    kiloes = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscard = _closure1_slot1;
        entity = 2;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.LnGhZm;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getDefaultRuleName'] = kiloes;
    kiloes = romeon.DEFAULT_KEYWORD_LIST;
    tangon['type'] = kiloes;
    kiloes = backup.MESSAGE_SEND;
    tangon['eventType'] = kiloes;
    tangon['perGuildMaxCount'] = foxtra;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(2);
    kiloes[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kiloes[1] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['availableActionTypes'] = kiloes;
    output = option.Set;
    kiloes = output.prototype;
    sizing = Object.create(kiloes, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['flags'] = kiloes;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(1);
    kiloes[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['defaultActionTypes'] = kiloes;
    oscard[report] = tangon;
    report = romeon.MENTION_SPAM;
    tangon = {};
    kiloes = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscard = _closure1_slot1;
        entity = 2;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.pX7i6u;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getDefaultRuleName'] = kiloes;
    kiloes = romeon.MENTION_SPAM;
    tangon['type'] = kiloes;
    kiloes = backup.MESSAGE_SEND;
    tangon['eventType'] = kiloes;
    tangon['perGuildMaxCount'] = foxtra;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(3);
    kiloes[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kiloes[1] = sizing;
    sizing = yankee.USER_COMMUNICATION_DISABLED;
    kiloes[2] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['availableActionTypes'] = kiloes;
    output = option.Set;
    kiloes = output.prototype;
    sizing = Object.create(kiloes, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['flags'] = kiloes;
    output = option.Set;
    sizing = yankee.BLOCK_MESSAGE;
    kiloes = new Array(1);
    kiloes[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['defaultActionTypes'] = kiloes;
    oscard[report] = tangon;
    report = romeon.USER_PROFILE;
    tangon = {};
    kiloes = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscard = _closure1_slot1;
        entity = 2;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.q1L2v7;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getDefaultRuleName'] = kiloes;
    kiloes = romeon.USER_PROFILE;
    tangon['type'] = kiloes;
    kiloes = backup.GUILD_MEMBER_JOIN_OR_UPDATE;
    tangon['eventType'] = kiloes;
    tangon['perGuildMaxCount'] = foxtra;
    output = option.Set;
    sizing = yankee.QUARANTINE_USER;
    kiloes = new Array(2);
    kiloes[0] = sizing;
    sizing = yankee.FLAG_TO_CHANNEL;
    kiloes[1] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['availableActionTypes'] = kiloes;
    output = option.Set;
    kiloes = output.prototype;
    sizing = Object.create(kiloes, {constructor: {value: output}});
    update = new Array(0);
    source = sizing;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['flags'] = kiloes;
    output = option.Set;
    sizing = yankee.QUARANTINE_USER;
    kiloes = new Array(1);
    kiloes[0] = sizing;
    sizing = output.prototype;
    sizing = Object.create(sizing, {constructor: {value: output}});
    source = sizing;
    update = kiloes;
    kiloes = new source[output](update, echoed);
    kiloes = kiloes instanceof Object ? kiloes : sizing;
    tangon['defaultActionTypes'] = kiloes;
    oscard[report] = tangon;
    report = romeon.SERVER_POLICY;
    tangon = {};
    kiloes = function() { // Original name: getDefaultRuleName
        report = _closure1_slot0;
        oscard = _closure1_slot1;
        entity = 2;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.ZQr92N;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['getDefaultRuleName'] = kiloes;
    kiloes = romeon.SERVER_POLICY;
    tangon['type'] = kiloes;
    backup = backup.MESSAGE_SEND;
    tangon['eventType'] = backup;
    tangon['perGuildMaxCount'] = foxtra;
    backup = option.Set;
    foxtra = yankee.FLAG_TO_CHANNEL;
    yankee = new Array(1);
    yankee[0] = foxtra;
    foxtra = backup.prototype;
    foxtra = Object.create(foxtra, {constructor: {value: backup}});
    source = foxtra;
    update = yankee;
    yankee = new source[backup](update, echoed);
    yankee = yankee instanceof Object ? yankee : foxtra;
    tangon['availableActionTypes'] = yankee;
    backup = option.Set;
    foxtra = golfie.ALPHA;
    yankee = new Array(1);
    yankee[0] = foxtra;
    foxtra = backup.prototype;
    foxtra = Object.create(foxtra, {constructor: {value: backup}});
    source = foxtra;
    update = yankee;
    yankee = new source[backup](update, echoed);
    yankee = yankee instanceof Object ? yankee : foxtra;
    tangon['flags'] = yankee;
    option = option.Set;
    yankee = option.prototype;
    yankee = Object.create(yankee, {constructor: {value: option}});
    source = yankee;
    option = new source[option](update);
    option = option instanceof Object ? option : yankee;
    tangon['defaultActionTypes'] = option;
    oscard[report] = tangon;
    var _closure1_slot5 = oscard;
    report = {};
    tangon = 'members';
    report['MEMBERS'] = tangon;
    tangon = 'content';
    report['CONTENT'] = tangon;
    var _closure1_slot6 = report;
    tangon = {};
    yankee = report.MEMBERS;
    option = romeon.USER_PROFILE;
    foxtra = oscard[option];
    option = new Array(1);
    option[0] = foxtra;
    tangon[yankee] = option;
    yankee = report.CONTENT;
    option = romeon.SERVER_POLICY;
    foxtra = oscard[option];
    option = new Array(5);
    option[0] = foxtra;
    foxtra = romeon.MENTION_SPAM;
    foxtra = oscard[foxtra];
    option[1] = foxtra;
    foxtra = romeon.ML_SPAM;
    foxtra = oscard[foxtra];
    option[2] = foxtra;
    foxtra = romeon.DEFAULT_KEYWORD_LIST;
    foxtra = oscard[foxtra];
    option[3] = foxtra;
    romeon = romeon.KEYWORD;
    romeon = oscard[romeon];
    option[4] = romeon;
    tangon[yankee] = option;
    var _closure1_slot7 = tangon;
    option = 5;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'modules/guild_automod/AutomodTriggerConfigs.tsx';
    option = verify.bind(offset)(option);
    zuuluu['AutomodTriggerConfigFlags'] = golfie;
    zuuluu['triggerConfigs'] = oscard;
    zuuluu['AutomodTriggerCategory'] = report;
    zuuluu['AUTOMOD_RULE_CONFIGS_BY_CATEGORY'] = tangon;
    tangon = function(argFoo, argBar) {
        michal = _closure1_slot5;
        entity = argFoo;
        entity = michal[entity];
        zuuluu = entity.flags;
        michal = zuuluu.has;
        entity = argBar;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['checkTriggerTypeForFlag'] = tangon;
    tangon = function(argFoo) { // Original name: getAvailableActionTypes
        entity = global;
        zuuluu = entity.Array;
        michal = zuuluu.from;
        tangon = _closure1_slot5;
        entity = argFoo;
        entity = tangon[entity];
        entity = entity.availableActionTypes;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['getAvailableActionTypes'] = tangon;
    tangon = function(argFoo, argBar) { // Original name: validateRuleByTriggerConfigOrThrow
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            option = argBar;
            michal = entity.id;
            var _closure2_slot0 = michal;
            michal = entity.eventType;
            tangon = entity.triggerType;
            var _closure2_slot1 = tangon;
            oscard = entity.actions;
            entity = _closure1_slot5;
            entity = entity[tangon];
            var _closure2_slot2 = entity;
            golfie = option.filter;
            report = function(argFoo) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = argFoo;
                    tangon = _closure2_slot0;
                    entity = zuuluu.id;
                    entity = tangon !== entity;
                    if(!entity) { _fun00004_ip = 36; continue _fun00003 }
 22:
                    zuuluu = zuuluu.triggerType;
                    michal = _closure2_slot1;
                    entity = zuuluu === michal;
 36:
                    return entity;
                }
            };
            report = golfie.bind(option)(report);
            golfie = report.length;
            report = entity.perGuildMaxCount;
            if(!(!(golfie > report))) { _fun00002_ip = 193; continue _fun00001 }
 86:
            report = oscard.some;
            zuuluu = function(argFoo) {
                entity = _closure2_slot2;
                zuuluu = entity.availableActionTypes;
                michal = zuuluu.has;
                entity = argFoo;
                entity = entity.type;
                entity = michal.bind(zuuluu)(entity);
                entity = !entity;
                return entity;
            };
            zuuluu = report.bind(oscard)(zuuluu);
            if(zuuluu) { _fun00002_ip = 157; continue _fun00001 }
 107:
            entity = entity.eventType;
            if(!(michal === entity)) { _fun00002_ip = 121; continue _fun00001 }
 117:
            entity = undefined;
            return entity;
 121:
            entity = global;
            zuuluu = entity.Error;
            entity = zuuluu.prototype;
            michal = Object.create(entity, {constructor: {value: zuuluu}});
            verify = 'You have provided an event type that is not available for this trigger type';
            offset = michal;
            entity = new offset[zuuluu](verify, option);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
 157:
            entity = global;
            zuuluu = entity.Error;
            entity = zuuluu.prototype;
            michal = Object.create(entity, {constructor: {value: zuuluu}});
            verify = 'You have provided an action that is not available for this trigger type';
            offset = michal;
            entity = new offset[zuuluu](verify, option);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
 193:
            entity = global;
            zuuluu = entity.Error;
            entity = entity.HermesInternal;
            michal = entity.concat;
            entity = 'You have exceeded the maximum number of rules of type ';
            verify = michal.bind(entity)(tangon);
            michal = zuuluu.prototype;
            michal = Object.create(michal, {constructor: {value: zuuluu}});
            offset = michal;
            entity = new offset[zuuluu](verify, option);
            entity = entity instanceof Object ? entity : michal;
            throw entity;
        }
    };
    zuuluu['validateRuleByTriggerConfigOrThrow'] = tangon;
    tangon = function(argFoo) { // Original name: useAvailableTriggerTypes
        report = _closure1_slot0;
        tangon = _closure1_slot1;
        zuuluu = 3;
        tangon = tangon[zuuluu];
        zuuluu = undefined;
        report = report.bind(zuuluu)(tangon);
        tangon = report.useIsUserProfileRuleEnabled;
        zuuluu = argFoo;
        report = tangon.bind(report)(zuuluu);
        var _closure2_slot0 = report;
        tangon = _closure1_slot2;
        zuuluu = tangon.useMemo;
        michal = new Array(1);
        michal[0] = report;
        entity = function() {
            tangon = {};
            michal = _closure1_slot6;
            report = michal.MEMBERS;
            zuuluu = new Array(0);
            tangon[report] = zuuluu;
            zuuluu = michal.CONTENT;
            michal = new Array(0);
            tangon[zuuluu] = michal;
            michal = global;
            zuuluu = michal.Object;
            michal = zuuluu.keys;
            entity = _closure1_slot7;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = zuuluu.reduce;
            entity = function(argFoo, argBar) {
                entity = argFoo;
                zuuluu = argBar;
                tangon = _closure1_slot7;
                oscard = tangon[zuuluu];
                report = oscard.filter;
                tangon = function(argFoo) {
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        zuuluu = argFoo;
                        tangon = zuuluu.type;
                        entity = _closure1_slot3;
                        entity = entity.SERVER_POLICY;
                        entity = tangon !== entity;
                        if(!entity) { _fun00006_ip = 81; continue _fun00005 }
 28:
                        tangon = zuuluu.type;
                        michal = _closure1_slot3;
                        michal = michal.USER_PROFILE;
                        tangon = tangon === michal;
                        if(!tangon) { _fun00006_ip = 60; continue _fun00005 }
 50:
                        michal = _closure2_slot0;
                        tangon = !michal;
 60:
                        michal = !tangon;
                        if(tangon) { _fun00006_ip = 78; continue _fun00005 }
 66:
                        tangon = zuuluu.perGuildMaxCount;
                        zuuluu = 0;
                        michal = tangon > zuuluu;
 78:
                        entity = michal;
 81:
                        return entity;
                    }
                };
                report = report.bind(oscard)(tangon);
                tangon = report.map;
                michal = function(argFoo) {
                    entity = argFoo;
                    entity = entity.type;
                    return entity;
                };
                michal = tangon.bind(report)(michal);
                entity[zuuluu] = michal;
                return entity;
            };
            entity = michal.bind(zuuluu)(entity, tangon);
            return entity;
        };
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    zuuluu['useAvailableTriggerTypes'] = tangon;
    michal = function(argFoo, argBar) { // Original name: getDefaultTriggerMetadataForTriggerType
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            report = argFoo;
            tangon = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 4;
            michal = michal[entity];
            entity = undefined;
            oscard = tangon.bind(entity)(michal);
            tangon = oscard.isInMentionRaidExperiment;
            michal = argBar;
            michal = tangon.bind(oscard)(michal);
            tangon = _closure1_slot3;
            tangon = tangon.DEFAULT_KEYWORD_LIST;
            if(!(tangon !== report)) { _fun00008_ip = 180; continue _fun00007 }
 59:
            tangon = _closure1_slot3;
            tangon = tangon.USER_PROFILE;
            if(!(tangon !== report)) { _fun00008_ip = 149; continue _fun00007 }
 73:
            tangon = _closure1_slot3;
            tangon = tangon.KEYWORD;
            if(!(tangon !== report)) { _fun00008_ip = 149; continue _fun00007 }
 87:
            tangon = _closure1_slot3;
            tangon = tangon.MENTION_SPAM;
            if(!(tangon !== report)) { _fun00008_ip = 127; continue _fun00007 }
 101:
            tangon = _closure1_slot3;
            tangon = tangon.ML_SPAM;
            if(!(tangon !== report)) { _fun00008_ip = 125; continue _fun00007 }
 115:
            tangon = _closure1_slot3;
            tangon = tangon.SERVER_POLICY;
 125:
            return entity;
 127:
            entity = {};
            zuuluu = _closure1_slot4;
            entity['mentionTotalLimit'] = zuuluu;
            entity['mentionRaidProtectionEnabled'] = michal;
            return entity;
 149:
            entity = {};
            michal = new Array(0);
            entity['keywordFilter'] = michal;
            michal = new Array(0);
            entity['regexPatterns'] = michal;
            michal = new Array(0);
            entity['allowList'] = michal;
            return entity;
 180:
            entity = {};
            michal = new Array(0);
            entity['allowList'] = michal;
            michal = new Array(0);
            entity['presets'] = michal;
            return entity;
        }
    };
    zuuluu['getDefaultTriggerMetadataForTriggerType'] = michal;
    return entity;
})();