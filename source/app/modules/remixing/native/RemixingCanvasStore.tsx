// app/modules/remixing/native/RemixingCanvasStore.tsx
export default (function(argFoo, argBar, _, __, ___, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = report.bind(entity)(tango);
    options = tango.Dimensions;
    golf = options.get;
    tango = 'screen';
    tango = golf.bind(options)(tango);
    verify = tango.width;
    options = tango.height;
    tango = {};
    golf = 1;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    golf = golf.AspectRatio;
    golf = golf.ORIGINAL;
    tango['aspectRatio'] = golf;
    golf = {'x': 0, 'y': 0};
    golf['width'] = verify;
    golf['height'] = options;
    tango['rect'] = golf;
    var _closure1_slot2 = tango;
    tango = 2;
    tango = oscar[tango];
    golf = report.bind(entity)(tango);
    tango = golf.createWithEqualityFn;
    mike = function(argFoo) {
        entity = argFoo;
        var _closure2_slot0 = entity;
        entity = {};
        report = _closure1_slot2;
        oscar = entity;
        zulu = copyDataProperties(oscar, report);
        tango = function(argFoo) { // Original name: setAspectRatio
            mike = argFoo;
            var _closure3_slot0 = mike;
            tango = _closure1_slot0;
            zulu = _closure1_slot1;
            mike = 3;
            zulu = zulu[mike];
            mike = undefined;
            zulu = tango.bind(mike)(zulu);
            mike = zulu.batchUpdates;
            entity = function() {
                zulu = _closure2_slot0;
                mike = {};
                entity = _closure3_slot0;
                mike['aspectRatio'] = entity;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        zulu = 'setAspectRatio';
        entity[zulu] = tango;
        tango = function(argFoo) { // Original name: setRect
            mike = argFoo;
            var _closure3_slot0 = mike;
            tango = _closure1_slot0;
            zulu = _closure1_slot1;
            mike = 3;
            zulu = zulu[mike];
            mike = undefined;
            zulu = tango.bind(mike)(zulu);
            mike = zulu.batchUpdates;
            entity = function() {
                zulu = _closure2_slot0;
                mike = {};
                entity = _closure3_slot0;
                mike['rect'] = entity;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        zulu = 'setRect';
        entity[zulu] = tango;
        zulu = function() { // Original name: reset
            zulu = _closure1_slot0;
            mike = _closure1_slot1;
            entity = 3;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure2_slot0;
                mike = {};
                tango = _closure1_slot2;
                report = mike;
                entity = copyDataProperties(report, tango);
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        mike = 'reset';
        entity[mike] = zulu;
        return entity;
    };
    mike = tango.bind(golf)(mike);
    tango = 4;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/remixing/native/RemixingCanvasStore.tsx';
    tango = report.bind(oscar)(tango);
    zulu['useRemixingCanvasStore'] = mike;
    return entity;
})();