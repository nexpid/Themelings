// app/modules/remixing/native/components/TextEditor.tsx
export default (function(argFoo, argBar, argBaz, argCor, argGra, argFre, argPlu) {
    report = argBar;
    verify = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = verify.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = verify.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot6 = golfie;
    tangon = tangon.useWindowDimensions;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useRemixingEditorStore;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = verify.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useRemixingTextStore;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.SIZE_SLIDEBAR_WIDTH;
    var _closure1_slot11 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.Fonts;
    tangon = 9;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot12 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = {'marginBottom': 0, 'borderRadius': null, 'height': 60, 'width': '100%'};
    romeon = 11;
    romeon = oscard[romeon];
    romeon = verify.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.none;
    offset['borderRadius'] = romeon;
    tangon['carouselViewStyle'] = offset;
    offset = {'display': 'flex', 'borderWidth': 2, 'padding': 5, 'borderColor': '#949CF7'};
    yankee = yankee.PRIMARY_BOLD;
    offset['fontFamily'] = yankee;
    tangon['textInput'] = offset;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot14 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    option = verify.bind(entity)(tangon);
    golfie = option.createAnimatedComponent;
    tangon = 13;
    tangon = oscard[tangon];
    tangon = verify.bind(entity)(tangon);
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot15 = tangon;
    tangon = {};
    golfie = 'function TextEditorTsx1(){const{canvasWidth,SIZE_SLIDEBAR_WIDTH,getColorValue,textColor,TEXT_INPUT_BACKGROUND_COLOR,textBoxMaxHeight,TEXT_INPUT_MARGIN_BOTTOM,fontSize,TEXT_INPUT_FONT_SCALE,isOnAndroid,contentHeight,containerSize}=this.__closure;return{width:canvasWidth-SIZE_SLIDEBAR_WIDTH,color:getColorValue(textColor),backgroundColor:TEXT_INPUT_BACKGROUND_COLOR,maxHeight:textBoxMaxHeight.get(),marginBottom:TEXT_INPUT_MARGIN_BOTTOM,fontSize:Math.ceil(fontSize*TEXT_INPUT_FONT_SCALE),height:isOnAndroid?contentHeight.get()>0?contentHeight.get()>containerSize.height?Math.min(containerSize.height,textBoxMaxHeight.get()):Math.min(contentHeight.get(),textBoxMaxHeight.get()):undefined:undefined};}';
    tangon['code'] = golfie;
    var _closure1_slot16 = tangon;
    tangon = 26;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/remixing/native/components/TextEditor.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            limora = michal.canvasWidth;
            var _closure2_slot0 = limora;
            zuuluu = michal.onUnmount;
            var _closure2_slot1 = zuuluu;
            michal = michal.clearActiveId;
            var _closure2_slot2 = michal;
            michal = _closure1_slot14;
            tangon = undefined;
            output = michal.bind(tangon)();
            michal = _closure1_slot0;
            verify = _closure1_slot2;
            zuuluu = 14;
            zuuluu = verify[zuuluu];
            golfie = michal.bind(tangon)(zuuluu);
            oscard = golfie.useStateFromStoresObject;
            zuuluu = _closure1_slot9;
            report = new Array(1);
            report[0] = zuuluu;
            zuuluu = function() {
                michal = _closure1_slot9;
                entity = michal.getTextState;
                entity = entity.bind(michal)();
                return entity;
            };
            zuuluu = oscard.bind(golfie)(report, zuuluu);
            ctrled = zuuluu.textColor;
            var _closure2_slot3 = ctrled;
            zuuluu = _closure1_slot10;
            report = zuuluu.bind(tangon)();
            sequen = report.text;
            status = report.fontSize;
            var _closure2_slot4 = status;
            zuuluu = report.setText;
            var _closure2_slot5 = zuuluu;
            golfie = report.setTextWidth;
            var _closure2_slot6 = golfie;
            oscard = report.setAddTextPosition;
            var _closure2_slot7 = oscard;
            report = _closure1_slot7;
            option = report.bind(tangon)();
            variable36 = option.height;
            whisks = _closure1_slot5;
            option = whisks.useState;
            kiloes = 0;
            yankee = option.bind(whisks)(kiloes);
            option = _closure1_slot4;
            offset = 2;
            yankee = option.bind(tangon)(yankee, offset);
            quebec = yankee[kiloes];
            var _closure2_slot8 = quebec;
            foxtra = 1;
            variable37 = yankee[foxtra];
            var _closure2_slot9 = variable37;
            papara = 15;
            yankee = verify[papara];
            romeon = michal.bind(tangon)(yankee);
            yankee = romeon.useSizeState;
            yankee = yankee.bind(romeon)();
            romeon = option.bind(tangon)(yankee, offset);
            yankee = romeon[kiloes];
            var _closure2_slot10 = yankee;
            romeon = romeon[foxtra];
            report = report.bind(tangon)();
            sizing = report.width;
            var _closure2_slot11 = sizing;
            report = 16;
            report = verify[report];
            backup = michal.bind(tangon)(report);
            report = backup.useDrawingHooks;
            report = report.bind(backup)();
            source = report.carouselIndex;
            echoed = report.setCarouselIndex;
            report = whisks.useState;
            vacuum = true;
            report = report.bind(whisks)(vacuum);
            option = option.bind(tangon)(report, offset);
            report = option[kiloes];
            update = option[foxtra];
            cntext = 17;
            option = verify[cntext];
            foxtra = michal.bind(tangon)(option);
            option = foxtra.isAndroid;
            target = option.bind(foxtra)();
            var _closure2_slot12 = target;
            option = 18;
            option = verify[option];
            backup = michal.bind(tangon)(option);
            foxtra = backup.useKeyboardState;
            option = {};
            option['isOnAndroid'] = target;
            option['setIsKeyboardVisible'] = update;
            option = foxtra.bind(backup)(option);
            foxtra = 19;
            option = verify[foxtra];
            backup = michal.bind(tangon)(option);
            option = backup.useShouldShowLanguageSupportWarning;
            option = option.bind(backup)();
            update = whisks.useCallback;
            backup = new Array(1);
            backup[0] = zuuluu;
            zuuluu = function(argFoo) {
                zuuluu = _closure2_slot5;
                entity = undefined;
                michal = argFoo;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            config = update.bind(whisks)(zuuluu, backup);
            backup = whisks.useRef;
            zuuluu = null;
            record = backup.bind(whisks)(zuuluu);
            var _closure2_slot13 = record;
            zuuluu = 12;
            backup = verify[zuuluu];
            update = michal.bind(tangon)(backup);
            backup = update.useSharedValue;
            offset = offset * status;
            sierra = backup.bind(update)(offset);
            var _closure2_slot14 = sierra;
            update = whisks.useMemo;
            backup = new Array(1);
            backup[0] = record;
            offset = function() {
                entity = function() {
                    entity = global;
                    zuuluu = entity.Promise;
                    entity = zuuluu.prototype;
                    michal = Object.create(entity, {constructor: {value: zuuluu}});
                    tangon = function(argFoo) {
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            michal = argFoo;
                            var _closure5_slot0 = michal;
                            zuuluu = _closure2_slot13;
                            tangon = zuuluu.current;
                            zuuluu = null;
                            if(!(zuuluu != tangon)) { _fun00004_ip = 52; continue _fun00003 }
 27:
                            michal = _closure2_slot13;
                            zuuluu = michal.current;
                            michal = zuuluu.measure;
                            entity = function(argFoo, argBar, argBaz, argCor, argGra, argFre) {
                                zuuluu = _closure5_slot0;
                                michal = {};
                                entity = argCor;
                                michal['height'] = entity;
                                entity = argFre;
                                michal['pageY'] = entity;
                                entity = undefined;
                                michal = zuuluu.bind(entity)(michal);
                                return entity;
                            };
                            entity = michal.bind(zuuluu)(entity);
 52:
                            entity = undefined;
                            return entity;
                        }
                    };
                    report = michal;
                    entity = new report[zuuluu](tangon, zuuluu);
                    entity = entity instanceof Object ? entity : michal;
                    return entity;
                };
                return entity;
            };
            equals = update.bind(whisks)(offset, backup);
            var _closure2_slot15 = equals;
            update = _closure1_slot8;
            offset = 20;
            offset = verify[offset];
            offset = michal.bind(tangon)(offset);
            backup = offset.shallow;
            offset = function(argFoo) {
                entity = argFoo;
                entity = entity.headerMeasurements;
                return entity;
            };
            offset = update.bind(tangon)(offset, backup);
            var _closure2_slot16 = offset;
            update = whisks.useCallback;
            backup = new Array(4);
            backup[0] = variable37;
            backup[1] = equals;
            backup[2] = offset;
            backup[3] = sierra;
            offset = function(argFoo) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = argFoo;
                    entity = entity.nativeEvent;
                    entity = entity.layout;
                    tangon = entity.x;
                    zuuluu = _closure2_slot9;
                    entity = undefined;
                    zuuluu = zuuluu.bind(entity)(tangon);
                    zuuluu = _closure2_slot16;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00006_ip = 58; continue _fun00005 }
 43:
                    michal = function() {
                        tangon = _closure1_slot3;
                        zuuluu = undefined;
                        michal = function* () {
                            entity = function* () { // Original name: ?anon_0_
                                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                                    StartGenerator();
                                    ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                                    if(michal) { _fun00008_ip = 88; continue _fun00007 }
 7:
                                    michal = _closure2_slot15;
                                    zuuluu = undefined;
                                    michal = michal.bind(zuuluu)();
                                    SaveGenerator(address=24);
 22:
                                    return michal;
 24:
                                    ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                                    if(report) { _fun00008_ip = 85; continue _fun00007 }
 30:
                                    oscard = michal.pageY;
                                    report = michal.height;
                                    oscard = oscard + report;
                                    report = _closure2_slot16;
                                    golfie = report.pageY;
                                    report = report.height;
                                    report = golfie + report;
                                    oscard = oscard - report;
                                    report = _closure2_slot14;
                                    tangon = report.set;
                                    tangon = tangon.bind(report)(oscard);
                                    return zuuluu;
 85:
                                    return michal;
 88:
                                    return entity;
                                }
                            };
                            return entity;
                        };
                        michal = tangon.bind(zuuluu)(michal);
                        var _closure4_slot0 = michal;
                        entity = function() {
                            entity = undefined;
                            tangon = _closure4_slot0;
                            zuuluu = tangon.apply;
                            entity = arguments;
                            michal = entity;
                            entity = this;
                            entity = zuuluu.bind(tangon)(entity, michal);
                            return entity;
                        };
                        return entity;
                    };
                    michal = michal.bind(entity)();
                    michal = michal.bind(entity)();
 58:
                    return entity;
                }
            };
            update = update.bind(whisks)(offset, backup);
            offset = global;
            equals = offset.Math;
            backup = equals.floor;
            offset = 0.5;
            offset = offset * variable36;
            equals = backup.bind(equals)(offset);
            var _closure2_slot17 = equals;
            backup = whisks.useEffect;
            offset = new Array(3);
            offset[0] = quebec;
            offset[1] = equals;
            offset[2] = oscard;
            oscard = function() {
                zuuluu = _closure2_slot7;
                michal = {};
                tangon = _closure2_slot8;
                michal['x'] = tangon;
                entity = _closure2_slot17;
                michal['y'] = entity;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            oscard = backup.bind(whisks)(oscard, offset);
            oscard = _closure1_slot1;
            offset = 21;
            offset = verify[offset];
            backup = oscard.bind(tangon)(offset);
            offset = function() {
                entity = function() {
                    michal = _closure2_slot2;
                    entity = undefined;
                    michal = michal.bind(entity)();
                    michal = global;
                    tangon = michal.setTimeout;
                    zuuluu = function() {
                        michal = _closure2_slot1;
                        entity = undefined;
                        michal = michal.bind(entity)();
                        return entity;
                    };
                    michal = 0;
                    michal = tangon.bind(entity)(zuuluu, michal);
                    return entity;
                };
                return entity;
            };
            offset = backup.bind(tangon)(offset);
            offset = verify[zuuluu];
            backup = michal.bind(tangon)(offset);
            offset = backup.useSharedValue;
            backup = offset.bind(backup)(kiloes);
            var _closure2_slot18 = backup;
            kiloes = whisks.useCallback;
            offset = new Array(3);
            offset[0] = backup;
            offset[1] = golfie;
            offset[2] = sizing;
            golfie = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.contentSize;
                oscard = entity.width;
                tangon = entity.height;
                zuuluu = _closure2_slot18;
                michal = zuuluu.set;
                michal = michal.bind(zuuluu)(tangon);
                zuuluu = _closure2_slot6;
                michal = global;
                report = michal.Math;
                tangon = report.min;
                michal = _closure2_slot11;
                entity = 60;
                entity = oscard + entity;
                michal = tangon.bind(report)(michal, entity);
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            kiloes = kiloes.bind(whisks)(golfie, offset);
            zuuluu = verify[zuuluu];
            golfie = michal.bind(tangon)(zuuluu);
            zuuluu = golfie.useAnimatedStyle;
            entity = function() { // Original name: ae
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    entity = {};
                    report = _closure2_slot0;
                    zuuluu = _closure1_slot11;
                    zuuluu = report - zuuluu;
                    entity['width'] = zuuluu;
                    zuuluu = _closure1_slot0;
                    report = _closure1_slot2;
                    michal = 15;
                    michal = report[michal];
                    oscard = undefined;
                    report = zuuluu.bind(oscard)(michal);
                    zuuluu = report.getColorValue;
                    michal = _closure2_slot3;
                    michal = zuuluu.bind(report)(michal);
                    entity['color'] = michal;
                    michal = 'rgba(255,255,255,0.2)';
                    entity['backgroundColor'] = michal;
                    zuuluu = _closure2_slot14;
                    michal = zuuluu.get;
                    michal = michal.bind(zuuluu)();
                    entity['maxHeight'] = michal;
                    michal = '25%';
                    entity['marginBottom'] = michal;
                    report = global;
                    golfie = report.Math;
                    zuuluu = golfie.ceil;
                    option = _closure2_slot4;
                    michal = 1.2;
                    michal = michal * option;
                    michal = zuuluu.bind(golfie)(michal);
                    entity['fontSize'] = michal;
                    zuuluu = _closure2_slot12;
                    michal = undefined;
                    if(!zuuluu) { _fun00010_ip = 294; continue _fun00009 }
 157:
                    golfie = _closure2_slot18;
                    zuuluu = golfie.get;
                    golfie = zuuluu.bind(golfie)();
                    zuuluu = 0;
                    zuuluu = golfie > zuuluu;
                    michal = undefined;
                    if(!zuuluu) { _fun00010_ip = 294; continue _fun00009 }
 181:
                    oscard = _closure2_slot18;
                    zuuluu = oscard.get;
                    oscard = zuuluu.bind(oscard)();
                    zuuluu = _closure2_slot10;
                    zuuluu = zuuluu.height;
                    if(!(!(oscard > zuuluu))) { _fun00010_ip = 252; continue _fun00009 }
 207:
                    option = report.Math;
                    golfie = option.min;
                    oscard = _closure2_slot18;
                    zuuluu = oscard.get;
                    oscard = zuuluu.bind(oscard)();
                    verify = _closure2_slot14;
                    zuuluu = verify.get;
                    zuuluu = zuuluu.bind(verify)();
                    zuuluu = golfie.bind(option)(oscard, zuuluu);
                    _fun00010_ip = 291; continue _fun00009;
 252:
                    golfie = report.Math;
                    oscard = golfie.min;
                    report = _closure2_slot10;
                    report = report.height;
                    option = _closure2_slot14;
                    tangon = option.get;
                    tangon = tangon.bind(option)();
                    zuuluu = oscard.bind(golfie)(report, tangon);
 291:
                    michal = zuuluu;
 294:
                    entity['height'] = michal;
                    return entity;
                }
            };
            offset = {};
            offset['canvasWidth'] = limora;
            limora = _closure1_slot11;
            offset['SIZE_SLIDEBAR_WIDTH'] = limora;
            limora = verify[papara];
            limora = michal.bind(tangon)(limora);
            limora = limora.getColorValue;
            offset['getColorValue'] = limora;
            offset['textColor'] = ctrled;
            limora = 'rgba(255,255,255,0.2)';
            offset['TEXT_INPUT_BACKGROUND_COLOR'] = limora;
            offset['textBoxMaxHeight'] = sierra;
            sierra = '25%';
            offset['TEXT_INPUT_MARGIN_BOTTOM'] = sierra;
            offset['fontSize'] = status;
            status = 1.2;
            offset['TEXT_INPUT_FONT_SCALE'] = status;
            offset['isOnAndroid'] = target;
            offset['contentHeight'] = backup;
            offset['containerSize'] = yankee;
            entity['__closure'] = offset;
            offset = 6787481923131.0;
            entity['__workletHash'] = offset;
            offset = _closure1_slot16;
            entity['__initData'] = offset;
            status = zuuluu.bind(golfie)(entity);
            zuuluu = _closure1_slot12;
            entity = 22;
            entity = verify[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            entity['top'] = vacuum;
            report = !report;
            entity['bottom'] = report;
            golfie = _closure1_slot13;
            report = 23;
            report = verify[report];
            oscard = oscard.bind(tangon)(report);
            report = {};
            verify = option;
            if(!verify) { _fun00002_ip = 1001; continue _fun00001 }
 968:
            yankee = _closure1_slot12;
            offset = _closure1_slot1;
            option = _closure1_slot2;
            option = option[foxtra];
            offset = offset.bind(tangon)(option);
            option = {};
            option['text'] = sequen;
            verify = yankee.bind(tangon)(offset, option);
 1001:
            option = new Array(2);
            option[0] = verify;
            yankee = _closure1_slot13;
            offset = _closure1_slot6;
            verify = {};
            verify['onLayout'] = romeon;
            backup = _closure1_slot12;
            foxtra = _closure1_slot15;
            romeon = {};
            sierra = output.textInput;
            target = new Array(2);
            target[0] = sierra;
            target[1] = status;
            romeon['style'] = target;
            romeon['ref'] = record;
            romeon['multiline'] = vacuum;
            romeon['autoFocus'] = vacuum;
            romeon['onChangeText'] = config;
            record = _closure1_slot0;
            config = _closure1_slot2;
            papara = config[papara];
            target = record.bind(tangon)(papara);
            papara = target.getColorValue;
            papara = papara.bind(target)(ctrled);
            romeon['cursorColor'] = papara;
            papara = 'center';
            romeon['textAlign'] = papara;
            papara = 'top';
            romeon['textAlignVertical'] = papara;
            config = config[cntext];
            record = record.bind(tangon)(config);
            config = record.isAndroid;
            record = config.bind(record)();
            config = 'ascii-capable';
            if(!record) { _fun00002_ip = 1158; continue _fun00001 }
 1152:
            config = 'visible-password';
 1158:
            romeon['keyboardType'] = config;
            romeon['value'] = sequen;
            romeon['onLayout'] = update;
            romeon['onContentSizeChange'] = kiloes;
            foxtra = backup.bind(tangon)(foxtra, romeon);
            romeon = new Array(2);
            romeon[0] = foxtra;
            kiloes = _closure1_slot12;
            backup = _closure1_slot1;
            update = _closure1_slot2;
            foxtra = 24;
            foxtra = update[foxtra];
            backup = backup.bind(tangon)(foxtra);
            foxtra = {};
            foxtra['usePagination'] = vacuum;
            foxtra['selectedColor'] = ctrled;
            foxtra['carouselIndex'] = source;
            foxtra['setCarouselIndex'] = echoed;
            echoed = _closure1_slot0;
            result = 25;
            result = update[result];
            result = echoed.bind(tangon)(result);
            result = result.setTextColor;
            foxtra['setColor'] = result;
            output = output.carouselViewStyle;
            foxtra['style'] = output;
            foxtra['width'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[1] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();