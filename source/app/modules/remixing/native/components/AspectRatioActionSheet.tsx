// app/modules/remixing/native/components/AspectRatioActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Dimensions;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.useRemixingEditorStore;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.useRemixingCanvasStore;
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.RemixMode;
    var _closure1_slot6 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/remixing/native/components/AspectRatioActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: _default
        entity = _closure1_slot5;
        tango = undefined;
        entity = entity.bind(tango)();
        verify = entity.aspectRatio;
        entity = entity.setAspectRatio;
        var _closure2_slot0 = entity;
        entity = _closure1_slot4;
        entity = entity.bind(tango)();
        entity = entity.setCurrentMode;
        var _closure2_slot1 = entity;
        zulu = _closure1_slot3;
        mike = zulu.get;
        entity = 'screen';
        entity = mike.bind(zulu)(entity);
        golf = entity.height;
        zulu = _closure1_slot7;
        romeo = _closure1_slot0;
        foxtrot = _closure1_slot2;
        entity = 6;
        entity = foxtrot[entity];
        entity = romeo.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {};
        oscar = 3;
        oscar = golf / oscar;
        entity['contentHeight'] = oscar;
        oscar = function() { // Original name: onDismiss
            zulu = _closure2_slot1;
            entity = _closure1_slot6;
            mike = entity.DEFAULT_MODE;
            entity = undefined;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        entity['onDismiss'] = oscar;
        golf = _closure1_slot8;
        report = 7;
        report = foxtrot[report];
        report = romeo.bind(tango)(report);
        oscar = report.TableRadioGroup;
        report = {};
        report['value'] = verify;
        options = function(argFoo) { // Original name: onChange
            entity = argFoo;
            var _closure3_slot0 = entity;
            report = _closure2_slot1;
            entity = _closure1_slot6;
            tango = entity.DEFAULT_MODE;
            entity = undefined;
            tango = report.bind(entity)(tango);
            tango = _closure1_slot1;
            report = _closure1_slot2;
            zulu = 8;
            zulu = report[zulu];
            tango = tango.bind(entity)(zulu);
            zulu = tango.hideActionSheet;
            zulu = zulu.bind(tango)();
            zulu = global;
            tango = zulu.setTimeout;
            zulu = function() {
                zulu = _closure2_slot0;
                mike = _closure3_slot0;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            mike = 250;
            mike = tango.bind(entity)(zulu, mike);
            return entity;
        };
        report['onChange'] = options;
        options = false;
        report['hasIcons'] = options;
        verify = 9;
        options = foxtrot[verify];
        options = romeo.bind(tango)(options);
        offset = options.TableRadioRow;
        options = {};
        backup = 10;
        yankee = foxtrot[backup];
        yankee = romeo.bind(tango)(yankee);
        sizing = yankee.intl;
        kilo = sizing.string;
        yankee = foxtrot[backup];
        yankee = romeo.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.RUzEiI;
        yankee = kilo.bind(sizing)(yankee);
        options['label'] = yankee;
        yankee = 11;
        kilo = foxtrot[yankee];
        kilo = romeo.bind(tango)(kilo);
        kilo = kilo.AspectRatio;
        kilo = kilo.ORIGINAL;
        options['value'] = kilo;
        offset = zulu.bind(tango)(offset, options);
        options = new Array(5);
        options[0] = offset;
        offset = foxtrot[verify];
        offset = romeo.bind(tango)(offset);
        kilo = offset.TableRadioRow;
        offset = {};
        sizing = foxtrot[backup];
        sizing = romeo.bind(tango)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = foxtrot[backup];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.JJHmqq;
        sizing = output.bind(result)(sizing);
        offset['label'] = sizing;
        sizing = foxtrot[yankee];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.AspectRatio;
        sizing = sizing.VERTICAL;
        offset['value'] = sizing;
        offset = zulu.bind(tango)(kilo, offset);
        options[1] = offset;
        offset = foxtrot[verify];
        offset = romeo.bind(tango)(offset);
        kilo = offset.TableRadioRow;
        offset = {};
        sizing = foxtrot[backup];
        sizing = romeo.bind(tango)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = foxtrot[backup];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.MC7UpK;
        sizing = output.bind(result)(sizing);
        offset['label'] = sizing;
        sizing = foxtrot[yankee];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.AspectRatio;
        sizing = sizing.SQUARE;
        offset['value'] = sizing;
        offset = zulu.bind(tango)(kilo, offset);
        options[2] = offset;
        offset = foxtrot[verify];
        offset = romeo.bind(tango)(offset);
        kilo = offset.TableRadioRow;
        offset = {};
        sizing = foxtrot[backup];
        sizing = romeo.bind(tango)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = foxtrot[backup];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.ScPxn5;
        sizing = output.bind(result)(sizing);
        offset['label'] = sizing;
        sizing = foxtrot[yankee];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.AspectRatio;
        sizing = sizing.FOUR_THREE;
        offset['value'] = sizing;
        offset = zulu.bind(tango)(kilo, offset);
        options[3] = offset;
        verify = foxtrot[verify];
        verify = romeo.bind(tango)(verify);
        offset = verify.TableRadioRow;
        verify = {};
        kilo = foxtrot[backup];
        kilo = romeo.bind(tango)(kilo);
        sizing = kilo.intl;
        kilo = sizing.string;
        backup = foxtrot[backup];
        backup = romeo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.M+8nRU;
        backup = kilo.bind(sizing)(backup);
        verify['label'] = backup;
        yankee = foxtrot[yankee];
        yankee = romeo.bind(tango)(yankee);
        yankee = yankee.AspectRatio;
        yankee = yankee.SIXTEEN_NINE;
        verify['value'] = yankee;
        verify = zulu.bind(tango)(offset, verify);
        options[4] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();