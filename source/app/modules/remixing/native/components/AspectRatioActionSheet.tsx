// app/modules/remixing/native/components/AspectRatioActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Dimensions;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useRemixingEditorStore;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useRemixingCanvasStore;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.RemixMode;
    var _closure1_slot6 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/remixing/native/components/AspectRatioActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: _default
        entity = _closure1_slot5;
        tangon = undefined;
        entity = entity.bind(tangon)();
        verify = entity.aspectRatio;
        entity = entity.setAspectRatio;
        var _closure2_slot0 = entity;
        entity = _closure1_slot4;
        entity = entity.bind(tangon)();
        entity = entity.setCurrentMode;
        var _closure2_slot1 = entity;
        zuuluu = _closure1_slot3;
        michal = zuuluu.get;
        entity = 'screen';
        entity = michal.bind(zuuluu)(entity);
        golfie = entity.height;
        zuuluu = _closure1_slot7;
        romeon = _closure1_slot0;
        foxtra = _closure1_slot2;
        entity = 6;
        entity = foxtra[entity];
        entity = romeon.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        oscard = 3;
        oscard = golfie / oscard;
        entity['contentHeight'] = oscard;
        oscard = function() { // Original name: onDismiss
            zuuluu = _closure2_slot1;
            entity = _closure1_slot6;
            michal = entity.DEFAULT_MODE;
            entity = undefined;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        entity['onDismiss'] = oscard;
        golfie = _closure1_slot8;
        report = 7;
        report = foxtra[report];
        report = romeon.bind(tangon)(report);
        oscard = report.TableRadioGroup;
        report = {};
        report['defaultValue'] = verify;
        option = function(argFoo) { // Original name: onChange
            entity = argFoo;
            var _closure3_slot0 = entity;
            report = _closure2_slot1;
            entity = _closure1_slot6;
            tangon = entity.DEFAULT_MODE;
            entity = undefined;
            tangon = report.bind(entity)(tangon);
            tangon = _closure1_slot1;
            report = _closure1_slot2;
            zuuluu = 8;
            zuuluu = report[zuuluu];
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = tangon.hideActionSheet;
            zuuluu = zuuluu.bind(tangon)();
            zuuluu = global;
            tangon = zuuluu.setTimeout;
            zuuluu = function() {
                zuuluu = _closure2_slot0;
                michal = _closure3_slot0;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = 250;
            michal = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        report['onChange'] = option;
        option = false;
        report['hasIcons'] = option;
        verify = 9;
        option = foxtra[verify];
        option = romeon.bind(tangon)(option);
        offset = option.TableRadioRow;
        option = {};
        backup = 10;
        yankee = foxtra[backup];
        yankee = romeon.bind(tangon)(yankee);
        sizing = yankee.intl;
        kiloes = sizing.string;
        yankee = foxtra[backup];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.RUzEiI;
        yankee = kiloes.bind(sizing)(yankee);
        option['label'] = yankee;
        yankee = 11;
        kiloes = foxtra[yankee];
        kiloes = romeon.bind(tangon)(kiloes);
        kiloes = kiloes.AspectRatio;
        kiloes = kiloes.ORIGINAL;
        option['value'] = kiloes;
        offset = zuuluu.bind(tangon)(offset, option);
        option = new Array(5);
        option[0] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        kiloes = offset.TableRadioRow;
        offset = {};
        sizing = foxtra[backup];
        sizing = romeon.bind(tangon)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = foxtra[backup];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.JJHmqq;
        sizing = output.bind(result)(sizing);
        offset['label'] = sizing;
        sizing = foxtra[yankee];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.AspectRatio;
        sizing = sizing.VERTICAL;
        offset['value'] = sizing;
        offset = zuuluu.bind(tangon)(kiloes, offset);
        option[1] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        kiloes = offset.TableRadioRow;
        offset = {};
        sizing = foxtra[backup];
        sizing = romeon.bind(tangon)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = foxtra[backup];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.MC7UpK;
        sizing = output.bind(result)(sizing);
        offset['label'] = sizing;
        sizing = foxtra[yankee];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.AspectRatio;
        sizing = sizing.SQUARE;
        offset['value'] = sizing;
        offset = zuuluu.bind(tangon)(kiloes, offset);
        option[2] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        kiloes = offset.TableRadioRow;
        offset = {};
        sizing = foxtra[backup];
        sizing = romeon.bind(tangon)(sizing);
        result = sizing.intl;
        output = result.string;
        sizing = foxtra[backup];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.ScPxn5;
        sizing = output.bind(result)(sizing);
        offset['label'] = sizing;
        sizing = foxtra[yankee];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.AspectRatio;
        sizing = sizing.FOUR_THREE;
        offset['value'] = sizing;
        offset = zuuluu.bind(tangon)(kiloes, offset);
        option[3] = offset;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        offset = verify.TableRadioRow;
        verify = {};
        kiloes = foxtra[backup];
        kiloes = romeon.bind(tangon)(kiloes);
        sizing = kiloes.intl;
        kiloes = sizing.string;
        backup = foxtra[backup];
        backup = romeon.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.M+8nRU;
        backup = kiloes.bind(sizing)(backup);
        verify['label'] = backup;
        yankee = foxtra[yankee];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.AspectRatio;
        yankee = yankee.SIXTEEN_NINE;
        verify['value'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[4] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();