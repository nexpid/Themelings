// app/modules/remixing/native/components/RemixingText.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.useRemixingEditorStore;
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/remixing/native/components/RemixingText.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        _fun84175: for(var _fun84175_ip = 0; ; ) switch(_fun84175_ip) {
 0:
            entity = argFoo;
            tango = entity.id;
            kilo = entity.size;
            var _closure2_slot0 = kilo;
            result = entity.textParams;
            var _closure2_slot1 = result;
            zulu = entity.position;
            var _closure2_slot2 = zulu;
            verify = entity.transform;
            golf = entity.transformMap;
            offset = entity.shader;
            oscar = undefined;
            var _closure2_slot5 = oscar;
            var _closure2_slot6 = oscar;
            mike = _closure1_slot3;
            entity = function(argFoo) {
                entity = argFoo;
                entity = entity.editingComponent;
                return entity;
            };
            mike = mike.bind(oscar)(entity);
            foxtrot = _closure1_slot1;
            romeo = _closure1_slot2;
            entity = 3;
            entity = romeo[entity];
            report = foxtrot.bind(oscar)(entity);
            entity = result.fontSize;
            entity = report.bind(oscar)(entity);
            report = entity.font;
            var _closure2_slot3 = report;
            entity = 4;
            entity = romeo[entity];
            entity = foxtrot.bind(oscar)(entity);
            golf = entity.bind(oscar)(tango, golf, verify);
            verify = _closure1_slot0;
            entity = 5;
            entity = romeo[entity];
            romeo = verify.bind(oscar)(entity);
            verify = romeo.useSupportedStringLines;
            entity = result.lines;
            foxtrot = verify.bind(romeo)(tango, report, entity);
            var _closure2_slot4 = foxtrot;
            entity = null;
            verify = entity != offset;
            backup = undefined;
            if(!verify) { _fun84175_ip = 218; continue _fun84175 }
 194:
            romeo = _closure1_slot1;
            sizing = _closure1_slot2;
            verify = 6;
            verify = sizing[verify];
            verify = romeo.bind(oscar)(verify);
            backup = verify[offset];
 218:
            if(!(entity != report)) { _fun84175_ip = 541; continue _fun84175 }
 225:
            offset = new Array(0);
            _closure2_slot5 = offset;
            romeo = new Array(0);
            _closure2_slot6 = romeo;
            verify = foxtrot.map;
            report = function(argFoo, argBar) {
                yankee = argBar;
                tango = _closure2_slot3;
                mike = tango.getGlyphIDs;
                entity = argFoo;
                mike = mike.bind(tango)(entity);
                entity = tango.getGlyphWidths;
                report = entity.bind(tango)(mike);
                tango = report.reduce;
                mike = function(argFoo, argBar) {
                    mike = argFoo;
                    entity = argBar;
                    entity = mike + entity;
                    return entity;
                };
                entity = 0;
                verify = tango.bind(report)(mike, entity);
                report = _closure2_slot2;
                mike = report.x;
                entity = _closure2_slot0;
                entity = entity.width;
                tango = entity - verify;
                entity = 0.5;
                entity = entity * tango;
                options = mike + entity;
                foxtrot = _closure2_slot6;
                romeo = foxtrot.push;
                golf = _closure1_slot0;
                offset = _closure1_slot2;
                oscar = 7;
                mike = offset[oscar];
                entity = undefined;
                result = golf.bind(entity)(mike);
                output = result.rect;
                backup = report.y;
                mike = _closure2_slot1;
                tango = mike.fontSize;
                tango = yankee * tango;
                backup = backup + tango;
                tango = 3;
                control = backup + tango;
                echo = 6;
                source = verify + echo;
                backup = mike.fontSize;
                update = backup + echo;
                vacuum = options - tango;
                sequence = result;
                tango = sequence[output](vacuum, control, source, update, echo);
                tango = romeo.bind(foxtrot)(tango);
                tango = _closure2_slot5;
                zulu = tango.push;
                oscar = offset[oscar];
                golf = golf.bind(entity)(oscar);
                oscar = golf.rect;
                offset = report.y;
                report = 1;
                yankee = yankee + report;
                report = mike.fontSize;
                report = yankee * report;
                control = offset + report;
                update = mike.fontSize;
                sequence = golf;
                vacuum = options;
                source = verify;
                mike = sequence[oscar](vacuum, control, source, update, echo);
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            report = verify.bind(foxtrot)(report);
            verify = _closure1_slot0;
            report = _closure1_slot2;
            sizing = 7;
            report = report[sizing];
            echo = verify.bind(oscar)(report);
            output = echo.rect;
            vacuum = zulu.x;
            control = zulu.y;
            source = kilo.width;
            update = kilo.height;
            sequence = echo;
            foxtrot = sequence[output](vacuum, control, source, update, echo);
            report = entity == mike;
            zulu = undefined;
            if(report) { _fun84175_ip = 325; continue _fun84175 }
 320:
            zulu = mike.id;
 325:
            mike = null;
            if(!(zulu !== tango)) { _fun84175_ip = 539; continue _fun84175 }
 334:
            report = _closure1_slot5;
            verify = _closure1_slot0;
            output = _closure1_slot2;
            zulu = output[sizing];
            zulu = verify.bind(oscar)(zulu);
            tango = zulu.Group;
            zulu = {};
            result = result.color;
            zulu['color'] = result;
            zulu['transform'] = golf;
            golf = 8;
            golf = output[golf];
            verify = verify.bind(oscar)(golf);
            golf = verify.centerOfRect;
            golf = golf.bind(verify)(foxtrot);
            zulu['origin'] = golf;
            verify = romeo.map;
            golf = function(argFoo, argBar) {
                entity = argFoo;
                report = _closure1_slot4;
                zulu = _closure1_slot0;
                tango = _closure1_slot2;
                mike = 7;
                mike = tango[mike];
                tango = undefined;
                mike = zulu.bind(tango)(mike);
                zulu = mike.RoundedRect;
                mike = {};
                oscar = 10;
                mike['r'] = oscar;
                oscar = _closure2_slot1;
                oscar = oscar.backgroundColor;
                mike['color'] = oscar;
                oscar = entity.x;
                mike['x'] = oscar;
                oscar = entity.y;
                mike['y'] = oscar;
                oscar = entity.height;
                mike['height'] = oscar;
                entity = entity.width;
                mike['width'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            verify = verify.bind(romeo)(golf);
            golf = new Array(4);
            golf[0] = verify;
            golf[1] = entity;
            verify = entity != backup;
            if(!verify) { _fun84175_ip = 504; continue _fun84175 }
 440:
            foxtrot = _closure1_slot4;
            romeo = _closure1_slot0;
            yankee = _closure1_slot2;
            yankee = yankee[sizing];
            yankee = romeo.bind(oscar)(yankee);
            romeo = yankee.Shader;
            yankee = {};
            yankee['source'] = backup;
            backup = {};
            sizing = kilo.width;
            backup['w'] = sizing;
            kilo = kilo.height;
            backup['h'] = kilo;
            yankee['uniforms'] = backup;
            verify = foxtrot.bind(oscar)(romeo, yankee);
 504:
            golf[2] = verify;
            verify = offset.map;
            options = function(argFoo, argBar) {
                oscar = argFoo;
                report = argBar;
                tango = _closure1_slot4;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 7;
                entity = zulu[entity];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.Text;
                entity = {};
                options = _closure2_slot1;
                options = options.color;
                entity['color'] = options;
                options = _closure2_slot4;
                options = options[report];
                entity['text'] = options;
                golf = _closure2_slot3;
                entity['font'] = golf;
                golf = oscar.x;
                entity['x'] = golf;
                oscar = oscar.y;
                entity['y'] = oscar;
                entity = tango.bind(zulu)(mike, entity, report);
                return entity;
            };
            options = verify.bind(offset)(options);
            golf[3] = options;
            zulu['children'] = golf;
            mike = report.bind(oscar)(tango, zulu);
 539:
            return mike;
 541:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();