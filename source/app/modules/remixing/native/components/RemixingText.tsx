// app/modules/remixing/native/components/RemixingText.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useRemixingEditorStore;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/remixing/native/components/RemixingText.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            tangon = entity.id;
            kiloes = entity.size;
            var _closure2_slot0 = kiloes;
            result = entity.textParams;
            var _closure2_slot1 = result;
            zuuluu = entity.position;
            var _closure2_slot2 = zuuluu;
            verify = entity.transform;
            golfie = entity.transformMap;
            offset = entity.shader;
            oscard = undefined;
            var _closure2_slot5 = oscard;
            var _closure2_slot6 = oscard;
            michal = _closure1_slot3;
            entity = function(argFoo) {
                entity = argFoo;
                entity = entity.editingComponent;
                return entity;
            };
            michal = michal.bind(oscard)(entity);
            foxtra = _closure1_slot1;
            romeon = _closure1_slot2;
            entity = 3;
            entity = romeon[entity];
            report = foxtra.bind(oscard)(entity);
            entity = result.fontSize;
            entity = report.bind(oscard)(entity);
            report = entity.font;
            var _closure2_slot3 = report;
            entity = 4;
            entity = romeon[entity];
            entity = foxtra.bind(oscard)(entity);
            golfie = entity.bind(oscard)(tangon, golfie, verify);
            verify = _closure1_slot0;
            entity = 5;
            entity = romeon[entity];
            romeon = verify.bind(oscard)(entity);
            verify = romeon.useSupportedStringLines;
            entity = result.lines;
            foxtra = verify.bind(romeon)(tangon, report, entity);
            var _closure2_slot4 = foxtra;
            entity = null;
            verify = entity != offset;
            backup = undefined;
            if(!verify) { _fun00002_ip = 218; continue _fun00001 }
 194:
            romeon = _closure1_slot1;
            sizing = _closure1_slot2;
            verify = 6;
            verify = sizing[verify];
            verify = romeon.bind(oscard)(verify);
            backup = verify[offset];
 218:
            if(!(entity != report)) { _fun00002_ip = 541; continue _fun00001 }
 225:
            offset = new Array(0);
            _closure2_slot5 = offset;
            romeon = new Array(0);
            _closure2_slot6 = romeon;
            verify = foxtra.map;
            report = function(argFoo, argBar) {
                yankee = argBar;
                tangon = _closure2_slot3;
                michal = tangon.getGlyphIDs;
                entity = argFoo;
                michal = michal.bind(tangon)(entity);
                entity = tangon.getGlyphWidths;
                report = entity.bind(tangon)(michal);
                tangon = report.reduce;
                michal = function(argFoo, argBar) {
                    michal = argFoo;
                    entity = argBar;
                    entity = michal + entity;
                    return entity;
                };
                entity = 0;
                verify = tangon.bind(report)(michal, entity);
                report = _closure2_slot2;
                michal = report.x;
                entity = _closure2_slot0;
                entity = entity.width;
                tangon = entity - verify;
                entity = 0.5;
                entity = entity * tangon;
                option = michal + entity;
                foxtra = _closure2_slot6;
                romeon = foxtra.push;
                golfie = _closure1_slot0;
                offset = _closure1_slot2;
                oscard = 7;
                michal = offset[oscard];
                entity = undefined;
                result = golfie.bind(entity)(michal);
                output = result.rect;
                backup = report.y;
                michal = _closure2_slot1;
                tangon = michal.fontSize;
                tangon = yankee * tangon;
                backup = backup + tangon;
                tangon = 3;
                ctrled = backup + tangon;
                echoed = 6;
                source = verify + echoed;
                backup = michal.fontSize;
                update = backup + echoed;
                vacuum = option - tangon;
                sequen = result;
                tangon = sequen[output](vacuum, ctrled, source, update, echoed);
                tangon = romeon.bind(foxtra)(tangon);
                tangon = _closure2_slot5;
                zuuluu = tangon.push;
                oscard = offset[oscard];
                golfie = golfie.bind(entity)(oscard);
                oscard = golfie.rect;
                offset = report.y;
                report = 1;
                yankee = yankee + report;
                report = michal.fontSize;
                report = yankee * report;
                ctrled = offset + report;
                update = michal.fontSize;
                sequen = golfie;
                vacuum = option;
                source = verify;
                michal = sequen[oscard](vacuum, ctrled, source, update, echoed);
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            report = verify.bind(foxtra)(report);
            verify = _closure1_slot0;
            report = _closure1_slot2;
            sizing = 7;
            report = report[sizing];
            echoed = verify.bind(oscard)(report);
            output = echoed.rect;
            vacuum = zuuluu.x;
            ctrled = zuuluu.y;
            source = kiloes.width;
            update = kiloes.height;
            sequen = echoed;
            foxtra = sequen[output](vacuum, ctrled, source, update, echoed);
            report = entity == michal;
            zuuluu = undefined;
            if(report) { _fun00002_ip = 325; continue _fun00001 }
 320:
            zuuluu = michal.id;
 325:
            michal = null;
            if(!(zuuluu !== tangon)) { _fun00002_ip = 539; continue _fun00001 }
 334:
            report = _closure1_slot5;
            verify = _closure1_slot0;
            output = _closure1_slot2;
            zuuluu = output[sizing];
            zuuluu = verify.bind(oscard)(zuuluu);
            tangon = zuuluu.Group;
            zuuluu = {};
            result = result.color;
            zuuluu['color'] = result;
            zuuluu['transform'] = golfie;
            golfie = 8;
            golfie = output[golfie];
            verify = verify.bind(oscard)(golfie);
            golfie = verify.centerOfRect;
            golfie = golfie.bind(verify)(foxtra);
            zuuluu['origin'] = golfie;
            verify = romeon.map;
            golfie = function(argFoo, argBar) {
                entity = argFoo;
                report = _closure1_slot4;
                zuuluu = _closure1_slot0;
                tangon = _closure1_slot2;
                michal = 7;
                michal = tangon[michal];
                tangon = undefined;
                michal = zuuluu.bind(tangon)(michal);
                zuuluu = michal.RoundedRect;
                michal = {};
                oscard = 10;
                michal['r'] = oscard;
                oscard = _closure2_slot1;
                oscard = oscard.backgroundColor;
                michal['color'] = oscard;
                oscard = entity.x;
                michal['x'] = oscard;
                oscard = entity.y;
                michal['y'] = oscard;
                oscard = entity.height;
                michal['height'] = oscard;
                entity = entity.width;
                michal['width'] = entity;
                entity = argBar;
                entity = report.bind(tangon)(zuuluu, michal, entity);
                return entity;
            };
            verify = verify.bind(romeon)(golfie);
            golfie = new Array(4);
            golfie[0] = verify;
            golfie[1] = entity;
            verify = entity != backup;
            if(!verify) { _fun00002_ip = 504; continue _fun00001 }
 440:
            foxtra = _closure1_slot4;
            romeon = _closure1_slot0;
            yankee = _closure1_slot2;
            yankee = yankee[sizing];
            yankee = romeon.bind(oscard)(yankee);
            romeon = yankee.Shader;
            yankee = {};
            yankee['source'] = backup;
            backup = {};
            sizing = kiloes.width;
            backup['w'] = sizing;
            kiloes = kiloes.height;
            backup['h'] = kiloes;
            yankee['uniforms'] = backup;
            verify = foxtra.bind(oscard)(romeon, yankee);
 504:
            golfie[2] = verify;
            verify = offset.map;
            option = function(argFoo, argBar) {
                oscard = argFoo;
                report = argBar;
                tangon = _closure1_slot4;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 7;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.Text;
                entity = {};
                option = _closure2_slot1;
                option = option.color;
                entity['color'] = option;
                option = _closure2_slot4;
                option = option[report];
                entity['text'] = option;
                golfie = _closure2_slot3;
                entity['font'] = golfie;
                golfie = oscard.x;
                entity['x'] = golfie;
                oscard = oscard.y;
                entity['y'] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity, report);
                return entity;
            };
            option = verify.bind(offset)(option);
            golfie[3] = option;
            zuuluu['children'] = golfie;
            michal = report.bind(oscard)(tangon, zuuluu);
 539:
            return michal;
 541:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();