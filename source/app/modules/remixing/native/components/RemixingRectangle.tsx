// app/modules/remixing/native/components/RemixingRectangle.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot3 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/remixing/native/components/RemixingRectangle.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        report = entity.id;
        offset = entity.color;
        option = entity.size;
        verify = entity.position;
        oscard = entity.transform;
        zuuluu = entity.transformMap;
        golfie = _closure1_slot1;
        yankee = _closure1_slot2;
        michal = 2;
        michal = yankee[michal];
        tangon = undefined;
        michal = golfie.bind(tangon)(michal);
        romeon = michal.bind(tangon)(report, zuuluu, oscard);
        zuuluu = _closure1_slot3;
        golfie = _closure1_slot0;
        oscard = 3;
        entity = yankee[oscard];
        entity = golfie.bind(tangon)(entity);
        michal = entity.Group;
        entity = {};
        entity['transform'] = romeon;
        romeon = 4;
        romeon = yankee[romeon];
        backup = golfie.bind(tangon)(romeon);
        foxtra = backup.centerOfRect;
        romeon = yankee[oscard];
        echoed = golfie.bind(tangon)(romeon);
        result = echoed.rect;
        vacuum = verify.x;
        ctrled = verify.y;
        source = option.width;
        update = option.height;
        sequen = echoed;
        romeon = sequen[result](vacuum, ctrled, source, update, echoed);
        romeon = foxtra.bind(backup)(romeon);
        entity['origin'] = romeon;
        oscard = yankee[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.Rect;
        oscard = {};
        oscard['color'] = offset;
        offset = verify.x;
        oscard['x'] = offset;
        verify = verify.y;
        oscard['y'] = verify;
        verify = option.width;
        oscard['width'] = verify;
        option = option.height;
        oscard['height'] = option;
        oscard = zuuluu.bind(tangon)(golfie, oscard);
        entity['children'] = oscard;
        entity = zuuluu.bind(tangon)(michal, entity, report);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();