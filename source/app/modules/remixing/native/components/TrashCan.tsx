// app/modules/remixing/native/components/TrashCan.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    golfie = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    verify = tangon.View;
    tangon = 2;
    offset = oscard[tangon];
    offset = report.bind(entity)(offset);
    offset = offset.jsx;
    var _closure1_slot3 = offset;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = option.bind(entity)(tangon);
    tangon = option.createAnimatedComponent;
    tangon = tangon.bind(option)(verify);
    var _closure1_slot5 = tangon;
    tangon = {};
    option = "function TrashCanTsx1(){const{top,visible,TRASH_TAP_TARGET_SIZE,TRASH_CAN_ICON_CONTAINER_SIZE}=this.__closure;return{position:'absolute',top:top,display:'flex',opacity:visible?1:0,height:TRASH_TAP_TARGET_SIZE,width:TRASH_TAP_TARGET_SIZE,left:'50%',transform:[{translateX:-TRASH_CAN_ICON_CONTAINER_SIZE/2}]};}";
    tangon['code'] = option;
    var _closure1_slot6 = tangon;
    tangon = {};
    option = "function TrashCanTsx2(){const{focused,tokens,TRASH_CAN_ICON_CONTAINER_SIZE,TRASH_CAN_ICON_ACTIVE_SCALE}=this.__closure;return{display:focused.get()?'flex':'none',backgroundColor:tokens.unsafe_rawColors.WHITE_500,position:'absolute',height:TRASH_CAN_ICON_CONTAINER_SIZE*TRASH_CAN_ICON_ACTIVE_SCALE,width:TRASH_CAN_ICON_CONTAINER_SIZE*TRASH_CAN_ICON_ACTIVE_SCALE,borderRadius:TRASH_CAN_ICON_CONTAINER_SIZE*TRASH_CAN_ICON_ACTIVE_SCALE/2,top:-(TRASH_CAN_ICON_CONTAINER_SIZE*(TRASH_CAN_ICON_ACTIVE_SCALE-1))/2,left:-(TRASH_CAN_ICON_CONTAINER_SIZE*(TRASH_CAN_ICON_ACTIVE_SCALE-1))/2,alignSelf:'auto',alignItems:'center',justifyContent:'center'};}";
    tangon['code'] = option;
    var _closure1_slot7 = tangon;
    tangon = {};
    option = "function TrashCanTsx3(){const{focused,TRASH_CAN_ICON_CONTAINER_SIZE}=this.__closure;return{display:!focused.get()?'flex':'none',backgroundColor:'rgba(100, 100, 100, 0.5)',position:'absolute',height:TRASH_CAN_ICON_CONTAINER_SIZE,width:TRASH_CAN_ICON_CONTAINER_SIZE,borderRadius:TRASH_CAN_ICON_CONTAINER_SIZE/2,alignSelf:'auto',alignItems:'center',justifyContent:'center'};}";
    tangon['code'] = option;
    var _closure1_slot8 = tangon;
    tangon = golfie.forwardRef;
    michal = function(argFoo, argBar) {
        michal = argFoo;
        verify = michal.visible;
        var _closure2_slot0 = verify;
        yankee = michal.focused;
        var _closure2_slot1 = yankee;
        offset = michal.top;
        var _closure2_slot2 = offset;
        romeon = _closure1_slot0;
        foxtra = _closure1_slot2;
        oscard = 3;
        michal = foxtra[oscard];
        tangon = undefined;
        golfie = romeon.bind(tangon)(michal);
        zuuluu = golfie.useAnimatedStyle;
        michal = function() { // Original name: E
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = {'position': 'absolute', 'top': null, 'display': 'flex'};
                zuuluu = _closure2_slot2;
                entity['top'] = zuuluu;
                zuuluu = _closure2_slot0;
                michal = 0;
                if(!zuuluu) { _fun00002_ip = 39; continue _fun00001 }
 36:
                michal = 1;
 39:
                entity['opacity'] = michal;
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                michal = 4;
                zuuluu = oscard[michal];
                tangon = undefined;
                zuuluu = report.bind(tangon)(zuuluu);
                zuuluu = zuuluu.TRASH_TAP_TARGET_SIZE;
                entity['height'] = zuuluu;
                zuuluu = oscard[michal];
                zuuluu = report.bind(tangon)(zuuluu);
                zuuluu = zuuluu.TRASH_TAP_TARGET_SIZE;
                entity['width'] = zuuluu;
                zuuluu = '50%';
                entity['left'] = zuuluu;
                zuuluu = {};
                michal = oscard[michal];
                michal = report.bind(tangon)(michal);
                michal = michal.TRASH_CAN_ICON_CONTAINER_SIZE;
                tangon = -michal;
                michal = 2;
                michal = tangon / michal;
                zuuluu['translateX'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            }
        };
        option = {};
        option['top'] = offset;
        option['visible'] = verify;
        verify = 4;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        offset = offset.TRASH_TAP_TARGET_SIZE;
        option['TRASH_TAP_TARGET_SIZE'] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        offset = offset.TRASH_CAN_ICON_CONTAINER_SIZE;
        option['TRASH_CAN_ICON_CONTAINER_SIZE'] = offset;
        michal['__closure'] = option;
        option = 13121566996394.0;
        michal['__workletHash'] = option;
        option = _closure1_slot6;
        michal['__initData'] = option;
        golfie = zuuluu.bind(golfie)(michal);
        michal = foxtra[oscard];
        option = romeon.bind(tangon)(michal);
        zuuluu = option.useAnimatedStyle;
        michal = function() { // Original name: n
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = {};
                zuuluu = _closure2_slot1;
                michal = zuuluu.get;
                zuuluu = michal.bind(zuuluu)();
                michal = 'none';
                if(!zuuluu) { _fun00004_ip = 29; continue _fun00003 }
 25:
                michal = 'flex';
 29:
                entity['display'] = michal;
                tangon = _closure1_slot1;
                option = _closure1_slot2;
                zuuluu = 5;
                zuuluu = option[zuuluu];
                golfie = undefined;
                zuuluu = tangon.bind(golfie)(zuuluu);
                zuuluu = zuuluu.unsafe_rawColors;
                zuuluu = zuuluu.WHITE_500;
                entity['backgroundColor'] = zuuluu;
                zuuluu = 'absolute';
                entity['position'] = zuuluu;
                oscard = _closure1_slot0;
                michal = 4;
                zuuluu = option[michal];
                zuuluu = oscard.bind(golfie)(zuuluu);
                tangon = zuuluu.TRASH_CAN_ICON_CONTAINER_SIZE;
                zuuluu = option[michal];
                zuuluu = oscard.bind(golfie)(zuuluu);
                zuuluu = zuuluu.TRASH_CAN_ICON_ACTIVE_SCALE;
                zuuluu = tangon * zuuluu;
                entity['height'] = zuuluu;
                zuuluu = option[michal];
                zuuluu = oscard.bind(golfie)(zuuluu);
                tangon = zuuluu.TRASH_CAN_ICON_CONTAINER_SIZE;
                zuuluu = option[michal];
                zuuluu = oscard.bind(golfie)(zuuluu);
                zuuluu = zuuluu.TRASH_CAN_ICON_ACTIVE_SCALE;
                zuuluu = tangon * zuuluu;
                entity['width'] = zuuluu;
                zuuluu = option[michal];
                zuuluu = oscard.bind(golfie)(zuuluu);
                tangon = zuuluu.TRASH_CAN_ICON_CONTAINER_SIZE;
                zuuluu = option[michal];
                zuuluu = oscard.bind(golfie)(zuuluu);
                zuuluu = zuuluu.TRASH_CAN_ICON_ACTIVE_SCALE;
                tangon = tangon * zuuluu;
                zuuluu = 2;
                tangon = tangon / zuuluu;
                entity['borderRadius'] = tangon;
                tangon = option[michal];
                tangon = oscard.bind(golfie)(tangon);
                tangon = tangon.TRASH_CAN_ICON_CONTAINER_SIZE;
                verify = -tangon;
                tangon = option[michal];
                tangon = oscard.bind(golfie)(tangon);
                tangon = tangon.TRASH_CAN_ICON_ACTIVE_SCALE;
                report = 1;
                tangon = tangon - report;
                tangon = verify * tangon;
                tangon = tangon / zuuluu;
                entity['top'] = tangon;
                tangon = option[michal];
                tangon = oscard.bind(golfie)(tangon);
                tangon = tangon.TRASH_CAN_ICON_CONTAINER_SIZE;
                tangon = -tangon;
                michal = option[michal];
                michal = oscard.bind(golfie)(michal);
                michal = michal.TRASH_CAN_ICON_ACTIVE_SCALE;
                michal = michal - report;
                michal = tangon * michal;
                michal = michal / zuuluu;
                entity['left'] = michal;
                michal = 'auto';
                entity['alignSelf'] = michal;
                michal = 'center';
                entity['alignItems'] = michal;
                entity['justifyContent'] = michal;
                return entity;
            }
        };
        offset = {};
        offset['focused'] = yankee;
        kiloes = _closure1_slot1;
        backup = 5;
        sizing = foxtra[backup];
        sizing = kiloes.bind(tangon)(sizing);
        offset['tokens'] = sizing;
        sizing = foxtra[verify];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.TRASH_CAN_ICON_CONTAINER_SIZE;
        offset['TRASH_CAN_ICON_CONTAINER_SIZE'] = sizing;
        sizing = foxtra[verify];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.TRASH_CAN_ICON_ACTIVE_SCALE;
        offset['TRASH_CAN_ICON_ACTIVE_SCALE'] = sizing;
        michal['__closure'] = offset;
        offset = 9574223373166.0;
        michal['__workletHash'] = offset;
        offset = _closure1_slot7;
        michal['__initData'] = offset;
        offset = zuuluu.bind(option)(michal);
        michal = foxtra[oscard];
        zuuluu = romeon.bind(tangon)(michal);
        michal = zuuluu.useAnimatedStyle;
        entity = function() { // Original name: R
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                entity = {'display': null, 'backgroundColor': 'rgba(100, 100, 100, 0.5)', 'position': 'absolute'};
                zuuluu = _closure2_slot1;
                michal = zuuluu.get;
                zuuluu = michal.bind(zuuluu)();
                michal = 'flex';
                if(!zuuluu) { _fun00006_ip = 37; continue _fun00005 }
 33:
                michal = 'none';
 37:
                entity['display'] = michal;
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                michal = 4;
                oscard = report[michal];
                zuuluu = undefined;
                oscard = tangon.bind(zuuluu)(oscard);
                oscard = oscard.TRASH_CAN_ICON_CONTAINER_SIZE;
                entity['height'] = oscard;
                oscard = report[michal];
                oscard = tangon.bind(zuuluu)(oscard);
                oscard = oscard.TRASH_CAN_ICON_CONTAINER_SIZE;
                entity['width'] = oscard;
                michal = report[michal];
                michal = tangon.bind(zuuluu)(michal);
                zuuluu = michal.TRASH_CAN_ICON_CONTAINER_SIZE;
                michal = 2;
                michal = zuuluu / michal;
                entity['borderRadius'] = michal;
                michal = 'auto';
                entity['alignSelf'] = michal;
                michal = 'center';
                entity['alignItems'] = michal;
                entity['justifyContent'] = michal;
                return entity;
            }
        };
        option = {};
        option['focused'] = yankee;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        verify = verify.TRASH_CAN_ICON_CONTAINER_SIZE;
        option['TRASH_CAN_ICON_CONTAINER_SIZE'] = verify;
        entity['__closure'] = option;
        option = 3817445736583.0;
        entity['__workletHash'] = option;
        option = _closure1_slot8;
        entity['__initData'] = option;
        yankee = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot4;
        michal = _closure1_slot5;
        entity = {};
        entity['style'] = golfie;
        golfie = argBar;
        entity['ref'] = golfie;
        option = _closure1_slot3;
        report = foxtra[oscard];
        report = kiloes.bind(tangon)(report);
        golfie = report.View;
        report = {};
        verify = new Array(1);
        verify[0] = yankee;
        report['style'] = verify;
        yankee = 6;
        verify = foxtra[yankee];
        output = kiloes.bind(tangon)(verify);
        verify = {};
        sizing = 7;
        result = foxtra[sizing];
        result = kiloes.bind(tangon)(result);
        verify['source'] = result;
        result = foxtra[backup];
        result = kiloes.bind(tangon)(result);
        result = result.unsafe_rawColors;
        result = result.WHITE_500;
        verify['color'] = result;
        result = foxtra[yankee];
        result = romeon.bind(tangon)(result);
        result = result.IconSizes;
        result = result.LARGE;
        verify['size'] = result;
        verify = option.bind(tangon)(output, verify);
        report['children'] = verify;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        oscard = foxtra[oscard];
        oscard = kiloes.bind(tangon)(oscard);
        golfie = oscard.View;
        oscard = {};
        verify = new Array(1);
        verify[0] = offset;
        oscard['style'] = verify;
        verify = foxtra[yankee];
        offset = kiloes.bind(tangon)(verify);
        verify = {};
        sizing = foxtra[sizing];
        sizing = kiloes.bind(tangon)(sizing);
        verify['source'] = sizing;
        backup = foxtra[backup];
        backup = kiloes.bind(tangon)(backup);
        backup = backup.unsafe_rawColors;
        backup = backup.RED_400;
        verify['color'] = backup;
        yankee = foxtra[yankee];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.IconSizes;
        yankee = yankee.LARGE;
        verify['size'] = yankee;
        verify = option.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/remixing/native/components/TrashCan.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();