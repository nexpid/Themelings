// app/modules/remixing/native/hooks/DrawingHooks.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 1;
    option = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/remixing/native/hooks/DrawingHooks.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() {
        offset = _closure1_slot0;
        yankee = _closure1_slot1;
        entity = 3;
        entity = yankee[entity];
        verify = undefined;
        report = offset.bind(verify)(entity);
        tangon = report.useStateFromStoresObject;
        entity = _closure1_slot4;
        zuuluu = new Array(1);
        zuuluu[0] = entity;
        entity = function() {
            michal = _closure1_slot4;
            entity = michal.getDrawingState;
            entity = entity.bind(michal)();
            return entity;
        };
        entity = tangon.bind(report)(zuuluu, entity);
        golfie = entity.brushColor;
        romeon = entity.brushSize;
        foxtra = _closure1_slot3;
        zuuluu = foxtra.useState;
        entity = false;
        entity = zuuluu.bind(foxtra)(entity);
        option = _closure1_slot2;
        oscard = 2;
        entity = option.bind(verify)(entity, oscard);
        tangon = 0;
        report = entity[tangon];
        michal = 1;
        zuuluu = entity[michal];
        entity = foxtra.useState;
        entity = entity.bind(foxtra)(tangon);
        entity = option.bind(verify)(entity, oscard);
        tangon = entity[tangon];
        michal = entity[michal];
        option = 4;
        entity = yankee[option];
        oscard = offset.bind(verify)(entity);
        entity = oscard.useSharedValue;
        oscard = entity.bind(oscard)(romeon);
        entity = {};
        option = yankee[option];
        offset = offset.bind(verify)(option);
        verify = offset.useSharedValue;
        option = '';
        option = verify.bind(offset)(option);
        entity['drawingPath'] = option;
        entity['drawingColor'] = golfie;
        entity['strokeWidth'] = oscard;
        entity['isActivelyDrawing'] = report;
        entity['carouselIndex'] = tangon;
        entity['setIsActivelyDrawing'] = zuuluu;
        entity['setCarouselIndex'] = michal;
        return entity;
    };
    zuuluu['useDrawingHooks'] = michal;
    return entity;
})();