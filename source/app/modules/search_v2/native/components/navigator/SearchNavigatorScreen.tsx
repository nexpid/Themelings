// app/modules/search_v2/native/components/navigator/SearchNavigatorScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot7 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 5;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = foxtra;
    verify['flex'] = romeon;
    tangon['wrapper'] = verify;
    verify = {};
    verify['flex'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginTop'] = romeon;
    tangon['tabs'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginLeft'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_12;
    verify['marginRight'] = offset;
    tangon['back'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/search_v2/native/components/navigator/SearchNavigatorScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SearchNavigatorScreen
        zuuluu = argFoo;
        michal = zuuluu.navigation;
        var _closure2_slot0 = michal;
        zuuluu = zuuluu.route;
        zuuluu = zuuluu.params;
        sizing = zuuluu.searchContext;
        var _closure2_slot1 = sizing;
        zuuluu = _closure1_slot9;
        tangon = undefined;
        foxtra = zuuluu.bind(tangon)();
        var _closure2_slot2 = foxtra;
        report = _closure1_slot3;
        oscard = report.useRef;
        zuuluu = null;
        ctrled = oscard.bind(report)(zuuluu);
        var _closure2_slot3 = ctrled;
        oscard = report.useRef;
        zuuluu = false;
        zuuluu = oscard.bind(report)(zuuluu);
        var _closure2_slot4 = zuuluu;
        golfie = _closure1_slot0;
        output = _closure1_slot2;
        zuuluu = 6;
        zuuluu = output[zuuluu];
        oscard = golfie.bind(tangon)(zuuluu);
        zuuluu = oscard.useSearchSuggestionsGesture;
        zuuluu = zuuluu.bind(oscard)(sizing);
        offset = zuuluu.gesture;
        source = zuuluu.dismissed;
        update = zuuluu.setDismissed;
        echoed = zuuluu.onLayoutMeasure;
        backup = _closure1_slot1;
        zuuluu = 7;
        zuuluu = output[zuuluu];
        zuuluu = backup.bind(tangon)(zuuluu);
        zuuluu = zuuluu.bind(tangon)();
        kiloes = zuuluu.width;
        option = report.useEffect;
        oscard = new Array(2);
        oscard[0] = michal;
        oscard[1] = ctrled;
        zuuluu = function() {
            tangon = _closure2_slot0;
            zuuluu = tangon.addListener;
            michal = 'transitionEnd';
            entity = function(argFoo) {
                _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                    entity = argFoo;
                    entity = entity.data;
                    entity = entity.closing;
                    if(entity) { _fun00002_ip = 69; continue _fun00001 }
 17:
                    michal = _closure2_slot4;
                    michal = michal.current;
                    if(michal) { _fun00002_ip = 69; continue _fun00001 }
 32:
                    zuuluu = _closure2_slot4;
                    michal = true;
                    zuuluu['current'] = michal;
                    entity = _closure2_slot3;
                    michal = entity.current;
                    entity = null;
                    if(!(entity != michal)) { _fun00002_ip = 69; continue _fun00001 }
 59:
                    entity = michal.focus;
                    entity = entity.bind(michal)();
 69:
                    entity = undefined;
                    return entity;
                }
            };
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        };
        zuuluu = option.bind(report)(zuuluu, oscard);
        option = report.useEffect;
        oscard = new Array(1);
        oscard[0] = sizing;
        zuuluu = function() {
            entity = function() {
                tangon = _closure1_slot5;
                zuuluu = tangon.deleteState;
                michal = _closure2_slot1;
                michal = zuuluu.bind(tangon)(michal);
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 8;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.clearAllSearchStates;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            return entity;
        };
        zuuluu = option.bind(report)(zuuluu, oscard);
        zuuluu = 9;
        zuuluu = output[zuuluu];
        zuuluu = backup.bind(tangon)(zuuluu);
        vacuum = zuuluu.bind(tangon)();
        zuuluu = report.useMemo;
        oscard = michal.goBack;
        michal = new Array(2);
        michal[0] = oscard;
        oscard = foxtra.back;
        michal[1] = oscard;
        entity = function() {
            tangon = _closure1_slot6;
            zuuluu = _closure1_slot4;
            michal = {};
            option = _closure1_slot0;
            yankee = _closure1_slot2;
            entity = 10;
            report = yankee[entity];
            entity = undefined;
            report = option.bind(entity)(report);
            oscard = report.PressableOpacity;
            report = {};
            offset = _closure2_slot2;
            offset = offset.back;
            report['style'] = offset;
            offset = 11;
            romeon = yankee[offset];
            romeon = option.bind(entity)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.string;
            offset = yankee[offset];
            offset = option.bind(entity)(offset);
            offset = offset.t;
            offset = offset.13/7kZ;
            offset = romeon.bind(foxtra)(offset);
            report['accessibilityLabel'] = offset;
            golfie = _closure2_slot0;
            golfie = golfie.goBack;
            report['onPress'] = golfie;
            golfie = 12;
            golfie = yankee[golfie];
            golfie = option.bind(entity)(golfie);
            option = golfie.ArrowLargeLeftIcon;
            golfie = {};
            offset = _closure1_slot1;
            verify = 5;
            verify = yankee[verify];
            verify = offset.bind(entity)(verify);
            verify = verify.colors;
            verify = verify.INTERACTIVE_NORMAL;
            golfie['color'] = verify;
            golfie = tangon.bind(entity)(option, golfie);
            report['children'] = golfie;
            report = tangon.bind(entity)(oscard, report);
            michal['children'] = report;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        result = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot7;
        michal = _closure1_slot8;
        entity = {};
        option = _closure1_slot6;
        report = 13;
        report = output[report];
        oscard = backup.bind(tangon)(report);
        report = {'absolute': true, 'wide': true, 'tall': true};
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = 14;
        oscard = output[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.NonCollapsableGestureDetector;
        oscard = {};
        oscard['gesture'] = offset;
        offset = _closure1_slot4;
        verify = {};
        romeon = foxtra.wrapper;
        yankee = new Array(2);
        yankee[0] = romeon;
        romeon = {};
        romeon['paddingTop'] = vacuum;
        yankee[1] = romeon;
        verify['style'] = yankee;
        yankee = 15;
        yankee = output[yankee];
        romeon = backup.bind(tangon)(yankee);
        yankee = {};
        yankee['ref'] = ctrled;
        yankee['searchContext'] = sizing;
        yankee['suggestionsDismissed'] = source;
        yankee['setSuggestionsDismissed'] = update;
        yankee['onSuggestionsLayoutMesure'] = echoed;
        yankee['backButton'] = result;
        romeon = option.bind(tangon)(romeon, yankee);
        yankee = new Array(2);
        yankee[0] = romeon;
        romeon = {};
        foxtra = foxtra.tabs;
        romeon['style'] = foxtra;
        foxtra = 16;
        foxtra = output[foxtra];
        backup = backup.bind(tangon)(foxtra);
        foxtra = {};
        foxtra['searchContext'] = sizing;
        foxtra['width'] = kiloes;
        foxtra = option.bind(tangon)(backup, foxtra);
        romeon['children'] = foxtra;
        romeon = option.bind(tangon)(offset, romeon);
        yankee[1] = romeon;
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();