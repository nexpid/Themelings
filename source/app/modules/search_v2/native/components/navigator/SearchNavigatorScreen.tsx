// app/modules/search_v2/native/components/navigator/SearchNavigatorScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    offset = 1;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.deleteSearchQueryState;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot7 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 5;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = yankee;
    verify['flex'] = offset;
    tangon['wrapper'] = verify;
    verify = {'flex': 1, 'marginTop': 16};
    tangon['tabs'] = verify;
    verify = {'marginLeft': 6, 'marginRight': 2};
    tangon['back'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/search_v2/native/components/navigator/SearchNavigatorScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SearchNavigatorScreen
        michal = argFoo;
        source = michal.navigation;
        var _closure2_slot0 = source;
        michal = michal.route;
        michal = michal.params;
        sizing = michal.searchContext;
        var _closure2_slot1 = sizing;
        michal = _closure1_slot9;
        tangon = undefined;
        foxtra = michal.bind(tangon)();
        report = _closure1_slot3;
        zuuluu = report.useRef;
        michal = null;
        ctrled = zuuluu.bind(report)(michal);
        var _closure2_slot2 = ctrled;
        zuuluu = report.useRef;
        michal = false;
        michal = zuuluu.bind(report)(michal);
        var _closure2_slot3 = michal;
        golfie = _closure1_slot0;
        output = _closure1_slot2;
        michal = 6;
        michal = output[michal];
        zuuluu = golfie.bind(tangon)(michal);
        michal = zuuluu.useSearchSuggestionsGesture;
        michal = michal.bind(zuuluu)(sizing);
        offset = michal.gesture;
        update = michal.dismissed;
        echoed = michal.setDismissed;
        result = michal.onLayoutMeasure;
        backup = _closure1_slot1;
        michal = 7;
        michal = output[michal];
        michal = backup.bind(tangon)(michal);
        michal = michal.bind(tangon)();
        kiloes = michal.width;
        oscard = report.useEffect;
        zuuluu = new Array(2);
        zuuluu[0] = source;
        zuuluu[1] = ctrled;
        michal = function() {
            tangon = _closure2_slot0;
            zuuluu = tangon.addListener;
            michal = 'transitionEnd';
            entity = function(argFoo) {
                _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                    entity = argFoo;
                    entity = entity.data;
                    entity = entity.closing;
                    if(entity) { _fun00002_ip = 69; continue _fun00001 }
 17:
                    michal = _closure2_slot3;
                    michal = michal.current;
                    if(michal) { _fun00002_ip = 69; continue _fun00001 }
 32:
                    zuuluu = _closure2_slot3;
                    michal = true;
                    zuuluu['current'] = michal;
                    entity = _closure2_slot2;
                    michal = entity.current;
                    entity = null;
                    if(!(entity != michal)) { _fun00002_ip = 69; continue _fun00001 }
 59:
                    entity = michal.focus;
                    entity = entity.bind(michal)();
 69:
                    entity = undefined;
                    return entity;
                }
            };
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        };
        michal = oscard.bind(report)(michal, zuuluu);
        zuuluu = report.useEffect;
        michal = new Array(1);
        michal[0] = sizing;
        entity = function() {
            entity = function() {
                tangon = _closure1_slot5;
                zuuluu = _closure2_slot1;
                entity = undefined;
                zuuluu = tangon.bind(entity)(zuuluu);
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                michal = 8;
                michal = tangon[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.clearSearch;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            return entity;
        };
        entity = zuuluu.bind(report)(entity, michal);
        entity = 9;
        entity = output[entity];
        entity = backup.bind(tangon)(entity);
        vacuum = entity.bind(tangon)();
        zuuluu = _closure1_slot7;
        michal = _closure1_slot8;
        entity = {};
        option = _closure1_slot6;
        report = 10;
        report = output[report];
        oscard = backup.bind(tangon)(report);
        report = {'absolute': true, 'wide': true, 'tall': true};
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = 11;
        oscard = output[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.GestureDetector;
        oscard = {};
        oscard['gesture'] = offset;
        offset = _closure1_slot4;
        verify = {};
        romeon = foxtra.wrapper;
        yankee = new Array(2);
        yankee[0] = romeon;
        romeon = {};
        romeon['paddingTop'] = vacuum;
        yankee[1] = romeon;
        verify['style'] = yankee;
        yankee = 12;
        yankee = output[yankee];
        romeon = backup.bind(tangon)(yankee);
        yankee = {};
        yankee['ref'] = ctrled;
        yankee['searchContext'] = sizing;
        yankee['suggestionsDismissed'] = update;
        yankee['setSuggestionsDismissed'] = echoed;
        yankee['onSuggestionsLayoutMesure'] = result;
        result = {};
        echoed = foxtra.back;
        result['style'] = echoed;
        echoed = 13;
        echoed = output[echoed];
        update = backup.bind(tangon)(echoed);
        echoed = {};
        source = source.goBack;
        echoed['onPress'] = source;
        echoed = option.bind(tangon)(update, echoed);
        result['children'] = echoed;
        result = option.bind(tangon)(offset, result);
        yankee['backButton'] = result;
        romeon = option.bind(tangon)(romeon, yankee);
        yankee = new Array(2);
        yankee[0] = romeon;
        romeon = {};
        foxtra = foxtra.tabs;
        romeon['style'] = foxtra;
        foxtra = 14;
        foxtra = output[foxtra];
        backup = backup.bind(tangon)(foxtra);
        foxtra = {};
        foxtra['searchContext'] = sizing;
        foxtra['width'] = kiloes;
        foxtra = option.bind(tangon)(backup, foxtra);
        romeon['children'] = foxtra;
        romeon = option.bind(tangon)(offset, romeon);
        yankee[1] = romeon;
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();