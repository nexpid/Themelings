// app/modules/search_v2/native/components/tabs/pages/messages/SearchHistoricalIndexingHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argBaz;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.SEARCH_LIST_HORIZONTAL_PADDING;
    offset = tangon.SEARCH_ROW_TAP_STATE_PADDING;
    tangon = tangon.SearchTabs;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    romeon = 16;
    verify['marginBottom'] = romeon;
    tangon['header'] = verify;
    verify = {};
    verify['marginHorizontal'] = yankee;
    verify['marginTop'] = offset;
    tangon['headerMessages'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/search_v2/native/components/tabs/pages/messages/SearchHistoricalIndexingHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: HistoricalIndexingHeader
        entity = argFoo;
        verify = entity.searchContext;
        var _closure2_slot0 = verify;
        offset = entity.documentsIndexed;
        var _closure2_slot1 = offset;
        zuuluu = entity.tab;
        var _closure2_slot2 = zuuluu;
        report = _closure1_slot6;
        tangon = undefined;
        report = report.bind(tangon)();
        var _closure2_slot3 = report;
        option = _closure1_slot2;
        yankee = option.useMemo;
        golfie = new Array(1);
        golfie[0] = offset;
        oscard = function() {
            entity = global;
            zuuluu = entity.Number;
            michal = _closure2_slot1;
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.toLocaleString;
            entity = _closure1_slot3;
            entity = entity.locale;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        yankee = yankee.bind(option)(oscard, golfie);
        golfie = option.useMemo;
        romeon = report.headerMessages;
        oscard = new Array(2);
        oscard[0] = romeon;
        oscard[1] = zuuluu;
        zuuluu = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                tangon = _closure2_slot2;
                zuuluu = _closure1_slot4;
                zuuluu = zuuluu.MESSAGES;
                if(!(tangon !== zuuluu)) { _fun00002_ip = 44; continue _fun00001 }
 24:
                tangon = _closure2_slot2;
                entity = _closure1_slot4;
                zuuluu = entity.PINS;
                entity = undefined;
                if(!(tangon === zuuluu)) { _fun00002_ip = 54; continue _fun00001 }
 44:
                michal = _closure2_slot3;
                entity = michal.headerMessages;
 54:
                return entity;
            }
        };
        oscard = golfie.bind(option)(zuuluu, oscard);
        golfie = option.useEffect;
        zuuluu = new Array(2);
        zuuluu[0] = offset;
        zuuluu[1] = verify;
        michal = function() {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 5;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.trackSearchIndexing;
            michal = {};
            oscard = _closure2_slot0;
            michal['searchContext'] = oscard;
            oscard = true;
            michal['isHistoricalIndexing'] = oscard;
            report = _closure2_slot1;
            michal['documentsIndexed'] = report;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        michal = golfie.bind(option)(michal, zuuluu);
        zuuluu = _closure1_slot5;
        option = _closure1_slot0;
        romeon = _closure1_slot1;
        entity = 6;
        entity = romeon[entity];
        entity = option.bind(tangon)(entity);
        michal = entity.Card;
        entity = {'variant': 'primary', 'border': 'subtle'};
        golfie = report.header;
        report = new Array(2);
        report[0] = golfie;
        report[1] = oscard;
        entity['style'] = report;
        report = 7;
        report = romeon[report];
        report = option.bind(tangon)(report);
        oscard = report.Text;
        report = {'variant': 'heading-sm/normal', 'color': 'interactive-normal'};
        golfie = 8;
        verify = romeon[golfie];
        verify = option.bind(tangon)(verify);
        offset = verify.intl;
        verify = offset.format;
        golfie = romeon[golfie];
        golfie = option.bind(tangon)(golfie);
        golfie = golfie.t;
        option = golfie.4Y3O+P;
        golfie = {};
        golfie['count'] = yankee;
        golfie = verify.bind(offset)(option, golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();