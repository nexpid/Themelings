// app/modules/search_v2/native/components/list/rows/MediaGrid.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    romeon = 2;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.SEARCH_LIST_HORIZONTAL_PADDING;
    golfie = tangon.MEDIA_NUM_COLUMNS;
    var _closure1_slot5 = golfie;
    tangon = tangon.MEDIA_ITEM_GAP_WIDTH;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot7 = tangon;
    offset = 4;
    tangon = oscard[offset];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    romeon = yankee - romeon;
    verify['paddingLeft'] = romeon;
    offset = yankee + offset;
    verify['paddingRight'] = offset;
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/search_v2/native/components/list/rows/MediaGrid.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: MediaGrid
        michal = argFoo;
        romeon = michal.media;
        var _closure2_slot0 = romeon;
        option = michal.mediaSize;
        var _closure2_slot1 = option;
        verify = michal.onPress;
        var _closure2_slot2 = verify;
        michal = michal.animate;
        var _closure2_slot3 = michal;
        zuuluu = _closure1_slot8;
        tangon = undefined;
        report = zuuluu.bind(tangon)();
        oscard = _closure1_slot3;
        golfie = oscard.useCallback;
        offset = romeon.length;
        zuuluu = new Array(4);
        zuuluu[0] = offset;
        zuuluu[1] = option;
        zuuluu[2] = verify;
        zuuluu[3] = michal;
        michal = function(argFoo) {
            entity = argFoo;
            report = entity.item;
            offset = entity.index;
            tangon = _closure1_slot7;
            michal = _closure1_slot1;
            golfie = _closure1_slot2;
            entity = 5;
            entity = golfie[entity];
            zuuluu = undefined;
            michal = michal.bind(zuuluu)(entity);
            entity = {};
            oscard = _closure2_slot3;
            entity['animate'] = oscard;
            oscard = _closure2_slot1;
            entity['size'] = oscard;
            entity['media'] = report;
            report = _closure2_slot2;
            entity['onPress'] = report;
            oscard = _closure1_slot0;
            report = 6;
            report = golfie[report];
            golfie = oscard.bind(zuuluu)(report);
            oscard = golfie.getMediaGridItemStyles;
            report = {};
            report['itemIndex'] = offset;
            verify = _closure2_slot0;
            verify = verify.length;
            report['numItems'] = verify;
            verify = _closure1_slot5;
            report['numColumns'] = verify;
            option = _closure1_slot6;
            report['spacing'] = option;
            report = oscard.bind(golfie)(report);
            entity['containerStyle'] = report;
            entity = tangon.bind(zuuluu)(michal, entity);
            return entity;
        };
        verify = golfie.bind(oscard)(michal, zuuluu);
        zuuluu = oscard.useMemo;
        michal = new Array(2);
        michal[0] = option;
        golfie = romeon.length;
        michal[1] = golfie;
        entity = function() {
            tangon = global;
            option = tangon.Math;
            golfie = option.min;
            entity = _closure2_slot0;
            oscard = entity.length;
            report = _closure1_slot5;
            golfie = golfie.bind(option)(oscard, report);
            report = tangon.Math;
            tangon = report.ceil;
            entity = entity.length;
            entity = entity / golfie;
            tangon = tangon.bind(report)(entity);
            entity = {};
            zuuluu = _closure2_slot1;
            oscard = golfie * zuuluu;
            report = 1;
            report = golfie - report;
            michal = _closure1_slot6;
            report = report * michal;
            report = oscard + report;
            entity['width'] = report;
            zuuluu = tangon * zuuluu;
            michal = tangon * michal;
            michal = zuuluu + michal;
            entity['height'] = michal;
            return entity;
        };
        golfie = zuuluu.bind(oscard)(entity, michal);
        zuuluu = _closure1_slot7;
        michal = _closure1_slot4;
        entity = {};
        report = report.container;
        entity['style'] = report;
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 7;
        report = yankee[report];
        report = offset.bind(tangon)(report);
        oscard = report.FlashList;
        report = {};
        foxtra = _closure1_slot5;
        report['numColumns'] = foxtra;
        report['data'] = romeon;
        report['renderItem'] = verify;
        verify = 8;
        verify = yankee[verify];
        verify = offset.bind(tangon)(verify);
        verify = verify.MediaVerticalSeparator;
        report['ItemSeparatorComponent'] = verify;
        verify = false;
        report['scrollEnabled'] = verify;
        report['estimatedItemSize'] = option;
        report['estimatedListSize'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();