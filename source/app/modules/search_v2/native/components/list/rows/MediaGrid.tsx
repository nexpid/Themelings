// app/modules/search_v2/native/components/list/rows/MediaGrid.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    romeo = 2;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    yankee = tango.SEARCH_LIST_HORIZONTAL_PADDING;
    golf = tango.MEDIA_NUM_COLUMNS;
    var _closure1_slot5 = golf;
    tango = tango.MEDIA_ITEM_GAP_WIDTH;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot7 = tango;
    offset = 4;
    tango = oscar[offset];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    romeo = yankee - romeo;
    verify['paddingLeft'] = romeo;
    offset = yankee + offset;
    verify['paddingRight'] = offset;
    tango['container'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/search_v2/native/components/list/rows/MediaGrid.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: MediaGrid
        mike = argFoo;
        romeo = mike.media;
        var _closure2_slot0 = romeo;
        options = mike.mediaSize;
        var _closure2_slot1 = options;
        verify = mike.onPress;
        var _closure2_slot2 = verify;
        mike = mike.animate;
        var _closure2_slot3 = mike;
        zulu = _closure1_slot8;
        tango = undefined;
        report = zulu.bind(tango)();
        oscar = _closure1_slot3;
        golf = oscar.useCallback;
        offset = romeo.length;
        zulu = new Array(4);
        zulu[0] = offset;
        zulu[1] = options;
        zulu[2] = verify;
        zulu[3] = mike;
        mike = function(argFoo) {
            entity = argFoo;
            report = entity.item;
            offset = entity.index;
            tango = _closure1_slot7;
            mike = _closure1_slot1;
            golf = _closure1_slot2;
            entity = 5;
            entity = golf[entity];
            zulu = undefined;
            mike = mike.bind(zulu)(entity);
            entity = {};
            oscar = _closure2_slot3;
            entity['animate'] = oscar;
            oscar = _closure2_slot1;
            entity['size'] = oscar;
            entity['media'] = report;
            report = _closure2_slot2;
            entity['onPress'] = report;
            oscar = _closure1_slot0;
            report = 6;
            report = golf[report];
            golf = oscar.bind(zulu)(report);
            oscar = golf.getMediaGridItemStyles;
            report = {};
            report['itemIndex'] = offset;
            verify = _closure2_slot0;
            verify = verify.length;
            report['numItems'] = verify;
            verify = _closure1_slot5;
            report['numColumns'] = verify;
            options = _closure1_slot6;
            report['spacing'] = options;
            report = oscar.bind(golf)(report);
            entity['containerStyle'] = report;
            entity = tango.bind(zulu)(mike, entity);
            return entity;
        };
        verify = golf.bind(oscar)(mike, zulu);
        zulu = oscar.useMemo;
        mike = new Array(2);
        mike[0] = options;
        golf = romeo.length;
        mike[1] = golf;
        entity = function() {
            tango = global;
            options = tango.Math;
            golf = options.min;
            entity = _closure2_slot0;
            oscar = entity.length;
            report = _closure1_slot5;
            golf = golf.bind(options)(oscar, report);
            report = tango.Math;
            tango = report.ceil;
            entity = entity.length;
            entity = entity / golf;
            tango = tango.bind(report)(entity);
            entity = {};
            zulu = _closure2_slot1;
            oscar = golf * zulu;
            report = 1;
            report = golf - report;
            mike = _closure1_slot6;
            report = report * mike;
            report = oscar + report;
            entity['width'] = report;
            zulu = tango * zulu;
            mike = tango * mike;
            mike = zulu + mike;
            entity['height'] = mike;
            return entity;
        };
        golf = zulu.bind(oscar)(entity, mike);
        zulu = _closure1_slot7;
        mike = _closure1_slot4;
        entity = {};
        report = report.container;
        entity['style'] = report;
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        report = 7;
        report = yankee[report];
        report = offset.bind(tango)(report);
        oscar = report.FlashList;
        report = {};
        foxtrot = _closure1_slot5;
        report['numColumns'] = foxtrot;
        report['data'] = romeo;
        report['renderItem'] = verify;
        verify = 8;
        verify = yankee[verify];
        verify = offset.bind(tango)(verify);
        verify = verify.MediaVerticalSeparator;
        report['ItemSeparatorComponent'] = verify;
        verify = false;
        report['scrollEnabled'] = verify;
        report['estimatedItemSize'] = options;
        report['estimatedListSize'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();