// app/modules/channel_text_area/native/ChannelAutocompleteAnalytics.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot3 = tango;
    tango = 3;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/channel_text_area/native/ChannelAutocompleteAnalytics.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo, argBar, argBaz) { // Original name: iOSTrackAutocompleteOpen
        golf = argBar;
        oscar = argBaz;
        zulu = _closure1_slot1;
        offset = _closure1_slot2;
        entity = 1;
        mike = offset[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.track;
        mike = _closure1_slot3;
        zulu = mike.CHANNEL_AUTOCOMPLETE_OPEN;
        mike = {};
        verify = _closure1_slot0;
        options = 2;
        yankee = offset[options];
        romeo = verify.bind(entity)(yankee);
        yankee = romeo.collectChannelAnalyticsMetadata;
        foxtrot = yankee.bind(romeo)(golf);
        backup = mike;
        yankee = copyDataProperties(backup, foxtrot);
        options = offset[options];
        verify = verify.bind(entity)(options);
        options = verify.collectGuildAnalyticsMetadata;
        golf = golf.guild_id;
        foxtrot = options.bind(verify)(golf);
        backup = mike;
        golf = copyDataProperties(backup, foxtrot);
        options = argFoo;
        golf = 'autocomplete_type';
        mike[golf] = options;
        options = oscar.numEmojiResults;
        golf = 'num_emoji_results';
        mike[golf] = options;
        golf = oscar.numStickerResults;
        oscar = 'num_sticker_results';
        mike[oscar] = golf;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['iOSTrackAutocompleteOpen'] = tango;
    mike = function(argFoo, argBar, argBaz) { // Original name: iOSTrackAutocompleteSelect
        golf = argBar;
        oscar = argBaz;
        zulu = _closure1_slot1;
        offset = _closure1_slot2;
        entity = 1;
        mike = offset[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.track;
        mike = _closure1_slot3;
        zulu = mike.CHANNEL_AUTOCOMPLETE_SELECTED;
        mike = {};
        verify = _closure1_slot0;
        options = 2;
        yankee = offset[options];
        romeo = verify.bind(entity)(yankee);
        yankee = romeo.collectChannelAnalyticsMetadata;
        foxtrot = yankee.bind(romeo)(golf);
        backup = mike;
        yankee = copyDataProperties(backup, foxtrot);
        options = offset[options];
        verify = verify.bind(entity)(options);
        options = verify.collectGuildAnalyticsMetadata;
        golf = golf.guild_id;
        foxtrot = options.bind(verify)(golf);
        backup = mike;
        golf = copyDataProperties(backup, foxtrot);
        options = argFoo;
        golf = 'autocomplete_type';
        mike[golf] = options;
        options = oscar.selectionType;
        golf = 'selection_type';
        mike[golf] = options;
        options = oscar.stickerId;
        golf = 'sticker_id';
        mike[golf] = options;
        options = oscar.numEmojiResults;
        golf = 'num_emoji_results';
        mike[golf] = options;
        options = oscar.numStickerResults;
        golf = 'num_sticker_results';
        mike[golf] = options;
        options = oscar.expressionName;
        golf = 'emoji_name';
        mike[golf] = options;
        options = oscar.isCustom;
        golf = 'is_custom';
        mike[golf] = options;
        golf = oscar.isAnimated;
        oscar = 'is_animated';
        mike[oscar] = golf;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['iOSTrackAutocompleteSelect'] = mike;
    return entity;
})();