// app/modules/channel_text_area/native/ChannelAutocompleteAnalytics.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot3 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/channel_text_area/native/ChannelAutocompleteAnalytics.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo, argBar, argBaz) { // Original name: iOSTrackAutocompleteOpen
        golfie = argBar;
        oscard = argBaz;
        zuuluu = _closure1_slot1;
        offset = _closure1_slot2;
        entity = 1;
        michal = offset[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.track;
        michal = _closure1_slot3;
        zuuluu = michal.CHANNEL_AUTOCOMPLETE_OPEN;
        michal = {};
        verify = _closure1_slot0;
        option = 2;
        yankee = offset[option];
        romeon = verify.bind(entity)(yankee);
        yankee = romeon.collectChannelAnalyticsMetadata;
        foxtra = yankee.bind(romeon)(golfie);
        backup = michal;
        yankee = copyDataProperties(backup, foxtra);
        option = offset[option];
        verify = verify.bind(entity)(option);
        option = verify.collectGuildAnalyticsMetadata;
        golfie = golfie.guild_id;
        foxtra = option.bind(verify)(golfie);
        backup = michal;
        golfie = copyDataProperties(backup, foxtra);
        option = argFoo;
        golfie = 'autocomplete_type';
        michal[golfie] = option;
        option = oscard.numEmojiResults;
        golfie = 'num_emoji_results';
        michal[golfie] = option;
        golfie = oscard.numStickerResults;
        oscard = 'num_sticker_results';
        michal[oscard] = golfie;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['iOSTrackAutocompleteOpen'] = tangon;
    michal = function(argFoo, argBar, argBaz) { // Original name: iOSTrackAutocompleteSelect
        golfie = argBar;
        oscard = argBaz;
        zuuluu = _closure1_slot1;
        offset = _closure1_slot2;
        entity = 1;
        michal = offset[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.track;
        michal = _closure1_slot3;
        zuuluu = michal.CHANNEL_AUTOCOMPLETE_SELECTED;
        michal = {};
        verify = _closure1_slot0;
        option = 2;
        yankee = offset[option];
        romeon = verify.bind(entity)(yankee);
        yankee = romeon.collectChannelAnalyticsMetadata;
        foxtra = yankee.bind(romeon)(golfie);
        backup = michal;
        yankee = copyDataProperties(backup, foxtra);
        option = offset[option];
        verify = verify.bind(entity)(option);
        option = verify.collectGuildAnalyticsMetadata;
        golfie = golfie.guild_id;
        foxtra = option.bind(verify)(golfie);
        backup = michal;
        golfie = copyDataProperties(backup, foxtra);
        option = argFoo;
        golfie = 'autocomplete_type';
        michal[golfie] = option;
        option = oscard.selectionType;
        golfie = 'selection_type';
        michal[golfie] = option;
        option = oscard.stickerId;
        golfie = 'sticker_id';
        michal[golfie] = option;
        option = oscard.numEmojiResults;
        golfie = 'num_emoji_results';
        michal[golfie] = option;
        option = oscard.numStickerResults;
        golfie = 'num_sticker_results';
        michal[golfie] = option;
        option = oscard.expressionName;
        golfie = 'emoji_name';
        michal[golfie] = option;
        option = oscard.isCustom;
        golfie = 'is_custom';
        michal[golfie] = option;
        golfie = oscard.isAnimated;
        oscard = 'is_animated';
        michal[oscard] = golfie;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['iOSTrackAutocompleteSelect'] = michal;
    return entity;
})();