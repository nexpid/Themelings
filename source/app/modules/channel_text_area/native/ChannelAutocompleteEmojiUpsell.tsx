// app/modules/channel_text_area/native/ChannelAutocompleteEmojiUpsell.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.EMOJI_URL_BASE_SIZE;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    tangon['upsell'] = verify;
    verify = {'lineHeight': 16, 'flex': 1};
    tangon['title'] = verify;
    verify = {};
    offset = 28;
    verify['height'] = offset;
    tangon['emojis'] = verify;
    verify = {'position': 'absolute', 'width': 28, 'height': 28, 'padding': 2, 'backgroundColor': null, 'borderWidth': 2, 'borderRadius': 14, 'borderColor': null, 'alignItems': 'center', 'justifyContent': 'center'};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_SECONDARY;
    verify['borderColor'] = offset;
    tangon['emojiWrapper'] = verify;
    verify = {'width': 16, 'height': 16};
    tangon['emoji'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/channel_text_area/native/ChannelAutocompleteEmojiUpsell.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        kiloes = entity.results;
        entity = _closure1_slot7;
        tangon = undefined;
        verify = entity.bind(tangon)();
        var _closure2_slot0 = verify;
        oscard = kiloes.slice;
        zuuluu = 0;
        entity = 3;
        entity = oscard.bind(kiloes)(zuuluu, entity);
        zuuluu = entity.map;
        michal = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                report = _closure1_slot5;
                tangon = _closure1_slot3;
                zuuluu = {};
                option = _closure2_slot0;
                oscard = option.emojiWrapper;
                michal = new Array(2);
                michal[0] = oscard;
                oscard = {};
                verify = 24;
                golfie = argBar;
                golfie = verify * golfie;
                oscard['left'] = golfie;
                michal[1] = oscard;
                zuuluu['style'] = michal;
                golfie = _closure1_slot1;
                oscard = _closure1_slot2;
                michal = 6;
                oscard = oscard[michal];
                michal = undefined;
                golfie = golfie.bind(michal)(oscard);
                oscard = {};
                option = option.emoji;
                oscard['style'] = option;
                option = {};
                offset = entity.id;
                verify = null;
                if(!(verify == offset)) { _fun00002_ip = 115; continue _fun00001 }
 108:
                verify = entity.url;
                _fun00002_ip = 176; continue _fun00001;
 115:
                yankee = _closure1_slot1;
                romeon = _closure1_slot2;
                offset = 7;
                offset = romeon[offset];
                romeon = yankee.bind(michal)(offset);
                yankee = romeon.getEmojiURL;
                offset = {};
                backup = entity.id;
                offset['id'] = backup;
                backup = entity.animated;
                offset['animated'] = backup;
                foxtra = _closure1_slot4;
                offset['size'] = foxtra;
                verify = yankee.bind(romeon)(offset);
 176:
                option['uri'] = verify;
                oscard['source'] = option;
                oscard = report.bind(michal)(golfie, oscard);
                zuuluu['children'] = oscard;
                entity = entity.id;
                entity = report.bind(michal)(tangon, zuuluu, entity);
                return entity;
            }
        };
        option = zuuluu.bind(entity)(michal);
        michal = entity.length;
        entity = 24;
        romeon = entity * michal;
        zuuluu = _closure1_slot6;
        michal = _closure1_slot3;
        entity = {};
        oscard = verify.upsell;
        entity['style'] = oscard;
        golfie = _closure1_slot5;
        yankee = _closure1_slot0;
        sizing = _closure1_slot2;
        report = 8;
        report = sizing[report];
        report = yankee.bind(tangon)(report);
        oscard = report.Text;
        report = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-sm/medium'};
        offset = verify.title;
        report['style'] = offset;
        offset = 9;
        foxtra = sizing[offset];
        foxtra = yankee.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.format;
        offset = sizing[offset];
        offset = yankee.bind(tangon)(offset);
        offset = offset.t;
        yankee = offset.uEky4+;
        offset = {};
        kiloes = kiloes.length;
        offset['count'] = kiloes;
        offset = foxtra.bind(backup)(yankee, offset);
        report['children'] = offset;
        oscard = golfie.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        offset = verify.emojis;
        verify = new Array(2);
        verify[0] = offset;
        offset = {};
        yankee = 16;
        yankee = romeon + yankee;
        offset['width'] = yankee;
        verify[1] = offset;
        oscard['style'] = verify;
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();