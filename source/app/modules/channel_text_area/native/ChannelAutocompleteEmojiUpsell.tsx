// app/modules/channel_text_area/native/ChannelAutocompleteEmojiUpsell.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.EMOJI_URL_BASE_SIZE;
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    tango['upsell'] = verify;
    verify = {'lineHeight': 16, 'flex': 1};
    tango['title'] = verify;
    verify = {};
    offset = 28;
    verify['height'] = offset;
    tango['emojis'] = verify;
    verify = {'position': 'absolute', 'width': 28, 'height': 28, 'padding': 2, 'backgroundColor': null, 'borderWidth': 2, 'borderRadius': 14, 'borderColor': null, 'alignItems': 'center', 'justifyContent': 'center'};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_SECONDARY;
    verify['borderColor'] = offset;
    tango['emojiWrapper'] = verify;
    verify = {'width': 16, 'height': 16};
    tango['emoji'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/channel_text_area/native/ChannelAutocompleteEmojiUpsell.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        entity = argFoo;
        kilo = entity.results;
        entity = _closure1_slot7;
        tango = undefined;
        verify = entity.bind(tango)();
        var _closure2_slot0 = verify;
        oscar = kilo.slice;
        zulu = 0;
        entity = 3;
        entity = oscar.bind(kilo)(zulu, entity);
        zulu = entity.map;
        mike = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                report = _closure1_slot5;
                tango = _closure1_slot3;
                zulu = {};
                options = _closure2_slot0;
                oscar = options.emojiWrapper;
                mike = new Array(2);
                mike[0] = oscar;
                oscar = {};
                verify = 24;
                golf = argBar;
                golf = verify * golf;
                oscar['left'] = golf;
                mike[1] = oscar;
                zulu['style'] = mike;
                golf = _closure1_slot1;
                oscar = _closure1_slot2;
                mike = 6;
                oscar = oscar[mike];
                mike = undefined;
                golf = golf.bind(mike)(oscar);
                oscar = {};
                options = options.emoji;
                oscar['style'] = options;
                options = {};
                offset = entity.id;
                verify = null;
                if(!(verify == offset)) { _fun00002_ip = 115; continue _fun00001 }
 108:
                verify = entity.url;
                _fun00002_ip = 176; continue _fun00001;
 115:
                yankee = _closure1_slot1;
                romeo = _closure1_slot2;
                offset = 7;
                offset = romeo[offset];
                romeo = yankee.bind(mike)(offset);
                yankee = romeo.getEmojiURL;
                offset = {};
                backup = entity.id;
                offset['id'] = backup;
                backup = entity.animated;
                offset['animated'] = backup;
                foxtrot = _closure1_slot4;
                offset['size'] = foxtrot;
                verify = yankee.bind(romeo)(offset);
 176:
                options['uri'] = verify;
                oscar['source'] = options;
                oscar = report.bind(mike)(golf, oscar);
                zulu['children'] = oscar;
                entity = entity.id;
                entity = report.bind(mike)(tango, zulu, entity);
                return entity;
            }
        };
        options = zulu.bind(entity)(mike);
        mike = entity.length;
        entity = 24;
        romeo = entity * mike;
        zulu = _closure1_slot6;
        mike = _closure1_slot3;
        entity = {};
        oscar = verify.upsell;
        entity['style'] = oscar;
        golf = _closure1_slot5;
        yankee = _closure1_slot0;
        sizing = _closure1_slot2;
        report = 8;
        report = sizing[report];
        report = yankee.bind(tango)(report);
        oscar = report.Text;
        report = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-sm/medium'};
        offset = verify.title;
        report['style'] = offset;
        offset = 9;
        foxtrot = sizing[offset];
        foxtrot = yankee.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.format;
        offset = sizing[offset];
        offset = yankee.bind(tango)(offset);
        offset = offset.t;
        yankee = offset.uEky4+;
        offset = {};
        kilo = kilo.length;
        offset['count'] = kilo;
        offset = foxtrot.bind(backup)(yankee, offset);
        report['children'] = offset;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = {};
        offset = verify.emojis;
        verify = new Array(2);
        verify[0] = offset;
        offset = {};
        yankee = 16;
        yankee = romeo + yankee;
        offset['width'] = yankee;
        verify[1] = offset;
        oscar['style'] = verify;
        oscar['children'] = options;
        oscar = golf.bind(tango)(mike, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();