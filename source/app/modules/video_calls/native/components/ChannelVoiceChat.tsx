// app/modules/video_calls/native/components/ChannelVoiceChat.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    backup = 1;
    tangon = oscard[backup];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useIsVoiceChatFocused;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot6 = option;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flex': 1, 'backgroundColor': null, 'alignSelf': 'stretch'};
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = foxtra;
    foxtra = 'stretch';
    tangon['chat'] = offset;
    offset = {};
    offset['flex'] = backup;
    tangon['flex'] = offset;
    offset = {};
    backup = 44;
    offset['height'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MOBILE_SECONDARY;
    offset['backgroundColor'] = backup;
    tangon['chatHeaderSpacer'] = offset;
    offset = {'flexDirection': 'row', 'alignSelf': 'stretch', 'height': 44, 'backgroundColor': null, 'alignItems': 'center', 'justifyContent': 'flex-start', 'position': 'absolute', 'left': 0, 'right': 0, 'paddingHorizontal': 16};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MOBILE_SECONDARY;
    offset['backgroundColor'] = backup;
    tangon['chatHeader'] = offset;
    offset = {'width': 32, 'height': 32, 'alignItems': 'flex-start', 'justifyContent': 'center'};
    tangon['chatHeaderBackIconContainer'] = offset;
    offset = {'alignSelf': 'stretch', 'flex': 1, 'justifyContent': 'center', 'marginStart': 16};
    tangon['chatHeaderTitleContainer'] = offset;
    offset = {};
    offset['alignSelf'] = foxtra;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MOBILE_SECONDARY;
    offset['backgroundColor'] = backup;
    tangon['safeAreaTop'] = offset;
    offset = {};
    offset['alignSelf'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = yankee;
    tangon['safeAreaBottom'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot8 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            zuuluu = michal.channel;
            echoed = zuuluu.id;
            var _closure2_slot0 = echoed;
            update = zuuluu.guild_id;
            var _closure2_slot1 = update;
            report = michal.channel;
            result = michal.inModal;
            tangon = undefined;
            if(!(result === tangon)) { _fun00002_ip = 47; continue _fun00001 }
 45:
            result = false;
 47:
            michal = _closure1_slot8;
            output = michal.bind(tangon)();
            michal = _closure1_slot5;
            sequen = michal.bind(tangon)();
            oscard = _closure1_slot3;
            zuuluu = oscard.useEffect;
            michal = new Array(2);
            michal[0] = echoed;
            michal[1] = update;
            entity = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 6;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.fetchMessages;
                michal = {};
                oscard = _closure2_slot1;
                michal['guildId'] = oscard;
                report = _closure2_slot0;
                michal['channelId'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = zuuluu.bind(oscard)(entity, michal);
            michal = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 7;
            entity = zuuluu[entity];
            entity = michal.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            sizing = entity.top;
            michal = _closure1_slot0;
            entity = 8;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useVoiceChatNavigationContext;
            entity = entity.bind(michal)();
            verify = null;
            michal = verify == entity;
            ctrled = undefined;
            if(michal) { _fun00002_ip = 170; continue _fun00001 }
 164:
            ctrled = entity.openVoice;
 170:
            if(!(verify == ctrled)) { _fun00002_ip = 200; continue _fun00001 }
 174:
            michal = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 9;
            entity = zuuluu[entity];
            entity = michal.bind(tangon)(entity);
            ctrled = entity.noop;
 200:
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 10;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useIsConnectedToVoiceChannel;
            kiloes = entity.bind(michal)(report);
            michal = _closure1_slot3;
            entity = michal.useRef;
            foxtra = entity.bind(michal)(verify);
            michal = _closure1_slot1;
            entity = 11;
            entity = zuuluu[entity];
            entity = michal.bind(tangon)(entity);
            vacuum = entity.bind(tangon)();
            zuuluu = _closure1_slot7;
            michal = _closure1_slot4;
            entity = {};
            report = 'no-hide-descendants';
            if(!sequen) { _fun00002_ip = 290; continue _fun00001 }
 284:
            report = 'yes';
 290:
            entity['importantForAccessibility'] = report;
            report = !sequen;
            entity['accessibilityElementsHidden'] = report;
            report = output.chat;
            entity['style'] = report;
            golfie = _closure1_slot6;
            oscard = _closure1_slot1;
            offset = _closure1_slot2;
            report = 12;
            report = offset[report];
            oscard = oscard.bind(tangon)(report);
            source = true;
            report = {'absolute': true, 'tall': true};
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot7;
            golfie = _closure1_slot0;
            oscard = 13;
            oscard = offset[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.ChannelContainer;
            oscard = {};
            oscard['guildId'] = update;
            oscard['channelId'] = echoed;
            offset = null;
            if(result) { _fun00002_ip = 486; continue _fun00001 }
 408:
            romeon = _closure1_slot6;
            yankee = _closure1_slot1;
            config = _closure1_slot2;
            verify = 14;
            verify = config[verify];
            yankee = yankee.bind(tangon)(verify);
            verify = {};
            sequen = !sequen;
            if(!sequen) { _fun00002_ip = 442; continue _fun00001 }
 440:
            sequen = undefined;
 442:
            verify['hidden'] = sequen;
            verify['animated'] = source;
            if(kiloes) { _fun00002_ip = 469; continue _fun00001 }
 455:
            kiloes = 'dark-content';
            source = 'dark';
            if(!(source === vacuum)) { _fun00002_ip = 475; continue _fun00001 }
 469:
            kiloes = 'light-content';
 475:
            verify['barStyle'] = kiloes;
            offset = romeon.bind(tangon)(yankee, verify);
 486:
            verify = new Array(5);
            verify[0] = offset;
            romeon = _closure1_slot6;
            yankee = _closure1_slot4;
            offset = {};
            source = output.safeAreaTop;
            kiloes = new Array(2);
            kiloes[0] = source;
            source = {};
            source['height'] = sizing;
            vacuum = undefined;
            if(!result) { _fun00002_ip = 533; continue _fun00001 }
 529:
            vacuum = 'none';
 533:
            source['display'] = vacuum;
            kiloes[1] = source;
            offset['style'] = kiloes;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            romeon = _closure1_slot6;
            yankee = _closure1_slot4;
            offset = {};
            source = output.chatHeaderSpacer;
            kiloes = new Array(2);
            kiloes[0] = source;
            source = {};
            vacuum = undefined;
            if(!result) { _fun00002_ip = 590; continue _fun00001 }
 586:
            vacuum = 'none';
 590:
            source['display'] = vacuum;
            kiloes[1] = source;
            offset['style'] = kiloes;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            romeon = _closure1_slot6;
            yankee = _closure1_slot1;
            kiloes = _closure1_slot2;
            offset = 15;
            offset = kiloes[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            offset['guildId'] = update;
            offset['channelId'] = echoed;
            offset['chatInputRef'] = foxtra;
            foxtra = 'voice-panel';
            offset['screenIndex'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[3] = offset;
            romeon = _closure1_slot7;
            yankee = _closure1_slot4;
            offset = {};
            kiloes = output.chatHeader;
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            kiloes = {};
            kiloes['top'] = sizing;
            sizing = undefined;
            if(!result) { _fun00002_ip = 711; continue _fun00001 }
 707:
            sizing = 'none';
 711:
            kiloes['display'] = sizing;
            foxtra[1] = kiloes;
            offset['style'] = foxtra;
            sizing = _closure1_slot6;
            result = _closure1_slot0;
            source = _closure1_slot2;
            foxtra = 16;
            foxtra = source[foxtra];
            foxtra = result.bind(tangon)(foxtra);
            kiloes = foxtra.PressableOpacity;
            foxtra = {};
            vacuum = 'button';
            foxtra['accessibilityRole'] = vacuum;
            foxtra['onPress'] = ctrled;
            ctrled = 17;
            vacuum = source[ctrled];
            vacuum = result.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = source[ctrled];
            ctrled = result.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.13/7kZ;
            ctrled = vacuum.bind(sequen)(ctrled);
            foxtra['accessibilityLabel'] = ctrled;
            ctrled = output.chatHeaderBackIconContainer;
            foxtra['style'] = ctrled;
            config = _closure1_slot1;
            sequen = 18;
            ctrled = source[sequen];
            vacuum = config.bind(tangon)(ctrled);
            ctrled = {};
            record = 19;
            record = source[record];
            record = config.bind(tangon)(record);
            ctrled['source'] = record;
            sequen = source[sequen];
            sequen = config.bind(tangon)(sequen);
            sequen = sequen.Sizes;
            sequen = sequen.MEDIUM;
            ctrled['size'] = sequen;
            ctrled = sizing.bind(tangon)(vacuum, ctrled);
            foxtra['children'] = ctrled;
            kiloes = sizing.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            kiloes = _closure1_slot4;
            backup = {};
            output = output.chatHeaderTitleContainer;
            backup['style'] = output;
            output = 20;
            output = source[output];
            output = result.bind(tangon)(output);
            result = output.ChannelTitle;
            output = {};
            output['guildId'] = update;
            output['channelId'] = echoed;
            output = sizing.bind(tangon)(result, output);
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[4] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/video_calls/native/components/ChannelVoiceChat.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();