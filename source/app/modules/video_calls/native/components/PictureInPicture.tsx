// app/modules/video_calls/native/components/PictureInPicture.tsx
export default (function(argFoo, argBar, argBaz, argCor, argGra, argFre, argPlu) {
    oscard = argBar;
    backup = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    michal = golfie[entity];
    entity = undefined;
    michal = backup.bind(entity)(michal);
    var _closure1_slot3 = michal;
    michal = 1;
    report = golfie[michal];
    michal = argCor;
    option = michal.bind(entity)(report);
    var _closure1_slot4 = option;
    michal = 2;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    sizing = michal.StyleSheet;
    michal = michal.View;
    var _closure1_slot5 = michal;
    michal = 3;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.toggleFocus;
    var _closure1_slot6 = michal;
    michal = 4;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    verify = michal.PIP_GESTURE_ACTIVE_OFFSET;
    michal = 5;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.PictureInPicturePositions;
    var _closure1_slot7 = michal;
    report = 6;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot8 = report;
    report = 7;
    report = golfie[report];
    yankee = oscard.bind(entity)(report);
    offset = yankee.createStyles;
    report = {};
    romeon = {};
    echoed = sizing.absoluteFillObject;
    update = romeon;
    foxtra = copyDataProperties(update, echoed);
    kiloes = 'baseline';
    foxtra = 'alignItems';
    romeon[foxtra] = kiloes;
    report['pipOuterContainer'] = romeon;
    romeon = {};
    echoed = sizing.absoluteFillObject;
    update = romeon;
    sizing = copyDataProperties(update, echoed);
    romeon[foxtra] = kiloes;
    report['pipInnerContainer'] = romeon;
    romeon = 8;
    foxtra = golfie[romeon];
    kiloes = oscard.bind(entity)(foxtra);
    foxtra = kiloes.generateBoxShadowStyle;
    romeon = golfie[romeon];
    romeon = oscard.bind(entity)(romeon);
    romeon = romeon.EIGHT_DP_ELEVATION_SHADOW_PARAMS;
    romeon = foxtra.bind(kiloes)(romeon);
    report['elevationShadow'] = romeon;
    romeon = {};
    foxtra = 9;
    foxtra = golfie[foxtra];
    foxtra = backup.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BLACK;
    romeon['backgroundColor'] = foxtra;
    report['background'] = romeon;
    report = offset.bind(yankee)(report);
    var _closure1_slot9 = report;
    offset = {};
    report = 'function PictureInPictureTsx1(velocity){return{mass:0.2,damping:7.5,stiffness:100,restDisplacementThreshold:0.1,restSpeedThreshold:0.1,overshootClamping:true,velocity:velocity};}';
    offset['code'] = report;
    report = function(argFoo) { // Original name: t
        entity = {'mass': 0.2, 'damping': 7.5, 'stiffness': 100, 'restDisplacementThreshold': 0.1, 'restSpeedThreshold': 0.1, 'overshootClamping': true};
        michal = argFoo;
        entity['velocity'] = michal;
        return entity;
    };
    yankee = {};
    report['__closure'] = yankee;
    yankee = 14089987184261.0;
    report['__workletHash'] = yankee;
    report['__initData'] = offset;
    var _closure1_slot10 = report;
    michal = michal.TOP_LEFT;
    offset = -verify;
    report = new Array(2);
    report[0] = offset;
    report[1] = verify;
    var _closure1_slot11 = report;
    offset = -verify;
    report = new Array(2);
    report[0] = offset;
    report[1] = verify;
    var _closure1_slot12 = report;
    report = {};
    verify = 'function PictureInPictureTsx2(){const{insets,withSpring,getSpringAnimationConfig}=this.__closure;return{marginTop:insets.top,marginBottom:withSpring(insets.bottom,getSpringAnimationConfig())};}';
    report['code'] = verify;
    var _closure1_slot13 = report;
    report = option.memo;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.children;
            oscard = entity.style;
            michal = entity.preferredPosition;
            tangon = undefined;
            if(!(michal === tangon)) { _fun00002_ip = 40; continue _fun00001 }
 27:
            michal = _closure1_slot7;
            michal = michal.TOP_LEFT;
 40:
            sizing = entity.channel;
            var _closure2_slot0 = tangon;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            entity = _closure1_slot9;
            kiloes = entity.bind(tangon)();
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 10;
            entity = zuuluu[entity];
            option = michal.bind(tangon)(entity);
            report = option.useShouldForcePipOrientation;
            entity = {};
            entity['channel'] = sizing;
            option = report.bind(option)(entity);
            report = _closure1_slot1;
            entity = 11;
            entity = zuuluu[entity];
            entity = report.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            foxtra = entity.width;
            offset = entity.height;
            entity = 12;
            entity = zuuluu[entity];
            verify = report.bind(tangon)(entity);
            entity = {};
            romeon = true;
            entity['includeKeyboardHeightIOS'] = romeon;
            entity = verify.bind(tangon)(entity);
            output = entity.insets;
            _closure2_slot0 = output;
            entity = 13;
            entity = zuuluu[entity];
            report = report.bind(tangon)(entity);
            entity = {};
            verify = sizing.id;
            entity['channelId'] = verify;
            entity['forcedOrientation'] = option;
            romeon = report.bind(tangon)(entity);
            verify = _closure1_slot4;
            option = verify.useState;
            report = {'x': 0, 'y': 0, 'width': null, 'height': null, 'pageX': 0, 'pageY': 0};
            entity = 0;
            report['width'] = foxtra;
            report['height'] = offset;
            verify = option.bind(verify)(report);
            option = _closure1_slot3;
            report = 2;
            option = option.bind(tangon)(verify, report);
            report = option[entity];
            entity = 1;
            entity = option[entity];
            _closure2_slot1 = entity;
            verify = 14;
            entity = zuuluu[verify];
            offset = michal.bind(tangon)(entity);
            option = offset.useAnimatedStyle;
            entity = function() { // Original name: f
                entity = {};
                michal = _closure2_slot0;
                michal = michal.top;
                entity['marginTop'] = michal;
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                tangon = 15;
                tangon = oscard[tangon];
                oscard = undefined;
                report = report.bind(oscard)(tangon);
                tangon = report.withSpring;
                zuuluu = _closure2_slot0;
                zuuluu = zuuluu.bottom;
                michal = _closure1_slot10;
                michal = michal.bind(oscard)();
                michal = tangon.bind(report)(zuuluu, michal);
                entity['marginBottom'] = michal;
                return entity;
            };
            foxtra = {};
            foxtra['insets'] = output;
            output = 15;
            output = zuuluu[output];
            output = michal.bind(tangon)(output);
            output = output.withSpring;
            foxtra['withSpring'] = output;
            output = _closure1_slot10;
            foxtra['getSpringAnimationConfig'] = output;
            entity['__closure'] = foxtra;
            foxtra = 16677290574613.0;
            entity['__workletHash'] = foxtra;
            foxtra = _closure1_slot13;
            entity['__initData'] = foxtra;
            option = option.bind(offset)(entity);
            entity = 16;
            entity = zuuluu[entity];
            foxtra = michal.bind(tangon)(entity);
            offset = foxtra.useIsViewingActivity;
            entity = {};
            sizing = sizing.id;
            entity['channelId'] = sizing;
            offset = offset.bind(foxtra)(entity);
            entity = 17;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.useDraggablePip;
            entity = {};
            foxtra = romeon.width;
            entity['width'] = foxtra;
            romeon = romeon.height;
            entity['height'] = romeon;
            romeon = report.width;
            entity['containerWidth'] = romeon;
            report = report.height;
            entity['containerHeight'] = report;
            report = _closure1_slot11;
            entity['activeOffsetX'] = report;
            report = _closure1_slot12;
            entity['activeOffsetY'] = report;
            report = !offset;
            entity['snapToCorners'] = report;
            report = undefined;
            if(!offset) { _fun00002_ip = 500; continue _fun00001 }
 496:
            report = _closure1_slot6;
 500:
            entity['onPress'] = report;
            entity = michal.bind(zuuluu)(entity);
            romeon = entity.gesture;
            foxtra = entity.draggableGridItemStyles;
            zuuluu = _closure1_slot4;
            michal = zuuluu.useRef;
            entity = null;
            sizing = michal.bind(zuuluu)(entity);
            _closure2_slot2 = sizing;
            zuuluu = _closure1_slot8;
            offset = _closure1_slot1;
            output = _closure1_slot2;
            entity = output[verify];
            entity = offset.bind(tangon)(entity);
            michal = entity.View;
            entity = {};
            result = kiloes.pipOuterContainer;
            report = new Array(3);
            report[0] = result;
            report[1] = option;
            report[2] = oscard;
            entity['style'] = report;
            option = 'box-none';
            entity['pointerEvents'] = option;
            oscard = _closure1_slot5;
            report = {};
            report['ref'] = sizing;
            sizing = kiloes.pipInnerContainer;
            report['style'] = sizing;
            report['pointerEvents'] = option;
            golfie = function() { // Original name: onLayout
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot2;
                    zuuluu = michal.current;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00004_ip = 45; continue _fun00003 }
 18:
                    entity = _closure2_slot2;
                    zuuluu = entity.current;
                    michal = zuuluu.measure;
                    entity = function(argFoo, argBar, argBaz, argCor, argGra, argFre) {
                        zuuluu = _closure2_slot1;
                        michal = {};
                        entity = argFoo;
                        michal['x'] = entity;
                        entity = argBar;
                        michal['y'] = entity;
                        entity = argBaz;
                        michal['width'] = entity;
                        entity = argCor;
                        michal['height'] = entity;
                        entity = argGra;
                        michal['pageX'] = entity;
                        entity = argFre;
                        michal['pageY'] = entity;
                        entity = undefined;
                        michal = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    entity = michal.bind(zuuluu)(entity);
 45:
                    entity = undefined;
                    return entity;
                }
            };
            report['onLayout'] = golfie;
            sizing = _closure1_slot0;
            golfie = 18;
            golfie = output[golfie];
            golfie = sizing.bind(tangon)(golfie);
            option = golfie.GestureDetector;
            golfie = {};
            golfie['gesture'] = romeon;
            verify = output[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.View;
            verify = {};
            romeon = new Array(2);
            romeon[0] = foxtra;
            foxtra = 19;
            foxtra = output[foxtra];
            sizing = sizing.bind(tangon)(foxtra);
            foxtra = sizing.isIOS;
            sizing = foxtra.bind(sizing)();
            foxtra = undefined;
            if(!sizing) { _fun00002_ip = 727; continue _fun00001 }
 721:
            foxtra = kiloes.elevationShadow;
 727:
            romeon[1] = foxtra;
            verify['style'] = romeon;
            foxtra = _closure1_slot8;
            romeon = _closure1_slot5;
            yankee = {};
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            verify['children'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            golfie['children'] = verify;
            golfie = zuuluu.bind(tangon)(option, golfie);
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    tangon = report.bind(option)(tangon);
    report = 20;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/video_calls/native/components/PictureInPicture.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['DEFAULT_PIP_POSITION'] = michal;
    return entity;
})();