// app/modules/video_calls/native/components/NUFScreenshareActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    tangon = tangon.Image;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignItems': 'center', 'padding': 16, 'paddingTop': 24};
    tangon['container'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 16, 'marginBottom': 8};
    tangon['title'] = verify;
    offset = 18;
    verify = {'lineHeight': 18, 'textAlign': 'center', 'marginBottom': 24};
    tangon['description'] = verify;
    verify = {'padding': 4, 'marginTop': 8};
    tangon['skipContainer'] = verify;
    verify = {};
    verify['lineHeight'] = offset;
    tangon['skip'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/video_calls/native/components/NUFScreenshareActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        kiloes = entity.onScreensharePress;
        romeon = entity.onSkip;
        entity = _closure1_slot7;
        tangon = undefined;
        backup = entity.bind(tangon)();
        zuuluu = _closure1_slot5;
        sizing = _closure1_slot0;
        output = _closure1_slot2;
        entity = 4;
        entity = output[entity];
        entity = sizing.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        report = true;
        entity['startExpanded'] = report;
        golfie = _closure1_slot6;
        oscard = _closure1_slot3;
        report = {};
        option = backup.container;
        report['style'] = option;
        verify = _closure1_slot4;
        option = {};
        echoed = _closure1_slot1;
        offset = 5;
        offset = output[offset];
        offset = echoed.bind(tangon)(offset);
        option['source'] = offset;
        verify = zuuluu.bind(tangon)(verify, option);
        option = new Array(5);
        option[0] = verify;
        yankee = 6;
        verify = output[yankee];
        verify = sizing.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
        foxtra = backup.title;
        verify['style'] = foxtra;
        foxtra = 7;
        result = output[foxtra];
        result = sizing.bind(tangon)(result);
        source = result.intl;
        update = source.string;
        result = output[foxtra];
        result = sizing.bind(tangon)(result);
        result = result.t;
        result = result.hZdQXl;
        result = update.bind(source)(result);
        verify['children'] = result;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[1] = verify;
        verify = output[yankee];
        verify = sizing.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
        result = backup.description;
        verify['style'] = result;
        result = output[foxtra];
        result = sizing.bind(tangon)(result);
        source = result.intl;
        update = source.string;
        result = output[foxtra];
        result = sizing.bind(tangon)(result);
        result = result.t;
        result = result.PMitOD;
        result = update.bind(source)(result);
        verify['children'] = result;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[2] = verify;
        result = 8;
        verify = output[result];
        offset = echoed.bind(tangon)(verify);
        verify = {};
        update = output[foxtra];
        update = sizing.bind(tangon)(update);
        ctrled = update.intl;
        source = ctrled.string;
        update = output[foxtra];
        update = sizing.bind(tangon)(update);
        update = update.t;
        update = update.QQuxIS;
        update = source.bind(ctrled)(update);
        verify['text'] = update;
        update = output[result];
        update = echoed.bind(tangon)(update);
        update = update.Sizes;
        update = update.MEDIUM;
        verify['size'] = update;
        result = output[result];
        result = echoed.bind(tangon)(result);
        result = result.Colors;
        result = result.BRAND;
        verify['color'] = result;
        verify['onPress'] = kiloes;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[3] = verify;
        verify = 9;
        verify = output[verify];
        verify = sizing.bind(tangon)(verify);
        offset = verify.PressableOpacity;
        verify = {};
        verify['onPress'] = romeon;
        romeon = backup.skipContainer;
        verify['style'] = romeon;
        romeon = 'button';
        verify['accessibilityRole'] = romeon;
        romeon = output[foxtra];
        romeon = sizing.bind(tangon)(romeon);
        result = romeon.intl;
        kiloes = result.string;
        romeon = output[foxtra];
        romeon = sizing.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.PwrR2N;
        romeon = kiloes.bind(result)(romeon);
        verify['accessibilityLabel'] = romeon;
        yankee = output[yankee];
        yankee = sizing.bind(tangon)(yankee);
        romeon = yankee.Text;
        yankee = {'style': null, 'variant': 'text-sm/semibold', 'color': 'header-secondary'};
        backup = backup.skip;
        yankee['style'] = backup;
        backup = output[foxtra];
        backup = sizing.bind(tangon)(backup);
        kiloes = backup.intl;
        backup = kiloes.string;
        foxtra = output[foxtra];
        foxtra = sizing.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        foxtra = foxtra.PwrR2N;
        foxtra = backup.bind(kiloes)(foxtra);
        yankee['children'] = foxtra;
        yankee = zuuluu.bind(tangon)(romeon, yankee);
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[4] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();