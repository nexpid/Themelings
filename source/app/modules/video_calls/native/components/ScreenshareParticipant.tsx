// app/modules/video_calls/native/components/ScreenshareParticipant.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.Image;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {'alignItems': 'center', 'justifyContent': 'center', 'flex': 1};
    yankee = 4;
    offset = oscard[yankee];
    offset = romeon.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    tangon['backgroundColor'] = offset;
    golfie['container'] = tangon;
    offset = {};
    tangon = 12;
    offset['marginBottom'] = tangon;
    golfie['image'] = offset;
    offset = {'textAlign': 'center', 'marginBottom': 8};
    golfie['title'] = offset;
    offset = {'lineHeight': 18, 'textAlign': 'center', 'marginBottom': 16};
    golfie['description'] = offset;
    offset = {'paddingHorizontal': 16, 'alignSelf': 'center', 'flexGrow': 0};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.round;
    offset['borderRadius'] = yankee;
    golfie['button'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/video_calls/native/components/ScreenshareParticipant.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        zuuluu = argFoo;
        oscard = zuuluu.participant;
        var _closure2_slot0 = oscard;
        michal = zuuluu.onSingleTap;
        var _closure2_slot1 = michal;
        golfie = zuuluu.onDoubleTap;
        var _closure2_slot2 = golfie;
        offset = zuuluu.containerStyle;
        tangon = _closure1_slot3;
        report = tangon.useCallback;
        zuuluu = new Array(2);
        zuuluu[0] = michal;
        zuuluu[1] = oscard;
        michal = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure2_slot1;
                entity = null;
                zuuluu = entity == zuuluu;
                tangon = undefined;
                entity = undefined;
                if(zuuluu) { _fun00002_ip = 33; continue _fun00001 }
 20:
                zuuluu = _closure2_slot1;
                michal = _closure2_slot0;
                entity = zuuluu.bind(tangon)(michal);
 33:
                return entity;
            }
        };
        report = report.bind(tangon)(michal, zuuluu);
        zuuluu = tangon.useCallback;
        michal = new Array(2);
        michal[0] = golfie;
        michal[1] = oscard;
        entity = function() {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                zuuluu = _closure2_slot2;
                entity = null;
                zuuluu = entity == zuuluu;
                tangon = undefined;
                entity = undefined;
                if(zuuluu) { _fun00004_ip = 33; continue _fun00003 }
 20:
                zuuluu = _closure2_slot2;
                michal = _closure2_slot0;
                entity = zuuluu.bind(tangon)(michal);
 33:
                return entity;
            }
        };
        zuuluu = zuuluu.bind(tangon)(entity, michal);
        kiloes = _closure1_slot1;
        foxtra = _closure1_slot2;
        entity = 5;
        entity = foxtra[entity];
        tangon = undefined;
        michal = kiloes.bind(tangon)(entity);
        entity = {};
        entity['onSingleTapStart'] = report;
        entity['onDoubleTapStart'] = zuuluu;
        report = michal.bind(tangon)(entity);
        entity = _closure1_slot8;
        sizing = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        romeon = _closure1_slot0;
        entity = 6;
        entity = foxtra[entity];
        entity = romeon.bind(tangon)(entity);
        michal = entity.GestureDetector;
        entity = {};
        entity['gesture'] = report;
        golfie = _closure1_slot7;
        oscard = _closure1_slot4;
        report = {};
        yankee = sizing.container;
        verify = new Array(2);
        verify[0] = yankee;
        verify[1] = offset;
        report['style'] = verify;
        verify = _closure1_slot5;
        option = {};
        offset = 7;
        offset = foxtra[offset];
        offset = kiloes.bind(tangon)(offset);
        option['source'] = offset;
        offset = sizing.image;
        option['style'] = offset;
        verify = zuuluu.bind(tangon)(verify, option);
        option = new Array(4);
        option[0] = verify;
        verify = 8;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        backup = offset.Text;
        offset = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
        yankee = sizing.title;
        offset['style'] = yankee;
        yankee = 9;
        output = foxtra[yankee];
        output = romeon.bind(tangon)(output);
        echoed = output.intl;
        result = echoed.string;
        output = foxtra[yankee];
        output = romeon.bind(tangon)(output);
        output = output.t;
        output = output.gMOwoq;
        output = result.bind(echoed)(output);
        offset['children'] = output;
        offset = zuuluu.bind(tangon)(backup, offset);
        option[1] = offset;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'interactive-normal'};
        backup = sizing.description;
        verify['style'] = backup;
        backup = foxtra[yankee];
        backup = romeon.bind(tangon)(backup);
        result = backup.intl;
        output = result.string;
        backup = foxtra[yankee];
        backup = romeon.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.dKeLGh;
        backup = output.bind(result)(backup);
        verify['children'] = backup;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[2] = verify;
        backup = 10;
        verify = foxtra[backup];
        offset = kiloes.bind(tangon)(verify);
        verify = {};
        sizing = sizing.button;
        verify['style'] = sizing;
        backup = foxtra[backup];
        backup = kiloes.bind(tangon)(backup);
        backup = backup.Colors;
        backup = backup.PRIMARY;
        verify['color'] = backup;
        backup = foxtra[yankee];
        backup = romeon.bind(tangon)(backup);
        kiloes = backup.intl;
        backup = kiloes.string;
        yankee = foxtra[yankee];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.CpkXwc;
        yankee = backup.bind(kiloes)(yankee);
        verify['text'] = yankee;
        yankee = 11;
        yankee = foxtra[yankee];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.stopScreenshare;
        verify['onPress'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[3] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();