// app/modules/video_calls/native/components/ChannelVoiceChatModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = 7;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/video_calls/native/components/ChannelVoiceChatModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ChannelVoiceChatModal
        entity = argFoo;
        golf = entity.channel;
        var _closure2_slot0 = golf;
        tango = _closure1_slot3;
        zulu = tango.useEffect;
        entity = golf.id;
        mike = new Array(1);
        mike[0] = entity;
        entity = function() {
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 2;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.updateChatOpen;
            entity = _closure2_slot0;
            mike = entity.id;
            entity = true;
            entity = zulu.bind(tango)(mike, entity);
            entity = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 2;
                mike = mike[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.updateChatOpen;
                mike = _closure2_slot0;
                zulu = mike.id;
                mike = false;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            return entity;
        };
        entity = zulu.bind(tango)(entity, mike);
        tango = _closure1_slot4;
        offset = _closure1_slot1;
        yankee = _closure1_slot2;
        entity = 3;
        entity = yankee[entity];
        zulu = undefined;
        mike = offset.bind(zulu)(entity);
        entity = {};
        options = 'StageVoiceChat';
        entity['screenKey'] = options;
        golf = golf.name;
        entity['title'] = golf;
        golf = _closure1_slot0;
        oscar = 4;
        oscar = yankee[oscar];
        oscar = golf.bind(zulu)(oscar);
        golf = oscar.StageIcon;
        oscar = {};
        options = 'sm';
        oscar['size'] = options;
        options = {};
        verify = 5;
        verify = yankee[verify];
        verify = offset.bind(zulu)(verify);
        verify = verify.spacing;
        verify = verify.PX_8;
        options['marginRight'] = verify;
        oscar['style'] = options;
        oscar = tango.bind(zulu)(golf, oscar);
        entity['titleIcon'] = oscar;
        report = function() { // Original name: render
            tango = _closure1_slot4;
            mike = _closure1_slot1;
            zulu = _closure1_slot2;
            entity = 6;
            entity = zulu[entity];
            zulu = undefined;
            mike = mike.bind(zulu)(entity);
            entity = {};
            report = _closure2_slot0;
            entity['channel'] = report;
            report = true;
            entity['inModal'] = report;
            entity = tango.bind(zulu)(mike, entity);
            return entity;
        };
        entity['render'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();