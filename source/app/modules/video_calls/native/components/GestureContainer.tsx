// app/modules/video_calls/native/components/GestureContainer.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    romeo = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, mike);
    entity = 0;
    report = golf[entity];
    mike = argCorge;
    entity = undefined;
    options = mike.bind(entity)(report);
    yankee = 1;
    mike = golf[yankee];
    mike = oscar.bind(entity)(mike);
    mike = mike.View;
    var _closure1_slot3 = mike;
    mike = 2;
    mike = golf[mike];
    mike = romeo.bind(entity)(mike);
    var _closure1_slot4 = mike;
    mike = 3;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.useChannelCallStore;
    var _closure1_slot5 = mike;
    mike = 4;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsx;
    var _closure1_slot6 = mike;
    mike = 5;
    mike = golf[mike];
    verify = oscar.bind(entity)(mike);
    report = verify.createStyles;
    mike = {};
    offset = {};
    offset['flex'] = yankee;
    yankee = 6;
    yankee = golf[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BLACK;
    offset['backgroundColor'] = yankee;
    mike['background'] = offset;
    mike = report.bind(verify)(mike);
    var _closure1_slot7 = mike;
    mike = {};
    report = 'function GestureContainerTsx1(_event,context){const{translateY}=this.__closure;context.y=translateY.get();}';
    mike['code'] = report;
    var _closure1_slot8 = mike;
    mike = {};
    report = 'function GestureContainerTsx2({translationY:translationY},context){const{translateY,interpolate,THRESHOLD_TRANSLATE,MAX_TRANSLATE,Extrapolate}=this.__closure;translateY.set(interpolate(context.y+translationY,[0,THRESHOLD_TRANSLATE],[0,MAX_TRANSLATE],Extrapolate.CLAMP));}';
    mike['code'] = report;
    var _closure1_slot9 = mike;
    mike = {};
    report = "function GestureContainerTsx3({velocityY:velocityY}){const{translateY,MAX_TRANSLATE,THRESHOLD_VELOCITY,withSpring,height,runOnJS,ModalActionCreators}=this.__closure;const config={damping:15,mass:1,stiffness:250,overshootClamping:true,restSpeedThreshold:0.001,restDisplacementThreshold:0.001,velocity:velocityY};if(translateY.get()>=MAX_TRANSLATE||velocityY>=THRESHOLD_VELOCITY){translateY.set(withSpring(height,config,'respect-motion-settings',function(){runOnJS(ModalActionCreators.pop)();}));}else{translateY.set(withSpring(0,config));}}";
    mike['code'] = report;
    var _closure1_slot10 = mike;
    mike = {};
    report = 'function GestureContainerTsx4(){const{runOnJS,ModalActionCreators}=this.__closure;runOnJS(ModalActionCreators.pop)();}';
    mike['code'] = report;
    var _closure1_slot11 = mike;
    mike = {};
    report = 'function GestureContainerTsx5(){const{interpolate,translateY,MAX_TRANSLATE,Extrapolate}=this.__closure;return{flex:1,transform:[{translateY:interpolate(translateY.get(),[0,MAX_TRANSLATE],[0,MAX_TRANSLATE])},{scale:interpolate(translateY.get(),[0,MAX_TRANSLATE],[1,0.9],Extrapolate.CLAMP)}]};}';
    mike['code'] = report;
    var _closure1_slot12 = mike;
    report = options.forwardRef;
    mike = function(argFoo, argBar) {
        tango = argFoo;
        verify = tango.children;
        kilo = tango.style;
        entity = null;
        zulu = Object.create(entity);
        offset = 0;
        zulu['children'] = offset;
        zulu['style'] = offset;
        sequence = {};
        vacuum = tango;
        control = zulu;
        romeo = copyDataProperties(sequence, vacuum, control);
        zulu = _closure1_slot7;
        tango = undefined;
        report = zulu.bind(tango)();
        oscar = _closure1_slot0;
        yankee = _closure1_slot2;
        golf = 7;
        zulu = yankee[golf];
        options = oscar.bind(tango)(zulu);
        zulu = options.useSharedValue;
        result = zulu.bind(options)(offset);
        var _closure2_slot0 = result;
        options = _closure1_slot5;
        zulu = function(argFoo) {
            entity = argFoo;
            entity = entity.isGestureEnabled;
            return entity;
        };
        backup = options.bind(tango)(zulu);
        zulu = 8;
        zulu = yankee[zulu];
        sizing = oscar.bind(tango)(zulu);
        foxtrot = sizing.useStateFromStores;
        zulu = _closure1_slot4;
        offset = new Array(1);
        offset[0] = zulu;
        options = zulu.getHeight;
        zulu = new Array(0);
        echo = foxtrot.bind(sizing)(offset, options, zulu);
        var _closure2_slot1 = echo;
        zulu = 0.06;
        output = zulu * echo;
        var _closure2_slot2 = output;
        zulu = yankee[golf];
        sizing = oscar.bind(tango)(zulu);
        foxtrot = sizing.useAnimatedGestureHandler;
        offset = {};
        zulu = function(argFoo, argBar) { // Original name: H
            mike = _closure2_slot0;
            entity = mike.get;
            mike = entity.bind(mike)();
            entity = argBar;
            entity['y'] = mike;
            entity = undefined;
            return entity;
        };
        options = {};
        options['translateY'] = result;
        zulu['__closure'] = options;
        options = 4538947917191.0;
        zulu['__workletHash'] = options;
        options = _closure1_slot8;
        zulu['__initData'] = options;
        offset['onStart'] = zulu;
        zulu = function(argFoo, argBar) { // Original name: C
            entity = argFoo;
            golf = entity.translationY;
            tango = _closure2_slot0;
            zulu = tango.set;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            mike = 7;
            oscar = yankee[mike];
            entity = undefined;
            verify = offset.bind(entity)(oscar);
            options = verify.interpolate;
            oscar = argBar;
            oscar = oscar.y;
            golf = oscar + golf;
            oscar = [0];
            romeo = 200;
            oscar[1] = romeo;
            romeo = _closure2_slot2;
            report = [0];
            report[1] = romeo;
            mike = yankee[mike];
            mike = offset.bind(entity)(mike);
            mike = mike.Extrapolate;
            foxtrot = mike.CLAMP;
            output = verify;
            sizing = golf;
            kilo = oscar;
            backup = report;
            mike = output[options](sizing, kilo, backup, foxtrot, romeo);
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        options = {};
        options['translateY'] = result;
        update = yankee[golf];
        update = oscar.bind(tango)(update);
        update = update.interpolate;
        options['interpolate'] = update;
        update = 200;
        options['THRESHOLD_TRANSLATE'] = update;
        options['MAX_TRANSLATE'] = output;
        update = yankee[golf];
        update = oscar.bind(tango)(update);
        update = update.Extrapolate;
        options['Extrapolate'] = update;
        zulu['__closure'] = options;
        options = 4656393556747.0;
        zulu['__workletHash'] = options;
        options = _closure1_slot9;
        zulu['__initData'] = options;
        offset['onActive'] = zulu;
        zulu = function(argFoo) { // Original name: Y
            _fun103642: for(var _fun103642_ip = 0; ; ) switch(_fun103642_ip) {
 0:
                entity = argFoo;
                mike = entity.velocityY;
                options = {'damping': 15, 'mass': 1, 'stiffness': 250, 'overshootClamping': true, 'restSpeedThreshold': 0.001, 'restDisplacementThreshold': 0.001};
                options['velocity'] = mike;
                zulu = _closure2_slot0;
                entity = zulu.get;
                zulu = entity.bind(zulu)();
                entity = _closure2_slot2;
                if(!(!(zulu >= entity))) { _fun103642_ip = 119; continue _fun103642 }
 52:
                entity = 500;
                if(!(!(mike >= entity))) { _fun103642_ip = 119; continue _fun103642 }
 62:
                zulu = _closure2_slot0;
                mike = zulu.set;
                oscar = _closure1_slot0;
                report = _closure1_slot2;
                entity = 9;
                report = report[entity];
                entity = undefined;
                oscar = oscar.bind(entity)(report);
                report = oscar.withSpring;
                entity = 0;
                entity = report.bind(oscar)(entity, options);
                entity = mike.bind(zulu)(entity);
                _fun103642_ip = 274; continue _fun103642;
 119:
                zulu = _closure2_slot0;
                mike = zulu.set;
                yankee = _closure1_slot0;
                foxtrot = _closure1_slot2;
                report = 9;
                report = foxtrot[report];
                romeo = undefined;
                golf = yankee.bind(romeo)(report);
                oscar = golf.withSpring;
                report = _closure2_slot1;
                tango = function() { // Original name: n
                    tango = _closure1_slot0;
                    oscar = _closure1_slot2;
                    entity = 7;
                    zulu = oscar[entity];
                    entity = undefined;
                    tango = tango.bind(entity)(zulu);
                    zulu = tango.runOnJS;
                    report = _closure1_slot1;
                    mike = 10;
                    mike = oscar[mike];
                    mike = report.bind(entity)(mike);
                    mike = mike.pop;
                    mike = zulu.bind(tango)(mike);
                    mike = mike.bind(entity)();
                    return entity;
                };
                verify = {};
                offset = 7;
                offset = foxtrot[offset];
                offset = yankee.bind(romeo)(offset);
                offset = offset.runOnJS;
                verify['runOnJS'] = offset;
                yankee = _closure1_slot1;
                offset = 10;
                offset = foxtrot[offset];
                offset = yankee.bind(romeo)(offset);
                verify['ModalActionCreators'] = offset;
                tango['__closure'] = verify;
                verify = 1946196853347.0;
                tango['__workletHash'] = verify;
                entity = _closure1_slot11;
                tango['__initData'] = entity;
                kilo = 'respect-motion-settings';
                result = golf;
                output = report;
                sizing = options;
                backup = tango;
                entity = result[oscar](output, sizing, kilo, backup, foxtrot);
                entity = mike.bind(zulu)(entity);
 274:
                entity = undefined;
                return entity;
            }
        };
        update = {};
        update['translateY'] = result;
        update['MAX_TRANSLATE'] = output;
        options = 500;
        update['THRESHOLD_VELOCITY'] = options;
        options = 9;
        options = yankee[options];
        options = oscar.bind(tango)(options);
        options = options.withSpring;
        update['withSpring'] = options;
        update['height'] = echo;
        options = yankee[golf];
        options = oscar.bind(tango)(options);
        options = options.runOnJS;
        update['runOnJS'] = options;
        options = _closure1_slot1;
        source = 10;
        source = yankee[source];
        source = options.bind(tango)(source);
        update['ModalActionCreators'] = source;
        zulu['__closure'] = update;
        update = 3121361836866.0;
        zulu['__workletHash'] = update;
        update = _closure1_slot10;
        zulu['__initData'] = update;
        offset['onEnd'] = zulu;
        zulu = new Array(1);
        zulu[0] = echo;
        foxtrot = foxtrot.bind(sizing)(offset, zulu);
        zulu = yankee[golf];
        offset = oscar.bind(tango)(zulu);
        zulu = offset.useAnimatedStyle;
        mike = function() { // Original name: R
            entity = {};
            mike = 1;
            entity['flex'] = mike;
            zulu = {};
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            tango = 7;
            mike = yankee[tango];
            report = undefined;
            foxtrot = offset.bind(report)(mike);
            verify = foxtrot.interpolate;
            golf = _closure2_slot0;
            oscar = golf.get;
            options = oscar.bind(golf)();
            romeo = _closure2_slot2;
            oscar = [0];
            oscar[1] = romeo;
            mike = [0];
            mike[1] = romeo;
            mike = verify.bind(foxtrot)(options, oscar, mike);
            zulu['translateY'] = mike;
            mike = new Array(2);
            mike[0] = zulu;
            zulu = {};
            oscar = yankee[tango];
            verify = offset.bind(report)(oscar);
            options = verify.interpolate;
            oscar = golf.get;
            golf = oscar.bind(golf)();
            oscar = [0];
            oscar[1] = romeo;
            tango = yankee[tango];
            tango = offset.bind(report)(tango);
            tango = tango.Extrapolate;
            kilo = tango.CLAMP;
            sizing = [1, 0.9];
            echo = verify;
            result = golf;
            output = oscar;
            tango = echo[options](result, output, sizing, kilo, backup);
            zulu['scale'] = tango;
            mike[1] = zulu;
            entity['transform'] = mike;
            return entity;
        };
        sizing = {};
        echo = yankee[golf];
        echo = oscar.bind(tango)(echo);
        echo = echo.interpolate;
        sizing['interpolate'] = echo;
        sizing['translateY'] = result;
        sizing['MAX_TRANSLATE'] = output;
        output = yankee[golf];
        output = oscar.bind(tango)(output);
        output = output.Extrapolate;
        sizing['Extrapolate'] = output;
        mike['__closure'] = sizing;
        sizing = 17114098288715.0;
        mike['__workletHash'] = sizing;
        sizing = _closure1_slot12;
        mike['__initData'] = sizing;
        offset = zulu.bind(offset)(mike);
        zulu = _closure1_slot6;
        mike = _closure1_slot3;
        entity = {};
        sizing = report.background;
        report = new Array(2);
        report[0] = sizing;
        report[1] = kilo;
        entity['style'] = report;
        report = 11;
        report = yankee[report];
        report = oscar.bind(tango)(report);
        oscar = report.PanGestureHandler;
        report = {};
        kilo = argBar;
        report['ref'] = kilo;
        report['enabled'] = backup;
        report['onGestureEvent'] = foxtrot;
        sequence = report;
        vacuum = romeo;
        romeo = copyDataProperties(sequence, vacuum);
        golf = yankee[golf];
        golf = options.bind(tango)(golf);
        options = golf.View;
        golf = {};
        golf['style'] = offset;
        golf['children'] = verify;
        options = zulu.bind(tango)(options, golf);
        golf = 'children';
        report[golf] = options;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = report.bind(options)(mike);
    report = {};
    verify = 'function GestureContainerTsx6({translationY:translationY}){const{THRESHOLD_TRANSLATE,position}=this.__closure;const boundedGestureY=Math.max(Math.min(translationY,THRESHOLD_TRANSLATE),0)/THRESHOLD_TRANSLATE;const easeOutCubic=1-Math.pow(1-boundedGestureY,3);position.set(easeOutCubic);}';
    report['code'] = verify;
    var _closure1_slot13 = report;
    report = {};
    verify = 'function GestureContainerTsx7({velocityY:velocityY}){const{position,THRESHOLD_VELOCITY,runOnJS,ModalActionCreators,withTiming,DECELERATED_EASING}=this.__closure;if(position.get()===1||velocityY>THRESHOLD_VELOCITY){runOnJS(ModalActionCreators.pop)();}else{position.set(withTiming(0,{duration:300,easing:DECELERATED_EASING}));}}';
    report['code'] = verify;
    var _closure1_slot14 = report;
    report = {};
    verify = 'function GestureContainerTsx8(){const{interpolate,position,height}=this.__closure;return{flex:1,transform:[{translateY:interpolate(position.get(),[0,1],[0,height*0.06])},{scale:interpolate(position.get(),[0,1],[1,0.9])}]};}';
    report['code'] = verify;
    var _closure1_slot15 = report;
    report = options.forwardRef;
    tango = function(argFoo, argBar) {
        entity = argFoo;
        verify = entity.children;
        backup = entity.style;
        zulu = _closure1_slot7;
        tango = undefined;
        report = zulu.bind(tango)();
        oscar = _closure1_slot5;
        zulu = function(argFoo) {
            entity = argFoo;
            entity = entity.isGestureEnabled;
            return entity;
        };
        foxtrot = oscar.bind(tango)(zulu);
        oscar = _closure1_slot0;
        yankee = _closure1_slot2;
        zulu = 8;
        zulu = yankee[zulu];
        offset = oscar.bind(tango)(zulu);
        options = offset.useStateFromStores;
        zulu = _closure1_slot4;
        golf = new Array(1);
        golf[0] = zulu;
        zulu = function() {
            mike = _closure1_slot4;
            entity = mike.getHeight;
            entity = entity.bind(mike)();
            return entity;
        };
        sizing = options.bind(offset)(golf, zulu);
        var _closure2_slot0 = sizing;
        golf = 7;
        zulu = yankee[golf];
        offset = oscar.bind(tango)(zulu);
        options = offset.useSharedValue;
        zulu = 0;
        output = options.bind(offset)(zulu);
        var _closure2_slot1 = output;
        zulu = yankee[golf];
        kilo = oscar.bind(tango)(zulu);
        romeo = kilo.useAnimatedGestureHandler;
        offset = {};
        zulu = function(argFoo) { // Original name: p
            entity = argFoo;
            golf = entity.translationY;
            mike = global;
            oscar = mike.Math;
            report = oscar.max;
            tango = mike.Math;
            entity = tango.min;
            zulu = 200;
            tango = entity.bind(tango)(golf, zulu);
            entity = 0;
            entity = report.bind(oscar)(tango, entity);
            entity = entity / zulu;
            report = mike.Math;
            tango = report.pow;
            mike = 1;
            zulu = mike - entity;
            entity = 3;
            entity = tango.bind(report)(zulu, entity);
            zulu = mike - entity;
            mike = _closure2_slot1;
            entity = mike.set;
            entity = entity.bind(mike)(zulu);
            entity = undefined;
            return entity;
        };
        options = {};
        result = 200;
        options['THRESHOLD_TRANSLATE'] = result;
        options['position'] = output;
        zulu['__closure'] = options;
        options = 2684994560036.0;
        zulu['__workletHash'] = options;
        options = _closure1_slot13;
        zulu['__initData'] = options;
        offset['onActive'] = zulu;
        zulu = function(argFoo) { // Original name: A
            _fun103649: for(var _fun103649_ip = 0; ; ) switch(_fun103649_ip) {
 0:
                entity = argFoo;
                zulu = entity.velocityY;
                tango = _closure2_slot1;
                mike = tango.get;
                tango = mike.bind(tango)();
                mike = 1;
                if(!(mike !== tango)) { _fun103649_ip = 131; continue _fun103649 }
 32:
                mike = 500;
                if(!(!(zulu > mike))) { _fun103649_ip = 131; continue _fun103649 }
 42:
                zulu = _closure2_slot1;
                mike = zulu.set;
                options = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 12;
                entity = verify[entity];
                golf = undefined;
                oscar = options.bind(golf)(entity);
                report = oscar.withTiming;
                tango = {};
                entity = 300;
                tango['duration'] = entity;
                entity = 13;
                entity = verify[entity];
                entity = options.bind(golf)(entity);
                entity = entity.DECELERATED_EASING;
                tango['easing'] = entity;
                entity = 0;
                entity = report.bind(oscar)(entity, tango);
                entity = mike.bind(zulu)(entity);
                _fun103649_ip = 192; continue _fun103649;
 131:
                tango = _closure1_slot0;
                oscar = _closure1_slot2;
                mike = 7;
                zulu = oscar[mike];
                mike = undefined;
                tango = tango.bind(mike)(zulu);
                zulu = tango.runOnJS;
                report = _closure1_slot1;
                entity = 10;
                entity = oscar[entity];
                entity = report.bind(mike)(entity);
                entity = entity.pop;
                entity = zulu.bind(tango)(entity);
                entity = entity.bind(mike)();
 192:
                entity = undefined;
                return entity;
            }
        };
        result = {};
        result['position'] = output;
        options = 500;
        result['THRESHOLD_VELOCITY'] = options;
        options = yankee[golf];
        options = oscar.bind(tango)(options);
        options = options.runOnJS;
        result['runOnJS'] = options;
        options = _closure1_slot1;
        echo = 10;
        echo = yankee[echo];
        echo = options.bind(tango)(echo);
        result['ModalActionCreators'] = echo;
        echo = 12;
        echo = yankee[echo];
        echo = oscar.bind(tango)(echo);
        echo = echo.withTiming;
        result['withTiming'] = echo;
        echo = 13;
        echo = yankee[echo];
        echo = oscar.bind(tango)(echo);
        echo = echo.DECELERATED_EASING;
        result['DECELERATED_EASING'] = echo;
        zulu['__closure'] = result;
        result = 2532034182986.0;
        zulu['__workletHash'] = result;
        result = _closure1_slot14;
        zulu['__initData'] = result;
        offset['onEnd'] = zulu;
        zulu = new Array(0);
        romeo = romeo.bind(kilo)(offset, zulu);
        zulu = yankee[golf];
        offset = oscar.bind(tango)(zulu);
        zulu = offset.useAnimatedStyle;
        mike = function() { // Original name: S
            entity = {};
            mike = 1;
            entity['flex'] = mike;
            zulu = {};
            golf = _closure1_slot0;
            options = _closure1_slot2;
            tango = 7;
            mike = options[tango];
            oscar = undefined;
            romeo = golf.bind(oscar)(mike);
            yankee = romeo.interpolate;
            report = _closure2_slot1;
            verify = report.get;
            offset = verify.bind(report)();
            verify = _closure2_slot0;
            mike = 0.06;
            mike = mike * verify;
            verify = [0];
            verify[1] = mike;
            mike = [0, 1];
            mike = yankee.bind(romeo)(offset, mike, verify);
            zulu['translateY'] = mike;
            mike = new Array(2);
            mike[0] = zulu;
            zulu = {};
            tango = options[tango];
            options = golf.bind(oscar)(tango);
            golf = options.interpolate;
            tango = report.get;
            oscar = tango.bind(report)();
            report = [0, 1];
            tango = [1, 0.9];
            tango = golf.bind(options)(oscar, report, tango);
            zulu['scale'] = tango;
            mike[1] = zulu;
            entity['transform'] = mike;
            return entity;
        };
        kilo = {};
        result = yankee[golf];
        result = oscar.bind(tango)(result);
        result = result.interpolate;
        kilo['interpolate'] = result;
        kilo['position'] = output;
        kilo['height'] = sizing;
        mike['__closure'] = kilo;
        kilo = 5321797141007.0;
        mike['__workletHash'] = kilo;
        kilo = _closure1_slot15;
        mike['__initData'] = kilo;
        offset = zulu.bind(offset)(mike);
        zulu = _closure1_slot6;
        mike = _closure1_slot3;
        entity = {};
        kilo = report.background;
        report = new Array(2);
        report[0] = kilo;
        report[1] = backup;
        entity['style'] = report;
        report = 11;
        report = yankee[report];
        report = oscar.bind(tango)(report);
        oscar = report.PanGestureHandler;
        report = {};
        backup = argBar;
        report['ref'] = backup;
        report['enabled'] = foxtrot;
        report['onGestureEvent'] = romeo;
        golf = yankee[golf];
        golf = options.bind(tango)(golf);
        options = golf.View;
        golf = {};
        golf['style'] = offset;
        golf['children'] = verify;
        golf = zulu.bind(tango)(options, golf);
        report['children'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    tango = report.bind(options)(tango);
    report = 14;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/video_calls/native/components/GestureContainer.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['SwipeToDismissGestureContainer'] = mike;
    return entity;
})();