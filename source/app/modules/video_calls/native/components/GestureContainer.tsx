// app/modules/video_calls/native/components/GestureContainer.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    report = golfie[entity];
    michal = argCor;
    entity = undefined;
    option = michal.bind(entity)(report);
    yankee = 1;
    michal = golfie[yankee];
    michal = oscard.bind(entity)(michal);
    michal = michal.View;
    var _closure1_slot3 = michal;
    michal = 2;
    michal = golfie[michal];
    michal = romeon.bind(entity)(michal);
    var _closure1_slot4 = michal;
    michal = 3;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.useChannelCallStore;
    var _closure1_slot5 = michal;
    michal = 4;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.jsx;
    var _closure1_slot6 = michal;
    michal = 5;
    michal = golfie[michal];
    verify = oscard.bind(entity)(michal);
    report = verify.createStyles;
    michal = {};
    offset = {};
    offset['flex'] = yankee;
    yankee = 6;
    yankee = golfie[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BLACK;
    offset['backgroundColor'] = yankee;
    michal['background'] = offset;
    michal = report.bind(verify)(michal);
    var _closure1_slot7 = michal;
    michal = {};
    report = 'function GestureContainerTsx1(_event,context){const{translateY}=this.__closure;context.y=translateY.get();}';
    michal['code'] = report;
    var _closure1_slot8 = michal;
    michal = {};
    report = 'function GestureContainerTsx2({translationY:translationY},context){const{translateY,interpolate,THRESHOLD_TRANSLATE,MAX_TRANSLATE,Extrapolate}=this.__closure;translateY.set(interpolate(context.y+translationY,[0,THRESHOLD_TRANSLATE],[0,MAX_TRANSLATE],Extrapolate.CLAMP));}';
    michal['code'] = report;
    var _closure1_slot9 = michal;
    michal = {};
    report = "function GestureContainerTsx3({velocityY:velocityY}){const{translateY,MAX_TRANSLATE,THRESHOLD_VELOCITY,withSpring,height,runOnJS,ModalActionCreators}=this.__closure;const config={damping:15,mass:1,stiffness:250,overshootClamping:true,restSpeedThreshold:0.001,restDisplacementThreshold:0.001,velocity:velocityY};if(translateY.get()>=MAX_TRANSLATE||velocityY>=THRESHOLD_VELOCITY){translateY.set(withSpring(height,config,'respect-motion-settings',function(){runOnJS(ModalActionCreators.pop)();}));}else{translateY.set(withSpring(0,config));}}";
    michal['code'] = report;
    var _closure1_slot10 = michal;
    michal = {};
    report = 'function GestureContainerTsx4(){const{runOnJS,ModalActionCreators}=this.__closure;runOnJS(ModalActionCreators.pop)();}';
    michal['code'] = report;
    var _closure1_slot11 = michal;
    michal = {};
    report = 'function GestureContainerTsx5(){const{interpolate,translateY,MAX_TRANSLATE,Extrapolate}=this.__closure;return{flex:1,transform:[{translateY:interpolate(translateY.get(),[0,MAX_TRANSLATE],[0,MAX_TRANSLATE])},{scale:interpolate(translateY.get(),[0,MAX_TRANSLATE],[1,0.9],Extrapolate.CLAMP)}]};}';
    michal['code'] = report;
    var _closure1_slot12 = michal;
    report = option.forwardRef;
    michal = function(argFoo, argBar) {
        tangon = argFoo;
        verify = tangon.children;
        kiloes = tangon.style;
        entity = null;
        zuuluu = Object.create(entity);
        offset = 0;
        zuuluu['children'] = offset;
        zuuluu['style'] = offset;
        sequen = {};
        vacuum = tangon;
        ctrled = zuuluu;
        romeon = copyDataProperties(sequen, vacuum, ctrled);
        zuuluu = _closure1_slot7;
        tangon = undefined;
        report = zuuluu.bind(tangon)();
        oscard = _closure1_slot0;
        yankee = _closure1_slot2;
        golfie = 7;
        zuuluu = yankee[golfie];
        option = oscard.bind(tangon)(zuuluu);
        zuuluu = option.useSharedValue;
        result = zuuluu.bind(option)(offset);
        var _closure2_slot0 = result;
        option = _closure1_slot5;
        zuuluu = function(argFoo) {
            entity = argFoo;
            entity = entity.isGestureEnabled;
            return entity;
        };
        backup = option.bind(tangon)(zuuluu);
        zuuluu = 8;
        zuuluu = yankee[zuuluu];
        sizing = oscard.bind(tangon)(zuuluu);
        foxtra = sizing.useStateFromStores;
        zuuluu = _closure1_slot4;
        offset = new Array(1);
        offset[0] = zuuluu;
        option = zuuluu.getHeight;
        zuuluu = new Array(0);
        echoed = foxtra.bind(sizing)(offset, option, zuuluu);
        var _closure2_slot1 = echoed;
        zuuluu = 0.06;
        output = zuuluu * echoed;
        var _closure2_slot2 = output;
        zuuluu = yankee[golfie];
        sizing = oscard.bind(tangon)(zuuluu);
        foxtra = sizing.useAnimatedGestureHandler;
        offset = {};
        zuuluu = function(argFoo, argBar) { // Original name: H
            michal = _closure2_slot0;
            entity = michal.get;
            michal = entity.bind(michal)();
            entity = argBar;
            entity['y'] = michal;
            entity = undefined;
            return entity;
        };
        option = {};
        option['translateY'] = result;
        zuuluu['__closure'] = option;
        option = 4538947917191.0;
        zuuluu['__workletHash'] = option;
        option = _closure1_slot8;
        zuuluu['__initData'] = option;
        offset['onStart'] = zuuluu;
        zuuluu = function(argFoo, argBar) { // Original name: C
            entity = argFoo;
            golfie = entity.translationY;
            tangon = _closure2_slot0;
            zuuluu = tangon.set;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            michal = 7;
            oscard = yankee[michal];
            entity = undefined;
            verify = offset.bind(entity)(oscard);
            option = verify.interpolate;
            oscard = argBar;
            oscard = oscard.y;
            golfie = oscard + golfie;
            oscard = [0];
            romeon = 200;
            oscard[1] = romeon;
            romeon = _closure2_slot2;
            report = [0];
            report[1] = romeon;
            michal = yankee[michal];
            michal = offset.bind(entity)(michal);
            michal = michal.Extrapolate;
            foxtra = michal.CLAMP;
            output = verify;
            sizing = golfie;
            kiloes = oscard;
            backup = report;
            michal = output[option](sizing, kiloes, backup, foxtra, romeon);
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        option = {};
        option['translateY'] = result;
        update = yankee[golfie];
        update = oscard.bind(tangon)(update);
        update = update.interpolate;
        option['interpolate'] = update;
        update = 200;
        option['THRESHOLD_TRANSLATE'] = update;
        option['MAX_TRANSLATE'] = output;
        update = yankee[golfie];
        update = oscard.bind(tangon)(update);
        update = update.Extrapolate;
        option['Extrapolate'] = update;
        zuuluu['__closure'] = option;
        option = 4656393556747.0;
        zuuluu['__workletHash'] = option;
        option = _closure1_slot9;
        zuuluu['__initData'] = option;
        offset['onActive'] = zuuluu;
        zuuluu = function(argFoo) { // Original name: Y
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                michal = entity.velocityY;
                option = {'damping': 15, 'mass': 1, 'stiffness': 250, 'overshootClamping': true, 'restSpeedThreshold': 0.001, 'restDisplacementThreshold': 0.001};
                option['velocity'] = michal;
                zuuluu = _closure2_slot0;
                entity = zuuluu.get;
                zuuluu = entity.bind(zuuluu)();
                entity = _closure2_slot2;
                if(!(!(zuuluu >= entity))) { _fun00002_ip = 119; continue _fun00001 }
 52:
                entity = 500;
                if(!(!(michal >= entity))) { _fun00002_ip = 119; continue _fun00001 }
 62:
                zuuluu = _closure2_slot0;
                michal = zuuluu.set;
                oscard = _closure1_slot0;
                report = _closure1_slot2;
                entity = 9;
                report = report[entity];
                entity = undefined;
                oscard = oscard.bind(entity)(report);
                report = oscard.withSpring;
                entity = 0;
                entity = report.bind(oscard)(entity, option);
                entity = michal.bind(zuuluu)(entity);
                _fun00002_ip = 274; continue _fun00001;
 119:
                zuuluu = _closure2_slot0;
                michal = zuuluu.set;
                yankee = _closure1_slot0;
                foxtra = _closure1_slot2;
                report = 9;
                report = foxtra[report];
                romeon = undefined;
                golfie = yankee.bind(romeon)(report);
                oscard = golfie.withSpring;
                report = _closure2_slot1;
                tangon = function() { // Original name: n
                    tangon = _closure1_slot0;
                    oscard = _closure1_slot2;
                    entity = 7;
                    zuuluu = oscard[entity];
                    entity = undefined;
                    tangon = tangon.bind(entity)(zuuluu);
                    zuuluu = tangon.runOnJS;
                    report = _closure1_slot1;
                    michal = 10;
                    michal = oscard[michal];
                    michal = report.bind(entity)(michal);
                    michal = michal.pop;
                    michal = zuuluu.bind(tangon)(michal);
                    michal = michal.bind(entity)();
                    return entity;
                };
                verify = {};
                offset = 7;
                offset = foxtra[offset];
                offset = yankee.bind(romeon)(offset);
                offset = offset.runOnJS;
                verify['runOnJS'] = offset;
                yankee = _closure1_slot1;
                offset = 10;
                offset = foxtra[offset];
                offset = yankee.bind(romeon)(offset);
                verify['ModalActionCreators'] = offset;
                tangon['__closure'] = verify;
                verify = 1946196853347.0;
                tangon['__workletHash'] = verify;
                entity = _closure1_slot11;
                tangon['__initData'] = entity;
                kiloes = 'respect-motion-settings';
                result = golfie;
                output = report;
                sizing = option;
                backup = tangon;
                entity = result[oscard](output, sizing, kiloes, backup, foxtra);
                entity = michal.bind(zuuluu)(entity);
 274:
                entity = undefined;
                return entity;
            }
        };
        update = {};
        update['translateY'] = result;
        update['MAX_TRANSLATE'] = output;
        option = 500;
        update['THRESHOLD_VELOCITY'] = option;
        option = 9;
        option = yankee[option];
        option = oscard.bind(tangon)(option);
        option = option.withSpring;
        update['withSpring'] = option;
        update['height'] = echoed;
        option = yankee[golfie];
        option = oscard.bind(tangon)(option);
        option = option.runOnJS;
        update['runOnJS'] = option;
        option = _closure1_slot1;
        source = 10;
        source = yankee[source];
        source = option.bind(tangon)(source);
        update['ModalActionCreators'] = source;
        zuuluu['__closure'] = update;
        update = 3121361836866.0;
        zuuluu['__workletHash'] = update;
        update = _closure1_slot10;
        zuuluu['__initData'] = update;
        offset['onEnd'] = zuuluu;
        zuuluu = new Array(1);
        zuuluu[0] = echoed;
        foxtra = foxtra.bind(sizing)(offset, zuuluu);
        zuuluu = yankee[golfie];
        offset = oscard.bind(tangon)(zuuluu);
        zuuluu = offset.useAnimatedStyle;
        michal = function() { // Original name: R
            entity = {};
            michal = 1;
            entity['flex'] = michal;
            zuuluu = {};
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            tangon = 7;
            michal = yankee[tangon];
            report = undefined;
            foxtra = offset.bind(report)(michal);
            verify = foxtra.interpolate;
            golfie = _closure2_slot0;
            oscard = golfie.get;
            option = oscard.bind(golfie)();
            romeon = _closure2_slot2;
            oscard = [0];
            oscard[1] = romeon;
            michal = [0];
            michal[1] = romeon;
            michal = verify.bind(foxtra)(option, oscard, michal);
            zuuluu['translateY'] = michal;
            michal = new Array(2);
            michal[0] = zuuluu;
            zuuluu = {};
            oscard = yankee[tangon];
            verify = offset.bind(report)(oscard);
            option = verify.interpolate;
            oscard = golfie.get;
            golfie = oscard.bind(golfie)();
            oscard = [0];
            oscard[1] = romeon;
            tangon = yankee[tangon];
            tangon = offset.bind(report)(tangon);
            tangon = tangon.Extrapolate;
            kiloes = tangon.CLAMP;
            sizing = [1, 0.9];
            echoed = verify;
            result = golfie;
            output = oscard;
            tangon = echoed[option](result, output, sizing, kiloes, backup);
            zuuluu['scale'] = tangon;
            michal[1] = zuuluu;
            entity['transform'] = michal;
            return entity;
        };
        sizing = {};
        echoed = yankee[golfie];
        echoed = oscard.bind(tangon)(echoed);
        echoed = echoed.interpolate;
        sizing['interpolate'] = echoed;
        sizing['translateY'] = result;
        sizing['MAX_TRANSLATE'] = output;
        output = yankee[golfie];
        output = oscard.bind(tangon)(output);
        output = output.Extrapolate;
        sizing['Extrapolate'] = output;
        michal['__closure'] = sizing;
        sizing = 17114098288715.0;
        michal['__workletHash'] = sizing;
        sizing = _closure1_slot12;
        michal['__initData'] = sizing;
        offset = zuuluu.bind(offset)(michal);
        zuuluu = _closure1_slot6;
        michal = _closure1_slot3;
        entity = {};
        sizing = report.background;
        report = new Array(2);
        report[0] = sizing;
        report[1] = kiloes;
        entity['style'] = report;
        report = 11;
        report = yankee[report];
        report = oscard.bind(tangon)(report);
        oscard = report.PanGestureHandler;
        report = {};
        kiloes = argBar;
        report['ref'] = kiloes;
        report['enabled'] = backup;
        report['onGestureEvent'] = foxtra;
        sequen = report;
        vacuum = romeon;
        romeon = copyDataProperties(sequen, vacuum);
        golfie = yankee[golfie];
        golfie = option.bind(tangon)(golfie);
        option = golfie.View;
        golfie = {};
        golfie['style'] = offset;
        golfie['children'] = verify;
        option = zuuluu.bind(tangon)(option, golfie);
        golfie = 'children';
        report[golfie] = option;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = report.bind(option)(michal);
    report = {};
    verify = 'function GestureContainerTsx6({translationY:translationY}){const{THRESHOLD_TRANSLATE,position}=this.__closure;const boundedGestureY=Math.max(Math.min(translationY,THRESHOLD_TRANSLATE),0)/THRESHOLD_TRANSLATE;const easeOutCubic=1-Math.pow(1-boundedGestureY,3);position.set(easeOutCubic);}';
    report['code'] = verify;
    var _closure1_slot13 = report;
    report = {};
    verify = 'function GestureContainerTsx7({velocityY:velocityY}){const{position,THRESHOLD_VELOCITY,runOnJS,ModalActionCreators,withTiming,DECELERATED_EASING}=this.__closure;if(position.get()===1||velocityY>THRESHOLD_VELOCITY){runOnJS(ModalActionCreators.pop)();}else{position.set(withTiming(0,{duration:300,easing:DECELERATED_EASING}));}}';
    report['code'] = verify;
    var _closure1_slot14 = report;
    report = {};
    verify = 'function GestureContainerTsx8(){const{interpolate,position,height}=this.__closure;return{flex:1,transform:[{translateY:interpolate(position.get(),[0,1],[0,height*0.06])},{scale:interpolate(position.get(),[0,1],[1,0.9])}]};}';
    report['code'] = verify;
    var _closure1_slot15 = report;
    report = option.forwardRef;
    tangon = function(argFoo, argBar) {
        entity = argFoo;
        verify = entity.children;
        backup = entity.style;
        zuuluu = _closure1_slot7;
        tangon = undefined;
        report = zuuluu.bind(tangon)();
        oscard = _closure1_slot5;
        zuuluu = function(argFoo) {
            entity = argFoo;
            entity = entity.isGestureEnabled;
            return entity;
        };
        foxtra = oscard.bind(tangon)(zuuluu);
        oscard = _closure1_slot0;
        yankee = _closure1_slot2;
        zuuluu = 8;
        zuuluu = yankee[zuuluu];
        offset = oscard.bind(tangon)(zuuluu);
        option = offset.useStateFromStores;
        zuuluu = _closure1_slot4;
        golfie = new Array(1);
        golfie[0] = zuuluu;
        zuuluu = function() {
            michal = _closure1_slot4;
            entity = michal.getHeight;
            entity = entity.bind(michal)();
            return entity;
        };
        sizing = option.bind(offset)(golfie, zuuluu);
        var _closure2_slot0 = sizing;
        golfie = 7;
        zuuluu = yankee[golfie];
        offset = oscard.bind(tangon)(zuuluu);
        option = offset.useSharedValue;
        zuuluu = 0;
        output = option.bind(offset)(zuuluu);
        var _closure2_slot1 = output;
        zuuluu = yankee[golfie];
        kiloes = oscard.bind(tangon)(zuuluu);
        romeon = kiloes.useAnimatedGestureHandler;
        offset = {};
        zuuluu = function(argFoo) { // Original name: p
            entity = argFoo;
            golfie = entity.translationY;
            michal = global;
            oscard = michal.Math;
            report = oscard.max;
            tangon = michal.Math;
            entity = tangon.min;
            zuuluu = 200;
            tangon = entity.bind(tangon)(golfie, zuuluu);
            entity = 0;
            entity = report.bind(oscard)(tangon, entity);
            entity = entity / zuuluu;
            report = michal.Math;
            tangon = report.pow;
            michal = 1;
            zuuluu = michal - entity;
            entity = 3;
            entity = tangon.bind(report)(zuuluu, entity);
            zuuluu = michal - entity;
            michal = _closure2_slot1;
            entity = michal.set;
            entity = entity.bind(michal)(zuuluu);
            entity = undefined;
            return entity;
        };
        option = {};
        result = 200;
        option['THRESHOLD_TRANSLATE'] = result;
        option['position'] = output;
        zuuluu['__closure'] = option;
        option = 2684994560036.0;
        zuuluu['__workletHash'] = option;
        option = _closure1_slot13;
        zuuluu['__initData'] = option;
        offset['onActive'] = zuuluu;
        zuuluu = function(argFoo) { // Original name: A
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = argFoo;
                zuuluu = entity.velocityY;
                tangon = _closure2_slot1;
                michal = tangon.get;
                tangon = michal.bind(tangon)();
                michal = 1;
                if(!(michal !== tangon)) { _fun00004_ip = 131; continue _fun00003 }
 32:
                michal = 500;
                if(!(!(zuuluu > michal))) { _fun00004_ip = 131; continue _fun00003 }
 42:
                zuuluu = _closure2_slot1;
                michal = zuuluu.set;
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 12;
                entity = verify[entity];
                golfie = undefined;
                oscard = option.bind(golfie)(entity);
                report = oscard.withTiming;
                tangon = {};
                entity = 300;
                tangon['duration'] = entity;
                entity = 13;
                entity = verify[entity];
                entity = option.bind(golfie)(entity);
                entity = entity.DECELERATED_EASING;
                tangon['easing'] = entity;
                entity = 0;
                entity = report.bind(oscard)(entity, tangon);
                entity = michal.bind(zuuluu)(entity);
                _fun00004_ip = 192; continue _fun00003;
 131:
                tangon = _closure1_slot0;
                oscard = _closure1_slot2;
                michal = 7;
                zuuluu = oscard[michal];
                michal = undefined;
                tangon = tangon.bind(michal)(zuuluu);
                zuuluu = tangon.runOnJS;
                report = _closure1_slot1;
                entity = 10;
                entity = oscard[entity];
                entity = report.bind(michal)(entity);
                entity = entity.pop;
                entity = zuuluu.bind(tangon)(entity);
                entity = entity.bind(michal)();
 192:
                entity = undefined;
                return entity;
            }
        };
        result = {};
        result['position'] = output;
        option = 500;
        result['THRESHOLD_VELOCITY'] = option;
        option = yankee[golfie];
        option = oscard.bind(tangon)(option);
        option = option.runOnJS;
        result['runOnJS'] = option;
        option = _closure1_slot1;
        echoed = 10;
        echoed = yankee[echoed];
        echoed = option.bind(tangon)(echoed);
        result['ModalActionCreators'] = echoed;
        echoed = 12;
        echoed = yankee[echoed];
        echoed = oscard.bind(tangon)(echoed);
        echoed = echoed.withTiming;
        result['withTiming'] = echoed;
        echoed = 13;
        echoed = yankee[echoed];
        echoed = oscard.bind(tangon)(echoed);
        echoed = echoed.DECELERATED_EASING;
        result['DECELERATED_EASING'] = echoed;
        zuuluu['__closure'] = result;
        result = 2532034182986.0;
        zuuluu['__workletHash'] = result;
        result = _closure1_slot14;
        zuuluu['__initData'] = result;
        offset['onEnd'] = zuuluu;
        zuuluu = new Array(0);
        romeon = romeon.bind(kiloes)(offset, zuuluu);
        zuuluu = yankee[golfie];
        offset = oscard.bind(tangon)(zuuluu);
        zuuluu = offset.useAnimatedStyle;
        michal = function() { // Original name: S
            entity = {};
            michal = 1;
            entity['flex'] = michal;
            zuuluu = {};
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            tangon = 7;
            michal = option[tangon];
            oscard = undefined;
            romeon = golfie.bind(oscard)(michal);
            yankee = romeon.interpolate;
            report = _closure2_slot1;
            verify = report.get;
            offset = verify.bind(report)();
            verify = _closure2_slot0;
            michal = 0.06;
            michal = michal * verify;
            verify = [0];
            verify[1] = michal;
            michal = [0, 1];
            michal = yankee.bind(romeon)(offset, michal, verify);
            zuuluu['translateY'] = michal;
            michal = new Array(2);
            michal[0] = zuuluu;
            zuuluu = {};
            tangon = option[tangon];
            option = golfie.bind(oscard)(tangon);
            golfie = option.interpolate;
            tangon = report.get;
            oscard = tangon.bind(report)();
            report = [0, 1];
            tangon = [1, 0.9];
            tangon = golfie.bind(option)(oscard, report, tangon);
            zuuluu['scale'] = tangon;
            michal[1] = zuuluu;
            entity['transform'] = michal;
            return entity;
        };
        kiloes = {};
        result = yankee[golfie];
        result = oscard.bind(tangon)(result);
        result = result.interpolate;
        kiloes['interpolate'] = result;
        kiloes['position'] = output;
        kiloes['height'] = sizing;
        michal['__closure'] = kiloes;
        kiloes = 5321797141007.0;
        michal['__workletHash'] = kiloes;
        kiloes = _closure1_slot15;
        michal['__initData'] = kiloes;
        offset = zuuluu.bind(offset)(michal);
        zuuluu = _closure1_slot6;
        michal = _closure1_slot3;
        entity = {};
        kiloes = report.background;
        report = new Array(2);
        report[0] = kiloes;
        report[1] = backup;
        entity['style'] = report;
        report = 11;
        report = yankee[report];
        report = oscard.bind(tangon)(report);
        oscard = report.PanGestureHandler;
        report = {};
        backup = argBar;
        report['ref'] = backup;
        report['enabled'] = foxtra;
        report['onGestureEvent'] = romeon;
        golfie = yankee[golfie];
        golfie = option.bind(tangon)(golfie);
        option = golfie.View;
        golfie = {};
        golfie['style'] = offset;
        golfie['children'] = verify;
        golfie = zuuluu.bind(tangon)(option, golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    tangon = report.bind(option)(tangon);
    report = 14;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/video_calls/native/components/GestureContainer.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['SwipeToDismissGestureContainer'] = michal;
    return entity;
})();