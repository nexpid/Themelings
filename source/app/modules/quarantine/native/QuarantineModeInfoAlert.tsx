// app/modules/quarantine/native/QuarantineModeInfoAlert.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    offset = tango.Fonts;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot3 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    romeo = 4;
    romeo = oscar[romeo];
    foxtrot = yankee.bind(entity)(romeo);
    romeo = offset.PRIMARY_BOLD;
    offset = 5;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    yankee = offset.HEADER_PRIMARY;
    offset = 24;
    kilo = foxtrot.bind(entity)(romeo, yankee, offset);
    sizing = verify;
    offset = copyDataProperties(sizing, kilo);
    yankee = 'center';
    offset = 'textAlign';
    verify[offset] = yankee;
    yankee = 12;
    offset = 'marginVertical';
    verify[offset] = yankee;
    tango['header'] = verify;
    verify = {'textAlign': 'center', 'marginVertical': 8};
    tango['text'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot5 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/quarantine/native/QuarantineModeInfoAlert.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        entity = argFoo;
        report = entity.onClose;
        entity = _closure1_slot5;
        tango = undefined;
        offset = entity.bind(tango)();
        zulu = _closure1_slot4;
        oscar = _closure1_slot1;
        foxtrot = _closure1_slot2;
        entity = 6;
        entity = foxtrot[entity];
        mike = oscar.bind(tango)(entity);
        entity = {};
        entity['onClose'] = report;
        options = _closure1_slot3;
        report = 7;
        report = foxtrot[report];
        oscar = oscar.bind(tango)(report);
        report = {};
        verify = offset.header;
        report['style'] = verify;
        romeo = _closure1_slot0;
        verify = 8;
        golf = foxtrot[verify];
        golf = romeo.bind(tango)(golf);
        backup = golf.intl;
        yankee = backup.string;
        golf = foxtrot[verify];
        golf = romeo.bind(tango)(golf);
        golf = golf.t;
        golf = golf.EouHws;
        golf = yankee.bind(backup)(golf);
        report['children'] = golf;
        oscar = options.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = 9;
        oscar = foxtrot[oscar];
        oscar = romeo.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {};
        offset = offset.text;
        oscar['style'] = offset;
        offset = 'text-md/medium';
        oscar['variant'] = offset;
        offset = foxtrot[verify];
        offset = romeo.bind(tango)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtrot[verify];
        verify = romeo.bind(tango)(verify);
        verify = verify.t;
        verify = verify.zNPBMD;
        verify = offset.bind(yankee)(verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();