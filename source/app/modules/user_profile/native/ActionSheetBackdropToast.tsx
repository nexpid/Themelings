// app/modules/user_profile/native/ActionSheetBackdropToast.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    romeo = 1;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot4 = golf;
    offset = tango.StyleSheet;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.ACTION_SHEET_MAX_DYNAMIC_CONTENT_SIZE_RATIO;
    var _closure1_slot5 = golf;
    tango = tango.ACTION_SHEET_START_HEIGHT_RATIO;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    golf = report.bind(entity)(tango);
    tango = golf.isIOS;
    tango = tango.bind(golf)();
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    backup = offset.absoluteFillObject;
    kilo = verify;
    offset = copyDataProperties(kilo, backup);
    offset = 'flex';
    verify[offset] = romeo;
    romeo = 'center';
    offset = 'alignItems';
    verify[offset] = romeo;
    offset = 'justifyContent';
    verify[offset] = romeo;
    tango['container'] = verify;
    verify = {'position': 'absolute', 'bottom': 16, 'backgroundColor': null, 'borderRadius': null, 'paddingTop': 6, 'paddingBottom': 8, 'paddingHorizontal': 16};
    offset = 6;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.TOAST_BG;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.round;
    verify['borderRadius'] = offset;
    tango['toast'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = {};
    golf = 'function ActionSheetBackdropToastTsx1(){const{isInIOS,isExpanded,maxDynamicContentSize,TOAST_BOTTOM_MARGIN,nonExpandedHeight,ACTION_SHEET_MAX_DYNAMIC_CONTENT_SIZE_RATIO,ACTION_SHEET_START_HEIGHT_RATIO,TOAST_BOTTOM_GAP_EXPANDED,TOAST_BOTTOM_GAP,positionDelta,TOAST_ANIMATION_Y_DELTA,opacity}=this.__closure;return{bottom:(isInIOS?isExpanded?maxDynamicContentSize+TOAST_BOTTOM_MARGIN:nonExpandedHeight+TOAST_BOTTOM_MARGIN:(isExpanded?ACTION_SHEET_MAX_DYNAMIC_CONTENT_SIZE_RATIO:ACTION_SHEET_START_HEIGHT_RATIO)*maxDynamicContentSize+(isExpanded?TOAST_BOTTOM_GAP_EXPANDED:TOAST_BOTTOM_GAP))+ +(1-positionDelta.get())*TOAST_ANIMATION_Y_DELTA,opacity:opacity.get()};}';
    tango['code'] = golf;
    var _closure1_slot10 = tango;
    tango = 13;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_profile/native/ActionSheetBackdropToast.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) {
        entity = argFoo;
        verify = entity.text;
        result = entity.isExpanded;
        var _closure2_slot0 = result;
        zulu = _closure1_slot9;
        tango = undefined;
        golf = zulu.bind(tango)();
        oscar = _closure1_slot1;
        offset = _closure1_slot2;
        zulu = 7;
        zulu = offset[zulu];
        zulu = oscar.bind(tango)(zulu);
        zulu = zulu.bind(tango)();
        report = zulu.top;
        zulu = 8;
        zulu = offset[zulu];
        zulu = oscar.bind(tango)(zulu);
        zulu = zulu.bind(tango)();
        yankee = zulu.height;
        kilo = _closure1_slot6;
        sizing = yankee * kilo;
        var _closure2_slot1 = sizing;
        options = _closure1_slot0;
        zulu = 9;
        zulu = offset[zulu];
        zulu = options.bind(tango)(zulu);
        zulu = zulu.NAV_BAR_HEIGHT_MULTILINE;
        zulu = yankee - zulu;
        output = zulu - report;
        var _closure2_slot2 = output;
        report = 10;
        zulu = offset[report];
        yankee = options.bind(tango)(zulu);
        zulu = yankee.useSharedValue;
        romeo = 0;
        backup = zulu.bind(yankee)(romeo);
        var _closure2_slot3 = backup;
        zulu = offset[report];
        yankee = options.bind(tango)(zulu);
        zulu = yankee.useSharedValue;
        foxtrot = zulu.bind(yankee)(romeo);
        var _closure2_slot4 = foxtrot;
        echo = _closure1_slot3;
        romeo = echo.useEffect;
        yankee = new Array(2);
        yankee[0] = backup;
        yankee[1] = foxtrot;
        zulu = function() {
            report = _closure2_slot3;
            tango = report.set;
            yankee = _closure1_slot0;
            romeo = _closure1_slot2;
            golf = 10;
            entity = romeo[golf];
            offset = undefined;
            foxtrot = yankee.bind(offset)(entity);
            verify = foxtrot.withDelay;
            entity = 11;
            zulu = romeo[entity];
            backup = yankee.bind(offset)(zulu);
            options = backup.withTiming;
            zulu = {};
            oscar = 200;
            zulu['duration'] = oscar;
            oscar = romeo[golf];
            oscar = yankee.bind(offset)(oscar);
            sizing = oscar.Easing;
            kilo = sizing.in;
            oscar = romeo[golf];
            oscar = yankee.bind(offset)(oscar);
            oscar = oscar.Easing;
            oscar = oscar.ease;
            oscar = kilo.bind(sizing)(oscar);
            zulu['easing'] = oscar;
            oscar = 1;
            options = options.bind(backup)(oscar, zulu);
            zulu = 100;
            zulu = verify.bind(foxtrot)(zulu, options);
            zulu = tango.bind(report)(zulu);
            zulu = _closure2_slot4;
            mike = zulu.set;
            entity = romeo[entity];
            report = yankee.bind(offset)(entity);
            tango = report.withTiming;
            entity = {};
            options = 300;
            entity['duration'] = options;
            options = romeo[golf];
            options = yankee.bind(offset)(options);
            verify = options.Easing;
            options = verify.in;
            golf = romeo[golf];
            golf = yankee.bind(offset)(golf);
            golf = golf.Easing;
            golf = golf.linear;
            golf = options.bind(verify)(golf);
            entity['easing'] = golf;
            entity = tango.bind(report)(oscar, entity);
            entity = mike.bind(zulu)(entity);
            entity = function() {
                oscar = _closure2_slot3;
                report = oscar.set;
                yankee = _closure1_slot0;
                romeo = _closure1_slot2;
                options = 10;
                mike = romeo[options];
                entity = undefined;
                foxtrot = yankee.bind(entity)(mike);
                offset = foxtrot.withDelay;
                mike = 11;
                tango = romeo[mike];
                verify = yankee.bind(entity)(tango);
                tango = verify.withTiming;
                golf = 0;
                tango = tango.bind(verify)(golf);
                verify = 200;
                tango = offset.bind(foxtrot)(verify, tango);
                tango = report.bind(oscar)(tango);
                tango = _closure2_slot4;
                zulu = tango.set;
                mike = romeo[mike];
                oscar = yankee.bind(entity)(mike);
                report = oscar.withTiming;
                mike = {};
                mike['duration'] = verify;
                verify = romeo[options];
                verify = yankee.bind(entity)(verify);
                offset = verify.Easing;
                verify = offset.out;
                options = romeo[options];
                options = yankee.bind(entity)(options);
                options = options.Easing;
                options = options.exp;
                options = verify.bind(offset)(options);
                mike['easing'] = options;
                mike = report.bind(oscar)(golf, mike);
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            return entity;
        };
        zulu = romeo.bind(echo)(zulu, yankee);
        zulu = offset[report];
        yankee = options.bind(tango)(zulu);
        zulu = yankee.useAnimatedStyle;
        mike = function() { // Original name: h
            _fun77252: for(var _fun77252_ip = 0; ; ) switch(_fun77252_ip) {
 0:
                entity = {};
                report = _closure1_slot8;
                zulu = _closure2_slot0;
                if(report) { _fun77252_ip = 59; continue _fun77252 }
 19:
                if(zulu) { _fun77252_ip = 28; continue _fun77252 }
 22:
                report = _closure1_slot6;
                _fun77252_ip = 32; continue _fun77252;
 28:
                report = _closure1_slot5;
 32:
                tango = _closure2_slot2;
                report = report * tango;
                oscar = _closure2_slot0;
                tango = 46;
                if(!oscar) { _fun77252_ip = 53; continue _fun77252 }
 50:
                tango = 72;
 53:
                tango = report + tango;
                _fun77252_ip = 89; continue _fun77252;
 59:
                if(zulu) { _fun77252_ip = 75; continue _fun77252 }
 62:
                report = _closure2_slot1;
                zulu = 24;
                zulu = report + zulu;
                _fun77252_ip = 86; continue _fun77252;
 75:
                oscar = _closure2_slot2;
                report = 24;
                zulu = oscar + report;
 86:
                tango = zulu;
 89:
                report = _closure2_slot3;
                zulu = report.get;
                report = zulu.bind(report)();
                zulu = 1;
                report = zulu - report;
                zulu = 15;
                zulu = zulu * report;
                zulu = tango + zulu;
                entity['bottom'] = zulu;
                zulu = _closure2_slot4;
                mike = zulu.get;
                mike = mike.bind(zulu)();
                entity['opacity'] = mike;
                return entity;
            }
        };
        romeo = {};
        echo = _closure1_slot8;
        romeo['isInIOS'] = echo;
        romeo['isExpanded'] = result;
        romeo['maxDynamicContentSize'] = output;
        output = 24;
        romeo['TOAST_BOTTOM_MARGIN'] = output;
        romeo['nonExpandedHeight'] = sizing;
        sizing = _closure1_slot5;
        romeo['ACTION_SHEET_MAX_DYNAMIC_CONTENT_SIZE_RATIO'] = sizing;
        romeo['ACTION_SHEET_START_HEIGHT_RATIO'] = kilo;
        kilo = 72;
        romeo['TOAST_BOTTOM_GAP_EXPANDED'] = kilo;
        kilo = 46;
        romeo['TOAST_BOTTOM_GAP'] = kilo;
        romeo['positionDelta'] = backup;
        backup = 15;
        romeo['TOAST_ANIMATION_Y_DELTA'] = backup;
        romeo['opacity'] = foxtrot;
        mike['__closure'] = romeo;
        romeo = 4629963124809.0;
        mike['__workletHash'] = romeo;
        romeo = _closure1_slot10;
        mike['__initData'] = romeo;
        yankee = zulu.bind(yankee)(mike);
        zulu = _closure1_slot7;
        mike = _closure1_slot4;
        entity = {};
        foxtrot = golf.container;
        romeo = new Array(1);
        romeo[0] = foxtrot;
        entity['style'] = romeo;
        report = offset[report];
        report = oscar.bind(tango)(report);
        oscar = report.View;
        report = {};
        romeo = golf.toast;
        golf = new Array(2);
        golf[0] = romeo;
        golf[1] = yankee;
        report['style'] = golf;
        golf = 12;
        golf = offset[golf];
        golf = options.bind(tango)(golf);
        options = golf.Text;
        golf = {'variant': 'text-sm/medium', 'color': 'header-primary'};
        golf['children'] = verify;
        golf = zulu.bind(tango)(options, golf);
        report['children'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['ActionSheetBackdropToast'] = mike;
    return entity;
})();