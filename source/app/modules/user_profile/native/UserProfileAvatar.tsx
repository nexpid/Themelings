// app/modules/user_profile/native/UserProfileAvatar.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot2 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AVATAR_SIZE_VARIANT;
    var _closure1_slot3 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 6;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_profile/native/UserProfileAvatar.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: UserProfileAvatar
        _fun77413: for(var _fun77413_ip = 0; ; ) switch(_fun77413_ip) {
 0:
            zulu = argFoo;
            yankee = zulu.backgroundColor;
            offset = zulu.size;
            tango = undefined;
            if(!(offset === tango)) { _fun77413_ip = 26; continue _fun77413 }
 19:
            offset = _closure1_slot3;
 26:
            entity = null;
            mike = Object.create(entity);
            entity = 0;
            mike['backgroundColor'] = entity;
            mike['size'] = entity;
            echo = {};
            result = zulu;
            output = mike;
            verify = copyDataProperties(echo, result, output);
            golf = _closure1_slot0;
            romeo = _closure1_slot1;
            entity = 4;
            entity = romeo[entity];
            entity = golf.bind(tango)(entity);
            foxtrot = entity.bind(tango)();
            zulu = _closure1_slot6;
            mike = _closure1_slot5;
            entity = {};
            options = _closure1_slot4;
            oscar = _closure1_slot2;
            report = {};
            kilo = foxtrot.avatarBackground;
            backup = new Array(3);
            backup[0] = kilo;
            kilo = foxtrot.avatarPosition;
            backup[1] = kilo;
            kilo = {};
            kilo['backgroundColor'] = yankee;
            backup[2] = kilo;
            report['style'] = backup;
            oscar = options.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = 5;
            oscar = romeo[oscar];
            golf = golf.bind(tango)(oscar);
            oscar = {};
            backup = foxtrot.avatar;
            romeo = new Array(2);
            romeo[0] = backup;
            foxtrot = foxtrot.avatarPosition;
            romeo[1] = foxtrot;
            oscar['style'] = romeo;
            oscar['size'] = offset;
            offset = {};
            offset['backgroundColor'] = yankee;
            oscar['statusStyle'] = offset;
            echo = oscar;
            result = verify;
            verify = copyDataProperties(echo, result);
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();