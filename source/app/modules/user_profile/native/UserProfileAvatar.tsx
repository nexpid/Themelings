// app/modules/user_profile/native/UserProfileAvatar.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot2 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AVATAR_SIZE_VARIANT;
    var _closure1_slot3 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    golfie = tangon.Fragment;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_profile/native/UserProfileAvatar.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: UserProfileAvatar
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            yankee = zuuluu.backgroundColor;
            offset = zuuluu.size;
            tangon = undefined;
            if(!(offset === tangon)) { _fun00002_ip = 26; continue _fun00001 }
 19:
            offset = _closure1_slot3;
 26:
            entity = null;
            michal = Object.create(entity);
            entity = 0;
            michal['backgroundColor'] = entity;
            michal['size'] = entity;
            echoed = {};
            result = zuuluu;
            output = michal;
            verify = copyDataProperties(echoed, result, output);
            golfie = _closure1_slot0;
            romeon = _closure1_slot1;
            entity = 4;
            entity = romeon[entity];
            entity = golfie.bind(tangon)(entity);
            foxtra = entity.bind(tangon)();
            zuuluu = _closure1_slot6;
            michal = _closure1_slot5;
            entity = {};
            option = _closure1_slot4;
            oscard = _closure1_slot2;
            report = {};
            kiloes = foxtra.avatarBackground;
            backup = new Array(3);
            backup[0] = kiloes;
            kiloes = foxtra.avatarPosition;
            backup[1] = kiloes;
            kiloes = {};
            kiloes['backgroundColor'] = yankee;
            backup[2] = kiloes;
            report['style'] = backup;
            oscard = option.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = 5;
            oscard = romeon[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            backup = foxtra.avatar;
            romeon = new Array(2);
            romeon[0] = backup;
            foxtra = foxtra.avatarPosition;
            romeon[1] = foxtra;
            oscard['style'] = romeon;
            oscard['size'] = offset;
            offset = {};
            offset['backgroundColor'] = yankee;
            oscard['statusStyle'] = offset;
            echoed = oscard;
            result = verify;
            verify = copyDataProperties(echoed, result);
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();