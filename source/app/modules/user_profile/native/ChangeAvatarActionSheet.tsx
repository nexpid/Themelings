// app/modules/user_profile/native/ChangeAvatarActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    romeon = 0;
    golfie = oscard[romeon];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticsObjects;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot7 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 6;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['marginLeft'] = foxtra;
    tangon['nitroWheel'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_NORMAL;
    verify['color'] = foxtra;
    tangon['sublabel'] = verify;
    verify = {'marginBottom': 4, 'color': null, 'alignItems': 'center', 'flexDirection': 'row'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.INTERACTIVE_ACTIVE;
    verify['color'] = foxtra;
    tangon['label'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_DANGER;
    verify['color'] = foxtra;
    tangon['remove'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['marginTop'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['marginBottom'] = foxtra;
    tangon['upsellButton'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'flex-end'};
    tangon['upsellTitleContainer'] = verify;
    verify = {};
    verify['flex'] = romeon;
    tangon['titleWrapper'] = verify;
    verify = {};
    romeon = 'flex-start';
    verify['justifyContent'] = romeon;
    tangon['titleContainer'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_MUTED;
    verify['tintColor'] = offset;
    tangon['disabledNitroWheel'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_profile/native/ChangeAvatarActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ChangeAvatarActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            output = entity.handleUploadAvatarSelect;
            backup = entity.handleRemoveAvatarSelect;
            vacuum = entity.handleUploadGIFAvatarSelect;
            result = entity.handleEditAvatarDecorationSelect;
            kiloes = entity.showAnimatedAvatarUpsell;
            tangon = undefined;
            if(!(kiloes === tangon)) { _fun00002_ip = 41; continue _fun00001 }
 39:
            kiloes = false;
 41:
            offset = entity.showRemoveAvatar;
            if(!(offset === tangon)) { _fun00002_ip = 53; continue _fun00001 }
 51:
            offset = false;
 53:
            entity = _closure1_slot9;
            echoed = entity.bind(tangon)();
            sizing = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 7;
            entity = verify[entity];
            report = sizing.bind(tangon)(entity);
            zuuluu = report.useStateFromStores;
            entity = _closure1_slot4;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure1_slot4;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            zuuluu = zuuluu.bind(report)(michal, entity);
            michal = _closure1_slot1;
            entity = 8;
            entity = verify[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.isPremium;
            option = entity.bind(michal)(zuuluu);
            zuuluu = _closure1_slot7;
            entity = 9;
            entity = verify[entity];
            entity = sizing.bind(tangon)(entity);
            michal = entity.ActionSheet;
            entity = {};
            golfie = _closure1_slot6;
            report = 10;
            report = verify[report];
            report = sizing.bind(tangon)(report);
            oscard = report.BottomSheetTitleHeader;
            report = {};
            source = 11;
            yankee = verify[source];
            yankee = sizing.bind(tangon)(yankee);
            foxtra = yankee.intl;
            yankee = foxtra.string;
            verify = verify[source];
            verify = sizing.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.lqaIxM;
            verify = yankee.bind(foxtra)(verify);
            report['title'] = verify;
            if(!option) { _fun00002_ip = 283; continue _fun00001 }
 245:
            foxtra = _closure1_slot6;
            yankee = _closure1_slot0;
            sizing = _closure1_slot2;
            verify = 12;
            verify = sizing[verify];
            verify = yankee.bind(tangon)(verify);
            yankee = verify.NitroWheelIcon;
            verify = {};
            option = foxtra.bind(tangon)(yankee, verify);
 283:
            report['trailing'] = option;
            option = echoed.titleWrapper;
            report['titleWrapperStyle'] = option;
            option = echoed.titleContainer;
            report['titleContainerStyle'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot7;
            config = _closure1_slot0;
            update = _closure1_slot2;
            oscard = 13;
            oscard = update[oscard];
            oscard = config.bind(tangon)(oscard);
            golfie = oscard.TableRowGroup;
            oscard = {};
            sizing = _closure1_slot6;
            yankee = 14;
            verify = update[yankee];
            verify = config.bind(tangon)(verify);
            foxtra = verify.TableRow;
            verify = {};
            ctrled = update[source];
            ctrled = config.bind(tangon)(ctrled);
            record = ctrled.intl;
            sequen = record.string;
            ctrled = update[source];
            ctrled = config.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.MsUY/f;
            ctrled = sequen.bind(record)(ctrled);
            verify['label'] = ctrled;
            ctrled = update[source];
            ctrled = config.bind(tangon)(ctrled);
            sequen = ctrled.intl;
            ctrled = sequen.string;
            update = update[source];
            update = config.bind(tangon)(update);
            update = update.t;
            update = update.r5hKOz;
            update = ctrled.bind(sequen)(update);
            verify['subLabel'] = update;
            verify['onPress'] = output;
            foxtra = sizing.bind(tangon)(foxtra, verify);
            verify = new Array(5);
            verify[0] = foxtra;
            foxtra = null;
            sizing = foxtra != vacuum;
            if(!sizing) { _fun00002_ip = 509; continue _fun00001 }
 506:
            sizing = !kiloes;
 509:
            if(!sizing) { _fun00002_ip = 599; continue _fun00001 }
 512:
            ctrled = _closure1_slot6;
            cntext = _closure1_slot0;
            sequen = _closure1_slot2;
            output = sequen[yankee];
            output = cntext.bind(tangon)(output);
            update = output.TableRow;
            output = {};
            config = sequen[source];
            config = cntext.bind(tangon)(config);
            record = config.intl;
            config = record.string;
            sequen = sequen[source];
            sequen = cntext.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.xsC+//;
            sequen = config.bind(record)(sequen);
            output['label'] = sequen;
            output['onPress'] = vacuum;
            sizing = ctrled.bind(tangon)(update, output);
 599:
            verify[1] = sizing;
            if(!kiloes) { _fun00002_ip = 1043; continue _fun00001 }
 609:
            update = _closure1_slot6;
            whisks = _closure1_slot0;
            status = _closure1_slot2;
            sizing = status[yankee];
            sizing = whisks.bind(tangon)(sizing);
            output = sizing.TableRow;
            sizing = {};
            sequen = _closure1_slot7;
            cntext = _closure1_slot3;
            ctrled = {};
            vacuum = echoed.upsellTitleContainer;
            ctrled['style'] = vacuum;
            config = 15;
            vacuum = status[config];
            vacuum = whisks.bind(tangon)(vacuum);
            record = vacuum.FormLabel;
            vacuum = {};
            papara = status[source];
            papara = whisks.bind(tangon)(papara);
            sierra = papara.intl;
            target = sierra.string;
            papara = status[source];
            papara = whisks.bind(tangon)(papara);
            papara = papara.t;
            papara = papara.xZ0Woq;
            papara = target.bind(sierra)(papara);
            vacuum['text'] = papara;
            record = update.bind(tangon)(record, vacuum);
            vacuum = new Array(2);
            vacuum[0] = record;
            record = 12;
            record = status[record];
            record = whisks.bind(tangon)(record);
            papara = record.NitroWheelIcon;
            record = {};
            target = echoed.nitroWheel;
            record['style'] = target;
            target = 'sm';
            record['size'] = target;
            record = update.bind(tangon)(papara, record);
            vacuum[1] = record;
            ctrled['children'] = vacuum;
            ctrled = sequen.bind(tangon)(cntext, ctrled);
            sizing['label'] = ctrled;
            vacuum = _closure1_slot8;
            ctrled = {};
            config = status[config];
            config = whisks.bind(tangon)(config);
            record = config.FormSubLabel;
            config = {};
            papara = echoed.sublabel;
            config['style'] = papara;
            papara = 3;
            config['numberOfLines'] = papara;
            papara = status[source];
            papara = whisks.bind(tangon)(papara);
            sierra = papara.intl;
            target = sierra.string;
            papara = status[source];
            papara = whisks.bind(tangon)(papara);
            papara = papara.t;
            papara = papara.L3UPqa;
            papara = target.bind(sierra)(papara);
            config['text'] = papara;
            record = update.bind(tangon)(record, config);
            config = new Array(2);
            config[0] = record;
            record = {};
            papara = echoed.upsellButton;
            record['style'] = papara;
            target = _closure1_slot1;
            papara = 16;
            papara = status[papara];
            target = target.bind(tangon)(papara);
            papara = {};
            sierra = _closure1_slot5;
            sierra = sierra.ANIMATED_AVATAR;
            papara['analyticsObject'] = sierra;
            sierra = status[source];
            sierra = whisks.bind(tangon)(sierra);
            limora = sierra.intl;
            sierra = limora.string;
            status = status[source];
            status = whisks.bind(tangon)(status);
            status = status.t;
            status = status.mr4K7O;
            status = sierra.bind(limora)(status);
            papara['label'] = status;
            papara = update.bind(tangon)(target, papara);
            record['children'] = papara;
            record = update.bind(tangon)(cntext, record);
            config[1] = record;
            ctrled['children'] = config;
            ctrled = sequen.bind(tangon)(vacuum, ctrled);
            sizing['subLabel'] = ctrled;
            kiloes = update.bind(tangon)(output, sizing);
 1043:
            verify[2] = kiloes;
            foxtra = foxtra != result;
            if(!foxtra) { _fun00002_ip = 1200; continue _fun00001 }
 1057:
            output = _closure1_slot6;
            papara = _closure1_slot0;
            config = _closure1_slot2;
            kiloes = config[yankee];
            kiloes = papara.bind(tangon)(kiloes);
            sizing = kiloes.TableRow;
            kiloes = {};
            ctrled = _closure1_slot3;
            update = {};
            vacuum = echoed.upsellTitleContainer;
            update['style'] = vacuum;
            vacuum = 15;
            vacuum = config[vacuum];
            vacuum = papara.bind(tangon)(vacuum);
            sequen = vacuum.FormLabel;
            vacuum = {};
            record = config[source];
            record = papara.bind(tangon)(record);
            cntext = record.intl;
            record = cntext.string;
            config = config[source];
            config = papara.bind(tangon)(config);
            config = config.t;
            config = config.Tna/TU;
            config = record.bind(cntext)(config);
            vacuum['text'] = config;
            vacuum = output.bind(tangon)(sequen, vacuum);
            update['children'] = vacuum;
            update = output.bind(tangon)(ctrled, update);
            kiloes['label'] = update;
            kiloes['onPress'] = result;
            foxtra = output.bind(tangon)(sizing, kiloes);
 1200:
            verify[3] = foxtra;
            if(!offset) { _fun00002_ip = 1356; continue _fun00001 }
 1210:
            foxtra = _closure1_slot6;
            update = _closure1_slot0;
            output = _closure1_slot2;
            yankee = output[yankee];
            yankee = update.bind(tangon)(yankee);
            romeon = yankee.TableRow;
            yankee = {};
            kiloes = 15;
            kiloes = output[kiloes];
            kiloes = update.bind(tangon)(kiloes);
            sizing = kiloes.FormLabel;
            kiloes = {};
            ctrled = echoed.label;
            result = new Array(2);
            result[0] = ctrled;
            echoed = echoed.remove;
            result[1] = echoed;
            kiloes['style'] = result;
            result = output[source];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[source];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.twB3f3;
            output = result.bind(echoed)(output);
            kiloes['text'] = output;
            kiloes = foxtra.bind(tangon)(sizing, kiloes);
            yankee['label'] = kiloes;
            yankee['onPress'] = backup;
            offset = foxtra.bind(tangon)(romeon, yankee);
 1356:
            verify[4] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();