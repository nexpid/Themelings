// app/modules/user_profile/native/UserProfileDismissibleUpsells.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    option = 0;
    golfie = oscard[option];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.TrackUserProfileActions;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Gradients;
    golfie = 5;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.ContentDismissActionType;
    var _closure1_slot7 = golfie;
    golfie = 6;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.jsx;
    var _closure1_slot8 = verify;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot9 = golfie;
    kiloes = tangon.PREMIUM_GUILD;
    golfie = new Array(0);
    sizing = golfie;
    backup = 0;
    tangon = arraySpread(sizing, kiloes, backup);
    tangon = golfie.reverse;
    tangon = tangon.bind(golfie)();
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'width': '100%', 'height': '100%', 'position': 'absolute', 'overflow': 'hidden'};
    tangon['linearGradient'] = verify;
    verify = {'paddingVertical': 16, 'paddingHorizontal': 12};
    offset = 8;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    verify['borderRadius'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_FLOATING;
    verify['backgroundColor'] = foxtra;
    tangon['upsellContainer'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.PROFILE_GRADIENT_OVERLAY_SYNCED_WITH_USER_THEME;
    verify['backgroundColor'] = foxtra;
    tangon['customProfileThemeUpsellContainer'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'space-between', 'alignItems': 'center'};
    tangon['header'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'space-between', 'flexWrap': 'wrap', 'gap': 10, 'marginTop': 12};
    tangon['upsellButtonsContainer'] = verify;
    verify = {};
    verify['flex'] = romeon;
    tangon['upsellButton'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    verify['borderRadius'] = foxtra;
    tangon['premiumButton'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    verify['marginRight'] = foxtra;
    tangon['premiumIcon'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.REDESIGN_BUTTON_SECONDARY_BACKGROUND;
    verify['backgroundColor'] = foxtra;
    verify['borderWidth'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.REDESIGN_BUTTON_SECONDARY_BORDER;
    verify['borderColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.shadows;
    kiloes = romeon.SHADOW_LOW;
    sizing = verify;
    romeon = copyDataProperties(sizing, kiloes);
    tangon['customProfileThemePremiumButton'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.REDESIGN_BUTTON_SECONDARY_PRESSED_BACKGROUND;
    verify['backgroundColor'] = offset;
    tangon['customProfileThemePremiumButtonPressed'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_profile/native/UserProfileDismissibleUpsells.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: UserProfileDismissibleUpsells
        entity = argFoo;
        zuuluu = entity.navigateToShop;
        var _closure2_slot0 = zuuluu;
        offset = entity.navigateToPremium;
        var _closure2_slot1 = offset;
        entity = entity.hasCustomProfileTheme;
        var _closure2_slot2 = entity;
        michal = _closure1_slot11;
        tangon = undefined;
        michal = michal.bind(tangon)();
        var _closure2_slot3 = michal;
        golfie = _closure1_slot0;
        option = _closure1_slot2;
        michal = 9;
        michal = option[michal];
        oscard = golfie.bind(tangon)(michal);
        michal = oscard.useUserProfileAnalyticsContext;
        michal = michal.bind(oscard)();
        michal = michal.trackUserProfileAction;
        var _closure2_slot4 = michal;
        oscard = 10;
        oscard = option[oscard];
        romeon = golfie.bind(tangon)(oscard);
        yankee = romeon.useStateFromStores;
        oscard = _closure1_slot5;
        verify = new Array(1);
        verify[0] = oscard;
        oscard = function() {
            michal = _closure1_slot5;
            entity = michal.getCurrentUser;
            entity = entity.bind(michal)();
            return entity;
        };
        yankee = yankee.bind(romeon)(verify, oscard);
        oscard = 11;
        oscard = option[oscard];
        verify = golfie.bind(tangon)(oscard);
        oscard = verify.isPremium;
        oscard = oscard.bind(verify)(yankee);
        var _closure2_slot5 = oscard;
        verify = _closure1_slot3;
        yankee = verify.useCallback;
        oscard = new Array(2);
        oscard[0] = zuuluu;
        oscard[1] = michal;
        zuuluu = function() {
            tangon = _closure2_slot4;
            zuuluu = {};
            entity = _closure1_slot6;
            entity = entity.VISIT_SHOP;
            zuuluu['action'] = entity;
            entity = undefined;
            zuuluu = tangon.bind(entity)(zuuluu);
            michal = _closure2_slot0;
            michal = michal.bind(entity)();
            return entity;
        };
        zuuluu = yankee.bind(verify)(zuuluu, oscard);
        var _closure2_slot6 = zuuluu;
        yankee = verify.useCallback;
        oscard = new Array(2);
        oscard[0] = offset;
        oscard[1] = michal;
        zuuluu = function() {
            tangon = _closure2_slot4;
            zuuluu = {};
            entity = _closure1_slot6;
            entity = entity.GET_PREMIUM;
            zuuluu['action'] = entity;
            entity = undefined;
            zuuluu = tangon.bind(entity)(zuuluu);
            michal = _closure2_slot1;
            michal = michal.bind(entity)();
            return entity;
        };
        zuuluu = yankee.bind(verify)(zuuluu, oscard);
        var _closure2_slot7 = zuuluu;
        oscard = verify.useCallback;
        zuuluu = new Array(2);
        zuuluu[0] = offset;
        zuuluu[1] = michal;
        michal = function() {
            tangon = _closure2_slot4;
            zuuluu = {};
            entity = _closure1_slot6;
            entity = entity.VIEW_PREMIUM_PERKS;
            zuuluu['action'] = entity;
            entity = undefined;
            zuuluu = tangon.bind(entity)(zuuluu);
            michal = _closure2_slot1;
            michal = michal.bind(entity)();
            return entity;
        };
        michal = oscard.bind(verify)(michal, zuuluu);
        var _closure2_slot8 = michal;
        zuuluu = _closure1_slot8;
        michal = _closure1_slot1;
        entity = 12;
        entity = option[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        oscard = 13;
        oscard = option[oscard];
        oscard = golfie.bind(tangon)(oscard);
        oscard = oscard.DismissibleContent;
        golfie = oscard.USER_PROFILE_PREMIUM_AND_SHOP_ENTRY_POINTS;
        oscard = new Array(1);
        oscard[0] = golfie;
        entity['contentTypes'] = oscard;
        report = function(argFoo) { // Original name: children
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                zuuluu = entity.visibleContent;
                entity = entity.markAsDismissed;
                var _closure3_slot0 = entity;
                michal = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 13;
                entity = tangon[entity];
                report = undefined;
                entity = michal.bind(report)(entity);
                entity = entity.DismissibleContent;
                michal = entity.USER_PROFILE_PREMIUM_AND_SHOP_ENTRY_POINTS;
                entity = null;
                if(!(zuuluu === michal)) { _fun00002_ip = 946; continue _fun00001 }
 67:
                tangon = _closure1_slot8;
                golfie = _closure1_slot1;
                option = _closure1_slot2;
                oscard = 14;
                michal = option[oscard];
                zuuluu = golfie.bind(report)(michal);
                michal = {};
                verify = 2;
                michal['borderWidth'] = verify;
                oscard = option[oscard];
                oscard = golfie.bind(report)(oscard);
                oscard = oscard.Direction;
                oscard = oscard.VERTICAL;
                michal['direction'] = oscard;
                oscard = _closure1_slot10;
                michal['colors'] = oscard;
                oscard = 8;
                oscard = option[oscard];
                oscard = golfie.bind(report)(oscard);
                oscard = oscard.radii;
                oscard = oscard.lg;
                michal['borderRadius'] = oscard;
                option = _closure1_slot9;
                golfie = _closure1_slot4;
                oscard = {};
                verify = {};
                offset = _closure2_slot3;
                papara = offset.upsellContainer;
                target = verify;
                offset = copyDataProperties(target, papara);
                offset = _closure2_slot2;
                if(offset) { _fun00002_ip = 205; continue _fun00001 }
 201:
                offset = {};
                _fun00002_ip = 215; continue _fun00001;
 205:
                yankee = _closure2_slot3;
                offset = yankee.customProfileThemeUpsellContainer;
 215:
                target = verify;
                papara = offset;
                offset = copyDataProperties(target, papara);
                oscard['style'] = verify;
                romeon = _closure1_slot9;
                yankee = _closure1_slot4;
                verify = {};
                output = _closure2_slot3;
                offset = output.header;
                verify['style'] = offset;
                kiloes = _closure1_slot8;
                result = _closure1_slot0;
                sizing = _closure1_slot2;
                offset = 15;
                offset = sizing[offset];
                offset = result.bind(report)(offset);
                foxtra = offset.Text;
                offset = {'accessibilityRole': 'header', 'variant': 'text-sm/semibold'};
                config = 16;
                echoed = sizing[config];
                echoed = result.bind(report)(echoed);
                vacuum = echoed.intl;
                ctrled = vacuum.string;
                echoed = sizing[config];
                echoed = result.bind(report)(echoed);
                echoed = echoed.t;
                echoed = echoed.EIYbj4;
                echoed = ctrled.bind(vacuum)(echoed);
                offset['children'] = echoed;
                foxtra = kiloes.bind(report)(foxtra, offset);
                offset = new Array(2);
                offset[0] = foxtra;
                foxtra = 17;
                foxtra = sizing[foxtra];
                foxtra = result.bind(report)(foxtra);
                echoed = foxtra.PressableOpacity;
                foxtra = {};
                ctrled = 'button';
                foxtra['accessibilityRole'] = ctrled;
                ctrled = sizing[config];
                ctrled = result.bind(report)(ctrled);
                sequen = ctrled.intl;
                vacuum = sequen.string;
                ctrled = sizing[config];
                ctrled = result.bind(report)(ctrled);
                ctrled = ctrled.t;
                ctrled = ctrled.WAI6xs;
                ctrled = vacuum.bind(sequen)(ctrled);
                foxtra['accessibilityLabel'] = ctrled;
                update = function() { // Original name: onPress
                    zuuluu = _closure3_slot0;
                    entity = _closure1_slot7;
                    michal = entity.USER_DISMISS;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
                    return entity;
                };
                foxtra['onPress'] = update;
                update = 18;
                update = sizing[update];
                update = result.bind(report)(update);
                ctrled = update.XSmallIcon;
                update = {};
                vacuum = 'sm';
                update['size'] = vacuum;
                update = kiloes.bind(report)(ctrled, update);
                foxtra['children'] = update;
                foxtra = kiloes.bind(report)(echoed, foxtra);
                offset[1] = foxtra;
                verify['children'] = offset;
                offset = romeon.bind(report)(yankee, verify);
                verify = new Array(2);
                verify[0] = offset;
                offset = {};
                foxtra = output.upsellButtonsContainer;
                offset['style'] = foxtra;
                foxtra = {};
                output = output.upsellButton;
                foxtra['style'] = output;
                output = 19;
                sizing = sizing[output];
                sizing = result.bind(report)(sizing);
                record = sizing.Button;
                result = {'text': null, 'onPress': null, 'icon': null, 'iconPosition': 'start', 'variant': 'secondary', 'shiny': true};
                sizing = _closure2_slot5;
                sequen = _closure1_slot0;
                echoed = _closure1_slot2;
                update = echoed[config];
                update = sequen.bind(report)(update);
                ctrled = update.intl;
                update = ctrled.string;
                echoed = echoed[config];
                echoed = sequen.bind(report)(echoed);
                echoed = echoed.t;
                if(sizing) { _fun00002_ip = 634; continue _fun00001 }
 619:
                sizing = echoed.x6rkDg;
                sizing = update.bind(ctrled)(sizing);
                _fun00002_ip = 647; continue _fun00001;
 634:
                echoed = echoed.0Q61kJ;
                sizing = update.bind(ctrled)(echoed);
 647:
                result['text'] = sizing;
                sizing = _closure2_slot5;
                if(sizing) { _fun00002_ip = 666; continue _fun00001 }
 660:
                sizing = _closure2_slot7;
                _fun00002_ip = 670; continue _fun00001;
 666:
                sizing = _closure2_slot8;
 670:
                result['onPress'] = sizing;
                sizing = _closure1_slot8;
                ctrled = _closure1_slot0;
                sequen = _closure1_slot2;
                echoed = 20;
                echoed = sequen[echoed];
                echoed = ctrled.bind(report)(echoed);
                update = echoed.NitroWheelIcon;
                echoed = {};
                echoed['size'] = vacuum;
                echoed = sizing.bind(report)(update, echoed);
                result['icon'] = echoed;
                update = 'start';
                echoed = 'secondary';
                result = kiloes.bind(report)(record, result);
                foxtra['children'] = result;
                kiloes = kiloes.bind(report)(yankee, foxtra);
                foxtra = new Array(2);
                foxtra[0] = kiloes;
                kiloes = _closure1_slot4;
                backup = {};
                result = _closure2_slot3;
                result = result.upsellButton;
                backup['style'] = result;
                output = sequen[output];
                output = ctrled.bind(report)(output);
                result = output.Button;
                output = {};
                record = sequen[config];
                record = ctrled.bind(report)(record);
                cntext = record.intl;
                record = cntext.string;
                config = sequen[config];
                config = ctrled.bind(report)(config);
                config = config.t;
                config = config.pWG4zc;
                config = record.bind(cntext)(config);
                output['text'] = config;
                source = _closure2_slot6;
                output['onPress'] = source;
                source = 21;
                source = sequen[source];
                source = ctrled.bind(report)(source);
                ctrled = source.ShopIcon;
                source = {};
                source['size'] = vacuum;
                source = sizing.bind(report)(ctrled, source);
                output['icon'] = source;
                output['iconPosition'] = update;
                output['variant'] = echoed;
                output = sizing.bind(report)(result, output);
                backup['children'] = output;
                backup = sizing.bind(report)(kiloes, backup);
                foxtra[1] = backup;
                offset['children'] = foxtra;
                offset = romeon.bind(report)(yankee, offset);
                verify[1] = offset;
                oscard['children'] = verify;
                oscard = option.bind(report)(golfie, oscard);
                michal['children'] = oscard;
                entity = tangon.bind(report)(zuuluu, michal);
 946:
                return entity;
            }
        };
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();