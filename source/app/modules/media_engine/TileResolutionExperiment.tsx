// app/modules/media_engine/TileResolutionExperiment.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    romeon = true;
    michal['value'] = romeon;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    tangon = michal.CommonTriggerPoints;
    michal = 1;
    michal = oscard[michal];
    option = report.bind(entity)(michal);
    golfie = option.createExperiment;
    michal = {'kind': 'user', 'id': '2024-10_tile_resolution_gating', 'label': 'Tile Resolution Gating'};
    verify = {};
    offset = false;
    verify['enabledSingle'] = offset;
    michal['defaultConfig'] = verify;
    tangon = tangon.CONNECTION_OPEN;
    michal['commonTriggerPoint'] = tangon;
    tangon = {'id': 1, 'label': 'Tile size based wants enabled only for 1:1 videos (rollout)'};
    verify = {};
    verify['enabledSingle'] = romeon;
    tangon['config'] = verify;
    verify = new Array(2);
    verify[0] = tangon;
    offset = {'id': 2, 'label': 'Tile size based wants enabled only for 1:1 videos (new stats slice to compare against control)'};
    tangon = 2;
    yankee = {};
    yankee['enabledSingle'] = romeon;
    offset['config'] = yankee;
    verify[1] = offset;
    michal['treatments'] = verify;
    michal = golfie.bind(option)(michal);
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/media_engine/TileResolutionExperiment.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['TileResolutionExperiment'] = michal;
    return entity;
})();