// app/modules/external_pip/ExternalPip.android.tsx
export default (function(native1, native2, native3, native4, native5, native6, native7) {
    var5 = native2;
    var7 = native3;
    var3 = native6;
    var6 = native7;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var7.bind(var1)(var4);
    var _closure1_slot0 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var7.bind(var1)(var4);
    var _closure1_slot1 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var7 = var4.NativeEventEmitter;
    var _closure1_slot2 = var7;
    var4 = var4.NativeModules;
    var _closure1_slot3 = var4;
    var4 = var4.ExternalPip;
    var _closure1_slot4 = var4;
    var2 = function() {
        var4 = _closure1_slot1;
        var3 = function ExternalPip() {
            var3 = this;
            var5 = _closure1_slot0;
            var4 = _closure2_slot0;
            var1 = undefined;
            var4 = var5.bind(var1)(var3, var4);
            var4 = false;
            var3['_enabled'] = var4;
            var3['_isInPipMode'] = var4;
            var5 = _closure1_slot2;
            var2 = _closure1_slot3;
            var7 = var2.PipAndroid;
            var4 = var5.prototype;
            var4 = Object.create(var4, {constructor: {value: var5}});
            var8 = var4;
            var2 = new var8[var5](var7, var6);
            var2 = var2 instanceof Object ? var2 : var4;
            var3['eventEmitter'] = var2;
            return var1;
        };
        var _closure2_slot0 = var3;
        var1 = {};
        var2 = 'addOnPipModeChangedListener';
        var1['key'] = var2;
        var2 = function value(arg1) {
            var2 = this;
            var _closure3_slot0 = var2;
            var3 = arg1;
            var _closure3_slot1 = var3;
            var4 = var2.eventEmitter;
            var3 = var4.addListener;
            var2 = 'onPipModeChanged';
            var1 = function(arg1) {
                var1 = arg1;
                var3 = var1.isInPipMode;
                var2 = _closure3_slot0;
                var2['_isInPipMode'] = var3;
                var2 = _closure3_slot1;
                var1 = undefined;
                var2 = var2.bind(var1)(var3);
                return var1;
            };
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        };
        var1['value'] = var2;
        var2 = new Array(12);
        var2[0] = var1;
        var1 = {};
        var6 = 'addOnPipModeWillChangeListener';
        var1['key'] = var6;
        var6 = function value(arg1) {
            var1 = this;
            var4 = var1.eventEmitter;
            var3 = var4.addListener;
            var2 = 'onPipModeWillChange';
            var1 = arg1;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        };
        var1['value'] = var6;
        var2[1] = var1;
        var1 = {};
        var6 = 'setSelectedStream';
        var1['key'] = var6;
        var6 = function value() {
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[2] = var1;
        var1 = {};
        var6 = 'setFocusedStream';
        var1['key'] = var6;
        var6 = function value() {
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[3] = var1;
        var1 = {};
        var6 = 'setMirrored';
        var1['key'] = var6;
        var6 = function value() {
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[4] = var1;
        var1 = {};
        var6 = 'setPipAspectRatio';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            var4 = _closure1_slot4;
            var3 = var4.setPipAspectRatio;
            var2 = arg1;
            var1 = arg2;
            var1 = var3.bind(var4)(var2, var1);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[5] = var1;
        var1 = {};
        var6 = 'updateSourceTrackingView';
        var1['key'] = var6;
        var6 = function value() {
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[6] = var1;
        var1 = {};
        var6 = 'setEnabled';
        var1['key'] = var6;
        var6 = function value(arg1) {
            var1 = this;
            var2 = arg1;
            var1['_enabled'] = var2;
            var3 = _closure1_slot4;
            var2 = var3.setEnabled;
            var1 = var1._enabled;
            var1 = var2.bind(var3)(var1);
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[7] = var1;
        var1 = {};
        var6 = 'setActive';
        var1['key'] = var6;
        var6 = function value(arg1) {
            var3 = _closure1_slot4;
            var2 = var3.setActive;
            var1 = arg1;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var1['value'] = var6;
        var2[8] = var1;
        var1 = {};
        var6 = 'isEnabled';
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var1 = var1._enabled;
            return var1;
        };
        var1['value'] = var6;
        var2[9] = var1;
        var1 = {};
        var6 = 'isSupported';
        var1['key'] = var6;
        var6 = function value() {
            var1 = _closure1_slot4;
            var2 = var1.isSupported;
            var1 = true;
            var1 = var1 === var2;
            return var1;
        };
        var1['value'] = var6;
        var2[10] = var1;
        var1 = {};
        var6 = 'isInPipMode';
        var1['key'] = var6;
        var5 = function value() {
            var1 = this;
            var1 = var1._isInPipMode;
            return var1;
        };
        var1['value'] = var5;
        var2[11] = var1;
        var1 = undefined;
        var1 = var4.bind(var1)(var3, var2);
        return var1;
    };
    var2 = var2.bind(var1)();
    var4 = var2.prototype;
    var4 = Object.create(var4, {constructor: {value: var2}});
    var13 = var4;
    var2 = new var13[var2](var12);
    var2 = var2 instanceof Object ? var2 : var4;
    var4 = 3;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/external_pip/ExternalPip.android.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();