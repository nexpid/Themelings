// app/modules/external_pip/ExternalPip.android.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot0 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot1 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.NativeEventEmitter;
    var _closure1_slot2 = golfie;
    tangon = tangon.NativeModules;
    var _closure1_slot3 = tangon;
    tangon = tangon.ExternalPip;
    var _closure1_slot4 = tangon;
    michal = function() {
        tangon = _closure1_slot1;
        zuuluu = function() { // Original name: ExternalPip
            zuuluu = this;
            report = _closure1_slot0;
            tangon = _closure2_slot0;
            entity = undefined;
            tangon = report.bind(entity)(zuuluu, tangon);
            tangon = false;
            zuuluu['_enabled'] = tangon;
            zuuluu['_isInPipMode'] = tangon;
            report = _closure1_slot2;
            michal = _closure1_slot3;
            golfie = michal.PipAndroid;
            tangon = report.prototype;
            tangon = Object.create(tangon, {constructor: {value: report}});
            option = tangon;
            michal = new option[report](golfie, oscard);
            michal = michal instanceof Object ? michal : tangon;
            zuuluu['eventEmitter'] = michal;
            return entity;
        };
        var _closure2_slot0 = zuuluu;
        entity = {};
        michal = 'addOnPipModeChangedListener';
        entity['key'] = michal;
        michal = function(argFoo) { // Original name: value
            michal = this;
            var _closure3_slot0 = michal;
            zuuluu = argFoo;
            var _closure3_slot1 = zuuluu;
            tangon = michal.eventEmitter;
            zuuluu = tangon.addListener;
            michal = 'onPipModeChanged';
            entity = function(argFoo) {
                entity = argFoo;
                zuuluu = entity.isInPipMode;
                michal = _closure3_slot0;
                michal['_isInPipMode'] = zuuluu;
                michal = _closure3_slot1;
                entity = undefined;
                michal = michal.bind(entity)(zuuluu);
                return entity;
            };
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        };
        entity['value'] = michal;
        michal = new Array(12);
        michal[0] = entity;
        entity = {};
        oscard = 'addOnPipModeWillChangeListener';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            entity = this;
            tangon = entity.eventEmitter;
            zuuluu = tangon.addListener;
            michal = 'onPipModeWillChange';
            entity = argFoo;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        };
        entity['value'] = oscard;
        michal[1] = entity;
        entity = {};
        oscard = 'setSelectedStream';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        michal[2] = entity;
        entity = {};
        oscard = 'setFocusedStream';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        michal[3] = entity;
        entity = {};
        oscard = 'setMirrored';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        michal[4] = entity;
        entity = {};
        oscard = 'setPipAspectRatio';
        entity['key'] = oscard;
        oscard = function(argFoo, argBar) { // Original name: value
            tangon = _closure1_slot4;
            zuuluu = tangon.setPipAspectRatio;
            michal = argFoo;
            entity = argBar;
            entity = zuuluu.bind(tangon)(michal, entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        michal[5] = entity;
        entity = {};
        oscard = 'updateSourceTrackingView';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        michal[6] = entity;
        entity = {};
        oscard = 'setEnabled';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            entity = this;
            michal = argFoo;
            entity['_enabled'] = michal;
            zuuluu = _closure1_slot4;
            michal = zuuluu.setEnabled;
            entity = entity._enabled;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        michal[7] = entity;
        entity = {};
        oscard = 'setActive';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            zuuluu = _closure1_slot4;
            michal = zuuluu.setActive;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        entity['value'] = oscard;
        michal[8] = entity;
        entity = {};
        oscard = 'isEnabled';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = this;
            entity = entity._enabled;
            return entity;
        };
        entity['value'] = oscard;
        michal[9] = entity;
        entity = {};
        oscard = 'isSupported';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = _closure1_slot4;
            michal = entity.isSupported;
            entity = true;
            entity = entity === michal;
            return entity;
        };
        entity['value'] = oscard;
        michal[10] = entity;
        entity = {};
        oscard = 'isInPipMode';
        entity['key'] = oscard;
        report = function() { // Original name: value
            entity = this;
            entity = entity._isInPipMode;
            return entity;
        };
        entity['value'] = report;
        michal[11] = entity;
        entity = undefined;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    michal = michal.bind(entity)();
    tangon = michal.prototype;
    tangon = Object.create(tangon, {constructor: {value: michal}});
    foxtra = tangon;
    michal = new foxtra[michal](romeon);
    michal = michal instanceof Object ? michal : tangon;
    tangon = 3;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/external_pip/ExternalPip.android.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();