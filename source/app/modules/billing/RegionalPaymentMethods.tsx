// app/modules/billing/RegionalPaymentMethods.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = golfie;
    option = global;
    verify = option.Object;
    report = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = golfie[entity];
    entity = undefined;
    tangon = oscard.bind(entity)(tangon);
    kiloes = tangon.PaymentSourceTypes;
    tangon = 1;
    tangon = golfie[tangon];
    offset = oscard.bind(entity)(tangon);
    verify = offset.createExperiment;
    tangon = {'kind': 'user', 'id': '2021-08_regional_payment_methods', 'label': 'Regional Payment Methods'};
    report = {};
    yankee = new Array(0);
    report['enabledPaymentTypes'] = yankee;
    yankee = null;
    report['forceCountryCode'] = yankee;
    yankee = new Array(0);
    report['validCountryCodes'] = yankee;
    tangon['defaultConfig'] = report;
    report = {'id': 1, 'label': 'Regional Payment Method for Germany'};
    yankee = {};
    romeon = new Array(0);
    yankee['enabledPaymentTypes'] = romeon;
    sizing = 'DE';
    yankee['forceCountryCode'] = sizing;
    romeon = ['DE'];
    yankee['validCountryCodes'] = romeon;
    report['config'] = yankee;
    yankee = new Array(16);
    yankee[0] = report;
    report = {'id': 2, 'label': 'Regional Payment Method for US'};
    romeon = {};
    backup = kiloes.VENMO;
    foxtra = new Array(2);
    foxtra[0] = backup;
    backup = kiloes.CASH_APP;
    foxtra[1] = backup;
    romeon['enabledPaymentTypes'] = foxtra;
    backup = 'US';
    romeon['forceCountryCode'] = backup;
    foxtra = ['US'];
    romeon['validCountryCodes'] = foxtra;
    report['config'] = romeon;
    yankee[1] = report;
    romeon = {'id': 3, 'label': 'Regional Payment Method for Brazil'};
    report = 3;
    foxtra = {};
    output = new Array(0);
    foxtra['enabledPaymentTypes'] = output;
    output = 'BR';
    foxtra['forceCountryCode'] = output;
    output = ['BR'];
    foxtra['validCountryCodes'] = output;
    romeon['config'] = foxtra;
    yankee[2] = romeon;
    romeon = {'id': 4, 'label': 'Regional Payment Method for Turkey'};
    foxtra = {};
    output = new Array(0);
    foxtra['enabledPaymentTypes'] = output;
    output = 'TR';
    foxtra['forceCountryCode'] = output;
    output = ['TR'];
    foxtra['validCountryCodes'] = output;
    romeon['config'] = foxtra;
    yankee[3] = romeon;
    romeon = {'id': 5, 'label': 'Regional Payment Method for Poland'};
    foxtra = {};
    result = kiloes.PRZELEWY24;
    output = new Array(1);
    output[0] = result;
    foxtra['enabledPaymentTypes'] = output;
    output = 'PL';
    foxtra['forceCountryCode'] = output;
    output = ['PL'];
    foxtra['validCountryCodes'] = output;
    romeon['config'] = foxtra;
    yankee[4] = romeon;
    romeon = {'id': 6, 'label': 'Enable paysafecard'};
    foxtra = {};
    result = kiloes.PAYSAFE_CARD;
    output = new Array(1);
    output[0] = result;
    foxtra['enabledPaymentTypes'] = output;
    foxtra['forceCountryCode'] = sizing;
    sizing = ['BG', 'CZ', 'DK', 'HU', 'RO', 'SE', 'DE'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[5] = romeon;
    romeon = {'id': 7, 'label': 'Regional Payment Method for Philippines'};
    foxtra = {};
    output = kiloes.GCASH;
    sizing = new Array(1);
    sizing[0] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'PH';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['PH'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[6] = romeon;
    romeon = {'id': 8, 'label': 'Regional Payment Method for Malaysia'};
    foxtra = {};
    output = kiloes.GRABPAY_MY;
    sizing = new Array(1);
    sizing[0] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'MY';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['MY'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[7] = romeon;
    romeon = {'id': 9, 'label': 'Regional Payment Method for Vietnam'};
    foxtra = {};
    output = kiloes.MOMO_WALLET;
    sizing = new Array(1);
    sizing[0] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'VN';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['VN'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[8] = romeon;
    romeon = {'id': 10, 'label': 'Regional Payment Method for Indonesia'};
    foxtra = {};
    output = kiloes.GOPAY_WALLET;
    sizing = new Array(1);
    sizing[0] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'ID';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['ID'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[9] = romeon;
    romeon = {'id': 11, 'label': 'Regional Payment Method for South Korea'};
    foxtra = {};
    output = kiloes.KAKAOPAY;
    sizing = new Array(1);
    sizing[0] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'KR';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['KR'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[10] = romeon;
    romeon = {'id': 12, 'label': 'Regional Payment Method for Belgium'};
    foxtra = {};
    output = kiloes.PAYSAFE_CARD;
    sizing = new Array(2);
    sizing[0] = output;
    output = kiloes.BANCONTACT;
    sizing[1] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'BE';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['BE'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[11] = romeon;
    romeon = {'id': 13, 'label': 'Regional Payment Method for Austria'};
    foxtra = {};
    output = kiloes.PAYSAFE_CARD;
    sizing = new Array(2);
    sizing[0] = output;
    output = kiloes.EPS;
    sizing[1] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'AT';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['AT'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[12] = romeon;
    romeon = {'id': 14, 'label': 'Regional Payment Method for Netherlands'};
    foxtra = {};
    output = kiloes.PAYSAFE_CARD;
    sizing = new Array(2);
    sizing[0] = output;
    output = kiloes.IDEAL;
    sizing[1] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'NL';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['NL'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[13] = romeon;
    romeon = {'id': 15, 'label': 'Launch Paysafecard'};
    foxtra = {};
    output = kiloes.PAYSAFE_CARD;
    sizing = new Array(1);
    sizing[0] = output;
    foxtra['enabledPaymentTypes'] = sizing;
    sizing = 'ES';
    foxtra['forceCountryCode'] = sizing;
    sizing = ['ES', 'IT'];
    foxtra['validCountryCodes'] = sizing;
    romeon['config'] = foxtra;
    yankee[14] = romeon;
    romeon = {'id': 16, 'label': 'Launch Cash App'};
    foxtra = {};
    sizing = kiloes.CASH_APP;
    kiloes = new Array(1);
    kiloes[0] = sizing;
    foxtra['enabledPaymentTypes'] = kiloes;
    foxtra['forceCountryCode'] = backup;
    backup = ['US'];
    foxtra['validCountryCodes'] = backup;
    romeon['config'] = foxtra;
    yankee[15] = romeon;
    tangon['treatments'] = yankee;
    tangon = verify.bind(offset)(tangon);
    yankee = option.Map;
    verify = new Array(15);
    offset = ['abn_amro', 'ABN AMRO'];
    verify[0] = offset;
    offset = ['asn_bank', 'ASN Bank'];
    verify[1] = offset;
    offset = ['bunq', 'Bunq'];
    verify[2] = offset;
    offset = ['ing ', 'ING'];
    verify[3] = offset;
    offset = ['knab', 'Knab'];
    verify[4] = offset;
    offset = ['n26', 'N26'];
    verify[5] = offset;
    offset = ['nn', 'Nationale-Nederlanden'];
    verify[6] = offset;
    offset = ['rabobank', 'Rabobank'];
    verify[7] = offset;
    offset = ['revolut', 'Revolut'];
    verify[8] = offset;
    offset = ['regiobank', 'RegioBank'];
    verify[9] = offset;
    offset = ['sns_bank', 'SNS Bank (De Volksbank)'];
    verify[10] = offset;
    offset = ['triodos_bank', 'Triodos Bank'];
    verify[11] = offset;
    offset = ['van_lanschot', 'Van Lanschot'];
    verify[12] = offset;
    offset = ['yoursafe', 'Yoursafe'];
    verify[13] = offset;
    offset = ['handelsbanken', 'Handelsbanken'];
    verify[14] = offset;
    offset = yankee.prototype;
    offset = Object.create(offset, {constructor: {value: yankee}});
    ctrled = offset;
    source = verify;
    verify = new ctrled[yankee](source, update);
    verify = verify instanceof Object ? verify : offset;
    var _closure1_slot2 = verify;
    offset = option.Map;
    option = new Array(27);
    verify = ['arzte_und_apotheker_bank', 'Ärzte- und Apothekerbank'];
    option[0] = verify;
    verify = ['austrian_anadi_bank_ag', 'Austrian Anadi Bank AG'];
    option[1] = verify;
    verify = ['bank_austria', 'Bank Austria'];
    option[2] = verify;
    verify = ['bankhaus_carl_spangler', 'Bankhaus Carl Spängler & Co.AG'];
    option[3] = verify;
    verify = ['bankhaus_schelhammer_und_schattera_ag', 'Bankhaus Schelhammer & Schattera AG'];
    option[4] = verify;
    verify = ['bawag_psk_ag', 'BAWAG P.S.K. AG'];
    option[5] = verify;
    verify = ['bks_bank_ag', 'BKS Bank AG'];
    option[6] = verify;
    verify = ['brull_kallmus_bank_ag', 'Brüll Kallmus Bank AG'];
    option[7] = verify;
    verify = ['btv_vier_lander_bank', 'BTV VIER LÄNDER BANK'];
    option[8] = verify;
    verify = ['capital_bank_grawe_gruppe_ag', 'Capital Bank Grawe Gruppe AG'];
    option[9] = verify;
    verify = ['dolomitenbank', 'Dolomitenbank'];
    option[10] = verify;
    verify = ['easybank_ag', 'Easybank AG'];
    option[11] = verify;
    verify = ['erste_bank_und_sparkassen', 'Erste Bank und Sparkassen'];
    option[12] = verify;
    verify = ['hypo_alpeadriabank_international_ag', 'Hypo Alpe-Adria-Bank International AG'];
    option[13] = verify;
    verify = ['hypo_noe_lb_fur_niederosterreich_u_wien', 'HYPO NOE LB für Niederösterreich u. Wien'];
    option[14] = verify;
    verify = ['hypo_oberosterreich_salzburg_steiermark', 'HYPO Oberösterreich, Salzburg, Steiermark'];
    option[15] = verify;
    verify = ['hypo_tirol_bank_ag', 'Hypo Tirol Bank AG'];
    option[16] = verify;
    verify = ['hypo_vorarlberg_bank_ag', 'Hypo Vorarlberg Bank AG'];
    option[17] = verify;
    verify = ['hypo_bank_burgenland_aktiengesellschaft', 'HYPO-BANK BURGENLAND Aktiengesellschaft'];
    option[18] = verify;
    verify = ['marchfelder_bank', 'Marchfelder Bank'];
    option[19] = verify;
    verify = ['oberbank_ag', 'Oberbank AG'];
    option[20] = verify;
    verify = ['raiffeisen_bankengruppe_osterreich', 'Raiffeisen Bankengruppe Österreich'];
    option[21] = verify;
    verify = ['schoellerbank_ag', 'Schoellerbank AG'];
    option[22] = verify;
    verify = ['sparda_bank_wien', 'Sparda-Bank Wien'];
    option[23] = verify;
    verify = ['volksbank_gruppe', 'Volksbank Gruppe'];
    option[24] = verify;
    verify = ['volkskreditbank_ag', 'Volkskreditbank AG'];
    option[25] = verify;
    verify = ['vr_bank_braunau', 'VR-Bank Braunau'];
    option[26] = verify;
    verify = offset.prototype;
    verify = Object.create(verify, {constructor: {value: offset}});
    ctrled = verify;
    source = option;
    option = new ctrled[offset](source, update);
    option = option instanceof Object ? option : verify;
    var _closure1_slot3 = option;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/billing/RegionalPaymentMethods.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    tangon = function(argFoo) { // Original name: getIdealBankDisplayNameFromBankName
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = argFoo;
            golfie = undefined;
            if(!(golfie !== tangon)) { _fun00002_ip = 29; continue _fun00001 }
 9:
            zuuluu = _closure1_slot2;
            entity = zuuluu.has;
            entity = entity.bind(zuuluu)(tangon);
            if(entity) { _fun00002_ip = 89; continue _fun00001 }
 29:
            oscard = _closure1_slot0;
            option = _closure1_slot1;
            entity = 2;
            zuuluu = option[entity];
            zuuluu = oscard.bind(golfie)(zuuluu);
            report = zuuluu.intl;
            zuuluu = report.string;
            entity = option[entity];
            entity = oscard.bind(golfie)(entity);
            entity = entity.t;
            entity = entity.jdPblp;
            entity = zuuluu.bind(report)(entity);
            _fun00002_ip = 103; continue _fun00001;
 89:
            zuuluu = _closure1_slot2;
            michal = zuuluu.get;
            entity = michal.bind(zuuluu)(tangon);
 103:
            return entity;
        }
    };
    zuuluu['getIdealBankDisplayNameFromBankName'] = tangon;
    michal = function(argFoo) { // Original name: getEPSBankDisplayNameFromBankName
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            tangon = argFoo;
            golfie = undefined;
            if(!(golfie !== tangon)) { _fun00004_ip = 29; continue _fun00003 }
 9:
            zuuluu = _closure1_slot3;
            entity = zuuluu.has;
            entity = entity.bind(zuuluu)(tangon);
            if(entity) { _fun00004_ip = 89; continue _fun00003 }
 29:
            oscard = _closure1_slot0;
            option = _closure1_slot1;
            entity = 2;
            zuuluu = option[entity];
            zuuluu = oscard.bind(golfie)(zuuluu);
            report = zuuluu.intl;
            zuuluu = report.string;
            entity = option[entity];
            entity = oscard.bind(golfie)(entity);
            entity = entity.t;
            entity = entity.jdPblp;
            entity = zuuluu.bind(report)(entity);
            _fun00004_ip = 103; continue _fun00003;
 89:
            zuuluu = _closure1_slot3;
            michal = zuuluu.get;
            entity = michal.bind(zuuluu)(tangon);
 103:
            return entity;
        }
    };
    zuuluu['getEPSBankDisplayNameFromBankName'] = michal;
    return entity;
})();