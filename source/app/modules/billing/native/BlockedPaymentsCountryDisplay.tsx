// app/modules/billing/native/BlockedPaymentsCountryDisplay.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    tango = tango.Image;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.HelpdeskArticles;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 'center';
    verify['alignItems'] = offset;
    tango['container'] = verify;
    verify = {};
    offset = 42;
    verify['marginLeft'] = offset;
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = romeo;
    tango['divider'] = verify;
    verify = {'fontSize': 20, 'fontWeight': '700', 'color': null, 'marginBottom': 16};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.HEADER_SECONDARY;
    verify['color'] = offset;
    tango['header'] = verify;
    verify = {'fontSize': 16, 'marginBottom': 16};
    tango['information'] = verify;
    verify = {};
    offset = 38;
    verify['marginTop'] = offset;
    tango['image'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 13;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/billing/native/BlockedPaymentsCountryDisplay.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: BlockedPaymentsCountryDisplay
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot8;
            tango = undefined;
            verify = entity.bind(tango)();
            echo = _closure1_slot1;
            foxtrot = _closure1_slot2;
            entity = 6;
            entity = foxtrot[entity];
            entity = echo.bind(tango)(entity);
            romeo = entity.bind(tango)();
            zulu = _closure1_slot7;
            mike = _closure1_slot3;
            entity = {};
            report = verify.container;
            entity['style'] = report;
            options = _closure1_slot6;
            yankee = _closure1_slot0;
            oscar = 7;
            report = foxtrot[oscar];
            report = yankee.bind(tango)(report);
            golf = report.LegacyText;
            report = {};
            backup = verify.header;
            report['style'] = backup;
            backup = 8;
            kilo = foxtrot[backup];
            kilo = yankee.bind(tango)(kilo);
            output = kilo.intl;
            sizing = output.string;
            kilo = foxtrot[backup];
            kilo = yankee.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.vwMEHR;
            kilo = sizing.bind(output)(kilo);
            report['children'] = kilo;
            golf = options.bind(tango)(golf, report);
            report = new Array(3);
            report[0] = golf;
            oscar = foxtrot[oscar];
            oscar = yankee.bind(tango)(oscar);
            golf = oscar.LegacyText;
            oscar = {};
            kilo = foxtrot[backup];
            kilo = yankee.bind(tango)(kilo);
            output = kilo.intl;
            sizing = output.format;
            backup = foxtrot[backup];
            backup = yankee.bind(tango)(backup);
            backup = backup.t;
            kilo = backup.IHxEJS;
            backup = {};
            result = 9;
            result = foxtrot[result];
            update = echo.bind(tango)(result);
            echo = update.getArticleURL;
            result = _closure1_slot5;
            result = result.BLOCKED_PAYMENTS;
            result = echo.bind(update)(result);
            backup['helpdeskArticle'] = result;
            backup = sizing.bind(output)(kilo, backup);
            oscar['children'] = backup;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            golf = _closure1_slot4;
            oscar = {};
            verify = verify.image;
            oscar['style'] = verify;
            verify = 10;
            verify = foxtrot[verify];
            yankee = yankee.bind(tango)(verify);
            verify = yankee.isThemeDark;
            verify = verify.bind(yankee)(romeo);
            yankee = _closure1_slot1;
            romeo = _closure1_slot2;
            if(verify) { _fun00002_ip = 342; continue _fun00001 }
 328:
            verify = 12;
            verify = romeo[verify];
            verify = yankee.bind(tango)(verify);
            _fun00002_ip = 354; continue _fun00001;
 342:
            offset = 11;
            offset = romeo[offset];
            verify = yankee.bind(tango)(offset);
 354:
            oscar['source'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();