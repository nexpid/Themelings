// app/modules/billing/utils/PaymentMethodUtils.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscard;
    tangon = global;
    verify = tangon.Object;
    option = verify.defineProperty;
    golfie = {};
    entity = true;
    golfie['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, golfie);
    entity = 0;
    golfie = oscard[entity];
    entity = undefined;
    golfie = report.bind(entity)(golfie);
    golfie = golfie.PaymentSourceTypes;
    verify = golfie.CARD;
    option = new Array(2);
    option[0] = verify;
    verify = golfie.PAYPAL;
    option[1] = verify;
    var _closure1_slot2 = option;
    offset = tangon.Set;
    option = offset.prototype;
    verify = Object.create(option, {constructor: {value: offset}});
    output = ['DE', 'BG', 'CZ', 'DK', 'HU', 'RO', 'SE', 'CH', 'SI', 'IE', 'LV', 'MT', 'FR', 'SK', 'FI', 'GR', 'PT', 'LU', 'LT', 'CY', 'NO', 'NL', 'ES', 'BE', 'AT', 'IT'];
    result = verify;
    option = new result[offset](output, sizing);
    sizing = option instanceof Object ? option : verify;
    offset = tangon.Map;
    option = golfie.SOFORT;
    verify = new Array(2);
    verify[0] = option;
    romeon = tangon.Set;
    option = romeon.prototype;
    yankee = Object.create(option, {constructor: {value: romeon}});
    output = new Array(0);
    result = yankee;
    option = new result[romeon](output, sizing);
    option = option instanceof Object ? option : yankee;
    verify[1] = option;
    option = new Array(14);
    option[0] = verify;
    yankee = golfie.PRZELEWY24;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'PL'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[1] = verify;
    yankee = golfie.GIROPAY;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'DE'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[2] = verify;
    yankee = golfie.PAYSAFE_CARD;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = ['ALL'];
    kiloes = 1;
    output = yankee;
    romeon = arraySpread(output, sizing, kiloes);
    romeon = foxtra.prototype;
    romeon = Object.create(romeon, {constructor: {value: foxtra}});
    result = romeon;
    output = yankee;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[3] = verify;
    yankee = golfie.GCASH;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'PH'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[4] = verify;
    yankee = golfie.GRABPAY_MY;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'MY'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[5] = verify;
    yankee = golfie.MOMO_WALLET;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'VN'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[6] = verify;
    yankee = golfie.VENMO;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'US'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[7] = verify;
    yankee = golfie.KAKAOPAY;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'KR'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[8] = verify;
    yankee = golfie.GOPAY_WALLET;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'ID'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[9] = verify;
    yankee = golfie.BANCONTACT;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'BE'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[10] = verify;
    yankee = golfie.EPS;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'AT'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[11] = verify;
    yankee = golfie.IDEAL;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'NL'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[12] = verify;
    yankee = golfie.CASH_APP;
    verify = new Array(2);
    verify[0] = yankee;
    foxtra = tangon.Set;
    yankee = foxtra.prototype;
    romeon = Object.create(yankee, {constructor: {value: foxtra}});
    output = ['ALL', 'US'];
    result = romeon;
    yankee = new result[foxtra](output, sizing);
    yankee = yankee instanceof Object ? yankee : romeon;
    verify[1] = yankee;
    option[13] = verify;
    verify = offset.prototype;
    verify = Object.create(verify, {constructor: {value: offset}});
    result = verify;
    output = option;
    option = new result[offset](output, sizing);
    option = option instanceof Object ? option : verify;
    var _closure1_slot3 = option;
    option = tangon.Map;
    verify = golfie.PAYSAFE_CARD;
    golfie = new Array(2);
    golfie[0] = verify;
    offset = tangon.Set;
    tangon = offset.prototype;
    verify = Object.create(tangon, {constructor: {value: offset}});
    output = ['DE'];
    result = verify;
    tangon = new result[offset](output, sizing);
    tangon = tangon instanceof Object ? tangon : verify;
    golfie[1] = tangon;
    tangon = new Array(1);
    tangon[0] = golfie;
    golfie = option.prototype;
    golfie = Object.create(golfie, {constructor: {value: option}});
    result = golfie;
    output = tangon;
    tangon = new result[option](output, sizing);
    tangon = tangon instanceof Object ? tangon : golfie;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/billing/utils/PaymentMethodUtils.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: getPaymentMethods
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            tangon = michal.ipCountryCode;
            michal = michal.location;
            golfie = undefined;
            var _closure2_slot1 = golfie;
            var _closure2_slot2 = golfie;
            var _closure2_slot3 = golfie;
            oscard = _closure1_slot0;
            option = _closure1_slot1;
            report = 1;
            report = option[report];
            golfie = oscard.bind(golfie)(report);
            oscard = golfie.getCurrentConfig;
            report = {};
            report['location'] = michal;
            michal = {};
            option = false;
            michal['autoTrackExposure'] = option;
            report = oscard.bind(golfie)(report, michal);
            michal = report.enabledPaymentTypes;
            var _closure2_slot0 = michal;
            michal = report.forceCountryCode;
            golfie = report.validCountryCodes;
            option = null;
            oscard = option != tangon;
            report = 'ALL';
            if(!oscard) { _fun00002_ip = 118; continue _fun00001 }
 115:
            report = tangon;
 118:
            _closure2_slot1 = report;
            report = golfie.length;
            oscard = 0;
            report = report > oscard;
            if(!report) { _fun00002_ip = 140; continue _fun00001 }
 136:
            report = option != michal;
 140:
            if(!report) { _fun00002_ip = 147; continue _fun00001 }
 143:
            report = option != tangon;
 147:
            if(!report) { _fun00002_ip = 170; continue _fun00001 }
 150:
            report = golfie.includes;
            report = report.bind(golfie)(tangon);
            if(!report) { _fun00002_ip = 166; continue _fun00001 }
 163:
            michal = tangon;
 166:
            _closure2_slot1 = michal;
 170:
            tangon = global;
            michal = tangon.Set;
            report = michal.prototype;
            report = Object.create(report, {constructor: {value: michal}});
            foxtra = report;
            michal = new foxtra[michal](romeon);
            golfie = michal instanceof Object ? michal : report;
            _closure2_slot2 = golfie;
            michal = new Array(0);
            _closure2_slot3 = michal;
            verify = _closure1_slot3;
            option = verify.forEach;
            report = function(argFoo, argBar) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    report = argFoo;
                    zuuluu = argBar;
                    tangon = _closure2_slot0;
                    michal = tangon.includes;
                    michal = michal.bind(tangon)(zuuluu);
                    if(!michal) { _fun00004_ip = 73; continue _fun00003 }
 26:
                    tangon = report.has;
                    michal = _closure2_slot1;
                    michal = tangon.bind(report)(michal);
                    if(michal) { _fun00004_ip = 59; continue _fun00003 }
 43:
                    tangon = _closure2_slot3;
                    michal = tangon.push;
                    michal = michal.bind(tangon)(zuuluu);
                    _fun00004_ip = 73; continue _fun00003;
 59:
                    michal = _closure2_slot2;
                    entity = michal.add;
                    entity = entity.bind(michal)(zuuluu);
 73:
                    entity = undefined;
                    return entity;
                }
            };
            report = option.bind(verify)(report);
            option = _closure1_slot4;
            report = option.forEach;
            entity = function(argFoo, argBar) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    tangon = argFoo;
                    zuuluu = tangon.has;
                    michal = _closure2_slot1;
                    michal = zuuluu.bind(tangon)(michal);
                    if(!michal) { _fun00006_ip = 40; continue _fun00005 }
 23:
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.add;
                    entity = argBar;
                    entity = michal.bind(zuuluu)(entity);
 40:
                    entity = undefined;
                    return entity;
                }
            };
            entity = report.bind(option)(entity);
            entity = {};
            yankee = _closure1_slot2;
            zuuluu = new Array(0);
            romeon = zuuluu;
            offset = 0;
            offset = arraySpread(romeon, yankee, offset);
            oscard = tangon.Array;
            tangon = oscard.from;
            yankee = tangon.bind(oscard)(golfie);
            romeon = zuuluu;
            tangon = arraySpread(romeon, yankee, offset);
            entity['countryPaymentMethods'] = zuuluu;
            entity['remainingPaymentMethods'] = michal;
            return entity;
        }
    };
    zuuluu['getPaymentMethods'] = michal;
    return entity;
})();