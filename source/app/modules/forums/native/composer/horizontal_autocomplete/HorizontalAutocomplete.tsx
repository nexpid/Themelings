// app/modules/forums/native/composer/horizontal_autocomplete/HorizontalAutocomplete.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: HorizontalAutocompleteOption
        michal = argFoo;
        option = michal.children;
        oscard = michal.onPress;
        michal = _closure1_slot12;
        tangon = undefined;
        verify = michal.bind(tangon)();
        zuuluu = _closure1_slot1;
        golfie = _closure1_slot2;
        michal = 11;
        michal = golfie[michal];
        offset = zuuluu.bind(tangon)(michal);
        michal = function() {
            entity = _closure1_slot3;
            zuuluu = entity.Value;
            entity = zuuluu.prototype;
            michal = Object.create(entity, {constructor: {value: zuuluu}});
            tangon = 0;
            report = michal;
            entity = new report[zuuluu](tangon, zuuluu);
            entity = entity instanceof Object ? entity : michal;
            return entity;
        };
        yankee = offset.bind(tangon)(michal);
        var _closure2_slot0 = yankee;
        michal = 12;
        michal = golfie[michal];
        michal = zuuluu.bind(tangon)(michal);
        entity = function() {
            tangon = _closure1_slot3;
            zuuluu = tangon.timing;
            michal = _closure2_slot0;
            entity = {'toValue': 1, 'duration': 200, 'useNativeDriver': true};
            michal = zuuluu.bind(tangon)(michal, entity);
            entity = michal.start;
            entity = entity.bind(michal)();
            entity = undefined;
            return entity;
        };
        entity = michal.bind(tangon)(entity);
        zuuluu = _closure1_slot10;
        michal = _closure1_slot4;
        entity = {};
        entity['onPress'] = oscard;
        golfie = _closure1_slot10;
        report = _closure1_slot3;
        oscard = report.View;
        report = {};
        offset = verify.horizontalAutocompleteOption;
        verify = new Array(2);
        verify[0] = offset;
        offset = {};
        offset['opacity'] = yankee;
        verify[1] = offset;
        report['style'] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, michal);
    romeon = 0;
    golfie = oscard[romeon];
    michal = argCor;
    entity = undefined;
    michal = michal.bind(entity)(golfie);
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    golfie = michal.Animated;
    var _closure1_slot3 = golfie;
    backup = michal.StyleSheet;
    golfie = michal.TouchableOpacity;
    var _closure1_slot4 = golfie;
    michal = michal.View;
    var _closure1_slot5 = michal;
    michal = 2;
    michal = oscard[michal];
    michal = foxtra.bind(entity)(michal);
    var _closure1_slot6 = michal;
    michal = 3;
    michal = oscard[michal];
    michal = foxtra.bind(entity)(michal);
    var _closure1_slot7 = michal;
    yankee = 4;
    michal = oscard[yankee];
    michal = foxtra.bind(entity)(michal);
    var _closure1_slot8 = michal;
    michal = 5;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    golfie = michal.ChannelTypes;
    var _closure1_slot9 = golfie;
    kiloes = michal.Fonts;
    michal = 6;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    sizing = michal.AUTOCOMPLETE_ROW_HEIGHT;
    michal = 7;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    golfie = michal.jsx;
    var _closure1_slot10 = golfie;
    michal = michal.jsxs;
    var _closure1_slot11 = michal;
    offset = 8;
    michal = oscard[offset];
    option = report.bind(entity)(michal);
    golfie = option.createStyles;
    michal = {};
    verify = {};
    verify['height'] = sizing;
    verify['paddingVertical'] = romeon;
    romeon = 9;
    sizing = oscard[romeon];
    sizing = foxtra.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = sizing;
    michal['row'] = verify;
    sizing = 10;
    verify = oscard[sizing];
    echoed = foxtra.bind(entity)(verify);
    result = kiloes.PRIMARY_SEMIBOLD;
    verify = oscard[romeon];
    verify = foxtra.bind(entity)(verify);
    verify = verify.colors;
    output = verify.INTERACTIVE_ACTIVE;
    verify = 16;
    verify = echoed.bind(entity)(result, output, verify);
    michal['leading'] = verify;
    verify = {};
    result = 14;
    verify['fontSize'] = result;
    output = oscard[romeon];
    output = foxtra.bind(entity)(output);
    output = output.colors;
    output = output.TEXT_MUTED;
    verify['color'] = output;
    michal['trailing'] = verify;
    verify = {'width': 32, 'height': 32};
    michal['emoji'] = verify;
    verify = {};
    output = 'contain';
    verify['resizeMode'] = output;
    michal['emojiImage'] = verify;
    verify = {'lineHeight': 32, 'fontSize': 27, 'textAlign': 'center'};
    michal['emojiText'] = verify;
    verify = {};
    verify['marginLeft'] = offset;
    michal['emojiName'] = verify;
    verify = {};
    sizing = oscard[sizing];
    output = foxtra.bind(entity)(sizing);
    sizing = kiloes.PRIMARY_SEMIBOLD;
    kiloes = oscard[romeon];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.TEXT_NORMAL;
    source = output.bind(entity)(sizing, kiloes, result);
    ctrled = verify;
    kiloes = copyDataProperties(ctrled, source);
    michal['nickname'] = verify;
    verify = {};
    kiloes = oscard[romeon];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_MOBILE_SECONDARY;
    verify['backgroundColor'] = kiloes;
    michal['status'] = verify;
    verify = {'paddingHorizontal': 8, 'flex': 1, 'flexDirection': 'row', 'height': 56, 'alignItems': 'center'};
    backup = backup.hairlineWidth;
    verify['borderRightWidth'] = backup;
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    verify['borderRightColor'] = romeon;
    michal['horizontalAutocompleteOption'] = verify;
    verify = {};
    verify['marginRight'] = yankee;
    michal['roleIcon'] = verify;
    verify = {};
    verify['marginLeft'] = offset;
    michal['channelName'] = verify;
    michal = golfie.bind(option)(michal);
    var _closure1_slot12 = michal;
    michal = {};
    golfie = function(argFoo) { // Original name: User
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            kiloes = entity.user;
            foxtra = entity.nick;
            offset = entity.status;
            verify = entity.guildId;
            report = entity.onPress;
            entity = _closure1_slot12;
            tangon = undefined;
            backup = entity.bind(tangon)();
            zuuluu = _closure1_slot11;
            michal = _closure1_slot13;
            entity = {};
            entity['onPress'] = report;
            golfie = _closure1_slot10;
            oscard = _closure1_slot1;
            option = _closure1_slot2;
            yankee = 13;
            report = option[yankee];
            oscard = oscard.bind(tangon)(report);
            report = {};
            report['status'] = offset;
            offset = backup.status;
            report['statusStyle'] = offset;
            report['user'] = kiloes;
            offset = _closure1_slot0;
            yankee = option[yankee];
            yankee = offset.bind(tangon)(yankee);
            yankee = yankee.AvatarSizes;
            yankee = yankee.SMALL;
            report['size'] = yankee;
            report['guildId'] = verify;
            verify = true;
            report['animate'] = verify;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            golfie = _closure1_slot5;
            oscard = {};
            verify = {'marginLeft': 8, 'height': 56, 'flex': 1, 'flexDirection': 'column', 'justifyContent': 'center'};
            oscard['style'] = verify;
            yankee = _closure1_slot10;
            verify = 14;
            option = option[verify];
            option = offset.bind(tangon)(option);
            offset = option.Text;
            option = {};
            sizing = backup.nickname;
            backup = new Array(1);
            backup[0] = sizing;
            option['style'] = backup;
            backup = 'text-sm/semibold';
            option['variant'] = backup;
            backup = null;
            if(!(backup == foxtra)) { _fun00002_ip = 264; continue _fun00001 }
 233:
            sizing = _closure1_slot1;
            output = _closure1_slot2;
            backup = 15;
            backup = output[backup];
            sizing = sizing.bind(tangon)(backup);
            backup = sizing.getName;
            foxtra = backup.bind(sizing)(kiloes);
 264:
            option['children'] = foxtra;
            offset = yankee.bind(tangon)(offset, option);
            option = new Array(2);
            option[0] = offset;
            yankee = _closure1_slot11;
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            verify = backup[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-xs/medium', 'color': 'text-muted'};
            foxtra = _closure1_slot1;
            romeon = 15;
            romeon = backup[romeon];
            backup = foxtra.bind(tangon)(romeon);
            foxtra = backup.getUserTag;
            romeon = {};
            sizing = 'never';
            romeon['decoration'] = sizing;
            foxtra = foxtra.bind(backup)(kiloes, romeon);
            romeon = ['@'];
            romeon[1] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal['User'] = golfie;
    golfie = function(argFoo) { // Original name: Role
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            report = michal.onPress;
            zuuluu = michal.guildId;
            var _closure2_slot0 = zuuluu;
            yankee = michal.name;
            zuuluu = michal.id;
            var _closure2_slot1 = zuuluu;
            foxtra = michal.colorString;
            michal = _closure1_slot12;
            tangon = undefined;
            verify = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            golfie = _closure1_slot2;
            michal = 16;
            michal = golfie[michal];
            golfie = zuuluu.bind(tangon)(michal);
            zuuluu = golfie.useStateFromStores;
            option = _closure1_slot6;
            michal = new Array(1);
            michal[0] = option;
            entity = function() {
                tangon = _closure1_slot6;
                zuuluu = tangon.getRole;
                michal = _closure2_slot0;
                entity = _closure2_slot1;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            golfie = zuuluu.bind(golfie)(michal, entity);
            offset = null;
            entity = offset != golfie;
            output = null;
            if(!entity) { _fun00004_ip = 148; continue _fun00003 }
 113:
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 17;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.getRoleIconData;
            entity = 30;
            output = michal.bind(zuuluu)(golfie, entity);
 148:
            zuuluu = _closure1_slot11;
            michal = _closure1_slot13;
            entity = {};
            entity['onPress'] = report;
            report = offset != output;
            golfie = null;
            if(!report) { _fun00004_ip = 290; continue _fun00003 }
 171:
            romeon = _closure1_slot10;
            option = _closure1_slot5;
            report = {};
            backup = verify.roleIcon;
            report['style'] = backup;
            sizing = _closure1_slot10;
            kiloes = _closure1_slot1;
            result = _closure1_slot2;
            backup = 18;
            backup = result[backup];
            kiloes = kiloes.bind(tangon)(backup);
            backup = {};
            backup['name'] = yankee;
            result = output.customIconSrc;
            echoed = offset != result;
            result = undefined;
            if(!echoed) { _fun00004_ip = 252; continue _fun00003 }
 236:
            echoed = {};
            update = output.customIconSrc;
            echoed['uri'] = update;
            result = echoed;
 252:
            backup['source'] = result;
            output = output.unicodeEmoji;
            backup['unicodeEmoji'] = output;
            output = 24;
            backup['size'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            report['children'] = backup;
            golfie = romeon.bind(tangon)(option, report);
 290:
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot10;
            golfie = _closure1_slot0;
            romeon = _closure1_slot2;
            oscard = 19;
            oscard = romeon[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.LegacyText;
            oscard = {};
            romeon = verify.nickname;
            verify = new Array(2);
            verify[0] = romeon;
            romeon = offset != foxtra;
            offset = undefined;
            if(!romeon) { _fun00004_ip = 362; continue _fun00003 }
 353:
            romeon = {};
            romeon['color'] = foxtra;
            offset = romeon;
 362:
            verify[1] = offset;
            oscard['style'] = verify;
            verify = global;
            verify = verify.HermesInternal;
            offset = verify.concat;
            verify = '@';
            verify = offset.bind(verify)(yankee);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal['Role'] = golfie;
    golfie = function(argFoo) { // Original name: Channel
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            michal = argFoo;
            romeon = michal.channel;
            var _closure2_slot0 = romeon;
            report = michal.onPress;
            michal = _closure1_slot12;
            tangon = undefined;
            offset = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            golfie = _closure1_slot2;
            michal = 16;
            michal = golfie[michal];
            option = zuuluu.bind(tangon)(michal);
            golfie = option.useStateFromStores;
            michal = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = new Array(1);
            michal[0] = romeon;
            entity = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getGuild;
                tangon = _closure2_slot0;
                entity = tangon.getGuildId;
                entity = entity.bind(tangon)();
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            zuuluu = golfie.bind(option)(zuuluu, entity, michal);
            michal = romeon.type;
            entity = _closure1_slot9;
            entity = entity.GUILD_CATEGORY;
            if(!(michal !== entity)) { _fun00006_ip = 144; continue _fun00005 }
 110:
            michal = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 21;
            entity = golfie[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.getChannelIconWithGuild;
            golfie = entity.bind(michal)(romeon, zuuluu);
            _fun00006_ip = 164; continue _fun00005;
 144:
            michal = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 20;
            entity = zuuluu[entity];
            golfie = michal.bind(tangon)(entity);
 164:
            zuuluu = _closure1_slot10;
            michal = _closure1_slot1;
            yankee = _closure1_slot2;
            entity = 22;
            entity = yankee[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            entity['source'] = golfie;
            option = zuuluu.bind(tangon)(michal, entity);
            golfie = _closure1_slot0;
            entity = 23;
            entity = yankee[entity];
            verify = golfie.bind(tangon)(entity);
            zuuluu = verify.computeChannelName;
            michal = _closure1_slot8;
            entity = _closure1_slot7;
            verify = zuuluu.bind(verify)(romeon, michal, entity);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot13;
            entity = {};
            entity['onPress'] = report;
            report = new Array(2);
            report[0] = option;
            option = _closure1_slot10;
            oscard = 14;
            oscard = yankee[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {};
            offset = offset.channelName;
            oscard['style'] = offset;
            offset = 'text-sm/semibold';
            oscard['variant'] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal['Channel'] = golfie;
    tangon = function(argFoo) { // Original name: Emoji
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            yankee = entity.name;
            option = entity.url;
            golfie = entity.surrogates;
            report = entity.onPress;
            entity = _closure1_slot12;
            tangon = undefined;
            verify = entity.bind(tangon)();
            entity = '';
            if(!(entity === option)) { _fun00008_ip = 123; continue _fun00007 }
 44:
            zuuluu = _closure1_slot10;
            michal = _closure1_slot0;
            offset = _closure1_slot2;
            entity = 19;
            entity = offset[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.LegacyText;
            entity = {};
            romeon = verify.emoji;
            offset = new Array(2);
            offset[0] = romeon;
            romeon = verify.emojiText;
            offset[1] = romeon;
            entity['style'] = offset;
            offset = false;
            entity['allowFontScaling'] = offset;
            entity['children'] = golfie;
            offset = zuuluu.bind(tangon)(michal, entity);
            _fun00008_ip = 194; continue _fun00007;
 123:
            zuuluu = _closure1_slot10;
            michal = _closure1_slot1;
            golfie = _closure1_slot2;
            entity = 24;
            entity = golfie[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            romeon = verify.emoji;
            golfie = new Array(2);
            golfie[0] = romeon;
            romeon = verify.emojiImage;
            golfie[1] = romeon;
            entity['style'] = golfie;
            golfie = {};
            golfie['uri'] = option;
            entity['source'] = golfie;
            offset = zuuluu.bind(tangon)(michal, entity);
 194:
            zuuluu = _closure1_slot11;
            michal = _closure1_slot13;
            entity = {};
            entity['onPress'] = report;
            option = _closure1_slot10;
            golfie = _closure1_slot5;
            report = {};
            report['children'] = offset;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot10;
            golfie = _closure1_slot0;
            offset = _closure1_slot2;
            oscard = 14;
            oscard = offset[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {};
            verify = verify.emojiName;
            oscard['style'] = verify;
            verify = 'text-sm/semibold';
            oscard['variant'] = verify;
            verify = global;
            verify = verify.HermesInternal;
            offset = verify.concat;
            verify = ':';
            verify = offset.bind(verify)(yankee, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal['Emoji'] = tangon;
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/forums/native/composer/horizontal_autocomplete/HorizontalAutocomplete.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();