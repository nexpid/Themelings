// app/modules/settings/native/MuteSettingsActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    romeo = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    mike = function(argFoo) { // Original name: MuteSettingsHint
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            zulu = entity.isMuted;
            mike = entity.isGuildMuted;
            verify = entity.guildMessageNotifications;
            golf = entity.showVoiceActivityNotificationOptions;
            tango = undefined;
            if(!(golf === tango)) { _fun00002_ip = 37; continue _fun00001 }
 35:
            golf = false;
 37:
            var _closure2_slot0 = tango;
            report = _closure1_slot13;
            report = report.bind(tango)();
            _closure2_slot0 = report;
            if(zulu) { _fun00002_ip = 585; continue _fun00001 }
 62:
            if(mike) { _fun00002_ip = 456; continue _fun00001 }
 68:
            mike = _closure1_slot9;
            mike = mike.NO_MESSAGES;
            if(!(verify !== mike)) { _fun00002_ip = 327; continue _fun00001 }
 85:
            mike = _closure1_slot9;
            mike = mike.ALL_MESSAGES;
            if(!(verify !== mike)) { _fun00002_ip = 117; continue _fun00001 }
 99:
            mike = _closure1_slot9;
            mike = mike.ONLY_MENTIONS;
            if(!(verify !== mike)) { _fun00002_ip = 117; continue _fun00001 }
 113:
            mike = null;
            return mike;
 117:
            options = _closure1_slot0;
            mike = _closure1_slot2;
            foxtrot = 11;
            zulu = mike[foxtrot];
            zulu = options.bind(tango)(zulu);
            oscar = zulu.intl;
            zulu = oscar.string;
            mike = mike[foxtrot];
            mike = options.bind(tango)(mike);
            mike = mike.t;
            if(golf) { _fun00002_ip = 179; continue _fun00001 }
 164:
            golf = mike.mUbulZ;
            golf = zulu.bind(oscar)(golf);
            _fun00002_ip = 192; continue _fun00001;
 179:
            mike = mike.l3yoAQ;
            golf = zulu.bind(oscar)(mike);
 192:
            oscar = _closure1_slot10;
            zulu = _closure1_slot0;
            options = _closure1_slot2;
            mike = 10;
            mike = options[mike];
            mike = zulu.bind(tango)(mike);
            zulu = mike.Text;
            mike = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            options = report.formHintText;
            mike['style'] = options;
            options = _closure1_slot9;
            options = options.ALL_MESSAGES;
            if(!(verify !== options)) { _fun00002_ip = 315; continue _fun00001 }
 261:
            romeo = _closure1_slot0;
            options = _closure1_slot2;
            verify = options[foxtrot];
            verify = romeo.bind(tango)(verify);
            offset = verify.intl;
            verify = offset.string;
            options = options[foxtrot];
            options = romeo.bind(tango)(options);
            options = options.t;
            options = options.GGAdHR;
            golf = verify.bind(offset)(options);
 315:
            mike['children'] = golf;
            mike = oscar.bind(tango)(zulu, mike);
            return mike;
 327:
            oscar = _closure1_slot10;
            options = _closure1_slot0;
            romeo = _closure1_slot2;
            mike = 10;
            mike = romeo[mike];
            mike = options.bind(tango)(mike);
            zulu = mike.Text;
            mike = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            golf = report.formHintText;
            mike['style'] = golf;
            golf = 11;
            verify = romeo[golf];
            verify = options.bind(tango)(verify);
            offset = verify.intl;
            verify = offset.format;
            golf = romeo[golf];
            golf = options.bind(tango)(golf);
            golf = golf.t;
            options = golf.nRwUIC;
            golf = {};
            romeo = function(argFoo) { // Original name: notificationHook
                report = _closure1_slot10;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 12;
                entity = zulu[entity];
                tango = undefined;
                entity = mike.bind(tango)(entity);
                zulu = entity.LegacyText;
                mike = {};
                entity = _closure2_slot0;
                entity = entity.orangeText;
                mike['style'] = entity;
                entity = argFoo;
                mike['children'] = entity;
                entity = 'notif';
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            golf['notificationHook'] = romeo;
            golf = verify.bind(offset)(options, golf);
            mike['children'] = golf;
            mike = oscar.bind(tango)(zulu, mike);
            return mike;
 456:
            oscar = _closure1_slot10;
            options = _closure1_slot0;
            romeo = _closure1_slot2;
            mike = 10;
            mike = romeo[mike];
            mike = options.bind(tango)(mike);
            zulu = mike.Text;
            mike = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            golf = report.formHintText;
            mike['style'] = golf;
            golf = 11;
            verify = romeo[golf];
            verify = options.bind(tango)(verify);
            offset = verify.intl;
            verify = offset.format;
            golf = romeo[golf];
            golf = options.bind(tango)(golf);
            golf = golf.t;
            options = golf.O34r19;
            golf = {};
            yankee = function(argFoo) { // Original name: mutedHook
                report = _closure1_slot10;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 12;
                entity = zulu[entity];
                tango = undefined;
                entity = mike.bind(tango)(entity);
                zulu = entity.LegacyText;
                mike = {};
                entity = _closure2_slot0;
                entity = entity.redText;
                mike['style'] = entity;
                entity = argFoo;
                mike['children'] = entity;
                entity = 'muted';
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            golf['mutedHook'] = yankee;
            golf = verify.bind(offset)(options, golf);
            mike['children'] = golf;
            mike = oscar.bind(tango)(zulu, mike);
            return mike;
 585:
            zulu = _closure1_slot10;
            options = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 10;
            entity = verify[entity];
            entity = options.bind(tango)(entity);
            mike = entity.Text;
            entity = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            report = report.formHintText;
            entity['style'] = report;
            report = 11;
            oscar = verify[report];
            oscar = options.bind(tango)(oscar);
            golf = oscar.intl;
            oscar = golf.string;
            report = verify[report];
            report = options.bind(tango)(report);
            report = report.t;
            report = report.t0mEt7;
            report = oscar.bind(golf)(report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot14 = mike;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, report);
    entity = 0;
    options = golf[entity];
    report = argCorge;
    entity = undefined;
    report = report.bind(entity)(options);
    var _closure1_slot3 = report;
    report = 1;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.View;
    var _closure1_slot4 = report;
    report = 2;
    report = golf[report];
    report = romeo.bind(entity)(report);
    var _closure1_slot5 = report;
    report = 3;
    report = golf[report];
    report = romeo.bind(entity)(report);
    var _closure1_slot6 = report;
    report = 4;
    report = golf[report];
    report = romeo.bind(entity)(report);
    var _closure1_slot7 = report;
    report = 5;
    report = golf[report];
    report = romeo.bind(entity)(report);
    var _closure1_slot8 = report;
    report = 6;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.UserNotificationSettings;
    var _closure1_slot9 = report;
    report = 7;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot10 = options;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsxs;
    var _closure1_slot11 = options;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.Fragment;
    var _closure1_slot12 = report;
    report = 8;
    report = golf[report];
    verify = oscar.bind(entity)(report);
    options = verify.createStyles;
    report = {};
    offset = {};
    yankee = 9;
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = foxtrot;
    report['option'] = offset;
    offset = {};
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_MODIFIER_ACTIVE;
    offset['backgroundColor'] = foxtrot;
    report['optionActive'] = offset;
    offset = {};
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_MODIFIER_ACCENT;
    offset['backgroundColor'] = foxtrot;
    report['divider'] = offset;
    offset = {};
    foxtrot = 18;
    offset['lineHeight'] = foxtrot;
    report['formHintText'] = offset;
    offset = {};
    foxtrot = 16;
    offset['paddingHorizontal'] = foxtrot;
    report['hintContainer'] = offset;
    offset = {};
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.unsafe_rawColors;
    foxtrot = foxtrot.RED_400;
    offset['color'] = foxtrot;
    report['redText'] = offset;
    offset = {};
    yankee = golf[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.unsafe_rawColors;
    yankee = yankee.YELLOW_300;
    offset['color'] = yankee;
    report['orangeText'] = offset;
    offset = {'display': 'flex', 'flex': 0, 'flexDirection': 'row'};
    report['valueArrow'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot13 = report;
    report = 24;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/settings/native/MuteSettingsActionSheet.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: MuteSettings
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            zulu = argFoo;
            report = zulu.guildId;
            var _closure2_slot0 = report;
            mike = zulu.channelId;
            var _closure2_slot1 = mike;
            options = zulu.onOptionPress;
            var _closure2_slot2 = options;
            yankee = zulu.canGoFullSettings;
            tango = undefined;
            var _closure2_slot8 = tango;
            zulu = _closure1_slot13;
            source = zulu.bind(tango)();
            var _closure2_slot3 = source;
            oscar = _closure1_slot6;
            zulu = oscar.getGuild;
            zulu = zulu.bind(oscar)(report);
            var _closure2_slot4 = zulu;
            golf = _closure1_slot5;
            oscar = golf.getChannel;
            update = oscar.bind(golf)(mike);
            var _closure2_slot5 = update;
            golf = _closure1_slot0;
            verify = _closure1_slot2;
            oscar = 13;
            oscar = verify[oscar];
            golf = golf.bind(tango)(oscar);
            oscar = golf.useVoiceActivityNotificationSettingsExperiment;
            context = oscar.bind(golf)(update);
            golf = _closure1_slot3;
            offset = golf.useMemo;
            verify = new Array(1);
            verify[0] = mike;
            oscar = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 14;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.getMuteSettings;
                entity = _closure2_slot1;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            verify = offset.bind(golf)(oscar, verify);
            echo = verify.muteConfig;
            sizing = verify.muted;
            oscar = verify.messageNotifications;
            var _closure2_slot6 = oscar;
            output = verify.guildMuted;
            target = verify.guildMessageNotifications;
            offset = golf.useCallback;
            verify = new Array(3);
            verify[0] = mike;
            verify[1] = report;
            verify[2] = options;
            options = function(argFoo) {
                report = _closure1_slot1;
                tango = _closure1_slot2;
                entity = 15;
                zulu = tango[entity];
                entity = undefined;
                report = report.bind(entity)(zulu);
                zulu = report.hideActionSheet;
                zulu = zulu.bind(report)();
                zulu = _closure1_slot0;
                mike = 14;
                mike = tango[mike];
                tango = zulu.bind(entity)(mike);
                zulu = tango.handleMuteSettingPress;
                mike = {};
                oscar = _closure2_slot1;
                mike['channelId'] = oscar;
                oscar = _closure2_slot0;
                mike['guildId'] = oscar;
                oscar = argFoo;
                mike['muteDurationSeconds'] = oscar;
                report = _closure2_slot2;
                mike['onOptionPress'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            options = offset.bind(golf)(options, verify);
            var _closure2_slot7 = options;
            verify = golf.useCallback;
            options = new Array(2);
            options[0] = mike;
            options[1] = report;
            report = function() {
                report = _closure1_slot1;
                tango = _closure1_slot2;
                entity = 15;
                zulu = tango[entity];
                entity = undefined;
                report = report.bind(entity)(zulu);
                zulu = report.hideActionSheet;
                zulu = zulu.bind(report)();
                zulu = _closure1_slot0;
                mike = 14;
                mike = tango[mike];
                report = zulu.bind(entity)(mike);
                tango = report.handleUnmutePress;
                zulu = _closure2_slot1;
                mike = _closure2_slot0;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            papa = verify.bind(golf)(report, options);
            verify = golf.useMemo;
            options = new Array(2);
            options[0] = update;
            options[1] = zulu;
            report = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 14;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.getMuteSettingLabel;
                mike = _closure2_slot5;
                entity = _closure2_slot4;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            kilo = verify.bind(golf)(report, options);
            options = golf.useMemo;
            report = new Array(2);
            report[0] = update;
            report[1] = zulu;
            zulu = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 14;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.getMuteSettingSublabel;
                mike = _closure2_slot5;
                entity = _closure2_slot4;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            backup = options.bind(golf)(zulu, report);
            report = golf.useCallback;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 14;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.handleNotificationSettingsPress;
                mike = _closure2_slot1;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            result = report.bind(golf)(mike, zulu);
            verify = null;
            if(!(verify != update)) { _fun00004_ip = 356; continue _fun00003 }
 353:
            if(sizing) { _fun00004_ip = 446; continue _fun00003 }
 356:
            zulu = _closure1_slot0;
            golf = _closure1_slot2;
            mike = 14;
            mike = golf[mike];
            report = zulu.bind(tango)(mike);
            mike = report.getMuteOptions;
            offset = mike.bind(report)();
            _closure2_slot8 = offset;
            report = _closure1_slot10;
            mike = 16;
            mike = golf[mike];
            mike = zulu.bind(tango)(mike);
            zulu = mike.FormSection;
            mike = {};
            options = offset.map;
            golf = function(argFoo, argBar) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = argFoo;
                    romeo = entity.label;
                    entity = entity.duration;
                    var _closure3_slot0 = entity;
                    tango = _closure1_slot11;
                    zulu = _closure1_slot12;
                    mike = {};
                    options = _closure1_slot10;
                    oscar = _closure1_slot0;
                    entity = _closure1_slot2;
                    yankee = 16;
                    report = entity[yankee];
                    entity = undefined;
                    report = oscar.bind(entity)(report);
                    oscar = report.FormRow;
                    report = {};
                    foxtrot = _closure2_slot3;
                    foxtrot = foxtrot.option;
                    report['DEPRECATED_style'] = foxtrot;
                    report['label'] = romeo;
                    verify = function() { // Original name: onPress
                        zulu = _closure2_slot7;
                        mike = _closure3_slot0;
                        entity = undefined;
                        entity = zulu.bind(entity)(mike);
                        return entity;
                    };
                    report['onPress'] = verify;
                    oscar = options.bind(entity)(oscar, report);
                    report = new Array(2);
                    report[0] = oscar;
                    oscar = _closure2_slot8;
                    options = oscar.length;
                    oscar = 1;
                    options = options - oscar;
                    oscar = argBar;
                    oscar = oscar !== options;
                    if(!oscar) { _fun00006_ip = 188; continue _fun00005 }
 139:
                    verify = _closure1_slot10;
                    options = _closure1_slot0;
                    golf = _closure1_slot2;
                    golf = golf[yankee];
                    golf = options.bind(entity)(golf);
                    options = golf.FormDivider;
                    golf = {};
                    offset = _closure2_slot3;
                    offset = offset.divider;
                    golf['style'] = offset;
                    oscar = verify.bind(entity)(options, golf);
 188:
                    report[1] = oscar;
                    mike['children'] = report;
                    entity = tango.bind(entity)(zulu, mike);
                    return entity;
                }
            };
            golf = options.bind(offset)(golf);
            mike['children'] = golf;
            offset = report.bind(tango)(zulu, mike);
            _fun00004_ip = 802; continue _fun00003;
 446:
            report = _closure1_slot11;
            mike = _closure1_slot3;
            zulu = mike.Fragment;
            mike = {};
            control = _closure1_slot10;
            quebec = _closure1_slot0;
            options = _closure1_slot2;
            romeo = 16;
            golf = options[romeo];
            golf = quebec.bind(tango)(golf);
            foxtrot = golf.FormSection;
            golf = {};
            record = _closure1_slot10;
            romeo = options[romeo];
            romeo = quebec.bind(tango)(romeo);
            config = romeo.FormRow;
            vacuum = {};
            lima = _closure1_slot10;
            romeo = _closure1_slot1;
            status = 17;
            status = options[status];
            sierra = romeo.bind(tango)(status);
            status = {};
            variable38 = true;
            status['disableColor'] = variable38;
            whiskey = 18;
            whiskey = options[whiskey];
            whiskey = romeo.bind(tango)(whiskey);
            status['source'] = whiskey;
            status = lima.bind(tango)(sierra, status);
            vacuum['leading'] = status;
            status = source.option;
            vacuum['DEPRECATED_style'] = status;
            status = 11;
            sierra = options[status];
            sierra = quebec.bind(tango)(sierra);
            whiskey = sierra.intl;
            lima = whiskey.format;
            status = options[status];
            status = quebec.bind(tango)(status);
            status = status.t;
            sierra = status.eC+9rq;
            status = {};
            equality = 19;
            equality = options[equality];
            variable37 = quebec.bind(tango)(equality);
            variable36 = variable37.computeChannelName;
            variable41 = _closure1_slot8;
            variable40 = _closure1_slot7;
            variable43 = variable37;
            variable42 = update;
            variable39 = true;
            equality = variable43[variable36](variable42, variable41, variable40, variable39, variable38);
            status['name'] = equality;
            status = lima.bind(whiskey)(sierra, status);
            vacuum['label'] = status;
            vacuum['onPress'] = papa;
            vacuum = record.bind(tango)(config, vacuum);
            golf['children'] = vacuum;
            foxtrot = control.bind(tango)(foxtrot, golf);
            golf = new Array(2);
            golf[0] = foxtrot;
            foxtrot = _closure1_slot10;
            vacuum = 20;
            options = options[vacuum];
            romeo = romeo.bind(tango)(options);
            options = {};
            options['muteConfig'] = echo;
            echo = update.isPrivate;
            echo = echo.bind(update)();
            control = _closure1_slot0;
            update = _closure1_slot2;
            update = update[vacuum];
            update = control.bind(tango)(update);
            update = update.MuteSettingType;
            if(echo) { _fun00004_ip = 772; continue _fun00003 }
 764:
            echo = update.CHANNEL;
            _fun00004_ip = 778; continue _fun00003;
 772:
            echo = update.DM;
 778:
            options['type'] = echo;
            options = foxtrot.bind(tango)(romeo, options);
            golf[1] = options;
            mike['children'] = golf;
            offset = report.bind(tango)(zulu, mike);
 802:
            report = _closure1_slot3;
            zulu = report.useMemo;
            mike = new Array(1);
            mike[0] = oscar;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 14;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.getMessageNotificationsText;
                entity = _closure2_slot6;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            papa = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot10;
            romeo = _closure1_slot0;
            echo = _closure1_slot2;
            entity = 21;
            entity = echo[entity];
            entity = romeo.bind(tango)(entity);
            mike = entity.RedesignCompat;
            entity = {};
            golf = _closure1_slot11;
            report = 22;
            report = echo[report];
            report = romeo.bind(tango)(report);
            oscar = report.ActionSheet;
            report = {};
            foxtrot = _closure1_slot10;
            options = 23;
            options = echo[options];
            options = romeo.bind(tango)(options);
            romeo = options.BottomSheetTitleHeader;
            options = {};
            options['title'] = kilo;
            options['subtitle'] = backup;
            romeo = foxtrot.bind(tango)(romeo, options);
            options = new Array(3);
            options[0] = romeo;
            options[1] = offset;
            offset = true;
            verify = null;
            if(!(offset === yankee)) { _fun00004_ip = 1288; continue _fun00003 }
 950:
            romeo = _closure1_slot10;
            vacuum = _closure1_slot0;
            config = _closure1_slot2;
            control = 16;
            offset = config[control];
            offset = vacuum.bind(tango)(offset);
            yankee = offset.FormSection;
            offset = {};
            kilo = _closure1_slot10;
            foxtrot = config[control];
            foxtrot = vacuum.bind(tango)(foxtrot);
            backup = foxtrot.FormHint;
            foxtrot = {};
            record = _closure1_slot10;
            update = _closure1_slot14;
            echo = {};
            echo['isMuted'] = sizing;
            echo['isGuildMuted'] = output;
            echo['guildMessageNotifications'] = target;
            echo['showVoiceActivityNotificationOptions'] = context;
            echo = record.bind(tango)(update, echo);
            foxtrot['children'] = echo;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            offset['hint'] = foxtrot;
            kilo = _closure1_slot10;
            foxtrot = config[control];
            foxtrot = vacuum.bind(tango)(foxtrot);
            backup = foxtrot.FormRow;
            foxtrot = {};
            echo = source.option;
            foxtrot['DEPRECATED_style'] = echo;
            echo = 11;
            update = config[echo];
            update = vacuum.bind(tango)(update);
            record = update.intl;
            update = record.string;
            echo = config[echo];
            echo = vacuum.bind(tango)(echo);
            echo = echo.t;
            echo = echo.h850Sk;
            echo = update.bind(record)(echo);
            foxtrot['label'] = echo;
            foxtrot['onPress'] = result;
            update = _closure1_slot11;
            echo = _closure1_slot4;
            result = {};
            source = source.valueArrow;
            result['style'] = source;
            context = _closure1_slot10;
            source = 10;
            source = config[source];
            source = vacuum.bind(tango)(source);
            record = source.Text;
            source = {'variant': 'text-md/medium', 'color': 'text-muted'};
            source['children'] = papa;
            record = context.bind(tango)(record, source);
            source = new Array(2);
            source[0] = record;
            sequence = _closure1_slot10;
            control = config[control];
            control = vacuum.bind(tango)(control);
            control = control.FormRow;
            vacuum = control.Arrow;
            control = {};
            control = sequence.bind(tango)(vacuum, control);
            source[1] = control;
            result['children'] = source;
            result = update.bind(tango)(echo, result);
            foxtrot['trailing'] = result;
            if(sizing) { _fun00004_ip = 1268; continue _fun00003 }
 1265:
            sizing = output;
 1268:
            foxtrot['disabled'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            offset['children'] = foxtrot;
            verify = romeo.bind(tango)(yankee, offset);
 1288:
            options[2] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['MuteSettingsHint'] = mike;
    return entity;
})();