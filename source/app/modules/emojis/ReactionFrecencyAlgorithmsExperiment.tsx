// app/modules/emojis/ReactionFrecencyAlgorithmsExperiment.tsx
export default (function(argFoo, argBar, _, __, ___, argFred, argPlugh) {
    golf = argBar;
    zulu = argFred;
    options = argPlugh;
    entity = global;
    oscar = entity.Object;
    report = oscar.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscar)(zulu, entity, tango);
    tango = 0;
    report = options[tango];
    entity = undefined;
    offset = golf.bind(entity)(report);
    verify = offset.createExperiment;
    report = {'kind': 'user', 'id': '2024-08_reaction_frecency_algorithms', 'label': 'Reaction Frecency Algorithms'};
    oscar = {'frecencyAlgorithm': 'original', 'canShowReactionsOnMessageHover': false};
    report['defaultConfig'] = oscar;
    romeo = {'id': 1, 'label': 'Stable algorithm with no hover bar'};
    oscar = 1;
    yankee = {'frecencyAlgorithm': 'safe', 'canShowReactionsOnMessageHover': false};
    romeo['config'] = yankee;
    yankee = new Array(4);
    yankee[0] = romeo;
    romeo = {'id': 2, 'label': 'Volatile algorithm with no hover bar'};
    foxtrot = {'frecencyAlgorithm': 'day_recency', 'canShowReactionsOnMessageHover': false};
    romeo['config'] = foxtrot;
    yankee[1] = romeo;
    romeo = {'id': 3, 'label': 'Stable algorithm with hover bar'};
    foxtrot = {'frecencyAlgorithm': 'safe', 'canShowReactionsOnMessageHover': true};
    romeo['config'] = foxtrot;
    yankee[2] = romeo;
    romeo = {'id': 4, 'label': 'Volatile algorithm with hover bar'};
    foxtrot = {'frecencyAlgorithm': 'day_recency', 'canShowReactionsOnMessageHover': true};
    romeo['config'] = foxtrot;
    yankee[3] = romeo;
    report['treatments'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot0 = report;
    tango = options[tango];
    offset = golf.bind(entity)(tango);
    verify = offset.createExperiment;
    tango = {'kind': 'user', 'id': '2024-10_retrigger_reaction_frecency_algorithms', 'label': '(Retrigger) Reaction Frecency Algorithms', 'defaultConfig': null};
    yankee = new Array(0);
    tango['treatments'] = yankee;
    tango = verify.bind(offset)(tango);
    oscar = options[oscar];
    options = golf.bind(entity)(oscar);
    golf = options.fileFinishedImporting;
    oscar = 'modules/emojis/ReactionFrecencyAlgorithmsExperiment.tsx';
    oscar = golf.bind(options)(oscar);
    zulu['default'] = report;
    zulu['RetriggerReactionFrecencyAlgorithmsExperiment'] = tango;
    tango = function(argFoo) { // Original name: useCanUseReactionFrecency
        mike = argFoo;
        entity = mike.location;
        report = mike.autoTrackExposure;
        tango = _closure1_slot0;
        zulu = tango.useExperiment;
        mike = {};
        mike['location'] = entity;
        entity = {};
        entity['autoTrackExposure'] = report;
        entity = zulu.bind(tango)(mike, entity);
        mike = entity.frecencyAlgorithm;
        entity = 'original';
        entity = entity !== mike;
        return entity;
    };
    zulu['useCanUseReactionFrecency'] = tango;
    mike = function(argFoo) { // Original name: getCanUseReactionFrecency
        mike = argFoo;
        entity = mike.location;
        report = mike.autoTrackExposure;
        tango = _closure1_slot0;
        zulu = tango.getCurrentConfig;
        mike = {};
        mike['location'] = entity;
        entity = {};
        entity['autoTrackExposure'] = report;
        entity = zulu.bind(tango)(mike, entity);
        mike = entity.frecencyAlgorithm;
        entity = 'original';
        entity = entity !== mike;
        return entity;
    };
    zulu['getCanUseReactionFrecency'] = mike;
    return entity;
})();