// app/modules/saved_messages/message_reminders/native/MessageRemindersCustomDurationModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    yankee = 1;
    tangon = oscard[yankee];
    golfie = golfie.bind(entity)(tangon);
    var _closure1_slot5 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 3;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot7 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['flex'] = yankee;
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_SECONDARY;
    offset['backgroundColor'] = foxtra;
    tangon['modal'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    offset['paddingHorizontal'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['paddingTop'] = foxtra;
    tangon['headerContainer'] = offset;
    offset = {'paddingHorizontal': 16, 'paddingTop': 24, 'gap': 24};
    tangon['container'] = offset;
    offset = {};
    foxtra = 8;
    offset['marginBottom'] = foxtra;
    tangon['formHeader'] = offset;
    offset = {'paddingHorizontal': 16, 'paddingVertical': 12};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    offset['borderRadius'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.INPUT_BACKGROUND;
    offset['backgroundColor'] = yankee;
    tangon['inputContainer'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot9 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeon = entity.onClose;
            var _closure2_slot0 = romeon;
            entity = entity.createReminder;
            var _closure2_slot1 = entity;
            michal = _closure1_slot9;
            tangon = undefined;
            update = michal.bind(tangon)();
            oscard = _closure1_slot5;
            zuuluu = oscard.useState;
            michal = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot3;
                entity = 6;
                entity = michal[entity];
                michal = undefined;
                entity = zuuluu.bind(michal)(entity);
                entity = entity.bind(michal)();
                return entity;
            };
            report = zuuluu.bind(oscard)(michal);
            zuuluu = _closure1_slot4;
            michal = 2;
            report = zuuluu.bind(tangon)(report, michal);
            yankee = 0;
            zuuluu = report[yankee];
            var _closure2_slot2 = zuuluu;
            michal = 1;
            michal = report[michal];
            var _closure2_slot3 = michal;
            michal = function(argFoo) { // Original name: handleOpenDatePicker
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    golfie = argFoo;
                    tangon = _closure1_slot2;
                    michal = _closure1_slot3;
                    entity = 7;
                    michal = michal[entity];
                    entity = undefined;
                    tangon = tangon.bind(entity)(michal);
                    michal = tangon.dismissGlobalKeyboard;
                    michal = michal.bind(tangon)();
                    michal = 'date';
                    if(!(michal !== golfie)) { _fun00004_ip = 103; continue _fun00003 }
 46:
                    oscard = _closure1_slot0;
                    option = _closure1_slot3;
                    michal = 8;
                    tangon = option[michal];
                    tangon = oscard.bind(entity)(tangon);
                    report = tangon.intl;
                    tangon = report.string;
                    michal = option[michal];
                    michal = oscard.bind(entity)(michal);
                    michal = michal.t;
                    michal = michal.GOmEb2;
                    michal = tangon.bind(report)(michal);
                    _fun00004_ip = 158; continue _fun00003;
 103:
                    option = _closure1_slot0;
                    verify = _closure1_slot3;
                    tangon = 8;
                    report = verify[tangon];
                    report = option.bind(entity)(report);
                    oscard = report.intl;
                    report = oscard.string;
                    tangon = verify[tangon];
                    tangon = option.bind(entity)(tangon);
                    tangon = tangon.t;
                    tangon = tangon.pSZKvL;
                    michal = report.bind(oscard)(tangon);
 158:
                    verify = _closure1_slot1;
                    offset = _closure1_slot3;
                    tangon = 9;
                    tangon = offset[tangon];
                    oscard = verify.bind(entity)(tangon);
                    report = oscard.openLazy;
                    tangon = _closure1_slot0;
                    zuuluu = 11;
                    zuuluu = offset[zuuluu];
                    option = tangon.bind(entity)(zuuluu);
                    zuuluu = 10;
                    tangon = offset[zuuluu];
                    zuuluu = offset.paths;
                    tangon = option.bind(entity)(tangon, zuuluu);
                    zuuluu = {};
                    zuuluu['title'] = michal;
                    yankee = _closure2_slot2;
                    option = yankee.toDate;
                    option = option.bind(yankee)();
                    zuuluu['startDate'] = option;
                    option = 6;
                    option = offset[option];
                    option = verify.bind(entity)(option);
                    verify = option.bind(entity)();
                    option = verify.toDate;
                    option = option.bind(verify)();
                    zuuluu['minimumDate'] = option;
                    zuuluu['mode'] = golfie;
                    michal = _closure2_slot3;
                    zuuluu['onSubmit'] = michal;
                    michal = 'DatePicker';
                    michal = report.bind(oscard)(tangon, michal, zuuluu);
                    return entity;
                }
            };
            var _closure2_slot4 = michal;
            report = oscard.useCallback;
            michal = new Array(3);
            michal[0] = entity;
            michal[1] = zuuluu;
            michal[2] = romeon;
            entity = function() {
                tangon = _closure2_slot1;
                zuuluu = _closure2_slot2;
                entity = zuuluu.toDate;
                zuuluu = entity.bind(zuuluu)();
                entity = undefined;
                zuuluu = tangon.bind(entity)(zuuluu);
                michal = _closure2_slot0;
                michal = michal.bind(entity)();
                return entity;
            };
            entity = report.bind(oscard)(entity, michal);
            var _closure2_slot5 = entity;
            michal = zuuluu.format;
            entity = 'MMM Do YYYY';
            record = michal.bind(zuuluu)(entity);
            michal = zuuluu.format;
            entity = 'LT';
            output = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot8;
            michal = _closure1_slot6;
            entity = {};
            report = update.modal;
            entity['style'] = report;
            oscard = _closure1_slot7;
            report = {};
            golfie = update.headerContainer;
            report['style'] = golfie;
            foxtra = _closure1_slot0;
            backup = _closure1_slot3;
            golfie = 12;
            golfie = backup[golfie];
            golfie = foxtra.bind(tangon)(golfie);
            option = golfie.Header;
            golfie = {};
            ctrled = 8;
            verify = backup[ctrled];
            verify = foxtra.bind(tangon)(verify);
            sizing = verify.intl;
            kiloes = sizing.string;
            verify = backup[ctrled];
            verify = foxtra.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.VKsXpa;
            verify = kiloes.bind(sizing)(verify);
            golfie['title'] = verify;
            verify = function() { // Original name: headerTitle
                tangon = _closure1_slot7;
                option = _closure1_slot0;
                verify = _closure1_slot3;
                entity = 13;
                entity = verify[entity];
                zuuluu = undefined;
                entity = option.bind(zuuluu)(entity);
                michal = entity.GenericHeaderTitle;
                entity = {};
                report = 8;
                oscard = verify[report];
                oscard = option.bind(zuuluu)(oscard);
                golfie = oscard.intl;
                oscard = golfie.string;
                report = verify[report];
                report = option.bind(zuuluu)(report);
                report = report.t;
                report = report.VKsXpa;
                report = oscard.bind(golfie)(report);
                entity['title'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            golfie['headerTitle'] = verify;
            verify = 'center';
            golfie['headerTitleAlign'] = verify;
            verify = 14;
            verify = backup[verify];
            foxtra = foxtra.bind(tangon)(verify);
            verify = foxtra.isIOS;
            foxtra = verify.bind(foxtra)();
            verify = undefined;
            if(!foxtra) { _fun00002_ip = 337; continue _fun00001 }
 335:
            verify = 0;
 337:
            golfie['headerStatusBarHeight'] = verify;
            sizing = _closure1_slot0;
            echoed = _closure1_slot3;
            verify = 15;
            verify = echoed[verify];
            yankee = sizing.bind(tangon)(verify);
            verify = yankee.getHeaderCloseButton;
            verify = verify.bind(yankee)(romeon);
            golfie['headerLeft'] = verify;
            verify = function() { // Original name: headerRight
                tangon = _closure1_slot7;
                offset = _closure1_slot0;
                yankee = _closure1_slot3;
                entity = 16;
                entity = yankee[entity];
                zuuluu = undefined;
                entity = offset.bind(zuuluu)(entity);
                michal = entity.PressableOpacity;
                entity = {};
                report = 'button';
                entity['accessibilityRole'] = report;
                report = _closure2_slot5;
                entity['onPress'] = report;
                report = 17;
                report = yankee[report];
                report = offset.bind(zuuluu)(report);
                oscard = report.Text;
                report = {'variant': 'text-md/semibold', 'color': 'control-brand-foreground'};
                golfie = 8;
                option = yankee[golfie];
                option = offset.bind(zuuluu)(option);
                verify = option.intl;
                option = verify.string;
                golfie = yankee[golfie];
                golfie = offset.bind(zuuluu)(golfie);
                golfie = golfie.t;
                golfie = golfie.R3BPHx;
                golfie = option.bind(verify)(golfie);
                report['children'] = golfie;
                report = tangon.bind(zuuluu)(oscard, report);
                entity['children'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            golfie['headerRight'] = verify;
            golfie = oscard.bind(tangon)(option, golfie);
            report['children'] = golfie;
            oscard = oscard.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot6;
            oscard = {};
            verify = update.container;
            oscard['style'] = verify;
            verify = {};
            backup = _closure1_slot7;
            kiloes = 17;
            offset = echoed[kiloes];
            offset = sizing.bind(tangon)(offset);
            yankee = offset.Text;
            offset = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            romeon = update.formHeader;
            offset['style'] = romeon;
            romeon = echoed[ctrled];
            romeon = sizing.bind(tangon)(romeon);
            result = romeon.intl;
            foxtra = result.string;
            romeon = echoed[ctrled];
            romeon = sizing.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.pSZKvL;
            romeon = foxtra.bind(result)(romeon);
            offset['children'] = romeon;
            yankee = backup.bind(tangon)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            romeon = 16;
            yankee = echoed[romeon];
            yankee = sizing.bind(tangon)(yankee);
            foxtra = yankee.PressableOpacity;
            yankee = {};
            vacuum = 'button';
            yankee['accessibilityRole'] = vacuum;
            result = echoed[ctrled];
            result = sizing.bind(tangon)(result);
            config = result.intl;
            sequen = config.string;
            result = echoed[ctrled];
            result = sizing.bind(tangon)(result);
            result = result.t;
            result = result.pSZKvL;
            result = sequen.bind(config)(result);
            yankee['accessibilityLabel'] = result;
            result = {};
            result['text'] = record;
            yankee['accessibilityValue'] = result;
            result = function() { // Original name: onPress
                zuuluu = _closure2_slot4;
                entity = undefined;
                michal = 'date';
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            yankee['onPress'] = result;
            result = update.inputContainer;
            yankee['style'] = result;
            result = echoed[kiloes];
            result = sizing.bind(tangon)(result);
            config = result.Text;
            sequen = {};
            result = 'text-md/medium';
            sequen['variant'] = result;
            sequen['children'] = record;
            sequen = backup.bind(tangon)(config, sequen);
            yankee['children'] = sequen;
            yankee = backup.bind(tangon)(foxtra, yankee);
            offset[1] = yankee;
            verify['children'] = offset;
            offset = option.bind(tangon)(golfie, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            yankee = echoed[kiloes];
            yankee = sizing.bind(tangon)(yankee);
            foxtra = yankee.Text;
            yankee = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            sequen = update.formHeader;
            yankee['style'] = sequen;
            sequen = echoed[ctrled];
            sequen = sizing.bind(tangon)(sequen);
            record = sequen.intl;
            config = record.string;
            sequen = echoed[ctrled];
            sequen = sizing.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.GOmEb2;
            sequen = config.bind(record)(sequen);
            yankee['children'] = sequen;
            foxtra = backup.bind(tangon)(foxtra, yankee);
            yankee = new Array(2);
            yankee[0] = foxtra;
            romeon = echoed[romeon];
            romeon = sizing.bind(tangon)(romeon);
            foxtra = romeon.PressableOpacity;
            romeon = {};
            romeon['accessibilityRole'] = vacuum;
            vacuum = echoed[ctrled];
            vacuum = sizing.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = echoed[ctrled];
            ctrled = sizing.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.pSZKvL;
            ctrled = vacuum.bind(sequen)(ctrled);
            romeon['accessibilityLabel'] = ctrled;
            ctrled = {};
            ctrled['text'] = output;
            romeon['accessibilityValue'] = ctrled;
            source = function() { // Original name: onPress
                zuuluu = _closure2_slot4;
                entity = undefined;
                michal = 'time';
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            romeon['onPress'] = source;
            update = update.inputContainer;
            romeon['style'] = update;
            kiloes = echoed[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.Text;
            kiloes = {};
            kiloes['variant'] = result;
            kiloes['children'] = output;
            kiloes = backup.bind(tangon)(sizing, kiloes);
            romeon['children'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            offset['children'] = yankee;
            offset = option.bind(tangon)(golfie, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/saved_messages/message_reminders/native/MessageRemindersCustomDurationModal.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();