// app/modules/saved_messages/message_reminders/native/MessageRemindersCustomDurationModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    golf = argCorge;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    var _closure1_slot3 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot4 = tango;
    yankee = 1;
    tango = oscar[yankee];
    golf = golf.bind(entity)(tango);
    var _closure1_slot5 = golf;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot6 = tango;
    tango = 3;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot7 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    offset['flex'] = yankee;
    yankee = 5;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BASE_SECONDARY;
    offset['backgroundColor'] = foxtrot;
    tango['modal'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['paddingHorizontal'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_8;
    offset['paddingTop'] = foxtrot;
    tango['headerContainer'] = offset;
    offset = {'paddingHorizontal': 16, 'paddingTop': 24, 'gap': 24};
    tango['container'] = offset;
    offset = {};
    foxtrot = 8;
    offset['marginBottom'] = foxtrot;
    tango['formHeader'] = offset;
    offset = {'paddingHorizontal': 16, 'paddingVertical': 12};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.lg;
    offset['borderRadius'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.INPUT_BACKGROUND;
    offset['backgroundColor'] = yankee;
    tango['inputContainer'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot9 = tango;
    tango = golf.memo;
    mike = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeo = entity.onClose;
            var _closure2_slot0 = romeo;
            entity = entity.createReminder;
            var _closure2_slot1 = entity;
            mike = _closure1_slot9;
            tango = undefined;
            update = mike.bind(tango)();
            oscar = _closure1_slot5;
            zulu = oscar.useState;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot3;
                entity = 6;
                entity = mike[entity];
                mike = undefined;
                entity = zulu.bind(mike)(entity);
                entity = entity.bind(mike)();
                return entity;
            };
            report = zulu.bind(oscar)(mike);
            zulu = _closure1_slot4;
            mike = 2;
            report = zulu.bind(tango)(report, mike);
            yankee = 0;
            zulu = report[yankee];
            var _closure2_slot2 = zulu;
            mike = 1;
            mike = report[mike];
            var _closure2_slot3 = mike;
            mike = function(argFoo) { // Original name: handleOpenDatePicker
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    golf = argFoo;
                    tango = _closure1_slot2;
                    mike = _closure1_slot3;
                    entity = 7;
                    mike = mike[entity];
                    entity = undefined;
                    tango = tango.bind(entity)(mike);
                    mike = tango.dismissGlobalKeyboard;
                    mike = mike.bind(tango)();
                    mike = 'date';
                    if(!(mike !== golf)) { _fun00004_ip = 103; continue _fun00003 }
 46:
                    oscar = _closure1_slot0;
                    options = _closure1_slot3;
                    mike = 8;
                    tango = options[mike];
                    tango = oscar.bind(entity)(tango);
                    report = tango.intl;
                    tango = report.string;
                    mike = options[mike];
                    mike = oscar.bind(entity)(mike);
                    mike = mike.t;
                    mike = mike.GOmEb2;
                    mike = tango.bind(report)(mike);
                    _fun00004_ip = 158; continue _fun00003;
 103:
                    options = _closure1_slot0;
                    verify = _closure1_slot3;
                    tango = 8;
                    report = verify[tango];
                    report = options.bind(entity)(report);
                    oscar = report.intl;
                    report = oscar.string;
                    tango = verify[tango];
                    tango = options.bind(entity)(tango);
                    tango = tango.t;
                    tango = tango.pSZKvL;
                    mike = report.bind(oscar)(tango);
 158:
                    verify = _closure1_slot1;
                    offset = _closure1_slot3;
                    tango = 9;
                    tango = offset[tango];
                    oscar = verify.bind(entity)(tango);
                    report = oscar.openLazy;
                    tango = _closure1_slot0;
                    zulu = 11;
                    zulu = offset[zulu];
                    options = tango.bind(entity)(zulu);
                    zulu = 10;
                    tango = offset[zulu];
                    zulu = offset.paths;
                    tango = options.bind(entity)(tango, zulu);
                    zulu = {};
                    zulu['title'] = mike;
                    yankee = _closure2_slot2;
                    options = yankee.toDate;
                    options = options.bind(yankee)();
                    zulu['startDate'] = options;
                    options = 6;
                    options = offset[options];
                    options = verify.bind(entity)(options);
                    verify = options.bind(entity)();
                    options = verify.toDate;
                    options = options.bind(verify)();
                    zulu['minimumDate'] = options;
                    zulu['mode'] = golf;
                    mike = _closure2_slot3;
                    zulu['onSubmit'] = mike;
                    mike = 'DatePicker';
                    mike = report.bind(oscar)(tango, mike, zulu);
                    return entity;
                }
            };
            var _closure2_slot4 = mike;
            report = oscar.useCallback;
            mike = new Array(3);
            mike[0] = entity;
            mike[1] = zulu;
            mike[2] = romeo;
            entity = function() {
                tango = _closure2_slot1;
                zulu = _closure2_slot2;
                entity = zulu.toDate;
                zulu = entity.bind(zulu)();
                entity = undefined;
                zulu = tango.bind(entity)(zulu);
                mike = _closure2_slot0;
                mike = mike.bind(entity)();
                return entity;
            };
            entity = report.bind(oscar)(entity, mike);
            var _closure2_slot5 = entity;
            mike = zulu.format;
            entity = 'MMM Do YYYY';
            record = mike.bind(zulu)(entity);
            mike = zulu.format;
            entity = 'LT';
            output = mike.bind(zulu)(entity);
            zulu = _closure1_slot8;
            mike = _closure1_slot6;
            entity = {};
            report = update.modal;
            entity['style'] = report;
            oscar = _closure1_slot7;
            report = {};
            golf = update.headerContainer;
            report['style'] = golf;
            foxtrot = _closure1_slot0;
            backup = _closure1_slot3;
            golf = 12;
            golf = backup[golf];
            golf = foxtrot.bind(tango)(golf);
            options = golf.Header;
            golf = {};
            control = 8;
            verify = backup[control];
            verify = foxtrot.bind(tango)(verify);
            sizing = verify.intl;
            kilo = sizing.string;
            verify = backup[control];
            verify = foxtrot.bind(tango)(verify);
            verify = verify.t;
            verify = verify.VKsXpa;
            verify = kilo.bind(sizing)(verify);
            golf['title'] = verify;
            verify = function() { // Original name: headerTitle
                tango = _closure1_slot7;
                options = _closure1_slot0;
                verify = _closure1_slot3;
                entity = 13;
                entity = verify[entity];
                zulu = undefined;
                entity = options.bind(zulu)(entity);
                mike = entity.GenericHeaderTitle;
                entity = {};
                report = 8;
                oscar = verify[report];
                oscar = options.bind(zulu)(oscar);
                golf = oscar.intl;
                oscar = golf.string;
                report = verify[report];
                report = options.bind(zulu)(report);
                report = report.t;
                report = report.VKsXpa;
                report = oscar.bind(golf)(report);
                entity['title'] = report;
                entity = tango.bind(zulu)(mike, entity);
                return entity;
            };
            golf['headerTitle'] = verify;
            verify = 'center';
            golf['headerTitleAlign'] = verify;
            verify = 14;
            verify = backup[verify];
            foxtrot = foxtrot.bind(tango)(verify);
            verify = foxtrot.isIOS;
            foxtrot = verify.bind(foxtrot)();
            verify = undefined;
            if(!foxtrot) { _fun00002_ip = 337; continue _fun00001 }
 335:
            verify = 0;
 337:
            golf['headerStatusBarHeight'] = verify;
            sizing = _closure1_slot0;
            echo = _closure1_slot3;
            verify = 15;
            verify = echo[verify];
            yankee = sizing.bind(tango)(verify);
            verify = yankee.getHeaderCloseButton;
            verify = verify.bind(yankee)(romeo);
            golf['headerLeft'] = verify;
            verify = function() { // Original name: headerRight
                tango = _closure1_slot7;
                offset = _closure1_slot0;
                yankee = _closure1_slot3;
                entity = 16;
                entity = yankee[entity];
                zulu = undefined;
                entity = offset.bind(zulu)(entity);
                mike = entity.PressableOpacity;
                entity = {};
                report = 'button';
                entity['accessibilityRole'] = report;
                report = _closure2_slot5;
                entity['onPress'] = report;
                report = 17;
                report = yankee[report];
                report = offset.bind(zulu)(report);
                oscar = report.Text;
                report = {'variant': 'text-md/semibold', 'color': 'control-brand-foreground'};
                golf = 8;
                options = yankee[golf];
                options = offset.bind(zulu)(options);
                verify = options.intl;
                options = verify.string;
                golf = yankee[golf];
                golf = offset.bind(zulu)(golf);
                golf = golf.t;
                golf = golf.R3BPHx;
                golf = options.bind(verify)(golf);
                report['children'] = golf;
                report = tango.bind(zulu)(oscar, report);
                entity['children'] = report;
                entity = tango.bind(zulu)(mike, entity);
                return entity;
            };
            golf['headerRight'] = verify;
            golf = oscar.bind(tango)(options, golf);
            report['children'] = golf;
            oscar = oscar.bind(tango)(mike, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot8;
            golf = _closure1_slot6;
            oscar = {};
            verify = update.container;
            oscar['style'] = verify;
            verify = {};
            backup = _closure1_slot7;
            kilo = 17;
            offset = echo[kilo];
            offset = sizing.bind(tango)(offset);
            yankee = offset.Text;
            offset = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            romeo = update.formHeader;
            offset['style'] = romeo;
            romeo = echo[control];
            romeo = sizing.bind(tango)(romeo);
            result = romeo.intl;
            foxtrot = result.string;
            romeo = echo[control];
            romeo = sizing.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.pSZKvL;
            romeo = foxtrot.bind(result)(romeo);
            offset['children'] = romeo;
            yankee = backup.bind(tango)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            romeo = 16;
            yankee = echo[romeo];
            yankee = sizing.bind(tango)(yankee);
            foxtrot = yankee.PressableOpacity;
            yankee = {};
            vacuum = 'button';
            yankee['accessibilityRole'] = vacuum;
            result = echo[control];
            result = sizing.bind(tango)(result);
            config = result.intl;
            sequence = config.string;
            result = echo[control];
            result = sizing.bind(tango)(result);
            result = result.t;
            result = result.pSZKvL;
            result = sequence.bind(config)(result);
            yankee['accessibilityLabel'] = result;
            result = {};
            result['text'] = record;
            yankee['accessibilityValue'] = result;
            result = function() { // Original name: onPress
                zulu = _closure2_slot4;
                entity = undefined;
                mike = 'date';
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            yankee['onPress'] = result;
            result = update.inputContainer;
            yankee['style'] = result;
            result = echo[kilo];
            result = sizing.bind(tango)(result);
            config = result.Text;
            sequence = {};
            result = 'text-md/medium';
            sequence['variant'] = result;
            sequence['children'] = record;
            sequence = backup.bind(tango)(config, sequence);
            yankee['children'] = sequence;
            yankee = backup.bind(tango)(foxtrot, yankee);
            offset[1] = yankee;
            verify['children'] = offset;
            offset = options.bind(tango)(golf, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            yankee = echo[kilo];
            yankee = sizing.bind(tango)(yankee);
            foxtrot = yankee.Text;
            yankee = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            sequence = update.formHeader;
            yankee['style'] = sequence;
            sequence = echo[control];
            sequence = sizing.bind(tango)(sequence);
            record = sequence.intl;
            config = record.string;
            sequence = echo[control];
            sequence = sizing.bind(tango)(sequence);
            sequence = sequence.t;
            sequence = sequence.GOmEb2;
            sequence = config.bind(record)(sequence);
            yankee['children'] = sequence;
            foxtrot = backup.bind(tango)(foxtrot, yankee);
            yankee = new Array(2);
            yankee[0] = foxtrot;
            romeo = echo[romeo];
            romeo = sizing.bind(tango)(romeo);
            foxtrot = romeo.PressableOpacity;
            romeo = {};
            romeo['accessibilityRole'] = vacuum;
            vacuum = echo[control];
            vacuum = sizing.bind(tango)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.string;
            control = echo[control];
            control = sizing.bind(tango)(control);
            control = control.t;
            control = control.pSZKvL;
            control = vacuum.bind(sequence)(control);
            romeo['accessibilityLabel'] = control;
            control = {};
            control['text'] = output;
            romeo['accessibilityValue'] = control;
            source = function() { // Original name: onPress
                zulu = _closure2_slot4;
                entity = undefined;
                mike = 'time';
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            romeo['onPress'] = source;
            update = update.inputContainer;
            romeo['style'] = update;
            kilo = echo[kilo];
            kilo = sizing.bind(tango)(kilo);
            sizing = kilo.Text;
            kilo = {};
            kilo['variant'] = result;
            kilo['children'] = output;
            kilo = backup.bind(tango)(sizing, kilo);
            romeo['children'] = kilo;
            romeo = backup.bind(tango)(foxtrot, romeo);
            yankee[1] = romeo;
            offset['children'] = yankee;
            offset = options.bind(tango)(golf, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 18;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/saved_messages/message_reminders/native/MessageRemindersCustomDurationModal.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();