// app/modules/saved_messages/native/ForLaterEmptyState.tsx
export default (function(_, argBar, argBaz, __, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    tangon = tangon.Image;
    var _closure1_slot4 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 'center';
    verify = {'justifyContent': 'center', 'alignItems': 'center', 'paddingTop': 166, 'paddingHorizontal': 32};
    tangon['pageContainer'] = verify;
    verify = {'alignItems': 'center', 'maxWidth': 311};
    tangon['container'] = verify;
    verify = {'width': 140, 'height': 130};
    tangon['image'] = verify;
    verify = {'marginTop': 24, 'gap': 8};
    tangon['textContainer'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['text'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/saved_messages/native/ForLaterEmptyState.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: ForLaterEmptyState
        entity = _closure1_slot7;
        tangon = undefined;
        foxtra = entity.bind(tangon)();
        zuuluu = _closure1_slot5;
        michal = _closure1_slot3;
        entity = {};
        report = foxtra.pageContainer;
        entity['style'] = report;
        oscard = _closure1_slot6;
        report = {};
        golfie = foxtra.container;
        report['style'] = golfie;
        option = _closure1_slot4;
        golfie = {};
        yankee = _closure1_slot1;
        sizing = _closure1_slot2;
        offset = 3;
        offset = sizing[offset];
        offset = yankee.bind(tangon)(offset);
        golfie['source'] = offset;
        offset = foxtra.image;
        golfie['style'] = offset;
        option = zuuluu.bind(tangon)(option, golfie);
        golfie = new Array(2);
        golfie[0] = option;
        option = {};
        offset = foxtra.textContainer;
        option['style'] = offset;
        kiloes = _closure1_slot0;
        offset = 4;
        verify = sizing[offset];
        verify = kiloes.bind(tangon)(verify);
        yankee = verify.Text;
        verify = {'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
        romeon = foxtra.text;
        verify['style'] = romeon;
        romeon = 5;
        backup = sizing[romeon];
        backup = kiloes.bind(tangon)(backup);
        result = backup.intl;
        output = result.string;
        backup = sizing[romeon];
        backup = kiloes.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.erEf2t;
        backup = output.bind(result)(backup);
        verify['children'] = backup;
        yankee = zuuluu.bind(tangon)(yankee, verify);
        verify = new Array(2);
        verify[0] = yankee;
        offset = sizing[offset];
        offset = kiloes.bind(tangon)(offset);
        yankee = offset.Text;
        offset = {'variant': 'text-sm/medium', 'color': 'header-secondary'};
        foxtra = foxtra.text;
        offset['style'] = foxtra;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.w1o+7+;
        romeon = foxtra.bind(backup)(romeon);
        offset['children'] = romeon;
        offset = zuuluu.bind(tangon)(yankee, offset);
        verify[1] = offset;
        option['children'] = verify;
        option = oscard.bind(tangon)(michal, option);
        golfie[1] = option;
        report['children'] = golfie;
        report = oscard.bind(tangon)(michal, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['ForLaterEmptyState'] = michal;
    return entity;
})();