// app/modules/saved_messages/native/ForLaterModal.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'backgroundColor': null, 'borderBottomWidth': 0, 'shadowColor': 'transparent', 'height': '100%'};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_BASE_SECONDARY;
    verify['backgroundColor'] = romeon;
    tangon['modal'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['paddingHorizontal'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['paddingTop'] = offset;
    tangon['headerContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/saved_messages/native/ForLaterModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: ForLaterModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot6;
            tangon = undefined;
            option = entity.bind(tangon)();
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = option.modal;
            entity['style'] = report;
            golfie = _closure1_slot4;
            report = {};
            option = option.headerContainer;
            report['style'] = option;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            option = 5;
            option = yankee[option];
            option = offset.bind(tangon)(option);
            romeon = option.Header;
            option = {};
            verify = 6;
            foxtra = yankee[verify];
            foxtra = offset.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            verify = yankee[verify];
            verify = offset.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.2pAkDA;
            verify = foxtra.bind(backup)(verify);
            option['title'] = verify;
            verify = function() { // Original name: headerTitle
                tangon = _closure1_slot4;
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 7;
                entity = verify[entity];
                zuuluu = undefined;
                entity = option.bind(zuuluu)(entity);
                michal = entity.GenericHeaderTitle;
                entity = {};
                report = 6;
                oscard = verify[report];
                oscard = option.bind(zuuluu)(oscard);
                golfie = oscard.intl;
                oscard = golfie.string;
                report = verify[report];
                report = option.bind(zuuluu)(report);
                report = report.t;
                report = report.2pAkDA;
                report = oscard.bind(golfie)(report);
                entity['title'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            option['headerTitle'] = verify;
            verify = 'center';
            option['headerTitleAlign'] = verify;
            verify = 8;
            verify = yankee[verify];
            offset = offset.bind(tangon)(verify);
            verify = offset.isIOS;
            offset = verify.bind(offset)();
            verify = undefined;
            if(!offset) { _fun00002_ip = 180; continue _fun00001 }
 178:
            verify = 0;
 180:
            option['headerStatusBarHeight'] = verify;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            verify = 9;
            verify = yankee[verify];
            kiloes = offset.bind(tangon)(verify);
            backup = kiloes.getHeaderCloseButton;
            offset = _closure1_slot1;
            verify = 10;
            foxtra = yankee[verify];
            foxtra = offset.bind(tangon)(foxtra);
            foxtra = foxtra.pop;
            foxtra = backup.bind(kiloes)(foxtra);
            option['headerLeft'] = foxtra;
            option = golfie.bind(tangon)(romeon, option);
            report['children'] = option;
            golfie = golfie.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot4;
            oscard = 11;
            oscard = yankee[oscard];
            golfie = offset.bind(tangon)(oscard);
            oscard = {};
            verify = yankee[verify];
            verify = offset.bind(tangon)(verify);
            verify = verify.pop;
            oscard['onClose'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();