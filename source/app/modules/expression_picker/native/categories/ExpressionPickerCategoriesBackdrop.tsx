// app/modules/expression_picker/native/categories/ExpressionPickerCategoriesBackdrop.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    romeo = tango.StyleSheet;
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    yankee = tango.EXPRESSION_FOOTER_HEIGHT;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    output = romeo.absoluteFillObject;
    result = offset;
    backup = copyDataProperties(result, output);
    backup = romeo.hairlineWidth;
    romeo = 'borderTopWidth';
    offset[romeo] = backup;
    romeo = 5;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    kilo = backup.BACKGROUND_TERTIARY;
    backup = 'borderTopColor';
    offset[backup] = kilo;
    tango['backdrop'] = offset;
    offset = {};
    romeo = oscar[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.PROFILE_GRADIENT_NOTE_BACKGROUND;
    offset['backgroundColor'] = romeo;
    offset['height'] = yankee;
    offset['bottom'] = entity;
    tango['backdropAndroid'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot5 = tango;
    tango = golf.memo;
    mike = function() { // Original name: EmojiPickerCategoriesBackdrop
        _fun78528: for(var _fun78528_ip = 0; ; ) switch(_fun78528_ip) {
 0:
            entity = _closure1_slot5;
            report = undefined;
            golf = entity.bind(report)();
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            entity = 6;
            entity = tango[entity];
            zulu = zulu.bind(report)(entity);
            entity = zulu.isAndroid;
            entity = entity.bind(zulu)();
            tango = _closure1_slot4;
            zulu = _closure1_slot3;
            if(entity) { _fun78528_ip = 115; continue _fun78528 }
 53:
            entity = {};
            oscar = golf.backdrop;
            entity['style'] = oscar;
            oscar = _closure1_slot1;
            options = _closure1_slot2;
            mike = 7;
            mike = options[mike];
            oscar = oscar.bind(report)(mike);
            mike = {};
            options = golf.backdrop;
            mike['style'] = options;
            mike = tango.bind(report)(oscar, mike);
            entity['children'] = mike;
            entity = tango.bind(report)(zulu, entity);
            _fun78528_ip = 151; continue _fun78528;
 115:
            mike = {};
            options = golf.backdrop;
            oscar = new Array(2);
            oscar[0] = options;
            golf = golf.backdropAndroid;
            oscar[1] = golf;
            mike['style'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 151:
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 8;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/expression_picker/native/categories/ExpressionPickerCategoriesBackdrop.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();