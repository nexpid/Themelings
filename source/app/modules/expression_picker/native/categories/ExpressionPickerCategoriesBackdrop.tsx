// app/modules/expression_picker/native/categories/ExpressionPickerCategoriesBackdrop.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var13 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var13;
    var _closure1_slot2 = var6;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var7 = var6[var1];
    var4 = metroImportAll;
    var1 = undefined;
    var7 = var4.bind(var1)(var7);
    var4 = 1;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var12 = var4.StyleSheet;
    var4 = var4.View;
    var _closure1_slot3 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var11 = var4.EXPRESSION_FOOTER_HEIGHT;
    var4 = 3;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.jsx;
    var _closure1_slot4 = var4;
    var4 = 4;
    var4 = var6[var4];
    var9 = var5.bind(var1)(var4);
    var8 = var9.createStyles;
    var4 = {};
    var10 = {};
    var17 = var12.absoluteFillObject;
    var18 = var10;
    var14 = copyDataProperties(var18, var17);
    var14 = var12.hairlineWidth;
    var12 = 'borderTopWidth';
    var10[var12] = var14;
    var12 = 5;
    var14 = var6[var12];
    var14 = var13.bind(var1)(var14);
    var14 = var14.colors;
    var15 = var14.BACKGROUND_TERTIARY;
    var14 = 'borderTopColor';
    var10[var14] = var15;
    var4['backdrop'] = var10;
    var10 = {};
    var12 = var6[var12];
    var12 = var13.bind(var1)(var12);
    var12 = var12.colors;
    var12 = var12.PROFILE_GRADIENT_NOTE_BACKGROUND;
    var10['backgroundColor'] = var12;
    var10['height'] = var11;
    var10['bottom'] = var1;
    var4['backdropAndroid'] = var10;
    var4 = var8.bind(var9)(var4);
    var _closure1_slot5 = var4;
    var4 = var7.memo;
    var2 = function EmojiPickerCategoriesBackdrop() {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var1 = _closure1_slot5;
            var5 = undefined;
            var7 = var1.bind(var5)();
            var3 = _closure1_slot0;
            var4 = _closure1_slot2;
            var1 = 6;
            var1 = var4[var1];
            var3 = var3.bind(var5)(var1);
            var1 = var3.isAndroid;
            var1 = var1.bind(var3)();
            var4 = _closure1_slot4;
            var3 = _closure1_slot3;
            if(var1) { _fun0001_ip = 115; continue _fun0001 }
 53:
            var1 = {};
            var6 = var7.backdrop;
            var1['style'] = var6;
            var6 = _closure1_slot1;
            var8 = _closure1_slot2;
            var2 = 7;
            var2 = var8[var2];
            var6 = var6.bind(var5)(var2);
            var2 = {};
            var8 = var7.backdrop;
            var2['style'] = var8;
            var2 = var4.bind(var5)(var6, var2);
            var1['children'] = var2;
            var1 = var4.bind(var5)(var3, var1);
            _fun0001_ip = 151; continue _fun0001;
 115:
            var2 = {};
            var8 = var7.backdrop;
            var6 = new Array(2);
            var6[0] = var8;
            var7 = var7.backdropAndroid;
            var6[1] = var7;
            var2['style'] = var6;
            var1 = var4.bind(var5)(var3, var2);
 151:
            return var1;
        }
    };
    var2 = var4.bind(var7)(var2);
    var4 = 8;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/expression_picker/native/categories/ExpressionPickerCategoriesBackdrop.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();