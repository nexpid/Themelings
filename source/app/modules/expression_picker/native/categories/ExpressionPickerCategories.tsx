// app/modules/expression_picker/native/categories/ExpressionPickerCategories.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['paddingHorizontal'] = offset;
    offset = 'row';
    verify['flexDirection'] = offset;
    offset = 'center';
    verify['alignItems'] = offset;
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/expression_picker/native/categories/ExpressionPickerCategories.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ExpressionPickerCategories
        entity = argFoo;
        verify = entity.children;
        report = entity.portalHostName;
        romeon = entity.style;
        entity = _closure1_slot6;
        tangon = undefined;
        offset = entity.bind(tangon)();
        zuuluu = _closure1_slot4;
        michal = _closure1_slot0;
        yankee = _closure1_slot2;
        entity = 5;
        entity = yankee[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.Portal;
        entity = {};
        entity['hostName'] = report;
        golfie = _closure1_slot5;
        oscard = _closure1_slot3;
        report = {};
        foxtra = offset.container;
        offset = new Array(2);
        offset[0] = foxtra;
        offset[1] = romeon;
        report['style'] = offset;
        offset = _closure1_slot1;
        option = 6;
        option = yankee[option];
        offset = offset.bind(tangon)(option);
        option = {};
        offset = zuuluu.bind(tangon)(offset, option);
        option = new Array(2);
        option[0] = offset;
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();