// app/modules/expression_picker/native/ExpressionPickerKeyboard.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    golfie = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.KeyboardTypes;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.KEYBOARD_ANIMATION_CONFIG;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot7 = tangon;
    tangon = {};
    option = 'function ExpressionPickerKeyboardTsx1(){const{animatedSheetIndex}=this.__closure;return Math.max(animatedSheetIndex.get(),0)>0;}';
    tangon['code'] = option;
    var _closure1_slot8 = tangon;
    tangon = {};
    option = 'function ExpressionPickerKeyboardTsx2(){const{bottomSheetExpandingOrExpanded,maximum,minimum}=this.__closure;return{height:bottomSheetExpandingOrExpanded.get()?maximum:minimum};}';
    tangon['code'] = option;
    var _closure1_slot9 = tangon;
    option = golfie.memo;
    tangon = function(argFoo) {
        entity = argFoo;
        option = entity.channel;
        entity = entity.chatInputRef;
        var _closure2_slot0 = entity;
        golfie = _closure1_slot3;
        oscard = golfie.useContext;
        backup = _closure1_slot0;
        foxtra = _closure1_slot2;
        tangon = 5;
        report = foxtra[tangon];
        tangon = undefined;
        report = backup.bind(tangon)(report);
        report = report.PortalKeyboardContext;
        report = oscard.bind(golfie)(report);
        update = report.animatedSheetIndex;
        var _closure2_slot1 = update;
        report = report.bottomSheetRefs;
        var _closure2_slot2 = report;
        verify = golfie.useCallback;
        report = report.expression;
        oscard = new Array(2);
        oscard[0] = report;
        oscard[1] = entity;
        report = function(argFoo) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                tangon = _closure2_slot0;
                offset = tangon.current;
                verify = offset.insertText;
                report = _closure1_slot1;
                option = _closure1_slot2;
                entity = 6;
                michal = option[entity];
                entity = undefined;
                report = report.bind(entity)(michal);
                michal = argFoo;
                oscard = report.bind(entity)(michal);
                michal = null;
                report = true;
                report = verify.bind(offset)(oscard, michal, report);
                oscard = _closure1_slot0;
                report = 7;
                report = option[report];
                oscard = oscard.bind(entity)(report);
                report = oscard.dismissGlobalKeyboard;
                report = report.bind(oscard)();
                oscard = tangon.current;
                report = oscard.openCustomKeyboard;
                tangon = {};
                golfie = _closure1_slot5;
                golfie = golfie.EXPRESSION;
                tangon['keyboardType'] = golfie;
                tangon = report.bind(oscard)(tangon);
                zuuluu = _closure2_slot2;
                zuuluu = zuuluu.expression;
                tangon = zuuluu.current;
                if(!(michal != tangon)) { _fun00002_ip = 153; continue _fun00001 }
 140:
                zuuluu = tangon.snapToIndex;
                michal = 0;
                michal = zuuluu.bind(tangon)(michal);
 153:
                return entity;
            }
        };
        yankee = verify.bind(golfie)(report, oscard);
        verify = golfie.useCallback;
        oscard = new Array(1);
        oscard[0] = entity;
        report = function(argFoo) {
            entity = _closure2_slot0;
            tangon = entity.current;
            zuuluu = tangon.handleSelectGIF;
            michal = argFoo;
            michal = zuuluu.bind(tangon)(michal);
            michal = entity.current;
            entity = michal.openSystemKeyboard;
            entity = entity.bind(michal)();
            entity = undefined;
            return entity;
        };
        offset = verify.bind(golfie)(report, oscard);
        verify = golfie.useCallback;
        oscard = new Array(1);
        oscard[0] = entity;
        report = function(argFoo) {
            entity = _closure2_slot0;
            tangon = entity.current;
            zuuluu = tangon.handleSelectSticker;
            michal = argFoo;
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = entity.current;
            michal = zuuluu.openSystemKeyboard;
            michal = michal.bind(zuuluu)();
            zuuluu = entity.current;
            michal = zuuluu.setText;
            entity = '';
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        verify = verify.bind(golfie)(report, oscard);
        oscard = golfie.useCallback;
        report = new Array(1);
        report[0] = entity;
        entity = function() {
            entity = _closure2_slot0;
            michal = entity.current;
            entity = michal.backspace;
            entity = entity.bind(michal)();
            entity = undefined;
            return entity;
        };
        romeon = oscard.bind(golfie)(entity, report);
        entity = 8;
        entity = foxtra[entity];
        golfie = backup.bind(tangon)(entity);
        oscard = golfie.useStateFromStoresObject;
        entity = _closure1_slot4;
        report = new Array(1);
        report[0] = entity;
        entity = function() {
            entity = {};
            michal = _closure1_slot4;
            michal = michal.expressionType;
            entity['expressionType'] = michal;
            return entity;
        };
        entity = oscard.bind(golfie)(report, entity);
        golfie = entity.expressionType;
        oscard = _closure1_slot1;
        entity = 9;
        entity = foxtra[entity];
        entity = oscard.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        sizing = entity.minimum;
        var _closure2_slot3 = sizing;
        output = entity.maximum;
        var _closure2_slot4 = output;
        entity = 10;
        report = foxtra[entity];
        result = backup.bind(tangon)(report);
        kiloes = result.useDerivedValue;
        report = function() { // Original name: p
            entity = global;
            tangon = entity.Math;
            zuuluu = tangon.max;
            michal = _closure2_slot1;
            entity = michal.get;
            entity = entity.bind(michal)();
            michal = 0;
            entity = zuuluu.bind(tangon)(entity, michal);
            entity = entity > michal;
            return entity;
        };
        echoed = {};
        echoed['animatedSheetIndex'] = update;
        report['__closure'] = echoed;
        echoed = 9820130506520.0;
        report['__workletHash'] = echoed;
        echoed = _closure1_slot8;
        report['__initData'] = echoed;
        result = kiloes.bind(result)(report);
        var _closure2_slot5 = result;
        report = foxtra[entity];
        backup = backup.bind(tangon)(report);
        report = backup.useAnimatedStyle;
        zuuluu = function() { // Original name: h
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = {};
                tangon = _closure2_slot5;
                michal = tangon.get;
                michal = michal.bind(tangon)();
                if(michal) { _fun00004_ip = 27; continue _fun00003 }
 21:
                michal = _closure2_slot3;
                _fun00004_ip = 31; continue _fun00003;
 27:
                michal = _closure2_slot4;
 31:
                entity['height'] = michal;
                return entity;
            }
        };
        kiloes = {};
        kiloes['bottomSheetExpandingOrExpanded'] = result;
        kiloes['maximum'] = output;
        kiloes['minimum'] = sizing;
        zuuluu['__closure'] = kiloes;
        kiloes = 13253776832356.0;
        zuuluu['__workletHash'] = kiloes;
        kiloes = _closure1_slot9;
        zuuluu['__initData'] = kiloes;
        report = report.bind(backup)(zuuluu);
        zuuluu = _closure1_slot7;
        entity = foxtra[entity];
        entity = oscard.bind(tangon)(entity);
        michal = entity.View;
        entity = {};
        backup = 'expression-picker-sheet';
        entity['nativeID'] = backup;
        entity['style'] = report;
        report = 11;
        report = foxtra[report];
        oscard = oscard.bind(tangon)(report);
        report = {};
        report['onBackspace'] = romeon;
        report['onPressEmoji'] = yankee;
        report['onPressGIF'] = offset;
        report['onPressSticker'] = verify;
        report['channel'] = option;
        report['expressionType'] = golfie;
        golfie = true;
        report['inActionSheet'] = golfie;
        report['inPortalKeyboard'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    tangon = option.bind(golfie)(tangon);
    var _closure1_slot10 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: ExpressionPickerKeyboard
        zuuluu = argFoo;
        michal = zuuluu.channel;
        var _closure2_slot0 = michal;
        offset = zuuluu.chatInputRef;
        var _closure2_slot1 = offset;
        michal = zuuluu.onClose;
        var _closure2_slot2 = michal;
        oscard = zuuluu.transitionState;
        option = _closure1_slot3;
        golfie = option.useContext;
        tangon = _closure1_slot0;
        yankee = _closure1_slot2;
        zuuluu = 5;
        zuuluu = yankee[zuuluu];
        report = undefined;
        zuuluu = tangon.bind(report)(zuuluu);
        zuuluu = zuuluu.PortalKeyboardContext;
        zuuluu = golfie.bind(option)(zuuluu);
        zuuluu = zuuluu.bottomSheetRefs;
        zuuluu = zuuluu.expression;
        var _closure2_slot3 = zuuluu;
        zuuluu = 12;
        zuuluu = yankee[zuuluu];
        tangon = tangon.bind(report)(zuuluu);
        zuuluu = tangon.useIsScreenReaderEnabled;
        golfie = zuuluu.bind(tangon)();
        var _closure2_slot4 = golfie;
        tangon = option.useCallback;
        zuuluu = new Array(3);
        zuuluu[0] = michal;
        zuuluu[1] = golfie;
        zuuluu[2] = offset;
        michal = function() {
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                zuuluu = _closure2_slot2;
                michal = null;
                if(!(michal != zuuluu)) { _fun00006_ip = 23; continue _fun00005 }
 13:
                zuuluu = _closure2_slot2;
                michal = undefined;
                michal = zuuluu.bind(michal)();
 23:
                michal = _closure2_slot4;
                if(!michal) { _fun00006_ip = 49; continue _fun00005 }
 30:
                entity = _closure2_slot1;
                michal = entity.current;
                entity = michal.openSystemKeyboard;
                entity = entity.bind(michal)();
 49:
                entity = undefined;
                return entity;
            }
        };
        option = tangon.bind(option)(michal, zuuluu);
        tangon = _closure1_slot7;
        zuuluu = _closure1_slot1;
        michal = 13;
        michal = yankee[michal];
        zuuluu = zuuluu.bind(report)(michal);
        michal = {};
        michal['forceMaxHeight'] = golfie;
        michal['chatInputRef'] = offset;
        verify = _closure1_slot6;
        michal['animationConfigs'] = verify;
        michal['onClose'] = option;
        michal['transitionState'] = oscard;
        oscard = 'expression';
        michal['refKey'] = oscard;
        entity = function(argFoo) { // Original name: children
            zuuluu = _closure2_slot3;
            michal = argFoo;
            michal = michal.current;
            zuuluu['current'] = michal;
            tangon = _closure1_slot7;
            zuuluu = _closure1_slot10;
            michal = {};
            report = _closure2_slot0;
            michal['channel'] = report;
            entity = _closure2_slot1;
            michal['chatInputRef'] = entity;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        michal['children'] = entity;
        entity = global;
        entity = entity.HermesInternal;
        oscard = entity.concat;
        entity = 'expression-picker-';
        entity = oscard.bind(entity)(golfie);
        entity = tangon.bind(report)(zuuluu, michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/expression_picker/native/ExpressionPickerKeyboard.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();