// app/modules/in_app_reports/native/components/InAppReportsGuildDiscoveryPreviewElement.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignSelf': 'stretch', 'marginHorizontal': 16, 'marginBottom': 16};
    tangon['container'] = verify;
    verify = {};
    offset = 6;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.HEADER_PRIMARY;
    verify['color'] = romeon;
    tangon['borderColor'] = verify;
    verify = {'textTransform': 'uppercase', 'lineHeight': 16, 'marginBottom': 8};
    tangon['title'] = verify;
    verify = {'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 8};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    tangon['itemContainer'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['guildInfo'] = verify;
    verify = {'lineHeight': 18, 'marginStart': 8};
    tangon['guildName'] = verify;
    verify = {'borderRadius': null, 'width': 18, 'height': 18};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['guildIcon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/in_app_reports/native/components/InAppReportsGuildDiscoveryPreviewElement.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildDiscoveryPreviewElement
        entity = argFoo;
        romeon = entity.guild;
        entity = _closure1_slot8;
        tangon = undefined;
        foxtra = entity.bind(tangon)();
        yankee = _closure1_slot0;
        backup = _closure1_slot2;
        entity = 7;
        entity = backup[entity];
        report = yankee.bind(tangon)(entity);
        zuuluu = report.useStateFromStores;
        entity = _closure1_slot4;
        michal = new Array(1);
        michal[0] = entity;
        entity = function() {
            entity = _closure1_slot4;
            entity = entity.useReducedMotion;
            return entity;
        };
        sizing = zuuluu.bind(report)(michal, entity);
        entity = 8;
        entity = backup[entity];
        report = yankee.bind(tangon)(entity);
        zuuluu = report.hexWithOpacity;
        entity = foxtra.borderColor;
        michal = entity.color;
        entity = 0.08;
        kiloes = zuuluu.bind(report)(michal, entity);
        zuuluu = _closure1_slot7;
        michal = _closure1_slot3;
        entity = {};
        report = foxtra.container;
        entity['style'] = report;
        golfie = _closure1_slot6;
        offset = 9;
        report = backup[offset];
        report = yankee.bind(tangon)(report);
        oscard = report.Text;
        report = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-xs/bold'};
        option = foxtra.title;
        report['style'] = option;
        option = 10;
        verify = backup[option];
        verify = yankee.bind(tangon)(verify);
        result = verify.intl;
        verify = result.string;
        option = backup[option];
        option = yankee.bind(tangon)(option);
        option = option.t;
        option = option.nTe4HB;
        option = verify.bind(result)(option);
        report['children'] = option;
        oscard = golfie.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        verify = foxtra.itemContainer;
        option = new Array(2);
        option[0] = verify;
        verify = {};
        verify['borderColor'] = kiloes;
        option[1] = verify;
        oscard['style'] = option;
        option = {};
        verify = foxtra.guildInfo;
        option['style'] = verify;
        kiloes = _closure1_slot1;
        verify = 11;
        verify = backup[verify];
        kiloes = kiloes.bind(tangon)(verify);
        verify = {};
        result = foxtra.guildIcon;
        verify['style'] = result;
        output = _closure1_slot5;
        result = output.prototype;
        result = Object.create(result, {constructor: {value: output}});
        source = result;
        update = romeon;
        output = new source[output](update, echoed);
        output = output instanceof Object ? output : result;
        verify['guild'] = output;
        sizing = !sizing;
        verify['animate'] = sizing;
        kiloes = golfie.bind(tangon)(kiloes, verify);
        verify = new Array(2);
        verify[0] = kiloes;
        offset = backup[offset];
        offset = yankee.bind(tangon)(offset);
        yankee = offset.Text;
        offset = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
        foxtra = foxtra.guildName;
        offset['style'] = foxtra;
        romeon = romeon.name;
        offset['children'] = romeon;
        offset = golfie.bind(tangon)(yankee, offset);
        verify[1] = offset;
        option['children'] = verify;
        option = zuuluu.bind(tangon)(michal, option);
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();