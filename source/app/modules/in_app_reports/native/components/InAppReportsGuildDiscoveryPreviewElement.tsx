// app/modules/in_app_reports/native/components/InAppReportsGuildDiscoveryPreviewElement.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'alignSelf': 'stretch', 'marginHorizontal': 16, 'marginBottom': 16};
    tango['container'] = verify;
    verify = {};
    offset = 6;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.HEADER_PRIMARY;
    verify['color'] = romeo;
    tango['borderColor'] = verify;
    verify = {'textTransform': 'uppercase', 'lineHeight': 16, 'marginBottom': 8};
    tango['title'] = verify;
    verify = {'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 8};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderRadius'] = romeo;
    tango['itemContainer'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tango['guildInfo'] = verify;
    verify = {'lineHeight': 18, 'marginStart': 8};
    tango['guildName'] = verify;
    verify = {'borderRadius': null, 'width': 18, 'height': 18};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tango['guildIcon'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/in_app_reports/native/components/InAppReportsGuildDiscoveryPreviewElement.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildDiscoveryPreviewElement
        entity = argFoo;
        romeo = entity.guild;
        entity = _closure1_slot8;
        tango = undefined;
        foxtrot = entity.bind(tango)();
        yankee = _closure1_slot0;
        backup = _closure1_slot2;
        entity = 7;
        entity = backup[entity];
        report = yankee.bind(tango)(entity);
        zulu = report.useStateFromStores;
        entity = _closure1_slot4;
        mike = new Array(1);
        mike[0] = entity;
        entity = function() {
            entity = _closure1_slot4;
            entity = entity.useReducedMotion;
            return entity;
        };
        sizing = zulu.bind(report)(mike, entity);
        entity = 8;
        entity = backup[entity];
        report = yankee.bind(tango)(entity);
        zulu = report.hexWithOpacity;
        entity = foxtrot.borderColor;
        mike = entity.color;
        entity = 0.08;
        kilo = zulu.bind(report)(mike, entity);
        zulu = _closure1_slot7;
        mike = _closure1_slot3;
        entity = {};
        report = foxtrot.container;
        entity['style'] = report;
        golf = _closure1_slot6;
        offset = 9;
        report = backup[offset];
        report = yankee.bind(tango)(report);
        oscar = report.Text;
        report = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-xs/bold'};
        options = foxtrot.title;
        report['style'] = options;
        options = 10;
        verify = backup[options];
        verify = yankee.bind(tango)(verify);
        result = verify.intl;
        verify = result.string;
        options = backup[options];
        options = yankee.bind(tango)(options);
        options = options.t;
        options = options.nTe4HB;
        options = verify.bind(result)(options);
        report['children'] = options;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = {};
        verify = foxtrot.itemContainer;
        options = new Array(2);
        options[0] = verify;
        verify = {};
        verify['borderColor'] = kilo;
        options[1] = verify;
        oscar['style'] = options;
        options = {};
        verify = foxtrot.guildInfo;
        options['style'] = verify;
        kilo = _closure1_slot1;
        verify = 11;
        verify = backup[verify];
        kilo = kilo.bind(tango)(verify);
        verify = {};
        result = foxtrot.guildIcon;
        verify['style'] = result;
        output = _closure1_slot5;
        result = output.prototype;
        result = Object.create(result, {constructor: {value: output}});
        source = result;
        update = romeo;
        output = new source[output](update, echo);
        output = output instanceof Object ? output : result;
        verify['guild'] = output;
        sizing = !sizing;
        verify['animate'] = sizing;
        kilo = golf.bind(tango)(kilo, verify);
        verify = new Array(2);
        verify[0] = kilo;
        offset = backup[offset];
        offset = yankee.bind(tango)(offset);
        yankee = offset.Text;
        offset = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
        foxtrot = foxtrot.guildName;
        offset['style'] = foxtrot;
        romeo = romeo.name;
        offset['children'] = romeo;
        offset = golf.bind(tango)(yankee, offset);
        verify[1] = offset;
        options['children'] = verify;
        options = zulu.bind(tango)(mike, options);
        oscar['children'] = options;
        oscar = golf.bind(tango)(mike, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();