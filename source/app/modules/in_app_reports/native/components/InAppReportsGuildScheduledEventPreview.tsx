// app/modules/in_app_reports/native/components/InAppReportsGuildScheduledEventPreview.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'alignSelf': 'stretch', 'marginHorizontal': 16, 'marginBottom': 16};
    tango['container'] = verify;
    verify = {};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.HEADER_PRIMARY;
    verify['color'] = romeo;
    tango['borderColor'] = verify;
    verify = {'lineHeight': 16, 'marginBottom': 8};
    tango['title'] = verify;
    verify = {'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 8};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.sm;
    verify['borderRadius'] = offset;
    tango['itemContainer'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tango['guildInfo'] = verify;
    verify = {'lineHeight': 18, 'marginStart': 8};
    tango['guildName'] = verify;
    verify = {'lineHeight': 20, 'marginTop': 8};
    tango['eventName'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/in_app_reports/native/components/InAppReportsGuildScheduledEventPreview.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildScheduledEventPreview
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            romeo = mike.event;
            var _closure2_slot0 = romeo;
            mike = _closure1_slot7;
            report = undefined;
            foxtrot = mike.bind(report)();
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            mike = 6;
            mike = tango[mike];
            tango = zulu.bind(report)(mike);
            zulu = tango.useStateFromStores;
            oscar = _closure1_slot4;
            mike = new Array(1);
            mike[0] = oscar;
            entity = function() {
                zulu = _closure1_slot4;
                mike = zulu.getGuild;
                entity = _closure2_slot0;
                entity = entity.guild_id;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            echo = zulu.bind(tango)(mike, entity);
            entity = null;
            if(!(entity != echo)) { _fun00002_ip = 547; continue _fun00001 }
 85:
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            mike = 7;
            mike = backup[mike];
            oscar = offset.bind(report)(mike);
            tango = oscar.hexWithOpacity;
            mike = foxtrot.borderColor;
            zulu = mike.color;
            mike = 0.08;
            output = tango.bind(oscar)(zulu, mike);
            tango = _closure1_slot6;
            zulu = _closure1_slot3;
            mike = {};
            oscar = foxtrot.container;
            mike['style'] = oscar;
            yankee = _closure1_slot5;
            verify = 8;
            oscar = backup[verify];
            oscar = offset.bind(report)(oscar);
            golf = oscar.Text;
            oscar = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-xs/bold'};
            options = foxtrot.title;
            oscar['style'] = options;
            options = 9;
            sizing = backup[options];
            sizing = offset.bind(report)(sizing);
            result = sizing.intl;
            sizing = result.string;
            options = backup[options];
            options = offset.bind(report)(options);
            options = options.t;
            options = options.SDTOLy;
            options = sizing.bind(result)(options);
            oscar['children'] = options;
            golf = yankee.bind(report)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            golf = {};
            sizing = foxtrot.itemContainer;
            options = new Array(2);
            options[0] = sizing;
            sizing = {};
            sizing['borderColor'] = output;
            options[1] = sizing;
            golf['style'] = options;
            options = {};
            sizing = foxtrot.guildInfo;
            options['style'] = sizing;
            sizing = _closure1_slot1;
            output = 10;
            kilo = backup[output];
            sizing = sizing.bind(report)(kilo);
            kilo = {};
            kilo['guild'] = echo;
            output = backup[output];
            output = offset.bind(report)(output);
            output = output.GuildIconSizes;
            output = output.XXSMALL;
            kilo['size'] = output;
            output = false;
            kilo['selected'] = output;
            sizing = yankee.bind(report)(sizing, kilo);
            kilo = new Array(2);
            kilo[0] = sizing;
            sizing = backup[verify];
            sizing = offset.bind(report)(sizing);
            output = sizing.Text;
            sizing = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            result = foxtrot.guildName;
            sizing['style'] = result;
            result = echo.toString;
            result = result.bind(echo)();
            sizing['children'] = result;
            sizing = yankee.bind(report)(output, sizing);
            kilo[1] = sizing;
            options['children'] = kilo;
            kilo = tango.bind(report)(zulu, options);
            options = new Array(2);
            options[0] = kilo;
            verify = backup[verify];
            verify = offset.bind(report)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-md/bold', 'color': 'header-primary'};
            foxtrot = foxtrot.eventName;
            verify['style'] = foxtrot;
            romeo = romeo.name;
            verify['children'] = romeo;
            verify = yankee.bind(report)(offset, verify);
            options[1] = verify;
            golf['children'] = options;
            golf = tango.bind(report)(zulu, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            mike = tango.bind(report)(zulu, mike);
            return mike;
 547:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();