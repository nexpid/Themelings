// app/modules/in_app_reports/native/components/InAppReportsGuildScheduledEventPreview.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignSelf': 'stretch', 'marginHorizontal': 16, 'marginBottom': 16};
    tangon['container'] = verify;
    verify = {};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.HEADER_PRIMARY;
    verify['color'] = romeon;
    tangon['borderColor'] = verify;
    verify = {'lineHeight': 16, 'marginBottom': 8};
    tangon['title'] = verify;
    verify = {'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 8};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.sm;
    verify['borderRadius'] = offset;
    tangon['itemContainer'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['guildInfo'] = verify;
    verify = {'lineHeight': 18, 'marginStart': 8};
    tangon['guildName'] = verify;
    verify = {'lineHeight': 20, 'marginTop': 8};
    tangon['eventName'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/in_app_reports/native/components/InAppReportsGuildScheduledEventPreview.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildScheduledEventPreview
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            romeon = michal.event;
            var _closure2_slot0 = romeon;
            michal = _closure1_slot7;
            report = undefined;
            foxtra = michal.bind(report)();
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 6;
            michal = tangon[michal];
            tangon = zuuluu.bind(report)(michal);
            zuuluu = tangon.useStateFromStores;
            oscard = _closure1_slot4;
            michal = new Array(1);
            michal[0] = oscard;
            entity = function() {
                zuuluu = _closure1_slot4;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = entity.guild_id;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            echoed = zuuluu.bind(tangon)(michal, entity);
            entity = null;
            if(!(entity != echoed)) { _fun00002_ip = 547; continue _fun00001 }
 85:
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            michal = 7;
            michal = backup[michal];
            oscard = offset.bind(report)(michal);
            tangon = oscard.hexWithOpacity;
            michal = foxtra.borderColor;
            zuuluu = michal.color;
            michal = 0.08;
            output = tangon.bind(oscard)(zuuluu, michal);
            tangon = _closure1_slot6;
            zuuluu = _closure1_slot3;
            michal = {};
            oscard = foxtra.container;
            michal['style'] = oscard;
            yankee = _closure1_slot5;
            verify = 8;
            oscard = backup[verify];
            oscard = offset.bind(report)(oscard);
            golfie = oscard.Text;
            oscard = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-xs/bold'};
            option = foxtra.title;
            oscard['style'] = option;
            option = 9;
            sizing = backup[option];
            sizing = offset.bind(report)(sizing);
            result = sizing.intl;
            sizing = result.string;
            option = backup[option];
            option = offset.bind(report)(option);
            option = option.t;
            option = option.SDTOLy;
            option = sizing.bind(result)(option);
            oscard['children'] = option;
            golfie = yankee.bind(report)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = {};
            sizing = foxtra.itemContainer;
            option = new Array(2);
            option[0] = sizing;
            sizing = {};
            sizing['borderColor'] = output;
            option[1] = sizing;
            golfie['style'] = option;
            option = {};
            sizing = foxtra.guildInfo;
            option['style'] = sizing;
            sizing = _closure1_slot1;
            output = 10;
            kiloes = backup[output];
            sizing = sizing.bind(report)(kiloes);
            kiloes = {};
            kiloes['guild'] = echoed;
            output = backup[output];
            output = offset.bind(report)(output);
            output = output.GuildIconSizes;
            output = output.XXSMALL;
            kiloes['size'] = output;
            output = false;
            kiloes['selected'] = output;
            sizing = yankee.bind(report)(sizing, kiloes);
            kiloes = new Array(2);
            kiloes[0] = sizing;
            sizing = backup[verify];
            sizing = offset.bind(report)(sizing);
            output = sizing.Text;
            sizing = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            result = foxtra.guildName;
            sizing['style'] = result;
            result = echoed.toString;
            result = result.bind(echoed)();
            sizing['children'] = result;
            sizing = yankee.bind(report)(output, sizing);
            kiloes[1] = sizing;
            option['children'] = kiloes;
            kiloes = tangon.bind(report)(zuuluu, option);
            option = new Array(2);
            option[0] = kiloes;
            verify = backup[verify];
            verify = offset.bind(report)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-md/bold', 'color': 'header-primary'};
            foxtra = foxtra.eventName;
            verify['style'] = foxtra;
            romeon = romeon.name;
            verify['children'] = romeon;
            verify = yankee.bind(report)(offset, verify);
            option[1] = verify;
            golfie['children'] = option;
            golfie = tangon.bind(report)(zuuluu, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 547:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();