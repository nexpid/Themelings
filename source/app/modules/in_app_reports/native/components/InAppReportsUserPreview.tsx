// app/modules/in_app_reports/native/components/InAppReportsUserPreview.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignSelf': 'stretch', 'marginHorizontal': 16, 'marginBottom': 16};
    tangon['container'] = verify;
    verify = {};
    yankee = 4;
    offset = oscard[yankee];
    offset = romeon.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.HEADER_PRIMARY;
    verify['color'] = offset;
    tangon['borderColor'] = verify;
    offset = 8;
    verify = {'lineHeight': 16, 'marginBottom': 8};
    tangon['title'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'flex-start', 'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 12};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.sm;
    verify['borderRadius'] = yankee;
    tangon['userContainer'] = verify;
    verify = {};
    verify['marginLeft'] = offset;
    tangon['userProfileInfo'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/in_app_reports/native/components/InAppReportsUserPreview.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: UserPreview
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            foxtra = entity.user;
            entity = _closure1_slot6;
            tangon = undefined;
            verify = entity.bind(tangon)();
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 5;
            entity = sizing[entity];
            report = kiloes.bind(tangon)(entity);
            zuuluu = report.hexWithOpacity;
            entity = verify.borderColor;
            michal = entity.color;
            entity = 0.08;
            romeon = zuuluu.bind(report)(michal, entity);
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = verify.container;
            entity['style'] = report;
            yankee = _closure1_slot4;
            backup = 6;
            report = sizing[backup];
            report = kiloes.bind(tangon)(report);
            oscard = report.Text;
            report = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-xs/bold'};
            golfie = verify.title;
            report['style'] = golfie;
            golfie = 7;
            option = sizing[golfie];
            option = kiloes.bind(tangon)(option);
            output = option.intl;
            option = output.string;
            golfie = sizing[golfie];
            golfie = kiloes.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.Rsth7+;
            option = option.bind(output)(golfie);
            golfie = option.toUpperCase;
            golfie = golfie.bind(option)();
            report['children'] = golfie;
            oscard = yankee.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            option = verify.userContainer;
            golfie = new Array(2);
            golfie[0] = option;
            option = {};
            option['borderColor'] = romeon;
            golfie[1] = option;
            oscard['style'] = golfie;
            option = _closure1_slot1;
            romeon = 8;
            golfie = sizing[romeon];
            option = option.bind(tangon)(golfie);
            golfie = {};
            romeon = sizing[romeon];
            romeon = kiloes.bind(tangon)(romeon);
            romeon = romeon.AvatarSizes;
            romeon = romeon.LARGE_48;
            golfie['size'] = romeon;
            golfie['user'] = foxtra;
            golfie['guildId'] = tangon;
            option = yankee.bind(tangon)(option, golfie);
            golfie = new Array(2);
            golfie[0] = option;
            option = {};
            verify = verify.userProfileInfo;
            option['style'] = verify;
            yankee = foxtra.globalName;
            verify = null;
            yankee = verify != yankee;
            if(!yankee) { _fun00002_ip = 395; continue _fun00001 }
 339:
            kiloes = _closure1_slot4;
            romeon = _closure1_slot0;
            verify = _closure1_slot2;
            verify = verify[backup];
            verify = romeon.bind(tangon)(verify);
            romeon = verify.Text;
            verify = {'variant': 'text-md/semibold', 'color': 'header-primary'};
            sizing = foxtra.globalName;
            verify['children'] = sizing;
            yankee = kiloes.bind(tangon)(romeon, verify);
 395:
            verify = new Array(2);
            verify[0] = yankee;
            romeon = _closure1_slot4;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            offset = offset[backup];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.Text;
            offset = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            foxtra = foxtra.username;
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            option['children'] = verify;
            option = zuuluu.bind(tangon)(michal, option);
            golfie[1] = option;
            oscard['children'] = golfie;
            oscard = zuuluu.bind(tangon)(michal, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();