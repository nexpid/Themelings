// app/modules/in_app_reports/native/components/InAppReportsUserPreview.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'alignSelf': 'stretch', 'marginHorizontal': 16, 'marginBottom': 16};
    tango['container'] = verify;
    verify = {};
    yankee = 4;
    offset = oscar[yankee];
    offset = romeo.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.HEADER_PRIMARY;
    verify['color'] = offset;
    tango['borderColor'] = verify;
    offset = 8;
    verify = {'lineHeight': 16, 'marginBottom': 8};
    tango['title'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'flex-start', 'minHeight': 40, 'borderRadius': null, 'borderWidth': 1, 'padding': 12};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.sm;
    verify['borderRadius'] = yankee;
    tango['userContainer'] = verify;
    verify = {};
    verify['marginLeft'] = offset;
    tango['userProfileInfo'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/in_app_reports/native/components/InAppReportsUserPreview.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: UserPreview
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            foxtrot = entity.user;
            entity = _closure1_slot6;
            tango = undefined;
            verify = entity.bind(tango)();
            kilo = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 5;
            entity = sizing[entity];
            report = kilo.bind(tango)(entity);
            zulu = report.hexWithOpacity;
            entity = verify.borderColor;
            mike = entity.color;
            entity = 0.08;
            romeo = zulu.bind(report)(mike, entity);
            zulu = _closure1_slot5;
            mike = _closure1_slot3;
            entity = {};
            report = verify.container;
            entity['style'] = report;
            yankee = _closure1_slot4;
            backup = 6;
            report = sizing[backup];
            report = kilo.bind(tango)(report);
            oscar = report.Text;
            report = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-xs/bold'};
            golf = verify.title;
            report['style'] = golf;
            golf = 7;
            options = sizing[golf];
            options = kilo.bind(tango)(options);
            output = options.intl;
            options = output.string;
            golf = sizing[golf];
            golf = kilo.bind(tango)(golf);
            golf = golf.t;
            golf = golf.Rsth7+;
            options = options.bind(output)(golf);
            golf = options.toUpperCase;
            golf = golf.bind(options)();
            report['children'] = golf;
            oscar = yankee.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            options = verify.userContainer;
            golf = new Array(2);
            golf[0] = options;
            options = {};
            options['borderColor'] = romeo;
            golf[1] = options;
            oscar['style'] = golf;
            options = _closure1_slot1;
            romeo = 8;
            golf = sizing[romeo];
            options = options.bind(tango)(golf);
            golf = {};
            romeo = sizing[romeo];
            romeo = kilo.bind(tango)(romeo);
            romeo = romeo.AvatarSizes;
            romeo = romeo.LARGE_48;
            golf['size'] = romeo;
            golf['user'] = foxtrot;
            golf['guildId'] = tango;
            options = yankee.bind(tango)(options, golf);
            golf = new Array(2);
            golf[0] = options;
            options = {};
            verify = verify.userProfileInfo;
            options['style'] = verify;
            yankee = foxtrot.globalName;
            verify = null;
            yankee = verify != yankee;
            if(!yankee) { _fun00002_ip = 395; continue _fun00001 }
 339:
            kilo = _closure1_slot4;
            romeo = _closure1_slot0;
            verify = _closure1_slot2;
            verify = verify[backup];
            verify = romeo.bind(tango)(verify);
            romeo = verify.Text;
            verify = {'variant': 'text-md/semibold', 'color': 'header-primary'};
            sizing = foxtrot.globalName;
            verify['children'] = sizing;
            yankee = kilo.bind(tango)(romeo, verify);
 395:
            verify = new Array(2);
            verify[0] = yankee;
            romeo = _closure1_slot4;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            offset = offset[backup];
            offset = yankee.bind(tango)(offset);
            yankee = offset.Text;
            offset = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            foxtrot = foxtrot.username;
            offset['children'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            options['children'] = verify;
            options = zulu.bind(tango)(mike, options);
            golf[1] = options;
            oscar['children'] = golf;
            oscar = zulu.bind(tango)(mike, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();