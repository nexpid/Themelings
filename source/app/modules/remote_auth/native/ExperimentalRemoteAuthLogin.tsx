// app/modules/remote_auth/native/ExperimentalRemoteAuthLogin.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    kilo = 0;
    tango = oscar[kilo];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Image;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Endpoints;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    golf = {};
    tango = 16;
    foxtrot = 32;
    offset = {'marginTop': 16, 'marginBottom': 32};
    golf['mainImage'] = offset;
    offset = {};
    yankee = 'center';
    offset['textAlign'] = yankee;
    golf['header'] = offset;
    offset = {'fontSize': 16, 'lineHeight': 20, 'color': null, 'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    yankee = 6;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.unsafe_rawColors;
    backup = backup.RED_400;
    offset['color'] = backup;
    backup = 8;
    golf['warningCaption'] = offset;
    offset = {'lineHeight': 20, 'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    golf['caption'] = offset;
    offset = {};
    offset['flexGrow'] = kilo;
    golf['button'] = offset;
    offset = {};
    offset['marginBottom'] = backup;
    golf['loginButton'] = offset;
    offset = {};
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.xs;
    offset['borderRadius'] = backup;
    offset['marginBottom'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = yankee;
    yankee = 'none';
    offset['display'] = yankee;
    golf['temporaryToggle'] = offset;
    golf = options.bind(verify)(golf);
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/remote_auth/native/ExperimentalRemoteAuthLogin.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: DelayedRemoteAuthLogin
        _fun95317: for(var _fun95317_ip = 0; ; ) switch(_fun95317_ip) {
 0:
            entity = argFoo;
            mike = entity.handshakeToken;
            var _closure2_slot0 = mike;
            entity = entity.setAuthStep;
            var _closure2_slot1 = entity;
            entity = _closure1_slot10;
            tango = undefined;
            romeo = entity.bind(tango)();
            zulu = _closure1_slot4;
            entity = zulu.useState;
            golf = false;
            entity = entity.bind(zulu)(golf);
            oscar = _closure1_slot3;
            report = 2;
            entity = oscar.bind(tango)(entity, report);
            mike = 0;
            echo = entity[mike];
            sequence = 1;
            result = entity[sequence];
            entity = zulu.useState;
            entity = entity.bind(zulu)(golf);
            entity = oscar.bind(tango)(entity, report);
            offset = entity[mike];
            entity = entity[sequence];
            var _closure2_slot2 = entity;
            entity = zulu.useState;
            entity = entity.bind(zulu)(golf);
            entity = oscar.bind(tango)(entity, report);
            kilo = entity[mike];
            entity = entity[sequence];
            var _closure2_slot3 = entity;
            golf = zulu.useState;
            entity = 2000;
            entity = golf.bind(zulu)(entity);
            entity = oscar.bind(tango)(entity, report);
            config = entity[mike];
            var _closure2_slot4 = config;
            entity = entity[sequence];
            var _closure2_slot5 = entity;
            mike = zulu.useEffect;
            entity = function() {
                mike = global;
                report = mike.setInterval;
                tango = undefined;
                zulu = function() {
                    _fun95319: for(var _fun95319_ip = 0; ; ) switch(_fun95319_ip) {
 0:
                        zulu = _closure2_slot4;
                        mike = 0;
                        if(!(!(zulu > mike))) { _fun95319_ip = 48; continue _fun95319 }
 13:
                        zulu = _closure2_slot2;
                        tango = undefined;
                        mike = true;
                        mike = zulu.bind(tango)(mike);
                        mike = global;
                        zulu = mike.clearInterval;
                        mike = _closure3_slot0;
                        mike = zulu.bind(tango)(mike);
                        _fun95319_ip = 68; continue _fun95319;
 48:
                        zulu = _closure2_slot5;
                        mike = undefined;
                        entity = function(argFoo) {
                            mike = argFoo;
                            entity = 1000;
                            entity = mike - entity;
                            return entity;
                        };
                        entity = zulu.bind(mike)(entity);
 68:
                        entity = undefined;
                        return entity;
                    }
                };
                mike = 1000;
                mike = report.bind(tango)(zulu, mike);
                var _closure3_slot0 = mike;
                entity = function() {
                    entity = global;
                    zulu = entity.clearInterval;
                    mike = _closure3_slot0;
                    entity = undefined;
                    entity = zulu.bind(entity)(mike);
                    return entity;
                };
                return entity;
            };
            entity = mike.bind(zulu)(entity);
            golf = _closure1_slot1;
            oscar = _closure1_slot2;
            entity = 7;
            entity = oscar[entity];
            report = golf.bind(tango)(entity);
            zulu = report.throttle;
            mike = function() {
                zulu = _closure2_slot3;
                entity = undefined;
                oscar = true;
                zulu = zulu.bind(entity)(oscar);
                tango = _closure1_slot0;
                report = _closure1_slot2;
                zulu = 8;
                zulu = report[zulu];
                zulu = tango.bind(entity)(zulu);
                report = zulu.HTTP;
                tango = report.post;
                zulu = {};
                golf = _closure1_slot6;
                golf = golf.REMOTE_AUTH_FINISH;
                zulu['url'] = golf;
                golf = {};
                options = _closure2_slot0;
                golf['handshake_token'] = options;
                options = false;
                golf['temporary_token'] = options;
                zulu['body'] = golf;
                zulu['oldFormErrors'] = oscar;
                zulu['rejectWithError'] = oscar;
                report = tango.bind(report)(zulu);
                tango = report.then;
                zulu = function() {
                    zulu = _closure2_slot1;
                    tango = _closure1_slot0;
                    mike = _closure1_slot2;
                    entity = 9;
                    mike = mike[entity];
                    entity = undefined;
                    mike = tango.bind(entity)(mike);
                    mike = mike.RemoteAuthSteps;
                    mike = mike.SUCCEEDED;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                };
                tango = tango.bind(report)(zulu);
                zulu = tango.catch;
                mike = function() {
                    zulu = _closure2_slot1;
                    tango = _closure1_slot0;
                    mike = _closure1_slot2;
                    entity = 9;
                    mike = mike[entity];
                    entity = undefined;
                    mike = tango.bind(entity)(mike);
                    mike = mike.RemoteAuthSteps;
                    mike = mike.NOT_FOUND;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                };
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            vacuum = 1000;
            entity = {'leading': true, 'trailing': false};
            sizing = zulu.bind(report)(mike, vacuum, entity);
            zulu = _closure1_slot9;
            mike = _closure1_slot8;
            entity = {};
            options = _closure1_slot7;
            foxtrot = _closure1_slot5;
            report = {};
            backup = 10;
            backup = oscar[backup];
            backup = golf.bind(tango)(backup);
            report['source'] = backup;
            backup = romeo.mainImage;
            report['style'] = backup;
            foxtrot = options.bind(tango)(foxtrot, report);
            report = new Array(6);
            report[0] = foxtrot;
            record = _closure1_slot0;
            foxtrot = 11;
            backup = oscar[foxtrot];
            backup = record.bind(tango)(backup);
            update = backup.Text;
            output = {};
            backup = romeo.header;
            output['style'] = backup;
            backup = 'heading-xl/extrabold';
            output['variant'] = backup;
            backup = 12;
            source = oscar[backup];
            source = record.bind(tango)(source);
            context = source.intl;
            control = context.string;
            source = oscar[backup];
            source = record.bind(tango)(source);
            source = source.t;
            source = source.jD2pqK;
            source = control.bind(context)(source);
            output['children'] = source;
            output = options.bind(tango)(update, output);
            report[1] = output;
            foxtrot = oscar[foxtrot];
            foxtrot = record.bind(tango)(foxtrot);
            output = foxtrot.Text;
            foxtrot = {};
            update = 'text-md/normal';
            foxtrot['variant'] = update;
            update = romeo.warningCaption;
            foxtrot['style'] = update;
            update = oscar[backup];
            update = record.bind(tango)(update);
            control = update.intl;
            source = control.string;
            update = oscar[backup];
            update = record.bind(tango)(update);
            update = update.t;
            update = update.hcd/kp;
            update = source.bind(control)(update);
            foxtrot['children'] = update;
            foxtrot = options.bind(tango)(output, foxtrot);
            report[2] = foxtrot;
            foxtrot = 13;
            foxtrot = oscar[foxtrot];
            foxtrot = record.bind(tango)(foxtrot);
            output = foxtrot.FormSwitchRow;
            foxtrot = {};
            update = oscar[backup];
            update = record.bind(tango)(update);
            control = update.intl;
            source = control.string;
            update = oscar[backup];
            update = record.bind(tango)(update);
            update = update.t;
            update = update.UpAoQk;
            update = source.bind(control)(update);
            foxtrot['label'] = update;
            update = romeo.temporaryToggle;
            foxtrot['DEPRECATED_style'] = update;
            foxtrot['value'] = echo;
            foxtrot['onValueChange'] = result;
            foxtrot = options.bind(tango)(output, foxtrot);
            report[3] = foxtrot;
            foxtrot = 14;
            oscar = oscar[foxtrot];
            golf = golf.bind(tango)(oscar);
            oscar = {};
            result = romeo.button;
            output = new Array(2);
            output[0] = result;
            result = romeo.loginButton;
            output[1] = result;
            oscar['style'] = output;
            source = _closure1_slot0;
            result = _closure1_slot2;
            output = result[backup];
            output = source.bind(tango)(output);
            update = output.intl;
            if(offset) { _fun95317_ip = 717; continue _fun95317 }
 669:
            control = update.formatToPlainString;
            output = result[backup];
            output = source.bind(tango)(output);
            output = output.t;
            echo = output.Sfu1tb;
            output = {};
            vacuum = config / vacuum;
            vacuum = vacuum + sequence;
            output['seconds'] = vacuum;
            output = control.bind(update)(echo, output);
            _fun95317_ip = 747; continue _fun95317;
 717:
            echo = update.string;
            result = result[backup];
            result = source.bind(tango)(result);
            result = result.t;
            result = result.N3qV8f;
            output = echo.bind(update)(result);
 747:
            oscar['text'] = output;
            oscar['onPress'] = sizing;
            offset = !offset;
            if(!offset) { _fun95317_ip = 764; continue _fun95317 }
 761:
            offset = !kilo;
 764:
            oscar['disabled'] = offset;
            oscar = options.bind(tango)(golf, oscar);
            report[4] = oscar;
            options = _closure1_slot7;
            kilo = _closure1_slot1;
            offset = _closure1_slot2;
            oscar = offset[foxtrot];
            golf = kilo.bind(tango)(oscar);
            oscar = {};
            foxtrot = offset[foxtrot];
            foxtrot = kilo.bind(tango)(foxtrot);
            foxtrot = foxtrot.Colors;
            foxtrot = foxtrot.TRANSPARENT;
            oscar['color'] = foxtrot;
            romeo = romeo.button;
            oscar['style'] = romeo;
            foxtrot = _closure1_slot0;
            yankee = offset[backup];
            yankee = foxtrot.bind(tango)(yankee);
            romeo = yankee.intl;
            yankee = romeo.string;
            offset = offset[backup];
            offset = foxtrot.bind(tango)(offset);
            offset = offset.t;
            offset = offset.ETE/oK;
            offset = yankee.bind(romeo)(offset);
            oscar['text'] = offset;
            verify = function() { // Original name: onPress
                report = _closure1_slot0;
                tango = _closure1_slot2;
                entity = 8;
                zulu = tango[entity];
                entity = undefined;
                zulu = report.bind(entity)(zulu);
                oscar = zulu.HTTP;
                report = oscar.post;
                zulu = {};
                golf = _closure1_slot6;
                golf = golf.REMOTE_AUTH_CANCEL;
                zulu['url'] = golf;
                golf = {};
                options = _closure2_slot0;
                golf['handshake_token'] = options;
                zulu['body'] = golf;
                golf = true;
                zulu['oldFormErrors'] = golf;
                zulu['rejectWithError'] = golf;
                zulu = report.bind(oscar)(zulu);
                zulu = _closure1_slot1;
                mike = 15;
                mike = tango[mike];
                zulu = zulu.bind(entity)(mike);
                mike = zulu.pop;
                mike = mike.bind(zulu)();
                return entity;
            };
            oscar['onPress'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[5] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();