// app/modules/remote_auth/native/ExperimentalRemoteAuthLogin.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    kiloes = 0;
    tangon = oscard[kiloes];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Image;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Endpoints;
    var _closure1_slot6 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.Fragment;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = 16;
    foxtra = 32;
    offset = {'marginTop': 16, 'marginBottom': 32};
    golfie['mainImage'] = offset;
    offset = {};
    yankee = 'center';
    offset['textAlign'] = yankee;
    golfie['header'] = offset;
    offset = {'fontSize': 16, 'lineHeight': 20, 'color': null, 'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    yankee = 6;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.unsafe_rawColors;
    backup = backup.RED_400;
    offset['color'] = backup;
    backup = 8;
    golfie['warningCaption'] = offset;
    offset = {'lineHeight': 20, 'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    golfie['caption'] = offset;
    offset = {};
    offset['flexGrow'] = kiloes;
    golfie['button'] = offset;
    offset = {};
    offset['marginBottom'] = backup;
    golfie['loginButton'] = offset;
    offset = {};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.xs;
    offset['borderRadius'] = backup;
    offset['marginBottom'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = yankee;
    yankee = 'none';
    offset['display'] = yankee;
    golfie['temporaryToggle'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/remote_auth/native/ExperimentalRemoteAuthLogin.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: DelayedRemoteAuthLogin
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.handshakeToken;
            var _closure2_slot0 = michal;
            entity = entity.setAuthStep;
            var _closure2_slot1 = entity;
            entity = _closure1_slot10;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            zuuluu = _closure1_slot4;
            entity = zuuluu.useState;
            golfie = false;
            entity = entity.bind(zuuluu)(golfie);
            oscard = _closure1_slot3;
            report = 2;
            entity = oscard.bind(tangon)(entity, report);
            michal = 0;
            echoed = entity[michal];
            sequen = 1;
            result = entity[sequen];
            entity = zuuluu.useState;
            entity = entity.bind(zuuluu)(golfie);
            entity = oscard.bind(tangon)(entity, report);
            offset = entity[michal];
            entity = entity[sequen];
            var _closure2_slot2 = entity;
            entity = zuuluu.useState;
            entity = entity.bind(zuuluu)(golfie);
            entity = oscard.bind(tangon)(entity, report);
            kiloes = entity[michal];
            entity = entity[sequen];
            var _closure2_slot3 = entity;
            golfie = zuuluu.useState;
            entity = 2000;
            entity = golfie.bind(zuuluu)(entity);
            entity = oscard.bind(tangon)(entity, report);
            config = entity[michal];
            var _closure2_slot4 = config;
            entity = entity[sequen];
            var _closure2_slot5 = entity;
            michal = zuuluu.useEffect;
            entity = function() {
                michal = global;
                report = michal.setInterval;
                tangon = undefined;
                zuuluu = function() {
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        zuuluu = _closure2_slot4;
                        michal = 0;
                        if(!(!(zuuluu > michal))) { _fun00004_ip = 48; continue _fun00003 }
 13:
                        zuuluu = _closure2_slot2;
                        tangon = undefined;
                        michal = true;
                        michal = zuuluu.bind(tangon)(michal);
                        michal = global;
                        zuuluu = michal.clearInterval;
                        michal = _closure3_slot0;
                        michal = zuuluu.bind(tangon)(michal);
                        _fun00004_ip = 68; continue _fun00003;
 48:
                        zuuluu = _closure2_slot5;
                        michal = undefined;
                        entity = function(argFoo) {
                            michal = argFoo;
                            entity = 1000;
                            entity = michal - entity;
                            return entity;
                        };
                        entity = zuuluu.bind(michal)(entity);
 68:
                        entity = undefined;
                        return entity;
                    }
                };
                michal = 1000;
                michal = report.bind(tangon)(zuuluu, michal);
                var _closure3_slot0 = michal;
                entity = function() {
                    entity = global;
                    zuuluu = entity.clearInterval;
                    michal = _closure3_slot0;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
                    return entity;
                };
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
            golfie = _closure1_slot1;
            oscard = _closure1_slot2;
            entity = 7;
            entity = oscard[entity];
            report = golfie.bind(tangon)(entity);
            zuuluu = report.throttle;
            michal = function() {
                zuuluu = _closure2_slot3;
                entity = undefined;
                oscard = true;
                zuuluu = zuuluu.bind(entity)(oscard);
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                zuuluu = 8;
                zuuluu = report[zuuluu];
                zuuluu = tangon.bind(entity)(zuuluu);
                report = zuuluu.HTTP;
                tangon = report.post;
                zuuluu = {};
                golfie = _closure1_slot6;
                golfie = golfie.REMOTE_AUTH_FINISH;
                zuuluu['url'] = golfie;
                golfie = {};
                option = _closure2_slot0;
                golfie['handshake_token'] = option;
                option = false;
                golfie['temporary_token'] = option;
                zuuluu['body'] = golfie;
                zuuluu['oldFormErrors'] = oscard;
                zuuluu['rejectWithError'] = oscard;
                report = tangon.bind(report)(zuuluu);
                tangon = report.then;
                zuuluu = function() {
                    zuuluu = _closure2_slot1;
                    tangon = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 9;
                    michal = michal[entity];
                    entity = undefined;
                    michal = tangon.bind(entity)(michal);
                    michal = michal.RemoteAuthSteps;
                    michal = michal.SUCCEEDED;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                tangon = tangon.bind(report)(zuuluu);
                zuuluu = tangon.catch;
                michal = function() {
                    zuuluu = _closure2_slot1;
                    tangon = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 9;
                    michal = michal[entity];
                    entity = undefined;
                    michal = tangon.bind(entity)(michal);
                    michal = michal.RemoteAuthSteps;
                    michal = michal.NOT_FOUND;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            vacuum = 1000;
            entity = {'leading': true, 'trailing': false};
            sizing = zuuluu.bind(report)(michal, vacuum, entity);
            zuuluu = _closure1_slot9;
            michal = _closure1_slot8;
            entity = {};
            option = _closure1_slot7;
            foxtra = _closure1_slot5;
            report = {};
            backup = 10;
            backup = oscard[backup];
            backup = golfie.bind(tangon)(backup);
            report['source'] = backup;
            backup = romeon.mainImage;
            report['style'] = backup;
            foxtra = option.bind(tangon)(foxtra, report);
            report = new Array(6);
            report[0] = foxtra;
            record = _closure1_slot0;
            foxtra = 11;
            backup = oscard[foxtra];
            backup = record.bind(tangon)(backup);
            update = backup.Text;
            output = {};
            backup = romeon.header;
            output['style'] = backup;
            backup = 'heading-xl/extrabold';
            output['variant'] = backup;
            backup = 12;
            source = oscard[backup];
            source = record.bind(tangon)(source);
            cntext = source.intl;
            ctrled = cntext.string;
            source = oscard[backup];
            source = record.bind(tangon)(source);
            source = source.t;
            source = source.jD2pqK;
            source = ctrled.bind(cntext)(source);
            output['children'] = source;
            output = option.bind(tangon)(update, output);
            report[1] = output;
            foxtra = oscard[foxtra];
            foxtra = record.bind(tangon)(foxtra);
            output = foxtra.Text;
            foxtra = {};
            update = 'text-md/normal';
            foxtra['variant'] = update;
            update = romeon.warningCaption;
            foxtra['style'] = update;
            update = oscard[backup];
            update = record.bind(tangon)(update);
            ctrled = update.intl;
            source = ctrled.string;
            update = oscard[backup];
            update = record.bind(tangon)(update);
            update = update.t;
            update = update.hcd/kp;
            update = source.bind(ctrled)(update);
            foxtra['children'] = update;
            foxtra = option.bind(tangon)(output, foxtra);
            report[2] = foxtra;
            foxtra = 13;
            foxtra = oscard[foxtra];
            foxtra = record.bind(tangon)(foxtra);
            output = foxtra.FormSwitchRow;
            foxtra = {};
            update = oscard[backup];
            update = record.bind(tangon)(update);
            ctrled = update.intl;
            source = ctrled.string;
            update = oscard[backup];
            update = record.bind(tangon)(update);
            update = update.t;
            update = update.UpAoQk;
            update = source.bind(ctrled)(update);
            foxtra['label'] = update;
            update = romeon.temporaryToggle;
            foxtra['DEPRECATED_style'] = update;
            foxtra['value'] = echoed;
            foxtra['onValueChange'] = result;
            foxtra = option.bind(tangon)(output, foxtra);
            report[3] = foxtra;
            foxtra = 14;
            oscard = oscard[foxtra];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            result = romeon.button;
            output = new Array(2);
            output[0] = result;
            result = romeon.loginButton;
            output[1] = result;
            oscard['style'] = output;
            source = _closure1_slot0;
            result = _closure1_slot2;
            output = result[backup];
            output = source.bind(tangon)(output);
            update = output.intl;
            if(offset) { _fun00002_ip = 719; continue _fun00001 }
 669:
            ctrled = update.formatToPlainString;
            output = result[backup];
            output = source.bind(tangon)(output);
            output = output.t;
            echoed = output.Sfu1tb;
            output = {};
            vacuum = config / vacuum;
            vacuum = vacuum + sequen;
            output['seconds'] = vacuum;
            output = ctrled.bind(update)(echoed, output);
            _fun00002_ip = 749; continue _fun00001;
 719:
            echoed = update.string;
            result = result[backup];
            result = source.bind(tangon)(result);
            result = result.t;
            result = result.N3qV8f;
            output = echoed.bind(update)(result);
 749:
            oscard['text'] = output;
            oscard['onPress'] = sizing;
            offset = !offset;
            if(!offset) { _fun00002_ip = 766; continue _fun00001 }
 763:
            offset = !kiloes;
 766:
            oscard['disabled'] = offset;
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            option = _closure1_slot7;
            kiloes = _closure1_slot1;
            offset = _closure1_slot2;
            oscard = offset[foxtra];
            golfie = kiloes.bind(tangon)(oscard);
            oscard = {};
            foxtra = offset[foxtra];
            foxtra = kiloes.bind(tangon)(foxtra);
            foxtra = foxtra.Colors;
            foxtra = foxtra.TRANSPARENT;
            oscard['color'] = foxtra;
            romeon = romeon.button;
            oscard['style'] = romeon;
            foxtra = _closure1_slot0;
            yankee = offset[backup];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = offset[backup];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.ETE/oK;
            offset = yankee.bind(romeon)(offset);
            oscard['text'] = offset;
            verify = function() { // Original name: onPress
                report = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 8;
                zuuluu = tangon[entity];
                entity = undefined;
                zuuluu = report.bind(entity)(zuuluu);
                oscard = zuuluu.HTTP;
                report = oscard.post;
                zuuluu = {};
                golfie = _closure1_slot6;
                golfie = golfie.REMOTE_AUTH_CANCEL;
                zuuluu['url'] = golfie;
                golfie = {};
                option = _closure2_slot0;
                golfie['handshake_token'] = option;
                zuuluu['body'] = golfie;
                golfie = true;
                zuuluu['oldFormErrors'] = golfie;
                zuuluu['rejectWithError'] = golfie;
                zuuluu = report.bind(oscard)(zuuluu);
                zuuluu = _closure1_slot1;
                michal = 15;
                michal = tangon[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.pop;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            oscard['onPress'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[5] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();