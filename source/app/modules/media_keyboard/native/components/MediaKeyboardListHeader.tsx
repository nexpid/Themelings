// app/modules/media_keyboard/native/components/MediaKeyboardListHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    backup = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    report = golfie[entity];
    michal = argCor;
    entity = undefined;
    option = michal.bind(entity)(report);
    var _closure1_slot3 = option;
    michal = 1;
    michal = golfie[michal];
    michal = backup.bind(entity)(michal);
    var _closure1_slot4 = michal;
    romeon = 2;
    michal = golfie[romeon];
    michal = oscard.bind(entity)(michal);
    foxtra = michal.HEADER_HANDLE_HEIGHT;
    michal = 3;
    report = golfie[michal];
    report = oscard.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot5 = report;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.jsxs;
    var _closure1_slot6 = michal;
    michal = {'mass': 0.1, 'damping': 13, 'stiffness': 270, 'overshootClamping': true};
    var _closure1_slot7 = michal;
    michal = 4;
    michal = golfie[michal];
    offset = oscard.bind(entity)(michal);
    verify = offset.createStyles;
    report = {};
    yankee = {'flex': 1, 'flexDirection': 'row', 'overflow': 'hidden', 'paddingHorizontal': null, 'paddingBottom': 16, 'gap': 8, 'top': null, 'left': 0, 'right': 0};
    michal = 5;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.PARENT_PADDING;
    michal = michal / romeon;
    yankee['paddingHorizontal'] = michal;
    michal = 16;
    romeon = 8;
    yankee['top'] = foxtra;
    report['header'] = yankee;
    yankee = {};
    foxtra = 6;
    foxtra = golfie[foxtra];
    foxtra = backup.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.INTERACTIVE_NORMAL;
    yankee['tintColor'] = foxtra;
    yankee['marginRight'] = romeon;
    report['headerIcon'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot8 = report;
    report = {};
    verify = 'function MediaKeyboardListHeaderTsx1(){const{animatedIndex,animatedIndexThreshold,animatedSnapPoints,reducedMotion,withSpring,HEADER_SPRING}=this.__closure;const nearTop=animatedIndex.get()>animatedIndexThreshold(animatedSnapPoints,0.7);const targetOpacity=nearTop?0:1;const targetTranslateY=nearTop?30:0;const targetScale=nearTop?0.9:1;return{opacity:reducedMotion?targetOpacity:withSpring(targetOpacity,HEADER_SPRING),transform:[{translateY:reducedMotion?targetTranslateY:withSpring(targetTranslateY,HEADER_SPRING)},{scale:reducedMotion?targetScale:withSpring(targetScale,HEADER_SPRING)}]};}';
    report['code'] = verify;
    var _closure1_slot9 = report;
    report = {};
    verify = "function MediaKeyboardListHeaderTsx2(){const{animatedIndex,animatedIndexThreshold,animatedSnapPoints}=this.__closure;return{pointerEvents:animatedIndex.get()<animatedIndexThreshold(animatedSnapPoints,0.5)?'auto':'none'};}";
    report['code'] = verify;
    var _closure1_slot10 = report;
    report = option.memo;
    tangon = function(argFoo) { // Original name: MediaKeyboardListHeader
        entity = argFoo;
        echoed = entity.animatedIndex;
        var _closure2_slot0 = echoed;
        romeon = entity.disablePolls;
        verify = entity.disableAttach;
        offset = entity.onAttachPress;
        foxtra = entity.onPollsPress;
        entity = _closure1_slot8;
        tangon = undefined;
        sizing = entity.bind(tangon)();
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        entity = 7;
        entity = kiloes[entity];
        golfie = backup.bind(tangon)(entity);
        oscard = golfie.useStateFromStores;
        entity = _closure1_slot4;
        michal = new Array(1);
        michal[0] = entity;
        entity = function() {
            entity = _closure1_slot4;
            entity = entity.useReducedMotion;
            return entity;
        };
        yankee = oscard.bind(golfie)(michal, entity);
        var _closure2_slot1 = yankee;
        entity = 8;
        entity = kiloes[entity];
        michal = backup.bind(tangon)(entity);
        entity = michal.useBottomSheetInternal;
        entity = entity.bind(michal)();
        output = entity.animatedSnapPoints;
        var _closure2_slot2 = output;
        entity = 9;
        michal = kiloes[entity];
        golfie = backup.bind(tangon)(michal);
        oscard = golfie.useAnimatedStyle;
        michal = function() { // Original name: P
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                michal = _closure2_slot0;
                entity = michal.get;
                michal = entity.bind(michal)();
                zuuluu = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 10;
                entity = oscard[entity];
                verify = undefined;
                golfie = zuuluu.bind(verify)(entity);
                oscard = golfie.animatedIndexThreshold;
                zuuluu = _closure2_slot2;
                entity = 0.7;
                entity = oscard.bind(golfie)(zuuluu, entity);
                entity = michal > entity;
                option = 1;
                offset = option;
                if(!entity) { _fun00002_ip = 82; continue _fun00001 }
 80:
                offset = 0;
 82:
                yankee = 0;
                if(!entity) { _fun00002_ip = 90; continue _fun00001 }
 87:
                yankee = 30;
 90:
                if(!entity) { _fun00002_ip = 103; continue _fun00001 }
 93:
                option = 0.9;
 103:
                entity = {};
                zuuluu = _closure2_slot1;
                michal = offset;
                if(zuuluu) { _fun00002_ip = 150; continue _fun00001 }
 115:
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                zuuluu = 11;
                zuuluu = golfie[zuuluu];
                golfie = oscard.bind(verify)(zuuluu);
                oscard = golfie.withSpring;
                zuuluu = _closure1_slot7;
                michal = oscard.bind(golfie)(offset, zuuluu);
 150:
                entity['opacity'] = michal;
                zuuluu = {};
                oscard = _closure2_slot1;
                michal = yankee;
                if(oscard) { _fun00002_ip = 201; continue _fun00001 }
 166:
                golfie = _closure1_slot0;
                offset = _closure1_slot2;
                oscard = 11;
                oscard = offset[oscard];
                offset = golfie.bind(verify)(oscard);
                golfie = offset.withSpring;
                oscard = _closure1_slot7;
                michal = golfie.bind(offset)(yankee, oscard);
 201:
                zuuluu['translateY'] = michal;
                michal = new Array(2);
                michal[0] = zuuluu;
                zuuluu = {};
                oscard = _closure2_slot1;
                tangon = option;
                if(oscard) { _fun00002_ip = 261; continue _fun00001 }
 226:
                golfie = _closure1_slot0;
                offset = _closure1_slot2;
                oscard = 11;
                oscard = offset[oscard];
                golfie = golfie.bind(verify)(oscard);
                oscard = golfie.withSpring;
                report = _closure1_slot7;
                tangon = oscard.bind(golfie)(option, report);
 261:
                zuuluu['scale'] = tangon;
                michal[1] = zuuluu;
                entity['transform'] = michal;
                return entity;
            }
        };
        option = {};
        option['animatedIndex'] = echoed;
        result = 10;
        update = kiloes[result];
        update = backup.bind(tangon)(update);
        update = update.animatedIndexThreshold;
        option['animatedIndexThreshold'] = update;
        option['animatedSnapPoints'] = output;
        option['reducedMotion'] = yankee;
        yankee = 11;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        yankee = yankee.withSpring;
        option['withSpring'] = yankee;
        yankee = _closure1_slot7;
        option['HEADER_SPRING'] = yankee;
        michal['__closure'] = option;
        option = 16608464052974.0;
        michal['__workletHash'] = option;
        option = _closure1_slot9;
        michal['__initData'] = option;
        yankee = oscard.bind(golfie)(michal);
        michal = kiloes[entity];
        golfie = backup.bind(tangon)(michal);
        oscard = golfie.useAnimatedProps;
        michal = function() { // Original name: T
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = {};
                tangon = _closure2_slot0;
                zuuluu = tangon.get;
                zuuluu = zuuluu.bind(tangon)();
                oscard = _closure1_slot0;
                report = _closure1_slot2;
                tangon = 10;
                report = report[tangon];
                tangon = undefined;
                oscard = oscard.bind(tangon)(report);
                report = oscard.animatedIndexThreshold;
                tangon = _closure2_slot2;
                michal = 0.5;
                michal = report.bind(oscard)(tangon, michal);
                zuuluu = zuuluu < michal;
                michal = 'none';
                if(!zuuluu) { _fun00004_ip = 84; continue _fun00003 }
 80:
                michal = 'auto';
 84:
                entity['pointerEvents'] = michal;
                return entity;
            }
        };
        option = {};
        option['animatedIndex'] = echoed;
        result = kiloes[result];
        result = backup.bind(tangon)(result);
        result = result.animatedIndexThreshold;
        option['animatedIndexThreshold'] = result;
        option['animatedSnapPoints'] = output;
        michal['__closure'] = option;
        option = 1463681350701.0;
        michal['__workletHash'] = option;
        option = _closure1_slot10;
        michal['__initData'] = option;
        oscard = oscard.bind(golfie)(michal);
        michal = 12;
        golfie = kiloes[michal];
        option = backup.bind(tangon)(golfie);
        golfie = option.useGradientBottom;
        result = golfie.bind(option)();
        var _closure2_slot3 = result;
        output = _closure1_slot3;
        option = output.useMemo;
        golfie = new Array(1);
        golfie[0] = result;
        zuuluu = function() {
            entity = {};
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            michal = 6;
            zuuluu = zuuluu[michal];
            michal = undefined;
            michal = tangon.bind(michal)(zuuluu);
            michal = michal.spacing;
            michal = michal.PX_4;
            entity['marginBottom'] = michal;
            report = _closure2_slot3;
            oscard = entity;
            michal = copyDataProperties(oscard, report);
            return entity;
        };
        golfie = option.bind(output)(zuuluu, golfie);
        michal = kiloes[michal];
        zuuluu = backup.bind(tangon)(michal);
        michal = zuuluu.useClientThemesOverride;
        option = michal.bind(zuuluu)(golfie);
        zuuluu = _closure1_slot6;
        michal = _closure1_slot1;
        entity = kiloes[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.View;
        entity = {};
        output = sizing.header;
        golfie = new Array(3);
        golfie[0] = output;
        golfie[1] = yankee;
        golfie[2] = option;
        entity['style'] = golfie;
        entity['animatedProps'] = oscard;
        option = _closure1_slot5;
        oscard = 13;
        report = kiloes[oscard];
        report = backup.bind(tangon)(report);
        golfie = report.Button;
        report = {'icon': null, 'text': null, 'onPress': null, 'variant': 'secondary', 'size': 'md', 'grow': true};
        yankee = 14;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        result = yankee.PollsIcon;
        yankee = {};
        output = 'sm';
        yankee['size'] = output;
        echoed = sizing.headerIcon;
        yankee['style'] = echoed;
        yankee = option.bind(tangon)(result, yankee);
        report['icon'] = yankee;
        yankee = 15;
        result = kiloes[yankee];
        result = backup.bind(tangon)(result);
        update = result.intl;
        echoed = update.string;
        result = kiloes[yankee];
        result = backup.bind(tangon)(result);
        result = result.t;
        result = result.h3Y3zc;
        result = echoed.bind(update)(result);
        report['text'] = result;
        report['onPress'] = foxtra;
        report['disabled'] = romeon;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        oscard = kiloes[oscard];
        oscard = backup.bind(tangon)(oscard);
        golfie = oscard.Button;
        oscard = {'icon': null, 'text': null, 'onPress': null, 'variant': 'secondary', 'size': 'md', 'grow': true};
        romeon = 16;
        romeon = kiloes[romeon];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.AttachmentIcon;
        romeon = {};
        romeon['size'] = output;
        sizing = sizing.headerIcon;
        romeon['style'] = sizing;
        romeon = option.bind(tangon)(foxtra, romeon);
        oscard['icon'] = romeon;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.8Hvr39;
        yankee = romeon.bind(foxtra)(yankee);
        oscard['text'] = yankee;
        oscard['onPress'] = offset;
        oscard['disabled'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    tangon = report.bind(option)(tangon);
    report = 17;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/media_keyboard/native/components/MediaKeyboardListHeader.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['HEADER_PADDING_BOTTOM'] = michal;
    return entity;
})();