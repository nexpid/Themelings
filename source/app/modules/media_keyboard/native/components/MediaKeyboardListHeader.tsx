// app/modules/media_keyboard/native/components/MediaKeyboardListHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    backup = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, mike);
    entity = 0;
    report = golf[entity];
    mike = argCorge;
    entity = undefined;
    options = mike.bind(entity)(report);
    var _closure1_slot3 = options;
    mike = 1;
    mike = golf[mike];
    mike = backup.bind(entity)(mike);
    var _closure1_slot4 = mike;
    romeo = 2;
    mike = golf[romeo];
    mike = oscar.bind(entity)(mike);
    foxtrot = mike.HEADER_HANDLE_HEIGHT;
    mike = 3;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot5 = report;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot6 = mike;
    mike = {'mass': 0.1, 'damping': 13, 'stiffness': 270, 'overshootClamping': true};
    var _closure1_slot7 = mike;
    mike = 4;
    mike = golf[mike];
    offset = oscar.bind(entity)(mike);
    verify = offset.createStyles;
    report = {};
    yankee = {'flex': 1, 'flexDirection': 'row', 'overflow': 'hidden', 'paddingHorizontal': null, 'paddingBottom': 16, 'gap': 8, 'top': null, 'left': 0, 'right': 0};
    mike = 5;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.PARENT_PADDING;
    mike = mike / romeo;
    yankee['paddingHorizontal'] = mike;
    mike = 16;
    romeo = 8;
    yankee['top'] = foxtrot;
    report['header'] = yankee;
    yankee = {};
    foxtrot = 6;
    foxtrot = golf[foxtrot];
    foxtrot = backup.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.INTERACTIVE_NORMAL;
    yankee['tintColor'] = foxtrot;
    yankee['marginRight'] = romeo;
    report['headerIcon'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot8 = report;
    report = {};
    verify = 'function MediaKeyboardListHeaderTsx1(){const{animatedIndex,animatedIndexThreshold,animatedSnapPoints,reducedMotion,withSpring,HEADER_SPRING}=this.__closure;const nearTop=animatedIndex.get()>animatedIndexThreshold(animatedSnapPoints,0.7);const targetOpacity=nearTop?0:1;const targetTranslateY=nearTop?30:0;const targetScale=nearTop?0.9:1;return{opacity:reducedMotion?targetOpacity:withSpring(targetOpacity,HEADER_SPRING),transform:[{translateY:reducedMotion?targetTranslateY:withSpring(targetTranslateY,HEADER_SPRING)},{scale:reducedMotion?targetScale:withSpring(targetScale,HEADER_SPRING)}]};}';
    report['code'] = verify;
    var _closure1_slot9 = report;
    report = {};
    verify = "function MediaKeyboardListHeaderTsx2(){const{animatedIndex,animatedIndexThreshold,animatedSnapPoints}=this.__closure;return{pointerEvents:animatedIndex.get()<animatedIndexThreshold(animatedSnapPoints,0.5)?'auto':'none'};}";
    report['code'] = verify;
    var _closure1_slot10 = report;
    report = options.memo;
    tango = function(argFoo) { // Original name: MediaKeyboardListHeader
        entity = argFoo;
        echo = entity.animatedIndex;
        var _closure2_slot0 = echo;
        romeo = entity.disablePolls;
        verify = entity.disableAttach;
        offset = entity.onAttachPress;
        foxtrot = entity.onPollsPress;
        entity = _closure1_slot8;
        tango = undefined;
        sizing = entity.bind(tango)();
        backup = _closure1_slot0;
        kilo = _closure1_slot2;
        entity = 7;
        entity = kilo[entity];
        golf = backup.bind(tango)(entity);
        oscar = golf.useStateFromStores;
        entity = _closure1_slot4;
        mike = new Array(1);
        mike[0] = entity;
        entity = function() {
            entity = _closure1_slot4;
            entity = entity.useReducedMotion;
            return entity;
        };
        yankee = oscar.bind(golf)(mike, entity);
        var _closure2_slot1 = yankee;
        entity = 8;
        entity = kilo[entity];
        mike = backup.bind(tango)(entity);
        entity = mike.useBottomSheetInternal;
        entity = entity.bind(mike)();
        output = entity.animatedSnapPoints;
        var _closure2_slot2 = output;
        entity = 9;
        mike = kilo[entity];
        golf = backup.bind(tango)(mike);
        oscar = golf.useAnimatedStyle;
        mike = function() { // Original name: P
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                mike = _closure2_slot0;
                entity = mike.get;
                mike = entity.bind(mike)();
                zulu = _closure1_slot0;
                oscar = _closure1_slot2;
                entity = 10;
                entity = oscar[entity];
                verify = undefined;
                golf = zulu.bind(verify)(entity);
                oscar = golf.animatedIndexThreshold;
                zulu = _closure2_slot2;
                entity = 0.7;
                entity = oscar.bind(golf)(zulu, entity);
                entity = mike > entity;
                options = 1;
                offset = options;
                if(!entity) { _fun00002_ip = 82; continue _fun00001 }
 80:
                offset = 0;
 82:
                yankee = 0;
                if(!entity) { _fun00002_ip = 90; continue _fun00001 }
 87:
                yankee = 30;
 90:
                if(!entity) { _fun00002_ip = 103; continue _fun00001 }
 93:
                options = 0.9;
 103:
                entity = {};
                zulu = _closure2_slot1;
                mike = offset;
                if(zulu) { _fun00002_ip = 150; continue _fun00001 }
 115:
                oscar = _closure1_slot0;
                golf = _closure1_slot2;
                zulu = 11;
                zulu = golf[zulu];
                golf = oscar.bind(verify)(zulu);
                oscar = golf.withSpring;
                zulu = _closure1_slot7;
                mike = oscar.bind(golf)(offset, zulu);
 150:
                entity['opacity'] = mike;
                zulu = {};
                oscar = _closure2_slot1;
                mike = yankee;
                if(oscar) { _fun00002_ip = 201; continue _fun00001 }
 166:
                golf = _closure1_slot0;
                offset = _closure1_slot2;
                oscar = 11;
                oscar = offset[oscar];
                offset = golf.bind(verify)(oscar);
                golf = offset.withSpring;
                oscar = _closure1_slot7;
                mike = golf.bind(offset)(yankee, oscar);
 201:
                zulu['translateY'] = mike;
                mike = new Array(2);
                mike[0] = zulu;
                zulu = {};
                oscar = _closure2_slot1;
                tango = options;
                if(oscar) { _fun00002_ip = 261; continue _fun00001 }
 226:
                golf = _closure1_slot0;
                offset = _closure1_slot2;
                oscar = 11;
                oscar = offset[oscar];
                golf = golf.bind(verify)(oscar);
                oscar = golf.withSpring;
                report = _closure1_slot7;
                tango = oscar.bind(golf)(options, report);
 261:
                zulu['scale'] = tango;
                mike[1] = zulu;
                entity['transform'] = mike;
                return entity;
            }
        };
        options = {};
        options['animatedIndex'] = echo;
        result = 10;
        update = kilo[result];
        update = backup.bind(tango)(update);
        update = update.animatedIndexThreshold;
        options['animatedIndexThreshold'] = update;
        options['animatedSnapPoints'] = output;
        options['reducedMotion'] = yankee;
        yankee = 11;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        yankee = yankee.withSpring;
        options['withSpring'] = yankee;
        yankee = _closure1_slot7;
        options['HEADER_SPRING'] = yankee;
        mike['__closure'] = options;
        options = 16608464052974.0;
        mike['__workletHash'] = options;
        options = _closure1_slot9;
        mike['__initData'] = options;
        yankee = oscar.bind(golf)(mike);
        mike = kilo[entity];
        golf = backup.bind(tango)(mike);
        oscar = golf.useAnimatedProps;
        mike = function() { // Original name: T
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = {};
                tango = _closure2_slot0;
                zulu = tango.get;
                zulu = zulu.bind(tango)();
                oscar = _closure1_slot0;
                report = _closure1_slot2;
                tango = 10;
                report = report[tango];
                tango = undefined;
                oscar = oscar.bind(tango)(report);
                report = oscar.animatedIndexThreshold;
                tango = _closure2_slot2;
                mike = 0.5;
                mike = report.bind(oscar)(tango, mike);
                zulu = zulu < mike;
                mike = 'none';
                if(!zulu) { _fun00004_ip = 84; continue _fun00003 }
 80:
                mike = 'auto';
 84:
                entity['pointerEvents'] = mike;
                return entity;
            }
        };
        options = {};
        options['animatedIndex'] = echo;
        result = kilo[result];
        result = backup.bind(tango)(result);
        result = result.animatedIndexThreshold;
        options['animatedIndexThreshold'] = result;
        options['animatedSnapPoints'] = output;
        mike['__closure'] = options;
        options = 1463681350701.0;
        mike['__workletHash'] = options;
        options = _closure1_slot10;
        mike['__initData'] = options;
        oscar = oscar.bind(golf)(mike);
        mike = 12;
        golf = kilo[mike];
        options = backup.bind(tango)(golf);
        golf = options.useGradientBottom;
        result = golf.bind(options)();
        var _closure2_slot3 = result;
        output = _closure1_slot3;
        options = output.useMemo;
        golf = new Array(1);
        golf[0] = result;
        zulu = function() {
            entity = {};
            tango = _closure1_slot1;
            zulu = _closure1_slot2;
            mike = 6;
            zulu = zulu[mike];
            mike = undefined;
            mike = tango.bind(mike)(zulu);
            mike = mike.spacing;
            mike = mike.PX_4;
            entity['marginBottom'] = mike;
            report = _closure2_slot3;
            oscar = entity;
            mike = copyDataProperties(oscar, report);
            return entity;
        };
        golf = options.bind(output)(zulu, golf);
        mike = kilo[mike];
        zulu = backup.bind(tango)(mike);
        mike = zulu.useClientThemesOverride;
        options = mike.bind(zulu)(golf);
        zulu = _closure1_slot6;
        mike = _closure1_slot1;
        entity = kilo[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.View;
        entity = {};
        output = sizing.header;
        golf = new Array(3);
        golf[0] = output;
        golf[1] = yankee;
        golf[2] = options;
        entity['style'] = golf;
        entity['animatedProps'] = oscar;
        options = _closure1_slot5;
        oscar = 13;
        report = kilo[oscar];
        report = backup.bind(tango)(report);
        golf = report.Button;
        report = {'icon': null, 'text': null, 'onPress': null, 'variant': 'secondary', 'size': 'md', 'grow': true};
        yankee = 14;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        result = yankee.PollsIcon;
        yankee = {};
        output = 'sm';
        yankee['size'] = output;
        echo = sizing.headerIcon;
        yankee['style'] = echo;
        yankee = options.bind(tango)(result, yankee);
        report['icon'] = yankee;
        yankee = 15;
        result = kilo[yankee];
        result = backup.bind(tango)(result);
        update = result.intl;
        echo = update.string;
        result = kilo[yankee];
        result = backup.bind(tango)(result);
        result = result.t;
        result = result.h3Y3zc;
        result = echo.bind(update)(result);
        report['text'] = result;
        report['onPress'] = foxtrot;
        report['disabled'] = romeo;
        golf = options.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        oscar = kilo[oscar];
        oscar = backup.bind(tango)(oscar);
        golf = oscar.Button;
        oscar = {'icon': null, 'text': null, 'onPress': null, 'variant': 'secondary', 'size': 'md', 'grow': true};
        romeo = 16;
        romeo = kilo[romeo];
        romeo = backup.bind(tango)(romeo);
        foxtrot = romeo.AttachmentIcon;
        romeo = {};
        romeo['size'] = output;
        sizing = sizing.headerIcon;
        romeo['style'] = sizing;
        romeo = options.bind(tango)(foxtrot, romeo);
        oscar['icon'] = romeo;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        foxtrot = romeo.intl;
        romeo = foxtrot.string;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.8Hvr39;
        yankee = romeo.bind(foxtrot)(yankee);
        oscar['text'] = yankee;
        oscar['onPress'] = offset;
        oscar['disabled'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    tango = report.bind(options)(tango);
    report = 17;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/media_keyboard/native/components/MediaKeyboardListHeader.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['HEADER_PADDING_BOTTOM'] = mike;
    return entity;
})();