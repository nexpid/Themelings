// app/modules/poggermode/PoggermodeConstants.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    zuuluu = argFre;
    michal = global;
    golfie = michal.Object;
    oscard = golfie.defineProperty;
    report = {};
    tangon = true;
    report['value'] = tangon;
    tangon = '__esModule';
    tangon = oscard.bind(golfie)(zuuluu, tangon, report);
    golfie = {};
    option = 0;
    golfie['CHAT_INPUT'] = option;
    tangon = 'CHAT_INPUT';
    golfie[option] = tangon;
    yankee = 1;
    golfie['REACTION'] = yankee;
    report = 'REACTION';
    golfie[yankee] = report;
    offset = 2;
    golfie['MEMBER_USER'] = offset;
    report = 'MEMBER_USER';
    golfie[offset] = report;
    verify = 3;
    golfie['CALL_TILE'] = verify;
    report = 'CALL_TILE';
    golfie[verify] = report;
    oscard = {};
    oscard['CHAT_INPUT'] = option;
    oscard[option] = tangon;
    oscard['VOICE_USER'] = yankee;
    tangon = 'VOICE_USER';
    oscard[yankee] = tangon;
    oscard['MENTION'] = offset;
    tangon = 'MENTION';
    oscard[offset] = tangon;
    report = {};
    report['LEVEL_1'] = option;
    tangon = 'LEVEL_1';
    report[option] = tangon;
    report['LEVEL_2'] = yankee;
    tangon = 'LEVEL_2';
    report[yankee] = tangon;
    report['LEVEL_3'] = offset;
    tangon = 'LEVEL_3';
    report[offset] = tangon;
    report['LEVEL_4'] = verify;
    tangon = 'LEVEL_4';
    report[verify] = tangon;
    verify = 4;
    report['LEVEL_5'] = verify;
    tangon = 'LEVEL_5';
    report[verify] = tangon;
    offset = {};
    verify = report.LEVEL_1;
    tangon = new Array(8);
    yankee = [1, 0.0001];
    tangon[0] = yankee;
    yankee = [25, 0.05];
    tangon[1] = yankee;
    yankee = [50, 0.1];
    tangon[2] = yankee;
    yankee = [100, 0.5];
    tangon[3] = yankee;
    yankee = [250, 1];
    tangon[4] = yankee;
    yankee = [500, 2];
    tangon[5] = yankee;
    yankee = [1000, 3];
    tangon[6] = yankee;
    yankee = [9001, 4];
    tangon[7] = yankee;
    offset[verify] = tangon;
    verify = report.LEVEL_2;
    tangon = new Array(8);
    yankee = [1, 0.0001];
    tangon[0] = yankee;
    yankee = [25, 0.25];
    tangon[1] = yankee;
    yankee = [50, 0.5];
    tangon[2] = yankee;
    yankee = [100, 1];
    tangon[3] = yankee;
    yankee = [250, 2.5];
    tangon[4] = yankee;
    yankee = [500, 5];
    tangon[5] = yankee;
    yankee = [1000, 7.5];
    tangon[6] = yankee;
    yankee = [9001, 10];
    tangon[7] = yankee;
    offset[verify] = tangon;
    verify = report.LEVEL_3;
    tangon = new Array(8);
    yankee = [1, 0.001];
    tangon[0] = yankee;
    yankee = [25, 0.5];
    tangon[1] = yankee;
    yankee = [50, 1];
    tangon[2] = yankee;
    yankee = [100, 2];
    tangon[3] = yankee;
    yankee = [250, 4];
    tangon[4] = yankee;
    yankee = [500, 8];
    tangon[5] = yankee;
    yankee = [1000, 12];
    tangon[6] = yankee;
    yankee = [9001, 16];
    tangon[7] = yankee;
    offset[verify] = tangon;
    verify = report.LEVEL_4;
    tangon = new Array(8);
    yankee = [1, 0.25];
    tangon[0] = yankee;
    yankee = [25, 0.75];
    tangon[1] = yankee;
    yankee = [50, 1];
    tangon[2] = yankee;
    yankee = [100, 2];
    tangon[3] = yankee;
    yankee = [250, 4];
    tangon[4] = yankee;
    yankee = [500, 8];
    tangon[5] = yankee;
    yankee = [1000, 20];
    tangon[6] = yankee;
    yankee = [9001, 50];
    tangon[7] = yankee;
    offset[verify] = tangon;
    verify = report.LEVEL_5;
    tangon = new Array(8);
    yankee = [1, 0.001];
    tangon[0] = yankee;
    yankee = [25, 0.5];
    tangon[1] = yankee;
    yankee = [50, 1];
    tangon[2] = yankee;
    yankee = [100, 2];
    tangon[3] = yankee;
    yankee = [250, 5];
    tangon[4] = yankee;
    yankee = [500, 10];
    tangon[5] = yankee;
    yankee = [1000, 100];
    tangon[6] = yankee;
    yankee = [9001, 10000];
    tangon[7] = yankee;
    offset[verify] = tangon;
    var _closure1_slot0 = offset;
    verify = michal.Object;
    tangon = verify.keys;
    romeon = tangon.bind(verify)(offset);
    yankee = romeon.reduce;
    verify = {};
    foxtra = report.LEVEL_1;
    tangon = new Array(0);
    verify[foxtra] = tangon;
    foxtra = report.LEVEL_2;
    tangon = new Array(0);
    verify[foxtra] = tangon;
    foxtra = report.LEVEL_3;
    tangon = new Array(0);
    verify[foxtra] = tangon;
    foxtra = report.LEVEL_4;
    tangon = new Array(0);
    verify[foxtra] = tangon;
    foxtra = report.LEVEL_5;
    tangon = new Array(0);
    verify[foxtra] = tangon;
    tangon = function(argFoo, argBar) {
        zuuluu = argBar;
        entity = {};
        oscard = argFoo;
        golfie = entity;
        michal = copyDataProperties(golfie, oscard);
        michal = _closure1_slot0;
        report = michal[zuuluu];
        tangon = report.map;
        michal = function(argFoo) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                michal = entity[Symbol.iterator];
                entity = michal().next;
                tangon = entity().value;
                zuuluu = michal;
                entity = undefined;
                zuuluu = zuuluu === entity;
                if(zuuluu) { _fun00002_ip = 25; continue _fun00001 }
 22:
                entity = tangon;
 25:
                if(zuuluu) { _fun00002_ip = 31; continue _fun00001 }
 28:
                michal.return();
 31:
                return entity;
            }
        };
        michal = tangon.bind(report)(michal);
        entity[zuuluu] = michal;
        return entity;
    };
    tangon = yankee.bind(romeon)(tangon, verify);
    verify = michal.Object;
    michal = verify.keys;
    offset = michal.bind(verify)(offset);
    verify = offset.reduce;
    michal = {};
    romeon = report.LEVEL_1;
    yankee = new Array(0);
    michal[romeon] = yankee;
    romeon = report.LEVEL_2;
    yankee = new Array(0);
    michal[romeon] = yankee;
    romeon = report.LEVEL_3;
    yankee = new Array(0);
    michal[romeon] = yankee;
    romeon = report.LEVEL_4;
    yankee = new Array(0);
    michal[romeon] = yankee;
    romeon = report.LEVEL_5;
    yankee = new Array(0);
    michal[romeon] = yankee;
    entity = function(argFoo, argBar) {
        zuuluu = argBar;
        entity = {};
        oscard = argFoo;
        golfie = entity;
        michal = copyDataProperties(golfie, oscard);
        michal = _closure1_slot0;
        report = michal[zuuluu];
        tangon = report.map;
        michal = function(argFoo) {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                tangon = argFoo;
                michal = tangon[Symbol.iterator];
                tangon = michal().next;
                entity = tangon().value;
                entity = michal;
                oscard = undefined;
                zuuluu = entity === oscard;
                entity = undefined;
                if(zuuluu) { _fun00004_ip = 49; continue _fun00003 }
 24:
                report = tangon().value;
                tangon = michal;
                tangon = tangon === oscard;
                entity = undefined;
                zuuluu = tangon;
                if(tangon) { _fun00004_ip = 49; continue _fun00003 }
 43:
                entity = report;
                zuuluu = tangon;
 49:
                if(zuuluu) { _fun00004_ip = 55; continue _fun00003 }
 52:
                michal.return();
 55:
                return entity;
            }
        };
        michal = tangon.bind(report)(michal);
        entity[zuuluu] = michal;
        return entity;
    };
    michal = verify.bind(offset)(entity, michal);
    entity = argPlu;
    verify = entity[option];
    option = argBar;
    entity = undefined;
    offset = option.bind(entity)(verify);
    verify = offset.fileFinishedImporting;
    option = 'modules/poggermode/PoggermodeConstants.tsx';
    option = verify.bind(offset)(option);
    zuuluu['ConfettiLocation'] = golfie;
    zuuluu['ShakeLocation'] = oscard;
    zuuluu['ShakeLevel'] = report;
    zuuluu['SHAKE_STEPS'] = tangon;
    zuuluu['SHAKE_STEP_DIVIDER'] = michal;
    return entity;
})();