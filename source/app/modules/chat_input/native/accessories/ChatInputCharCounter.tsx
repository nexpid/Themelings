// app/modules/chat_input/native/accessories/ChatInputCharCounter.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    options = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = options;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    golf = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = options.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    golf = tango.bind(entity)(golf);
    var _closure1_slot4 = golf;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    yankee = tango.StyleSheet;
    tango = 3;
    tango = oscar[tango];
    tango = options.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.UpsellTypes;
    var _closure1_slot6 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.PremiumUpsellTypes;
    var _closure1_slot7 = tango;
    tango = 6;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot8 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 7;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    backup = yankee.absoluteFillObject;
    kilo = offset;
    yankee = copyDataProperties(kilo, backup);
    romeo = 'center';
    yankee = 'alignItems';
    offset[yankee] = romeo;
    yankee = 'top';
    offset[yankee] = entity;
    tango['container'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot10 = tango;
    tango = golf.forwardRef;
    mike = function(argFoo, argBar) {
        _fun101317: for(var _fun101317_ip = 0; ; ) switch(_fun101317_ip) {
 0:
            entity = argFoo;
            yankee = entity.analyticsLocations;
            var _closure2_slot0 = yankee;
            entity = _closure1_slot10;
            report = undefined;
            golf = entity.bind(report)();
            zulu = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 8;
            entity = verify[entity];
            options = zulu.bind(report)(entity);
            tango = options.useStateFromStores;
            entity = _closure1_slot5;
            zulu = new Array(1);
            zulu[0] = entity;
            entity = function() {
                tango = _closure1_slot1;
                zulu = _closure1_slot2;
                mike = 9;
                zulu = zulu[mike];
                mike = undefined;
                zulu = tango.bind(mike)(zulu);
                mike = zulu.canUseIncreasedMessageLength;
                tango = _closure1_slot5;
                entity = tango.getCurrentUser;
                entity = entity.bind(tango)();
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            offset = tango.bind(options)(zulu, entity);
            var _closure2_slot1 = offset;
            options = _closure1_slot4;
            zulu = options.useState;
            entity = 0;
            romeo = zulu.bind(options)(entity);
            tango = _closure1_slot3;
            zulu = 2;
            tango = tango.bind(report)(romeo, zulu);
            foxtrot = tango[entity];
            zulu = 1;
            zulu = tango[zulu];
            var _closure2_slot2 = zulu;
            tango = _closure1_slot1;
            zulu = 10;
            zulu = verify[zulu];
            zulu = tango.bind(report)(zulu);
            verify = zulu.bind(report)();
            var _closure2_slot3 = verify;
            romeo = options.useImperativeHandle;
            tango = argBar;
            zulu = function() {
                entity = {};
                mike = function(argFoo) { // Original name: onMessageLengthChanged
                    entity = global;
                    report = entity.Math;
                    tango = report.max;
                    zulu = _closure2_slot3;
                    mike = argFoo;
                    zulu = mike - zulu;
                    mike = 0;
                    zulu = tango.bind(report)(mike, zulu);
                    mike = _closure2_slot2;
                    entity = undefined;
                    mike = mike.bind(entity)(zulu);
                    return entity;
                };
                entity['onMessageLengthChanged'] = mike;
                return entity;
            };
            zulu = romeo.bind(options)(tango, zulu);
            tango = options.useCallback;
            zulu = new Array(3);
            zulu[0] = yankee;
            zulu[1] = offset;
            zulu[2] = verify;
            mike = function() {
                _fun101321: for(var _fun101321_ip = 0; ; ) switch(_fun101321_ip) {
 0:
                    entity = _closure2_slot1;
                    mike = _closure1_slot1;
                    offset = _closure1_slot2;
                    if(entity) { _fun101321_ip = 95; continue _fun101321 }
 21:
                    entity = 11;
                    zulu = offset[entity];
                    entity = undefined;
                    report = mike.bind(entity)(zulu);
                    zulu = report.handleShowUpsellAlert;
                    entity = {};
                    oscar = _closure1_slot6;
                    oscar = oscar.LONGER_MESSAGE;
                    entity['initialUpsellKey'] = oscar;
                    oscar = _closure2_slot0;
                    entity['analyticsLocations'] = oscar;
                    oscar = {};
                    golf = _closure1_slot7;
                    golf = golf.MESSAGE_LENGTH_UPSELL;
                    oscar['type'] = golf;
                    entity['analyticsProperties'] = oscar;
                    entity = zulu.bind(report)(entity);
                    _fun101321_ip = 199; continue _fun101321;
 95:
                    entity = 12;
                    entity = offset[entity];
                    verify = undefined;
                    zulu = mike.bind(verify)(entity);
                    mike = zulu.open;
                    entity = {};
                    report = _closure1_slot0;
                    tango = 13;
                    oscar = offset[tango];
                    oscar = report.bind(verify)(oscar);
                    golf = oscar.intl;
                    oscar = golf.formatToPlainString;
                    tango = offset[tango];
                    tango = report.bind(verify)(tango);
                    tango = tango.t;
                    report = tango.vcvHa2;
                    tango = {};
                    options = _closure2_slot3;
                    tango['maxLength'] = options;
                    tango = oscar.bind(golf)(report, tango);
                    entity['content'] = tango;
                    tango = 'premium-message-length-info-toast';
                    entity['key'] = tango;
                    entity = mike.bind(zulu)(entity);
 199:
                    entity = undefined;
                    return entity;
                }
            };
            verify = tango.bind(options)(mike, zulu);
            mike = foxtrot > entity;
            entity = null;
            if(!mike) { _fun101317_ip = 386; continue _fun101317 }
 218:
            tango = _closure1_slot9;
            options = _closure1_slot0;
            offset = _closure1_slot2;
            mike = 14;
            mike = offset[mike];
            mike = options.bind(report)(mike);
            zulu = mike.PressableOpacity;
            mike = {};
            mike['onPress'] = verify;
            golf = golf.container;
            mike['style'] = golf;
            verify = _closure1_slot8;
            oscar = 15;
            oscar = offset[oscar];
            oscar = options.bind(report)(oscar);
            golf = oscar.Text;
            oscar = {'color': 'info-danger-foreground', 'lineClamp': 1, 'variant': 'text-xs/medium'};
            yankee = global;
            yankee = yankee.HermesInternal;
            romeo = yankee.concat;
            yankee = '-';
            yankee = romeo.bind(yankee)(foxtrot);
            oscar['children'] = yankee;
            golf = verify.bind(report)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            golf = 16;
            golf = offset[golf];
            golf = options.bind(report)(golf);
            options = golf.NitroWheelIcon;
            golf = {};
            offset = 'sm';
            golf['size'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 386:
            return entity;
        }
    };
    tango = tango.bind(golf)(mike);
    mike = 'ChatInputCharCounter';
    tango['displayName'] = mike;
    mike = golf.memo;
    mike = mike.bind(golf)(tango);
    tango = 17;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/chat_input/native/accessories/ChatInputCharCounter.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();