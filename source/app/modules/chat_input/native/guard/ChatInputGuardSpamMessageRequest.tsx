// app/modules/chat_input/native/guard/ChatInputGuardSpamMessageRequest.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    options = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = options;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    golf = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(verify)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = options.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot5 = tango;
    tango = golf.memo;
    mike = function(argFoo) { // Original name: ChatInputGuardSpamMessageRequest
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeo = entity.channel;
            var _closure2_slot0 = romeo;
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 3;
            entity = zulu[entity];
            tango = undefined;
            report = mike.bind(tango)(entity);
            entity = report.useNavigation;
            entity = entity.bind(report)();
            var _closure2_slot1 = entity;
            report = 4;
            report = zulu[report];
            offset = mike.bind(tango)(report);
            verify = offset.useStateFromStores;
            report = _closure1_slot4;
            oscar = new Array(1);
            oscar[0] = report;
            report = function() {
                zulu = _closure1_slot4;
                mike = zulu.getUser;
                tango = _closure2_slot0;
                entity = tango.getRecipientId;
                entity = entity.bind(tango)();
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            oscar = verify.bind(offset)(oscar, report);
            report = 5;
            report = zulu[report];
            yankee = mike.bind(tango)(report);
            offset = yankee.useLongestChannelMessageBeforeReply;
            verify = romeo.id;
            report = romeo.getRecipientId;
            report = report.bind(romeo)();
            report = offset.bind(yankee)(verify, report);
            var _closure2_slot2 = report;
            offset = _closure1_slot3;
            verify = offset.useCallback;
            report = new Array(1);
            report[0] = entity;
            entity = function() {
                mike = _closure2_slot1;
                entity = mike.pop;
                entity = entity.bind(mike)();
                entity = undefined;
                return entity;
            };
            report = verify.bind(offset)(entity, report);
            entity = 6;
            entity = zulu[entity];
            zulu = mike.bind(tango)(entity);
            mike = zulu.useMessageRequestActions;
            entity = {};
            entity['user'] = oscar;
            oscar = function() { // Original name: onError
                oscar = _closure1_slot1;
                golf = _closure1_slot2;
                entity = 7;
                mike = golf[entity];
                entity = undefined;
                tango = oscar.bind(entity)(mike);
                zulu = tango.open;
                mike = {};
                options = 'MESSAGE_REQUEST_REQUEST_ERROR_ALERT_TITLE';
                mike['key'] = options;
                offset = _closure1_slot0;
                report = 8;
                options = golf[report];
                options = offset.bind(entity)(options);
                verify = options.intl;
                options = verify.string;
                report = golf[report];
                report = offset.bind(entity)(report);
                report = report.t;
                report = report.EDYbS0;
                report = options.bind(verify)(report);
                mike['content'] = report;
                report = 9;
                report = golf[report];
                report = oscar.bind(entity)(report);
                mike['icon'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            entity['onError'] = oscar;
            entity['onRejectSuccess'] = report;
            entity = mike.bind(zulu)(entity);
            mike = entity.rejectMessageRequest;
            var _closure2_slot3 = mike;
            verify = entity.isRejectLoading;
            report = entity.isUserProfileLoading;
            offset = entity.isOptimisticRejected;
            entity = entity.markAsNotSpam;
            var _closure2_slot4 = entity;
            oscar = verify;
            if(verify) { _fun00002_ip = 261; continue _fun00001 }
 258:
            oscar = report;
 261:
            if(oscar) { _fun00002_ip = 267; continue _fun00001 }
 264:
            oscar = offset;
 267:
            zulu = _closure1_slot5;
            mike = _closure1_slot1;
            yankee = _closure1_slot2;
            entity = 10;
            entity = yankee[entity];
            mike = mike.bind(tango)(entity);
            entity = {};
            romeo = 'button-action';
            entity['type'] = romeo;
            kilo = _closure1_slot0;
            romeo = 8;
            foxtrot = yankee[romeo];
            foxtrot = kilo.bind(tango)(foxtrot);
            sizing = foxtrot.intl;
            backup = sizing.string;
            foxtrot = yankee[romeo];
            foxtrot = kilo.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.fS08qK;
            foxtrot = backup.bind(sizing)(foxtrot);
            entity['message'] = foxtrot;
            foxtrot = yankee[romeo];
            foxtrot = kilo.bind(tango)(foxtrot);
            sizing = foxtrot.intl;
            backup = sizing.string;
            foxtrot = yankee[romeo];
            foxtrot = kilo.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.8U5OXF;
            foxtrot = backup.bind(sizing)(foxtrot);
            entity['subtext'] = foxtrot;
            foxtrot = yankee[romeo];
            foxtrot = kilo.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            yankee = yankee[romeo];
            yankee = kilo.bind(tango)(yankee);
            yankee = yankee.t;
            yankee = yankee.cpT0Cg;
            yankee = foxtrot.bind(backup)(yankee);
            entity['buttonPrimaryText'] = yankee;
            yankee = function(argFoo) { // Original name: buttonPrimaryOnPress
                mike = argFoo;
                entity = mike.stopPropagation;
                entity = entity.bind(mike)();
                zulu = _closure2_slot3;
                entity = _closure2_slot0;
                mike = entity.id;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            entity['buttonPrimaryOnPress'] = yankee;
            entity['buttonPrimaryDisabled'] = oscar;
            if(verify) { _fun00002_ip = 483; continue _fun00001 }
 480:
            verify = offset;
 483:
            entity['buttonPrimaryLoading'] = verify;
            verify = 'destructive';
            entity['buttonPrimaryVariant'] = verify;
            yankee = _closure1_slot0;
            options = _closure1_slot2;
            verify = options[romeo];
            verify = yankee.bind(tango)(verify);
            offset = verify.intl;
            verify = offset.string;
            options = options[romeo];
            options = yankee.bind(tango)(options);
            options = options.t;
            options = options.olZgw8;
            options = verify.bind(offset)(options);
            entity['buttonSecondaryText'] = options;
            golf = function(argFoo) { // Original name: buttonSecondaryOnPress
                mike = argFoo;
                entity = mike.stopPropagation;
                entity = entity.bind(mike)();
                report = _closure2_slot4;
                tango = _closure2_slot0;
                zulu = _closure2_slot2;
                entity = undefined;
                mike = function() {
                    zulu = _closure1_slot0;
                    mike = _closure1_slot2;
                    entity = 11;
                    mike = mike[entity];
                    entity = undefined;
                    tango = zulu.bind(entity)(mike);
                    zulu = tango.transitionToChannel;
                    entity = _closure2_slot0;
                    mike = entity.id;
                    entity = {};
                    report = true;
                    entity['navigationReplace'] = report;
                    entity = zulu.bind(tango)(mike, entity);
                    return entity;
                };
                mike = report.bind(entity)(tango, zulu, mike);
                return entity;
            };
            entity['buttonSecondaryOnPress'] = golf;
            entity['buttonSecondaryDisabled'] = oscar;
            entity['buttonSecondaryLoading'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/chat_input/native/guard/ChatInputGuardSpamMessageRequest.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();