// app/modules/chat_input/native/guard/ChatInputGuardSpamMessageRequest.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    golfie = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot5 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: ChatInputGuardSpamMessageRequest
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeon = entity.channel;
            var _closure2_slot0 = romeon;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 3;
            entity = zuuluu[entity];
            tangon = undefined;
            report = michal.bind(tangon)(entity);
            entity = report.useNavigation;
            entity = entity.bind(report)();
            var _closure2_slot1 = entity;
            report = 4;
            report = zuuluu[report];
            offset = michal.bind(tangon)(report);
            verify = offset.useStateFromStores;
            report = _closure1_slot4;
            oscard = new Array(1);
            oscard[0] = report;
            report = function() {
                zuuluu = _closure1_slot4;
                michal = zuuluu.getUser;
                tangon = _closure2_slot0;
                entity = tangon.getRecipientId;
                entity = entity.bind(tangon)();
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            oscard = verify.bind(offset)(oscard, report);
            report = 5;
            report = zuuluu[report];
            yankee = michal.bind(tangon)(report);
            offset = yankee.useLongestChannelMessageBeforeReply;
            verify = romeon.id;
            report = romeon.getRecipientId;
            report = report.bind(romeon)();
            report = offset.bind(yankee)(verify, report);
            var _closure2_slot2 = report;
            offset = _closure1_slot3;
            verify = offset.useCallback;
            report = new Array(1);
            report[0] = entity;
            entity = function() {
                michal = _closure2_slot1;
                entity = michal.pop;
                entity = entity.bind(michal)();
                entity = undefined;
                return entity;
            };
            report = verify.bind(offset)(entity, report);
            entity = 6;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.useMessageRequestActions;
            entity = {};
            entity['user'] = oscard;
            oscard = function() { // Original name: onError
                oscard = _closure1_slot1;
                golfie = _closure1_slot2;
                entity = 7;
                michal = golfie[entity];
                entity = undefined;
                tangon = oscard.bind(entity)(michal);
                zuuluu = tangon.open;
                michal = {};
                option = 'MESSAGE_REQUEST_REQUEST_ERROR_ALERT_TITLE';
                michal['key'] = option;
                offset = _closure1_slot0;
                report = 8;
                option = golfie[report];
                option = offset.bind(entity)(option);
                verify = option.intl;
                option = verify.string;
                report = golfie[report];
                report = offset.bind(entity)(report);
                report = report.t;
                report = report.EDYbS0;
                report = option.bind(verify)(report);
                michal['content'] = report;
                report = 9;
                report = golfie[report];
                report = oscard.bind(entity)(report);
                michal['icon'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity['onError'] = oscard;
            entity['onRejectSuccess'] = report;
            entity = michal.bind(zuuluu)(entity);
            michal = entity.rejectMessageRequest;
            var _closure2_slot3 = michal;
            verify = entity.isRejectLoading;
            report = entity.isUserProfileLoading;
            offset = entity.isOptimisticRejected;
            entity = entity.markAsNotSpam;
            var _closure2_slot4 = entity;
            oscard = verify;
            if(verify) { _fun00002_ip = 261; continue _fun00001 }
 258:
            oscard = report;
 261:
            if(oscard) { _fun00002_ip = 267; continue _fun00001 }
 264:
            oscard = offset;
 267:
            zuuluu = _closure1_slot5;
            michal = _closure1_slot1;
            yankee = _closure1_slot2;
            entity = 10;
            entity = yankee[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            romeon = 'button-action';
            entity['type'] = romeon;
            kiloes = _closure1_slot0;
            romeon = 8;
            foxtra = yankee[romeon];
            foxtra = kiloes.bind(tangon)(foxtra);
            sizing = foxtra.intl;
            backup = sizing.string;
            foxtra = yankee[romeon];
            foxtra = kiloes.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.fS08qK;
            foxtra = backup.bind(sizing)(foxtra);
            entity['message'] = foxtra;
            foxtra = yankee[romeon];
            foxtra = kiloes.bind(tangon)(foxtra);
            sizing = foxtra.intl;
            backup = sizing.string;
            foxtra = yankee[romeon];
            foxtra = kiloes.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.8U5OXF;
            foxtra = backup.bind(sizing)(foxtra);
            entity['subtext'] = foxtra;
            foxtra = yankee[romeon];
            foxtra = kiloes.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            yankee = yankee[romeon];
            yankee = kiloes.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.cpT0Cg;
            yankee = foxtra.bind(backup)(yankee);
            entity['buttonPrimaryText'] = yankee;
            yankee = function(argFoo) { // Original name: buttonPrimaryOnPress
                michal = argFoo;
                entity = michal.stopPropagation;
                entity = entity.bind(michal)();
                zuuluu = _closure2_slot3;
                entity = _closure2_slot0;
                michal = entity.id;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            entity['buttonPrimaryOnPress'] = yankee;
            entity['buttonPrimaryDisabled'] = oscard;
            if(verify) { _fun00002_ip = 483; continue _fun00001 }
 480:
            verify = offset;
 483:
            entity['buttonPrimaryLoading'] = verify;
            verify = 'destructive';
            entity['buttonPrimaryVariant'] = verify;
            yankee = _closure1_slot0;
            option = _closure1_slot2;
            verify = option[romeon];
            verify = yankee.bind(tangon)(verify);
            offset = verify.intl;
            verify = offset.string;
            option = option[romeon];
            option = yankee.bind(tangon)(option);
            option = option.t;
            option = option.olZgw8;
            option = verify.bind(offset)(option);
            entity['buttonSecondaryText'] = option;
            golfie = function(argFoo) { // Original name: buttonSecondaryOnPress
                michal = argFoo;
                entity = michal.stopPropagation;
                entity = entity.bind(michal)();
                report = _closure2_slot4;
                tangon = _closure2_slot0;
                zuuluu = _closure2_slot2;
                entity = undefined;
                michal = function() {
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 11;
                    michal = michal[entity];
                    entity = undefined;
                    tangon = zuuluu.bind(entity)(michal);
                    zuuluu = tangon.transitionToChannel;
                    entity = _closure2_slot0;
                    michal = entity.id;
                    entity = {};
                    report = true;
                    entity['navigationReplace'] = report;
                    entity = zuuluu.bind(tangon)(michal, entity);
                    return entity;
                };
                michal = report.bind(entity)(tangon, zuuluu, michal);
                return entity;
            };
            entity['buttonSecondaryOnPress'] = golfie;
            entity['buttonSecondaryDisabled'] = oscard;
            entity['buttonSecondaryLoading'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/chat_input/native/guard/ChatInputGuardSpamMessageRequest.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();