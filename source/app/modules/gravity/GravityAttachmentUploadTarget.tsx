// app/modules/gravity/GravityAttachmentUploadTarget.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Endpoints;
    var _closure1_slot4 = golfie;
    golfie = tangon.MAX_ATTACHMENT_SIZE;
    var _closure1_slot5 = golfie;
    tangon = tangon.MAX_UPLOAD_COUNT;
    var _closure1_slot6 = tangon;
    michal = function() {
        tangon = _closure1_slot3;
        zuuluu = function() { // Original name: GravityAttachmentUploadTarget
            tangon = _closure1_slot2;
            zuuluu = _closure2_slot0;
            entity = undefined;
            michal = this;
            michal = tangon.bind(entity)(michal, zuuluu);
            return entity;
        };
        var _closure2_slot0 = zuuluu;
        entity = {};
        michal = 'getCreateAttachmentURL';
        entity['key'] = michal;
        michal = function() { // Original name: value
            entity = _closure1_slot4;
            entity = entity.GRAVITY_ATTACHMENTS;
            return entity;
        };
        entity['value'] = michal;
        michal = new Array(6);
        michal[0] = entity;
        entity = {};
        oscard = 'getDeleteUploadURL';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            zuuluu = _closure1_slot4;
            michal = zuuluu.MESSAGE_DELETE_UPLOAD;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        entity['value'] = oscard;
        michal[1] = entity;
        entity = {};
        oscard = 'getMaxFileSize';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = _closure1_slot5;
            return entity;
        };
        entity['value'] = oscard;
        michal[2] = entity;
        entity = {};
        oscard = 'getMaxAttachmentsCount';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = _closure1_slot6;
            return entity;
        };
        entity['value'] = oscard;
        michal[3] = entity;
        entity = {};
        oscard = 'getMaxTotalAttachmentSize';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            zuuluu = _closure1_slot0;
            michal = _closure1_slot1;
            entity = 3;
            michal = michal[entity];
            entity = undefined;
            entity = zuuluu.bind(entity)(michal);
            entity = entity.MAX_TOTAL_ATTACHMENT_SIZE;
            return entity;
        };
        entity['value'] = oscard;
        michal[4] = entity;
        entity = {};
        oscard = 'shouldReactNativeCompressUploads';
        entity['key'] = oscard;
        report = function() { // Original name: get
            entity = true;
            return entity;
        };
        entity['get'] = report;
        michal[5] = entity;
        entity = undefined;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    michal = michal.bind(entity)();
    tangon = 4;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/gravity/GravityAttachmentUploadTarget.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();