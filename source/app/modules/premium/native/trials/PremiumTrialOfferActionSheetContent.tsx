// app/modules/premium/native/trials/PremiumTrialOfferActionSheetContent.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot3 = option;
    tangon = tangon.Image;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.PremiumSubscriptionSKUs;
    var _closure1_slot6 = option;
    tangon = tangon.PremiumTypes;
    var _closure1_slot7 = tangon;
    kiloes = 4;
    tangon = oscard[kiloes];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.HelpdeskArticles;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    backup = tangon.Fonts;
    tangon = 6;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot9 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'paddingTop': 16, 'paddingLeft': 16, 'paddingRight': 16};
    foxtra = 16;
    yankee = 8;
    sizing = oscard[yankee];
    sizing = romeon.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = sizing;
    tangon['container'] = offset;
    offset = {'width': '100%', 'height': 375, 'borderRadius': null, 'marginBottom': 8};
    sizing = oscard[yankee];
    sizing = romeon.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.sm;
    offset['borderRadius'] = sizing;
    tangon['img'] = offset;
    offset = {};
    offset['marginVertical'] = yankee;
    tangon['titleFont'] = offset;
    offset = {};
    offset['marginVertical'] = yankee;
    tangon['titleMargin'] = offset;
    offset = {};
    offset['paddingVertical'] = kiloes;
    tangon['rowStyles'] = offset;
    offset = {};
    backup = backup.PRIMARY_NORMAL;
    offset['fontFamily'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    offset['color'] = backup;
    offset['fontSize'] = foxtra;
    foxtra = -8;
    offset['marginLeft'] = foxtra;
    tangon['labelStyles'] = offset;
    offset = {};
    foxtra = 24;
    offset['marginTop'] = foxtra;
    tangon['buttonsContainer'] = offset;
    offset = {};
    foxtra = 28;
    offset['marginVertical'] = foxtra;
    tangon['loading'] = offset;
    offset = {'position': 'absolute', 'margin': 0, 'right': 28, 'top': 28};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.WHITE;
    offset['backgroundColor'] = foxtra;
    tangon['beta'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BRAND;
    offset['color'] = foxtra;
    tangon['betaText'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.HEADER_SECONDARY;
    offset['color'] = yankee;
    tangon['learnMoreText'] = offset;
    offset = {'marginBottom': 8, 'textDecorationLine': 'underline'};
    tangon['termsApplyText'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot11 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: PremiumTrialOfferActionSheetContent
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.trialOffer;
            sequen = michal.intervalDuration;
            zuuluu = michal.onConfirm;
            var _closure2_slot0 = zuuluu;
            foxtra = michal.onDismiss;
            tangon = undefined;
            var _closure2_slot2 = tangon;
            michal = _closure1_slot11;
            backup = michal.bind(tangon)();
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 9;
            michal = report[michal];
            michal = zuuluu.bind(tangon)(michal);
            michal = michal.bind(tangon)();
            var _closure2_slot1 = michal;
            zuuluu = _closure1_slot0;
            michal = 10;
            michal = report[michal];
            golfie = zuuluu.bind(tangon)(michal);
            report = golfie.useStateFromStores;
            michal = _closure1_slot5;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                entity = _closure1_slot5;
                entity = entity.locale;
                return entity;
            };
            zuuluu = report.bind(golfie)(zuuluu, michal);
            source = null;
            michal = source == entity;
            config = undefined;
            if(michal) { _fun00002_ip = 141; continue _fun00001 }
 135:
            config = entity.subscription_trial;
 141:
            report = source == entity;
            michal = undefined;
            if(report) { _fun00002_ip = 171; continue _fun00001 }
 150:
            entity = entity.subscription_trial;
            report = source == entity;
            michal = undefined;
            if(report) { _fun00002_ip = 171; continue _fun00001 }
 165:
            michal = entity.sku_id;
 171:
            entity = _closure1_slot6;
            entity = entity.TIER_0;
            yankee = michal === entity;
            michal = ['en-US', 'en-GB'];
            entity = michal.includes;
            verify = entity.bind(michal)(zuuluu);
            entity = {};
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 11;
            michal = report[michal];
            michal = zuuluu.bind(tangon)(michal);
            entity['icon'] = michal;
            option = _closure1_slot0;
            zuuluu = _closure1_slot2;
            result = 12;
            michal = zuuluu[result];
            michal = option.bind(tangon)(michal);
            golfie = michal.intl;
            if(yankee) { _fun00002_ip = 344; continue _fun00001 }
 259:
            offset = golfie.formatToPlainString;
            michal = zuuluu[result];
            michal = option.bind(tangon)(michal);
            michal = michal.t;
            report = michal.p8QVLS;
            michal = {};
            romeon = 13;
            romeon = zuuluu[romeon];
            output = option.bind(tangon)(romeon);
            sizing = output.getMaxFileSizeForPremiumType;
            romeon = _closure1_slot7;
            kiloes = romeon.TIER_2;
            romeon = {};
            update = false;
            romeon['useSpace'] = update;
            romeon = sizing.bind(output)(kiloes, romeon);
            michal['maxUploadPremium'] = romeon;
            michal = offset.bind(golfie)(report, michal);
            _fun00002_ip = 374; continue _fun00001;
 344:
            report = golfie.string;
            zuuluu = zuuluu[result];
            zuuluu = option.bind(tangon)(zuuluu);
            zuuluu = zuuluu.t;
            zuuluu = zuuluu.thJN9v;
            michal = report.bind(golfie)(zuuluu);
 374:
            entity['label'] = michal;
            kiloes = new Array(2);
            kiloes[0] = entity;
            entity = {};
            report = _closure1_slot1;
            michal = _closure1_slot2;
            zuuluu = 14;
            zuuluu = michal[zuuluu];
            zuuluu = report.bind(tangon)(zuuluu);
            entity['icon'] = zuuluu;
            golfie = _closure1_slot0;
            zuuluu = michal[result];
            zuuluu = golfie.bind(tangon)(zuuluu);
            report = zuuluu.intl;
            zuuluu = report.string;
            michal = michal[result];
            michal = golfie.bind(tangon)(michal);
            michal = michal.t;
            michal = michal.KjrZ8f;
            michal = zuuluu.bind(report)(michal);
            entity['label'] = michal;
            kiloes[1] = entity;
            zuuluu = {};
            golfie = _closure1_slot1;
            entity = _closure1_slot2;
            if(yankee) { _fun00002_ip = 563; continue _fun00001 }
 483:
            michal = 16;
            michal = entity[michal];
            michal = golfie.bind(tangon)(michal);
            zuuluu['icon'] = michal;
            offset = _closure1_slot0;
            michal = entity[result];
            michal = offset.bind(tangon)(michal);
            option = michal.intl;
            report = option.string;
            michal = entity[result];
            michal = offset.bind(tangon)(michal);
            michal = michal.t;
            michal = michal.Pt1Sjo;
            michal = report.bind(option)(michal);
            zuuluu['label'] = michal;
            michal = new Array(1);
            michal[0] = zuuluu;
            _fun00002_ip = 644; continue _fun00001;
 563:
            report = 15;
            report = entity[report];
            report = golfie.bind(tangon)(report);
            zuuluu['icon'] = report;
            option = _closure1_slot0;
            report = entity[result];
            report = option.bind(tangon)(report);
            golfie = report.intl;
            report = golfie.string;
            entity = entity[result];
            entity = option.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.V94zDg;
            entity = report.bind(golfie)(entity);
            zuuluu['label'] = entity;
            entity = new Array(1);
            entity[0] = zuuluu;
            michal = entity;
 644:
            cntext = 2;
            target = kiloes;
            papara = michal;
            entity = arraySpread(target, papara, cntext);
            offset = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 17;
            entity = michal[entity];
            zuuluu = offset.bind(tangon)(entity);
            michal = zuuluu.getArticleURL;
            entity = _closure1_slot8;
            entity = entity.PREMIUM_TRIAL;
            entity = michal.bind(zuuluu)(entity);
            _closure2_slot2 = entity;
            zuuluu = _closure1_slot10;
            michal = _closure1_slot3;
            entity = {};
            report = backup.container;
            entity['style'] = report;
            option = _closure1_slot9;
            golfie = _closure1_slot4;
            report = {};
            sizing = _closure1_slot2;
            if(verify) { _fun00002_ip = 759; continue _fun00001 }
 738:
            if(yankee) { _fun00002_ip = 750; continue _fun00001 }
 741:
            verify = 21;
            verify = sizing[verify];
            _fun00002_ip = 757; continue _fun00001;
 750:
            romeon = 20;
            verify = sizing[romeon];
 757:
            _fun00002_ip = 781; continue _fun00001;
 759:
            if(yankee) { _fun00002_ip = 771; continue _fun00001 }
 762:
            yankee = 19;
            yankee = sizing[yankee];
            _fun00002_ip = 778; continue _fun00001;
 771:
            romeon = 18;
            yankee = sizing[romeon];
 778:
            verify = yankee;
 781:
            verify = offset.bind(tangon)(verify);
            report['source'] = verify;
            verify = backup.img;
            report['style'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(5);
            report[0] = golfie;
            offset = _closure1_slot9;
            romeon = _closure1_slot0;
            yankee = _closure1_slot2;
            golfie = 22;
            option = yankee[golfie];
            option = romeon.bind(tangon)(option);
            verify = option.Text;
            option = {'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            sizing = backup.titleFont;
            option['style'] = sizing;
            sizing = yankee[result];
            sizing = romeon.bind(tangon)(sizing);
            output = sizing.intl;
            sizing = output.formatToPlainString;
            yankee = yankee[result];
            yankee = romeon.bind(tangon)(yankee);
            yankee = yankee.t;
            romeon = yankee.q8eMc3;
            yankee = {};
            ctrled = source == config;
            update = undefined;
            if(ctrled) { _fun00002_ip = 925; continue _fun00001 }
 919:
            update = config.sku_id;
 925:
            ctrled = source != update;
            update = null;
            if(!ctrled) { _fun00002_ip = 980; continue _fun00001 }
 934:
            vacuum = _closure1_slot0;
            record = _closure1_slot2;
            ctrled = 13;
            ctrled = record[ctrled];
            vacuum = vacuum.bind(tangon)(ctrled);
            ctrled = vacuum.getDisplayNameFromSku;
            record = source == config;
            source = undefined;
            if(record) { _fun00002_ip = 975; continue _fun00001 }
 969:
            source = config.sku_id;
 975:
            update = ctrled.bind(vacuum)(source);
 980:
            yankee['displayName'] = update;
            yankee['duration'] = sequen;
            yankee = sizing.bind(output)(romeon, yankee);
            option['children'] = yankee;
            option = offset.bind(tangon)(verify, option);
            report[1] = option;
            romeon = _closure1_slot9;
            sizing = _closure1_slot0;
            output = _closure1_slot2;
            golfie = output[golfie];
            golfie = sizing.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'variant': 'text-md/normal', 'color': 'text-link'};
            verify = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 23;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openURL;
                michal = _closure2_slot2;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            golfie['onPress'] = verify;
            verify = backup.termsApplyText;
            golfie['style'] = verify;
            verify = output[result];
            verify = sizing.bind(tangon)(verify);
            yankee = verify.intl;
            offset = yankee.string;
            verify = output[result];
            verify = sizing.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.sBp+u7;
            verify = offset.bind(yankee)(verify);
            golfie['children'] = verify;
            golfie = romeon.bind(tangon)(option, golfie);
            report[2] = golfie;
            yankee = _closure1_slot1;
            golfie = 24;
            golfie = output[golfie];
            option = yankee.bind(tangon)(golfie);
            golfie = {};
            offset = kiloes.map;
            verify = function(argFoo) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    golfie = argFoo;
                    option = entity;
                    michal = copyDataProperties(option, golfie);
                    tangon = _closure1_slot0;
                    report = _closure1_slot2;
                    zuuluu = 25;
                    zuuluu = report[zuuluu];
                    report = undefined;
                    oscard = tangon.bind(report)(zuuluu);
                    tangon = oscard.isThemeDark;
                    zuuluu = _closure2_slot1;
                    zuuluu = tangon.bind(oscard)(zuuluu);
                    tangon = _closure1_slot1;
                    oscard = _closure1_slot2;
                    michal = 8;
                    michal = oscard[michal];
                    michal = tangon.bind(report)(michal);
                    michal = michal.unsafe_rawColors;
                    if(zuuluu) { _fun00004_ip = 91; continue _fun00003 }
 83:
                    zuuluu = michal.PRIMARY_530;
                    _fun00004_ip = 97; continue _fun00003;
 91:
                    zuuluu = michal.WHITE_100;
 97:
                    michal = 'color';
                    entity[michal] = zuuluu;
                    return entity;
                }
            };
            verify = offset.bind(kiloes)(verify);
            golfie['features'] = verify;
            verify = backup.rowStyles;
            golfie['rowStyle'] = verify;
            verify = backup.labelStyles;
            golfie['labelStyle'] = verify;
            golfie = romeon.bind(tangon)(option, golfie);
            report[3] = golfie;
            option = _closure1_slot10;
            golfie = _closure1_slot3;
            oscard = {};
            verify = backup.buttonsContainer;
            oscard['style'] = verify;
            kiloes = 26;
            verify = output[kiloes];
            offset = yankee.bind(tangon)(verify);
            verify = {};
            update = output[result];
            update = sizing.bind(tangon)(update);
            vacuum = update.intl;
            ctrled = vacuum.formatToPlainString;
            update = output[result];
            update = sizing.bind(tangon)(update);
            update = update.t;
            source = update.xASjq6;
            update = {};
            update['duration'] = sequen;
            update = ctrled.bind(vacuum)(source, update);
            verify['text'] = update;
            echoed = function() { // Original name: onPress
                michal = _closure2_slot0;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            verify['onPress'] = echoed;
            offset = romeon.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = output[kiloes];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            echoed = output[result];
            echoed = sizing.bind(tangon)(echoed);
            update = echoed.intl;
            echoed = update.string;
            result = output[result];
            result = sizing.bind(tangon)(result);
            result = result.t;
            result = result.cpT0Cg;
            result = echoed.bind(update)(result);
            offset['text'] = result;
            kiloes = output[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.ButtonColors;
            kiloes = kiloes.TRANSPARENT;
            offset['color'] = kiloes;
            backup = backup.learnMoreText;
            offset['textStyle'] = backup;
            offset['onPress'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 27;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/premium/native/trials/PremiumTrialOfferActionSheetContent.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();