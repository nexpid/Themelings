// app/modules/premium/native/trials/PremiumTrialOfferActionSheetContentV2.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: PremiumTrialOfferBody
        michal = argFoo;
        zuuluu = michal.premiumType;
        var _closure2_slot0 = zuuluu;
        michal = _closure1_slot14;
        tangon = undefined;
        verify = michal.bind(tangon)();
        golfie = _closure1_slot3;
        report = golfie.useMemo;
        michal = new Array(1);
        michal[0] = zuuluu;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure2_slot0;
                michal = null;
                if(!(michal == zuuluu)) { _fun00002_ip = 22; continue _fun00001 }
 13:
                zuuluu = new Array(0);
                _fun00002_ip = 251; continue _fun00001;
 22:
                michal = {};
                oscard = _closure1_slot1;
                golfie = _closure1_slot2;
                report = 8;
                report = golfie[report];
                option = undefined;
                report = oscard.bind(option)(report);
                michal['icon'] = report;
                oscard = _closure1_slot0;
                report = 9;
                report = golfie[report];
                report = oscard.bind(option)(report);
                report = report.NitroWheelIcon;
                michal['IconComponent'] = report;
                oscard = _closure2_slot0;
                report = _closure1_slot7;
                report = report.TIER_0;
                if(!(oscard !== report)) { _fun00002_ip = 179; continue _fun00001 }
 98:
                oscard = _closure2_slot0;
                entity = _closure1_slot7;
                report = entity.TIER_2;
                entity = '';
                if(!(oscard === report)) { _fun00002_ip = 177; continue _fun00001 }
 120:
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                report = 10;
                oscard = offset[report];
                oscard = verify.bind(option)(oscard);
                golfie = oscard.intl;
                oscard = golfie.string;
                report = offset[report];
                report = verify.bind(option)(report);
                report = report.t;
                report = report.rZprQE;
                entity = oscard.bind(golfie)(report);
 177:
                _fun00002_ip = 236; continue _fun00001;
 179:
                golfie = _closure1_slot0;
                verify = _closure1_slot2;
                tangon = 10;
                report = verify[tangon];
                report = golfie.bind(option)(report);
                oscard = report.intl;
                report = oscard.string;
                tangon = verify[tangon];
                tangon = golfie.bind(option)(tangon);
                tangon = tangon.t;
                tangon = tangon.4LH+oa;
                entity = report.bind(oscard)(tangon);
 236:
                michal['label'] = entity;
                entity = new Array(1);
                entity[0] = michal;
                zuuluu = entity;
 251:
                michal = {};
                oscard = _closure1_slot1;
                verify = _closure1_slot2;
                tangon = 11;
                tangon = verify[tangon];
                option = undefined;
                tangon = oscard.bind(option)(tangon);
                michal['icon'] = tangon;
                golfie = _closure1_slot0;
                entity = 12;
                entity = verify[entity];
                entity = golfie.bind(option)(entity);
                entity = entity.FileUpIcon;
                michal['IconComponent'] = entity;
                tangon = 10;
                entity = verify[tangon];
                entity = golfie.bind(option)(entity);
                offset = entity.intl;
                report = offset.string;
                entity = verify[tangon];
                entity = golfie.bind(option)(entity);
                entity = entity.t;
                entity = entity.thJN9v;
                entity = report.bind(offset)(entity);
                michal['label'] = entity;
                entity = new Array(2);
                entity[0] = michal;
                michal = {};
                report = 13;
                report = verify[report];
                report = oscard.bind(option)(report);
                michal['icon'] = report;
                report = 14;
                report = verify[report];
                report = golfie.bind(option)(report);
                report = report.ReactionIcon;
                michal['IconComponent'] = report;
                report = verify[tangon];
                report = golfie.bind(option)(report);
                oscard = report.intl;
                report = oscard.string;
                tangon = verify[tangon];
                tangon = golfie.bind(option)(tangon);
                tangon = tangon.t;
                tangon = tangon.E1NP29;
                tangon = report.bind(oscard)(tangon);
                michal['label'] = tangon;
                entity[1] = michal;
                yankee = 2;
                foxtra = entity;
                romeon = zuuluu;
                michal = arraySpread(foxtra, romeon, yankee);
                return entity;
            }
        };
        offset = report.bind(golfie)(entity, michal);
        kiloes = _closure1_slot0;
        yankee = _closure1_slot2;
        entity = 15;
        entity = yankee[entity];
        michal = kiloes.bind(tangon)(entity);
        entity = michal.getPremiumTypeDisplayName;
        echoed = entity.bind(michal)(zuuluu);
        golfie = _closure1_slot1;
        entity = 16;
        entity = yankee[entity];
        michal = golfie.bind(tangon)(entity);
        entity = _closure1_slot9;
        entity = entity.MONTH;
        result = michal.bind(tangon)(zuuluu, entity);
        zuuluu = _closure1_slot13;
        michal = _closure1_slot12;
        entity = {};
        foxtra = _closure1_slot11;
        option = 17;
        report = yankee[option];
        report = kiloes.bind(tangon)(report);
        romeon = report.Text;
        report = {};
        backup = 'heading-xl/extrabold';
        report['variant'] = backup;
        backup = 10;
        sizing = yankee[backup];
        sizing = kiloes.bind(tangon)(sizing);
        source = sizing.intl;
        update = source.format;
        sizing = yankee[backup];
        sizing = kiloes.bind(tangon)(sizing);
        sizing = sizing.t;
        output = sizing.+2mmb2;
        sizing = {};
        sizing['nitroTierName'] = echoed;
        sizing = update.bind(source)(output, sizing);
        report['children'] = sizing;
        romeon = foxtra.bind(tangon)(romeon, report);
        report = new Array(3);
        report[0] = romeon;
        foxtra = _closure1_slot11;
        option = yankee[option];
        option = kiloes.bind(tangon)(option);
        romeon = option.Text;
        option = {};
        sizing = 'text-sm/normal';
        option['variant'] = sizing;
        sizing = yankee[backup];
        sizing = kiloes.bind(tangon)(sizing);
        output = sizing.intl;
        sizing = output.format;
        backup = yankee[backup];
        backup = kiloes.bind(tangon)(backup);
        backup = backup.t;
        kiloes = backup.DeqMaG;
        backup = {};
        backup['nitroTierName'] = echoed;
        backup['price'] = result;
        backup = sizing.bind(output)(kiloes, backup);
        option['children'] = backup;
        option = foxtra.bind(tangon)(romeon, option);
        report[1] = option;
        option = _closure1_slot11;
        oscard = 18;
        oscard = yankee[oscard];
        golfie = golfie.bind(tangon)(oscard);
        oscard = {};
        yankee = verify.features;
        oscard['style'] = yankee;
        oscard['features'] = offset;
        offset = verify.featureRow;
        oscard['rowStyle'] = offset;
        verify = verify.featureIcon;
        oscard['iconStyle'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    romeon = 0;
    golfie = oscard[romeon];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.PremiumTypes;
    var _closure1_slot7 = golfie;
    golfie = tangon.PremiumSubscriptionSKUToPremiumType;
    var _closure1_slot8 = golfie;
    tangon = tangon.SubscriptionIntervalTypes;
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ACTION_SHEET_MAX_WIDTH;
    var _closure1_slot10 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot11 = golfie;
    golfie = tangon.Fragment;
    var _closure1_slot12 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 7;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['marginHorizontal'] = foxtra;
    tangon['scrollView'] = verify;
    verify = {'minHeight': 28, 'minWidth': 118};
    tangon['headerLogo'] = verify;
    verify = {};
    foxtra = 'absolute';
    verify['position'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['left'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['bottom'] = foxtra;
    tangon['headerContainer'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['marginTop'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['paddingHorizontal'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    verify['paddingVertical'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    verify['borderRadius'] = foxtra;
    tangon['headerPill'] = verify;
    verify = {'position': 'absolute', 'right': null, 'top': null, 'width': 170, 'height': 140};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_32;
    verify['right'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_32;
    verify['top'] = foxtra;
    tangon['headerWumpus'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['marginTop'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['marginHorizontal'] = foxtra;
    tangon['bodyContainer'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['marginTop'] = foxtra;
    tangon['features'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['marginEnd'] = foxtra;
    verify['paddingHorizontal'] = romeon;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.CHANNELS_DEFAULT;
    verify['tintColor'] = foxtra;
    tangon['featureIcon'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['marginTop'] = foxtra;
    verify['paddingVertical'] = romeon;
    tangon['featureRow'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_24;
    verify['marginTop'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginHorizontal'] = romeon;
    romeon = 'space-between';
    verify['justifyContent'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['gap'] = offset;
    tangon['buttonContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot14 = tangon;
    tangon = 29;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/premium/native/trials/PremiumTrialOfferActionSheetContentV2.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: PremiumTrialOfferActionSheetContentV2
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            source = michal.fallbackPremiumType;
            report = michal.trialOffer;
            config = michal.intervalDuration;
            result = michal.onConfirm;
            kiloes = michal.onDismiss;
            tangon = undefined;
            var _closure2_slot0 = tangon;
            var _closure2_slot1 = tangon;
            michal = _closure1_slot14;
            yankee = michal.bind(tangon)();
            michal = null;
            oscard = michal == report;
            zuuluu = undefined;
            if(oscard) { _fun00004_ip = 88; continue _fun00003 }
 67:
            report = report.subscription_trial;
            oscard = michal == report;
            zuuluu = undefined;
            if(oscard) { _fun00004_ip = 88; continue _fun00003 }
 82:
            zuuluu = report.sku_id;
 88:
            if(!(michal != zuuluu)) { _fun00004_ip = 100; continue _fun00003 }
 92:
            michal = _closure1_slot8;
            source = michal[zuuluu];
 100:
            michal = _closure1_slot7;
            michal = michal.TIER_0;
            if(!(source !== michal)) { _fun00004_ip = 136; continue _fun00003 }
 114:
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 20;
            michal = report[michal];
            output = zuuluu.bind(tangon)(michal);
            _fun00004_ip = 156; continue _fun00003;
 136:
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 19;
            michal = report[michal];
            output = zuuluu.bind(tangon)(michal);
 156:
            verify = _closure1_slot1;
            update = _closure1_slot2;
            michal = 21;
            michal = update[michal];
            michal = verify.bind(tangon)(michal);
            michal = michal.bind(tangon)();
            zuuluu = michal.left;
            _closure2_slot0 = zuuluu;
            michal = michal.right;
            _closure2_slot1 = michal;
            echoed = _closure1_slot0;
            michal = 22;
            michal = update[michal];
            report = echoed.bind(tangon)(michal);
            zuuluu = report.useStateFromStores;
            oscard = _closure1_slot6;
            michal = new Array(1);
            michal[0] = oscard;
            entity = function() {
                entity = global;
                tangon = entity.Math;
                zuuluu = tangon.min;
                report = _closure1_slot6;
                michal = report.getWidth;
                michal = michal.bind(report)();
                oscard = _closure1_slot10;
                report = _closure2_slot0;
                report = oscard + report;
                entity = _closure2_slot1;
                entity = report + entity;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            offset = zuuluu.bind(report)(michal, entity);
            option = 23;
            entity = update[option];
            michal = echoed.bind(tangon)(entity);
            entity = michal.usePremiumFeatureCardData;
            backup = entity.bind(michal)(offset, source);
            report = _closure1_slot13;
            entity = update[option];
            entity = echoed.bind(tangon)(entity);
            zuuluu = entity.PremiumFeaturesCardBackground;
            michal = {};
            entity = {};
            oscard = update[option];
            oscard = echoed.bind(tangon)(oscard);
            oscard = oscard.PREMIUM_FEATURES_PROPORTIONAL_CARD_WIDTH;
            oscard = offset * oscard;
            entity['width'] = oscard;
            michal['style'] = entity;
            oscard = _closure1_slot13;
            golfie = _closure1_slot4;
            entity = {};
            romeon = yankee.headerContainer;
            entity['style'] = romeon;
            ctrled = _closure1_slot11;
            romeon = 24;
            romeon = update[romeon];
            sizing = verify.bind(tangon)(romeon);
            romeon = {};
            vacuum = yankee.headerLogo;
            romeon['style'] = vacuum;
            romeon['premiumType'] = source;
            sizing = ctrled.bind(tangon)(sizing, romeon);
            romeon = new Array(2);
            romeon[0] = sizing;
            sequen = _closure1_slot11;
            sizing = 25;
            sizing = update[sizing];
            vacuum = verify.bind(tangon)(sizing);
            ctrled = {};
            sizing = yankee.headerPill;
            ctrled['style'] = sizing;
            sizing = 26;
            record = update[sizing];
            record = echoed.bind(tangon)(record);
            record = record.Gradients;
            record = record.PREMIUM_TIER_2;
            ctrled['colors'] = record;
            record = update[sizing];
            record = echoed.bind(tangon)(record);
            record = record.HorizontalGradient;
            record = record.START;
            ctrled['start'] = record;
            sizing = update[sizing];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.HorizontalGradient;
            sizing = sizing.END;
            ctrled['end'] = sizing;
            papara = _closure1_slot11;
            sizing = 17;
            sizing = update[sizing];
            sizing = echoed.bind(tangon)(sizing);
            cntext = sizing.Text;
            record = {'variant': 'heading-sm/extrabold', 'allowFontScaling': false, 'color': 'always-white'};
            sizing = 10;
            target = update[sizing];
            target = echoed.bind(tangon)(target);
            limora = target.intl;
            sierra = limora.formatToPlainString;
            target = update[sizing];
            target = echoed.bind(tangon)(target);
            target = target.t;
            status = target.I1eIdX;
            target = {};
            target['duration'] = config;
            status = sierra.bind(limora)(status, target);
            target = status.toUpperCase;
            target = target.bind(status)();
            record['children'] = target;
            record = papara.bind(tangon)(cntext, record);
            ctrled['children'] = record;
            ctrled = sequen.bind(tangon)(vacuum, ctrled);
            romeon[1] = ctrled;
            entity['children'] = romeon;
            oscard = oscard.bind(tangon)(golfie, entity);
            entity = new Array(2);
            entity[0] = oscard;
            romeon = _closure1_slot11;
            oscard = 27;
            oscard = update[oscard];
            verify = verify.bind(tangon)(oscard);
            oscard = {};
            ctrled = yankee.headerWumpus;
            oscard['style'] = ctrled;
            ctrled = 'contain';
            oscard['resizeMode'] = ctrled;
            oscard['source'] = output;
            oscard = romeon.bind(tangon)(verify, oscard);
            entity[1] = oscard;
            michal['children'] = entity;
            entity = 'first_card';
            romeon = report.bind(tangon)(zuuluu, michal, entity);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot5;
            entity = {};
            oscard = _closure1_slot13;
            report = {};
            option = update[option];
            option = echoed.bind(tangon)(option);
            verify = option.PremiumFeaturesCarousel;
            option = {};
            option['width'] = offset;
            offset = new Array(1);
            offset[0] = romeon;
            equals = 1;
            variable36 = offset;
            quebec = backup;
            romeon = arraySpread(variable36, quebec, equals);
            option['children'] = offset;
            verify = zuuluu.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            offset = _closure1_slot11;
            verify = {};
            romeon = yankee.bodyContainer;
            verify['style'] = romeon;
            output = _closure1_slot11;
            backup = _closure1_slot15;
            romeon = {};
            romeon['premiumType'] = source;
            romeon = output.bind(tangon)(backup, romeon);
            verify['children'] = romeon;
            verify = offset.bind(tangon)(golfie, verify);
            option[1] = verify;
            offset = _closure1_slot13;
            verify = {};
            yankee = yankee.buttonContainer;
            verify['style'] = yankee;
            output = _closure1_slot11;
            romeon = 28;
            yankee = update[romeon];
            yankee = echoed.bind(tangon)(yankee);
            backup = yankee.Button;
            yankee = {};
            source = 'primary';
            yankee['variant'] = source;
            source = update[sizing];
            source = echoed.bind(tangon)(source);
            sequen = source.intl;
            vacuum = sequen.formatToPlainString;
            source = update[sizing];
            source = echoed.bind(tangon)(source);
            source = source.t;
            ctrled = source.xASjq6;
            source = {};
            source['duration'] = config;
            source = vacuum.bind(sequen)(ctrled, source);
            yankee['text'] = source;
            yankee['onPress'] = result;
            backup = output.bind(tangon)(backup, yankee);
            yankee = new Array(2);
            yankee[0] = backup;
            backup = _closure1_slot11;
            romeon = update[romeon];
            romeon = echoed.bind(tangon)(romeon);
            foxtra = romeon.Button;
            romeon = {};
            output = 'secondary';
            romeon['variant'] = output;
            output = update[sizing];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = update[sizing];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.TulDPj;
            sizing = output.bind(result)(sizing);
            romeon['text'] = sizing;
            romeon['onPress'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            verify['children'] = yankee;
            verify = offset.bind(tangon)(golfie, verify);
            option[2] = verify;
            report['children'] = option;
            report = oscard.bind(tangon)(golfie, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();