// app/modules/premium/powerups/constants/GuildPowerupsConstants.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    golfie = argBar;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = golfie;
    var _closure1_slot1 = option;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, tangon);
    entity = 0;
    tangon = option[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    tangon = tangon.BoostedGuildFeatures;
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = option[tangon];
    tangon = golfie.bind(entity)(tangon);
    oscard = tangon.BoostedGuildTiers;
    var _closure1_slot3 = oscard;
    tangon = tangon.GuildFeatures;
    var _closure1_slot4 = tangon;
    report = {};
    tangon = 'perk';
    report['PERK'] = tangon;
    tangon = 'level';
    report['LEVEL'] = tangon;
    tangon = {};
    verify = oscard.TIER_1;
    tangon['1341586379779604621'] = verify;
    verify = oscard.TIER_2;
    tangon['1341586379779604622'] = verify;
    oscard = oscard.TIER_3;
    tangon['1341586379779604623'] = oscard;
    oscard = 4;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = 'modules/premium/powerups/constants/GuildPowerupsConstants.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['GuildPowerupType'] = report;
    report = '1340102344645283891';
    zuuluu['GUILD_POWERUP_APPLICATION_ID'] = report;
    zuuluu['SKU_ID_TO_BOOSTING_TIER'] = tangon;
    tangon = '1351706802684952639';
    zuuluu['GUILD_POWERUP_RAPIDASH_SKU_ID'] = tangon;
    michal = function() {
        entity = {};
        michal = _closure1_slot4;
        report = michal.VIDEO_BITRATE_ENHANCED;
        zuuluu = {};
        romeon = _closure1_slot0;
        foxtra = _closure1_slot1;
        tangon = 2;
        oscard = foxtra[tangon];
        yankee = undefined;
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.STREAM;
        zuuluu['perkIcon'] = oscard;
        option = 3;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        verify = oscard.intl;
        golfie = verify.string;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        oscard = oscard.y4ft4O;
        oscard = golfie.bind(verify)(oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.AUDIO_BITRATE_128_KBPS;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.AUDIO;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        offset = oscard.intl;
        verify = offset.formatToPlainString;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        golfie = oscard.zoT1ZG;
        oscard = {};
        sizing = _closure1_slot2;
        backup = _closure1_slot3;
        kiloes = backup.TIER_1;
        kiloes = sizing[kiloes];
        kiloes = kiloes.limits;
        output = kiloes.bitrate;
        kiloes = 1000;
        output = output / kiloes;
        oscard['bitrate'] = output;
        oscard = verify.bind(offset)(golfie, oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.INVITE_SPLASH;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.CUSTOMIZATION;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        verify = oscard.intl;
        golfie = verify.string;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        oscard = oscard.Qwlpoq;
        oscard = golfie.bind(verify)(oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.ANIMATED_ICON;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.ANIMATED;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        verify = oscard.intl;
        golfie = verify.string;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        oscard = oscard.PbAyub;
        oscard = golfie.bind(verify)(oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.AUDIO_BITRATE_256_KBPS;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.AUDIO;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        offset = oscard.intl;
        verify = offset.formatToPlainString;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        golfie = oscard.zoT1ZG;
        oscard = {};
        output = backup.TIER_2;
        output = sizing[output];
        output = output.limits;
        output = output.bitrate;
        output = output / kiloes;
        oscard['bitrate'] = output;
        oscard = verify.bind(offset)(golfie, oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.ROLE_ICONS;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.CUSTOM_ROLE_ICON;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        verify = oscard.intl;
        golfie = verify.string;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        oscard = oscard.6PV6QU;
        oscard = golfie.bind(verify)(oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.MAX_FILE_SIZE_50_MB;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.UPLOAD;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        offset = oscard.intl;
        verify = offset.formatToPlainString;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        golfie = oscard.aFRl5+;
        oscard = {};
        output = foxtra[option];
        output = romeon.bind(yankee)(output);
        echoed = output.intl;
        result = echoed.string;
        output = foxtra[option];
        output = romeon.bind(yankee)(output);
        output = output.t;
        output = output.yMOW8P;
        output = result.bind(echoed)(output);
        oscard['uploadSizeLimit'] = output;
        oscard = verify.bind(offset)(golfie, oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.BANNER;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.CUSTOMIZATION;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        verify = oscard.intl;
        golfie = verify.string;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        oscard = oscard.1a5rjo;
        oscard = golfie.bind(verify)(oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.ANIMATED_BANNER;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.ANIMATED;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        verify = oscard.intl;
        golfie = verify.string;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        oscard = oscard.1+Vmh4;
        oscard = golfie.bind(verify)(oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.AUDIO_BITRATE_384_KBPS;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.AUDIO;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        offset = oscard.intl;
        verify = offset.formatToPlainString;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        golfie = oscard.zoT1ZG;
        oscard = {};
        backup = backup.TIER_3;
        backup = sizing[backup];
        backup = backup.limits;
        backup = backup.bitrate;
        backup = backup / kiloes;
        oscard['bitrate'] = backup;
        oscard = verify.bind(offset)(golfie, oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        report = michal.VANITY_URL;
        zuuluu = {};
        oscard = foxtra[tangon];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.PerkIcons;
        oscard = oscard.VANITY;
        zuuluu['perkIcon'] = oscard;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        verify = oscard.intl;
        golfie = verify.string;
        oscard = foxtra[option];
        oscard = romeon.bind(yankee)(oscard);
        oscard = oscard.t;
        oscard = oscard.adNGjY;
        oscard = golfie.bind(verify)(oscard);
        zuuluu['description'] = oscard;
        entity[report] = zuuluu;
        zuuluu = michal.MAX_FILE_SIZE_100_MB;
        michal = {};
        tangon = foxtra[tangon];
        tangon = romeon.bind(yankee)(tangon);
        tangon = tangon.PerkIcons;
        tangon = tangon.UPLOAD;
        michal['perkIcon'] = tangon;
        tangon = foxtra[option];
        tangon = romeon.bind(yankee)(tangon);
        golfie = tangon.intl;
        oscard = golfie.formatToPlainString;
        tangon = foxtra[option];
        tangon = romeon.bind(yankee)(tangon);
        tangon = tangon.t;
        report = tangon.aFRl5+;
        tangon = {};
        verify = foxtra[option];
        verify = romeon.bind(yankee)(verify);
        offset = verify.intl;
        verify = offset.string;
        option = foxtra[option];
        option = romeon.bind(yankee)(option);
        option = option.t;
        option = option.yMOW8P;
        option = verify.bind(offset)(option);
        tangon['uploadSizeLimit'] = option;
        tangon = oscard.bind(golfie)(report, tangon);
        michal['description'] = tangon;
        entity[zuuluu] = michal;
        return entity;
    };
    zuuluu['GUILD_FEATURE_TO_PERK'] = michal;
    return entity;
})();