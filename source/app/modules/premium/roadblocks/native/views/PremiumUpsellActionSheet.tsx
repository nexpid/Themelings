// app/modules/premium/roadblocks/native/views/PremiumUpsellActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: getPageContent
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            entity = 13;
            entity = tangon[entity];
            report = undefined;
            entity = zuuluu.bind(report)(entity);
            entity = entity.EntitlementFeatureNames;
            tangon = entity.INCREASED_FILE_UPLOAD_SIZE;
            zuuluu = argFoo;
            entity = null;
            if(!(zuuluu === tangon)) { _fun00002_ip = 62; continue _fun00001 }
 46:
            tangon = _closure1_slot17;
            zuuluu = _closure1_slot22;
            michal = {};
            entity = tangon.bind(report)(zuuluu, michal);
 62:
            return entity;
        }
    };
    var _closure1_slot21 = entity;
    entity = function() { // Original name: AlwaysCompressImagesSwitch
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = _closure1_slot19;
            report = undefined;
            foxtra = michal.bind(report)();
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 21;
            michal = tangon[michal];
            oscard = zuuluu.bind(report)(michal);
            tangon = oscard.useStateFromStores;
            michal = _closure1_slot7;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                entity = _closure1_slot7;
                entity = entity.dataSavingMode;
                return entity;
            };
            yankee = tangon.bind(oscard)(zuuluu, michal);
            tangon = _closure1_slot4;
            zuuluu = tangon.useCallback;
            michal = function(argFoo) {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 22;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.updatedUnsyncedSettings;
                michal = {};
                report = argFoo;
                michal['dataSavingMode'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = new Array(0);
            offset = zuuluu.bind(tangon)(michal, entity);
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            entity = !yankee;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot3;
            entity = 1;
            michal = michal.bind(report)(zuuluu, entity);
            entity = 0;
            michal = michal[entity];
            entity = null;
            if(!michal) { _fun00004_ip = 369; continue _fun00003 }
 131:
            tangon = _closure1_slot17;
            zuuluu = _closure1_slot5;
            michal = {};
            oscard = foxtra.compressionContainer;
            michal['style'] = oscard;
            option = _closure1_slot17;
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            oscard = 23;
            oscard = sizing[oscard];
            oscard = kiloes.bind(report)(oscard);
            golfie = oscard.TableSwitchRow;
            oscard = {'start': true, 'end': true};
            romeon = 14;
            backup = sizing[romeon];
            backup = kiloes.bind(report)(backup);
            result = backup.intl;
            output = result.string;
            backup = sizing[romeon];
            backup = kiloes.bind(report)(backup);
            backup = backup.t;
            backup = backup.ix8XIi;
            backup = output.bind(result)(backup);
            oscard['label'] = backup;
            oscard['value'] = yankee;
            oscard['onValueChange'] = offset;
            yankee = _closure1_slot17;
            verify = 24;
            verify = sizing[verify];
            verify = kiloes.bind(report)(verify);
            offset = verify.Text;
            verify = {};
            foxtra = foxtra.compressionHint;
            verify['style'] = foxtra;
            foxtra = 'text-xs/normal';
            verify['variant'] = foxtra;
            foxtra = sizing[romeon];
            foxtra = kiloes.bind(report)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            romeon = sizing[romeon];
            romeon = kiloes.bind(report)(romeon);
            romeon = romeon.t;
            romeon = romeon.wC0+Pj;
            romeon = foxtra.bind(backup)(romeon);
            verify['children'] = romeon;
            verify = yankee.bind(report)(offset, verify);
            oscard['subLabel'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 369:
            return entity;
        }
    };
    var _closure1_slot22 = entity;
    entity = function(argFoo) { // Original name: PremiumUpsellImage
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            golfie = entity.image;
            entity = _closure1_slot20;
            report = undefined;
            oscard = entity.bind(report)();
            zuuluu = 'string';
            entity = typeof golfie;
            if(!(zuuluu !== entity)) { _fun00006_ip = 90; continue _fun00005 }
 33:
            tangon = _closure1_slot17;
            zuuluu = _closure1_slot1;
            option = _closure1_slot2;
            entity = 26;
            entity = option[entity];
            zuuluu = zuuluu.bind(report)(entity);
            entity = {};
            entity['source'] = golfie;
            option = 'contain';
            entity['resizeMode'] = option;
            option = oscard.image;
            entity['style'] = option;
            entity = tangon.bind(report)(zuuluu, entity);
            _fun00006_ip = 136; continue _fun00005;
 90:
            tangon = _closure1_slot17;
            zuuluu = _closure1_slot1;
            option = _closure1_slot2;
            michal = 25;
            michal = option[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = {};
            michal['url'] = golfie;
            oscard = oscard.image;
            michal['style'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 136:
            return entity;
        }
    };
    var _closure1_slot23 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    foxtra = 2;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.PremiumSubscriptionSKUs;
    var _closure1_slot10 = golfie;
    golfie = tangon.PremiumTypes;
    var _closure1_slot11 = golfie;
    tangon = tangon.PremiumUpsellTypes;
    var _closure1_slot12 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AnalyticEvents;
    var _closure1_slot13 = golfie;
    golfie = tangon.AnalyticsPages;
    var _closure1_slot14 = golfie;
    golfie = tangon.HelpdeskArticles;
    var _closure1_slot15 = golfie;
    tangon = tangon.ThemeTypes;
    var _closure1_slot16 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot17 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot18 = tangon;
    tangon = 10;
    golfie = oscard[tangon];
    verify = report.bind(entity)(golfie);
    option = verify.createStyles;
    golfie = {};
    romeon = {'alignSelf': 'center', 'marginTop': null, 'width': 240, 'height': 144};
    backup = 'center';
    offset = 11;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    romeon['marginTop'] = kiloes;
    golfie['image'] = romeon;
    romeon = {'alignSelf': 'center', 'textAlign': 'center'};
    golfie['text'] = romeon;
    romeon = {};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    romeon['marginHorizontal'] = kiloes;
    golfie['description'] = romeon;
    romeon = {};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_24;
    romeon['marginTop'] = kiloes;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_8;
    romeon['marginHorizontal'] = kiloes;
    romeon['alignItems'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    romeon['gap'] = backup;
    golfie['textContainer'] = romeon;
    romeon = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_32;
    romeon['marginTop'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    romeon['gap'] = backup;
    golfie['buttonContainer'] = romeon;
    romeon = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.round;
    romeon['borderRadius'] = backup;
    golfie['button'] = romeon;
    romeon = {'width': '100%', 'height': '100%', 'position': 'absolute', 'overflow': 'hidden'};
    golfie['gradient'] = romeon;
    romeon = {'width': 20, 'height': 20, 'marginEnd': 2};
    golfie['nitroWheel'] = romeon;
    romeon = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    romeon['marginTop'] = backup;
    golfie['compressionContainer'] = romeon;
    romeon = {};
    romeon['marginTop'] = foxtra;
    golfie['compressionHint'] = romeon;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot19 = golfie;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignSelf': 'center', 'marginTop': null, 'width': 240, 'height': 144};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['marginTop'] = offset;
    tangon['image'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot20 = tangon;
    tangon = 42;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/premium/roadblocks/native/views/PremiumUpsellActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: PremiumUpsellActionSheet
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            yankee = entity.featureName;
            michal = entity.legacyProps;
            var _closure2_slot0 = michal;
            report = undefined;
            var _closure2_slot2 = report;
            var _closure2_slot3 = report;
            var _closure2_slot4 = report;
            var _closure2_slot5 = report;
            var _closure2_slot6 = report;
            entity = _closure1_slot19;
            source = entity.bind(report)();
            var _closure2_slot1 = source;
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            oscard = 21;
            entity = tangon[oscard];
            verify = zuuluu.bind(report)(entity);
            option = verify.useStateFromStores;
            entity = _closure1_slot9;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                michal = _closure1_slot9;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            entity = option.bind(verify)(golfie, entity);
            entity = 27;
            entity = tangon[entity];
            tangon = zuuluu.bind(report)(entity);
            zuuluu = tangon.usePremiumUpsellConfig;
            offset = null;
            golfie = offset == michal;
            entity = undefined;
            if(golfie) { _fun00008_ip = 143; continue _fun00007 }
 137:
            entity = michal.initialUpsellKey;
 143:
            if(!(offset == entity)) { _fun00008_ip = 178; continue _fun00007 }
 147:
            option = _closure1_slot0;
            verify = _closure1_slot2;
            golfie = 28;
            golfie = verify[golfie];
            option = option.bind(report)(golfie);
            golfie = option.getUpsellType;
            entity = golfie.bind(option)(yankee);
 178:
            entity = zuuluu.bind(tangon)(entity);
            result = entity.useTier0UpsellContent;
            _closure2_slot2 = result;
            entity = entity.onViewAllPerks;
            _closure2_slot3 = entity;
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot2;
            golfie = zuuluu[oscard];
            romeon = tangon.bind(report)(golfie);
            verify = romeon.useStateFromStores;
            golfie = _closure1_slot6;
            option = new Array(1);
            option[0] = golfie;
            golfie = function() {
                entity = _closure1_slot6;
                entity = entity.theme;
                return entity;
            };
            golfie = verify.bind(romeon)(option, golfie);
            zuuluu = zuuluu[oscard];
            option = tangon.bind(report)(zuuluu);
            oscard = option.useStateFromStores;
            zuuluu = _closure1_slot8;
            tangon = new Array(1);
            tangon[0] = zuuluu;
            zuuluu = function() {
                michal = _closure1_slot8;
                entity = michal.getGuildId;
                entity = entity.bind(michal)();
                return entity;
            };
            oscard = oscard.bind(option)(tangon, zuuluu);
            zuuluu = _closure1_slot11;
            if(result) { _fun00008_ip = 300; continue _fun00007 }
 292:
            tangon = zuuluu.TIER_2;
            _fun00008_ip = 306; continue _fun00007;
 300:
            tangon = zuuluu.TIER_0;
 306:
            zuuluu = function(argFoo, argBar, argBaz, argCor) { // Original name: getPageConfig
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    entity = _closure1_slot16;
                    michal = entity.LIGHT;
                    kiloes = 'dark';
                    entity = argBaz;
                    if(!(entity === michal)) { _fun00010_ip = 27; continue _fun00009 }
 23:
                    kiloes = 'light';
 27:
                    romeon = _closure1_slot0;
                    golfie = _closure1_slot2;
                    entity = 12;
                    entity = golfie[entity];
                    oscard = undefined;
                    zuuluu = romeon.bind(oscard)(entity);
                    michal = zuuluu.getPremiumTypeDisplayName;
                    entity = argBar;
                    update = michal.bind(zuuluu)(entity);
                    entity = {};
                    michal = 13;
                    zuuluu = golfie[michal];
                    zuuluu = romeon.bind(oscard)(zuuluu);
                    zuuluu = zuuluu.EntitlementFeatureNames;
                    offset = zuuluu.SOUNDBOARD_EVERYWHERE;
                    zuuluu = {};
                    verify = 14;
                    tangon = golfie[verify];
                    tangon = romeon.bind(oscard)(tangon);
                    yankee = tangon.intl;
                    option = yankee.string;
                    tangon = golfie[verify];
                    tangon = romeon.bind(oscard)(tangon);
                    tangon = tangon.t;
                    tangon = tangon.jGDYFx;
                    tangon = option.bind(yankee)(tangon);
                    zuuluu['title'] = tangon;
                    tangon = golfie[verify];
                    tangon = romeon.bind(oscard)(tangon);
                    foxtra = tangon.intl;
                    yankee = foxtra.formatToPlainString;
                    tangon = golfie[verify];
                    tangon = romeon.bind(oscard)(tangon);
                    tangon = tangon.t;
                    option = tangon.fc+8u7;
                    tangon = {};
                    tangon['nitroTierName'] = update;
                    tangon = yankee.bind(foxtra)(option, tangon);
                    zuuluu['description'] = tangon;
                    option = _closure1_slot14;
                    tangon = option.PREMIUM_UPSELL_SOUNDBOARD_EVERYWHERE;
                    zuuluu['analyticsPage'] = tangon;
                    tangon = _closure1_slot12;
                    yankee = tangon.SOUNDBOARD_EVERYWHERE_UPSELL;
                    zuuluu['upsellType'] = yankee;
                    yankee = global;
                    foxtra = yankee.HermesInternal;
                    sizing = foxtra.concat;
                    foxtra = 'https://cdn.discordapp.com/assets/premium/roadblocks/soundboard_';
                    backup = '.png';
                    foxtra = sizing.bind(foxtra)(kiloes, backup);
                    zuuluu['image'] = foxtra;
                    entity[offset] = zuuluu;
                    zuuluu = golfie[michal];
                    zuuluu = romeon.bind(oscard)(zuuluu);
                    zuuluu = zuuluu.EntitlementFeatureNames;
                    offset = zuuluu.EMOJIS_EVERYWHERE;
                    zuuluu = {};
                    foxtra = golfie[verify];
                    foxtra = romeon.bind(oscard)(foxtra);
                    output = foxtra.intl;
                    sizing = output.string;
                    foxtra = golfie[verify];
                    foxtra = romeon.bind(oscard)(foxtra);
                    foxtra = foxtra.t;
                    foxtra = foxtra.zY5PPT;
                    foxtra = sizing.bind(output)(foxtra);
                    zuuluu['title'] = foxtra;
                    foxtra = golfie[verify];
                    foxtra = romeon.bind(oscard)(foxtra);
                    result = foxtra.intl;
                    output = result.formatToPlainString;
                    foxtra = golfie[verify];
                    foxtra = romeon.bind(oscard)(foxtra);
                    foxtra = foxtra.t;
                    sizing = foxtra.uukIFx;
                    foxtra = {};
                    foxtra['nitroTierName'] = update;
                    foxtra = output.bind(result)(sizing, foxtra);
                    zuuluu['description'] = foxtra;
                    foxtra = option.PREMIUM_UPSELL_EMOJI_EVERYWHERE;
                    zuuluu['analyticsPage'] = foxtra;
                    foxtra = tangon.EMOJI_EVERYWHERE_UPSELL;
                    zuuluu['upsellType'] = foxtra;
                    foxtra = yankee.HermesInternal;
                    sizing = foxtra.concat;
                    foxtra = 'https://cdn.discordapp.com/assets/premium/roadblocks/emoji_';
                    sizing = sizing.bind(foxtra)(kiloes, backup);
                    zuuluu['image'] = sizing;
                    entity[offset] = zuuluu;
                    zuuluu = golfie[michal];
                    zuuluu = romeon.bind(oscard)(zuuluu);
                    zuuluu = zuuluu.EntitlementFeatureNames;
                    offset = zuuluu.INCREASED_FILE_UPLOAD_SIZE;
                    zuuluu = {};
                    sizing = golfie[verify];
                    sizing = romeon.bind(oscard)(sizing);
                    result = sizing.intl;
                    output = result.string;
                    sizing = golfie[verify];
                    sizing = romeon.bind(oscard)(sizing);
                    sizing = sizing.t;
                    sizing = sizing.G+pngo;
                    sizing = output.bind(result)(sizing);
                    zuuluu['title'] = sizing;
                    sizing = 15;
                    sizing = golfie[sizing];
                    result = romeon.bind(oscard)(sizing);
                    output = result.fileUploadLimitRoadblockDescription;
                    sizing = {};
                    echoed = argCor;
                    sizing['guildId'] = echoed;
                    echoed = function() { // Original name: onClick
                        oscard = _closure1_slot1;
                        golfie = _closure1_slot2;
                        entity = 16;
                        zuuluu = golfie[entity];
                        entity = undefined;
                        tangon = oscard.bind(entity)(zuuluu);
                        zuuluu = tangon.openURL;
                        report = 17;
                        report = golfie[report];
                        oscard = oscard.bind(entity)(report);
                        report = oscard.getArticleURL;
                        michal = _closure1_slot15;
                        michal = michal.NITRO_FAQ;
                        michal = report.bind(oscard)(michal);
                        michal = zuuluu.bind(tangon)(michal);
                        return entity;
                    };
                    sizing['onClick'] = echoed;
                    sizing = output.bind(result)(sizing);
                    zuuluu['description'] = sizing;
                    sizing = option.PREMIUM_UPSELL_FILE_UPLOAD;
                    zuuluu['analyticsPage'] = sizing;
                    sizing = tangon.LARGER_FILE_UPLOAD_UPSELL;
                    zuuluu['upsellType'] = sizing;
                    sizing = yankee.HermesInternal;
                    result = sizing.concat;
                    output = 'https://cdn.discordapp.com/assets/premium/roadblocks/file_upload_';
                    sizing = '_v2.png';
                    sizing = result.bind(output)(kiloes, sizing);
                    zuuluu['image'] = sizing;
                    entity[offset] = zuuluu;
                    zuuluu = golfie[michal];
                    zuuluu = romeon.bind(oscard)(zuuluu);
                    zuuluu = zuuluu.EntitlementFeatureNames;
                    offset = zuuluu.ANIMATED_EMOJIS;
                    zuuluu = {};
                    sizing = golfie[verify];
                    sizing = romeon.bind(oscard)(sizing);
                    result = sizing.intl;
                    output = result.string;
                    sizing = golfie[verify];
                    sizing = romeon.bind(oscard)(sizing);
                    sizing = sizing.t;
                    sizing = sizing.SI7R9P;
                    sizing = output.bind(result)(sizing);
                    zuuluu['title'] = sizing;
                    sizing = golfie[verify];
                    sizing = romeon.bind(oscard)(sizing);
                    echoed = sizing.intl;
                    result = echoed.formatToPlainString;
                    sizing = golfie[verify];
                    sizing = romeon.bind(oscard)(sizing);
                    sizing = sizing.t;
                    output = sizing.uGkSY2;
                    sizing = {};
                    sizing['nitroTierName'] = update;
                    sizing = result.bind(echoed)(output, sizing);
                    zuuluu['description'] = sizing;
                    sizing = option.PREMIUM_UPSELL_ANIMATED_EMOJI;
                    zuuluu['analyticsPage'] = sizing;
                    sizing = tangon.ANIMATED_EMOJI_UPSELL;
                    zuuluu['upsellType'] = sizing;
                    yankee = yankee.HermesInternal;
                    yankee = yankee.concat;
                    yankee = yankee.bind(foxtra)(kiloes, backup);
                    zuuluu['image'] = yankee;
                    entity[offset] = zuuluu;
                    zuuluu = golfie[michal];
                    zuuluu = romeon.bind(oscard)(zuuluu);
                    zuuluu = zuuluu.EntitlementFeatureNames;
                    offset = zuuluu.CLIENT_THEMES;
                    zuuluu = {};
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    backup = yankee.intl;
                    foxtra = backup.string;
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    yankee = yankee.t;
                    yankee = yankee.p0I2Bg;
                    yankee = foxtra.bind(backup)(yankee);
                    zuuluu['title'] = yankee;
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    backup = yankee.intl;
                    foxtra = backup.string;
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    yankee = yankee.t;
                    yankee = yankee.jBqF2t;
                    yankee = foxtra.bind(backup)(yankee);
                    zuuluu['description'] = yankee;
                    yankee = option.PREMIUM_UPSELL_CLIENT_THEMES;
                    zuuluu['analyticsPage'] = yankee;
                    yankee = tangon.CLIENT_THEMES_UPSELL;
                    zuuluu['upsellType'] = yankee;
                    report = _closure1_slot1;
                    yankee = 18;
                    yankee = golfie[yankee];
                    yankee = report.bind(oscard)(yankee);
                    zuuluu['image'] = yankee;
                    entity[offset] = zuuluu;
                    zuuluu = golfie[michal];
                    zuuluu = romeon.bind(oscard)(zuuluu);
                    zuuluu = zuuluu.EntitlementFeatureNames;
                    offset = zuuluu.APP_ICONS;
                    zuuluu = {};
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    backup = yankee.intl;
                    foxtra = backup.string;
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    yankee = yankee.t;
                    yankee = yankee.TYFwc3;
                    yankee = foxtra.bind(backup)(yankee);
                    zuuluu['title'] = yankee;
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    backup = yankee.intl;
                    foxtra = backup.string;
                    yankee = golfie[verify];
                    yankee = romeon.bind(oscard)(yankee);
                    yankee = yankee.t;
                    yankee = yankee.HDt8io;
                    yankee = foxtra.bind(backup)(yankee);
                    zuuluu['description'] = yankee;
                    yankee = option.PREMIUM_UPSELL_APP_ICONS;
                    zuuluu['analyticsPage'] = yankee;
                    yankee = tangon.APP_ICON_UPSELL;
                    zuuluu['upsellType'] = yankee;
                    yankee = 19;
                    yankee = golfie[yankee];
                    yankee = report.bind(oscard)(yankee);
                    zuuluu['image'] = yankee;
                    entity[offset] = zuuluu;
                    michal = golfie[michal];
                    michal = romeon.bind(oscard)(michal);
                    michal = michal.EntitlementFeatureNames;
                    zuuluu = michal.SAVED_MESSAGES;
                    michal = {};
                    offset = golfie[verify];
                    offset = romeon.bind(oscard)(offset);
                    foxtra = offset.intl;
                    yankee = foxtra.string;
                    offset = golfie[verify];
                    offset = romeon.bind(oscard)(offset);
                    offset = offset.t;
                    offset = offset.YXk6Nz;
                    offset = yankee.bind(foxtra)(offset);
                    michal['title'] = offset;
                    offset = golfie[verify];
                    offset = romeon.bind(oscard)(offset);
                    yankee = offset.intl;
                    offset = yankee.string;
                    verify = golfie[verify];
                    verify = romeon.bind(oscard)(verify);
                    verify = verify.t;
                    verify = verify.m/HzW1;
                    verify = offset.bind(yankee)(verify);
                    michal['description'] = verify;
                    option = option.PREMIUM_UPSELL_FOR_LATER;
                    michal['analyticsPage'] = option;
                    tangon = tangon.FOR_LATER_MODAL_UPSELL;
                    michal['upsellType'] = tangon;
                    tangon = 20;
                    tangon = golfie[tangon];
                    tangon = report.bind(oscard)(tangon);
                    michal['image'] = tangon;
                    entity[zuuluu] = michal;
                    return entity;
                }
            };
            whisks = undefined;
            limora = undefined;
            sierra = tangon;
            status = golfie;
            target = oscard;
            zuuluu = whisks[zuuluu](limora, sierra, status, target, papara);
            record = zuuluu[yankee];
            _closure2_slot4 = record;
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            oscard = 29;
            oscard = tangon[oscard];
            oscard = zuuluu.bind(report)(oscard);
            oscard = oscard.bind(report)();
            verify = oscard.analyticsLocations;
            _closure2_slot5 = verify;
            option = _closure1_slot4;
            golfie = option.useEffect;
            oscard = new Array(4);
            oscard[0] = record;
            oscard[1] = verify;
            oscard[2] = result;
            oscard[3] = michal;
            michal = function() {
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    zuuluu = _closure1_slot1;
                    michal = _closure1_slot2;
                    entity = 30;
                    michal = michal[entity];
                    entity = undefined;
                    report = zuuluu.bind(entity)(michal);
                    tangon = report.track;
                    michal = _closure1_slot13;
                    zuuluu = michal.PREMIUM_UPSELL_VIEWED;
                    michal = {};
                    golfie = _closure2_slot0;
                    option = null;
                    offset = option == golfie;
                    golfie = undefined;
                    if(offset) { _fun00012_ip = 70; continue _fun00011 }
 60:
                    offset = _closure2_slot0;
                    golfie = offset.analyticsProperties;
 70:
                    romeon = michal;
                    yankee = golfie;
                    golfie = copyDataProperties(romeon, yankee);
                    golfie = _closure2_slot4;
                    golfie = option == golfie;
                    option = undefined;
                    if(golfie) { _fun00012_ip = 103; continue _fun00011 }
 93:
                    golfie = _closure2_slot4;
                    option = golfie.upsellType;
 103:
                    golfie = 'type';
                    michal[golfie] = option;
                    golfie = global;
                    option = golfie.location;
                    golfie = 'location';
                    michal[golfie] = option;
                    option = _closure2_slot5;
                    golfie = 'location_stack';
                    michal[golfie] = option;
                    option = _closure1_slot0;
                    offset = _closure1_slot2;
                    golfie = 12;
                    golfie = offset[golfie];
                    option = option.bind(entity)(golfie);
                    golfie = option.castPremiumSubscriptionAsSkuId;
                    oscard = _closure2_slot2;
                    verify = _closure1_slot10;
                    if(oscard) { _fun00012_ip = 187; continue _fun00011 }
 179:
                    oscard = verify.TIER_2;
                    _fun00012_ip = 193; continue _fun00011;
 187:
                    oscard = verify.TIER_0;
 193:
                    golfie = golfie.bind(option)(oscard);
                    oscard = 'sku_id';
                    michal[oscard] = golfie;
                    michal = tangon.bind(report)(zuuluu, michal);
                    return entity;
                }
            };
            michal = golfie.bind(option)(michal, oscard);
            michal = 31;
            michal = tangon[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = record.analyticsPage;
            michal = zuuluu.bind(report)(result, entity, michal);
            ctrled = michal.loading;
            _closure2_slot6 = ctrled;
            update = michal.onPress;
            tangon = _closure1_slot4;
            zuuluu = tangon.useCallback;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 32;
                zuuluu = oscard[entity];
                entity = undefined;
                tangon = report.bind(entity)(zuuluu);
                zuuluu = tangon.dismissKeyboard;
                zuuluu = zuuluu.bind(tangon)();
                zuuluu = _closure1_slot1;
                michal = 33;
                michal = oscard[michal];
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.hideActionSheet;
                michal = 34;
                michal = oscard[michal];
                michal = report.bind(entity)(michal);
                michal = michal.PREMIUM_UPSELL_ACTION_SHEET_KEY;
                michal = zuuluu.bind(tangon)(michal);
                michal = _closure2_slot3;
                michal = michal.bind(entity)();
                return entity;
            };
            output = zuuluu.bind(tangon)(entity, michal);
            michal = offset == record;
            entity = null;
            if(michal) { _fun00008_ip = 1114; continue _fun00007 }
 490:
            tangon = _closure1_slot17;
            zuuluu = _closure1_slot0;
            oscard = _closure1_slot2;
            michal = 35;
            michal = oscard[michal];
            michal = zuuluu.bind(report)(michal);
            zuuluu = michal.ActionSheet;
            michal = {};
            oscard = true;
            michal['startExpanded'] = oscard;
            option = _closure1_slot18;
            golfie = _closure1_slot5;
            oscard = {};
            verify = record.image;
            offset = offset != verify;
            if(!offset) { _fun00008_ip = 579; continue _fun00007 }
 552:
            foxtra = _closure1_slot17;
            romeon = _closure1_slot23;
            verify = {};
            kiloes = record.image;
            verify['image'] = kiloes;
            offset = foxtra.bind(report)(romeon, verify);
 579:
            verify = new Array(4);
            verify[0] = offset;
            romeon = _closure1_slot18;
            foxtra = _closure1_slot5;
            offset = {};
            kiloes = source.textContainer;
            offset['style'] = kiloes;
            cntext = _closure1_slot17;
            sequen = _closure1_slot0;
            vacuum = _closure1_slot2;
            sizing = 24;
            kiloes = vacuum[sizing];
            kiloes = sequen.bind(report)(kiloes);
            config = kiloes.Text;
            kiloes = {};
            papara = source.text;
            kiloes['style'] = papara;
            papara = 'heading-lg/extrabold';
            kiloes['variant'] = papara;
            papara = record.title;
            kiloes['children'] = papara;
            config = cntext.bind(report)(config, kiloes);
            kiloes = new Array(2);
            kiloes[0] = config;
            config = _closure1_slot17;
            sizing = vacuum[sizing];
            sizing = sequen.bind(report)(sizing);
            sequen = sizing.Text;
            sizing = {};
            papara = source.text;
            cntext = new Array(2);
            cntext[0] = papara;
            papara = source.description;
            cntext[1] = papara;
            sizing['style'] = cntext;
            cntext = 'text-sm/normal';
            sizing['variant'] = cntext;
            record = record.description;
            sizing['children'] = record;
            sizing = config.bind(report)(sequen, sizing);
            kiloes[1] = sizing;
            offset['children'] = kiloes;
            offset = romeon.bind(report)(foxtra, offset);
            verify[1] = offset;
            offset = _closure1_slot21;
            offset = offset.bind(report)(yankee);
            verify[2] = offset;
            yankee = _closure1_slot5;
            offset = {};
            foxtra = source.buttonContainer;
            offset['style'] = foxtra;
            sizing = _closure1_slot17;
            kiloes = _closure1_slot1;
            foxtra = 36;
            foxtra = vacuum[foxtra];
            kiloes = kiloes.bind(report)(foxtra);
            foxtra = {};
            foxtra['loading'] = ctrled;
            source = source.button;
            foxtra['style'] = source;
            foxtra['onPress'] = update;
            sequen = _closure1_slot0;
            update = _closure1_slot2;
            ctrled = 14;
            source = update[ctrled];
            source = sequen.bind(report)(source);
            vacuum = source.intl;
            source = vacuum.string;
            update = update[ctrled];
            update = sequen.bind(report)(update);
            update = update.t;
            if(result) { _fun00008_ip = 899; continue _fun00007 }
 886:
            result = update.8x0jKS;
            result = source.bind(vacuum)(result);
            _fun00008_ip = 910; continue _fun00007;
 899:
            update = update.cM8bb2;
            result = source.bind(vacuum)(update);
 910:
            foxtra['text'] = result;
            source = _closure1_slot0;
            result = _closure1_slot2;
            update = 37;
            update = result[update];
            update = source.bind(report)(update);
            update = update.ButtonColors;
            update = update.GREEN;
            foxtra['color'] = update;
            update = function() { // Original name: renderIcon
                _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
                    entity = _closure2_slot6;
                    entity = !entity;
                    if(!entity) { _fun00014_ip = 64; continue _fun00013 }
 13:
                    report = _closure1_slot17;
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    michal = 38;
                    michal = tangon[michal];
                    tangon = undefined;
                    zuuluu = zuuluu.bind(tangon)(michal);
                    michal = {};
                    oscard = _closure2_slot1;
                    oscard = oscard.nitroWheel;
                    michal['style'] = oscard;
                    entity = report.bind(tangon)(zuuluu, michal);
 64:
                    return entity;
                }
            };
            foxtra['renderIcon'] = update;
            echoed = function() { // Original name: renderLinearGradient
                _fun00015: for(var _fun00016_ip = 0; ; ) switch(_fun00016_ip) {
 0:
                    tangon = _closure1_slot17;
                    michal = _closure1_slot1;
                    golfie = _closure1_slot2;
                    entity = 39;
                    entity = golfie[entity];
                    zuuluu = undefined;
                    michal = michal.bind(zuuluu)(entity);
                    entity = {};
                    option = _closure2_slot1;
                    option = option.gradient;
                    entity['style'] = option;
                    verify = _closure1_slot0;
                    option = 40;
                    offset = golfie[option];
                    offset = verify.bind(zuuluu)(offset);
                    offset = offset.HorizontalGradient;
                    offset = offset.START;
                    entity['start'] = offset;
                    golfie = golfie[option];
                    golfie = verify.bind(zuuluu)(golfie);
                    golfie = golfie.HorizontalGradient;
                    golfie = golfie.END;
                    entity['end'] = golfie;
                    report = _closure2_slot2;
                    golfie = _closure1_slot0;
                    oscard = _closure1_slot2;
                    oscard = oscard[option];
                    oscard = golfie.bind(zuuluu)(oscard);
                    oscard = oscard.Gradients;
                    if(report) { _fun00016_ip = 143; continue _fun00015 }
 135:
                    report = oscard.PREMIUM_TIER_2_TRI_COLOR;
                    _fun00016_ip = 149; continue _fun00015;
 143:
                    report = oscard.PREMIUM_TIER_0;
 149:
                    entity['colors'] = report;
                    entity = tangon.bind(zuuluu)(michal, entity);
                    return entity;
                }
            };
            foxtra['renderLinearGradient'] = echoed;
            kiloes = sizing.bind(report)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            sizing = _closure1_slot17;
            backup = 41;
            backup = result[backup];
            backup = source.bind(report)(backup);
            kiloes = backup.Button;
            backup = {};
            echoed = 'secondary';
            backup['variant'] = echoed;
            echoed = result[ctrled];
            echoed = source.bind(report)(echoed);
            update = echoed.intl;
            echoed = update.string;
            result = result[ctrled];
            result = source.bind(report)(result);
            result = result.t;
            result = result.PcTCBw;
            result = echoed.bind(update)(result);
            backup['text'] = result;
            backup['onPress'] = output;
            backup = sizing.bind(report)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            verify[3] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1114:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();