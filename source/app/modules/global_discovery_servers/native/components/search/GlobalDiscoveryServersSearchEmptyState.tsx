// app/modules/global_discovery_servers/native/components/search/GlobalDiscoveryServersSearchEmptyState.tsx
export default (function(_, argBar, __, ___, ____, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    tango = 0;
    golf = oscar[tango];
    entity = undefined;
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot2 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    offset = 'center';
    verify = {'flex': 1, 'flexGrow': 1, 'alignItems': 'center', 'marginTop': 40, 'paddingVertical': 8, 'paddingHorizontal': 16};
    tango['container'] = verify;
    verify = {};
    verify['alignItems'] = offset;
    tango['text'] = verify;
    verify = {'height': 144, 'width': 144};
    tango['image'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot4 = tango;
    tango = 6;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/global_discovery_servers/native/components/search/GlobalDiscoveryServersSearchEmptyState.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: GlobalDiscoveryServersSearchEmptyState
        entity = _closure1_slot4;
        tango = undefined;
        options = entity.bind(tango)();
        zulu = _closure1_slot3;
        kilo = _closure1_slot0;
        sizing = _closure1_slot1;
        oscar = 2;
        entity = sizing[oscar];
        entity = kilo.bind(tango)(entity);
        mike = entity.Stack;
        entity = {};
        golf = 16;
        entity['spacing'] = golf;
        golf = options.container;
        entity['style'] = golf;
        yankee = _closure1_slot2;
        report = 3;
        report = sizing[report];
        report = kilo.bind(tango)(report);
        golf = report.SearchEmpty;
        report = {};
        verify = 'contain';
        report['resizeMode'] = verify;
        verify = options.image;
        report['style'] = verify;
        golf = yankee.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        oscar = sizing[oscar];
        oscar = kilo.bind(tango)(oscar);
        golf = oscar.Stack;
        oscar = {};
        verify = 8;
        oscar['spacing'] = verify;
        options = options.text;
        oscar['style'] = options;
        verify = 4;
        options = sizing[verify];
        options = kilo.bind(tango)(options);
        offset = options.Text;
        options = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
        romeo = 5;
        foxtrot = sizing[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        output = foxtrot.intl;
        backup = output.string;
        foxtrot = sizing[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        foxtrot = foxtrot.t;
        foxtrot = foxtrot.PSLMWV;
        foxtrot = backup.bind(output)(foxtrot);
        options['children'] = foxtrot;
        offset = yankee.bind(tango)(offset, options);
        options = new Array(2);
        options[0] = offset;
        verify = sizing[verify];
        verify = kilo.bind(tango)(verify);
        offset = verify.Text;
        verify = {'variant': 'text-sm/medium', 'color': 'header-secondary'};
        foxtrot = sizing[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.string;
        romeo = sizing[romeo];
        romeo = kilo.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.tHpHPj;
        romeo = foxtrot.bind(backup)(romeo);
        verify['children'] = romeo;
        verify = yankee.bind(tango)(offset, verify);
        options[1] = verify;
        oscar['children'] = options;
        oscar = zulu.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();