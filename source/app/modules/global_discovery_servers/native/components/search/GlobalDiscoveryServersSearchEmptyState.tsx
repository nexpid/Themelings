// app/modules/global_discovery_servers/native/components/search/GlobalDiscoveryServersSearchEmptyState.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    tangon = 0;
    golfie = oscard[tangon];
    entity = undefined;
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot2 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 'center';
    verify = {'flex': 1, 'flexGrow': 1, 'alignItems': 'center', 'marginTop': 40, 'paddingVertical': 8, 'paddingHorizontal': 16};
    tangon['container'] = verify;
    verify = {};
    verify['alignItems'] = offset;
    tangon['text'] = verify;
    verify = {'height': 144, 'width': 144};
    tangon['image'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/global_discovery_servers/native/components/search/GlobalDiscoveryServersSearchEmptyState.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: GlobalDiscoveryServersSearchEmptyState
        entity = _closure1_slot4;
        tangon = undefined;
        option = entity.bind(tangon)();
        zuuluu = _closure1_slot3;
        kiloes = _closure1_slot0;
        sizing = _closure1_slot1;
        oscard = 2;
        entity = sizing[oscard];
        entity = kiloes.bind(tangon)(entity);
        michal = entity.Stack;
        entity = {};
        golfie = 16;
        entity['spacing'] = golfie;
        golfie = option.container;
        entity['style'] = golfie;
        yankee = _closure1_slot2;
        report = 3;
        report = sizing[report];
        report = kiloes.bind(tangon)(report);
        golfie = report.SearchEmpty;
        report = {};
        verify = 'contain';
        report['resizeMode'] = verify;
        verify = option.image;
        report['style'] = verify;
        golfie = yankee.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        oscard = sizing[oscard];
        oscard = kiloes.bind(tangon)(oscard);
        golfie = oscard.Stack;
        oscard = {};
        verify = 8;
        oscard['spacing'] = verify;
        option = option.text;
        oscard['style'] = option;
        verify = 4;
        option = sizing[verify];
        option = kiloes.bind(tangon)(option);
        offset = option.Text;
        option = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
        romeon = 5;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        output = foxtra.intl;
        backup = output.string;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        foxtra = foxtra.PSLMWV;
        foxtra = backup.bind(output)(foxtra);
        option['children'] = foxtra;
        offset = yankee.bind(tangon)(offset, option);
        option = new Array(2);
        option[0] = offset;
        verify = sizing[verify];
        verify = kiloes.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'variant': 'text-sm/medium', 'color': 'header-secondary'};
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.tHpHPj;
        romeon = foxtra.bind(backup)(romeon);
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        oscard['children'] = option;
        oscard = zuuluu.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();