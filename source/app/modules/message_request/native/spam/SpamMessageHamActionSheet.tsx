// app/modules/message_request/native/spam/SpamMessageHamActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    offset = 0;
    tangon = oscard[offset];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 6;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = foxtra;
    tangon['header'] = verify;
    verify = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['marginTop'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingHorizontal'] = foxtra;
    tangon['container'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_24;
    verify['marginTop'] = yankee;
    tangon['button'] = verify;
    verify = {};
    verify['paddingHorizontal'] = offset;
    tangon['switch'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/message_request/native/spam/SpamMessageHamActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SpamMessageRequestHamActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.channel;
            var _closure2_slot0 = michal;
            michal = entity.onConfirm;
            var _closure2_slot1 = michal;
            entity = entity.onCancel;
            var _closure2_slot2 = entity;
            offset = function() { // Original name: handleClose
                michal = _closure2_slot2;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            entity = _closure1_slot9;
            tangon = undefined;
            backup = entity.bind(tangon)();
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            entity = false;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            result = michal[entity];
            var _closure2_slot3 = result;
            entity = 1;
            entity = michal[entity];
            var _closure2_slot4 = entity;
            echoed = _closure1_slot0;
            update = _closure1_slot2;
            entity = 7;
            entity = update[entity];
            report = echoed.bind(tangon)(entity);
            zuuluu = report.useStateFromStores;
            entity = _closure1_slot6;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getUser;
                tangon = _closure2_slot0;
                entity = tangon.getRecipientId;
                entity = entity.bind(tangon)();
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            report = zuuluu.bind(report)(michal, entity);
            entity = 8;
            entity = update[entity];
            zuuluu = echoed.bind(tangon)(entity);
            michal = zuuluu.useMessageRequestActions;
            entity = {};
            entity['user'] = report;
            report = function() { // Original name: onError
                oscard = _closure1_slot1;
                golfie = _closure1_slot2;
                entity = 9;
                michal = golfie[entity];
                entity = undefined;
                tangon = oscard.bind(entity)(michal);
                zuuluu = tangon.open;
                michal = {};
                option = 'MESSAGE_REQUEST_REQUEST_ERROR_ALERT_TITLE';
                michal['key'] = option;
                offset = _closure1_slot0;
                report = 10;
                option = golfie[report];
                option = offset.bind(entity)(option);
                verify = option.intl;
                option = verify.string;
                report = golfie[report];
                report = offset.bind(entity)(report);
                report = report.t;
                report = report.EDYbS0;
                report = option.bind(verify)(report);
                michal['content'] = report;
                report = 11;
                report = golfie[report];
                report = oscard.bind(entity)(report);
                michal['icon'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity['onError'] = report;
            report = function() { // Original name: onAcceptSuccess
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 12;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.hideActionSheet;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            entity['onAcceptSuccess'] = report;
            entity = michal.bind(zuuluu)(entity);
            michal = entity.acceptMessageRequest;
            var _closure2_slot5 = michal;
            romeon = entity.isAcceptLoading;
            kiloes = entity.isUserProfileLoading;
            foxtra = entity.isOptimisticAccepted;
            zuuluu = _closure1_slot8;
            entity = 13;
            entity = update[entity];
            entity = echoed.bind(tangon)(entity);
            michal = entity.BottomSheet;
            entity = {};
            entity['onDismiss'] = offset;
            yankee = _closure1_slot7;
            report = 14;
            report = update[report];
            report = echoed.bind(tangon)(report);
            oscard = report.BottomSheetTitleHeader;
            report = {};
            sizing = 10;
            golfie = update[sizing];
            golfie = echoed.bind(tangon)(golfie);
            source = golfie.intl;
            option = source.string;
            golfie = update[sizing];
            golfie = echoed.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.9ty6yc;
            golfie = option.bind(source)(golfie);
            report['title'] = golfie;
            golfie = 15;
            golfie = update[golfie];
            golfie = echoed.bind(tangon)(golfie);
            option = golfie.ActionSheetCloseButton;
            golfie = {};
            golfie['onPress'] = offset;
            golfie = yankee.bind(tangon)(option, golfie);
            report['trailing'] = golfie;
            golfie = backup.header;
            report['backgroundColor'] = golfie;
            oscard = yankee.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            golfie = _closure1_slot5;
            oscard = {};
            option = backup.container;
            oscard['style'] = option;
            option = 16;
            option = update[option];
            option = echoed.bind(tangon)(option);
            offset = option.FormSwitchRow;
            option = {};
            source = backup.switch;
            option['style'] = source;
            source = update[sizing];
            source = echoed.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = update[sizing];
            source = echoed.bind(tangon)(source);
            source = source.t;
            source = source.ZhGpNT;
            source = ctrled.bind(vacuum)(source);
            option['label'] = source;
            option['value'] = result;
            result = {};
            source = true;
            result['renderIosBackground'] = source;
            option['switchProps'] = result;
            result = function(argFoo) { // Original name: onValueChange
                zuuluu = _closure2_slot4;
                michal = undefined;
                entity = argFoo;
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            option['onValueChange'] = result;
            offset = yankee.bind(tangon)(offset, option);
            option = new Array(2);
            option[0] = offset;
            source = _closure1_slot1;
            result = 17;
            verify = update[result];
            offset = source.bind(tangon)(verify);
            verify = {};
            ctrled = update[result];
            ctrled = source.bind(tangon)(ctrled);
            ctrled = ctrled.Looks;
            ctrled = ctrled.FILLED;
            verify['look'] = ctrled;
            ctrled = update[result];
            ctrled = source.bind(tangon)(ctrled);
            ctrled = ctrled.Sizes;
            ctrled = ctrled.MEDIUM;
            verify['size'] = ctrled;
            result = update[result];
            result = source.bind(tangon)(result);
            result = result.Colors;
            result = result.BRAND;
            verify['color'] = result;
            output = function() { // Original name: onPress
                tangon = _closure2_slot1;
                zuuluu = _closure2_slot3;
                entity = undefined;
                zuuluu = tangon.bind(entity)(zuuluu);
                zuuluu = _closure2_slot5;
                michal = _closure2_slot0;
                michal = michal.id;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            verify['onPress'] = output;
            output = update[sizing];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = update[sizing];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.olZgw8;
            sizing = output.bind(result)(sizing);
            verify['text'] = sizing;
            backup = backup.button;
            verify['style'] = backup;
            backup = romeon;
            if(romeon) { _fun00002_ip = 710; continue _fun00001 }
 707:
            backup = kiloes;
 710:
            if(backup) { _fun00002_ip = 716; continue _fun00001 }
 713:
            backup = foxtra;
 716:
            verify['disabled'] = backup;
            if(romeon) { _fun00002_ip = 726; continue _fun00001 }
 723:
            romeon = foxtra;
 726:
            verify['loading'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();