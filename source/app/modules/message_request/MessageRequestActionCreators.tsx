// app/modules/message_request/MessageRequestActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: _acceptMessageRequest
        report = undefined;
        entity = undefined;
        tangon = _closure1_slot3;
        zuuluu = function* (argFoo) {
            entity = function* (argFoo) { // Original name: ?anon_0_
                _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                    StartGenerator();
                    golfie = argFoo;
                    ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                    if(michal) { _fun00002_ip = 176; continue _fun00001 }
 13:
                    offset = _closure1_slot0;
                    yankee = _closure1_slot2;
                    michal = 2;
                    michal = yankee[michal];
                    zuuluu = undefined;
                    michal = offset.bind(zuuluu)(michal);
                    oscard = michal.HTTP;
                    report = oscard.put;
                    michal = {};
                    verify = _closure1_slot4;
                    option = verify.CHANNEL_RECIPIENT_ME;
                    option = option.bind(verify)(golfie);
                    michal['url'] = option;
                    option = {};
                    verify = 3;
                    verify = yankee[verify];
                    verify = offset.bind(zuuluu)(verify);
                    verify = verify.MessageRequestConsentStatusTypes;
                    verify = verify.ACCEPTED;
                    option['consent_status'] = verify;
                    michal['body'] = option;
                    option = false;
                    michal['rejectWithError'] = option;
                    michal = report.bind(oscard)(michal);
                    SaveGenerator(address=120);
 118:
                    return michal;
 120:
                    ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                    if(report) { _fun00002_ip = 173; continue _fun00001 }
 126:
                    report = _closure1_slot1;
                    oscard = _closure1_slot2;
                    tangon = 4;
                    tangon = oscard[tangon];
                    oscard = report.bind(zuuluu)(tangon);
                    report = oscard.dispatch;
                    tangon = {};
                    option = 'MESSAGE_REQUEST_ACCEPT_OPTIMISTIC';
                    tangon['type'] = option;
                    tangon['channelId'] = golfie;
                    tangon = report.bind(oscard)(tangon);
                    return zuuluu;
 173:
                    return michal;
 176:
                    return entity;
                }
            };
            return entity;
        };
        tangon = tangon.bind(report)(zuuluu);
        _closure1_slot5 = tangon;
        zuuluu = tangon.apply;
        entity = arguments;
        michal = entity;
        entity = this;
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    var _closure1_slot5 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Endpoints;
    var _closure1_slot4 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/message_request/MessageRequestActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function() { // Original name: acceptMessageRequest
        entity = undefined;
        tangon = _closure1_slot5;
        zuuluu = tangon.apply;
        entity = arguments;
        michal = entity;
        entity = this;
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    zuuluu['acceptMessageRequest'] = tangon;
    tangon = function(argFoo) { // Original name: clearMessageRequestState
        golfie = _closure1_slot0;
        option = _closure1_slot2;
        entity = 2;
        entity = option[entity];
        oscard = undefined;
        entity = golfie.bind(oscard)(entity);
        zuuluu = entity.HTTP;
        michal = zuuluu.put;
        entity = {};
        verify = _closure1_slot4;
        report = verify.CHANNEL_RECIPIENT_ME;
        tangon = argFoo;
        tangon = report.bind(verify)(tangon);
        entity['url'] = tangon;
        tangon = {};
        report = 3;
        report = option[report];
        report = golfie.bind(oscard)(report);
        report = report.MessageRequestConsentStatusTypes;
        report = report.UNSPECIFIED;
        tangon['consent_status'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['clearMessageRequestState'] = tangon;
    tangon = function(argFoo) { // Original name: markAsMessageRequest
        golfie = _closure1_slot0;
        option = _closure1_slot2;
        entity = 2;
        entity = option[entity];
        oscard = undefined;
        entity = golfie.bind(oscard)(entity);
        zuuluu = entity.HTTP;
        michal = zuuluu.put;
        entity = {};
        verify = _closure1_slot4;
        report = verify.CHANNEL_RECIPIENT_ME;
        tangon = argFoo;
        tangon = report.bind(verify)(tangon);
        entity['url'] = tangon;
        tangon = {};
        report = 3;
        report = option[report];
        report = golfie.bind(oscard)(report);
        report = report.MessageRequestConsentStatusTypes;
        report = report.PENDING;
        tangon['consent_status'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['markAsMessageRequest'] = tangon;
    tangon = function(argFoo) { // Original name: rejectMessageRequest
        zuuluu = _closure1_slot0;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.del;
        entity = {};
        oscard = _closure1_slot4;
        report = oscard.CHANNEL_RECIPIENT_ME;
        tangon = argFoo;
        tangon = report.bind(oscard)(tangon);
        entity['url'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['rejectMessageRequest'] = tangon;
    tangon = function(argFoo) { // Original name: rejectMessageRequestBatch
        zuuluu = _closure1_slot0;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.put;
        entity = {};
        report = _closure1_slot4;
        tangon = report.CHANNEL_RECIPIENT_REJECT_BATCH;
        tangon = tangon.bind(report)();
        entity['url'] = tangon;
        tangon = {};
        report = argFoo;
        tangon['channel_ids'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['rejectMessageRequestBatch'] = tangon;
    michal = function() { // Original name: fetchUserCountryCode
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 5;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.getLocationMetadata;
        michal = michal.bind(zuuluu)();
        return entity;
    };
    zuuluu['fetchUserCountryCode'] = michal;
    return entity;
})();