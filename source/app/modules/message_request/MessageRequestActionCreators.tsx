// app/modules/message_request/MessageRequestActionCreators.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var7 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var7;
    var _closure1_slot2 = var6;
    var1 = function _acceptMessageRequest() {
        var5 = undefined;
        var1 = undefined;
        var4 = _closure1_slot3;
        var3 = function* (arg1) {
            var1 = function* anon_0_(arg1) {
                _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
                    StartGenerator();
                    var7 = arg1;
                    ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                    if(var2) { _fun0001_ip = 2; continue _fun0001 }
case 3:
                    var10 = _closure1_slot0;
                    var11 = _closure1_slot2;
                    var2 = 2;
                    var2 = var11[var2];
                    var3 = undefined;
                    var2 = var10.bind(var3)(var2);
                    var6 = var2.HTTP;
                    var5 = var6.put;
                    var2 = {};
                    var9 = _closure1_slot4;
                    var8 = var9.CHANNEL_RECIPIENT_ME;
                    var8 = var8.bind(var9)(var7);
                    var2['url'] = var8;
                    var8 = {};
                    var9 = 3;
                    var9 = var11[var9];
                    var9 = var10.bind(var3)(var9);
                    var9 = var9.MessageRequestConsentStatusTypes;
                    var9 = var9.ACCEPTED;
                    var8['consent_status'] = var9;
                    var2['body'] = var8;
                    var8 = false;
                    var2['rejectWithError'] = var8;
                    var2 = var5.bind(var6)(var2);
                    SaveGenerator(address=120);
case 4:
                    return var2;
case 5:
                    ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                    if(var5) { _fun0001_ip = 6; continue _fun0001 }
case 7:
                    var5 = _closure1_slot1;
                    var6 = _closure1_slot2;
                    var4 = 4;
                    var4 = var6[var4];
                    var6 = var5.bind(var3)(var4);
                    var5 = var6.dispatch;
                    var4 = {};
                    var8 = 'MESSAGE_REQUEST_ACCEPT_OPTIMISTIC';
                    var4['type'] = var8;
                    var4['channelId'] = var7;
                    var4 = var5.bind(var6)(var4);
                    return var3;
case 6:
                    return var2;
case 2:
                    return var1;
                }
            };
            return var1;
        };
        var4 = var4.bind(var5)(var3);
        _closure1_slot5 = var4;
        var3 = var4.apply;
        var1 = arguments;
        var2 = var1;
        var1 = this;
        var1 = var3.bind(var4)(var1, var2);
        return var1;
    };
    var _closure1_slot5 = var1;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var7.bind(var1)(var4);
    var _closure1_slot3 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.Endpoints;
    var _closure1_slot4 = var4;
    var4 = 6;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/message_request/MessageRequestActionCreators.tsx';
    var4 = var5.bind(var6)(var4);
    var4 = function acceptMessageRequest() {
        var1 = undefined;
        var4 = _closure1_slot5;
        var3 = var4.apply;
        var1 = arguments;
        var2 = var1;
        var1 = this;
        var1 = var3.bind(var4)(var1, var2);
        return var1;
    };
    var3['acceptMessageRequest'] = var4;
    var4 = function clearMessageRequestState(arg1) {
        var7 = _closure1_slot0;
        var8 = _closure1_slot2;
        var1 = 2;
        var1 = var8[var1];
        var6 = undefined;
        var1 = var7.bind(var6)(var1);
        var3 = var1.HTTP;
        var2 = var3.put;
        var1 = {};
        var9 = _closure1_slot4;
        var5 = var9.CHANNEL_RECIPIENT_ME;
        var4 = arg1;
        var4 = var5.bind(var9)(var4);
        var1['url'] = var4;
        var4 = {};
        var5 = 3;
        var5 = var8[var5];
        var5 = var7.bind(var6)(var5);
        var5 = var5.MessageRequestConsentStatusTypes;
        var5 = var5.UNSPECIFIED;
        var4['consent_status'] = var5;
        var1['body'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['clearMessageRequestState'] = var4;
    var4 = function markAsMessageRequest(arg1) {
        var7 = _closure1_slot0;
        var8 = _closure1_slot2;
        var1 = 2;
        var1 = var8[var1];
        var6 = undefined;
        var1 = var7.bind(var6)(var1);
        var3 = var1.HTTP;
        var2 = var3.put;
        var1 = {};
        var9 = _closure1_slot4;
        var5 = var9.CHANNEL_RECIPIENT_ME;
        var4 = arg1;
        var4 = var5.bind(var9)(var4);
        var1['url'] = var4;
        var4 = {};
        var5 = 3;
        var5 = var8[var5];
        var5 = var7.bind(var6)(var5);
        var5 = var5.MessageRequestConsentStatusTypes;
        var5 = var5.PENDING;
        var4['consent_status'] = var5;
        var1['body'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['markAsMessageRequest'] = var4;
    var4 = function rejectMessageRequest(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot2;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var1 = var3.bind(var1)(var2);
        var3 = var1.HTTP;
        var2 = var3.del;
        var1 = {};
        var6 = _closure1_slot4;
        var5 = var6.CHANNEL_RECIPIENT_ME;
        var4 = arg1;
        var4 = var5.bind(var6)(var4);
        var1['url'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['rejectMessageRequest'] = var4;
    var4 = function rejectMessageRequestBatch(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot2;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var1 = var3.bind(var1)(var2);
        var3 = var1.HTTP;
        var2 = var3.put;
        var1 = {};
        var5 = _closure1_slot4;
        var4 = var5.CHANNEL_RECIPIENT_REJECT_BATCH;
        var4 = var4.bind(var5)();
        var1['url'] = var4;
        var4 = {};
        var5 = arg1;
        var4['channel_ids'] = var5;
        var1['body'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['rejectMessageRequestBatch'] = var4;
    var2 = function fetchUserCountryCode() {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 5;
        var2 = var2[var1];
        var1 = undefined;
        var3 = var3.bind(var1)(var2);
        var2 = var3.getLocationMetadata;
        var2 = var2.bind(var3)();
        return var1;
    };
    var3['fetchUserCountryCode'] = var2;
    return var1;
})();