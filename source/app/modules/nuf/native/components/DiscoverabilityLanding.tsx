// app/modules/nuf/native/components/DiscoverabilityLanding.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    backup = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    offset = 1;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot4 = golf;
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.useContactSyncModalStore;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    yankee = tango.Fonts;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    verify['flex'] = offset;
    offset = 6;
    romeo = oscar[offset];
    romeo = backup.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeo;
    tango['container'] = verify;
    sizing = 'center';
    verify = {'flexGrow': 0, 'justifyContent': 'center', 'marginBottom': 24};
    tango['headerContainer'] = verify;
    foxtrot = 16;
    verify = {'paddingHorizontal': 16, 'alignItems': 'center'};
    tango['header'] = verify;
    verify = {'width': '100%', 'marginHorizontal': 0};
    tango['image'] = verify;
    verify = {'flexGrow': 0, 'marginHorizontal': 16, 'marginBottom': 24};
    tango['button'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 16};
    tango['title'] = verify;
    verify = {};
    romeo = 7;
    kilo = oscar[romeo];
    echo = backup.bind(entity)(kilo);
    result = yankee.DISPLAY_MEDIUM;
    kilo = oscar[offset];
    kilo = backup.bind(entity)(kilo);
    kilo = kilo.colors;
    output = kilo.HEADER_SECONDARY;
    kilo = 14;
    source = echo.bind(entity)(result, output, kilo);
    control = verify;
    kilo = copyDataProperties(control, source);
    kilo = 'textAlign';
    verify[kilo] = sizing;
    sizing = 8;
    kilo = 'marginTop';
    verify[kilo] = sizing;
    tango['subtitle'] = verify;
    verify = {};
    verify['paddingVertical'] = foxtrot;
    kilo = oscar[offset];
    kilo = backup.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = kilo;
    tango['formRow'] = verify;
    verify = {};
    romeo = oscar[romeo];
    romeo = backup.bind(entity)(romeo);
    yankee = yankee.PRIMARY_SEMIBOLD;
    offset = oscar[offset];
    offset = backup.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.INTERACTIVE_ACTIVE;
    source = romeo.bind(entity)(yankee, offset, foxtrot);
    control = verify;
    offset = copyDataProperties(control, source);
    tango['formText'] = verify;
    verify = {'flexGrow': 1, 'width': '100%'};
    tango['footerContainer'] = verify;
    verify = {'paddingHorizontal': 16, 'marginTop': 8, 'marginBottom': 24};
    tango['info'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 21;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/nuf/native/components/DiscoverabilityLanding.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: DiscoverabilityLanding
        _fun94048: for(var _fun94048_ip = 0; ; ) switch(_fun94048_ip) {
 0:
            entity = _closure1_slot9;
            tango = undefined;
            result = entity.bind(tango)();
            entity = argFoo;
            entity = entity.onNext;
            var _closure2_slot0 = entity;
            entity = _closure1_slot6;
            entity = entity.bind(tango)();
            backup = entity.allowEmail;
            var _closure2_slot1 = backup;
            kilo = entity.allowPhone;
            var _closure2_slot2 = kilo;
            sizing = _closure1_slot1;
            update = _closure1_slot2;
            entity = 8;
            entity = update[entity];
            entity = sizing.bind(tango)(entity);
            entity = entity.bind(tango)();
            oscar = entity.bottom;
            report = _closure1_slot3;
            zulu = report.useCallback;
            mike = new Array(2);
            mike[0] = kilo;
            mike[1] = backup;
            entity = function() {
                report = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 9;
                tango = mike[entity];
                entity = undefined;
                oscar = report.bind(entity)(tango);
                report = oscar.openLazy;
                tango = _closure1_slot0;
                zulu = 11;
                zulu = mike[zulu];
                tango = tango.bind(entity)(zulu);
                zulu = 10;
                zulu = mike[zulu];
                mike = mike.paths;
                tango = tango.bind(entity)(zulu, mike);
                zulu = {};
                golf = _closure2_slot2;
                zulu['allowPhone'] = golf;
                mike = _closure2_slot1;
                zulu['allowEmail'] = mike;
                mike = 'Discoverability Landing';
                mike = report.bind(oscar)(tango, mike, zulu);
                return entity;
            };
            entity = zulu.bind(report)(entity, mike);
            var _closure2_slot3 = entity;
            zulu = _closure1_slot8;
            mike = _closure1_slot5;
            entity = {};
            report = result.container;
            entity['style'] = report;
            report = {};
            echo = _closure1_slot0;
            golf = 12;
            golf = update[golf];
            golf = echo.bind(tango)(golf);
            options = golf.NAV_BAR_HEIGHT;
            golf = 32;
            golf = options + golf;
            report['paddingTop'] = golf;
            output = 16;
            oscar = oscar + output;
            report['paddingBottom'] = oscar;
            entity['contentContainerStyle'] = report;
            foxtrot = _closure1_slot7;
            golf = _closure1_slot4;
            report = {};
            oscar = result.headerContainer;
            report['style'] = oscar;
            oscar = {};
            options = result.header;
            oscar['style'] = options;
            options = 13;
            options = update[options];
            offset = sizing.bind(tango)(options);
            options = {};
            yankee = 'contain';
            options['resizeMode'] = yankee;
            yankee = result.image;
            options['style'] = yankee;
            yankee = 14;
            yankee = update[yankee];
            yankee = sizing.bind(tango)(yankee);
            options['source'] = yankee;
            offset = foxtrot.bind(tango)(offset, options);
            options = new Array(3);
            options[0] = offset;
            offset = 15;
            yankee = update[offset];
            yankee = echo.bind(tango)(yankee);
            sizing = yankee.Text;
            yankee = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            source = result.title;
            yankee['style'] = source;
            source = update[output];
            source = echo.bind(tango)(source);
            vacuum = source.intl;
            control = vacuum.string;
            source = update[output];
            source = echo.bind(tango)(source);
            source = source.t;
            source = source.n8nw6u;
            source = control.bind(vacuum)(source);
            yankee['children'] = source;
            yankee = foxtrot.bind(tango)(sizing, yankee);
            options[1] = yankee;
            yankee = 17;
            yankee = update[yankee];
            yankee = echo.bind(tango)(yankee);
            sizing = yankee.LegacyText;
            yankee = {};
            source = result.subtitle;
            yankee['style'] = source;
            source = update[output];
            source = echo.bind(tango)(source);
            vacuum = source.intl;
            control = vacuum.string;
            source = update[output];
            source = echo.bind(tango)(source);
            source = source.t;
            source = source.KMW0kJ;
            source = control.bind(vacuum)(source);
            yankee['children'] = source;
            yankee = foxtrot.bind(tango)(sizing, yankee);
            options[2] = yankee;
            oscar['children'] = options;
            oscar = zulu.bind(tango)(golf, oscar);
            report['children'] = oscar;
            oscar = foxtrot.bind(tango)(golf, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            options = result.footerContainer;
            oscar['style'] = options;
            sizing = 18;
            options = update[sizing];
            options = echo.bind(tango)(options);
            yankee = options.FormCheckboxRow;
            options = {};
            source = result.formRow;
            options['DEPRECATED_style'] = source;
            sizing = update[sizing];
            sizing = echo.bind(tango)(sizing);
            sizing = sizing.FormRow;
            source = sizing.Label;
            sizing = {};
            control = result.formText;
            sizing['style'] = control;
            control = update[output];
            control = echo.bind(tango)(control);
            sequence = control.intl;
            vacuum = sequence.string;
            control = update[output];
            control = echo.bind(tango)(control);
            control = control.t;
            control = control.gMUgpq;
            control = vacuum.bind(sequence)(control);
            sizing['text'] = control;
            sizing = foxtrot.bind(tango)(source, sizing);
            options['label'] = sizing;
            sizing = 19;
            sizing = update[sizing];
            sizing = echo.bind(tango)(sizing);
            sizing = sizing.toggleDiscoverabilityForUser;
            options['onPress'] = sizing;
            if(backup) { _fun94048_ip = 667; continue _fun94048 }
 664:
            backup = kilo;
 667:
            options['selected'] = backup;
            yankee = foxtrot.bind(tango)(yankee, options);
            options = new Array(3);
            options[0] = yankee;
            backup = _closure1_slot8;
            sizing = _closure1_slot0;
            foxtrot = _closure1_slot2;
            offset = foxtrot[offset];
            offset = sizing.bind(tango)(offset);
            yankee = offset.Text;
            offset = {'style': null, 'variant': 'heading-deprecated-12/medium', 'color': 'header-secondary'};
            kilo = result.info;
            offset['style'] = kilo;
            kilo = foxtrot[output];
            kilo = sizing.bind(tango)(kilo);
            update = kilo.intl;
            echo = update.string;
            kilo = foxtrot[output];
            kilo = sizing.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.DGZg+v;
            echo = echo.bind(update)(kilo);
            kilo = new Array(3);
            kilo[0] = echo;
            echo = ' ';
            kilo[1] = echo;
            echo = foxtrot[output];
            echo = sizing.bind(tango)(echo);
            control = echo.intl;
            source = control.format;
            echo = foxtrot[output];
            echo = sizing.bind(tango)(echo);
            echo = echo.t;
            update = echo.QmF5z8;
            echo = {};
            vacuum = function(argFoo, argBar) { // Original name: learnMoreHook
                report = _closure1_slot7;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 15;
                entity = zulu[entity];
                tango = undefined;
                entity = mike.bind(tango)(entity);
                zulu = entity.Text;
                mike = {'onPress': null, 'variant': 'text-sm/medium', 'color': 'text-link'};
                entity = _closure2_slot3;
                mike['onPress'] = entity;
                entity = argFoo;
                mike['children'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            echo['learnMoreHook'] = vacuum;
            echo = source.bind(control)(update, echo);
            kilo[2] = echo;
            offset['children'] = kilo;
            offset = backup.bind(tango)(yankee, offset);
            options[1] = offset;
            yankee = _closure1_slot7;
            kilo = _closure1_slot1;
            backup = 20;
            verify = foxtrot[backup];
            offset = kilo.bind(tango)(verify);
            verify = {};
            result = result.button;
            verify['style'] = result;
            backup = foxtrot[backup];
            backup = kilo.bind(tango)(backup);
            backup = backup.Colors;
            backup = backup.BRAND;
            verify['color'] = backup;
            backup = foxtrot[output];
            backup = sizing.bind(tango)(backup);
            kilo = backup.intl;
            backup = kilo.string;
            foxtrot = foxtrot[output];
            foxtrot = sizing.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.PDTjLC;
            foxtrot = backup.bind(kilo)(foxtrot);
            verify['text'] = foxtrot;
            romeo = function() { // Original name: onPress
                mike = _closure2_slot0;
                entity = undefined;
                entity = mike.bind(entity)();
                return entity;
            };
            verify['onPress'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[2] = verify;
            oscar['children'] = options;
            oscar = zulu.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();