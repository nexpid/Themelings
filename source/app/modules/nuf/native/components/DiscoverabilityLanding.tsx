// app/modules/nuf/native/components/DiscoverabilityLanding.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    backup = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    offset = 1;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.useContactSyncModalStore;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.Fonts;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['flex'] = offset;
    offset = 6;
    romeon = oscard[offset];
    romeon = backup.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeon;
    tangon['container'] = verify;
    sizing = 'center';
    verify = {'flexGrow': 0, 'justifyContent': 'center', 'marginBottom': 24};
    tangon['headerContainer'] = verify;
    foxtra = 16;
    verify = {'paddingHorizontal': 16, 'alignItems': 'center'};
    tangon['header'] = verify;
    verify = {'width': '100%', 'marginHorizontal': 0};
    tangon['image'] = verify;
    verify = {'flexGrow': 0, 'marginHorizontal': 16, 'marginBottom': 24};
    tangon['button'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 16};
    tangon['title'] = verify;
    verify = {};
    romeon = 7;
    kiloes = oscard[romeon];
    echoed = backup.bind(entity)(kiloes);
    result = yankee.DISPLAY_MEDIUM;
    kiloes = oscard[offset];
    kiloes = backup.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    output = kiloes.HEADER_SECONDARY;
    kiloes = 14;
    source = echoed.bind(entity)(result, output, kiloes);
    ctrled = verify;
    kiloes = copyDataProperties(ctrled, source);
    kiloes = 'textAlign';
    verify[kiloes] = sizing;
    sizing = 8;
    kiloes = 'marginTop';
    verify[kiloes] = sizing;
    tangon['subtitle'] = verify;
    verify = {};
    verify['paddingVertical'] = foxtra;
    kiloes = oscard[offset];
    kiloes = backup.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = kiloes;
    tangon['formRow'] = verify;
    verify = {};
    romeon = oscard[romeon];
    romeon = backup.bind(entity)(romeon);
    yankee = yankee.PRIMARY_SEMIBOLD;
    offset = oscard[offset];
    offset = backup.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.INTERACTIVE_ACTIVE;
    source = romeon.bind(entity)(yankee, offset, foxtra);
    ctrled = verify;
    offset = copyDataProperties(ctrled, source);
    tangon['formText'] = verify;
    verify = {'flexGrow': 1, 'width': '100%'};
    tangon['footerContainer'] = verify;
    verify = {'paddingHorizontal': 16, 'marginTop': 8, 'marginBottom': 24};
    tangon['info'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/nuf/native/components/DiscoverabilityLanding.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: DiscoverabilityLanding
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot9;
            tangon = undefined;
            result = entity.bind(tangon)();
            entity = argFoo;
            entity = entity.onNext;
            var _closure2_slot0 = entity;
            entity = _closure1_slot6;
            entity = entity.bind(tangon)();
            backup = entity.allowEmail;
            var _closure2_slot1 = backup;
            kiloes = entity.allowPhone;
            var _closure2_slot2 = kiloes;
            sizing = _closure1_slot1;
            update = _closure1_slot2;
            entity = 8;
            entity = update[entity];
            entity = sizing.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            oscard = entity.bottom;
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = kiloes;
            michal[1] = backup;
            entity = function() {
                report = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 9;
                tangon = michal[entity];
                entity = undefined;
                oscard = report.bind(entity)(tangon);
                report = oscard.openLazy;
                tangon = _closure1_slot0;
                zuuluu = 11;
                zuuluu = michal[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = 10;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                tangon = tangon.bind(entity)(zuuluu, michal);
                zuuluu = {};
                golfie = _closure2_slot2;
                zuuluu['allowPhone'] = golfie;
                michal = _closure2_slot1;
                zuuluu['allowEmail'] = michal;
                michal = 'Discoverability Landing';
                michal = report.bind(oscard)(tangon, michal, zuuluu);
                return entity;
            };
            entity = zuuluu.bind(report)(entity, michal);
            var _closure2_slot3 = entity;
            zuuluu = _closure1_slot8;
            michal = _closure1_slot5;
            entity = {};
            report = result.container;
            entity['style'] = report;
            report = {};
            echoed = _closure1_slot0;
            golfie = 12;
            golfie = update[golfie];
            golfie = echoed.bind(tangon)(golfie);
            option = golfie.NAV_BAR_HEIGHT;
            golfie = 32;
            golfie = option + golfie;
            report['paddingTop'] = golfie;
            output = 16;
            oscard = oscard + output;
            report['paddingBottom'] = oscard;
            entity['contentContainerStyle'] = report;
            foxtra = _closure1_slot7;
            golfie = _closure1_slot4;
            report = {};
            oscard = result.headerContainer;
            report['style'] = oscard;
            oscard = {};
            option = result.header;
            oscard['style'] = option;
            option = 13;
            option = update[option];
            offset = sizing.bind(tangon)(option);
            option = {};
            yankee = 'contain';
            option['resizeMode'] = yankee;
            yankee = result.image;
            option['style'] = yankee;
            yankee = 14;
            yankee = update[yankee];
            yankee = sizing.bind(tangon)(yankee);
            option['source'] = yankee;
            offset = foxtra.bind(tangon)(offset, option);
            option = new Array(3);
            option[0] = offset;
            offset = 15;
            yankee = update[offset];
            yankee = echoed.bind(tangon)(yankee);
            sizing = yankee.Text;
            yankee = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            source = result.title;
            yankee['style'] = source;
            source = update[output];
            source = echoed.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = update[output];
            source = echoed.bind(tangon)(source);
            source = source.t;
            source = source.n8nw6u;
            source = ctrled.bind(vacuum)(source);
            yankee['children'] = source;
            yankee = foxtra.bind(tangon)(sizing, yankee);
            option[1] = yankee;
            yankee = 17;
            yankee = update[yankee];
            yankee = echoed.bind(tangon)(yankee);
            sizing = yankee.LegacyText;
            yankee = {};
            source = result.subtitle;
            yankee['style'] = source;
            source = update[output];
            source = echoed.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = update[output];
            source = echoed.bind(tangon)(source);
            source = source.t;
            source = source.KMW0kJ;
            source = ctrled.bind(vacuum)(source);
            yankee['children'] = source;
            yankee = foxtra.bind(tangon)(sizing, yankee);
            option[2] = yankee;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report['children'] = oscard;
            oscard = foxtra.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            option = result.footerContainer;
            oscard['style'] = option;
            sizing = 18;
            option = update[sizing];
            option = echoed.bind(tangon)(option);
            yankee = option.FormCheckboxRow;
            option = {};
            source = result.formRow;
            option['DEPRECATED_style'] = source;
            sizing = update[sizing];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.FormRow;
            source = sizing.Label;
            sizing = {};
            ctrled = result.formText;
            sizing['style'] = ctrled;
            ctrled = update[output];
            ctrled = echoed.bind(tangon)(ctrled);
            sequen = ctrled.intl;
            vacuum = sequen.string;
            ctrled = update[output];
            ctrled = echoed.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.gMUgpq;
            ctrled = vacuum.bind(sequen)(ctrled);
            sizing['text'] = ctrled;
            sizing = foxtra.bind(tangon)(source, sizing);
            option['label'] = sizing;
            sizing = 19;
            sizing = update[sizing];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.toggleDiscoverabilityForUser;
            option['onPress'] = sizing;
            if(backup) { _fun00002_ip = 667; continue _fun00001 }
 664:
            backup = kiloes;
 667:
            option['selected'] = backup;
            yankee = foxtra.bind(tangon)(yankee, option);
            option = new Array(3);
            option[0] = yankee;
            backup = _closure1_slot8;
            sizing = _closure1_slot0;
            foxtra = _closure1_slot2;
            offset = foxtra[offset];
            offset = sizing.bind(tangon)(offset);
            yankee = offset.Text;
            offset = {'style': null, 'variant': 'heading-deprecated-12/medium', 'color': 'header-secondary'};
            kiloes = result.info;
            offset['style'] = kiloes;
            kiloes = foxtra[output];
            kiloes = sizing.bind(tangon)(kiloes);
            update = kiloes.intl;
            echoed = update.string;
            kiloes = foxtra[output];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.DGZg+v;
            echoed = echoed.bind(update)(kiloes);
            kiloes = new Array(3);
            kiloes[0] = echoed;
            echoed = ' ';
            kiloes[1] = echoed;
            echoed = foxtra[output];
            echoed = sizing.bind(tangon)(echoed);
            ctrled = echoed.intl;
            source = ctrled.format;
            echoed = foxtra[output];
            echoed = sizing.bind(tangon)(echoed);
            echoed = echoed.t;
            update = echoed.QmF5z8;
            echoed = {};
            vacuum = function(argFoo, argBar) { // Original name: learnMoreHook
                report = _closure1_slot7;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 15;
                entity = zuuluu[entity];
                tangon = undefined;
                entity = michal.bind(tangon)(entity);
                zuuluu = entity.Text;
                michal = {'onPress': null, 'variant': 'text-sm/medium', 'color': 'text-link'};
                entity = _closure2_slot3;
                michal['onPress'] = entity;
                entity = argFoo;
                michal['children'] = entity;
                entity = argBar;
                entity = report.bind(tangon)(zuuluu, michal, entity);
                return entity;
            };
            echoed['learnMoreHook'] = vacuum;
            echoed = source.bind(ctrled)(update, echoed);
            kiloes[2] = echoed;
            offset['children'] = kiloes;
            offset = backup.bind(tangon)(yankee, offset);
            option[1] = offset;
            yankee = _closure1_slot7;
            kiloes = _closure1_slot1;
            backup = 20;
            verify = foxtra[backup];
            offset = kiloes.bind(tangon)(verify);
            verify = {};
            result = result.button;
            verify['style'] = result;
            backup = foxtra[backup];
            backup = kiloes.bind(tangon)(backup);
            backup = backup.Colors;
            backup = backup.BRAND;
            verify['color'] = backup;
            backup = foxtra[output];
            backup = sizing.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = foxtra[output];
            foxtra = sizing.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.PDTjLC;
            foxtra = backup.bind(kiloes)(foxtra);
            verify['text'] = foxtra;
            romeon = function() { // Original name: onPress
                michal = _closure2_slot0;
                entity = undefined;
                entity = michal.bind(entity)();
                return entity;
            };
            verify['onPress'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();