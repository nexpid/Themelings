// app/modules/blocked_domains/components/native/BlockedDomainActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Image;
    var _closure1_slot3 = golf;
    tango = tango.ScrollView;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'zIndex': 1, 'alignSelf': 'center', 'height': 105, 'marginBottom': 4294967280};
    tango['image'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 20, 'marginBottom': 8};
    tango['title'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 16};
    tango['warningMessage'] = verify;
    verify = {};
    offset = 300;
    verify['maxHeight'] = offset;
    offset = 4;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = offset;
    tango['linkCalloutContainer'] = verify;
    verify = {'padding': 10, 'paddingTop': 16, 'paddingBottom': 16};
    tango['linkCalloutContainerText'] = verify;
    verify = {'marginTop': 18, 'height': 40};
    tango['button'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/blocked_domains/components/native/BlockedDomainActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        entity = argFoo;
        zulu = entity.url;
        entity = _closure1_slot7;
        tango = undefined;
        foxtrot = entity.bind(tango)();
        kilo = _closure1_slot0;
        yankee = _closure1_slot2;
        entity = 5;
        entity = yankee[entity];
        mike = kilo.bind(tango)(entity);
        entity = mike.useUrlParts;
        entity = entity.bind(mike)(zulu);
        control = entity.protocol;
        source = entity.hostname;
        echo = entity.theRestOfTheUrl;
        zulu = _closure1_slot6;
        entity = 6;
        entity = yankee[entity];
        entity = kilo.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {};
        report = true;
        entity['startExpanded'] = report;
        options = _closure1_slot5;
        output = 7;
        report = yankee[output];
        report = kilo.bind(tango)(report);
        golf = report.Text;
        report = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
        verify = foxtrot.title;
        report['style'] = verify;
        romeo = 8;
        verify = yankee[romeo];
        verify = kilo.bind(tango)(verify);
        backup = verify.intl;
        offset = backup.string;
        verify = yankee[romeo];
        verify = kilo.bind(tango)(verify);
        verify = verify.t;
        verify = verify.2B3wj4;
        verify = offset.bind(backup)(verify);
        report['children'] = verify;
        golf = options.bind(tango)(golf, report);
        report = new Array(5);
        report[0] = golf;
        golf = yankee[output];
        golf = kilo.bind(tango)(golf);
        verify = golf.Text;
        golf = {};
        offset = foxtrot.warningMessage;
        golf['style'] = offset;
        offset = 'text-md/medium';
        golf['variant'] = offset;
        offset = yankee[romeo];
        offset = kilo.bind(tango)(offset);
        result = offset.intl;
        sizing = result.format;
        offset = yankee[romeo];
        offset = kilo.bind(tango)(offset);
        offset = offset.t;
        backup = offset.jnHyYW;
        offset = {};
        offset = sizing.bind(result)(backup, offset);
        golf['children'] = offset;
        golf = options.bind(tango)(verify, golf);
        report[1] = golf;
        verify = _closure1_slot3;
        golf = {};
        offset = foxtrot.image;
        golf['style'] = offset;
        offset = _closure1_slot1;
        backup = 9;
        backup = yankee[backup];
        backup = offset.bind(tango)(backup);
        golf['source'] = backup;
        golf = options.bind(tango)(verify, golf);
        report[2] = golf;
        golf = _closure1_slot4;
        oscar = {};
        verify = foxtrot.linkCalloutContainer;
        oscar['style'] = verify;
        verify = yankee[output];
        verify = kilo.bind(tango)(verify);
        backup = verify.Text;
        verify = {};
        sizing = foxtrot.linkCalloutContainerText;
        verify['style'] = sizing;
        sizing = 'text-md/normal';
        verify['variant'] = sizing;
        sizing = yankee[output];
        sizing = kilo.bind(tango)(sizing);
        result = sizing.Text;
        sizing = {'variant': 'text-md/normal', 'color': 'text-muted'};
        update = new Array(2);
        update[0] = control;
        control = '//';
        update[1] = control;
        sizing['children'] = update;
        result = zulu.bind(tango)(result, sizing);
        sizing = new Array(3);
        sizing[0] = result;
        result = yankee[output];
        result = kilo.bind(tango)(result);
        update = result.Text;
        result = {'variant': 'text-md/semibold', 'color': 'text-normal'};
        result['children'] = source;
        result = options.bind(tango)(update, result);
        sizing[1] = result;
        output = yankee[output];
        output = kilo.bind(tango)(output);
        result = output.Text;
        output = {'variant': 'text-md/normal', 'color': 'text-muted'};
        output['children'] = echo;
        output = options.bind(tango)(result, output);
        sizing[2] = output;
        verify['children'] = sizing;
        verify = zulu.bind(tango)(backup, verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[3] = oscar;
        verify = 10;
        oscar = yankee[verify];
        golf = offset.bind(tango)(oscar);
        oscar = {};
        foxtrot = foxtrot.button;
        oscar['style'] = foxtrot;
        foxtrot = yankee[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.string;
        romeo = yankee[romeo];
        romeo = kilo.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo./g10LC;
        romeo = foxtrot.bind(backup)(romeo);
        oscar['text'] = romeo;
        romeo = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 11;
            mike = mike[entity];
            entity = undefined;
            mike = zulu.bind(entity)(mike);
            entity = mike.hideActionSheet;
            entity = entity.bind(mike)();
            return entity;
        };
        oscar['onPress'] = romeo;
        romeo = yankee[verify];
        romeo = offset.bind(tango)(romeo);
        romeo = romeo.Colors;
        romeo = romeo.BRAND;
        oscar['color'] = romeo;
        verify = yankee[verify];
        verify = offset.bind(tango)(verify);
        verify = verify.Sizes;
        verify = verify.SMALL;
        oscar['size'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[4] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();