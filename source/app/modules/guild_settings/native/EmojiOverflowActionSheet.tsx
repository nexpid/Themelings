// app/modules/guild_settings/native/EmojiOverflowActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Image;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'width': 30, 'height': 30, 'marginRight': 8, 'resizeMode': 'contain'};
    tangon['emojiImage'] = verify;
    verify = {};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.TEXT_DANGER;
    verify['tintColor'] = romeon;
    tangon['destructiveIcon'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_DANGER;
    verify['color'] = offset;
    tangon['destructiveText'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_settings/native/EmojiOverflowActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: EmojiOverflowActionSheet
        entity = argFoo;
        golfie = entity.emoji;
        var _closure2_slot0 = golfie;
        michal = entity.guildId;
        var _closure2_slot1 = michal;
        entity = entity.onClose;
        var _closure2_slot2 = entity;
        entity = _closure1_slot7;
        tangon = undefined;
        romeon = entity.bind(tangon)();
        option = _closure1_slot5;
        michal = _closure1_slot4;
        entity = {};
        zuuluu = romeon.emojiImage;
        entity['style'] = zuuluu;
        zuuluu = {};
        oscard = _closure1_slot2;
        sizing = _closure1_slot3;
        report = 5;
        report = sizing[report];
        offset = oscard.bind(tangon)(report);
        oscard = offset.getEmojiURL;
        report = {};
        foxtra = golfie.id;
        report['id'] = foxtra;
        foxtra = golfie.animated;
        report['animated'] = foxtra;
        foxtra = 48;
        report['size'] = foxtra;
        report = oscard.bind(offset)(report);
        zuuluu['uri'] = report;
        entity['source'] = zuuluu;
        offset = option.bind(tangon)(michal, entity);
        zuuluu = _closure1_slot6;
        kiloes = _closure1_slot0;
        entity = 6;
        entity = sizing[entity];
        entity = kiloes.bind(tangon)(entity);
        michal = entity.ActionSheet;
        entity = {};
        report = 7;
        report = sizing[report];
        report = kiloes.bind(tangon)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        report['leading'] = offset;
        foxtra = golfie.name;
        golfie = global;
        golfie = golfie.HermesInternal;
        offset = golfie.concat;
        golfie = ':';
        golfie = offset.bind(golfie)(foxtra, golfie);
        report['title'] = golfie;
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        offset = 8;
        oscard = sizing[offset];
        oscard = kiloes.bind(tangon)(oscard);
        golfie = oscard.FormRow;
        oscard = {};
        output = _closure1_slot1;
        yankee = 9;
        yankee = sizing[yankee];
        foxtra = output.bind(tangon)(yankee);
        yankee = {};
        backup = romeon.destructiveIcon;
        yankee['style'] = backup;
        backup = 10;
        backup = sizing[backup];
        backup = output.bind(tangon)(backup);
        yankee['source'] = backup;
        yankee = option.bind(tangon)(foxtra, yankee);
        oscard['leading'] = yankee;
        offset = sizing[offset];
        offset = kiloes.bind(tangon)(offset);
        yankee = offset.FormLabel;
        offset = {};
        romeon = romeon.destructiveText;
        offset['style'] = romeon;
        romeon = 11;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.oyYWHB;
        romeon = foxtra.bind(backup)(romeon);
        offset['text'] = romeon;
        offset = option.bind(tangon)(yankee, offset);
        oscard['label'] = offset;
        verify = function() { // Original name: onPress
            zuuluu = _closure1_slot0;
            michal = _closure1_slot3;
            entity = 12;
            michal = michal[entity];
            entity = undefined;
            oscard = zuuluu.bind(entity)(michal);
            report = oscard.deleteEmoji;
            tangon = _closure2_slot1;
            zuuluu = _closure2_slot0;
            zuuluu = zuuluu.id;
            zuuluu = report.bind(oscard)(tangon, zuuluu);
            michal = _closure2_slot2;
            michal = michal.bind(entity)();
            return entity;
        };
        oscard['onPress'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();