// app/modules/guild_settings/native/TransferOwnership.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    offset = 1;
    tangon = oscard[offset];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot6 = golfie;
    golfie = tangon.Image;
    var _closure1_slot7 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.TransferOwnershipModalScenes;
    var _closure1_slot10 = golfie;
    tangon = tangon.TransferOwnershipVerificationTypes;
    var _closure1_slot11 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.NOOP;
    var _closure1_slot12 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot13 = golfie;
    golfie = tangon.Fragment;
    var _closure1_slot14 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot15 = tangon;
    yankee = 8;
    tangon = oscard[yankee];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    romeon = 9;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MOBILE_SECONDARY;
    verify['backgroundColor'] = backup;
    tangon['background'] = verify;
    verify = {};
    verify['flex'] = offset;
    tangon['body'] = verify;
    verify = {'alignItems': 'center', 'paddingVertical': 16};
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MOBILE_SECONDARY;
    verify['backgroundColor'] = backup;
    tangon['header'] = verify;
    verify = {'width': 78, 'height': 15, 'paddingVertical': 1, 'marginBottom': 2};
    tangon['arrow'] = verify;
    verify = {'flexDirection': 'row', 'justifyContent': 'flex-start', 'width': 160, 'height': 80, 'marginBottom': 30};
    tangon['avatarsWrapper'] = verify;
    verify = {'position': 'absolute', 'left': 71, 'top': 4294967294, 'borderRadius': 44, 'width': 88, 'height': 88};
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MOBILE_SECONDARY;
    verify['backgroundColor'] = romeon;
    tangon['avatarFauxBorder'] = verify;
    verify = {'top': 4, 'left': 4};
    tangon['otherUserAvatar'] = verify;
    verify = {};
    verify['marginHorizontal'] = yankee;
    tangon['transferButton'] = verify;
    verify = {};
    verify['flex'] = offset;
    tangon['aka'] = verify;
    verify = {'marginRight': 4, 'justifyContent': 'center', 'alignContent': 'center'};
    tangon['miniAvatar'] = verify;
    verify = {'paddingRight': 4, 'paddingLeft': 2, 'justifyContent': 'center', 'alignContent': 'center'};
    tangon['miniGuildIcon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot16 = tangon;
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_settings/native/TransferOwnership.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: TransferOwnership
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            source = entity.guild;
            var _closure2_slot0 = source;
            config = entity.toUser;
            var _closure2_slot1 = config;
            tangon = undefined;
            var _closure2_slot2 = tangon;
            var _closure2_slot3 = tangon;
            entity = function() { // Original name: _handleTransfer
                tangon = undefined;
                entity = undefined;
                zuuluu = _closure1_slot3;
                michal = function* () {
                    entity = function* () { // Original name: ?anon_0_
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            StartGenerator();
                            ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                            if(michal) { _fun00004_ip = 236; continue _fun00003 }
 10:
                            michal = _closure2_slot3;
                            michal = michal.mfaEnabled;
                            if(michal) { _fun00004_ip = 126; continue _fun00003 }
 26:
                            michal = _closure2_slot3;
                            tangon = michal.email;
                            michal = null;
                            if(!(michal != tangon)) { _fun00004_ip = 126; continue _fun00003 }
 42:
                            oscard = _closure1_slot1;
                            report = _closure1_slot2;
                            michal = 13;
                            report = report[michal];
                            michal = undefined;
                            oscard = oscard.bind(michal)(report);
                            report = oscard.sendTransferOwnershipPincode;
                            michal = _closure2_slot0;
                            michal = michal.id;
                            michal = report.bind(oscard)(michal);
                            SaveGenerator(address=91);
 89:
                            return michal;
 91:
                            ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                            if(report) { _fun00004_ip = 123; continue _fun00003 }
 97:
                            oscard = _closure2_slot2;
                            report = oscard.push;
                            tangon = _closure1_slot10;
                            tangon = tangon.CONFIRM_EMAIL_CODE;
                            tangon = report.bind(oscard)(tangon);
                            _fun00004_ip = 231; continue _fun00003;
 123:
                            return michal;
 126:
                            oscard = _closure1_slot1;
                            report = _closure1_slot2;
                            tangon = 13;
                            report = report[tangon];
                            tangon = undefined;
                            golfie = oscard.bind(tangon)(report);
                            oscard = golfie.transferOwnership;
                            tangon = _closure2_slot0;
                            report = tangon.id;
                            tangon = _closure2_slot1;
                            tangon = tangon.id;
                            zuuluu = _closure2_slot3;
                            option = zuuluu.mfaEnabled;
                            zuuluu = null;
                            if(!option) { _fun00004_ip = 200; continue _fun00003 }
 190:
                            option = _closure1_slot11;
                            zuuluu = option.MFA;
 200:
                            report = oscard.bind(golfie)(report, tangon, zuuluu);
                            tangon = report.then;
                            zuuluu = _closure1_slot12;
                            michal = function() {
                                report = _closure1_slot1;
                                tangon = _closure1_slot2;
                                entity = 14;
                                zuuluu = tangon[entity];
                                entity = undefined;
                                oscard = report.bind(entity)(zuuluu);
                                zuuluu = oscard.close;
                                zuuluu = zuuluu.bind(oscard)();
                                zuuluu = 13;
                                zuuluu = tangon[zuuluu];
                                report = report.bind(entity)(zuuluu);
                                zuuluu = report.close;
                                zuuluu = zuuluu.bind(report)();
                                zuuluu = _closure1_slot0;
                                michal = 15;
                                michal = tangon[michal];
                                zuuluu = zuuluu.bind(entity)(michal);
                                michal = zuuluu.showTransferOwnershipSuccess;
                                michal = michal.bind(zuuluu)();
                                return entity;
                            };
                            michal = tangon.bind(report)(michal, zuuluu);
 231:
                            michal = undefined;
                            return michal;
 236:
                            return entity;
                        }
                    };
                    return entity;
                };
                tangon = zuuluu.bind(tangon)(michal);
                _closure2_slot7 = tangon;
                zuuluu = tangon.apply;
                entity = arguments;
                michal = entity;
                entity = this;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            var _closure2_slot7 = entity;
            entity = _closure1_slot16;
            sizing = entity.bind(tangon)();
            yankee = _closure1_slot0;
            backup = _closure1_slot2;
            entity = 10;
            entity = backup[entity];
            michal = yankee.bind(tangon)(entity);
            entity = michal.useNavigation;
            entity = entity.bind(michal)();
            _closure2_slot2 = entity;
            entity = 11;
            entity = backup[entity];
            report = yankee.bind(tangon)(entity);
            zuuluu = report.useStateFromStores;
            entity = _closure1_slot9;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot9;
                entity = zuuluu.getCurrentUser;
                entity = entity.bind(zuuluu)();
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                michal = 12;
                michal = tangon[michal];
                report = undefined;
                tangon = zuuluu.bind(report)(michal);
                michal = null;
                zuuluu = michal != entity;
                michal = 'TransferOwnership: currentUser cannot be undefined';
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            ctrled = zuuluu.bind(report)(michal, entity);
            _closure2_slot3 = ctrled;
            zuuluu = _closure1_slot5;
            michal = zuuluu.useState;
            entity = false;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot4;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            verify = michal[entity];
            entity = 1;
            entity = michal[entity];
            var _closure2_slot4 = entity;
            vacuum = _closure1_slot1;
            entity = 16;
            entity = backup[entity];
            zuuluu = vacuum.bind(tangon)(entity);
            michal = zuuluu.getNickname;
            entity = source.id;
            output = michal.bind(zuuluu)(entity, tangon, config);
            var _closure2_slot5 = output;
            michal = config.hasAvatarForGuild;
            entity = source.id;
            option = michal.bind(config)(entity);
            var _closure2_slot6 = option;
            update = function() { // Original name: GuildWithSmallIcon
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = _closure1_slot16;
                    tangon = undefined;
                    yankee = entity.bind(tangon)();
                    zuuluu = _closure1_slot15;
                    michal = _closure1_slot14;
                    entity = {};
                    report = _closure2_slot0;
                    report = report.icon;
                    golfie = null;
                    report = golfie != report;
                    if(!report) { _fun00006_ip = 139; continue _fun00005 }
 44:
                    offset = _closure1_slot13;
                    option = _closure1_slot6;
                    report = {};
                    yankee = yankee.miniGuildIcon;
                    report['style'] = yankee;
                    romeon = _closure1_slot1;
                    kiloes = _closure1_slot2;
                    foxtra = 17;
                    yankee = kiloes[foxtra];
                    romeon = romeon.bind(tangon)(yankee);
                    yankee = {};
                    backup = _closure2_slot0;
                    yankee['guild'] = backup;
                    backup = _closure1_slot0;
                    foxtra = kiloes[foxtra];
                    foxtra = backup.bind(tangon)(foxtra);
                    foxtra = foxtra.GuildIconSizes;
                    foxtra = foxtra.XXSMALL;
                    yankee['size'] = foxtra;
                    yankee = offset.bind(tangon)(romeon, yankee);
                    report['children'] = yankee;
                    golfie = offset.bind(tangon)(option, report);
 139:
                    report = new Array(2);
                    report[0] = golfie;
                    option = _closure1_slot13;
                    golfie = _closure1_slot0;
                    offset = _closure1_slot2;
                    oscard = 18;
                    oscard = offset[oscard];
                    oscard = golfie.bind(tangon)(oscard);
                    golfie = oscard.Text;
                    oscard = {};
                    offset = 'text-md/bold';
                    oscard['variant'] = offset;
                    verify = _closure2_slot0;
                    verify = verify.name;
                    oscard['children'] = verify;
                    oscard = option.bind(tangon)(golfie, oscard);
                    report[1] = oscard;
                    entity['children'] = report;
                    entity = zuuluu.bind(tangon)(michal, entity);
                    return entity;
                }
            };
            zuuluu = _closure1_slot15;
            michal = _closure1_slot8;
            entity = {'style': null, 'keyboardShouldPersistTaps': 'handled', 'alwaysBounceVertical': false};
            report = sizing.background;
            entity['style'] = report;
            oscard = _closure1_slot6;
            report = {};
            golfie = sizing.header;
            report['style'] = golfie;
            foxtra = _closure1_slot13;
            offset = _closure1_slot7;
            golfie = {};
            result = 19;
            result = backup[result];
            result = vacuum.bind(tangon)(result);
            golfie['source'] = result;
            result = sizing.arrow;
            golfie['style'] = result;
            offset = foxtra.bind(tangon)(offset, golfie);
            golfie = new Array(4);
            golfie[0] = offset;
            offset = {};
            result = sizing.avatarsWrapper;
            offset['style'] = result;
            sequen = 20;
            result = backup[sequen];
            echoed = vacuum.bind(tangon)(result);
            result = {};
            result['user'] = ctrled;
            ctrled = source.id;
            result['guildId'] = ctrled;
            ctrled = backup[sequen];
            ctrled = yankee.bind(tangon)(ctrled);
            ctrled = ctrled.AvatarSizes;
            ctrled = ctrled.XXLARGE;
            result['size'] = ctrled;
            echoed = foxtra.bind(tangon)(echoed, result);
            result = new Array(2);
            result[0] = echoed;
            echoed = {};
            ctrled = sizing.avatarFauxBorder;
            echoed['style'] = ctrled;
            ctrled = backup[sequen];
            vacuum = vacuum.bind(tangon)(ctrled);
            ctrled = {};
            ctrled['user'] = config;
            ctrled['guildId'] = tangon;
            sequen = backup[sequen];
            sequen = yankee.bind(tangon)(sequen);
            sequen = sequen.AvatarSizes;
            sequen = sequen.XXLARGE;
            ctrled['size'] = sequen;
            sequen = sizing.otherUserAvatar;
            ctrled['style'] = sequen;
            ctrled = foxtra.bind(tangon)(vacuum, ctrled);
            echoed['children'] = ctrled;
            echoed = foxtra.bind(tangon)(oscard, echoed);
            result[1] = echoed;
            offset['children'] = result;
            offset = zuuluu.bind(tangon)(oscard, offset);
            golfie[1] = offset;
            offset = 18;
            result = backup[offset];
            result = yankee.bind(tangon)(result);
            echoed = result.Text;
            result = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            source = source.name;
            result['children'] = source;
            result = foxtra.bind(tangon)(echoed, result);
            golfie[2] = result;
            offset = backup[offset];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.Text;
            offset = {'variant': 'text-md/medium', 'color': 'header-secondary'};
            backup = null;
            if(!(backup == output)) { _fun00002_ip = 701; continue _fun00001 }
 600:
            if(option) { _fun00002_ip = 701; continue _fun00001 }
 603:
            backup = _closure1_slot0;
            ctrled = _closure1_slot2;
            option = 21;
            output = ctrled[option];
            output = backup.bind(tangon)(output);
            result = output.intl;
            output = result.format;
            option = ctrled[option];
            option = backup.bind(tangon)(option);
            option = option.t;
            backup = option.2XLnGx;
            option = {};
            option['GuildHook'] = update;
            source = _closure1_slot1;
            echoed = 22;
            echoed = ctrled[echoed];
            source = source.bind(tangon)(echoed);
            echoed = source.getUserTag;
            echoed = echoed.bind(source)(config);
            option['user'] = echoed;
            option = output.bind(result)(backup, option);
            _fun00002_ip = 811; continue _fun00001;
 701:
            output = _closure1_slot0;
            ctrled = _closure1_slot2;
            backup = 21;
            result = ctrled[backup];
            result = output.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.format;
            backup = ctrled[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            output = backup.E90vgo;
            backup = {};
            backup['GuildHook'] = update;
            source = _closure1_slot1;
            update = 22;
            update = ctrled[update];
            source = source.bind(tangon)(update);
            update = source.getUserTag;
            update = update.bind(source)(config);
            backup['user'] = update;
            update = function() { // Original name: NicknameAKA
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = _closure1_slot16;
                    tangon = undefined;
                    kiloes = entity.bind(tangon)();
                    zuuluu = _closure1_slot15;
                    michal = _closure1_slot14;
                    entity = {};
                    golfie = _closure1_slot0;
                    report = _closure1_slot2;
                    verify = 18;
                    report = report[verify];
                    report = golfie.bind(tangon)(report);
                    golfie = report.Text;
                    report = {'style': null, 'variant': 'text-sm/bold', 'color': 'header-secondary'};
                    option = kiloes.aka;
                    report['style'] = option;
                    option = ['AKA', ' '];
                    report['children'] = option;
                    golfie = zuuluu.bind(tangon)(golfie, report);
                    report = new Array(3);
                    report[0] = golfie;
                    option = _closure2_slot6;
                    yankee = null;
                    golfie = null;
                    if(!option) { _fun00008_ip = 208; continue _fun00007 }
 116:
                    foxtra = _closure1_slot13;
                    romeon = _closure1_slot1;
                    sizing = _closure1_slot2;
                    backup = 20;
                    option = sizing[backup];
                    romeon = romeon.bind(tangon)(option);
                    option = {};
                    kiloes = kiloes.miniAvatar;
                    option['style'] = kiloes;
                    kiloes = _closure2_slot1;
                    option['user'] = kiloes;
                    kiloes = _closure2_slot0;
                    kiloes = kiloes.id;
                    option['guildId'] = kiloes;
                    kiloes = _closure1_slot0;
                    backup = sizing[backup];
                    backup = kiloes.bind(tangon)(backup);
                    backup = backup.AvatarSizes;
                    backup = backup.XXSMALL;
                    option['size'] = backup;
                    golfie = foxtra.bind(tangon)(romeon, option);
 208:
                    report[1] = golfie;
                    option = _closure1_slot13;
                    golfie = _closure1_slot0;
                    oscard = _closure1_slot2;
                    oscard = oscard[verify];
                    oscard = golfie.bind(tangon)(oscard);
                    golfie = oscard.Text;
                    oscard = {};
                    verify = 'text-md/medium';
                    oscard['variant'] = verify;
                    verify = _closure2_slot5;
                    if(!(yankee == verify)) { _fun00008_ip = 271; continue _fun00007 }
 256:
                    yankee = _closure2_slot1;
                    verify = yankee.toString;
                    verify = verify.bind(yankee)();
                    _fun00008_ip = 275; continue _fun00007;
 271:
                    verify = _closure2_slot5;
 275:
                    oscard['children'] = verify;
                    oscard = option.bind(tangon)(golfie, oscard);
                    report[2] = oscard;
                    entity['children'] = report;
                    entity = zuuluu.bind(tangon)(michal, entity);
                    return entity;
                }
            };
            backup['AKAHook'] = update;
            option = result.bind(echoed)(output, backup);
 811:
            offset['children'] = option;
            option = 'transfer-ownership-details';
            option = foxtra.bind(tangon)(yankee, offset, option);
            golfie[3] = option;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            option = _closure1_slot13;
            foxtra = _closure1_slot0;
            backup = _closure1_slot2;
            result = 23;
            oscard = backup[result];
            oscard = foxtra.bind(tangon)(oscard);
            golfie = oscard.FormSection;
            oscard = {};
            offset = 21;
            yankee = backup[offset];
            yankee = foxtra.bind(tangon)(yankee);
            echoed = yankee.intl;
            output = echoed.string;
            yankee = backup[offset];
            yankee = foxtra.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.Z5s7PD;
            yankee = output.bind(echoed)(yankee);
            oscard['title'] = yankee;
            yankee = backup[result];
            yankee = foxtra.bind(tangon)(yankee);
            output = yankee.FormRow;
            yankee = {};
            echoed = backup[offset];
            echoed = foxtra.bind(tangon)(echoed);
            ctrled = echoed.intl;
            source = ctrled.format;
            echoed = backup[offset];
            echoed = foxtra.bind(tangon)(echoed);
            echoed = echoed.t;
            update = echoed.xm6ACA;
            echoed = {};
            romeon = _closure1_slot1;
            vacuum = 22;
            vacuum = backup[vacuum];
            sequen = romeon.bind(tangon)(vacuum);
            vacuum = sequen.getUserTag;
            vacuum = vacuum.bind(sequen)(config);
            echoed['username'] = vacuum;
            echoed = source.bind(ctrled)(update, echoed);
            yankee['label'] = echoed;
            echoed = function() { // Original name: handleConfirmToggle
                zuuluu = _closure2_slot4;
                entity = undefined;
                michal = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            yankee['onPress'] = echoed;
            echoed = 'checkbox';
            yankee['accessibilityRole'] = echoed;
            echoed = {};
            echoed['selected'] = verify;
            yankee['accessibilityState'] = echoed;
            result = backup[result];
            result = foxtra.bind(tangon)(result);
            result = result.FormRow;
            echoed = result.Radio;
            result = {};
            result['selected'] = verify;
            result = option.bind(tangon)(echoed, result);
            yankee['leading'] = result;
            yankee = option.bind(tangon)(output, yankee);
            oscard['children'] = yankee;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            yankee = 24;
            oscard = backup[yankee];
            golfie = romeon.bind(tangon)(oscard);
            oscard = {};
            sizing = sizing.transferButton;
            oscard['style'] = sizing;
            kiloes = function() { // Original name: handleTransfer
                entity = undefined;
                tangon = _closure2_slot7;
                zuuluu = tangon.apply;
                entity = arguments;
                michal = entity;
                entity = this;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            oscard['onPress'] = kiloes;
            yankee = backup[yankee];
            yankee = romeon.bind(tangon)(yankee);
            yankee = yankee.Colors;
            yankee = yankee.BRAND;
            oscard['color'] = yankee;
            yankee = backup[offset];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = backup[offset];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.jqqLb2;
            offset = yankee.bind(romeon)(offset);
            oscard['text'] = offset;
            verify = !verify;
            oscard['disabled'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();