// app/modules/guild_settings/roles/native/GuildSettingsRoleEditDisplay.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    yankee = 1;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Platform;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    foxtra = tangon.Fonts;
    golfie = tangon.DEFAULT_ROLE_COLOR;
    var _closure1_slot5 = golfie;
    golfie = tangon.MAX_ROLE_LENGTH;
    var _closure1_slot6 = golfie;
    tangon = tangon.GuildFeatures;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.TitleStyleType;
    var _closure1_slot8 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot11 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {};
    offset = 16;
    tangon['paddingVertical'] = offset;
    golfie['input'] = tangon;
    tangon = {'flexGrow': 1, 'flexDirection': 'row', 'justifyContent': 'space-between', 'alignItems': 'center', 'paddingRight': 8};
    golfie['labelRow'] = tangon;
    tangon = {'paddingTop': 2, 'opacity': 0.5};
    golfie['roleIcon'] = tangon;
    tangon = {'flexDirection': 'row', 'alignItems': 'center'};
    golfie['row'] = tangon;
    tangon = {'position': 'absolute', 'top': '50%', 'right': 8};
    backup = {};
    offset = -6;
    backup['translateY'] = offset;
    offset = new Array(1);
    offset[0] = backup;
    tangon['transform'] = offset;
    golfie['ercRow'] = tangon;
    tangon = 24;
    offset = {'marginHorizontal': 0, 'marginVertical': 0, 'marginRight': 8, 'minWidth': 24, 'height': 24, 'borderRadius': 3};
    golfie['colorBlock'] = offset;
    offset = {};
    backup = 'capitalize';
    offset['textTransform'] = backup;
    golfie['iconFormLabel'] = offset;
    offset = {};
    foxtra = foxtra.PRIMARY_SEMIBOLD;
    offset['fontFamily'] = foxtra;
    offset['flex'] = yankee;
    yankee = 6;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.unsafe_rawColors;
    yankee = yankee.RED_400;
    offset['color'] = yankee;
    golfie['deleteText'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot12 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_settings/roles/native/GuildSettingsRoleEditDisplay.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildSettingsRoleEditDisplay
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            oscard = zuuluu.guild;
            quebec = zuuluu.role;
            config = zuuluu.name;
            backup = zuuluu.mentionable;
            ctrled = zuuluu.hoist;
            variable37 = zuuluu.color;
            sequen = zuuluu.onNameChanged;
            foxtra = zuuluu.onMentionableChanged;
            source = zuuluu.onHoistChanged;
            entity = zuuluu.onColorChanged;
            var _closure2_slot0 = entity;
            michal = zuuluu.locked;
            yankee = zuuluu.autoFocusInput;
            tangon = undefined;
            var _closure2_slot1 = tangon;
            zuuluu = _closure1_slot12;
            status = zuuluu.bind(tangon)();
            report = _closure1_slot0;
            golfie = _closure1_slot2;
            zuuluu = 7;
            zuuluu = golfie[zuuluu];
            option = report.bind(tangon)(zuuluu);
            golfie = option.isEveryoneRoleId;
            report = oscard.id;
            zuuluu = quebec.id;
            output = golfie.bind(option)(report, zuuluu);
            sizing = output;
            if(output) { _fun00002_ip = 146; continue _fun00001 }
 143:
            sizing = michal;
 146:
            zuuluu = oscard.hasFeature;
            michal = _closure1_slot7;
            michal = michal.ENHANCED_ROLE_COLORS;
            vacuum = zuuluu.bind(oscard)(michal);
            if(!vacuum) { _fun00002_ip = 181; continue _fun00001 }
 170:
            zuuluu = quebec.colors;
            michal = null;
            vacuum = michal != zuuluu;
 181:
            if(!vacuum) { _fun00002_ip = 201; continue _fun00001 }
 184:
            michal = quebec.colors;
            zuuluu = michal.secondary_color;
            michal = null;
            vacuum = michal != zuuluu;
 201:
            michal = 0;
            if(!(michal === variable37)) { _fun00002_ip = 211; continue _fun00001 }
 207:
            variable37 = _closure1_slot5;
 211:
            _closure2_slot1 = variable37;
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            michal = 8;
            michal = report[michal];
            golfie = zuuluu.bind(tangon)(michal);
            michal = golfie.canGuildUseRoleIcons;
            offset = michal.bind(golfie)(oscard, quebec);
            michal = 9;
            michal = report[michal];
            report = zuuluu.bind(tangon)(michal);
            zuuluu = report.useRoleIcon;
            michal = {};
            oscard = oscard.id;
            michal['guildId'] = oscard;
            oscard = quebec.id;
            michal['roleId'] = oscard;
            oscard = 26;
            michal['size'] = oscard;
            papara = zuuluu.bind(report)(michal);
            verify = null;
            if(!(verify == papara)) { _fun00002_ip = 381; continue _fun00001 }
 304:
            report = _closure1_slot9;
            romeon = _closure1_slot1;
            option = _closure1_slot2;
            oscard = 10;
            michal = option[oscard];
            zuuluu = romeon.bind(tangon)(michal);
            michal = {};
            golfie = 11;
            golfie = option[golfie];
            golfie = romeon.bind(tangon)(golfie);
            michal['source'] = golfie;
            golfie = _closure1_slot0;
            oscard = option[oscard];
            oscard = golfie.bind(tangon)(oscard);
            oscard = oscard.IconSizes;
            oscard = oscard.MEDIUM;
            michal['size'] = oscard;
            papara = report.bind(tangon)(zuuluu, michal);
 381:
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = variable37;
            michal[1] = entity;
            entity = function() {
                report = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 12;
                tangon = michal[entity];
                entity = undefined;
                oscard = report.bind(entity)(tangon);
                report = oscard.openLazy;
                tangon = _closure1_slot0;
                zuuluu = 14;
                zuuluu = michal[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = 13;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                tangon = tangon.bind(entity)(zuuluu, michal);
                zuuluu = {};
                golfie = _closure2_slot1;
                zuuluu['color'] = golfie;
                michal = _closure2_slot0;
                zuuluu['onSelect'] = michal;
                michal = 'RoleColorPicker';
                michal = report.bind(oscard)(tangon, michal, zuuluu);
                return entity;
            };
            update = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot10;
            michal = _closure1_slot11;
            entity = {};
            romeon = _closure1_slot9;
            whisks = _closure1_slot0;
            target = _closure1_slot2;
            result = 15;
            report = target[result];
            report = whisks.bind(tangon)(report);
            oscard = report.FormSection;
            report = {};
            golfie = _closure1_slot8;
            golfie = golfie.ANDROID_NO_BORDER;
            report['titleStyleType'] = golfie;
            echoed = 16;
            golfie = target[echoed];
            golfie = whisks.bind(tangon)(golfie);
            record = golfie.intl;
            option = record.string;
            golfie = target[echoed];
            golfie = whisks.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.dLbkBg;
            golfie = option.bind(record)(golfie);
            report['title'] = golfie;
            golfie = true;
            report['thinTitle'] = golfie;
            golfie = target[result];
            golfie = whisks.bind(tangon)(golfie);
            option = golfie.FormInput;
            golfie = {};
            record = status.input;
            golfie['style'] = record;
            golfie['value'] = config;
            golfie['disabled'] = sizing;
            golfie['onChange'] = sequen;
            sequen = false;
            golfie['showTopContainer'] = sequen;
            sequen = _closure1_slot6;
            golfie['maxLength'] = sequen;
            golfie['autoFocus'] = yankee;
            yankee = 17;
            yankee = target[yankee];
            yankee = whisks.bind(tangon)(yankee);
            yankee = yankee.ClearButtonVisibility;
            yankee = yankee.ALWAYS;
            golfie['clearButtonVisibility'] = yankee;
            golfie = romeon.bind(tangon)(option, golfie);
            report['children'] = golfie;
            oscard = romeon.bind(tangon)(oscard, report);
            report = new Array(4);
            report[0] = oscard;
            golfie = _closure1_slot1;
            oscard = 18;
            oscard = target[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            oscard['role'] = quebec;
            oscard = romeon.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            oscard = target[result];
            oscard = whisks.bind(tangon)(oscard);
            golfie = oscard.FormSection;
            oscard = {};
            option = target[result];
            option = whisks.bind(tangon)(option);
            yankee = option.FormRow;
            option = {};
            config = _closure1_slot4;
            sequen = {};
            record = status.labelRow;
            sequen['style'] = record;
            record = target[result];
            record = whisks.bind(tangon)(record);
            cntext = record.FormLabel;
            record = {};
            sierra = target[echoed];
            sierra = whisks.bind(tangon)(sierra);
            limora = sierra.intl;
            sierra = limora.string;
            target = target[echoed];
            target = whisks.bind(tangon)(target);
            target = target.t;
            target = target.5NC5YW;
            target = sierra.bind(limora)(target);
            record['text'] = target;
            cntext = romeon.bind(tangon)(cntext, record);
            record = new Array(2);
            record[0] = cntext;
            cntext = {};
            sierra = status.row;
            target = new Array(2);
            target[0] = sierra;
            sierra = vacuum;
            if(!vacuum) { _fun00002_ip = 834; continue _fun00001 }
 828:
            sierra = status.ercRow;
 834:
            target[1] = sierra;
            cntext['style'] = target;
            if(!vacuum) { _fun00002_ip = 855; continue _fun00001 }
 845:
            target = quebec.colorStrings;
            if(!(verify == target)) { _fun00002_ip = 911; continue _fun00001 }
 855:
            limora = _closure1_slot9;
            sierra = _closure1_slot1;
            whisks = _closure1_slot2;
            target = 20;
            target = whisks[target];
            sierra = sierra.bind(tangon)(target);
            target = {};
            target['color'] = variable37;
            whisks = status.colorBlock;
            target['style'] = whisks;
            target['onSelect'] = update;
            sierra = limora.bind(tangon)(sierra, target);
            _fun00002_ip = 1054; continue _fun00001;
 911:
            whisks = _closure1_slot9;
            limora = _closure1_slot1;
            variable36 = _closure1_slot2;
            target = 19;
            target = variable36[target];
            limora = limora.bind(tangon)(target);
            target = {};
            variable36 = quebec.colorStrings;
            variable38 = variable36.primaryColor;
            variable36 = new Array(3);
            variable36[0] = variable38;
            variable38 = quebec.colorStrings;
            variable38 = variable38.secondaryColor;
            variable36[1] = variable38;
            quebec = quebec.colorStrings;
            quebec = quebec.tertiaryColor;
            variable36[2] = quebec;
            quebec = variable36.filter;
            equals = function(argFoo) {
                michal = null;
                entity = argFoo;
                entity = michal != entity;
                return entity;
            };
            equals = quebec.bind(variable36)(equals);
            target['colors'] = equals;
            equals = {'x': 0, 'y': 0};
            target['start'] = equals;
            equals = {'x': 1, 'y': 0};
            target['end'] = equals;
            equals = status.colorBlock;
            target['style'] = equals;
            sierra = whisks.bind(tangon)(limora, target);
 1054:
            target = new Array(2);
            target[0] = sierra;
            whisks = _closure1_slot9;
            limora = _closure1_slot0;
            equals = _closure1_slot2;
            sierra = 21;
            sierra = equals[sierra];
            sierra = limora.bind(tangon)(sierra);
            limora = sierra.Text;
            sierra = {};
            equals = 'text-sm/medium';
            sierra['variant'] = equals;
            variable36 = _closure1_slot0;
            variable39 = _closure1_slot2;
            if(vacuum) { _fun00002_ip = 1137; continue _fun00001 }
 1112:
            equals = 23;
            equals = variable39[equals];
            quebec = variable36.bind(tangon)(equals);
            equals = quebec.int2hex;
            equals = equals.bind(quebec)(variable37);
            _fun00002_ip = 1185; continue _fun00001;
 1137:
            quebec = variable39[echoed];
            quebec = variable36.bind(tangon)(quebec);
            variable37 = quebec.intl;
            variable36 = variable37.string;
            variable38 = _closure1_slot1;
            quebec = 22;
            quebec = variable39[quebec];
            quebec = variable38.bind(tangon)(quebec);
            quebec = quebec.vQz+6e;
            equals = variable36.bind(variable37)(quebec);
 1185:
            sierra['children'] = equals;
            sierra = whisks.bind(tangon)(limora, sierra);
            target[1] = sierra;
            cntext['children'] = target;
            cntext = zuuluu.bind(tangon)(config, cntext);
            record[1] = cntext;
            sequen['children'] = record;
            sequen = zuuluu.bind(tangon)(config, sequen);
            option['label'] = sequen;
            sequen = sizing;
            if(sizing) { _fun00002_ip = 1236; continue _fun00001 }
 1233:
            sequen = vacuum;
 1236:
            option['disabled'] = sequen;
            option['onPress'] = update;
            sequen = _closure1_slot0;
            update = _closure1_slot2;
            update = update[result];
            update = sequen.bind(tangon)(update);
            update = update.FormRow;
            update = update.Arrow;
            option['trailing'] = update;
            update = undefined;
            if(!vacuum) { _fun00002_ip = 1335; continue _fun00001 }
 1283:
            record = _closure1_slot0;
            vacuum = _closure1_slot2;
            sequen = vacuum[echoed];
            sequen = record.bind(tangon)(sequen);
            config = sequen.intl;
            sequen = config.string;
            vacuum = vacuum[echoed];
            vacuum = record.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.ZTpgyM;
            update = sequen.bind(config)(vacuum);
 1335:
            option['subLabel'] = update;
            yankee = romeon.bind(tangon)(yankee, option);
            option = new Array(2);
            option[0] = yankee;
            verify = null;
            if(!offset) { _fun00002_ip = 1619; continue _fun00001 }
 1362:
            romeon = _closure1_slot10;
            yankee = _closure1_slot4;
            offset = {};
            config = _closure1_slot9;
            target = _closure1_slot0;
            record = _closure1_slot2;
            update = record[result];
            update = target.bind(tangon)(update);
            vacuum = update.FormDivider;
            update = {};
            vacuum = config.bind(tangon)(vacuum, update);
            update = new Array(2);
            update[0] = vacuum;
            vacuum = record[result];
            vacuum = target.bind(tangon)(vacuum);
            sequen = vacuum.FormRow;
            vacuum = {};
            vacuum['disabled'] = sizing;
            cntext = record[result];
            cntext = target.bind(tangon)(cntext);
            sierra = cntext.FormLabel;
            cntext = {};
            limora = status.iconFormLabel;
            cntext['style'] = limora;
            limora = record[echoed];
            limora = target.bind(tangon)(limora);
            equals = limora.intl;
            whisks = equals.string;
            limora = record[echoed];
            limora = target.bind(tangon)(limora);
            limora = limora.t;
            limora = limora.B9grJy;
            limora = whisks.bind(equals)(limora);
            cntext['text'] = limora;
            cntext = config.bind(tangon)(sierra, cntext);
            vacuum['label'] = cntext;
            cntext = {};
            status = status.roleIcon;
            cntext['style'] = status;
            cntext['children'] = papara;
            cntext = config.bind(tangon)(yankee, cntext);
            vacuum['trailing'] = cntext;
            cntext = record[echoed];
            cntext = target.bind(tangon)(cntext);
            papara = cntext.intl;
            cntext = papara.string;
            record = record[echoed];
            record = target.bind(tangon)(record);
            record = record.t;
            record = record.ZTpgyM;
            record = cntext.bind(papara)(record);
            vacuum['subLabel'] = record;
            vacuum = config.bind(tangon)(sequen, vacuum);
            update[1] = vacuum;
            offset['children'] = update;
            verify = romeon.bind(tangon)(yankee, offset);
 1619:
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            option = _closure1_slot10;
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            oscard = verify[result];
            oscard = offset.bind(tangon)(oscard);
            golfie = oscard.FormSection;
            oscard = {};
            update = _closure1_slot9;
            verify = verify[result];
            verify = offset.bind(tangon)(verify);
            romeon = verify.FormSwitchRow;
            verify = {};
            offset = sizing;
            if(sizing) { _fun00002_ip = 1696; continue _fun00001 }
 1693:
            offset = output;
 1696:
            verify['disabled'] = offset;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            vacuum = offset[echoed];
            vacuum = yankee.bind(tangon)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = offset[echoed];
            vacuum = yankee.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.iVW5w8;
            vacuum = sequen.bind(config)(vacuum);
            verify['label'] = vacuum;
            verify['value'] = ctrled;
            verify['onValueChange'] = source;
            source = offset[echoed];
            source = yankee.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = offset[echoed];
            source = yankee.bind(tangon)(source);
            source = source.t;
            source = source.vceJPj;
            source = ctrled.bind(vacuum)(source);
            verify['subLabel'] = source;
            romeon = update.bind(tangon)(romeon, verify);
            verify = new Array(3);
            verify[0] = romeon;
            romeon = _closure1_slot9;
            update = offset[result];
            update = yankee.bind(tangon)(update);
            source = update.FormDivider;
            update = {};
            update = romeon.bind(tangon)(source, update);
            verify[1] = update;
            offset = offset[result];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.FormSwitchRow;
            offset = {};
            if(sizing) { _fun00002_ip = 1886; continue _fun00001 }
 1883:
            sizing = output;
 1886:
            offset['disabled'] = sizing;
            sizing = _closure1_slot0;
            kiloes = _closure1_slot2;
            output = kiloes[echoed];
            output = sizing.bind(tangon)(output);
            result = output.intl;
            output = result.format;
            kiloes = kiloes[echoed];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            sizing = kiloes.DTXoJS;
            kiloes = {};
            kiloes = output.bind(result)(sizing, kiloes);
            offset['label'] = kiloes;
            offset['value'] = backup;
            offset['onValueChange'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[3] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();