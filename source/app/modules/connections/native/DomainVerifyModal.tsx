// app/modules/connections/native/DomainVerifyModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: DomainScreen
        mike = argFoo;
        mike = mike.onClose;
        var _closure2_slot0 = mike;
        mike = _closure1_slot10;
        tango = undefined;
        echo = mike.bind(tango)();
        foxtrot = _closure1_slot0;
        backup = _closure1_slot2;
        mike = 7;
        mike = backup[mike];
        zulu = foxtrot.bind(tango)(mike);
        mike = zulu.useNavigation;
        mike = mike.bind(zulu)();
        var _closure2_slot1 = mike;
        zulu = _closure1_slot4;
        mike = zulu.useState;
        romeo = '';
        zulu = mike.bind(zulu)(romeo);
        mike = _closure1_slot3;
        options = 2;
        mike = mike.bind(tango)(zulu, options);
        report = 0;
        yankee = mike[report];
        var _closure2_slot2 = yankee;
        zulu = 1;
        output = mike[zulu];
        verify = _closure1_slot4;
        golf = verify.useState;
        mike = null;
        golf = golf.bind(verify)(mike);
        mike = _closure1_slot3;
        mike = mike.bind(tango)(golf, options);
        result = mike[report];
        mike = mike[zulu];
        var _closure2_slot3 = mike;
        verify = _closure1_slot4;
        golf = verify.useState;
        mike = false;
        golf = golf.bind(verify)(mike);
        mike = _closure1_slot3;
        mike = mike.bind(tango)(golf, options);
        kilo = mike[report];
        mike = mike[zulu];
        var _closure2_slot4 = mike;
        verify = function() { // Original name: verify
            tango = _closure2_slot4;
            entity = undefined;
            zulu = true;
            zulu = tango.bind(entity)(zulu);
            tango = _closure2_slot3;
            zulu = null;
            zulu = tango.bind(entity)(zulu);
            tango = _closure1_slot0;
            report = _closure1_slot2;
            zulu = 8;
            zulu = report[zulu];
            zulu = tango.bind(entity)(zulu);
            report = zulu.HTTP;
            tango = report.post;
            zulu = {};
            verify = _closure1_slot6;
            options = verify.CONNECTION;
            golf = _closure1_slot7;
            golf = golf.DOMAIN;
            oscar = _closure2_slot2;
            oscar = options.bind(verify)(golf, oscar);
            zulu['url'] = oscar;
            oscar = {};
            zulu['body'] = oscar;
            oscar = false;
            zulu['rejectWithError'] = oscar;
            report = tango.bind(report)(zulu);
            tango = report.then;
            zulu = function() {
                mike = _closure2_slot0;
                entity = undefined;
                mike = mike.bind(entity)();
                return entity;
            };
            report = tango.bind(report)(zulu);
            tango = report.catch;
            zulu = function(argFoo) {
                _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                    oscar = argFoo;
                    entity = oscar.body;
                    tango = null;
                    if(!(tango != entity)) { _fun00002_ip = 26; continue _fun00001 }
 14:
                    entity = entity.proof;
                    if(entity) { _fun00002_ip = 154; continue _fun00001 }
 26:
                    zulu = _closure2_slot3;
                    report = oscar.body;
                    golf = tango == report;
                    mike = undefined;
                    entity = undefined;
                    if(golf) { _fun00002_ip = 114; continue _fun00001 }
 49:
                    report = report.errors;
                    golf = tango == report;
                    entity = undefined;
                    if(golf) { _fun00002_ip = 114; continue _fun00001 }
 64:
                    report = report.domain;
                    golf = tango == report;
                    entity = undefined;
                    if(golf) { _fun00002_ip = 114; continue _fun00001 }
 79:
                    golf = report._errors;
                    report = tango == golf;
                    entity = undefined;
                    if(report) { _fun00002_ip = 114; continue _fun00001 }
 94:
                    report = 0;
                    report = golf[report];
                    golf = tango == report;
                    entity = undefined;
                    if(golf) { _fun00002_ip = 114; continue _fun00001 }
 109:
                    entity = report.message;
 114:
                    if(entity) { _fun00002_ip = 139; continue _fun00001 }
 117:
                    report = oscar.body;
                    golf = tango == report;
                    tango = undefined;
                    if(golf) { _fun00002_ip = 136; continue _fun00001 }
 131:
                    tango = report.message;
 136:
                    entity = tango;
 139:
                    if(entity) { _fun00002_ip = 147; continue _fun00001 }
 142:
                    entity = oscar.message;
 147:
                    entity = zulu.bind(mike)(entity);
                    _fun00002_ip = 212; continue _fun00001;
 154:
                    tango = _closure2_slot1;
                    zulu = tango.push;
                    entity = _closure1_slot11;
                    mike = entity.PROOF_DNS;
                    entity = {};
                    oscar = oscar.body;
                    oscar = oscar.proof;
                    entity['proof'] = oscar;
                    report = _closure2_slot2;
                    entity['domain'] = report;
                    entity = zulu.bind(tango)(mike, entity);
 212:
                    entity = undefined;
                    return entity;
                }
            };
            tango = tango.bind(report)(zulu);
            zulu = tango.finally;
            mike = function() {
                zulu = _closure2_slot4;
                entity = undefined;
                mike = false;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        zulu = _closure1_slot9;
        entity = 9;
        entity = backup[entity];
        entity = foxtrot.bind(tango)(entity);
        mike = entity.SafeAreaPaddingView;
        entity = {};
        update = true;
        entity['bottom'] = update;
        report = echo.container;
        entity['style'] = report;
        options = _closure1_slot8;
        report = 10;
        report = backup[report];
        report = foxtrot.bind(tango)(report);
        golf = report.Text;
        report = {'variant': 'text-md/normal', 'color': 'header-secondary'};
        offset = echo.description;
        report['style'] = offset;
        offset = 11;
        sizing = backup[offset];
        sizing = foxtrot.bind(tango)(sizing);
        control = sizing.intl;
        source = control.string;
        sizing = backup[offset];
        sizing = foxtrot.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.NxPUqa;
        sizing = source.bind(control)(sizing);
        report['children'] = sizing;
        golf = options.bind(tango)(golf, report);
        report = new Array(3);
        report[0] = golf;
        sizing = _closure1_slot8;
        options = _closure1_slot1;
        golf = 12;
        golf = backup[golf];
        options = options.bind(tango)(golf);
        golf = {};
        golf['autoFocus'] = update;
        echo = echo.input;
        golf['style'] = echo;
        echo = backup[offset];
        echo = foxtrot.bind(tango)(echo);
        source = echo.intl;
        update = source.string;
        echo = backup[offset];
        echo = foxtrot.bind(tango)(echo);
        echo = echo.t;
        echo = echo.4jIAa2;
        echo = update.bind(source)(echo);
        golf['label'] = echo;
        echo = 13;
        echo = backup[echo];
        echo = foxtrot.bind(tango)(echo);
        echo = echo.EXAMPLE_DOMAIN;
        golf['placeholder'] = echo;
        golf['error'] = result;
        result = 'done';
        golf['returnKeyType'] = result;
        golf['onChangeText'] = output;
        golf['onSubmitEditing'] = verify;
        golf = sizing.bind(tango)(options, golf);
        report[1] = golf;
        options = _closure1_slot8;
        oscar = 14;
        oscar = backup[oscar];
        oscar = foxtrot.bind(tango)(oscar);
        golf = oscar.Button;
        oscar = {};
        oscar['loading'] = kilo;
        yankee = romeo === yankee;
        oscar['disabled'] = yankee;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        romeo = yankee.intl;
        yankee = romeo.string;
        offset = backup[offset];
        offset = foxtrot.bind(tango)(offset);
        offset = offset.t;
        offset = offset.PDTjLC;
        offset = yankee.bind(romeo)(offset);
        oscar['text'] = offset;
        oscar['onPress'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot12 = entity;
    entity = function(argFoo) { // Original name: DNSProofScreen
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            mike = entity.onClose;
            var _closure2_slot0 = mike;
            context = entity.domain;
            var _closure2_slot1 = context;
            source = entity.proof;
            var _closure2_slot2 = source;
            entity = _closure1_slot10;
            tango = undefined;
            yankee = entity.bind(tango)();
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 7;
            entity = sizing[entity];
            mike = result.bind(tango)(entity);
            entity = mike.useNavigation;
            entity = entity.bind(mike)();
            var _closure2_slot3 = entity;
            mike = _closure1_slot4;
            entity = mike.useState;
            oscar = null;
            mike = entity.bind(mike)(oscar);
            entity = _closure1_slot3;
            golf = 2;
            entity = entity.bind(tango)(mike, golf);
            zulu = 0;
            foxtrot = entity[zulu];
            mike = 1;
            entity = entity[mike];
            var _closure2_slot4 = entity;
            options = _closure1_slot4;
            report = options.useState;
            entity = false;
            report = report.bind(options)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tango)(report, golf);
            echo = entity[zulu];
            entity = entity[mike];
            var _closure2_slot5 = entity;
            zulu = _closure1_slot9;
            entity = 9;
            entity = sizing[entity];
            entity = result.bind(tango)(entity);
            mike = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = yankee.container;
            entity['style'] = report;
            options = _closure1_slot8;
            backup = 10;
            report = sizing[backup];
            report = result.bind(tango)(report);
            golf = report.Text;
            report = {};
            sequence = 'text-md/normal';
            report['variant'] = sequence;
            output = 11;
            verify = sizing[output];
            verify = result.bind(tango)(verify);
            update = verify.intl;
            kilo = update.string;
            verify = sizing[output];
            verify = result.bind(tango)(verify);
            verify = verify.t;
            verify = verify.cSURbm;
            verify = kilo.bind(update)(verify);
            report['children'] = verify;
            golf = options.bind(tango)(golf, report);
            report = new Array(5);
            report[0] = golf;
            verify = _closure1_slot9;
            options = _closure1_slot5;
            golf = {};
            kilo = yankee.dns;
            golf['style'] = kilo;
            control = _closure1_slot8;
            kilo = sizing[backup];
            kilo = result.bind(tango)(kilo);
            update = kilo.Text;
            kilo = {};
            kilo['variant'] = sequence;
            vacuum = sizing[output];
            vacuum = result.bind(tango)(vacuum);
            record = vacuum.intl;
            config = record.string;
            vacuum = sizing[output];
            vacuum = result.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.GL3q7u;
            vacuum = config.bind(record)(vacuum);
            kilo['children'] = vacuum;
            update = control.bind(tango)(update, kilo);
            kilo = new Array(6);
            kilo[0] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tango)(update);
            control = update.Text;
            update = {'variant': 'text-md/normal', 'selectable': true};
            config = yankee.code;
            update['style'] = config;
            config = 13;
            config = sizing[config];
            record = result.bind(tango)(config);
            config = record.getDnsName;
            config = config.bind(record)(context);
            update['children'] = config;
            update = vacuum.bind(tango)(control, update);
            kilo[1] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tango)(update);
            control = update.Text;
            update = {};
            update['variant'] = sequence;
            config = sizing[output];
            config = result.bind(tango)(config);
            context = config.intl;
            record = context.string;
            config = sizing[output];
            config = result.bind(tango)(config);
            config = config.t;
            config = config.Ccmixs;
            config = record.bind(context)(config);
            update['children'] = config;
            update = vacuum.bind(tango)(control, update);
            kilo[2] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tango)(update);
            control = update.Text;
            update = {'variant': 'text-md/normal', 'selectable': true, 'style': null, 'children': 'TXT'};
            config = yankee.code;
            update['style'] = config;
            update = vacuum.bind(tango)(control, update);
            kilo[3] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tango)(update);
            control = update.Text;
            update = {};
            update['variant'] = sequence;
            sequence = sizing[output];
            sequence = result.bind(tango)(sequence);
            record = sequence.intl;
            config = record.string;
            sequence = sizing[output];
            sequence = result.bind(tango)(sequence);
            sequence = sequence.t;
            sequence = sequence.PVLriY;
            sequence = config.bind(record)(sequence);
            update['children'] = sequence;
            update = vacuum.bind(tango)(control, update);
            kilo[4] = update;
            update = _closure1_slot8;
            sizing = sizing[backup];
            sizing = result.bind(tango)(sizing);
            result = sizing.Text;
            sizing = {'variant': 'text-md/normal', 'selectable': true};
            control = yankee.code;
            sizing['style'] = control;
            sizing['children'] = source;
            sizing = update.bind(tango)(result, sizing);
            kilo[5] = sizing;
            golf['children'] = kilo;
            golf = verify.bind(tango)(options, golf);
            report[1] = golf;
            oscar = oscar != foxtrot;
            if(!oscar) { _fun00004_ip = 839; continue _fun00003 }
 780:
            verify = _closure1_slot8;
            options = _closure1_slot0;
            golf = _closure1_slot2;
            golf = golf[backup];
            golf = options.bind(tango)(golf);
            options = golf.Text;
            golf = {'variant': 'text-md/normal', 'color': 'text-danger'};
            backup = yankee.error;
            golf['style'] = backup;
            golf['children'] = foxtrot;
            oscar = verify.bind(tango)(options, golf);
 839:
            report[2] = oscar;
            options = _closure1_slot8;
            golf = _closure1_slot5;
            oscar = {};
            verify = yankee.button;
            oscar['style'] = verify;
            result = _closure1_slot8;
            sizing = _closure1_slot0;
            foxtrot = _closure1_slot2;
            verify = 14;
            backup = foxtrot[verify];
            backup = sizing.bind(tango)(backup);
            kilo = backup.Button;
            backup = {};
            backup['loading'] = echo;
            echo = foxtrot[output];
            echo = sizing.bind(tango)(echo);
            source = echo.intl;
            update = source.string;
            echo = foxtrot[output];
            echo = sizing.bind(tango)(echo);
            echo = echo.t;
            echo = echo.13ofGh;
            echo = update.bind(source)(echo);
            backup['text'] = echo;
            echo = function() { // Original name: onPress
                tango = _closure2_slot5;
                entity = undefined;
                zulu = true;
                zulu = tango.bind(entity)(zulu);
                tango = _closure2_slot4;
                zulu = null;
                zulu = tango.bind(entity)(zulu);
                tango = _closure1_slot0;
                report = _closure1_slot2;
                zulu = 8;
                zulu = report[zulu];
                zulu = tango.bind(entity)(zulu);
                report = zulu.HTTP;
                tango = report.post;
                zulu = {};
                verify = _closure1_slot6;
                options = verify.CONNECTION;
                golf = _closure1_slot7;
                golf = golf.DOMAIN;
                oscar = _closure2_slot1;
                oscar = options.bind(verify)(golf, oscar);
                zulu['url'] = oscar;
                oscar = {};
                zulu['body'] = oscar;
                oscar = false;
                zulu['rejectWithError'] = oscar;
                report = tango.bind(report)(zulu);
                tango = report.then;
                zulu = function() {
                    mike = _closure2_slot0;
                    entity = undefined;
                    mike = mike.bind(entity)();
                    return entity;
                };
                report = tango.bind(report)(zulu);
                tango = report.catch;
                zulu = function(argFoo) {
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        tango = argFoo;
                        zulu = _closure2_slot4;
                        oscar = tango.body;
                        report = null;
                        golf = report == oscar;
                        entity = undefined;
                        mike = undefined;
                        if(golf) { _fun00006_ip = 93; continue _fun00005 }
 28:
                        oscar = oscar.errors;
                        golf = report == oscar;
                        mike = undefined;
                        if(golf) { _fun00006_ip = 93; continue _fun00005 }
 43:
                        oscar = oscar.domain;
                        golf = report == oscar;
                        mike = undefined;
                        if(golf) { _fun00006_ip = 93; continue _fun00005 }
 58:
                        golf = oscar._errors;
                        oscar = report == golf;
                        mike = undefined;
                        if(oscar) { _fun00006_ip = 93; continue _fun00005 }
 73:
                        oscar = 0;
                        oscar = golf[oscar];
                        golf = report == oscar;
                        mike = undefined;
                        if(golf) { _fun00006_ip = 93; continue _fun00005 }
 88:
                        mike = oscar.message;
 93:
                        if(mike) { _fun00006_ip = 118; continue _fun00005 }
 96:
                        oscar = tango.body;
                        golf = report == oscar;
                        report = undefined;
                        if(golf) { _fun00006_ip = 115; continue _fun00005 }
 110:
                        report = oscar.message;
 115:
                        mike = report;
 118:
                        if(mike) { _fun00006_ip = 126; continue _fun00005 }
 121:
                        mike = tango.message;
 126:
                        mike = zulu.bind(entity)(mike);
                        return entity;
                    }
                };
                tango = tango.bind(report)(zulu);
                zulu = tango.finally;
                mike = function() {
                    zulu = _closure2_slot5;
                    entity = undefined;
                    mike = false;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                };
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            backup['onPress'] = echo;
            backup = result.bind(tango)(kilo, backup);
            oscar['children'] = backup;
            oscar = options.bind(tango)(golf, oscar);
            report[3] = oscar;
            options = _closure1_slot8;
            golf = _closure1_slot5;
            oscar = {};
            yankee = yankee.button;
            oscar['style'] = yankee;
            yankee = _closure1_slot8;
            verify = foxtrot[verify];
            verify = sizing.bind(tango)(verify);
            offset = verify.Button;
            verify = {};
            backup = 'secondary';
            verify['variant'] = backup;
            backup = foxtrot[output];
            backup = sizing.bind(tango)(backup);
            kilo = backup.intl;
            backup = kilo.string;
            foxtrot = foxtrot[output];
            foxtrot = sizing.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.CkfdNz;
            foxtrot = backup.bind(kilo)(foxtrot);
            verify['text'] = foxtrot;
            romeo = function() { // Original name: onPress
                tango = _closure2_slot3;
                zulu = tango.push;
                entity = _closure1_slot11;
                mike = entity.PROOF_HTTP;
                entity = {};
                oscar = _closure2_slot2;
                entity['proof'] = oscar;
                report = _closure2_slot1;
                entity['domain'] = report;
                entity = zulu.bind(tango)(mike, entity);
                entity = undefined;
                return entity;
            };
            verify['onPress'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[4] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: HTTPProofScreen
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            mike = entity.onClose;
            var _closure2_slot0 = mike;
            context = entity.domain;
            var _closure2_slot1 = context;
            source = entity.proof;
            entity = _closure1_slot10;
            tango = undefined;
            yankee = entity.bind(tango)();
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 7;
            entity = sizing[entity];
            mike = result.bind(tango)(entity);
            entity = mike.useNavigation;
            entity = entity.bind(mike)();
            var _closure2_slot2 = entity;
            mike = _closure1_slot4;
            entity = mike.useState;
            oscar = null;
            mike = entity.bind(mike)(oscar);
            entity = _closure1_slot3;
            golf = 2;
            entity = entity.bind(tango)(mike, golf);
            zulu = 0;
            foxtrot = entity[zulu];
            mike = 1;
            entity = entity[mike];
            var _closure2_slot3 = entity;
            options = _closure1_slot4;
            report = options.useState;
            entity = false;
            report = report.bind(options)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tango)(report, golf);
            echo = entity[zulu];
            entity = entity[mike];
            var _closure2_slot4 = entity;
            zulu = _closure1_slot9;
            entity = 9;
            entity = sizing[entity];
            entity = result.bind(tango)(entity);
            mike = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = yankee.container;
            entity['style'] = report;
            options = _closure1_slot8;
            backup = 10;
            report = sizing[backup];
            report = result.bind(tango)(report);
            golf = report.Text;
            report = {};
            sequence = 'text-md/normal';
            report['variant'] = sequence;
            output = 11;
            verify = sizing[output];
            verify = result.bind(tango)(verify);
            update = verify.intl;
            kilo = update.string;
            verify = sizing[output];
            verify = result.bind(tango)(verify);
            verify = verify.t;
            verify = verify.p4ql7+;
            verify = kilo.bind(update)(verify);
            report['children'] = verify;
            golf = options.bind(tango)(golf, report);
            report = new Array(5);
            report[0] = golf;
            verify = _closure1_slot9;
            options = _closure1_slot5;
            golf = {};
            kilo = yankee.dns;
            golf['style'] = kilo;
            control = _closure1_slot8;
            kilo = sizing[backup];
            kilo = result.bind(tango)(kilo);
            update = kilo.Text;
            kilo = {};
            kilo['variant'] = sequence;
            vacuum = sizing[output];
            vacuum = result.bind(tango)(vacuum);
            record = vacuum.intl;
            config = record.string;
            vacuum = sizing[output];
            vacuum = result.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.GL3q7u;
            vacuum = config.bind(record)(vacuum);
            kilo['children'] = vacuum;
            update = control.bind(tango)(update, kilo);
            kilo = new Array(4);
            kilo[0] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tango)(update);
            control = update.Text;
            update = {'variant': 'text-md/normal', 'selectable': true};
            config = yankee.code;
            update['style'] = config;
            config = 13;
            config = sizing[config];
            record = result.bind(tango)(config);
            config = record.getHttpName;
            config = config.bind(record)(context);
            update['children'] = config;
            update = vacuum.bind(tango)(control, update);
            kilo[1] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tango)(update);
            control = update.Text;
            update = {};
            update['variant'] = sequence;
            sequence = sizing[output];
            sequence = result.bind(tango)(sequence);
            record = sequence.intl;
            config = record.string;
            sequence = sizing[output];
            sequence = result.bind(tango)(sequence);
            sequence = sequence.t;
            sequence = sequence.PVLriY;
            sequence = config.bind(record)(sequence);
            update['children'] = sequence;
            update = vacuum.bind(tango)(control, update);
            kilo[2] = update;
            update = _closure1_slot8;
            sizing = sizing[backup];
            sizing = result.bind(tango)(sizing);
            result = sizing.Text;
            sizing = {'variant': 'text-md/normal', 'selectable': true};
            control = yankee.code;
            sizing['style'] = control;
            sizing['children'] = source;
            sizing = update.bind(tango)(result, sizing);
            kilo[3] = sizing;
            golf['children'] = kilo;
            golf = verify.bind(tango)(options, golf);
            report[1] = golf;
            oscar = oscar != foxtrot;
            if(!oscar) { _fun00008_ip = 700; continue _fun00007 }
 641:
            verify = _closure1_slot8;
            options = _closure1_slot0;
            golf = _closure1_slot2;
            golf = golf[backup];
            golf = options.bind(tango)(golf);
            options = golf.Text;
            golf = {'variant': 'text-md/normal', 'color': 'text-danger'};
            backup = yankee.error;
            golf['style'] = backup;
            golf['children'] = foxtrot;
            oscar = verify.bind(tango)(options, golf);
 700:
            report[2] = oscar;
            options = _closure1_slot8;
            golf = _closure1_slot5;
            oscar = {};
            verify = yankee.button;
            oscar['style'] = verify;
            result = _closure1_slot8;
            sizing = _closure1_slot0;
            foxtrot = _closure1_slot2;
            verify = 14;
            backup = foxtrot[verify];
            backup = sizing.bind(tango)(backup);
            kilo = backup.Button;
            backup = {};
            backup['loading'] = echo;
            echo = foxtrot[output];
            echo = sizing.bind(tango)(echo);
            source = echo.intl;
            update = source.string;
            echo = foxtrot[output];
            echo = sizing.bind(tango)(echo);
            echo = echo.t;
            echo = echo.13ofGh;
            echo = update.bind(source)(echo);
            backup['text'] = echo;
            echo = function() { // Original name: onPress
                tango = _closure2_slot4;
                entity = undefined;
                zulu = true;
                zulu = tango.bind(entity)(zulu);
                tango = _closure2_slot3;
                zulu = null;
                zulu = tango.bind(entity)(zulu);
                tango = _closure1_slot0;
                report = _closure1_slot2;
                zulu = 8;
                zulu = report[zulu];
                zulu = tango.bind(entity)(zulu);
                report = zulu.HTTP;
                tango = report.post;
                zulu = {};
                verify = _closure1_slot6;
                options = verify.CONNECTION;
                golf = _closure1_slot7;
                golf = golf.DOMAIN;
                oscar = _closure2_slot1;
                oscar = options.bind(verify)(golf, oscar);
                zulu['url'] = oscar;
                oscar = {};
                zulu['body'] = oscar;
                oscar = false;
                zulu['rejectWithError'] = oscar;
                report = tango.bind(report)(zulu);
                tango = report.then;
                zulu = function() {
                    mike = _closure2_slot0;
                    entity = undefined;
                    mike = mike.bind(entity)();
                    return entity;
                };
                report = tango.bind(report)(zulu);
                tango = report.catch;
                zulu = function(argFoo) {
                    _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                        tango = argFoo;
                        zulu = _closure2_slot3;
                        oscar = tango.body;
                        report = null;
                        golf = report == oscar;
                        entity = undefined;
                        mike = undefined;
                        if(golf) { _fun00010_ip = 93; continue _fun00009 }
 28:
                        oscar = oscar.errors;
                        golf = report == oscar;
                        mike = undefined;
                        if(golf) { _fun00010_ip = 93; continue _fun00009 }
 43:
                        oscar = oscar.domain;
                        golf = report == oscar;
                        mike = undefined;
                        if(golf) { _fun00010_ip = 93; continue _fun00009 }
 58:
                        golf = oscar._errors;
                        oscar = report == golf;
                        mike = undefined;
                        if(oscar) { _fun00010_ip = 93; continue _fun00009 }
 73:
                        oscar = 0;
                        oscar = golf[oscar];
                        golf = report == oscar;
                        mike = undefined;
                        if(golf) { _fun00010_ip = 93; continue _fun00009 }
 88:
                        mike = oscar.message;
 93:
                        if(mike) { _fun00010_ip = 118; continue _fun00009 }
 96:
                        oscar = tango.body;
                        golf = report == oscar;
                        report = undefined;
                        if(golf) { _fun00010_ip = 115; continue _fun00009 }
 110:
                        report = oscar.message;
 115:
                        mike = report;
 118:
                        if(mike) { _fun00010_ip = 126; continue _fun00009 }
 121:
                        mike = tango.message;
 126:
                        mike = zulu.bind(entity)(mike);
                        return entity;
                    }
                };
                tango = tango.bind(report)(zulu);
                zulu = tango.finally;
                mike = function() {
                    zulu = _closure2_slot4;
                    entity = undefined;
                    mike = false;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                };
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            backup['onPress'] = echo;
            backup = result.bind(tango)(kilo, backup);
            oscar['children'] = backup;
            oscar = options.bind(tango)(golf, oscar);
            report[3] = oscar;
            options = _closure1_slot8;
            golf = _closure1_slot5;
            oscar = {};
            yankee = yankee.button;
            oscar['style'] = yankee;
            yankee = _closure1_slot8;
            verify = foxtrot[verify];
            verify = sizing.bind(tango)(verify);
            offset = verify.Button;
            verify = {};
            backup = 'secondary';
            verify['variant'] = backup;
            backup = foxtrot[output];
            backup = sizing.bind(tango)(backup);
            kilo = backup.intl;
            backup = kilo.string;
            foxtrot = foxtrot[output];
            foxtrot = sizing.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.RhJMVV;
            foxtrot = backup.bind(kilo)(foxtrot);
            verify['text'] = foxtrot;
            romeo = function() { // Original name: onPress
                mike = _closure2_slot2;
                entity = mike.pop;
                entity = entity.bind(mike)();
                entity = undefined;
                return entity;
            };
            verify['onPress'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[4] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Endpoints;
    var _closure1_slot6 = golf;
    tango = tango.PlatformTypes;
    var _closure1_slot7 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tango['container'] = verify;
    verify = {};
    yankee = 'center';
    verify['textAlign'] = yankee;
    tango['description'] = verify;
    verify = {'paddingHorizontal': 0, 'paddingVertical': 0, 'marginVertical': 16};
    tango['input'] = verify;
    verify = {};
    yankee = 6;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.xs;
    verify['borderRadius'] = yankee;
    yankee = 8;
    verify['padding'] = yankee;
    verify['marginTop'] = offset;
    tango['dns'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tango['error'] = verify;
    verify = {'fontFamily': 'monospace', 'marginBottom': 4};
    tango['code'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tango['button'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot10 = tango;
    tango = {};
    golf = 'DOMAIN';
    tango['DOMAIN'] = golf;
    golf = 'PROOF_DNS';
    tango['PROOF_DNS'] = golf;
    golf = 'PROOF_HTTP';
    tango['PROOF_HTTP'] = golf;
    var _closure1_slot11 = tango;
    tango = 18;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/connections/native/DomainVerifyModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: DomainVerifyModal
        _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
            mike = argFoo;
            entity = null;
            if(!(mike != entity)) { _fun00012_ip = 456; continue _fun00011 }
 14:
            foxtrot = function() { // Original name: onClose
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 15;
                mike = mike[entity];
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                entity = mike.pop;
                entity = entity.bind(mike)();
                return entity;
            };
            var _closure2_slot0 = foxtrot;
            options = {};
            entity = _closure1_slot11;
            zulu = entity.DOMAIN;
            entity = {};
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            oscar = 11;
            yankee = offset[oscar];
            report = undefined;
            yankee = verify.bind(report)(yankee);
            backup = yankee.intl;
            romeo = backup.string;
            yankee = offset[oscar];
            yankee = verify.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.7lo8+f;
            yankee = romeo.bind(backup)(yankee);
            entity['headerTitle'] = yankee;
            yankee = 16;
            romeo = offset[yankee];
            backup = verify.bind(report)(romeo);
            romeo = backup.getHeaderBackButton;
            romeo = romeo.bind(backup)(foxtrot);
            entity['headerLeft'] = romeo;
            romeo = function() { // Original name: render
                tango = _closure1_slot8;
                zulu = _closure1_slot12;
                mike = {};
                entity = _closure2_slot0;
                mike['onClose'] = entity;
                entity = undefined;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            entity['render'] = romeo;
            options[zulu] = entity;
            entity = _closure1_slot11;
            zulu = entity.PROOF_DNS;
            entity = {};
            romeo = offset[oscar];
            romeo = verify.bind(report)(romeo);
            kilo = romeo.intl;
            backup = kilo.string;
            romeo = offset[oscar];
            romeo = verify.bind(report)(romeo);
            romeo = romeo.t;
            romeo = romeo.7lo8+f;
            romeo = backup.bind(kilo)(romeo);
            entity['headerTitle'] = romeo;
            romeo = offset[yankee];
            backup = verify.bind(report)(romeo);
            romeo = backup.getHeaderBackButton;
            romeo = romeo.bind(backup)(foxtrot);
            entity['headerLeft'] = romeo;
            romeo = function(argFoo) { // Original name: render
                entity = argFoo;
                report = entity.domain;
                entity = entity.proof;
                tango = _closure1_slot8;
                zulu = _closure1_slot13;
                mike = {};
                mike['domain'] = report;
                mike['proof'] = entity;
                entity = _closure2_slot0;
                mike['onClose'] = entity;
                entity = undefined;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            entity['render'] = romeo;
            options[zulu] = entity;
            entity = _closure1_slot11;
            zulu = entity.PROOF_HTTP;
            entity = {};
            romeo = offset[oscar];
            romeo = verify.bind(report)(romeo);
            kilo = romeo.intl;
            backup = kilo.string;
            romeo = offset[oscar];
            romeo = verify.bind(report)(romeo);
            romeo = romeo.t;
            romeo = romeo.7lo8+f;
            romeo = backup.bind(kilo)(romeo);
            entity['headerTitle'] = romeo;
            yankee = offset[yankee];
            romeo = verify.bind(report)(yankee);
            yankee = romeo.getHeaderBackButton;
            yankee = yankee.bind(romeo)(foxtrot);
            entity['headerLeft'] = yankee;
            tango = function(argFoo) { // Original name: render
                entity = argFoo;
                report = entity.domain;
                entity = entity.proof;
                tango = _closure1_slot8;
                zulu = _closure1_slot14;
                mike = {};
                mike['domain'] = report;
                mike['proof'] = entity;
                entity = _closure2_slot0;
                mike['onClose'] = entity;
                entity = undefined;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            entity['render'] = tango;
            options[zulu] = entity;
            tango = _closure1_slot8;
            entity = 17;
            entity = offset[entity];
            entity = verify.bind(report)(entity);
            zulu = entity.Navigator;
            entity = {};
            entity['screens'] = options;
            golf = _closure1_slot11;
            golf = golf.DOMAIN;
            entity['initialRouteName'] = golf;
            golf = offset[oscar];
            golf = verify.bind(report)(golf);
            options = golf.intl;
            golf = options.string;
            oscar = offset[oscar];
            oscar = verify.bind(report)(oscar);
            oscar = oscar.t;
            oscar = oscar.13/7kZ;
            oscar = golf.bind(options)(oscar);
            entity['headerBackTitle'] = oscar;
            entity = tango.bind(report)(zulu, entity);
            return entity;
 456:
            sizing = "Cannot destructure 'undefined' or 'null'.";
            output = mike;
            entity = throwTypeError(output, sizing);
            entity = undefined;
            throw entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();