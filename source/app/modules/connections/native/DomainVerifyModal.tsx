// app/modules/connections/native/DomainVerifyModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: DomainScreen
        michal = argFoo;
        michal = michal.onClose;
        var _closure2_slot0 = michal;
        michal = _closure1_slot10;
        tangon = undefined;
        echoed = michal.bind(tangon)();
        foxtra = _closure1_slot0;
        backup = _closure1_slot2;
        michal = 7;
        michal = backup[michal];
        zuuluu = foxtra.bind(tangon)(michal);
        michal = zuuluu.useNavigation;
        michal = michal.bind(zuuluu)();
        var _closure2_slot1 = michal;
        zuuluu = _closure1_slot4;
        michal = zuuluu.useState;
        romeon = '';
        zuuluu = michal.bind(zuuluu)(romeon);
        michal = _closure1_slot3;
        option = 2;
        michal = michal.bind(tangon)(zuuluu, option);
        report = 0;
        yankee = michal[report];
        var _closure2_slot2 = yankee;
        zuuluu = 1;
        output = michal[zuuluu];
        verify = _closure1_slot4;
        golfie = verify.useState;
        michal = null;
        golfie = golfie.bind(verify)(michal);
        michal = _closure1_slot3;
        michal = michal.bind(tangon)(golfie, option);
        result = michal[report];
        michal = michal[zuuluu];
        var _closure2_slot3 = michal;
        verify = _closure1_slot4;
        golfie = verify.useState;
        michal = false;
        golfie = golfie.bind(verify)(michal);
        michal = _closure1_slot3;
        michal = michal.bind(tangon)(golfie, option);
        kiloes = michal[report];
        michal = michal[zuuluu];
        var _closure2_slot4 = michal;
        verify = function() { // Original name: verify
            tangon = _closure2_slot4;
            entity = undefined;
            zuuluu = true;
            zuuluu = tangon.bind(entity)(zuuluu);
            tangon = _closure2_slot3;
            zuuluu = null;
            zuuluu = tangon.bind(entity)(zuuluu);
            tangon = _closure1_slot0;
            report = _closure1_slot2;
            zuuluu = 8;
            zuuluu = report[zuuluu];
            zuuluu = tangon.bind(entity)(zuuluu);
            report = zuuluu.HTTP;
            tangon = report.post;
            zuuluu = {};
            verify = _closure1_slot6;
            option = verify.CONNECTION;
            golfie = _closure1_slot7;
            golfie = golfie.DOMAIN;
            oscard = _closure2_slot2;
            oscard = option.bind(verify)(golfie, oscard);
            zuuluu['url'] = oscard;
            oscard = {};
            zuuluu['body'] = oscard;
            oscard = false;
            zuuluu['rejectWithError'] = oscard;
            report = tangon.bind(report)(zuuluu);
            tangon = report.then;
            zuuluu = function() {
                michal = _closure2_slot0;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            report = tangon.bind(report)(zuuluu);
            tangon = report.catch;
            zuuluu = function(argFoo) {
                _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                    oscard = argFoo;
                    entity = oscard.body;
                    tangon = null;
                    if(!(tangon != entity)) { _fun00002_ip = 26; continue _fun00001 }
 14:
                    entity = entity.proof;
                    if(entity) { _fun00002_ip = 154; continue _fun00001 }
 26:
                    zuuluu = _closure2_slot3;
                    report = oscard.body;
                    golfie = tangon == report;
                    michal = undefined;
                    entity = undefined;
                    if(golfie) { _fun00002_ip = 114; continue _fun00001 }
 49:
                    report = report.errors;
                    golfie = tangon == report;
                    entity = undefined;
                    if(golfie) { _fun00002_ip = 114; continue _fun00001 }
 64:
                    report = report.domain;
                    golfie = tangon == report;
                    entity = undefined;
                    if(golfie) { _fun00002_ip = 114; continue _fun00001 }
 79:
                    golfie = report._errors;
                    report = tangon == golfie;
                    entity = undefined;
                    if(report) { _fun00002_ip = 114; continue _fun00001 }
 94:
                    report = 0;
                    report = golfie[report];
                    golfie = tangon == report;
                    entity = undefined;
                    if(golfie) { _fun00002_ip = 114; continue _fun00001 }
 109:
                    entity = report.message;
 114:
                    if(entity) { _fun00002_ip = 139; continue _fun00001 }
 117:
                    report = oscard.body;
                    golfie = tangon == report;
                    tangon = undefined;
                    if(golfie) { _fun00002_ip = 136; continue _fun00001 }
 131:
                    tangon = report.message;
 136:
                    entity = tangon;
 139:
                    if(entity) { _fun00002_ip = 147; continue _fun00001 }
 142:
                    entity = oscard.message;
 147:
                    entity = zuuluu.bind(michal)(entity);
                    _fun00002_ip = 212; continue _fun00001;
 154:
                    tangon = _closure2_slot1;
                    zuuluu = tangon.push;
                    entity = _closure1_slot11;
                    michal = entity.PROOF_DNS;
                    entity = {};
                    oscard = oscard.body;
                    oscard = oscard.proof;
                    entity['proof'] = oscard;
                    report = _closure2_slot2;
                    entity['domain'] = report;
                    entity = zuuluu.bind(tangon)(michal, entity);
 212:
                    entity = undefined;
                    return entity;
                }
            };
            tangon = tangon.bind(report)(zuuluu);
            zuuluu = tangon.finally;
            michal = function() {
                zuuluu = _closure2_slot4;
                entity = undefined;
                michal = false;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        zuuluu = _closure1_slot9;
        entity = 9;
        entity = backup[entity];
        entity = foxtra.bind(tangon)(entity);
        michal = entity.SafeAreaPaddingView;
        entity = {};
        update = true;
        entity['bottom'] = update;
        report = echoed.container;
        entity['style'] = report;
        option = _closure1_slot8;
        report = 10;
        report = backup[report];
        report = foxtra.bind(tangon)(report);
        golfie = report.Text;
        report = {'variant': 'text-md/normal', 'color': 'header-secondary'};
        offset = echoed.description;
        report['style'] = offset;
        offset = 11;
        sizing = backup[offset];
        sizing = foxtra.bind(tangon)(sizing);
        ctrled = sizing.intl;
        source = ctrled.string;
        sizing = backup[offset];
        sizing = foxtra.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.NxPUqa;
        sizing = source.bind(ctrled)(sizing);
        report['children'] = sizing;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        sizing = _closure1_slot8;
        option = _closure1_slot1;
        golfie = 12;
        golfie = backup[golfie];
        option = option.bind(tangon)(golfie);
        golfie = {};
        golfie['autoFocus'] = update;
        echoed = echoed.input;
        golfie['style'] = echoed;
        echoed = backup[offset];
        echoed = foxtra.bind(tangon)(echoed);
        source = echoed.intl;
        update = source.string;
        echoed = backup[offset];
        echoed = foxtra.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.4jIAa2;
        echoed = update.bind(source)(echoed);
        golfie['label'] = echoed;
        echoed = 13;
        echoed = backup[echoed];
        echoed = foxtra.bind(tangon)(echoed);
        echoed = echoed.EXAMPLE_DOMAIN;
        golfie['placeholder'] = echoed;
        golfie['error'] = result;
        result = 'done';
        golfie['returnKeyType'] = result;
        golfie['onChangeText'] = output;
        golfie['onSubmitEditing'] = verify;
        golfie = sizing.bind(tangon)(option, golfie);
        report[1] = golfie;
        option = _closure1_slot8;
        oscard = 14;
        oscard = backup[oscard];
        oscard = foxtra.bind(tangon)(oscard);
        golfie = oscard.Button;
        oscard = {};
        oscard['loading'] = kiloes;
        yankee = romeon === yankee;
        oscard['disabled'] = yankee;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = backup[offset];
        offset = foxtra.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.PDTjLC;
        offset = yankee.bind(romeon)(offset);
        oscard['text'] = offset;
        oscard['onPress'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot12 = entity;
    entity = function(argFoo) { // Original name: DNSProofScreen
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            michal = entity.onClose;
            var _closure2_slot0 = michal;
            cntext = entity.domain;
            var _closure2_slot1 = cntext;
            source = entity.proof;
            var _closure2_slot2 = source;
            entity = _closure1_slot10;
            tangon = undefined;
            yankee = entity.bind(tangon)();
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 7;
            entity = sizing[entity];
            michal = result.bind(tangon)(entity);
            entity = michal.useNavigation;
            entity = entity.bind(michal)();
            var _closure2_slot3 = entity;
            michal = _closure1_slot4;
            entity = michal.useState;
            oscard = null;
            michal = entity.bind(michal)(oscard);
            entity = _closure1_slot3;
            golfie = 2;
            entity = entity.bind(tangon)(michal, golfie);
            zuuluu = 0;
            foxtra = entity[zuuluu];
            michal = 1;
            entity = entity[michal];
            var _closure2_slot4 = entity;
            option = _closure1_slot4;
            report = option.useState;
            entity = false;
            report = report.bind(option)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, golfie);
            echoed = entity[zuuluu];
            entity = entity[michal];
            var _closure2_slot5 = entity;
            zuuluu = _closure1_slot9;
            entity = 9;
            entity = sizing[entity];
            entity = result.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = yankee.container;
            entity['style'] = report;
            option = _closure1_slot8;
            backup = 10;
            report = sizing[backup];
            report = result.bind(tangon)(report);
            golfie = report.Text;
            report = {};
            sequen = 'text-md/normal';
            report['variant'] = sequen;
            output = 11;
            verify = sizing[output];
            verify = result.bind(tangon)(verify);
            update = verify.intl;
            kiloes = update.string;
            verify = sizing[output];
            verify = result.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.cSURbm;
            verify = kiloes.bind(update)(verify);
            report['children'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(5);
            report[0] = golfie;
            verify = _closure1_slot9;
            option = _closure1_slot5;
            golfie = {};
            kiloes = yankee.dns;
            golfie['style'] = kiloes;
            ctrled = _closure1_slot8;
            kiloes = sizing[backup];
            kiloes = result.bind(tangon)(kiloes);
            update = kiloes.Text;
            kiloes = {};
            kiloes['variant'] = sequen;
            vacuum = sizing[output];
            vacuum = result.bind(tangon)(vacuum);
            record = vacuum.intl;
            config = record.string;
            vacuum = sizing[output];
            vacuum = result.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.GL3q7u;
            vacuum = config.bind(record)(vacuum);
            kiloes['children'] = vacuum;
            update = ctrled.bind(tangon)(update, kiloes);
            kiloes = new Array(6);
            kiloes[0] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tangon)(update);
            ctrled = update.Text;
            update = {'variant': 'text-md/normal', 'selectable': true};
            config = yankee.code;
            update['style'] = config;
            config = 13;
            config = sizing[config];
            record = result.bind(tangon)(config);
            config = record.getDnsName;
            config = config.bind(record)(cntext);
            update['children'] = config;
            update = vacuum.bind(tangon)(ctrled, update);
            kiloes[1] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tangon)(update);
            ctrled = update.Text;
            update = {};
            update['variant'] = sequen;
            config = sizing[output];
            config = result.bind(tangon)(config);
            cntext = config.intl;
            record = cntext.string;
            config = sizing[output];
            config = result.bind(tangon)(config);
            config = config.t;
            config = config.Ccmixs;
            config = record.bind(cntext)(config);
            update['children'] = config;
            update = vacuum.bind(tangon)(ctrled, update);
            kiloes[2] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tangon)(update);
            ctrled = update.Text;
            update = {'variant': 'text-md/normal', 'selectable': true, 'style': null, 'children': 'TXT'};
            config = yankee.code;
            update['style'] = config;
            update = vacuum.bind(tangon)(ctrled, update);
            kiloes[3] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tangon)(update);
            ctrled = update.Text;
            update = {};
            update['variant'] = sequen;
            sequen = sizing[output];
            sequen = result.bind(tangon)(sequen);
            record = sequen.intl;
            config = record.string;
            sequen = sizing[output];
            sequen = result.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.PVLriY;
            sequen = config.bind(record)(sequen);
            update['children'] = sequen;
            update = vacuum.bind(tangon)(ctrled, update);
            kiloes[4] = update;
            update = _closure1_slot8;
            sizing = sizing[backup];
            sizing = result.bind(tangon)(sizing);
            result = sizing.Text;
            sizing = {'variant': 'text-md/normal', 'selectable': true};
            ctrled = yankee.code;
            sizing['style'] = ctrled;
            sizing['children'] = source;
            sizing = update.bind(tangon)(result, sizing);
            kiloes[5] = sizing;
            golfie['children'] = kiloes;
            golfie = verify.bind(tangon)(option, golfie);
            report[1] = golfie;
            oscard = oscard != foxtra;
            if(!oscard) { _fun00004_ip = 843; continue _fun00003 }
 784:
            verify = _closure1_slot8;
            option = _closure1_slot0;
            golfie = _closure1_slot2;
            golfie = golfie[backup];
            golfie = option.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'variant': 'text-md/normal', 'color': 'text-danger'};
            backup = yankee.error;
            golfie['style'] = backup;
            golfie['children'] = foxtra;
            oscard = verify.bind(tangon)(option, golfie);
 843:
            report[2] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot5;
            oscard = {};
            verify = yankee.button;
            oscard['style'] = verify;
            result = _closure1_slot8;
            sizing = _closure1_slot0;
            foxtra = _closure1_slot2;
            verify = 14;
            backup = foxtra[verify];
            backup = sizing.bind(tangon)(backup);
            kiloes = backup.Button;
            backup = {};
            backup['loading'] = echoed;
            echoed = foxtra[output];
            echoed = sizing.bind(tangon)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = foxtra[output];
            echoed = sizing.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.13ofGh;
            echoed = update.bind(source)(echoed);
            backup['text'] = echoed;
            echoed = function() { // Original name: onPress
                tangon = _closure2_slot5;
                entity = undefined;
                zuuluu = true;
                zuuluu = tangon.bind(entity)(zuuluu);
                tangon = _closure2_slot4;
                zuuluu = null;
                zuuluu = tangon.bind(entity)(zuuluu);
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                zuuluu = 8;
                zuuluu = report[zuuluu];
                zuuluu = tangon.bind(entity)(zuuluu);
                report = zuuluu.HTTP;
                tangon = report.post;
                zuuluu = {};
                verify = _closure1_slot6;
                option = verify.CONNECTION;
                golfie = _closure1_slot7;
                golfie = golfie.DOMAIN;
                oscard = _closure2_slot1;
                oscard = option.bind(verify)(golfie, oscard);
                zuuluu['url'] = oscard;
                oscard = {};
                zuuluu['body'] = oscard;
                oscard = false;
                zuuluu['rejectWithError'] = oscard;
                report = tangon.bind(report)(zuuluu);
                tangon = report.then;
                zuuluu = function() {
                    michal = _closure2_slot0;
                    entity = undefined;
                    michal = michal.bind(entity)();
                    return entity;
                };
                report = tangon.bind(report)(zuuluu);
                tangon = report.catch;
                zuuluu = function(argFoo) {
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        tangon = argFoo;
                        zuuluu = _closure2_slot4;
                        oscard = tangon.body;
                        report = null;
                        golfie = report == oscard;
                        entity = undefined;
                        michal = undefined;
                        if(golfie) { _fun00006_ip = 93; continue _fun00005 }
 28:
                        oscard = oscard.errors;
                        golfie = report == oscard;
                        michal = undefined;
                        if(golfie) { _fun00006_ip = 93; continue _fun00005 }
 43:
                        oscard = oscard.domain;
                        golfie = report == oscard;
                        michal = undefined;
                        if(golfie) { _fun00006_ip = 93; continue _fun00005 }
 58:
                        golfie = oscard._errors;
                        oscard = report == golfie;
                        michal = undefined;
                        if(oscard) { _fun00006_ip = 93; continue _fun00005 }
 73:
                        oscard = 0;
                        oscard = golfie[oscard];
                        golfie = report == oscard;
                        michal = undefined;
                        if(golfie) { _fun00006_ip = 93; continue _fun00005 }
 88:
                        michal = oscard.message;
 93:
                        if(michal) { _fun00006_ip = 118; continue _fun00005 }
 96:
                        oscard = tangon.body;
                        golfie = report == oscard;
                        report = undefined;
                        if(golfie) { _fun00006_ip = 115; continue _fun00005 }
 110:
                        report = oscard.message;
 115:
                        michal = report;
 118:
                        if(michal) { _fun00006_ip = 126; continue _fun00005 }
 121:
                        michal = tangon.message;
 126:
                        michal = zuuluu.bind(entity)(michal);
                        return entity;
                    }
                };
                tangon = tangon.bind(report)(zuuluu);
                zuuluu = tangon.finally;
                michal = function() {
                    zuuluu = _closure2_slot5;
                    entity = undefined;
                    michal = false;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            backup['onPress'] = echoed;
            backup = result.bind(tangon)(kiloes, backup);
            oscard['children'] = backup;
            oscard = option.bind(tangon)(golfie, oscard);
            report[3] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot5;
            oscard = {};
            yankee = yankee.button;
            oscard['style'] = yankee;
            yankee = _closure1_slot8;
            verify = foxtra[verify];
            verify = sizing.bind(tangon)(verify);
            offset = verify.Button;
            verify = {};
            backup = 'secondary';
            verify['variant'] = backup;
            backup = foxtra[output];
            backup = sizing.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = foxtra[output];
            foxtra = sizing.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.CkfdNz;
            foxtra = backup.bind(kiloes)(foxtra);
            verify['text'] = foxtra;
            romeon = function() { // Original name: onPress
                tangon = _closure2_slot3;
                zuuluu = tangon.push;
                entity = _closure1_slot11;
                michal = entity.PROOF_HTTP;
                entity = {};
                oscard = _closure2_slot2;
                entity['proof'] = oscard;
                report = _closure2_slot1;
                entity['domain'] = report;
                entity = zuuluu.bind(tangon)(michal, entity);
                entity = undefined;
                return entity;
            };
            verify['onPress'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: HTTPProofScreen
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            michal = entity.onClose;
            var _closure2_slot0 = michal;
            cntext = entity.domain;
            var _closure2_slot1 = cntext;
            source = entity.proof;
            entity = _closure1_slot10;
            tangon = undefined;
            yankee = entity.bind(tangon)();
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 7;
            entity = sizing[entity];
            michal = result.bind(tangon)(entity);
            entity = michal.useNavigation;
            entity = entity.bind(michal)();
            var _closure2_slot2 = entity;
            michal = _closure1_slot4;
            entity = michal.useState;
            oscard = null;
            michal = entity.bind(michal)(oscard);
            entity = _closure1_slot3;
            golfie = 2;
            entity = entity.bind(tangon)(michal, golfie);
            zuuluu = 0;
            foxtra = entity[zuuluu];
            michal = 1;
            entity = entity[michal];
            var _closure2_slot3 = entity;
            option = _closure1_slot4;
            report = option.useState;
            entity = false;
            report = report.bind(option)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, golfie);
            echoed = entity[zuuluu];
            entity = entity[michal];
            var _closure2_slot4 = entity;
            zuuluu = _closure1_slot9;
            entity = 9;
            entity = sizing[entity];
            entity = result.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = yankee.container;
            entity['style'] = report;
            option = _closure1_slot8;
            backup = 10;
            report = sizing[backup];
            report = result.bind(tangon)(report);
            golfie = report.Text;
            report = {};
            sequen = 'text-md/normal';
            report['variant'] = sequen;
            output = 11;
            verify = sizing[output];
            verify = result.bind(tangon)(verify);
            update = verify.intl;
            kiloes = update.string;
            verify = sizing[output];
            verify = result.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.p4ql7+;
            verify = kiloes.bind(update)(verify);
            report['children'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(5);
            report[0] = golfie;
            verify = _closure1_slot9;
            option = _closure1_slot5;
            golfie = {};
            kiloes = yankee.dns;
            golfie['style'] = kiloes;
            ctrled = _closure1_slot8;
            kiloes = sizing[backup];
            kiloes = result.bind(tangon)(kiloes);
            update = kiloes.Text;
            kiloes = {};
            kiloes['variant'] = sequen;
            vacuum = sizing[output];
            vacuum = result.bind(tangon)(vacuum);
            record = vacuum.intl;
            config = record.string;
            vacuum = sizing[output];
            vacuum = result.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.GL3q7u;
            vacuum = config.bind(record)(vacuum);
            kiloes['children'] = vacuum;
            update = ctrled.bind(tangon)(update, kiloes);
            kiloes = new Array(4);
            kiloes[0] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tangon)(update);
            ctrled = update.Text;
            update = {'variant': 'text-md/normal', 'selectable': true};
            config = yankee.code;
            update['style'] = config;
            config = 13;
            config = sizing[config];
            record = result.bind(tangon)(config);
            config = record.getHttpName;
            config = config.bind(record)(cntext);
            update['children'] = config;
            update = vacuum.bind(tangon)(ctrled, update);
            kiloes[1] = update;
            vacuum = _closure1_slot8;
            update = sizing[backup];
            update = result.bind(tangon)(update);
            ctrled = update.Text;
            update = {};
            update['variant'] = sequen;
            sequen = sizing[output];
            sequen = result.bind(tangon)(sequen);
            record = sequen.intl;
            config = record.string;
            sequen = sizing[output];
            sequen = result.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.PVLriY;
            sequen = config.bind(record)(sequen);
            update['children'] = sequen;
            update = vacuum.bind(tangon)(ctrled, update);
            kiloes[2] = update;
            update = _closure1_slot8;
            sizing = sizing[backup];
            sizing = result.bind(tangon)(sizing);
            result = sizing.Text;
            sizing = {'variant': 'text-md/normal', 'selectable': true};
            ctrled = yankee.code;
            sizing['style'] = ctrled;
            sizing['children'] = source;
            sizing = update.bind(tangon)(result, sizing);
            kiloes[3] = sizing;
            golfie['children'] = kiloes;
            golfie = verify.bind(tangon)(option, golfie);
            report[1] = golfie;
            oscard = oscard != foxtra;
            if(!oscard) { _fun00008_ip = 702; continue _fun00007 }
 643:
            verify = _closure1_slot8;
            option = _closure1_slot0;
            golfie = _closure1_slot2;
            golfie = golfie[backup];
            golfie = option.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'variant': 'text-md/normal', 'color': 'text-danger'};
            backup = yankee.error;
            golfie['style'] = backup;
            golfie['children'] = foxtra;
            oscard = verify.bind(tangon)(option, golfie);
 702:
            report[2] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot5;
            oscard = {};
            verify = yankee.button;
            oscard['style'] = verify;
            result = _closure1_slot8;
            sizing = _closure1_slot0;
            foxtra = _closure1_slot2;
            verify = 14;
            backup = foxtra[verify];
            backup = sizing.bind(tangon)(backup);
            kiloes = backup.Button;
            backup = {};
            backup['loading'] = echoed;
            echoed = foxtra[output];
            echoed = sizing.bind(tangon)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = foxtra[output];
            echoed = sizing.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.13ofGh;
            echoed = update.bind(source)(echoed);
            backup['text'] = echoed;
            echoed = function() { // Original name: onPress
                tangon = _closure2_slot4;
                entity = undefined;
                zuuluu = true;
                zuuluu = tangon.bind(entity)(zuuluu);
                tangon = _closure2_slot3;
                zuuluu = null;
                zuuluu = tangon.bind(entity)(zuuluu);
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                zuuluu = 8;
                zuuluu = report[zuuluu];
                zuuluu = tangon.bind(entity)(zuuluu);
                report = zuuluu.HTTP;
                tangon = report.post;
                zuuluu = {};
                verify = _closure1_slot6;
                option = verify.CONNECTION;
                golfie = _closure1_slot7;
                golfie = golfie.DOMAIN;
                oscard = _closure2_slot1;
                oscard = option.bind(verify)(golfie, oscard);
                zuuluu['url'] = oscard;
                oscard = {};
                zuuluu['body'] = oscard;
                oscard = false;
                zuuluu['rejectWithError'] = oscard;
                report = tangon.bind(report)(zuuluu);
                tangon = report.then;
                zuuluu = function() {
                    michal = _closure2_slot0;
                    entity = undefined;
                    michal = michal.bind(entity)();
                    return entity;
                };
                report = tangon.bind(report)(zuuluu);
                tangon = report.catch;
                zuuluu = function(argFoo) {
                    _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                        tangon = argFoo;
                        zuuluu = _closure2_slot3;
                        oscard = tangon.body;
                        report = null;
                        golfie = report == oscard;
                        entity = undefined;
                        michal = undefined;
                        if(golfie) { _fun00010_ip = 93; continue _fun00009 }
 28:
                        oscard = oscard.errors;
                        golfie = report == oscard;
                        michal = undefined;
                        if(golfie) { _fun00010_ip = 93; continue _fun00009 }
 43:
                        oscard = oscard.domain;
                        golfie = report == oscard;
                        michal = undefined;
                        if(golfie) { _fun00010_ip = 93; continue _fun00009 }
 58:
                        golfie = oscard._errors;
                        oscard = report == golfie;
                        michal = undefined;
                        if(oscard) { _fun00010_ip = 93; continue _fun00009 }
 73:
                        oscard = 0;
                        oscard = golfie[oscard];
                        golfie = report == oscard;
                        michal = undefined;
                        if(golfie) { _fun00010_ip = 93; continue _fun00009 }
 88:
                        michal = oscard.message;
 93:
                        if(michal) { _fun00010_ip = 118; continue _fun00009 }
 96:
                        oscard = tangon.body;
                        golfie = report == oscard;
                        report = undefined;
                        if(golfie) { _fun00010_ip = 115; continue _fun00009 }
 110:
                        report = oscard.message;
 115:
                        michal = report;
 118:
                        if(michal) { _fun00010_ip = 126; continue _fun00009 }
 121:
                        michal = tangon.message;
 126:
                        michal = zuuluu.bind(entity)(michal);
                        return entity;
                    }
                };
                tangon = tangon.bind(report)(zuuluu);
                zuuluu = tangon.finally;
                michal = function() {
                    zuuluu = _closure2_slot4;
                    entity = undefined;
                    michal = false;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            backup['onPress'] = echoed;
            backup = result.bind(tangon)(kiloes, backup);
            oscard['children'] = backup;
            oscard = option.bind(tangon)(golfie, oscard);
            report[3] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot5;
            oscard = {};
            yankee = yankee.button;
            oscard['style'] = yankee;
            yankee = _closure1_slot8;
            verify = foxtra[verify];
            verify = sizing.bind(tangon)(verify);
            offset = verify.Button;
            verify = {};
            backup = 'secondary';
            verify['variant'] = backup;
            backup = foxtra[output];
            backup = sizing.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = foxtra[output];
            foxtra = sizing.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.RhJMVV;
            foxtra = backup.bind(kiloes)(foxtra);
            verify['text'] = foxtra;
            romeon = function() { // Original name: onPress
                michal = _closure2_slot2;
                entity = michal.pop;
                entity = entity.bind(michal)();
                entity = undefined;
                return entity;
            };
            verify['onPress'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Endpoints;
    var _closure1_slot6 = golfie;
    tangon = tangon.PlatformTypes;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot8 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tangon['container'] = verify;
    verify = {};
    yankee = 'center';
    verify['textAlign'] = yankee;
    tangon['description'] = verify;
    verify = {'paddingHorizontal': 0, 'paddingVertical': 0, 'marginVertical': 16};
    tangon['input'] = verify;
    verify = {};
    yankee = 6;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.xs;
    verify['borderRadius'] = yankee;
    yankee = 8;
    verify['padding'] = yankee;
    verify['marginTop'] = offset;
    tangon['dns'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['error'] = verify;
    verify = {'fontFamily': 'monospace', 'marginBottom': 4};
    tangon['code'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['button'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = 'DOMAIN';
    tangon['DOMAIN'] = golfie;
    golfie = 'PROOF_DNS';
    tangon['PROOF_DNS'] = golfie;
    golfie = 'PROOF_HTTP';
    tangon['PROOF_HTTP'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/connections/native/DomainVerifyModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: DomainVerifyModal
        _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
            michal = argFoo;
            entity = null;
            if(!(michal != entity)) { _fun00012_ip = 448; continue _fun00011 }
 14:
            foxtra = function() { // Original name: onClose
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 15;
                michal = michal[entity];
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                entity = michal.pop;
                entity = entity.bind(michal)();
                return entity;
            };
            var _closure2_slot0 = foxtra;
            option = {};
            entity = _closure1_slot11;
            zuuluu = entity.DOMAIN;
            entity = {};
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            oscard = 11;
            yankee = offset[oscard];
            report = undefined;
            yankee = verify.bind(report)(yankee);
            backup = yankee.intl;
            romeon = backup.string;
            yankee = offset[oscard];
            yankee = verify.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.7lo8+f;
            yankee = romeon.bind(backup)(yankee);
            entity['headerTitle'] = yankee;
            yankee = 16;
            romeon = offset[yankee];
            backup = verify.bind(report)(romeon);
            romeon = backup.getHeaderBackButton;
            romeon = romeon.bind(backup)(foxtra);
            entity['headerLeft'] = romeon;
            romeon = function() { // Original name: render
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot12;
                michal = {};
                entity = _closure2_slot0;
                michal['onClose'] = entity;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            entity['render'] = romeon;
            option[zuuluu] = entity;
            entity = _closure1_slot11;
            zuuluu = entity.PROOF_DNS;
            entity = {};
            romeon = offset[oscard];
            romeon = verify.bind(report)(romeon);
            kiloes = romeon.intl;
            backup = kiloes.string;
            romeon = offset[oscard];
            romeon = verify.bind(report)(romeon);
            romeon = romeon.t;
            romeon = romeon.7lo8+f;
            romeon = backup.bind(kiloes)(romeon);
            entity['headerTitle'] = romeon;
            romeon = offset[yankee];
            backup = verify.bind(report)(romeon);
            romeon = backup.getHeaderBackButton;
            romeon = romeon.bind(backup)(foxtra);
            entity['headerLeft'] = romeon;
            romeon = function(argFoo) { // Original name: render
                entity = argFoo;
                report = entity.domain;
                entity = entity.proof;
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot13;
                michal = {};
                michal['domain'] = report;
                michal['proof'] = entity;
                entity = _closure2_slot0;
                michal['onClose'] = entity;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            entity['render'] = romeon;
            option[zuuluu] = entity;
            entity = _closure1_slot11;
            zuuluu = entity.PROOF_HTTP;
            entity = {};
            romeon = offset[oscard];
            romeon = verify.bind(report)(romeon);
            kiloes = romeon.intl;
            backup = kiloes.string;
            romeon = offset[oscard];
            romeon = verify.bind(report)(romeon);
            romeon = romeon.t;
            romeon = romeon.7lo8+f;
            romeon = backup.bind(kiloes)(romeon);
            entity['headerTitle'] = romeon;
            yankee = offset[yankee];
            romeon = verify.bind(report)(yankee);
            yankee = romeon.getHeaderBackButton;
            yankee = yankee.bind(romeon)(foxtra);
            entity['headerLeft'] = yankee;
            tangon = function(argFoo) { // Original name: render
                entity = argFoo;
                report = entity.domain;
                entity = entity.proof;
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot14;
                michal = {};
                michal['domain'] = report;
                michal['proof'] = entity;
                entity = _closure2_slot0;
                michal['onClose'] = entity;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            entity['render'] = tangon;
            option[zuuluu] = entity;
            tangon = _closure1_slot8;
            entity = 17;
            entity = offset[entity];
            entity = verify.bind(report)(entity);
            zuuluu = entity.Navigator;
            entity = {};
            entity['screens'] = option;
            golfie = _closure1_slot11;
            golfie = golfie.DOMAIN;
            entity['initialRouteName'] = golfie;
            golfie = offset[oscard];
            golfie = verify.bind(report)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = offset[oscard];
            oscard = verify.bind(report)(oscard);
            oscard = oscard.t;
            oscard = oscard.13/7kZ;
            oscard = golfie.bind(option)(oscard);
            entity['headerBackTitle'] = oscard;
            entity = tangon.bind(report)(zuuluu, entity);
            return entity;
 448:
            sizing = "Cannot destructure 'undefined' or 'null'.";
            output = michal;
            entity = throwTypeError(output, sizing);
            entity = undefined;
            throw entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();