// app/modules/connections/native/ConnectionPlatformUtils.native.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    verify = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    option = tangon.PlatformTypes;
    tangon = {};
    yankee = option.CRUNCHYROLL;
    golfie = 1;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.CRUNCHYROLL;
    tangon[yankee] = offset;
    yankee = option.PLAYSTATION_STAGING;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.PLAYSTATION;
    tangon[yankee] = offset;
    yankee = option.PLAYSTATION;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.PLAYSTATION;
    tangon[yankee] = offset;
    yankee = option.GITHUB;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.GITHUB;
    tangon[yankee] = offset;
    yankee = option.SAMSUNG;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.SAMSUNG;
    tangon[yankee] = offset;
    yankee = option.XBOX;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.XBOX;
    tangon[yankee] = offset;
    yankee = option.SPOTIFY;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.SPOTIFY;
    tangon[yankee] = offset;
    yankee = option.TWITTER_LEGACY;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.TWITTER;
    tangon[yankee] = offset;
    yankee = option.TWITTER;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.TWITTER;
    tangon[yankee] = offset;
    yankee = option.FACEBOOK;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.FACEBOOK;
    tangon[yankee] = offset;
    yankee = option.REDDIT;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.REDDIT;
    tangon[yankee] = offset;
    yankee = option.STEAM;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.STEAM;
    tangon[yankee] = offset;
    yankee = option.LEAGUE_OF_LEGENDS;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.LOL;
    tangon[yankee] = offset;
    yankee = option.SKYPE;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.SKYPE;
    tangon[yankee] = offset;
    yankee = option.BUNGIE;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.BUNGIE;
    tangon[yankee] = offset;
    yankee = option.BATTLENET;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.BATTLENET;
    tangon[yankee] = offset;
    yankee = option.YOUTUBE;
    offset = oscard[golfie];
    offset = verify.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.YOUTUBE;
    tangon[yankee] = offset;
    option = option.TWITCH;
    golfie = oscard[golfie];
    golfie = verify.bind(entity)(golfie);
    golfie = golfie.unsafe_rawColors;
    golfie = golfie.TWITCH;
    tangon[option] = golfie;
    var _closure1_slot0 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/connections/native/ConnectionPlatformUtils.native.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: getConnectionBackgroundColor
        michal = _closure1_slot0;
        entity = argFoo;
        entity = michal[entity];
        return entity;
    };
    zuuluu['getConnectionBackgroundColor'] = michal;
    return entity;
})();