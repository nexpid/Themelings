// app/modules/content_inventory/reactionUtils.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    zuuluu = argFre;
    tangon = argPlu;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = tangon;
    entity = global;
    golfie = entity.Object;
    oscard = golfie.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = oscard.bind(golfie)(zuuluu, entity, report);
    entity = 2;
    report = tangon[entity];
    tangon = argBar;
    entity = undefined;
    oscard = tangon.bind(entity)(report);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/content_inventory/reactionUtils.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: sendMessageWithEmbed
        michal = argFoo;
        entity = michal.channel;
        offset = michal.content;
        verify = michal.entry;
        romeon = michal.whenReady;
        golfie = michal.doNotNotifyOnError;
        tangon = _closure1_slot0;
        option = _closure1_slot1;
        michal = 0;
        michal = option[michal];
        zuuluu = undefined;
        report = tangon.bind(zuuluu)(michal);
        michal = report.parse;
        foxtra = michal.bind(report)(entity, offset);
        michal = 1;
        michal = option[michal];
        tangon = tangon.bind(zuuluu)(michal);
        zuuluu = tangon.sendMessage;
        backup = entity.id;
        entity = {};
        option = {};
        option['unverified_content'] = verify;
        entity['contentInventoryEntry'] = option;
        entity['doNotNotifyOnError'] = golfie;
        kiloes = tangon;
        yankee = entity;
        entity = kiloes[zuuluu](backup, foxtra, romeon, yankee, offset);
        return entity;
    };
    zuuluu['sendMessageWithEmbed'] = tangon;
    michal = function(argFoo) { // Original name: sendMessageWithoutContentInventoryEntry
        michal = argFoo;
        entity = michal.channel;
        verify = michal.content;
        yankee = michal.whenReady;
        golfie = michal.doNotNotifyOnError;
        tangon = _closure1_slot0;
        option = _closure1_slot1;
        michal = 0;
        michal = option[michal];
        zuuluu = undefined;
        report = tangon.bind(zuuluu)(michal);
        michal = report.parse;
        romeon = michal.bind(report)(entity, verify);
        michal = 1;
        michal = option[michal];
        tangon = tangon.bind(zuuluu)(michal);
        zuuluu = tangon.sendMessage;
        foxtra = entity.id;
        entity = {};
        entity['doNotNotifyOnError'] = golfie;
        backup = tangon;
        offset = entity;
        entity = backup[zuuluu](foxtra, romeon, yankee, offset, verify);
        return entity;
    };
    zuuluu['sendMessageWithoutContentInventoryEntry'] = michal;
    return entity;
})();