// app/modules/verification/native/components/EnterEmail.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot7 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.useChangeEmailError;
    var _closure1_slot10 = golfie;
    golfie = tangon.useChangeEmailStore;
    var _closure1_slot11 = golfie;
    tangon = tangon.ChangeEmailFields;
    var _closure1_slot12 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot13 = tangon;
    tangon = 7;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot14 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot15 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 9;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_MOBILE_SECONDARY;
    verify['backgroundColor'] = offset;
    tangon['background'] = verify;
    offset = 16;
    verify = {'paddingVertical': 12, 'paddingHorizontal': 16};
    tangon['container'] = verify;
    verify = {};
    yankee = 'center';
    verify['textAlign'] = yankee;
    tangon['title'] = verify;
    verify = {'marginTop': 8, 'lineHeight': 18, 'textAlign': 'center'};
    tangon['prompt'] = verify;
    verify = {};
    yankee = 24;
    verify['marginTop'] = yankee;
    tangon['input'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['button'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot16 = tangon;
    tangon = 20;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/verification/native/components/EnterEmail.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: EnterEmail
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            option = michal.isChangeEmail;
            var _closure2_slot0 = option;
            golfie = michal.changeEmailReason;
            var _closure2_slot1 = golfie;
            oscard = michal.freeTextResponse;
            var _closure2_slot2 = oscard;
            michal = _closure1_slot16;
            report = undefined;
            result = michal.bind(report)();
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot3;
            michal = 10;
            michal = tangon[michal];
            verify = zuuluu.bind(report)(michal);
            michal = verify.useNavigation;
            romeon = michal.bind(verify)();
            var _closure2_slot3 = romeon;
            michal = 11;
            michal = tangon[michal];
            verify = zuuluu.bind(report)(michal);
            tangon = verify.useStateFromStores;
            michal = _closure1_slot9;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot9;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            backup = tangon.bind(verify)(zuuluu, michal);
            var _closure2_slot4 = backup;
            tangon = _closure1_slot6;
            michal = tangon.useState;
            foxtra = '';
            michal = michal.bind(tangon)(foxtra);
            yankee = _closure1_slot5;
            offset = 2;
            michal = yankee.bind(report)(michal, offset);
            verify = 0;
            kiloes = michal[verify];
            var _closure2_slot5 = kiloes;
            zuuluu = 1;
            vacuum = michal[zuuluu];
            sizing = _closure1_slot10;
            michal = _closure1_slot12;
            michal = michal.EMAIL;
            michal = sizing.bind(report)(michal);
            michal = yankee.bind(report)(michal, offset);
            echoed = michal[verify];
            yankee = michal[zuuluu];
            var _closure2_slot6 = yankee;
            michal = _closure1_slot11;
            michal = michal.bind(report)();
            offset = michal.emailToken;
            var _closure2_slot7 = offset;
            verify = tangon.useCallback;
            zuuluu = new Array(1);
            zuuluu[0] = romeon;
            michal = function(argFoo) {
                michal = argFoo;
                var _closure3_slot0 = michal;
                zuuluu = _closure2_slot3;
                michal = zuuluu.getState;
                michal = michal.bind(zuuluu)();
                zuuluu = michal.routes;
                michal = zuuluu.findIndex;
                entity = function(argFoo) {
                    entity = argFoo;
                    michal = entity.name;
                    entity = _closure3_slot0;
                    entity = michal === entity;
                    return entity;
                };
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            verify = verify.bind(tangon)(michal, zuuluu);
            var _closure2_slot8 = verify;
            zuuluu = tangon.useCallback;
            michal = new Array(9);
            michal[0] = romeon;
            michal[1] = backup;
            michal[2] = yankee;
            michal[3] = kiloes;
            michal[4] = offset;
            michal[5] = verify;
            michal[6] = option;
            michal[7] = golfie;
            michal[8] = oscard;
            entity = function() {
                report = _closure2_slot3;
                tangon = report.push;
                zuuluu = _closure1_slot0;
                michal = _closure1_slot3;
                entity = 12;
                michal = michal[entity];
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                michal = michal.VerificationModalScenes;
                zuuluu = michal.VERIFY_PASSWORD;
                michal = {};
                option = _closure1_slot4;
                golfie = function* (argFoo) {
                    entity = function* (argFoo) { // Original name: ?anon_0_
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            StartGenerator();
                            ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                            if(michal) { _fun00004_ip = 127; continue _fun00003 }
 7:
                            michal = _closure2_slot4;
                            report = null;
                            tangon = report == michal;
                            michal = null;
                            if(tangon) { _fun00004_ip = 124; continue _fun00003 }
 25:
                            tangon = _closure2_slot6;
                            oscard = undefined;
                            tangon = tangon.bind(oscard)(report);
                            report = _closure1_slot2;
                            golfie = _closure1_slot3;
                            tangon = 13;
                            tangon = golfie[tangon];
                            golfie = report.bind(oscard)(tangon);
                            oscard = golfie.saveEmail;
                            report = {};
                            tangon = _closure2_slot5;
                            report['email'] = tangon;
                            tangon = argFoo;
                            report['password'] = tangon;
                            tangon = _closure2_slot7;
                            report['emailToken'] = tangon;
                            tangon = _closure2_slot3;
                            zuuluu = _closure2_slot8;
                            zuuluu = oscard.bind(golfie)(report, tangon, zuuluu);
                            SaveGenerator(address=112);
 110:
                            return zuuluu;
 112:
                            ResumeGenerator(result_out_reg=2, return_bool_out_reg=3);
                            michal = zuuluu;
                            if(!tangon) { _fun00004_ip = 124; continue _fun00003 }
 121:
                            return zuuluu;
 124:
                            return michal;
 127:
                            return entity;
                        }
                    };
                    return entity;
                };
                golfie = option.bind(entity)(golfie);
                var _closure3_slot0 = golfie;
                golfie = function() {
                    entity = undefined;
                    tangon = _closure3_slot0;
                    zuuluu = tangon.apply;
                    entity = arguments;
                    michal = entity;
                    entity = this;
                    entity = zuuluu.bind(tangon)(entity, michal);
                    return entity;
                };
                michal['onSubmit'] = golfie;
                oscard = function() { // Original name: onSuccess
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        zuuluu = _closure2_slot0;
                        if(zuuluu) { _fun00006_ip = 57; continue _fun00005 }
 13:
                        report = _closure1_slot2;
                        tangon = _closure1_slot3;
                        zuuluu = 13;
                        tangon = tangon[zuuluu];
                        zuuluu = undefined;
                        oscard = report.bind(zuuluu)(tangon);
                        report = oscard.finishVerifyEmailFlow;
                        tangon = _closure2_slot3;
                        zuuluu = _closure2_slot8;
                        zuuluu = report.bind(oscard)(tangon, zuuluu);
                        _fun00006_ip = 158; continue _fun00005;
 57:
                        oscard = _closure1_slot1;
                        report = _closure1_slot3;
                        zuuluu = 14;
                        zuuluu = report[zuuluu];
                        tangon = undefined;
                        option = oscard.bind(tangon)(zuuluu);
                        golfie = option.track;
                        zuuluu = _closure1_slot13;
                        oscard = zuuluu.USER_ACCOUNT_EMAIL_CHANGE_SAVE_NEW_EMAIL;
                        zuuluu = {};
                        verify = _closure2_slot1;
                        zuuluu['change_email_reason_enum'] = verify;
                        verify = _closure2_slot2;
                        zuuluu['free_text_response'] = verify;
                        zuuluu = golfie.bind(option)(oscard, zuuluu);
                        zuuluu = _closure1_slot2;
                        michal = 13;
                        michal = report[michal];
                        tangon = zuuluu.bind(tangon)(michal);
                        zuuluu = tangon.finishChangeEmailFlow;
                        michal = _closure2_slot3;
                        entity = _closure2_slot5;
                        entity = zuuluu.bind(tangon)(michal, entity);
 158:
                        entity = undefined;
                        return entity;
                    }
                };
                michal['onSuccess'] = oscard;
                oscard = true;
                michal['hideUnverifiedBanner'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            sizing = zuuluu.bind(tangon)(entity, michal);
            source = null;
            michal = source == backup;
            entity = null;
            if(michal) { _fun00002_ip = 1169; continue _fun00001 }
 333:
            tangon = _closure1_slot14;
            zuuluu = _closure1_slot8;
            michal = {'style': null, 'keyboardShouldPersistTaps': 'handled', 'alwaysBounceVertical': false};
            oscard = result.background;
            michal['style'] = oscard;
            option = _closure1_slot15;
            golfie = _closure1_slot7;
            oscard = {};
            verify = result.container;
            oscard['style'] = verify;
            offset = _closure1_slot0;
            verify = _closure1_slot3;
            update = 15;
            verify = verify[update];
            verify = offset.bind(report)(verify);
            offset = verify.Text;
            verify = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            yankee = result.title;
            verify['style'] = yankee;
            yankee = backup.email;
            if(!(source == yankee)) { _fun00002_ip = 505; continue _fun00001 }
 446:
            sequen = _closure1_slot0;
            config = _closure1_slot3;
            yankee = 16;
            romeon = config[yankee];
            romeon = sequen.bind(report)(romeon);
            ctrled = romeon.intl;
            romeon = ctrled.string;
            yankee = config[yankee];
            yankee = sequen.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.CDTD/P;
            yankee = romeon.bind(ctrled)(yankee);
            _fun00002_ip = 560; continue _fun00001;
 505:
            config = _closure1_slot0;
            record = _closure1_slot3;
            romeon = 16;
            ctrled = record[romeon];
            ctrled = config.bind(report)(ctrled);
            sequen = ctrled.intl;
            ctrled = sequen.string;
            romeon = record[romeon];
            romeon = config.bind(report)(romeon);
            romeon = romeon.t;
            romeon = romeon.Vm8akJ;
            yankee = ctrled.bind(sequen)(romeon);
 560:
            verify['children'] = yankee;
            offset = tangon.bind(report)(offset, verify);
            verify = new Array(4);
            verify[0] = offset;
            romeon = _closure1_slot14;
            yankee = _closure1_slot0;
            offset = _closure1_slot3;
            offset = offset[update];
            offset = yankee.bind(report)(offset);
            yankee = offset.Text;
            offset = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            update = result.prompt;
            offset['style'] = update;
            update = backup.email;
            if(!(source == update)) { _fun00002_ip = 699; continue _fun00001 }
 640:
            sequen = _closure1_slot0;
            config = _closure1_slot3;
            update = 16;
            source = config[update];
            source = sequen.bind(report)(source);
            ctrled = source.intl;
            source = ctrled.string;
            update = config[update];
            update = sequen.bind(report)(update);
            update = update.t;
            update = update.YXXMxM;
            update = source.bind(ctrled)(update);
            _fun00002_ip = 770; continue _fun00001;
 699:
            ctrled = _closure1_slot0;
            record = _closure1_slot3;
            source = 16;
            sequen = record[source];
            sequen = ctrled.bind(report)(sequen);
            config = sequen.intl;
            sequen = config.formatToPlainString;
            source = record[source];
            source = ctrled.bind(report)(source);
            source = source.t;
            ctrled = source.Z7CaIy;
            source = {};
            record = backup.email;
            source['email'] = record;
            update = sequen.bind(config)(ctrled, source);
 770:
            offset['children'] = update;
            offset = romeon.bind(report)(yankee, offset);
            verify[1] = offset;
            romeon = _closure1_slot14;
            ctrled = _closure1_slot1;
            source = _closure1_slot3;
            offset = 17;
            offset = source[offset];
            yankee = ctrled.bind(report)(offset);
            offset = {};
            update = result.input;
            offset['style'] = update;
            update = _closure1_slot0;
            output = 16;
            sequen = source[output];
            sequen = update.bind(report)(sequen);
            record = sequen.intl;
            config = record.string;
            sequen = source[output];
            sequen = update.bind(report)(sequen);
            sequen = sequen.t;
            sequen = sequen.w/qqKC;
            sequen = config.bind(record)(sequen);
            offset['label'] = sequen;
            sequen = 'emailAddress';
            offset['textContentType'] = sequen;
            sequen = 18;
            sequen = source[sequen];
            sequen = update.bind(report)(sequen);
            sequen = sequen.KeyboardTypes;
            sequen = sequen.EMAIL;
            offset['keyboardType'] = sequen;
            offset['value'] = kiloes;
            offset['onChangeText'] = vacuum;
            offset['onSubmitEditing'] = sizing;
            vacuum = source[output];
            vacuum = update.bind(report)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = source[output];
            vacuum = update.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.dI4d4e;
            vacuum = sequen.bind(config)(vacuum);
            offset['placeholder'] = vacuum;
            vacuum = 'done';
            offset['returnKeyType'] = vacuum;
            vacuum = 'none';
            offset['autoCapitalize'] = vacuum;
            offset['error'] = echoed;
            echoed = true;
            offset['autoFocus'] = echoed;
            offset = romeon.bind(report)(yankee, offset);
            verify[2] = offset;
            echoed = 19;
            offset = source[echoed];
            yankee = ctrled.bind(report)(offset);
            offset = {};
            echoed = source[echoed];
            echoed = ctrled.bind(report)(echoed);
            echoed = echoed.Sizes;
            echoed = echoed.MEDIUM;
            offset['size'] = echoed;
            result = result.button;
            offset['style'] = result;
            result = source[output];
            result = update.bind(report)(result);
            echoed = result.intl;
            result = echoed.string;
            output = source[output];
            output = update.bind(report)(output);
            output = output.t;
            output = output.Vm8akJ;
            output = result.bind(echoed)(output);
            offset['text'] = output;
            offset['onPress'] = sizing;
            foxtra = foxtra === kiloes;
            if(foxtra) { _fun00002_ip = 1135; continue _fun00001 }
 1125:
            backup = backup.email;
            foxtra = kiloes === backup;
 1135:
            offset['disabled'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            verify[3] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1169:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();