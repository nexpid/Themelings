// app/modules/verification/native/components/ChangeEmailComplete.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    offset = 0;
    golf = oscar[offset];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    golf = tango.Image;
    var _closure1_slot4 = golf;
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    foxtrot = 2;
    tango = oscar[foxtrot];
    tango = report.bind(entity)(tango);
    tango = tango.resetChangeEmailStore;
    var _closure1_slot6 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    golf = {};
    tango = {'flexGrow': 2, 'paddingHorizontal': null, 'paddingBottom': null, 'gap': 20, 'alignItems': 'center'};
    yankee = 5;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    tango['paddingHorizontal'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    tango['paddingBottom'] = backup;
    backup = 'center';
    golf['contentContainer'] = tango;
    tango = {'height': 190, 'width': 220, 'resizeMode': 'contain'};
    golf['image'] = tango;
    tango = {};
    tango['textAlign'] = backup;
    golf['title'] = tango;
    tango = {};
    tango['textAlign'] = backup;
    golf['body'] = tango;
    tango = {};
    tango['gap'] = foxtrot;
    golf['bodyInner'] = tango;
    tango = {};
    tango['flexGrow'] = offset;
    offset = oscar[yankee];
    offset = romeo.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.sm;
    tango['borderRadius'] = offset;
    golf['button'] = tango;
    offset = {'backgroundColor': null, 'width': '100%', 'padding': 12, 'borderWidth': 1, 'borderStyle': 'solid'};
    tango = oscar[yankee];
    tango = romeo.bind(entity)(tango);
    tango = tango.colors;
    tango = tango.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = tango;
    tango = 12;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.sm;
    offset['borderRadius'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_ACCENT;
    offset['borderColor'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.shadows;
    output = yankee.SHADOW_LOW;
    result = offset;
    yankee = copyDataProperties(result, output);
    golf['tooltip'] = offset;
    golf = options.bind(verify)(golf);
    var _closure1_slot9 = golf;
    golf = function() { // Original name: handlePress
        zulu = _closure1_slot6;
        entity = undefined;
        zulu = zulu.bind(entity)();
        zulu = _closure1_slot1;
        tango = _closure1_slot2;
        mike = 6;
        mike = tango[mike];
        zulu = zulu.bind(entity)(mike);
        mike = zulu.close;
        mike = mike.bind(zulu)();
        return entity;
    };
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/verification/native/components/ChangeEmailComplete.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ChangeEmailComplete
        entity = argFoo;
        config = entity.email;
        entity = _closure1_slot9;
        tango = undefined;
        foxtrot = entity.bind(tango)();
        zulu = _closure1_slot7;
        kilo = _closure1_slot0;
        sizing = _closure1_slot2;
        entity = 7;
        entity = sizing[entity];
        entity = kilo.bind(tango)(entity);
        mike = entity.RedesignCompat;
        entity = {};
        golf = _closure1_slot8;
        oscar = _closure1_slot5;
        report = {'keyboardShouldPersistTaps': 'handled', 'alwaysBounceVertical': false};
        options = foxtrot.contentContainer;
        report['contentContainerStyle'] = options;
        verify = _closure1_slot4;
        options = {};
        offset = foxtrot.image;
        options['style'] = offset;
        output = _closure1_slot1;
        offset = 8;
        offset = sizing[offset];
        offset = output.bind(tango)(offset);
        options['source'] = offset;
        verify = zulu.bind(tango)(verify, options);
        options = new Array(4);
        options[0] = verify;
        backup = _closure1_slot3;
        offset = {};
        verify = foxtrot.bodyInner;
        offset['style'] = verify;
        verify = 9;
        romeo = sizing[verify];
        romeo = kilo.bind(tango)(romeo);
        echo = romeo.Text;
        result = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
        romeo = foxtrot.title;
        result['style'] = romeo;
        romeo = 10;
        update = sizing[romeo];
        update = kilo.bind(tango)(update);
        control = update.intl;
        source = control.string;
        update = sizing[romeo];
        update = kilo.bind(tango)(update);
        update = update.t;
        update = update.8O+nFx;
        update = source.bind(control)(update);
        result['children'] = update;
        echo = zulu.bind(tango)(echo, result);
        result = new Array(2);
        result[0] = echo;
        echo = sizing[verify];
        echo = kilo.bind(tango)(echo);
        update = echo.Text;
        echo = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
        source = foxtrot.body;
        echo['style'] = source;
        source = sizing[romeo];
        source = kilo.bind(tango)(source);
        sequence = source.intl;
        vacuum = sequence.format;
        source = sizing[romeo];
        source = kilo.bind(tango)(source);
        source = source.t;
        control = source.Zvx0Oz;
        source = {};
        source['email'] = config;
        source = vacuum.bind(sequence)(control, source);
        echo['children'] = source;
        echo = zulu.bind(tango)(update, echo);
        result[1] = echo;
        offset['children'] = result;
        offset = golf.bind(tango)(backup, offset);
        options[1] = offset;
        verify = sizing[verify];
        verify = kilo.bind(tango)(verify);
        offset = verify.Text;
        verify = {};
        backup = foxtrot.tooltip;
        verify['style'] = backup;
        backup = 'text-sm/normal';
        verify['variant'] = backup;
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        echo = backup.intl;
        result = echo.string;
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.yb7itb;
        backup = result.bind(echo)(backup);
        verify['children'] = backup;
        verify = zulu.bind(tango)(offset, verify);
        options[2] = verify;
        backup = 11;
        verify = sizing[backup];
        offset = output.bind(tango)(verify);
        verify = {};
        backup = sizing[backup];
        backup = output.bind(tango)(backup);
        backup = backup.Sizes;
        backup = backup.MEDIUM;
        verify['size'] = backup;
        foxtrot = foxtrot.button;
        verify['style'] = foxtrot;
        foxtrot = sizing[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.string;
        romeo = sizing[romeo];
        romeo = kilo.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.BddRzc;
        romeo = foxtrot.bind(backup)(romeo);
        verify['text'] = romeo;
        yankee = _closure1_slot10;
        verify['onPress'] = yankee;
        verify = zulu.bind(tango)(offset, verify);
        options[3] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();