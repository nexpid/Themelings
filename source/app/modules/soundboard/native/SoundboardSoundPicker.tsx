// app/modules/soundboard/native/SoundboardSoundPicker.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.setSearchQuery;
    var _closure1_slot6 = option;
    tangon = tangon.useExpressionPickerStore;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.SOUND_ROW_HORIZONTAL_PADDING;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.EXPRESSION_FOOTER_HEIGHT;
    var _closure1_slot10 = tangon;
    foxtra = 8;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot11 = option;
    tangon = tangon.jsxs;
    var _closure1_slot12 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['marginBottom'] = foxtra;
    tangon['title'] = offset;
    offset = {'flex': 1, 'alignItems': 'center'};
    tangon['container'] = offset;
    offset = {};
    offset['paddingHorizontal'] = yankee;
    yankee = 10;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['padding'] = foxtra;
    foxtra = '100%';
    offset['width'] = foxtra;
    tangon['header'] = offset;
    offset = {'flex': 1, 'width': '100%'};
    tangon['body'] = offset;
    offset = {'position': 'absolute', 'bottom': 0, 'left': 0, 'right': 0, 'zIndex': 1};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_SECONDARY;
    offset['backgroundColor'] = yankee;
    tangon['keyboardStickyFooter'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot13 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            sizing = entity.channel;
            var _closure2_slot0 = sizing;
            output = entity.analyticsSource;
            entity = _closure1_slot13;
            tangon = undefined;
            source = entity.bind(tangon)();
            echoed = _closure1_slot4;
            entity = echoed.useState;
            option = 0;
            entity = entity.bind(echoed)(option);
            sequen = _closure1_slot3;
            vacuum = 2;
            entity = sequen.bind(tangon)(entity, vacuum);
            foxtra = entity[option];
            result = 1;
            config = entity[result];
            michal = echoed.useRef;
            entity = null;
            kiloes = michal.bind(echoed)(entity);
            oscard = _closure1_slot0;
            report = _closure1_slot2;
            michal = 11;
            entity = report[michal];
            golfie = oscard.bind(tangon)(entity);
            entity = golfie.useSharedValue;
            record = entity.bind(golfie)(option);
            entity = 12;
            golfie = report[entity];
            romeon = oscard.bind(tangon)(golfie);
            offset = romeon.useStateFromStores;
            golfie = _closure1_slot9;
            verify = new Array(1);
            verify[0] = golfie;
            golfie = function() {
                michal = _closure1_slot9;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            ctrled = offset.bind(romeon)(verify, golfie);
            var _closure2_slot1 = ctrled;
            entity = report[entity];
            offset = oscard.bind(tangon)(entity);
            verify = offset.useStateFromStores;
            entity = _closure1_slot8;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                michal = _closure1_slot8;
                entity = michal.getMediaSessionId;
                entity = entity.bind(michal)();
                return entity;
            };
            romeon = verify.bind(offset)(golfie, entity);
            verify = _closure1_slot1;
            entity = 13;
            golfie = report[entity];
            offset = verify.bind(tangon)(golfie);
            golfie = {};
            backup = true;
            golfie['filterOutEmptyCurrentGuild'] = backup;
            golfie = offset.bind(tangon)(sizing, golfie);
            backup = golfie.categories;
            update = golfie.allSounds;
            var _closure2_slot2 = update;
            offset = _closure1_slot7;
            golfie = function(argFoo) {
                entity = argFoo;
                entity = entity.searchQuery;
                return entity;
            };
            offset = offset.bind(tangon)(golfie);
            cntext = echoed.useState;
            golfie = 14;
            golfie = report[golfie];
            target = oscard.bind(tangon)(golfie);
            papara = target.searchSounds;
            golfie = global;
            sierra = golfie.Array;
            status = sierra.from;
            golfie = update.values;
            golfie = golfie.bind(update)();
            status = status.bind(sierra)(golfie);
            golfie = status.flat;
            variable36 = golfie.bind(status)();
            variable38 = target;
            variable37 = offset;
            quebec = ctrled;
            equals = sizing;
            golfie = variable38[papara](variable37, variable36, quebec, equals, whisks);
            golfie = cntext.bind(echoed)(golfie);
            golfie = sequen.bind(tangon)(golfie, vacuum);
            option = golfie[option];
            golfie = golfie[result];
            var _closure2_slot3 = golfie;
            entity = report[entity];
            golfie = oscard.bind(tangon)(entity);
            entity = golfie.useSearchCategories;
            sequen = entity.bind(golfie)(backup, option, offset);
            entity = 15;
            entity = report[entity];
            golfie = verify.bind(tangon)(entity);
            entity = {};
            option = false;
            entity['isKeyboardAwareOnAndroid'] = option;
            entity = golfie.bind(tangon)(entity);
            cntext = entity.insets;
            entity = 16;
            golfie = report[entity];
            offset = verify.bind(tangon)(golfie);
            golfie = 17;
            golfie = report[golfie];
            golfie = verify.bind(tangon)(golfie);
            golfie = golfie.SOUNDBOARD_ACTION_SHEET;
            golfie = offset.bind(tangon)(golfie);
            golfie = golfie.analyticsLocations;
            result = echoed.useCallback;
            offset = new Array(3);
            offset[0] = sizing;
            offset[1] = ctrled;
            offset[2] = update;
            zuuluu = function(argFoo) {
                option = argFoo;
                michal = _closure1_slot6;
                entity = undefined;
                michal = michal.bind(entity)(option);
                zuuluu = _closure2_slot3;
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                tangon = 14;
                tangon = oscard[tangon];
                golfie = report.bind(entity)(tangon);
                oscard = golfie.searchSounds;
                tangon = global;
                verify = tangon.Array;
                report = verify.from;
                offset = _closure2_slot2;
                tangon = offset.values;
                tangon = tangon.bind(offset)();
                report = report.bind(verify)(tangon);
                tangon = report.flat;
                foxtra = tangon.bind(report)();
                romeon = _closure2_slot1;
                yankee = _closure2_slot0;
                kiloes = golfie;
                backup = option;
                michal = kiloes[oscard](backup, foxtra, romeon, yankee, offset);
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            status = result.bind(echoed)(zuuluu, offset);
            zuuluu = 18;
            zuuluu = report[zuuluu];
            verify = verify.bind(tangon)(zuuluu);
            zuuluu = {};
            offset = 19;
            result = report[offset];
            result = oscard.bind(tangon)(result);
            result = result.ImpressionTypes;
            result = result.HALFSHEET;
            zuuluu['type'] = result;
            offset = report[offset];
            offset = oscard.bind(tangon)(offset);
            offset = offset.ImpressionNames;
            offset = offset.SOUNDBOARD_POPOUT;
            zuuluu['name'] = offset;
            offset = {};
            offset['source'] = output;
            output = sizing.guild_id;
            offset['guild_id'] = output;
            offset['media_session_id'] = romeon;
            zuuluu['properties'] = offset;
            zuuluu = verify.bind(tangon)(zuuluu);
            zuuluu = report[michal];
            offset = oscard.bind(tangon)(zuuluu);
            verify = offset.useSharedValue;
            zuuluu = -1;
            output = verify.bind(offset)(zuuluu);
            michal = report[michal];
            zuuluu = oscard.bind(tangon)(michal);
            michal = zuuluu.useSharedValue;
            ctrled = michal.bind(zuuluu)(option);
            zuuluu = _closure1_slot12;
            entity = report[entity];
            entity = oscard.bind(tangon)(entity);
            michal = entity.AnalyticsLocationProvider;
            entity = {};
            entity['value'] = golfie;
            romeon = 20;
            report = report[romeon];
            oscard = oscard.bind(tangon)(report);
            report = oscard.isIOS;
            oscard = report.bind(oscard)();
            if(!oscard) { _fun00002_ip = 730; continue _fun00001 }
 682:
            option = _closure1_slot11;
            golfie = _closure1_slot1;
            verify = _closure1_slot2;
            report = 21;
            report = verify[report];
            golfie = golfie.bind(tangon)(report);
            report = {};
            report['animatedSheetIndex'] = output;
            verify = 'soundboard-footer';
            report['portalHostName'] = verify;
            oscard = option.bind(tangon)(golfie, report);
 730:
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot12;
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            oscard = 22;
            oscard = verify[oscard];
            oscard = offset.bind(tangon)(oscard);
            golfie = oscard.BottomSheet;
            oscard = {'animatedIndex': null, 'scrollable': true, 'startExpanded': true};
            oscard['animatedIndex'] = output;
            verify = verify[romeon];
            offset = offset.bind(tangon)(verify);
            verify = offset.isAndroid;
            offset = verify.bind(offset)();
            verify = undefined;
            if(!offset) { _fun00002_ip = 855; continue _fun00001 }
 807:
            output = _closure1_slot11;
            romeon = _closure1_slot0;
            result = _closure1_slot2;
            offset = 23;
            offset = result[offset];
            offset = romeon.bind(tangon)(offset);
            romeon = offset.PortalHost;
            offset = {};
            result = 'soundboard-footer';
            offset['name'] = result;
            verify = output.bind(tangon)(romeon, offset);
 855:
            oscard['footer'] = verify;
            result = _closure1_slot12;
            offset = _closure1_slot5;
            verify = {};
            romeon = source.container;
            verify['style'] = romeon;
            romeon = _closure1_slot11;
            vacuum = _closure1_slot0;
            output = _closure1_slot2;
            echoed = 24;
            echoed = output[echoed];
            echoed = vacuum.bind(tangon)(echoed);
            update = echoed.Text;
            echoed = {'accessibilityRole': 'header', 'variant': 'heading-lg/bold'};
            papara = source.title;
            echoed['style'] = papara;
            sierra = 25;
            papara = output[sierra];
            papara = vacuum.bind(tangon)(papara);
            limora = papara.intl;
            target = limora.string;
            papara = output[sierra];
            papara = vacuum.bind(tangon)(papara);
            papara = papara.t;
            papara = papara.ABjMWF;
            papara = target.bind(limora)(papara);
            echoed['children'] = papara;
            update = romeon.bind(tangon)(update, echoed);
            echoed = new Array(4);
            echoed[0] = update;
            update = {};
            papara = source.header;
            update['style'] = papara;
            papara = 26;
            papara = output[papara];
            papara = vacuum.bind(tangon)(papara);
            target = papara.SearchField;
            papara = {};
            limora = 'md';
            papara['size'] = limora;
            limora = output[sierra];
            limora = vacuum.bind(tangon)(limora);
            whisks = limora.intl;
            limora = whisks.string;
            sierra = output[sierra];
            sierra = vacuum.bind(tangon)(sierra);
            sierra = sierra.t;
            sierra = sierra.sKt3xc;
            sierra = limora.bind(whisks)(sierra);
            papara['placeholder'] = sierra;
            papara['onChange'] = status;
            papara = romeon.bind(tangon)(target, papara);
            update['children'] = papara;
            update = romeon.bind(tangon)(offset, update);
            echoed[1] = update;
            update = {};
            source = source.body;
            update['style'] = source;
            source = 27;
            source = output[source];
            source = vacuum.bind(tangon)(source);
            vacuum = source.SoundboardSoundPickerList;
            source = {};
            source['listRef'] = kiloes;
            source['channel'] = sizing;
            papara = _closure1_slot10;
            cntext = cntext.bottom;
            papara = papara + cntext;
            yankee = _closure1_slot1;
            cntext = 10;
            cntext = output[cntext];
            cntext = yankee.bind(tangon)(cntext);
            cntext = cntext.spacing;
            cntext = cntext.PX_16;
            cntext = papara + cntext;
            source['insetBottom'] = cntext;
            source['scrollPosition'] = record;
            source['setCategoryIndex'] = config;
            source['categories'] = sequen;
            source['shouldShowPremiumUpsell'] = ctrled;
            source = romeon.bind(tangon)(vacuum, source);
            update['children'] = source;
            update = romeon.bind(tangon)(offset, update);
            echoed[2] = update;
            update = 28;
            update = output[update];
            source = yankee.bind(tangon)(update);
            update = {};
            update['shouldShow'] = ctrled;
            update = romeon.bind(tangon)(source, update);
            echoed[3] = update;
            verify['children'] = echoed;
            offset = result.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = 29;
            offset = output[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            sizing = sizing.guild_id;
            offset['guildId'] = sizing;
            offset['listRef'] = kiloes;
            offset['categories'] = backup;
            offset['categoryIndex'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 30;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/soundboard/native/SoundboardSoundPicker.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();