// app/modules/soundboard/native/SoundboardSoundPicker.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.setSearchQuery;
    var _closure1_slot6 = option;
    tangon = tangon.useExpressionPickerStore;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.SOUND_ROW_HORIZONTAL_PADDING;
    foxtra = 8;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.EXPRESSION_FOOTER_HEIGHT;
    var _closure1_slot11 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot12 = option;
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['marginBottom'] = foxtra;
    tangon['title'] = offset;
    offset = {'flex': 1, 'alignItems': 'center'};
    tangon['container'] = offset;
    offset = {};
    offset['paddingHorizontal'] = yankee;
    yankee = 11;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['padding'] = foxtra;
    foxtra = '100%';
    offset['width'] = foxtra;
    tangon['header'] = offset;
    offset = {'flex': 1, 'width': '100%'};
    tangon['body'] = offset;
    offset = {'position': 'absolute', 'bottom': 0, 'left': 0, 'right': 0, 'zIndex': 1};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_SECONDARY;
    offset['backgroundColor'] = yankee;
    tangon['keyboardStickyFooter'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot14 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            sizing = entity.channel;
            var _closure2_slot0 = sizing;
            yankee = entity.analyticsSource;
            entity = _closure1_slot14;
            tangon = undefined;
            update = entity.bind(tangon)();
            result = _closure1_slot4;
            entity = result.useState;
            record = 0;
            entity = entity.bind(result)(record);
            cntext = _closure1_slot3;
            romeon = 2;
            entity = cntext.bind(tangon)(entity, romeon);
            foxtra = entity[record];
            vacuum = 1;
            sequen = entity[vacuum];
            michal = result.useRef;
            entity = null;
            kiloes = michal.bind(result)(entity);
            oscard = _closure1_slot0;
            report = _closure1_slot2;
            michal = 12;
            entity = report[michal];
            golfie = oscard.bind(tangon)(entity);
            entity = golfie.useSharedValue;
            config = entity.bind(golfie)(record);
            entity = 13;
            golfie = report[entity];
            offset = oscard.bind(tangon)(golfie);
            verify = offset.useStateFromStores;
            golfie = _closure1_slot9;
            option = new Array(1);
            option[0] = golfie;
            golfie = function() {
                michal = _closure1_slot9;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            source = verify.bind(offset)(option, golfie);
            var _closure2_slot1 = source;
            golfie = report[entity];
            offset = oscard.bind(tangon)(golfie);
            verify = offset.useStateFromStores;
            golfie = _closure1_slot8;
            option = new Array(1);
            option[0] = golfie;
            golfie = function() {
                michal = _closure1_slot8;
                entity = michal.getMediaSessionId;
                entity = entity.bind(michal)();
                return entity;
            };
            offset = verify.bind(offset)(option, golfie);
            option = _closure1_slot1;
            golfie = 14;
            verify = report[golfie];
            backup = option.bind(tangon)(verify);
            verify = {};
            echoed = true;
            verify['filterOutEmptyCurrentGuild'] = echoed;
            verify = backup.bind(tangon)(sizing, verify);
            backup = verify.categories;
            echoed = verify.allSounds;
            var _closure2_slot2 = echoed;
            ctrled = _closure1_slot7;
            verify = function(argFoo) {
                entity = argFoo;
                entity = entity.searchQuery;
                return entity;
            };
            ctrled = ctrled.bind(tangon)(verify);
            papara = result.useState;
            verify = 15;
            verify = report[verify];
            status = oscard.bind(tangon)(verify);
            target = status.searchSounds;
            verify = global;
            limora = verify.Array;
            sierra = limora.from;
            verify = echoed.values;
            verify = verify.bind(echoed)();
            sierra = sierra.bind(limora)(verify);
            verify = sierra.flat;
            variable39 = verify.bind(sierra)();
            variable41 = status;
            variable40 = ctrled;
            variable38 = source;
            variable37 = sizing;
            verify = variable41[target](variable40, variable39, variable38, variable37, variable36);
            verify = papara.bind(result)(verify);
            verify = cntext.bind(tangon)(verify, romeon);
            romeon = verify[record];
            verify = verify[vacuum];
            var _closure2_slot3 = verify;
            golfie = report[golfie];
            verify = oscard.bind(tangon)(golfie);
            golfie = verify.useSearchCategories;
            vacuum = golfie.bind(verify)(backup, romeon, ctrled);
            golfie = 16;
            golfie = report[golfie];
            golfie = option.bind(tangon)(golfie);
            papara = golfie.bind(tangon)();
            entity = report[entity];
            romeon = oscard.bind(tangon)(entity);
            verify = romeon.useStateFromStores;
            entity = _closure1_slot10;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                entity = _closure1_slot10;
                entity = entity.keyboardOpen;
                return entity;
            };
            target = verify.bind(romeon)(golfie, entity);
            entity = 17;
            golfie = report[entity];
            verify = option.bind(tangon)(golfie);
            golfie = 18;
            golfie = report[golfie];
            golfie = option.bind(tangon)(golfie);
            golfie = golfie.SOUNDBOARD_ACTION_SHEET;
            golfie = verify.bind(tangon)(golfie);
            golfie = golfie.analyticsLocations;
            romeon = result.useCallback;
            verify = new Array(3);
            verify[0] = sizing;
            verify[1] = source;
            verify[2] = echoed;
            zuuluu = function(argFoo) {
                option = argFoo;
                michal = _closure1_slot6;
                entity = undefined;
                michal = michal.bind(entity)(option);
                zuuluu = _closure2_slot3;
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                tangon = 15;
                tangon = oscard[tangon];
                golfie = report.bind(entity)(tangon);
                oscard = golfie.searchSounds;
                tangon = global;
                verify = tangon.Array;
                report = verify.from;
                offset = _closure2_slot2;
                tangon = offset.values;
                tangon = tangon.bind(offset)();
                report = report.bind(verify)(tangon);
                tangon = report.flat;
                foxtra = tangon.bind(report)();
                romeon = _closure2_slot1;
                yankee = _closure2_slot0;
                kiloes = golfie;
                backup = option;
                michal = kiloes[oscard](backup, foxtra, romeon, yankee, offset);
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            whisks = romeon.bind(result)(zuuluu, verify);
            zuuluu = 19;
            zuuluu = report[zuuluu];
            option = option.bind(tangon)(zuuluu);
            zuuluu = {};
            verify = 20;
            romeon = report[verify];
            romeon = oscard.bind(tangon)(romeon);
            romeon = romeon.ImpressionTypes;
            romeon = romeon.HALFSHEET;
            zuuluu['type'] = romeon;
            verify = report[verify];
            verify = oscard.bind(tangon)(verify);
            verify = verify.ImpressionNames;
            verify = verify.SOUNDBOARD_POPOUT;
            zuuluu['name'] = verify;
            verify = {};
            verify['source'] = yankee;
            yankee = sizing.guild_id;
            verify['guild_id'] = yankee;
            verify['media_session_id'] = offset;
            zuuluu['properties'] = verify;
            zuuluu = option.bind(tangon)(zuuluu);
            zuuluu = report[michal];
            verify = oscard.bind(tangon)(zuuluu);
            option = verify.useSharedValue;
            zuuluu = -1;
            yankee = option.bind(verify)(zuuluu);
            michal = report[michal];
            option = oscard.bind(tangon)(michal);
            zuuluu = option.useSharedValue;
            michal = false;
            ctrled = zuuluu.bind(option)(michal);
            zuuluu = _closure1_slot13;
            entity = report[entity];
            entity = oscard.bind(tangon)(entity);
            michal = entity.AnalyticsLocationProvider;
            entity = {};
            entity['value'] = golfie;
            sierra = 21;
            report = report[sierra];
            oscard = oscard.bind(tangon)(report);
            report = oscard.isIOS;
            oscard = report.bind(oscard)();
            if(!oscard) { _fun00002_ip = 755; continue _fun00001 }
 707:
            option = _closure1_slot12;
            golfie = _closure1_slot1;
            verify = _closure1_slot2;
            report = 22;
            report = verify[report];
            golfie = golfie.bind(tangon)(report);
            report = {};
            report['animatedSheetIndex'] = yankee;
            verify = 'soundboard-footer';
            report['portalHostName'] = verify;
            oscard = option.bind(tangon)(golfie, report);
 755:
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot13;
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            oscard = 23;
            oscard = verify[oscard];
            oscard = offset.bind(tangon)(oscard);
            golfie = oscard.BottomSheet;
            oscard = {'animatedIndex': null, 'scrollable': true, 'startExpanded': true};
            oscard['animatedIndex'] = yankee;
            verify = verify[sierra];
            offset = offset.bind(tangon)(verify);
            verify = offset.isAndroid;
            offset = verify.bind(offset)();
            verify = undefined;
            if(!offset) { _fun00002_ip = 884; continue _fun00001 }
 836:
            romeon = _closure1_slot12;
            yankee = _closure1_slot0;
            result = _closure1_slot2;
            offset = 24;
            offset = result[offset];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.PortalHost;
            offset = {};
            result = 'soundboard-footer';
            offset['name'] = result;
            verify = romeon.bind(tangon)(yankee, offset);
 884:
            oscard['footer'] = verify;
            result = _closure1_slot13;
            offset = _closure1_slot5;
            verify = {};
            yankee = update.container;
            verify['style'] = yankee;
            romeon = _closure1_slot12;
            source = _closure1_slot0;
            cntext = _closure1_slot2;
            yankee = 25;
            yankee = cntext[yankee];
            yankee = source.bind(tangon)(yankee);
            echoed = yankee.Text;
            yankee = {'accessibilityRole': 'header', 'variant': 'heading-lg/bold'};
            status = update.title;
            yankee['style'] = status;
            equals = 26;
            status = cntext[equals];
            status = source.bind(tangon)(status);
            quebec = status.intl;
            limora = quebec.string;
            status = cntext[equals];
            status = source.bind(tangon)(status);
            status = status.t;
            status = status.ABjMWF;
            status = limora.bind(quebec)(status);
            yankee['children'] = status;
            yankee = romeon.bind(tangon)(echoed, yankee);
            echoed = new Array(4);
            echoed[0] = yankee;
            yankee = {};
            status = update.header;
            yankee['style'] = status;
            status = 27;
            status = cntext[status];
            status = source.bind(tangon)(status);
            limora = status.SearchField;
            status = {};
            quebec = 'md';
            status['size'] = quebec;
            quebec = cntext[equals];
            quebec = source.bind(tangon)(quebec);
            variable36 = quebec.intl;
            quebec = variable36.string;
            equals = cntext[equals];
            equals = source.bind(tangon)(equals);
            equals = equals.t;
            equals = equals.sKt3xc;
            equals = quebec.bind(variable36)(equals);
            status['placeholder'] = equals;
            status['onChange'] = whisks;
            status = romeon.bind(tangon)(limora, status);
            yankee['children'] = status;
            yankee = romeon.bind(tangon)(offset, yankee);
            echoed[1] = yankee;
            yankee = {};
            update = update.body;
            yankee['style'] = update;
            update = 28;
            update = cntext[update];
            update = source.bind(tangon)(update);
            source = update.SoundboardSoundPickerList;
            update = {};
            update['listRef'] = kiloes;
            update['channel'] = sizing;
            cntext = _closure1_slot11;
            if(!target) { _fun00002_ip = 1217; continue _fun00001 }
 1185:
            status = _closure1_slot0;
            target = _closure1_slot2;
            target = target[sierra];
            status = status.bind(tangon)(target);
            target = status.isIOS;
            target = target.bind(status)();
            record = 0;
            if(target) { _fun00002_ip = 1222; continue _fun00001 }
 1217:
            record = papara.bottom;
 1222:
            record = cntext + record;
            update['insetBottom'] = record;
            update['scrollPosition'] = config;
            update['setCategoryIndex'] = sequen;
            update['categories'] = vacuum;
            update['shouldShowPremiumUpsell'] = ctrled;
            update = romeon.bind(tangon)(source, update);
            yankee['children'] = update;
            yankee = romeon.bind(tangon)(offset, yankee);
            echoed[2] = yankee;
            romeon = _closure1_slot12;
            yankee = _closure1_slot1;
            output = _closure1_slot2;
            update = 29;
            update = output[update];
            source = yankee.bind(tangon)(update);
            update = {};
            update['shouldShow'] = ctrled;
            update = romeon.bind(tangon)(source, update);
            echoed[3] = update;
            verify['children'] = echoed;
            offset = result.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = 30;
            offset = output[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            sizing = sizing.guild_id;
            offset['guildId'] = sizing;
            offset['listRef'] = kiloes;
            offset['categories'] = backup;
            offset['categoryIndex'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 31;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/soundboard/native/SoundboardSoundPicker.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();