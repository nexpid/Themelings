// app/modules/guild_profile/native/components/GuildProfileGamesActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'padding': 16, 'paddingBottom': 48};
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_profile/native/components/GuildProfileGamesActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildProfileGamesActionSheet
        entity = argFoo;
        michal = entity.profile;
        entity = _closure1_slot6;
        tangon = undefined;
        verify = entity.bind(tangon)();
        entity = michal.id;
        var _closure2_slot0 = entity;
        zuuluu = michal.gameActivity;
        var _closure2_slot1 = zuuluu;
        offset = _closure1_slot0;
        backup = _closure1_slot2;
        zuuluu = 4;
        zuuluu = backup[zuuluu];
        report = offset.bind(tangon)(zuuluu);
        zuuluu = report.useAllGuildProfileGames;
        foxtra = zuuluu.bind(report)(michal);
        zuuluu = 5;
        zuuluu = backup[zuuluu];
        report = offset.bind(tangon)(zuuluu);
        zuuluu = report.useBottomSheetRef;
        zuuluu = zuuluu.bind(report)();
        oscard = zuuluu.bottomSheetRef;
        romeon = michal.name;
        michal = 6;
        zuuluu = backup[michal];
        zuuluu = offset.bind(tangon)(zuuluu);
        option = zuuluu.intl;
        report = option.format;
        michal = backup[michal];
        michal = offset.bind(tangon)(michal);
        michal = michal.t;
        zuuluu = michal.vuAVo6;
        michal = {};
        michal['serverName'] = romeon;
        zuuluu = report.bind(option)(zuuluu, michal);
        michal = zuuluu.toString;
        romeon = michal.bind(zuuluu)();
        report = _closure1_slot3;
        zuuluu = report.useCallback;
        michal = new Array(1);
        michal[0] = entity;
        entity = function() {
            report = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 7;
            tangon = michal[entity];
            entity = undefined;
            oscard = report.bind(entity)(tangon);
            report = oscard.openLazy;
            tangon = _closure1_slot0;
            zuuluu = 9;
            zuuluu = michal[zuuluu];
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = 8;
            zuuluu = michal[zuuluu];
            michal = michal.paths;
            tangon = tangon.bind(entity)(zuuluu, michal);
            golfie = _closure2_slot0;
            michal = global;
            michal = michal.HermesInternal;
            zuuluu = michal.concat;
            michal = 'GuildProfileActionSheet:';
            zuuluu = zuuluu.bind(michal)(golfie);
            michal = {};
            michal['guildId'] = golfie;
            michal = report.bind(oscard)(tangon, zuuluu, michal);
            return entity;
        };
        report = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot5;
        entity = 10;
        entity = backup[entity];
        entity = offset.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        entity['ref'] = oscard;
        oscard = true;
        entity['scrollable'] = oscard;
        entity['onDismiss'] = report;
        report = 300;
        entity['startHeight'] = report;
        report = 11;
        report = backup[report];
        report = offset.bind(tangon)(report);
        oscard = report.BottomSheetScrollView;
        report = {};
        option = _closure1_slot4;
        golfie = {};
        verify = verify.container;
        golfie['style'] = verify;
        verify = 12;
        verify = backup[verify];
        verify = offset.bind(tangon)(verify);
        offset = verify.TableRowGroup;
        verify = {};
        verify['title'] = romeon;
        romeon = foxtra.map;
        yankee = function(argFoo) {
            entity = argFoo;
            report = _closure1_slot5;
            zuuluu = _closure1_slot0;
            option = _closure1_slot2;
            michal = 13;
            michal = option[michal];
            tangon = undefined;
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = michal.TableRow;
            michal = {};
            golfie = _closure1_slot1;
            oscard = 14;
            oscard = option[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            oscard['game'] = entity;
            verify = _closure2_slot1;
            option = entity.id;
            option = verify[option];
            oscard['activityLevel'] = option;
            oscard = report.bind(tangon)(golfie, oscard);
            michal['icon'] = oscard;
            oscard = entity.name;
            michal['label'] = oscard;
            entity = entity.id;
            entity = report.bind(tangon)(zuuluu, michal, entity);
            return entity;
        };
        yankee = romeon.bind(foxtra)(yankee);
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        golfie['children'] = verify;
        golfie = zuuluu.bind(tangon)(option, golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();