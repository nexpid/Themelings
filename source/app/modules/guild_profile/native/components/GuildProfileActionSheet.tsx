// app/modules/guild_profile/native/components/GuildProfileActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.ActivityIndicator;
    var _closure1_slot5 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = yankee.bind(entity)(golfie);
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildProfileFetchStatus;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.INVALID_ACCESS_ERROR_CODE;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.VerticalGradient;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot10 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 40;
    verify['paddingTop'] = offset;
    tangon['loadingContainer'] = verify;
    verify = {'paddingHorizontal': 16, 'paddingVertical': 40};
    tangon['footerContainer'] = verify;
    verify = {};
    offset = 7;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_BASE_PRIMARY;
    verify['backgroundColor'] = offset;
    tangon['scrollView'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 28;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_profile/native/components/GuildProfileActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildProfileActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            output = michal.guildId;
            var _closure2_slot0 = output;
            michal = _closure1_slot12;
            tangon = undefined;
            offset = michal.bind(tangon)();
            kiloes = _closure1_slot1;
            result = _closure1_slot2;
            michal = 8;
            michal = result[michal];
            michal = kiloes.bind(tangon)(michal);
            yankee = michal.bind(tangon)();
            backup = _closure1_slot0;
            michal = 9;
            michal = result[michal];
            zuuluu = backup.bind(tangon)(michal);
            michal = zuuluu.useGuildProfile;
            zuuluu = michal.bind(zuuluu)(output);
            foxtra = zuuluu.guildProfile;
            michal = zuuluu.fetchGuildProfile;
            var _closure2_slot1 = michal;
            zuuluu = zuuluu.fetchStatus;
            report = 10;
            report = result[report];
            option = backup.bind(tangon)(report);
            golfie = option.useStateFromStores;
            report = _closure1_slot6;
            oscard = new Array(1);
            oscard[0] = report;
            report = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getErrorCode;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            golfie = golfie.bind(option)(oscard, report);
            romeon = 11;
            report = result[romeon];
            verify = backup.bind(tangon)(report);
            oscard = verify.useToken;
            option = 7;
            report = result[option];
            report = kiloes.bind(tangon)(report);
            report = report.colors;
            report = report.INTERACTIVE_HOVER;
            yankee = oscard.bind(verify)(report, yankee);
            report = 12;
            report = result[report];
            oscard = backup.bind(tangon)(report);
            report = oscard.useBottomSheetRef;
            oscard = report.bind(oscard)();
            report = oscard.bottomSheetRef;
            verify = oscard.bottomSheetClose;
            oscard = 13;
            oscard = result[oscard];
            echoed = kiloes.bind(tangon)(oscard);
            oscard = 14;
            oscard = result[oscard];
            oscard = kiloes.bind(tangon)(oscard);
            oscard = oscard.GUILD_PROFILE;
            oscard = echoed.bind(tangon)(oscard);
            oscard = oscard.analyticsLocations;
            var _closure2_slot2 = oscard;
            romeon = result[romeon];
            backup = backup.bind(tangon)(romeon);
            romeon = backup.useToken;
            option = result[option];
            option = kiloes.bind(tangon)(option);
            option = option.colors;
            option = option.BG_BASE_PRIMARY;
            option = romeon.bind(backup)(option);
            var _closure2_slot3 = option;
            kiloes = _closure1_slot3;
            backup = kiloes.useEffect;
            romeon = new Array(2);
            romeon[0] = output;
            romeon[1] = oscard;
            oscard = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 15;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.trackGuildProfileViewed;
                zuuluu = _closure2_slot0;
                michal = _closure2_slot2;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            oscard = backup.bind(kiloes)(oscard, romeon);
            backup = kiloes.useCallback;
            romeon = new Array(1);
            romeon[0] = michal;
            oscard = function() {
                zuuluu = _closure2_slot1;
                entity = undefined;
                michal = true;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            oscard = backup.bind(kiloes)(oscard, romeon);
            backup = kiloes.useEffect;
            romeon = new Array(1);
            romeon[0] = michal;
            michal = function() {
                michal = _closure2_slot1;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            michal = backup.bind(kiloes)(michal, romeon);
            michal = _closure1_slot7;
            michal = michal.NOT_FETCHED;
            if(!(zuuluu !== michal)) { _fun00002_ip = 777; continue _fun00001 }
 407:
            michal = _closure1_slot7;
            michal = michal.FETCHING;
            if(!(zuuluu !== michal)) { _fun00002_ip = 777; continue _fun00001 }
 424:
            michal = null;
            if(!(michal == foxtra)) { _fun00002_ip = 441; continue _fun00001 }
 430:
            zuuluu = _closure1_slot8;
            if(!(golfie !== zuuluu)) { _fun00002_ip = 650; continue _fun00001 }
 441:
            if(!(michal != foxtra)) { _fun00002_ip = 515; continue _fun00001 }
 445:
            romeon = _closure1_slot10;
            golfie = _closure1_slot1;
            backup = _closure1_slot2;
            michal = 20;
            michal = backup[michal];
            zuuluu = golfie.bind(tangon)(michal);
            michal = {};
            michal['guildProfile'] = foxtra;
            zuuluu = romeon.bind(tangon)(zuuluu, michal);
            michal = 21;
            michal = backup[michal];
            golfie = golfie.bind(tangon)(michal);
            michal = {};
            michal['profile'] = foxtra;
            backup = romeon.bind(tangon)(golfie, michal);
            golfie = zuuluu;
            _fun00002_ip = 833; continue _fun00001;
 515:
            romeon = _closure1_slot10;
            zuuluu = _closure1_slot1;
            echoed = _closure1_slot2;
            michal = 19;
            michal = echoed[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = {};
            michal['onRetry'] = oscard;
            golfie = romeon.bind(tangon)(zuuluu, michal);
            result = _closure1_slot0;
            michal = 17;
            michal = echoed[michal];
            michal = result.bind(tangon)(michal);
            oscard = michal.Button;
            michal = {};
            foxtra = 'lg';
            michal['size'] = foxtra;
            foxtra = 18;
            kiloes = echoed[foxtra];
            kiloes = result.bind(tangon)(kiloes);
            output = kiloes.intl;
            kiloes = output.string;
            foxtra = echoed[foxtra];
            foxtra = result.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.cpT0Cg;
            foxtra = kiloes.bind(output)(foxtra);
            michal['text'] = foxtra;
            michal['onPress'] = verify;
            backup = romeon.bind(tangon)(oscard, michal);
            _fun00002_ip = 833; continue _fun00001;
 650:
            romeon = _closure1_slot10;
            zuuluu = _closure1_slot1;
            echoed = _closure1_slot2;
            michal = 16;
            michal = echoed[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = {};
            golfie = romeon.bind(tangon)(zuuluu, michal);
            result = _closure1_slot0;
            michal = 17;
            michal = echoed[michal];
            michal = result.bind(tangon)(michal);
            oscard = michal.Button;
            michal = {};
            foxtra = 'lg';
            michal['size'] = foxtra;
            foxtra = 18;
            kiloes = echoed[foxtra];
            kiloes = result.bind(tangon)(kiloes);
            output = kiloes.intl;
            kiloes = output.string;
            foxtra = echoed[foxtra];
            foxtra = result.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.cpT0Cg;
            foxtra = kiloes.bind(output)(foxtra);
            michal['text'] = foxtra;
            michal['onPress'] = verify;
            backup = romeon.bind(tangon)(oscard, michal);
            _fun00002_ip = 833; continue _fun00001;
 777:
            oscard = _closure1_slot10;
            zuuluu = _closure1_slot4;
            michal = {};
            romeon = offset.loadingContainer;
            michal['style'] = romeon;
            foxtra = _closure1_slot5;
            romeon = {'animating': true, 'size': 'large'};
            romeon = oscard.bind(tangon)(foxtra, romeon);
            michal['children'] = romeon;
            golfie = oscard.bind(tangon)(zuuluu, michal);
            backup = null;
 833:
            oscard = _closure1_slot3;
            zuuluu = oscard.useMemo;
            michal = new Array(1);
            michal[0] = option;
            entity = function() {
                michal = _closure1_slot1;
                zuuluu = _closure1_slot2;
                entity = 22;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = _closure2_slot3;
                tangon = entity.bind(zuuluu)(michal);
                zuuluu = tangon.alpha;
                entity = 0;
                zuuluu = zuuluu.bind(tangon)(entity);
                entity = zuuluu.hex;
                zuuluu = entity.bind(zuuluu)();
                entity = new Array(2);
                entity[0] = zuuluu;
                entity[1] = michal;
                return entity;
            };
            kiloes = zuuluu.bind(oscard)(entity, michal);
            zuuluu = _closure1_slot11;
            romeon = _closure1_slot0;
            foxtra = _closure1_slot2;
            entity = 23;
            entity = foxtra[entity];
            entity = romeon.bind(tangon)(entity);
            michal = entity.BottomSheet;
            entity = {'ref': null, 'scrollable': true, 'handleDisabled': true};
            entity['ref'] = report;
            option = _closure1_slot10;
            oscard = _closure1_slot1;
            report = 24;
            report = foxtra[report];
            oscard = oscard.bind(tangon)(report);
            report = {};
            sizing = _closure1_slot9;
            sizing = sizing.START;
            report['start'] = sizing;
            sizing = {'x': 0, 'y': 0.5};
            report['end'] = sizing;
            sizing = offset.footerContainer;
            report['style'] = sizing;
            report['colors'] = kiloes;
            report['children'] = backup;
            report = option.bind(tangon)(oscard, report);
            entity['footer'] = report;
            report = 25;
            report = foxtra[report];
            report = romeon.bind(tangon)(report);
            oscard = report.BottomSheetScrollView;
            report = {};
            offset = offset.scrollView;
            report['style'] = offset;
            report['children'] = golfie;
            oscard = option.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = 26;
            oscard = foxtra[oscard];
            oscard = romeon.bind(tangon)(oscard);
            golfie = oscard.ActionSheetHeaderBar;
            oscard = {};
            offset = 27;
            offset = foxtra[offset];
            offset = romeon.bind(tangon)(offset);
            offset = offset.ActionSheetHeaderBarVariants;
            offset = offset.FLOATING;
            oscard['variant'] = offset;
            offset = {};
            offset['backgroundColor'] = yankee;
            oscard['tabStyle'] = offset;
            oscard['onPress'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();