// app/modules/guild_profile/native/components/GuildProfileHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    report = golfie[entity];
    michal = argCor;
    entity = undefined;
    michal = michal.bind(entity)(report);
    var _closure1_slot3 = michal;
    offset = 1;
    michal = golfie[offset];
    michal = oscard.bind(entity)(michal);
    michal = michal.View;
    var _closure1_slot4 = michal;
    michal = 2;
    michal = golfie[michal];
    michal = foxtra.bind(entity)(michal);
    var _closure1_slot5 = michal;
    michal = 3;
    michal = golfie[michal];
    michal = foxtra.bind(entity)(michal);
    var _closure1_slot6 = michal;
    michal = 4;
    michal = golfie[michal];
    michal = foxtra.bind(entity)(michal);
    var _closure1_slot7 = michal;
    michal = 5;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.getBadgeTooltip;
    var _closure1_slot8 = michal;
    michal = 6;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.jsx;
    var _closure1_slot9 = report;
    michal = michal.jsxs;
    var _closure1_slot10 = michal;
    michal = 7;
    michal = golfie[michal];
    option = oscard.bind(entity)(michal);
    report = option.createStyles;
    michal = {};
    yankee = 'flex';
    verify = {'paddingHorizontal': 16, 'marginTop': 4294967264, 'display': 'flex', 'flexDirection': 'column', 'gap': 0};
    michal['header'] = verify;
    verify = {'width': 86, 'height': 86, 'borderRadius': 28.666666666666668, 'backgroundColor': null, 'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'overflow': 'hidden'};
    romeon = 8;
    backup = golfie[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BG_BASE_PRIMARY;
    verify['backgroundColor'] = backup;
    michal['avatarBackground'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'gap': 8};
    michal['members'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'gap': 4};
    michal['memberCount'] = verify;
    verify = {'width': 8, 'height': 8, 'borderRadius': 4};
    backup = golfie[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.STATUS_OFFLINE;
    verify['backgroundColor'] = backup;
    michal['dot'] = verify;
    verify = {'width': 8, 'height': 8, 'borderRadius': 4};
    romeon = golfie[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.STATUS_ONLINE;
    verify['backgroundColor'] = romeon;
    michal['dotOnline'] = verify;
    verify = {};
    verify['display'] = yankee;
    michal['established'] = verify;
    verify = {'marginTop': 4, 'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    michal['nameRow'] = verify;
    verify = {};
    verify['flexShrink'] = offset;
    michal['guildName'] = verify;
    verify = {'marginLeft': 8, 'height': 24, 'width': 24};
    michal['guildIcon'] = verify;
    michal = report.bind(option)(michal);
    var _closure1_slot11 = michal;
    report = 23;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/guild_profile/native/components/GuildProfileHeader.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: GuildProfileHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            config = michal.profile;
            var _closure2_slot0 = config;
            result = michal.guildIconSource;
            michal = _closure1_slot11;
            tangon = undefined;
            offset = michal.bind(tangon)();
            yankee = _closure1_slot0;
            option = _closure1_slot2;
            michal = 9;
            zuuluu = option[michal];
            verify = yankee.bind(tangon)(zuuluu);
            golfie = verify.useStateFromStores;
            zuuluu = _closure1_slot5;
            report = new Array(1);
            report[0] = zuuluu;
            zuuluu = function() {
                entity = _closure1_slot5;
                entity = entity.locale;
                return entity;
            };
            romeon = golfie.bind(verify)(report, zuuluu);
            zuuluu = 10;
            zuuluu = option[zuuluu];
            golfie = yankee.bind(tangon)(zuuluu);
            report = golfie.getEstablishedDate;
            verify = _closure1_slot1;
            zuuluu = 11;
            zuuluu = option[zuuluu];
            backup = verify.bind(tangon)(zuuluu);
            foxtra = backup.extractTimestamp;
            zuuluu = config.id;
            zuuluu = foxtra.bind(backup)(zuuluu);
            kiloes = report.bind(golfie)(zuuluu, romeon);
            zuuluu = 12;
            zuuluu = option[zuuluu];
            report = yankee.bind(tangon)(zuuluu);
            zuuluu = report.fromGuildProfile;
            echoed = zuuluu.bind(report)(config);
            report = _closure1_slot3;
            romeon = report.useCallback;
            golfie = new Array(1);
            golfie[0] = config;
            zuuluu = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    report = _closure1_slot0;
                    oscard = _closure1_slot2;
                    entity = 12;
                    zuuluu = oscard[entity];
                    entity = undefined;
                    golfie = report.bind(entity)(zuuluu);
                    tangon = golfie.fromGuildProfile;
                    zuuluu = _closure2_slot0;
                    golfie = tangon.bind(golfie)(zuuluu);
                    zuuluu = 13;
                    zuuluu = oscard[zuuluu];
                    tangon = report.bind(entity)(zuuluu);
                    zuuluu = tangon.getGuildTraits;
                    zuuluu = zuuluu.bind(tangon)(golfie);
                    tangon = 14;
                    tangon = oscard[tangon];
                    report = report.bind(entity)(tangon);
                    tangon = report.getBadgeCategory;
                    report = tangon.bind(report)(zuuluu);
                    tangon = _closure1_slot8;
                    zuuluu = zuuluu.visibility;
                    zuuluu = tangon.bind(entity)(report, zuuluu);
                    report = zuuluu.tooltipTitle;
                    oscard = zuuluu.tooltipSubtitle;
                    golfie = null;
                    zuuluu = golfie == report;
                    if(!zuuluu) { _fun00004_ip = 130; continue _fun00003 }
 126:
                    zuuluu = golfie == oscard;
 130:
                    if(zuuluu) { _fun00004_ip = 187; continue _fun00003 }
 133:
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    michal = 15;
                    michal = tangon[michal];
                    tangon = zuuluu.bind(entity)(michal);
                    zuuluu = tangon.open;
                    michal = {};
                    option = 'guild-badge-tooltip';
                    michal['key'] = option;
                    if(!(golfie != oscard)) { _fun00004_ip = 178; continue _fun00003 }
 175:
                    report = oscard;
 178:
                    michal['content'] = report;
                    michal = zuuluu.bind(tangon)(michal);
 187:
                    return entity;
                }
            };
            output = romeon.bind(report)(zuuluu, golfie);
            golfie = config.id;
            var _closure2_slot1 = golfie;
            michal = option[michal];
            backup = yankee.bind(tangon)(michal);
            foxtra = backup.useStateFromStores;
            michal = _closure1_slot7;
            romeon = new Array(2);
            romeon[0] = michal;
            michal = _closure1_slot6;
            romeon[1] = michal;
            zuuluu = new Array(1);
            zuuluu[0] = golfie;
            michal = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    tangon = _closure1_slot7;
                    zuuluu = tangon.getMember;
                    michal = _closure2_slot1;
                    report = _closure1_slot6;
                    entity = report.getId;
                    entity = entity.bind(report)();
                    zuuluu = zuuluu.bind(tangon)(michal, entity);
                    michal = null;
                    tangon = michal == zuuluu;
                    entity = undefined;
                    if(tangon) { _fun00006_ip = 57; continue _fun00005 }
 51:
                    entity = zuuluu.joinedAt;
 57:
                    entity = michal != entity;
                    return entity;
                }
            };
            sizing = foxtra.bind(backup)(romeon, michal, zuuluu);
            var _closure2_slot2 = sizing;
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = sizing;
            entity = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = _closure2_slot2;
                    if(!entity) { _fun00008_ip = 101; continue _fun00007 }
 10:
                    oscard = _closure1_slot1;
                    report = _closure1_slot2;
                    zuuluu = 16;
                    zuuluu = report[zuuluu];
                    tangon = undefined;
                    golfie = oscard.bind(tangon)(zuuluu);
                    oscard = golfie.hideActionSheet;
                    zuuluu = _closure2_slot1;
                    michal = global;
                    michal = michal.HermesInternal;
                    option = michal.concat;
                    michal = 'GuildProfileActionSheet:';
                    michal = option.bind(michal)(zuuluu);
                    michal = oscard.bind(golfie)(michal);
                    michal = _closure1_slot0;
                    entity = 17;
                    entity = report[entity];
                    michal = michal.bind(tangon)(entity);
                    entity = michal.transitionToGuild;
                    entity = entity.bind(michal)(zuuluu);
 101:
                    entity = undefined;
                    return entity;
                }
            };
            backup = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot10;
            michal = _closure1_slot4;
            entity = {};
            report = offset.header;
            entity['style'] = report;
            romeon = _closure1_slot9;
            report = {};
            golfie = offset.avatarBackground;
            report['style'] = golfie;
            foxtra = 18;
            golfie = option[foxtra];
            verify = verify.bind(tangon)(golfie);
            golfie = {};
            golfie['icon'] = result;
            foxtra = option[foxtra];
            foxtra = yankee.bind(tangon)(foxtra);
            foxtra = foxtra.GuildIconSizes;
            foxtra = foxtra.XXLARGE;
            golfie['size'] = foxtra;
            foxtra = true;
            golfie['animate'] = foxtra;
            foxtra = config.name;
            golfie['value'] = foxtra;
            foxtra = false;
            golfie['selected'] = foxtra;
            golfie = romeon.bind(tangon)(verify, golfie);
            report['children'] = golfie;
            golfie = romeon.bind(tangon)(michal, report);
            report = new Array(4);
            report[0] = golfie;
            golfie = {};
            verify = offset.nameRow;
            golfie['style'] = verify;
            verify = 19;
            option = option[verify];
            option = yankee.bind(tangon)(option);
            yankee = option.Text;
            option = {'onPress': null, 'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/semibold', 'color': 'header-primary', 'lineClamp': 1};
            foxtra = undefined;
            if(!sizing) { _fun00002_ip = 460; continue _fun00001 }
 457:
            foxtra = backup;
 460:
            option['onPress'] = foxtra;
            foxtra = offset.guildName;
            option['style'] = foxtra;
            foxtra = config.name;
            option['children'] = foxtra;
            option = romeon.bind(tangon)(yankee, option);
            yankee = new Array(2);
            yankee[0] = option;
            option = _closure1_slot9;
            romeon = _closure1_slot0;
            sizing = _closure1_slot2;
            foxtra = 20;
            foxtra = sizing[foxtra];
            foxtra = romeon.bind(tangon)(foxtra);
            backup = foxtra.PressableHighlight;
            foxtra = {};
            foxtra['onPress'] = output;
            result = _closure1_slot1;
            output = 21;
            output = sizing[output];
            result = result.bind(tangon)(output);
            output = {};
            output['guild'] = echoed;
            echoed = offset.guildIcon;
            output['style'] = echoed;
            output = option.bind(tangon)(result, output);
            foxtra['children'] = output;
            foxtra = option.bind(tangon)(backup, foxtra);
            yankee[1] = foxtra;
            golfie['children'] = yankee;
            golfie = zuuluu.bind(tangon)(michal, golfie);
            report[1] = golfie;
            foxtra = _closure1_slot10;
            golfie = _closure1_slot4;
            oscard = {};
            yankee = offset.members;
            oscard['style'] = yankee;
            backup = {};
            yankee = offset.memberCount;
            backup['style'] = yankee;
            yankee = {};
            output = offset.dotOnline;
            yankee['style'] = output;
            yankee = option.bind(tangon)(golfie, yankee);
            output = new Array(2);
            output[0] = yankee;
            yankee = sizing[verify];
            yankee = romeon.bind(tangon)(yankee);
            echoed = yankee.Text;
            result = {'variant': 'text-md/medium', 'color': 'header-secondary'};
            yankee = 22;
            update = sizing[yankee];
            update = romeon.bind(tangon)(update);
            vacuum = update.intl;
            ctrled = vacuum.format;
            update = sizing[yankee];
            update = romeon.bind(tangon)(update);
            update = update.t;
            source = update.LC+S+v;
            update = {};
            sequen = config.onlineCount;
            update['membersOnline'] = sequen;
            update = ctrled.bind(vacuum)(source, update);
            result['children'] = update;
            result = option.bind(tangon)(echoed, result);
            output[1] = result;
            backup['children'] = output;
            output = foxtra.bind(tangon)(golfie, backup);
            backup = new Array(2);
            backup[0] = output;
            output = {};
            result = offset.memberCount;
            output['style'] = result;
            result = {};
            echoed = offset.dot;
            result['style'] = echoed;
            echoed = option.bind(tangon)(golfie, result);
            result = new Array(2);
            result[0] = echoed;
            echoed = sizing[verify];
            echoed = romeon.bind(tangon)(echoed);
            update = echoed.Text;
            echoed = {'variant': 'text-md/medium', 'color': 'header-secondary'};
            source = sizing[yankee];
            source = romeon.bind(tangon)(source);
            sequen = source.intl;
            vacuum = sequen.format;
            source = sizing[yankee];
            source = romeon.bind(tangon)(source);
            source = source.t;
            ctrled = source.zRl6XV;
            source = {};
            config = config.memberCount;
            source['count'] = config;
            source = vacuum.bind(sequen)(ctrled, source);
            echoed['children'] = source;
            echoed = option.bind(tangon)(update, echoed);
            result[1] = echoed;
            output['children'] = result;
            output = foxtra.bind(tangon)(golfie, output);
            backup[1] = output;
            oscard['children'] = backup;
            oscard = foxtra.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            oscard = {};
            offset = offset.established;
            oscard['style'] = offset;
            verify = sizing[verify];
            verify = romeon.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-md/medium', 'color': 'text-muted'};
            foxtra = sizing[yankee];
            foxtra = romeon.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.format;
            yankee = sizing[yankee];
            yankee = romeon.bind(tangon)(yankee);
            yankee = yankee.t;
            romeon = yankee.zb2Q5+;
            yankee = {};
            yankee['createdAtDate'] = kiloes;
            yankee = foxtra.bind(backup)(romeon, yankee);
            verify['children'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[3] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['useStyles'] = michal;
    return entity;
})();