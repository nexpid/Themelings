// app/modules/guild_profile/native/components/v2/GuildProfileLoadingError.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_profile/native/components/v2/GuildProfileLoadingError.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildProfileLoadingError
        entity = argFoo;
        romeo = entity.onRetry;
        output = _closure1_slot0;
        result = _closure1_slot2;
        golf = 3;
        entity = result[golf];
        tango = undefined;
        mike = output.bind(tango)(entity);
        entity = mike.useStyles;
        echo = entity.bind(mike)();
        sizing = _closure1_slot1;
        entity = 4;
        entity = result[entity];
        entity = sizing.bind(tango)(entity);
        offset = entity.bind(tango)();
        entity = 5;
        entity = result[entity];
        zulu = output.bind(tango)(entity);
        mike = zulu.useToken;
        kilo = 6;
        entity = result[kilo];
        entity = sizing.bind(tango)(entity);
        entity = entity.colors;
        entity = entity.BG_BASE_TERTIARY;
        verify = mike.bind(zulu)(entity);
        zulu = _closure1_slot5;
        mike = _closure1_slot3;
        entity = {};
        oscar = echo.container;
        entity['style'] = oscar;
        foxtrot = _closure1_slot4;
        report = 7;
        report = result[report];
        oscar = sizing.bind(tango)(report);
        report = {};
        options = echo.colorBanner;
        report['style'] = options;
        options = result[golf];
        options = output.bind(tango)(options);
        options = options.DiagonalGradient;
        options = options.START;
        report['start'] = options;
        options = result[golf];
        options = output.bind(tango)(options);
        options = options.DiagonalGradient;
        options = options.END;
        report['end'] = options;
        golf = result[golf];
        options = output.bind(tango)(golf);
        golf = options.getBackgroundForProfile;
        golf = golf.bind(options)(offset, verify);
        report['colors'] = golf;
        oscar = foxtrot.bind(tango)(oscar, report);
        report = new Array(3);
        report[0] = oscar;
        oscar = {};
        golf = echo.header;
        oscar['style'] = golf;
        golf = {};
        options = echo.avatarBackground;
        golf['style'] = options;
        options = {};
        verify = echo.avatarBackground;
        options['style'] = verify;
        offset = 8;
        verify = result[offset];
        verify = output.bind(tango)(verify);
        yankee = verify.WarningIcon;
        verify = {};
        backup = 'lg';
        verify['size'] = backup;
        backup = result[kilo];
        backup = sizing.bind(tango)(backup);
        backup = backup.colors;
        backup = backup.TEXT_WARNING;
        verify['color'] = backup;
        verify = foxtrot.bind(tango)(yankee, verify);
        options['children'] = verify;
        options = foxtrot.bind(tango)(mike, options);
        golf['children'] = options;
        golf = foxtrot.bind(tango)(mike, golf);
        oscar['children'] = golf;
        oscar = foxtrot.bind(tango)(mike, oscar);
        report[1] = oscar;
        oscar = {};
        golf = echo.body;
        oscar['style'] = golf;
        yankee = 9;
        golf = result[yankee];
        golf = output.bind(tango)(golf);
        options = golf.Text;
        golf = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
        backup = 10;
        verify = result[backup];
        verify = output.bind(tango)(verify);
        source = verify.intl;
        update = source.string;
        verify = result[backup];
        verify = output.bind(tango)(verify);
        verify = verify.t;
        verify = verify.DmIUGB;
        verify = update.bind(source)(verify);
        golf['children'] = verify;
        options = foxtrot.bind(tango)(options, golf);
        golf = new Array(2);
        golf[0] = options;
        options = 11;
        options = result[options];
        options = output.bind(tango)(options);
        verify = options.PressableOpacity;
        options = {};
        echo = echo.error;
        options['style'] = echo;
        options['onPress'] = romeo;
        romeo = 'button';
        options['accessibilityRole'] = romeo;
        romeo = result[backup];
        romeo = output.bind(tango)(romeo);
        update = romeo.intl;
        echo = update.string;
        romeo = result[backup];
        romeo = output.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.s1fAEx;
        romeo = echo.bind(update)(romeo);
        options['accessibilityLabel'] = romeo;
        offset = result[offset];
        offset = output.bind(tango)(offset);
        romeo = offset.WarningIcon;
        offset = {};
        echo = 'sm';
        offset['size'] = echo;
        kilo = result[kilo];
        kilo = sizing.bind(tango)(kilo);
        kilo = kilo.colors;
        kilo = kilo.TEXT_WARNING;
        offset['color'] = kilo;
        romeo = foxtrot.bind(tango)(romeo, offset);
        offset = new Array(2);
        offset[0] = romeo;
        yankee = result[yankee];
        yankee = output.bind(tango)(yankee);
        romeo = yankee.Text;
        yankee = {'variant': 'text-sm/normal', 'color': 'text-warning'};
        kilo = result[backup];
        kilo = output.bind(tango)(kilo);
        sizing = kilo.intl;
        kilo = sizing.string;
        backup = result[backup];
        backup = output.bind(tango)(backup);
        backup = backup.t;
        backup = backup.tmGHjY;
        backup = kilo.bind(sizing)(backup);
        yankee['children'] = backup;
        yankee = foxtrot.bind(tango)(romeo, yankee);
        offset[1] = yankee;
        options['children'] = offset;
        options = zulu.bind(tango)(verify, options);
        golf[1] = options;
        oscar['children'] = golf;
        oscar = zulu.bind(tango)(mike, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();