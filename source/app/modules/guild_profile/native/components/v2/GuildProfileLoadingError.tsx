// app/modules/guild_profile/native/components/v2/GuildProfileLoadingError.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_profile/native/components/v2/GuildProfileLoadingError.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildProfileLoadingError
        entity = argFoo;
        romeon = entity.onRetry;
        output = _closure1_slot0;
        result = _closure1_slot2;
        golfie = 3;
        entity = result[golfie];
        tangon = undefined;
        michal = output.bind(tangon)(entity);
        entity = michal.useStyles;
        echoed = entity.bind(michal)();
        sizing = _closure1_slot1;
        entity = 4;
        entity = result[entity];
        entity = sizing.bind(tangon)(entity);
        offset = entity.bind(tangon)();
        entity = 5;
        entity = result[entity];
        zuuluu = output.bind(tangon)(entity);
        michal = zuuluu.useToken;
        kiloes = 6;
        entity = result[kiloes];
        entity = sizing.bind(tangon)(entity);
        entity = entity.colors;
        entity = entity.BG_BASE_TERTIARY;
        verify = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot5;
        michal = _closure1_slot3;
        entity = {};
        oscard = echoed.container;
        entity['style'] = oscard;
        foxtra = _closure1_slot4;
        report = 7;
        report = result[report];
        oscard = sizing.bind(tangon)(report);
        report = {};
        option = echoed.colorBanner;
        report['style'] = option;
        option = result[golfie];
        option = output.bind(tangon)(option);
        option = option.DiagonalGradient;
        option = option.START;
        report['start'] = option;
        option = result[golfie];
        option = output.bind(tangon)(option);
        option = option.DiagonalGradient;
        option = option.END;
        report['end'] = option;
        golfie = result[golfie];
        option = output.bind(tangon)(golfie);
        golfie = option.getBackgroundForProfile;
        golfie = golfie.bind(option)(offset, verify);
        report['colors'] = golfie;
        oscard = foxtra.bind(tangon)(oscard, report);
        report = new Array(3);
        report[0] = oscard;
        oscard = {};
        golfie = echoed.header;
        oscard['style'] = golfie;
        golfie = {};
        option = echoed.avatarBackground;
        golfie['style'] = option;
        option = {};
        verify = echoed.avatarBackground;
        option['style'] = verify;
        offset = 8;
        verify = result[offset];
        verify = output.bind(tangon)(verify);
        yankee = verify.WarningIcon;
        verify = {};
        backup = 'lg';
        verify['size'] = backup;
        backup = result[kiloes];
        backup = sizing.bind(tangon)(backup);
        backup = backup.colors;
        backup = backup.TEXT_WARNING;
        verify['color'] = backup;
        verify = foxtra.bind(tangon)(yankee, verify);
        option['children'] = verify;
        option = foxtra.bind(tangon)(michal, option);
        golfie['children'] = option;
        golfie = foxtra.bind(tangon)(michal, golfie);
        oscard['children'] = golfie;
        oscard = foxtra.bind(tangon)(michal, oscard);
        report[1] = oscard;
        oscard = {};
        golfie = echoed.body;
        oscard['style'] = golfie;
        yankee = 9;
        golfie = result[yankee];
        golfie = output.bind(tangon)(golfie);
        option = golfie.Text;
        golfie = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
        backup = 10;
        verify = result[backup];
        verify = output.bind(tangon)(verify);
        source = verify.intl;
        update = source.string;
        verify = result[backup];
        verify = output.bind(tangon)(verify);
        verify = verify.t;
        verify = verify.DmIUGB;
        verify = update.bind(source)(verify);
        golfie['children'] = verify;
        option = foxtra.bind(tangon)(option, golfie);
        golfie = new Array(2);
        golfie[0] = option;
        option = 11;
        option = result[option];
        option = output.bind(tangon)(option);
        verify = option.PressableOpacity;
        option = {};
        echoed = echoed.error;
        option['style'] = echoed;
        option['onPress'] = romeon;
        romeon = 'button';
        option['accessibilityRole'] = romeon;
        romeon = result[backup];
        romeon = output.bind(tangon)(romeon);
        update = romeon.intl;
        echoed = update.string;
        romeon = result[backup];
        romeon = output.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.s1fAEx;
        romeon = echoed.bind(update)(romeon);
        option['accessibilityLabel'] = romeon;
        offset = result[offset];
        offset = output.bind(tangon)(offset);
        romeon = offset.WarningIcon;
        offset = {};
        echoed = 'sm';
        offset['size'] = echoed;
        kiloes = result[kiloes];
        kiloes = sizing.bind(tangon)(kiloes);
        kiloes = kiloes.colors;
        kiloes = kiloes.TEXT_WARNING;
        offset['color'] = kiloes;
        romeon = foxtra.bind(tangon)(romeon, offset);
        offset = new Array(2);
        offset[0] = romeon;
        yankee = result[yankee];
        yankee = output.bind(tangon)(yankee);
        romeon = yankee.Text;
        yankee = {'variant': 'text-sm/normal', 'color': 'text-warning'};
        kiloes = result[backup];
        kiloes = output.bind(tangon)(kiloes);
        sizing = kiloes.intl;
        kiloes = sizing.string;
        backup = result[backup];
        backup = output.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.tmGHjY;
        backup = kiloes.bind(sizing)(backup);
        yankee['children'] = backup;
        yankee = foxtra.bind(tangon)(romeon, yankee);
        offset[1] = yankee;
        option['children'] = offset;
        option = zuuluu.bind(tangon)(verify, option);
        golfie[1] = option;
        oscard['children'] = golfie;
        oscard = zuuluu.bind(tangon)(michal, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();