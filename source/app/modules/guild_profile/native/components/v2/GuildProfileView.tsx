// app/modules/guild_profile/native/components/v2/GuildProfileView.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    options = argBar;
    backup = argBaz;
    zulu = argFred;
    verify = argPlugh;
    var _closure1_slot0 = options;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = verify;
    report = function(argFoo, argBar) { // Original name: getBackgroundForProfile
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            oscar = argBar;
            entity = new Array(2);
            entity[0] = oscar;
            mike = _closure1_slot6;
            tango = mike.DARK;
            mike = argFoo;
            if(!(mike !== tango)) { _fun00002_ip = 77; continue _fun00001 }
 31:
            report = _closure1_slot0;
            tango = _closure1_slot2;
            mike = 6;
            tango = tango[mike];
            mike = undefined;
            report = report.bind(mike)(tango);
            tango = report.darkenColor;
            mike = 0.8;
            mike = tango.bind(report)(oscar, mike);
            _fun00002_ip = 121; continue _fun00001;
 77:
            report = _closure1_slot0;
            tango = _closure1_slot2;
            zulu = 5;
            tango = tango[zulu];
            zulu = undefined;
            report = report.bind(zulu)(tango);
            tango = report.brightenColor;
            zulu = 0.8;
            mike = tango.bind(report)(oscar, zulu);
 121:
            entity[1] = mike;
            return entity;
        }
    };
    var _closure1_slot11 = report;
    mike = global;
    offset = mike.Object;
    golf = offset.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(offset)(zulu, entity, tango);
    entity = 0;
    golf = verify[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = verify[tango];
    tango = options.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = verify[tango];
    tango = backup.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = verify[tango];
    tango = options.bind(entity)(tango);
    tango = tango.ThemeTypes;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = verify[tango];
    golf = options.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = verify[tango];
    tango = options.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 7;
    tango = verify[tango];
    offset = options.bind(entity)(tango);
    golf = offset.createStyles;
    tango = {};
    yankee = {};
    foxtrot = 8;
    romeo = verify[foxtrot];
    romeo = backup.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BG_BASE_PRIMARY;
    yankee['backgroundColor'] = romeo;
    tango['container'] = yankee;
    yankee = {'height': 140, 'width': '100%'};
    tango['colorBanner'] = yankee;
    romeo = 'flex';
    yankee = {'paddingHorizontal': 16, 'marginTop': 4294967264, 'display': 'flex', 'flexDirection': 'column', 'gap': 0};
    tango['header'] = yankee;
    yankee = {'width': 86, 'height': 86, 'borderRadius': 28.666666666666668, 'backgroundColor': null, 'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'overflow': 'hidden'};
    kilo = verify[foxtrot];
    kilo = backup.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BG_BASE_PRIMARY;
    yankee['backgroundColor'] = kilo;
    tango['avatarBackground'] = yankee;
    yankee = {'display': 'flex', 'flexDirection': 'row', 'gap': 8};
    tango['members'] = yankee;
    yankee = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'gap': 4};
    tango['memberCount'] = yankee;
    yankee = {'width': 8, 'height': 8, 'borderRadius': 4};
    kilo = verify[foxtrot];
    kilo = backup.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.STATUS_OFFLINE;
    yankee['backgroundColor'] = kilo;
    tango['dot'] = yankee;
    yankee = {'width': 8, 'height': 8, 'borderRadius': 4};
    foxtrot = verify[foxtrot];
    foxtrot = backup.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.STATUS_ONLINE;
    yankee['backgroundColor'] = foxtrot;
    tango['dotOnline'] = yankee;
    yankee = {};
    yankee['display'] = romeo;
    tango['established'] = yankee;
    yankee = {'marginTop': 12, 'paddingHorizontal': 16};
    tango['body'] = yankee;
    yankee = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'gap': 8};
    tango['error'] = yankee;
    yankee = {};
    romeo = 160;
    yankee['marginTop'] = romeo;
    tango['buttonContainer'] = yankee;
    tango = golf.bind(offset)(tango);
    var _closure1_slot9 = tango;
    offset = mike.Object;
    golf = offset.freeze;
    mike = {};
    yankee = {'x': 0, 'y': 1};
    mike['START'] = yankee;
    yankee = {'x': 1.5, 'y': 0};
    mike['END'] = yankee;
    mike = golf.bind(offset)(mike);
    var _closure1_slot10 = mike;
    golf = 20;
    golf = verify[golf];
    verify = options.bind(entity)(golf);
    options = verify.fileFinishedImporting;
    golf = 'modules/guild_profile/native/components/v2/GuildProfileView.tsx';
    golf = options.bind(verify)(golf);
    oscar = function(argFoo) { // Original name: GuildProfileView
        mike = argFoo;
        offset = mike.guildProfile;
        var _closure2_slot0 = offset;
        mike = _closure1_slot9;
        tango = undefined;
        romeo = mike.bind(tango)();
        backup = _closure1_slot1;
        yankee = _closure1_slot2;
        mike = 9;
        mike = yankee[mike];
        mike = backup.bind(tango)(mike);
        kilo = mike.bind(tango)();
        verify = _closure1_slot0;
        mike = 10;
        mike = yankee[mike];
        oscar = verify.bind(tango)(mike);
        report = oscar.useStateFromStores;
        mike = _closure1_slot5;
        zulu = new Array(1);
        zulu[0] = mike;
        mike = function() {
            entity = _closure1_slot5;
            entity = entity.locale;
            return entity;
        };
        report = report.bind(oscar)(zulu, mike);
        oscar = _closure1_slot3;
        zulu = oscar.useMemo;
        mike = new Array(1);
        mike[0] = offset;
        entity = function() {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                mike = _closure2_slot0;
                entity = null;
                if(!(entity != mike)) { _fun00004_ip = 108; continue _fun00003 }
 13:
                tango = _closure1_slot1;
                zulu = _closure1_slot2;
                mike = 11;
                zulu = zulu[mike];
                mike = undefined;
                tango = tango.bind(mike)(zulu);
                zulu = tango.getGuildIconSource;
                mike = {};
                report = _closure2_slot0;
                oscar = report.id;
                mike['id'] = oscar;
                report = report.icon;
                mike['icon'] = report;
                report = 96;
                mike['size'] = report;
                report = true;
                mike['canAnimate'] = report;
                zulu = zulu.bind(tango)(mike);
                report = 'number';
                tango = typeof zulu;
                mike = null;
                if(!(report !== tango)) { _fun00004_ip = 106; continue _fun00003 }
 100:
                mike = zulu.uri;
 106:
                return mike;
 108:
                return entity;
            }
        };
        sizing = zulu.bind(oscar)(entity, mike);
        entity = 12;
        entity = yankee[entity];
        zulu = verify.bind(tango)(entity);
        mike = zulu.useToken;
        entity = 8;
        entity = yankee[entity];
        entity = backup.bind(tango)(entity);
        entity = entity.colors;
        entity = entity.BG_BASE_TERTIARY;
        mike = mike.bind(zulu)(entity);
        entity = 13;
        entity = yankee[entity];
        entity = backup.bind(tango)(entity);
        foxtrot = entity.bind(tango)(sizing, mike);
        entity = 14;
        entity = yankee[entity];
        zulu = verify.bind(tango)(entity);
        mike = zulu.getEstablishedDate;
        entity = 15;
        entity = yankee[entity];
        golf = backup.bind(tango)(entity);
        oscar = golf.extractTimestamp;
        entity = offset.id;
        entity = oscar.bind(golf)(entity);
        source = mike.bind(zulu)(entity, report);
        zulu = _closure1_slot8;
        mike = _closure1_slot4;
        entity = {};
        report = romeo.container;
        entity['style'] = report;
        golf = _closure1_slot7;
        report = 16;
        report = yankee[report];
        oscar = backup.bind(tango)(report);
        report = {};
        output = romeo.colorBanner;
        report['style'] = output;
        output = _closure1_slot10;
        result = output.START;
        report['start'] = result;
        output = output.END;
        report['end'] = output;
        options = _closure1_slot11;
        options = options.bind(tango)(kilo, foxtrot);
        report['colors'] = options;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(3);
        report[0] = oscar;
        oscar = {};
        options = romeo.header;
        oscar['style'] = options;
        options = {};
        foxtrot = romeo.avatarBackground;
        options['style'] = foxtrot;
        kilo = 17;
        foxtrot = yankee[kilo];
        backup = backup.bind(tango)(foxtrot);
        foxtrot = {};
        foxtrot['icon'] = sizing;
        kilo = yankee[kilo];
        kilo = verify.bind(tango)(kilo);
        kilo = kilo.GuildIconSizes;
        kilo = kilo.XXLARGE;
        foxtrot['size'] = kilo;
        kilo = true;
        foxtrot['animate'] = kilo;
        kilo = offset.name;
        foxtrot['value'] = kilo;
        kilo = false;
        foxtrot['selected'] = kilo;
        foxtrot = golf.bind(tango)(backup, foxtrot);
        options['children'] = foxtrot;
        options = golf.bind(tango)(mike, options);
        foxtrot = new Array(4);
        foxtrot[0] = options;
        options = 18;
        backup = yankee[options];
        backup = verify.bind(tango)(backup);
        kilo = backup.Text;
        backup = {'accessibilityRole': 'header', 'variant': 'heading-xl/semibold', 'color': 'header-primary'};
        sizing = offset.name;
        backup['children'] = sizing;
        backup = golf.bind(tango)(kilo, backup);
        foxtrot[1] = backup;
        backup = {};
        kilo = romeo.members;
        backup['style'] = kilo;
        kilo = {};
        sizing = romeo.memberCount;
        kilo['style'] = sizing;
        sizing = {};
        output = romeo.dot;
        sizing['style'] = output;
        output = golf.bind(tango)(mike, sizing);
        sizing = new Array(2);
        sizing[0] = output;
        output = yankee[options];
        output = verify.bind(tango)(output);
        echo = output.Text;
        result = {'variant': 'text-md/medium', 'color': 'text-secondary'};
        output = 19;
        update = yankee[output];
        update = verify.bind(tango)(update);
        sequence = update.intl;
        vacuum = sequence.format;
        update = yankee[output];
        update = verify.bind(tango)(update);
        update = update.t;
        control = update.zRl6XV;
        update = {};
        config = offset.memberCount;
        update['count'] = config;
        update = vacuum.bind(sequence)(control, update);
        result['children'] = update;
        result = golf.bind(tango)(echo, result);
        sizing[1] = result;
        kilo['children'] = sizing;
        sizing = zulu.bind(tango)(mike, kilo);
        kilo = new Array(2);
        kilo[0] = sizing;
        sizing = {};
        result = romeo.memberCount;
        sizing['style'] = result;
        result = {};
        echo = romeo.dotOnline;
        result['style'] = echo;
        echo = golf.bind(tango)(mike, result);
        result = new Array(2);
        result[0] = echo;
        echo = yankee[options];
        echo = verify.bind(tango)(echo);
        update = echo.Text;
        echo = {'variant': 'text-md/medium', 'color': 'text-secondary'};
        control = yankee[output];
        control = verify.bind(tango)(control);
        config = control.intl;
        sequence = config.format;
        control = yankee[output];
        control = verify.bind(tango)(control);
        control = control.t;
        vacuum = control.LC+S+v;
        control = {};
        record = offset.onlineCount;
        control['membersOnline'] = record;
        control = sequence.bind(config)(vacuum, control);
        echo['children'] = control;
        echo = golf.bind(tango)(update, echo);
        result[1] = echo;
        sizing['children'] = result;
        sizing = zulu.bind(tango)(mike, sizing);
        kilo[1] = sizing;
        backup['children'] = kilo;
        backup = zulu.bind(tango)(mike, backup);
        foxtrot[2] = backup;
        backup = {};
        kilo = romeo.established;
        backup['style'] = kilo;
        kilo = yankee[options];
        kilo = verify.bind(tango)(kilo);
        sizing = kilo.Text;
        kilo = {'variant': 'text-md/medium', 'color': 'text-secondary'};
        result = yankee[output];
        result = verify.bind(tango)(result);
        update = result.intl;
        echo = update.format;
        output = yankee[output];
        output = verify.bind(tango)(output);
        output = output.t;
        result = output.zb2Q5+;
        output = {};
        output['createdAtDate'] = source;
        output = echo.bind(update)(result, output);
        kilo['children'] = output;
        kilo = golf.bind(tango)(sizing, kilo);
        backup['children'] = kilo;
        backup = golf.bind(tango)(mike, backup);
        foxtrot[3] = backup;
        oscar['children'] = foxtrot;
        oscar = zulu.bind(tango)(mike, oscar);
        report[1] = oscar;
        oscar = {};
        romeo = romeo.body;
        oscar['style'] = romeo;
        options = yankee[options];
        options = verify.bind(tango)(options);
        verify = options.Text;
        options = {'variant': 'text-md/medium', 'color': 'text-secondary'};
        offset = offset.description;
        options['children'] = offset;
        options = golf.bind(tango)(verify, options);
        oscar['children'] = options;
        oscar = golf.bind(tango)(mike, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = oscar;
    zulu['getBackgroundForProfile'] = report;
    zulu['useStyles'] = tango;
    zulu['DiagonalGradient'] = mike;
    return entity;
})();