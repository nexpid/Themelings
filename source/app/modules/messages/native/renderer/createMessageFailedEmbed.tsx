// app/modules/messages/native/renderer/createMessageFailedEmbed.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var1 = metroImportDefault;
    var _closure1_slot1 = var1;
    var _closure1_slot2 = var6;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var5.bind(var1)(var4);
    var4 = var4.MessageFailureState;
    var _closure1_slot3 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.MessageEmbedTypes;
    var _closure1_slot4 = var4;
    var4 = 7;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/messages/native/renderer/createMessageFailedEmbed.tsx';
    var4 = var5.bind(var6)(var4);
    var4 = function createMessageFailedEmbed(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var1 = arg1;
            var4 = var1.uploaderFile;
            var2 = var1.useAttachmentUploadPreview;
            var5 = var1.colors;
            var1 = null;
            if(!(var1 == var4)) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var1 = {};
            var6 = _closure1_slot4;
            var6 = var6.TEXT;
            var1['type'] = var6;
            var10 = _closure1_slot0;
            var11 = _closure1_slot2;
            var6 = 4;
            var7 = var11[var6];
            var9 = undefined;
            var7 = var10.bind(var9)(var7);
            var8 = var7.intl;
            var7 = var8.string;
            var6 = var11[var6];
            var6 = var10.bind(var9)(var6);
            var6 = var6.t;
            var6 = var6.lBLP4u;
            var6 = var7.bind(var8)(var6);
            var1['messageSendError'] = var6;
            var3 = _closure1_slot3;
            var3 = var3.UNSPECIFIED;
            var1['failureState'] = var3;
            var3 = true;
            var1['disableBackgroundColor'] = var3;
            var3 = var5.failedMessageBodyTextColor;
            var1['bodyTextColor'] = var3;
            _fun0001_ip = 4; continue _fun0001;
case 2:
            if(var2) { _fun0001_ip = 5; continue _fun0001 }
case 6:
            var2 = {};
            var3 = _closure1_slot4;
            var3 = var3.TEXT;
            var2['type'] = var3;
            var7 = _closure1_slot0;
            var11 = _closure1_slot2;
            var3 = 4;
            var9 = var11[var3];
            var8 = undefined;
            var9 = var7.bind(var8)(var9);
            var10 = var9.intl;
            var9 = var10.formatToPlainString;
            var3 = var11[var3];
            var3 = var7.bind(var8)(var3);
            var3 = var3.t;
            var7 = var3.D0noUl;
            var3 = {};
            var11 = var4.attachmentsCount;
            var3['count'] = var11;
            var3 = var9.bind(var10)(var7, var3);
            var2['numAttachments'] = var3;
            var3 = _closure1_slot3;
            var3 = var3.UPLOAD_FAILED;
            var2['failureState'] = var3;
            var9 = var4.currentSize;
            var3 = '';
            var7 = 0;
            if(!(var7 !== var9)) { _fun0001_ip = 7; continue _fun0001 }
case 8:
            var7 = _closure1_slot0;
            var9 = _closure1_slot2;
            var6 = 6;
            var6 = var9[var6];
            var7 = var7.bind(var8)(var6);
            var6 = var7.sizeString;
            var4 = var4.currentSize;
            var8 = var6.bind(var7)(var4);
            var4 = global;
            var4 = var4.HermesInternal;
            var7 = var4.concat;
            var6 = ' (';
            var4 = ')';
            var3 = var7.bind(var6)(var8, var4);
case 7:
            var3 = '' + var3;
            var2['attachmentsSize'] = var3;
            var3 = var5.embedBodyTextColor;
            var2['bodyTextColor'] = var3;
            _fun0001_ip = 9; continue _fun0001;
case 5:
            var3 = {};
            var6 = _closure1_slot4;
            var6 = var6.TEXT;
            var3['type'] = var6;
            var6 = _closure1_slot0;
            var9 = _closure1_slot2;
            var7 = 4;
            var10 = var9[var7];
            var8 = undefined;
            var10 = var6.bind(var8)(var10);
            var11 = var10.intl;
            var10 = var11.string;
            var7 = var9[var7];
            var7 = var6.bind(var8)(var7);
            var7 = var7.t;
            var7 = var7.lBLP4u;
            var7 = var10.bind(var11)(var7);
            var3['messageSendError'] = var7;
            var7 = _closure1_slot3;
            var7 = var7.UNSPECIFIED;
            var3['failureState'] = var7;
            var7 = true;
            var3['disableBackgroundColor'] = var7;
            var5 = var5.failedMessageBodyTextColor;
            var3['bodyTextColor'] = var5;
            var5 = 2;
            var5 = var9[var5];
            var6 = var6.bind(var8)(var5);
            var5 = var6.getAssetUriForEmbed;
            var7 = _closure1_slot1;
            var4 = 5;
            var4 = var9[var4];
            var4 = var7.bind(var8)(var4);
            var4 = var5.bind(var6)(var4);
            var3['iconURL'] = var4;
            var2 = var3;
case 9:
            var1 = var2;
case 4:
            return var1;
        }
    };
    var3['default'] = var4;
    var2 = function createAutomodBlockedMessageEmbed(arg1) {
        var1 = arg1;
        var4 = var1.errorMessage;
        var3 = var1.colors;
        var1 = {};
        var5 = _closure1_slot4;
        var5 = var5.TEXT;
        var1['type'] = var5;
        var1['messageSendError'] = var4;
        var4 = _closure1_slot3;
        var4 = var4.AUTO_MODERATION_BLOCKED_MESSAGE;
        var1['failureState'] = var4;
        var4 = true;
        var1['disableBackgroundColor'] = var4;
        var3 = var3.automodBlockedBodyTextColor;
        var1['bodyTextColor'] = var3;
        var4 = _closure1_slot0;
        var7 = _closure1_slot2;
        var3 = 2;
        var3 = var7[var3];
        var6 = undefined;
        var4 = var4.bind(var6)(var3);
        var3 = var4.getAssetUriForEmbed;
        var5 = _closure1_slot1;
        var2 = 3;
        var2 = var7[var2];
        var2 = var5.bind(var6)(var2);
        var2 = var3.bind(var4)(var2);
        var1['iconURL'] = var2;
        return var1;
    };
    var3['createAutomodBlockedMessageEmbed'] = var2;
    return var1;
})();