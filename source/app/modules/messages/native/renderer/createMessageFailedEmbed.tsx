// app/modules/messages/native/renderer/createMessageFailedEmbed.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MessageFailureState;
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MessageEmbedTypes;
    var _closure1_slot4 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/messages/native/renderer/createMessageFailedEmbed.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: createMessageFailedEmbed
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            tangon = entity.uploaderFile;
            michal = entity.useAttachmentUploadPreview;
            report = entity.colors;
            entity = null;
            if(!(entity == tangon)) { _fun00002_ip = 145; continue _fun00001 }
 26:
            entity = {};
            oscard = _closure1_slot4;
            oscard = oscard.TEXT;
            entity['type'] = oscard;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            oscard = 4;
            golfie = yankee[oscard];
            verify = undefined;
            golfie = offset.bind(verify)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = yankee[oscard];
            oscard = offset.bind(verify)(oscard);
            oscard = oscard.t;
            oscard = oscard.lBLP4u;
            oscard = golfie.bind(option)(oscard);
            entity['messageSendError'] = oscard;
            zuuluu = _closure1_slot3;
            zuuluu = zuuluu.UNSPECIFIED;
            entity['failureState'] = zuuluu;
            zuuluu = true;
            entity['disableBackgroundColor'] = zuuluu;
            zuuluu = report.failedMessageBodyTextColor;
            entity['bodyTextColor'] = zuuluu;
            _fun00002_ip = 532; continue _fun00001;
 145:
            if(michal) { _fun00002_ip = 368; continue _fun00001 }
 151:
            michal = {};
            zuuluu = _closure1_slot4;
            zuuluu = zuuluu.TEXT;
            michal['type'] = zuuluu;
            golfie = _closure1_slot0;
            yankee = _closure1_slot2;
            zuuluu = 4;
            verify = yankee[zuuluu];
            option = undefined;
            verify = golfie.bind(option)(verify);
            offset = verify.intl;
            verify = offset.formatToPlainString;
            zuuluu = yankee[zuuluu];
            zuuluu = golfie.bind(option)(zuuluu);
            zuuluu = zuuluu.t;
            golfie = zuuluu.D0noUl;
            zuuluu = {};
            yankee = tangon.attachmentsCount;
            zuuluu['count'] = yankee;
            zuuluu = verify.bind(offset)(golfie, zuuluu);
            michal['numAttachments'] = zuuluu;
            zuuluu = _closure1_slot3;
            zuuluu = zuuluu.UPLOAD_FAILED;
            michal['failureState'] = zuuluu;
            verify = tangon.currentSize;
            zuuluu = '';
            golfie = 0;
            if(!(golfie !== verify)) { _fun00002_ip = 342; continue _fun00001 }
 276:
            golfie = _closure1_slot0;
            verify = _closure1_slot2;
            oscard = 6;
            oscard = verify[oscard];
            golfie = golfie.bind(option)(oscard);
            oscard = golfie.sizeString;
            tangon = tangon.currentSize;
            option = oscard.bind(golfie)(tangon);
            tangon = global;
            tangon = tangon.HermesInternal;
            golfie = tangon.concat;
            oscard = ' (';
            tangon = ')';
            zuuluu = golfie.bind(oscard)(option, tangon);
 342:
            zuuluu = '' + zuuluu;
            michal['attachmentsSize'] = zuuluu;
            zuuluu = report.embedBodyTextColor;
            michal['bodyTextColor'] = zuuluu;
            _fun00002_ip = 529; continue _fun00001;
 368:
            zuuluu = {};
            oscard = _closure1_slot4;
            oscard = oscard.TEXT;
            zuuluu['type'] = oscard;
            oscard = _closure1_slot0;
            verify = _closure1_slot2;
            golfie = 4;
            offset = verify[golfie];
            option = undefined;
            offset = oscard.bind(option)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            golfie = verify[golfie];
            golfie = oscard.bind(option)(golfie);
            golfie = golfie.t;
            golfie = golfie.lBLP4u;
            golfie = offset.bind(yankee)(golfie);
            zuuluu['messageSendError'] = golfie;
            golfie = _closure1_slot3;
            golfie = golfie.UNSPECIFIED;
            zuuluu['failureState'] = golfie;
            golfie = true;
            zuuluu['disableBackgroundColor'] = golfie;
            report = report.failedMessageBodyTextColor;
            zuuluu['bodyTextColor'] = report;
            report = 2;
            report = verify[report];
            oscard = oscard.bind(option)(report);
            report = oscard.getAssetUriForEmbed;
            golfie = _closure1_slot1;
            tangon = 5;
            tangon = verify[tangon];
            tangon = golfie.bind(option)(tangon);
            tangon = report.bind(oscard)(tangon);
            zuuluu['iconURL'] = tangon;
            michal = zuuluu;
 529:
            entity = michal;
 532:
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: createAutomodBlockedMessageEmbed
        entity = argFoo;
        tangon = entity.errorMessage;
        zuuluu = entity.colors;
        entity = {};
        report = _closure1_slot4;
        report = report.TEXT;
        entity['type'] = report;
        entity['messageSendError'] = tangon;
        tangon = _closure1_slot3;
        tangon = tangon.AUTO_MODERATION_BLOCKED_MESSAGE;
        entity['failureState'] = tangon;
        tangon = true;
        entity['disableBackgroundColor'] = tangon;
        zuuluu = zuuluu.automodBlockedBodyTextColor;
        entity['bodyTextColor'] = zuuluu;
        tangon = _closure1_slot0;
        golfie = _closure1_slot2;
        zuuluu = 2;
        zuuluu = golfie[zuuluu];
        oscard = undefined;
        tangon = tangon.bind(oscard)(zuuluu);
        zuuluu = tangon.getAssetUriForEmbed;
        report = _closure1_slot1;
        michal = 3;
        michal = golfie[michal];
        michal = report.bind(oscard)(michal);
        michal = zuuluu.bind(tangon)(michal);
        entity['iconURL'] = michal;
        return entity;
    };
    zuuluu['createAutomodBlockedMessageEmbed'] = michal;
    return entity;
})();