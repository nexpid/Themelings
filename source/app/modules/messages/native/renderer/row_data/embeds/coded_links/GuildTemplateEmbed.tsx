// app/modules/messages/native/renderer/row_data/embeds/coded_links/GuildTemplateEmbed.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    options = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Image;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.GuildTemplateStates;
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.InviteTypes;
    var _closure1_slot6 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot7 = tango;
    tango = 17;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/messages/native/renderer/row_data/embeds/coded_links/GuildTemplateEmbed.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo) { // Original name: GuildTemplateEmbed
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            mike = mike.code;
            var _closure2_slot0 = mike;
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            mike = 14;
            mike = tango[mike];
            report = undefined;
            oscar = zulu.bind(report)(mike);
            mike = oscar.useMessageRendererTheme;
            foxtrot = mike.bind(oscar)();
            mike = 6;
            mike = tango[mike];
            oscar = zulu.bind(report)(mike);
            mike = oscar.useEmbedThemeColors;
            mike = mike.bind(oscar)(foxtrot);
            options = mike.colors;
            oscar = mike.baseColors;
            mike = 15;
            mike = tango[mike];
            tango = zulu.bind(report)(mike);
            zulu = tango.useStateFromStores;
            verify = _closure1_slot4;
            mike = new Array(1);
            mike[0] = verify;
            entity = function() {
                zulu = _closure1_slot4;
                mike = zulu.getGuildTemplate;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            offset = zulu.bind(tango)(mike, entity);
            entity = null;
            if(!(entity != offset)) { _fun00002_ip = 1072; continue _fun00001 }
 132:
            zulu = offset.state;
            mike = _closure1_slot5;
            mike = mike.RESOLVING;
            if(!(zulu !== mike)) { _fun00002_ip = 926; continue _fun00001 }
 154:
            zulu = offset.state;
            mike = _closure1_slot5;
            mike = mike.EXPIRED;
            if(!(zulu !== mike)) { _fun00002_ip = 580; continue _fun00001 }
 176:
            romeo = _closure1_slot0;
            backup = _closure1_slot2;
            verify = 7;
            mike = backup[verify];
            mike = romeo.bind(report)(mike);
            yankee = mike.intl;
            tango = yankee.formatToPlainString;
            mike = backup[verify];
            mike = romeo.bind(report)(mike);
            mike = mike.t;
            zulu = mike.L8Awgo;
            mike = {};
            sizing = offset.usageCount;
            kilo = sizing.toString;
            kilo = kilo.bind(sizing)();
            mike['usageCount'] = kilo;
            yankee = tango.bind(yankee)(zulu, mike);
            tango = _closure1_slot7;
            sizing = _closure1_slot1;
            mike = 16;
            mike = backup[mike];
            zulu = sizing.bind(report)(mike);
            mike = {};
            update = mike;
            echo = oscar;
            kilo = copyDataProperties(update, echo);
            kilo = backup[verify];
            kilo = romeo.bind(report)(kilo);
            result = kilo.intl;
            output = result.string;
            kilo = backup[verify];
            kilo = romeo.bind(report)(kilo);
            kilo = kilo.t;
            kilo = kilo.kAvFkJ;
            output = output.bind(result)(kilo);
            kilo = output.toUpperCase;
            output = kilo.bind(output)();
            kilo = 'headerText';
            mike[kilo] = output;
            output = options.headerColor;
            kilo = 'headerColor';
            mike[kilo] = output;
            kilo = offset.name;
            offset = 'titleText';
            mike[offset] = kilo;
            kilo = options.titleColor;
            offset = 'titleColor';
            mike[offset] = kilo;
            offset = 'subtitle';
            mike[offset] = yankee;
            yankee = options.subtitleColor;
            offset = 'subtitleColor';
            mike[offset] = yankee;
            kilo = _closure1_slot3;
            yankee = kilo.resolveAssetSource;
            offset = 13;
            offset = backup[offset];
            offset = sizing.bind(report)(offset);
            offset = yankee.bind(kilo)(offset);
            yankee = offset.uri;
            offset = 'thumbnailUrl';
            mike[offset] = yankee;
            yankee = options.acceptLabelGreenColor;
            offset = 'acceptLabelColor';
            mike[offset] = yankee;
            yankee = options.acceptLabelGreenBackgroundColor;
            offset = 'acceptLabelBackgroundColor';
            mike[offset] = yankee;
            offset = backup[verify];
            offset = romeo.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = backup[verify];
            verify = romeo.bind(report)(verify);
            verify = verify.t;
            verify = verify.a3Gl+f;
            offset = offset.bind(yankee)(verify);
            verify = 'acceptLabelText';
            mike[verify] = offset;
            offset = true;
            verify = 'embedCanBeTapped';
            mike[verify] = offset;
            verify = _closure1_slot6;
            offset = verify.GUILD;
            verify = 'type';
            mike[verify] = offset;
            mike = tango.bind(report)(zulu, mike);
            return mike;
 580:
            tango = _closure1_slot7;
            sizing = _closure1_slot1;
            backup = _closure1_slot2;
            mike = 16;
            mike = backup[mike];
            zulu = sizing.bind(report)(mike);
            mike = {};
            update = mike;
            echo = oscar;
            verify = copyDataProperties(update, echo);
            romeo = _closure1_slot0;
            verify = 7;
            offset = backup[verify];
            offset = romeo.bind(report)(offset);
            kilo = offset.intl;
            yankee = kilo.string;
            offset = backup[verify];
            offset = romeo.bind(report)(offset);
            offset = offset.t;
            offset = offset.C7ZRNz;
            yankee = yankee.bind(kilo)(offset);
            offset = yankee.toUpperCase;
            yankee = offset.bind(yankee)();
            offset = 'headerText';
            mike[offset] = yankee;
            offset = 8;
            offset = backup[offset];
            kilo = romeo.bind(report)(offset);
            yankee = kilo.processColorOrThrow;
            offset = 9;
            offset = backup[offset];
            offset = sizing.bind(report)(offset);
            offset = offset.unsafe_rawColors;
            offset = offset.RED_400;
            yankee = yankee.bind(kilo)(offset);
            offset = 'titleColor';
            mike[offset] = yankee;
            offset = backup[verify];
            offset = romeo.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = backup[verify];
            verify = romeo.bind(report)(verify);
            verify = verify.t;
            verify = verify.A6MwXF;
            offset = offset.bind(yankee)(verify);
            verify = 'titleText';
            mike[verify] = offset;
            yankee = _closure1_slot3;
            offset = yankee.resolveAssetSource;
            verify = 10;
            verify = backup[verify];
            romeo = romeo.bind(report)(verify);
            verify = romeo.isThemeDark;
            verify = verify.bind(romeo)(foxtrot);
            foxtrot = _closure1_slot1;
            backup = _closure1_slot2;
            if(verify) { _fun00002_ip = 852; continue _fun00001 }
 838:
            verify = 12;
            verify = backup[verify];
            verify = foxtrot.bind(report)(verify);
            _fun00002_ip = 864; continue _fun00001;
 852:
            romeo = 11;
            romeo = backup[romeo];
            verify = foxtrot.bind(report)(romeo);
 864:
            verify = offset.bind(yankee)(verify);
            offset = verify.uri;
            verify = 'thumbnailUrl';
            mike[verify] = offset;
            offset = options.thumbnailBackgroundColor;
            verify = 'thumbnailBackgroundColor';
            mike[verify] = offset;
            verify = _closure1_slot6;
            offset = verify.GUILD;
            verify = 'type';
            mike[verify] = offset;
            mike = tango.bind(report)(zulu, mike);
            return mike;
 926:
            tango = _closure1_slot7;
            zulu = _closure1_slot1;
            foxtrot = _closure1_slot2;
            mike = 16;
            mike = foxtrot[mike];
            zulu = zulu.bind(report)(mike);
            mike = {};
            romeo = _closure1_slot0;
            verify = 7;
            offset = foxtrot[verify];
            offset = romeo.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = foxtrot[verify];
            verify = romeo.bind(report)(verify);
            verify = verify.t;
            verify = verify.Xj87YW;
            offset = offset.bind(yankee)(verify);
            verify = offset.toUpperCase;
            verify = verify.bind(offset)();
            mike['headerText'] = verify;
            verify = options.resolvingGradientEnd;
            mike['resolvingGradientEnd'] = verify;
            options = options.resolvingGradientStart;
            mike['resolvingGradientStart'] = options;
            golf = _closure1_slot6;
            golf = golf.GUILD;
            mike['type'] = golf;
            update = mike;
            echo = oscar;
            oscar = copyDataProperties(update, echo);
            mike = tango.bind(report)(zulu, mike);
            return mike;
 1072:
            return entity;
        }
    };
    zulu['default'] = tango;
    mike = function(argFoo, argBar) { // Original name: createGuildTemplateEmbed
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            yankee = argBar;
            mike = _closure1_slot1;
            zulu = _closure1_slot2;
            entity = 6;
            entity = zulu[entity];
            offset = undefined;
            entity = mike.bind(offset)(entity);
            entity = entity.bind(offset)(yankee);
            report = entity.colors;
            zulu = entity.baseColors;
            oscar = _closure1_slot4;
            mike = oscar.getGuildTemplate;
            entity = argFoo;
            golf = mike.bind(oscar)(entity);
            entity = null;
            if(!(entity != golf)) { _fun00004_ip = 941; continue _fun00003 }
 71:
            oscar = golf.state;
            mike = _closure1_slot5;
            mike = mike.RESOLVING;
            if(!(oscar !== mike)) { _fun00004_ip = 821; continue _fun00003 }
 93:
            oscar = golf.state;
            mike = _closure1_slot5;
            mike = mike.EXPIRED;
            if(!(oscar !== mike)) { _fun00004_ip = 497; continue _fun00003 }
 115:
            verify = _closure1_slot0;
            romeo = _closure1_slot2;
            oscar = 7;
            mike = romeo[oscar];
            mike = verify.bind(offset)(mike);
            backup = mike.intl;
            foxtrot = backup.formatToPlainString;
            mike = romeo[oscar];
            mike = verify.bind(offset)(mike);
            mike = mike.t;
            options = mike.L8Awgo;
            mike = {};
            sizing = golf.usageCount;
            kilo = sizing.toString;
            kilo = kilo.bind(sizing)();
            mike['usageCount'] = kilo;
            options = foxtrot.bind(backup)(options, mike);
            mike = {};
            result = mike;
            output = zulu;
            foxtrot = copyDataProperties(result, output);
            foxtrot = romeo[oscar];
            foxtrot = verify.bind(offset)(foxtrot);
            kilo = foxtrot.intl;
            backup = kilo.string;
            foxtrot = romeo[oscar];
            foxtrot = verify.bind(offset)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.kAvFkJ;
            backup = backup.bind(kilo)(foxtrot);
            foxtrot = backup.toUpperCase;
            backup = foxtrot.bind(backup)();
            foxtrot = 'headerText';
            mike[foxtrot] = backup;
            backup = report.headerColor;
            foxtrot = 'headerColor';
            mike[foxtrot] = backup;
            foxtrot = golf.name;
            golf = 'titleText';
            mike[golf] = foxtrot;
            foxtrot = report.titleColor;
            golf = 'titleColor';
            mike[golf] = foxtrot;
            golf = 'subtitle';
            mike[golf] = options;
            options = report.subtitleColor;
            golf = 'subtitleColor';
            mike[golf] = options;
            foxtrot = _closure1_slot3;
            options = foxtrot.resolveAssetSource;
            backup = _closure1_slot1;
            golf = 13;
            golf = romeo[golf];
            golf = backup.bind(offset)(golf);
            golf = options.bind(foxtrot)(golf);
            options = golf.uri;
            golf = 'thumbnailUrl';
            mike[golf] = options;
            options = report.acceptLabelGreenColor;
            golf = 'acceptLabelColor';
            mike[golf] = options;
            options = report.acceptLabelGreenBackgroundColor;
            golf = 'acceptLabelBackgroundColor';
            mike[golf] = options;
            golf = romeo[oscar];
            golf = verify.bind(offset)(golf);
            options = golf.intl;
            golf = options.string;
            oscar = romeo[oscar];
            oscar = verify.bind(offset)(oscar);
            oscar = oscar.t;
            oscar = oscar.a3Gl+f;
            golf = golf.bind(options)(oscar);
            oscar = 'acceptLabelText';
            mike[oscar] = golf;
            golf = true;
            oscar = 'embedCanBeTapped';
            mike[oscar] = golf;
            oscar = _closure1_slot6;
            golf = oscar.GUILD;
            oscar = 'type';
            mike[oscar] = golf;
            return mike;
 497:
            mike = {};
            result = mike;
            output = zulu;
            oscar = copyDataProperties(result, output);
            verify = _closure1_slot0;
            romeo = _closure1_slot2;
            oscar = 7;
            golf = romeo[oscar];
            golf = verify.bind(offset)(golf);
            foxtrot = golf.intl;
            options = foxtrot.string;
            golf = romeo[oscar];
            golf = verify.bind(offset)(golf);
            golf = golf.t;
            golf = golf.C7ZRNz;
            options = options.bind(foxtrot)(golf);
            golf = options.toUpperCase;
            options = golf.bind(options)();
            golf = 'headerText';
            mike[golf] = options;
            golf = 8;
            golf = romeo[golf];
            foxtrot = verify.bind(offset)(golf);
            options = foxtrot.processColorOrThrow;
            backup = _closure1_slot1;
            golf = 9;
            golf = romeo[golf];
            golf = backup.bind(offset)(golf);
            golf = golf.unsafe_rawColors;
            golf = golf.RED_400;
            options = options.bind(foxtrot)(golf);
            golf = 'titleColor';
            mike[golf] = options;
            golf = romeo[oscar];
            golf = verify.bind(offset)(golf);
            options = golf.intl;
            golf = options.string;
            oscar = romeo[oscar];
            oscar = verify.bind(offset)(oscar);
            oscar = oscar.t;
            oscar = oscar.A6MwXF;
            golf = golf.bind(options)(oscar);
            oscar = 'titleText';
            mike[oscar] = golf;
            options = _closure1_slot3;
            golf = options.resolveAssetSource;
            oscar = 10;
            oscar = romeo[oscar];
            verify = verify.bind(offset)(oscar);
            oscar = verify.isThemeDark;
            oscar = oscar.bind(verify)(yankee);
            yankee = _closure1_slot1;
            romeo = _closure1_slot2;
            if(oscar) { _fun00004_ip = 753; continue _fun00003 }
 739:
            oscar = 12;
            oscar = romeo[oscar];
            oscar = yankee.bind(offset)(oscar);
            _fun00004_ip = 765; continue _fun00003;
 753:
            verify = 11;
            verify = romeo[verify];
            oscar = yankee.bind(offset)(verify);
 765:
            oscar = golf.bind(options)(oscar);
            golf = oscar.uri;
            oscar = 'thumbnailUrl';
            mike[oscar] = golf;
            golf = report.thumbnailBackgroundColor;
            oscar = 'thumbnailBackgroundColor';
            mike[oscar] = golf;
            oscar = _closure1_slot6;
            golf = oscar.GUILD;
            oscar = 'type';
            mike[oscar] = golf;
            return mike;
 821:
            mike = {};
            verify = _closure1_slot0;
            yankee = _closure1_slot2;
            oscar = 7;
            golf = yankee[oscar];
            golf = verify.bind(offset)(golf);
            options = golf.intl;
            golf = options.string;
            oscar = yankee[oscar];
            oscar = verify.bind(offset)(oscar);
            oscar = oscar.t;
            oscar = oscar.Xj87YW;
            golf = golf.bind(options)(oscar);
            oscar = golf.toUpperCase;
            oscar = oscar.bind(golf)();
            mike['headerText'] = oscar;
            oscar = report.resolvingGradientEnd;
            mike['resolvingGradientEnd'] = oscar;
            report = report.resolvingGradientStart;
            mike['resolvingGradientStart'] = report;
            tango = _closure1_slot6;
            tango = tango.GUILD;
            mike['type'] = tango;
            result = mike;
            output = zulu;
            zulu = copyDataProperties(result, output);
            return mike;
 941:
            return entity;
        }
    };
    zulu['createGuildTemplateEmbed'] = mike;
    return entity;
})();