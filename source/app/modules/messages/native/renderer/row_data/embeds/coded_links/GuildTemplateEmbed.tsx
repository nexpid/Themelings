// app/modules/messages/native/renderer/row_data/embeds/coded_links/GuildTemplateEmbed.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Image;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildTemplateStates;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.InviteTypes;
    var _closure1_slot6 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot7 = tangon;
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/messages/native/renderer/row_data/embeds/coded_links/GuildTemplateEmbed.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: GuildTemplateEmbed
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            michal = michal.code;
            var _closure2_slot0 = michal;
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 14;
            michal = tangon[michal];
            report = undefined;
            oscard = zuuluu.bind(report)(michal);
            michal = oscard.useMessageRendererTheme;
            foxtra = michal.bind(oscard)();
            michal = 6;
            michal = tangon[michal];
            oscard = zuuluu.bind(report)(michal);
            michal = oscard.useEmbedThemeColors;
            michal = michal.bind(oscard)(foxtra);
            option = michal.colors;
            oscard = michal.baseColors;
            michal = 15;
            michal = tangon[michal];
            tangon = zuuluu.bind(report)(michal);
            zuuluu = tangon.useStateFromStores;
            verify = _closure1_slot4;
            michal = new Array(1);
            michal[0] = verify;
            entity = function() {
                zuuluu = _closure1_slot4;
                michal = zuuluu.getGuildTemplate;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            offset = zuuluu.bind(tangon)(michal, entity);
            entity = null;
            if(!(entity != offset)) { _fun00002_ip = 1074; continue _fun00001 }
 134:
            zuuluu = offset.state;
            michal = _closure1_slot5;
            michal = michal.RESOLVING;
            if(!(zuuluu !== michal)) { _fun00002_ip = 928; continue _fun00001 }
 156:
            zuuluu = offset.state;
            michal = _closure1_slot5;
            michal = michal.EXPIRED;
            if(!(zuuluu !== michal)) { _fun00002_ip = 582; continue _fun00001 }
 178:
            romeon = _closure1_slot0;
            backup = _closure1_slot2;
            verify = 7;
            michal = backup[verify];
            michal = romeon.bind(report)(michal);
            yankee = michal.intl;
            tangon = yankee.formatToPlainString;
            michal = backup[verify];
            michal = romeon.bind(report)(michal);
            michal = michal.t;
            zuuluu = michal.L8Awgo;
            michal = {};
            sizing = offset.usageCount;
            kiloes = sizing.toString;
            kiloes = kiloes.bind(sizing)();
            michal['usageCount'] = kiloes;
            yankee = tangon.bind(yankee)(zuuluu, michal);
            tangon = _closure1_slot7;
            sizing = _closure1_slot1;
            michal = 16;
            michal = backup[michal];
            zuuluu = sizing.bind(report)(michal);
            michal = {};
            update = michal;
            echoed = oscard;
            kiloes = copyDataProperties(update, echoed);
            kiloes = backup[verify];
            kiloes = romeon.bind(report)(kiloes);
            result = kiloes.intl;
            output = result.string;
            kiloes = backup[verify];
            kiloes = romeon.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.kAvFkJ;
            output = output.bind(result)(kiloes);
            kiloes = output.toUpperCase;
            output = kiloes.bind(output)();
            kiloes = 'headerText';
            michal[kiloes] = output;
            output = option.headerColor;
            kiloes = 'headerColor';
            michal[kiloes] = output;
            kiloes = offset.name;
            offset = 'titleText';
            michal[offset] = kiloes;
            kiloes = option.titleColor;
            offset = 'titleColor';
            michal[offset] = kiloes;
            offset = 'subtitle';
            michal[offset] = yankee;
            yankee = option.subtitleColor;
            offset = 'subtitleColor';
            michal[offset] = yankee;
            kiloes = _closure1_slot3;
            yankee = kiloes.resolveAssetSource;
            offset = 13;
            offset = backup[offset];
            offset = sizing.bind(report)(offset);
            offset = yankee.bind(kiloes)(offset);
            yankee = offset.uri;
            offset = 'thumbnailUrl';
            michal[offset] = yankee;
            yankee = option.acceptLabelGreenColor;
            offset = 'acceptLabelColor';
            michal[offset] = yankee;
            yankee = option.acceptLabelGreenBackgroundColor;
            offset = 'acceptLabelBackgroundColor';
            michal[offset] = yankee;
            offset = backup[verify];
            offset = romeon.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = backup[verify];
            verify = romeon.bind(report)(verify);
            verify = verify.t;
            verify = verify.a3Gl+f;
            offset = offset.bind(yankee)(verify);
            verify = 'acceptLabelText';
            michal[verify] = offset;
            offset = true;
            verify = 'embedCanBeTapped';
            michal[verify] = offset;
            verify = _closure1_slot6;
            offset = verify.GUILD;
            verify = 'type';
            michal[verify] = offset;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 582:
            tangon = _closure1_slot7;
            sizing = _closure1_slot1;
            backup = _closure1_slot2;
            michal = 16;
            michal = backup[michal];
            zuuluu = sizing.bind(report)(michal);
            michal = {};
            update = michal;
            echoed = oscard;
            verify = copyDataProperties(update, echoed);
            romeon = _closure1_slot0;
            verify = 7;
            offset = backup[verify];
            offset = romeon.bind(report)(offset);
            kiloes = offset.intl;
            yankee = kiloes.string;
            offset = backup[verify];
            offset = romeon.bind(report)(offset);
            offset = offset.t;
            offset = offset.C7ZRNz;
            yankee = yankee.bind(kiloes)(offset);
            offset = yankee.toUpperCase;
            yankee = offset.bind(yankee)();
            offset = 'headerText';
            michal[offset] = yankee;
            offset = 8;
            offset = backup[offset];
            kiloes = romeon.bind(report)(offset);
            yankee = kiloes.processColorOrThrow;
            offset = 9;
            offset = backup[offset];
            offset = sizing.bind(report)(offset);
            offset = offset.unsafe_rawColors;
            offset = offset.RED_400;
            yankee = yankee.bind(kiloes)(offset);
            offset = 'titleColor';
            michal[offset] = yankee;
            offset = backup[verify];
            offset = romeon.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = backup[verify];
            verify = romeon.bind(report)(verify);
            verify = verify.t;
            verify = verify.A6MwXF;
            offset = offset.bind(yankee)(verify);
            verify = 'titleText';
            michal[verify] = offset;
            yankee = _closure1_slot3;
            offset = yankee.resolveAssetSource;
            verify = 10;
            verify = backup[verify];
            romeon = romeon.bind(report)(verify);
            verify = romeon.isThemeDark;
            verify = verify.bind(romeon)(foxtra);
            foxtra = _closure1_slot1;
            backup = _closure1_slot2;
            if(verify) { _fun00002_ip = 854; continue _fun00001 }
 840:
            verify = 12;
            verify = backup[verify];
            verify = foxtra.bind(report)(verify);
            _fun00002_ip = 866; continue _fun00001;
 854:
            romeon = 11;
            romeon = backup[romeon];
            verify = foxtra.bind(report)(romeon);
 866:
            verify = offset.bind(yankee)(verify);
            offset = verify.uri;
            verify = 'thumbnailUrl';
            michal[verify] = offset;
            offset = option.thumbnailBackgroundColor;
            verify = 'thumbnailBackgroundColor';
            michal[verify] = offset;
            verify = _closure1_slot6;
            offset = verify.GUILD;
            verify = 'type';
            michal[verify] = offset;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 928:
            tangon = _closure1_slot7;
            zuuluu = _closure1_slot1;
            foxtra = _closure1_slot2;
            michal = 16;
            michal = foxtra[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = {};
            romeon = _closure1_slot0;
            verify = 7;
            offset = foxtra[verify];
            offset = romeon.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = foxtra[verify];
            verify = romeon.bind(report)(verify);
            verify = verify.t;
            verify = verify.Xj87YW;
            offset = offset.bind(yankee)(verify);
            verify = offset.toUpperCase;
            verify = verify.bind(offset)();
            michal['headerText'] = verify;
            verify = option.resolvingGradientEnd;
            michal['resolvingGradientEnd'] = verify;
            option = option.resolvingGradientStart;
            michal['resolvingGradientStart'] = option;
            golfie = _closure1_slot6;
            golfie = golfie.GUILD;
            michal['type'] = golfie;
            update = michal;
            echoed = oscard;
            oscard = copyDataProperties(update, echoed);
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 1074:
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    michal = function(argFoo, argBar) { // Original name: createGuildTemplateEmbed
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            yankee = argBar;
            michal = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 6;
            entity = zuuluu[entity];
            offset = undefined;
            entity = michal.bind(offset)(entity);
            entity = entity.bind(offset)(yankee);
            report = entity.colors;
            zuuluu = entity.baseColors;
            oscard = _closure1_slot4;
            michal = oscard.getGuildTemplate;
            entity = argFoo;
            golfie = michal.bind(oscard)(entity);
            entity = null;
            if(!(entity != golfie)) { _fun00004_ip = 941; continue _fun00003 }
 71:
            oscard = golfie.state;
            michal = _closure1_slot5;
            michal = michal.RESOLVING;
            if(!(oscard !== michal)) { _fun00004_ip = 821; continue _fun00003 }
 93:
            oscard = golfie.state;
            michal = _closure1_slot5;
            michal = michal.EXPIRED;
            if(!(oscard !== michal)) { _fun00004_ip = 497; continue _fun00003 }
 115:
            verify = _closure1_slot0;
            romeon = _closure1_slot2;
            oscard = 7;
            michal = romeon[oscard];
            michal = verify.bind(offset)(michal);
            backup = michal.intl;
            foxtra = backup.formatToPlainString;
            michal = romeon[oscard];
            michal = verify.bind(offset)(michal);
            michal = michal.t;
            option = michal.L8Awgo;
            michal = {};
            sizing = golfie.usageCount;
            kiloes = sizing.toString;
            kiloes = kiloes.bind(sizing)();
            michal['usageCount'] = kiloes;
            option = foxtra.bind(backup)(option, michal);
            michal = {};
            result = michal;
            output = zuuluu;
            foxtra = copyDataProperties(result, output);
            foxtra = romeon[oscard];
            foxtra = verify.bind(offset)(foxtra);
            kiloes = foxtra.intl;
            backup = kiloes.string;
            foxtra = romeon[oscard];
            foxtra = verify.bind(offset)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.kAvFkJ;
            backup = backup.bind(kiloes)(foxtra);
            foxtra = backup.toUpperCase;
            backup = foxtra.bind(backup)();
            foxtra = 'headerText';
            michal[foxtra] = backup;
            backup = report.headerColor;
            foxtra = 'headerColor';
            michal[foxtra] = backup;
            foxtra = golfie.name;
            golfie = 'titleText';
            michal[golfie] = foxtra;
            foxtra = report.titleColor;
            golfie = 'titleColor';
            michal[golfie] = foxtra;
            golfie = 'subtitle';
            michal[golfie] = option;
            option = report.subtitleColor;
            golfie = 'subtitleColor';
            michal[golfie] = option;
            foxtra = _closure1_slot3;
            option = foxtra.resolveAssetSource;
            backup = _closure1_slot1;
            golfie = 13;
            golfie = romeon[golfie];
            golfie = backup.bind(offset)(golfie);
            golfie = option.bind(foxtra)(golfie);
            option = golfie.uri;
            golfie = 'thumbnailUrl';
            michal[golfie] = option;
            option = report.acceptLabelGreenColor;
            golfie = 'acceptLabelColor';
            michal[golfie] = option;
            option = report.acceptLabelGreenBackgroundColor;
            golfie = 'acceptLabelBackgroundColor';
            michal[golfie] = option;
            golfie = romeon[oscard];
            golfie = verify.bind(offset)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = romeon[oscard];
            oscard = verify.bind(offset)(oscard);
            oscard = oscard.t;
            oscard = oscard.a3Gl+f;
            golfie = golfie.bind(option)(oscard);
            oscard = 'acceptLabelText';
            michal[oscard] = golfie;
            golfie = true;
            oscard = 'embedCanBeTapped';
            michal[oscard] = golfie;
            oscard = _closure1_slot6;
            golfie = oscard.GUILD;
            oscard = 'type';
            michal[oscard] = golfie;
            return michal;
 497:
            michal = {};
            result = michal;
            output = zuuluu;
            oscard = copyDataProperties(result, output);
            verify = _closure1_slot0;
            romeon = _closure1_slot2;
            oscard = 7;
            golfie = romeon[oscard];
            golfie = verify.bind(offset)(golfie);
            foxtra = golfie.intl;
            option = foxtra.string;
            golfie = romeon[oscard];
            golfie = verify.bind(offset)(golfie);
            golfie = golfie.t;
            golfie = golfie.C7ZRNz;
            option = option.bind(foxtra)(golfie);
            golfie = option.toUpperCase;
            option = golfie.bind(option)();
            golfie = 'headerText';
            michal[golfie] = option;
            golfie = 8;
            golfie = romeon[golfie];
            foxtra = verify.bind(offset)(golfie);
            option = foxtra.processColorOrThrow;
            backup = _closure1_slot1;
            golfie = 9;
            golfie = romeon[golfie];
            golfie = backup.bind(offset)(golfie);
            golfie = golfie.unsafe_rawColors;
            golfie = golfie.RED_400;
            option = option.bind(foxtra)(golfie);
            golfie = 'titleColor';
            michal[golfie] = option;
            golfie = romeon[oscard];
            golfie = verify.bind(offset)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = romeon[oscard];
            oscard = verify.bind(offset)(oscard);
            oscard = oscard.t;
            oscard = oscard.A6MwXF;
            golfie = golfie.bind(option)(oscard);
            oscard = 'titleText';
            michal[oscard] = golfie;
            option = _closure1_slot3;
            golfie = option.resolveAssetSource;
            oscard = 10;
            oscard = romeon[oscard];
            verify = verify.bind(offset)(oscard);
            oscard = verify.isThemeDark;
            oscard = oscard.bind(verify)(yankee);
            yankee = _closure1_slot1;
            romeon = _closure1_slot2;
            if(oscard) { _fun00004_ip = 753; continue _fun00003 }
 739:
            oscard = 12;
            oscard = romeon[oscard];
            oscard = yankee.bind(offset)(oscard);
            _fun00004_ip = 765; continue _fun00003;
 753:
            verify = 11;
            verify = romeon[verify];
            oscard = yankee.bind(offset)(verify);
 765:
            oscard = golfie.bind(option)(oscard);
            golfie = oscard.uri;
            oscard = 'thumbnailUrl';
            michal[oscard] = golfie;
            golfie = report.thumbnailBackgroundColor;
            oscard = 'thumbnailBackgroundColor';
            michal[oscard] = golfie;
            oscard = _closure1_slot6;
            golfie = oscard.GUILD;
            oscard = 'type';
            michal[oscard] = golfie;
            return michal;
 821:
            michal = {};
            verify = _closure1_slot0;
            yankee = _closure1_slot2;
            oscard = 7;
            golfie = yankee[oscard];
            golfie = verify.bind(offset)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = yankee[oscard];
            oscard = verify.bind(offset)(oscard);
            oscard = oscard.t;
            oscard = oscard.Xj87YW;
            golfie = golfie.bind(option)(oscard);
            oscard = golfie.toUpperCase;
            oscard = oscard.bind(golfie)();
            michal['headerText'] = oscard;
            oscard = report.resolvingGradientEnd;
            michal['resolvingGradientEnd'] = oscard;
            report = report.resolvingGradientStart;
            michal['resolvingGradientStart'] = report;
            tangon = _closure1_slot6;
            tangon = tangon.GUILD;
            michal['type'] = tangon;
            result = michal;
            output = zuuluu;
            zuuluu = copyDataProperties(result, output);
            return michal;
 941:
            return entity;
        }
    };
    zuuluu['createGuildTemplateEmbed'] = michal;
    return entity;
})();