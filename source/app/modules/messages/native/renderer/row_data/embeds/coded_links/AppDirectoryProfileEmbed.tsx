// app/modules/messages/native/renderer/row_data/embeds/coded_links/AppDirectoryProfileEmbed.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: FetchingApplicationEmbed
        yankee = _closure1_slot0;
        romeon = _closure1_slot2;
        entity = 16;
        entity = romeon[entity];
        tangon = undefined;
        michal = yankee.bind(tangon)(entity);
        entity = michal.useMessageRendererTheme;
        zuuluu = entity.bind(michal)();
        entity = 5;
        entity = romeon[entity];
        michal = yankee.bind(tangon)(entity);
        entity = michal.useEmbedThemeColors;
        entity = entity.bind(michal)(zuuluu);
        golfie = entity.colors;
        foxtra = entity.baseColors;
        zuuluu = _closure1_slot7;
        michal = _closure1_slot1;
        entity = 17;
        entity = romeon[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        option = 6;
        verify = romeon[option];
        verify = yankee.bind(tangon)(verify);
        offset = verify.intl;
        verify = offset.string;
        option = romeon[option];
        option = yankee.bind(tangon)(option);
        option = option.t;
        option = option.m9hXGR;
        verify = verify.bind(offset)(option);
        option = verify.toUpperCase;
        option = option.bind(verify)();
        entity['headerText'] = option;
        option = golfie.resolvingGradientEnd;
        entity['resolvingGradientEnd'] = option;
        golfie = golfie.resolvingGradientStart;
        entity['resolvingGradientStart'] = golfie;
        oscard = _closure1_slot6;
        oscard = oscard.GUILD;
        entity['type'] = oscard;
        backup = entity;
        report = copyDataProperties(backup, foxtra);
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot8 = entity;
    entity = function() { // Original name: InvalidApplicationEmbed
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            offset = _closure1_slot0;
            romeon = _closure1_slot2;
            entity = 16;
            entity = romeon[entity];
            tangon = undefined;
            michal = offset.bind(tangon)(entity);
            entity = michal.useMessageRendererTheme;
            yankee = entity.bind(michal)();
            entity = 5;
            entity = romeon[entity];
            michal = offset.bind(tangon)(entity);
            entity = michal.useEmbedThemeColors;
            entity = entity.bind(michal)(yankee);
            oscard = entity.colors;
            kiloes = entity.baseColors;
            zuuluu = _closure1_slot7;
            backup = _closure1_slot1;
            entity = 17;
            entity = romeon[entity];
            michal = backup.bind(tangon)(entity);
            entity = {};
            sizing = entity;
            golfie = copyDataProperties(sizing, kiloes);
            golfie = 6;
            option = romeon[golfie];
            option = offset.bind(tangon)(option);
            foxtra = option.intl;
            verify = foxtra.string;
            option = romeon[golfie];
            option = offset.bind(tangon)(option);
            option = option.t;
            option = option.j4KtLS;
            verify = verify.bind(foxtra)(option);
            option = verify.toUpperCase;
            verify = option.bind(verify)();
            option = 'headerText';
            entity[option] = verify;
            option = 7;
            option = romeon[option];
            foxtra = offset.bind(tangon)(option);
            verify = foxtra.processColorOrThrow;
            option = 8;
            option = romeon[option];
            option = backup.bind(tangon)(option);
            option = option.unsafe_rawColors;
            option = option.RED_400;
            verify = verify.bind(foxtra)(option);
            option = 'titleColor';
            entity[option] = verify;
            option = romeon[golfie];
            option = offset.bind(tangon)(option);
            foxtra = option.intl;
            verify = foxtra.string;
            option = romeon[golfie];
            option = offset.bind(tangon)(option);
            option = option.t;
            option = option.0H5OT0;
            verify = verify.bind(foxtra)(option);
            option = 'subtitle';
            entity[option] = verify;
            option = romeon[golfie];
            option = offset.bind(tangon)(option);
            verify = option.intl;
            option = verify.string;
            golfie = romeon[golfie];
            golfie = offset.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.NaQLEx;
            option = option.bind(verify)(golfie);
            golfie = 'titleText';
            entity[golfie] = option;
            verify = _closure1_slot4;
            option = verify.resolveAssetSource;
            golfie = 9;
            golfie = romeon[golfie];
            offset = offset.bind(tangon)(golfie);
            golfie = offset.isThemeDark;
            golfie = golfie.bind(offset)(yankee);
            yankee = _closure1_slot1;
            romeon = _closure1_slot2;
            if(golfie) { _fun00002_ip = 383; continue _fun00001 }
 369:
            golfie = 11;
            golfie = romeon[golfie];
            golfie = yankee.bind(tangon)(golfie);
            _fun00002_ip = 395; continue _fun00001;
 383:
            offset = 10;
            offset = romeon[offset];
            golfie = yankee.bind(tangon)(offset);
 395:
            golfie = option.bind(verify)(golfie);
            option = golfie.uri;
            golfie = 'thumbnailUrl';
            entity[golfie] = option;
            option = oscard.thumbnailBackgroundColor;
            golfie = 'thumbnailBackgroundColor';
            entity[golfie] = option;
            golfie = oscard.subtitleColor;
            oscard = 'subtitleColor';
            entity[oscard] = golfie;
            report = _closure1_slot6;
            oscard = report.GUILD;
            report = 'type';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot9 = entity;
    entity = function(argFoo) { // Original name: ApplicationEmbed
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            verify = entity.application;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 16;
            entity = zuuluu[entity];
            tangon = undefined;
            oscard = michal.bind(tangon)(entity);
            entity = oscard.useMessageRendererTheme;
            golfie = entity.bind(oscard)();
            entity = 5;
            entity = zuuluu[entity];
            oscard = michal.bind(tangon)(entity);
            entity = oscard.useEmbedThemeColors;
            entity = entity.bind(oscard)(golfie);
            oscard = entity.colors;
            yankee = entity.baseColors;
            entity = 12;
            entity = zuuluu[entity];
            option = michal.bind(tangon)(entity);
            golfie = option.getAssetUriForEmbed;
            offset = _closure1_slot1;
            entity = 13;
            entity = zuuluu[entity];
            entity = offset.bind(tangon)(entity);
            backup = golfie.bind(option)(entity);
            entity = 14;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.shortenAndLocalizeNumber;
            option = verify.directory_entry;
            entity = null;
            offset = entity == option;
            golfie = undefined;
            if(offset) { _fun00004_ip = 157; continue _fun00003 }
 151:
            golfie = option.guild_count;
 157:
            option = entity != golfie;
            entity = 0;
            if(!option) { _fun00004_ip = 169; continue _fun00003 }
 166:
            entity = golfie;
 169:
            romeon = michal.bind(zuuluu)(entity);
            foxtra = _closure1_slot0;
            option = _closure1_slot2;
            offset = 6;
            entity = option[offset];
            entity = foxtra.bind(tangon)(entity);
            golfie = entity.intl;
            zuuluu = golfie.formatToPlainString;
            entity = option[offset];
            entity = foxtra.bind(tangon)(entity);
            entity = entity.t;
            michal = entity.6IW6Wl;
            entity = {};
            entity['guildCount'] = romeon;
            romeon = zuuluu.bind(golfie)(michal, entity);
            zuuluu = _closure1_slot7;
            golfie = _closure1_slot1;
            entity = 17;
            entity = option[entity];
            michal = golfie.bind(tangon)(entity);
            entity = {};
            result = entity;
            output = yankee;
            yankee = copyDataProperties(result, output);
            kiloes = oscard.acceptLabelGreenBackgroundColor;
            yankee = 'acceptLabelBackgroundColor';
            entity[yankee] = kiloes;
            kiloes = oscard.acceptLabelGreenColor;
            yankee = 'acceptLabelBorderColor';
            entity[yankee] = kiloes;
            kiloes = oscard.acceptLabelGreenColor;
            yankee = 'acceptLabelColor';
            entity[yankee] = kiloes;
            yankee = option[offset];
            yankee = foxtra.bind(tangon)(yankee);
            sizing = yankee.intl;
            kiloes = sizing.string;
            yankee = option[offset];
            yankee = foxtra.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.NgXl3N;
            kiloes = kiloes.bind(sizing)(yankee);
            yankee = 'acceptLabelText';
            entity[yankee] = kiloes;
            kiloes = true;
            yankee = 'embedCanBeTapped';
            entity[yankee] = kiloes;
            kiloes = false;
            yankee = 'canBeAccepted';
            entity[yankee] = kiloes;
            yankee = 'channelIcon';
            entity[yankee] = backup;
            yankee = 'channelName';
            entity[yankee] = romeon;
            yankee = option[offset];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = option[offset];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.KC1oZ2;
            yankee = yankee.bind(romeon)(offset);
            offset = yankee.toUpperCase;
            yankee = offset.bind(yankee)();
            offset = 'headerText';
            entity[offset] = yankee;
            yankee = oscard.headerColor;
            offset = 'headerColor';
            entity[offset] = yankee;
            yankee = '';
            offset = 'subtitle';
            entity[offset] = yankee;
            yankee = oscard.subtitleColor;
            offset = 'subtitleColor';
            entity[offset] = yankee;
            yankee = verify.name;
            offset = 'titleText';
            entity[offset] = yankee;
            offset = oscard.titleColor;
            oscard = 'titleColor';
            entity[oscard] = offset;
            offset = 25;
            oscard = 'thumbnailCornerRadius';
            entity[oscard] = offset;
            oscard = 15;
            oscard = option[oscard];
            option = golfie.bind(tangon)(oscard);
            golfie = option.getApplicationIconURL;
            oscard = {};
            offset = verify.id;
            oscard['id'] = offset;
            verify = verify.icon;
            oscard['icon'] = verify;
            golfie = golfie.bind(option)(oscard);
            oscard = 'thumbnailUrl';
            entity[oscard] = golfie;
            report = _closure1_slot6;
            oscard = report.GUILD;
            report = 'type';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Image;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.InviteTypes;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot7 = tangon;
    tangon = 20;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/messages/native/renderer/row_data/embeds/coded_links/AppDirectoryProfileEmbed.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: AppDirectoryProfileEmbed
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            offset = entity.applicationId;
            var _closure2_slot0 = offset;
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            entity = 18;
            entity = report[entity];
            report = undefined;
            golfie = zuuluu.bind(report)(entity);
            oscard = golfie.useStateFromStoresObject;
            entity = _closure1_slot5;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            entity = function() {
                entity = {};
                tangon = _closure1_slot5;
                michal = tangon.getApplication;
                zuuluu = _closure2_slot0;
                michal = michal.bind(tangon)(zuuluu);
                entity['application'] = michal;
                michal = tangon.isFetching;
                michal = michal.bind(tangon)(zuuluu);
                entity['isFetching'] = michal;
                michal = tangon.isInvalidApplication;
                michal = michal.bind(tangon)(zuuluu);
                entity['isInvalidApplication'] = michal;
                return entity;
            };
            zuuluu = oscard.bind(golfie)(zuuluu, entity);
            oscard = zuuluu.application;
            entity = zuuluu.isFetching;
            zuuluu = zuuluu.isInvalidApplication;
            verify = _closure1_slot3;
            option = verify.useEffect;
            golfie = new Array(1);
            golfie[0] = offset;
            tangon = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 19;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.getEmbedApplication;
                michal = _closure2_slot0;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            tangon = option.bind(verify)(tangon, golfie);
            if(zuuluu) { _fun00006_ip = 169; continue _fun00005 }
 120:
            if(entity) { _fun00006_ip = 151; continue _fun00005 }
 123:
            entity = null;
            if(!(entity != oscard)) { _fun00006_ip = 151; continue _fun00005 }
 129:
            tangon = _closure1_slot7;
            zuuluu = _closure1_slot10;
            entity = {};
            entity['application'] = oscard;
            entity = tangon.bind(report)(zuuluu, entity);
            _fun00006_ip = 167; continue _fun00005;
 151:
            oscard = _closure1_slot7;
            tangon = _closure1_slot8;
            zuuluu = {};
            entity = oscard.bind(report)(tangon, zuuluu);
 167:
            _fun00006_ip = 185; continue _fun00005;
 169:
            tangon = _closure1_slot7;
            zuuluu = _closure1_slot9;
            michal = {};
            entity = tangon.bind(report)(zuuluu, michal);
 185:
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: createAppDirectoryProfileEmbed
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            verify = entity.theme;
            report = entity.applicationId;
            michal = _closure1_slot5;
            entity = michal.getApplication;
            tangon = entity.bind(michal)(report);
            entity = michal.isInvalidApplication;
            entity = entity.bind(michal)(report);
            if(entity) { _fun00008_ip = 875; continue _fun00007 }
 49:
            michal = _closure1_slot5;
            entity = michal.isFetching;
            entity = entity.bind(michal)(report);
            if(entity) { _fun00008_ip = 718; continue _fun00007 }
 70:
            entity = null;
            if(!(entity != tangon)) { _fun00008_ip = 718; continue _fun00007 }
 79:
            michal = {};
            michal['theme'] = verify;
            michal['application'] = tangon;
            tangon = michal.theme;
            report = michal.application;
            foxtra = _closure1_slot1;
            option = _closure1_slot2;
            michal = 5;
            michal = option[michal];
            yankee = undefined;
            michal = foxtra.bind(yankee)(michal);
            tangon = michal.bind(yankee)(tangon);
            michal = tangon.colors;
            oscard = tangon.baseColors;
            golfie = _closure1_slot0;
            tangon = 12;
            tangon = option[tangon];
            romeon = golfie.bind(yankee)(tangon);
            offset = romeon.getAssetUriForEmbed;
            tangon = 13;
            tangon = option[tangon];
            tangon = foxtra.bind(yankee)(tangon);
            foxtra = offset.bind(romeon)(tangon);
            tangon = 14;
            tangon = option[tangon];
            golfie = golfie.bind(yankee)(tangon);
            tangon = golfie.shortenAndLocalizeNumber;
            offset = report.directory_entry;
            romeon = entity == offset;
            option = undefined;
            if(romeon) { _fun00008_ip = 217; continue _fun00007 }
 211:
            option = offset.guild_count;
 217:
            offset = entity != option;
            entity = 0;
            if(!offset) { _fun00008_ip = 229; continue _fun00007 }
 226:
            entity = option;
 229:
            backup = tangon.bind(golfie)(entity);
            tangon = _closure1_slot0;
            golfie = _closure1_slot2;
            romeon = 6;
            entity = golfie[romeon];
            entity = tangon.bind(yankee)(entity);
            offset = entity.intl;
            option = offset.formatToPlainString;
            entity = golfie[romeon];
            entity = tangon.bind(yankee)(entity);
            entity = entity.t;
            tangon = entity.6IW6Wl;
            entity = {};
            entity['guildCount'] = backup;
            option = option.bind(offset)(tangon, entity);
            tangon = _closure1_slot1;
            entity = 15;
            entity = golfie[entity];
            golfie = tangon.bind(yankee)(entity);
            tangon = golfie.getApplicationIconURL;
            entity = {};
            offset = report.id;
            entity['id'] = offset;
            offset = report.icon;
            entity['icon'] = offset;
            offset = tangon.bind(golfie)(entity);
            golfie = 'number';
            entity = typeof offset;
            tangon = offset;
            if(!(golfie === entity)) { _fun00008_ip = 378; continue _fun00007 }
 358:
            golfie = _closure1_slot4;
            entity = golfie.resolveAssetSource;
            entity = entity.bind(golfie)(offset);
            tangon = entity.uri;
 378:
            entity = {};
            output = entity;
            sizing = oscard;
            oscard = copyDataProperties(output, sizing);
            golfie = michal.acceptLabelGreenBackgroundColor;
            oscard = 'acceptLabelBackgroundColor';
            entity[oscard] = golfie;
            golfie = michal.acceptLabelGreenColor;
            oscard = 'acceptLabelBorderColor';
            entity[oscard] = golfie;
            golfie = michal.acceptLabelGreenColor;
            oscard = 'acceptLabelColor';
            entity[oscard] = golfie;
            offset = _closure1_slot0;
            oscard = _closure1_slot2;
            golfie = oscard[romeon];
            golfie = offset.bind(yankee)(golfie);
            kiloes = golfie.intl;
            backup = kiloes.string;
            golfie = oscard[romeon];
            golfie = offset.bind(yankee)(golfie);
            golfie = golfie.t;
            golfie = golfie.NgXl3N;
            backup = backup.bind(kiloes)(golfie);
            golfie = 'acceptLabelText';
            entity[golfie] = backup;
            backup = true;
            golfie = 'embedCanBeTapped';
            entity[golfie] = backup;
            backup = false;
            golfie = 'canBeAccepted';
            entity[golfie] = backup;
            golfie = 'channelIcon';
            entity[golfie] = foxtra;
            golfie = 'channelName';
            entity[golfie] = option;
            golfie = oscard[romeon];
            golfie = offset.bind(yankee)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = oscard[romeon];
            oscard = offset.bind(yankee)(oscard);
            oscard = oscard.t;
            oscard = oscard.KC1oZ2;
            golfie = golfie.bind(option)(oscard);
            oscard = golfie.toUpperCase;
            golfie = oscard.bind(golfie)();
            oscard = 'headerText';
            entity[oscard] = golfie;
            golfie = michal.headerColor;
            oscard = 'headerColor';
            entity[oscard] = golfie;
            golfie = '';
            oscard = 'subtitle';
            entity[oscard] = golfie;
            golfie = michal.subtitleColor;
            oscard = 'subtitleColor';
            entity[oscard] = golfie;
            oscard = report.name;
            report = 'titleText';
            entity[report] = oscard;
            report = michal.titleColor;
            michal = 'titleColor';
            entity[michal] = report;
            report = 25;
            michal = 'thumbnailCornerRadius';
            entity[michal] = report;
            michal = 'thumbnailUrl';
            entity[michal] = tangon;
            michal = _closure1_slot6;
            tangon = michal.GUILD;
            michal = 'type';
            entity[michal] = tangon;
            _fun00008_ip = 870; continue _fun00007;
 718:
            tangon = _closure1_slot1;
            romeon = _closure1_slot2;
            michal = 5;
            michal = romeon[michal];
            yankee = undefined;
            michal = tangon.bind(yankee)(michal);
            michal = michal.bind(yankee)(verify);
            report = michal.colors;
            sizing = michal.baseColors;
            michal = {};
            offset = _closure1_slot0;
            oscard = 6;
            golfie = romeon[oscard];
            golfie = offset.bind(yankee)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = romeon[oscard];
            oscard = offset.bind(yankee)(oscard);
            oscard = oscard.t;
            oscard = oscard.m9hXGR;
            golfie = golfie.bind(option)(oscard);
            oscard = golfie.toUpperCase;
            oscard = oscard.bind(golfie)();
            michal['headerText'] = oscard;
            oscard = report.resolvingGradientEnd;
            michal['resolvingGradientEnd'] = oscard;
            report = report.resolvingGradientStart;
            michal['resolvingGradientStart'] = report;
            report = _closure1_slot6;
            report = report.GUILD;
            michal['type'] = report;
            output = michal;
            tangon = copyDataProperties(output, sizing);
            entity = michal;
 870:
            _fun00008_ip = 1294; continue _fun00007;
 875:
            foxtra = _closure1_slot1;
            yankee = _closure1_slot2;
            michal = 5;
            michal = yankee[michal];
            offset = undefined;
            michal = foxtra.bind(offset)(michal);
            report = michal.bind(offset)(verify);
            tangon = report.colors;
            michal = {};
            sizing = report.baseColors;
            output = michal;
            report = copyDataProperties(output, sizing);
            option = _closure1_slot0;
            report = 6;
            oscard = yankee[report];
            oscard = option.bind(offset)(oscard);
            romeon = oscard.intl;
            golfie = romeon.string;
            oscard = yankee[report];
            oscard = option.bind(offset)(oscard);
            oscard = oscard.t;
            oscard = oscard.j4KtLS;
            golfie = golfie.bind(romeon)(oscard);
            oscard = golfie.toUpperCase;
            golfie = oscard.bind(golfie)();
            oscard = 'headerText';
            michal[oscard] = golfie;
            oscard = 7;
            oscard = yankee[oscard];
            romeon = option.bind(offset)(oscard);
            golfie = romeon.processColorOrThrow;
            oscard = 8;
            oscard = yankee[oscard];
            oscard = foxtra.bind(offset)(oscard);
            oscard = oscard.unsafe_rawColors;
            oscard = oscard.RED_400;
            golfie = golfie.bind(romeon)(oscard);
            oscard = 'titleColor';
            michal[oscard] = golfie;
            oscard = yankee[report];
            oscard = option.bind(offset)(oscard);
            romeon = oscard.intl;
            golfie = romeon.string;
            oscard = yankee[report];
            oscard = option.bind(offset)(oscard);
            oscard = oscard.t;
            oscard = oscard.0H5OT0;
            golfie = golfie.bind(romeon)(oscard);
            oscard = 'subtitle';
            michal[oscard] = golfie;
            oscard = yankee[report];
            oscard = option.bind(offset)(oscard);
            golfie = oscard.intl;
            oscard = golfie.string;
            report = yankee[report];
            report = option.bind(offset)(report);
            report = report.t;
            report = report.NaQLEx;
            oscard = oscard.bind(golfie)(report);
            report = 'titleText';
            michal[report] = oscard;
            golfie = _closure1_slot4;
            oscard = golfie.resolveAssetSource;
            report = 9;
            report = yankee[report];
            option = option.bind(offset)(report);
            report = option.isThemeDark;
            report = report.bind(option)(verify);
            verify = _closure1_slot1;
            yankee = _closure1_slot2;
            if(report) { _fun00008_ip = 1211; continue _fun00007 }
 1197:
            report = 11;
            report = yankee[report];
            report = verify.bind(offset)(report);
            _fun00008_ip = 1223; continue _fun00007;
 1211:
            option = 10;
            option = yankee[option];
            report = verify.bind(offset)(option);
 1223:
            report = oscard.bind(golfie)(report);
            oscard = report.uri;
            report = 'thumbnailUrl';
            michal[report] = oscard;
            oscard = tangon.thumbnailBackgroundColor;
            report = 'thumbnailBackgroundColor';
            michal[report] = oscard;
            report = tangon.subtitleColor;
            tangon = 'subtitleColor';
            michal[tangon] = report;
            zuuluu = _closure1_slot6;
            tangon = zuuluu.GUILD;
            zuuluu = 'type';
            michal[zuuluu] = tangon;
            entity = michal;
 1294:
            return entity;
        }
    };
    zuuluu['createAppDirectoryProfileEmbed'] = michal;
    return entity;
})();