// app/modules/messages/native/renderer/system_messages/ThreadStarterSystemMessage.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    golfie = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    golfie = oscard[tangon];
    golfie = option.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ReferencedMessageState;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MessageTypes;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/messages/native/renderer/system_messages/ThreadStarterSystemMessage.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: ThreadStarterSystemMessage
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            golfie = michal.row;
            michal = golfie.message;
            verify = michal.messageReference;
            var _closure2_slot0 = verify;
            offset = michal.type;
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            michal = 4;
            michal = tangon[michal];
            report = undefined;
            option = zuuluu.bind(report)(michal);
            michal = _closure1_slot5;
            michal = michal.THREAD_STARTER_MESSAGE;
            zuuluu = global;
            zuuluu = zuuluu.HermesInternal;
            yankee = zuuluu.concat;
            zuuluu = 'cannot call createThreadStarterSystemMessage on a message of type ';
            zuuluu = yankee.bind(zuuluu)(offset);
            michal = offset === michal;
            michal = option.bind(report)(michal, zuuluu);
            zuuluu = _closure1_slot0;
            michal = 7;
            michal = tangon[michal];
            option = zuuluu.bind(report)(michal);
            tangon = option.useStateFromStores;
            michal = _closure1_slot3;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = new Array(1);
            michal[0] = verify;
            entity = function() {
                zuuluu = _closure1_slot3;
                michal = zuuluu.getMessageByReference;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                entity = entity.state;
                return entity;
            };
            zuuluu = tangon.bind(option)(zuuluu, entity, michal);
            entity = _closure1_slot4;
            michal = entity.LOADED;
            entity = null;
            if(!(zuuluu !== michal)) { _fun00002_ip = 261; continue _fun00001 }
 169:
            tangon = _closure1_slot6;
            zuuluu = _closure1_slot1;
            offset = _closure1_slot2;
            michal = 8;
            michal = offset[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = {};
            michal['row'] = golfie;
            verify = _closure1_slot0;
            oscard = 5;
            golfie = offset[oscard];
            golfie = verify.bind(report)(golfie);
            option = golfie.intl;
            golfie = option.string;
            oscard = offset[oscard];
            oscard = verify.bind(report)(oscard);
            oscard = oscard.t;
            oscard = oscard.OCs36O;
            oscard = golfie.bind(option)(oscard);
            michal['content'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 261:
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: createThreadStarterSystemMessage
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            report = argFoo;
            entity = report.message;
            oscard = entity.messageReference;
            option = entity.type;
            michal = _closure1_slot1;
            tangon = _closure1_slot2;
            entity = 4;
            entity = tangon[entity];
            tangon = undefined;
            golfie = michal.bind(tangon)(entity);
            entity = _closure1_slot5;
            entity = entity.THREAD_STARTER_MESSAGE;
            michal = global;
            michal = michal.HermesInternal;
            verify = michal.concat;
            michal = 'cannot call createThreadStarterSystemMessage on a message of type ';
            michal = verify.bind(michal)(option);
            entity = option === entity;
            entity = golfie.bind(tangon)(entity, michal);
            michal = _closure1_slot3;
            entity = michal.getMessageByReference;
            entity = entity.bind(michal)(oscard);
            oscard = entity.state;
            entity = _closure1_slot4;
            michal = entity.LOADED;
            entity = null;
            if(!(oscard !== michal)) { _fun00004_ip = 216; continue _fun00003 }
 124:
            michal = {};
            offset = _closure1_slot0;
            golfie = _closure1_slot2;
            oscard = 5;
            option = golfie[oscard];
            option = offset.bind(tangon)(option);
            verify = option.intl;
            option = verify.string;
            oscard = golfie[oscard];
            oscard = offset.bind(tangon)(oscard);
            oscard = oscard.t;
            oscard = oscard.OCs36O;
            oscard = option.bind(verify)(oscard);
            michal['content'] = oscard;
            oscard = _closure1_slot1;
            zuuluu = 6;
            zuuluu = golfie[zuuluu];
            zuuluu = oscard.bind(tangon)(zuuluu);
            yankee = zuuluu.bind(tangon)(report);
            romeon = michal;
            zuuluu = copyDataProperties(romeon, yankee);
            entity = michal;
 216:
            return entity;
        }
    };
    zuuluu['createThreadStarterSystemMessage'] = michal;
    return entity;
})();