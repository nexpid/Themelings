// app/modules/messages/native/renderer/system_messages/ThreadStarterSystemMessage.tsx
export default (function(native1, native2, native3, native4, native5, native6, native7) {
    var5 = native2;
    var8 = native3;
    var3 = native6;
    var6 = native7;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var8;
    var _closure1_slot2 = var6;
    var1 = global;
    var9 = var1.Object;
    var7 = var9.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var9)(var3, var1, var4);
    var1 = 0;
    var7 = var6[var1];
    var4 = native4;
    var1 = undefined;
    var4 = var4.bind(var1)(var7);
    var4 = 1;
    var7 = var6[var4];
    var7 = var8.bind(var1)(var7);
    var _closure1_slot3 = var7;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.ReferencedMessageState;
    var _closure1_slot4 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.MessageTypes;
    var _closure1_slot5 = var4;
    var4 = 3;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.jsx;
    var _closure1_slot6 = var4;
    var4 = 9;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/messages/native/renderer/system_messages/ThreadStarterSystemMessage.tsx';
    var4 = var5.bind(var6)(var4);
    var4 = function ThreadStarterSystemMessage(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var2 = arg1;
            var7 = var2.row;
            var2 = var7.message;
            var9 = var2.messageReference;
            var _closure2_slot0 = var9;
            var10 = var2.type;
            var3 = _closure1_slot1;
            var4 = _closure1_slot2;
            var2 = 4;
            var2 = var4[var2];
            var5 = undefined;
            var8 = var3.bind(var5)(var2);
            var2 = _closure1_slot5;
            var2 = var2.THREAD_STARTER_MESSAGE;
            var3 = global;
            var3 = var3.HermesInternal;
            var11 = var3.concat;
            var3 = 'cannot call createThreadStarterSystemMessage on a message of type ';
            var3 = var11.bind(var3)(var10);
            var2 = var10 === var2;
            var2 = var8.bind(var5)(var2, var3);
            var3 = _closure1_slot0;
            var2 = 7;
            var2 = var4[var2];
            var8 = var3.bind(var5)(var2);
            var4 = var8.useStateFromStores;
            var2 = _closure1_slot3;
            var3 = new Array(1);
            var3[0] = var2;
            var2 = new Array(1);
            var2[0] = var9;
            var1 = function() {
                var3 = _closure1_slot3;
                var2 = var3.getMessageByReference;
                var1 = _closure2_slot0;
                var1 = var2.bind(var3)(var1);
                var1 = var1.state;
                return var1;
            };
            var3 = var4.bind(var8)(var3, var1, var2);
            var1 = _closure1_slot4;
            var2 = var1.LOADED;
            var1 = null;
            if(!(var3 !== var2)) { _fun0001_ip = 263; continue _fun0001 }
 171:
            var4 = _closure1_slot6;
            var3 = _closure1_slot1;
            var10 = _closure1_slot2;
            var2 = 8;
            var2 = var10[var2];
            var3 = var3.bind(var5)(var2);
            var2 = {};
            var2['row'] = var7;
            var9 = _closure1_slot0;
            var6 = 5;
            var7 = var10[var6];
            var7 = var9.bind(var5)(var7);
            var8 = var7.intl;
            var7 = var8.string;
            var6 = var10[var6];
            var6 = var9.bind(var5)(var6);
            var6 = var6.t;
            var6 = var6.OCs36O;
            var6 = var7.bind(var8)(var6);
            var2['content'] = var6;
            var1 = var4.bind(var5)(var3, var2);
 263:
            return var1;
        }
    };
    var3['default'] = var4;
    var2 = function createThreadStarterSystemMessage(arg1) {
        _fun0002: for(var _fun0002_ip = 0; ; ) switch(_fun0002_ip) {
 0:
            var5 = arg1;
            var1 = var5.message;
            var6 = var1.messageReference;
            var8 = var1.type;
            var2 = _closure1_slot1;
            var4 = _closure1_slot2;
            var1 = 4;
            var1 = var4[var1];
            var4 = undefined;
            var7 = var2.bind(var4)(var1);
            var1 = _closure1_slot5;
            var1 = var1.THREAD_STARTER_MESSAGE;
            var2 = global;
            var2 = var2.HermesInternal;
            var9 = var2.concat;
            var2 = 'cannot call createThreadStarterSystemMessage on a message of type ';
            var2 = var9.bind(var2)(var8);
            var1 = var8 === var1;
            var1 = var7.bind(var4)(var1, var2);
            var2 = _closure1_slot3;
            var1 = var2.getMessageByReference;
            var1 = var1.bind(var2)(var6);
            var6 = var1.state;
            var1 = _closure1_slot4;
            var2 = var1.LOADED;
            var1 = null;
            if(!(var6 !== var2)) { _fun0002_ip = 216; continue _fun0002 }
 124:
            var2 = {};
            var10 = _closure1_slot0;
            var7 = _closure1_slot2;
            var6 = 5;
            var8 = var7[var6];
            var8 = var10.bind(var4)(var8);
            var9 = var8.intl;
            var8 = var9.string;
            var6 = var7[var6];
            var6 = var10.bind(var4)(var6);
            var6 = var6.t;
            var6 = var6.OCs36O;
            var6 = var8.bind(var9)(var6);
            var2['content'] = var6;
            var6 = _closure1_slot1;
            var3 = 6;
            var3 = var7[var3];
            var3 = var6.bind(var4)(var3);
            var11 = var3.bind(var4)(var5);
            var12 = var2;
            var3 = copyDataProperties(var12, var11);
            var1 = var2;
 216:
            return var1;
        }
    };
    var3['createThreadStarterSystemMessage'] = var2;
    return var1;
})();