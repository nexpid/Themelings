// app/modules/messages/EmbedConstants.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    michal = global;
    option = michal.Object;
    report = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = golfie[entity];
    entity = undefined;
    tangon = oscard.bind(entity)(tangon);
    report = tangon.MessageEmbedTypes;
    verify = michal.Set;
    option = report.AUTO_MODERATION_MESSAGE;
    tangon = new Array(8);
    tangon[0] = option;
    option = report.AUTO_MODERATION_NOTIFICATION;
    tangon[1] = option;
    option = report.RICH;
    tangon[2] = option;
    option = report.SAFETY_POLICY_NOTICE;
    tangon[3] = option;
    option = report.SAFETY_SYSTEM_NOTIFICATION;
    tangon[4] = option;
    option = report.AGE_VERIFICATION_SYSTEM_NOTIFICATION;
    tangon[5] = option;
    option = report.VOICE_CHANNEL;
    tangon[6] = option;
    option = report.POLL_RESULT;
    tangon[7] = option;
    option = verify.prototype;
    option = Object.create(option, {constructor: {value: verify}});
    foxtra = option;
    romeon = tangon;
    tangon = new foxtra[verify](romeon, yankee);
    tangon = tangon instanceof Object ? tangon : option;
    option = michal.Set;
    verify = report.AUTO_MODERATION_MESSAGE;
    michal = new Array(9);
    michal[0] = verify;
    verify = report.AUTO_MODERATION_NOTIFICATION;
    michal[1] = verify;
    verify = report.AGE_VERIFICATION_SYSTEM_NOTIFICATION;
    michal[2] = verify;
    verify = report.APPLICATION_NEWS;
    michal[3] = verify;
    verify = report.POST_PREVIEW;
    michal[4] = verify;
    verify = report.SAFETY_POLICY_NOTICE;
    michal[5] = verify;
    verify = report.SAFETY_SYSTEM_NOTIFICATION;
    michal[6] = verify;
    verify = report.VOICE_CHANNEL;
    michal[7] = verify;
    report = report.POLL_RESULT;
    michal[8] = report;
    report = option.prototype;
    report = Object.create(report, {constructor: {value: option}});
    foxtra = report;
    romeon = michal;
    michal = new foxtra[option](romeon, yankee);
    michal = michal instanceof Object ? michal : report;
    report = 1;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/messages/EmbedConstants.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['EMBED_TYPES_WITH_PARSEABLE_FIELDS'] = tangon;
    zuuluu['EMBED_TYPES_WITH_SPECIAL_RENDERER'] = michal;
    return entity;
})();