// app/modules/messages/BurstReactionEffectUtils.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    golfie = argBar;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = golfie;
    var _closure1_slot1 = option;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, michal);
    report = {};
    entity = 'out of burst reactions modal';
    report['OUT_OF_BURSTS'] = entity;
    entity = 1;
    michal = option[entity];
    entity = undefined;
    verify = golfie.bind(entity)(michal);
    oscard = verify.memoize;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            oscard = argFoo;
            entity = oscard.length;
            zuuluu = 0;
            entity = zuuluu < entity;
            report = 5;
            tangon = 0;
            michal = 0;
            if(!entity) { _fun00002_ip = 62; continue _fun00001 }
 24:
            entity = oscard.charCodeAt;
            golfie = entity.bind(oscard)(michal);
            entity = tangon << report;
            entity = entity - tangon;
            tangon = entity + golfie;
            michal = michal + 1;
            entity = oscard.length;
            zuuluu = tangon;
            if(michal < entity) { _fun00002_ip = 24; continue _fun00001 }
 62:
            entity = global;
            michal = entity.Math;
            entity = michal.abs;
            entity = entity.bind(michal)(zuuluu);
            return entity;
        }
    };
    michal = oscard.bind(verify)(michal);
    oscard = 2;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = 'modules/messages/BurstReactionEffectUtils.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['BurstAnalyticTypes'] = report;
    tangon = function(argFoo, argBar) {
        romeon = argFoo;
        tangon = argBar;
        zuuluu = _closure1_slot0;
        entity = _closure1_slot1;
        oscard = 0;
        michal = entity[oscard];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.getComplimentaryPaletteForColor;
        report = tangon.r;
        entity = new Array(3);
        entity[0] = report;
        report = tangon.g;
        entity[1] = report;
        tangon = tangon.b;
        entity[2] = tangon;
        offset = 2;
        yankee = michal.bind(zuuluu)(entity, offset);
        report = romeon.replace;
        entity = yankee[oscard];
        entity = entity[oscard];
        verify = 255;
        update = entity / verify;
        entity = yankee[oscard];
        michal = 1;
        entity = entity[michal];
        result = entity / verify;
        entity = yankee[oscard];
        entity = entity[offset];
        sizing = entity / verify;
        entity = global;
        zuuluu = entity.HermesInternal;
        zuuluu = zuuluu.concat;
        option = '[';
        golfie = ',';
        source = option;
        echoed = golfie;
        output = golfie;
        kiloes = golfie;
        tangon = source[zuuluu](update, echoed, result, output, sizing, kiloes, backup);
        zuuluu = /(\[1,0,0,)/g;
        tangon = report.bind(romeon)(zuuluu, tangon);
        zuuluu = tangon.replace;
        report = yankee[michal];
        report = report[oscard];
        update = report / verify;
        report = yankee[michal];
        report = report[michal];
        result = report / verify;
        michal = yankee[michal];
        michal = michal[offset];
        sizing = michal / verify;
        entity = entity.HermesInternal;
        entity = entity.concat;
        source = option;
        echoed = golfie;
        michal = source[entity](update, echoed, result, output, sizing, kiloes, backup);
        entity = /\[0,0,1,/g;
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    zuuluu['replaceAnimationColors'] = tangon;
    zuuluu['getBurstAnimationHash'] = michal;
    return entity;
})();