// app/modules/guild_scheduled_events/native/guild_sidebar/UpcomingEventsChannelRow.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.CHANNEL_MARGIN_VERTICAL;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot3 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['marginVertical'] = yankee;
    yankee = 8;
    offset['marginHorizontal'] = yankee;
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.md;
    offset['borderRadius'] = foxtra;
    tangon['container'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_ACCENT;
    offset['backgroundColor'] = yankee;
    tangon['badge'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot4 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.guild;
            entity = _closure1_slot4;
            tangon = undefined;
            offset = entity.bind(tangon)();
            backup = _closure1_slot1;
            foxtra = _closure1_slot2;
            entity = 5;
            entity = foxtra[entity];
            entity = backup.bind(tangon)(entity);
            entity = entity.bind(tangon)(michal);
            verify = entity.mentionCount;
            yankee = entity.mode;
            sizing = entity.name;
            golfie = entity.eventsMuted;
            romeon = entity.handlePress;
            option = entity.handleLongPress;
            zuuluu = _closure1_slot3;
            report = 6;
            entity = foxtra[report];
            michal = backup.bind(tangon)(entity);
            entity = {};
            entity['onPress'] = romeon;
            entity['onLongPress'] = option;
            option = offset.container;
            entity['style'] = option;
            option = true;
            entity['accessible'] = option;
            romeon = _closure1_slot0;
            option = 7;
            kiloes = foxtra[option];
            kiloes = romeon.bind(tangon)(kiloes);
            output = kiloes.intl;
            kiloes = output.string;
            option = foxtra[option];
            option = romeon.bind(tangon)(option);
            option = option.t;
            option = option.tlopTE;
            option = kiloes.bind(output)(option);
            entity['accessibilityLabel'] = option;
            entity['mode'] = yankee;
            option = foxtra[report];
            option = romeon.bind(tangon)(option);
            option = option.ChannelModes;
            option = option.UNREAD_IMPORTANT;
            option = yankee === option;
            entity['unread'] = option;
            option = foxtra[report];
            option = romeon.bind(tangon)(option);
            kiloes = option.BaseChannelName;
            option = {};
            option['name'] = sizing;
            option['mode'] = yankee;
            option = zuuluu.bind(tangon)(kiloes, option);
            entity['name'] = option;
            report = foxtra[report];
            report = romeon.bind(tangon)(report);
            option = report.BaseChannelIcon;
            report = {};
            report['mode'] = yankee;
            yankee = 8;
            yankee = foxtra[yankee];
            yankee = backup.bind(tangon)(yankee);
            report['source'] = yankee;
            yankee = 9;
            yankee = foxtra[yankee];
            yankee = romeon.bind(tangon)(yankee);
            yankee = yankee.CalendarIcon;
            report['IconComponent'] = yankee;
            report = zuuluu.bind(tangon)(option, report);
            entity['icon'] = report;
            report = null;
            if(golfie) { _fun00002_ip = 379; continue _fun00001 }
 322:
            golfie = 0;
            golfie = verify > golfie;
            report = null;
            if(!golfie) { _fun00002_ip = 379; continue _fun00001 }
 333:
            option = _closure1_slot3;
            golfie = _closure1_slot1;
            yankee = _closure1_slot2;
            oscard = 10;
            oscard = yankee[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            offset = offset.badge;
            oscard['style'] = offset;
            oscard['value'] = verify;
            report = option.bind(tangon)(golfie, oscard);
 379:
            entity['channelInfo'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/guild_sidebar/UpcomingEventsChannelRow.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();