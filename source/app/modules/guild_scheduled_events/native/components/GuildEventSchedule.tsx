// app/modules/guild_scheduled_events/native/components/GuildEventSchedule.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    golfie = tangon.Fragment;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/components/GuildEventSchedule.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildEventSchedule
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            oscard = michal.guildEvent;
            entity = michal.recurrenceId;
            sizing = michal.schedule;
            var _closure2_slot0 = sizing;
            michal = michal.onChange;
            var _closure2_slot1 = michal;
            report = _closure1_slot1;
            michal = _closure1_slot2;
            zuuluu = 2;
            golfie = michal[zuuluu];
            tangon = undefined;
            golfie = report.bind(tangon)(golfie);
            result = golfie.bind(tangon)();
            golfie = michal[zuuluu];
            golfie = report.bind(tangon)(golfie);
            foxtra = golfie.bind(tangon)();
            romeon = foxtra.add;
            offset = _closure1_slot0;
            golfie = 3;
            verify = michal[golfie];
            verify = offset.bind(tangon)(verify);
            yankee = verify.MAX_DAYS_AHEAD_AN_EVENT_CAN_START;
            verify = 'days';
            backup = romeon.bind(foxtra)(yankee, verify);
            output = _closure1_slot3;
            foxtra = output.useMemo;
            yankee = sizing.startDate;
            romeon = new Array(1);
            romeon[0] = yankee;
            yankee = function() {
                michal = _closure1_slot1;
                zuuluu = _closure1_slot2;
                entity = 2;
                entity = zuuluu[entity];
                zuuluu = undefined;
                michal = michal.bind(zuuluu)(entity);
                entity = _closure2_slot0;
                entity = entity.startDate;
                tangon = michal.bind(zuuluu)(entity);
                zuuluu = tangon.add;
                michal = 15;
                entity = 'minutes';
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            romeon = foxtra.bind(output)(yankee, romeon);
            zuuluu = michal[zuuluu];
            zuuluu = report.bind(tangon)(zuuluu);
            report = zuuluu.bind(tangon)();
            zuuluu = report.add;
            michal = michal[golfie];
            michal = offset.bind(tangon)(michal);
            michal = michal.MAX_DAYS_AHEAD_AN_EVENT_CAN_END;
            yankee = zuuluu.bind(report)(michal, verify);
            verify = null;
            if(!(verify != entity)) { _fun00002_ip = 261; continue _fun00001 }
 197:
            offset = backup.add;
            report = _closure1_slot0;
            entity = _closure1_slot2;
            michal = entity[golfie];
            michal = report.bind(tangon)(michal);
            michal = michal.MAX_YEARS_AHEAD_RECURRING_EVENT;
            zuuluu = 'years';
            michal = offset.bind(backup)(michal, zuuluu);
            michal = yankee.add;
            entity = entity[golfie];
            entity = report.bind(tangon)(entity);
            entity = entity.MAX_YEARS_AHEAD_RECURRING_EVENT;
            entity = michal.bind(yankee)(entity, zuuluu);
 261:
            zuuluu = _closure1_slot6;
            michal = _closure1_slot5;
            entity = {};
            foxtra = _closure1_slot4;
            update = _closure1_slot0;
            output = _closure1_slot2;
            golfie = 4;
            report = output[golfie];
            report = update.bind(tangon)(report);
            offset = report.GuildEventDatetime;
            report = {};
            echoed = sizing.startDate;
            report['date'] = echoed;
            echoed = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot1;
                michal = {};
                report = _closure2_slot0;
                oscard = michal;
                entity = copyDataProperties(oscard, report);
                tangon = argFoo;
                entity = 'startDate';
                michal[entity] = tangon;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            report['onChange'] = echoed;
            report['minimumDate'] = result;
            report['maximumDate'] = backup;
            backup = 5;
            result = output[backup];
            result = update.bind(tangon)(result);
            source = result.intl;
            echoed = source.string;
            result = output[backup];
            result = update.bind(tangon)(result);
            result = result.t;
            result = result.kKOIwM;
            result = echoed.bind(source)(result);
            report['dateLabel'] = result;
            result = output[backup];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[backup];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.6dGmCA;
            output = result.bind(echoed)(output);
            report['timeLabel'] = output;
            offset = foxtra.bind(tangon)(offset, report);
            report = new Array(2);
            report[0] = offset;
            oscard = oscard.scheduled_end_time;
            oscard = verify != oscard;
            if(!oscard) { _fun00002_ip = 633; continue _fun00001 }
 467:
            verify = _closure1_slot4;
            foxtra = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = offset[golfie];
            golfie = foxtra.bind(tangon)(golfie);
            option = golfie.GuildEventDatetime;
            golfie = {};
            sizing = sizing.endDate;
            golfie['date'] = sizing;
            kiloes = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot1;
                michal = {};
                report = _closure2_slot0;
                oscard = michal;
                entity = copyDataProperties(oscard, report);
                tangon = argFoo;
                entity = 'endDate';
                michal[entity] = tangon;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            golfie['onChange'] = kiloes;
            golfie['minimumDate'] = romeon;
            golfie['maximumDate'] = yankee;
            yankee = offset[backup];
            yankee = foxtra.bind(tangon)(yankee);
            kiloes = yankee.intl;
            romeon = kiloes.string;
            yankee = offset[backup];
            yankee = foxtra.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.CTLgZG;
            yankee = romeon.bind(kiloes)(yankee);
            golfie['dateLabel'] = yankee;
            yankee = offset[backup];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = offset[backup];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.j2RuXF;
            offset = yankee.bind(romeon)(offset);
            golfie['timeLabel'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 633:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();