// app/modules/guild_scheduled_events/native/components/GuildEventSchedule.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 6;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_scheduled_events/native/components/GuildEventSchedule.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildEventSchedule
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            oscar = mike.guildEvent;
            entity = mike.recurrenceId;
            sizing = mike.schedule;
            var _closure2_slot0 = sizing;
            mike = mike.onChange;
            var _closure2_slot1 = mike;
            report = _closure1_slot1;
            mike = _closure1_slot2;
            zulu = 2;
            golf = mike[zulu];
            tango = undefined;
            golf = report.bind(tango)(golf);
            result = golf.bind(tango)();
            golf = mike[zulu];
            golf = report.bind(tango)(golf);
            foxtrot = golf.bind(tango)();
            romeo = foxtrot.add;
            offset = _closure1_slot0;
            golf = 3;
            verify = mike[golf];
            verify = offset.bind(tango)(verify);
            yankee = verify.MAX_DAYS_AHEAD_AN_EVENT_CAN_START;
            verify = 'days';
            backup = romeo.bind(foxtrot)(yankee, verify);
            output = _closure1_slot3;
            foxtrot = output.useMemo;
            yankee = sizing.startDate;
            romeo = new Array(1);
            romeo[0] = yankee;
            yankee = function() {
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 2;
                entity = zulu[entity];
                zulu = undefined;
                mike = mike.bind(zulu)(entity);
                entity = _closure2_slot0;
                entity = entity.startDate;
                tango = mike.bind(zulu)(entity);
                zulu = tango.add;
                mike = 15;
                entity = 'minutes';
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            romeo = foxtrot.bind(output)(yankee, romeo);
            zulu = mike[zulu];
            zulu = report.bind(tango)(zulu);
            report = zulu.bind(tango)();
            zulu = report.add;
            mike = mike[golf];
            mike = offset.bind(tango)(mike);
            mike = mike.MAX_DAYS_AHEAD_AN_EVENT_CAN_END;
            yankee = zulu.bind(report)(mike, verify);
            verify = null;
            if(!(verify != entity)) { _fun00002_ip = 261; continue _fun00001 }
 197:
            offset = backup.add;
            report = _closure1_slot0;
            entity = _closure1_slot2;
            mike = entity[golf];
            mike = report.bind(tango)(mike);
            mike = mike.MAX_YEARS_AHEAD_RECURRING_EVENT;
            zulu = 'years';
            mike = offset.bind(backup)(mike, zulu);
            mike = yankee.add;
            entity = entity[golf];
            entity = report.bind(tango)(entity);
            entity = entity.MAX_YEARS_AHEAD_RECURRING_EVENT;
            entity = mike.bind(yankee)(entity, zulu);
 261:
            zulu = _closure1_slot6;
            mike = _closure1_slot5;
            entity = {};
            foxtrot = _closure1_slot4;
            update = _closure1_slot0;
            output = _closure1_slot2;
            golf = 4;
            report = output[golf];
            report = update.bind(tango)(report);
            offset = report.GuildEventDatetime;
            report = {};
            echo = sizing.startDate;
            report['date'] = echo;
            echo = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot1;
                mike = {};
                report = _closure2_slot0;
                oscar = mike;
                entity = copyDataProperties(oscar, report);
                tango = argFoo;
                entity = 'startDate';
                mike[entity] = tango;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            report['onChange'] = echo;
            report['minimumDate'] = result;
            report['maximumDate'] = backup;
            backup = 5;
            result = output[backup];
            result = update.bind(tango)(result);
            source = result.intl;
            echo = source.string;
            result = output[backup];
            result = update.bind(tango)(result);
            result = result.t;
            result = result.kKOIwM;
            result = echo.bind(source)(result);
            report['dateLabel'] = result;
            result = output[backup];
            result = update.bind(tango)(result);
            echo = result.intl;
            result = echo.string;
            output = output[backup];
            output = update.bind(tango)(output);
            output = output.t;
            output = output.6dGmCA;
            output = result.bind(echo)(output);
            report['timeLabel'] = output;
            offset = foxtrot.bind(tango)(offset, report);
            report = new Array(2);
            report[0] = offset;
            oscar = oscar.scheduled_end_time;
            oscar = verify != oscar;
            if(!oscar) { _fun00002_ip = 633; continue _fun00001 }
 467:
            verify = _closure1_slot4;
            foxtrot = _closure1_slot0;
            offset = _closure1_slot2;
            golf = offset[golf];
            golf = foxtrot.bind(tango)(golf);
            options = golf.GuildEventDatetime;
            golf = {};
            sizing = sizing.endDate;
            golf['date'] = sizing;
            kilo = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot1;
                mike = {};
                report = _closure2_slot0;
                oscar = mike;
                entity = copyDataProperties(oscar, report);
                tango = argFoo;
                entity = 'endDate';
                mike[entity] = tango;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            golf['onChange'] = kilo;
            golf['minimumDate'] = romeo;
            golf['maximumDate'] = yankee;
            yankee = offset[backup];
            yankee = foxtrot.bind(tango)(yankee);
            kilo = yankee.intl;
            romeo = kilo.string;
            yankee = offset[backup];
            yankee = foxtrot.bind(tango)(yankee);
            yankee = yankee.t;
            yankee = yankee.CTLgZG;
            yankee = romeo.bind(kilo)(yankee);
            golf['dateLabel'] = yankee;
            yankee = offset[backup];
            yankee = foxtrot.bind(tango)(yankee);
            romeo = yankee.intl;
            yankee = romeo.string;
            offset = offset[backup];
            offset = foxtrot.bind(tango)(offset);
            offset = offset.t;
            offset = offset.j2RuXF;
            offset = yankee.bind(romeo)(offset);
            golf['timeLabel'] = offset;
            oscar = verify.bind(tango)(options, golf);
 633:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();