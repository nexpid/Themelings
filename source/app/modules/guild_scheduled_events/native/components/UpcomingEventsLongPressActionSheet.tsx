// app/modules/guild_scheduled_events/native/components/UpcomingEventsLongPressActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ReadStateTypes;
    var _closure1_slot6 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['marginRight'] = offset;
    tangon['headerIcon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/components/UpcomingEventsLongPressActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: UpcomingEventsLongPressActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.guildId;
            var _closure2_slot0 = entity;
            entity = _closure1_slot9;
            tangon = undefined;
            kiloes = entity.bind(tangon)();
            golfie = _closure1_slot0;
            yankee = _closure1_slot2;
            entity = 7;
            michal = yankee[entity];
            oscard = golfie.bind(tangon)(michal);
            report = oscard.useStateFromStores;
            michal = _closure1_slot4;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot4;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            echoed = report.bind(oscard)(zuuluu, michal);
            entity = yankee[entity];
            report = golfie.bind(tangon)(entity);
            zuuluu = report.useStateFromStores;
            entity = _closure1_slot5;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.isMuteScheduledEventsEnabled;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            foxtra = zuuluu.bind(report)(michal, entity);
            var _closure2_slot1 = foxtra;
            zuuluu = _closure1_slot8;
            entity = 8;
            entity = yankee[entity];
            entity = golfie.bind(tangon)(entity);
            michal = entity.ActionSheet;
            entity = {};
            option = _closure1_slot7;
            report = 9;
            report = yankee[report];
            report = golfie.bind(tangon)(report);
            oscard = report.BottomSheetTitleHeader;
            report = {};
            romeon = _closure1_slot3;
            offset = {};
            kiloes = kiloes.headerIcon;
            offset['style'] = kiloes;
            sizing = _closure1_slot1;
            result = 10;
            kiloes = yankee[result];
            output = sizing.bind(tangon)(kiloes);
            kiloes = {};
            kiloes['guild'] = echoed;
            result = yankee[result];
            result = golfie.bind(tangon)(result);
            result = result.GuildIconSizes;
            result = result.LARGE;
            kiloes['size'] = result;
            kiloes = option.bind(tangon)(output, kiloes);
            offset['children'] = kiloes;
            offset = option.bind(tangon)(romeon, offset);
            report['leading'] = offset;
            result = 11;
            offset = yankee[result];
            offset = golfie.bind(tangon)(offset);
            kiloes = offset.intl;
            romeon = kiloes.string;
            offset = yankee[result];
            offset = golfie.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.tlopTE;
            offset = romeon.bind(kiloes)(offset);
            report['title'] = offset;
            oscard = option.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            kiloes = 12;
            oscard = yankee[kiloes];
            oscard = golfie.bind(tangon)(oscard);
            romeon = oscard.FormRow;
            oscard = {};
            offset = 13;
            output = yankee[offset];
            echoed = sizing.bind(tangon)(output);
            output = {};
            update = 14;
            update = yankee[update];
            update = sizing.bind(tangon)(update);
            output['source'] = update;
            output = option.bind(tangon)(echoed, output);
            oscard['leading'] = output;
            output = yankee[kiloes];
            output = golfie.bind(tangon)(output);
            echoed = output.FormLabel;
            output = {};
            update = yankee[result];
            update = golfie.bind(tangon)(update);
            ctrled = update.intl;
            source = ctrled.string;
            update = yankee[result];
            update = golfie.bind(tangon)(update);
            update = update.t;
            update = update.e6RscX;
            update = source.bind(ctrled)(update);
            output['text'] = update;
            output = option.bind(tangon)(echoed, output);
            oscard['label'] = output;
            output = function() { // Original name: onPress
                report = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 15;
                zuuluu = tangon[entity];
                entity = undefined;
                golfie = report.bind(entity)(zuuluu);
                oscard = golfie.ackGuildFeature;
                report = _closure2_slot0;
                zuuluu = _closure1_slot6;
                zuuluu = zuuluu.GUILD_EVENT;
                zuuluu = oscard.bind(golfie)(report, zuuluu);
                zuuluu = _closure1_slot1;
                michal = 16;
                michal = tangon[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.hideActionSheet;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            oscard['onPress'] = output;
            oscard = option.bind(tangon)(romeon, oscard);
            report[1] = oscard;
            oscard = yankee[kiloes];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.FormRow;
            oscard = {};
            offset = yankee[offset];
            yankee = sizing.bind(tangon)(offset);
            offset = {};
            echoed = _closure1_slot2;
            if(foxtra) { _fun00002_ip = 518; continue _fun00001 }
 509:
            romeon = 18;
            romeon = echoed[romeon];
            _fun00002_ip = 525; continue _fun00001;
 518:
            output = 17;
            romeon = echoed[output];
 525:
            romeon = sizing.bind(tangon)(romeon);
            offset['source'] = romeon;
            offset = option.bind(tangon)(yankee, offset);
            oscard['leading'] = offset;
            romeon = _closure1_slot7;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            offset = offset[kiloes];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.FormLabel;
            offset = {};
            output = _closure1_slot0;
            backup = _closure1_slot2;
            kiloes = backup[result];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = backup[result];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            if(foxtra) { _fun00002_ip = 631; continue _fun00001 }
 618:
            foxtra = backup.ONG3Y2;
            foxtra = kiloes.bind(sizing)(foxtra);
            _fun00002_ip = 644; continue _fun00001;
 631:
            backup = backup.COiLo6;
            foxtra = kiloes.bind(sizing)(backup);
 644:
            offset['text'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            oscard['label'] = offset;
            verify = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                verify = _closure1_slot2;
                entity = 19;
                michal = verify[entity];
                entity = undefined;
                oscard = zuuluu.bind(entity)(michal);
                report = oscard.updateGuildNotificationSettings;
                tangon = _closure2_slot0;
                zuuluu = {};
                michal = _closure2_slot1;
                option = !michal;
                zuuluu['mute_scheduled_events'] = option;
                option = _closure1_slot0;
                golfie = 20;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                option = golfie.NotificationLabel;
                golfie = option.mutedEvents;
                michal = !michal;
                michal = golfie.bind(option)(michal);
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                return entity;
            };
            oscard['onPress'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();