// app/modules/guild_scheduled_events/native/components/StageChannelUpsell.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Image;
    var _closure1_slot4 = golf;
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.createChannelRecord;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.useStageChannelUpsellCardStore;
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.CREATE_GUILD_EVENT_MODAL_KEY;
    var _closure1_slot8 = tango;
    tango = 6;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ChannelTypes;
    var _closure1_slot9 = tango;
    tango = 7;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot11 = tango;
    tango = 8;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flexDirection': 'column', 'alignItems': 'center', 'backgroundColor': null, 'padding': 16, 'margin': 16};
    yankee = 9;
    offset = oscar[yankee];
    offset = romeo.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    offset = 16;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.sm;
    verify['borderRadius'] = yankee;
    tango['container'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tango['image'] = verify;
    verify = {'position': 'absolute', 'top': 14, 'right': 14};
    tango['closeContainer'] = verify;
    verify = {'lineHeight': 20, 'marginBottom': 4};
    tango['header'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 4};
    tango['description'] = verify;
    verify = {};
    offset = 12;
    verify['marginTop'] = offset;
    tango['button'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot12 = tango;
    tango = 21;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_scheduled_events/native/components/StageChannelUpsell.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: StageChannelUpsell
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            mike = entity.guildId;
            var _closure2_slot0 = mike;
            entity = entity.onCreate;
            var _closure2_slot1 = entity;
            entity = _closure1_slot12;
            report = undefined;
            sizing = entity.bind(report)();
            entity = _closure1_slot7;
            zulu = entity.bind(report)();
            mike = _closure1_slot3;
            entity = 2;
            zulu = mike.bind(report)(zulu, entity);
            entity = 0;
            mike = zulu[entity];
            entity = 1;
            yankee = zulu[entity];
            var _closure2_slot2 = yankee;
            entity = null;
            if(mike) { _fun00002_ip = 723; continue _fun00001 }
 83:
            tango = _closure1_slot11;
            zulu = _closure1_slot5;
            mike = {};
            oscar = sizing.container;
            mike['style'] = oscar;
            verify = _closure1_slot10;
            backup = _closure1_slot0;
            kilo = _closure1_slot2;
            oscar = 10;
            oscar = kilo[oscar];
            oscar = backup.bind(report)(oscar);
            options = oscar.PressableOpacity;
            oscar = {};
            oscar['onPress'] = yankee;
            yankee = 'button';
            oscar['accessibilityRole'] = yankee;
            yankee = sizing.closeContainer;
            oscar['style'] = yankee;
            foxtrot = _closure1_slot1;
            yankee = 11;
            yankee = kilo[yankee];
            romeo = foxtrot.bind(report)(yankee);
            yankee = {};
            output = 12;
            output = kilo[output];
            output = foxtrot.bind(report)(output);
            yankee['source'] = output;
            yankee = verify.bind(report)(romeo, yankee);
            oscar['children'] = yankee;
            options = verify.bind(report)(options, oscar);
            oscar = new Array(6);
            oscar[0] = options;
            options = _closure1_slot4;
            golf = {};
            yankee = 13;
            yankee = kilo[yankee];
            yankee = foxtrot.bind(report)(yankee);
            golf['source'] = yankee;
            yankee = sizing.image;
            golf['style'] = yankee;
            golf = verify.bind(report)(options, golf);
            oscar[1] = golf;
            golf = 14;
            options = kilo[golf];
            options = backup.bind(report)(options);
            romeo = options.Text;
            options = {'style': null, 'variant': 'text-md/bold', 'color': 'header-primary'};
            yankee = sizing.header;
            options['style'] = yankee;
            yankee = 15;
            output = kilo[yankee];
            output = backup.bind(report)(output);
            echo = output.intl;
            result = echo.string;
            output = kilo[yankee];
            output = backup.bind(report)(output);
            output = output.t;
            output = output.Sx8Ezs;
            output = result.bind(echo)(output);
            options['children'] = output;
            options = verify.bind(report)(romeo, options);
            oscar[2] = options;
            options = kilo[golf];
            options = backup.bind(report)(options);
            romeo = options.Text;
            options = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            output = sizing.description;
            options['style'] = output;
            output = kilo[yankee];
            output = backup.bind(report)(output);
            echo = output.intl;
            result = echo.string;
            output = kilo[yankee];
            output = backup.bind(report)(output);
            output = output.t;
            output = output.JUzPho;
            output = result.bind(echo)(output);
            options['children'] = output;
            options = verify.bind(report)(romeo, options);
            oscar[3] = options;
            golf = kilo[golf];
            golf = backup.bind(report)(golf);
            options = golf.Text;
            golf = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            romeo = sizing.description;
            golf['style'] = romeo;
            romeo = kilo[yankee];
            romeo = backup.bind(report)(romeo);
            echo = romeo.intl;
            result = echo.format;
            romeo = kilo[yankee];
            romeo = backup.bind(report)(romeo);
            romeo = romeo.t;
            output = romeo.Vh7rPz;
            romeo = {};
            update = function(argFoo, argBar) { // Original name: suggestionsHook
                report = _closure1_slot10;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 14;
                entity = zulu[entity];
                tango = undefined;
                entity = mike.bind(tango)(entity);
                zulu = entity.Text;
                mike = {'variant': 'text-sm/semibold', 'color': 'header-primary'};
                entity = argFoo;
                mike['children'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            romeo['suggestionsHook'] = update;
            romeo = result.bind(echo)(output, romeo);
            golf['children'] = romeo;
            golf = verify.bind(report)(options, golf);
            oscar[4] = golf;
            romeo = 16;
            golf = kilo[romeo];
            options = foxtrot.bind(report)(golf);
            golf = {};
            sizing = sizing.button;
            golf['style'] = sizing;
            sizing = kilo[romeo];
            sizing = foxtrot.bind(report)(sizing);
            sizing = sizing.Colors;
            sizing = sizing.GREY;
            golf['color'] = sizing;
            romeo = kilo[romeo];
            romeo = foxtrot.bind(report)(romeo);
            romeo = romeo.Sizes;
            romeo = romeo.MEDIUM;
            golf['size'] = romeo;
            romeo = kilo[yankee];
            romeo = backup.bind(report)(romeo);
            foxtrot = romeo.intl;
            romeo = foxtrot.string;
            yankee = kilo[yankee];
            yankee = backup.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.X/3SyM;
            yankee = romeo.bind(foxtrot)(yankee);
            golf['text'] = yankee;
            offset = function() { // Original name: onPress
                zulu = _closure1_slot1;
                tango = _closure1_slot2;
                mike = 17;
                oscar = tango[mike];
                entity = undefined;
                options = zulu.bind(entity)(oscar);
                golf = options.popWithKey;
                oscar = _closure1_slot8;
                oscar = golf.bind(options)(oscar);
                mike = tango[mike];
                verify = zulu.bind(entity)(mike);
                options = verify.pushLazy;
                oscar = _closure1_slot0;
                mike = 19;
                mike = tango[mike];
                golf = oscar.bind(entity)(mike);
                mike = 18;
                oscar = tango[mike];
                mike = tango.paths;
                golf = golf.bind(entity)(oscar, mike);
                oscar = {};
                yankee = _closure2_slot0;
                oscar['guildId'] = yankee;
                offset = _closure1_slot9;
                offset = offset.GUILD_STAGE_VOICE;
                oscar['channelType'] = offset;
                offset = function(argFoo) { // Original name: onChannelCreated
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        zulu = _closure1_slot6;
                        mike = {};
                        tango = argFoo;
                        mike['id'] = tango;
                        entity = _closure1_slot9;
                        entity = entity.GUILD_STAGE_VOICE;
                        mike['type'] = entity;
                        entity = undefined;
                        zulu = zulu.bind(entity)(mike);
                        mike = null;
                        if(!(mike != zulu)) { _fun00004_ip = 55; continue _fun00003 }
 43:
                        mike = _closure2_slot1;
                        mike = mike.bind(entity)(zulu);
 55:
                        return entity;
                    }
                };
                oscar['onChannelCreated'] = offset;
                report = function() { // Original name: onClose
                    zulu = _closure1_slot1;
                    mike = _closure1_slot2;
                    entity = 17;
                    mike = mike[entity];
                    entity = undefined;
                    tango = zulu.bind(entity)(mike);
                    zulu = tango.popWithKey;
                    mike = 'CREATE_CHANNEL_MODAL_KEY';
                    mike = zulu.bind(tango)(mike);
                    return entity;
                };
                oscar['onClose'] = report;
                report = 'CREATE_CHANNEL_MODAL_KEY';
                report = options.bind(verify)(golf, oscar, report);
                mike = _closure2_slot2;
                mike = mike.bind(entity)();
                mike = 20;
                mike = tango[mike];
                zulu = zulu.bind(entity)(mike);
                mike = zulu.hideActionSheet;
                mike = mike.bind(zulu)();
                return entity;
            };
            golf['onPress'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[5] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 723:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();