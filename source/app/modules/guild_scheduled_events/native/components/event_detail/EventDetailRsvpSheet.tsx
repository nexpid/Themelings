// app/modules/guild_scheduled_events/native/components/event_detail/EventDetailRsvpSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = golf;
    entity = function(argFoo) { // Original name: EmptyDisplay
        entity = argFoo;
        oscar = entity.children;
        options = entity.style;
        entity = _closure1_slot10;
        tango = undefined;
        golf = entity.bind(tango)();
        zulu = _closure1_slot9;
        mike = _closure1_slot5;
        entity = {};
        verify = golf.emptyDisplayContainer;
        golf = new Array(2);
        golf[0] = verify;
        golf[1] = options;
        entity['style'] = golf;
        options = _closure1_slot8;
        offset = _closure1_slot1;
        yankee = _closure1_slot2;
        report = 9;
        report = yankee[report];
        golf = offset.bind(tango)(report);
        report = {};
        verify = 10;
        verify = yankee[verify];
        verify = offset.bind(tango)(verify);
        report['icon'] = verify;
        golf = options.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot12 = entity;
    entity = function(argFoo) { // Original name: FetchErrorDisplay
        entity = argFoo;
        oscar = entity.style;
        entity = _closure1_slot10;
        tango = undefined;
        options = entity.bind(tango)();
        zulu = _closure1_slot8;
        mike = _closure1_slot12;
        entity = {};
        entity['style'] = oscar;
        golf = _closure1_slot8;
        yankee = _closure1_slot0;
        romeo = _closure1_slot2;
        report = 11;
        report = romeo[report];
        report = yankee.bind(tango)(report);
        oscar = report.Text;
        report = {'style': null, 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
        options = options.emptyDisplayTitle;
        report['style'] = options;
        options = 12;
        verify = romeo[options];
        verify = yankee.bind(tango)(verify);
        offset = verify.intl;
        verify = offset.string;
        options = romeo[options];
        options = yankee.bind(tango)(options);
        options = options.t;
        options = options.obChXl;
        options = verify.bind(offset)(options);
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: NoUsersDisplay
        entity = argFoo;
        oscar = entity.style;
        entity = _closure1_slot10;
        tango = undefined;
        options = entity.bind(tango)();
        zulu = _closure1_slot8;
        mike = _closure1_slot12;
        entity = {};
        entity['style'] = oscar;
        golf = _closure1_slot8;
        yankee = _closure1_slot0;
        romeo = _closure1_slot2;
        report = 11;
        report = romeo[report];
        report = yankee.bind(tango)(report);
        oscar = report.Text;
        report = {'style': null, 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
        options = options.emptyDisplayTitle;
        report['style'] = options;
        options = 12;
        verify = romeo[options];
        verify = yankee.bind(tango)(verify);
        offset = verify.intl;
        verify = offset.string;
        options = romeo[options];
        options = yankee.bind(tango)(options);
        options = options.t;
        options = options.hW0mBQ;
        options = verify.bind(offset)(options);
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function(argFoo) { // Original name: RemainingUsersRow
        entity = argFoo;
        verify = entity.remainingUsersGroup;
        entity = _closure1_slot10;
        report = undefined;
        backup = entity.bind(report)();
        tango = _closure1_slot8;
        oscar = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 13;
        entity = offset[entity];
        entity = oscar.bind(report)(entity);
        zulu = entity.FormRow;
        mike = {};
        entity = backup.userListRow;
        mike['DEPRECATED_style'] = entity;
        options = _closure1_slot8;
        golf = _closure1_slot5;
        entity = {};
        romeo = backup.remainingUsersIconContainer;
        entity['style'] = romeo;
        foxtrot = _closure1_slot8;
        sizing = _closure1_slot1;
        yankee = 14;
        yankee = offset[yankee];
        romeo = sizing.bind(report)(yankee);
        yankee = {};
        kilo = 10;
        kilo = offset[kilo];
        kilo = sizing.bind(report)(kilo);
        yankee['source'] = kilo;
        backup = backup.remainingUsersIcon;
        yankee['style'] = backup;
        yankee = foxtrot.bind(report)(romeo, yankee);
        entity['children'] = yankee;
        entity = options.bind(report)(golf, entity);
        mike['leading'] = entity;
        entity = 12;
        golf = offset[entity];
        golf = oscar.bind(report)(golf);
        options = golf.intl;
        golf = options.formatToPlainString;
        entity = offset[entity];
        entity = oscar.bind(report)(entity);
        entity = entity.t;
        oscar = entity.BdQTfX;
        entity = {};
        verify = verify.count;
        entity['userRemainCount'] = verify;
        entity = golf.bind(options)(oscar, entity);
        mike['label'] = entity;
        entity = 'userRemaining';
        entity = tango.bind(report)(zulu, mike, entity);
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = function(argFoo) { // Original name: keyExtractor
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 21;
            zulu = zulu[entity];
            entity = undefined;
            zulu = tango.bind(entity)(zulu);
            entity = zulu.isRemainingUsersGroup;
            entity = entity.bind(zulu)(mike);
            if(entity) { _fun00002_ip = 50; continue _fun00001 }
 42:
            entity = mike.user_id;
            _fun00002_ip = 79; continue _fun00001;
 50:
            tango = mike.count;
            mike = global;
            mike = mike.HermesInternal;
            zulu = mike.concat;
            mike = 'RemainingUsersGroup-';
            entity = zulu.bind(mike)(tango);
 79:
            return entity;
        }
    };
    var _closure1_slot16 = entity;
    tango = function(argFoo) { // Original name: EventDetailRsvpSheet
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            report = argFoo;
            romeo = report.userListItems;
            tango = report.guildId;
            var _closure2_slot0 = tango;
            entity = report.loading;
            mike = report.error;
            oscar = report.contentHeight;
            var _closure2_slot1 = oscar;
            kilo = report.safeBottomPadding;
            oscar = _closure1_slot10;
            report = undefined;
            options = oscar.bind(report)();
            verify = {};
            verify['paddingBottom'] = kilo;
            yankee = _closure1_slot3;
            golf = yankee.useCallback;
            oscar = new Array(1);
            oscar[0] = tango;
            tango = function(argFoo) {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = argFoo;
                    oscar = entity.item;
                    zulu = _closure1_slot0;
                    tango = _closure1_slot2;
                    entity = 21;
                    entity = tango[entity];
                    report = undefined;
                    zulu = zulu.bind(report)(entity);
                    entity = zulu.isRemainingUsersGroup;
                    entity = entity.bind(zulu)(oscar);
                    tango = _closure1_slot8;
                    if(entity) { _fun00006_ip = 81; continue _fun00005 }
 51:
                    zulu = _closure1_slot11;
                    entity = {};
                    entity['eventUser'] = oscar;
                    golf = _closure2_slot0;
                    entity['guildId'] = golf;
                    entity = tango.bind(report)(zulu, entity);
                    _fun00006_ip = 98; continue _fun00005;
 81:
                    zulu = _closure1_slot15;
                    mike = {};
                    mike['remainingUsersGroup'] = oscar;
                    entity = tango.bind(report)(zulu, mike);
 98:
                    return entity;
                }
            };
            oscar = golf.bind(yankee)(tango, oscar);
            tango = function(argFoo) { // Original name: StaticMessageContainer
                entity = argFoo;
                options = entity.children;
                entity = _closure1_slot10;
                tango = undefined;
                verify = entity.bind(tango)();
                zulu = _closure1_slot8;
                mike = _closure1_slot0;
                oscar = _closure1_slot2;
                entity = 22;
                entity = oscar[entity];
                entity = mike.bind(tango)(entity);
                mike = entity.BottomSheetScrollView;
                entity = {};
                oscar = verify.staticMessageContentContainer;
                entity['style'] = oscar;
                oscar = false;
                entity['scrollEnabled'] = oscar;
                golf = _closure1_slot8;
                oscar = _closure1_slot5;
                report = {};
                offset = verify.staticMessageContentContainer;
                verify = new Array(2);
                verify[0] = offset;
                offset = {};
                yankee = _closure2_slot1;
                offset['minHeight'] = yankee;
                verify[1] = offset;
                report['style'] = verify;
                report['children'] = options;
                report = golf.bind(tango)(oscar, report);
                entity['children'] = report;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            if(!entity) { _fun00004_ip = 121; continue _fun00003 }
 107:
            zulu = romeo.length;
            entity = 0;
            if(!(entity !== zulu)) { _fun00004_ip = 356; continue _fun00003 }
 121:
            entity = null;
            if(!(entity == mike)) { _fun00004_ip = 304; continue _fun00003 }
 130:
            mike = romeo.length;
            entity = 0;
            if(!(entity !== mike)) { _fun00004_ip = 252; continue _fun00003 }
 141:
            zulu = _closure1_slot8;
            golf = _closure1_slot0;
            yankee = _closure1_slot2;
            entity = 22;
            entity = yankee[entity];
            entity = golf.bind(report)(entity);
            mike = entity.BottomSheetFlatList;
            entity = {};
            backup = options.userList;
            foxtrot = new Array(2);
            foxtrot[0] = backup;
            backup = {};
            backup['paddingBottom'] = kilo;
            foxtrot[1] = backup;
            entity['contentContainerStyle'] = foxtrot;
            entity['data'] = romeo;
            entity['renderItem'] = oscar;
            oscar = 13;
            oscar = yankee[oscar];
            oscar = golf.bind(report)(oscar);
            oscar = oscar.FormDivider;
            entity['ItemSeparatorComponent'] = oscar;
            oscar = _closure1_slot16;
            entity['keyExtractor'] = oscar;
            entity = zulu.bind(report)(mike, entity);
            _fun00004_ip = 302; continue _fun00003;
 252:
            zulu = _closure1_slot8;
            mike = {};
            golf = _closure1_slot14;
            oscar = {};
            romeo = options.staticMessageContent;
            yankee = new Array(2);
            yankee[0] = romeo;
            yankee[1] = verify;
            oscar['style'] = yankee;
            oscar = zulu.bind(report)(golf, oscar);
            mike['children'] = oscar;
            entity = zulu.bind(report)(tango, mike);
 302:
            _fun00004_ip = 354; continue _fun00003;
 304:
            zulu = _closure1_slot8;
            mike = {};
            golf = _closure1_slot13;
            oscar = {};
            romeo = options.staticMessageContent;
            yankee = new Array(2);
            yankee[0] = romeo;
            yankee[1] = verify;
            oscar['style'] = yankee;
            oscar = zulu.bind(report)(golf, oscar);
            mike['children'] = oscar;
            entity = zulu.bind(report)(tango, mike);
 354:
            _fun00004_ip = 455; continue _fun00003;
 356:
            zulu = _closure1_slot8;
            mike = {};
            golf = _closure1_slot4;
            oscar = {'animating': true, 'color': null, 'size': 'large'};
            yankee = _closure1_slot1;
            romeo = _closure1_slot2;
            offset = 7;
            offset = romeo[offset];
            offset = yankee.bind(report)(offset);
            offset = offset.unsafe_rawColors;
            offset = offset.BRAND_500;
            oscar['color'] = offset;
            offset = options.staticMessageContent;
            options = new Array(2);
            options[0] = offset;
            options[1] = verify;
            oscar['style'] = options;
            oscar = zulu.bind(report)(golf, oscar);
            mike['children'] = oscar;
            entity = zulu.bind(report)(tango, mike);
 455:
            return entity;
        }
    };
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, mike);
    entity = 0;
    options = golf[entity];
    mike = argCorge;
    entity = undefined;
    verify = mike.bind(entity)(options);
    var _closure1_slot3 = verify;
    romeo = 1;
    mike = golf[romeo];
    mike = oscar.bind(entity)(mike);
    options = mike.ActivityIndicator;
    var _closure1_slot4 = options;
    mike = mike.View;
    var _closure1_slot5 = mike;
    mike = 2;
    mike = golf[mike];
    mike = foxtrot.bind(entity)(mike);
    var _closure1_slot6 = mike;
    mike = 3;
    mike = golf[mike];
    mike = foxtrot.bind(entity)(mike);
    var _closure1_slot7 = mike;
    mike = 4;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    sizing = mike.Fonts;
    mike = 5;
    options = golf[mike];
    options = oscar.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot8 = options;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot9 = mike;
    mike = 6;
    mike = golf[mike];
    offset = oscar.bind(entity)(mike);
    options = offset.createStyles;
    mike = {};
    yankee = {};
    yankee['flex'] = romeo;
    mike['flex'] = yankee;
    kilo = 16;
    yankee = {'flex': 1, 'padding': 16};
    mike['staticMessageContentContainer'] = yankee;
    yankee = {};
    yankee['paddingTop'] = kilo;
    mike['userList'] = yankee;
    yankee = {};
    backup = 8;
    yankee['paddingVertical'] = backup;
    mike['userListRow'] = yankee;
    yankee = {};
    romeo = 7;
    output = golf[romeo];
    output = foxtrot.bind(entity)(output);
    output = output.colors;
    output = output.TEXT_NORMAL;
    yankee['color'] = output;
    output = sizing.PRIMARY_SEMIBOLD;
    yankee['fontFamily'] = output;
    yankee['fontSize'] = kilo;
    mike['userName'] = yankee;
    kilo = 'center';
    yankee = {'alignItems': 'center', 'justifyContent': 'center', 'minHeight': 200};
    mike['emptyDisplayContainer'] = yankee;
    yankee = {};
    output = '100%';
    yankee['height'] = output;
    mike['staticMessageContent'] = yankee;
    yankee = {};
    output = 24;
    yankee['paddingTop'] = output;
    output = golf[backup];
    echo = foxtrot.bind(entity)(output);
    result = sizing.DISPLAY_EXTRABOLD;
    sizing = golf[romeo];
    sizing = foxtrot.bind(entity)(sizing);
    sizing = sizing.colors;
    control = sizing.HEADER_PRIMARY;
    sizing = {};
    sizing['marginBottom'] = backup;
    source = 20;
    sequence = undefined;
    vacuum = result;
    update = sizing;
    control = sequence[echo](vacuum, control, source, update, echo);
    vacuum = yankee;
    backup = copyDataProperties(vacuum, control);
    backup = 'textAlign';
    yankee[backup] = kilo;
    mike['emptyDisplayTitle'] = yankee;
    yankee = {'tintColor': null, 'height': 18, 'width': 18};
    backup = golf[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    yankee['tintColor'] = backup;
    mike['remainingUsersIcon'] = yankee;
    yankee = {'backgroundColor': null, 'borderRadius': 16, 'height': 32, 'width': 32, 'alignItems': 'center', 'justifyContent': 'center'};
    romeo = golf[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_TERTIARY;
    yankee['backgroundColor'] = romeo;
    mike['remainingUsersIconContainer'] = yankee;
    mike = options.bind(offset)(mike);
    var _closure1_slot10 = mike;
    options = verify.memo;
    mike = function(argFoo) {
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            mike = argFoo;
            entity = mike.eventUser;
            var _closure2_slot0 = entity;
            echo = mike.guildId;
            mike = _closure1_slot10;
            report = undefined;
            offset = mike.bind(report)();
            zulu = _closure1_slot1;
            golf = _closure1_slot2;
            mike = 15;
            mike = golf[mike];
            mike = zulu.bind(report)(mike);
            mike = mike.bind(report)();
            mike = mike.analyticsLocations;
            var _closure2_slot1 = mike;
            zulu = _closure1_slot0;
            mike = 16;
            tango = golf[mike];
            yankee = zulu.bind(report)(tango);
            verify = yankee.useStateFromStores;
            tango = _closure1_slot7;
            options = new Array(1);
            options[0] = tango;
            tango = function() {
                zulu = _closure1_slot7;
                mike = zulu.getUser;
                entity = _closure2_slot0;
                entity = entity.user_id;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            yankee = verify.bind(yankee)(options, tango);
            mike = golf[mike];
            foxtrot = zulu.bind(report)(mike);
            verify = foxtrot.useStateFromStoresObject;
            mike = _closure1_slot6;
            options = new Array(1);
            options[0] = mike;
            mike = entity.user_id;
            tango = new Array(1);
            tango[0] = mike;
            mike = function() {
                entity = {};
                tango = _closure1_slot6;
                report = tango.isMobileOnline;
                mike = _closure2_slot0;
                zulu = mike.user_id;
                zulu = report.bind(tango)(zulu);
                entity['isMobileOnline'] = zulu;
                zulu = tango.getStatus;
                mike = mike.user_id;
                mike = zulu.bind(tango)(mike);
                entity['status'] = mike;
                return entity;
            };
            mike = verify.bind(foxtrot)(options, mike, tango);
            result = mike.isMobileOnline;
            sizing = mike.status;
            tango = _closure1_slot8;
            mike = 13;
            mike = golf[mike];
            mike = zulu.bind(report)(mike);
            zulu = mike.FormRow;
            mike = {};
            golf = offset.userListRow;
            mike['DEPRECATED_style'] = golf;
            foxtrot = null;
            options = foxtrot != yankee;
            golf = null;
            if(!options) { _fun00008_ip = 310; continue _fun00007 }
 225:
            backup = _closure1_slot8;
            verify = _closure1_slot1;
            output = _closure1_slot2;
            kilo = 17;
            options = output[kilo];
            verify = verify.bind(report)(options);
            options = {};
            options['user'] = yankee;
            options['guildId'] = echo;
            options['isMobileOnline'] = result;
            options['status'] = sizing;
            sizing = _closure1_slot0;
            kilo = output[kilo];
            kilo = sizing.bind(report)(kilo);
            kilo = kilo.AvatarSizes;
            kilo = kilo.REFRESH_MEDIUM_32;
            options['size'] = kilo;
            kilo = true;
            options['autoStatusCutout'] = kilo;
            golf = backup.bind(report)(verify, options);
 310:
            mike['leading'] = golf;
            verify = _closure1_slot8;
            options = _closure1_slot1;
            backup = _closure1_slot2;
            golf = 18;
            golf = backup[golf];
            options = options.bind(report)(golf);
            golf = {};
            golf['user'] = yankee;
            backup = entity.member;
            kilo = foxtrot == backup;
            yankee = undefined;
            if(kilo) { _fun00008_ip = 366; continue _fun00007 }
 360:
            yankee = backup.nick;
 366:
            if(!(foxtrot == yankee)) { _fun00008_ip = 406; continue _fun00007 }
 370:
            foxtrot = _closure1_slot1;
            backup = _closure1_slot2;
            romeo = 19;
            romeo = backup[romeo];
            backup = foxtrot.bind(report)(romeo);
            foxtrot = backup.getName;
            romeo = entity.user;
            yankee = foxtrot.bind(backup)(romeo);
 406:
            golf['nick'] = yankee;
            yankee = offset.userName;
            golf['usernameStyle'] = yankee;
            offset = offset.userName;
            golf['nicknameStyle'] = offset;
            golf = verify.bind(report)(options, golf);
            mike['label'] = golf;
            oscar = function() { // Original name: onPress
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 20;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = {};
                report = _closure2_slot0;
                report = report.user_id;
                mike['userId'] = report;
                tango = _closure2_slot1;
                mike['sourceAnalyticsLocations'] = tango;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            mike['onPress'] = oscar;
            entity = entity.user_id;
            entity = tango.bind(report)(zulu, mike, entity);
            return entity;
        }
    };
    mike = options.bind(verify)(mike);
    var _closure1_slot11 = mike;
    report = 'EventDetailRsvpSheet';
    tango['displayName'] = report;
    report = 23;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/guild_scheduled_events/native/components/event_detail/EventDetailRsvpSheet.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['UserRow'] = mike;
    return entity;
})();