// app/modules/guild_scheduled_events/native/components/HubEventOnboardHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    tango = tango.Image;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'alignItems': 'center', 'justifyContent': 'center', 'borderRadius': null, 'borderWidth': 1, 'borderColor': null, 'backgroundColor': null, 'padding': 16, 'marginBottom': 16};
    offset = 'center';
    yankee = 4;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.sm;
    verify['borderRadius'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.LIVE_STAGE_TILE_BORDER;
    verify['borderColor'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = yankee;
    yankee = 16;
    tango['cardContainer'] = verify;
    verify = {};
    verify['marginBottom'] = yankee;
    tango['hubEventHeaderImage'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 4};
    tango['hubEventHeaderTitle'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tango['hubEventHeaderDescription'] = verify;
    verify = {'position': 'absolute', 'top': 16, 'right': 16};
    tango['close'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_scheduled_events/native/components/HubEventOnboardHeader.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        entity = argFoo;
        yankee = entity.handleHubEventsHeaderClose;
        entity = _closure1_slot7;
        tango = undefined;
        offset = entity.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot3;
        entity = {};
        report = offset.cardContainer;
        entity['style'] = report;
        options = _closure1_slot5;
        romeo = _closure1_slot0;
        foxtrot = _closure1_slot2;
        report = 5;
        report = foxtrot[report];
        report = romeo.bind(tango)(report);
        golf = report.PressableOpacity;
        report = {};
        verify = offset.close;
        report['style'] = verify;
        verify = 'button';
        report['accessibilityRole'] = verify;
        verify = 6;
        backup = foxtrot[verify];
        backup = romeo.bind(tango)(backup);
        sizing = backup.intl;
        kilo = sizing.string;
        backup = foxtrot[verify];
        backup = romeo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.cpT0Cg;
        backup = kilo.bind(sizing)(backup);
        report['accessibilityLabel'] = backup;
        report['onPress'] = yankee;
        backup = _closure1_slot1;
        sizing = 7;
        yankee = foxtrot[sizing];
        kilo = backup.bind(tango)(yankee);
        yankee = {};
        output = 8;
        output = foxtrot[output];
        output = backup.bind(tango)(output);
        yankee['source'] = output;
        sizing = foxtrot[sizing];
        sizing = backup.bind(tango)(sizing);
        sizing = sizing.Sizes;
        sizing = sizing.SMALL_20;
        yankee['size'] = sizing;
        yankee = options.bind(tango)(kilo, yankee);
        report['children'] = yankee;
        golf = options.bind(tango)(golf, report);
        report = new Array(4);
        report[0] = golf;
        golf = _closure1_slot4;
        oscar = {};
        yankee = offset.hubEventHeaderImage;
        oscar['style'] = yankee;
        yankee = 9;
        yankee = foxtrot[yankee];
        yankee = backup.bind(tango)(yankee);
        oscar['source'] = yankee;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        oscar = 10;
        golf = foxtrot[oscar];
        golf = romeo.bind(tango)(golf);
        yankee = golf.Text;
        golf = {'style': null, 'variant': 'text-md/semibold', 'color': 'header-primary'};
        backup = offset.hubEventHeaderTitle;
        golf['style'] = backup;
        backup = foxtrot[verify];
        backup = romeo.bind(tango)(backup);
        sizing = backup.intl;
        kilo = sizing.string;
        backup = foxtrot[verify];
        backup = romeo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.RhXVpa;
        kilo = kilo.bind(sizing)(backup);
        backup = [' '];
        backup[1] = kilo;
        golf['children'] = backup;
        golf = zulu.bind(tango)(yankee, golf);
        report[2] = golf;
        oscar = foxtrot[oscar];
        oscar = romeo.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {'style': null, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
        offset = offset.hubEventHeaderDescription;
        oscar['style'] = offset;
        offset = foxtrot[verify];
        offset = romeo.bind(tango)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtrot[verify];
        verify = romeo.bind(tango)(verify);
        verify = verify.t;
        verify = verify.6hktHB;
        verify = offset.bind(yankee)(verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[3] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();