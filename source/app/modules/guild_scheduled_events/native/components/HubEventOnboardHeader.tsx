// app/modules/guild_scheduled_events/native/components/HubEventOnboardHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    tangon = tangon.Image;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'alignItems': 'center', 'justifyContent': 'center', 'borderRadius': null, 'borderWidth': 1, 'borderColor': null, 'backgroundColor': null, 'padding': 16, 'marginBottom': 16};
    offset = 'center';
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    verify['borderRadius'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.LIVE_STAGE_TILE_BORDER;
    verify['borderColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = yankee;
    yankee = 16;
    tangon['cardContainer'] = verify;
    verify = {};
    verify['marginBottom'] = yankee;
    tangon['hubEventHeaderImage'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 4};
    tangon['hubEventHeaderTitle'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['hubEventHeaderDescription'] = verify;
    verify = {'position': 'absolute', 'top': 16, 'right': 16};
    tangon['close'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/components/HubEventOnboardHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        yankee = entity.handleHubEventsHeaderClose;
        entity = _closure1_slot7;
        tangon = undefined;
        offset = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot3;
        entity = {};
        report = offset.cardContainer;
        entity['style'] = report;
        option = _closure1_slot5;
        romeon = _closure1_slot0;
        foxtra = _closure1_slot2;
        report = 5;
        report = foxtra[report];
        report = romeon.bind(tangon)(report);
        golfie = report.PressableOpacity;
        report = {};
        verify = offset.close;
        report['style'] = verify;
        verify = 'button';
        report['accessibilityRole'] = verify;
        verify = 6;
        backup = foxtra[verify];
        backup = romeon.bind(tangon)(backup);
        sizing = backup.intl;
        kiloes = sizing.string;
        backup = foxtra[verify];
        backup = romeon.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.cpT0Cg;
        backup = kiloes.bind(sizing)(backup);
        report['accessibilityLabel'] = backup;
        report['onPress'] = yankee;
        backup = _closure1_slot1;
        sizing = 7;
        yankee = foxtra[sizing];
        kiloes = backup.bind(tangon)(yankee);
        yankee = {};
        output = 8;
        output = foxtra[output];
        output = backup.bind(tangon)(output);
        yankee['source'] = output;
        sizing = foxtra[sizing];
        sizing = backup.bind(tangon)(sizing);
        sizing = sizing.Sizes;
        sizing = sizing.SMALL_20;
        yankee['size'] = sizing;
        yankee = option.bind(tangon)(kiloes, yankee);
        report['children'] = yankee;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(4);
        report[0] = golfie;
        golfie = _closure1_slot4;
        oscard = {};
        yankee = offset.hubEventHeaderImage;
        oscard['style'] = yankee;
        yankee = 9;
        yankee = foxtra[yankee];
        yankee = backup.bind(tangon)(yankee);
        oscard['source'] = yankee;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        oscard = 10;
        golfie = foxtra[oscard];
        golfie = romeon.bind(tangon)(golfie);
        yankee = golfie.Text;
        golfie = {'style': null, 'variant': 'text-md/semibold', 'color': 'header-primary'};
        backup = offset.hubEventHeaderTitle;
        golfie['style'] = backup;
        backup = foxtra[verify];
        backup = romeon.bind(tangon)(backup);
        sizing = backup.intl;
        kiloes = sizing.string;
        backup = foxtra[verify];
        backup = romeon.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.RhXVpa;
        kiloes = kiloes.bind(sizing)(backup);
        backup = [' '];
        backup[1] = kiloes;
        golfie['children'] = backup;
        golfie = zuuluu.bind(tangon)(yankee, golfie);
        report[2] = golfie;
        oscard = foxtra[oscard];
        oscard = romeon.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'style': null, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
        offset = offset.hubEventHeaderDescription;
        oscard['style'] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        verify = verify.t;
        verify = verify.6hktHB;
        verify = offset.bind(yankee)(verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[3] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();