// app/modules/guild_scheduled_events/native/components/EditGuildEventStepContainer.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    foxtrot = 0;
    tango = oscar[foxtrot];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    backup = 1;
    golf = oscar[backup];
    tango = argCorge;
    golf = tango.bind(entity)(golf);
    var _closure1_slot4 = golf;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.View;
    var _closure1_slot5 = options;
    tango = tango.ScrollView;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 4;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot8 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'flex': 1, 'paddingHorizontal': 0, 'paddingVertical': 0, 'backgroundColor': null, 'flexDirection': 'column', 'height': '100%'};
    yankee = 6;
    kilo = oscar[yankee];
    kilo = romeo.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = kilo;
    tango['container'] = offset;
    offset = {};
    offset['flex'] = backup;
    tango['flex'] = offset;
    offset = {};
    backup = 16;
    offset['paddingHorizontal'] = backup;
    tango['scroller'] = offset;
    offset = {};
    offset['paddingTop'] = foxtrot;
    tango['paddedContainer'] = offset;
    offset = {'position': 'absolute', 'bottom': 0, 'left': 0, 'right': 0, 'paddingHorizontal': 16, 'paddingVertical': 16};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = yankee;
    tango['buttonContainer'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot10 = tango;
    tango = golf.forwardRef;
    mike = function(argFoo, argBar) {
        _fun76215: for(var _fun76215_ip = 0; ; ) switch(_fun76215_ip) {
 0:
            mike = argFoo;
            foxtrot = mike.children;
            yankee = mike.action;
            mike = _closure1_slot10;
            tango = undefined;
            sizing = mike.bind(tango)();
            zulu = _closure1_slot0;
            oscar = _closure1_slot2;
            mike = 7;
            mike = oscar[mike];
            golf = zulu.bind(tango)(mike);
            report = golf.useStateFromStores;
            mike = _closure1_slot7;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                entity = _closure1_slot7;
                entity = entity.keyboardOpen;
                return entity;
            };
            backup = report.bind(golf)(zulu, mike);
            report = _closure1_slot4;
            zulu = report.useState;
            mike = 32;
            golf = zulu.bind(report)(mike);
            zulu = _closure1_slot3;
            mike = 2;
            zulu = zulu.bind(tango)(golf, mike);
            echo = 0;
            result = zulu[echo];
            mike = 1;
            mike = zulu[mike];
            var _closure2_slot0 = mike;
            zulu = _closure1_slot1;
            mike = 8;
            mike = oscar[mike];
            mike = zulu.bind(tango)(mike);
            mike = mike.bind(tango)();
            output = mike.bottom;
            zulu = report.useCallback;
            mike = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                mike = entity.height;
                zulu = _closure2_slot0;
                entity = 32;
                mike = mike + entity;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            entity = new Array(0);
            romeo = zulu.bind(report)(mike, entity);
            zulu = _closure1_slot8;
            mike = _closure1_slot5;
            entity = {};
            report = sizing.container;
            entity['style'] = report;
            oscar = _closure1_slot9;
            report = {};
            verify = sizing.flex;
            golf = new Array(3);
            golf[0] = verify;
            verify = !backup;
            if(!verify) { _fun76215_ip = 222; continue _fun76215 }
 216:
            verify = sizing.paddedContainer;
 222:
            golf[1] = verify;
            verify = !backup;
            if(!verify) { _fun76215_ip = 249; continue _fun76215 }
 232:
            offset = {};
            kilo = 16;
            kilo = output + kilo;
            offset['paddingBottom'] = kilo;
            verify = offset;
 249:
            golf[2] = verify;
            report['style'] = golf;
            offset = _closure1_slot8;
            verify = _closure1_slot6;
            golf = {};
            kilo = argBar;
            golf['ref'] = kilo;
            kilo = {};
            kilo['top'] = echo;
            kilo['bottom'] = result;
            golf['contentInset'] = kilo;
            kilo = false;
            golf['automaticallyAdjustContentInsets'] = kilo;
            kilo = 'handled';
            golf['keyboardShouldPersistTaps'] = kilo;
            kilo = sizing.flex;
            golf['style'] = kilo;
            kilo = sizing.scroller;
            golf['contentContainerStyle'] = kilo;
            golf['children'] = foxtrot;
            verify = offset.bind(tango)(verify, golf);
            golf = new Array(2);
            golf[0] = verify;
            verify = _closure1_slot5;
            options = {};
            kilo = sizing.buttonContainer;
            foxtrot = new Array(3);
            foxtrot[0] = kilo;
            kilo = !backup;
            if(!kilo) { _fun76215_ip = 375; continue _fun76215 }
 369:
            kilo = sizing.paddedContainer;
 375:
            foxtrot[1] = kilo;
            backup = !backup;
            if(!backup) { _fun76215_ip = 402; continue _fun76215 }
 385:
            kilo = {};
            sizing = 16;
            sizing = output + sizing;
            kilo['paddingBottom'] = sizing;
            backup = kilo;
 402:
            foxtrot[2] = backup;
            options['style'] = foxtrot;
            options['onLayout'] = romeo;
            options['children'] = yankee;
            options = offset.bind(tango)(verify, options);
            golf[1] = options;
            report['children'] = golf;
            report = oscar.bind(tango)(mike, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_scheduled_events/native/components/EditGuildEventStepContainer.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();