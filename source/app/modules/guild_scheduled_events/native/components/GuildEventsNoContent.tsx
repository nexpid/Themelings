// app/modules/guild_scheduled_events/native/components/GuildEventsNoContent.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.GuildSettingsSections;
    var _closure1_slot5 = golfie;
    tangon = tangon.GuildFeatures;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.Fonts;
    tangon = tangon.Permissions;
    var _closure1_slot7 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 'center';
    verify = {'display': 'flex', 'flexDirection': 'column', 'justifyContent': 'center', 'alignItems': 'center', 'marginBottom': 88, 'padding': 16};
    tangon['container'] = verify;
    verify = {};
    romeon = 7;
    romeon = oscard[romeon];
    kiloes = foxtra.bind(entity)(romeon);
    backup = yankee.DISPLAY_EXTRABOLD;
    yankee = 8;
    romeon = oscard[yankee];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    result = romeon.HEADER_PRIMARY;
    romeon = {};
    romeon['marginBottom'] = yankee;
    output = 24;
    update = undefined;
    echoed = backup;
    sizing = romeon;
    result = update[kiloes](echoed, result, output, sizing, kiloes);
    echoed = verify;
    yankee = copyDataProperties(echoed, result);
    yankee = 'textAlign';
    verify[yankee] = offset;
    tangon['title'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['subtitle'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/components/GuildEventsNoContent.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildEventsNoContent
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            zuuluu = entity.guild;
            var _closure2_slot0 = zuuluu;
            entity = entity.onClose;
            var _closure2_slot1 = entity;
            entity = _closure1_slot10;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            michal = _closure1_slot1;
            report = _closure1_slot2;
            entity = 9;
            entity = report[entity];
            oscard = michal.bind(tangon)(entity);
            report = oscard.useExperiment;
            michal = {};
            entity = null;
            option = entity == zuuluu;
            entity = undefined;
            if(option) { _fun00002_ip = 81; continue _fun00001 }
 76:
            entity = zuuluu.id;
 81:
            michal['guildId'] = entity;
            entity = '6597ca_1';
            michal['location'] = entity;
            entity = {};
            option = false;
            entity['autoTrackExposure'] = option;
            entity = report.bind(oscard)(michal, entity);
            yankee = entity.showHubEventsList;
            michal = _closure1_slot0;
            report = _closure1_slot2;
            entity = 10;
            entity = report[entity];
            option = michal.bind(tangon)(entity);
            oscard = option.useStateFromStores;
            entity = _closure1_slot4;
            report = new Array(1);
            report[0] = entity;
            michal = new Array(1);
            michal[0] = zuuluu;
            entity = function() {
                tangon = _closure1_slot4;
                zuuluu = tangon.can;
                entity = _closure1_slot7;
                michal = entity.MANAGE_ROLES;
                entity = _closure2_slot0;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            oscard = oscard.bind(option)(report, entity, michal);
            if(!yankee) { _fun00002_ip = 199; continue _fun00001 }
 178:
            michal = zuuluu.hasFeature;
            entity = _closure1_slot6;
            entity = entity.HUB;
            yankee = michal.bind(zuuluu)(entity);
 199:
            zuuluu = _closure1_slot9;
            michal = _closure1_slot3;
            entity = {};
            report = romeon.container;
            entity['style'] = report;
            offset = _closure1_slot8;
            kiloes = _closure1_slot1;
            option = _closure1_slot2;
            report = 11;
            report = option[report];
            foxtra = kiloes.bind(tangon)(report);
            report = {};
            verify = 12;
            verify = option[verify];
            verify = kiloes.bind(tangon)(verify);
            report['icon'] = verify;
            verify = _closure1_slot0;
            kiloes = 13;
            kiloes = option[kiloes];
            kiloes = verify.bind(tangon)(kiloes);
            kiloes = kiloes.CalendarIcon;
            report['IconComponent'] = kiloes;
            foxtra = offset.bind(tangon)(foxtra, report);
            report = new Array(4);
            report[0] = foxtra;
            foxtra = 14;
            option = option[foxtra];
            option = verify.bind(tangon)(option);
            verify = option.Text;
            option = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            kiloes = romeon.title;
            option['style'] = kiloes;
            output = _closure1_slot0;
            sizing = _closure1_slot2;
            kiloes = 15;
            result = sizing[kiloes];
            result = output.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            sizing = sizing[kiloes];
            sizing = output.bind(tangon)(sizing);
            output = sizing.t;
            if(yankee) { _fun00002_ip = 405; continue _fun00001 }
 390:
            sizing = output.WgZ+3N;
            sizing = result.bind(echoed)(sizing);
            _fun00002_ip = 416; continue _fun00001;
 405:
            output = output.RhXVpa;
            sizing = result.bind(echoed)(output);
 416:
            option['children'] = sizing;
            option = offset.bind(tangon)(verify, option);
            report[1] = option;
            offset = _closure1_slot8;
            verify = _closure1_slot0;
            option = _closure1_slot2;
            option = option[foxtra];
            option = verify.bind(tangon)(option);
            verify = option.Text;
            option = {'style': null, 'variant': 'text-sm/normal', 'color': 'header-secondary'};
            foxtra = romeon.subtitle;
            option['style'] = foxtra;
            result = _closure1_slot0;
            foxtra = _closure1_slot2;
            sizing = foxtra[kiloes];
            sizing = result.bind(tangon)(sizing);
            output = sizing.intl;
            sizing = output.string;
            foxtra = foxtra[kiloes];
            foxtra = result.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            if(yankee) { _fun00002_ip = 537; continue _fun00001 }
 522:
            yankee = foxtra.v/S/PD;
            yankee = sizing.bind(output)(yankee);
            _fun00002_ip = 548; continue _fun00001;
 537:
            foxtra = foxtra.6hktHB;
            yankee = sizing.bind(output)(foxtra);
 548:
            option['children'] = yankee;
            option = offset.bind(tangon)(verify, option);
            report[2] = option;
            if(!oscard) { _fun00002_ip = 686; continue _fun00001 }
 565:
            verify = _closure1_slot8;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = 16;
            golfie = offset[golfie];
            golfie = yankee.bind(tangon)(golfie);
            option = golfie.TextWithIOSLinkWorkaround;
            golfie = {'style': null, 'variant': 'text-sm/normal', 'color': 'header-secondary'};
            romeon = romeon.subtitle;
            golfie['style'] = romeon;
            romeon = offset[kiloes];
            romeon = yankee.bind(tangon)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.format;
            offset = offset[kiloes];
            offset = yankee.bind(tangon)(offset);
            offset = offset.t;
            yankee = offset.K+DH2t;
            offset = {};
            backup = function() { // Original name: onClick
                michal = _closure2_slot1;
                entity = undefined;
                michal = michal.bind(entity)();
                report = _closure1_slot1;
                oscard = _closure1_slot2;
                tangon = 17;
                tangon = oscard[tangon];
                report = report.bind(entity)(tangon);
                tangon = report.open;
                zuuluu = _closure2_slot0;
                zuuluu = zuuluu.id;
                michal = _closure1_slot5;
                michal = michal.ROLES;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            offset['onClick'] = backup;
            offset = romeon.bind(foxtra)(yankee, offset);
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 686:
            report[3] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();