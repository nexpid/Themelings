// app/modules/guild_scheduled_events/native/components/GuildEventRecurrences.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['marginTop'] = offset;
    tangon['container'] = verify;
    verify = {'marginTop': 8, 'marginBottom': 8, 'borderRadius': null, 'backgroundColor': null, 'maxHeight': 140};
    offset = 4;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    tangon['scrollView'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/components/GuildEventRecurrences.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildEventRecurrences
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            report = entity.guildId;
            zuuluu = entity.recurrenceRule;
            michal = entity.guildEventId;
            var _closure2_slot0 = michal;
            tangon = entity.onRecurrencePress;
            var _closure2_slot1 = tangon;
            tangon = entity.activeRecurrenceId;
            var _closure2_slot2 = tangon;
            golfie = entity.hideViewMoreButton;
            oscard = _closure1_slot3;
            tangon = oscard.useRef;
            entity = null;
            yankee = tangon.bind(oscard)(entity);
            var _closure2_slot3 = yankee;
            entity = _closure1_slot8;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            oscard = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 5;
            entity = verify[entity];
            entity = oscard.bind(tangon)(entity);
            entity = entity.bind(tangon)(michal, report, zuuluu);
            sizing = entity.recurrenceStartTimes;
            oscard = entity.canViewMoreRecurrences;
            entity = entity.updateRecurrenceStartTimes;
            var _closure2_slot4 = entity;
            zuuluu = _closure1_slot7;
            michal = _closure1_slot4;
            entity = {};
            report = romeon.container;
            entity['style'] = report;
            offset = _closure1_slot6;
            echoed = _closure1_slot0;
            report = 6;
            report = verify[report];
            report = echoed.bind(tangon)(report);
            option = report.Text;
            report = {};
            backup = 'heading-md/semibold';
            report['variant'] = backup;
            backup = 7;
            output = verify[backup];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            verify = verify[backup];
            verify = echoed.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.D/jjoa;
            verify = output.bind(result)(verify);
            report['children'] = verify;
            option = offset.bind(tangon)(option, report);
            report = new Array(3);
            report[0] = option;
            verify = _closure1_slot5;
            option = {};
            romeon = romeon.scrollView;
            option['style'] = romeon;
            option['ref'] = yankee;
            romeon = sizing.map;
            yankee = function(argFoo) {
                option = argFoo;
                michal = _closure1_slot1;
                oscard = _closure1_slot2;
                zuuluu = 8;
                zuuluu = oscard[zuuluu];
                report = undefined;
                golfie = michal.bind(report)(zuuluu);
                tangon = golfie.fromTimestamp;
                zuuluu = option.getTime;
                zuuluu = zuuluu.bind(option)();
                tangon = tangon.bind(golfie)(zuuluu);
                zuuluu = _closure1_slot6;
                entity = 9;
                entity = oscard[entity];
                michal = michal.bind(report)(entity);
                entity = {};
                entity['recurrenceId'] = tangon;
                golfie = _closure2_slot0;
                entity['guildEventId'] = golfie;
                golfie = _closure2_slot1;
                entity['onPress'] = golfie;
                oscard = _closure2_slot2;
                oscard = tangon === oscard;
                entity['isActive'] = oscard;
                entity = zuuluu.bind(report)(michal, entity, tangon);
                return entity;
            };
            yankee = romeon.bind(sizing)(yankee);
            option['children'] = yankee;
            option = offset.bind(tangon)(verify, option);
            report[1] = option;
            if(!oscard) { _fun00002_ip = 314; continue _fun00001 }
 311:
            oscard = !golfie;
 314:
            if(!oscard) { _fun00002_ip = 437; continue _fun00001 }
 317:
            verify = _closure1_slot6;
            yankee = _closure1_slot1;
            romeon = _closure1_slot2;
            offset = 10;
            golfie = romeon[offset];
            option = yankee.bind(tangon)(golfie);
            golfie = {};
            output = _closure1_slot0;
            kiloes = romeon[backup];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = romeon[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.8O7Hp6;
            backup = kiloes.bind(sizing)(backup);
            golfie['text'] = backup;
            foxtra = function(argFoo) { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = argFoo;
                    entity = michal.stopPropagation;
                    entity = entity.bind(michal)();
                    zuuluu = _closure2_slot4;
                    entity = undefined;
                    zuuluu = zuuluu.bind(entity)();
                    michal = _closure2_slot3;
                    zuuluu = michal.current;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00004_ip = 51; continue _fun00003 }
 41:
                    michal = zuuluu.scrollToEnd;
                    michal = michal.bind(zuuluu)();
 51:
                    return entity;
                }
            };
            golfie['onPress'] = foxtra;
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.Sizes;
            offset = offset.SMALL;
            golfie['size'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 437:
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();