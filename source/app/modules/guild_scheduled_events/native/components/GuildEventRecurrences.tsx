// app/modules/guild_scheduled_events/native/components/GuildEventRecurrences.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot4 = golf;
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 16;
    verify['marginTop'] = offset;
    tango['container'] = verify;
    verify = {'marginTop': 8, 'marginBottom': 8, 'borderRadius': null, 'backgroundColor': null, 'maxHeight': 140};
    offset = 4;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderRadius'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    tango['scrollView'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_scheduled_events/native/components/GuildEventRecurrences.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: GuildEventRecurrences
        _fun77027: for(var _fun77027_ip = 0; ; ) switch(_fun77027_ip) {
 0:
            entity = argFoo;
            report = entity.guildId;
            zulu = entity.recurrenceRule;
            mike = entity.guildEventId;
            var _closure2_slot0 = mike;
            tango = entity.onRecurrencePress;
            var _closure2_slot1 = tango;
            tango = entity.activeRecurrenceId;
            var _closure2_slot2 = tango;
            golf = entity.hideViewMoreButton;
            oscar = _closure1_slot3;
            tango = oscar.useRef;
            entity = null;
            yankee = tango.bind(oscar)(entity);
            var _closure2_slot3 = yankee;
            entity = _closure1_slot8;
            tango = undefined;
            romeo = entity.bind(tango)();
            oscar = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 5;
            entity = verify[entity];
            entity = oscar.bind(tango)(entity);
            entity = entity.bind(tango)(mike, report, zulu);
            sizing = entity.recurrenceStartTimes;
            oscar = entity.canViewMoreRecurrences;
            entity = entity.updateRecurrenceStartTimes;
            var _closure2_slot4 = entity;
            zulu = _closure1_slot7;
            mike = _closure1_slot4;
            entity = {};
            report = romeo.container;
            entity['style'] = report;
            offset = _closure1_slot6;
            echo = _closure1_slot0;
            report = 6;
            report = verify[report];
            report = echo.bind(tango)(report);
            options = report.Text;
            report = {};
            backup = 'heading-md/semibold';
            report['variant'] = backup;
            backup = 7;
            output = verify[backup];
            output = echo.bind(tango)(output);
            result = output.intl;
            output = result.string;
            verify = verify[backup];
            verify = echo.bind(tango)(verify);
            verify = verify.t;
            verify = verify.D/jjoa;
            verify = output.bind(result)(verify);
            report['children'] = verify;
            options = offset.bind(tango)(options, report);
            report = new Array(3);
            report[0] = options;
            verify = _closure1_slot5;
            options = {};
            romeo = romeo.scrollView;
            options['style'] = romeo;
            options['ref'] = yankee;
            romeo = sizing.map;
            yankee = function(argFoo) {
                options = argFoo;
                mike = _closure1_slot1;
                oscar = _closure1_slot2;
                zulu = 8;
                zulu = oscar[zulu];
                report = undefined;
                golf = mike.bind(report)(zulu);
                tango = golf.fromTimestamp;
                zulu = options.getTime;
                zulu = zulu.bind(options)();
                tango = tango.bind(golf)(zulu);
                zulu = _closure1_slot6;
                entity = 9;
                entity = oscar[entity];
                mike = mike.bind(report)(entity);
                entity = {};
                entity['recurrenceId'] = tango;
                golf = _closure2_slot0;
                entity['guildEventId'] = golf;
                golf = _closure2_slot1;
                entity['onPress'] = golf;
                oscar = _closure2_slot2;
                oscar = tango === oscar;
                entity['isActive'] = oscar;
                entity = zulu.bind(report)(mike, entity, tango);
                return entity;
            };
            yankee = romeo.bind(sizing)(yankee);
            options['children'] = yankee;
            options = offset.bind(tango)(verify, options);
            report[1] = options;
            if(!oscar) { _fun77027_ip = 314; continue _fun77027 }
 311:
            oscar = !golf;
 314:
            if(!oscar) { _fun77027_ip = 437; continue _fun77027 }
 317:
            verify = _closure1_slot6;
            yankee = _closure1_slot1;
            romeo = _closure1_slot2;
            offset = 10;
            golf = romeo[offset];
            options = yankee.bind(tango)(golf);
            golf = {};
            output = _closure1_slot0;
            kilo = romeo[backup];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = romeo[backup];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            backup = backup.8O7Hp6;
            backup = kilo.bind(sizing)(backup);
            golf['text'] = backup;
            foxtrot = function(argFoo) { // Original name: onPress
                _fun77029: for(var _fun77029_ip = 0; ; ) switch(_fun77029_ip) {
 0:
                    mike = argFoo;
                    entity = mike.stopPropagation;
                    entity = entity.bind(mike)();
                    zulu = _closure2_slot4;
                    entity = undefined;
                    zulu = zulu.bind(entity)();
                    mike = _closure2_slot3;
                    zulu = mike.current;
                    mike = null;
                    if(!(mike != zulu)) { _fun77029_ip = 51; continue _fun77029 }
 41:
                    mike = zulu.scrollToEnd;
                    mike = mike.bind(zulu)();
 51:
                    return entity;
                }
            };
            golf['onPress'] = foxtrot;
            offset = romeo[offset];
            offset = yankee.bind(tango)(offset);
            offset = offset.Sizes;
            offset = offset.SMALL;
            golf['size'] = offset;
            oscar = verify.bind(tango)(options, golf);
 437:
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();