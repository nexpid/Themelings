// app/modules/guild_scheduled_events/native/components/GuildEventModalComponents.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argCorge;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = golf;
    var _closure1_slot3 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = golf.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.GuildScheduledEventEntityTypes;
    var _closure1_slot6 = golf;
    golf = tango.GUILD_EVENT_MAX_DESCRIPTION_LENGTH;
    var _closure1_slot7 = golf;
    golf = tango.MAX_EVENT_LOCATION_LENGTH;
    var _closure1_slot8 = golf;
    tango = tango.GUILD_EVENT_MAX_NAME_LENGTH;
    var _closure1_slot9 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.GuildFeatures;
    var _closure1_slot10 = tango;
    yankee = 4;
    tango = oscar[yankee];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot11 = tango;
    tango = oscar[yankee];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot12 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 8;
    verify['paddingVertical'] = offset;
    tango['formGroup'] = verify;
    verify = {};
    verify['paddingVertical'] = yankee;
    tango['formGroupSmall'] = verify;
    verify = {'paddingTop': 16, 'paddingBottom': 4};
    tango['formGroupLarge'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1, 'flexBasis': '60%'};
    tango['dateInput'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1, 'flexBasis': '30%'};
    tango['timeInput'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tango['formHeader'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tango['shareDescription'] = verify;
    verify = {};
    verify['marginStart'] = offset;
    tango['badge'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'marginBottom': 8};
    tango['header'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot13 = tango;
    tango = 32;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_scheduled_events/native/components/GuildEventModalComponents.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo) { // Original name: GuildEventTopic
        entity = argFoo;
        options = entity.topic;
        verify = entity.onChange;
        entity = _closure1_slot13;
        tango = undefined;
        report = entity.bind(tango)();
        zulu = _closure1_slot11;
        mike = _closure1_slot5;
        entity = {};
        report = report.formGroupSmall;
        entity['style'] = report;
        foxtrot = _closure1_slot0;
        backup = _closure1_slot3;
        report = 6;
        report = backup[report];
        report = foxtrot.bind(tango)(report);
        oscar = report.TextInput;
        report = {};
        offset = 7;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        kilo = yankee.intl;
        romeo = kilo.string;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.0HbEQ0;
        yankee = romeo.bind(kilo)(yankee);
        report['label'] = yankee;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        kilo = yankee.intl;
        romeo = kilo.string;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.0HbEQ0;
        yankee = romeo.bind(kilo)(yankee);
        report['accessibilityLabel'] = yankee;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        romeo = yankee.intl;
        yankee = romeo.string;
        offset = backup[offset];
        offset = foxtrot.bind(tango)(offset);
        offset = offset.t;
        offset = offset.6/yarq;
        offset = yankee.bind(romeo)(offset);
        report['placeholder'] = offset;
        report['onChange'] = verify;
        report['value'] = options;
        golf = _closure1_slot9;
        report['maxLength'] = golf;
        golf = true;
        report['autoFocus'] = golf;
        report['isClearable'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['GuildEventTopic'] = tango;
    tango = function(argFoo) { // Original name: GuildEventLocation
        entity = argFoo;
        offset = entity.location;
        options = entity.onChange;
        golf = entity.onFocus;
        entity = _closure1_slot13;
        tango = undefined;
        report = entity.bind(tango)();
        zulu = _closure1_slot11;
        mike = _closure1_slot5;
        entity = {};
        report = report.formGroupLarge;
        entity['style'] = report;
        backup = _closure1_slot0;
        kilo = _closure1_slot3;
        report = 6;
        report = kilo[report];
        report = backup.bind(tango)(report);
        oscar = report.TextInput;
        report = {};
        yankee = 7;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        sizing = romeo.intl;
        foxtrot = sizing.string;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.yx785O;
        romeo = foxtrot.bind(sizing)(romeo);
        report['label'] = romeo;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        foxtrot = romeo.intl;
        romeo = foxtrot.string;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.mkCMiY;
        yankee = romeo.bind(foxtrot)(yankee);
        report['placeholder'] = yankee;
        report['value'] = offset;
        verify = _closure1_slot8;
        report['maxLength'] = verify;
        report['onChange'] = options;
        report['onFocus'] = golf;
        golf = true;
        report['isClearable'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['GuildEventLocation'] = tango;
    tango = function(argFoo) { // Original name: GuildEventRecurrence
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            zulu = mike.startDate;
            var _closure2_slot0 = zulu;
            entity = mike.recurrenceRule;
            var _closure2_slot1 = entity;
            mike = mike.onRecurrenceChange;
            var _closure2_slot2 = mike;
            mike = _closure1_slot13;
            tango = undefined;
            sizing = mike.bind(tango)();
            oscar = _closure1_slot4;
            report = oscar.useMemo;
            mike = new Array(2);
            mike[0] = entity;
            mike[1] = zulu;
            entity = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot3;
                entity = 8;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.recurrenceRuleToOption;
                mike = _closure2_slot0;
                entity = _closure2_slot1;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            entity = report.bind(oscar)(entity, mike);
            var _closure2_slot3 = entity;
            mike = _closure1_slot0;
            report = _closure1_slot3;
            entity = 8;
            entity = report[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.getRecurrenceOptions;
            zulu = entity.bind(mike)(zulu);
            var _closure2_slot4 = zulu;
            mike = zulu.find;
            entity = function(argFoo) {
                entity = argFoo;
                mike = entity.value;
                entity = _closure2_slot3;
                entity = mike === entity;
                return entity;
            };
            entity = mike.bind(zulu)(entity);
            mike = null;
            mike = mike == entity;
            verify = undefined;
            if(mike) { _fun00002_ip = 150; continue _fun00001 }
 145:
            verify = entity.label;
 150:
            zulu = _closure1_slot12;
            mike = _closure1_slot5;
            entity = {};
            report = sizing.formGroup;
            entity['style'] = report;
            report = {};
            oscar = sizing.header;
            report['style'] = oscar;
            options = _closure1_slot11;
            foxtrot = _closure1_slot0;
            backup = _closure1_slot3;
            oscar = 9;
            oscar = backup[oscar];
            oscar = foxtrot.bind(tango)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            offset = 7;
            kilo = backup[offset];
            kilo = foxtrot.bind(tango)(kilo);
            result = kilo.intl;
            output = result.string;
            kilo = backup[offset];
            kilo = foxtrot.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.59TVxM;
            kilo = output.bind(result)(kilo);
            oscar['children'] = kilo;
            golf = options.bind(tango)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            output = 10;
            golf = backup[output];
            golf = foxtrot.bind(tango)(golf);
            kilo = golf.TextBadge;
            golf = {};
            result = backup[offset];
            result = foxtrot.bind(tango)(result);
            update = result.intl;
            echo = update.string;
            result = backup[offset];
            result = foxtrot.bind(tango)(result);
            result = result.t;
            result = result.y2b7CA;
            result = echo.bind(update)(result);
            golf['text'] = result;
            output = backup[output];
            output = foxtrot.bind(tango)(output);
            output = output.BadgeColors;
            output = output.BRAND;
            golf['color'] = output;
            sizing = sizing.badge;
            golf['style'] = sizing;
            golf = options.bind(tango)(kilo, golf);
            oscar[1] = golf;
            report['children'] = oscar;
            oscar = zulu.bind(tango)(mike, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = 11;
            oscar = backup[oscar];
            oscar = foxtrot.bind(tango)(oscar);
            golf = oscar.InputButton;
            oscar = {};
            romeo = function() { // Original name: onPress
                tango = _closure1_slot2;
                offset = _closure1_slot3;
                entity = 12;
                zulu = offset[entity];
                entity = undefined;
                tango = tango.bind(entity)(zulu);
                zulu = tango.dismissGlobalKeyboard;
                zulu = zulu.bind(tango)();
                tango = _closure1_slot1;
                zulu = 13;
                zulu = offset[zulu];
                oscar = tango.bind(entity)(zulu);
                report = oscar.openLazy;
                verify = _closure1_slot0;
                mike = 15;
                mike = offset[mike];
                tango = verify.bind(entity)(mike);
                mike = 14;
                zulu = offset[mike];
                mike = offset.paths;
                tango = tango.bind(entity)(zulu, mike);
                zulu = {};
                mike = 7;
                golf = offset[mike];
                golf = verify.bind(entity)(golf);
                options = golf.intl;
                golf = options.string;
                mike = offset[mike];
                mike = verify.bind(entity)(mike);
                mike = mike.t;
                mike = mike.59TVxM;
                mike = golf.bind(options)(mike);
                zulu['title'] = mike;
                golf = _closure2_slot4;
                zulu['items'] = golf;
                golf = function(argFoo) { // Original name: onItemSelect
                    zulu = _closure2_slot2;
                    entity = undefined;
                    mike = argFoo;
                    mike = zulu.bind(entity)(mike);
                    zulu = _closure1_slot1;
                    tango = _closure1_slot3;
                    mike = 13;
                    mike = tango[mike];
                    zulu = zulu.bind(entity)(mike);
                    mike = zulu.hideActionSheet;
                    mike = mike.bind(zulu)();
                    return entity;
                };
                zulu['onItemSelect'] = golf;
                mike = _closure2_slot3;
                zulu['selectedItem'] = mike;
                mike = 'SelectRecurrenceOption';
                mike = report.bind(oscar)(tango, mike, zulu);
                return entity;
            };
            oscar['onPress'] = romeo;
            romeo = backup[offset];
            romeo = foxtrot.bind(tango)(romeo);
            sizing = romeo.intl;
            kilo = sizing.string;
            romeo = backup[offset];
            romeo = foxtrot.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.59TVxM;
            romeo = kilo.bind(sizing)(romeo);
            oscar['text'] = romeo;
            oscar['value'] = verify;
            romeo = _closure1_slot1;
            yankee = 16;
            yankee = backup[yankee];
            yankee = romeo.bind(tango)(yankee);
            oscar['icon'] = yankee;
            yankee = 'end';
            oscar['iconPosition'] = yankee;
            yankee = backup[offset];
            yankee = foxtrot.bind(tango)(yankee);
            romeo = yankee.intl;
            yankee = romeo.string;
            offset = backup[offset];
            offset = foxtrot.bind(tango)(offset);
            offset = offset.t;
            offset = offset.59TVxM;
            offset = yankee.bind(romeo)(offset);
            oscar['accessibilityLabel'] = offset;
            oscar['accessibilityHint'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['GuildEventRecurrence'] = tango;
    tango = function(argFoo) { // Original name: GuildEventEntityTypeSelection
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            yankee = entity.guild;
            oscar = entity.entityType;
            verify = entity.disabled;
            report = entity.onChange;
            romeo = _closure1_slot0;
            foxtrot = _closure1_slot3;
            mike = 17;
            mike = foxtrot[mike];
            tango = undefined;
            zulu = romeo.bind(tango)(mike);
            mike = zulu.useChannelsUserCanStartStageIn;
            options = mike.bind(zulu)(yankee);
            mike = {};
            offset = 7;
            zulu = foxtrot[offset];
            zulu = romeo.bind(tango)(zulu);
            backup = zulu.intl;
            golf = backup.string;
            zulu = foxtrot[offset];
            zulu = romeo.bind(tango)(zulu);
            zulu = zulu.t;
            zulu = zulu.BVZqJi;
            zulu = golf.bind(backup)(zulu);
            mike['name'] = zulu;
            zulu = _closure1_slot6;
            golf = zulu.VOICE;
            mike['value'] = golf;
            golf = foxtrot[offset];
            golf = romeo.bind(tango)(golf);
            kilo = golf.intl;
            backup = kilo.string;
            golf = foxtrot[offset];
            golf = romeo.bind(tango)(golf);
            golf = golf.t;
            golf = golf.EV//4e;
            golf = backup.bind(kilo)(golf);
            mike['description'] = golf;
            backup = _closure1_slot1;
            golf = 18;
            golf = foxtrot[golf];
            golf = backup.bind(tango)(golf);
            mike['icon'] = golf;
            golf = 19;
            golf = foxtrot[golf];
            golf = romeo.bind(tango)(golf);
            golf = golf.VoiceNormalIcon;
            mike['IconComponent'] = golf;
            mike['disabled'] = verify;
            golf = new Array(2);
            golf[0] = mike;
            mike = {};
            kilo = foxtrot[offset];
            kilo = romeo.bind(tango)(kilo);
            output = kilo.intl;
            sizing = output.string;
            kilo = foxtrot[offset];
            kilo = romeo.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.w7ipb2;
            kilo = sizing.bind(output)(kilo);
            mike['name'] = kilo;
            zulu = zulu.EXTERNAL;
            mike['value'] = zulu;
            zulu = foxtrot[offset];
            zulu = romeo.bind(tango)(zulu);
            sizing = zulu.intl;
            kilo = sizing.string;
            zulu = foxtrot[offset];
            zulu = romeo.bind(tango)(zulu);
            zulu = zulu.t;
            zulu = zulu.DYxrHh;
            zulu = kilo.bind(sizing)(zulu);
            mike['description'] = zulu;
            zulu = 20;
            zulu = foxtrot[zulu];
            zulu = backup.bind(tango)(zulu);
            mike['icon'] = zulu;
            zulu = 21;
            zulu = foxtrot[zulu];
            zulu = romeo.bind(tango)(zulu);
            zulu = zulu.LocationIcon;
            mike['IconComponent'] = zulu;
            mike['disabled'] = verify;
            golf[1] = mike;
            zulu = yankee.hasFeature;
            mike = _closure1_slot10;
            mike = mike.COMMUNITY;
            mike = zulu.bind(yankee)(mike);
            if(!mike) { _fun00004_ip = 616; continue _fun00003 }
 419:
            zulu = golf.unshift;
            mike = {};
            yankee = _closure1_slot0;
            romeo = _closure1_slot3;
            foxtrot = romeo[offset];
            foxtrot = yankee.bind(tango)(foxtrot);
            kilo = foxtrot.intl;
            backup = kilo.string;
            foxtrot = romeo[offset];
            foxtrot = yankee.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.EErMzM;
            foxtrot = backup.bind(kilo)(foxtrot);
            mike['name'] = foxtrot;
            foxtrot = _closure1_slot6;
            foxtrot = foxtrot.STAGE_INSTANCE;
            mike['value'] = foxtrot;
            foxtrot = romeo[offset];
            foxtrot = yankee.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            offset = romeo[offset];
            offset = yankee.bind(tango)(offset);
            offset = offset.t;
            offset = offset.LgALpq;
            offset = foxtrot.bind(backup)(offset);
            mike['description'] = offset;
            foxtrot = _closure1_slot1;
            offset = 22;
            offset = romeo[offset];
            offset = foxtrot.bind(tango)(offset);
            mike['icon'] = offset;
            offset = 23;
            offset = romeo[offset];
            offset = yankee.bind(tango)(offset);
            offset = offset.StageIcon;
            mike['IconComponent'] = offset;
            offset = options.length;
            options = 0;
            options = options === offset;
            if(options) { _fun00004_ip = 607; continue _fun00003 }
 604:
            options = verify;
 607:
            mike['disabled'] = options;
            mike = zulu.bind(golf)(mike);
 616:
            zulu = _closure1_slot11;
            mike = _closure1_slot0;
            options = _closure1_slot3;
            entity = 24;
            entity = options[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.TableRadioGroup;
            entity = {};
            entity['value'] = oscar;
            entity['onChange'] = report;
            report = true;
            entity['hasIcons'] = report;
            oscar = golf.map;
            report = function(argFoo) {
                entity = argFoo;
                report = entity.name;
                golf = entity.value;
                verify = entity.description;
                options = entity.IconComponent;
                oscar = entity.disabled;
                tango = _closure1_slot11;
                mike = _closure1_slot0;
                zulu = _closure1_slot3;
                entity = 25;
                entity = zulu[entity];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.TableRadioRow;
                entity = {};
                entity['label'] = report;
                entity['subLabel'] = verify;
                entity['value'] = golf;
                golf = {};
                golf = tango.bind(zulu)(options, golf);
                entity['icon'] = golf;
                entity['disabled'] = oscar;
                entity = tango.bind(zulu)(mike, entity, report);
                return entity;
            };
            report = oscar.bind(golf)(report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['GuildEventEntityTypeSelection'] = tango;
    tango = function(argFoo) { // Original name: GuildEventDescription
        entity = argFoo;
        golf = entity.description;
        verify = entity.onChange;
        entity = entity.onFocus;
        var _closure2_slot0 = entity;
        entity = _closure1_slot13;
        tango = undefined;
        oscar = entity.bind(tango)();
        zulu = _closure1_slot4;
        mike = zulu.useRef;
        entity = null;
        report = mike.bind(zulu)(entity);
        var _closure2_slot1 = report;
        zulu = _closure1_slot11;
        mike = _closure1_slot5;
        entity = {};
        oscar = oscar.formGroupSmall;
        entity['style'] = oscar;
        entity['ref'] = report;
        foxtrot = _closure1_slot0;
        backup = _closure1_slot3;
        report = 26;
        report = backup[report];
        report = foxtrot.bind(tango)(report);
        oscar = report.TextArea;
        report = {};
        offset = 7;
        romeo = backup[offset];
        romeo = foxtrot.bind(tango)(romeo);
        sizing = romeo.intl;
        kilo = sizing.string;
        romeo = backup[offset];
        romeo = foxtrot.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.+gRCCw;
        romeo = kilo.bind(sizing)(romeo);
        report['label'] = romeo;
        yankee = _closure1_slot7;
        report['maxLength'] = yankee;
        yankee = backup[offset];
        yankee = foxtrot.bind(tango)(yankee);
        romeo = yankee.intl;
        yankee = romeo.string;
        offset = backup[offset];
        offset = foxtrot.bind(tango)(offset);
        offset = offset.t;
        offset = offset.kWO/Ex;
        offset = yankee.bind(romeo)(offset);
        report['placeholder'] = offset;
        report['onChange'] = verify;
        options = function() { // Original name: onFocus
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                zulu = _closure2_slot0;
                mike = null;
                if(!(mike != zulu)) { _fun00006_ip = 28; continue _fun00005 }
 13:
                zulu = _closure2_slot0;
                mike = _closure2_slot1;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
 28:
                entity = undefined;
                return entity;
            }
        };
        report['onFocus'] = options;
        report['value'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['GuildEventDescription'] = tango;
    tango = function(argFoo) { // Original name: GuildEventDatetime
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            mike = argFoo;
            source = mike.dateLabel;
            var _closure2_slot0 = source;
            backup = mike.timeLabel;
            var _closure2_slot1 = backup;
            output = mike.date;
            tango = undefined;
            if(!(output === tango)) { _fun00008_ip = 64; continue _fun00007 }
 37:
            report = _closure1_slot1;
            oscar = _closure1_slot3;
            zulu = 27;
            zulu = oscar[zulu];
            zulu = report.bind(tango)(zulu);
            output = zulu.bind(tango)();
 64:
            var _closure2_slot2 = output;
            zulu = mike.minimumDate;
            var _closure2_slot3 = zulu;
            zulu = mike.maximumDate;
            if(!(zulu === tango)) { _fun00008_ip = 148; continue _fun00007 }
 88:
            oscar = _closure1_slot1;
            golf = _closure1_slot3;
            report = 27;
            report = golf[report];
            report = oscar.bind(tango)(report);
            options = report.bind(tango)();
            golf = options.add;
            oscar = 30;
            report = 'days';
            golf = golf.bind(options)(oscar, report);
            oscar = golf.endOf;
            report = 'month';
            zulu = oscar.bind(golf)(report);
 148:
            var _closure2_slot4 = zulu;
            foxtrot = mike.disabled;
            var _closure2_slot5 = foxtrot;
            mike = mike.onChange;
            if(!(mike === tango)) { _fun00008_ip = 176; continue _fun00007 }
 171:
            mike = function() { // Original name: p
                entity = undefined;
                return entity;
            };
 176:
            var _closure2_slot6 = mike;
            mike = _closure1_slot13;
            echo = mike.bind(tango)();
            kilo = function(argFoo) { // Original name: handleOpenDatePicker
                mike = argFoo;
                var _closure3_slot0 = mike;
                entity = function() {
                    _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                        entity = _closure2_slot5;
                        if(entity) { _fun00010_ip = 262; continue _fun00009 }
 13:
                        mike = _closure1_slot2;
                        tango = _closure1_slot3;
                        entity = 12;
                        entity = tango[entity];
                        verify = undefined;
                        mike = mike.bind(verify)(entity);
                        entity = mike.dismissGlobalKeyboard;
                        entity = entity.bind(mike)();
                        tango = _closure3_slot0;
                        mike = 'date';
                        if(!(mike !== tango)) { _fun00010_ip = 69; continue _fun00009 }
 63:
                        golf = _closure2_slot1;
                        _fun00010_ip = 73; continue _fun00009;
 69:
                        golf = _closure2_slot0;
 73:
                        report = _closure1_slot1;
                        mike = _closure1_slot3;
                        tango = 13;
                        tango = mike[tango];
                        report = report.bind(verify)(tango);
                        tango = report.openLazy;
                        options = _closure1_slot0;
                        zulu = 15;
                        zulu = mike[zulu];
                        options = options.bind(verify)(zulu);
                        zulu = 28;
                        zulu = mike[zulu];
                        mike = mike.paths;
                        zulu = options.bind(verify)(zulu, mike);
                        mike = {};
                        options = function(argFoo) { // Original name: onSubmit
                            _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                                zulu = argFoo;
                                mike = _closure3_slot0;
                                entity = 'date';
                                if(!(entity === mike)) { _fun00012_ip = 100; continue _fun00011 }
 18:
                                tango = zulu.set;
                                mike = {};
                                golf = _closure2_slot2;
                                oscar = golf.get;
                                report = 'hour';
                                report = oscar.bind(golf)(report);
                                mike['hour'] = report;
                                oscar = golf.get;
                                report = 'minute';
                                report = oscar.bind(golf)(report);
                                mike['minute'] = report;
                                report = 0;
                                mike['second'] = report;
                                mike['millisecond'] = report;
                                tango = tango.bind(zulu)(mike);
                                mike = _closure2_slot6;
                                entity = undefined;
                                entity = mike.bind(entity)(tango);
                                _fun00012_ip = 114; continue _fun00011;
 100:
                                mike = _closure2_slot6;
                                entity = undefined;
                                entity = mike.bind(entity)(zulu);
 114:
                                entity = undefined;
                                return entity;
                            }
                        };
                        mike['onSubmit'] = options;
                        mike['title'] = golf;
                        options = _closure2_slot2;
                        golf = options.toDate;
                        golf = golf.bind(options)();
                        mike['startDate'] = golf;
                        options = _closure2_slot3;
                        golf = null;
                        if(!(golf == options)) { _fun00010_ip = 196; continue _fun00009 }
 180:
                        options = _closure2_slot2;
                        golf = options.toDate;
                        golf = golf.bind(options)();
                        _fun00010_ip = 210; continue _fun00009;
 196:
                        verify = _closure2_slot3;
                        options = verify.toDate;
                        golf = options.bind(verify)();
 210:
                        mike['minimumDate'] = golf;
                        golf = _closure2_slot4;
                        oscar = golf.toDate;
                        oscar = oscar.bind(golf)();
                        mike['maximumDate'] = oscar;
                        oscar = true;
                        mike['requireDateChanged'] = oscar;
                        entity = _closure3_slot0;
                        mike['mode'] = entity;
                        entity = 'DatePicker';
                        entity = tango.bind(report)(zulu, entity, mike);
 262:
                        entity = undefined;
                        return entity;
                    }
                };
                return entity;
            };
            zulu = _closure1_slot11;
            mike = _closure1_slot5;
            entity = {};
            oscar = echo.formGroup;
            entity['style'] = oscar;
            golf = _closure1_slot12;
            romeo = _closure1_slot0;
            sizing = _closure1_slot3;
            report = 29;
            report = sizing[report];
            report = romeo.bind(tango)(report);
            oscar = report.Stack;
            report = {'direction': 'horizontal', 'spacing': 16};
            options = {};
            verify = echo.dateInput;
            options['style'] = verify;
            offset = 9;
            verify = sizing[offset];
            verify = romeo.bind(tango)(verify);
            yankee = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            result = echo.formHeader;
            verify['style'] = result;
            verify['children'] = source;
            yankee = zulu.bind(tango)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            yankee = 11;
            result = sizing[yankee];
            result = romeo.bind(tango)(result);
            update = result.InputButton;
            result = {};
            result['text'] = source;
            control = output.format;
            source = 'MMM Do YYYY';
            source = control.bind(output)(source);
            result['value'] = source;
            source = 'date';
            source = kilo.bind(tango)(source);
            result['onPress'] = source;
            result['disabled'] = foxtrot;
            result = zulu.bind(tango)(update, result);
            verify[1] = result;
            options['children'] = verify;
            verify = golf.bind(tango)(mike, options);
            options = new Array(2);
            options[0] = verify;
            verify = {};
            result = echo.timeInput;
            verify['style'] = result;
            offset = sizing[offset];
            offset = romeo.bind(tango)(offset);
            result = offset.Text;
            offset = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            echo = echo.formHeader;
            offset['style'] = echo;
            offset['children'] = backup;
            result = zulu.bind(tango)(result, offset);
            offset = new Array(2);
            offset[0] = result;
            yankee = sizing[yankee];
            yankee = romeo.bind(tango)(yankee);
            romeo = yankee.InputButton;
            yankee = {};
            yankee['text'] = backup;
            sizing = output.format;
            backup = 'LT';
            backup = sizing.bind(output)(backup);
            yankee['value'] = backup;
            backup = 'time';
            backup = kilo.bind(tango)(backup);
            yankee['onPress'] = backup;
            yankee['disabled'] = foxtrot;
            yankee = zulu.bind(tango)(romeo, yankee);
            offset[1] = yankee;
            verify['children'] = offset;
            verify = golf.bind(tango)(mike, verify);
            options[1] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['GuildEventDatetime'] = tango;
    mike = function(argFoo) { // Original name: GuildEventBroadcastInfoSettings
        _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
            entity = argFoo;
            mike = entity.editBroadcastInfoData;
            entity = _closure1_slot13;
            report = undefined;
            romeo = entity.bind(report)();
            entity = mike.broadcastInfo;
            output = mike.broadcastToDirectoryChannels;
            var _closure2_slot0 = output;
            zulu = mike.setBroadcastToDirectoryChannels;
            var _closure2_slot1 = zulu;
            offset = mike.canEveryoneRoleViewEvent;
            mike = entity.can_broadcast;
            entity = null;
            if(!mike) { _fun00014_ip = 425; continue _fun00013 }
 70:
            tango = _closure1_slot12;
            zulu = _closure1_slot5;
            mike = {};
            oscar = romeo.formGroup;
            mike['style'] = oscar;
            verify = _closure1_slot11;
            options = _closure1_slot0;
            foxtrot = _closure1_slot3;
            oscar = 30;
            oscar = foxtrot[oscar];
            oscar = options.bind(report)(oscar);
            golf = oscar.TableRowGroup;
            oscar = {};
            kilo = 7;
            backup = foxtrot[kilo];
            backup = options.bind(report)(backup);
            echo = backup.intl;
            sizing = echo.string;
            backup = foxtrot[kilo];
            backup = options.bind(report)(backup);
            backup = backup.t;
            backup = backup.BgAW29;
            backup = sizing.bind(echo)(backup);
            oscar['title'] = backup;
            backup = 31;
            backup = foxtrot[backup];
            backup = options.bind(report)(backup);
            sizing = backup.TableCheckboxRow;
            backup = {};
            echo = foxtrot[kilo];
            echo = options.bind(report)(echo);
            source = echo.intl;
            update = source.string;
            echo = foxtrot[kilo];
            echo = options.bind(report)(echo);
            echo = echo.t;
            echo = echo.8GW68/;
            echo = update.bind(source)(echo);
            backup['label'] = echo;
            result = function() { // Original name: onPress
                zulu = _closure2_slot1;
                entity = _closure2_slot0;
                mike = !entity;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            backup['onPress'] = result;
            backup['checked'] = output;
            output = !offset;
            backup['disabled'] = output;
            backup = verify.bind(report)(sizing, backup);
            oscar['children'] = backup;
            golf = verify.bind(report)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            golf = 9;
            golf = foxtrot[golf];
            golf = options.bind(report)(golf);
            options = golf.Text;
            golf = {'style': null, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
            romeo = romeo.shareDescription;
            golf['style'] = romeo;
            backup = _closure1_slot0;
            yankee = _closure1_slot3;
            romeo = yankee[kilo];
            romeo = backup.bind(report)(romeo);
            foxtrot = romeo.intl;
            romeo = foxtrot.string;
            yankee = yankee[kilo];
            yankee = backup.bind(report)(yankee);
            yankee = yankee.t;
            if(offset) { _fun00014_ip = 388; continue _fun00013 }
 373:
            offset = yankee.gTgUmZ;
            offset = romeo.bind(foxtrot)(offset);
            _fun00014_ip = 401; continue _fun00013;
 388:
            yankee = yankee.V8Oq8P;
            offset = romeo.bind(foxtrot)(yankee);
 401:
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 425:
            return entity;
        }
    };
    zulu['GuildEventBroadcastInfoSettings'] = mike;
    return entity;
})();