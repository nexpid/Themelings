// app/modules/guild_scheduled_events/native/components/GuildEventModalComponents.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.GuildScheduledEventEntityTypes;
    var _closure1_slot6 = golfie;
    golfie = tangon.GUILD_EVENT_MAX_DESCRIPTION_LENGTH;
    var _closure1_slot7 = golfie;
    golfie = tangon.MAX_EVENT_LOCATION_LENGTH;
    var _closure1_slot8 = golfie;
    tangon = tangon.GUILD_EVENT_MAX_NAME_LENGTH;
    var _closure1_slot9 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildFeatures;
    var _closure1_slot10 = tangon;
    yankee = 4;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot11 = tangon;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot12 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 8;
    verify['paddingVertical'] = offset;
    tangon['formGroup'] = verify;
    verify = {};
    verify['paddingVertical'] = yankee;
    tangon['formGroupSmall'] = verify;
    verify = {'paddingTop': 16, 'paddingBottom': 4};
    tangon['formGroupLarge'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1, 'flexBasis': '60%'};
    tangon['dateInput'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1, 'flexBasis': '30%'};
    tangon['timeInput'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['formHeader'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['shareDescription'] = verify;
    verify = {};
    verify['marginStart'] = offset;
    tangon['badge'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'marginBottom': 8};
    tangon['header'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot13 = tangon;
    tangon = 32;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/components/GuildEventModalComponents.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: GuildEventTopic
        entity = argFoo;
        option = entity.topic;
        verify = entity.onChange;
        entity = _closure1_slot13;
        tangon = undefined;
        report = entity.bind(tangon)();
        zuuluu = _closure1_slot11;
        michal = _closure1_slot5;
        entity = {};
        report = report.formGroupSmall;
        entity['style'] = report;
        foxtra = _closure1_slot0;
        backup = _closure1_slot3;
        report = 6;
        report = backup[report];
        report = foxtra.bind(tangon)(report);
        oscard = report.TextInput;
        report = {};
        offset = 7;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        kiloes = yankee.intl;
        romeon = kiloes.string;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.0HbEQ0;
        yankee = romeon.bind(kiloes)(yankee);
        report['label'] = yankee;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        kiloes = yankee.intl;
        romeon = kiloes.string;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.0HbEQ0;
        yankee = romeon.bind(kiloes)(yankee);
        report['accessibilityLabel'] = yankee;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = backup[offset];
        offset = foxtra.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.6/yarq;
        offset = yankee.bind(romeon)(offset);
        report['placeholder'] = offset;
        report['onChange'] = verify;
        report['value'] = option;
        golfie = _closure1_slot9;
        report['maxLength'] = golfie;
        golfie = true;
        report['autoFocus'] = golfie;
        report['isClearable'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['GuildEventTopic'] = tangon;
    tangon = function(argFoo) { // Original name: GuildEventLocation
        entity = argFoo;
        offset = entity.location;
        option = entity.onChange;
        golfie = entity.onFocus;
        entity = _closure1_slot13;
        tangon = undefined;
        report = entity.bind(tangon)();
        zuuluu = _closure1_slot11;
        michal = _closure1_slot5;
        entity = {};
        report = report.formGroupLarge;
        entity['style'] = report;
        backup = _closure1_slot0;
        kiloes = _closure1_slot3;
        report = 6;
        report = kiloes[report];
        report = backup.bind(tangon)(report);
        oscard = report.TextInput;
        report = {};
        yankee = 7;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        sizing = romeon.intl;
        foxtra = sizing.string;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.yx785O;
        romeon = foxtra.bind(sizing)(romeon);
        report['label'] = romeon;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.mkCMiY;
        yankee = romeon.bind(foxtra)(yankee);
        report['placeholder'] = yankee;
        report['value'] = offset;
        verify = _closure1_slot8;
        report['maxLength'] = verify;
        report['onChange'] = option;
        report['onFocus'] = golfie;
        golfie = true;
        report['isClearable'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['GuildEventLocation'] = tangon;
    tangon = function(argFoo) { // Original name: GuildEventRecurrence
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            zuuluu = michal.startDate;
            var _closure2_slot0 = zuuluu;
            entity = michal.recurrenceRule;
            var _closure2_slot1 = entity;
            michal = michal.onRecurrenceChange;
            var _closure2_slot2 = michal;
            michal = _closure1_slot13;
            tangon = undefined;
            sizing = michal.bind(tangon)();
            oscard = _closure1_slot4;
            report = oscard.useMemo;
            michal = new Array(2);
            michal[0] = entity;
            michal[1] = zuuluu;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot3;
                entity = 8;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.recurrenceRuleToOption;
                michal = _closure2_slot0;
                entity = _closure2_slot1;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            entity = report.bind(oscard)(entity, michal);
            var _closure2_slot3 = entity;
            michal = _closure1_slot0;
            report = _closure1_slot3;
            entity = 8;
            entity = report[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.getRecurrenceOptions;
            zuuluu = entity.bind(michal)(zuuluu);
            var _closure2_slot4 = zuuluu;
            michal = zuuluu.find;
            entity = function(argFoo) {
                entity = argFoo;
                michal = entity.value;
                entity = _closure2_slot3;
                entity = michal === entity;
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
            michal = null;
            michal = michal == entity;
            verify = undefined;
            if(michal) { _fun00002_ip = 150; continue _fun00001 }
 145:
            verify = entity.label;
 150:
            zuuluu = _closure1_slot12;
            michal = _closure1_slot5;
            entity = {};
            report = sizing.formGroup;
            entity['style'] = report;
            report = {};
            oscard = sizing.header;
            report['style'] = oscard;
            option = _closure1_slot11;
            foxtra = _closure1_slot0;
            backup = _closure1_slot3;
            oscard = 9;
            oscard = backup[oscard];
            oscard = foxtra.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            offset = 7;
            kiloes = backup[offset];
            kiloes = foxtra.bind(tangon)(kiloes);
            result = kiloes.intl;
            output = result.string;
            kiloes = backup[offset];
            kiloes = foxtra.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.59TVxM;
            kiloes = output.bind(result)(kiloes);
            oscard['children'] = kiloes;
            golfie = option.bind(tangon)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            output = 10;
            golfie = backup[output];
            golfie = foxtra.bind(tangon)(golfie);
            kiloes = golfie.TextBadge;
            golfie = {};
            result = backup[offset];
            result = foxtra.bind(tangon)(result);
            update = result.intl;
            echoed = update.string;
            result = backup[offset];
            result = foxtra.bind(tangon)(result);
            result = result.t;
            result = result.y2b7CA;
            result = echoed.bind(update)(result);
            golfie['text'] = result;
            output = backup[output];
            output = foxtra.bind(tangon)(output);
            output = output.BadgeColors;
            output = output.BRAND;
            golfie['color'] = output;
            sizing = sizing.badge;
            golfie['style'] = sizing;
            golfie = option.bind(tangon)(kiloes, golfie);
            oscard[1] = golfie;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = 11;
            oscard = backup[oscard];
            oscard = foxtra.bind(tangon)(oscard);
            golfie = oscard.InputButton;
            oscard = {};
            romeon = function() { // Original name: onPress
                tangon = _closure1_slot2;
                offset = _closure1_slot3;
                entity = 12;
                zuuluu = offset[entity];
                entity = undefined;
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = tangon.dismissGlobalKeyboard;
                zuuluu = zuuluu.bind(tangon)();
                tangon = _closure1_slot1;
                zuuluu = 13;
                zuuluu = offset[zuuluu];
                oscard = tangon.bind(entity)(zuuluu);
                report = oscard.openLazy;
                verify = _closure1_slot0;
                michal = 15;
                michal = offset[michal];
                tangon = verify.bind(entity)(michal);
                michal = 14;
                zuuluu = offset[michal];
                michal = offset.paths;
                tangon = tangon.bind(entity)(zuuluu, michal);
                zuuluu = {};
                michal = 7;
                golfie = offset[michal];
                golfie = verify.bind(entity)(golfie);
                option = golfie.intl;
                golfie = option.string;
                michal = offset[michal];
                michal = verify.bind(entity)(michal);
                michal = michal.t;
                michal = michal.59TVxM;
                michal = golfie.bind(option)(michal);
                zuuluu['title'] = michal;
                golfie = _closure2_slot4;
                zuuluu['items'] = golfie;
                golfie = function(argFoo) { // Original name: onItemSelect
                    zuuluu = _closure2_slot2;
                    entity = undefined;
                    michal = argFoo;
                    michal = zuuluu.bind(entity)(michal);
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot3;
                    michal = 13;
                    michal = tangon[michal];
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.hideActionSheet;
                    michal = michal.bind(zuuluu)();
                    return entity;
                };
                zuuluu['onItemSelect'] = golfie;
                michal = _closure2_slot3;
                zuuluu['selectedItem'] = michal;
                michal = 'SelectRecurrenceOption';
                michal = report.bind(oscard)(tangon, michal, zuuluu);
                return entity;
            };
            oscard['onPress'] = romeon;
            romeon = backup[offset];
            romeon = foxtra.bind(tangon)(romeon);
            sizing = romeon.intl;
            kiloes = sizing.string;
            romeon = backup[offset];
            romeon = foxtra.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.59TVxM;
            romeon = kiloes.bind(sizing)(romeon);
            oscard['text'] = romeon;
            oscard['value'] = verify;
            romeon = _closure1_slot1;
            yankee = 16;
            yankee = backup[yankee];
            yankee = romeon.bind(tangon)(yankee);
            oscard['icon'] = yankee;
            yankee = 'end';
            oscard['iconPosition'] = yankee;
            yankee = backup[offset];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = backup[offset];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.59TVxM;
            offset = yankee.bind(romeon)(offset);
            oscard['accessibilityLabel'] = offset;
            oscard['accessibilityHint'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['GuildEventRecurrence'] = tangon;
    tangon = function(argFoo) { // Original name: GuildEventEntityTypeSelection
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            yankee = entity.guild;
            oscard = entity.entityType;
            verify = entity.disabled;
            report = entity.onChange;
            romeon = _closure1_slot0;
            foxtra = _closure1_slot3;
            michal = 17;
            michal = foxtra[michal];
            tangon = undefined;
            zuuluu = romeon.bind(tangon)(michal);
            michal = zuuluu.useChannelsUserCanStartStageIn;
            option = michal.bind(zuuluu)(yankee);
            michal = {};
            offset = 7;
            zuuluu = foxtra[offset];
            zuuluu = romeon.bind(tangon)(zuuluu);
            backup = zuuluu.intl;
            golfie = backup.string;
            zuuluu = foxtra[offset];
            zuuluu = romeon.bind(tangon)(zuuluu);
            zuuluu = zuuluu.t;
            zuuluu = zuuluu.BVZqJi;
            zuuluu = golfie.bind(backup)(zuuluu);
            michal['name'] = zuuluu;
            zuuluu = _closure1_slot6;
            golfie = zuuluu.VOICE;
            michal['value'] = golfie;
            golfie = foxtra[offset];
            golfie = romeon.bind(tangon)(golfie);
            kiloes = golfie.intl;
            backup = kiloes.string;
            golfie = foxtra[offset];
            golfie = romeon.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.EV//4e;
            golfie = backup.bind(kiloes)(golfie);
            michal['description'] = golfie;
            backup = _closure1_slot1;
            golfie = 18;
            golfie = foxtra[golfie];
            golfie = backup.bind(tangon)(golfie);
            michal['icon'] = golfie;
            golfie = 19;
            golfie = foxtra[golfie];
            golfie = romeon.bind(tangon)(golfie);
            golfie = golfie.VoiceNormalIcon;
            michal['IconComponent'] = golfie;
            michal['disabled'] = verify;
            golfie = new Array(2);
            golfie[0] = michal;
            michal = {};
            kiloes = foxtra[offset];
            kiloes = romeon.bind(tangon)(kiloes);
            output = kiloes.intl;
            sizing = output.string;
            kiloes = foxtra[offset];
            kiloes = romeon.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.w7ipb2;
            kiloes = sizing.bind(output)(kiloes);
            michal['name'] = kiloes;
            zuuluu = zuuluu.EXTERNAL;
            michal['value'] = zuuluu;
            zuuluu = foxtra[offset];
            zuuluu = romeon.bind(tangon)(zuuluu);
            sizing = zuuluu.intl;
            kiloes = sizing.string;
            zuuluu = foxtra[offset];
            zuuluu = romeon.bind(tangon)(zuuluu);
            zuuluu = zuuluu.t;
            zuuluu = zuuluu.DYxrHh;
            zuuluu = kiloes.bind(sizing)(zuuluu);
            michal['description'] = zuuluu;
            zuuluu = 20;
            zuuluu = foxtra[zuuluu];
            zuuluu = backup.bind(tangon)(zuuluu);
            michal['icon'] = zuuluu;
            zuuluu = 21;
            zuuluu = foxtra[zuuluu];
            zuuluu = romeon.bind(tangon)(zuuluu);
            zuuluu = zuuluu.LocationIcon;
            michal['IconComponent'] = zuuluu;
            michal['disabled'] = verify;
            golfie[1] = michal;
            zuuluu = yankee.hasFeature;
            michal = _closure1_slot10;
            michal = michal.COMMUNITY;
            michal = zuuluu.bind(yankee)(michal);
            if(!michal) { _fun00004_ip = 616; continue _fun00003 }
 419:
            zuuluu = golfie.unshift;
            michal = {};
            yankee = _closure1_slot0;
            romeon = _closure1_slot3;
            foxtra = romeon[offset];
            foxtra = yankee.bind(tangon)(foxtra);
            kiloes = foxtra.intl;
            backup = kiloes.string;
            foxtra = romeon[offset];
            foxtra = yankee.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.EErMzM;
            foxtra = backup.bind(kiloes)(foxtra);
            michal['name'] = foxtra;
            foxtra = _closure1_slot6;
            foxtra = foxtra.STAGE_INSTANCE;
            michal['value'] = foxtra;
            foxtra = romeon[offset];
            foxtra = yankee.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.LgALpq;
            offset = foxtra.bind(backup)(offset);
            michal['description'] = offset;
            foxtra = _closure1_slot1;
            offset = 22;
            offset = romeon[offset];
            offset = foxtra.bind(tangon)(offset);
            michal['icon'] = offset;
            offset = 23;
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.StageIcon;
            michal['IconComponent'] = offset;
            offset = option.length;
            option = 0;
            option = option === offset;
            if(option) { _fun00004_ip = 607; continue _fun00003 }
 604:
            option = verify;
 607:
            michal['disabled'] = option;
            michal = zuuluu.bind(golfie)(michal);
 616:
            zuuluu = _closure1_slot11;
            michal = _closure1_slot0;
            option = _closure1_slot3;
            entity = 24;
            entity = option[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.TableRadioGroup;
            entity = {};
            entity['value'] = oscard;
            entity['onChange'] = report;
            report = true;
            entity['hasIcons'] = report;
            oscard = golfie.map;
            report = function(argFoo) {
                entity = argFoo;
                report = entity.name;
                golfie = entity.value;
                verify = entity.description;
                option = entity.IconComponent;
                oscard = entity.disabled;
                tangon = _closure1_slot11;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot3;
                entity = 25;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.TableRadioRow;
                entity = {};
                entity['label'] = report;
                entity['subLabel'] = verify;
                entity['value'] = golfie;
                golfie = {};
                golfie = tangon.bind(zuuluu)(option, golfie);
                entity['icon'] = golfie;
                entity['disabled'] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity, report);
                return entity;
            };
            report = oscard.bind(golfie)(report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['GuildEventEntityTypeSelection'] = tangon;
    tangon = function(argFoo) { // Original name: GuildEventDescription
        entity = argFoo;
        golfie = entity.description;
        verify = entity.onChange;
        entity = entity.onFocus;
        var _closure2_slot0 = entity;
        entity = _closure1_slot13;
        tangon = undefined;
        oscard = entity.bind(tangon)();
        zuuluu = _closure1_slot4;
        michal = zuuluu.useRef;
        entity = null;
        report = michal.bind(zuuluu)(entity);
        var _closure2_slot1 = report;
        zuuluu = _closure1_slot11;
        michal = _closure1_slot5;
        entity = {};
        oscard = oscard.formGroupSmall;
        entity['style'] = oscard;
        entity['ref'] = report;
        foxtra = _closure1_slot0;
        backup = _closure1_slot3;
        report = 26;
        report = backup[report];
        report = foxtra.bind(tangon)(report);
        oscard = report.TextArea;
        report = {};
        offset = 7;
        romeon = backup[offset];
        romeon = foxtra.bind(tangon)(romeon);
        sizing = romeon.intl;
        kiloes = sizing.string;
        romeon = backup[offset];
        romeon = foxtra.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.+gRCCw;
        romeon = kiloes.bind(sizing)(romeon);
        report['label'] = romeon;
        yankee = _closure1_slot7;
        report['maxLength'] = yankee;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = backup[offset];
        offset = foxtra.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.kWO/Ex;
        offset = yankee.bind(romeon)(offset);
        report['placeholder'] = offset;
        report['onChange'] = verify;
        option = function() { // Original name: onFocus
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                zuuluu = _closure2_slot0;
                michal = null;
                if(!(michal != zuuluu)) { _fun00006_ip = 28; continue _fun00005 }
 13:
                zuuluu = _closure2_slot0;
                michal = _closure2_slot1;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
 28:
                entity = undefined;
                return entity;
            }
        };
        report['onFocus'] = option;
        report['value'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['GuildEventDescription'] = tangon;
    tangon = function(argFoo) { // Original name: GuildEventDatetime
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            michal = argFoo;
            source = michal.dateLabel;
            var _closure2_slot0 = source;
            backup = michal.timeLabel;
            var _closure2_slot1 = backup;
            output = michal.date;
            tangon = undefined;
            if(!(output === tangon)) { _fun00008_ip = 64; continue _fun00007 }
 37:
            report = _closure1_slot1;
            oscard = _closure1_slot3;
            zuuluu = 27;
            zuuluu = oscard[zuuluu];
            zuuluu = report.bind(tangon)(zuuluu);
            output = zuuluu.bind(tangon)();
 64:
            var _closure2_slot2 = output;
            zuuluu = michal.minimumDate;
            var _closure2_slot3 = zuuluu;
            zuuluu = michal.maximumDate;
            if(!(zuuluu === tangon)) { _fun00008_ip = 148; continue _fun00007 }
 88:
            oscard = _closure1_slot1;
            golfie = _closure1_slot3;
            report = 27;
            report = golfie[report];
            report = oscard.bind(tangon)(report);
            option = report.bind(tangon)();
            golfie = option.add;
            oscard = 30;
            report = 'days';
            golfie = golfie.bind(option)(oscard, report);
            oscard = golfie.endOf;
            report = 'month';
            zuuluu = oscard.bind(golfie)(report);
 148:
            var _closure2_slot4 = zuuluu;
            foxtra = michal.disabled;
            var _closure2_slot5 = foxtra;
            michal = michal.onChange;
            if(!(michal === tangon)) { _fun00008_ip = 176; continue _fun00007 }
 171:
            michal = function() { // Original name: p
                entity = undefined;
                return entity;
            };
 176:
            var _closure2_slot6 = michal;
            michal = _closure1_slot13;
            echoed = michal.bind(tangon)();
            kiloes = function(argFoo) { // Original name: handleOpenDatePicker
                michal = argFoo;
                var _closure3_slot0 = michal;
                entity = function() {
                    _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                        entity = _closure2_slot5;
                        if(entity) { _fun00010_ip = 262; continue _fun00009 }
 13:
                        michal = _closure1_slot2;
                        tangon = _closure1_slot3;
                        entity = 12;
                        entity = tangon[entity];
                        verify = undefined;
                        michal = michal.bind(verify)(entity);
                        entity = michal.dismissGlobalKeyboard;
                        entity = entity.bind(michal)();
                        tangon = _closure3_slot0;
                        michal = 'date';
                        if(!(michal !== tangon)) { _fun00010_ip = 69; continue _fun00009 }
 63:
                        golfie = _closure2_slot1;
                        _fun00010_ip = 73; continue _fun00009;
 69:
                        golfie = _closure2_slot0;
 73:
                        report = _closure1_slot1;
                        michal = _closure1_slot3;
                        tangon = 13;
                        tangon = michal[tangon];
                        report = report.bind(verify)(tangon);
                        tangon = report.openLazy;
                        option = _closure1_slot0;
                        zuuluu = 15;
                        zuuluu = michal[zuuluu];
                        option = option.bind(verify)(zuuluu);
                        zuuluu = 28;
                        zuuluu = michal[zuuluu];
                        michal = michal.paths;
                        zuuluu = option.bind(verify)(zuuluu, michal);
                        michal = {};
                        option = function(argFoo) { // Original name: onSubmit
                            _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                                zuuluu = argFoo;
                                michal = _closure3_slot0;
                                entity = 'date';
                                if(!(entity === michal)) { _fun00012_ip = 100; continue _fun00011 }
 18:
                                tangon = zuuluu.set;
                                michal = {};
                                golfie = _closure2_slot2;
                                oscard = golfie.get;
                                report = 'hour';
                                report = oscard.bind(golfie)(report);
                                michal['hour'] = report;
                                oscard = golfie.get;
                                report = 'minute';
                                report = oscard.bind(golfie)(report);
                                michal['minute'] = report;
                                report = 0;
                                michal['second'] = report;
                                michal['millisecond'] = report;
                                tangon = tangon.bind(zuuluu)(michal);
                                michal = _closure2_slot6;
                                entity = undefined;
                                entity = michal.bind(entity)(tangon);
                                _fun00012_ip = 114; continue _fun00011;
 100:
                                michal = _closure2_slot6;
                                entity = undefined;
                                entity = michal.bind(entity)(zuuluu);
 114:
                                entity = undefined;
                                return entity;
                            }
                        };
                        michal['onSubmit'] = option;
                        michal['title'] = golfie;
                        option = _closure2_slot2;
                        golfie = option.toDate;
                        golfie = golfie.bind(option)();
                        michal['startDate'] = golfie;
                        option = _closure2_slot3;
                        golfie = null;
                        if(!(golfie == option)) { _fun00010_ip = 196; continue _fun00009 }
 180:
                        option = _closure2_slot2;
                        golfie = option.toDate;
                        golfie = golfie.bind(option)();
                        _fun00010_ip = 210; continue _fun00009;
 196:
                        verify = _closure2_slot3;
                        option = verify.toDate;
                        golfie = option.bind(verify)();
 210:
                        michal['minimumDate'] = golfie;
                        golfie = _closure2_slot4;
                        oscard = golfie.toDate;
                        oscard = oscard.bind(golfie)();
                        michal['maximumDate'] = oscard;
                        oscard = true;
                        michal['requireDateChanged'] = oscard;
                        entity = _closure3_slot0;
                        michal['mode'] = entity;
                        entity = 'DatePicker';
                        entity = tangon.bind(report)(zuuluu, entity, michal);
 262:
                        entity = undefined;
                        return entity;
                    }
                };
                return entity;
            };
            zuuluu = _closure1_slot11;
            michal = _closure1_slot5;
            entity = {};
            oscard = echoed.formGroup;
            entity['style'] = oscard;
            golfie = _closure1_slot12;
            romeon = _closure1_slot0;
            sizing = _closure1_slot3;
            report = 29;
            report = sizing[report];
            report = romeon.bind(tangon)(report);
            oscard = report.Stack;
            report = {'direction': 'horizontal', 'spacing': 16};
            option = {};
            verify = echoed.dateInput;
            option['style'] = verify;
            offset = 9;
            verify = sizing[offset];
            verify = romeon.bind(tangon)(verify);
            yankee = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            result = echoed.formHeader;
            verify['style'] = result;
            verify['children'] = source;
            yankee = zuuluu.bind(tangon)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            yankee = 11;
            result = sizing[yankee];
            result = romeon.bind(tangon)(result);
            update = result.InputButton;
            result = {};
            result['text'] = source;
            ctrled = output.format;
            source = 'MMM Do YYYY';
            source = ctrled.bind(output)(source);
            result['value'] = source;
            source = 'date';
            source = kiloes.bind(tangon)(source);
            result['onPress'] = source;
            result['disabled'] = foxtra;
            result = zuuluu.bind(tangon)(update, result);
            verify[1] = result;
            option['children'] = verify;
            verify = golfie.bind(tangon)(michal, option);
            option = new Array(2);
            option[0] = verify;
            verify = {};
            result = echoed.timeInput;
            verify['style'] = result;
            offset = sizing[offset];
            offset = romeon.bind(tangon)(offset);
            result = offset.Text;
            offset = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            echoed = echoed.formHeader;
            offset['style'] = echoed;
            offset['children'] = backup;
            result = zuuluu.bind(tangon)(result, offset);
            offset = new Array(2);
            offset[0] = result;
            yankee = sizing[yankee];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.InputButton;
            yankee = {};
            yankee['text'] = backup;
            sizing = output.format;
            backup = 'LT';
            backup = sizing.bind(output)(backup);
            yankee['value'] = backup;
            backup = 'time';
            backup = kiloes.bind(tangon)(backup);
            yankee['onPress'] = backup;
            yankee['disabled'] = foxtra;
            yankee = zuuluu.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            verify['children'] = offset;
            verify = golfie.bind(tangon)(michal, verify);
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['GuildEventDatetime'] = tangon;
    michal = function(argFoo) { // Original name: GuildEventBroadcastInfoSettings
        _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
            entity = argFoo;
            michal = entity.editBroadcastInfoData;
            entity = _closure1_slot13;
            report = undefined;
            romeon = entity.bind(report)();
            entity = michal.broadcastInfo;
            output = michal.broadcastToDirectoryChannels;
            var _closure2_slot0 = output;
            zuuluu = michal.setBroadcastToDirectoryChannels;
            var _closure2_slot1 = zuuluu;
            offset = michal.canEveryoneRoleViewEvent;
            michal = entity.can_broadcast;
            entity = null;
            if(!michal) { _fun00014_ip = 429; continue _fun00013 }
 70:
            tangon = _closure1_slot12;
            zuuluu = _closure1_slot5;
            michal = {};
            oscard = romeon.formGroup;
            michal['style'] = oscard;
            verify = _closure1_slot11;
            option = _closure1_slot0;
            foxtra = _closure1_slot3;
            oscard = 30;
            oscard = foxtra[oscard];
            oscard = option.bind(report)(oscard);
            golfie = oscard.TableRowGroup;
            oscard = {};
            kiloes = 7;
            backup = foxtra[kiloes];
            backup = option.bind(report)(backup);
            echoed = backup.intl;
            sizing = echoed.string;
            backup = foxtra[kiloes];
            backup = option.bind(report)(backup);
            backup = backup.t;
            backup = backup.BgAW29;
            backup = sizing.bind(echoed)(backup);
            oscard['title'] = backup;
            backup = 31;
            backup = foxtra[backup];
            backup = option.bind(report)(backup);
            sizing = backup.TableCheckboxRow;
            backup = {};
            echoed = foxtra[kiloes];
            echoed = option.bind(report)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = foxtra[kiloes];
            echoed = option.bind(report)(echoed);
            echoed = echoed.t;
            echoed = echoed.8GW68/;
            echoed = update.bind(source)(echoed);
            backup['label'] = echoed;
            result = function() { // Original name: onPress
                zuuluu = _closure2_slot1;
                entity = _closure2_slot0;
                michal = !entity;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            backup['onPress'] = result;
            backup['checked'] = output;
            output = !offset;
            backup['disabled'] = output;
            backup = verify.bind(report)(sizing, backup);
            oscard['children'] = backup;
            golfie = verify.bind(report)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = 9;
            golfie = foxtra[golfie];
            golfie = option.bind(report)(golfie);
            option = golfie.Text;
            golfie = {'style': null, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
            romeon = romeon.shareDescription;
            golfie['style'] = romeon;
            backup = _closure1_slot0;
            yankee = _closure1_slot3;
            romeon = yankee[kiloes];
            romeon = backup.bind(report)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.string;
            yankee = yankee[kiloes];
            yankee = backup.bind(report)(yankee);
            yankee = yankee.t;
            if(offset) { _fun00014_ip = 392; continue _fun00013 }
 377:
            offset = yankee.gTgUmZ;
            offset = romeon.bind(foxtra)(offset);
            _fun00014_ip = 405; continue _fun00013;
 392:
            yankee = yankee.V8Oq8P;
            offset = romeon.bind(foxtra)(yankee);
 405:
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 429:
            return entity;
        }
    };
    zuuluu['GuildEventBroadcastInfoSettings'] = michal;
    return entity;
})();