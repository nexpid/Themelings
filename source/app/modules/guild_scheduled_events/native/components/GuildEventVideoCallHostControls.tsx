// app/modules/guild_scheduled_events/native/components/GuildEventVideoCallHostControls.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.GuildScheduledEventEntityTypes;
    var _closure1_slot5 = tango;
    tango = 3;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot6 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'width': 16, 'height': 16};
    yankee = 5;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.WHITE;
    offset['tintColor'] = foxtrot;
    tango['icon'] = offset;
    offset = {'marginRight': 16, 'width': 32, 'height': 32, 'borderRadius': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.lg;
    offset['borderRadius'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.unsafe_rawColors;
    foxtrot = foxtrot.GREEN_360;
    offset['backgroundColor'] = foxtrot;
    tango['iconContainer'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center'};
    tango['detailsContainer'] = offset;
    offset = {'marginHorizontal': 8, 'width': 4, 'height': 4, 'borderRadius': 2};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_ACCENT;
    offset['backgroundColor'] = yankee;
    tango['bulletSeparator'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot8 = tango;
    tango = golf.memo;
    mike = function(argFoo) {
        mike = argFoo;
        golf = mike.channel;
        var _closure2_slot0 = golf;
        romeo = mike.recurrenceId;
        var _closure2_slot1 = romeo;
        verify = mike.guildScheduledEvent;
        var _closure2_slot2 = verify;
        mike = _closure1_slot8;
        tango = undefined;
        yankee = mike.bind(tango)();
        options = _closure1_slot1;
        sizing = _closure1_slot2;
        mike = 6;
        mike = sizing[mike];
        mike = options.bind(tango)(mike);
        offset = mike.bind(tango)();
        oscar = _closure1_slot3;
        zulu = oscar.useCallback;
        mike = new Array(3);
        mike[0] = verify;
        mike[1] = romeo;
        mike[2] = golf;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zulu = _closure2_slot2;
                mike = null;
                if(!(mike != zulu)) { _fun00002_ip = 94; continue _fun00001 }
 13:
                oscar = _closure1_slot1;
                report = _closure1_slot2;
                zulu = 7;
                zulu = report[zulu];
                tango = undefined;
                oscar = oscar.bind(tango)(zulu);
                zulu = oscar.hideActionSheet;
                zulu = zulu.bind(oscar)();
                zulu = _closure1_slot0;
                mike = 8;
                mike = report[mike];
                report = zulu.bind(tango)(mike);
                tango = report.openStartGuildEventActionSheet;
                zulu = _closure2_slot2;
                mike = _closure2_slot1;
                entity = function() {
                    zulu = _closure1_slot0;
                    mike = _closure1_slot2;
                    entity = 9;
                    mike = mike[entity];
                    entity = undefined;
                    tango = zulu.bind(entity)(mike);
                    zulu = tango.openVoiceChannelActionSheet;
                    mike = _closure2_slot0;
                    mike = zulu.bind(tango)(mike);
                    return entity;
                };
                entity = tango.bind(report)(zulu, mike, entity);
 94:
                entity = undefined;
                return entity;
            }
        };
        golf = zulu.bind(oscar)(entity, mike);
        echo = verify.scheduled_start_time;
        oscar = verify.name;
        backup = verify.entity_type;
        entity = _closure1_slot5;
        foxtrot = entity.STAGE_INSTANCE;
        entity = 10;
        entity = sizing[entity];
        zulu = options.bind(tango)(entity);
        mike = verify.guild_id;
        entity = verify.id;
        kilo = zulu.bind(tango)(mike, entity, romeo);
        romeo = _closure1_slot0;
        entity = 11;
        entity = sizing[entity];
        zulu = romeo.bind(tango)(entity);
        mike = zulu.getGuildScheduledEventHeaderProps;
        entity = {};
        output = 12;
        output = sizing[output];
        result = romeo.bind(tango)(output);
        output = result.getEventTimeData;
        output = output.bind(result)(echo);
        entity['eventTimeData'] = output;
        foxtrot = backup === foxtrot;
        entity['isStage'] = foxtrot;
        entity['theme'] = offset;
        entity['event'] = verify;
        entity = mike.bind(zulu)(entity);
        foxtrot = entity.text;
        zulu = _closure1_slot6;
        entity = 13;
        entity = sizing[entity];
        entity = romeo.bind(tango)(entity);
        mike = entity.FormCTA;
        entity = {};
        entity['onPress'] = golf;
        golf = 14;
        golf = sizing[golf];
        golf = options.bind(tango)(golf);
        entity['iconSource'] = golf;
        golf = yankee.icon;
        entity['iconStyle'] = golf;
        golf = yankee.iconContainer;
        entity['iconContainerStyle'] = golf;
        entity['title'] = oscar;
        golf = _closure1_slot7;
        oscar = _closure1_slot4;
        report = {};
        options = yankee.detailsContainer;
        report['style'] = options;
        verify = 15;
        options = sizing[verify];
        options = romeo.bind(tango)(options);
        offset = options.Text;
        options = {'variant': 'text-xs/semibold', 'color': 'header-secondary'};
        options['children'] = foxtrot;
        offset = zulu.bind(tango)(offset, options);
        options = new Array(3);
        options[0] = offset;
        offset = {};
        yankee = yankee.bulletSeparator;
        offset['style'] = yankee;
        offset = zulu.bind(tango)(oscar, offset);
        options[1] = offset;
        verify = sizing[verify];
        verify = romeo.bind(tango)(verify);
        offset = verify.Text;
        verify = {'variant': 'text-xs/semibold', 'color': 'header-secondary'};
        yankee = 16;
        foxtrot = sizing[yankee];
        foxtrot = romeo.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.format;
        yankee = sizing[yankee];
        yankee = romeo.bind(tango)(yankee);
        yankee = yankee.t;
        romeo = yankee.NywdIi;
        yankee = {};
        yankee['count'] = kilo;
        yankee = foxtrot.bind(backup)(romeo, yankee);
        verify['children'] = yankee;
        verify = zulu.bind(tango)(offset, verify);
        options[2] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['subtitle'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = tango.bind(golf)(mike);
    tango = 17;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_scheduled_events/native/components/GuildEventVideoCallHostControls.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();