// app/modules/guild_scheduled_events/native/components/GuildEventVideoCallHostControls.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildScheduledEventEntityTypes;
    var _closure1_slot5 = tangon;
    tangon = 3;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot6 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'width': 16, 'height': 16};
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.WHITE;
    offset['tintColor'] = foxtra;
    tangon['icon'] = offset;
    offset = {'marginRight': 16, 'width': 32, 'height': 32, 'borderRadius': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    offset['borderRadius'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.unsafe_rawColors;
    foxtra = foxtra.GREEN_360;
    offset['backgroundColor'] = foxtra;
    tangon['iconContainer'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center'};
    tangon['detailsContainer'] = offset;
    offset = {'marginHorizontal': 8, 'width': 4, 'height': 4, 'borderRadius': 2};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_ACCENT;
    offset['backgroundColor'] = yankee;
    tangon['bulletSeparator'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot8 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        michal = argFoo;
        golfie = michal.channel;
        var _closure2_slot0 = golfie;
        romeon = michal.recurrenceId;
        var _closure2_slot1 = romeon;
        verify = michal.guildScheduledEvent;
        var _closure2_slot2 = verify;
        michal = _closure1_slot8;
        tangon = undefined;
        yankee = michal.bind(tangon)();
        option = _closure1_slot1;
        sizing = _closure1_slot2;
        michal = 6;
        michal = sizing[michal];
        michal = option.bind(tangon)(michal);
        offset = michal.bind(tangon)();
        oscard = _closure1_slot3;
        zuuluu = oscard.useCallback;
        michal = new Array(3);
        michal[0] = verify;
        michal[1] = romeon;
        michal[2] = golfie;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure2_slot2;
                michal = null;
                if(!(michal != zuuluu)) { _fun00002_ip = 94; continue _fun00001 }
 13:
                oscard = _closure1_slot1;
                report = _closure1_slot2;
                zuuluu = 7;
                zuuluu = report[zuuluu];
                tangon = undefined;
                oscard = oscard.bind(tangon)(zuuluu);
                zuuluu = oscard.hideActionSheet;
                zuuluu = zuuluu.bind(oscard)();
                zuuluu = _closure1_slot0;
                michal = 8;
                michal = report[michal];
                report = zuuluu.bind(tangon)(michal);
                tangon = report.openStartGuildEventActionSheet;
                zuuluu = _closure2_slot2;
                michal = _closure2_slot1;
                entity = function() {
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 9;
                    michal = michal[entity];
                    entity = undefined;
                    tangon = zuuluu.bind(entity)(michal);
                    zuuluu = tangon.openVoiceChannelActionSheet;
                    michal = _closure2_slot0;
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                };
                entity = tangon.bind(report)(zuuluu, michal, entity);
 94:
                entity = undefined;
                return entity;
            }
        };
        golfie = zuuluu.bind(oscard)(entity, michal);
        echoed = verify.scheduled_start_time;
        oscard = verify.name;
        backup = verify.entity_type;
        entity = _closure1_slot5;
        foxtra = entity.STAGE_INSTANCE;
        entity = 10;
        entity = sizing[entity];
        zuuluu = option.bind(tangon)(entity);
        michal = verify.guild_id;
        entity = verify.id;
        kiloes = zuuluu.bind(tangon)(michal, entity, romeon);
        romeon = _closure1_slot0;
        entity = 11;
        entity = sizing[entity];
        zuuluu = romeon.bind(tangon)(entity);
        michal = zuuluu.getGuildScheduledEventHeaderProps;
        entity = {};
        output = 12;
        output = sizing[output];
        result = romeon.bind(tangon)(output);
        output = result.getEventTimeData;
        output = output.bind(result)(echoed);
        entity['eventTimeData'] = output;
        foxtra = backup === foxtra;
        entity['isStage'] = foxtra;
        entity['theme'] = offset;
        entity['event'] = verify;
        entity = michal.bind(zuuluu)(entity);
        foxtra = entity.text;
        zuuluu = _closure1_slot6;
        entity = 13;
        entity = sizing[entity];
        entity = romeon.bind(tangon)(entity);
        michal = entity.FormCTA;
        entity = {};
        entity['onPress'] = golfie;
        golfie = 14;
        golfie = sizing[golfie];
        golfie = option.bind(tangon)(golfie);
        entity['iconSource'] = golfie;
        golfie = yankee.icon;
        entity['iconStyle'] = golfie;
        golfie = yankee.iconContainer;
        entity['iconContainerStyle'] = golfie;
        entity['title'] = oscard;
        golfie = _closure1_slot7;
        oscard = _closure1_slot4;
        report = {};
        option = yankee.detailsContainer;
        report['style'] = option;
        verify = 15;
        option = sizing[verify];
        option = romeon.bind(tangon)(option);
        offset = option.Text;
        option = {'variant': 'text-xs/semibold', 'color': 'header-secondary'};
        option['children'] = foxtra;
        offset = zuuluu.bind(tangon)(offset, option);
        option = new Array(3);
        option[0] = offset;
        offset = {};
        yankee = yankee.bulletSeparator;
        offset['style'] = yankee;
        offset = zuuluu.bind(tangon)(oscard, offset);
        option[1] = offset;
        verify = sizing[verify];
        verify = romeon.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'variant': 'text-xs/semibold', 'color': 'header-secondary'};
        yankee = 16;
        foxtra = sizing[yankee];
        foxtra = romeon.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.format;
        yankee = sizing[yankee];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.t;
        romeon = yankee.NywdIi;
        yankee = {};
        yankee['count'] = kiloes;
        yankee = foxtra.bind(backup)(romeon, yankee);
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['subtitle'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_scheduled_events/native/components/GuildEventVideoCallHostControls.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();