// app/modules/fastest_list/placeholders/useFastestListTableRowPlaceholderConfig.native.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    oscard = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    report = golfie[entity];
    michal = argCor;
    entity = undefined;
    michal = michal.bind(entity)(report);
    var _closure1_slot3 = michal;
    michal = 1;
    michal = golfie[michal];
    option = oscard.bind(entity)(michal);
    report = option.createStyles;
    michal = {};
    verify = {};
    offset = 2;
    romeon = golfie[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.CARD_PRIMARY_BG;
    verify['backgroundColor'] = romeon;
    michal['placeholder'] = verify;
    verify = {};
    romeon = 3;
    foxtra = golfie[romeon];
    foxtra = oscard.bind(entity)(foxtra);
    backup = foxtra.AVATAR_SIZE_MAP;
    foxtra = golfie[romeon];
    foxtra = oscard.bind(entity)(foxtra);
    foxtra = foxtra.AvatarSizes;
    foxtra = foxtra.REFRESH_MEDIUM_32;
    foxtra = backup[foxtra];
    verify['width'] = foxtra;
    foxtra = golfie[romeon];
    foxtra = oscard.bind(entity)(foxtra);
    foxtra = foxtra.AVATAR_SIZE_MAP;
    romeon = golfie[romeon];
    romeon = oscard.bind(entity)(romeon);
    romeon = romeon.AvatarSizes;
    romeon = romeon.REFRESH_MEDIUM_32;
    romeon = foxtra[romeon];
    verify['height'] = romeon;
    romeon = golfie[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xl;
    verify['borderRadius'] = romeon;
    romeon = golfie[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_ACCENT;
    verify['backgroundColor'] = romeon;
    michal['placeholderAvatar'] = verify;
    verify = {};
    romeon = 20;
    verify['height'] = romeon;
    romeon = golfie[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderRadius'] = romeon;
    offset = golfie[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_ACCENT;
    verify['backgroundColor'] = offset;
    michal['placeholderUsername'] = verify;
    verify = {};
    offset = 4;
    offset = golfie[offset];
    offset = oscard.bind(entity)(offset);
    offset = offset.DIVIDER_BACKGROUND;
    verify['backgroundColor'] = offset;
    michal['placeholderDivider'] = verify;
    michal = report.bind(option)(michal);
    var _closure1_slot4 = michal;
    report = 6;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/fastest_list/placeholders/useFastestListTableRowPlaceholderConfig.native.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function() { // Original name: useFastestListTableRowPlaceholderConfig
        tangon = _closure1_slot4;
        zuuluu = undefined;
        report = tangon.bind(zuuluu)();
        var _closure2_slot0 = report;
        tangon = _closure1_slot3;
        zuuluu = tangon.useMemo;
        michal = new Array(1);
        michal[0] = report;
        entity = function() {
            golfie = {};
            yankee = _closure1_slot0;
            oscard = _closure1_slot2;
            offset = 5;
            michal = oscard[offset];
            report = undefined;
            michal = yankee.bind(report)(michal);
            michal = michal.FastestListPropsPlaceholderType;
            michal = michal.FEED_ITEM;
            golfie['type'] = michal;
            michal = 'circle';
            golfie['shape'] = michal;
            verify = _closure2_slot0;
            michal = verify.placeholder;
            michal = michal.backgroundColor;
            golfie['backgroundColorHex'] = michal;
            michal = verify.placeholderAvatar;
            michal = michal.backgroundColor;
            golfie['colorHex'] = michal;
            tangon = _closure1_slot1;
            zuuluu = 2;
            entity = oscard[zuuluu];
            entity = tangon.bind(report)(entity);
            entity = entity.spacing;
            entity = entity.PX_16;
            golfie['labelPadding'] = entity;
            entity = 0;
            golfie['labelPaddingInnerRatio'] = entity;
            entity = verify.placeholderUsername;
            entity = entity.height;
            golfie['labelSize'] = entity;
            entity = oscard[zuuluu];
            entity = tangon.bind(report)(entity);
            entity = entity.spacing;
            entity = entity.PX_12;
            golfie['padding'] = entity;
            entity = verify.placeholderAvatar;
            entity = entity.width;
            golfie['shapeSize'] = entity;
            option = {};
            entity = true;
            option['divider'] = entity;
            entity = verify.placeholderDivider;
            entity = entity.backgroundColor;
            option['dividerColorHex'] = entity;
            entity = oscard[zuuluu];
            entity = tangon.bind(report)(entity);
            entity = entity.spacing;
            michal = entity.PX_12;
            entity = verify.placeholderAvatar;
            entity = entity.width;
            michal = michal + entity;
            entity = oscard[zuuluu];
            entity = tangon.bind(report)(entity);
            entity = entity.spacing;
            entity = entity.PX_16;
            entity = michal + entity;
            option['dividerPaddingLeft'] = entity;
            entity = {};
            michal = {};
            offset = oscard[offset];
            offset = yankee.bind(report)(offset);
            offset = offset.FastestListPropsPlaceholderType;
            offset = offset.SHAPE;
            michal['type'] = offset;
            offset = 'rect';
            michal['shape'] = offset;
            verify = verify.placeholder;
            verify = verify.backgroundColor;
            michal['colorHex'] = verify;
            verify = oscard[zuuluu];
            verify = tangon.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_16;
            michal['paddingVertical'] = verify;
            verify = oscard[zuuluu];
            verify = tangon.bind(report)(verify);
            verify = verify.radii;
            verify = verify.md;
            michal['borderRadius'] = verify;
            verify = oscard[zuuluu];
            verify = tangon.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_96;
            michal['width'] = verify;
            entity['sectionHeader'] = michal;
            michal = {};
            foxtra = michal;
            romeon = golfie;
            verify = copyDataProperties(foxtra, romeon);
            foxtra = michal;
            romeon = option;
            verify = copyDataProperties(foxtra, romeon);
            entity['sectionItem'] = michal;
            michal = {};
            foxtra = michal;
            romeon = golfie;
            verify = copyDataProperties(foxtra, romeon);
            foxtra = michal;
            romeon = option;
            option = copyDataProperties(foxtra, romeon);
            option = oscard[zuuluu];
            option = tangon.bind(report)(option);
            option = option.radii;
            verify = option.lg;
            option = 'borderTopLeftRadius';
            michal[option] = verify;
            option = oscard[zuuluu];
            option = tangon.bind(report)(option);
            option = option.radii;
            verify = option.lg;
            option = 'borderTopRightRadius';
            michal[option] = verify;
            entity['sectionItemAtFront'] = michal;
            michal = {};
            foxtra = michal;
            romeon = golfie;
            option = copyDataProperties(foxtra, romeon);
            option = oscard[zuuluu];
            option = tangon.bind(report)(option);
            option = option.radii;
            verify = option.lg;
            option = 'borderBottomLeftRadius';
            michal[option] = verify;
            option = oscard[zuuluu];
            option = tangon.bind(report)(option);
            option = option.radii;
            verify = option.lg;
            option = 'borderBottomRightRadius';
            michal[option] = verify;
            entity['sectionItemAtRear'] = michal;
            michal = {};
            foxtra = michal;
            romeon = golfie;
            golfie = copyDataProperties(foxtra, romeon);
            zuuluu = oscard[zuuluu];
            zuuluu = tangon.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            tangon = zuuluu.lg;
            zuuluu = 'borderRadius';
            michal[zuuluu] = tangon;
            entity['sectionItemSingleton'] = michal;
            return entity;
        };
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    zuuluu['default'] = tangon;
    zuuluu['useFastestListTableRowPlaceholderStyles'] = michal;
    return entity;
})();