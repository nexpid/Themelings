// app/modules/fastest_list/placeholders/useFastestListTableRowPlaceholderConfig.native.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    oscar = argBar;
    yankee = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, mike);
    entity = 0;
    report = golf[entity];
    mike = argCorge;
    entity = undefined;
    mike = mike.bind(entity)(report);
    var _closure1_slot3 = mike;
    mike = 1;
    mike = golf[mike];
    options = oscar.bind(entity)(mike);
    report = options.createStyles;
    mike = {};
    verify = {};
    offset = 2;
    romeo = golf[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.CARD_PRIMARY_BG;
    verify['backgroundColor'] = romeo;
    mike['placeholder'] = verify;
    verify = {};
    romeo = 3;
    foxtrot = golf[romeo];
    foxtrot = oscar.bind(entity)(foxtrot);
    backup = foxtrot.AVATAR_SIZE_MAP;
    foxtrot = golf[romeo];
    foxtrot = oscar.bind(entity)(foxtrot);
    foxtrot = foxtrot.AvatarSizes;
    foxtrot = foxtrot.REFRESH_MEDIUM_32;
    foxtrot = backup[foxtrot];
    verify['width'] = foxtrot;
    foxtrot = golf[romeo];
    foxtrot = oscar.bind(entity)(foxtrot);
    foxtrot = foxtrot.AVATAR_SIZE_MAP;
    romeo = golf[romeo];
    romeo = oscar.bind(entity)(romeo);
    romeo = romeo.AvatarSizes;
    romeo = romeo.REFRESH_MEDIUM_32;
    romeo = foxtrot[romeo];
    verify['height'] = romeo;
    romeo = golf[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.xl;
    verify['borderRadius'] = romeo;
    romeo = golf[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_ACCENT;
    verify['backgroundColor'] = romeo;
    mike['placeholderAvatar'] = verify;
    verify = {};
    romeo = 20;
    verify['height'] = romeo;
    romeo = golf[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.md;
    verify['borderRadius'] = romeo;
    offset = golf[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_ACCENT;
    verify['backgroundColor'] = offset;
    mike['placeholderUsername'] = verify;
    verify = {};
    offset = 4;
    offset = golf[offset];
    offset = oscar.bind(entity)(offset);
    offset = offset.DIVIDER_BACKGROUND;
    verify['backgroundColor'] = offset;
    mike['placeholderDivider'] = verify;
    mike = report.bind(options)(mike);
    var _closure1_slot4 = mike;
    report = 6;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/fastest_list/placeholders/useFastestListTableRowPlaceholderConfig.native.tsx';
    report = oscar.bind(golf)(report);
    tango = function() { // Original name: useFastestListTableRowPlaceholderConfig
        tango = _closure1_slot4;
        zulu = undefined;
        report = tango.bind(zulu)();
        var _closure2_slot0 = report;
        tango = _closure1_slot3;
        zulu = tango.useMemo;
        mike = new Array(1);
        mike[0] = report;
        entity = function() {
            golf = {};
            yankee = _closure1_slot0;
            oscar = _closure1_slot2;
            offset = 5;
            mike = oscar[offset];
            report = undefined;
            mike = yankee.bind(report)(mike);
            mike = mike.FastestListPropsPlaceholderType;
            mike = mike.FEED_ITEM;
            golf['type'] = mike;
            mike = 'circle';
            golf['shape'] = mike;
            verify = _closure2_slot0;
            mike = verify.placeholder;
            mike = mike.backgroundColor;
            golf['backgroundColorHex'] = mike;
            mike = verify.placeholderAvatar;
            mike = mike.backgroundColor;
            golf['colorHex'] = mike;
            tango = _closure1_slot1;
            zulu = 2;
            entity = oscar[zulu];
            entity = tango.bind(report)(entity);
            entity = entity.spacing;
            entity = entity.PX_16;
            golf['labelPadding'] = entity;
            entity = 0;
            golf['labelPaddingInnerRatio'] = entity;
            entity = verify.placeholderUsername;
            entity = entity.height;
            golf['labelSize'] = entity;
            entity = oscar[zulu];
            entity = tango.bind(report)(entity);
            entity = entity.spacing;
            entity = entity.PX_12;
            golf['padding'] = entity;
            entity = verify.placeholderAvatar;
            entity = entity.width;
            golf['shapeSize'] = entity;
            options = {};
            entity = true;
            options['divider'] = entity;
            entity = verify.placeholderDivider;
            entity = entity.backgroundColor;
            options['dividerColorHex'] = entity;
            entity = oscar[zulu];
            entity = tango.bind(report)(entity);
            entity = entity.spacing;
            mike = entity.PX_12;
            entity = verify.placeholderAvatar;
            entity = entity.width;
            mike = mike + entity;
            entity = oscar[zulu];
            entity = tango.bind(report)(entity);
            entity = entity.spacing;
            entity = entity.PX_16;
            entity = mike + entity;
            options['dividerPaddingLeft'] = entity;
            entity = {};
            mike = {};
            offset = oscar[offset];
            offset = yankee.bind(report)(offset);
            offset = offset.FastestListPropsPlaceholderType;
            offset = offset.SHAPE;
            mike['type'] = offset;
            offset = 'rect';
            mike['shape'] = offset;
            verify = verify.placeholder;
            verify = verify.backgroundColor;
            mike['colorHex'] = verify;
            verify = oscar[zulu];
            verify = tango.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_16;
            mike['paddingVertical'] = verify;
            verify = oscar[zulu];
            verify = tango.bind(report)(verify);
            verify = verify.radii;
            verify = verify.md;
            mike['borderRadius'] = verify;
            verify = oscar[zulu];
            verify = tango.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_96;
            mike['width'] = verify;
            entity['sectionHeader'] = mike;
            mike = {};
            foxtrot = mike;
            romeo = golf;
            verify = copyDataProperties(foxtrot, romeo);
            foxtrot = mike;
            romeo = options;
            verify = copyDataProperties(foxtrot, romeo);
            entity['sectionItem'] = mike;
            mike = {};
            foxtrot = mike;
            romeo = golf;
            verify = copyDataProperties(foxtrot, romeo);
            foxtrot = mike;
            romeo = options;
            options = copyDataProperties(foxtrot, romeo);
            options = oscar[zulu];
            options = tango.bind(report)(options);
            options = options.radii;
            verify = options.lg;
            options = 'borderTopLeftRadius';
            mike[options] = verify;
            options = oscar[zulu];
            options = tango.bind(report)(options);
            options = options.radii;
            verify = options.lg;
            options = 'borderTopRightRadius';
            mike[options] = verify;
            entity['sectionItemAtFront'] = mike;
            mike = {};
            foxtrot = mike;
            romeo = golf;
            options = copyDataProperties(foxtrot, romeo);
            options = oscar[zulu];
            options = tango.bind(report)(options);
            options = options.radii;
            verify = options.lg;
            options = 'borderBottomLeftRadius';
            mike[options] = verify;
            options = oscar[zulu];
            options = tango.bind(report)(options);
            options = options.radii;
            verify = options.lg;
            options = 'borderBottomRightRadius';
            mike[options] = verify;
            entity['sectionItemAtRear'] = mike;
            mike = {};
            foxtrot = mike;
            romeo = golf;
            golf = copyDataProperties(foxtrot, romeo);
            zulu = oscar[zulu];
            zulu = tango.bind(report)(zulu);
            zulu = zulu.radii;
            tango = zulu.lg;
            zulu = 'borderRadius';
            mike[zulu] = tango;
            entity['sectionItemSingleton'] = mike;
            return entity;
        };
        entity = zulu.bind(tango)(entity, mike);
        return entity;
    };
    zulu['default'] = tango;
    zulu['useFastestListTableRowPlaceholderStyles'] = mike;
    return entity;
})();