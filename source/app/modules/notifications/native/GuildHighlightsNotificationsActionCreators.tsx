// app/modules/notifications/native/GuildHighlightsNotificationsActionCreators.tsx
export default (function(argFoo, argBar, argBaz, argCor, argGra, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    tangon = tangon.NotificationUserFeedbackReasons;
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot4 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/notifications/native/GuildHighlightsNotificationsActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo, argBar, argBaz, argCor, argGra) { // Original name: openGuildHighlightNotificationForPush
        michal = argFoo;
        var _closure2_slot0 = michal;
        entity = argBar;
        var _closure2_slot1 = entity;
        entity = argBaz;
        var _closure2_slot2 = entity;
        entity = argCor;
        var _closure2_slot3 = entity;
        entity = argGra;
        var _closure2_slot4 = entity;
        tangon = _closure1_slot1;
        backup = _closure1_slot2;
        entity = 2;
        zuuluu = backup[entity];
        entity = undefined;
        oscard = tangon.bind(entity)(zuuluu);
        report = oscard.openLazy;
        foxtra = _closure1_slot0;
        zuuluu = 4;
        zuuluu = backup[zuuluu];
        verify = foxtra.bind(entity)(zuuluu);
        zuuluu = 3;
        tangon = backup[zuuluu];
        zuuluu = backup.paths;
        tangon = verify.bind(entity)(tangon, zuuluu);
        zuuluu = {};
        zuuluu['guildId'] = michal;
        michal = {};
        verify = {};
        yankee = _closure1_slot3;
        option = yankee.TOO_MANY;
        verify['value'] = option;
        offset = 5;
        option = backup[offset];
        option = foxtra.bind(entity)(option);
        kiloes = option.intl;
        romeon = kiloes.string;
        option = backup[offset];
        option = foxtra.bind(entity)(option);
        option = option.t;
        option = option.pLeQp6;
        option = romeon.bind(kiloes)(option);
        verify['label'] = option;
        option = new Array(5);
        option[0] = verify;
        verify = {};
        romeon = yankee.IRRELEVANT_CHANNEL;
        verify['value'] = romeon;
        romeon = backup[offset];
        romeon = foxtra.bind(entity)(romeon);
        sizing = romeon.intl;
        kiloes = sizing.string;
        romeon = backup[offset];
        romeon = foxtra.bind(entity)(romeon);
        romeon = romeon.t;
        romeon = romeon.Lu4n29;
        romeon = kiloes.bind(sizing)(romeon);
        verify['label'] = romeon;
        option[1] = verify;
        verify = {};
        romeon = yankee.IRRELEVANT_USER;
        verify['value'] = romeon;
        romeon = backup[offset];
        romeon = foxtra.bind(entity)(romeon);
        sizing = romeon.intl;
        kiloes = sizing.string;
        romeon = backup[offset];
        romeon = foxtra.bind(entity)(romeon);
        romeon = romeon.t;
        romeon = romeon.TF6AhI;
        romeon = kiloes.bind(sizing)(romeon);
        verify['label'] = romeon;
        option[2] = verify;
        verify = {};
        romeon = yankee.IRRELEVANT_TOPIC;
        verify['value'] = romeon;
        romeon = backup[offset];
        romeon = foxtra.bind(entity)(romeon);
        sizing = romeon.intl;
        kiloes = sizing.string;
        romeon = backup[offset];
        romeon = foxtra.bind(entity)(romeon);
        romeon = romeon.t;
        romeon = romeon.s+8J8f;
        romeon = kiloes.bind(sizing)(romeon);
        verify['label'] = romeon;
        option[3] = verify;
        verify = {};
        yankee = yankee.SENSITIVE_OR_OFFENSIVE_TOPIC;
        verify['value'] = yankee;
        yankee = backup[offset];
        yankee = foxtra.bind(entity)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = backup[offset];
        offset = foxtra.bind(entity)(offset);
        offset = offset.t;
        offset = offset.fEUR7e;
        offset = yankee.bind(romeon)(offset);
        verify['label'] = offset;
        option[4] = verify;
        michal['reasons'] = option;
        option = function() { // Original name: onFeedbackShown
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 6;
            zuuluu = zuuluu[entity];
            entity = undefined;
            report = tangon.bind(entity)(zuuluu);
            tangon = report.track;
            michal = _closure1_slot4;
            zuuluu = michal.FEEDBACK_FORM_VIEWED;
            michal = {};
            golfie = _closure2_slot2;
            michal['type'] = golfie;
            golfie = _closure2_slot3;
            michal['location'] = golfie;
            golfie = _closure2_slot0;
            michal['guild_id'] = golfie;
            golfie = _closure2_slot1;
            option = golfie.channel_id;
            michal['channel_id'] = option;
            golfie = golfie.id;
            michal['message_id'] = golfie;
            verify = _closure2_slot4;
            offset = michal;
            oscard = copyDataProperties(offset, verify);
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        };
        michal['onFeedbackShown'] = option;
        golfie = function(argFoo) { // Original name: onFeedbackCompleted
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                golfie = entity.rating;
                option = entity.reason;
                tangon = _closure1_slot1;
                zuuluu = _closure1_slot2;
                entity = 6;
                zuuluu = zuuluu[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.track;
                michal = _closure1_slot4;
                zuuluu = michal.FEEDBACK_FORM_SUBMITTED;
                michal = {};
                verify = _closure2_slot2;
                michal['type'] = verify;
                verify = _closure2_slot3;
                michal['location'] = verify;
                michal['rating'] = golfie;
                golfie = null;
                verify = golfie == option;
                golfie = undefined;
                if(verify) { _fun00002_ip = 97; continue _fun00001 }
 92:
                golfie = option.value;
 97:
                michal['reason'] = golfie;
                golfie = _closure2_slot0;
                michal['guild_id'] = golfie;
                golfie = _closure2_slot1;
                option = golfie.channel_id;
                michal['channel_id'] = option;
                golfie = golfie.id;
                michal['message_id'] = golfie;
                offset = _closure2_slot4;
                yankee = michal;
                oscard = copyDataProperties(yankee, offset);
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            }
        };
        michal['onFeedbackCompleted'] = golfie;
        zuuluu['feedbackSettings'] = michal;
        michal = 'GuildHighlightsNotifications';
        michal = report.bind(oscard)(tangon, michal, zuuluu);
        return entity;
    };
    zuuluu['openGuildHighlightNotificationForPush'] = michal;
    return entity;
})();