// app/modules/notifications/settings_unread_notice/native/UnreadSettingNotice.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    yankee = 1;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    offset = 2;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ChannelNotificationSettingsFlags;
    var _closure1_slot4 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'display': 'flex', 'flexDirection': 'row', 'paddingVertical': null, 'paddingHorizontal': null, 'borderBottomWidth': 1};
    romeon = 5;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_12;
    verify['paddingVertical'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingHorizontal'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BORDER_SUBTLE;
    verify['borderBottomColor'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = backup;
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.shadows;
    sizing = romeon.SHADOW_LOW;
    output = verify;
    romeon = copyDataProperties(output, sizing);
    tangon['content'] = verify;
    verify = {};
    verify['flex'] = yankee;
    tangon['informations'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'marginLeft': 16};
    tangon['actions'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['inlineTextWithIcon'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['icon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/notifications/settings_unread_notice/native/UnreadSettingNotice.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: UnreadSettingNoticeConnected
        verify = argFoo;
        var _closure2_slot0 = verify;
        entity = _closure1_slot7;
        tangon = undefined;
        foxtra = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot3;
        entity = {};
        report = foxtra.content;
        entity['style'] = report;
        golfie = _closure1_slot5;
        oscard = _closure1_slot1;
        sizing = _closure1_slot2;
        report = 6;
        report = sizing[report];
        oscard = oscard.bind(tangon)(report);
        report = {};
        verify = verify.channel;
        verify = verify.id;
        report['id'] = verify;
        oscard = golfie.bind(tangon)(oscard, report);
        report = new Array(3);
        report[0] = oscard;
        oscard = {};
        verify = foxtra.informations;
        oscard['style'] = verify;
        kiloes = _closure1_slot0;
        offset = 7;
        option = sizing[offset];
        option = kiloes.bind(tangon)(option);
        verify = option.Text;
        option = {};
        romeon = 'text-md/semibold';
        option['variant'] = romeon;
        romeon = 8;
        backup = sizing[romeon];
        backup = kiloes.bind(tangon)(backup);
        result = backup.intl;
        output = result.string;
        backup = sizing[romeon];
        backup = kiloes.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.i4xQ5u;
        backup = output.bind(result)(backup);
        option['children'] = backup;
        option = golfie.bind(tangon)(verify, option);
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[1] = oscard;
        oscard = {};
        option = foxtra.actions;
        oscard['style'] = option;
        option = 9;
        option = sizing[option];
        option = kiloes.bind(tangon)(option);
        verify = option.PressableOpacity;
        option = {};
        backup = 'button';
        option['accessibilityRole'] = backup;
        foxtra = foxtra.inlineTextWithIcon;
        option['style'] = foxtra;
        yankee = function() { // Original name: onPress
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 10;
            zuuluu = zuuluu[entity];
            entity = undefined;
            oscard = tangon.bind(entity)(zuuluu);
            zuuluu = _closure2_slot0;
            tangon = zuuluu.channel;
            report = tangon.guild_id;
            tangon = zuuluu.channel;
            tangon = tangon.id;
            michal = _closure1_slot4;
            michal = michal.UNREADS_ONLY_MENTIONS;
            michal = oscard.bind(entity)(report, tangon, michal);
            michal = zuuluu.clearUnreadsNotice;
            michal = michal.bind(zuuluu)();
            return entity;
        };
        option['onPress'] = yankee;
        offset = sizing[offset];
        offset = kiloes.bind(tangon)(offset);
        yankee = offset.Text;
        offset = {'variant': 'text-xs/medium', 'color': 'text-link'};
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.KyUKhY;
        romeon = foxtra.bind(backup)(romeon);
        offset['children'] = romeon;
        offset = golfie.bind(tangon)(yankee, offset);
        option['children'] = offset;
        option = golfie.bind(tangon)(verify, option);
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();