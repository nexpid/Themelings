// app/modules/notifications/settings_unread_notice/native/UnreadSettingNotice.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    yankee = 1;
    tango = oscar[yankee];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    offset = 2;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    tango = tango.ChannelNotificationSettingsFlags;
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'display': 'flex', 'flexDirection': 'row', 'paddingVertical': null, 'paddingHorizontal': null, 'borderBottomWidth': 1};
    romeo = 5;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_12;
    verify['paddingVertical'] = backup;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingHorizontal'] = backup;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BORDER_SUBTLE;
    verify['borderBottomColor'] = backup;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = backup;
    romeo = oscar[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.shadows;
    sizing = romeo.SHADOW_LOW;
    output = verify;
    romeo = copyDataProperties(output, sizing);
    tango['content'] = verify;
    verify = {};
    verify['flex'] = yankee;
    tango['informations'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'marginLeft': 16};
    tango['actions'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tango['inlineTextWithIcon'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tango['icon'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/notifications/settings_unread_notice/native/UnreadSettingNotice.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: UnreadSettingNoticeConnected
        verify = argFoo;
        var _closure2_slot0 = verify;
        entity = _closure1_slot7;
        tango = undefined;
        foxtrot = entity.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot3;
        entity = {};
        report = foxtrot.content;
        entity['style'] = report;
        golf = _closure1_slot5;
        oscar = _closure1_slot1;
        sizing = _closure1_slot2;
        report = 6;
        report = sizing[report];
        oscar = oscar.bind(tango)(report);
        report = {};
        verify = verify.channel;
        verify = verify.id;
        report['id'] = verify;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(3);
        report[0] = oscar;
        oscar = {};
        verify = foxtrot.informations;
        oscar['style'] = verify;
        kilo = _closure1_slot0;
        offset = 7;
        options = sizing[offset];
        options = kilo.bind(tango)(options);
        verify = options.Text;
        options = {};
        romeo = 'text-md/semibold';
        options['variant'] = romeo;
        romeo = 8;
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        result = backup.intl;
        output = result.string;
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.i4xQ5u;
        backup = output.bind(result)(backup);
        options['children'] = backup;
        options = golf.bind(tango)(verify, options);
        oscar['children'] = options;
        oscar = golf.bind(tango)(mike, oscar);
        report[1] = oscar;
        oscar = {};
        options = foxtrot.actions;
        oscar['style'] = options;
        options = 9;
        options = sizing[options];
        options = kilo.bind(tango)(options);
        verify = options.PressableOpacity;
        options = {};
        backup = 'button';
        options['accessibilityRole'] = backup;
        foxtrot = foxtrot.inlineTextWithIcon;
        options['style'] = foxtrot;
        yankee = function() { // Original name: onPress
            tango = _closure1_slot1;
            zulu = _closure1_slot2;
            entity = 10;
            zulu = zulu[entity];
            entity = undefined;
            oscar = tango.bind(entity)(zulu);
            zulu = _closure2_slot0;
            tango = zulu.channel;
            report = tango.guild_id;
            tango = zulu.channel;
            tango = tango.id;
            mike = _closure1_slot4;
            mike = mike.UNREADS_ONLY_MENTIONS;
            mike = oscar.bind(entity)(report, tango, mike);
            mike = zulu.clearUnreadsNotice;
            mike = mike.bind(zulu)();
            return entity;
        };
        options['onPress'] = yankee;
        offset = sizing[offset];
        offset = kilo.bind(tango)(offset);
        yankee = offset.Text;
        offset = {'variant': 'text-xs/medium', 'color': 'text-link'};
        foxtrot = sizing[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.string;
        romeo = sizing[romeo];
        romeo = kilo.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.KyUKhY;
        romeo = foxtrot.bind(backup)(romeo);
        offset['children'] = romeo;
        offset = golf.bind(tango)(yankee, offset);
        options['children'] = offset;
        options = golf.bind(tango)(verify, options);
        oscar['children'] = options;
        oscar = golf.bind(tango)(mike, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();