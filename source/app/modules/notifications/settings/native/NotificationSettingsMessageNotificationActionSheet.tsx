// app/modules/notifications/settings/native/NotificationSettingsMessageNotificationActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.UserNotificationSettings;
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BG_BASE_TERTIARY;
    verify['backgroundColor'] = romeo;
    tango['sheet'] = verify;
    verify = {'padding': 24, 'paddingTop': 0};
    tango['header'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_BASE_SECONDARY;
    verify['backgroundColor'] = offset;
    offset = 16;
    verify['padding'] = offset;
    tango['content'] = verify;
    verify = {'marginTop': 8, 'marginBottom': 16};
    tango['form'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/notifications/settings/native/NotificationSettingsMessageNotificationActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: NotificationSettingsMessageNotificationActionSheet
        result = argFoo;
        entity = _closure1_slot7;
        tango = undefined;
        yankee = entity.bind(tango)();
        zulu = _closure1_slot6;
        update = _closure1_slot0;
        source = _closure1_slot2;
        entity = 6;
        entity = source[entity];
        entity = update.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {};
        report = true;
        entity['startExpanded'] = report;
        report = yankee.sheet;
        entity['backgroundStyles'] = report;
        offset = _closure1_slot5;
        golf = _closure1_slot3;
        report = {};
        oscar = yankee.header;
        report['style'] = oscar;
        options = _closure1_slot1;
        oscar = 7;
        oscar = source[oscar];
        options = options.bind(tango)(oscar);
        oscar = {};
        verify = result.value;
        oscar['notificationSetting'] = verify;
        oscar = offset.bind(tango)(options, oscar);
        report['children'] = oscar;
        oscar = offset.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = {};
        options = yankee.content;
        oscar['style'] = options;
        verify = 8;
        options = source[verify];
        options = update.bind(tango)(options);
        romeo = options.Text;
        options = {};
        foxtrot = 'text-sm/semibold';
        options['variant'] = foxtrot;
        output = 9;
        foxtrot = source[output];
        foxtrot = update.bind(tango)(foxtrot);
        kilo = foxtrot.intl;
        backup = kilo.string;
        foxtrot = source[output];
        foxtrot = update.bind(tango)(foxtrot);
        foxtrot = foxtrot.t;
        foxtrot = foxtrot.1m22ZG;
        foxtrot = backup.bind(kilo)(foxtrot);
        options['children'] = foxtrot;
        romeo = offset.bind(tango)(romeo, options);
        options = new Array(3);
        options[0] = romeo;
        verify = source[verify];
        verify = update.bind(tango)(verify);
        romeo = verify.Text;
        verify = {'variant': 'text-xs/medium', 'color': 'text-muted'};
        verify = offset.bind(tango)(romeo, verify);
        options[1] = verify;
        verify = {};
        yankee = yankee.form;
        verify['style'] = yankee;
        yankee = 10;
        yankee = source[yankee];
        yankee = update.bind(tango)(yankee);
        romeo = yankee.TableRadioGroup;
        yankee = {};
        foxtrot = result.value;
        yankee['value'] = foxtrot;
        foxtrot = result.onChange;
        yankee['onChange'] = foxtrot;
        backup = 11;
        foxtrot = source[backup];
        foxtrot = update.bind(tango)(foxtrot);
        kilo = foxtrot.TableRadioRow;
        foxtrot = {};
        echo = source[output];
        echo = update.bind(tango)(echo);
        vacuum = echo.intl;
        control = vacuum.string;
        echo = source[output];
        echo = update.bind(tango)(echo);
        echo = echo.t;
        echo = echo.HVah//;
        echo = control.bind(vacuum)(echo);
        foxtrot['label'] = echo;
        sizing = _closure1_slot4;
        echo = sizing.ALL_MESSAGES;
        foxtrot['value'] = echo;
        result = result.allMessagesSubLabel;
        foxtrot['subLabel'] = result;
        kilo = offset.bind(tango)(kilo, foxtrot);
        foxtrot = new Array(3);
        foxtrot[0] = kilo;
        kilo = source[backup];
        kilo = update.bind(tango)(kilo);
        result = kilo.TableRadioRow;
        kilo = {};
        echo = source[output];
        echo = update.bind(tango)(echo);
        vacuum = echo.intl;
        control = vacuum.string;
        echo = source[output];
        echo = update.bind(tango)(echo);
        echo = echo.t;
        echo = echo.tu+ZWF;
        echo = control.bind(vacuum)(echo);
        kilo['label'] = echo;
        echo = sizing.ONLY_MENTIONS;
        kilo['value'] = echo;
        kilo = offset.bind(tango)(result, kilo);
        foxtrot[1] = kilo;
        backup = source[backup];
        backup = update.bind(tango)(backup);
        kilo = backup.TableRadioRow;
        backup = {};
        result = source[output];
        result = update.bind(tango)(result);
        echo = result.intl;
        result = echo.string;
        output = source[output];
        output = update.bind(tango)(output);
        output = output.t;
        output = output.X4wWUl;
        output = result.bind(echo)(output);
        backup['label'] = output;
        sizing = sizing.NO_MESSAGES;
        backup['value'] = sizing;
        backup = offset.bind(tango)(kilo, backup);
        foxtrot[2] = backup;
        yankee['children'] = foxtrot;
        yankee = zulu.bind(tango)(romeo, yankee);
        verify['children'] = yankee;
        verify = offset.bind(tango)(golf, verify);
        options[2] = verify;
        oscar['children'] = options;
        oscar = zulu.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();