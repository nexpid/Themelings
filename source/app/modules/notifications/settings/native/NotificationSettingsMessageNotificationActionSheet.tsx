// app/modules/notifications/settings/native/NotificationSettingsMessageNotificationActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.UserNotificationSettings;
    var _closure1_slot4 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_BASE_TERTIARY;
    verify['backgroundColor'] = romeon;
    tangon['sheet'] = verify;
    verify = {'padding': 24, 'paddingTop': 0};
    tangon['header'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_BASE_SECONDARY;
    verify['backgroundColor'] = offset;
    offset = 16;
    verify['padding'] = offset;
    tangon['content'] = verify;
    verify = {'marginTop': 8, 'marginBottom': 16};
    tangon['form'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/notifications/settings/native/NotificationSettingsMessageNotificationActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: NotificationSettingsMessageNotificationActionSheet
        result = argFoo;
        entity = _closure1_slot7;
        tangon = undefined;
        yankee = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        update = _closure1_slot0;
        source = _closure1_slot2;
        entity = 6;
        entity = source[entity];
        entity = update.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        report = true;
        entity['startExpanded'] = report;
        report = yankee.sheet;
        entity['backgroundStyles'] = report;
        offset = _closure1_slot5;
        golfie = _closure1_slot3;
        report = {};
        oscard = yankee.header;
        report['style'] = oscard;
        option = _closure1_slot1;
        oscard = 7;
        oscard = source[oscard];
        option = option.bind(tangon)(oscard);
        oscard = {};
        verify = result.value;
        oscard['notificationSetting'] = verify;
        oscard = offset.bind(tangon)(option, oscard);
        report['children'] = oscard;
        oscard = offset.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        option = yankee.content;
        oscard['style'] = option;
        verify = 8;
        option = source[verify];
        option = update.bind(tangon)(option);
        romeon = option.Text;
        option = {};
        foxtra = 'text-sm/semibold';
        option['variant'] = foxtra;
        output = 9;
        foxtra = source[output];
        foxtra = update.bind(tangon)(foxtra);
        kiloes = foxtra.intl;
        backup = kiloes.string;
        foxtra = source[output];
        foxtra = update.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        foxtra = foxtra.1m22ZG;
        foxtra = backup.bind(kiloes)(foxtra);
        option['children'] = foxtra;
        romeon = offset.bind(tangon)(romeon, option);
        option = new Array(3);
        option[0] = romeon;
        verify = source[verify];
        verify = update.bind(tangon)(verify);
        romeon = verify.Text;
        verify = {'variant': 'text-xs/medium', 'color': 'text-muted'};
        verify = offset.bind(tangon)(romeon, verify);
        option[1] = verify;
        verify = {};
        yankee = yankee.form;
        verify['style'] = yankee;
        yankee = 10;
        yankee = source[yankee];
        yankee = update.bind(tangon)(yankee);
        romeon = yankee.TableRadioGroup;
        yankee = {};
        foxtra = result.value;
        yankee['value'] = foxtra;
        foxtra = result.onChange;
        yankee['onChange'] = foxtra;
        backup = 11;
        foxtra = source[backup];
        foxtra = update.bind(tangon)(foxtra);
        kiloes = foxtra.TableRadioRow;
        foxtra = {};
        echoed = source[output];
        echoed = update.bind(tangon)(echoed);
        vacuum = echoed.intl;
        ctrled = vacuum.string;
        echoed = source[output];
        echoed = update.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.HVah//;
        echoed = ctrled.bind(vacuum)(echoed);
        foxtra['label'] = echoed;
        sizing = _closure1_slot4;
        echoed = sizing.ALL_MESSAGES;
        foxtra['value'] = echoed;
        result = result.allMessagesSubLabel;
        foxtra['subLabel'] = result;
        kiloes = offset.bind(tangon)(kiloes, foxtra);
        foxtra = new Array(3);
        foxtra[0] = kiloes;
        kiloes = source[backup];
        kiloes = update.bind(tangon)(kiloes);
        result = kiloes.TableRadioRow;
        kiloes = {};
        echoed = source[output];
        echoed = update.bind(tangon)(echoed);
        vacuum = echoed.intl;
        ctrled = vacuum.string;
        echoed = source[output];
        echoed = update.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.tu+ZWF;
        echoed = ctrled.bind(vacuum)(echoed);
        kiloes['label'] = echoed;
        echoed = sizing.ONLY_MENTIONS;
        kiloes['value'] = echoed;
        kiloes = offset.bind(tangon)(result, kiloes);
        foxtra[1] = kiloes;
        backup = source[backup];
        backup = update.bind(tangon)(backup);
        kiloes = backup.TableRadioRow;
        backup = {};
        result = source[output];
        result = update.bind(tangon)(result);
        echoed = result.intl;
        result = echoed.string;
        output = source[output];
        output = update.bind(tangon)(output);
        output = output.t;
        output = output.X4wWUl;
        output = result.bind(echoed)(output);
        backup['label'] = output;
        sizing = sizing.NO_MESSAGES;
        backup['value'] = sizing;
        backup = offset.bind(tangon)(kiloes, backup);
        foxtra[2] = backup;
        yankee['children'] = foxtra;
        yankee = zuuluu.bind(tangon)(romeon, yankee);
        verify['children'] = yankee;
        verify = offset.bind(tangon)(golfie, verify);
        option[2] = verify;
        oscard['children'] = option;
        oscard = zuuluu.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();