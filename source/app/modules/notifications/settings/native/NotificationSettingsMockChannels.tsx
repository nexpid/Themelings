// app/modules/notifications/settings/native/NotificationSettingsMockChannels.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.UnreadSetting;
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'backgroundColor': null, 'overflow': 'hidden', 'borderRadius': 10, 'paddingVertical': 8};
    offset = 5;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_SURFACE_RAISED;
    verify['backgroundColor'] = offset;
    tango['card'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'paddingVertical': 4, 'justifyContent': 'space-between', 'paddingRight': 12};
    tango['channel'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tango['channelName'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 11;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/notifications/settings/native/NotificationSettingsMockChannels.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: NotificationSettingsMockChannels
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = _closure1_slot7;
            tango = undefined;
            oscar = mike.bind(tango)();
            var _closure2_slot0 = oscar;
            zulu = {'badged': true, 'unread': true};
            mike = _closure1_slot4;
            golf = mike.ALL_MESSAGES;
            zulu['resolvedUnreadSetting'] = golf;
            yankee = _closure1_slot0;
            romeo = _closure1_slot2;
            options = 6;
            golf = romeo[options];
            golf = yankee.bind(tango)(golf);
            offset = golf.intl;
            verify = offset.string;
            golf = romeo[options];
            golf = yankee.bind(tango)(golf);
            golf = golf.t;
            golf = golf.EjLobG;
            golf = verify.bind(offset)(golf);
            zulu['name'] = golf;
            golf = new Array(3);
            golf[0] = zulu;
            zulu = {'badged': false, 'unread': true};
            verify = mike.ONLY_MENTIONS;
            zulu['resolvedUnreadSetting'] = verify;
            verify = romeo[options];
            verify = yankee.bind(tango)(verify);
            foxtrot = verify.intl;
            offset = foxtrot.string;
            verify = romeo[options];
            verify = yankee.bind(tango)(verify);
            verify = verify.t;
            verify = verify.Wgpwpq;
            verify = offset.bind(foxtrot)(verify);
            zulu['name'] = verify;
            golf[1] = zulu;
            zulu = {'badged': false, 'unread': false};
            verify = mike.ONLY_MENTIONS;
            zulu['resolvedUnreadSetting'] = verify;
            verify = romeo[options];
            verify = yankee.bind(tango)(verify);
            offset = verify.intl;
            verify = offset.string;
            options = romeo[options];
            options = yankee.bind(tango)(options);
            options = options.t;
            options = options.g9VImp;
            options = verify.bind(offset)(options);
            zulu['name'] = options;
            golf[2] = zulu;
            zulu = argFoo;
            zulu = zulu.unreadSetting;
            mike = mike.ALL_MESSAGES;
            if(!(zulu === mike)) { _fun00002_ip = 305; continue _fun00001 }
 282:
            mike = 1;
            zulu = golf[mike];
            mike = _closure1_slot4;
            mike = mike.ALL_MESSAGES;
            zulu['resolvedUnreadSetting'] = mike;
 305:
            zulu = _closure1_slot5;
            mike = _closure1_slot3;
            entity = {};
            oscar = oscar.card;
            entity['style'] = oscar;
            oscar = golf.map;
            report = function(argFoo) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = argFoo;
                    report = _closure1_slot6;
                    tango = _closure1_slot3;
                    zulu = {};
                    mike = _closure2_slot0;
                    oscar = mike.channel;
                    zulu['style'] = oscar;
                    oscar = {};
                    mike = mike.channelName;
                    oscar['style'] = mike;
                    yankee = _closure1_slot5;
                    verify = _closure1_slot1;
                    romeo = _closure1_slot2;
                    mike = 7;
                    options = romeo[mike];
                    mike = undefined;
                    verify = verify.bind(mike)(options);
                    options = {};
                    offset = entity.unread;
                    options['unread'] = offset;
                    offset = entity.resolvedUnreadSetting;
                    options['resolvedUnreadSetting'] = offset;
                    verify = yankee.bind(mike)(verify, options);
                    options = new Array(3);
                    options[0] = verify;
                    offset = _closure1_slot0;
                    verify = 8;
                    verify = romeo[verify];
                    verify = offset.bind(mike)(verify);
                    offset = verify.TextIcon;
                    verify = {};
                    romeo = {};
                    foxtrot = 12;
                    romeo['marginLeft'] = foxtrot;
                    verify['style'] = romeo;
                    romeo = 'xs';
                    verify['size'] = romeo;
                    backup = entity.resolvedUnreadSetting;
                    romeo = _closure1_slot4;
                    foxtrot = romeo.ONLY_MENTIONS;
                    romeo = undefined;
                    if(!(backup === foxtrot)) { _fun00004_ip = 182; continue _fun00003 }
 176:
                    romeo = 'text-muted';
 182:
                    verify['color'] = romeo;
                    verify = yankee.bind(mike)(offset, verify);
                    options[1] = verify;
                    yankee = _closure1_slot5;
                    offset = _closure1_slot0;
                    romeo = _closure1_slot2;
                    verify = 9;
                    verify = romeo[verify];
                    verify = offset.bind(mike)(verify);
                    offset = verify.Text;
                    verify = {};
                    romeo = {};
                    foxtrot = 4;
                    romeo['marginLeft'] = foxtrot;
                    verify['style'] = romeo;
                    romeo = 'text-sm/semibold';
                    verify['variant'] = romeo;
                    backup = entity.resolvedUnreadSetting;
                    romeo = _closure1_slot4;
                    foxtrot = romeo.ONLY_MENTIONS;
                    romeo = undefined;
                    if(!(backup === foxtrot)) { _fun00004_ip = 277; continue _fun00003 }
 271:
                    romeo = 'text-muted';
 277:
                    verify['color'] = romeo;
                    romeo = entity.name;
                    verify['children'] = romeo;
                    verify = yankee.bind(mike)(offset, verify);
                    options[2] = verify;
                    oscar['children'] = options;
                    options = report.bind(mike)(tango, oscar);
                    oscar = new Array(2);
                    oscar[0] = options;
                    verify = _closure1_slot5;
                    options = _closure1_slot1;
                    offset = _closure1_slot2;
                    golf = 10;
                    golf = offset[golf];
                    options = options.bind(mike)(golf);
                    golf = {};
                    yankee = entity.badged;
                    offset = 0;
                    if(!yankee) { _fun00004_ip = 358; continue _fun00003 }
 355:
                    offset = 1;
 358:
                    golf['value'] = offset;
                    golf = verify.bind(mike)(options, golf);
                    oscar[1] = golf;
                    zulu['children'] = oscar;
                    entity = entity.name;
                    entity = report.bind(mike)(tango, zulu, entity);
                    return entity;
                }
            };
            report = oscar.bind(golf)(report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();