// app/modules/notifications/settings/native/NotificationSettingsMockChannels.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.UnreadSetting;
    var _closure1_slot4 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'backgroundColor': null, 'overflow': 'hidden', 'borderRadius': 10, 'paddingVertical': 8};
    offset = 5;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_SURFACE_RAISED;
    verify['backgroundColor'] = offset;
    tangon['card'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'paddingVertical': 4, 'justifyContent': 'space-between', 'paddingRight': 12};
    tangon['channel'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['channelName'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/notifications/settings/native/NotificationSettingsMockChannels.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: NotificationSettingsMockChannels
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot7;
            tangon = undefined;
            oscard = michal.bind(tangon)();
            var _closure2_slot0 = oscard;
            zuuluu = {'badged': true, 'unread': true};
            michal = _closure1_slot4;
            golfie = michal.ALL_MESSAGES;
            zuuluu['resolvedUnreadSetting'] = golfie;
            yankee = _closure1_slot0;
            romeon = _closure1_slot2;
            option = 6;
            golfie = romeon[option];
            golfie = yankee.bind(tangon)(golfie);
            offset = golfie.intl;
            verify = offset.string;
            golfie = romeon[option];
            golfie = yankee.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.EjLobG;
            golfie = verify.bind(offset)(golfie);
            zuuluu['name'] = golfie;
            golfie = new Array(3);
            golfie[0] = zuuluu;
            zuuluu = {'badged': false, 'unread': true};
            verify = michal.ONLY_MENTIONS;
            zuuluu['resolvedUnreadSetting'] = verify;
            verify = romeon[option];
            verify = yankee.bind(tangon)(verify);
            foxtra = verify.intl;
            offset = foxtra.string;
            verify = romeon[option];
            verify = yankee.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.Wgpwpq;
            verify = offset.bind(foxtra)(verify);
            zuuluu['name'] = verify;
            golfie[1] = zuuluu;
            zuuluu = {'badged': false, 'unread': false};
            verify = michal.ONLY_MENTIONS;
            zuuluu['resolvedUnreadSetting'] = verify;
            verify = romeon[option];
            verify = yankee.bind(tangon)(verify);
            offset = verify.intl;
            verify = offset.string;
            option = romeon[option];
            option = yankee.bind(tangon)(option);
            option = option.t;
            option = option.g9VImp;
            option = verify.bind(offset)(option);
            zuuluu['name'] = option;
            golfie[2] = zuuluu;
            zuuluu = argFoo;
            zuuluu = zuuluu.unreadSetting;
            michal = michal.ALL_MESSAGES;
            if(!(zuuluu === michal)) { _fun00002_ip = 317; continue _fun00001 }
 294:
            michal = 1;
            zuuluu = golfie[michal];
            michal = _closure1_slot4;
            michal = michal.ALL_MESSAGES;
            zuuluu['resolvedUnreadSetting'] = michal;
 317:
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            oscard = oscard.card;
            entity['style'] = oscard;
            oscard = golfie.map;
            report = function(argFoo) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = argFoo;
                    report = _closure1_slot6;
                    tangon = _closure1_slot3;
                    zuuluu = {};
                    michal = _closure2_slot0;
                    oscard = michal.channel;
                    zuuluu['style'] = oscard;
                    oscard = {};
                    michal = michal.channelName;
                    oscard['style'] = michal;
                    yankee = _closure1_slot5;
                    verify = _closure1_slot1;
                    romeon = _closure1_slot2;
                    michal = 7;
                    option = romeon[michal];
                    michal = undefined;
                    verify = verify.bind(michal)(option);
                    option = {};
                    offset = entity.unread;
                    option['unread'] = offset;
                    offset = entity.resolvedUnreadSetting;
                    option['resolvedUnreadSetting'] = offset;
                    verify = yankee.bind(michal)(verify, option);
                    option = new Array(3);
                    option[0] = verify;
                    offset = _closure1_slot0;
                    verify = 8;
                    verify = romeon[verify];
                    verify = offset.bind(michal)(verify);
                    offset = verify.TextIcon;
                    verify = {};
                    romeon = {};
                    foxtra = 12;
                    romeon['marginLeft'] = foxtra;
                    verify['style'] = romeon;
                    romeon = 'xs';
                    verify['size'] = romeon;
                    backup = entity.resolvedUnreadSetting;
                    romeon = _closure1_slot4;
                    foxtra = romeon.ONLY_MENTIONS;
                    romeon = undefined;
                    if(!(backup === foxtra)) { _fun00004_ip = 182; continue _fun00003 }
 176:
                    romeon = 'text-muted';
 182:
                    verify['color'] = romeon;
                    verify = yankee.bind(michal)(offset, verify);
                    option[1] = verify;
                    yankee = _closure1_slot5;
                    offset = _closure1_slot0;
                    romeon = _closure1_slot2;
                    verify = 9;
                    verify = romeon[verify];
                    verify = offset.bind(michal)(verify);
                    offset = verify.Text;
                    verify = {};
                    romeon = {};
                    foxtra = 4;
                    romeon['marginLeft'] = foxtra;
                    verify['style'] = romeon;
                    romeon = 'text-sm/semibold';
                    verify['variant'] = romeon;
                    backup = entity.resolvedUnreadSetting;
                    romeon = _closure1_slot4;
                    foxtra = romeon.ONLY_MENTIONS;
                    romeon = undefined;
                    if(!(backup === foxtra)) { _fun00004_ip = 277; continue _fun00003 }
 271:
                    romeon = 'text-muted';
 277:
                    verify['color'] = romeon;
                    romeon = entity.name;
                    verify['children'] = romeon;
                    verify = yankee.bind(michal)(offset, verify);
                    option[2] = verify;
                    oscard['children'] = option;
                    option = report.bind(michal)(tangon, oscard);
                    oscard = new Array(2);
                    oscard[0] = option;
                    verify = _closure1_slot5;
                    option = _closure1_slot1;
                    offset = _closure1_slot2;
                    golfie = 10;
                    golfie = offset[golfie];
                    option = option.bind(michal)(golfie);
                    golfie = {};
                    yankee = entity.badged;
                    offset = 0;
                    if(!yankee) { _fun00004_ip = 358; continue _fun00003 }
 355:
                    offset = 1;
 358:
                    golfie['value'] = offset;
                    golfie = verify.bind(michal)(option, golfie);
                    oscard[1] = golfie;
                    zuuluu['children'] = oscard;
                    entity = entity.name;
                    entity = report.bind(michal)(tangon, zuuluu, entity);
                    return entity;
                }
            };
            report = oscard.bind(golfie)(report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();