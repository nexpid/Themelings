// app/modules/notifications/settings/native/NotificationSettingsMessageUnread.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: NotificationSettingsMessageUnread
        _fun86896: for(var _fun86896_ip = 0; ; ) switch(_fun86896_ip) {
 0:
            result = argFoo;
            var _closure2_slot0 = result;
            mike = _closure1_slot6;
            tango = undefined;
            update = mike.bind(tango)();
            kilo = _closure1_slot0;
            backup = _closure1_slot2;
            mike = 5;
            mike = backup[mike];
            zulu = kilo.bind(tango)(mike);
            mike = zulu.getUnreadSelectOptions;
            zulu = mike.bind(zulu)();
            mike = zulu.find;
            entity = function(argFoo) {
                entity = argFoo;
                mike = entity.value;
                entity = _closure2_slot0;
                entity = entity.setting;
                entity = mike === entity;
                return entity;
            };
            sequence = mike.bind(zulu)(entity);
            zulu = _closure1_slot5;
            mike = _closure1_slot3;
            entity = {};
            report = result.style;
            entity['style'] = report;
            golf = _closure1_slot5;
            oscar = _closure1_slot3;
            report = {};
            options = update.header;
            report['style'] = options;
            offset = _closure1_slot4;
            sizing = 6;
            options = backup[sizing];
            options = kilo.bind(tango)(options);
            verify = options.Text;
            options = {'variant': 'text-sm/semibold', 'color': 'header-secondary'};
            yankee = update.headerTitle;
            options['style'] = yankee;
            vacuum = 7;
            yankee = backup[vacuum];
            yankee = kilo.bind(tango)(yankee);
            foxtrot = yankee.intl;
            romeo = foxtrot.string;
            yankee = backup[vacuum];
            yankee = kilo.bind(tango)(yankee);
            yankee = yankee.t;
            yankee = yankee.Tqd1AQ;
            yankee = romeo.bind(foxtrot)(yankee);
            options['children'] = yankee;
            verify = offset.bind(tango)(verify, options);
            options = new Array(2);
            options[0] = verify;
            yankee = _closure1_slot4;
            verify = backup[sizing];
            verify = kilo.bind(tango)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-xs/semibold', 'color': 'header-secondary'};
            romeo = backup[vacuum];
            romeo = kilo.bind(tango)(romeo);
            echo = romeo.intl;
            foxtrot = echo.string;
            romeo = backup[vacuum];
            romeo = kilo.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.RpQgm5;
            romeo = foxtrot.bind(echo)(romeo);
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[1] = verify;
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot4;
            foxtrot = 8;
            oscar = backup[foxtrot];
            oscar = kilo.bind(tango)(oscar);
            golf = oscar.PressableOpacity;
            oscar = {};
            verify = result.onCustomize;
            oscar['onPress'] = verify;
            verify = 0.6;
            oscar['activeOpacity'] = verify;
            yankee = _closure1_slot5;
            offset = _closure1_slot3;
            verify = {};
            romeo = update.card;
            verify['style'] = romeo;
            source = _closure1_slot4;
            echo = _closure1_slot1;
            romeo = 9;
            romeo = backup[romeo];
            echo = echo.bind(tango)(romeo);
            romeo = {};
            control = result.setting;
            romeo['unreadSetting'] = control;
            echo = source.bind(tango)(echo, romeo);
            romeo = new Array(3);
            romeo[0] = echo;
            echo = _closure1_slot4;
            backup = backup[sizing];
            backup = kilo.bind(tango)(backup);
            kilo = backup.Text;
            backup = {};
            source = 'text-sm/medium';
            backup['variant'] = source;
            source = update.label;
            backup['style'] = source;
            source = null;
            config = source == sequence;
            control = undefined;
            if(config) { _fun86896_ip = 494; continue _fun86896 }
 489:
            control = sequence.label;
 494:
            sequence = source != control;
            source = 'unset';
            if(!sequence) { _fun86896_ip = 508; continue _fun86896 }
 505:
            source = control;
 508:
            backup['children'] = source;
            backup = echo.bind(tango)(kilo, backup);
            romeo[1] = backup;
            kilo = _closure1_slot4;
            control = _closure1_slot0;
            echo = _closure1_slot2;
            foxtrot = echo[foxtrot];
            foxtrot = control.bind(tango)(foxtrot);
            backup = foxtrot.PressableOpacity;
            foxtrot = {};
            result = result.onCustomize;
            foxtrot['onPress'] = result;
            result = _closure1_slot5;
            sizing = echo[sizing];
            sizing = control.bind(tango)(sizing);
            output = sizing.Text;
            sizing = {'variant': 'text-sm/semibold', 'style': null, 'color': 'text-brand'};
            update = update.cta;
            sizing['style'] = update;
            update = echo[vacuum];
            update = control.bind(tango)(update);
            source = update.intl;
            update = source.string;
            echo = echo[vacuum];
            echo = control.bind(tango)(echo);
            echo = echo.t;
            echo = echo.yxiV9f;
            update = update.bind(source)(echo);
            echo = new Array(2);
            echo[0] = update;
            update = ' ';
            echo[1] = update;
            sizing['children'] = echo;
            sizing = result.bind(tango)(output, sizing);
            foxtrot['children'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[2] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot7 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'backgroundColor': null, 'borderColor': null, 'borderRadius': 20, 'borderWidth': 1, 'padding': 14};
    offset = 4;
    yankee = oscar[offset];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_TERTIARY;
    verify['backgroundColor'] = yankee;
    yankee = oscar[offset];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_MOD_SUBTLE;
    verify['borderColor'] = yankee;
    tango['card'] = verify;
    yankee = 8;
    verify = {'flex': 1, 'marginTop': 8, 'alignItems': 'center'};
    tango['information'] = verify;
    verify = {'marginTop': 4, 'textAlign': 'center'};
    tango['cta'] = verify;
    verify = {'marginTop': 8, 'textAlign': 'center'};
    tango['label'] = verify;
    verify = {};
    verify['marginBottom'] = yankee;
    tango['header'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tango['headerTitle'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 16;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/notifications/settings/native/NotificationSettingsMessageUnread.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo) { // Original name: NotificationSettingsGuildMessageUnread
        oscar = argFoo;
        var _closure2_slot0 = oscar;
        tango = _closure1_slot4;
        zulu = _closure1_slot7;
        mike = {};
        golf = oscar.style;
        mike['style'] = golf;
        options = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 10;
        golf = golf[entity];
        entity = undefined;
        options = options.bind(entity)(golf);
        golf = options.useGuildPresetSettings;
        oscar = oscar.guildId;
        oscar = golf.bind(options)(oscar);
        oscar = oscar.unread;
        mike['setting'] = oscar;
        report = function() { // Original name: onCustomize
            report = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 11;
            tango = mike[entity];
            entity = undefined;
            oscar = report.bind(entity)(tango);
            report = oscar.openLazy;
            tango = _closure1_slot0;
            zulu = 13;
            zulu = mike[zulu];
            tango = tango.bind(entity)(zulu);
            zulu = 12;
            zulu = mike[zulu];
            mike = mike.paths;
            tango = tango.bind(entity)(zulu, mike);
            zulu = {};
            mike = _closure2_slot0;
            mike = mike.guildId;
            zulu['guildId'] = mike;
            mike = 'MessageUnreadActionSheet';
            mike = report.bind(oscar)(tango, mike, zulu);
            return entity;
        };
        mike['onCustomize'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    zulu['NotificationSettingsGuildMessageUnread'] = tango;
    mike = function(argFoo) { // Original name: NotificationSettingsChannelMessageUnread
        oscar = argFoo;
        var _closure2_slot0 = oscar;
        tango = _closure1_slot4;
        zulu = _closure1_slot7;
        mike = {};
        golf = oscar.style;
        mike['style'] = golf;
        options = _closure1_slot0;
        golf = _closure1_slot2;
        entity = 14;
        golf = golf[entity];
        entity = undefined;
        options = options.bind(entity)(golf);
        golf = options.useChannelPresetSettings;
        oscar = oscar.channel;
        oscar = golf.bind(options)(oscar);
        oscar = oscar.unread;
        mike['setting'] = oscar;
        report = function() { // Original name: onCustomize
            report = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 11;
            tango = mike[entity];
            entity = undefined;
            oscar = report.bind(entity)(tango);
            report = oscar.openLazy;
            tango = _closure1_slot0;
            zulu = 13;
            zulu = mike[zulu];
            tango = tango.bind(entity)(zulu);
            zulu = 15;
            zulu = mike[zulu];
            mike = mike.paths;
            tango = tango.bind(entity)(zulu, mike);
            zulu = {};
            mike = _closure2_slot0;
            mike = mike.channel;
            zulu['channel'] = mike;
            mike = 'MessageUnreadActionSheet';
            mike = report.bind(oscar)(tango, mike, zulu);
            return entity;
        };
        mike['onCustomize'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    zulu['NotificationSettingsChannelMessageUnread'] = mike;
    return entity;
})();