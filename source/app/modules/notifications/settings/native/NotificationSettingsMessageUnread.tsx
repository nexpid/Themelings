// app/modules/notifications/settings/native/NotificationSettingsMessageUnread.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: NotificationSettingsMessageUnread
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            result = argFoo;
            var _closure2_slot0 = result;
            michal = _closure1_slot6;
            tangon = undefined;
            update = michal.bind(tangon)();
            kiloes = _closure1_slot0;
            backup = _closure1_slot2;
            michal = 5;
            michal = backup[michal];
            zuuluu = kiloes.bind(tangon)(michal);
            michal = zuuluu.getUnreadSelectOptions;
            zuuluu = michal.bind(zuuluu)();
            michal = zuuluu.find;
            entity = function(argFoo) {
                entity = argFoo;
                michal = entity.value;
                entity = _closure2_slot0;
                entity = entity.setting;
                entity = michal === entity;
                return entity;
            };
            sequen = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = result.style;
            entity['style'] = report;
            golfie = _closure1_slot5;
            oscard = _closure1_slot3;
            report = {};
            option = update.header;
            report['style'] = option;
            offset = _closure1_slot4;
            sizing = 6;
            option = backup[sizing];
            option = kiloes.bind(tangon)(option);
            verify = option.Text;
            option = {'variant': 'text-sm/semibold', 'color': 'header-secondary'};
            yankee = update.headerTitle;
            option['style'] = yankee;
            vacuum = 7;
            yankee = backup[vacuum];
            yankee = kiloes.bind(tangon)(yankee);
            foxtra = yankee.intl;
            romeon = foxtra.string;
            yankee = backup[vacuum];
            yankee = kiloes.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.Tqd1AQ;
            yankee = romeon.bind(foxtra)(yankee);
            option['children'] = yankee;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            yankee = _closure1_slot4;
            verify = backup[sizing];
            verify = kiloes.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-xs/semibold', 'color': 'header-secondary'};
            romeon = backup[vacuum];
            romeon = kiloes.bind(tangon)(romeon);
            echoed = romeon.intl;
            foxtra = echoed.string;
            romeon = backup[vacuum];
            romeon = kiloes.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.RpQgm5;
            romeon = foxtra.bind(echoed)(romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot4;
            foxtra = 8;
            oscard = backup[foxtra];
            oscard = kiloes.bind(tangon)(oscard);
            golfie = oscard.PressableOpacity;
            oscard = {};
            verify = result.onCustomize;
            oscard['onPress'] = verify;
            verify = 0.6;
            oscard['activeOpacity'] = verify;
            yankee = _closure1_slot5;
            offset = _closure1_slot3;
            verify = {};
            romeon = update.card;
            verify['style'] = romeon;
            source = _closure1_slot4;
            echoed = _closure1_slot1;
            romeon = 9;
            romeon = backup[romeon];
            echoed = echoed.bind(tangon)(romeon);
            romeon = {};
            ctrled = result.setting;
            romeon['unreadSetting'] = ctrled;
            echoed = source.bind(tangon)(echoed, romeon);
            romeon = new Array(3);
            romeon[0] = echoed;
            echoed = _closure1_slot4;
            backup = backup[sizing];
            backup = kiloes.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {};
            source = 'text-sm/medium';
            backup['variant'] = source;
            source = update.label;
            backup['style'] = source;
            source = null;
            config = source == sequen;
            ctrled = undefined;
            if(config) { _fun00002_ip = 492; continue _fun00001 }
 487:
            ctrled = sequen.label;
 492:
            sequen = source != ctrled;
            source = 'unset';
            if(!sequen) { _fun00002_ip = 506; continue _fun00001 }
 503:
            source = ctrled;
 506:
            backup['children'] = source;
            backup = echoed.bind(tangon)(kiloes, backup);
            romeon[1] = backup;
            kiloes = _closure1_slot4;
            ctrled = _closure1_slot0;
            echoed = _closure1_slot2;
            foxtra = echoed[foxtra];
            foxtra = ctrled.bind(tangon)(foxtra);
            backup = foxtra.PressableOpacity;
            foxtra = {};
            result = result.onCustomize;
            foxtra['onPress'] = result;
            result = _closure1_slot5;
            sizing = echoed[sizing];
            sizing = ctrled.bind(tangon)(sizing);
            output = sizing.Text;
            sizing = {'variant': 'text-sm/semibold', 'style': null, 'color': 'text-brand'};
            update = update.cta;
            sizing['style'] = update;
            update = echoed[vacuum];
            update = ctrled.bind(tangon)(update);
            source = update.intl;
            update = source.string;
            echoed = echoed[vacuum];
            echoed = ctrled.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.yxiV9f;
            update = update.bind(source)(echoed);
            echoed = new Array(2);
            echoed[0] = update;
            update = ' ';
            echoed[1] = update;
            sizing['children'] = echoed;
            sizing = result.bind(tangon)(output, sizing);
            foxtra['children'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[2] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot7 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'backgroundColor': null, 'borderColor': null, 'borderRadius': 20, 'borderWidth': 1, 'padding': 14};
    offset = 4;
    yankee = oscard[offset];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_TERTIARY;
    verify['backgroundColor'] = yankee;
    yankee = oscard[offset];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_MOD_SUBTLE;
    verify['borderColor'] = yankee;
    tangon['card'] = verify;
    yankee = 8;
    verify = {'flex': 1, 'marginTop': 8, 'alignItems': 'center'};
    tangon['information'] = verify;
    verify = {'marginTop': 4, 'textAlign': 'center'};
    tangon['cta'] = verify;
    verify = {'marginTop': 8, 'textAlign': 'center'};
    tangon['label'] = verify;
    verify = {};
    verify['marginBottom'] = yankee;
    tangon['header'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['headerTitle'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 16;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/notifications/settings/native/NotificationSettingsMessageUnread.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: NotificationSettingsGuildMessageUnread
        oscard = argFoo;
        var _closure2_slot0 = oscard;
        tangon = _closure1_slot4;
        zuuluu = _closure1_slot7;
        michal = {};
        golfie = oscard.style;
        michal['style'] = golfie;
        option = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 10;
        golfie = golfie[entity];
        entity = undefined;
        option = option.bind(entity)(golfie);
        golfie = option.useGuildPresetSettings;
        oscard = oscard.guildId;
        oscard = golfie.bind(option)(oscard);
        oscard = oscard.unread;
        michal['setting'] = oscard;
        report = function() { // Original name: onCustomize
            report = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 11;
            tangon = michal[entity];
            entity = undefined;
            oscard = report.bind(entity)(tangon);
            report = oscard.openLazy;
            tangon = _closure1_slot0;
            zuuluu = 13;
            zuuluu = michal[zuuluu];
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = 12;
            zuuluu = michal[zuuluu];
            michal = michal.paths;
            tangon = tangon.bind(entity)(zuuluu, michal);
            zuuluu = {};
            michal = _closure2_slot0;
            michal = michal.guildId;
            zuuluu['guildId'] = michal;
            michal = 'MessageUnreadActionSheet';
            michal = report.bind(oscard)(tangon, michal, zuuluu);
            return entity;
        };
        michal['onCustomize'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    zuuluu['NotificationSettingsGuildMessageUnread'] = tangon;
    michal = function(argFoo) { // Original name: NotificationSettingsChannelMessageUnread
        oscard = argFoo;
        var _closure2_slot0 = oscard;
        tangon = _closure1_slot4;
        zuuluu = _closure1_slot7;
        michal = {};
        golfie = oscard.style;
        michal['style'] = golfie;
        option = _closure1_slot0;
        golfie = _closure1_slot2;
        entity = 14;
        golfie = golfie[entity];
        entity = undefined;
        option = option.bind(entity)(golfie);
        golfie = option.useChannelPresetSettings;
        oscard = oscard.channel;
        oscard = golfie.bind(option)(oscard);
        oscard = oscard.unread;
        michal['setting'] = oscard;
        report = function() { // Original name: onCustomize
            report = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 11;
            tangon = michal[entity];
            entity = undefined;
            oscard = report.bind(entity)(tangon);
            report = oscard.openLazy;
            tangon = _closure1_slot0;
            zuuluu = 13;
            zuuluu = michal[zuuluu];
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = 15;
            zuuluu = michal[zuuluu];
            michal = michal.paths;
            tangon = tangon.bind(entity)(zuuluu, michal);
            zuuluu = {};
            michal = _closure2_slot0;
            michal = michal.channel;
            zuuluu['channel'] = michal;
            michal = 'MessageUnreadActionSheet';
            michal = report.bind(oscard)(tangon, michal, zuuluu);
            return entity;
        };
        michal['onCustomize'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    zuuluu['NotificationSettingsChannelMessageUnread'] = michal;
    return entity;
})();