// app/modules/notifications/settings/native/NotificationSettingsMockMessage.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.UserNotificationSettings;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'backgroundColor': null, 'overflow': 'hidden', 'borderRadius': 10, 'padding': 16};
    offset = 6;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BG_SURFACE_RAISED;
    verify['backgroundColor'] = romeo;
    tango['card'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row'};
    tango['cardContent'] = verify;
    verify = {'marginLeft': 12, 'maxWidth': 240};
    tango['cardMessage'] = verify;
    verify = {'position': 'absolute', 'top': 0, 'left': 0, 'right': 0, 'bottom': 0};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_BASE_TERTIARY;
    verify['backgroundColor'] = offset;
    tango['overlay'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = {};
    golf = 'function NotificationSettingsMockMessageTsx1(){const{withTiming,opacity,timingStandard}=this.__closure;return{opacity:withTiming(opacity.get(),timingStandard)};}';
    tango['code'] = golf;
    var _closure1_slot10 = tango;
    tango = 17;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/notifications/settings/native/NotificationSettingsMockMessage.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: NotificationSettingsMockMessage
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            zulu = _closure1_slot9;
            tango = undefined;
            offset = zulu.bind(tango)();
            report = _closure1_slot0;
            golf = _closure1_slot2;
            zulu = 7;
            zulu = golf[zulu];
            options = report.bind(tango)(zulu);
            oscar = options.useStateFromStores;
            zulu = _closure1_slot5;
            report = new Array(1);
            report[0] = zulu;
            zulu = function() {
                mike = _closure1_slot5;
                entity = mike.getCurrentUser;
                entity = entity.bind(mike)();
                return entity;
            };
            oscar = oscar.bind(options)(report, zulu);
            report = _closure1_slot1;
            zulu = 8;
            zulu = golf[zulu];
            report = report.bind(tango)(zulu);
            zulu = report.getName;
            zulu = zulu.bind(report)(oscar);
            report = null;
            report = report != zulu;
            result = 'Roka';
            if(!report) { _fun00002_ip = 113; continue _fun00001 }
 110:
            result = zulu;
 113:
            report = mike.notificationSetting;
            zulu = _closure1_slot6;
            zulu = zulu.NO_MESSAGES;
            oscar = report === zulu;
            var _closure2_slot0 = oscar;
            report = _closure1_slot0;
            zulu = _closure1_slot2;
            verify = 9;
            zulu = zulu[verify];
            golf = report.bind(tango)(zulu);
            report = golf.useSharedValue;
            zulu = 0;
            if(!oscar) { _fun00002_ip = 177; continue _fun00001 }
 167:
            zulu = 0.8;
 177:
            golf = report.bind(golf)(zulu);
            var _closure2_slot1 = golf;
            foxtrot = _closure1_slot0;
            backup = _closure1_slot2;
            zulu = backup[verify];
            options = foxtrot.bind(tango)(zulu);
            report = options.useAnimatedStyle;
            zulu = function() { // Original name: f
                entity = {};
                golf = _closure1_slot0;
                options = _closure1_slot2;
                mike = 10;
                mike = options[mike];
                oscar = undefined;
                report = golf.bind(oscar)(mike);
                tango = report.withTiming;
                zulu = _closure2_slot1;
                mike = zulu.get;
                zulu = mike.bind(zulu)();
                mike = 11;
                mike = options[mike];
                mike = golf.bind(oscar)(mike);
                mike = mike.timingStandard;
                mike = tango.bind(report)(zulu, mike);
                entity['opacity'] = mike;
                return entity;
            };
            yankee = {};
            romeo = 10;
            romeo = backup[romeo];
            romeo = foxtrot.bind(tango)(romeo);
            romeo = romeo.withTiming;
            yankee['withTiming'] = romeo;
            yankee['opacity'] = golf;
            romeo = 11;
            romeo = backup[romeo];
            romeo = foxtrot.bind(tango)(romeo);
            romeo = romeo.timingStandard;
            yankee['timingStandard'] = romeo;
            zulu['__closure'] = yankee;
            yankee = 6531430956793.0;
            zulu['__workletHash'] = yankee;
            yankee = _closure1_slot10;
            zulu['__initData'] = yankee;
            yankee = report.bind(options)(zulu);
            zulu = mike.notificationSetting;
            mike = _closure1_slot6;
            mike = mike.ALL_MESSAGES;
            if(!(zulu !== mike)) { _fun00002_ip = 520; continue _fun00001 }
 326:
            report = _closure1_slot7;
            zulu = _closure1_slot4;
            mike = {};
            foxtrot = _closure1_slot8;
            echo = _closure1_slot0;
            update = _closure1_slot2;
            backup = 12;
            options = update[backup];
            options = echo.bind(tango)(options);
            romeo = options.Text;
            options = {'variant': 'text-sm/medium', 'color': 'header-secondary'};
            backup = update[backup];
            backup = echo.bind(tango)(backup);
            kilo = backup.Text;
            backup = {'variant': 'text-sm/normal', 'color': 'text-link'};
            output = ['@'];
            output[1] = result;
            result = ' ';
            output[2] = result;
            backup['children'] = output;
            kilo = foxtrot.bind(tango)(kilo, backup);
            backup = new Array(2);
            backup[0] = kilo;
            kilo = 13;
            output = update[kilo];
            output = echo.bind(tango)(output);
            result = output.intl;
            output = result.string;
            kilo = update[kilo];
            kilo = echo.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.WYyzIy;
            kilo = output.bind(result)(kilo);
            backup[1] = kilo;
            options['children'] = backup;
            options = foxtrot.bind(tango)(romeo, options);
            mike['children'] = options;
            kilo = report.bind(tango)(zulu, mike);
            _fun00002_ip = 620; continue _fun00001;
 520:
            report = _closure1_slot7;
            backup = _closure1_slot0;
            output = _closure1_slot2;
            mike = 12;
            mike = output[mike];
            mike = backup.bind(tango)(mike);
            zulu = mike.Text;
            mike = {'variant': 'text-sm/medium', 'color': 'header-secondary'};
            options = 13;
            romeo = output[options];
            romeo = backup.bind(tango)(romeo);
            foxtrot = romeo.intl;
            romeo = foxtrot.string;
            options = output[options];
            options = backup.bind(tango)(options);
            options = options.t;
            options = options.WYyzIy;
            options = romeo.bind(foxtrot)(options);
            mike['children'] = options;
            kilo = report.bind(tango)(zulu, mike);
 620:
            report = _closure1_slot3;
            zulu = report.useEffect;
            mike = new Array(2);
            mike[0] = golf;
            mike[1] = oscar;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zulu = _closure2_slot1;
                    mike = zulu.set;
                    tango = _closure2_slot0;
                    entity = 0;
                    if(!tango) { _fun00004_ip = 31; continue _fun00003 }
 21:
                    entity = 0.8;
 31:
                    entity = mike.bind(zulu)(entity);
                    entity = undefined;
                    return entity;
                }
            };
            entity = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot8;
            mike = _closure1_slot4;
            entity = {};
            report = offset.card;
            entity['style'] = report;
            report = {};
            oscar = offset.cardContent;
            report['style'] = oscar;
            options = _closure1_slot7;
            romeo = {};
            golf = _closure1_slot1;
            oscar = _closure1_slot2;
            foxtrot = 14;
            foxtrot = oscar[foxtrot];
            backup = golf.bind(tango)(foxtrot);
            foxtrot = {};
            output = 15;
            output = oscar[output];
            output = golf.bind(tango)(output);
            foxtrot['source'] = output;
            update = _closure1_slot0;
            sizing = 16;
            sizing = oscar[sizing];
            sizing = update.bind(tango)(sizing);
            sizing = sizing.AvatarSizes;
            sizing = sizing.LARGE_48;
            foxtrot['size'] = sizing;
            foxtrot = options.bind(tango)(backup, foxtrot);
            romeo['children'] = foxtrot;
            foxtrot = options.bind(tango)(mike, romeo);
            romeo = new Array(2);
            romeo[0] = foxtrot;
            foxtrot = {};
            backup = offset.cardMessage;
            foxtrot['style'] = backup;
            backup = 12;
            backup = oscar[backup];
            backup = update.bind(tango)(backup);
            sizing = backup.Text;
            backup = {};
            output = 'text-sm/semibold';
            backup['variant'] = output;
            output = 13;
            result = oscar[output];
            result = update.bind(tango)(result);
            echo = result.intl;
            result = echo.string;
            output = oscar[output];
            output = update.bind(tango)(output);
            output = output.t;
            output = output.qSq0tL;
            output = result.bind(echo)(output);
            backup['children'] = output;
            sizing = options.bind(tango)(sizing, backup);
            backup = new Array(2);
            backup[0] = sizing;
            backup[1] = kilo;
            foxtrot['children'] = backup;
            foxtrot = zulu.bind(tango)(mike, foxtrot);
            romeo[1] = foxtrot;
            report['children'] = romeo;
            romeo = zulu.bind(tango)(mike, report);
            report = new Array(2);
            report[0] = romeo;
            oscar = oscar[verify];
            oscar = golf.bind(tango)(oscar);
            golf = oscar.View;
            oscar = {};
            verify = new Array(2);
            verify[0] = yankee;
            offset = offset.overlay;
            verify[1] = offset;
            oscar['style'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();