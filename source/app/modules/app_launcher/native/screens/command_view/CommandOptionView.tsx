// app/modules/app_launcher/native/screens/command_view/CommandOptionView.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    tango = global;
    verify = tango.Object;
    options = verify.defineProperty;
    golf = {};
    entity = true;
    golf['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, golf);
    entity = 0;
    options = oscar[entity];
    golf = argCorge;
    entity = undefined;
    golf = golf.bind(entity)(options);
    golf = 1;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    golf = golf.View;
    var _closure1_slot3 = golf;
    golf = 2;
    golf = oscar[golf];
    golf = romeo.bind(entity)(golf);
    var _closure1_slot4 = golf;
    golf = 3;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot5 = options;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot6 = golf;
    verify = tango.Set;
    golf = 4;
    tango = oscar[golf];
    tango = report.bind(entity)(tango);
    tango = tango.ApplicationCommandOptionType;
    options = tango.STRING;
    tango = new Array(9);
    tango[0] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.INTEGER;
    tango[1] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.ATTACHMENT;
    tango[2] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.BOOLEAN;
    tango[3] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.MENTIONABLE;
    tango[4] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.USER;
    tango[5] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.ROLE;
    tango[6] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.CHANNEL;
    tango[7] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.NUMBER;
    tango[8] = options;
    options = verify.prototype;
    options = Object.create(options, {constructor: {value: verify}});
    sizing = options;
    kilo = tango;
    tango = new sizing[verify](kilo, backup);
    tango = tango instanceof Object ? tango : options;
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    offset['marginTop'] = golf;
    tango['optionDescription'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center', 'marginTop': 4};
    tango['optionErrorContainer'] = offset;
    offset = {'marginRight': 4, 'tintColor': null, 'alignItems': 'center'};
    yankee = 6;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.STATUS_DANGER;
    offset['tintColor'] = yankee;
    tango['optionErrorIcon'] = offset;
    offset = {};
    yankee = 8;
    offset['marginBottom'] = yankee;
    tango['labelText'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot8 = tango;
    tango = oscar[golf];
    tango = report.bind(entity)(tango);
    tango = tango.ApplicationCommandOptionType;
    options = tango.STRING;
    tango = new Array(3);
    tango[0] = options;
    options = oscar[golf];
    options = report.bind(entity)(options);
    options = options.ApplicationCommandOptionType;
    options = options.INTEGER;
    tango[1] = options;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    golf = golf.ApplicationCommandOptionType;
    golf = golf.NUMBER;
    tango[2] = golf;
    var _closure1_slot9 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/app_launcher/native/screens/command_view/CommandOptionView.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: CommandOptionView
        _fun119105: for(var _fun119105_ip = 0; ; ) switch(_fun119105_ip) {
 0:
            entity = argFoo;
            kilo = entity.style;
            source = entity.option;
            var _closure2_slot0 = source;
            papa = entity.autoFocusType;
            lima = entity.onDismiss;
            zulu = entity.editedOptions;
            mike = entity.onOptionViewLayout;
            var _closure2_slot1 = mike;
            equality = entity.onStartEditing;
            whiskey = entity.onEndEditing;
            sierra = entity.onOptionValueChange;
            mike = entity.onPressOption;
            var _closure2_slot2 = mike;
            mike = entity.onPressAttachmentOption;
            var _closure2_slot3 = mike;
            target = entity.channel;
            control = entity.optionValidationResults;
            mike = entity.setFocusedOption;
            var _closure2_slot4 = mike;
            context = entity.command;
            config = entity.optionValues;
            entity = entity.isPreSelectedOption;
            mike = _closure1_slot8;
            tango = undefined;
            record = mike.bind(tango)();
            report = _closure1_slot0;
            oscar = _closure1_slot2;
            mike = 7;
            mike = oscar[mike];
            golf = report.bind(tango)(mike);
            oscar = golf.useStateFromStores;
            mike = _closure1_slot4;
            report = new Array(1);
            report[0] = mike;
            mike = function() {
                entity = _closure1_slot4;
                entity = entity.useReducedMotion;
                return entity;
            };
            report = oscar.bind(golf)(report, mike);
            oscar = _closure1_slot0;
            mike = _closure1_slot2;
            backup = 8;
            mike = mike[backup];
            mike = oscar.bind(tango)(mike);
            mike = mike.ReduceMotion;
            if(report) { _fun119105_ip = 225; continue _fun119105 }
 217:
            oscar = mike.Never;
            _fun119105_ip = 231; continue _fun119105;
 225:
            oscar = mike.Always;
 231:
            report = _closure1_slot0;
            mike = _closure1_slot2;
            yankee = 9;
            mike = mike[yankee];
            report = report.bind(tango)(mike);
            mike = report.useOptionEnteringAnimation;
            mike = mike.bind(report)();
            sizing = mike.EnteringAnimation;
            golf = mike.registerAnimationCompleteCallback;
            options = _closure1_slot7;
            report = options.has;
            mike = source.type;
            mike = report.bind(options)(mike);
            if(mike) { _fun119105_ip = 299; continue _fun119105 }
 295:
            mike = null;
            return mike;
 299:
            report = source.required;
            if(report) { _fun119105_ip = 311; continue _fun119105 }
 308:
            report = entity;
 311:
            if(!report) { _fun119105_ip = 321; continue _fun119105 }
 314:
            golf = function(argFoo) {
                mike = argFoo;
                entity = undefined;
                entity = mike.bind(entity)();
                return entity;
            };
 321:
            mike = _closure1_slot0;
            entity = _closure1_slot2;
            options = entity[backup];
            options = mike.bind(tango)(options);
            verify = options.FadeOut;
            options = verify.reduceMotion;
            output = options.bind(verify)(oscar);
            entity = entity[backup];
            entity = mike.bind(tango)(entity);
            options = entity.FadeInUp;
            mike = options.withInitialValues;
            entity = {};
            offset = {};
            verify = -10;
            offset['translateY'] = verify;
            verify = new Array(1);
            verify[0] = offset;
            entity['transform'] = verify;
            mike = mike.bind(options)(entity);
            entity = mike.reduceMotion;
            update = entity.bind(mike)(oscar);
            mike = zulu.has;
            entity = source.name;
            foxtrot = mike.bind(zulu)(entity);
            if(!foxtrot) { _fun119105_ip = 466; continue _fun119105 }
 437:
            entity = source.name;
            zulu = control[entity];
            mike = null;
            oscar = mike == zulu;
            entity = undefined;
            if(oscar) { _fun119105_ip = 462; continue _fun119105 }
 457:
            entity = zulu.error;
 462:
            foxtrot = mike != entity;
 466:
            zulu = _closure1_slot9;
            mike = zulu.includes;
            entity = source.type;
            romeo = mike.bind(zulu)(entity);
            zulu = _closure1_slot5;
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            entity = verify[backup];
            entity = offset.bind(tango)(entity);
            mike = entity.LayoutAnimationConfig;
            entity = {};
            entity['skipEntering'] = report;
            report = 10;
            report = verify[report];
            report = offset.bind(tango)(report);
            oscar = report.AwaitAnimationContext;
            report = {};
            report['handleQueuedCallback'] = golf;
            options = _closure1_slot1;
            golf = verify[backup];
            golf = options.bind(tango)(golf);
            options = golf.View;
            golf = {};
            sequence = false;
            golf['collapsable'] = sequence;
            golf['entering'] = sizing;
            sizing = verify[yankee];
            sizing = offset.bind(tango)(sizing);
            sizing = sizing.ExitingAnimation;
            golf['exiting'] = sizing;
            verify = verify[yankee];
            verify = offset.bind(tango)(verify);
            verify = verify.LayoutAnimation;
            golf['layout'] = verify;
            verify = function(argFoo) { // Original name: onLayout
                tango = _closure2_slot1;
                zulu = _closure2_slot0;
                entity = undefined;
                mike = argFoo;
                mike = tango.bind(entity)(mike, zulu);
                return entity;
            };
            golf['onLayout'] = verify;
            yankee = _closure1_slot6;
            offset = _closure1_slot3;
            verify = {};
            verify['collapsable'] = sequence;
            verify['style'] = kilo;
            kilo = romeo;
            if(!kilo) { _fun119105_ip = 723; continue _fun119105 }
 653:
            result = _closure1_slot5;
            sizing = _closure1_slot0;
            vacuum = _closure1_slot2;
            romeo = 11;
            romeo = vacuum[romeo];
            romeo = sizing.bind(tango)(romeo);
            sizing = romeo.Text;
            romeo = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            vacuum = record.labelText;
            romeo['style'] = vacuum;
            vacuum = source.displayName;
            romeo['children'] = vacuum;
            kilo = result.bind(tango)(sizing, romeo);
 723:
            romeo = new Array(4);
            romeo[0] = kilo;
            result = _closure1_slot5;
            vacuum = _closure1_slot1;
            kilo = _closure1_slot2;
            sizing = 12;
            sizing = kilo[sizing];
            vacuum = vacuum.bind(tango)(sizing);
            sizing = {};
            sizing['option'] = source;
            sizing['onStartEditing'] = equality;
            sizing['onEndEditing'] = whiskey;
            sizing['onDismiss'] = lima;
            sizing['onOptionValueChange'] = sierra;
            sierra = function() { // Original name: onFocus
                zulu = _closure2_slot4;
                mike = _closure2_slot0;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            sizing['onFocus'] = sierra;
            sierra = function() { // Original name: onPress
                zulu = _closure2_slot2;
                mike = _closure2_slot0;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            sizing['onPress'] = sierra;
            status = function() { // Original name: onPressAttachmentOption
                zulu = _closure2_slot3;
                mike = _closure2_slot0;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            sizing['onPressAttachmentOption'] = status;
            sizing['channel'] = target;
            sizing['autoFocusType'] = papa;
            sizing['command'] = context;
            sizing['optionValues'] = config;
            sizing['hasError'] = foxtrot;
            sizing = result.bind(tango)(vacuum, sizing);
            romeo[1] = sizing;
            sizing = _closure1_slot0;
            vacuum = 11;
            kilo = kilo[vacuum];
            kilo = sizing.bind(tango)(kilo);
            sizing = kilo.Text;
            kilo = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            config = record.optionDescription;
            kilo['style'] = config;
            config = source.displayDescription;
            kilo['children'] = config;
            kilo = result.bind(tango)(sizing, kilo);
            romeo[2] = kilo;
            if(!foxtrot) { _fun119105_ip = 1130; continue _fun119105 }
 924:
            sizing = _closure1_slot6;
            context = _closure1_slot1;
            result = _closure1_slot2;
            backup = result[backup];
            backup = context.bind(tango)(backup);
            kilo = backup.View;
            backup = {};
            backup['collapsable'] = sequence;
            backup['entering'] = update;
            backup['exiting'] = output;
            output = record.optionErrorContainer;
            backup['style'] = output;
            update = _closure1_slot5;
            config = 13;
            output = result[config];
            sequence = context.bind(tango)(output);
            output = {};
            record = record.optionErrorIcon;
            output['style'] = record;
            record = 14;
            record = result[record];
            record = context.bind(tango)(record);
            output['source'] = record;
            echo = _closure1_slot0;
            config = result[config];
            config = echo.bind(tango)(config);
            config = config.IconSizes;
            config = config.REFRESH_SMALL_16;
            output['size'] = config;
            sequence = update.bind(tango)(sequence, output);
            output = new Array(2);
            output[0] = sequence;
            result = result[vacuum];
            result = echo.bind(tango)(result);
            echo = result.Text;
            result = {'variant': 'text-xs/medium', 'color': 'text-danger'};
            source = source.name;
            source = control[source];
            source = source.error;
            result['children'] = source;
            result = update.bind(tango)(echo, result);
            output[1] = result;
            backup['children'] = output;
            foxtrot = sizing.bind(tango)(kilo, backup);
 1130:
            romeo[3] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            golf['children'] = verify;
            golf = zulu.bind(tango)(options, golf);
            report['children'] = golf;
            report = zulu.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();