// app/modules/app_launcher/native/screens/command_view/CommandOptionView.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    tangon = global;
    verify = tangon.Object;
    option = verify.defineProperty;
    golfie = {};
    entity = true;
    golfie['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, golfie);
    entity = 0;
    option = oscard[entity];
    golfie = argCor;
    entity = undefined;
    golfie = golfie.bind(entity)(option);
    golfie = 1;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.View;
    var _closure1_slot3 = golfie;
    golfie = 2;
    golfie = oscard[golfie];
    golfie = romeon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    golfie = 3;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot5 = option;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot6 = golfie;
    verify = tangon.Set;
    golfie = 4;
    tangon = oscard[golfie];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ApplicationCommandOptionType;
    option = tangon.STRING;
    tangon = new Array(9);
    tangon[0] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.INTEGER;
    tangon[1] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.ATTACHMENT;
    tangon[2] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.BOOLEAN;
    tangon[3] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.MENTIONABLE;
    tangon[4] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.USER;
    tangon[5] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.ROLE;
    tangon[6] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.CHANNEL;
    tangon[7] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.NUMBER;
    tangon[8] = option;
    option = verify.prototype;
    option = Object.create(option, {constructor: {value: verify}});
    sizing = option;
    kiloes = tangon;
    tangon = new sizing[verify](kiloes, backup);
    tangon = tangon instanceof Object ? tangon : option;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['marginTop'] = golfie;
    tangon['optionDescription'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center', 'marginTop': 4};
    tangon['optionErrorContainer'] = offset;
    offset = {'marginRight': 4, 'tintColor': null, 'alignItems': 'center'};
    yankee = 6;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.STATUS_DANGER;
    offset['tintColor'] = yankee;
    tangon['optionErrorIcon'] = offset;
    offset = {};
    yankee = 8;
    offset['marginBottom'] = yankee;
    tangon['labelText'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot8 = tangon;
    tangon = oscard[golfie];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ApplicationCommandOptionType;
    option = tangon.STRING;
    tangon = new Array(3);
    tangon[0] = option;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    option = option.ApplicationCommandOptionType;
    option = option.INTEGER;
    tangon[1] = option;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.ApplicationCommandOptionType;
    golfie = golfie.NUMBER;
    tangon[2] = golfie;
    var _closure1_slot9 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/app_launcher/native/screens/command_view/CommandOptionView.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: CommandOptionView
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            kiloes = entity.style;
            source = entity.option;
            var _closure2_slot0 = source;
            papara = entity.autoFocusType;
            limora = entity.onDismiss;
            zuuluu = entity.editedOptions;
            michal = entity.onOptionViewLayout;
            var _closure2_slot1 = michal;
            equals = entity.onStartEditing;
            whisks = entity.onEndEditing;
            sierra = entity.onOptionValueChange;
            michal = entity.onPressOption;
            var _closure2_slot2 = michal;
            michal = entity.onPressAttachmentOption;
            var _closure2_slot3 = michal;
            target = entity.channel;
            ctrled = entity.optionValidationResults;
            michal = entity.setFocusedOption;
            var _closure2_slot4 = michal;
            cntext = entity.command;
            config = entity.optionValues;
            entity = entity.isPreSelectedOption;
            michal = _closure1_slot8;
            tangon = undefined;
            record = michal.bind(tangon)();
            report = _closure1_slot0;
            oscard = _closure1_slot2;
            michal = 7;
            michal = oscard[michal];
            golfie = report.bind(tangon)(michal);
            oscard = golfie.useStateFromStores;
            michal = _closure1_slot4;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                entity = _closure1_slot4;
                entity = entity.useReducedMotion;
                return entity;
            };
            report = oscard.bind(golfie)(report, michal);
            oscard = _closure1_slot0;
            michal = _closure1_slot2;
            backup = 8;
            michal = michal[backup];
            michal = oscard.bind(tangon)(michal);
            michal = michal.ReduceMotion;
            if(report) { _fun00002_ip = 225; continue _fun00001 }
 217:
            oscard = michal.Never;
            _fun00002_ip = 231; continue _fun00001;
 225:
            oscard = michal.Always;
 231:
            report = _closure1_slot0;
            michal = _closure1_slot2;
            yankee = 9;
            michal = michal[yankee];
            report = report.bind(tangon)(michal);
            michal = report.useOptionEnteringAnimation;
            michal = michal.bind(report)();
            sizing = michal.EnteringAnimation;
            golfie = michal.registerAnimationCompleteCallback;
            option = _closure1_slot7;
            report = option.has;
            michal = source.type;
            michal = report.bind(option)(michal);
            if(michal) { _fun00002_ip = 299; continue _fun00001 }
 295:
            michal = null;
            return michal;
 299:
            report = source.required;
            if(report) { _fun00002_ip = 311; continue _fun00001 }
 308:
            report = entity;
 311:
            if(!report) { _fun00002_ip = 321; continue _fun00001 }
 314:
            golfie = function(argFoo) {
                michal = argFoo;
                entity = undefined;
                entity = michal.bind(entity)();
                return entity;
            };
 321:
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            option = entity[backup];
            option = michal.bind(tangon)(option);
            verify = option.FadeOut;
            option = verify.reduceMotion;
            output = option.bind(verify)(oscard);
            entity = entity[backup];
            entity = michal.bind(tangon)(entity);
            option = entity.FadeInUp;
            michal = option.withInitialValues;
            entity = {};
            offset = {};
            verify = -10;
            offset['translateY'] = verify;
            verify = new Array(1);
            verify[0] = offset;
            entity['transform'] = verify;
            michal = michal.bind(option)(entity);
            entity = michal.reduceMotion;
            update = entity.bind(michal)(oscard);
            michal = zuuluu.has;
            entity = source.name;
            foxtra = michal.bind(zuuluu)(entity);
            if(!foxtra) { _fun00002_ip = 466; continue _fun00001 }
 437:
            entity = source.name;
            zuuluu = ctrled[entity];
            michal = null;
            oscard = michal == zuuluu;
            entity = undefined;
            if(oscard) { _fun00002_ip = 462; continue _fun00001 }
 457:
            entity = zuuluu.error;
 462:
            foxtra = michal != entity;
 466:
            zuuluu = _closure1_slot9;
            michal = zuuluu.includes;
            entity = source.type;
            romeon = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot5;
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            entity = verify[backup];
            entity = offset.bind(tangon)(entity);
            michal = entity.LayoutAnimationConfig;
            entity = {};
            entity['skipEntering'] = report;
            report = 10;
            report = verify[report];
            report = offset.bind(tangon)(report);
            oscard = report.AwaitAnimationContext;
            report = {};
            report['handleQueuedCallback'] = golfie;
            option = _closure1_slot1;
            golfie = verify[backup];
            golfie = option.bind(tangon)(golfie);
            option = golfie.View;
            golfie = {};
            sequen = false;
            golfie['collapsable'] = sequen;
            golfie['entering'] = sizing;
            sizing = verify[yankee];
            sizing = offset.bind(tangon)(sizing);
            sizing = sizing.ExitingAnimation;
            golfie['exiting'] = sizing;
            verify = verify[yankee];
            verify = offset.bind(tangon)(verify);
            verify = verify.LayoutAnimation;
            golfie['layout'] = verify;
            verify = function(argFoo) { // Original name: onLayout
                tangon = _closure2_slot1;
                zuuluu = _closure2_slot0;
                entity = undefined;
                michal = argFoo;
                michal = tangon.bind(entity)(michal, zuuluu);
                return entity;
            };
            golfie['onLayout'] = verify;
            yankee = _closure1_slot6;
            offset = _closure1_slot3;
            verify = {};
            verify['collapsable'] = sequen;
            verify['style'] = kiloes;
            kiloes = romeon;
            if(!kiloes) { _fun00002_ip = 723; continue _fun00001 }
 653:
            result = _closure1_slot5;
            sizing = _closure1_slot0;
            vacuum = _closure1_slot2;
            romeon = 11;
            romeon = vacuum[romeon];
            romeon = sizing.bind(tangon)(romeon);
            sizing = romeon.Text;
            romeon = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-secondary'};
            vacuum = record.labelText;
            romeon['style'] = vacuum;
            vacuum = source.displayName;
            romeon['children'] = vacuum;
            kiloes = result.bind(tangon)(sizing, romeon);
 723:
            romeon = new Array(4);
            romeon[0] = kiloes;
            result = _closure1_slot5;
            vacuum = _closure1_slot1;
            kiloes = _closure1_slot2;
            sizing = 12;
            sizing = kiloes[sizing];
            vacuum = vacuum.bind(tangon)(sizing);
            sizing = {};
            sizing['option'] = source;
            sizing['onStartEditing'] = equals;
            sizing['onEndEditing'] = whisks;
            sizing['onDismiss'] = limora;
            sizing['onOptionValueChange'] = sierra;
            sierra = function() { // Original name: onFocus
                zuuluu = _closure2_slot4;
                michal = _closure2_slot0;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            sizing['onFocus'] = sierra;
            sierra = function() { // Original name: onPress
                zuuluu = _closure2_slot2;
                michal = _closure2_slot0;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            sizing['onPress'] = sierra;
            status = function() { // Original name: onPressAttachmentOption
                zuuluu = _closure2_slot3;
                michal = _closure2_slot0;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            sizing['onPressAttachmentOption'] = status;
            sizing['channel'] = target;
            sizing['autoFocusType'] = papara;
            sizing['command'] = cntext;
            sizing['optionValues'] = config;
            sizing['hasError'] = foxtra;
            sizing = result.bind(tangon)(vacuum, sizing);
            romeon[1] = sizing;
            sizing = _closure1_slot0;
            vacuum = 11;
            kiloes = kiloes[vacuum];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.Text;
            kiloes = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            config = record.optionDescription;
            kiloes['style'] = config;
            config = source.displayDescription;
            kiloes['children'] = config;
            kiloes = result.bind(tangon)(sizing, kiloes);
            romeon[2] = kiloes;
            if(!foxtra) { _fun00002_ip = 1126; continue _fun00001 }
 920:
            sizing = _closure1_slot6;
            cntext = _closure1_slot1;
            result = _closure1_slot2;
            backup = result[backup];
            backup = cntext.bind(tangon)(backup);
            kiloes = backup.View;
            backup = {};
            backup['collapsable'] = sequen;
            backup['entering'] = update;
            backup['exiting'] = output;
            output = record.optionErrorContainer;
            backup['style'] = output;
            update = _closure1_slot5;
            config = 13;
            output = result[config];
            sequen = cntext.bind(tangon)(output);
            output = {};
            record = record.optionErrorIcon;
            output['style'] = record;
            record = 14;
            record = result[record];
            record = cntext.bind(tangon)(record);
            output['source'] = record;
            echoed = _closure1_slot0;
            config = result[config];
            config = echoed.bind(tangon)(config);
            config = config.IconSizes;
            config = config.REFRESH_SMALL_16;
            output['size'] = config;
            sequen = update.bind(tangon)(sequen, output);
            output = new Array(2);
            output[0] = sequen;
            result = result[vacuum];
            result = echoed.bind(tangon)(result);
            echoed = result.Text;
            result = {'variant': 'text-xs/medium', 'color': 'text-danger'};
            source = source.name;
            source = ctrled[source];
            source = source.error;
            result['children'] = source;
            result = update.bind(tangon)(echoed, result);
            output[1] = result;
            backup['children'] = output;
            foxtra = sizing.bind(tangon)(kiloes, backup);
 1126:
            romeon[3] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            golfie['children'] = verify;
            golfie = zuuluu.bind(tangon)(option, golfie);
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();