// app/modules/app_launcher/native/screens/command_view/AppLauncherCommandViewHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    verify = argBar;
    backup = argBaz;
    zuuluu = argFre;
    offset = argPlu;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = offset;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, tangon);
    entity = 0;
    report = offset[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(report);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = offset[tangon];
    tangon = verify.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    report = offset[tangon];
    report = verify.bind(entity)(report);
    foxtra = report.DEFAULT_CONTENT_PADDING;
    var _closure1_slot5 = foxtra;
    kiloes = report.SCREEN_BACKGROUND_COLOR;
    report = 3;
    oscard = offset[report];
    oscard = verify.bind(entity)(oscard);
    oscard = oscard.jsx;
    var _closure1_slot6 = oscard;
    report = offset[report];
    report = verify.bind(entity)(report);
    report = report.jsxs;
    var _closure1_slot7 = report;
    sizing = 4;
    report = offset[sizing];
    report = verify.bind(entity)(report);
    report = report.BACK_BUTTON_SIZE;
    tangon = tangon * foxtra;
    report = report + tangon;
    tangon = 36;
    tangon = report + tangon;
    oscard = tangon + sizing;
    golfie = 56;
    tangon = oscard - golfie;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = offset[tangon];
    yankee = verify.bind(entity)(tangon);
    option = yankee.createStyles;
    tangon = {};
    report = {};
    romeon = 'rgba(0, 0, 0, 0.6)';
    report['backgroundColor'] = romeon;
    tangon['backButton'] = report;
    romeon = {'alignItems': 'center', 'flexDirection': 'row', 'justifyContent': 'space-between', 'position': 'absolute', 'top': 4294967280, 'left': 0, 'right': 0};
    report = -16;
    romeon['padding'] = foxtra;
    tangon['headerContainer'] = romeon;
    romeon = {};
    foxtra = 6;
    output = offset[foxtra];
    output = backup.bind(entity)(output);
    output = output.colors;
    output = output.BACKGROUND_TERTIARY;
    romeon['backgroundColor'] = output;
    tangon['loadingHeaderContainer'] = romeon;
    romeon = {'position': 'absolute', 'padding': 4, 'bottom': 4294967260, 'left': '50%'};
    romeon['backgroundColor'] = kiloes;
    kiloes = offset[foxtra];
    kiloes = backup.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.xl;
    kiloes = kiloes + sizing;
    romeon['borderRadius'] = kiloes;
    tangon['appIconMask'] = romeon;
    romeon = {'width': 72, 'height': 72};
    kiloes = offset[foxtra];
    kiloes = backup.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.xl;
    romeon['borderRadius'] = kiloes;
    tangon['appIcon'] = romeon;
    romeon = {};
    foxtra = offset[foxtra];
    foxtra = backup.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_ACCENT;
    romeon['backgroundColor'] = foxtra;
    tangon['loadingIcon'] = romeon;
    romeon = {'textAlign': 'center', 'pointerEvents': 'none', 'flexGrow': 1, 'marginHorizontal': 8};
    tangon['appSmallName'] = romeon;
    romeon = {};
    backup = {};
    foxtra = '180deg';
    backup['rotate'] = foxtra;
    foxtra = new Array(1);
    foxtra[0] = backup;
    romeon['transform'] = foxtra;
    tangon['icon'] = romeon;
    romeon = {'backgroundColor': 'black', 'position': 'absolute', 'top': 0, 'left': 0, 'right': 0, 'bottom': 0};
    tangon['headerBannerOverlay'] = romeon;
    tangon = option.bind(yankee)(tangon);
    var _closure1_slot9 = tangon;
    option = {};
    yankee = "function AppLauncherCommandViewHeaderTsx1(){const{interpolate,scrollOffsetY,TOTAL_SCROLL_RANGE}=this.__closure;return{opacity:interpolate(scrollOffsetY.get(),[0,TOTAL_SCROLL_RANGE],[0,1],'clamp'),transform:[{translateY:interpolate(scrollOffsetY.get(),[0,TOTAL_SCROLL_RANGE],[12,0],'clamp')}]};}";
    option['code'] = yankee;
    var _closure1_slot10 = option;
    option = {};
    yankee = "function AppLauncherCommandViewHeaderTsx2(){const{APP_ICON_SIZE,APP_ICON_BORDER_WIDTH,DEFAULT_CONTENT_PADDING,interpolate,scrollOffsetY,TOTAL_SCROLL_RANGE}=this.__closure;return{transform:[{translateX:-APP_ICON_SIZE/2-APP_ICON_BORDER_WIDTH+DEFAULT_CONTENT_PADDING},{translateY:interpolate(scrollOffsetY.get(),[0,TOTAL_SCROLL_RANGE],[0,-APP_ICON_SIZE/2],'clamp')},{scale:interpolate(scrollOffsetY.get(),[0,TOTAL_SCROLL_RANGE],[1,0],'clamp')}],opacity:interpolate(scrollOffsetY.get(),[0,TOTAL_SCROLL_RANGE],[1,0],'clamp')};}";
    option['code'] = yankee;
    var _closure1_slot11 = option;
    option = {};
    yankee = "function AppLauncherCommandViewHeaderTsx3(){const{interpolate,scrollOffsetY,TOTAL_SCROLL_RANGE}=this.__closure;return{opacity:interpolate(scrollOffsetY.get(),[0,TOTAL_SCROLL_RANGE],[0,0.5],'clamp')};}";
    option['code'] = yankee;
    var _closure1_slot12 = option;
    option = 14;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'modules/app_launcher/native/screens/command_view/AppLauncherCommandViewHeader.tsx';
    option = verify.bind(offset)(option);
    zuuluu['COLLAPSED_HEADER_HEIGHT'] = golfie;
    report = oscard + report;
    zuuluu['EXPANDED_HEADER_TOTAL_CONSUMED_SPACE_IN_PARENT'] = report;
    zuuluu['useStyles'] = tangon;
    michal = function(argFoo) { // Original name: AppLauncherCommandViewHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            kiloes = michal.command;
            update = michal.onPressBack;
            sizing = michal.scrollOffsetY;
            var _closure2_slot0 = sizing;
            michal = michal.section;
            var _closure2_slot1 = michal;
            zuuluu = _closure1_slot9;
            tangon = undefined;
            offset = zuuluu.bind(tangon)();
            golfie = _closure1_slot3;
            report = golfie.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 7;
                    michal = michal[entity];
                    entity = undefined;
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.getAppLauncherIconSource;
                    oscard = _closure2_slot1;
                    report = null;
                    report = report == oscard;
                    if(report) { _fun00004_ip = 56; continue _fun00003 }
 47:
                    tangon = _closure2_slot1;
                    entity = tangon.application;
 56:
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
                }
            };
            report = report.bind(golfie)(michal, zuuluu);
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            romeon = 8;
            golfie = zuuluu[romeon];
            verify = michal.bind(tangon)(golfie);
            option = verify.useAnimatedStyle;
            golfie = function() { // Original name: f
                entity = {};
                golfie = _closure1_slot0;
                verify = _closure1_slot2;
                tangon = 8;
                zuuluu = verify[tangon];
                oscard = undefined;
                foxtra = golfie.bind(oscard)(zuuluu);
                romeon = foxtra.interpolate;
                report = _closure2_slot0;
                zuuluu = report.get;
                output = zuuluu.bind(report)();
                michal = _closure1_slot8;
                offset = [0];
                offset[1] = michal;
                kiloes = [0, 1];
                option = 'clamp';
                result = foxtra;
                sizing = offset;
                backup = option;
                zuuluu = result[romeon](output, sizing, kiloes, backup, foxtra);
                entity['opacity'] = zuuluu;
                zuuluu = {};
                tangon = verify[tangon];
                golfie = golfie.bind(oscard)(tangon);
                oscard = golfie.interpolate;
                tangon = report.get;
                output = tangon.bind(report)();
                tangon = [0];
                tangon[1] = michal;
                kiloes = [12, 0];
                result = golfie;
                sizing = tangon;
                michal = result[oscard](output, sizing, kiloes, backup, foxtra);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            yankee = {};
            foxtra = zuuluu[romeon];
            foxtra = michal.bind(tangon)(foxtra);
            foxtra = foxtra.interpolate;
            yankee['interpolate'] = foxtra;
            yankee['scrollOffsetY'] = sizing;
            backup = _closure1_slot8;
            yankee['TOTAL_SCROLL_RANGE'] = backup;
            golfie['__closure'] = yankee;
            yankee = 15596175827193.0;
            golfie['__workletHash'] = yankee;
            yankee = _closure1_slot10;
            golfie['__initData'] = yankee;
            output = option.bind(verify)(golfie);
            golfie = zuuluu[romeon];
            yankee = michal.bind(tangon)(golfie);
            verify = yankee.useAnimatedStyle;
            option = function() { // Original name: E
                entity = {};
                zuuluu = {};
                report = _closure1_slot5;
                tangon = -40;
                tangon = tangon + report;
                zuuluu['translateX'] = tangon;
                verify = new Array(3);
                verify[0] = zuuluu;
                offset = {};
                oscard = _closure1_slot0;
                option = _closure1_slot2;
                zuuluu = 8;
                tangon = option[zuuluu];
                report = undefined;
                kiloes = oscard.bind(report)(tangon);
                backup = kiloes.interpolate;
                tangon = _closure2_slot0;
                golfie = tangon.get;
                echoed = golfie.bind(tangon)();
                michal = _closure1_slot8;
                romeon = [0];
                romeon[1] = michal;
                yankee = [0];
                golfie = -36;
                yankee[1] = golfie;
                golfie = 'clamp';
                update = kiloes;
                result = romeon;
                output = yankee;
                sizing = golfie;
                yankee = update[backup](echoed, result, output, sizing, kiloes);
                offset['translateY'] = yankee;
                verify[1] = offset;
                offset = {};
                yankee = option[zuuluu];
                kiloes = oscard.bind(report)(yankee);
                backup = kiloes.interpolate;
                yankee = tangon.get;
                echoed = yankee.bind(tangon)();
                romeon = [0];
                romeon[1] = michal;
                output = [1, 0];
                update = kiloes;
                result = romeon;
                yankee = update[backup](echoed, result, output, sizing, kiloes);
                offset['scale'] = yankee;
                verify[2] = offset;
                entity['transform'] = verify;
                zuuluu = option[zuuluu];
                oscard = oscard.bind(report)(zuuluu);
                report = oscard.interpolate;
                zuuluu = tangon.get;
                echoed = zuuluu.bind(tangon)();
                zuuluu = [0];
                zuuluu[1] = michal;
                output = [1, 0];
                update = oscard;
                result = zuuluu;
                michal = update[report](echoed, result, output, sizing, kiloes);
                entity['opacity'] = michal;
                return entity;
            };
            foxtra = {'APP_ICON_SIZE': 72, 'APP_ICON_BORDER_WIDTH': 4};
            golfie = 4;
            result = _closure1_slot5;
            foxtra['DEFAULT_CONTENT_PADDING'] = result;
            result = zuuluu[romeon];
            result = michal.bind(tangon)(result);
            result = result.interpolate;
            foxtra['interpolate'] = result;
            foxtra['scrollOffsetY'] = sizing;
            foxtra['TOTAL_SCROLL_RANGE'] = backup;
            option['__closure'] = foxtra;
            foxtra = 13563524587234.0;
            option['__workletHash'] = foxtra;
            foxtra = _closure1_slot11;
            option['__initData'] = foxtra;
            yankee = verify.bind(yankee)(option);
            option = zuuluu[romeon];
            verify = michal.bind(tangon)(option);
            option = verify.useAnimatedStyle;
            entity = function() { // Original name: N
                entity = {};
                report = _closure1_slot0;
                tangon = _closure1_slot2;
                zuuluu = 8;
                tangon = tangon[zuuluu];
                zuuluu = undefined;
                golfie = report.bind(zuuluu)(tangon);
                oscard = golfie.interpolate;
                tangon = _closure2_slot0;
                zuuluu = tangon.get;
                yankee = zuuluu.bind(tangon)();
                michal = _closure1_slot8;
                tangon = [0];
                tangon[1] = michal;
                verify = [0, 0.5];
                option = 'clamp';
                romeon = golfie;
                offset = tangon;
                michal = romeon[oscard](yankee, offset, verify, option, golfie);
                entity['opacity'] = michal;
                return entity;
            };
            foxtra = {};
            result = zuuluu[romeon];
            result = michal.bind(tangon)(result);
            result = result.interpolate;
            foxtra['interpolate'] = result;
            foxtra['scrollOffsetY'] = sizing;
            foxtra['TOTAL_SCROLL_RANGE'] = backup;
            entity['__closure'] = foxtra;
            foxtra = 2637023147700.0;
            entity['__workletHash'] = foxtra;
            foxtra = _closure1_slot12;
            entity['__initData'] = foxtra;
            ctrled = option.bind(verify)(entity);
            entity = 9;
            entity = zuuluu[entity];
            verify = michal.bind(tangon)(entity);
            option = verify.useToken;
            michal = _closure1_slot1;
            result = 6;
            entity = zuuluu[result];
            entity = michal.bind(tangon)(entity);
            entity = entity.colors;
            entity = entity.BG_BASE_PRIMARY;
            option = option.bind(verify)(entity);
            entity = 10;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            verify = 'number';
            entity = typeof report;
            michal = report;
            if(!(verify !== entity)) { _fun00002_ip = 486; continue _fun00001 }
 467:
            entity = null;
            verify = entity == report;
            entity = undefined;
            if(verify) { _fun00002_ip = 483; continue _fun00001 }
 478:
            entity = report.uri;
 483:
            michal = entity;
 486:
            backup = null;
            verify = backup != option;
            entity = '';
            if(!verify) { _fun00002_ip = 502; continue _fun00001 }
 499:
            entity = option;
 502:
            foxtra = zuuluu.bind(tangon)(michal, entity);
            if(!(backup == report)) { _fun00002_ip = 558; continue _fun00001 }
 512:
            zuuluu = _closure1_slot6;
            michal = _closure1_slot4;
            entity = {};
            verify = offset.appIcon;
            option = new Array(2);
            option[0] = verify;
            verify = offset.loadingIcon;
            option[1] = verify;
            entity['style'] = option;
            verify = zuuluu.bind(tangon)(michal, entity);
            _fun00002_ip = 604; continue _fun00001;
 558:
            zuuluu = _closure1_slot6;
            michal = _closure1_slot1;
            option = _closure1_slot2;
            entity = 11;
            entity = option[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            option = offset.appIcon;
            entity['style'] = option;
            entity['source'] = report;
            verify = zuuluu.bind(tangon)(michal, entity);
 604:
            zuuluu = _closure1_slot7;
            michal = _closure1_slot4;
            entity = {};
            option = offset.headerContainer;
            report = new Array(2);
            report[0] = option;
            if(!(backup != kiloes)) { _fun00002_ip = 640; continue _fun00001 }
 632:
            option = {};
            option['backgroundColor'] = foxtra;
            _fun00002_ip = 646; continue _fun00001;
 640:
            option = offset.loadingHeaderContainer;
 646:
            report[1] = option;
            entity['style'] = report;
            foxtra = _closure1_slot6;
            echoed = _closure1_slot1;
            sizing = _closure1_slot2;
            report = sizing[romeon];
            report = echoed.bind(tangon)(report);
            option = report.View;
            report = {};
            vacuum = offset.headerBannerOverlay;
            source = new Array(2);
            source[0] = vacuum;
            source[1] = ctrled;
            report['style'] = source;
            option = foxtra.bind(tangon)(option, report);
            report = new Array(5);
            report[0] = option;
            golfie = sizing[golfie];
            option = echoed.bind(tangon)(golfie);
            golfie = {};
            source = offset.backButton;
            golfie['style'] = source;
            golfie['onPress'] = update;
            result = sizing[result];
            result = echoed.bind(tangon)(result);
            result = result.colors;
            result = result.WHITE;
            golfie['iconColor'] = result;
            golfie = foxtra.bind(tangon)(option, golfie);
            report[1] = golfie;
            option = _closure1_slot0;
            golfie = 12;
            golfie = sizing[golfie];
            golfie = option.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'lineClamp': 1, 'animated': true, 'style': null, 'variant': 'heading-lg/bold', 'color': 'white'};
            result = offset.appSmallName;
            sizing = new Array(2);
            sizing[0] = result;
            sizing[1] = output;
            golfie['style'] = sizing;
            sizing = backup == kiloes;
            backup = undefined;
            if(sizing) { _fun00002_ip = 847; continue _fun00001 }
 842:
            backup = kiloes.displayName;
 847:
            golfie['children'] = backup;
            golfie = foxtra.bind(tangon)(option, golfie);
            report[2] = golfie;
            option = _closure1_slot6;
            golfie = _closure1_slot1;
            oscard = _closure1_slot2;
            foxtra = 13;
            foxtra = oscard[foxtra];
            backup = golfie.bind(tangon)(foxtra);
            foxtra = {};
            kiloes = 32;
            foxtra['size'] = kiloes;
            foxtra = option.bind(tangon)(backup, foxtra);
            report[3] = foxtra;
            oscard = oscard[romeon];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.View;
            oscard = {};
            romeon = offset.appIconMask;
            offset = new Array(2);
            offset[0] = romeon;
            offset[1] = yankee;
            oscard['style'] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['AppLauncherCommandViewHeader'] = michal;
    return entity;
})();