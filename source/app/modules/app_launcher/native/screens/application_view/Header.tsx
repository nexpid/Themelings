// app/modules/app_launcher/native/screens/application_view/Header.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    romeo = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, mike);
    entity = 0;
    report = golf[entity];
    mike = argCorge;
    entity = undefined;
    mike = mike.bind(entity)(report);
    mike = 1;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.View;
    var _closure1_slot3 = mike;
    mike = 2;
    mike = golf[mike];
    mike = romeo.bind(entity)(mike);
    var _closure1_slot4 = mike;
    mike = 3;
    mike = golf[mike];
    mike = romeo.bind(entity)(mike);
    var _closure1_slot5 = mike;
    output = 4;
    mike = golf[output];
    mike = oscar.bind(entity)(mike);
    kilo = mike.DEFAULT_CONTENT_PADDING;
    sizing = mike.SCREEN_BACKGROUND_COLOR;
    mike = 5;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    report = mike.AnalyticEvents;
    var _closure1_slot6 = report;
    mike = mike.ApplicationFlags;
    var _closure1_slot7 = mike;
    mike = 6;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot8 = report;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot9 = mike;
    yankee = 7;
    mike = golf[yankee];
    mike = romeo.bind(entity)(mike);
    mike = mike.radii;
    backup = mike.xl;
    var _closure1_slot10 = backup;
    mike = 8;
    mike = golf[mike];
    verify = oscar.bind(entity)(mike);
    options = verify.createStyles;
    report = {};
    foxtrot = 'absolute';
    mike = {'position': 'absolute', 'top': 4294967280, 'left': 0, 'right': 0};
    report['headerContainer'] = mike;
    mike = {};
    offset = 105;
    mike['height'] = offset;
    report['expandedHeaderBanner'] = mike;
    offset = {'position': 'absolute', 'padding': 4, 'bottom': 4294967256, 'left': 16};
    mike = 16;
    offset['backgroundColor'] = sizing;
    sizing = golf[yankee];
    sizing = romeo.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.xl;
    sizing = sizing + output;
    offset['borderRadius'] = sizing;
    report['appIconMask'] = offset;
    offset = {'height': 56, 'justifyContent': 'space-between', 'alignItems': 'center', 'position': 'absolute', 'top': 0, 'left': 0, 'right': 0, 'flexDirection': 'row'};
    offset['padding'] = kilo;
    report['collapsedHeaderBanner'] = offset;
    offset = {'backgroundColor': 'black', 'position': 'absolute', 'top': 0, 'left': 0, 'right': 0, 'bottom': 0};
    report['collapsedHeaderBannerOverlay'] = offset;
    offset = {'position': 'absolute', 'top': 12, 'left': 12};
    report['backButtonContainer'] = offset;
    offset = {};
    kilo = golf[yankee];
    kilo = romeo.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BLACK;
    offset['backgroundColor'] = kilo;
    kilo = 0.6;
    offset['opacity'] = kilo;
    report['backButton'] = offset;
    offset = {'height': 72, 'width': 72};
    offset['borderRadius'] = backup;
    backup = golf[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_ACCENT;
    offset['backgroundColor'] = backup;
    report['loadingIcon'] = offset;
    offset = {};
    offset['position'] = foxtrot;
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_12;
    offset['top'] = foxtrot;
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['right'] = foxtrot;
    report['addCTAContainer'] = offset;
    offset = {'width': 32, 'height': 32, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.lg;
    offset['borderRadius'] = foxtrot;
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.REDESIGN_BUTTON_SECONDARY_OVERLAY_BACKGROUND;
    offset['backgroundColor'] = foxtrot;
    report['actionButtonWrapper'] = offset;
    offset = {'flexDirection': 'row', 'display': 'flex', 'gap': null, 'position': 'absolute', 'right': null, 'top': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    offset['gap'] = foxtrot;
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_12;
    offset['right'] = foxtrot;
    yankee = golf[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_12;
    offset['top'] = yankee;
    report['actionsWrapper'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot11 = report;
    report = {};
    options = "function HeaderTsx1(){const{interpolate,scrollOffsetY,HEADER_SCROLL_RANGE}=this.__closure;return{transform:[{translateY:interpolate(scrollOffsetY.get(),[0,HEADER_SCROLL_RANGE],[0,-HEADER_SCROLL_RANGE],'clamp')}]};}";
    report['code'] = options;
    var _closure1_slot12 = report;
    report = {};
    options = "function HeaderTsx2(){const{interpolate,scrollOffsetY,HEADER_SCROLL_RANGE}=this.__closure;return{transform:[{translateY:interpolate(scrollOffsetY.get(),[0,HEADER_SCROLL_RANGE],[0,HEADER_SCROLL_RANGE],'clamp')}]};}";
    report['code'] = options;
    var _closure1_slot13 = report;
    report = {};
    options = "function HeaderTsx3(){const{interpolate,scrollOffsetY,HEADER_SCROLL_RANGE}=this.__closure;return{transform:[{translateY:interpolate(scrollOffsetY.get(),[HEADER_SCROLL_RANGE*0.5,HEADER_SCROLL_RANGE],[16,0],'clamp')}],opacity:interpolate(scrollOffsetY.get(),[HEADER_SCROLL_RANGE*0.5,HEADER_SCROLL_RANGE],[0,1],'clamp')};}";
    report['code'] = options;
    var _closure1_slot14 = report;
    report = {};
    options = "function HeaderTsx4(){const{interpolate,scrollOffsetY,HEADER_SCROLL_RANGE}=this.__closure;return{opacity:interpolate(scrollOffsetY.get(),[HEADER_SCROLL_RANGE*0.5,HEADER_SCROLL_RANGE],[0,0.5],'clamp')};}";
    report['code'] = options;
    var _closure1_slot15 = report;
    report = 30;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/app_launcher/native/screens/application_view/Header.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: Header
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            offset = mike.application;
            var _closure2_slot0 = offset;
            sequence = mike.onPressBack;
            entity = mike.scrollOffsetY;
            mike = mike.onAddAppMenuClick;
            var _closure2_slot1 = mike;
            tango = undefined;
            var _closure2_slot3 = tango;
            var _closure2_slot4 = tango;
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            mike = 10;
            mike = report[mike];
            oscar = zulu.bind(tango)(mike);
            report = oscar.useStateFromStores;
            mike = _closure1_slot5;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                mike = _closure1_slot5;
                entity = mike.entrypoint;
                entity = entity.bind(mike)();
                return entity;
            };
            mike = report.bind(oscar)(zulu, mike);
            var _closure2_slot2 = mike;
            mike = _closure1_slot11;
            update = mike.bind(tango)();
            options = null;
            mike = options != offset;
            oscar = null;
            if(!mike) { _fun00002_ip = 153; continue _fun00001 }
 122:
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            mike = 11;
            mike = report[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.getAppLauncherIconSource;
            oscar = mike.bind(zulu)(offset);
 153:
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            mike = 12;
            mike = report[mike];
            verify = zulu.bind(tango)(mike);
            golf = verify.useToken;
            zulu = _closure1_slot1;
            echo = 7;
            mike = report[echo];
            mike = zulu.bind(tango)(mike);
            mike = mike.colors;
            mike = mike.BG_BASE_PRIMARY;
            golf = golf.bind(verify)(mike);
            mike = 13;
            mike = report[mike];
            report = zulu.bind(tango)(mike);
            verify = 'number';
            mike = typeof oscar;
            zulu = oscar;
            if(!(verify !== mike)) { _fun00002_ip = 255; continue _fun00001 }
 237:
            verify = options == oscar;
            mike = undefined;
            if(verify) { _fun00002_ip = 252; continue _fun00001 }
 246:
            mike = oscar.uri;
 252:
            zulu = mike;
 255:
            verify = options != golf;
            control = '';
            mike = control;
            if(!verify) { _fun00002_ip = 272; continue _fun00001 }
 269:
            mike = golf;
 272:
            record = report.bind(tango)(zulu, mike);
            if(!(options == oscar)) { _fun00002_ip = 310; continue _fun00001 }
 282:
            report = _closure1_slot8;
            zulu = _closure1_slot3;
            mike = {};
            golf = update.loadingIcon;
            mike['style'] = golf;
            output = report.bind(tango)(zulu, mike);
            _fun00002_ip = 364; continue _fun00001;
 310:
            report = _closure1_slot8;
            zulu = _closure1_slot1;
            golf = _closure1_slot2;
            mike = 14;
            mike = golf[mike];
            zulu = zulu.bind(tango)(mike);
            mike = {};
            mike['iconSource'] = oscar;
            oscar = _closure1_slot10;
            mike['iconBorderRadius'] = oscar;
            oscar = 72;
            mike['iconSize'] = oscar;
            output = report.bind(tango)(zulu, mike);
 364:
            zulu = {};
            zulu['scrollOffsetY'] = entity;
            mike = function(argFoo) {
                entity = argFoo;
                golf = entity.scrollOffsetY;
                var _closure3_slot0 = golf;
                entity = {};
                offset = _closure1_slot0;
                yankee = _closure1_slot2;
                options = 9;
                zulu = yankee[options];
                verify = undefined;
                tango = offset.bind(verify)(zulu);
                zulu = tango.useAnimatedStyle;
                mike = function() { // Original name: o
                    entity = {};
                    zulu = {};
                    report = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 9;
                    tango = tango[mike];
                    mike = undefined;
                    options = report.bind(mike)(tango);
                    golf = options.interpolate;
                    tango = _closure3_slot0;
                    mike = tango.get;
                    romeo = mike.bind(tango)();
                    report = [0];
                    mike = 105;
                    report[1] = mike;
                    tango = [0];
                    mike = -105;
                    tango[1] = mike;
                    verify = 'clamp';
                    foxtrot = options;
                    yankee = report;
                    offset = tango;
                    mike = foxtrot[golf](romeo, yankee, offset, verify, options);
                    zulu['translateY'] = mike;
                    mike = new Array(1);
                    mike[0] = zulu;
                    entity['transform'] = mike;
                    return entity;
                };
                oscar = {};
                options = yankee[options];
                options = offset.bind(verify)(options);
                options = options.interpolate;
                oscar['interpolate'] = options;
                oscar['scrollOffsetY'] = golf;
                golf = 105;
                oscar['HEADER_SCROLL_RANGE'] = golf;
                mike['__closure'] = oscar;
                oscar = 2572905048492.0;
                mike['__workletHash'] = oscar;
                report = _closure1_slot12;
                mike['__initData'] = report;
                mike = zulu.bind(tango)(mike);
                entity['style'] = mike;
                return entity;
            };
            oscar = mike.bind(tango)(zulu);
            zulu = {};
            zulu['scrollOffsetY'] = entity;
            mike = function(argFoo) {
                entity = argFoo;
                options = entity.scrollOffsetY;
                var _closure3_slot0 = options;
                entity = {};
                yankee = _closure1_slot0;
                romeo = _closure1_slot2;
                verify = 9;
                zulu = romeo[verify];
                offset = undefined;
                oscar = yankee.bind(offset)(zulu);
                tango = oscar.useAnimatedStyle;
                zulu = function() { // Original name: o
                    entity = {};
                    zulu = {};
                    report = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 9;
                    tango = tango[mike];
                    mike = undefined;
                    options = report.bind(mike)(tango);
                    golf = options.interpolate;
                    tango = _closure3_slot0;
                    mike = tango.get;
                    romeo = mike.bind(tango)();
                    report = [0];
                    mike = 105;
                    report[1] = mike;
                    tango = [0];
                    tango[1] = mike;
                    verify = 'clamp';
                    foxtrot = options;
                    yankee = report;
                    offset = tango;
                    mike = foxtrot[golf](romeo, yankee, offset, verify, options);
                    zulu['translateY'] = mike;
                    mike = new Array(1);
                    mike[0] = zulu;
                    entity['transform'] = mike;
                    return entity;
                };
                foxtrot = {};
                golf = romeo[verify];
                golf = yankee.bind(offset)(golf);
                golf = golf.interpolate;
                foxtrot['interpolate'] = golf;
                foxtrot['scrollOffsetY'] = options;
                golf = 105;
                foxtrot['HEADER_SCROLL_RANGE'] = golf;
                zulu['__closure'] = foxtrot;
                foxtrot = 8190094903650.0;
                zulu['__workletHash'] = foxtrot;
                foxtrot = _closure1_slot13;
                zulu['__initData'] = foxtrot;
                zulu = tango.bind(oscar)(zulu);
                entity['headerStyle'] = zulu;
                zulu = romeo[verify];
                tango = yankee.bind(offset)(zulu);
                zulu = tango.useAnimatedStyle;
                mike = function() { // Original name: n
                    entity = {};
                    offset = {};
                    oscar = _closure1_slot0;
                    options = _closure1_slot2;
                    zulu = 9;
                    mike = options[zulu];
                    report = undefined;
                    backup = oscar.bind(report)(mike);
                    foxtrot = backup.interpolate;
                    tango = _closure3_slot0;
                    mike = tango.get;
                    result = mike.bind(tango)();
                    yankee = [52.5];
                    mike = 105;
                    yankee[1] = mike;
                    sizing = [16, 0];
                    golf = 'clamp';
                    echo = backup;
                    output = yankee;
                    kilo = golf;
                    verify = echo[foxtrot](result, output, sizing, kilo, backup);
                    offset['translateY'] = verify;
                    verify = new Array(1);
                    verify[0] = offset;
                    entity['transform'] = verify;
                    zulu = options[zulu];
                    oscar = oscar.bind(report)(zulu);
                    report = oscar.interpolate;
                    zulu = tango.get;
                    result = zulu.bind(tango)();
                    zulu = [52.5];
                    zulu[1] = mike;
                    sizing = [0, 1];
                    echo = oscar;
                    output = zulu;
                    mike = echo[report](result, output, sizing, kilo, backup);
                    entity['opacity'] = mike;
                    return entity;
                };
                oscar = {};
                verify = romeo[verify];
                verify = yankee.bind(offset)(verify);
                verify = verify.interpolate;
                oscar['interpolate'] = verify;
                oscar['scrollOffsetY'] = options;
                oscar['HEADER_SCROLL_RANGE'] = golf;
                mike['__closure'] = oscar;
                oscar = 14190901941859.0;
                mike['__workletHash'] = oscar;
                report = _closure1_slot14;
                mike['__initData'] = report;
                mike = zulu.bind(tango)(mike);
                entity['nameStyle'] = mike;
                return entity;
            };
            source = mike.bind(tango)(zulu);
            mike = {};
            mike['scrollOffsetY'] = entity;
            entity = function(argFoo) {
                entity = argFoo;
                golf = entity.scrollOffsetY;
                var _closure3_slot0 = golf;
                entity = {};
                offset = _closure1_slot0;
                yankee = _closure1_slot2;
                options = 9;
                zulu = yankee[options];
                verify = undefined;
                tango = offset.bind(verify)(zulu);
                zulu = tango.useAnimatedStyle;
                mike = function() { // Original name: o
                    entity = {};
                    tango = _closure1_slot0;
                    zulu = _closure1_slot2;
                    mike = 9;
                    zulu = zulu[mike];
                    mike = undefined;
                    golf = tango.bind(mike)(zulu);
                    oscar = golf.interpolate;
                    zulu = _closure3_slot0;
                    mike = zulu.get;
                    yankee = mike.bind(zulu)();
                    tango = [52.5];
                    mike = 105;
                    tango[1] = mike;
                    verify = [0, 0.5];
                    options = 'clamp';
                    romeo = golf;
                    offset = tango;
                    mike = romeo[oscar](yankee, offset, verify, options, golf);
                    entity['opacity'] = mike;
                    return entity;
                };
                oscar = {};
                options = yankee[options];
                options = offset.bind(verify)(options);
                options = options.interpolate;
                oscar['interpolate'] = options;
                oscar['scrollOffsetY'] = golf;
                golf = 105;
                oscar['HEADER_SCROLL_RANGE'] = golf;
                mike['__closure'] = oscar;
                oscar = 9589752719246.0;
                mike['__workletHash'] = oscar;
                report = _closure1_slot15;
                mike['__initData'] = report;
                mike = zulu.bind(tango)(mike);
                entity['style'] = mike;
                return entity;
            };
            config = entity.bind(tango)(mike);
            entity = options != offset;
            if(!entity) { _fun00002_ip = 459; continue _fun00001 }
 428:
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 15;
            entity = zulu[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.getSectionName;
            control = entity.bind(mike)(offset);
 459:
            entity = options != offset;
            if(!entity) { _fun00002_ip = 474; continue _fun00001 }
 466:
            mike = 'flags';
            entity = mike in offset;
 474:
            if(!entity) { _fun00002_ip = 536; continue _fun00001 }
 477:
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            mike = 16;
            mike = report[mike];
            golf = zulu.bind(tango)(mike);
            report = golf.hasFlag;
            mike = offset.flags;
            verify = options != mike;
            zulu = 0;
            if(!verify) { _fun00002_ip = 520; continue _fun00001 }
 517:
            zulu = mike;
 520:
            mike = _closure1_slot7;
            mike = mike.EMBEDDED;
            entity = report.bind(golf)(zulu, mike);
 536:
            _closure2_slot3 = entity;
            mike = _closure1_slot4;
            entity = mike.getCurrentUser;
            entity = entity.bind(mike)();
            _closure2_slot4 = entity;
            zulu = _closure1_slot9;
            romeo = _closure1_slot1;
            kilo = _closure1_slot2;
            yankee = 9;
            entity = kilo[yankee];
            entity = romeo.bind(tango)(entity);
            mike = entity.View;
            entity = {};
            golf = update.headerContainer;
            report = new Array(2);
            report[0] = golf;
            oscar = oscar.style;
            report[1] = oscar;
            entity['style'] = report;
            verify = 'box-none';
            entity['pointerEvents'] = verify;
            foxtrot = _closure1_slot8;
            oscar = _closure1_slot3;
            report = {};
            result = update.expandedHeaderBanner;
            golf = new Array(2);
            golf[0] = result;
            result = {};
            result['backgroundColor'] = record;
            golf[1] = result;
            report['style'] = golf;
            result = 'none';
            report['pointerEvents'] = result;
            golf = {};
            vacuum = update.appIconMask;
            golf['style'] = vacuum;
            golf['children'] = output;
            golf = foxtrot.bind(tango)(oscar, golf);
            report['children'] = golf;
            oscar = foxtrot.bind(tango)(oscar, report);
            report = new Array(3);
            report[0] = oscar;
            oscar = kilo[yankee];
            oscar = romeo.bind(tango)(oscar);
            golf = oscar.View;
            oscar = {};
            vacuum = update.collapsedHeaderBanner;
            output = new Array(3);
            output[0] = vacuum;
            vacuum = {};
            vacuum['backgroundColor'] = record;
            output[1] = vacuum;
            vacuum = source.headerStyle;
            output[2] = vacuum;
            oscar['style'] = output;
            oscar['pointerEvents'] = verify;
            verify = kilo[yankee];
            verify = romeo.bind(tango)(verify);
            output = verify.View;
            verify = {};
            record = update.collapsedHeaderBannerOverlay;
            vacuum = new Array(2);
            vacuum[0] = record;
            config = config.style;
            vacuum[1] = config;
            verify['style'] = vacuum;
            verify['pointerEvents'] = result;
            output = foxtrot.bind(tango)(output, verify);
            verify = new Array(4);
            verify[0] = output;
            output = 17;
            output = kilo[output];
            vacuum = romeo.bind(tango)(output);
            output = {};
            output['onPress'] = sequence;
            sequence = update.backButton;
            output['style'] = sequence;
            sequence = kilo[echo];
            sequence = romeo.bind(tango)(sequence);
            sequence = sequence.colors;
            sequence = sequence.WHITE;
            output['iconColor'] = sequence;
            output = foxtrot.bind(tango)(vacuum, output);
            verify[1] = output;
            yankee = kilo[yankee];
            yankee = romeo.bind(tango)(yankee);
            output = yankee.View;
            yankee = {};
            source = source.nameStyle;
            yankee['style'] = source;
            yankee['pointerEvents'] = result;
            source = _closure1_slot0;
            result = 18;
            result = kilo[result];
            result = source.bind(tango)(result);
            source = result.Text;
            result = {'variant': 'heading-lg/bold', 'color': 'white'};
            result['children'] = control;
            result = foxtrot.bind(tango)(source, result);
            yankee['children'] = result;
            yankee = foxtrot.bind(tango)(output, yankee);
            verify[2] = yankee;
            yankee = 19;
            yankee = kilo[yankee];
            romeo = romeo.bind(tango)(yankee);
            yankee = {'size': 32, 'pointerEvents': 'none'};
            yankee = foxtrot.bind(tango)(romeo, yankee);
            verify[3] = yankee;
            oscar['children'] = verify;
            oscar = zulu.bind(tango)(golf, oscar);
            report[1] = oscar;
            golf = options != offset;
            oscar = null;
            if(!golf) { _fun00002_ip = 1357; continue _fun00001 }
 1049:
            verify = _closure1_slot0;
            yankee = _closure1_slot2;
            golf = 15;
            golf = yankee[golf];
            verify = verify.bind(tango)(golf);
            golf = verify.isRealApplication;
            golf = golf.bind(verify)(offset);
            oscar = null;
            if(!golf) { _fun00002_ip = 1357; continue _fun00001 }
 1088:
            verify = _closure1_slot9;
            options = _closure1_slot3;
            golf = {};
            offset = update.actionsWrapper;
            golf['style'] = offset;
            foxtrot = _closure1_slot8;
            kilo = _closure1_slot0;
            output = _closure1_slot2;
            yankee = 20;
            offset = output[yankee];
            offset = kilo.bind(tango)(offset);
            romeo = offset.PressableOpacity;
            offset = {};
            result = update.actionButtonWrapper;
            offset['style'] = result;
            result = function() { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    tango = _closure1_slot1;
                    report = _closure1_slot2;
                    entity = 21;
                    zulu = report[entity];
                    entity = undefined;
                    golf = tango.bind(entity)(zulu);
                    oscar = golf.track;
                    zulu = _closure1_slot6;
                    tango = zulu.APP_LAUNCHER_APPLICATION_LINK_COPIED;
                    zulu = {};
                    options = _closure2_slot0;
                    options = options.id;
                    zulu['application_id'] = options;
                    options = _closure2_slot2;
                    zulu['source'] = options;
                    zulu = oscar.bind(golf)(tango, zulu);
                    tango = _closure1_slot0;
                    zulu = 22;
                    zulu = report[zulu];
                    report = tango.bind(entity)(zulu);
                    tango = report.copy;
                    zulu = _closure2_slot3;
                    verify = _closure1_slot0;
                    romeo = _closure1_slot2;
                    oscar = 23;
                    oscar = romeo[oscar];
                    options = verify.bind(entity)(oscar);
                    if(zulu) { _fun00004_ip = 180; continue _fun00003 }
 122:
                    oscar = options.getApplicationInstallURL;
                    zulu = {};
                    yankee = _closure2_slot0;
                    golf = yankee.id;
                    zulu['id'] = golf;
                    golf = 15;
                    golf = romeo[golf];
                    verify = verify.bind(entity)(golf);
                    golf = verify.getInstallAppProps;
                    foxtrot = golf.bind(verify)(yankee);
                    backup = zulu;
                    golf = copyDataProperties(backup, foxtrot);
                    zulu = oscar.bind(options)(zulu);
                    _fun00004_ip = 235; continue _fun00003;
 180:
                    golf = options.getActivityLaunchURL;
                    oscar = {};
                    verify = _closure2_slot0;
                    verify = verify.id;
                    oscar['applicationId'] = verify;
                    yankee = _closure2_slot4;
                    verify = null;
                    yankee = verify == yankee;
                    verify = undefined;
                    if(yankee) { _fun00004_ip = 225; continue _fun00003 }
 216:
                    offset = _closure2_slot4;
                    verify = offset.id;
 225:
                    oscar['referrerId'] = verify;
                    zulu = golf.bind(options)(oscar);
 235:
                    zulu = tango.bind(report)(zulu);
                    zulu = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 24;
                    mike = tango[mike];
                    zulu = zulu.bind(entity)(mike);
                    mike = zulu.presentLinkCopied;
                    mike = mike.bind(zulu)();
                    return entity;
                }
            };
            offset['onPress'] = result;
            result = 25;
            result = output[result];
            result = kilo.bind(tango)(result);
            control = result.LinkIcon;
            source = {};
            result = _closure1_slot1;
            sizing = output[echo];
            sizing = result.bind(tango)(sizing);
            sizing = sizing.colors;
            sizing = sizing.WHITE;
            source['color'] = sizing;
            sizing = 'md';
            source['size'] = sizing;
            source = foxtrot.bind(tango)(control, source);
            offset['children'] = source;
            romeo = foxtrot.bind(tango)(romeo, offset);
            offset = new Array(2);
            offset[0] = romeo;
            yankee = output[yankee];
            yankee = kilo.bind(tango)(yankee);
            romeo = yankee.PressableOpacity;
            yankee = {};
            update = update.actionButtonWrapper;
            yankee['style'] = update;
            backup = function() { // Original name: onPress
                tango = _closure1_slot1;
                entity = _closure1_slot2;
                zulu = 26;
                zulu = entity[zulu];
                oscar = undefined;
                report = tango.bind(oscar)(zulu);
                tango = report.openLazy;
                zulu = _closure1_slot0;
                mike = 28;
                mike = entity[mike];
                zulu = zulu.bind(oscar)(mike);
                mike = 27;
                mike = entity[mike];
                entity = entity.paths;
                zulu = zulu.bind(oscar)(mike, entity);
                mike = {};
                oscar = _closure2_slot0;
                mike['application'] = oscar;
                entity = _closure2_slot1;
                mike['onAddAppMenuClick'] = entity;
                entity = 'AppDetailsMoreActionSheet';
                entity = tango.bind(report)(zulu, entity, mike);
                return entity;
            };
            yankee['onPress'] = backup;
            backup = 29;
            backup = output[backup];
            backup = kilo.bind(tango)(backup);
            kilo = backup.MoreHorizontalIcon;
            backup = {};
            output = output[echo];
            output = result.bind(tango)(output);
            output = output.colors;
            output = output.WHITE;
            backup['color'] = output;
            backup['size'] = sizing;
            backup = foxtrot.bind(tango)(kilo, backup);
            yankee['children'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[1] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 1357:
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['SHEET_HANDLE_CONTAINER_HEIGHT'] = mike;
    mike = 161;
    zulu['EXPANDED_HEADER_HEIGHT'] = mike;
    return entity;
})();