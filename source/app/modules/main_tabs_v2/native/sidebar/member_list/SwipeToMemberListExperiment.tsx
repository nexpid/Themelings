// app/modules/main_tabs_v2/native/sidebar/member_list/SwipeToMemberListExperiment.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    tangon = {};
    yankee = true;
    tangon['value'] = yankee;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    report = golfie[entity];
    tangon = argBaz;
    entity = undefined;
    tangon = tangon.bind(entity)(report);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = golfie[tangon];
    option = oscard.bind(entity)(tangon);
    report = option.createExperiment;
    tangon = {'kind': 'user', 'id': '2024-12_swipe_to_view_memberlist', 'label': 'Swipe to view member list'};
    verify = {};
    offset = false;
    verify['enabled'] = offset;
    tangon['defaultConfig'] = verify;
    offset = {'id': 1, 'label': 'Swipe to view member list is enabled'};
    verify = {};
    verify['enabled'] = yankee;
    offset['config'] = verify;
    verify = new Array(1);
    verify[0] = offset;
    tangon['treatments'] = verify;
    tangon = report.bind(option)(tangon);
    var _closure1_slot3 = tangon;
    report = 3;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/main_tabs_v2/native/sidebar/member_list/SwipeToMemberListExperiment.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    tangon = function(argFoo) { // Original name: getIsSwipeToMemberListExperimentEnabled
        tangon = _closure1_slot3;
        zuuluu = tangon.getCurrentConfig;
        michal = {};
        entity = argFoo;
        michal['location'] = entity;
        entity = {};
        oscard = true;
        entity['autoTrackExposure'] = oscard;
        report = _closure1_slot2;
        report = report.swipeToReply;
        entity['disable'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        entity = entity.enabled;
        return entity;
    };
    zuuluu['getIsSwipeToMemberListExperimentEnabled'] = tangon;
    tangon = function(argFoo) { // Original name: useIsSwipeToMemberListExperimentEnabled
        tangon = _closure1_slot3;
        zuuluu = tangon.useExperiment;
        michal = {};
        entity = argFoo;
        michal['location'] = entity;
        entity = {};
        report = true;
        entity['autoTrackExposure'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        entity = entity.enabled;
        return entity;
    };
    zuuluu['useIsSwipeToMemberListExperimentEnabled'] = tangon;
    michal = function() { // Original name: useIsSwipeToMemberListAllowed
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        michal = 2;
        zuuluu = zuuluu[michal];
        michal = undefined;
        report = tangon.bind(michal)(zuuluu);
        tangon = report.useStateFromStores;
        michal = _closure1_slot2;
        zuuluu = new Array(1);
        zuuluu[0] = michal;
        michal = function() {
            entity = _closure1_slot2;
            entity = entity.swipeToReply;
            return entity;
        };
        report = tangon.bind(report)(zuuluu, michal);
        tangon = _closure1_slot3;
        zuuluu = tangon.useExperiment;
        michal = {};
        entity = 'useIsMessageSwipeActionsEnabled';
        michal['location'] = entity;
        entity = {};
        oscard = true;
        entity['autoTrackExposure'] = oscard;
        entity['disable'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        entity = entity.enabled;
        return entity;
    };
    zuuluu['useIsSwipeToMemberListAllowed'] = michal;
    return entity;
})();