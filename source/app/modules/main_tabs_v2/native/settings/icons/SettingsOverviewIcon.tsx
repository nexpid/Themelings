// app/modules/main_tabs_v2/native/settings/icons/SettingsOverviewIcon.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: BadgedSettingsIcon
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            output = entity.color;
            report = entity.showRedDot;
            entity = _closure1_slot7;
            tangon = undefined;
            foxtra = entity.bind(tangon)();
            zuuluu = _closure1_slot4;
            michal = _closure1_slot3;
            entity = {};
            oscard = foxtra.container;
            entity['style'] = oscard;
            if(report) { _fun00002_ip = 104; continue _fun00001 }
 49:
            golfie = _closure1_slot4;
            oscard = _closure1_slot0;
            option = _closure1_slot2;
            report = 7;
            report = option[report];
            report = oscard.bind(tangon)(report);
            oscard = report.SettingsIcon;
            report = {};
            option = 'sm';
            report['size'] = option;
            report['color'] = output;
            report = golfie.bind(tangon)(oscard, report);
            _fun00002_ip = 261; continue _fun00001;
 104:
            option = _closure1_slot5;
            golfie = _closure1_slot3;
            oscard = {};
            romeon = _closure1_slot4;
            yankee = _closure1_slot1;
            result = _closure1_slot2;
            verify = 3;
            verify = result[verify];
            yankee = yankee.bind(tangon)(verify);
            verify = {};
            kiloes = _closure1_slot6;
            backup = new Array(1);
            backup[0] = kiloes;
            verify['cutouts'] = backup;
            sizing = _closure1_slot4;
            kiloes = _closure1_slot0;
            backup = 7;
            backup = result[backup];
            backup = kiloes.bind(tangon)(backup);
            kiloes = backup.SettingsIcon;
            backup = {};
            result = 'sm';
            backup['size'] = result;
            backup['color'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            verify['children'] = backup;
            yankee = romeon.bind(tangon)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            romeon = _closure1_slot4;
            yankee = _closure1_slot3;
            offset = {};
            foxtra = foxtra.dot;
            offset['style'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            report = option.bind(tangon)(golfie, oscard);
 261:
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot8 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot4 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = {};
    option = 3;
    option = oscard[option];
    option = report.bind(entity)(option);
    option = option.CutoutShape;
    option = option.Circle;
    tangon['shape'] = option;
    option = 4;
    option = oscard[option];
    option = report.bind(entity)(option);
    option = option.ICON_SIZE;
    verify = option.sm;
    option = 8.5;
    option = verify - option;
    tangon['x'] = option;
    option = -1;
    tangon['y'] = option;
    option = 10;
    tangon['size'] = option;
    var _closure1_slot6 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    yankee = 6;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.WHITE;
    offset['color'] = foxtra;
    tangon['icon'] = offset;
    offset = {'height': 20, 'width': 20, 'aspectRatio': 1, 'position': 'relative', 'alignItems': 'center', 'justifyContent': 'center'};
    tangon['container'] = offset;
    offset = {'position': 'absolute', 'height': 6.5, 'width': 6.5, 'backgroundColor': null, 'borderRadius': null, 'right': 0.1, 'top': 0.7};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.STATUS_DANGER;
    offset['backgroundColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.lg;
    offset['borderRadius'] = yankee;
    tangon['dot'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot7 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        entity = argFoo;
        report = entity.color;
        entity = entity.isBadged;
        tangon = _closure1_slot4;
        zuuluu = _closure1_slot8;
        michal = {};
        michal['color'] = report;
        michal['showRedDot'] = entity;
        entity = undefined;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/settings/icons/SettingsOverviewIcon.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();