// app/modules/main_tabs_v2/native/settings/definitions/CopyClientInfoSetting.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    verify = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = golfie;
    michal = function(argFoo) { // Original name: getClientInfoString
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = null;
            zuuluu = entity == michal;
            tangon = 'N/A';
            entity = tangon;
            if(zuuluu) { _fun00002_ip = 35; continue _fun00001 }
 21:
            zuuluu = '';
            entity = tangon;
            if(!(zuuluu !== michal)) { _fun00002_ip = 35; continue _fun00001 }
 32:
            entity = michal;
 35:
            return entity;
        }
    };
    var _closure1_slot7 = michal;
    entity = function() { // Original name: getClientInfo
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            zuuluu = _closure1_slot3;
            entity = zuuluu.getCurrentBuildOverride;
            entity = entity.bind(zuuluu)();
            zuuluu = entity.overrides;
            option = null;
            entity = option == zuuluu;
            tangon = undefined;
            oscard = undefined;
            if(entity) { _fun00004_ip = 66; continue _fun00003 }
 36:
            report = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 5;
            entity = golfie[entity];
            entity = report.bind(tangon)(entity);
            entity = entity.DEVICE_FIELD;
            oscard = zuuluu[entity];
 66:
            entity = _closure1_slot6;
            zuuluu = entity.Manifest;
            entity = zuuluu.trim;
            entity = entity.bind(zuuluu)();
            zuuluu = entity.length;
            entity = 0;
            entity = zuuluu > entity;
            zuuluu = 'N/A';
            report = zuuluu;
            if(!entity) { _fun00004_ip = 119; continue _fun00003 }
 109:
            entity = _closure1_slot6;
            report = entity.Manifest;
 119:
            entity = _closure1_slot7;
            golfie = _closure1_slot6;
            golfie = golfie.Build;
            golfie = entity.bind(tangon)(golfie);
            option = option != oscard;
            if(!option) { _fun00004_ip = 150; continue _fun00003 }
 145:
            zuuluu = oscard.id;
 150:
            oscard = entity.bind(tangon)(zuuluu);
            entity = {};
            zuuluu = _closure1_slot7;
            option = _closure1_slot6;
            option = option.Version;
            option = zuuluu.bind(tangon)(option);
            entity['appVersion'] = option;
            entity['buildNumber'] = golfie;
            entity['buildOverride'] = oscard;
            entity['manifest'] = report;
            michal = _closure1_slot6;
            michal = michal.ReleaseChannel;
            michal = zuuluu.bind(tangon)(michal);
            entity['releaseChannel'] = michal;
            return entity;
        }
    };
    var _closure1_slot8 = entity;
    entity = function(argFoo) { // Original name: copyToast
        zuuluu = _closure1_slot0;
        tangon = _closure1_slot2;
        entity = 6;
        michal = tangon[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.copy;
        michal = argFoo;
        michal = report.bind(oscard)(michal);
        michal = 7;
        michal = tangon[michal];
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.presentCopiedToClipboard;
        michal = michal.bind(zuuluu)();
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = function() { // Original name: ClientClientInfoActionSheet
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            tangon = _closure1_slot5;
            yankee = _closure1_slot0;
            foxtra = _closure1_slot2;
            entity = 8;
            entity = foxtra[entity];
            zuuluu = undefined;
            entity = yankee.bind(zuuluu)(entity);
            michal = entity.ActionSheet;
            entity = {};
            golfie = _closure1_slot4;
            report = 9;
            report = foxtra[report];
            report = yankee.bind(zuuluu)(report);
            oscard = report.BottomSheetTitleHeader;
            report = {};
            output = 10;
            option = foxtra[output];
            option = yankee.bind(zuuluu)(option);
            offset = option.intl;
            verify = offset.string;
            option = foxtra[output];
            option = yankee.bind(zuuluu)(option);
            option = option.t;
            option = option.Na2lFx;
            option = verify.bind(offset)(option);
            report['title'] = option;
            report = golfie.bind(zuuluu)(oscard, report);
            entity['header'] = report;
            golfie = _closure1_slot5;
            verify = 11;
            report = foxtra[verify];
            report = yankee.bind(zuuluu)(report);
            report = report.ActionSheetRow;
            oscard = report.Group;
            report = {};
            kiloes = _closure1_slot4;
            option = foxtra[verify];
            option = yankee.bind(zuuluu)(option);
            offset = option.ActionSheetRow;
            option = {};
            sizing = foxtra[output];
            sizing = yankee.bind(zuuluu)(sizing);
            echoed = sizing.intl;
            result = echoed.string;
            sizing = foxtra[output];
            sizing = yankee.bind(zuuluu)(sizing);
            sizing = sizing.t;
            sizing = sizing.H66MEh;
            sizing = result.bind(echoed)(sizing);
            option['label'] = sizing;
            result = _closure1_slot8;
            sizing = result.bind(zuuluu)();
            sizing = sizing.appVersion;
            option['subLabel'] = sizing;
            sizing = function() { // Original name: onPress
                zuuluu = _closure1_slot9;
                michal = _closure1_slot8;
                entity = undefined;
                michal = michal.bind(entity)();
                michal = michal.appVersion;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            option['onPress'] = sizing;
            offset = kiloes.bind(zuuluu)(offset, option);
            option = new Array(6);
            option[0] = offset;
            sizing = _closure1_slot4;
            offset = foxtra[verify];
            offset = yankee.bind(zuuluu)(offset);
            kiloes = offset.ActionSheetRow;
            offset = {};
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            echoed = echoed.t;
            echoed = echoed.zuaWIi;
            echoed = update.bind(source)(echoed);
            offset['label'] = echoed;
            echoed = result.bind(zuuluu)();
            echoed = echoed.buildNumber;
            offset['subLabel'] = echoed;
            echoed = function() { // Original name: onPress
                zuuluu = _closure1_slot9;
                michal = _closure1_slot8;
                entity = undefined;
                michal = michal.bind(entity)();
                michal = michal.buildNumber;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            offset['onPress'] = echoed;
            offset = sizing.bind(zuuluu)(kiloes, offset);
            option[1] = offset;
            sizing = _closure1_slot4;
            offset = foxtra[verify];
            offset = yankee.bind(zuuluu)(offset);
            kiloes = offset.ActionSheetRow;
            offset = {};
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            echoed = echoed.t;
            echoed = echoed.YD/2+P;
            echoed = update.bind(source)(echoed);
            offset['label'] = echoed;
            echoed = result.bind(zuuluu)();
            echoed = echoed.releaseChannel;
            offset['subLabel'] = echoed;
            echoed = function() { // Original name: onPress
                zuuluu = _closure1_slot9;
                michal = _closure1_slot8;
                entity = undefined;
                michal = michal.bind(entity)();
                michal = michal.releaseChannel;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            offset['onPress'] = echoed;
            offset = sizing.bind(zuuluu)(kiloes, offset);
            option[2] = offset;
            sizing = _closure1_slot4;
            offset = foxtra[verify];
            offset = yankee.bind(zuuluu)(offset);
            kiloes = offset.ActionSheetRow;
            offset = {};
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            echoed = echoed.t;
            echoed = echoed.4bhpIS;
            echoed = update.bind(source)(echoed);
            offset['label'] = echoed;
            echoed = result.bind(zuuluu)();
            echoed = echoed.manifest;
            offset['subLabel'] = echoed;
            echoed = function() { // Original name: onPress
                zuuluu = _closure1_slot9;
                michal = _closure1_slot8;
                entity = undefined;
                michal = michal.bind(entity)();
                michal = michal.manifest;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            offset['onPress'] = echoed;
            offset = sizing.bind(zuuluu)(kiloes, offset);
            option[3] = offset;
            sizing = _closure1_slot4;
            offset = foxtra[verify];
            offset = yankee.bind(zuuluu)(offset);
            kiloes = offset.ActionSheetRow;
            offset = {};
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = foxtra[output];
            echoed = yankee.bind(zuuluu)(echoed);
            echoed = echoed.t;
            echoed = echoed.Wj3LW1;
            echoed = update.bind(source)(echoed);
            offset['label'] = echoed;
            result = result.bind(zuuluu)();
            result = result.buildOverride;
            offset['subLabel'] = result;
            result = function() { // Original name: onPress
                zuuluu = _closure1_slot9;
                michal = _closure1_slot8;
                entity = undefined;
                michal = michal.bind(entity)();
                michal = michal.buildOverride;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            offset['onPress'] = result;
            offset = sizing.bind(zuuluu)(kiloes, offset);
            option[4] = offset;
            offset = 12;
            offset = foxtra[offset];
            yankee = yankee.bind(zuuluu)(offset);
            offset = yankee.isFabric;
            yankee = offset.bind(yankee)();
            offset = null;
            if(!yankee) { _fun00006_ip = 778; continue _fun00005 }
 720:
            kiloes = _closure1_slot4;
            foxtra = _closure1_slot0;
            yankee = _closure1_slot2;
            yankee = yankee[verify];
            yankee = foxtra.bind(zuuluu)(yankee);
            foxtra = yankee.ActionSheetRow;
            yankee = {'label': 'React Native New Architecture', 'subLabel': 'Enabled'};
            sizing = function() { // Original name: onPress
                zuuluu = _closure1_slot9;
                entity = undefined;
                michal = 'React Native New Architecture is enabled.';
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            yankee['onPress'] = sizing;
            offset = kiloes.bind(zuuluu)(foxtra, yankee);
 778:
            option[5] = offset;
            report['children'] = option;
            oscard = golfie.bind(zuuluu)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot4;
            sizing = _closure1_slot0;
            foxtra = _closure1_slot2;
            oscard = foxtra[verify];
            oscard = sizing.bind(zuuluu)(oscard);
            oscard = oscard.ActionSheetRow;
            golfie = oscard.Group;
            oscard = {};
            offset = true;
            oscard['hasIcons'] = offset;
            yankee = _closure1_slot4;
            verify = foxtra[verify];
            verify = sizing.bind(zuuluu)(verify);
            offset = verify.ActionSheetRow;
            verify = {};
            result = _closure1_slot4;
            backup = 13;
            backup = foxtra[backup];
            backup = sizing.bind(zuuluu)(backup);
            kiloes = backup.CopyIcon;
            backup = {};
            backup = result.bind(zuuluu)(kiloes, backup);
            verify['icon'] = backup;
            backup = foxtra[output];
            backup = sizing.bind(zuuluu)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = foxtra[output];
            foxtra = sizing.bind(zuuluu)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.7dqZ6O;
            foxtra = backup.bind(kiloes)(foxtra);
            verify['label'] = foxtra;
            romeon = function() { // Original name: onPress
                zuuluu = _closure1_slot8;
                entity = undefined;
                tangon = zuuluu.bind(entity)();
                kiloes = tangon.appVersion;
                backup = tangon.buildNumber;
                ctrled = tangon.releaseChannel;
                result = tangon.buildOverride;
                zuuluu = _closure1_slot9;
                update = tangon.manifest;
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                michal = 14;
                oscard = report[michal];
                golfie = tangon.bind(entity)(oscard);
                oscard = golfie.getDeviceInfo;
                verify = oscard.bind(golfie)();
                michal = report[michal];
                tangon = tangon.bind(entity)(michal);
                michal = tangon.getSystemVersion;
                sequen = michal.bind(tangon)();
                michal = global;
                tangon = michal.HermesInternal;
                golfie = tangon.concat;
                cntext = 'Device: ';
                config = ' OS ';
                vacuum = ';';
                record = verify;
                sizing = cntext[golfie](record, config, sequen, vacuum, ctrled);
                michal = michal.HermesInternal;
                verify = michal.concat;
                cntext = 'App: ';
                config = ' (';
                vacuum = ') ';
                source = '; Manifest: ';
                echoed = '; Build Override: ';
                output = '; ';
                record = kiloes;
                sequen = backup;
                michal = cntext[verify](record, config, sequen, vacuum, ctrled, source, update, echoed, result, output, sizing, kiloes);
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            verify['onPress'] = romeon;
            verify = yankee.bind(zuuluu)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(zuuluu)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = tangon.bind(zuuluu)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = global;
    yankee = entity.Object;
    offset = yankee.defineProperty;
    tangon = {};
    report = true;
    tangon['value'] = report;
    entity = '__esModule';
    entity = offset.bind(yankee)(zuuluu, entity, tangon);
    entity = 0;
    tangon = golfie[entity];
    entity = undefined;
    tangon = verify.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    verify = tangon.RendererType;
    tangon = 2;
    offset = golfie[tangon];
    offset = oscard.bind(entity)(offset);
    offset = offset.jsx;
    var _closure1_slot4 = offset;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    offset = golfie[tangon];
    tangon = argCor;
    offset = tangon.bind(entity)(offset);
    tangon = offset.getConstants;
    tangon = tangon.bind(offset)();
    var _closure1_slot6 = tangon;
    tangon = {};
    verify = verify.PRESSABLE;
    tangon['type'] = verify;
    verify = function() { // Original name: title
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 10;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.Na2lFx;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    tangon['title'] = verify;
    verify = null;
    tangon['parent'] = verify;
    verify = 15;
    verify = golfie[verify];
    verify = oscard.bind(entity)(verify);
    verify = verify.ClipboardListIcon;
    tangon['IconComponent'] = verify;
    option = function() { // Original name: handleClientInfoPress
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 4;
        michal = michal[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.openLazy;
        michal = global;
        oscard = michal.Promise;
        zuuluu = oscard.resolve;
        michal = {};
        golfie = _closure1_slot10;
        michal['default'] = golfie;
        zuuluu = zuuluu.bind(oscard)(michal);
        michal = 'ClientClientInfoActionSheet';
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    tangon['onPress'] = option;
    option = 16;
    option = golfie[option];
    option = oscard.bind(entity)(option);
    option = option.DeveloperMode;
    option = option.useSetting;
    tangon['usePredicate'] = option;
    tangon['withArrow'] = report;
    report = 17;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/main_tabs_v2/native/settings/definitions/CopyClientInfoSetting.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['getClientInfoString'] = michal;
    return entity;
})();