// app/modules/main_tabs_v2/native/settings/definitions/CopyClientInfoSetting.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    verify = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = golf;
    mike = function(argFoo) { // Original name: getClientInfoString
        _fun98164: for(var _fun98164_ip = 0; ; ) switch(_fun98164_ip) {
 0:
            mike = argFoo;
            entity = null;
            zulu = entity == mike;
            tango = 'N/A';
            entity = tango;
            if(zulu) { _fun98164_ip = 35; continue _fun98164 }
 21:
            zulu = '';
            entity = tango;
            if(!(zulu !== mike)) { _fun98164_ip = 35; continue _fun98164 }
 32:
            entity = mike;
 35:
            return entity;
        }
    };
    var _closure1_slot7 = mike;
    entity = function() { // Original name: getClientInfo
        _fun98165: for(var _fun98165_ip = 0; ; ) switch(_fun98165_ip) {
 0:
            zulu = _closure1_slot3;
            entity = zulu.getCurrentBuildOverride;
            entity = entity.bind(zulu)();
            zulu = entity.overrides;
            options = null;
            entity = options == zulu;
            tango = undefined;
            oscar = undefined;
            if(entity) { _fun98165_ip = 66; continue _fun98165 }
 36:
            report = _closure1_slot0;
            golf = _closure1_slot2;
            entity = 5;
            entity = golf[entity];
            entity = report.bind(tango)(entity);
            entity = entity.DEVICE_FIELD;
            oscar = zulu[entity];
 66:
            entity = _closure1_slot6;
            zulu = entity.Manifest;
            entity = zulu.trim;
            entity = entity.bind(zulu)();
            zulu = entity.length;
            entity = 0;
            entity = zulu > entity;
            zulu = 'N/A';
            report = zulu;
            if(!entity) { _fun98165_ip = 119; continue _fun98165 }
 109:
            entity = _closure1_slot6;
            report = entity.Manifest;
 119:
            entity = _closure1_slot7;
            golf = _closure1_slot6;
            golf = golf.Build;
            golf = entity.bind(tango)(golf);
            options = options != oscar;
            if(!options) { _fun98165_ip = 150; continue _fun98165 }
 145:
            zulu = oscar.id;
 150:
            oscar = entity.bind(tango)(zulu);
            entity = {};
            zulu = _closure1_slot7;
            options = _closure1_slot6;
            options = options.Version;
            options = zulu.bind(tango)(options);
            entity['appVersion'] = options;
            entity['buildNumber'] = golf;
            entity['buildOverride'] = oscar;
            entity['manifest'] = report;
            mike = _closure1_slot6;
            mike = mike.ReleaseChannel;
            mike = zulu.bind(tango)(mike);
            entity['releaseChannel'] = mike;
            return entity;
        }
    };
    var _closure1_slot8 = entity;
    entity = function(argFoo) { // Original name: copyToast
        zulu = _closure1_slot0;
        tango = _closure1_slot2;
        entity = 6;
        mike = tango[entity];
        entity = undefined;
        oscar = zulu.bind(entity)(mike);
        report = oscar.copy;
        mike = argFoo;
        mike = report.bind(oscar)(mike);
        mike = 7;
        mike = tango[mike];
        zulu = zulu.bind(entity)(mike);
        mike = zulu.presentCopiedToClipboard;
        mike = mike.bind(zulu)();
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = function() { // Original name: ClientClientInfoActionSheet
        _fun98167: for(var _fun98167_ip = 0; ; ) switch(_fun98167_ip) {
 0:
            tango = _closure1_slot5;
            yankee = _closure1_slot0;
            foxtrot = _closure1_slot2;
            entity = 8;
            entity = foxtrot[entity];
            zulu = undefined;
            entity = yankee.bind(zulu)(entity);
            mike = entity.ActionSheet;
            entity = {};
            golf = _closure1_slot4;
            report = 9;
            report = foxtrot[report];
            report = yankee.bind(zulu)(report);
            oscar = report.BottomSheetTitleHeader;
            report = {};
            output = 10;
            options = foxtrot[output];
            options = yankee.bind(zulu)(options);
            offset = options.intl;
            verify = offset.string;
            options = foxtrot[output];
            options = yankee.bind(zulu)(options);
            options = options.t;
            options = options.Na2lFx;
            options = verify.bind(offset)(options);
            report['title'] = options;
            report = golf.bind(zulu)(oscar, report);
            entity['header'] = report;
            golf = _closure1_slot5;
            verify = 11;
            report = foxtrot[verify];
            report = yankee.bind(zulu)(report);
            report = report.ActionSheetRow;
            oscar = report.Group;
            report = {};
            kilo = _closure1_slot4;
            options = foxtrot[verify];
            options = yankee.bind(zulu)(options);
            offset = options.ActionSheetRow;
            options = {};
            sizing = foxtrot[output];
            sizing = yankee.bind(zulu)(sizing);
            echo = sizing.intl;
            result = echo.string;
            sizing = foxtrot[output];
            sizing = yankee.bind(zulu)(sizing);
            sizing = sizing.t;
            sizing = sizing.H66MEh;
            sizing = result.bind(echo)(sizing);
            options['label'] = sizing;
            result = _closure1_slot8;
            sizing = result.bind(zulu)();
            sizing = sizing.appVersion;
            options['subLabel'] = sizing;
            sizing = function() { // Original name: onPress
                zulu = _closure1_slot9;
                mike = _closure1_slot8;
                entity = undefined;
                mike = mike.bind(entity)();
                mike = mike.appVersion;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            options['onPress'] = sizing;
            offset = kilo.bind(zulu)(offset, options);
            options = new Array(6);
            options[0] = offset;
            sizing = _closure1_slot4;
            offset = foxtrot[verify];
            offset = yankee.bind(zulu)(offset);
            kilo = offset.ActionSheetRow;
            offset = {};
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            source = echo.intl;
            update = source.string;
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            echo = echo.t;
            echo = echo.zuaWIi;
            echo = update.bind(source)(echo);
            offset['label'] = echo;
            echo = result.bind(zulu)();
            echo = echo.buildNumber;
            offset['subLabel'] = echo;
            echo = function() { // Original name: onPress
                zulu = _closure1_slot9;
                mike = _closure1_slot8;
                entity = undefined;
                mike = mike.bind(entity)();
                mike = mike.buildNumber;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            offset['onPress'] = echo;
            offset = sizing.bind(zulu)(kilo, offset);
            options[1] = offset;
            sizing = _closure1_slot4;
            offset = foxtrot[verify];
            offset = yankee.bind(zulu)(offset);
            kilo = offset.ActionSheetRow;
            offset = {};
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            source = echo.intl;
            update = source.string;
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            echo = echo.t;
            echo = echo.YD/2+P;
            echo = update.bind(source)(echo);
            offset['label'] = echo;
            echo = result.bind(zulu)();
            echo = echo.releaseChannel;
            offset['subLabel'] = echo;
            echo = function() { // Original name: onPress
                zulu = _closure1_slot9;
                mike = _closure1_slot8;
                entity = undefined;
                mike = mike.bind(entity)();
                mike = mike.releaseChannel;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            offset['onPress'] = echo;
            offset = sizing.bind(zulu)(kilo, offset);
            options[2] = offset;
            sizing = _closure1_slot4;
            offset = foxtrot[verify];
            offset = yankee.bind(zulu)(offset);
            kilo = offset.ActionSheetRow;
            offset = {};
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            source = echo.intl;
            update = source.string;
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            echo = echo.t;
            echo = echo.4bhpIS;
            echo = update.bind(source)(echo);
            offset['label'] = echo;
            echo = result.bind(zulu)();
            echo = echo.manifest;
            offset['subLabel'] = echo;
            echo = function() { // Original name: onPress
                zulu = _closure1_slot9;
                mike = _closure1_slot8;
                entity = undefined;
                mike = mike.bind(entity)();
                mike = mike.manifest;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            offset['onPress'] = echo;
            offset = sizing.bind(zulu)(kilo, offset);
            options[3] = offset;
            sizing = _closure1_slot4;
            offset = foxtrot[verify];
            offset = yankee.bind(zulu)(offset);
            kilo = offset.ActionSheetRow;
            offset = {};
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            source = echo.intl;
            update = source.string;
            echo = foxtrot[output];
            echo = yankee.bind(zulu)(echo);
            echo = echo.t;
            echo = echo.Wj3LW1;
            echo = update.bind(source)(echo);
            offset['label'] = echo;
            result = result.bind(zulu)();
            result = result.buildOverride;
            offset['subLabel'] = result;
            result = function() { // Original name: onPress
                zulu = _closure1_slot9;
                mike = _closure1_slot8;
                entity = undefined;
                mike = mike.bind(entity)();
                mike = mike.buildOverride;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            offset['onPress'] = result;
            offset = sizing.bind(zulu)(kilo, offset);
            options[4] = offset;
            offset = 12;
            offset = foxtrot[offset];
            yankee = yankee.bind(zulu)(offset);
            offset = yankee.isFabric;
            yankee = offset.bind(yankee)();
            offset = null;
            if(!yankee) { _fun98167_ip = 768; continue _fun98167 }
 714:
            kilo = _closure1_slot4;
            foxtrot = _closure1_slot0;
            yankee = _closure1_slot2;
            yankee = yankee[verify];
            yankee = foxtrot.bind(zulu)(yankee);
            foxtrot = yankee.ActionSheetRow;
            yankee = {'label': 'React Native New Architecture', 'subLabel': 'Enabled'};
            sizing = function() { // Original name: onPress
                zulu = _closure1_slot9;
                entity = undefined;
                mike = 'React Native New Architecture is enabled.';
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            yankee['onPress'] = sizing;
            offset = kilo.bind(zulu)(foxtrot, yankee);
 768:
            options[5] = offset;
            report['children'] = options;
            oscar = golf.bind(zulu)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot4;
            sizing = _closure1_slot0;
            foxtrot = _closure1_slot2;
            oscar = foxtrot[verify];
            oscar = sizing.bind(zulu)(oscar);
            oscar = oscar.ActionSheetRow;
            golf = oscar.Group;
            oscar = {};
            offset = true;
            oscar['hasIcons'] = offset;
            yankee = _closure1_slot4;
            verify = foxtrot[verify];
            verify = sizing.bind(zulu)(verify);
            offset = verify.ActionSheetRow;
            verify = {};
            result = _closure1_slot4;
            backup = 13;
            backup = foxtrot[backup];
            backup = sizing.bind(zulu)(backup);
            kilo = backup.CopyIcon;
            backup = {};
            backup = result.bind(zulu)(kilo, backup);
            verify['icon'] = backup;
            backup = foxtrot[output];
            backup = sizing.bind(zulu)(backup);
            kilo = backup.intl;
            backup = kilo.string;
            foxtrot = foxtrot[output];
            foxtrot = sizing.bind(zulu)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.7dqZ6O;
            foxtrot = backup.bind(kilo)(foxtrot);
            verify['label'] = foxtrot;
            romeo = function() { // Original name: onPress
                zulu = _closure1_slot8;
                entity = undefined;
                tango = zulu.bind(entity)();
                kilo = tango.appVersion;
                backup = tango.buildNumber;
                control = tango.releaseChannel;
                result = tango.buildOverride;
                zulu = _closure1_slot9;
                update = tango.manifest;
                tango = _closure1_slot0;
                report = _closure1_slot2;
                mike = 14;
                oscar = report[mike];
                golf = tango.bind(entity)(oscar);
                oscar = golf.getDeviceInfo;
                verify = oscar.bind(golf)();
                mike = report[mike];
                tango = tango.bind(entity)(mike);
                mike = tango.getSystemVersion;
                sequence = mike.bind(tango)();
                mike = global;
                tango = mike.HermesInternal;
                golf = tango.concat;
                context = 'Device: ';
                config = ' OS ';
                vacuum = ';';
                record = verify;
                sizing = context[golf](record, config, sequence, vacuum, control);
                mike = mike.HermesInternal;
                verify = mike.concat;
                context = 'App: ';
                config = ' (';
                vacuum = ') ';
                source = '; Manifest: ';
                echo = '; Build Override: ';
                output = '; ';
                record = kilo;
                sequence = backup;
                mike = context[verify](record, config, sequence, vacuum, control, source, update, echo, result, output, sizing, kilo);
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            verify['onPress'] = romeo;
            verify = yankee.bind(zulu)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(zulu)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = tango.bind(zulu)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = global;
    yankee = entity.Object;
    offset = yankee.defineProperty;
    tango = {};
    report = true;
    tango['value'] = report;
    entity = '__esModule';
    entity = offset.bind(yankee)(zulu, entity, tango);
    entity = 0;
    tango = golf[entity];
    entity = undefined;
    tango = verify.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    verify = tango.RendererType;
    tango = 2;
    offset = golf[tango];
    offset = oscar.bind(entity)(offset);
    offset = offset.jsx;
    var _closure1_slot4 = offset;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 3;
    offset = golf[tango];
    tango = argCorge;
    offset = tango.bind(entity)(offset);
    tango = offset.getConstants;
    tango = tango.bind(offset)();
    var _closure1_slot6 = tango;
    tango = {};
    verify = verify.PRESSABLE;
    tango['type'] = verify;
    verify = function() { // Original name: title
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 10;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.Na2lFx;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    tango['title'] = verify;
    verify = null;
    tango['parent'] = verify;
    verify = 15;
    verify = golf[verify];
    verify = oscar.bind(entity)(verify);
    verify = verify.ClipboardListIcon;
    tango['IconComponent'] = verify;
    options = function() { // Original name: handleClientInfoPress
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 4;
        mike = mike[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.openLazy;
        mike = global;
        oscar = mike.Promise;
        zulu = oscar.resolve;
        mike = {};
        golf = _closure1_slot10;
        mike['default'] = golf;
        zulu = zulu.bind(oscar)(mike);
        mike = 'ClientClientInfoActionSheet';
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    tango['onPress'] = options;
    options = 16;
    options = golf[options];
    options = oscar.bind(entity)(options);
    options = options.DeveloperMode;
    options = options.useSetting;
    tango['usePredicate'] = options;
    tango['withArrow'] = report;
    report = 17;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/main_tabs_v2/native/settings/definitions/CopyClientInfoSetting.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['getClientInfoString'] = mike;
    return entity;
})();