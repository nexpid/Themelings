// app/modules/main_tabs_v2/native/settings/definitions/ChatGestureSettings.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    options = argBar;
    offset = argBaz;
    zulu = argFred;
    verify = argPlugh;
    var _closure1_slot0 = options;
    var _closure1_slot1 = offset;
    var _closure1_slot2 = verify;
    report = function() { // Original name: useHasSwipeToReplySetting
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 4;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.getCurrentConfig;
        mike = {};
        entity = 'chat utils';
        mike['location'] = entity;
        entity = {};
        report = false;
        entity['autoTrackExposure'] = report;
        entity = zulu.bind(tango)(mike, entity);
        entity = entity.enabled;
        return entity;
    };
    tango = function() { // Original name: useSwipeToReplyValue
        tango = _closure1_slot0;
        zulu = _closure1_slot2;
        mike = 6;
        zulu = zulu[mike];
        mike = undefined;
        tango = tango.bind(mike)(zulu);
        zulu = tango.useStateFromStores;
        entity = _closure1_slot3;
        mike = new Array(1);
        mike[0] = entity;
        entity = function() {
            _fun97726: for(var _fun97726_ip = 0; ; ) switch(_fun97726_ip) {
 0:
                entity = _closure1_slot3;
                entity = entity.swipeToReply;
                mike = _closure1_slot6;
                if(entity) { _fun97726_ip = 28; continue _fun97726 }
 20:
                entity = mike.CHANNEL_DETAILS;
                _fun97726_ip = 34; continue _fun97726;
 28:
                entity = mike.REPLY;
 34:
                return entity;
            }
        };
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = function(argFoo) { // Original name: onSwipeToReplyValueChange
        entity = _closure1_slot6;
        mike = entity.REPLY;
        entity = argFoo;
        report = entity === mike;
        zulu = _closure1_slot1;
        tango = _closure1_slot2;
        entity = 7;
        mike = tango[entity];
        entity = undefined;
        options = zulu.bind(entity)(mike);
        golf = options.track;
        mike = _closure1_slot4;
        oscar = mike.USER_SETTINGS_SWIPE_TO_REPLY_TOGGLE;
        mike = {};
        mike['enabled'] = report;
        verify = {};
        offset = _closure1_slot5;
        offset = offset.SETTINGS_TEXT_AND_IMAGES;
        verify['section'] = offset;
        mike['location'] = verify;
        mike = golf.bind(options)(oscar, mike);
        mike = 8;
        mike = tango[mike];
        tango = zulu.bind(entity)(mike);
        zulu = tango.updatedUnsyncedSettings;
        mike = {};
        mike['swipeToReply'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    entity = global;
    romeo = entity.Object;
    yankee = romeo.defineProperty;
    oscar = {};
    entity = true;
    oscar['value'] = entity;
    entity = '__esModule';
    entity = yankee.bind(romeo)(zulu, entity, oscar);
    entity = 0;
    oscar = verify[entity];
    entity = undefined;
    oscar = offset.bind(entity)(oscar);
    var _closure1_slot3 = oscar;
    oscar = 1;
    oscar = verify[oscar];
    oscar = options.bind(entity)(oscar);
    offset = oscar.MobileSetting;
    oscar = 2;
    oscar = verify[oscar];
    oscar = options.bind(entity)(oscar);
    yankee = oscar.RendererType;
    oscar = 3;
    oscar = verify[oscar];
    oscar = options.bind(entity)(oscar);
    romeo = oscar.AnalyticEvents;
    var _closure1_slot4 = romeo;
    oscar = oscar.AnalyticsSections;
    var _closure1_slot5 = oscar;
    oscar = {};
    romeo = 'details';
    oscar['CHANNEL_DETAILS'] = romeo;
    romeo = 'reply';
    oscar['REPLY'] = romeo;
    var _closure1_slot6 = oscar;
    oscar = {};
    yankee = yankee.RADIO;
    oscar['type'] = yankee;
    yankee = function() { // Original name: title
        report = _closure1_slot0;
        oscar = _closure1_slot2;
        entity = 5;
        mike = oscar[entity];
        tango = undefined;
        mike = report.bind(tango)(mike);
        zulu = mike.intl;
        mike = zulu.string;
        entity = oscar[entity];
        entity = report.bind(tango)(entity);
        entity = entity.t;
        entity = entity.Jf0C/f;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    oscar['title'] = yankee;
    offset = offset.CHAT;
    oscar['parent'] = offset;
    oscar['useValue'] = tango;
    oscar['onValueChange'] = mike;
    golf = function() { // Original name: useHasSwipeToReplySettingOptions
        mike = {};
        entity = _closure1_slot6;
        entity = entity.CHANNEL_DETAILS;
        mike['value'] = entity;
        golf = _closure1_slot0;
        options = _closure1_slot2;
        zulu = 5;
        entity = options[zulu];
        oscar = undefined;
        entity = golf.bind(oscar)(entity);
        verify = entity.intl;
        report = verify.string;
        entity = options[zulu];
        entity = golf.bind(oscar)(entity);
        entity = entity.t;
        entity = entity.6eXLcH;
        entity = report.bind(verify)(entity);
        mike['label'] = entity;
        entity = options[zulu];
        entity = golf.bind(oscar)(entity);
        verify = entity.intl;
        report = verify.string;
        entity = options[zulu];
        entity = golf.bind(oscar)(entity);
        entity = entity.t;
        entity = entity.ohhhDA;
        entity = report.bind(verify)(entity);
        mike['subLabel'] = entity;
        entity = new Array(2);
        entity[0] = mike;
        mike = {};
        tango = _closure1_slot6;
        tango = tango.REPLY;
        mike['value'] = tango;
        tango = options[zulu];
        tango = golf.bind(oscar)(tango);
        report = tango.intl;
        tango = report.string;
        zulu = options[zulu];
        zulu = golf.bind(oscar)(zulu);
        zulu = zulu.t;
        zulu = zulu.3tYNDQ;
        zulu = tango.bind(report)(zulu);
        mike['label'] = zulu;
        entity[1] = mike;
        return entity;
    };
    oscar['useOptions'] = golf;
    oscar['usePredicate'] = report;
    golf = 9;
    golf = verify[golf];
    verify = options.bind(entity)(golf);
    options = verify.fileFinishedImporting;
    golf = 'modules/main_tabs_v2/native/settings/definitions/ChatGestureSettings.tsx';
    golf = options.bind(verify)(golf);
    zulu['default'] = oscar;
    zulu['useHasSwipeToReplySetting'] = report;
    zulu['useSwipeToReplyValue'] = tango;
    zulu['onSwipeToReplyValueChange'] = mike;
    return entity;
})();