// app/modules/main_tabs_v2/native/settings/definitions/ChatGestureSettings.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    option = argBar;
    offset = argBaz;
    zuuluu = argFre;
    verify = argPlu;
    var _closure1_slot0 = option;
    var _closure1_slot1 = offset;
    var _closure1_slot2 = verify;
    report = function() { // Original name: useHasSwipeToReplySetting
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 4;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.getCurrentConfig;
        michal = {};
        entity = 'chat utils';
        michal['location'] = entity;
        entity = {};
        report = false;
        entity['autoTrackExposure'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        entity = entity.enabled;
        return entity;
    };
    tangon = function() { // Original name: useSwipeToReplyValue
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot2;
        michal = 6;
        zuuluu = zuuluu[michal];
        michal = undefined;
        tangon = tangon.bind(michal)(zuuluu);
        zuuluu = tangon.useStateFromStores;
        entity = _closure1_slot3;
        michal = new Array(1);
        michal[0] = entity;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = _closure1_slot3;
                entity = entity.swipeToReply;
                michal = _closure1_slot6;
                if(entity) { _fun00002_ip = 28; continue _fun00001 }
 20:
                entity = michal.CHANNEL_DETAILS;
                _fun00002_ip = 34; continue _fun00001;
 28:
                entity = michal.REPLY;
 34:
                return entity;
            }
        };
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = function(argFoo) { // Original name: onSwipeToReplyValueChange
        entity = _closure1_slot6;
        michal = entity.REPLY;
        entity = argFoo;
        report = entity === michal;
        zuuluu = _closure1_slot1;
        tangon = _closure1_slot2;
        entity = 7;
        michal = tangon[entity];
        entity = undefined;
        option = zuuluu.bind(entity)(michal);
        golfie = option.track;
        michal = _closure1_slot4;
        oscard = michal.USER_SETTINGS_SWIPE_TO_REPLY_TOGGLE;
        michal = {};
        michal['enabled'] = report;
        verify = {};
        offset = _closure1_slot5;
        offset = offset.SETTINGS_TEXT_AND_IMAGES;
        verify['section'] = offset;
        michal['location'] = verify;
        michal = golfie.bind(option)(oscard, michal);
        michal = 8;
        michal = tangon[michal];
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.updatedUnsyncedSettings;
        michal = {};
        michal['swipeToReply'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    entity = global;
    romeon = entity.Object;
    yankee = romeon.defineProperty;
    oscard = {};
    entity = true;
    oscard['value'] = entity;
    entity = '__esModule';
    entity = yankee.bind(romeon)(zuuluu, entity, oscard);
    entity = 0;
    oscard = verify[entity];
    entity = undefined;
    oscard = offset.bind(entity)(oscard);
    var _closure1_slot3 = oscard;
    oscard = 1;
    oscard = verify[oscard];
    oscard = option.bind(entity)(oscard);
    offset = oscard.MobileSetting;
    oscard = 2;
    oscard = verify[oscard];
    oscard = option.bind(entity)(oscard);
    yankee = oscard.RendererType;
    oscard = 3;
    oscard = verify[oscard];
    oscard = option.bind(entity)(oscard);
    romeon = oscard.AnalyticEvents;
    var _closure1_slot4 = romeon;
    oscard = oscard.AnalyticsSections;
    var _closure1_slot5 = oscard;
    oscard = {};
    romeon = 'details';
    oscard['CHANNEL_DETAILS'] = romeon;
    romeon = 'reply';
    oscard['REPLY'] = romeon;
    var _closure1_slot6 = oscard;
    oscard = {};
    yankee = yankee.RADIO;
    oscard['type'] = yankee;
    yankee = function() { // Original name: title
        report = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 5;
        michal = oscard[entity];
        tangon = undefined;
        michal = report.bind(tangon)(michal);
        zuuluu = michal.intl;
        michal = zuuluu.string;
        entity = oscard[entity];
        entity = report.bind(tangon)(entity);
        entity = entity.t;
        entity = entity.Jf0C/f;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    oscard['title'] = yankee;
    offset = offset.CHAT;
    oscard['parent'] = offset;
    oscard['useValue'] = tangon;
    oscard['onValueChange'] = michal;
    golfie = function() { // Original name: useHasSwipeToReplySettingOptions
        michal = {};
        entity = _closure1_slot6;
        entity = entity.CHANNEL_DETAILS;
        michal['value'] = entity;
        golfie = _closure1_slot0;
        option = _closure1_slot2;
        zuuluu = 5;
        entity = option[zuuluu];
        oscard = undefined;
        entity = golfie.bind(oscard)(entity);
        verify = entity.intl;
        report = verify.string;
        entity = option[zuuluu];
        entity = golfie.bind(oscard)(entity);
        entity = entity.t;
        entity = entity.6eXLcH;
        entity = report.bind(verify)(entity);
        michal['label'] = entity;
        entity = option[zuuluu];
        entity = golfie.bind(oscard)(entity);
        verify = entity.intl;
        report = verify.string;
        entity = option[zuuluu];
        entity = golfie.bind(oscard)(entity);
        entity = entity.t;
        entity = entity.ohhhDA;
        entity = report.bind(verify)(entity);
        michal['subLabel'] = entity;
        entity = new Array(2);
        entity[0] = michal;
        michal = {};
        tangon = _closure1_slot6;
        tangon = tangon.REPLY;
        michal['value'] = tangon;
        tangon = option[zuuluu];
        tangon = golfie.bind(oscard)(tangon);
        report = tangon.intl;
        tangon = report.string;
        zuuluu = option[zuuluu];
        zuuluu = golfie.bind(oscard)(zuuluu);
        zuuluu = zuuluu.t;
        zuuluu = zuuluu.3tYNDQ;
        zuuluu = tangon.bind(report)(zuuluu);
        michal['label'] = zuuluu;
        entity[1] = michal;
        return entity;
    };
    oscard['useOptions'] = golfie;
    oscard['usePredicate'] = report;
    golfie = 9;
    golfie = verify[golfie];
    verify = option.bind(entity)(golfie);
    option = verify.fileFinishedImporting;
    golfie = 'modules/main_tabs_v2/native/settings/definitions/ChatGestureSettings.tsx';
    golfie = option.bind(verify)(golfie);
    zuuluu['default'] = oscard;
    zuuluu['useHasSwipeToReplySetting'] = report;
    zuuluu['useSwipeToReplyValue'] = tangon;
    zuuluu['onSwipeToReplyValueChange'] = michal;
    return entity;
})();