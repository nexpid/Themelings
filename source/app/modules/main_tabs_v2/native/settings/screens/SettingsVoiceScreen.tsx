// app/modules/main_tabs_v2/native/settings/screens/SettingsVoiceScreen.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    verify = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: KrispLogo
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot11;
            tangon = undefined;
            offset = entity.bind(tangon)();
            michal = _closure1_slot1;
            report = _closure1_slot2;
            entity = 7;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            zuuluu = entity.bind(tangon)();
            michal = _closure1_slot0;
            entity = 8;
            entity = report[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.isThemeLight;
            entity = entity.bind(michal)(zuuluu);
            michal = _closure1_slot1;
            zuuluu = _closure1_slot2;
            if(entity) { _fun00002_ip = 89; continue _fun00001 }
 75:
            entity = 10;
            entity = zuuluu[entity];
            option = michal.bind(tangon)(entity);
            _fun00002_ip = 101; continue _fun00001;
 89:
            entity = 9;
            entity = zuuluu[entity];
            option = michal.bind(tangon)(entity);
 101:
            zuuluu = _closure1_slot9;
            michal = _closure1_slot4;
            entity = {};
            report = offset.krisp;
            entity['style'] = report;
            golfie = _closure1_slot8;
            oscard = _closure1_slot5;
            report = {};
            offset = offset.logo;
            report['style'] = offset;
            report['source'] = option;
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            romeon = 11;
            option = sizing[romeon];
            option = kiloes.bind(tangon)(option);
            yankee = option.intl;
            offset = yankee.string;
            option = sizing[romeon];
            option = kiloes.bind(tangon)(option);
            option = option.t;
            option = option.vFiCS0;
            option = offset.bind(yankee)(option);
            report['accessibilityLabel'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot8;
            oscard = 12;
            oscard = sizing[oscard];
            oscard = kiloes.bind(tangon)(oscard);
            golfie = oscard.Pressable;
            oscard = {};
            offset = 13;
            offset = sizing[offset];
            offset = kiloes.bind(tangon)(offset);
            offset = offset.handleKrispLinkPressed;
            oscard['onPress'] = offset;
            yankee = _closure1_slot8;
            verify = 14;
            verify = sizing[verify];
            verify = kiloes.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-sm/medium', 'color': 'text-link', 'accessibilityRole': 'link'};
            foxtra = sizing[romeon];
            foxtra = kiloes.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            romeon = sizing[romeon];
            romeon = kiloes.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.hvVgAQ;
            romeon = foxtra.bind(backup)(romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    tangon = global;
    offset = tangon.Object;
    option = offset.defineProperty;
    golfie = {};
    entity = true;
    golfie['value'] = entity;
    entity = '__esModule';
    entity = option.bind(offset)(zuuluu, entity, golfie);
    entity = 0;
    option = oscard[entity];
    golfie = argCor;
    entity = undefined;
    golfie = golfie.bind(entity)(option);
    var _closure1_slot3 = golfie;
    golfie = 1;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    option = golfie.View;
    var _closure1_slot4 = option;
    golfie = golfie.Image;
    var _closure1_slot5 = golfie;
    golfie = 2;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.MobileSetting;
    var _closure1_slot6 = golfie;
    golfie = 3;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.HelpdeskArticles;
    var _closure1_slot7 = golfie;
    option = 4;
    option = oscard[option];
    option = report.bind(entity)(option);
    offset = option.jsx;
    var _closure1_slot8 = offset;
    option = option.jsxs;
    var _closure1_slot9 = option;
    option = 5;
    option = oscard[option];
    verify = verify.bind(entity)(option);
    option = verify.getArticleURL;
    golfie = golfie.VOICE_VIDEO_TROUBLESHOOTING;
    verify = option.bind(verify)(golfie);
    tangon = tangon.HermesInternal;
    option = tangon.concat;
    golfie = '';
    tangon = '?utm_source=discord&utm_medium=blog&utm_campaign=2020-06_help-voice-video&utm_content=--t%3Apm';
    tangon = option.bind(golfie)(verify, tangon);
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 8;
    verify = {'marginTop': 8, 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['krisp'] = verify;
    verify = {};
    verify['marginRight'] = offset;
    tangon['logo'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['slider'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 16;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/settings/screens/SettingsVoiceScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: SettingsVoiceScreen
        report = _closure1_slot3;
        tangon = report.useMemo;
        zuuluu = function() {
            michal = {};
            option = _closure1_slot0;
            verify = _closure1_slot2;
            tangon = 11;
            entity = verify[tangon];
            golfie = undefined;
            entity = option.bind(golfie)(entity);
            oscard = entity.intl;
            zuuluu = oscard.string;
            entity = verify[tangon];
            entity = option.bind(golfie)(entity);
            entity = entity.t;
            entity = entity.LKCupK;
            entity = zuuluu.bind(oscard)(entity);
            michal['label'] = entity;
            zuuluu = _closure1_slot6;
            oscard = zuuluu.INPUT_MODE;
            entity = new Array(3);
            entity[0] = oscard;
            oscard = zuuluu.AUTO_VOICE_SENSITIVITY;
            entity[1] = oscard;
            oscard = zuuluu.VOICE_SENSITIVITY;
            entity[2] = oscard;
            michal['settings'] = entity;
            entity = new Array(8);
            entity[0] = michal;
            michal = {};
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            yankee = oscard.intl;
            offset = yankee.string;
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            oscard = oscard.t;
            oscard = oscard.UXxPGB;
            oscard = offset.bind(yankee)(oscard);
            michal['label'] = oscard;
            offset = zuuluu.OUTPUT_VOLUME;
            oscard = new Array(2);
            oscard[0] = offset;
            offset = zuuluu.STREAM_OUTPUT_VOLUME;
            oscard[1] = offset;
            michal['settings'] = oscard;
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            romeon = oscard.intl;
            yankee = romeon.format;
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            oscard = oscard.t;
            offset = oscard.V+B3FB;
            oscard = {};
            foxtra = _closure1_slot10;
            oscard['guideURL'] = foxtra;
            oscard = yankee.bind(romeon)(offset, oscard);
            michal['subLabel'] = oscard;
            entity[1] = michal;
            michal = {};
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            yankee = oscard.intl;
            offset = yankee.string;
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            oscard = oscard.t;
            oscard = oscard.xbMc8v;
            oscard = offset.bind(yankee)(oscard);
            michal['label'] = oscard;
            offset = zuuluu.SOUNDBOARD_VOLUME;
            oscard = new Array(1);
            oscard[0] = offset;
            michal['settings'] = oscard;
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            romeon = oscard.intl;
            yankee = romeon.format;
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            oscard = oscard.t;
            offset = oscard.BPbGq6;
            oscard = {};
            backup = _closure1_slot1;
            foxtra = 5;
            foxtra = verify[foxtra];
            kiloes = backup.bind(golfie)(foxtra);
            backup = kiloes.getArticleURL;
            foxtra = _closure1_slot7;
            foxtra = foxtra.SOUNDBOARD;
            foxtra = backup.bind(kiloes)(foxtra);
            oscard['helpCenterArticle'] = foxtra;
            oscard = yankee.bind(romeon)(offset, oscard);
            michal['subLabel'] = oscard;
            entity[2] = michal;
            michal = {};
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            yankee = oscard.intl;
            offset = yankee.string;
            oscard = verify[tangon];
            oscard = option.bind(golfie)(oscard);
            oscard = oscard.t;
            oscard = oscard.bNqkDw;
            oscard = offset.bind(yankee)(oscard);
            michal['label'] = oscard;
            offset = zuuluu.ANDROID_MOBILE_OVERLAY;
            oscard = new Array(1);
            oscard[0] = offset;
            michal['settings'] = oscard;
            entity[3] = michal;
            michal = {};
            offset = zuuluu.NOISE_SUPPRESSION_KRISP;
            oscard = new Array(1);
            oscard[0] = offset;
            michal['settings'] = oscard;
            offset = _closure1_slot8;
            oscard = _closure1_slot12;
            report = {};
            report = offset.bind(golfie)(oscard, report);
            michal['subLabel'] = report;
            entity[4] = michal;
            michal = {};
            report = verify[tangon];
            report = option.bind(golfie)(report);
            offset = report.intl;
            oscard = offset.string;
            report = verify[tangon];
            report = option.bind(golfie)(report);
            report = report.t;
            report = report.t8QhiY;
            report = oscard.bind(offset)(report);
            michal['label'] = report;
            oscard = zuuluu.NOISE_SUPPRESSION;
            report = new Array(1);
            report[0] = oscard;
            michal['settings'] = report;
            entity[5] = michal;
            michal = {};
            report = verify[tangon];
            report = option.bind(golfie)(report);
            offset = report.intl;
            oscard = offset.string;
            report = verify[tangon];
            report = option.bind(golfie)(report);
            report = report.t;
            report = report.6I6GUl;
            report = oscard.bind(offset)(report);
            michal['label'] = report;
            oscard = zuuluu.ECHO_CANCELLATION;
            report = new Array(4);
            report[0] = oscard;
            oscard = zuuluu.SIDECHAIN_COMPRESSION;
            report[1] = oscard;
            oscard = zuuluu.AUTOMATIC_GAIN_CONTROL;
            report[2] = oscard;
            oscard = zuuluu.ADVANCED_VOICE_ACTIVITY;
            report[3] = oscard;
            michal['settings'] = report;
            entity[6] = michal;
            michal = {};
            report = verify[tangon];
            report = option.bind(golfie)(report);
            oscard = report.intl;
            report = oscard.string;
            tangon = verify[tangon];
            tangon = option.bind(golfie)(tangon);
            tangon = tangon.t;
            tangon = tangon.OBwCXF;
            tangon = report.bind(oscard)(tangon);
            michal['label'] = tangon;
            tangon = zuuluu.DISABLE_STREAM_PREVIEWS;
            zuuluu = new Array(1);
            zuuluu[0] = tangon;
            michal['settings'] = zuuluu;
            entity[7] = michal;
            return entity;
        };
        michal = new Array(0);
        report = tangon.bind(report)(zuuluu, michal);
        tangon = _closure1_slot8;
        michal = _closure1_slot0;
        zuuluu = _closure1_slot2;
        entity = 15;
        entity = zuuluu[entity];
        zuuluu = undefined;
        entity = michal.bind(zuuluu)(entity);
        michal = entity.SettingsList;
        entity = {};
        entity['sections'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();