// app/modules/main_tabs_v2/native/MainTabsV2AnnouncementSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: ListItemRow
        entity = argFoo;
        yankee = entity.image;
        verify = entity.text;
        entity = _closure1_slot11;
        tangon = undefined;
        offset = entity.bind(tangon)();
        zuuluu = _closure1_slot9;
        michal = _closure1_slot5;
        entity = {};
        report = offset.listItem;
        entity['style'] = report;
        option = _closure1_slot8;
        golfie = _closure1_slot4;
        report = {};
        report['source'] = yankee;
        yankee = offset.listItemImage;
        report['style'] = yankee;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        option = _closure1_slot8;
        golfie = _closure1_slot0;
        yankee = _closure1_slot2;
        oscard = 7;
        oscard = yankee[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {};
        yankee = 'text-sm/medium';
        oscard['variant'] = yankee;
        offset = offset.listItemText;
        oscard['style'] = offset;
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot12 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    foxtra = 1;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    option = tangon.Image;
    var _closure1_slot4 = option;
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.HelpdeskArticles;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ContentDismissActionType;
    var _closure1_slot7 = tangon;
    tangon = 4;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot8 = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsxs;
    var _closure1_slot9 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot10 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    backup = 'center';
    offset = {'flex': 1, 'alignItems': 'center'};
    tangon['container'] = offset;
    offset = {};
    yankee = 6;
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BG_BASE_PRIMARY;
    offset['backgroundColor'] = kiloes;
    tangon['header'] = offset;
    offset = {'marginVertical': 24, 'textAlign': 'center'};
    tangon['title'] = offset;
    offset = {};
    offset['textAlign'] = backup;
    tangon['body'] = offset;
    offset = {'paddingHorizontal': 8, 'width': '100%'};
    tangon['listContainer'] = offset;
    backup = 16;
    offset = {'flexDirection': 'row', 'alignItems': 'center', 'marginBottom': 16};
    tangon['listItem'] = offset;
    offset = {};
    offset['marginRight'] = backup;
    tangon['listItemImage'] = offset;
    offset = {};
    offset['flexShrink'] = foxtra;
    tangon['listItemText'] = offset;
    offset = {'position': 'relative', 'bottom': 4294967276, 'width': '100%', 'height': 56};
    tangon['gradient'] = offset;
    offset = {'height': 44, 'borderRadius': null, 'flexGrow': 0, 'marginHorizontal': 32, 'marginBottom': 8};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xxl;
    offset['borderRadius'] = foxtra;
    tangon['button'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_PRIMARY;
    offset['color'] = foxtra;
    tangon['gradientBackground'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_PRIMARY;
    offset['backgroundColor'] = yankee;
    tangon['buttonWrapper'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot11 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: MainTabsV2AnnouncementSheet
        entity = argFoo;
        entity = entity.markAsDismissed;
        var _closure2_slot0 = entity;
        michal = _closure1_slot11;
        tangon = undefined;
        result = michal.bind(tangon)();
        report = _closure1_slot3;
        zuuluu = report.useCallback;
        michal = new Array(1);
        michal[0] = entity;
        entity = function() {
            tangon = _closure2_slot0;
            entity = _closure1_slot7;
            zuuluu = entity.UNKNOWN;
            entity = undefined;
            zuuluu = tangon.bind(entity)(zuuluu);
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            michal = 8;
            michal = tangon[michal];
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.hideActionSheet;
            michal = michal.bind(zuuluu)();
            return entity;
        };
        ctrled = zuuluu.bind(report)(entity, michal);
        var _closure2_slot1 = ctrled;
        zuuluu = report.useEffect;
        michal = new Array(1);
        michal[0] = ctrled;
        entity = function() {
            entity = function() {
                michal = _closure2_slot1;
                entity = undefined;
                entity = michal.bind(entity)();
                return entity;
            };
            return entity;
        };
        entity = zuuluu.bind(report)(entity, michal);
        vacuum = _closure1_slot1;
        source = _closure1_slot2;
        entity = 9;
        entity = source[entity];
        entity = vacuum.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        yankee = entity.bottom;
        entity = result.gradientBackground;
        entity = entity.color;
        output = _closure1_slot0;
        michal = 10;
        michal = source[michal];
        report = output.bind(tangon)(michal);
        zuuluu = report.hexWithOpacity;
        michal = 0;
        michal = zuuluu.bind(report)(entity, michal);
        romeon = new Array(2);
        romeon[0] = michal;
        romeon[1] = entity;
        zuuluu = _closure1_slot8;
        entity = 11;
        entity = source[entity];
        entity = output.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        backup = true;
        entity['startExpanded'] = backup;
        golfie = _closure1_slot8;
        report = 12;
        report = source[report];
        report = output.bind(tangon)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        option = '';
        report['title'] = option;
        option = result.header;
        report['titleContainerStyle'] = option;
        offset = _closure1_slot8;
        option = 13;
        option = source[option];
        option = output.bind(tangon)(option);
        verify = option.ActionSheetCloseButton;
        option = {};
        option['onPress'] = ctrled;
        option = offset.bind(tangon)(verify, option);
        report['trailing'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['header'] = report;
        golfie = _closure1_slot9;
        oscard = _closure1_slot10;
        report = {};
        offset = _closure1_slot8;
        option = 14;
        option = source[option];
        verify = vacuum.bind(tangon)(option);
        option = {};
        option['colors'] = romeon;
        romeon = result.gradient;
        option['style'] = romeon;
        romeon = [0, 0.6];
        option['locations'] = romeon;
        verify = offset.bind(tangon)(verify, option);
        option = new Array(2);
        option[0] = verify;
        romeon = _closure1_slot8;
        verify = 15;
        verify = source[verify];
        verify = output.bind(tangon)(verify);
        offset = verify.SafeAreaPaddingView;
        verify = {};
        verify['bottom'] = backup;
        backup = result.buttonWrapper;
        verify['style'] = backup;
        echoed = _closure1_slot8;
        backup = 16;
        backup = source[backup];
        kiloes = vacuum.bind(tangon)(backup);
        backup = {};
        sizing = 17;
        sequen = source[sizing];
        sequen = output.bind(tangon)(sequen);
        record = sequen.intl;
        config = record.string;
        sequen = source[sizing];
        sequen = output.bind(tangon)(sequen);
        sequen = sequen.t;
        sequen = sequen.hBm+cX;
        sequen = config.bind(record)(sequen);
        backup['text'] = sequen;
        sequen = result.button;
        backup['style'] = sequen;
        backup['onPress'] = ctrled;
        backup = echoed.bind(tangon)(kiloes, backup);
        verify['children'] = backup;
        verify = romeon.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['footer'] = report;
        golfie = _closure1_slot9;
        oscard = _closure1_slot5;
        report = {};
        verify = result.container;
        option = new Array(2);
        option[0] = verify;
        verify = {};
        offset = 36;
        yankee = yankee + offset;
        offset = 44;
        offset = yankee + offset;
        verify['paddingBottom'] = offset;
        option[1] = verify;
        report['style'] = option;
        offset = _closure1_slot8;
        verify = _closure1_slot4;
        option = {};
        yankee = 18;
        yankee = source[yankee];
        yankee = vacuum.bind(tangon)(yankee);
        option['source'] = yankee;
        verify = offset.bind(tangon)(verify, option);
        option = new Array(3);
        option[0] = verify;
        yankee = _closure1_slot8;
        verify = 7;
        verify = source[verify];
        verify = output.bind(tangon)(verify);
        offset = verify.Text;
        verify = {};
        romeon = 'heading-xl/bold';
        verify['variant'] = romeon;
        romeon = result.title;
        verify['style'] = romeon;
        romeon = source[sizing];
        romeon = output.bind(tangon)(romeon);
        kiloes = romeon.intl;
        backup = kiloes.string;
        romeon = source[sizing];
        romeon = output.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.orML/v;
        romeon = backup.bind(kiloes)(romeon);
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        yankee = _closure1_slot9;
        offset = _closure1_slot5;
        verify = {};
        romeon = result.listContainer;
        verify['style'] = romeon;
        backup = _closure1_slot8;
        echoed = _closure1_slot12;
        romeon = {};
        kiloes = 19;
        kiloes = source[kiloes];
        kiloes = vacuum.bind(tangon)(kiloes);
        romeon['image'] = kiloes;
        kiloes = source[sizing];
        kiloes = output.bind(tangon)(kiloes);
        sequen = kiloes.intl;
        ctrled = sequen.string;
        kiloes = source[sizing];
        kiloes = output.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        kiloes = kiloes.kxNf2t;
        kiloes = ctrled.bind(sequen)(kiloes);
        romeon['text'] = kiloes;
        backup = backup.bind(tangon)(echoed, romeon);
        romeon = new Array(4);
        romeon[0] = backup;
        kiloes = _closure1_slot8;
        backup = {};
        ctrled = 20;
        ctrled = source[ctrled];
        ctrled = vacuum.bind(tangon)(ctrled);
        backup['image'] = ctrled;
        ctrled = source[sizing];
        ctrled = output.bind(tangon)(ctrled);
        config = ctrled.intl;
        sequen = config.string;
        ctrled = source[sizing];
        ctrled = output.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        ctrled = ctrled.g2/d+f;
        ctrled = sequen.bind(config)(ctrled);
        backup['text'] = ctrled;
        backup = kiloes.bind(tangon)(echoed, backup);
        romeon[1] = backup;
        kiloes = _closure1_slot8;
        backup = {};
        ctrled = 21;
        ctrled = source[ctrled];
        ctrled = vacuum.bind(tangon)(ctrled);
        backup['image'] = ctrled;
        ctrled = source[sizing];
        ctrled = output.bind(tangon)(ctrled);
        sequen = ctrled.intl;
        vacuum = sequen.string;
        ctrled = source[sizing];
        ctrled = output.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        ctrled = ctrled.R5uhUF;
        ctrled = vacuum.bind(sequen)(ctrled);
        backup['text'] = ctrled;
        backup = kiloes.bind(tangon)(echoed, backup);
        romeon[2] = backup;
        kiloes = _closure1_slot8;
        foxtra = 22;
        foxtra = source[foxtra];
        foxtra = output.bind(tangon)(foxtra);
        backup = foxtra.TextWithIOSLinkWorkaround;
        foxtra = {};
        echoed = 'text-md/normal';
        foxtra['variant'] = echoed;
        result = result.body;
        foxtra['style'] = result;
        result = source[sizing];
        result = output.bind(tangon)(result);
        echoed = result.intl;
        result = echoed.format;
        sizing = source[sizing];
        sizing = output.bind(tangon)(sizing);
        sizing = sizing.t;
        output = sizing.608/Ag;
        sizing = {};
        update = function() { // Original name: onPress
            michal = _closure2_slot1;
            entity = undefined;
            michal = michal.bind(entity)();
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            tangon = 23;
            tangon = report[tangon];
            oscard = zuuluu.bind(entity)(tangon);
            tangon = oscard.getArticleURL;
            michal = _closure1_slot6;
            michal = michal.NEW_LAYOUT;
            tangon = tangon.bind(oscard)(michal);
            michal = 24;
            michal = report[michal];
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.openURL;
            michal = michal.bind(zuuluu)(tangon);
            return entity;
        };
        sizing['onPress'] = update;
        sizing = result.bind(echoed)(output, sizing);
        foxtra['children'] = sizing;
        foxtra = kiloes.bind(tangon)(backup, foxtra);
        romeon[3] = foxtra;
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/MainTabsV2AnnouncementSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();