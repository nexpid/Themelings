// app/modules/main_tabs_v2/native/message_requests/screens/MessageRequestsScreenWithTabs.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    foxtra = 1;
    golfie = oscard[foxtra];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot6 = option;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = {};
    option = 'REQUEST';
    tangon['REQUEST'] = option;
    option = 'SPAM';
    tangon['SPAM'] = option;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['flex'] = foxtra;
    yankee = 5;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BG_BASE_SECONDARY;
    offset['backgroundColor'] = backup;
    tangon['container'] = offset;
    offset = {};
    offset['flex'] = foxtra;
    tangon['messageRequestContent'] = offset;
    offset = {};
    foxtra = 32;
    offset['minHeight'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['paddingHorizontal'] = yankee;
    tangon['tabContainer'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot9 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        entity = argFoo;
        zuuluu = entity.navigation;
        var _closure2_slot0 = zuuluu;
        report = _closure1_slot9;
        tangon = undefined;
        option = report.bind(tangon)();
        oscard = _closure1_slot4;
        report = oscard.useState;
        offset = 0;
        verify = report.bind(oscard)(offset);
        golfie = _closure1_slot3;
        report = 2;
        golfie = golfie.bind(tangon)(verify, report);
        romeon = golfie[offset];
        report = 1;
        report = golfie[report];
        var _closure2_slot1 = report;
        golfie = oscard.useCallback;
        report = new Array(1);
        report[0] = zuuluu;
        zuuluu = function(argFoo) {
            tangon = _closure2_slot0;
            zuuluu = tangon.push;
            michal = {};
            entity = argFoo;
            michal['channelId'] = entity;
            entity = 'preview';
            entity = zuuluu.bind(tangon)(entity, michal);
            return entity;
        };
        output = golfie.bind(oscard)(zuuluu, report);
        report = oscard.useCallback;
        zuuluu = function(argFoo) {
            entity = argFoo;
            entity = entity.nativeEvent;
            entity = entity.layout;
            zuuluu = entity.width;
            michal = _closure2_slot1;
            entity = undefined;
            michal = michal.bind(entity)(zuuluu);
            return entity;
        };
        michal = new Array(0);
        oscard = report.bind(oscard)(zuuluu, michal);
        verify = _closure1_slot0;
        yankee = _closure1_slot2;
        michal = 6;
        michal = yankee[michal];
        report = verify.bind(tangon)(michal);
        zuuluu = report.useSegmentedControlState;
        michal = {};
        backup = {};
        result = 7;
        golfie = yankee[result];
        golfie = verify.bind(tangon)(golfie);
        kiloes = golfie.intl;
        foxtra = kiloes.string;
        golfie = yankee[result];
        golfie = verify.bind(tangon)(golfie);
        golfie = golfie.t;
        golfie = golfie.7RFcXV;
        golfie = foxtra.bind(kiloes)(golfie);
        backup['label'] = golfie;
        kiloes = _closure1_slot8;
        golfie = kiloes.REQUEST;
        backup['id'] = golfie;
        golfie = _closure1_slot6;
        sizing = _closure1_slot1;
        foxtra = 8;
        foxtra = yankee[foxtra];
        echoed = sizing.bind(tangon)(foxtra);
        foxtra = {};
        foxtra['goToMessageRequestPreview'] = output;
        foxtra = golfie.bind(tangon)(echoed, foxtra);
        backup['page'] = foxtra;
        foxtra = new Array(2);
        foxtra[0] = backup;
        backup = {};
        echoed = yankee[result];
        echoed = verify.bind(tangon)(echoed);
        update = echoed.intl;
        echoed = update.string;
        result = yankee[result];
        result = verify.bind(tangon)(result);
        result = result.t;
        result = result.ulKXHh;
        result = echoed.bind(update)(result);
        backup['label'] = result;
        kiloes = kiloes.SPAM;
        backup['id'] = kiloes;
        kiloes = 9;
        kiloes = yankee[kiloes];
        sizing = sizing.bind(tangon)(kiloes);
        kiloes = {};
        kiloes['goToMessageRequestPreview'] = output;
        kiloes = golfie.bind(tangon)(sizing, kiloes);
        backup['page'] = kiloes;
        foxtra[1] = backup;
        michal['items'] = foxtra;
        michal['pageWidth'] = romeon;
        michal['defaultIndex'] = offset;
        offset = zuuluu.bind(report)(michal);
        zuuluu = _closure1_slot7;
        michal = _closure1_slot5;
        entity = {};
        report = option.container;
        entity['style'] = report;
        report = {};
        romeon = option.tabContainer;
        report['style'] = romeon;
        report['onLayout'] = oscard;
        oscard = 10;
        oscard = yankee[oscard];
        oscard = verify.bind(tangon)(oscard);
        romeon = oscard.SegmentedControl;
        oscard = {};
        oscard['state'] = offset;
        oscard = golfie.bind(tangon)(romeon, oscard);
        report['children'] = oscard;
        oscard = golfie.bind(tangon)(michal, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        option = option.messageRequestContent;
        oscard['style'] = option;
        option = 11;
        option = yankee[option];
        option = verify.bind(tangon)(option);
        verify = option.SegmentedControlPages;
        option = {};
        option['state'] = offset;
        option = golfie.bind(tangon)(verify, option);
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/message_requests/screens/MessageRequestsScreenWithTabs.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();