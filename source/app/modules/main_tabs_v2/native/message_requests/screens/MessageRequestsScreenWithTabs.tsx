// app/modules/main_tabs_v2/native/message_requests/screens/MessageRequestsScreenWithTabs.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    foxtrot = 1;
    golf = oscar[foxtrot];
    tango = argCorge;
    golf = tango.bind(entity)(golf);
    var _closure1_slot4 = golf;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot6 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = {};
    options = 'REQUEST';
    tango['REQUEST'] = options;
    options = 'SPAM';
    tango['SPAM'] = options;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    offset['flex'] = foxtrot;
    yankee = 5;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BG_BASE_SECONDARY;
    offset['backgroundColor'] = backup;
    tango['container'] = offset;
    offset = {};
    offset['flex'] = foxtrot;
    tango['messageRequestContent'] = offset;
    offset = {};
    foxtrot = 32;
    offset['minHeight'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['paddingHorizontal'] = yankee;
    tango['tabContainer'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot9 = tango;
    tango = golf.memo;
    mike = function(argFoo) {
        entity = argFoo;
        zulu = entity.navigation;
        var _closure2_slot0 = zulu;
        report = _closure1_slot9;
        tango = undefined;
        options = report.bind(tango)();
        oscar = _closure1_slot4;
        report = oscar.useState;
        offset = 0;
        verify = report.bind(oscar)(offset);
        golf = _closure1_slot3;
        report = 2;
        golf = golf.bind(tango)(verify, report);
        romeo = golf[offset];
        report = 1;
        report = golf[report];
        var _closure2_slot1 = report;
        golf = oscar.useCallback;
        report = new Array(1);
        report[0] = zulu;
        zulu = function(argFoo) {
            tango = _closure2_slot0;
            zulu = tango.push;
            mike = {};
            entity = argFoo;
            mike['channelId'] = entity;
            entity = 'preview';
            entity = zulu.bind(tango)(entity, mike);
            return entity;
        };
        output = golf.bind(oscar)(zulu, report);
        report = oscar.useCallback;
        zulu = function(argFoo) {
            entity = argFoo;
            entity = entity.nativeEvent;
            entity = entity.layout;
            zulu = entity.width;
            mike = _closure2_slot1;
            entity = undefined;
            mike = mike.bind(entity)(zulu);
            return entity;
        };
        mike = new Array(0);
        oscar = report.bind(oscar)(zulu, mike);
        verify = _closure1_slot0;
        yankee = _closure1_slot2;
        mike = 6;
        mike = yankee[mike];
        report = verify.bind(tango)(mike);
        zulu = report.useSegmentedControlState;
        mike = {};
        backup = {};
        result = 7;
        golf = yankee[result];
        golf = verify.bind(tango)(golf);
        kilo = golf.intl;
        foxtrot = kilo.string;
        golf = yankee[result];
        golf = verify.bind(tango)(golf);
        golf = golf.t;
        golf = golf.7RFcXV;
        golf = foxtrot.bind(kilo)(golf);
        backup['label'] = golf;
        kilo = _closure1_slot8;
        golf = kilo.REQUEST;
        backup['id'] = golf;
        golf = _closure1_slot6;
        sizing = _closure1_slot1;
        foxtrot = 8;
        foxtrot = yankee[foxtrot];
        echo = sizing.bind(tango)(foxtrot);
        foxtrot = {};
        foxtrot['goToMessageRequestPreview'] = output;
        foxtrot = golf.bind(tango)(echo, foxtrot);
        backup['page'] = foxtrot;
        foxtrot = new Array(2);
        foxtrot[0] = backup;
        backup = {};
        echo = yankee[result];
        echo = verify.bind(tango)(echo);
        update = echo.intl;
        echo = update.string;
        result = yankee[result];
        result = verify.bind(tango)(result);
        result = result.t;
        result = result.ulKXHh;
        result = echo.bind(update)(result);
        backup['label'] = result;
        kilo = kilo.SPAM;
        backup['id'] = kilo;
        kilo = 9;
        kilo = yankee[kilo];
        sizing = sizing.bind(tango)(kilo);
        kilo = {};
        kilo['goToMessageRequestPreview'] = output;
        kilo = golf.bind(tango)(sizing, kilo);
        backup['page'] = kilo;
        foxtrot[1] = backup;
        mike['items'] = foxtrot;
        mike['pageWidth'] = romeo;
        mike['defaultIndex'] = offset;
        offset = zulu.bind(report)(mike);
        zulu = _closure1_slot7;
        mike = _closure1_slot5;
        entity = {};
        report = options.container;
        entity['style'] = report;
        report = {};
        romeo = options.tabContainer;
        report['style'] = romeo;
        report['onLayout'] = oscar;
        oscar = 10;
        oscar = yankee[oscar];
        oscar = verify.bind(tango)(oscar);
        romeo = oscar.SegmentedControl;
        oscar = {};
        oscar['state'] = offset;
        oscar = golf.bind(tango)(romeo, oscar);
        report['children'] = oscar;
        oscar = golf.bind(tango)(mike, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = {};
        options = options.messageRequestContent;
        oscar['style'] = options;
        options = 11;
        options = yankee[options];
        options = verify.bind(tango)(options);
        verify = options.SegmentedControlPages;
        options = {};
        options['state'] = offset;
        options = golf.bind(tango)(verify, options);
        oscar['children'] = options;
        oscar = golf.bind(tango)(mike, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = tango.bind(golf)(mike);
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/main_tabs_v2/native/message_requests/screens/MessageRequestsScreenWithTabs.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();