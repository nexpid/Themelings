// app/modules/main_tabs_v2/native/tabs/gravity/ICYMIFeedbackSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    options = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    tango = 1;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot5 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/main_tabs_v2/native/tabs/gravity/ICYMIFeedbackSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: ICYMIFeedbackSheet
        yankee = _closure1_slot0;
        romeo = _closure1_slot2;
        mike = 4;
        mike = romeo[mike];
        tango = undefined;
        golf = yankee.bind(tango)(mike);
        oscar = golf.useStateFromStores;
        mike = _closure1_slot3;
        zulu = new Array(1);
        zulu[0] = mike;
        mike = function() {
            mike = _closure1_slot3;
            entity = mike.getLoadId;
            entity = entity.bind(mike)();
            return entity;
        };
        mike = oscar.bind(golf)(zulu, mike);
        var _closure2_slot0 = mike;
        zulu = _closure1_slot5;
        mike = _closure1_slot1;
        entity = 5;
        entity = romeo[entity];
        mike = mike.bind(tango)(entity);
        entity = {};
        options = 6;
        oscar = romeo[options];
        oscar = yankee.bind(tango)(oscar);
        verify = oscar.intl;
        golf = verify.string;
        oscar = romeo[options];
        oscar = yankee.bind(tango)(oscar);
        oscar = oscar.t;
        oscar = oscar.ppfH9/;
        oscar = golf.bind(verify)(oscar);
        entity['headerLabel'] = oscar;
        oscar = true;
        entity['showHeaderCloseButton'] = oscar;
        oscar = romeo[options];
        oscar = yankee.bind(tango)(oscar);
        verify = oscar.intl;
        golf = verify.string;
        oscar = romeo[options];
        oscar = yankee.bind(tango)(oscar);
        oscar = oscar.t;
        oscar = oscar.ePk/CQ;
        oscar = golf.bind(verify)(oscar);
        entity['ratingsBodyLabel'] = oscar;
        oscar = romeo[options];
        oscar = yankee.bind(tango)(oscar);
        verify = oscar.intl;
        golf = verify.string;
        oscar = romeo[options];
        oscar = yankee.bind(tango)(oscar);
        oscar = oscar.t;
        oscar = oscar.sBOuOT;
        oscar = golf.bind(verify)(oscar);
        entity['reasonsHeaderLabel'] = oscar;
        oscar = {};
        golf = romeo[options];
        golf = yankee.bind(tango)(golf);
        offset = golf.intl;
        verify = offset.string;
        golf = romeo[options];
        golf = yankee.bind(tango)(golf);
        golf = golf.t;
        golf = golf.F6TmZG;
        golf = verify.bind(offset)(golf);
        oscar['label'] = golf;
        golf = 'irrelevant_content';
        oscar['value'] = golf;
        golf = new Array(5);
        golf[0] = oscar;
        oscar = {};
        verify = romeo[options];
        verify = yankee.bind(tango)(verify);
        foxtrot = verify.intl;
        offset = foxtrot.string;
        verify = romeo[options];
        verify = yankee.bind(tango)(verify);
        verify = verify.t;
        verify = verify.voWAzs;
        verify = offset.bind(foxtrot)(verify);
        oscar['label'] = verify;
        verify = 'not_enough_content';
        oscar['value'] = verify;
        golf[1] = oscar;
        oscar = {};
        verify = romeo[options];
        verify = yankee.bind(tango)(verify);
        foxtrot = verify.intl;
        offset = foxtrot.string;
        verify = romeo[options];
        verify = yankee.bind(tango)(verify);
        verify = verify.t;
        verify = verify.Ay8iw8;
        verify = offset.bind(foxtrot)(verify);
        oscar['label'] = verify;
        verify = 'too_much_content';
        oscar['value'] = verify;
        golf[2] = oscar;
        oscar = {};
        verify = romeo[options];
        verify = yankee.bind(tango)(verify);
        offset = verify.intl;
        verify = offset.string;
        options = romeo[options];
        options = yankee.bind(tango)(options);
        options = options.t;
        options = options.Yu+52d;
        options = verify.bind(offset)(options);
        oscar['label'] = options;
        options = 'laggy';
        oscar['value'] = options;
        golf[3] = oscar;
        oscar = 'other';
        options = {'label': 'Other', 'value': 'other'};
        golf[4] = options;
        entity['reasons'] = golf;
        entity['otherKey'] = oscar;
        oscar = function() { // Original name: trackOpen
            tango = _closure1_slot1;
            zulu = _closure1_slot2;
            entity = 7;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.track;
            mike = _closure1_slot4;
            mike = mike.HOME_FEEDBACK_PROMPT_VIEWED;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity['trackOpen'] = oscar;
        oscar = ['other'];
        entity['feedbackReasons'] = oscar;
        report = function(argFoo) { // Original name: trackReport
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                oscar = argFoo;
                tango = _closure1_slot1;
                report = _closure1_slot2;
                entity = 8;
                zulu = report[entity];
                entity = undefined;
                golf = tango.bind(entity)(zulu);
                zulu = golf.giveFeedback;
                zulu = zulu.bind(golf)();
                zulu = 7;
                zulu = report[zulu];
                report = tango.bind(entity)(zulu);
                tango = report.track;
                mike = _closure1_slot4;
                zulu = mike.HOME_FEEDBACK_SUBMITTED;
                mike = {};
                golf = 'gravity';
                mike['home_session_id'] = golf;
                golf = _closure2_slot0;
                mike['load_id'] = golf;
                options = oscar.reason;
                golf = null;
                options = golf != options;
                golf = undefined;
                if(!options) { _fun00002_ip = 129; continue _fun00001 }
 107:
                options = oscar.reason;
                verify = options.value;
                options = new Array(1);
                options[0] = verify;
                golf = options;
 129:
                mike['reason_descriptions'] = golf;
                golf = oscar.rating;
                mike['rating'] = golf;
                oscar = oscar.feedback;
                mike['user_feedback'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            }
        };
        entity['trackReport'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();