// app/modules/main_tabs_v2/native/tabs/guilds/empty_states/GuildsEmpty.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    kiloes = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = kiloes;
    var _closure1_slot2 = golfie;
    entity = function() { // Original name: handleJoinGuild
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 10;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.openGuildJoinServerScreen;
        michal = michal.bind(zuuluu)();
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function() { // Original name: handleCreateGuild
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 10;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.openCreateGuildModal;
        michal = michal.bind(zuuluu)();
        return entity;
    };
    var _closure1_slot15 = entity;
    michal = function(argFoo) { // Original name: GuildsEmptyContent
        entity = argFoo;
        oscard = entity.contentContainerStyle;
        entity = _closure1_slot13;
        tangon = undefined;
        romeon = entity.bind(tangon)();
        zuuluu = _closure1_slot11;
        michal = _closure1_slot7;
        entity = {'alwaysBounceVertical': false, 'bounces': false};
        report = romeon.scrollView;
        entity['style'] = report;
        golfie = romeon.scrollViewContentContainer;
        report = new Array(2);
        report[0] = golfie;
        report[1] = oscard;
        entity['contentContainerStyle'] = report;
        golfie = _closure1_slot12;
        oscard = _closure1_slot6;
        report = {};
        option = {};
        verify = romeon.content;
        option['style'] = verify;
        yankee = _closure1_slot11;
        offset = _closure1_slot6;
        verify = {};
        foxtra = romeon.illustrationWrapper;
        verify['style'] = foxtra;
        kiloes = _closure1_slot11;
        backup = _closure1_slot5;
        foxtra = {};
        result = _closure1_slot1;
        source = _closure1_slot2;
        output = 11;
        output = source[output];
        output = result.bind(tangon)(output);
        foxtra['source'] = output;
        output = romeon.illustration;
        foxtra['style'] = output;
        foxtra = kiloes.bind(tangon)(backup, foxtra);
        verify['children'] = foxtra;
        offset = yankee.bind(tangon)(offset, verify);
        verify = new Array(2);
        verify[0] = offset;
        foxtra = _closure1_slot12;
        yankee = _closure1_slot6;
        offset = {};
        backup = romeon.textWrapper;
        offset['style'] = backup;
        echoed = _closure1_slot11;
        update = _closure1_slot0;
        kiloes = 9;
        backup = source[kiloes];
        backup = update.bind(tangon)(backup);
        result = backup.Text;
        backup = {'color': 'header-primary', 'variant': 'heading-md/bold'};
        ctrled = romeon.text;
        output = new Array(2);
        output[0] = ctrled;
        ctrled = romeon.headerText;
        output[1] = ctrled;
        backup['style'] = output;
        output = 12;
        ctrled = source[output];
        ctrled = update.bind(tangon)(ctrled);
        sequen = ctrled.intl;
        vacuum = sequen.string;
        ctrled = source[output];
        ctrled = update.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        ctrled = ctrled.Y7Ml/P;
        ctrled = vacuum.bind(sequen)(ctrled);
        backup['children'] = ctrled;
        result = echoed.bind(tangon)(result, backup);
        backup = new Array(2);
        backup[0] = result;
        echoed = _closure1_slot11;
        kiloes = source[kiloes];
        kiloes = update.bind(tangon)(kiloes);
        result = kiloes.Text;
        kiloes = {'color': 'header-secondary', 'variant': 'text-md/medium'};
        ctrled = romeon.text;
        kiloes['style'] = ctrled;
        ctrled = source[output];
        ctrled = update.bind(tangon)(ctrled);
        sequen = ctrled.intl;
        vacuum = sequen.string;
        ctrled = source[output];
        ctrled = update.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        ctrled = ctrled.kuyE4u;
        ctrled = vacuum.bind(sequen)(ctrled);
        kiloes['children'] = ctrled;
        kiloes = echoed.bind(tangon)(result, kiloes);
        backup[1] = kiloes;
        offset['children'] = backup;
        offset = foxtra.bind(tangon)(yankee, offset);
        verify[1] = offset;
        option['children'] = verify;
        verify = golfie.bind(tangon)(oscard, option);
        option = new Array(2);
        option[0] = verify;
        yankee = _closure1_slot12;
        verify = 13;
        verify = source[verify];
        verify = update.bind(tangon)(verify);
        offset = verify.Stack;
        verify = {};
        romeon = romeon.buttonContainer;
        verify['style'] = romeon;
        verify['spacing'] = output;
        kiloes = _closure1_slot11;
        foxtra = 14;
        romeon = source[foxtra];
        romeon = update.bind(tangon)(romeon);
        backup = romeon.Button;
        romeon = {};
        result = 'lg';
        romeon['size'] = result;
        result = source[output];
        result = update.bind(tangon)(result);
        ctrled = result.intl;
        echoed = ctrled.string;
        result = source[output];
        result = update.bind(tangon)(result);
        result = result.t;
        result = result.riOUtL;
        result = echoed.bind(ctrled)(result);
        romeon['text'] = result;
        result = _closure1_slot14;
        romeon['onPress'] = result;
        backup = kiloes.bind(tangon)(backup, romeon);
        romeon = new Array(2);
        romeon[0] = backup;
        kiloes = _closure1_slot11;
        foxtra = source[foxtra];
        foxtra = update.bind(tangon)(foxtra);
        backup = foxtra.Button;
        foxtra = {'size': 'lg', 'variant': 'secondary'};
        result = source[output];
        result = update.bind(tangon)(result);
        echoed = result.intl;
        result = echoed.string;
        output = source[output];
        output = update.bind(tangon)(output);
        output = output.t;
        output = output.BetvT0;
        output = result.bind(echoed)(output);
        foxtra['text'] = output;
        sizing = _closure1_slot15;
        foxtra['onPress'] = sizing;
        foxtra = kiloes.bind(tangon)(backup, foxtra);
        romeon[1] = foxtra;
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot16 = michal;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, report);
    entity = 0;
    report = golfie[entity];
    entity = undefined;
    report = kiloes.bind(entity)(report);
    var _closure1_slot3 = report;
    report = 1;
    option = golfie[report];
    report = argCor;
    option = report.bind(entity)(option);
    var _closure1_slot4 = option;
    report = 2;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    verify = report.Image;
    var _closure1_slot5 = verify;
    verify = report.View;
    var _closure1_slot6 = verify;
    report = report.ScrollView;
    var _closure1_slot7 = report;
    report = 3;
    report = golfie[report];
    report = kiloes.bind(entity)(report);
    var _closure1_slot8 = report;
    report = 4;
    report = golfie[report];
    report = kiloes.bind(entity)(report);
    var _closure1_slot9 = report;
    report = 5;
    report = golfie[report];
    report = kiloes.bind(entity)(report);
    var _closure1_slot10 = report;
    report = 6;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    verify = report.jsx;
    var _closure1_slot11 = verify;
    report = report.jsxs;
    var _closure1_slot12 = report;
    report = 7;
    report = golfie[report];
    offset = oscard.bind(entity)(report);
    verify = offset.createStyles;
    report = {};
    yankee = {};
    backup = 8;
    romeon = golfie[backup];
    romeon = kiloes.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xxl;
    yankee['borderTopLeftRadius'] = romeon;
    romeon = golfie[backup];
    romeon = kiloes.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    yankee['borderTopRightRadius'] = romeon;
    report['scrollView'] = yankee;
    yankee = {'zIndex': 100, 'width': '100%', 'backgroundColor': null, 'flex': 1};
    romeon = golfie[backup];
    romeon = kiloes.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_BASE_PRIMARY;
    yankee['backgroundColor'] = romeon;
    report['header'] = yankee;
    romeon = 'center';
    yankee = {'height': 56, 'marginLeft': 16, 'marginRight': 8, 'flexDirection': 'row', 'alignItems': 'center'};
    report['headerTitle'] = yankee;
    yankee = {'flexGrow': 2, 'justifyContent': 'center'};
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_PRIMARY;
    yankee['backgroundColor'] = foxtra;
    report['scrollViewContentContainer'] = yankee;
    yankee = {'flex': 1, 'flexDirection': 'row', 'alignItems': 'center'};
    report['headerInner'] = yankee;
    yankee = {'flexGrow': 2, 'paddingHorizontal': null, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    yankee['paddingHorizontal'] = foxtra;
    report['content'] = yankee;
    yankee = {'width': '100%', 'paddingHorizontal': 36};
    report['illustrationWrapper'] = yankee;
    yankee = {'resizeMode': 'contain', 'alignSelf': 'center'};
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    yankee['marginBottom'] = foxtra;
    report['illustration'] = yankee;
    yankee = {};
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    yankee['paddingBottom'] = foxtra;
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    yankee['paddingHorizontal'] = foxtra;
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_PRIMARY;
    yankee['backgroundColor'] = foxtra;
    report['buttonContainer'] = yankee;
    yankee = {};
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    yankee['marginHorizontal'] = foxtra;
    foxtra = golfie[backup];
    foxtra = kiloes.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    yankee['marginVertical'] = foxtra;
    report['textWrapper'] = yankee;
    yankee = {};
    foxtra = 9;
    foxtra = golfie[foxtra];
    foxtra = oscard.bind(entity)(foxtra);
    foxtra = foxtra.TextStyleSheet;
    output = foxtra.heading-md/bold;
    result = yankee;
    foxtra = copyDataProperties(result, output);
    kiloes = 18;
    foxtra = 'fontSize';
    yankee[foxtra] = kiloes;
    foxtra = 'marginBottom';
    yankee[foxtra] = backup;
    report['headerText'] = yankee;
    yankee = {};
    yankee['textAlign'] = romeon;
    report['text'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot13 = report;
    report = option.memo;
    tangon = function(argFoo) { // Original name: GuildsEmpty
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            tangon = entity.selectedGuildId;
            option = entity.style;
            report = undefined;
            var _closure2_slot1 = report;
            entity = _closure1_slot13;
            foxtra = entity.bind(report)();
            michal = _closure1_slot1;
            oscard = _closure1_slot2;
            entity = 15;
            entity = oscard[entity];
            entity = michal.bind(report)(entity);
            offset = entity.bind(report)();
            var _closure2_slot0 = offset;
            michal = _closure1_slot0;
            entity = 16;
            entity = oscard[entity];
            verify = michal.bind(report)(entity);
            oscard = verify.useStateFromStores;
            entity = _closure1_slot8;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure1_slot8;
                entity = michal.getSessionId;
                michal = entity.bind(michal)();
                entity = null;
                entity = entity != michal;
                return entity;
            };
            michal = oscard.bind(verify)(michal, entity);
            yankee = null;
            if(!michal) { _fun00002_ip = 115; continue _fun00001 }
 112:
            yankee = tangon;
 115:
            _closure2_slot1 = yankee;
            oscard = _closure1_slot1;
            backup = _closure1_slot2;
            tangon = 17;
            tangon = backup[tangon];
            oscard = oscard.bind(report)(tangon);
            tangon = {};
            romeon = _closure1_slot0;
            verify = 18;
            kiloes = backup[verify];
            kiloes = romeon.bind(report)(kiloes);
            kiloes = kiloes.ImpressionTypes;
            kiloes = kiloes.VIEW;
            tangon['type'] = kiloes;
            verify = backup[verify];
            verify = romeon.bind(report)(verify);
            verify = verify.ImpressionNames;
            verify = verify.GUILDS_EMPTY_NUX;
            tangon['name'] = verify;
            tangon = oscard.bind(report)(tangon);
            verify = _closure1_slot4;
            oscard = verify.useEffect;
            tangon = new Array(2);
            tangon[0] = yankee;
            tangon[1] = offset;
            zuuluu = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot1;
                    report = null;
                    if(!(report != zuuluu)) { _fun00004_ip = 243; continue _fun00003 }
 18:
                    zuuluu = _closure2_slot0;
                    if(!(report != zuuluu)) { _fun00004_ip = 243; continue _fun00003 }
 29:
                    golfie = _closure1_slot9;
                    oscard = golfie.getGuild;
                    tangon = _closure2_slot1;
                    tangon = oscard.bind(golfie)(tangon);
                    if(!(report == tangon)) { _fun00004_ip = 82; continue _fun00003 }
 54:
                    option = _closure1_slot9;
                    golfie = option.getGuild;
                    verify = _closure1_slot10;
                    oscard = verify.getGuildId;
                    oscard = oscard.bind(verify)();
                    tangon = golfie.bind(option)(oscard);
 82:
                    if(!(report == tangon)) { _fun00004_ip = 114; continue _fun00003 }
 86:
                    option = _closure1_slot9;
                    golfie = option.getGuild;
                    verify = _closure1_slot10;
                    oscard = verify.getLastSelectedGuildId;
                    oscard = oscard.bind(verify)();
                    tangon = golfie.bind(option)(oscard);
 114:
                    if(!(report == tangon)) { _fun00004_ip = 152; continue _fun00003 }
 118:
                    option = _closure1_slot9;
                    oscard = option.getGuilds;
                    golfie = oscard.bind(option)();
                    oscard = option.getGuildIds;
                    option = oscard.bind(option)();
                    oscard = 0;
                    oscard = option[oscard];
                    tangon = golfie[oscard];
 152:
                    if(!(report != tangon)) { _fun00004_ip = 243; continue _fun00003 }
 156:
                    golfie = _closure1_slot0;
                    oscard = _closure1_slot2;
                    report = 19;
                    report = oscard[report];
                    oscard = undefined;
                    option = golfie.bind(oscard)(report);
                    golfie = option.getInitialGuildState;
                    report = tangon.id;
                    tangon = false;
                    report = golfie.bind(option)(report, oscard, tangon);
                    tangon = _closure1_slot3;
                    zuuluu = 2;
                    tangon = tangon.bind(oscard)(report, zuuluu);
                    zuuluu = 1;
                    zuuluu = tangon[zuuluu];
                    var _closure3_slot0 = zuuluu;
                    zuuluu = _closure2_slot0;
                    michal = zuuluu.dispatch;
                    entity = function() {
                        zuuluu = _closure1_slot0;
                        michal = _closure1_slot2;
                        entity = 20;
                        michal = michal[entity];
                        entity = undefined;
                        entity = zuuluu.bind(entity)(michal);
                        zuuluu = entity.CommonActions;
                        michal = zuuluu.reset;
                        entity = _closure3_slot0;
                        entity = michal.bind(zuuluu)(entity);
                        return entity;
                    };
                    entity = michal.bind(zuuluu)(entity);
 243:
                    entity = undefined;
                    return entity;
                }
            };
            zuuluu = oscard.bind(verify)(zuuluu, tangon);
            entity = null;
            if(!michal) { _fun00002_ip = 476; continue _fun00001 }
 245:
            tangon = _closure1_slot12;
            zuuluu = _closure1_slot6;
            michal = {};
            verify = foxtra.header;
            oscard = new Array(2);
            oscard[0] = verify;
            oscard[1] = option;
            michal['style'] = oscard;
            verify = _closure1_slot11;
            option = _closure1_slot6;
            oscard = {};
            offset = foxtra.headerTitle;
            oscard['style'] = offset;
            romeon = _closure1_slot11;
            yankee = _closure1_slot6;
            offset = {};
            foxtra = foxtra.headerInner;
            offset['style'] = foxtra;
            kiloes = _closure1_slot11;
            echoed = _closure1_slot0;
            update = _closure1_slot2;
            foxtra = 9;
            foxtra = update[foxtra];
            foxtra = echoed.bind(report)(foxtra);
            backup = foxtra.Text;
            foxtra = {'color': 'header-primary', 'variant': 'heading-lg/bold', 'maxFontSizeMultiplier': 1.75, 'accessibilityRole': 'header'};
            sizing = 12;
            output = update[sizing];
            output = echoed.bind(report)(output);
            result = output.intl;
            output = result.string;
            sizing = update[sizing];
            sizing = echoed.bind(report)(sizing);
            sizing = sizing.t;
            sizing = sizing.7hB4kp;
            sizing = output.bind(result)(sizing);
            foxtra['children'] = sizing;
            foxtra = kiloes.bind(report)(backup, foxtra);
            offset['children'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            oscard['children'] = offset;
            option = verify.bind(report)(option, oscard);
            oscard = new Array(2);
            oscard[0] = option;
            verify = _closure1_slot11;
            option = _closure1_slot16;
            golfie = {};
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 476:
            return entity;
        }
    };
    tangon = report.bind(option)(tangon);
    report = 21;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/main_tabs_v2/native/tabs/guilds/empty_states/GuildsEmpty.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['GuildsEmptyContent'] = michal;
    return entity;
})();