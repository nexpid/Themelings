// app/modules/main_tabs_v2/native/tabs/guilds/empty_states/ChannelsEmpty.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    tangon = tangon.Image;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Permissions;
    var _closure1_slot7 = tangon;
    tangon = 4;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot8 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flex': 1, 'paddingTop': 12};
    tangon['wrapper'] = offset;
    backup = 16;
    offset = {'flex': 0, 'marginHorizontal': 16};
    tangon['rowButton'] = offset;
    yankee = 'center';
    offset = {'flex': 1, 'justifyContent': 'center', 'alignItems': 'center', 'paddingHorizontal': 48};
    tangon['content'] = offset;
    offset = {};
    foxtra = 6;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    foxtra = foxtra.TextStyleSheet;
    output = foxtra.heading-md/bold;
    result = offset;
    foxtra = copyDataProperties(result, output);
    kiloes = 18;
    foxtra = 'fontSize';
    offset[foxtra] = kiloes;
    foxtra = 'marginTop';
    offset[foxtra] = backup;
    backup = 8;
    foxtra = 'marginBottom';
    offset[foxtra] = backup;
    tangon['headerText'] = offset;
    offset = {};
    offset['textAlign'] = yankee;
    tangon['text'] = offset;
    offset = {'borderRadius': null, 'height': 44, 'paddingHorizontal': 20, 'marginTop': 24};
    yankee = 7;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.xl;
    offset['borderRadius'] = yankee;
    tangon['button'] = offset;
    offset = {'marginHorizontal': 12, 'marginBottom': 12};
    tangon['personalizeButtonWrapper'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot10 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: ChannelsEmpty
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            michal = michal.guild;
            var _closure2_slot0 = michal;
            zuuluu = _closure1_slot10;
            tangon = undefined;
            ctrled = zuuluu.bind(tangon)();
            report = _closure1_slot0;
            oscard = _closure1_slot2;
            zuuluu = 8;
            zuuluu = oscard[zuuluu];
            option = report.bind(tangon)(zuuluu);
            golfie = option.useStateFromStoresObject;
            zuuluu = _closure1_slot6;
            oscard = new Array(1);
            oscard[0] = zuuluu;
            report = new Array(1);
            report[0] = michal;
            zuuluu = function() {
                entity = {};
                report = _closure1_slot6;
                oscard = report.can;
                michal = _closure1_slot7;
                zuuluu = michal.MANAGE_GUILD;
                tangon = _closure2_slot0;
                zuuluu = oscard.bind(report)(zuuluu, tangon);
                entity['canCustomizeGuild'] = zuuluu;
                zuuluu = report.can;
                michal = michal.MANAGE_CHANNELS;
                michal = zuuluu.bind(report)(michal, tangon);
                entity['canCreateChannel'] = michal;
                return entity;
            };
            zuuluu = golfie.bind(option)(oscard, zuuluu, report);
            oscard = zuuluu.canCustomizeGuild;
            offset = zuuluu.canCreateChannel;
            report = _closure1_slot3;
            option = report.useCallback;
            zuuluu = michal.id;
            golfie = new Array(1);
            golfie[0] = zuuluu;
            zuuluu = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 9;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.open;
                michal = _closure2_slot0;
                michal = michal.id;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            romeon = option.bind(report)(zuuluu, golfie);
            zuuluu = report.useCallback;
            golfie = michal.id;
            michal = new Array(1);
            michal[0] = golfie;
            entity = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 10;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.open;
                michal = _closure2_slot0;
                option = michal.id;
                offset = report;
                verify = null;
                golfie = null;
                oscard = null;
                michal = offset[tangon](verify, option, golfie, oscard, report);
                return entity;
            };
            sizing = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot9;
            michal = _closure1_slot4;
            entity = {};
            report = ctrled.wrapper;
            entity['style'] = report;
            if(!oscard) { _fun00002_ip = 361; continue _fun00001 }
 191:
            option = _closure1_slot8;
            golfie = _closure1_slot4;
            report = {};
            verify = ctrled.personalizeButtonWrapper;
            report['style'] = verify;
            output = _closure1_slot0;
            echoed = _closure1_slot2;
            verify = 11;
            verify = echoed[verify];
            verify = output.bind(tangon)(verify);
            yankee = verify.RowButton;
            verify = {};
            update = _closure1_slot1;
            foxtra = 12;
            foxtra = echoed[foxtra];
            backup = update.bind(tangon)(foxtra);
            foxtra = {};
            kiloes = 13;
            kiloes = echoed[kiloes];
            kiloes = update.bind(tangon)(kiloes);
            foxtra['source'] = kiloes;
            kiloes = true;
            foxtra['disableColor'] = kiloes;
            foxtra = option.bind(tangon)(backup, foxtra);
            verify['icon'] = foxtra;
            foxtra = 14;
            backup = echoed[foxtra];
            backup = output.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = echoed[foxtra];
            foxtra = output.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.Yhi9/P;
            foxtra = backup.bind(kiloes)(foxtra);
            verify['label'] = foxtra;
            verify['onPress'] = romeon;
            verify = option.bind(tangon)(yankee, verify);
            report['children'] = verify;
            oscard = option.bind(tangon)(golfie, report);
 361:
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot9;
            golfie = _closure1_slot4;
            oscard = {};
            verify = ctrled.content;
            oscard['style'] = verify;
            foxtra = _closure1_slot8;
            yankee = _closure1_slot5;
            verify = {};
            kiloes = _closure1_slot1;
            backup = _closure1_slot2;
            romeon = 15;
            romeon = backup[romeon];
            romeon = kiloes.bind(tangon)(romeon);
            verify['source'] = romeon;
            yankee = foxtra.bind(tangon)(yankee, verify);
            verify = new Array(4);
            verify[0] = yankee;
            echoed = _closure1_slot0;
            yankee = 6;
            romeon = backup[yankee];
            romeon = echoed.bind(tangon)(romeon);
            kiloes = romeon.Text;
            romeon = {'color': 'header-primary', 'variant': 'heading-md/bold'};
            update = ctrled.text;
            output = new Array(2);
            output[0] = update;
            update = ctrled.headerText;
            output[1] = update;
            romeon['style'] = output;
            source = 14;
            output = backup[source];
            output = echoed.bind(tangon)(output);
            vacuum = output.intl;
            update = vacuum.string;
            output = backup[source];
            output = echoed.bind(tangon)(output);
            output = output.t;
            output = output.o4s29v;
            output = update.bind(vacuum)(output);
            romeon['children'] = output;
            romeon = foxtra.bind(tangon)(kiloes, romeon);
            verify[1] = romeon;
            yankee = backup[yankee];
            yankee = echoed.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {'color': 'header-secondary', 'variant': 'text-md/medium'};
            kiloes = ctrled.text;
            yankee['style'] = kiloes;
            kiloes = backup[source];
            kiloes = echoed.bind(tangon)(kiloes);
            output = kiloes.intl;
            kiloes = output.string;
            backup = backup[source];
            backup = echoed.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.iypvFh;
            backup = kiloes.bind(output)(backup);
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            verify[2] = yankee;
            if(!offset) { _fun00002_ip = 812; continue _fun00001 }
 664:
            foxtra = _closure1_slot8;
            romeon = _closure1_slot4;
            yankee = {};
            update = _closure1_slot1;
            output = _closure1_slot2;
            echoed = 16;
            backup = output[echoed];
            kiloes = update.bind(tangon)(backup);
            backup = {};
            vacuum = true;
            backup['shrink'] = vacuum;
            ctrled = ctrled.button;
            backup['style'] = ctrled;
            echoed = output[echoed];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.Sizes;
            echoed = echoed.MEDIUM;
            backup['size'] = echoed;
            update = _closure1_slot0;
            result = output[source];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[source];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.63PyJS;
            output = result.bind(echoed)(output);
            backup['text'] = output;
            backup['onPress'] = sizing;
            backup = foxtra.bind(tangon)(kiloes, backup);
            yankee['children'] = backup;
            offset = foxtra.bind(tangon)(romeon, yankee);
 812:
            verify[3] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/tabs/guilds/empty_states/ChannelsEmpty.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();