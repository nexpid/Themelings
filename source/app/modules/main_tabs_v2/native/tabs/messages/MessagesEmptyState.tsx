// app/modules/main_tabs_v2/native/tabs/messages/MessagesEmptyState.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    options = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.View;
    var _closure1_slot4 = options;
    options = tango.Image;
    var _closure1_slot5 = options;
    tango = tango.ScrollView;
    var _closure1_slot6 = tango;
    offset = 2;
    tango = oscar[offset];
    tango = golf.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flex': 1, 'justifyContent': 'center'};
    tango['container'] = verify;
    verify = {};
    verify['flexGrow'] = offset;
    tango['scrollViewContentContainer'] = verify;
    verify = {'alignItems': 'center', 'justifyContent': 'center'};
    tango['innerContainer'] = verify;
    verify = {'alignItems': 'center', 'marginBottom': 24};
    tango['imageContainer'] = verify;
    verify = {};
    offset = 48;
    verify['paddingHorizontal'] = offset;
    tango['textWrapper'] = verify;
    verify = {'marginBottom': 24, 'textAlign': 'center'};
    tango['body'] = verify;
    verify = {'textAlign': 'center', 'fontSize': 18, 'marginBottom': 8};
    tango['title'] = verify;
    verify = {'paddingHorizontal': 16, 'paddingBottom': 16};
    tango['buttonWrapper'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot10 = tango;
    tango = 13;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/main_tabs_v2/native/tabs/messages/MessagesEmptyState.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: MessagesEmptyState
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = _closure1_slot10;
            tango = undefined;
            romeo = mike.bind(tango)();
            oscar = _closure1_slot0;
            output = _closure1_slot2;
            mike = 5;
            mike = output[mike];
            golf = oscar.bind(tango)(mike);
            report = golf.useStateFromStores;
            mike = _closure1_slot7;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                mike = _closure1_slot7;
                entity = mike.getWidth;
                entity = entity.bind(mike)();
                return entity;
            };
            mike = report.bind(golf)(zulu, mike);
            zulu = 6;
            zulu = output[zulu];
            report = oscar.bind(tango)(zulu);
            zulu = report.useNavigation;
            options = zulu.bind(report)();
            var _closure2_slot0 = options;
            golf = _closure1_slot3;
            report = golf.useCallback;
            zulu = new Array(1);
            zulu[0] = options;
            entity = function() {
                tango = _closure2_slot0;
                zulu = tango.navigate;
                mike = {};
                entity = 'add-friends';
                mike['screen'] = entity;
                entity = {'sourcePage': 'Messages Empty State', 'presentation': 'card'};
                mike['params'] = entity;
                entity = 'friends';
                entity = zulu.bind(tango)(entity, mike);
                entity = undefined;
                return entity;
            };
            backup = report.bind(golf)(entity, zulu);
            sizing = _closure1_slot1;
            entity = 7;
            entity = output[entity];
            zulu = sizing.bind(tango)(entity);
            entity = {};
            report = 8;
            golf = output[report];
            golf = oscar.bind(tango)(golf);
            golf = golf.ImpressionTypes;
            golf = golf.VIEW;
            entity['type'] = golf;
            report = output[report];
            report = oscar.bind(tango)(report);
            report = report.ImpressionNames;
            report = report.MESSAGES_EMPTY_NUX;
            entity['name'] = report;
            entity = zulu.bind(tango)(entity);
            entity = 1.05;
            echo = entity * mike;
            zulu = _closure1_slot8;
            mike = _closure1_slot6;
            entity = {'alwaysBounceVertical': false, 'bounces': false};
            report = romeo.scrollViewContentContainer;
            entity['contentContainerStyle'] = report;
            golf = _closure1_slot9;
            oscar = _closure1_slot4;
            report = {};
            options = romeo.container;
            report['style'] = options;
            options = {};
            verify = romeo.innerContainer;
            options['style'] = verify;
            verify = {};
            offset = romeo.imageContainer;
            verify['style'] = offset;
            yankee = _closure1_slot5;
            offset = {};
            foxtrot = 'contain';
            offset['resizeMode'] = foxtrot;
            foxtrot = 9;
            foxtrot = output[foxtrot];
            foxtrot = sizing.bind(tango)(foxtrot);
            offset['source'] = foxtrot;
            foxtrot = {};
            update = 350;
            result = 622;
            sizing = update;
            if(!(echo < result)) { _fun00002_ip = 343; continue _fun00001 }
 335:
            output = echo / result;
            sizing = output * update;
 343:
            foxtrot['height'] = sizing;
            sizing = global;
            output = sizing.Math;
            sizing = output.min;
            sizing = sizing.bind(output)(echo, result);
            foxtrot['width'] = sizing;
            offset['style'] = foxtrot;
            offset = zulu.bind(tango)(yankee, offset);
            verify['children'] = offset;
            offset = zulu.bind(tango)(oscar, verify);
            verify = new Array(2);
            verify[0] = offset;
            sizing = _closure1_slot9;
            yankee = _closure1_slot4;
            foxtrot = {};
            offset = romeo.textWrapper;
            foxtrot['style'] = offset;
            offset = _closure1_slot8;
            result = _closure1_slot0;
            echo = _closure1_slot2;
            update = 10;
            kilo = echo[update];
            kilo = result.bind(tango)(kilo);
            source = kilo.Text;
            output = {'color': 'header-primary', 'variant': 'heading-md/bold'};
            kilo = romeo.title;
            output['style'] = kilo;
            kilo = 11;
            control = echo[kilo];
            control = result.bind(tango)(control);
            sequence = control.intl;
            vacuum = sequence.string;
            control = echo[kilo];
            control = result.bind(tango)(control);
            control = control.t;
            control = control.8JZof3;
            control = vacuum.bind(sequence)(control);
            output['children'] = control;
            source = offset.bind(tango)(source, output);
            output = new Array(2);
            output[0] = source;
            update = echo[update];
            update = result.bind(tango)(update);
            source = update.Text;
            update = {'color': 'header-secondary', 'variant': 'text-md/medium'};
            control = romeo.body;
            update['style'] = control;
            control = echo[kilo];
            control = result.bind(tango)(control);
            sequence = control.intl;
            vacuum = sequence.string;
            control = echo[kilo];
            control = result.bind(tango)(control);
            control = control.t;
            control = control.qm+H7+;
            control = vacuum.bind(sequence)(control);
            update['children'] = control;
            update = offset.bind(tango)(source, update);
            output[1] = update;
            foxtrot['children'] = output;
            foxtrot = sizing.bind(tango)(yankee, foxtrot);
            verify[1] = foxtrot;
            options['children'] = verify;
            verify = golf.bind(tango)(oscar, options);
            options = new Array(2);
            options[0] = verify;
            verify = {};
            romeo = romeo.buttonWrapper;
            verify['style'] = romeo;
            romeo = 12;
            romeo = echo[romeo];
            romeo = result.bind(tango)(romeo);
            foxtrot = romeo.Button;
            romeo = {};
            sizing = echo[kilo];
            sizing = result.bind(tango)(sizing);
            output = sizing.intl;
            sizing = output.string;
            kilo = echo[kilo];
            kilo = result.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.zIJnAw;
            kilo = sizing.bind(output)(kilo);
            romeo['text'] = kilo;
            romeo['onPress'] = backup;
            backup = 'lg';
            romeo['size'] = backup;
            romeo = offset.bind(tango)(foxtrot, romeo);
            verify['children'] = romeo;
            verify = offset.bind(tango)(yankee, verify);
            options[1] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();