// app/modules/main_tabs_v2/native/tabs/messages/MessagesEmptyState.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    option = tangon.Image;
    var _closure1_slot5 = option;
    tangon = tangon.ScrollView;
    var _closure1_slot6 = tangon;
    offset = 2;
    tangon = oscard[offset];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot8 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'justifyContent': 'center'};
    tangon['container'] = verify;
    verify = {};
    verify['flexGrow'] = offset;
    tangon['scrollViewContentContainer'] = verify;
    verify = {'alignItems': 'center', 'justifyContent': 'center'};
    tangon['innerContainer'] = verify;
    verify = {'alignItems': 'center', 'marginBottom': 24};
    tangon['imageContainer'] = verify;
    verify = {};
    offset = 48;
    verify['paddingHorizontal'] = offset;
    tangon['textWrapper'] = verify;
    verify = {'marginBottom': 24, 'textAlign': 'center'};
    tangon['body'] = verify;
    verify = {'textAlign': 'center', 'fontSize': 18, 'marginBottom': 8};
    tangon['title'] = verify;
    verify = {'paddingHorizontal': 16, 'paddingBottom': 16};
    tangon['buttonWrapper'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/tabs/messages/MessagesEmptyState.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: MessagesEmptyState
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot10;
            tangon = undefined;
            romeon = michal.bind(tangon)();
            oscard = _closure1_slot0;
            output = _closure1_slot2;
            michal = 5;
            michal = output[michal];
            golfie = oscard.bind(tangon)(michal);
            report = golfie.useStateFromStores;
            michal = _closure1_slot7;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot7;
                entity = michal.getWidth;
                entity = entity.bind(michal)();
                return entity;
            };
            michal = report.bind(golfie)(zuuluu, michal);
            zuuluu = 6;
            zuuluu = output[zuuluu];
            report = oscard.bind(tangon)(zuuluu);
            zuuluu = report.useNavigation;
            option = zuuluu.bind(report)();
            var _closure2_slot0 = option;
            golfie = _closure1_slot3;
            report = golfie.useCallback;
            zuuluu = new Array(1);
            zuuluu[0] = option;
            entity = function() {
                tangon = _closure2_slot0;
                zuuluu = tangon.navigate;
                michal = {};
                entity = 'add-friends';
                michal['screen'] = entity;
                entity = {'sourcePage': 'Messages Empty State', 'presentation': 'card'};
                michal['params'] = entity;
                entity = 'friends';
                entity = zuuluu.bind(tangon)(entity, michal);
                entity = undefined;
                return entity;
            };
            backup = report.bind(golfie)(entity, zuuluu);
            sizing = _closure1_slot1;
            entity = 7;
            entity = output[entity];
            zuuluu = sizing.bind(tangon)(entity);
            entity = {};
            report = 8;
            golfie = output[report];
            golfie = oscard.bind(tangon)(golfie);
            golfie = golfie.ImpressionTypes;
            golfie = golfie.VIEW;
            entity['type'] = golfie;
            report = output[report];
            report = oscard.bind(tangon)(report);
            report = report.ImpressionNames;
            report = report.MESSAGES_EMPTY_NUX;
            entity['name'] = report;
            entity = zuuluu.bind(tangon)(entity);
            entity = 1.05;
            echoed = entity * michal;
            zuuluu = _closure1_slot8;
            michal = _closure1_slot6;
            entity = {'alwaysBounceVertical': false, 'bounces': false};
            report = romeon.scrollViewContentContainer;
            entity['contentContainerStyle'] = report;
            golfie = _closure1_slot9;
            oscard = _closure1_slot4;
            report = {};
            option = romeon.container;
            report['style'] = option;
            option = {};
            verify = romeon.innerContainer;
            option['style'] = verify;
            verify = {};
            offset = romeon.imageContainer;
            verify['style'] = offset;
            yankee = _closure1_slot5;
            offset = {};
            foxtra = 'contain';
            offset['resizeMode'] = foxtra;
            foxtra = 9;
            foxtra = output[foxtra];
            foxtra = sizing.bind(tangon)(foxtra);
            offset['source'] = foxtra;
            foxtra = {};
            update = 350;
            result = 622;
            sizing = update;
            if(!(echoed < result)) { _fun00002_ip = 347; continue _fun00001 }
 339:
            output = echoed / result;
            sizing = output * update;
 347:
            foxtra['height'] = sizing;
            sizing = global;
            output = sizing.Math;
            sizing = output.min;
            sizing = sizing.bind(output)(echoed, result);
            foxtra['width'] = sizing;
            offset['style'] = foxtra;
            offset = zuuluu.bind(tangon)(yankee, offset);
            verify['children'] = offset;
            offset = zuuluu.bind(tangon)(oscard, verify);
            verify = new Array(2);
            verify[0] = offset;
            sizing = _closure1_slot9;
            yankee = _closure1_slot4;
            foxtra = {};
            offset = romeon.textWrapper;
            foxtra['style'] = offset;
            offset = _closure1_slot8;
            result = _closure1_slot0;
            echoed = _closure1_slot2;
            update = 10;
            kiloes = echoed[update];
            kiloes = result.bind(tangon)(kiloes);
            source = kiloes.Text;
            output = {'color': 'header-primary', 'variant': 'heading-md/bold'};
            kiloes = romeon.title;
            output['style'] = kiloes;
            kiloes = 11;
            ctrled = echoed[kiloes];
            ctrled = result.bind(tangon)(ctrled);
            sequen = ctrled.intl;
            vacuum = sequen.string;
            ctrled = echoed[kiloes];
            ctrled = result.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.8JZof3;
            ctrled = vacuum.bind(sequen)(ctrled);
            output['children'] = ctrled;
            source = offset.bind(tangon)(source, output);
            output = new Array(2);
            output[0] = source;
            update = echoed[update];
            update = result.bind(tangon)(update);
            source = update.Text;
            update = {'color': 'header-secondary', 'variant': 'text-md/medium'};
            ctrled = romeon.body;
            update['style'] = ctrled;
            ctrled = echoed[kiloes];
            ctrled = result.bind(tangon)(ctrled);
            sequen = ctrled.intl;
            vacuum = sequen.string;
            ctrled = echoed[kiloes];
            ctrled = result.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.qm+H7+;
            ctrled = vacuum.bind(sequen)(ctrled);
            update['children'] = ctrled;
            update = offset.bind(tangon)(source, update);
            output[1] = update;
            foxtra['children'] = output;
            foxtra = sizing.bind(tangon)(yankee, foxtra);
            verify[1] = foxtra;
            option['children'] = verify;
            verify = golfie.bind(tangon)(oscard, option);
            option = new Array(2);
            option[0] = verify;
            verify = {};
            romeon = romeon.buttonWrapper;
            verify['style'] = romeon;
            romeon = 12;
            romeon = echoed[romeon];
            romeon = result.bind(tangon)(romeon);
            foxtra = romeon.Button;
            romeon = {};
            sizing = echoed[kiloes];
            sizing = result.bind(tangon)(sizing);
            output = sizing.intl;
            sizing = output.string;
            kiloes = echoed[kiloes];
            kiloes = result.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.zIJnAw;
            kiloes = sizing.bind(output)(kiloes);
            romeon['text'] = kiloes;
            romeon['onPress'] = backup;
            backup = 'lg';
            romeon['size'] = backup;
            romeon = offset.bind(tangon)(foxtra, romeon);
            verify['children'] = romeon;
            verify = offset.bind(tangon)(yankee, verify);
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();