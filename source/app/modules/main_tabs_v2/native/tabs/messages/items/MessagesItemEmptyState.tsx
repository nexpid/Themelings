// app/modules/main_tabs_v2/native/tabs/messages/items/MessagesItemEmptyState.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    oscard = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    report = golfie[entity];
    michal = argCor;
    entity = undefined;
    option = michal.bind(entity)(report);
    var _closure1_slot3 = option;
    michal = 1;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.Image;
    var _closure1_slot4 = report;
    michal = michal.View;
    var _closure1_slot5 = michal;
    michal = 2;
    report = golfie[michal];
    report = oscard.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot6 = report;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.jsxs;
    var _closure1_slot7 = michal;
    michal = 3;
    michal = golfie[michal];
    offset = oscard.bind(entity)(michal);
    verify = offset.createStyles;
    report = {};
    yankee = {'padding': null, 'flex': 1, 'height': 325};
    romeon = 4;
    michal = golfie[romeon];
    michal = foxtra.bind(entity)(michal);
    michal = michal.spacing;
    michal = michal.PX_16;
    yankee['padding'] = michal;
    michal = 325;
    report['container'] = yankee;
    yankee = {'marginBottom': null, 'flexShrink': 1, 'flexGrow': 1};
    backup = golfie[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    yankee['marginBottom'] = backup;
    report['containerImage'] = yankee;
    yankee = {'height': '100%', 'width': '100%'};
    report['image'] = yankee;
    yankee = {};
    backup = golfie[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    yankee['marginBottom'] = backup;
    romeon = golfie[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    yankee['marginTop'] = romeon;
    romeon = 'center';
    yankee['textAlign'] = romeon;
    report['body'] = yankee;
    yankee = {};
    yankee['textAlign'] = romeon;
    report['title'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot8 = report;
    report = option.memo;
    tangon = function() { // Original name: MessagesItemEmptyState
        entity = _closure1_slot8;
        tangon = undefined;
        yankee = entity.bind(tangon)();
        report = _closure1_slot3;
        zuuluu = report.useCallback;
        michal = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 5;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.getRootNavigationRef;
                zuuluu = michal.bind(zuuluu)();
                tangon = null;
                michal = tangon == zuuluu;
                report = zuuluu;
                if(michal) { _fun00002_ip = 59; continue _fun00001 }
 47:
                zuuluu = zuuluu.current;
                michal = tangon == zuuluu;
                report = zuuluu;
 59:
                if(michal) { _fun00002_ip = 110; continue _fun00001 }
 62:
                tangon = report.navigate;
                zuuluu = {};
                michal = 'add-friends';
                zuuluu['screen'] = michal;
                michal = {'sourcePage': 'Messages Empty State', 'presentation': 'card'};
                zuuluu['params'] = michal;
                michal = 'friends';
                michal = tangon.bind(report)(michal, zuuluu);
 110:
                return entity;
            }
        };
        entity = new Array(0);
        verify = zuuluu.bind(report)(michal, entity);
        zuuluu = _closure1_slot7;
        michal = _closure1_slot5;
        entity = {};
        report = yankee.container;
        entity['style'] = report;
        report = false;
        entity['collapsable'] = report;
        option = _closure1_slot6;
        report = {};
        golfie = yankee.containerImage;
        report['style'] = golfie;
        offset = _closure1_slot4;
        golfie = {};
        romeon = 'contain';
        golfie['resizeMode'] = romeon;
        foxtra = _closure1_slot1;
        backup = _closure1_slot2;
        romeon = 6;
        romeon = backup[romeon];
        romeon = foxtra.bind(tangon)(romeon);
        golfie['source'] = romeon;
        romeon = yankee.image;
        golfie['style'] = romeon;
        golfie = option.bind(tangon)(offset, golfie);
        report['children'] = golfie;
        golfie = option.bind(tangon)(michal, report);
        report = new Array(4);
        report[0] = golfie;
        foxtra = _closure1_slot0;
        oscard = 7;
        golfie = backup[oscard];
        golfie = foxtra.bind(tangon)(golfie);
        romeon = golfie.Text;
        golfie = {'color': 'header-primary', 'variant': 'heading-lg/bold', 'style': null, 'maxFontSizeMultiplier': 2};
        offset = yankee.title;
        golfie['style'] = offset;
        offset = 8;
        kiloes = backup[offset];
        kiloes = foxtra.bind(tangon)(kiloes);
        output = kiloes.intl;
        sizing = output.string;
        kiloes = backup[offset];
        kiloes = foxtra.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        kiloes = kiloes.8JZof3;
        kiloes = sizing.bind(output)(kiloes);
        golfie['children'] = kiloes;
        golfie = option.bind(tangon)(romeon, golfie);
        report[1] = golfie;
        oscard = backup[oscard];
        oscard = foxtra.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'color': 'header-secondary', 'variant': 'text-md/medium', 'style': null, 'maxFontSizeMultiplier': 2};
        yankee = yankee.body;
        oscard['style'] = yankee;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        kiloes = yankee.intl;
        romeon = kiloes.string;
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.qm+H7+;
        yankee = romeon.bind(kiloes)(yankee);
        oscard['children'] = yankee;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        oscard = 9;
        oscard = backup[oscard];
        oscard = foxtra.bind(tangon)(oscard);
        golfie = oscard.Button;
        oscard = {};
        yankee = backup[offset];
        yankee = foxtra.bind(tangon)(yankee);
        romeon = yankee.intl;
        yankee = romeon.string;
        offset = backup[offset];
        offset = foxtra.bind(tangon)(offset);
        offset = offset.t;
        offset = offset.zIJnAw;
        offset = yankee.bind(romeon)(offset);
        oscard['text'] = offset;
        oscard['onPress'] = verify;
        verify = 'lg';
        oscard['size'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[3] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    tangon = report.bind(option)(tangon);
    report = 10;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/main_tabs_v2/native/tabs/messages/items/MessagesItemEmptyState.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['MESSAGES_ITEM_EMPTY_STATE_HEIGHT'] = michal;
    return entity;
})();