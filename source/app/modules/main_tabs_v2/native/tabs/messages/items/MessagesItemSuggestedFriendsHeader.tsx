// app/modules/main_tabs_v2/native/tabs/messages/items/MessagesItemSuggestedFriendsHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, mike);
    entity = 0;
    report = golf[entity];
    mike = argCorge;
    entity = undefined;
    options = mike.bind(entity)(report);
    var _closure1_slot3 = options;
    mike = 1;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    backup = mike.StyleSheet;
    mike = mike.View;
    var _closure1_slot4 = mike;
    mike = 2;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot5 = report;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.Fragment;
    var _closure1_slot6 = report;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot7 = mike;
    mike = 3;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.TextStyleSheet;
    mike = mike.text-md/semibold;
    report = mike.lineHeight;
    romeo = 4;
    mike = golf[romeo];
    mike = foxtrot.bind(entity)(mike);
    mike = mike.spacing;
    mike = mike.PX_24;
    mike = report + mike;
    report = 5;
    report = golf[report];
    offset = oscar.bind(entity)(report);
    verify = offset.createStyles;
    report = {};
    yankee = {'height': null, 'justifyContent': 'center', 'overflow': 'hidden'};
    yankee['height'] = mike;
    report['headerContainer'] = yankee;
    yankee = {};
    output = backup.absoluteFillObject;
    result = yankee;
    backup = copyDataProperties(result, output);
    backup = golf[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    kilo = backup.PANEL_BG;
    backup = 'backgroundColor';
    yankee[backup] = kilo;
    report['stickyOverlay'] = yankee;
    yankee = {};
    romeo = golf[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    yankee['marginHorizontal'] = romeo;
    report['headerText'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot8 = report;
    report = {};
    verify = 'function MessagesItemSuggestedFriendsHeaderTsx1(){const{stickyAt,scrollPosition}=this.__closure;return stickyAt!=null&&scrollPosition.get()>=stickyAt;}';
    report['code'] = verify;
    var _closure1_slot9 = report;
    report = options.memo;
    tango = function(argFoo) { // Original name: MessagesItemSuggestedFriendsHeader
        _fun114910: for(var _fun114910_ip = 0; ; ) switch(_fun114910_ip) {
 0:
            mike = argFoo;
            foxtrot = mike.stickyAt;
            var _closure2_slot0 = foxtrot;
            romeo = mike.scrollPosition;
            var _closure2_slot1 = romeo;
            offset = mike.stickyLeft;
            var _closure2_slot2 = offset;
            options = mike.stickyTop;
            var _closure2_slot3 = options;
            mike = _closure1_slot8;
            tango = undefined;
            verify = mike.bind(tango)();
            zulu = _closure1_slot0;
            golf = _closure1_slot2;
            mike = 6;
            mike = golf[mike];
            report = zulu.bind(tango)(mike);
            zulu = report.useDerivedValue;
            mike = function() { // Original name: x
                _fun114911: for(var _fun114911_ip = 0; ; ) switch(_fun114911_ip) {
 0:
                    zulu = _closure2_slot0;
                    entity = null;
                    entity = entity != zulu;
                    if(!entity) { _fun114911_ip = 37; continue _fun114911 }
 16:
                    tango = _closure2_slot1;
                    zulu = tango.get;
                    zulu = zulu.bind(tango)();
                    mike = _closure2_slot0;
                    entity = zulu >= mike;
 37:
                    return entity;
                }
            };
            yankee = {};
            yankee['stickyAt'] = foxtrot;
            yankee['scrollPosition'] = romeo;
            mike['__closure'] = yankee;
            yankee = 895751186732.0;
            mike['__workletHash'] = yankee;
            yankee = _closure1_slot9;
            mike['__initData'] = yankee;
            zulu = zulu.bind(report)(mike);
            report = _closure1_slot1;
            mike = 7;
            mike = golf[mike];
            mike = report.bind(tango)(mike);
            report = mike.bind(tango)(zulu);
            golf = _closure1_slot3;
            zulu = golf.useMemo;
            mike = new Array(2);
            mike[0] = offset;
            mike[1] = options;
            entity = function() {
                entity = {};
                zulu = _closure2_slot2;
                zulu = -zulu;
                entity['left'] = zulu;
                mike = _closure2_slot3;
                mike = -mike;
                entity['top'] = mike;
                return entity;
            };
            foxtrot = zulu.bind(golf)(entity, mike);
            zulu = _closure1_slot7;
            mike = _closure1_slot4;
            entity = {};
            golf = verify.headerContainer;
            entity['style'] = golf;
            golf = null;
            if(!report) { _fun114910_ip = 324; continue _fun114910 }
 220:
            offset = _closure1_slot7;
            options = _closure1_slot6;
            report = {};
            backup = _closure1_slot5;
            romeo = _closure1_slot1;
            kilo = _closure1_slot2;
            yankee = 8;
            yankee = kilo[yankee];
            romeo = romeo.bind(tango)(yankee);
            yankee = {'absolute': true, 'wide': true, 'componentStyles': null, 'tall': true, 'mix': true};
            yankee['componentStyles'] = foxtrot;
            romeo = backup.bind(tango)(romeo, yankee);
            yankee = new Array(2);
            yankee[0] = romeo;
            foxtrot = _closure1_slot4;
            romeo = {};
            kilo = verify.stickyOverlay;
            romeo['style'] = kilo;
            romeo = backup.bind(tango)(foxtrot, romeo);
            yankee[1] = romeo;
            report['children'] = yankee;
            golf = offset.bind(tango)(options, report);
 324:
            report = new Array(2);
            report[0] = golf;
            options = _closure1_slot5;
            romeo = _closure1_slot0;
            foxtrot = _closure1_slot2;
            oscar = 3;
            oscar = foxtrot[oscar];
            oscar = romeo.bind(tango)(oscar);
            golf = oscar.Text;
            oscar = {'style': null, 'maxFontSizeMultiplier': 2, 'lineClamp': 1, 'accessibilityRole': 'header', 'variant': 'text-md/semibold', 'color': 'header-secondary'};
            verify = verify.headerText;
            oscar['style'] = verify;
            verify = 9;
            offset = foxtrot[verify];
            offset = romeo.bind(tango)(offset);
            yankee = offset.intl;
            offset = yankee.string;
            verify = foxtrot[verify];
            verify = romeo.bind(tango)(verify);
            verify = verify.t;
            verify = verify.1uAmCw;
            verify = offset.bind(yankee)(verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    tango = report.bind(options)(tango);
    report = 10;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/main_tabs_v2/native/tabs/messages/items/MessagesItemSuggestedFriendsHeader.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['MESSAGES_ITEM_SUGGESTED_FRIENDS_HEADER_HEIGHT'] = mike;
    return entity;
})();