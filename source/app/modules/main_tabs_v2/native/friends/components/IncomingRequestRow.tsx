// app/modules/main_tabs_v2/native/friends/components/IncomingRequestRow.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: IncomingRequestRow
        report = argFoo;
        kiloes = report.user;
        var _closure2_slot0 = kiloes;
        foxtra = report.applicationId;
        var _closure2_slot1 = foxtra;
        michal = report.accepted;
        var _closure2_slot2 = michal;
        romeon = report.onAcceptIncomingRequest;
        var _closure2_slot3 = romeon;
        yankee = report.onDeclineIncomingRequest;
        var _closure2_slot4 = yankee;
        result = report.accessibilityLabel;
        verify = report.acceptRequestAccessibilityLabel;
        var _closure2_slot5 = verify;
        option = report.ignoreRequestAccessibilityLabel;
        var _closure2_slot6 = option;
        update = report.acceptedRequestLabel;
        echoed = report.acceptedRequestAccessibilityLabel;
        tangon = {'user': 0, 'applicationId': 0, 'accepted': 0, 'onAcceptIncomingRequest': 0, 'onDeclineIncomingRequest': 0, 'accessibilityLabel': 0, 'acceptRequestAccessibilityLabel': 0, 'ignoreRequestAccessibilityLabel': 0, 'acceptedRequestLabel': 0, 'acceptedRequestAccessibilityLabel': 0};
        cntext = null;
        papara = tangon;
        zuuluu = silentSetPrototypeOf(papara, cntext);
        papara = {};
        cntext = report;
        record = tangon;
        golfie = copyDataProperties(papara, cntext, record);
        oscard = _closure1_slot0;
        sizing = _closure1_slot2;
        zuuluu = 6;
        zuuluu = sizing[zuuluu];
        tangon = undefined;
        backup = oscard.bind(tangon)(zuuluu);
        offset = backup.useSharedValue;
        zuuluu = false;
        backup = offset.bind(backup)(zuuluu);
        var _closure2_slot7 = backup;
        zuuluu = 7;
        offset = sizing[zuuluu];
        ctrled = oscard.bind(tangon)(offset);
        source = ctrled.useStateFromStores;
        offset = _closure1_slot4;
        output = new Array(1);
        output[0] = offset;
        offset = function() {
            entity = _closure1_slot4;
            entity = entity.useReducedMotion;
            return entity;
        };
        offset = source.bind(ctrled)(output, offset);
        vacuum = _closure1_slot3;
        ctrled = vacuum.useEffect;
        source = new Array(2);
        source[0] = michal;
        source[1] = backup;
        output = function() {
            zuuluu = _closure2_slot7;
            michal = zuuluu.set;
            entity = _closure2_slot2;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        output = ctrled.bind(vacuum)(output, source);
        ctrled = _closure1_slot3;
        source = ctrled.useMemo;
        output = new Array(4);
        output[0] = verify;
        output[1] = michal;
        output[2] = option;
        output[3] = kiloes;
        michal = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = _closure2_slot2;
                zuuluu = {};
                michal = _closure1_slot9;
                if(entity) { _fun00002_ip = 75; continue _fun00001 }
 19:
                entity = michal.ACCEPT;
                zuuluu['name'] = entity;
                entity = _closure2_slot5;
                zuuluu['label'] = entity;
                entity = new Array(2);
                entity[0] = zuuluu;
                tangon = {};
                report = _closure1_slot9;
                report = report.DECLINE;
                tangon['name'] = report;
                report = _closure2_slot6;
                tangon['label'] = report;
                entity[1] = tangon;
                _fun00002_ip = 195; continue _fun00001;
 75:
                michal = michal.WAVE;
                zuuluu['name'] = michal;
                tangon = _closure1_slot0;
                yankee = _closure1_slot2;
                michal = 8;
                report = yankee[michal];
                offset = undefined;
                report = tangon.bind(offset)(report);
                oscard = report.intl;
                report = oscard.formatToPlainString;
                michal = yankee[michal];
                michal = tangon.bind(offset)(michal);
                michal = michal.t;
                tangon = michal.m0zYbW;
                michal = {};
                verify = _closure1_slot1;
                option = 9;
                option = yankee[option];
                verify = verify.bind(offset)(option);
                option = verify.getName;
                golfie = _closure2_slot0;
                golfie = option.bind(verify)(golfie);
                michal['username'] = golfie;
                michal = report.bind(oscard)(tangon, michal);
                zuuluu['label'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity = michal;
 195:
                return entity;
            }
        };
        ctrled = source.bind(ctrled)(michal, output);
        vacuum = _closure1_slot3;
        source = vacuum.useCallback;
        output = new Array(5);
        output[0] = foxtra;
        output[1] = romeon;
        output[2] = yankee;
        output[3] = backup;
        output[4] = kiloes;
        michal = function(argFoo) {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = argFoo;
                entity = entity.nativeEvent;
                zuuluu = entity.actionName;
                michal = _closure1_slot9;
                michal = michal.ACCEPT;
                if(!(michal !== zuuluu)) { _fun00004_ip = 199; continue _fun00003 }
 34:
                michal = _closure1_slot9;
                michal = michal.DECLINE;
                if(!(michal !== zuuluu)) { _fun00004_ip = 123; continue _fun00003 }
 48:
                michal = _closure1_slot9;
                michal = michal.WAVE;
                if(!(michal !== zuuluu)) { _fun00004_ip = 66; continue _fun00003 }
 62:
                michal = undefined;
                return michal;
 66:
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot2;
                michal = 10;
                zuuluu = zuuluu[michal];
                michal = undefined;
                oscard = tangon.bind(michal)(zuuluu);
                report = oscard.sendWave;
                michal = _closure2_slot0;
                tangon = michal.id;
                zuuluu = true;
                michal = 'Incoming Friend Request';
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                return michal;
 123:
                zuuluu = _closure2_slot4;
                oscard = _closure2_slot0;
                michal = oscard.id;
                report = _closure2_slot1;
                tangon = undefined;
                michal = zuuluu.bind(tangon)(michal, report);
                zuuluu = _closure1_slot0;
                golfie = _closure1_slot2;
                michal = 10;
                michal = golfie[michal];
                tangon = zuuluu.bind(tangon)(michal);
                zuuluu = tangon.dismissIncomingRequest;
                michal = {};
                oscard = oscard.id;
                michal['userId'] = oscard;
                michal['applicationId'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return michal;
 199:
                report = _closure2_slot7;
                tangon = report.set;
                michal = true;
                michal = tangon.bind(report)(michal);
                oscard = _closure2_slot3;
                report = _closure2_slot0;
                michal = report.id;
                tangon = _closure2_slot1;
                zuuluu = undefined;
                michal = oscard.bind(zuuluu)(michal, tangon);
                michal = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 10;
                entity = oscard[entity];
                zuuluu = michal.bind(zuuluu)(entity);
                michal = zuuluu.acceptIncomingRequest;
                entity = {};
                report = report.id;
                entity['userId'] = report;
                entity['applicationId'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            }
        };
        output = source.bind(vacuum)(michal, output);
        michal = _closure1_slot1;
        source = 9;
        source = sizing[source];
        vacuum = michal.bind(tangon)(source);
        source = vacuum.useUserTag;
        sequen = source.bind(vacuum)(kiloes);
        var _closure2_slot8 = sequen;
        zuuluu = sizing[zuuluu];
        config = oscard.bind(tangon)(zuuluu);
        vacuum = config.useStateFromStores;
        zuuluu = _closure1_slot5;
        source = new Array(1);
        source[0] = zuuluu;
        zuuluu = function() {
            zuuluu = _closure1_slot5;
            michal = zuuluu.getApplication;
            entity = _closure2_slot1;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        config = vacuum.bind(config)(source, zuuluu);
        var _closure2_slot9 = config;
        vacuum = _closure1_slot3;
        source = vacuum.useMemo;
        zuuluu = new Array(3);
        zuuluu[0] = config;
        zuuluu[1] = foxtra;
        zuuluu[2] = sequen;
        entity = function() {
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                entity = _closure2_slot9;
                zuuluu = null;
                if(!(zuuluu == entity)) { _fun00006_ip = 34; continue _fun00005 }
 13:
                entity = _closure2_slot1;
                zuuluu = zuuluu != entity;
                entity = '';
                if(zuuluu) { _fun00006_ip = 32; continue _fun00005 }
 28:
                entity = _closure2_slot8;
 32:
                _fun00006_ip = 99; continue _fun00005;
 34:
                oscard = _closure1_slot8;
                tangon = _closure1_slot1;
                report = _closure1_slot2;
                zuuluu = 11;
                zuuluu = report[zuuluu];
                report = undefined;
                tangon = tangon.bind(report)(zuuluu);
                zuuluu = {'application': null, 'textVariant': 'text-xs/medium', 'iconSize': 12};
                michal = _closure2_slot9;
                zuuluu['application'] = michal;
                michal = michal.id;
                entity = oscard.bind(report)(tangon, zuuluu, michal);
 99:
                return entity;
            }
        };
        source = source.bind(vacuum)(entity, zuuluu);
        zuuluu = _closure1_slot8;
        entity = 12;
        entity = sizing[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        papara = entity;
        cntext = golfie;
        golfie = copyDataProperties(papara, cntext);
        golfie = 'user';
        entity[golfie] = kiloes;
        golfie = _closure1_slot7;
        vacuum = golfie.PENDING_INCOMING;
        golfie = 'type';
        entity[golfie] = vacuum;
        golfie = _closure1_slot6;
        vacuum = golfie.ACTIONS;
        golfie = 'mode';
        entity[golfie] = vacuum;
        golfie = 'accessibilityActions';
        entity[golfie] = ctrled;
        golfie = 'accessibilityLabel';
        entity[golfie] = result;
        golfie = 'onAccessibilityAction';
        entity[golfie] = output;
        result = _closure1_slot8;
        golfie = 13;
        golfie = sizing[golfie];
        golfie = oscard.bind(tangon)(golfie);
        output = golfie.ActionStatusSubLabel;
        golfie = {};
        golfie['actioned'] = backup;
        golfie['label'] = source;
        golfie['actionStatus'] = update;
        golfie['actionStatusAccessibilityLabel'] = echoed;
        echoed = !offset;
        golfie['animate'] = echoed;
        output = result.bind(tangon)(output, golfie);
        golfie = 'subLabel';
        entity[golfie] = output;
        golfie = _closure1_slot8;
        report = 14;
        report = sizing[report];
        report = oscard.bind(tangon)(report);
        oscard = report.IncomingRequestRowActions;
        report = {};
        report['user'] = kiloes;
        report['pressed'] = backup;
        report['applicationId'] = foxtra;
        report['onAcceptIncomingRequest'] = romeon;
        report['onDeclineIncomingRequest'] = yankee;
        offset = !offset;
        report['animate'] = offset;
        report['acceptRequestAccessibilityLabel'] = verify;
        report['ignoreRequestAccessibilityLabel'] = option;
        oscard = golfie.bind(tangon)(oscard, report);
        report = 'trailing';
        entity[report] = oscard;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot10 = entity;
    entity = function(argFoo) { // Original name: IncomingGameFriendRequestRow
        zuuluu = argFoo;
        golfie = zuuluu.user;
        offset = zuuluu.application;
        var _closure2_slot0 = offset;
        entity = null;
        michal = Object.create(entity);
        entity = 0;
        michal['user'] = entity;
        michal['application'] = entity;
        echoed = {};
        result = zuuluu;
        output = michal;
        report = copyDataProperties(echoed, result, output);
        michal = _closure1_slot1;
        romeon = _closure1_slot2;
        entity = 9;
        entity = romeon[entity];
        tangon = undefined;
        michal = michal.bind(tangon)(entity);
        entity = michal.useUserTag;
        yankee = entity.bind(michal)(golfie);
        zuuluu = _closure1_slot8;
        michal = _closure1_slot10;
        entity = {};
        entity['user'] = golfie;
        golfie = offset.id;
        entity['applicationId'] = golfie;
        golfie = _closure1_slot0;
        oscard = 8;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        backup = option.intl;
        foxtra = backup.formatToPlainString;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        verify = option.u6lp4+;
        option = {};
        option['name'] = yankee;
        option = foxtra.bind(backup)(verify, option);
        entity['accessibilityLabel'] = option;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        backup = option.intl;
        foxtra = backup.format;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        verify = option.gRgJGR;
        option = {};
        kiloes = function() { // Original name: applicationNameHook
            report = _closure1_slot8;
            michal = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 11;
            entity = zuuluu[entity];
            tangon = undefined;
            zuuluu = michal.bind(tangon)(entity);
            michal = {'application': null, 'textVariant': 'text-xs/medium', 'iconSize': 12};
            entity = _closure2_slot0;
            michal['application'] = entity;
            entity = entity.id;
            entity = report.bind(tangon)(zuuluu, michal, entity);
            return entity;
        };
        option['applicationNameHook'] = kiloes;
        option = foxtra.bind(backup)(verify, option);
        entity['acceptedRequestLabel'] = option;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        backup = option.intl;
        foxtra = backup.formatToPlainString;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        verify = option.Ke6fRE;
        option = {};
        option['name'] = yankee;
        kiloes = offset.name;
        option['applicationName'] = kiloes;
        option = foxtra.bind(backup)(verify, option);
        entity['acceptedRequestAccessibilityLabel'] = option;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        backup = option.intl;
        foxtra = backup.formatToPlainString;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        verify = option.kMUpdH;
        option = {};
        option['name'] = yankee;
        kiloes = offset.name;
        option['applicationName'] = kiloes;
        option = foxtra.bind(backup)(verify, option);
        entity['acceptRequestAccessibilityLabel'] = option;
        option = romeon[oscard];
        option = golfie.bind(tangon)(option);
        verify = option.intl;
        option = verify.formatToPlainString;
        oscard = romeon[oscard];
        oscard = golfie.bind(tangon)(oscard);
        oscard = oscard.t;
        golfie = oscard.d8Cw5e;
        oscard = {};
        oscard['name'] = yankee;
        offset = offset.name;
        oscard['applicationName'] = offset;
        oscard = option.bind(verify)(golfie, oscard);
        entity['ignoreRequestAccessibilityLabel'] = oscard;
        echoed = entity;
        result = report;
        report = copyDataProperties(echoed, result);
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot11 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.UserRowModes;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.RelationshipTypes;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot8 = tangon;
    tangon = {};
    golfie = 'accept';
    tangon['ACCEPT'] = golfie;
    golfie = 'decline';
    tangon['DECLINE'] = golfie;
    golfie = 'wave';
    tangon['WAVE'] = golfie;
    var _closure1_slot9 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/friends/components/IncomingRequestRow.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: IncomingFriendRequestRow
        zuuluu = argFoo;
        golfie = zuuluu.user;
        entity = null;
        michal = Object.create(entity);
        entity = 0;
        michal['user'] = entity;
        output = {};
        sizing = zuuluu;
        kiloes = michal;
        report = copyDataProperties(output, sizing, kiloes);
        michal = _closure1_slot1;
        yankee = _closure1_slot2;
        entity = 9;
        entity = yankee[entity];
        tangon = undefined;
        michal = michal.bind(tangon)(entity);
        entity = michal.useUserTag;
        offset = entity.bind(michal)(golfie);
        zuuluu = _closure1_slot8;
        michal = _closure1_slot10;
        entity = {};
        entity['user'] = golfie;
        golfie = _closure1_slot0;
        oscard = 8;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        foxtra = option.intl;
        romeon = foxtra.formatToPlainString;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        verify = option.u6lp4+;
        option = {};
        option['name'] = offset;
        option = romeon.bind(foxtra)(verify, option);
        entity['accessibilityLabel'] = option;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        romeon = option.intl;
        verify = romeon.string;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        option = option.0E614e;
        option = verify.bind(romeon)(option);
        entity['acceptedRequestLabel'] = option;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        foxtra = option.intl;
        romeon = foxtra.formatToPlainString;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        verify = option.cRwkp6;
        option = {};
        option['name'] = offset;
        option = romeon.bind(foxtra)(verify, option);
        entity['acceptedRequestAccessibilityLabel'] = option;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        foxtra = option.intl;
        romeon = foxtra.formatToPlainString;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        option = option.t;
        verify = option.MUfqsb;
        option = {};
        option['name'] = offset;
        option = romeon.bind(foxtra)(verify, option);
        entity['acceptRequestAccessibilityLabel'] = option;
        option = yankee[oscard];
        option = golfie.bind(tangon)(option);
        verify = option.intl;
        option = verify.formatToPlainString;
        oscard = yankee[oscard];
        oscard = golfie.bind(tangon)(oscard);
        oscard = oscard.t;
        golfie = oscard.0OF9IC;
        oscard = {};
        oscard['name'] = offset;
        oscard = option.bind(verify)(golfie, oscard);
        entity['ignoreRequestAccessibilityLabel'] = oscard;
        output = entity;
        sizing = report;
        report = copyDataProperties(output, sizing);
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['IncomingFriendRequestRow'] = tangon;
    michal = function(argFoo) { // Original name: ConnectedIncomingGameFriendRequestRow
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            report = argFoo;
            option = report.user;
            entity = report.applicationId;
            var _closure2_slot0 = entity;
            entity = null;
            tangon = Object.create(entity);
            michal = 0;
            tangon['user'] = michal;
            tangon['applicationId'] = michal;
            foxtra = {};
            romeon = report;
            yankee = tangon;
            oscard = copyDataProperties(foxtra, romeon, yankee);
            golfie = _closure1_slot0;
            report = _closure1_slot2;
            tangon = 7;
            tangon = report[tangon];
            report = undefined;
            verify = golfie.bind(report)(tangon);
            golfie = verify.useStateFromStores;
            offset = _closure1_slot5;
            tangon = new Array(1);
            tangon[0] = offset;
            zuuluu = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.getApplication;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            golfie = golfie.bind(verify)(tangon, zuuluu);
            zuuluu = entity == golfie;
            if(zuuluu) { _fun00008_ip = 142; continue _fun00007 }
 108:
            tangon = _closure1_slot8;
            zuuluu = _closure1_slot11;
            michal = {};
            michal['user'] = option;
            michal['application'] = golfie;
            foxtra = michal;
            romeon = oscard;
            oscard = copyDataProperties(foxtra, romeon);
            entity = tangon.bind(report)(zuuluu, michal);
 142:
            return entity;
        }
    };
    zuuluu['ConnectedIncomingGameFriendRequestRow'] = michal;
    return entity;
})();