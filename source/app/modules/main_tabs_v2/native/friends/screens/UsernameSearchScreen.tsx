// app/modules/main_tabs_v2/native/friends/screens/UsernameSearchScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ScrollView;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.AnalyticEvents;
    var _closure1_slot6 = golfie;
    tangon = tangon.AnalyticsSections;
    var _closure1_slot7 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot10 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'backgroundColor': null, 'paddingTop': 36};
    offset = 6;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_SECONDARY;
    verify['backgroundColor'] = foxtra;
    tangon['content'] = verify;
    verify = {};
    verify['flexGrow'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_BASE_SECONDARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['paddingHorizontal'] = romeon;
    tangon['container'] = verify;
    verify = {'marginTop': null, 'backgroundColor': 'transparent', 'paddingHorizontal': 0};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_32;
    verify['marginTop'] = romeon;
    tangon['inputContainer'] = verify;
    verify = {};
    romeon = 'center';
    verify['textAlign'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['marginTop'] = offset;
    tangon['titleText'] = verify;
    verify = {};
    offset = 'none';
    verify['textTransform'] = offset;
    tangon['headerText'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 16;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/friends/screens/UsernameSearchScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: UsernameSearchScreen
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            option = michal.navigation;
            var _closure2_slot0 = option;
            michal = _closure1_slot11;
            tangon = undefined;
            sizing = michal.bind(tangon)();
            oscard = _closure1_slot3;
            report = oscard.useEffect;
            zuuluu = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 7;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.track;
                michal = _closure1_slot6;
                zuuluu = michal.FRIEND_ADD_VIEWED;
                michal = {};
                oscard = _closure1_slot7;
                oscard = oscard.FRIENDS_ADD_BY_USERNAME_MODAL;
                michal['friend_add_type'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            michal = new Array(0);
            michal = report.bind(oscard)(zuuluu, michal);
            michal = _closure1_slot0;
            verify = _closure1_slot2;
            zuuluu = 8;
            zuuluu = verify[zuuluu];
            offset = michal.bind(tangon)(zuuluu);
            golfie = offset.useStateFromStores;
            zuuluu = _closure1_slot5;
            report = new Array(1);
            report[0] = zuuluu;
            zuuluu = function() {
                entity = _closure1_slot5;
                entity = entity.keyboardOpen;
                return entity;
            };
            echoed = golfie.bind(offset)(report, zuuluu);
            golfie = _closure1_slot1;
            zuuluu = 9;
            zuuluu = verify[zuuluu];
            zuuluu = golfie.bind(tangon)(zuuluu);
            zuuluu = zuuluu.bind(tangon)();
            backup = zuuluu.bottom;
            report = oscard.useRef;
            zuuluu = null;
            kiloes = report.bind(oscard)(zuuluu);
            var _closure2_slot1 = kiloes;
            report = oscard.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = option;
            entity = function() {
                tangon = _closure2_slot0;
                zuuluu = tangon.addListener;
                michal = 'transitionEnd';
                entity = function(argFoo) {
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        entity = argFoo;
                        entity = entity.data;
                        entity = entity.closing;
                        if(entity) { _fun00004_ip = 45; continue _fun00003 }
 17:
                        entity = _closure2_slot1;
                        michal = entity.current;
                        entity = null;
                        if(!(entity != michal)) { _fun00004_ip = 45; continue _fun00003 }
 35:
                        entity = michal.focus;
                        entity = entity.bind(michal)();
 45:
                        entity = undefined;
                        return entity;
                    }
                };
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            entity = report.bind(oscard)(entity, zuuluu);
            entity = 10;
            entity = verify[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useClientThemesOverride;
            offset = entity.bind(michal)();
            zuuluu = _closure1_slot9;
            michal = _closure1_slot10;
            entity = {};
            option = _closure1_slot8;
            report = 11;
            report = verify[report];
            oscard = golfie.bind(tangon)(report);
            report = {};
            yankee = true;
            report['absolute'] = yankee;
            oscard = option.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = 12;
            oscard = verify[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            yankee = sizing.content;
            verify = new Array(2);
            verify[0] = yankee;
            verify[1] = offset;
            oscard['style'] = verify;
            offset = _closure1_slot4;
            verify = {'alwaysBounceVertical': false, 'keyboardShouldPersistTaps': 'handled'};
            result = false;
            foxtra = sizing.container;
            yankee = new Array(2);
            yankee[0] = foxtra;
            foxtra = {};
            update = _closure1_slot1;
            source = _closure1_slot2;
            output = 6;
            output = source[output];
            output = update.bind(tangon)(output);
            output = output.spacing;
            output = output.PX_16;
            if(echoed) { _fun00002_ip = 351; continue _fun00001 }
 345:
            backup = backup + output;
            _fun00002_ip = 354; continue _fun00001;
 351:
            backup = output;
 354:
            foxtra['paddingBottom'] = backup;
            yankee[1] = foxtra;
            verify['contentContainerStyle'] = yankee;
            backup = _closure1_slot8;
            update = _closure1_slot0;
            source = _closure1_slot2;
            yankee = 13;
            yankee = source[yankee];
            yankee = update.bind(tangon)(yankee);
            foxtra = yankee.Text;
            yankee = {'style': null, 'variant': 'heading-xl/bold', 'color': 'header-primary', 'accessibilityRole': 'header'};
            output = sizing.titleText;
            yankee['style'] = output;
            output = 14;
            echoed = source[output];
            echoed = update.bind(tangon)(echoed);
            vacuum = echoed.intl;
            ctrled = vacuum.string;
            echoed = source[output];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.QzVsOj;
            echoed = ctrled.bind(vacuum)(echoed);
            yankee['children'] = echoed;
            foxtra = backup.bind(tangon)(foxtra, yankee);
            yankee = new Array(2);
            yankee[0] = foxtra;
            foxtra = _closure1_slot1;
            romeon = 15;
            romeon = source[romeon];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            echoed = sizing.inputContainer;
            romeon['style'] = echoed;
            romeon['autoFocusInput'] = result;
            result = source[output];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = source[output];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.YEOwDA;
            output = result.bind(echoed)(output);
            romeon['headerText'] = output;
            sizing = sizing.headerText;
            romeon['headerTextStyle'] = sizing;
            romeon['ref'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            verify['children'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();