// app/modules/main_tabs_v2/native/friends/screens/UsernameSearchScreen.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    romeo = 1;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    tango = tango.ScrollView;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.AnalyticEvents;
    var _closure1_slot6 = golf;
    tango = tango.AnalyticsSections;
    var _closure1_slot7 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot8 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot9 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot10 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flex': 1, 'backgroundColor': null, 'paddingTop': 36};
    offset = 6;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BASE_SECONDARY;
    verify['backgroundColor'] = foxtrot;
    tango['content'] = verify;
    verify = {};
    verify['flexGrow'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BG_BASE_SECONDARY;
    verify['backgroundColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['paddingHorizontal'] = romeo;
    tango['container'] = verify;
    verify = {'marginTop': null, 'backgroundColor': 'transparent', 'paddingHorizontal': 0};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_32;
    verify['marginTop'] = romeo;
    tango['inputContainer'] = verify;
    verify = {};
    romeo = 'center';
    verify['textAlign'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['marginTop'] = offset;
    tango['titleText'] = verify;
    verify = {};
    offset = 'none';
    verify['textTransform'] = offset;
    tango['headerText'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot11 = tango;
    tango = 16;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/main_tabs_v2/native/friends/screens/UsernameSearchScreen.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: UsernameSearchScreen
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            options = mike.navigation;
            var _closure2_slot0 = options;
            mike = _closure1_slot11;
            tango = undefined;
            sizing = mike.bind(tango)();
            oscar = _closure1_slot3;
            report = oscar.useEffect;
            zulu = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 7;
                mike = mike[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.track;
                mike = _closure1_slot6;
                zulu = mike.FRIEND_ADD_VIEWED;
                mike = {};
                oscar = _closure1_slot7;
                oscar = oscar.FRIENDS_ADD_BY_USERNAME_MODAL;
                mike['friend_add_type'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            mike = new Array(0);
            mike = report.bind(oscar)(zulu, mike);
            mike = _closure1_slot0;
            verify = _closure1_slot2;
            zulu = 8;
            zulu = verify[zulu];
            offset = mike.bind(tango)(zulu);
            golf = offset.useStateFromStores;
            zulu = _closure1_slot5;
            report = new Array(1);
            report[0] = zulu;
            zulu = function() {
                entity = _closure1_slot5;
                entity = entity.keyboardOpen;
                return entity;
            };
            echo = golf.bind(offset)(report, zulu);
            golf = _closure1_slot1;
            zulu = 9;
            zulu = verify[zulu];
            zulu = golf.bind(tango)(zulu);
            zulu = zulu.bind(tango)();
            backup = zulu.bottom;
            report = oscar.useRef;
            zulu = null;
            kilo = report.bind(oscar)(zulu);
            var _closure2_slot1 = kilo;
            report = oscar.useEffect;
            zulu = new Array(1);
            zulu[0] = options;
            entity = function() {
                tango = _closure2_slot0;
                zulu = tango.addListener;
                mike = 'transitionEnd';
                entity = function(argFoo) {
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        entity = argFoo;
                        entity = entity.data;
                        entity = entity.closing;
                        if(entity) { _fun00004_ip = 45; continue _fun00003 }
 17:
                        entity = _closure2_slot1;
                        mike = entity.current;
                        entity = null;
                        if(!(entity != mike)) { _fun00004_ip = 45; continue _fun00003 }
 35:
                        entity = mike.focus;
                        entity = entity.bind(mike)();
 45:
                        entity = undefined;
                        return entity;
                    }
                };
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            entity = report.bind(oscar)(entity, zulu);
            entity = 10;
            entity = verify[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.useClientThemesOverride;
            offset = entity.bind(mike)();
            zulu = _closure1_slot9;
            mike = _closure1_slot10;
            entity = {};
            options = _closure1_slot8;
            report = 11;
            report = verify[report];
            oscar = golf.bind(tango)(report);
            report = {};
            yankee = true;
            report['absolute'] = yankee;
            oscar = options.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = 12;
            oscar = verify[oscar];
            golf = golf.bind(tango)(oscar);
            oscar = {};
            yankee = sizing.content;
            verify = new Array(2);
            verify[0] = yankee;
            verify[1] = offset;
            oscar['style'] = verify;
            offset = _closure1_slot4;
            verify = {'alwaysBounceVertical': false, 'keyboardShouldPersistTaps': 'handled'};
            result = false;
            foxtrot = sizing.container;
            yankee = new Array(2);
            yankee[0] = foxtrot;
            foxtrot = {};
            update = _closure1_slot1;
            source = _closure1_slot2;
            output = 6;
            output = source[output];
            output = update.bind(tango)(output);
            output = output.spacing;
            output = output.PX_16;
            if(echo) { _fun00002_ip = 351; continue _fun00001 }
 345:
            backup = backup + output;
            _fun00002_ip = 354; continue _fun00001;
 351:
            backup = output;
 354:
            foxtrot['paddingBottom'] = backup;
            yankee[1] = foxtrot;
            verify['contentContainerStyle'] = yankee;
            backup = _closure1_slot8;
            update = _closure1_slot0;
            source = _closure1_slot2;
            yankee = 13;
            yankee = source[yankee];
            yankee = update.bind(tango)(yankee);
            foxtrot = yankee.Text;
            yankee = {'style': null, 'variant': 'heading-xl/bold', 'color': 'header-primary', 'accessibilityRole': 'header'};
            output = sizing.titleText;
            yankee['style'] = output;
            output = 14;
            echo = source[output];
            echo = update.bind(tango)(echo);
            vacuum = echo.intl;
            control = vacuum.string;
            echo = source[output];
            echo = update.bind(tango)(echo);
            echo = echo.t;
            echo = echo.QzVsOj;
            echo = control.bind(vacuum)(echo);
            yankee['children'] = echo;
            foxtrot = backup.bind(tango)(foxtrot, yankee);
            yankee = new Array(2);
            yankee[0] = foxtrot;
            foxtrot = _closure1_slot1;
            romeo = 15;
            romeo = source[romeo];
            foxtrot = foxtrot.bind(tango)(romeo);
            romeo = {};
            echo = sizing.inputContainer;
            romeo['style'] = echo;
            romeo['autoFocusInput'] = result;
            result = source[output];
            result = update.bind(tango)(result);
            echo = result.intl;
            result = echo.string;
            output = source[output];
            output = update.bind(tango)(output);
            output = output.t;
            output = output.YEOwDA;
            output = result.bind(echo)(output);
            romeo['headerText'] = output;
            sizing = sizing.headerText;
            romeo['headerTextStyle'] = sizing;
            romeo['ref'] = kilo;
            romeo = backup.bind(tango)(foxtrot, romeo);
            yankee[1] = romeo;
            verify['children'] = yankee;
            verify = zulu.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();