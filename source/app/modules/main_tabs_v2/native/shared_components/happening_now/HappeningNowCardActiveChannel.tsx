// app/modules/main_tabs_v2/native/shared_components/happening_now/HappeningNowCardActiveChannel.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    golfie = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    yankee = 2;
    tangon = oscard[yankee];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MAX_STORED_MESSAGES;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.HappeningNowCardTrackingType;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.AnalyticEvents;
    var _closure1_slot11 = option;
    tangon = tangon.Routes;
    var _closure1_slot12 = tangon;
    tangon = 8;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot13 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot14 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flexShrink': 1, 'marginLeft': 4, 'gap': 2};
    tangon['content'] = offset;
    offset = {};
    offset['marginBottom'] = yankee;
    tangon['avatarsWrapper'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot15 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            golfie = michal.index;
            var _closure2_slot0 = golfie;
            echoed = michal.guildId;
            var _closure2_slot1 = echoed;
            verify = michal.channelId;
            var _closure2_slot2 = verify;
            romeon = michal.fullwidth;
            oscard = michal.panelVariant;
            report = undefined;
            if(!(oscard === report)) { _fun00002_ip = 52; continue _fun00001 }
 50:
            oscard = false;
 52:
            var _closure2_slot3 = report;
            michal = _closure1_slot15;
            yankee = michal.bind(report)();
            backup = _closure1_slot0;
            kiloes = _closure1_slot2;
            zuuluu = 10;
            michal = kiloes[zuuluu];
            foxtra = backup.bind(report)(michal);
            option = foxtra.useStateFromStores;
            michal = _closure1_slot7;
            tangon = new Array(1);
            tangon[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot7;
                michal = zuuluu.getChannel;
                entity = _closure2_slot2;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            foxtra = option.bind(foxtra)(tangon, michal);
            michal = kiloes[zuuluu];
            output = backup.bind(report)(michal);
            sizing = output.useStateFromStores;
            michal = _closure1_slot8;
            option = new Array(2);
            option[0] = michal;
            michal = _closure1_slot9;
            option[1] = michal;
            tangon = function() {
                zuuluu = _closure1_slot1;
                oscard = _closure1_slot2;
                michal = 11;
                michal = oscard[michal];
                report = undefined;
                tangon = zuuluu.bind(report)(michal);
                zuuluu = tangon.keys;
                option = _closure1_slot8;
                golfie = option.getTypingUsers;
                michal = _closure2_slot2;
                michal = golfie.bind(option)(michal);
                tangon = zuuluu.bind(tangon)(michal);
                zuuluu = tangon.map;
                michal = function(argFoo) {
                    zuuluu = _closure1_slot9;
                    michal = zuuluu.getUser;
                    entity = argFoo;
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
                };
                zuuluu = zuuluu.bind(tangon)(michal);
                michal = zuuluu.filter;
                tangon = _closure1_slot0;
                entity = 12;
                entity = oscard[entity];
                entity = tangon.bind(report)(entity);
                entity = entity.isNotNullish;
                michal = michal.bind(zuuluu)(entity);
                entity = 0;
                entity = michal[entity];
                return entity;
            };
            update = sizing.bind(output)(option, tangon);
            tangon = kiloes[zuuluu];
            output = backup.bind(report)(tangon);
            sizing = output.useStateFromStoresArray;
            tangon = _closure1_slot5;
            option = new Array(1);
            option[0] = tangon;
            tangon = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot5;
                    michal = zuuluu.getChannelMessageData;
                    entity = _closure2_slot2;
                    entity = michal.bind(zuuluu)(entity);
                    michal = null;
                    if(!(michal == entity)) { _fun00004_ip = 37; continue _fun00003 }
 33:
                    entity = new Array(0);
 37:
                    return entity;
                }
            };
            option = sizing.bind(output)(option, tangon);
            _closure2_slot3 = option;
            tangon = _closure1_slot3;
            result = tangon.useMemo;
            output = new Array(1);
            output[0] = option;
            sizing = function() {
                golfie = _closure1_slot1;
                oscard = _closure1_slot2;
                michal = 13;
                zuuluu = oscard[michal];
                report = undefined;
                tangon = golfie.bind(report)(zuuluu);
                zuuluu = tangon.uniq;
                michal = oscard[michal];
                verify = golfie.bind(report)(michal);
                option = verify.map;
                golfie = _closure2_slot3;
                michal = 'userId';
                michal = option.bind(verify)(golfie, michal);
                zuuluu = zuuluu.bind(tangon)(michal);
                michal = zuuluu.filter;
                tangon = _closure1_slot0;
                entity = 12;
                entity = oscard[entity];
                entity = tangon.bind(report)(entity);
                entity = entity.isNotNullish;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            result = result.bind(tangon)(sizing, output);
            sizing = 14;
            sizing = kiloes[sizing];
            output = backup.bind(report)(sizing);
            sizing = output.useEnsureHydratedUsers;
            sizing = sizing.bind(output)(echoed, result);
            zuuluu = kiloes[zuuluu];
            kiloes = backup.bind(report)(zuuluu);
            backup = kiloes.useStateFromStoresArray;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                golfie = _closure1_slot1;
                oscard = _closure1_slot2;
                michal = 13;
                zuuluu = oscard[michal];
                report = undefined;
                tangon = golfie.bind(report)(zuuluu);
                zuuluu = tangon.uniq;
                michal = oscard[michal];
                verify = golfie.bind(report)(michal);
                option = verify.map;
                golfie = _closure2_slot3;
                michal = 'userId';
                michal = option.bind(verify)(golfie, michal);
                tangon = zuuluu.bind(tangon)(michal);
                zuuluu = tangon.map;
                michal = function(argFoo) {
                    zuuluu = _closure1_slot9;
                    michal = zuuluu.getUser;
                    entity = argFoo;
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
                };
                zuuluu = zuuluu.bind(tangon)(michal);
                michal = zuuluu.filter;
                tangon = _closure1_slot0;
                entity = 12;
                entity = oscard[entity];
                entity = tangon.bind(report)(entity);
                entity = entity.isNotNullish;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            result = backup.bind(kiloes)(zuuluu, michal);
            zuuluu = tangon.useCallback;
            michal = new Array(3);
            michal[0] = verify;
            michal[1] = golfie;
            michal[2] = echoed;
            entity = function() {
                tangon = _closure1_slot1;
                report = _closure1_slot2;
                entity = 15;
                zuuluu = report[entity];
                entity = undefined;
                verify = tangon.bind(entity)(zuuluu);
                option = verify.track;
                zuuluu = _closure1_slot11;
                tangon = zuuluu.ACTIVITY_CARD_CLICKED;
                zuuluu = {};
                golfie = _closure2_slot0;
                zuuluu['order'] = golfie;
                golfie = _closure2_slot1;
                zuuluu['guild_id'] = golfie;
                offset = _closure1_slot10;
                offset = offset.ACTIVE_CHANNEL_CARD;
                zuuluu['type'] = offset;
                oscard = _closure2_slot2;
                zuuluu['destination_channel_id'] = oscard;
                zuuluu = option.bind(verify)(tangon, zuuluu);
                tangon = _closure1_slot0;
                zuuluu = 16;
                zuuluu = report[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = tangon.transitionTo;
                report = _closure1_slot12;
                michal = report.CHANNEL;
                michal = michal.bind(report)(golfie, oscard);
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            verify = zuuluu.bind(tangon)(entity, michal);
            entity = null;
            if(!(entity != foxtra)) { _fun00002_ip = 817; continue _fun00001 }
 341:
            zuuluu = option.length;
            michal = _closure1_slot6;
            if(!(!(zuuluu < michal))) { _fun00002_ip = 413; continue _fun00001 }
 354:
            golfie = _closure1_slot0;
            backup = _closure1_slot2;
            michal = 17;
            zuuluu = backup[michal];
            zuuluu = golfie.bind(report)(zuuluu);
            tangon = zuuluu.intl;
            zuuluu = tangon.string;
            michal = backup[michal];
            michal = golfie.bind(report)(michal);
            michal = michal.t;
            michal = michal.LCutYW;
            output = zuuluu.bind(tangon)(michal);
            _fun00002_ip = 482; continue _fun00001;
 413:
            zuuluu = _closure1_slot0;
            backup = _closure1_slot2;
            michal = 17;
            tangon = backup[michal];
            tangon = zuuluu.bind(report)(tangon);
            golfie = tangon.intl;
            tangon = golfie.formatToPlainString;
            michal = backup[michal];
            michal = zuuluu.bind(report)(michal);
            michal = michal.t;
            zuuluu = michal.VdpclZ;
            michal = {};
            option = option.length;
            michal['count'] = option;
            output = tangon.bind(golfie)(zuuluu, michal);
 482:
            tangon = _closure1_slot0;
            michal = _closure1_slot2;
            zuuluu = 18;
            golfie = michal[zuuluu];
            option = tangon.bind(report)(golfie);
            golfie = option.getChannelIcon;
            option = golfie.bind(option)(foxtra);
            zuuluu = michal[zuuluu];
            tangon = tangon.bind(report)(zuuluu);
            zuuluu = tangon.getChannelIconComponent;
            golfie = zuuluu.bind(tangon)(foxtra);
            tangon = _closure1_slot13;
            zuuluu = _closure1_slot1;
            backup = 19;
            michal = michal[backup];
            zuuluu = zuuluu.bind(report)(michal);
            michal = {};
            michal['onPress'] = verify;
            verify = 'medium';
            if(!romeon) { _fun00002_ip = 570; continue _fun00001 }
 566:
            verify = 'full';
 570:
            michal['width'] = verify;
            michal['badgeIcon'] = option;
            michal['IconComponent'] = golfie;
            michal['panelVariant'] = oscard;
            option = _closure1_slot14;
            golfie = _closure1_slot4;
            oscard = {};
            verify = yankee.content;
            oscard['style'] = verify;
            romeon = _closure1_slot13;
            verify = {};
            yankee = yankee.avatarsWrapper;
            verify['style'] = yankee;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            kiloes = 20;
            kiloes = offset[kiloes];
            kiloes = yankee.bind(report)(kiloes);
            sizing = kiloes.HappeningNowAvatarStack;
            kiloes = {};
            update = entity != update;
            kiloes['isTyping'] = update;
            update = 3;
            kiloes['userLimit'] = update;
            kiloes['users'] = result;
            update = result.length;
            kiloes['userCount'] = update;
            kiloes['guildId'] = echoed;
            kiloes = romeon.bind(report)(sizing, kiloes);
            verify['children'] = kiloes;
            kiloes = romeon.bind(report)(golfie, verify);
            verify = new Array(3);
            verify[0] = kiloes;
            kiloes = offset[backup];
            kiloes = yankee.bind(report)(kiloes);
            sizing = kiloes.HappeningNowCardHeader;
            kiloes = {};
            echoed = result.length;
            result = 0;
            result = echoed > result;
            kiloes['noMargin'] = result;
            kiloes['children'] = output;
            kiloes = romeon.bind(report)(sizing, kiloes);
            verify[1] = kiloes;
            offset = offset[backup];
            offset = yankee.bind(report)(offset);
            yankee = offset.HappeningNowCardSubtitle;
            offset = {};
            foxtra = foxtra.name;
            offset['children'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 817:
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/main_tabs_v2/native/shared_components/happening_now/HappeningNowCardActiveChannel.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();