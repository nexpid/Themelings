// app/modules/nameplates/native/NameplateCardPreview.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'position': 'absolute', 'justifyContent': 'center', 'alignItems': 'center', 'width': '100%', 'height': '100%'};
    romeon = '100%';
    offset = 3;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['paddingHorizontal'] = foxtra;
    tangon['nameplatePreviewContainer'] = verify;
    verify = {};
    verify['width'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_BASE_SECONDARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xs;
    verify['borderRadius'] = romeon;
    tangon['nameplateContainer'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_MOD_FAINT;
    verify['backgroundColor'] = offset;
    tangon['nameplate'] = verify;
    verify = {};
    offset = 0.5;
    verify['opacity'] = offset;
    tangon['purchased'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/nameplates/native/NameplateCardPreview.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            zuuluu = entity.item;
            oscard = entity.isPurchased;
            entity = _closure1_slot6;
            tangon = undefined;
            output = entity.bind(tangon)();
            michal = _closure1_slot1;
            report = _closure1_slot2;
            entity = 4;
            entity = report[entity];
            verify = michal.bind(tangon)(entity);
            option = zuuluu.type;
            michal = _closure1_slot0;
            entity = 5;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            entity = entity.CollectiblesItemType;
            entity = entity.NAMEPLATE;
            option = option === entity;
            entity = 'Item must be Nameplate';
            entity = verify.bind(tangon)(option, entity);
            entity = 6;
            entity = report[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.getNameplateDataFromRecord;
            result = entity.bind(michal)(zuuluu);
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            option = output.nameplatePreviewContainer;
            report = new Array(2);
            report[0] = option;
            if(!oscard) { _fun00002_ip = 152; continue _fun00001 }
 146:
            oscard = output.purchased;
 152:
            report[1] = oscard;
            entity['style'] = report;
            option = _closure1_slot4;
            yankee = _closure1_slot0;
            romeon = _closure1_slot2;
            oscard = 7;
            report = romeon[oscard];
            report = yankee.bind(tangon)(report);
            foxtra = report.NameplateDummyUserPreview;
            report = {'width': 34, 'avatarSize': null, 'hideAvatar': true};
            offset = 8;
            verify = romeon[offset];
            verify = yankee.bind(tangon)(verify);
            verify = verify.AvatarSizes;
            verify = verify.XSMALL_20;
            report['avatarSize'] = verify;
            kiloes = {};
            verify = 0.3;
            kiloes['opacity'] = verify;
            backup = new Array(1);
            backup[0] = kiloes;
            report['style'] = backup;
            foxtra = option.bind(tangon)(foxtra, report);
            report = new Array(5);
            report[0] = foxtra;
            foxtra = romeon[oscard];
            foxtra = yankee.bind(tangon)(foxtra);
            kiloes = foxtra.NameplateDummyUserPreview;
            foxtra = {'width': 44, 'avatarSize': null, 'hideAvatar': true};
            backup = romeon[offset];
            backup = yankee.bind(tangon)(backup);
            backup = backup.AvatarSizes;
            backup = backup.XSMALL_20;
            foxtra['avatarSize'] = backup;
            echoed = {};
            backup = 0.6;
            echoed['opacity'] = backup;
            sizing = new Array(1);
            sizing[0] = echoed;
            foxtra['style'] = sizing;
            foxtra = option.bind(tangon)(kiloes, foxtra);
            report[1] = foxtra;
            foxtra = _closure1_slot3;
            golfie = {};
            kiloes = output.nameplateContainer;
            golfie['style'] = kiloes;
            kiloes = romeon[oscard];
            kiloes = yankee.bind(tangon)(kiloes);
            sizing = kiloes.NameplateDummyUserPreview;
            kiloes = {};
            echoed = 54;
            kiloes['width'] = echoed;
            echoed = romeon[offset];
            echoed = yankee.bind(tangon)(echoed);
            echoed = echoed.AvatarSizes;
            echoed = echoed.XSMALL_20;
            kiloes['avatarSize'] = echoed;
            kiloes['nameplate'] = result;
            output = output.nameplate;
            kiloes['style'] = output;
            kiloes = option.bind(tangon)(sizing, kiloes);
            golfie['children'] = kiloes;
            golfie = option.bind(tangon)(foxtra, golfie);
            report[2] = golfie;
            golfie = romeon[oscard];
            golfie = yankee.bind(tangon)(golfie);
            foxtra = golfie.NameplateDummyUserPreview;
            golfie = {'width': 44, 'avatarSize': null, 'hideAvatar': true};
            kiloes = romeon[offset];
            kiloes = yankee.bind(tangon)(kiloes);
            kiloes = kiloes.AvatarSizes;
            kiloes = kiloes.XSMALL_20;
            golfie['avatarSize'] = kiloes;
            kiloes = {};
            kiloes['opacity'] = backup;
            backup = new Array(1);
            backup[0] = kiloes;
            golfie['style'] = backup;
            golfie = option.bind(tangon)(foxtra, golfie);
            report[3] = golfie;
            oscard = romeon[oscard];
            oscard = yankee.bind(tangon)(oscard);
            golfie = oscard.NameplateDummyUserPreview;
            oscard = {'width': 34, 'avatarSize': null, 'hideAvatar': true};
            offset = romeon[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.AvatarSizes;
            offset = offset.XSMALL_20;
            oscard['avatarSize'] = offset;
            offset = {};
            offset['opacity'] = verify;
            verify = new Array(1);
            verify[0] = offset;
            oscard['style'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();