// app/modules/intl/native/IntlTestingSettingsPage.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function() { // Original name: TestLocaleSelector
        tango = _closure1_slot10;
        zulu = _closure1_slot12;
        mike = {};
        golf = _closure1_slot11;
        offset = _closure1_slot0;
        romeo = _closure1_slot2;
        entity = 9;
        report = romeo[entity];
        entity = undefined;
        report = offset.bind(entity)(report);
        oscar = report.TableRadioGroup;
        report = {'title': 'Locale', 'hasIcons': false};
        options = 10;
        options = romeo[options];
        options = offset.bind(entity)(options);
        options = options.intl;
        options = options.currentLocale;
        report['value'] = options;
        options = function() {
            tango = _closure1_slot4;
            zulu = undefined;
            mike = function* (argFoo) {
                entity = function* (argFoo) { // Original name: ?anon_0_
                    _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                        StartGenerator();
                        oscar = argFoo;
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(mike) { _fun00002_ip = 71; continue _fun00001 }
 10:
                        mike = _closure1_slot8;
                        zulu = undefined;
                        mike = mike.bind(zulu)(oscar);
                        SaveGenerator(address=28);
 26:
                        return mike;
 28:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00002_ip = 68; continue _fun00001 }
 34:
                        report = _closure1_slot1;
                        golf = _closure1_slot2;
                        tango = 11;
                        tango = golf[tango];
                        report = report.bind(zulu)(tango);
                        tango = report.updateLocale;
                        tango = tango.bind(report)(oscar);
                        return zulu;
 68:
                        return mike;
 71:
                        return entity;
                    }
                };
                return entity;
            };
            mike = tango.bind(zulu)(mike);
            var _closure3_slot0 = mike;
            entity = function() {
                entity = undefined;
                tango = _closure3_slot0;
                zulu = tango.apply;
                entity = arguments;
                mike = entity;
                entity = this;
                entity = zulu.bind(tango)(entity, mike);
                return entity;
            };
            return entity;
        };
        options = options.bind(entity)();
        report['onChange'] = options;
        backup = _closure1_slot10;
        verify = 12;
        options = romeo[verify];
        options = offset.bind(entity)(options);
        foxtrot = options.TableRadioRow;
        options = {'label': 'English', 'value': 'en-US'};
        foxtrot = backup.bind(entity)(foxtrot, options);
        options = new Array(2);
        options[0] = foxtrot;
        yankee = _closure1_slot10;
        verify = romeo[verify];
        verify = offset.bind(entity)(verify);
        offset = verify.TableRadioRow;
        verify = {'label': 'French', 'value': 'fr'};
        verify = yankee.bind(entity)(offset, verify);
        options[1] = verify;
        report['children'] = options;
        report = golf.bind(entity)(oscar, report);
        mike['children'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function() { // Original name: LocaleInfo
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            romeo = _closure1_slot0;
            backup = _closure1_slot2;
            entity = 13;
            entity = backup[entity];
            tango = undefined;
            oscar = romeo.bind(tango)(entity);
            report = oscar.useStateFromStores;
            entity = _closure1_slot9;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = _closure1_slot9;
                entity = entity.locale;
                return entity;
            };
            result = report.bind(oscar)(mike, entity);
            golf = _closure1_slot5;
            oscar = golf.useState;
            mike = _closure1_slot1;
            entity = 14;
            report = backup[entity];
            report = mike.bind(tango)(report);
            report = report.locale;
            golf = oscar.bind(golf)(report);
            oscar = _closure1_slot3;
            report = 2;
            oscar = oscar.bind(tango)(golf, report);
            report = 0;
            yankee = oscar[report];
            report = 1;
            report = oscar[report];
            var _closure2_slot0 = report;
            golf = _closure1_slot5;
            oscar = golf.useEffect;
            report = new Array(1);
            report[0] = result;
            zulu = function() {
                entity = global;
                tango = entity.setTimeout;
                entity = undefined;
                zulu = function() {
                    zulu = _closure2_slot0;
                    tango = _closure1_slot1;
                    mike = _closure1_slot2;
                    entity = 14;
                    mike = mike[entity];
                    entity = undefined;
                    tango = tango.bind(entity)(mike);
                    mike = tango.locale;
                    mike = mike.bind(tango)();
                    mike = zulu.bind(entity)(mike);
                    return entity;
                };
                mike = 0;
                mike = tango.bind(entity)(zulu, mike);
                return entity;
            };
            zulu = oscar.bind(golf)(zulu, report);
            entity = backup[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.localeData;
            entity = entity.bind(mike)();
            offset = entity._abbr;
            zulu = _closure1_slot11;
            entity = 15;
            entity = backup[entity];
            entity = romeo.bind(tango)(entity);
            mike = entity.TableRowGroup;
            entity = {};
            golf = _closure1_slot10;
            verify = 16;
            report = backup[verify];
            report = romeo.bind(tango)(report);
            oscar = report.TableRow;
            report = {};
            options = 'Active System';
            report['label'] = options;
            sizing = _closure1_slot10;
            options = backup[verify];
            options = romeo.bind(tango)(options);
            options = options.TableRow;
            kilo = options.TrailingText;
            options = {};
            output = '@discord/intl';
            options['text'] = output;
            options = sizing.bind(tango)(kilo, options);
            report['trailing'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(4);
            report[0] = oscar;
            options = _closure1_slot10;
            oscar = backup[verify];
            oscar = romeo.bind(tango)(oscar);
            golf = oscar.TableRow;
            oscar = {};
            kilo = 'App locale';
            oscar['label'] = kilo;
            output = _closure1_slot10;
            kilo = backup[verify];
            kilo = romeo.bind(tango)(kilo);
            kilo = kilo.TableRow;
            sizing = kilo.TrailingText;
            kilo = {};
            kilo['text'] = result;
            kilo = output.bind(tango)(sizing, kilo);
            oscar['trailing'] = kilo;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            options = _closure1_slot10;
            oscar = backup[verify];
            oscar = romeo.bind(tango)(oscar);
            golf = oscar.TableRow;
            oscar = {};
            kilo = '@discord/intl locale';
            oscar['label'] = kilo;
            output = _closure1_slot10;
            kilo = backup[verify];
            kilo = romeo.bind(tango)(kilo);
            kilo = kilo.TableRow;
            sizing = kilo.TrailingText;
            kilo = {};
            result = 10;
            result = backup[result];
            result = romeo.bind(tango)(result);
            result = result.intl;
            result = result.currentLocale;
            kilo['text'] = result;
            kilo = output.bind(tango)(sizing, kilo);
            oscar['trailing'] = kilo;
            oscar = options.bind(tango)(golf, oscar);
            report[2] = oscar;
            options = _closure1_slot10;
            oscar = backup[verify];
            oscar = romeo.bind(tango)(oscar);
            golf = oscar.TableRow;
            oscar = {};
            kilo = 'Moment locale';
            oscar['label'] = kilo;
            foxtrot = _closure1_slot10;
            verify = backup[verify];
            verify = romeo.bind(tango)(verify);
            verify = verify.TableRow;
            romeo = verify.TrailingText;
            verify = {};
            verify['text'] = yankee;
            verify = foxtrot.bind(tango)(romeo, verify);
            oscar['trailing'] = verify;
            verify = 'Locale data does not match';
            if(!(yankee === offset)) { _fun00004_ip = 576; continue _fun00003 }
 570:
            verify = 'Locale data matches current locale';
 576:
            oscar['subLabel'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[3] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot15 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot6 = golf;
    tango = tango.ScrollView;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.setAppLocale;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot9 = tango;
    tango = 6;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot10 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot11 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot12 = tango;
    tango = 7;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 8;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    tango['wrap'] = verify;
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tango['container'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot13 = tango;
    tango = 22;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/intl/native/IntlTestingSettingsPage.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: IntlTestingSettingsPage
        entity = _closure1_slot13;
        tango = undefined;
        options = entity.bind(tango)();
        report = _closure1_slot5;
        zulu = report.useSyncExternalStore;
        kilo = _closure1_slot0;
        output = _closure1_slot2;
        backup = 10;
        entity = output[backup];
        entity = kilo.bind(tango)(entity);
        entity = entity.intl;
        mike = entity.onLocaleChange;
        entity = function() {
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 10;
            mike = mike[entity];
            entity = undefined;
            entity = zulu.bind(entity)(mike);
            entity = entity.intl;
            entity = entity.currentLocale;
            return entity;
        };
        entity = zulu.bind(report)(mike, entity);
        zulu = _closure1_slot5;
        mike = zulu.useState;
        entity = {};
        zulu = mike.bind(zulu)(entity);
        mike = _closure1_slot3;
        entity = 2;
        mike = mike.bind(tango)(zulu, entity);
        entity = 1;
        entity = mike[entity];
        var _closure2_slot0 = entity;
        report = _closure1_slot5;
        zulu = report.useEffect;
        mike = function() {
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 17;
            mike = mike[entity];
            entity = undefined;
            zulu = zulu.bind(entity)(mike);
            mike = zulu.waitForAllDefaultIntlMessagesLoaded;
            tango = mike.bind(zulu)();
            zulu = tango.then;
            mike = function() {
                zulu = _closure2_slot0;
                entity = undefined;
                mike = {};
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        zulu = _closure1_slot10;
        mike = _closure1_slot7;
        entity = {};
        report = options.wrap;
        entity['style'] = report;
        golf = _closure1_slot11;
        report = 18;
        report = output[report];
        report = kilo.bind(tango)(report);
        oscar = report.Stack;
        report = {};
        verify = 24;
        report['spacing'] = verify;
        options = options.container;
        report['style'] = options;
        yankee = _closure1_slot10;
        verify = _closure1_slot15;
        options = {};
        verify = yankee.bind(tango)(verify, options);
        options = new Array(8);
        options[0] = verify;
        romeo = _closure1_slot10;
        yankee = _closure1_slot14;
        verify = {};
        verify = romeo.bind(tango)(yankee, verify);
        options[1] = verify;
        update = _closure1_slot10;
        verify = 19;
        yankee = output[verify];
        yankee = kilo.bind(tango)(yankee);
        echo = yankee.Text;
        yankee = {};
        result = 'text-md/normal';
        yankee['variant'] = result;
        romeo = output[backup];
        romeo = kilo.bind(tango)(romeo);
        sequence = romeo.intl;
        vacuum = sequence.format;
        foxtrot = _closure1_slot1;
        romeo = 20;
        source = output[romeo];
        source = foxtrot.bind(tango)(source);
        control = source.HMvECw;
        source = {};
        source = vacuum.bind(sequence)(control, source);
        yankee['children'] = source;
        yankee = update.bind(tango)(echo, yankee);
        options[2] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kilo.bind(tango)(yankee);
        echo = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kilo.bind(tango)(source);
        sequence = source.intl;
        vacuum = sequence.format;
        source = 21;
        source = output[source];
        source = foxtrot.bind(tango)(source);
        control = source.swfLzc;
        source = {};
        source = vacuum.bind(sequence)(control, source);
        yankee['children'] = source;
        yankee = update.bind(tango)(echo, yankee);
        options[3] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kilo.bind(tango)(yankee);
        echo = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kilo.bind(tango)(source);
        sequence = source.intl;
        vacuum = sequence.format;
        source = output[romeo];
        source = foxtrot.bind(tango)(source);
        control = source.rmps8/;
        source = {};
        source = vacuum.bind(sequence)(control, source);
        yankee['children'] = source;
        yankee = update.bind(tango)(echo, yankee);
        options[4] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kilo.bind(tango)(yankee);
        echo = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kilo.bind(tango)(source);
        sequence = source.intl;
        vacuum = sequence.format;
        source = output[romeo];
        source = foxtrot.bind(tango)(source);
        control = source.uczI4u;
        source = {};
        config = function() { // Original name: linkTarget
            entity = undefined;
            return entity;
        };
        source['linkTarget'] = config;
        source = vacuum.bind(sequence)(control, source);
        yankee['children'] = source;
        yankee = update.bind(tango)(echo, yankee);
        options[5] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kilo.bind(tango)(yankee);
        echo = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kilo.bind(tango)(source);
        sequence = source.intl;
        vacuum = sequence.format;
        source = output[romeo];
        source = foxtrot.bind(tango)(source);
        control = source.rdfRys;
        source = {};
        source = vacuum.bind(sequence)(control, source);
        yankee['children'] = source;
        yankee = update.bind(tango)(echo, yankee);
        options[6] = yankee;
        yankee = _closure1_slot10;
        verify = output[verify];
        verify = kilo.bind(tango)(verify);
        offset = verify.Text;
        verify = {};
        verify['variant'] = result;
        backup = output[backup];
        backup = kilo.bind(tango)(backup);
        kilo = backup.intl;
        backup = kilo.format;
        romeo = output[romeo];
        romeo = foxtrot.bind(tango)(romeo);
        foxtrot = romeo.XOdbAw;
        romeo = {};
        output = 'some user';
        romeo['username'] = output;
        sizing = function(argFoo) { // Original name: usernameHook
            tango = _closure1_slot10;
            zulu = _closure1_slot6;
            mike = {};
            report = {'backgroundColor': 'green', 'borderRadius': 4, 'paddingHorizontal': 6, 'paddingVertical': 0};
            mike['style'] = report;
            golf = _closure1_slot10;
            oscar = _closure1_slot0;
            report = _closure1_slot2;
            entity = 19;
            report = report[entity];
            entity = undefined;
            report = oscar.bind(entity)(report);
            oscar = report.Text;
            report = {'variant': 'text-sm/normal', 'color': 'white'};
            options = argFoo;
            report['children'] = options;
            report = golf.bind(entity)(oscar, report);
            mike['children'] = report;
            entity = tango.bind(entity)(zulu, mike);
            return entity;
        };
        romeo['usernameHook'] = sizing;
        romeo = backup.bind(kilo)(foxtrot, romeo);
        verify['children'] = romeo;
        verify = yankee.bind(tango)(offset, verify);
        options[7] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();