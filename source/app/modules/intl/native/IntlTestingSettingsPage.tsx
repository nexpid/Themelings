// app/modules/intl/native/IntlTestingSettingsPage.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: TestLocaleSelector
        tangon = _closure1_slot11;
        golfie = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 9;
        entity = verify[entity];
        zuuluu = undefined;
        entity = golfie.bind(zuuluu)(entity);
        michal = entity.TableRadioGroup;
        entity = {'title': 'Locale', 'hasIcons': false};
        report = 10;
        report = verify[report];
        report = golfie.bind(zuuluu)(report);
        report = report.intl;
        report = report.currentLocale;
        entity['value'] = report;
        report = function() {
            tangon = _closure1_slot4;
            zuuluu = undefined;
            michal = function* (argFoo) {
                entity = function* (argFoo) { // Original name: ?anon_0_
                    _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                        StartGenerator();
                        oscard = argFoo;
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00002_ip = 71; continue _fun00001 }
 10:
                        michal = _closure1_slot8;
                        zuuluu = undefined;
                        michal = michal.bind(zuuluu)(oscard);
                        SaveGenerator(address=28);
 26:
                        return michal;
 28:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00002_ip = 68; continue _fun00001 }
 34:
                        report = _closure1_slot1;
                        golfie = _closure1_slot2;
                        tangon = 11;
                        tangon = golfie[tangon];
                        report = report.bind(zuuluu)(tangon);
                        tangon = report.updateLocale;
                        tangon = tangon.bind(report)(oscard);
                        return zuuluu;
 68:
                        return michal;
 71:
                        return entity;
                    }
                };
                return entity;
            };
            michal = tangon.bind(zuuluu)(michal);
            var _closure3_slot0 = michal;
            entity = function() {
                entity = undefined;
                tangon = _closure3_slot0;
                zuuluu = tangon.apply;
                entity = arguments;
                michal = entity;
                entity = this;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            return entity;
        };
        report = report.bind(zuuluu)();
        entity['onChange'] = report;
        yankee = _closure1_slot10;
        oscard = 12;
        report = verify[oscard];
        report = golfie.bind(zuuluu)(report);
        offset = report.TableRadioRow;
        report = {'label': 'English', 'value': 'en-US'};
        offset = yankee.bind(zuuluu)(offset, report);
        report = new Array(2);
        report[0] = offset;
        option = _closure1_slot10;
        oscard = verify[oscard];
        oscard = golfie.bind(zuuluu)(oscard);
        golfie = oscard.TableRadioRow;
        oscard = {'label': 'French', 'value': 'fr'};
        oscard = option.bind(zuuluu)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = function() { // Original name: LocaleInfo
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            romeon = _closure1_slot0;
            backup = _closure1_slot2;
            entity = 13;
            entity = backup[entity];
            tangon = undefined;
            oscard = romeon.bind(tangon)(entity);
            report = oscard.useStateFromStores;
            entity = _closure1_slot9;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = _closure1_slot9;
                entity = entity.locale;
                return entity;
            };
            result = report.bind(oscard)(michal, entity);
            golfie = _closure1_slot5;
            oscard = golfie.useState;
            michal = _closure1_slot1;
            entity = 14;
            report = backup[entity];
            report = michal.bind(tangon)(report);
            report = report.locale;
            golfie = oscard.bind(golfie)(report);
            oscard = _closure1_slot3;
            report = 2;
            oscard = oscard.bind(tangon)(golfie, report);
            report = 0;
            yankee = oscard[report];
            report = 1;
            report = oscard[report];
            var _closure2_slot0 = report;
            golfie = _closure1_slot5;
            oscard = golfie.useEffect;
            report = new Array(1);
            report[0] = result;
            zuuluu = function() {
                entity = global;
                tangon = entity.setTimeout;
                entity = undefined;
                zuuluu = function() {
                    zuuluu = _closure2_slot0;
                    tangon = _closure1_slot1;
                    michal = _closure1_slot2;
                    entity = 14;
                    michal = michal[entity];
                    entity = undefined;
                    tangon = tangon.bind(entity)(michal);
                    michal = tangon.locale;
                    michal = michal.bind(tangon)();
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                michal = 0;
                michal = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            zuuluu = oscard.bind(golfie)(zuuluu, report);
            entity = backup[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.localeData;
            entity = entity.bind(michal)();
            offset = entity._abbr;
            zuuluu = _closure1_slot11;
            entity = 15;
            entity = backup[entity];
            entity = romeon.bind(tangon)(entity);
            michal = entity.TableRowGroup;
            entity = {};
            golfie = _closure1_slot10;
            verify = 16;
            report = backup[verify];
            report = romeon.bind(tangon)(report);
            oscard = report.TableRow;
            report = {};
            option = 'Active System';
            report['label'] = option;
            sizing = _closure1_slot10;
            option = backup[verify];
            option = romeon.bind(tangon)(option);
            option = option.TableRow;
            kiloes = option.TrailingText;
            option = {};
            output = '@discord/intl';
            option['text'] = output;
            option = sizing.bind(tangon)(kiloes, option);
            report['trailing'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(4);
            report[0] = oscard;
            option = _closure1_slot10;
            oscard = backup[verify];
            oscard = romeon.bind(tangon)(oscard);
            golfie = oscard.TableRow;
            oscard = {};
            kiloes = 'App locale';
            oscard['label'] = kiloes;
            output = _closure1_slot10;
            kiloes = backup[verify];
            kiloes = romeon.bind(tangon)(kiloes);
            kiloes = kiloes.TableRow;
            sizing = kiloes.TrailingText;
            kiloes = {};
            kiloes['text'] = result;
            kiloes = output.bind(tangon)(sizing, kiloes);
            oscard['trailing'] = kiloes;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            option = _closure1_slot10;
            oscard = backup[verify];
            oscard = romeon.bind(tangon)(oscard);
            golfie = oscard.TableRow;
            oscard = {};
            kiloes = '@discord/intl locale';
            oscard['label'] = kiloes;
            output = _closure1_slot10;
            kiloes = backup[verify];
            kiloes = romeon.bind(tangon)(kiloes);
            kiloes = kiloes.TableRow;
            sizing = kiloes.TrailingText;
            kiloes = {};
            result = 10;
            result = backup[result];
            result = romeon.bind(tangon)(result);
            result = result.intl;
            result = result.currentLocale;
            kiloes['text'] = result;
            kiloes = output.bind(tangon)(sizing, kiloes);
            oscard['trailing'] = kiloes;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            option = _closure1_slot10;
            oscard = backup[verify];
            oscard = romeon.bind(tangon)(oscard);
            golfie = oscard.TableRow;
            oscard = {};
            kiloes = 'Moment locale';
            oscard['label'] = kiloes;
            foxtra = _closure1_slot10;
            verify = backup[verify];
            verify = romeon.bind(tangon)(verify);
            verify = verify.TableRow;
            romeon = verify.TrailingText;
            verify = {};
            verify['text'] = yankee;
            verify = foxtra.bind(tangon)(romeon, verify);
            oscard['trailing'] = verify;
            verify = 'Locale data does not match';
            if(!(yankee === offset)) { _fun00004_ip = 576; continue _fun00003 }
 570:
            verify = 'Locale data matches current locale';
 576:
            oscard['subLabel'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[3] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot6 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.setAppLocale;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 8;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = offset;
    tangon['wrap'] = verify;
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/intl/native/IntlTestingSettingsPage.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: IntlTestingSettingsPage
        entity = _closure1_slot12;
        tangon = undefined;
        option = entity.bind(tangon)();
        report = _closure1_slot5;
        zuuluu = report.useSyncExternalStore;
        kiloes = _closure1_slot0;
        output = _closure1_slot2;
        backup = 10;
        entity = output[backup];
        entity = kiloes.bind(tangon)(entity);
        entity = entity.intl;
        michal = entity.onLocaleChange;
        entity = function() {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 10;
            michal = michal[entity];
            entity = undefined;
            entity = zuuluu.bind(entity)(michal);
            entity = entity.intl;
            entity = entity.currentLocale;
            return entity;
        };
        entity = zuuluu.bind(report)(michal, entity);
        zuuluu = _closure1_slot5;
        michal = zuuluu.useState;
        entity = {};
        zuuluu = michal.bind(zuuluu)(entity);
        michal = _closure1_slot3;
        entity = 2;
        michal = michal.bind(tangon)(zuuluu, entity);
        entity = 1;
        entity = michal[entity];
        var _closure2_slot0 = entity;
        report = _closure1_slot5;
        zuuluu = report.useEffect;
        michal = function() {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 17;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.waitForAllDefaultIntlMessagesLoaded;
            tangon = michal.bind(zuuluu)();
            zuuluu = tangon.then;
            michal = function() {
                zuuluu = _closure2_slot0;
                entity = undefined;
                michal = {};
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        entity = new Array(0);
        entity = zuuluu.bind(report)(michal, entity);
        zuuluu = _closure1_slot10;
        michal = _closure1_slot7;
        entity = {};
        report = option.wrap;
        entity['style'] = report;
        golfie = _closure1_slot11;
        report = 18;
        report = output[report];
        report = kiloes.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        verify = 24;
        report['spacing'] = verify;
        option = option.container;
        report['style'] = option;
        yankee = _closure1_slot10;
        verify = _closure1_slot14;
        option = {};
        verify = yankee.bind(tangon)(verify, option);
        option = new Array(8);
        option[0] = verify;
        romeon = _closure1_slot10;
        yankee = _closure1_slot13;
        verify = {};
        verify = romeon.bind(tangon)(yankee, verify);
        option[1] = verify;
        update = _closure1_slot10;
        verify = 19;
        yankee = output[verify];
        yankee = kiloes.bind(tangon)(yankee);
        echoed = yankee.Text;
        yankee = {};
        result = 'text-md/normal';
        yankee['variant'] = result;
        romeon = output[backup];
        romeon = kiloes.bind(tangon)(romeon);
        sequen = romeon.intl;
        vacuum = sequen.format;
        foxtra = _closure1_slot1;
        romeon = 20;
        source = output[romeon];
        source = foxtra.bind(tangon)(source);
        ctrled = source.HMvECw;
        source = {};
        source = vacuum.bind(sequen)(ctrled, source);
        yankee['children'] = source;
        yankee = update.bind(tangon)(echoed, yankee);
        option[2] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kiloes.bind(tangon)(yankee);
        echoed = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kiloes.bind(tangon)(source);
        sequen = source.intl;
        vacuum = sequen.format;
        source = 21;
        source = output[source];
        source = foxtra.bind(tangon)(source);
        ctrled = source.swfLzc;
        source = {};
        source = vacuum.bind(sequen)(ctrled, source);
        yankee['children'] = source;
        yankee = update.bind(tangon)(echoed, yankee);
        option[3] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kiloes.bind(tangon)(yankee);
        echoed = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kiloes.bind(tangon)(source);
        sequen = source.intl;
        vacuum = sequen.format;
        source = output[romeon];
        source = foxtra.bind(tangon)(source);
        ctrled = source.rmps8/;
        source = {};
        source = vacuum.bind(sequen)(ctrled, source);
        yankee['children'] = source;
        yankee = update.bind(tangon)(echoed, yankee);
        option[4] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kiloes.bind(tangon)(yankee);
        echoed = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kiloes.bind(tangon)(source);
        sequen = source.intl;
        vacuum = sequen.format;
        source = output[romeon];
        source = foxtra.bind(tangon)(source);
        ctrled = source.uczI4u;
        source = {};
        config = function() { // Original name: linkTarget
            entity = undefined;
            return entity;
        };
        source['linkTarget'] = config;
        source = vacuum.bind(sequen)(ctrled, source);
        yankee['children'] = source;
        yankee = update.bind(tangon)(echoed, yankee);
        option[5] = yankee;
        update = _closure1_slot10;
        yankee = output[verify];
        yankee = kiloes.bind(tangon)(yankee);
        echoed = yankee.Text;
        yankee = {};
        yankee['variant'] = result;
        source = output[backup];
        source = kiloes.bind(tangon)(source);
        sequen = source.intl;
        vacuum = sequen.format;
        source = output[romeon];
        source = foxtra.bind(tangon)(source);
        ctrled = source.rdfRys;
        source = {};
        source = vacuum.bind(sequen)(ctrled, source);
        yankee['children'] = source;
        yankee = update.bind(tangon)(echoed, yankee);
        option[6] = yankee;
        yankee = _closure1_slot10;
        verify = output[verify];
        verify = kiloes.bind(tangon)(verify);
        offset = verify.Text;
        verify = {};
        verify['variant'] = result;
        backup = output[backup];
        backup = kiloes.bind(tangon)(backup);
        kiloes = backup.intl;
        backup = kiloes.format;
        romeon = output[romeon];
        romeon = foxtra.bind(tangon)(romeon);
        foxtra = romeon.XOdbAw;
        romeon = {};
        output = 'some user';
        romeon['username'] = output;
        sizing = function(argFoo) { // Original name: usernameHook
            tangon = _closure1_slot10;
            zuuluu = _closure1_slot6;
            michal = {};
            report = {'backgroundColor': 'green', 'borderRadius': 4, 'paddingHorizontal': 6, 'paddingVertical': 0};
            michal['style'] = report;
            golfie = _closure1_slot10;
            oscard = _closure1_slot0;
            report = _closure1_slot2;
            entity = 19;
            report = report[entity];
            entity = undefined;
            report = oscard.bind(entity)(report);
            oscard = report.Text;
            report = {'variant': 'text-sm/normal', 'color': 'white'};
            option = argFoo;
            report['children'] = option;
            report = golfie.bind(entity)(oscard, report);
            michal['children'] = report;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        romeon['usernameHook'] = sizing;
        romeon = backup.bind(kiloes)(foxtra, romeon);
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[7] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();