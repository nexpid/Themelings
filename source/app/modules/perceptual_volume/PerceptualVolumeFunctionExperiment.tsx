// app/modules/perceptual_volume/PerceptualVolumeFunctionExperiment.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    backup = {'gamma': 4294967295, 'attenuationRange': 50, 'boostRange': 6};
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    option = report.bind(entity)(michal);
    golfie = option.createExperiment;
    michal = {'kind': 'user', 'id': '2025-01_perceptual_volume_function', 'label': 'Perceptual volume function adjustment'};
    michal['defaultConfig'] = backup;
    offset = {'id': 1, 'label': 'Use gamma 2.8'};
    tangon = 1;
    verify = {};
    update = verify;
    echoed = backup;
    yankee = copyDataProperties(update, echoed);
    yankee = 2.8;
    foxtra = 'gamma';
    verify[foxtra] = yankee;
    offset['config'] = verify;
    verify = new Array(6);
    verify[0] = offset;
    offset = {'id': 2, 'label': 'Use gamma ~1.7 (50% = -10dB, 25% = -20dB)'};
    kiloes = 2;
    yankee = {};
    update = yankee;
    echoed = backup;
    romeon = copyDataProperties(update, echoed);
    romeon = 1.66096404744368;
    yankee[foxtra] = romeon;
    offset['config'] = yankee;
    verify[1] = offset;
    offset = {'id': 3, 'label': 'Use gamma 2.6'};
    sizing = 3;
    yankee = {};
    update = yankee;
    echoed = backup;
    romeon = copyDataProperties(update, echoed);
    romeon = 2.6;
    yankee[foxtra] = romeon;
    offset['config'] = yankee;
    verify[2] = offset;
    offset = {'id': 4, 'label': 'Use gamma 3.0'};
    romeon = 4;
    yankee = {};
    update = yankee;
    echoed = backup;
    output = copyDataProperties(update, echoed);
    yankee[foxtra] = sizing;
    offset['config'] = yankee;
    verify[3] = offset;
    offset = {'id': 5, 'label': 'Use gamma 2.0'};
    yankee = {};
    update = yankee;
    echoed = backup;
    sizing = copyDataProperties(update, echoed);
    yankee[foxtra] = kiloes;
    offset['config'] = yankee;
    verify[4] = offset;
    offset = {'id': 6, 'label': 'Use gamma 4.0'};
    yankee = {};
    update = yankee;
    echoed = backup;
    backup = copyDataProperties(update, echoed);
    yankee[foxtra] = romeon;
    offset['config'] = yankee;
    verify[5] = offset;
    michal['treatments'] = verify;
    michal = golfie.bind(option)(michal);
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/perceptual_volume/PerceptualVolumeFunctionExperiment.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();