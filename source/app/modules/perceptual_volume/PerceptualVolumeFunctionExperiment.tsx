// app/modules/perceptual_volume/PerceptualVolumeFunctionExperiment.tsx
export default (function(_, argBar, __, ___, ____, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    backup = {'gamma': 4294967295, 'attenuationRange': 50, 'boostRange': 6};
    entity = 0;
    mike = oscar[entity];
    entity = undefined;
    options = report.bind(entity)(mike);
    golf = options.createExperiment;
    mike = {'kind': 'user', 'id': '2025-01_perceptual_volume_function', 'label': 'Perceptual volume function adjustment'};
    mike['defaultConfig'] = backup;
    offset = {'id': 1, 'label': 'Use gamma 2.8'};
    tango = 1;
    verify = {};
    update = verify;
    echo = backup;
    yankee = copyDataProperties(update, echo);
    yankee = 2.8;
    foxtrot = 'gamma';
    verify[foxtrot] = yankee;
    offset['config'] = verify;
    verify = new Array(6);
    verify[0] = offset;
    offset = {'id': 2, 'label': 'Use gamma ~1.7 (50% = -10dB, 25% = -20dB)'};
    kilo = 2;
    yankee = {};
    update = yankee;
    echo = backup;
    romeo = copyDataProperties(update, echo);
    romeo = 1.66096404744368;
    yankee[foxtrot] = romeo;
    offset['config'] = yankee;
    verify[1] = offset;
    offset = {'id': 3, 'label': 'Use gamma 2.6'};
    sizing = 3;
    yankee = {};
    update = yankee;
    echo = backup;
    romeo = copyDataProperties(update, echo);
    romeo = 2.6;
    yankee[foxtrot] = romeo;
    offset['config'] = yankee;
    verify[2] = offset;
    offset = {'id': 4, 'label': 'Use gamma 3.0'};
    romeo = 4;
    yankee = {};
    update = yankee;
    echo = backup;
    output = copyDataProperties(update, echo);
    yankee[foxtrot] = sizing;
    offset['config'] = yankee;
    verify[3] = offset;
    offset = {'id': 5, 'label': 'Use gamma 2.0'};
    yankee = {};
    update = yankee;
    echo = backup;
    sizing = copyDataProperties(update, echo);
    yankee[foxtrot] = kilo;
    offset['config'] = yankee;
    verify[4] = offset;
    offset = {'id': 6, 'label': 'Use gamma 4.0'};
    yankee = {};
    update = yankee;
    echo = backup;
    backup = copyDataProperties(update, echo);
    yankee[foxtrot] = romeo;
    offset['config'] = yankee;
    verify[5] = offset;
    mike['treatments'] = verify;
    mike = golf.bind(options)(mike);
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/perceptual_volume/PerceptualVolumeFunctionExperiment.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();