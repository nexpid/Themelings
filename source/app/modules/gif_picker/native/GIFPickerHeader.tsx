// app/modules/gif_picker/native/GIFPickerHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    kiloes = 2;
    tangon = oscard[kiloes];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GIFPickerResultTypes;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot5 = option;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['paddingVertical'] = foxtra;
    tangon['container'] = offset;
    offset = {'borderWidth': 1, 'borderColor': 'transparent', 'paddingHorizontal': null, 'height': null, 'flexDirection': 'row', 'alignItems': 'center'};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['paddingHorizontal'] = foxtra;
    foxtra = 6;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    foxtra = foxtra.InputHeights;
    backup = foxtra.MD;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    foxtra = foxtra / kiloes;
    foxtra = backup + foxtra;
    offset['height'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_8;
    offset['gap'] = yankee;
    tangon['header'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot7 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: GIFPickerHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            output = entity.categoryType;
            offset = entity.onQueryClear;
            yankee = entity.onQueryChange;
            verify = entity.searchInputRef;
            entity = _closure1_slot7;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = romeon.container;
            entity['style'] = report;
            report = _closure1_slot4;
            report = report.SEARCH;
            if(!(output !== report)) { _fun00002_ip = 559; continue _fun00001 }
 76:
            option = _closure1_slot6;
            backup = _closure1_slot0;
            sizing = _closure1_slot2;
            report = 9;
            report = sizing[report];
            report = backup.bind(tangon)(report);
            golfie = report.PressableOpacity;
            report = {};
            romeon = romeon.header;
            report['style'] = romeon;
            romeon = 'button';
            report['accessibilityRole'] = romeon;
            report['onPress'] = offset;
            source = 8;
            romeon = sizing[source];
            romeon = backup.bind(tangon)(romeon);
            result = romeon.intl;
            kiloes = result.formatToPlainString;
            romeon = sizing[source];
            romeon = backup.bind(tangon)(romeon);
            romeon = romeon.t;
            foxtra = romeon.UTypEh;
            romeon = {};
            echoed = sizing[source];
            echoed = backup.bind(tangon)(echoed);
            ctrled = echoed.intl;
            update = ctrled.string;
            echoed = sizing[source];
            echoed = backup.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.ffgJrq;
            echoed = update.bind(ctrled)(echoed);
            romeon['destination'] = echoed;
            romeon = kiloes.bind(result)(foxtra, romeon);
            report['accessibilityLabel'] = romeon;
            kiloes = _closure1_slot5;
            romeon = 10;
            romeon = sizing[romeon];
            romeon = backup.bind(tangon)(romeon);
            foxtra = romeon.ChevronLargeLeftIcon;
            romeon = {};
            echoed = _closure1_slot1;
            result = 5;
            result = sizing[result];
            result = echoed.bind(tangon)(result);
            result = result.colors;
            result = result.INTERACTIVE_ACTIVE;
            romeon['color'] = result;
            result = 'sm';
            romeon['size'] = result;
            foxtra = kiloes.bind(tangon)(foxtra, romeon);
            romeon = new Array(2);
            romeon[0] = foxtra;
            foxtra = 11;
            foxtra = sizing[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.Text;
            foxtra = {'variant': 'text-sm/semibold', 'color': 'text-normal', 'maxFontSizeMultiplier': 2};
            sizing = _closure1_slot4;
            sizing = sizing.TRENDING_GIFS;
            if(!(output !== sizing)) { _fun00002_ip = 481; continue _fun00001 }
 359:
            sizing = _closure1_slot4;
            sizing = sizing.FAVORITES;
            if(!(output !== sizing)) { _fun00002_ip = 427; continue _fun00001 }
 373:
            echoed = _closure1_slot0;
            sizing = _closure1_slot2;
            output = sizing[source];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = sizing[source];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.5h0QOD;
            sizing = output.bind(result)(sizing);
            _fun00002_ip = 479; continue _fun00001;
 427:
            update = _closure1_slot0;
            output = _closure1_slot2;
            result = output[source];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[source];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.k8fFjo;
            sizing = result.bind(echoed)(output);
 479:
            _fun00002_ip = 533; continue _fun00001;
 481:
            update = _closure1_slot0;
            output = _closure1_slot2;
            result = output[source];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[source];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.TsWCdX;
            sizing = result.bind(echoed)(output);
 533:
            foxtra['children'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[1] = foxtra;
            report['children'] = romeon;
            report = option.bind(tangon)(golfie, report);
            _fun00002_ip = 680; continue _fun00001;
 559:
            option = _closure1_slot5;
            backup = _closure1_slot0;
            kiloes = _closure1_slot2;
            oscard = 7;
            oscard = kiloes[oscard];
            oscard = backup.bind(tangon)(oscard);
            golfie = oscard.SearchField;
            oscard = {};
            romeon = 'md';
            oscard['size'] = romeon;
            oscard['onChange'] = yankee;
            yankee = 8;
            romeon = kiloes[yankee];
            romeon = backup.bind(tangon)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.string;
            yankee = kiloes[yankee];
            yankee = backup.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.TnYqkZ;
            yankee = romeon.bind(foxtra)(yankee);
            oscard['placeholder'] = yankee;
            oscard['onClear'] = offset;
            oscard['ref'] = verify;
            verify = true;
            oscard['isRound'] = verify;
            report = option.bind(tangon)(golfie, oscard);
 680:
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/gif_picker/native/GIFPickerHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();