// app/modules/forwarding/MessageForwardingExperiment.tsx
export default (function(argFoo, argBar, _, __, ___, argFred, argPlugh) {
    verify = argBar;
    zulu = argFred;
    offset = argPlugh;
    entity = global;
    oscar = entity.Object;
    report = oscar.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscar)(zulu, entity, tango);
    tango = 0;
    report = offset[tango];
    entity = undefined;
    golf = verify.bind(entity)(report);
    oscar = golf.createExperiment;
    report = {'kind': 'user', 'id': '2024-05_message_forwarding', 'label': 'Message forwarding'};
    backup = false;
    options = {'canForwardMessages': false, 'hasInlineForwardButton': false};
    report['defaultConfig'] = options;
    romeo = {'id': 1, 'label': 'Enabled'};
    options = 1;
    yankee = {'canForwardMessages': true, 'hasInlineForwardButton': false};
    romeo['config'] = yankee;
    yankee = new Array(2);
    yankee[0] = romeo;
    romeo = {'id': 2, 'label': 'Enabled + inline forward button'};
    foxtrot = {'canForwardMessages': true, 'hasInlineForwardButton': true};
    romeo['config'] = foxtrot;
    yankee[1] = romeo;
    report['treatments'] = yankee;
    golf = oscar.bind(golf)(report);
    var _closure1_slot0 = golf;
    report = offset[tango];
    yankee = verify.bind(entity)(report);
    oscar = yankee.createExperiment;
    report = {'kind': 'user', 'id': '2024-07_message_forwarding_iterations', 'label': 'Message forwarding iterations'};
    romeo = {'hasOneTapSendButton': false, 'hasMessageInput': false, 'hasPreview': false};
    report['defaultConfig'] = romeo;
    foxtrot = {'id': 1, 'label': 'T2 only (inline forward button)'};
    romeo = {'canForwardMessages': true, 'hasInlineForwardButton': true, 'hasOneTapSendButton': false, 'hasMessageInput': false, 'hasPreview': false};
    foxtrot['config'] = romeo;
    romeo = new Array(3);
    romeo[0] = foxtrot;
    foxtrot = {'id': 2, 'label': 'T2 + One tap send + preview'};
    kilo = {'canForwardMessages': true, 'hasInlineForwardButton': true, 'hasOneTapSendButton': true, 'hasMessageInput': false, 'hasPreview': true};
    foxtrot['config'] = kilo;
    romeo[1] = foxtrot;
    foxtrot = {'id': 3, 'label': 'T2 + Context message + preview'};
    kilo = {'canForwardMessages': true, 'hasInlineForwardButton': true, 'hasOneTapSendButton': false, 'hasMessageInput': true, 'hasPreview': true};
    foxtrot['config'] = kilo;
    romeo[2] = foxtrot;
    report['treatments'] = romeo;
    oscar = oscar.bind(yankee)(report);
    var _closure1_slot1 = oscar;
    report = offset[tango];
    romeo = verify.bind(entity)(report);
    yankee = romeo.createExperiment;
    report = {'kind': 'user', 'id': '2024-08_message_forwarding_icon', 'label': 'Message forwarding icon change'};
    foxtrot = {};
    foxtrot['useOldIcon'] = backup;
    report['defaultConfig'] = foxtrot;
    backup = {'id': 1, 'label': 'Icon: upper right arrow'};
    foxtrot = {'canForwardMessages': true, 'useOldIcon': true};
    backup['config'] = foxtrot;
    foxtrot = new Array(2);
    foxtrot[0] = backup;
    backup = {'id': 2, 'label': 'Icon: chat bubble'};
    kilo = {'canForwardMessages': true, 'useOldIcon': false};
    backup['config'] = kilo;
    foxtrot[1] = backup;
    report['treatments'] = foxtrot;
    report = yankee.bind(romeo)(report);
    var _closure1_slot2 = report;
    tango = offset[tango];
    romeo = verify.bind(entity)(tango);
    yankee = romeo.createExperiment;
    tango = {'kind': 'user', 'id': '2024-09_message_forwarding_gtm', 'label': 'Message forwarding GTM'};
    foxtrot = {};
    tango['defaultConfig'] = foxtrot;
    backup = {'id': 1, 'label': 'GTM'};
    foxtrot = {'canForwardMessages': true, 'hasInlineForwardButton': false, 'hasOneTapSendButton': false, 'hasMessageInput': true, 'hasPreview': true, 'useOldIcon': true};
    backup['config'] = foxtrot;
    foxtrot = new Array(1);
    foxtrot[0] = backup;
    tango['treatments'] = foxtrot;
    tango = yankee.bind(romeo)(tango);
    var _closure1_slot3 = tango;
    options = offset[options];
    offset = verify.bind(entity)(options);
    verify = offset.fileFinishedImporting;
    options = 'modules/forwarding/MessageForwardingExperiment.tsx';
    options = verify.bind(offset)(options);
    zulu['MessageForwardingExperiment'] = golf;
    zulu['MessageForwardingIterationsExperiment'] = oscar;
    zulu['MessageForwardingIconExperiment'] = report;
    zulu['MessageForwardingGTMExperiment'] = tango;
    tango = function(argFoo, argBar) { // Original name: getMessageForwardingExperimentConfig
        report = argFoo;
        tango = argBar;
        entity = {};
        oscar = _closure1_slot0;
        zulu = oscar.getCurrentConfig;
        golf = zulu.bind(oscar)(report, tango);
        options = entity;
        zulu = copyDataProperties(options, golf);
        oscar = _closure1_slot1;
        zulu = oscar.getCurrentConfig;
        golf = zulu.bind(oscar)(report, tango);
        options = entity;
        zulu = copyDataProperties(options, golf);
        oscar = _closure1_slot2;
        zulu = oscar.getCurrentConfig;
        golf = zulu.bind(oscar)(report, tango);
        options = entity;
        zulu = copyDataProperties(options, golf);
        zulu = _closure1_slot3;
        mike = zulu.getCurrentConfig;
        golf = mike.bind(zulu)(report, tango);
        options = entity;
        mike = copyDataProperties(options, golf);
        return entity;
    };
    zulu['getMessageForwardingExperimentConfig'] = tango;
    mike = function(argFoo, argBar) { // Original name: useMessageForwardingExperiment
        report = argFoo;
        tango = argBar;
        entity = {};
        oscar = _closure1_slot0;
        zulu = oscar.useExperiment;
        golf = zulu.bind(oscar)(report, tango);
        options = entity;
        zulu = copyDataProperties(options, golf);
        oscar = _closure1_slot1;
        zulu = oscar.useExperiment;
        golf = zulu.bind(oscar)(report, tango);
        options = entity;
        zulu = copyDataProperties(options, golf);
        oscar = _closure1_slot2;
        zulu = oscar.useExperiment;
        golf = zulu.bind(oscar)(report, tango);
        options = entity;
        zulu = copyDataProperties(options, golf);
        zulu = _closure1_slot3;
        mike = zulu.useExperiment;
        golf = mike.bind(zulu)(report, tango);
        options = entity;
        mike = copyDataProperties(options, golf);
        return entity;
    };
    zulu['useMessageForwardingExperiment'] = mike;
    return entity;
})();