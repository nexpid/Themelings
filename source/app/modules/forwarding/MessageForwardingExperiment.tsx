// app/modules/forwarding/MessageForwardingExperiment.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    verify = argBar;
    zuuluu = argFre;
    offset = argPlu;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, tangon);
    tangon = 0;
    report = offset[tangon];
    entity = undefined;
    golfie = verify.bind(entity)(report);
    oscard = golfie.createExperiment;
    report = {'kind': 'user', 'id': '2024-05_message_forwarding', 'label': 'Message forwarding'};
    backup = false;
    option = {'canForwardMessages': false, 'hasInlineForwardButton': false};
    report['defaultConfig'] = option;
    romeon = {'id': 1, 'label': 'Enabled'};
    option = 1;
    yankee = {'canForwardMessages': true, 'hasInlineForwardButton': false};
    romeon['config'] = yankee;
    yankee = new Array(2);
    yankee[0] = romeon;
    romeon = {'id': 2, 'label': 'Enabled + inline forward button'};
    foxtra = {'canForwardMessages': true, 'hasInlineForwardButton': true};
    romeon['config'] = foxtra;
    yankee[1] = romeon;
    report['treatments'] = yankee;
    golfie = oscard.bind(golfie)(report);
    var _closure1_slot0 = golfie;
    report = offset[tangon];
    yankee = verify.bind(entity)(report);
    oscard = yankee.createExperiment;
    report = {'kind': 'user', 'id': '2024-07_message_forwarding_iterations', 'label': 'Message forwarding iterations'};
    romeon = {'hasOneTapSendButton': false, 'hasMessageInput': false, 'hasPreview': false};
    report['defaultConfig'] = romeon;
    foxtra = {'id': 1, 'label': 'T2 only (inline forward button)'};
    romeon = {'canForwardMessages': true, 'hasInlineForwardButton': true, 'hasOneTapSendButton': false, 'hasMessageInput': false, 'hasPreview': false};
    foxtra['config'] = romeon;
    romeon = new Array(3);
    romeon[0] = foxtra;
    foxtra = {'id': 2, 'label': 'T2 + One tap send + preview'};
    kiloes = {'canForwardMessages': true, 'hasInlineForwardButton': true, 'hasOneTapSendButton': true, 'hasMessageInput': false, 'hasPreview': true};
    foxtra['config'] = kiloes;
    romeon[1] = foxtra;
    foxtra = {'id': 3, 'label': 'T2 + Context message + preview'};
    kiloes = {'canForwardMessages': true, 'hasInlineForwardButton': true, 'hasOneTapSendButton': false, 'hasMessageInput': true, 'hasPreview': true};
    foxtra['config'] = kiloes;
    romeon[2] = foxtra;
    report['treatments'] = romeon;
    oscard = oscard.bind(yankee)(report);
    var _closure1_slot1 = oscard;
    report = offset[tangon];
    romeon = verify.bind(entity)(report);
    yankee = romeon.createExperiment;
    report = {'kind': 'user', 'id': '2024-08_message_forwarding_icon', 'label': 'Message forwarding icon change'};
    foxtra = {};
    foxtra['useOldIcon'] = backup;
    report['defaultConfig'] = foxtra;
    backup = {'id': 1, 'label': 'Icon: upper right arrow'};
    foxtra = {'canForwardMessages': true, 'useOldIcon': true};
    backup['config'] = foxtra;
    foxtra = new Array(2);
    foxtra[0] = backup;
    backup = {'id': 2, 'label': 'Icon: chat bubble'};
    kiloes = {'canForwardMessages': true, 'useOldIcon': false};
    backup['config'] = kiloes;
    foxtra[1] = backup;
    report['treatments'] = foxtra;
    report = yankee.bind(romeon)(report);
    var _closure1_slot2 = report;
    tangon = offset[tangon];
    romeon = verify.bind(entity)(tangon);
    yankee = romeon.createExperiment;
    tangon = {'kind': 'user', 'id': '2024-09_message_forwarding_gtm', 'label': 'Message forwarding GTM'};
    foxtra = {};
    tangon['defaultConfig'] = foxtra;
    backup = {'id': 1, 'label': 'GTM'};
    foxtra = {'canForwardMessages': true, 'hasInlineForwardButton': false, 'hasOneTapSendButton': false, 'hasMessageInput': true, 'hasPreview': true, 'useOldIcon': true};
    backup['config'] = foxtra;
    foxtra = new Array(1);
    foxtra[0] = backup;
    tangon['treatments'] = foxtra;
    tangon = yankee.bind(romeon)(tangon);
    var _closure1_slot3 = tangon;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'modules/forwarding/MessageForwardingExperiment.tsx';
    option = verify.bind(offset)(option);
    zuuluu['MessageForwardingExperiment'] = golfie;
    zuuluu['MessageForwardingIterationsExperiment'] = oscard;
    zuuluu['MessageForwardingIconExperiment'] = report;
    zuuluu['MessageForwardingGTMExperiment'] = tangon;
    tangon = function(argFoo, argBar) { // Original name: getMessageForwardingExperimentConfig
        report = argFoo;
        tangon = argBar;
        entity = {};
        oscard = _closure1_slot0;
        zuuluu = oscard.getCurrentConfig;
        golfie = zuuluu.bind(oscard)(report, tangon);
        option = entity;
        zuuluu = copyDataProperties(option, golfie);
        oscard = _closure1_slot1;
        zuuluu = oscard.getCurrentConfig;
        golfie = zuuluu.bind(oscard)(report, tangon);
        option = entity;
        zuuluu = copyDataProperties(option, golfie);
        oscard = _closure1_slot2;
        zuuluu = oscard.getCurrentConfig;
        golfie = zuuluu.bind(oscard)(report, tangon);
        option = entity;
        zuuluu = copyDataProperties(option, golfie);
        zuuluu = _closure1_slot3;
        michal = zuuluu.getCurrentConfig;
        golfie = michal.bind(zuuluu)(report, tangon);
        option = entity;
        michal = copyDataProperties(option, golfie);
        return entity;
    };
    zuuluu['getMessageForwardingExperimentConfig'] = tangon;
    michal = function(argFoo, argBar) { // Original name: useMessageForwardingExperiment
        report = argFoo;
        tangon = argBar;
        entity = {};
        oscard = _closure1_slot0;
        zuuluu = oscard.useExperiment;
        golfie = zuuluu.bind(oscard)(report, tangon);
        option = entity;
        zuuluu = copyDataProperties(option, golfie);
        oscard = _closure1_slot1;
        zuuluu = oscard.useExperiment;
        golfie = zuuluu.bind(oscard)(report, tangon);
        option = entity;
        zuuluu = copyDataProperties(option, golfie);
        oscard = _closure1_slot2;
        zuuluu = oscard.useExperiment;
        golfie = zuuluu.bind(oscard)(report, tangon);
        option = entity;
        zuuluu = copyDataProperties(option, golfie);
        zuuluu = _closure1_slot3;
        michal = zuuluu.useExperiment;
        golfie = michal.bind(zuuluu)(report, tangon);
        option = entity;
        michal = copyDataProperties(option, golfie);
        return entity;
    };
    zuuluu['useMessageForwardingExperiment'] = michal;
    return entity;
})();