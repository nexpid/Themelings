// app/modules/forwarding/native/ForwardFailedAlertModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = 5;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/forwarding/native/ForwardFailedAlertModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ForwardFailedAlertModal
        mike = argFoo;
        options = mike.message;
        var _closure2_slot0 = options;
        oscar = mike.failedDestinations;
        var _closure2_slot1 = oscar;
        report = mike.forwardOptions;
        var _closure2_slot2 = report;
        tango = _closure1_slot3;
        zulu = tango.useCallback;
        mike = new Array(3);
        mike[0] = oscar;
        mike[1] = options;
        mike[2] = report;
        entity = function() {
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 2;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.openForwardModal;
            mike = {};
            oscar = _closure2_slot0;
            mike['message'] = oscar;
            oscar = 'retry-modal';
            mike['source'] = oscar;
            oscar = _closure2_slot1;
            mike['initialSelectedDestinations'] = oscar;
            report = _closure2_slot2;
            mike['forwardOptions'] = report;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        report = zulu.bind(tango)(entity, mike);
        tango = _closure1_slot4;
        mike = _closure1_slot1;
        yankee = _closure1_slot2;
        entity = 3;
        entity = yankee[entity];
        zulu = undefined;
        mike = mike.bind(zulu)(entity);
        entity = {};
        options = _closure1_slot0;
        golf = 4;
        verify = yankee[golf];
        verify = options.bind(zulu)(verify);
        romeo = verify.intl;
        offset = romeo.string;
        verify = yankee[golf];
        verify = options.bind(zulu)(verify);
        verify = verify.t;
        verify = verify./OPIaG;
        verify = offset.bind(romeo)(verify);
        entity['title'] = verify;
        verify = yankee[golf];
        verify = options.bind(zulu)(verify);
        offset = verify.intl;
        verify = offset.formatToPlainString;
        golf = yankee[golf];
        golf = options.bind(zulu)(golf);
        golf = golf.t;
        options = golf.cn9vFR;
        golf = {};
        yankee = oscar.length;
        golf['count'] = yankee;
        golf = verify.bind(offset)(options, golf);
        entity['content'] = golf;
        entity['failedDestinations'] = oscar;
        entity['onRetry'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();