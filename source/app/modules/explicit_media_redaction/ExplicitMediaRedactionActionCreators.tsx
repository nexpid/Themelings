// app/modules/explicit_media_redaction/ExplicitMediaRedactionActionCreators.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = report.bind(entity)(tango);
    tango = tango.Endpoints;
    var _closure1_slot2 = tango;
    tango = 2;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/explicit_media_redaction/ExplicitMediaRedactionActionCreators.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo, argBar, argBaz, argCorge) { // Original name: reportFalsePositive
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        zulu = entity.HTTP;
        mike = zulu.post;
        entity = {};
        tango = _closure1_slot2;
        tango = tango.EXPLICIT_MEDIA_REPORT_FALSE_POSITIVE;
        entity['url'] = tango;
        tango = {};
        report = argFoo;
        tango['channel_id'] = report;
        report = argBar;
        tango['message_id'] = report;
        report = argBaz;
        tango['attachment_ids'] = report;
        report = argCorge;
        tango['embed_ids'] = report;
        entity['body'] = tango;
        tango = false;
        entity['rejectWithError'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['reportFalsePositive'] = tango;
    tango = function(argFoo, argBar, argBaz, argCorge) { // Original name: reportFailedSendFalsePositive
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        zulu = entity.HTTP;
        mike = zulu.post;
        entity = {};
        tango = _closure1_slot2;
        tango = tango.EXPLICIT_MEDIA_SENDER_REPORT_FALSE_POSITIVE;
        entity['url'] = tango;
        tango = {};
        report = argFoo;
        tango['channel_id'] = report;
        report = argBar;
        tango['message_id'] = report;
        report = argBaz;
        tango['attachment_ids'] = report;
        report = argCorge;
        tango['filenames'] = report;
        entity['body'] = tango;
        tango = false;
        entity['rejectWithError'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['reportFailedSendFalsePositive'] = tango;
    tango = function(argFoo, argBar) { // Original name: sendMessagesForScanning
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        zulu = entity.HTTP;
        mike = zulu.patch;
        entity = {};
        oscar = _closure1_slot2;
        report = oscar.EXPLICIT_MEDIA_SCAN_MESSAGES;
        tango = argFoo;
        tango = report.bind(oscar)(tango);
        entity['url'] = tango;
        tango = {};
        report = argBar;
        tango['message_ids'] = report;
        entity['body'] = tango;
        tango = false;
        entity['rejectWithError'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['sendMessagesForScanning'] = tango;
    mike = function(argFoo) { // Original name: sendMultiChannelMessagesForScanning
        zulu = argFoo;
        mike = zulu.map;
        entity = function(argFoo) {
            mike = argFoo;
            entity = {};
            zulu = mike.channel_id;
            entity['channel_id'] = zulu;
            mike = mike.id;
            entity['message_id'] = mike;
            return entity;
        };
        report = mike.bind(zulu)(entity);
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        zulu = entity.HTTP;
        mike = zulu.patch;
        entity = {};
        tango = _closure1_slot2;
        tango = tango.EXPLICIT_MEDIA_SCAN_MULTI_CHANNEL_MESSAGES;
        entity['url'] = tango;
        tango = {};
        tango['messages'] = report;
        entity['body'] = tango;
        tango = false;
        entity['rejectWithError'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['sendMultiChannelMessagesForScanning'] = mike;
    return entity;
})();