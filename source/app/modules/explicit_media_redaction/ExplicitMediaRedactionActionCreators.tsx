// app/modules/explicit_media_redaction/ExplicitMediaRedactionActionCreators.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Endpoints;
    var _closure1_slot2 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/explicit_media_redaction/ExplicitMediaRedactionActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo, argBar, argBaz, argCor) { // Original name: reportFalsePositive
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.post;
        entity = {};
        tangon = _closure1_slot2;
        tangon = tangon.EXPLICIT_MEDIA_REPORT_FALSE_POSITIVE;
        entity['url'] = tangon;
        tangon = {};
        report = argFoo;
        tangon['channel_id'] = report;
        report = argBar;
        tangon['message_id'] = report;
        report = argBaz;
        tangon['attachment_ids'] = report;
        report = argCor;
        tangon['embed_ids'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['reportFalsePositive'] = tangon;
    tangon = function(argFoo, argBar, argBaz, argCor) { // Original name: reportFailedSendFalsePositive
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.post;
        entity = {};
        tangon = _closure1_slot2;
        tangon = tangon.EXPLICIT_MEDIA_SENDER_REPORT_FALSE_POSITIVE;
        entity['url'] = tangon;
        tangon = {};
        report = argFoo;
        tangon['channel_id'] = report;
        report = argBar;
        tangon['message_id'] = report;
        report = argBaz;
        tangon['attachment_ids'] = report;
        report = argCor;
        tangon['filenames'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['reportFailedSendFalsePositive'] = tangon;
    tangon = function(argFoo, argBar) { // Original name: sendMessagesForScanning
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.patch;
        entity = {};
        oscard = _closure1_slot2;
        report = oscard.EXPLICIT_MEDIA_SCAN_MESSAGES;
        tangon = argFoo;
        tangon = report.bind(oscard)(tangon);
        entity['url'] = tangon;
        tangon = {};
        report = argBar;
        tangon['message_ids'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['sendMessagesForScanning'] = tangon;
    michal = function(argFoo) { // Original name: sendMultiChannelMessagesForScanning
        zuuluu = argFoo;
        michal = zuuluu.map;
        entity = function(argFoo) {
            michal = argFoo;
            entity = {};
            zuuluu = michal.channel_id;
            entity['channel_id'] = zuuluu;
            michal = michal.id;
            entity['message_id'] = michal;
            return entity;
        };
        report = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.patch;
        entity = {};
        tangon = _closure1_slot2;
        tangon = tangon.EXPLICIT_MEDIA_SCAN_MULTI_CHANNEL_MESSAGES;
        entity['url'] = tangon;
        tangon = {};
        tangon['messages'] = report;
        entity['body'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['sendMultiChannelMessagesForScanning'] = michal;
    return entity;
})();