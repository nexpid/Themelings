// app/modules/pomelo/native/components/PomeloShiny.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    verify = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    options = verify.bind(entity)(tango);
    golf = options.createAnimatedComponent;
    tango = 3;
    tango = oscar[tango];
    tango = verify.bind(entity)(tango);
    tango = golf.bind(options)(tango);
    var _closure1_slot4 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'position': 'absolute', 'zIndex': 10, 'width': '300%', 'height': '100%'};
    tango['shinyAnimationContainer'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot5 = tango;
    tango = {};
    golf = 'function PomeloShinyTsx1(){const{withRepeat,withSequence,withTiming,layoutWidth,withDelay}=this.__closure;return{transform:[{translateX:withRepeat(withSequence(withTiming(layoutWidth*2,{duration:1200}),withTiming(-layoutWidth*2,{duration:0}),withDelay(3000,withTiming(-layoutWidth*2,{duration:0}))),-1,true)}]};}';
    tango['code'] = golf;
    var _closure1_slot6 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/pomelo/native/components/PomeloShiny.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: PomeloShiny
        zulu = _closure1_slot5;
        tango = undefined;
        report = zulu.bind(tango)();
        offset = _closure1_slot1;
        yankee = _closure1_slot2;
        zulu = 5;
        zulu = yankee[zulu];
        zulu = offset.bind(tango)(zulu);
        zulu = zulu.bind(tango)();
        romeo = zulu.width;
        var _closure2_slot0 = romeo;
        options = _closure1_slot0;
        verify = 2;
        zulu = yankee[verify];
        oscar = options.bind(tango)(zulu);
        zulu = oscar.useAnimatedStyle;
        mike = function() { // Original name: s
            entity = {};
            zulu = {};
            sizing = _closure1_slot0;
            output = _closure1_slot2;
            offset = 2;
            mike = output[offset];
            backup = undefined;
            golf = sizing.bind(backup)(mike);
            oscar = golf.withRepeat;
            mike = output[offset];
            verify = sizing.bind(backup)(mike);
            options = verify.withSequence;
            foxtrot = 6;
            mike = output[foxtrot];
            romeo = sizing.bind(backup)(mike);
            yankee = romeo.withTiming;
            mike = _closure2_slot0;
            report = offset * mike;
            tango = {};
            kilo = 1200;
            tango['duration'] = kilo;
            report = yankee.bind(romeo)(report, tango);
            tango = output[foxtrot];
            result = sizing.bind(backup)(tango);
            romeo = result.withTiming;
            tango = -mike;
            yankee = offset * tango;
            tango = {};
            kilo = 0;
            tango['duration'] = kilo;
            tango = romeo.bind(result)(yankee, tango);
            yankee = output[offset];
            romeo = sizing.bind(backup)(yankee);
            yankee = romeo.withDelay;
            foxtrot = output[foxtrot];
            backup = sizing.bind(backup)(foxtrot);
            foxtrot = backup.withTiming;
            mike = -mike;
            offset = offset * mike;
            mike = {};
            mike['duration'] = kilo;
            offset = foxtrot.bind(backup)(offset, mike);
            mike = 3000;
            mike = yankee.bind(romeo)(mike, offset);
            report = options.bind(verify)(report, tango, mike);
            tango = -1;
            mike = true;
            mike = oscar.bind(golf)(report, tango, mike);
            zulu['translateX'] = mike;
            mike = new Array(1);
            mike[0] = zulu;
            entity['transform'] = mike;
            return entity;
        };
        golf = {};
        foxtrot = yankee[verify];
        foxtrot = options.bind(tango)(foxtrot);
        foxtrot = foxtrot.withRepeat;
        golf['withRepeat'] = foxtrot;
        foxtrot = yankee[verify];
        foxtrot = options.bind(tango)(foxtrot);
        foxtrot = foxtrot.withSequence;
        golf['withSequence'] = foxtrot;
        foxtrot = 6;
        foxtrot = yankee[foxtrot];
        foxtrot = options.bind(tango)(foxtrot);
        foxtrot = foxtrot.withTiming;
        golf['withTiming'] = foxtrot;
        golf['layoutWidth'] = romeo;
        verify = yankee[verify];
        verify = options.bind(tango)(verify);
        verify = verify.withDelay;
        golf['withDelay'] = verify;
        mike['__closure'] = golf;
        golf = 9155485900244.0;
        mike['__workletHash'] = golf;
        golf = _closure1_slot6;
        mike['__initData'] = golf;
        oscar = zulu.bind(oscar)(mike);
        zulu = _closure1_slot3;
        mike = _closure1_slot4;
        entity = {};
        golf = report.shinyAnimationContainer;
        report = new Array(2);
        report[0] = golf;
        report[1] = oscar;
        entity['style'] = report;
        verify = 0;
        report = {'x': 0, 'y': 0};
        entity['start'] = report;
        report = {'x': 1, 'y': 1};
        entity['end'] = report;
        report = [0.3, 0.5, 0.7];
        entity['locations'] = report;
        golf = 7;
        report = yankee[golf];
        foxtrot = options.bind(tango)(report);
        romeo = foxtrot.hexWithOpacity;
        oscar = 8;
        report = yankee[oscar];
        report = offset.bind(tango)(report);
        report = report.unsafe_rawColors;
        report = report.WHITE_500;
        romeo = romeo.bind(foxtrot)(report, verify);
        report = new Array(3);
        report[0] = romeo;
        romeo = yankee[golf];
        kilo = options.bind(tango)(romeo);
        backup = kilo.hexWithOpacity;
        romeo = yankee[oscar];
        romeo = offset.bind(tango)(romeo);
        romeo = romeo.unsafe_rawColors;
        foxtrot = romeo.WHITE_500;
        romeo = 0.4;
        romeo = backup.bind(kilo)(foxtrot, romeo);
        report[1] = romeo;
        golf = yankee[golf];
        options = options.bind(tango)(golf);
        golf = options.hexWithOpacity;
        oscar = yankee[oscar];
        oscar = offset.bind(tango)(oscar);
        oscar = oscar.unsafe_rawColors;
        oscar = oscar.WHITE_500;
        oscar = golf.bind(options)(oscar, verify);
        report[2] = oscar;
        entity['colors'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();