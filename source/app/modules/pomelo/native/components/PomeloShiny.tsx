// app/modules/pomelo/native/components/PomeloShiny.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    verify = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    option = verify.bind(entity)(tangon);
    golfie = option.createAnimatedComponent;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = verify.bind(entity)(tangon);
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'position': 'absolute', 'zIndex': 10, 'width': '300%', 'height': '100%'};
    tangon['shinyAnimationContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot5 = tangon;
    tangon = {};
    golfie = 'function PomeloShinyTsx1(){const{withRepeat,withSequence,withTiming,layoutWidth,withDelay}=this.__closure;return{transform:[{translateX:withRepeat(withSequence(withTiming(layoutWidth*2,{duration:1200}),withTiming(-layoutWidth*2,{duration:0}),withDelay(3000,withTiming(-layoutWidth*2,{duration:0}))),-1,true)}]};}';
    tangon['code'] = golfie;
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/pomelo/native/components/PomeloShiny.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: PomeloShiny
        zuuluu = _closure1_slot5;
        tangon = undefined;
        report = zuuluu.bind(tangon)();
        offset = _closure1_slot1;
        yankee = _closure1_slot2;
        zuuluu = 5;
        zuuluu = yankee[zuuluu];
        zuuluu = offset.bind(tangon)(zuuluu);
        zuuluu = zuuluu.bind(tangon)();
        romeon = zuuluu.width;
        var _closure2_slot0 = romeon;
        option = _closure1_slot0;
        verify = 2;
        zuuluu = yankee[verify];
        oscard = option.bind(tangon)(zuuluu);
        zuuluu = oscard.useAnimatedStyle;
        michal = function() { // Original name: s
            entity = {};
            zuuluu = {};
            sizing = _closure1_slot0;
            output = _closure1_slot2;
            offset = 2;
            michal = output[offset];
            backup = undefined;
            golfie = sizing.bind(backup)(michal);
            oscard = golfie.withRepeat;
            michal = output[offset];
            verify = sizing.bind(backup)(michal);
            option = verify.withSequence;
            foxtra = 6;
            michal = output[foxtra];
            romeon = sizing.bind(backup)(michal);
            yankee = romeon.withTiming;
            michal = _closure2_slot0;
            report = offset * michal;
            tangon = {};
            kiloes = 1200;
            tangon['duration'] = kiloes;
            report = yankee.bind(romeon)(report, tangon);
            tangon = output[foxtra];
            result = sizing.bind(backup)(tangon);
            romeon = result.withTiming;
            tangon = -michal;
            yankee = offset * tangon;
            tangon = {};
            kiloes = 0;
            tangon['duration'] = kiloes;
            tangon = romeon.bind(result)(yankee, tangon);
            yankee = output[offset];
            romeon = sizing.bind(backup)(yankee);
            yankee = romeon.withDelay;
            foxtra = output[foxtra];
            backup = sizing.bind(backup)(foxtra);
            foxtra = backup.withTiming;
            michal = -michal;
            offset = offset * michal;
            michal = {};
            michal['duration'] = kiloes;
            offset = foxtra.bind(backup)(offset, michal);
            michal = 3000;
            michal = yankee.bind(romeon)(michal, offset);
            report = option.bind(verify)(report, tangon, michal);
            tangon = -1;
            michal = true;
            michal = oscard.bind(golfie)(report, tangon, michal);
            zuuluu['translateX'] = michal;
            michal = new Array(1);
            michal[0] = zuuluu;
            entity['transform'] = michal;
            return entity;
        };
        golfie = {};
        foxtra = yankee[verify];
        foxtra = option.bind(tangon)(foxtra);
        foxtra = foxtra.withRepeat;
        golfie['withRepeat'] = foxtra;
        foxtra = yankee[verify];
        foxtra = option.bind(tangon)(foxtra);
        foxtra = foxtra.withSequence;
        golfie['withSequence'] = foxtra;
        foxtra = 6;
        foxtra = yankee[foxtra];
        foxtra = option.bind(tangon)(foxtra);
        foxtra = foxtra.withTiming;
        golfie['withTiming'] = foxtra;
        golfie['layoutWidth'] = romeon;
        verify = yankee[verify];
        verify = option.bind(tangon)(verify);
        verify = verify.withDelay;
        golfie['withDelay'] = verify;
        michal['__closure'] = golfie;
        golfie = 9155485900244.0;
        michal['__workletHash'] = golfie;
        golfie = _closure1_slot6;
        michal['__initData'] = golfie;
        oscard = zuuluu.bind(oscard)(michal);
        zuuluu = _closure1_slot3;
        michal = _closure1_slot4;
        entity = {};
        golfie = report.shinyAnimationContainer;
        report = new Array(2);
        report[0] = golfie;
        report[1] = oscard;
        entity['style'] = report;
        verify = 0;
        report = {'x': 0, 'y': 0};
        entity['start'] = report;
        report = {'x': 1, 'y': 1};
        entity['end'] = report;
        report = [0.3, 0.5, 0.7];
        entity['locations'] = report;
        golfie = 7;
        report = yankee[golfie];
        foxtra = option.bind(tangon)(report);
        romeon = foxtra.hexWithOpacity;
        oscard = 8;
        report = yankee[oscard];
        report = offset.bind(tangon)(report);
        report = report.unsafe_rawColors;
        report = report.WHITE_500;
        romeon = romeon.bind(foxtra)(report, verify);
        report = new Array(3);
        report[0] = romeon;
        romeon = yankee[golfie];
        kiloes = option.bind(tangon)(romeon);
        backup = kiloes.hexWithOpacity;
        romeon = yankee[oscard];
        romeon = offset.bind(tangon)(romeon);
        romeon = romeon.unsafe_rawColors;
        foxtra = romeon.WHITE_500;
        romeon = 0.4;
        romeon = backup.bind(kiloes)(foxtra, romeon);
        report[1] = romeon;
        golfie = yankee[golfie];
        option = option.bind(tangon)(golfie);
        golfie = option.hexWithOpacity;
        oscard = yankee[oscard];
        oscard = offset.bind(tangon)(oscard);
        oscard = oscard.unsafe_rawColors;
        oscard = oscard.WHITE_500;
        oscard = golfie.bind(option)(oscard, verify);
        report[2] = oscard;
        entity['colors'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();