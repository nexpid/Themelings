// app/modules/activate_device/native/ActivateDeviceSuccess.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'width': 300, 'height': 200, 'alignSelf': 'center'};
    tangon['image'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/activate_device/native/ActivateDeviceSuccess.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.data;
            verify = michal.onComplete;
            kiloes = michal.successImage;
            michal = _closure1_slot7;
            tangon = undefined;
            yankee = michal.bind(tangon)();
            michal = entity.twoWayLinkCode;
            romeon = null;
            if(!(romeon == michal)) { _fun00002_ip = 135; continue _fun00001 }
 45:
            zuuluu = entity.scopes;
            michal = zuuluu.some;
            entity = function(argFoo) {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 5;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.isSocialLayerUmbrellaScope;
                entity = argFoo;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
            output = null;
            if(!entity) { _fun00002_ip = 192; continue _fun00001 }
 76:
            report = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 4;
            michal = golfie[entity];
            michal = report.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = golfie[entity];
            entity = report.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.vBPvKy;
            output = michal.bind(zuuluu)(entity);
            _fun00002_ip = 192; continue _fun00001;
 135:
            report = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 4;
            michal = golfie[entity];
            michal = report.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = golfie[entity];
            entity = report.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.QhATl5;
            output = michal.bind(zuuluu)(entity);
 192:
            zuuluu = _closure1_slot5;
            michal = _closure1_slot6;
            entity = {};
            report = romeon != kiloes;
            golfie = null;
            if(!report) { _fun00002_ip = 293; continue _fun00001 }
 211:
            offset = _closure1_slot4;
            option = _closure1_slot1;
            sizing = _closure1_slot2;
            report = 6;
            report = sizing[report];
            option = option.bind(tangon)(report);
            report = {};
            backup = _closure1_slot0;
            foxtra = 7;
            foxtra = sizing[foxtra];
            backup = backup.bind(tangon)(foxtra);
            foxtra = backup.makeSource;
            foxtra = foxtra.bind(backup)(kiloes);
            report['source'] = foxtra;
            yankee = yankee.image;
            report['style'] = yankee;
            yankee = 'contain';
            report['resizeMode'] = yankee;
            golfie = offset.bind(tangon)(option, report);
 293:
            report = new Array(3);
            report[0] = golfie;
            offset = _closure1_slot5;
            option = _closure1_slot3;
            golfie = {};
            echoed = _closure1_slot1;
            result = _closure1_slot2;
            update = 8;
            yankee = result[update];
            yankee = echoed.bind(tangon)(yankee);
            yankee = yankee.innerContent;
            golfie['style'] = yankee;
            sizing = _closure1_slot4;
            ctrled = _closure1_slot0;
            foxtra = 9;
            yankee = result[foxtra];
            yankee = ctrled.bind(tangon)(yankee);
            kiloes = yankee.Text;
            yankee = {'variant': 'heading-lg/bold', 'color': 'header-primary'};
            backup = result[update];
            backup = echoed.bind(tangon)(backup);
            backup = backup.centerText;
            yankee['style'] = backup;
            backup = 4;
            echoed = result[backup];
            echoed = ctrled.bind(tangon)(echoed);
            source = echoed.intl;
            echoed = source.string;
            result = result[backup];
            result = ctrled.bind(tangon)(result);
            result = result.t;
            result = result.qDtJmJ;
            result = echoed.bind(source)(result);
            yankee['children'] = result;
            kiloes = sizing.bind(tangon)(kiloes, yankee);
            yankee = new Array(2);
            yankee[0] = kiloes;
            kiloes = romeon != output;
            romeon = null;
            if(!kiloes) { _fun00002_ip = 544; continue _fun00001 }
 471:
            sizing = _closure1_slot4;
            kiloes = _closure1_slot0;
            result = _closure1_slot2;
            foxtra = result[foxtra];
            foxtra = kiloes.bind(tangon)(foxtra);
            kiloes = foxtra.Text;
            foxtra = {'variant': 'text-md/medium', 'color': 'header-secondary'};
            echoed = _closure1_slot1;
            result = result[update];
            result = echoed.bind(tangon)(result);
            result = result.centerText;
            foxtra['style'] = result;
            foxtra['children'] = output;
            romeon = sizing.bind(tangon)(kiloes, foxtra);
 544:
            yankee[1] = romeon;
            golfie['children'] = yankee;
            golfie = offset.bind(tangon)(option, golfie);
            report[1] = golfie;
            option = _closure1_slot4;
            foxtra = _closure1_slot0;
            offset = _closure1_slot2;
            oscard = 10;
            oscard = offset[oscard];
            oscard = foxtra.bind(tangon)(oscard);
            golfie = oscard.Button;
            oscard = {};
            yankee = 'lg';
            oscard['size'] = yankee;
            yankee = offset[backup];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = offset[backup];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.cpT0Cg;
            offset = yankee.bind(romeon)(offset);
            oscard['text'] = offset;
            oscard['onPress'] = verify;
            verify = true;
            oscard['grow'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['ActivateDeviceSuccess'] = michal;
    return entity;
})();