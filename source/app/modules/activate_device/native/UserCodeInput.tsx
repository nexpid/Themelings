// app/modules/activate_device/native/UserCodeInput.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    offset = 0;
    tangon = oscard[offset];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.OAuthConstants;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot8 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 'center';
    verify['textAlign'] = yankee;
    tangon['text'] = verify;
    verify = {'marginTop': 16, 'alignSelf': 'stretch', 'backgroundColor': null, 'padding': 12, 'borderWidth': 1, 'borderColor': 'transparent'};
    yankee = 6;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = yankee;
    tangon['input'] = verify;
    verify = {};
    yankee = 'flex-start';
    verify['alignSelf'] = yankee;
    tangon['errorText'] = verify;
    verify = {};
    verify['flexGrow'] = offset;
    tangon['button'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/activate_device/native/UserCodeInput.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            report = entity.onClose;
            zuuluu = entity.onUserCodeAccepted;
            golfie = entity.prefilledUserCode;
            tangon = undefined;
            var _closure2_slot0 = tangon;
            entity = _closure1_slot10;
            update = entity.bind(tangon)();
            oscard = _closure1_slot4;
            michal = oscard.useState;
            entity = null;
            option = entity != golfie;
            entity = '';
            if(!option) { _fun00002_ip = 65; continue _fun00001 }
 62:
            entity = golfie;
 65:
            oscard = michal.bind(oscard)(entity);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(oscard, entity);
            entity = 0;
            yankee = michal[entity];
            entity = 1;
            entity = michal[entity];
            _closure2_slot0 = entity;
            output = _closure1_slot0;
            result = _closure1_slot2;
            entity = 7;
            entity = result[entity];
            michal = output.bind(tangon)(entity);
            entity = michal.useUserCodeSubmit;
            entity = entity.bind(michal)(yankee, zuuluu, report);
            foxtra = entity.manualSubmit;
            kiloes = entity.error;
            romeon = entity.submitting;
            zuuluu = _closure1_slot8;
            michal = _closure1_slot9;
            entity = {};
            oscard = _closure1_slot5;
            report = {};
            option = _closure1_slot1;
            golfie = 8;
            golfie = result[golfie];
            golfie = option.bind(tangon)(golfie);
            golfie = golfie.innerContent;
            report['style'] = golfie;
            option = _closure1_slot7;
            sizing = 9;
            golfie = result[sizing];
            golfie = output.bind(tangon)(golfie);
            echoed = golfie.Text;
            golfie = {'variant': 'heading-lg/bold', 'color': 'header-primary'};
            backup = update.text;
            golfie['style'] = backup;
            backup = 10;
            source = result[backup];
            source = output.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = result[backup];
            source = output.bind(tangon)(source);
            source = source.t;
            source = source.KYPNUl;
            source = ctrled.bind(vacuum)(source);
            golfie['children'] = source;
            echoed = option.bind(tangon)(echoed, golfie);
            golfie = new Array(2);
            golfie[0] = echoed;
            sizing = result[sizing];
            sizing = output.bind(tangon)(sizing);
            echoed = sizing.Text;
            sizing = {'variant': 'text-md/medium', 'color': 'header-secondary'};
            update = update.text;
            sizing['style'] = update;
            update = result[backup];
            update = output.bind(tangon)(update);
            ctrled = update.intl;
            source = ctrled.string;
            update = result[backup];
            update = output.bind(tangon)(update);
            update = update.t;
            update = update.xRHk7e;
            update = source.bind(ctrled)(update);
            sizing['children'] = update;
            sizing = option.bind(tangon)(echoed, sizing);
            golfie[1] = sizing;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            oscard = 11;
            oscard = result[oscard];
            oscard = output.bind(tangon)(oscard);
            golfie = oscard.TextInput;
            oscard = {};
            offset = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot0;
                michal = undefined;
                entity = argFoo;
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            oscard['onChange'] = offset;
            offset = _closure1_slot6;
            verify = offset.USER_CODE_LENGTH;
            oscard['maxLength'] = verify;
            oscard['value'] = yankee;
            verify = true;
            oscard['autoFocus'] = verify;
            sizing = 'off';
            oscard['autoComplete'] = sizing;
            sizing = result[backup];
            sizing = output.bind(tangon)(sizing);
            source = sizing.intl;
            update = source.formatToPlainString;
            sizing = result[backup];
            sizing = output.bind(tangon)(sizing);
            sizing = sizing.t;
            echoed = sizing.0tbz6+;
            sizing = {};
            ctrled = offset.USER_CODE_LENGTH;
            sizing['number'] = ctrled;
            sizing = update.bind(source)(echoed, sizing);
            oscard['placeholder'] = sizing;
            oscard['errorMessage'] = kiloes;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            oscard = 12;
            oscard = result[oscard];
            oscard = output.bind(tangon)(oscard);
            golfie = oscard.Button;
            oscard = {};
            kiloes = 'lg';
            oscard['size'] = kiloes;
            kiloes = result[backup];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = result[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.3PatS0;
            backup = kiloes.bind(sizing)(backup);
            oscard['text'] = backup;
            oscard['onPress'] = foxtra;
            oscard['loading'] = romeon;
            yankee = yankee.length;
            offset = offset.USER_CODE_LENGTH;
            offset = yankee !== offset;
            oscard['disabled'] = offset;
            oscard['grow'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['UserCodeInput'] = michal;
    return entity;
})();