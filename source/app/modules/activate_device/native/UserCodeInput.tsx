// app/modules/activate_device/native/UserCodeInput.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    offset = 0;
    tango = oscar[offset];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.OAuthConstants;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    yankee = 'center';
    verify['textAlign'] = yankee;
    tango['text'] = verify;
    verify = {'marginTop': 16, 'alignSelf': 'stretch', 'backgroundColor': null, 'padding': 12, 'borderWidth': 1, 'borderColor': 'transparent'};
    yankee = 6;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = yankee;
    tango['input'] = verify;
    verify = {};
    yankee = 'flex-start';
    verify['alignSelf'] = yankee;
    tango['errorText'] = verify;
    verify = {};
    verify['flexGrow'] = offset;
    tango['button'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot10 = tango;
    tango = 13;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/activate_device/native/UserCodeInput.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) {
        _fun107511: for(var _fun107511_ip = 0; ; ) switch(_fun107511_ip) {
 0:
            entity = argFoo;
            report = entity.onClose;
            zulu = entity.onUserCodeAccepted;
            golf = entity.prefilledUserCode;
            tango = undefined;
            var _closure2_slot0 = tango;
            entity = _closure1_slot10;
            update = entity.bind(tango)();
            oscar = _closure1_slot4;
            mike = oscar.useState;
            entity = null;
            options = entity != golf;
            entity = '';
            if(!options) { _fun107511_ip = 65; continue _fun107511 }
 62:
            entity = golf;
 65:
            oscar = mike.bind(oscar)(entity);
            mike = _closure1_slot3;
            entity = 2;
            mike = mike.bind(tango)(oscar, entity);
            entity = 0;
            yankee = mike[entity];
            entity = 1;
            entity = mike[entity];
            _closure2_slot0 = entity;
            output = _closure1_slot0;
            result = _closure1_slot2;
            entity = 7;
            entity = result[entity];
            mike = output.bind(tango)(entity);
            entity = mike.useUserCodeSubmit;
            entity = entity.bind(mike)(yankee, zulu, report);
            foxtrot = entity.manualSubmit;
            kilo = entity.error;
            romeo = entity.submitting;
            zulu = _closure1_slot8;
            mike = _closure1_slot9;
            entity = {};
            oscar = _closure1_slot5;
            report = {};
            options = _closure1_slot1;
            golf = 8;
            golf = result[golf];
            golf = options.bind(tango)(golf);
            golf = golf.innerContent;
            report['style'] = golf;
            options = _closure1_slot7;
            sizing = 9;
            golf = result[sizing];
            golf = output.bind(tango)(golf);
            echo = golf.Text;
            golf = {'variant': 'heading-lg/bold', 'color': 'header-primary'};
            backup = update.text;
            golf['style'] = backup;
            backup = 10;
            source = result[backup];
            source = output.bind(tango)(source);
            vacuum = source.intl;
            control = vacuum.string;
            source = result[backup];
            source = output.bind(tango)(source);
            source = source.t;
            source = source.KYPNUl;
            source = control.bind(vacuum)(source);
            golf['children'] = source;
            echo = options.bind(tango)(echo, golf);
            golf = new Array(2);
            golf[0] = echo;
            sizing = result[sizing];
            sizing = output.bind(tango)(sizing);
            echo = sizing.Text;
            sizing = {'variant': 'text-md/medium', 'color': 'header-secondary'};
            update = update.text;
            sizing['style'] = update;
            update = result[backup];
            update = output.bind(tango)(update);
            control = update.intl;
            source = control.string;
            update = result[backup];
            update = output.bind(tango)(update);
            update = update.t;
            update = update.xRHk7e;
            update = source.bind(control)(update);
            sizing['children'] = update;
            sizing = options.bind(tango)(echo, sizing);
            golf[1] = sizing;
            report['children'] = golf;
            oscar = zulu.bind(tango)(oscar, report);
            report = new Array(3);
            report[0] = oscar;
            oscar = 11;
            oscar = result[oscar];
            oscar = output.bind(tango)(oscar);
            golf = oscar.TextInput;
            oscar = {};
            offset = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot0;
                mike = undefined;
                entity = argFoo;
                entity = zulu.bind(mike)(entity);
                return entity;
            };
            oscar['onChange'] = offset;
            offset = _closure1_slot6;
            verify = offset.USER_CODE_LENGTH;
            oscar['maxLength'] = verify;
            oscar['value'] = yankee;
            verify = true;
            oscar['autoFocus'] = verify;
            sizing = 'off';
            oscar['autoComplete'] = sizing;
            sizing = result[backup];
            sizing = output.bind(tango)(sizing);
            source = sizing.intl;
            update = source.formatToPlainString;
            sizing = result[backup];
            sizing = output.bind(tango)(sizing);
            sizing = sizing.t;
            echo = sizing.0tbz6+;
            sizing = {};
            control = offset.USER_CODE_LENGTH;
            sizing['number'] = control;
            sizing = update.bind(source)(echo, sizing);
            oscar['placeholder'] = sizing;
            oscar['errorMessage'] = kilo;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            oscar = 12;
            oscar = result[oscar];
            oscar = output.bind(tango)(oscar);
            golf = oscar.Button;
            oscar = {};
            kilo = 'lg';
            oscar['size'] = kilo;
            kilo = result[backup];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = result[backup];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            backup = backup.3PatS0;
            backup = kilo.bind(sizing)(backup);
            oscar['text'] = backup;
            oscar['onPress'] = foxtrot;
            oscar['loading'] = romeo;
            yankee = yankee.length;
            offset = offset.USER_CODE_LENGTH;
            offset = yankee !== offset;
            oscar['disabled'] = offset;
            oscar['grow'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['UserCodeInput'] = mike;
    return entity;
})();