// app/modules/directory_channels/native/components/GuildDirectoryNicknameUpsellModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: GuildDirectoryNicknameUpsell
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.guildId;
            var _closure2_slot0 = michal;
            entity = entity.handleClose;
            var _closure2_slot1 = entity;
            entity = _closure1_slot13;
            tangon = undefined;
            foxtra = entity.bind(tangon)();
            michal = _closure1_slot0;
            report = _closure1_slot2;
            entity = 11;
            zuuluu = report[entity];
            option = michal.bind(tangon)(zuuluu);
            golfie = option.useStateFromStores;
            zuuluu = _closure1_slot8;
            oscard = new Array(1);
            oscard[0] = zuuluu;
            zuuluu = function() {
                zuuluu = _closure1_slot8;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            status = golfie.bind(option)(oscard, zuuluu);
            oscard = _closure1_slot1;
            zuuluu = 12;
            zuuluu = report[zuuluu];
            zuuluu = oscard.bind(tangon)(zuuluu);
            zuuluu = zuuluu.bind(tangon)();
            offset = zuuluu.bottom;
            oscard = _closure1_slot5;
            zuuluu = oscard.useState;
            sizing = null;
            oscard = zuuluu.bind(oscard)(sizing);
            zuuluu = _closure1_slot4;
            verify = 2;
            zuuluu = zuuluu.bind(tangon)(oscard, verify);
            golfie = 0;
            echoed = zuuluu[golfie];
            oscard = 1;
            zuuluu = zuuluu[oscard];
            var _closure2_slot2 = zuuluu;
            yankee = _closure1_slot5;
            option = yankee.useState;
            zuuluu = '';
            option = option.bind(yankee)(zuuluu);
            zuuluu = _closure1_slot4;
            zuuluu = zuuluu.bind(tangon)(option, verify);
            ctrled = zuuluu[golfie];
            var _closure2_slot3 = ctrled;
            output = zuuluu[oscard];
            entity = report[entity];
            golfie = michal.bind(tangon)(entity);
            oscard = golfie.useStateFromStores;
            entity = _closure1_slot9;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            entity = function() {
                entity = _closure1_slot9;
                entity = entity.keyboardOpen;
                return entity;
            };
            result = oscard.bind(golfie)(zuuluu, entity);
            zuuluu = _closure1_slot5;
            entity = zuuluu.useRef;
            option = entity.bind(zuuluu)(sizing);
            var _closure2_slot4 = option;
            entity = function() {
                tangon = _closure1_slot3;
                zuuluu = undefined;
                michal = function* () {
                    entity = function* () { // Original name: ?anon_0_
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            StartGenerator();
                            ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                            if(michal) { _fun00004_ip = 165; continue _fun00003 }
 10:
                            report = _closure2_slot2;
                            michal = undefined;
                            tangon = null;
                            tangon = report.bind(michal)(tangon);
 26: // try_start_0
                            report = _closure1_slot0;
                            oscard = _closure1_slot2;
                            tangon = 13;
                            tangon = oscard[tangon];
                            golfie = report.bind(michal)(tangon);
                            oscard = golfie.updateGuildSelfMember;
                            report = _closure2_slot0;
                            tangon = {};
                            option = _closure2_slot3;
                            tangon['nick'] = option;
                            tangon = oscard.bind(golfie)(report, tangon);
                            SaveGenerator(address=80);
 78:
                            return tangon;
 80:
                            ResumeGenerator(result_out_reg=3, return_bool_out_reg=4);
                            if(report) { _fun00004_ip = 96; continue _fun00003 }
 86:
                            report = _closure2_slot1;
                            report = report.bind(michal)();
 94: // try_end0
                            _fun00004_ip = 162; continue _fun00003;
 96:
                            return tangon;
 99: // catch_target0
                            CatchBlockStart(arg_register=5);
                            tangon = _closure2_slot2;
                            report = _closure1_slot0;
                            golfie = _closure1_slot2;
                            zuuluu = 14;
                            zuuluu = golfie[zuuluu];
                            zuuluu = report.bind(michal)(zuuluu);
                            zuuluu = zuuluu.APIError;
                            report = zuuluu.prototype;
                            report = Object.create(report, {constructor: {value: zuuluu}});
                            yankee = report;
                            offset = oscard;
                            zuuluu = new yankee[zuuluu](offset, verify);
                            zuuluu = zuuluu instanceof Object ? zuuluu : report;
                            zuuluu = tangon.bind(michal)(zuuluu);
 162:
                            return michal;
 165:
                            return entity;
                        }
                    };
                    return entity;
                };
                michal = tangon.bind(zuuluu)(michal);
                var _closure3_slot0 = michal;
                entity = function() {
                    entity = undefined;
                    tangon = _closure3_slot0;
                    zuuluu = tangon.apply;
                    entity = arguments;
                    michal = entity;
                    entity = this;
                    entity = zuuluu.bind(tangon)(entity, michal);
                    return entity;
                };
                return entity;
            };
            kiloes = entity.bind(tangon)();
            zuuluu = _closure1_slot11;
            entity = 15;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['top'] = report;
            report = foxtra.container;
            entity['style'] = report;
            golfie = _closure1_slot12;
            oscard = _closure1_slot7;
            report = {};
            report['ref'] = option;
            option = 'handled';
            report['keyboardShouldPersistTaps'] = option;
            verify = foxtra.scrollViewContainer;
            option = new Array(2);
            option[0] = verify;
            verify = {};
            update = _closure1_slot1;
            source = _closure1_slot2;
            yankee = 10;
            yankee = source[yankee];
            yankee = update.bind(tangon)(yankee);
            yankee = yankee.spacing;
            yankee = yankee.PX_16;
            if(result) { _fun00002_ip = 384; continue _fun00001 }
 378:
            offset = offset + yankee;
            _fun00002_ip = 387; continue _fun00001;
 384:
            offset = yankee;
 387:
            verify['paddingBottom'] = offset;
            option[1] = verify;
            report['contentContainerStyle'] = option;
            offset = _closure1_slot11;
            verify = _closure1_slot1;
            config = _closure1_slot2;
            yankee = 16;
            option = config[yankee];
            verify = verify.bind(tangon)(option);
            option = {};
            result = foxtra.guildIcon;
            option['style'] = result;
            option['guild'] = status;
            record = _closure1_slot0;
            yankee = config[yankee];
            yankee = record.bind(tangon)(yankee);
            yankee = yankee.GuildIconSizes;
            yankee = yankee.XLARGE;
            option['size'] = yankee;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(5);
            option[0] = verify;
            yankee = _closure1_slot12;
            offset = _closure1_slot6;
            verify = {};
            result = foxtra.header;
            verify['style'] = result;
            vacuum = _closure1_slot11;
            sequen = 17;
            result = config[sequen];
            result = record.bind(tangon)(result);
            source = result.Text;
            result = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            update = foxtra.title;
            result['style'] = update;
            update = 18;
            cntext = config[update];
            cntext = record.bind(tangon)(cntext);
            papara = cntext.intl;
            cntext = papara.format;
            config = config[update];
            config = record.bind(tangon)(config);
            config = config.t;
            record = config.d+6kzs;
            config = {};
            sierra = sizing == status;
            target = undefined;
            if(sierra) { _fun00002_ip = 609; continue _fun00001 }
 604:
            target = status.name;
 609:
            config['guildName'] = target;
            config = cntext.bind(papara)(record, config);
            result['children'] = config;
            result = vacuum.bind(tangon)(source, result);
            vacuum = new Array(2);
            vacuum[0] = result;
            record = _closure1_slot11;
            result = _closure1_slot0;
            source = _closure1_slot2;
            sequen = source[sequen];
            sequen = result.bind(tangon)(sequen);
            config = sequen.Text;
            sequen = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            cntext = foxtra.description;
            sequen['style'] = cntext;
            cntext = source[update];
            cntext = result.bind(tangon)(cntext);
            target = cntext.intl;
            papara = target.string;
            cntext = source[update];
            cntext = result.bind(tangon)(cntext);
            cntext = cntext.t;
            cntext = cntext.b3L8y8;
            cntext = papara.bind(target)(cntext);
            sequen['children'] = cntext;
            sequen = record.bind(tangon)(config, sequen);
            vacuum[1] = sequen;
            verify['children'] = vacuum;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            yankee = _closure1_slot11;
            offset = _closure1_slot1;
            verify = 19;
            verify = source[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            vacuum = source[update];
            vacuum = result.bind(tangon)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = source[update];
            vacuum = result.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.ilDlmZ;
            vacuum = sequen.bind(config)(vacuum);
            verify['label'] = vacuum;
            vacuum = source[update];
            vacuum = result.bind(tangon)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = source[update];
            vacuum = result.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.RfWvWF;
            vacuum = sequen.bind(config)(vacuum);
            verify['placeholder'] = vacuum;
            verify['value'] = ctrled;
            verify['onChangeText'] = output;
            output = foxtra.input;
            verify['style'] = output;
            output = foxtra.redesignTextInput;
            verify['textStyle'] = output;
            output = 20;
            output = source[output];
            output = result.bind(tangon)(output);
            output = output.ClearButtonVisibility;
            output = output.WITH_CONTENT;
            verify['clearButtonVisibility'] = output;
            output = sizing == echoed;
            sizing = undefined;
            if(output) { _fun00002_ip = 965; continue _fun00001 }
 950:
            result = echoed.getFirstFieldErrorMessage;
            output = 'name';
            sizing = result.bind(echoed)(output);
 965:
            verify['error'] = sizing;
            sizing = function() { // Original name: onFocus
                entity = global;
                tangon = entity.setTimeout;
                entity = undefined;
                zuuluu = function() {
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        entity = _closure2_slot4;
                        michal = entity.current;
                        entity = null;
                        if(!(entity != michal)) { _fun00006_ip = 28; continue _fun00005 }
 18:
                        entity = michal.scrollToEnd;
                        entity = entity.bind(michal)();
 28:
                        entity = undefined;
                        return entity;
                    }
                };
                michal = 100;
                michal = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            verify['onFocus'] = sizing;
            backup = function() { // Original name: onBlur
                entity = global;
                tangon = entity.setTimeout;
                entity = undefined;
                zuuluu = function() {
                    _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                        entity = _closure2_slot4;
                        michal = entity.current;
                        entity = null;
                        if(!(entity != michal)) { _fun00008_ip = 28; continue _fun00007 }
 18:
                        entity = michal.scrollToEnd;
                        entity = entity.bind(michal)();
 28:
                        entity = undefined;
                        return entity;
                    }
                };
                michal = 100;
                michal = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            verify['onBlur'] = backup;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            yankee = _closure1_slot11;
            offset = _closure1_slot6;
            verify = {};
            backup = foxtra.redesignGrowSpacing;
            verify['style'] = backup;
            verify = yankee.bind(tangon)(offset, verify);
            option[3] = verify;
            yankee = _closure1_slot11;
            offset = _closure1_slot6;
            verify = {};
            foxtra = foxtra.redesignButtonContainer;
            verify['style'] = foxtra;
            backup = _closure1_slot11;
            echoed = _closure1_slot0;
            sizing = _closure1_slot2;
            romeon = 21;
            romeon = sizing[romeon];
            romeon = echoed.bind(tangon)(romeon);
            foxtra = romeon.Button;
            romeon = {};
            output = 'lg';
            romeon['size'] = output;
            output = sizing[update];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = sizing[update];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.Np4yXV;
            sizing = output.bind(result)(sizing);
            romeon['text'] = sizing;
            romeon['onPress'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[4] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    yankee = 1;
    tangon = oscard[yankee];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    foxtra = 2;
    golfie = oscard[foxtra];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot6 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildPrompts;
    var _closure1_slot10 = tangon;
    tangon = 7;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot11 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot12 = tangon;
    offset = 8;
    tangon = oscard[offset];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['flex'] = yankee;
    yankee = 9;
    yankee = oscard[yankee];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.NAV_BAR_HEIGHT;
    verify['marginTop'] = yankee;
    tangon['container'] = verify;
    backup = 'center';
    yankee = 16;
    verify = {'alignSelf': 'center', 'marginTop': 16};
    tangon['guildIcon'] = verify;
    verify = {'marginBottom': 8, 'textAlign': 'center'};
    tangon['title'] = verify;
    verify = {};
    verify['textAlign'] = backup;
    tangon['description'] = verify;
    verify = {'alignItems': 'center', 'justifyContent': 'center', 'padding': 16};
    tangon['header'] = verify;
    verify = {};
    verify['marginHorizontal'] = yankee;
    tangon['input'] = verify;
    verify = {};
    verify['flexGrow'] = foxtra;
    tangon['scrollViewContainer'] = verify;
    verify = {};
    yankee = 10;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.lg;
    verify['borderRadius'] = backup;
    tangon['redesignTextInput'] = verify;
    verify = {};
    verify['flexGrow'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['minHeight'] = foxtra;
    tangon['redesignGrowSpacing'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    verify['paddingHorizontal'] = yankee;
    tangon['redesignButtonContainer'] = verify;
    verify = {'backgroundColor': 'transparent', 'borderBottomWidth': 0};
    tangon['navbar'] = verify;
    verify = {};
    verify['marginLeft'] = offset;
    tangon['closeIcon'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot13 = tangon;
    tangon = 27;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/directory_channels/native/components/GuildDirectoryNicknameUpsellModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildDirectoryNicknameUpsellModal
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot11;
        michal = _closure1_slot0;
        option = _closure1_slot2;
        entity = 25;
        entity = option[entity];
        zuuluu = undefined;
        entity = michal.bind(zuuluu)(entity);
        michal = entity.Navigator;
        entity = {};
        golfie = _closure1_slot1;
        oscard = 26;
        oscard = option[oscard];
        oscard = golfie.bind(zuuluu)(oscard);
        report = function() {
            zuuluu = _closure2_slot0;
            michal = function(argFoo) { // Original name: getScreens
                entity = argFoo;
                zuuluu = entity.guildId;
                var _closure4_slot0 = zuuluu;
                entity = entity.onHide;
                var _closure4_slot1 = entity;
                oscard = function() { // Original name: handleClose
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    entity = 22;
                    report = tangon[entity];
                    entity = undefined;
                    option = zuuluu.bind(entity)(report);
                    golfie = option.viewPrompt;
                    michal = _closure1_slot10;
                    oscard = michal.REAL_NAME_PROMPT;
                    report = _closure4_slot0;
                    report = golfie.bind(option)(oscard, report);
                    michal = _closure4_slot1;
                    michal = michal.bind(entity)();
                    michal = 23;
                    michal = tangon[michal];
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.close;
                    michal = michal.bind(zuuluu)();
                    return entity;
                };
                var _closure4_slot2 = oscard;
                entity = {};
                zuuluu = {};
                tangon = true;
                zuuluu['fullscreen'] = tangon;
                golfie = _closure1_slot0;
                report = _closure1_slot2;
                tangon = 24;
                report = report[tangon];
                tangon = undefined;
                report = golfie.bind(tangon)(report);
                tangon = report.getHeaderCloseButton;
                tangon = tangon.bind(report)(oscard);
                zuuluu['headerLeft'] = tangon;
                tangon = function() { // Original name: headerTitle
                    entity = null;
                    return entity;
                };
                zuuluu['headerTitle'] = tangon;
                michal = function() { // Original name: render
                    tangon = _closure1_slot11;
                    zuuluu = _closure1_slot14;
                    michal = {};
                    report = _closure4_slot0;
                    michal['guildId'] = report;
                    entity = _closure4_slot2;
                    michal['handleClose'] = entity;
                    entity = undefined;
                    entity = tangon.bind(entity)(zuuluu, michal);
                    return entity;
                };
                zuuluu['render'] = michal;
                michal = 'UPSELL_SCREEN_KEY';
                entity[michal] = zuuluu;
                return entity;
            };
            entity = undefined;
            entity = michal.bind(entity)(zuuluu);
            return entity;
        };
        report = oscard.bind(zuuluu)(report);
        entity['screens'] = report;
        report = 'UPSELL_SCREEN_KEY';
        entity['initialRouteName'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();