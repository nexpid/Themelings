// app/modules/directory_channels/native/components/GuildDirectoryPlaceholderRow.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot2 = golf;
    yankee = 1;
    tango = oscar[yankee];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot4 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'flexDirection': 'row', 'padding': 16};
    tango['row'] = offset;
    offset = {};
    offset['flex'] = yankee;
    tango['rowInner'] = offset;
    offset = {'width': 40, 'height': 40, 'borderRadius': null, 'overflow': 'hidden', 'marginRight': 16};
    yankee = 4;
    romeo = oscar[yankee];
    yankee = argBaz;
    yankee = yankee.bind(entity)(romeo);
    yankee = yankee.radii;
    yankee = yankee.sm;
    offset['borderRadius'] = yankee;
    yankee = 5;
    romeo = oscar[yankee];
    romeo = report.bind(entity)(romeo);
    romeo = romeo.DARK_PRIMARY_500_LIGHT_PRIMARY_230;
    offset['backgroundColor'] = romeo;
    tango['placeholderAvatar'] = offset;
    offset = {'height': 15, 'borderRadius': 5};
    yankee = oscar[yankee];
    yankee = report.bind(entity)(yankee);
    yankee = yankee.DARK_PRIMARY_500_LIGHT_PRIMARY_230;
    offset['backgroundColor'] = yankee;
    tango['placeholderText'] = offset;
    offset = {'width': '100%', 'marginTop': 10};
    tango['placeholderBody'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot6 = tango;
    tango = golf.memo;
    mike = function() {
        entity = _closure1_slot6;
        tango = undefined;
        foxtrot = entity.bind(tango)();
        var _closure2_slot0 = foxtrot;
        romeo = global;
        oscar = romeo.Math;
        zulu = oscar.floor;
        mike = romeo.Math;
        entity = mike.random;
        entity = entity.bind(mike)();
        mike = 2;
        entity = mike * entity;
        entity = zulu.bind(oscar)(entity);
        backup = entity + mike;
        oscar = romeo.Math;
        zulu = oscar.floor;
        mike = romeo.Math;
        entity = mike.random;
        entity = entity.bind(mike)();
        mike = 10;
        entity = mike * entity;
        entity = zulu.bind(oscar)(entity);
        var _closure2_slot1 = entity;
        oscar = romeo.Math;
        zulu = oscar.floor;
        golf = romeo.Math;
        entity = golf.random;
        golf = entity.bind(golf)();
        entity = 50;
        entity = entity * golf;
        entity = zulu.bind(oscar)(entity);
        echo = entity + mike;
        zulu = _closure1_slot4;
        entity = _closure1_slot2;
        mike = entity.Fragment;
        entity = {};
        golf = _closure1_slot5;
        oscar = _closure1_slot3;
        report = {};
        options = foxtrot.row;
        report['style'] = options;
        options = {};
        verify = foxtrot.placeholderAvatar;
        options['style'] = verify;
        verify = zulu.bind(tango)(oscar, options);
        options = new Array(2);
        options[0] = verify;
        verify = {};
        offset = foxtrot.rowInner;
        verify['style'] = offset;
        offset = {};
        kilo = foxtrot.placeholderText;
        foxtrot = new Array(2);
        foxtrot[0] = kilo;
        kilo = {};
        sizing = romeo.HermesInternal;
        result = sizing.concat;
        output = '';
        sizing = '%';
        sizing = result.bind(output)(echo, sizing);
        kilo['width'] = sizing;
        foxtrot[1] = kilo;
        offset['style'] = foxtrot;
        foxtrot = zulu.bind(tango)(oscar, offset);
        offset = new Array(2);
        offset[0] = foxtrot;
        romeo = romeo.Array;
        foxtrot = romeo.prototype;
        foxtrot = Object.create(foxtrot, {constructor: {value: romeo}});
        control = foxtrot;
        source = backup;
        romeo = new control[romeo](source, update);
        foxtrot = romeo instanceof Object ? romeo : foxtrot;
        romeo = foxtrot.fill;
        foxtrot = romeo.bind(foxtrot)(tango);
        romeo = foxtrot.map;
        yankee = function(argFoo, argBar) {
            report = argBar;
            tango = _closure1_slot4;
            zulu = _closure1_slot3;
            mike = {};
            golf = _closure2_slot0;
            verify = golf.placeholderText;
            oscar = new Array(3);
            oscar[0] = verify;
            golf = golf.placeholderBody;
            oscar[1] = golf;
            golf = {};
            offset = _closure1_slot0;
            verify = _closure1_slot1;
            entity = 6;
            verify = verify[entity];
            entity = undefined;
            offset = offset.bind(entity)(verify);
            verify = offset.placeholderRowWidth;
            options = _closure2_slot1;
            options = options + report;
            yankee = verify.bind(offset)(options);
            options = global;
            options = options.HermesInternal;
            offset = options.concat;
            verify = '';
            options = '%';
            options = offset.bind(verify)(yankee, options);
            golf['width'] = options;
            oscar[2] = golf;
            mike['style'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        yankee = romeo.bind(foxtrot)(yankee);
        offset[1] = yankee;
        verify['children'] = offset;
        verify = golf.bind(tango)(oscar, verify);
        options[1] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = tango.bind(golf)(mike);
    tango = 7;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/directory_channels/native/components/GuildDirectoryPlaceholderRow.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();