// app/modules/stage_channels/StageChannelParticipantStoreHooks.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/StageChannelParticipantStoreHooks.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo, argBar) { // Original name: useStageParticipants
        yankee = argFoo;
        zuuluu = argBar;
        var _closure2_slot0 = yankee;
        var _closure2_slot1 = zuuluu;
        verify = _closure1_slot0;
        offset = _closure1_slot1;
        tangon = 2;
        report = offset[tangon];
        tangon = undefined;
        option = verify.bind(tangon)(report);
        golfie = option.useStateFromStores;
        report = _closure1_slot3;
        oscard = new Array(1);
        oscard[0] = report;
        report = new Array(2);
        report[0] = yankee;
        report[1] = zuuluu;
        zuuluu = 3;
        zuuluu = offset[zuuluu];
        zuuluu = verify.bind(tangon)(zuuluu);
        romeon = zuuluu.isVersionEqual;
        backup = function() {
            tangon = _closure1_slot3;
            michal = tangon.getMutableParticipants;
            zuuluu = _closure2_slot0;
            entity = _closure2_slot1;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = new Array(2);
            entity[0] = michal;
            michal = tangon.getParticipantsVersion;
            michal = michal.bind(tangon)(zuuluu);
            entity[1] = michal;
            return entity;
        };
        sizing = option;
        kiloes = oscard;
        foxtra = report;
        zuuluu = sizing[golfie](kiloes, backup, foxtra, romeon, yankee);
        michal = _closure1_slot2;
        entity = 1;
        michal = michal.bind(tangon)(zuuluu, entity);
        entity = 0;
        entity = michal[entity];
        return entity;
    };
    zuuluu['useStageParticipants'] = tangon;
    tangon = function(argFoo, argBar) { // Original name: useStageParticipantsCount
        golfie = argFoo;
        oscard = argBar;
        var _closure2_slot0 = golfie;
        var _closure2_slot1 = oscard;
        report = _closure1_slot0;
        tangon = _closure1_slot1;
        zuuluu = 2;
        tangon = tangon[zuuluu];
        zuuluu = undefined;
        report = report.bind(zuuluu)(tangon);
        tangon = report.useStateFromStores;
        michal = _closure1_slot3;
        zuuluu = new Array(1);
        zuuluu[0] = michal;
        michal = new Array(2);
        michal[0] = golfie;
        michal[1] = oscard;
        entity = function() {
            tangon = _closure1_slot3;
            zuuluu = tangon.getParticipantCount;
            michal = _closure2_slot0;
            entity = _closure2_slot1;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        };
        entity = tangon.bind(report)(zuuluu, entity, michal);
        return entity;
    };
    zuuluu['useStageParticipantsCount'] = tangon;
    tangon = function(argFoo) { // Original name: useSortedRequestToSpeakParticipants
        zuuluu = argFoo;
        var _closure2_slot0 = zuuluu;
        verify = _closure1_slot0;
        offset = _closure1_slot1;
        tangon = 2;
        report = offset[tangon];
        tangon = undefined;
        option = verify.bind(tangon)(report);
        golfie = option.useStateFromStores;
        report = _closure1_slot3;
        oscard = new Array(1);
        oscard[0] = report;
        report = new Array(1);
        report[0] = zuuluu;
        zuuluu = 3;
        zuuluu = offset[zuuluu];
        zuuluu = verify.bind(tangon)(zuuluu);
        yankee = zuuluu.isVersionEqual;
        foxtra = function() {
            tangon = _closure1_slot3;
            entity = tangon.getMutableRequestToSpeakParticipants;
            zuuluu = _closure2_slot0;
            michal = entity.bind(tangon)(zuuluu);
            entity = new Array(2);
            entity[0] = michal;
            michal = tangon.getRequestToSpeakParticipantsVersion;
            michal = michal.bind(tangon)(zuuluu);
            entity[1] = michal;
            return entity;
        };
        kiloes = option;
        backup = oscard;
        romeon = report;
        zuuluu = kiloes[golfie](backup, foxtra, romeon, yankee, offset);
        michal = _closure1_slot2;
        entity = 1;
        michal = michal.bind(tangon)(zuuluu, entity);
        entity = 0;
        entity = michal[entity];
        return entity;
    };
    zuuluu['useSortedRequestToSpeakParticipants'] = tangon;
    michal = function(argFoo) { // Original name: useActualStageSpeakerCount
        oscard = argFoo;
        var _closure2_slot0 = oscard;
        report = _closure1_slot0;
        tangon = _closure1_slot1;
        zuuluu = 2;
        tangon = tangon[zuuluu];
        zuuluu = undefined;
        report = report.bind(zuuluu)(tangon);
        tangon = report.useStateFromStores;
        michal = _closure1_slot3;
        zuuluu = new Array(1);
        zuuluu[0] = michal;
        michal = new Array(1);
        michal[0] = oscard;
        entity = function() {
            tangon = _closure1_slot3;
            zuuluu = tangon.getMutableParticipants;
            michal = _closure2_slot0;
            oscard = _closure1_slot0;
            report = _closure1_slot1;
            entity = 4;
            report = report[entity];
            entity = undefined;
            entity = oscard.bind(entity)(report);
            entity = entity.StageChannelParticipantNamedIndex;
            entity = entity.SPEAKER;
            zuuluu = zuuluu.bind(tangon)(michal, entity);
            michal = zuuluu.filter;
            entity = function(argFoo) {
                entity = argFoo;
                michal = entity.type;
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot1;
                entity = 4;
                zuuluu = zuuluu[entity];
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu);
                entity = entity.StageChannelParticipantTypes;
                entity = entity.VOICE;
                entity = michal === entity;
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
            entity = entity.length;
            return entity;
        };
        entity = tangon.bind(report)(zuuluu, entity, michal);
        return entity;
    };
    zuuluu['useActualStageSpeakerCount'] = michal;
    return entity;
})();