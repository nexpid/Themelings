// app/modules/stage_channels/sendStageRequestToSpeakEphemeralMessage.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = oscar;
    entity = function(argFoo) { // Original name: createRequestToSpeakMessage
        entity = argFoo;
        report = entity.channelId;
        mike = entity.requesterUser;
        tango = entity.requestToSpeakTimestamp;
        entity = {};
        options = _closure1_slot0;
        golf = _closure1_slot1;
        oscar = 2;
        golf = golf[oscar];
        oscar = undefined;
        options = options.bind(oscar)(golf);
        golf = options.fromTimestamp;
        oscar = global;
        verify = oscar.Date;
        oscar = verify.parse;
        oscar = oscar.bind(verify)(tango);
        oscar = golf.bind(options)(oscar);
        entity['id'] = oscar;
        oscar = _closure1_slot4;
        oscar = oscar.STAGE_RAISE_HAND;
        entity['type'] = oscar;
        oscar = _closure1_slot2;
        oscar = oscar.EPHEMERAL;
        entity['flags'] = oscar;
        oscar = '';
        entity['content'] = oscar;
        entity['channel_id'] = report;
        entity['author'] = mike;
        mike = new Array(0);
        entity['attachments'] = mike;
        mike = new Array(0);
        entity['embeds'] = mike;
        mike = false;
        entity['pinned'] = mike;
        report = new Array(0);
        entity['mentions'] = report;
        report = new Array(0);
        entity['mention_channels'] = report;
        report = new Array(0);
        entity['mention_roles'] = report;
        entity['mention_everyone'] = mike;
        entity['timestamp'] = tango;
        zulu = _closure1_slot3;
        zulu = zulu.SENT;
        entity['state'] = zulu;
        entity['tts'] = mike;
        return entity;
    };
    var _closure1_slot5 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = report.bind(entity)(tango);
    golf = tango.MessageFlags;
    var _closure1_slot2 = golf;
    golf = tango.MessageStates;
    var _closure1_slot3 = golf;
    tango = tango.MessageTypes;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/stage_channels/sendStageRequestToSpeakEphemeralMessage.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo, argBar, argBaz) { // Original name: sendStageRequestToSpeakEphemeralMessage
        golf = argFoo;
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {'type': 'MESSAGE_CREATE', 'channelId': null, 'message': null, 'optimistic': false, 'sendMessageOptions': null, 'isPushNotification': false};
        mike['channelId'] = golf;
        oscar = _closure1_slot5;
        report = {};
        report['channelId'] = golf;
        golf = argBar;
        report['requesterUser'] = golf;
        golf = argBaz;
        report['requestToSpeakTimestamp'] = golf;
        report = oscar.bind(entity)(report);
        mike['message'] = report;
        report = {};
        mike['sendMessageOptions'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['sendStageRequestToSpeakEphemeralMessage'] = mike;
    return entity;
})();