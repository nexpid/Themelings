// app/modules/stage_channels/useIsInvitedToSpeak.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var7 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var7;
    var _closure1_slot2 = var6;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var7.bind(var1)(var4);
    var _closure1_slot3 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var7.bind(var1)(var4);
    var _closure1_slot4 = var4;
    var4 = 4;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/stage_channels/useIsInvitedToSpeak.tsx';
    var4 = var5.bind(var6)(var4);
    var2 = function useIsInvitedToSpeak() {
        var4 = _closure1_slot0;
        var5 = _closure1_slot2;
        var6 = 2;
        var7 = var5[var6];
        var3 = undefined;
        var10 = var4.bind(var3)(var7);
        var9 = var10.useStateFromStores;
        var7 = _closure1_slot4;
        var8 = new Array(1);
        var8[0] = var7;
        var7 = function() {
            var2 = _closure1_slot4;
            var1 = var2.getVoiceChannelId;
            var1 = var1.bind(var2)();
            return var1;
        };
        var7 = var9.bind(var10)(var8, var7);
        var6 = var5[var6];
        var9 = var4.bind(var3)(var6);
        var8 = var9.useStateFromStores;
        var10 = _closure1_slot3;
        var6 = new Array(1);
        var6[0] = var10;
        var2 = function() {
            var2 = _closure1_slot3;
            var1 = var2.getId;
            var1 = var1.bind(var2)();
            return var1;
        };
        var6 = var8.bind(var9)(var6, var2);
        var8 = _closure1_slot1;
        var1 = 3;
        var2 = var5[var1];
        var2 = var8.bind(var3)(var2);
        var2 = var2.bind(var3)(var6, var7);
        var1 = var5[var1];
        var1 = var4.bind(var3)(var1);
        var1 = var1.RequestToSpeakStates;
        var1 = var1.REQUESTED_TO_SPEAK_AND_AWAITING_USER_ACK;
        var1 = var2 === var1;
        return var1;
    };
    var3['default'] = var2;
    return var1;
})();