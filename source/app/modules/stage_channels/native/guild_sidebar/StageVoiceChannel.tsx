// app/modules/stage_channels/native/guild_sidebar/StageVoiceChannel.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    golfie = argCor;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    var _closure1_slot3 = oscard;
    entity = function(argFoo) { // Original name: getStageChannelAccessibilityProps
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            option = entity.channelName;
            oscard = entity.channel;
            golfie = entity.userCount;
            zuuluu = _closure1_slot0;
            michal = _closure1_slot3;
            offset = 11;
            tangon = michal[offset];
            verify = undefined;
            tangon = zuuluu.bind(verify)(tangon);
            report = tangon.intl;
            tangon = report.formatToPlainString;
            michal = michal[offset];
            michal = zuuluu.bind(verify)(michal);
            michal = michal.t;
            zuuluu = michal.TPPk2d;
            michal = {};
            michal['channelName'] = option;
            michal = tangon.bind(report)(zuuluu, michal);
            tangon = oscard.userLimit;
            zuuluu = null;
            if(!(zuuluu != tangon)) { _fun00002_ip = 112; continue _fun00001 }
 100:
            tangon = oscard.userLimit;
            zuuluu = 0;
            if(!(!(tangon > zuuluu))) { _fun00002_ip = 188; continue _fun00001 }
 112:
            zuuluu = 0;
            if(!(golfie > zuuluu)) { _fun00002_ip = 264; continue _fun00001 }
 121:
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot3;
            report = zuuluu[offset];
            report = tangon.bind(verify)(report);
            yankee = report.intl;
            report = yankee.formatToPlainString;
            zuuluu = zuuluu[offset];
            zuuluu = tangon.bind(verify)(zuuluu);
            zuuluu = zuuluu.t;
            tangon = zuuluu.7yr3QU;
            zuuluu = {};
            zuuluu['channelName'] = option;
            zuuluu['userCount'] = golfie;
            michal = report.bind(yankee)(tangon, zuuluu);
            _fun00002_ip = 264; continue _fun00001;
 188:
            zuuluu = _closure1_slot0;
            entity = _closure1_slot3;
            tangon = entity[offset];
            tangon = zuuluu.bind(verify)(tangon);
            report = tangon.intl;
            tangon = report.formatToPlainString;
            entity = entity[offset];
            entity = zuuluu.bind(verify)(entity);
            entity = entity.t;
            zuuluu = entity.rhh6Eh;
            entity = {};
            entity['channelName'] = option;
            entity['userCount'] = golfie;
            oscard = oscard.userLimit;
            entity['limit'] = oscard;
            michal = tangon.bind(report)(zuuluu, entity);
 264:
            entity = {'accessible': true, 'accessibilityRole': 'button'};
            entity['accessibilityLabel'] = michal;
            return entity;
        }
    };
    var _closure1_slot17 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    golfie = golfie.bind(entity)(tangon);
    var _closure1_slot4 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 6;
    option = oscard[tangon];
    option = romeon.bind(entity)(option);
    var _closure1_slot10 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.NO_VOICE_STATES;
    var _closure1_slot11 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot12 = tangon;
    yankee = 8;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    option = tangon.MAX_STAGE_VOICE_USER_LIMIT;
    var _closure1_slot13 = option;
    tangon = tangon.Permissions;
    var _closure1_slot14 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    foxtra = tangon.CHANNEL_MARGIN_VERTICAL;
    tangon = 10;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot15 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'marginLeft': 36, 'marginBottom': 8};
    tangon['voiceStates'] = offset;
    offset = {};
    offset['marginVertical'] = foxtra;
    offset['marginHorizontal'] = yankee;
    yankee = 13;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.md;
    offset['borderRadius'] = yankee;
    tangon['container'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot16 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            backup = michal.channel;
            var _closure2_slot0 = backup;
            sizing = michal.selected;
            michal = _closure1_slot16;
            tangon = undefined;
            offset = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            report = _closure1_slot3;
            michal = 14;
            michal = report[michal];
            option = zuuluu.bind(tangon)(michal);
            golfie = option.useStateFromStoresObject;
            michal = _closure1_slot12;
            oscard = new Array(6);
            oscard[0] = michal;
            michal = _closure1_slot8;
            oscard[1] = michal;
            michal = _closure1_slot9;
            oscard[2] = michal;
            michal = _closure1_slot10;
            oscard[3] = michal;
            michal = _closure1_slot7;
            oscard[4] = michal;
            michal = _closure1_slot6;
            oscard[5] = michal;
            zuuluu = new Array(1);
            zuuluu[0] = backup;
            michal = function() {
                entity = {};
                oscard = _closure1_slot12;
                report = oscard.getStageInstanceByChannel;
                michal = _closure2_slot0;
                tangon = michal.id;
                tangon = report.bind(oscard)(tangon);
                entity['stageInstance'] = tangon;
                oscard = _closure1_slot8;
                report = oscard.hasUnread;
                tangon = michal.id;
                tangon = report.bind(oscard)(tangon);
                entity['hasUnread'] = tangon;
                report = _closure1_slot9;
                tangon = report.resolveUnreadSetting;
                tangon = tangon.bind(report)(michal);
                entity['resolvedUnreadSetting'] = tangon;
                report = _closure1_slot10;
                tangon = report.getVoiceStatesForChannel;
                tangon = tangon.bind(report)(michal);
                entity['voiceStates'] = tangon;
                oscard = _closure1_slot0;
                report = _closure1_slot3;
                tangon = 15;
                report = report[tangon];
                tangon = undefined;
                oscard = oscard.bind(tangon)(report);
                report = oscard.getStageHasMedia;
                tangon = michal.id;
                tangon = report.bind(oscard)(tangon);
                entity['hasMedia'] = tangon;
                oscard = _closure1_slot7;
                report = oscard.can;
                tangon = _closure1_slot14;
                tangon = tangon.CONNECT;
                tangon = report.bind(oscard)(tangon, michal);
                tangon = !tangon;
                entity['locked'] = tangon;
                tangon = _closure1_slot6;
                zuuluu = tangon.isCollapsed;
                michal = michal.id;
                michal = zuuluu.bind(tangon)(michal);
                entity['collapsed'] = michal;
                return entity;
            };
            michal = golfie.bind(option)(oscard, michal, zuuluu);
            echoed = michal.stageInstance;
            output = michal.hasUnread;
            golfie = michal.resolvedUnreadSetting;
            option = michal.voiceStates;
            kiloes = michal.hasMedia;
            source = michal.locked;
            foxtra = michal.collapsed;
            zuuluu = _closure1_slot1;
            michal = 16;
            michal = report[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = backup.guild_id;
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = backup.id;
            romeon = zuuluu[michal];
            result = null;
            if(!(result == romeon)) { _fun00004_ip = 220; continue _fun00003 }
 216:
            romeon = _closure1_slot11;
 220:
            michal = _closure1_slot0;
            zuuluu = _closure1_slot3;
            report = 17;
            report = zuuluu[report];
            update = michal.bind(tangon)(report);
            yankee = update.useStageParticipantsCount;
            oscard = backup.id;
            report = 18;
            report = zuuluu[report];
            report = michal.bind(tangon)(report);
            report = report.StageChannelParticipantNamedIndex;
            report = report.AUDIENCE;
            yankee = yankee.bind(update)(oscard, report);
            report = romeon.length;
            config = yankee + report;
            update = _closure1_slot4;
            ctrled = update.useCallback;
            oscard = new Array(1);
            oscard[0] = backup;
            report = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    michal = _closure2_slot0;
                    entity = michal.getGuildId;
                    zuuluu = entity.bind(michal)();
                    entity = null;
                    if(!(entity != zuuluu)) { _fun00006_ip = 62; continue _fun00005 }
 23:
                    oscard = _closure1_slot0;
                    tangon = _closure1_slot3;
                    michal = 19;
                    michal = tangon[michal];
                    tangon = undefined;
                    oscard = oscard.bind(tangon)(michal);
                    michal = oscard.shouldShowMembershipVerificationGate;
                    michal = michal.bind(oscard)(zuuluu);
                    if(michal) { _fun00006_ip = 130; continue _fun00005 }
 62:
                    verify = _closure1_slot2;
                    option = _closure1_slot3;
                    michal = 21;
                    golfie = option[michal];
                    michal = undefined;
                    verify = verify.bind(michal)(golfie);
                    golfie = verify.dismissGlobalKeyboard;
                    golfie = golfie.bind(verify)();
                    golfie = _closure1_slot0;
                    oscard = 22;
                    oscard = option[oscard];
                    golfie = golfie.bind(michal)(oscard);
                    oscard = golfie.connectAndOpen;
                    report = _closure2_slot0;
                    report = oscard.bind(golfie)(report);
                    return michal;
 130:
                    michal = _closure1_slot0;
                    report = _closure1_slot3;
                    entity = 20;
                    entity = report[entity];
                    michal = michal.bind(tangon)(entity);
                    entity = michal.openMemberVerificationModal;
                    entity = entity.bind(michal)(zuuluu);
                    return entity;
                }
            };
            vacuum = ctrled.bind(update)(report, oscard);
            oscard = update.useCallback;
            ctrled = backup.id;
            report = new Array(1);
            report[0] = ctrled;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot3;
                entity = 23;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openChannelLongPressActionSheet;
                michal = _closure2_slot0;
                michal = michal.id;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            ctrled = oscard.bind(update)(entity, report);
            report = _closure1_slot1;
            entity = 24;
            entity = zuuluu[entity];
            report = report.bind(tangon)(entity);
            entity = false;
            record = report.bind(tangon)(backup, entity);
            entity = 25;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useIsConnectedToVoiceChannel;
            report = entity.bind(michal)(backup);
            entity = result == echoed;
            oscard = undefined;
            if(entity) { _fun00004_ip = 413; continue _fun00003 }
 407:
            oscard = echoed.topic;
 413:
            zuuluu = _closure1_slot15;
            michal = _closure1_slot1;
            update = _closure1_slot3;
            entity = 26;
            entity = update[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            sequen = _closure1_slot17;
            update = {};
            update['channel'] = backup;
            update['channelName'] = record;
            update['userCount'] = config;
            target = sequen.bind(tangon)(update);
            status = entity;
            update = copyDataProperties(status, target);
            update = 'onPress';
            entity[update] = vacuum;
            update = 'onLongPress';
            entity[update] = ctrled;
            ctrled = offset.container;
            update = 'style';
            entity[update] = ctrled;
            update = 'channel';
            entity[update] = backup;
            update = 'selected';
            entity[update] = sizing;
            update = 'locked';
            entity[update] = source;
            echoed = result != echoed;
            result = 'isChannelLive';
            entity[result] = echoed;
            if(!output) { _fun00004_ip = 549; continue _fun00003 }
 546:
            output = report;
 549:
            report = 'unread';
            entity[report] = output;
            report = 'resolvedUnreadSetting';
            entity[report] = golfie;
            report = 'subtitle';
            entity[report] = oscard;
            golfie = _closure1_slot15;
            oscard = _closure1_slot1;
            output = _closure1_slot3;
            report = 27;
            report = output[report];
            oscard = oscard.bind(tangon)(report);
            report = {};
            report['channel'] = backup;
            report['isChannelSelected'] = sizing;
            report['isChannelCollapsed'] = foxtra;
            if(kiloes) { _fun00004_ip = 651; continue _fun00003 }
 619:
            output = backup.userLimit;
            sizing = 0;
            sizing = output > sizing;
            if(!sizing) { _fun00004_ip = 648; continue _fun00003 }
 634:
            result = backup.userLimit;
            output = _closure1_slot13;
            sizing = result < output;
 648:
            kiloes = sizing;
 651:
            report['enableConnectedUserLimit'] = kiloes;
            report['voiceStates'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = 'channelInfo';
            entity[report] = oscard;
            oscard = romeon.length;
            report = 0;
            oscard = oscard > report;
            if(!oscard) { _fun00004_ip = 767; continue _fun00003 }
 690:
            option = _closure1_slot15;
            golfie = _closure1_slot5;
            report = {};
            offset = offset.voiceStates;
            report['style'] = offset;
            offset = _closure1_slot1;
            kiloes = _closure1_slot3;
            verify = 28;
            verify = kiloes[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            verify['channel'] = backup;
            verify['collapsed'] = foxtra;
            verify['voiceStates'] = romeon;
            verify['audienceCount'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            report['children'] = verify;
            oscard = option.bind(tangon)(golfie, report);
 767:
            report = 'children';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 29;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/guild_sidebar/StageVoiceChannel.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();