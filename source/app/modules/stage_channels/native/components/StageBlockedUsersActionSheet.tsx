// app/modules/stage_channels/native/components/StageBlockedUsersActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: StageBlockedUsersActionSheetHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            kiloes = entity.blockedUserCount;
            sizing = entity.ignoredUserCount;
            entity = _closure1_slot11;
            tangon = undefined;
            yankee = entity.bind(tangon)();
            zuuluu = _closure1_slot10;
            michal = _closure1_slot5;
            entity = 0;
            if(!(kiloes > entity)) { _fun00002_ip = 49; continue _fun00001 }
 42:
            if(!(!(sizing > entity))) { _fun00002_ip = 579; continue _fun00001 }
 49:
            if(!(!(sizing > entity))) { _fun00002_ip = 316; continue _fun00001 }
 56:
            entity = {};
            report = yankee.header;
            entity['style'] = report;
            verify = _closure1_slot9;
            romeon = _closure1_slot0;
            output = _closure1_slot2;
            oscard = 14;
            report = output[oscard];
            report = romeon.bind(tangon)(report);
            golfie = report.Text;
            report = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
            offset = yankee.title;
            report['style'] = offset;
            offset = 10;
            foxtra = output[offset];
            foxtra = romeon.bind(tangon)(foxtra);
            echoed = foxtra.intl;
            result = echoed.format;
            foxtra = output[offset];
            foxtra = romeon.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            backup = foxtra.HviVAw;
            foxtra = {};
            foxtra['number'] = kiloes;
            foxtra = result.bind(echoed)(backup, foxtra);
            report['children'] = foxtra;
            golfie = verify.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            verify = _closure1_slot9;
            oscard = output[oscard];
            oscard = romeon.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            foxtra = yankee.description;
            oscard['style'] = foxtra;
            foxtra = output[offset];
            foxtra = romeon.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.format;
            offset = output[offset];
            offset = romeon.bind(tangon)(offset);
            offset = offset.t;
            romeon = offset.28qZMT;
            offset = {};
            offset['number'] = kiloes;
            offset = foxtra.bind(backup)(romeon, offset);
            oscard['children'] = offset;
            oscard = verify.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            _fun00002_ip = 574; continue _fun00001;
 316:
            report = {};
            oscard = yankee.header;
            report['style'] = oscard;
            offset = _closure1_slot9;
            foxtra = _closure1_slot0;
            output = _closure1_slot2;
            golfie = 14;
            oscard = output[golfie];
            oscard = foxtra.bind(tangon)(oscard);
            verify = oscard.Text;
            oscard = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
            romeon = yankee.title;
            oscard['style'] = romeon;
            romeon = 10;
            backup = output[romeon];
            backup = foxtra.bind(tangon)(backup);
            echoed = backup.intl;
            result = echoed.format;
            backup = output[romeon];
            backup = foxtra.bind(tangon)(backup);
            backup = backup.t;
            kiloes = backup.wvygk5;
            backup = {};
            backup['number'] = sizing;
            backup = result.bind(echoed)(kiloes, backup);
            oscard['children'] = backup;
            verify = offset.bind(tangon)(verify, oscard);
            oscard = new Array(2);
            oscard[0] = verify;
            offset = _closure1_slot9;
            golfie = output[golfie];
            golfie = foxtra.bind(tangon)(golfie);
            verify = golfie.Text;
            golfie = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            backup = yankee.description;
            golfie['style'] = backup;
            backup = output[romeon];
            backup = foxtra.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.format;
            romeon = output[romeon];
            romeon = foxtra.bind(tangon)(romeon);
            romeon = romeon.t;
            foxtra = romeon.Ri3o39;
            romeon = {};
            romeon['number'] = sizing;
            romeon = backup.bind(kiloes)(foxtra, romeon);
            golfie['children'] = romeon;
            golfie = offset.bind(tangon)(verify, golfie);
            oscard[1] = golfie;
            report['children'] = oscard;
            entity = report;
 574:
            _fun00002_ip = 821; continue _fun00001;
 579:
            report = {};
            oscard = yankee.header;
            report['style'] = oscard;
            romeon = _closure1_slot9;
            foxtra = _closure1_slot0;
            backup = _closure1_slot2;
            golfie = 14;
            oscard = backup[golfie];
            oscard = foxtra.bind(tangon)(oscard);
            verify = oscard.Text;
            oscard = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
            offset = yankee.title;
            oscard['style'] = offset;
            offset = 10;
            kiloes = backup[offset];
            kiloes = foxtra.bind(tangon)(kiloes);
            output = kiloes.intl;
            sizing = output.string;
            kiloes = backup[offset];
            kiloes = foxtra.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.Uzdyho;
            kiloes = sizing.bind(output)(kiloes);
            oscard['children'] = kiloes;
            verify = romeon.bind(tangon)(verify, oscard);
            oscard = new Array(2);
            oscard[0] = verify;
            verify = _closure1_slot9;
            golfie = backup[golfie];
            golfie = foxtra.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            yankee = yankee.description;
            golfie['style'] = yankee;
            yankee = backup[offset];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = backup[offset];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.P/KFX1;
            offset = yankee.bind(romeon)(offset);
            golfie['children'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            oscard[1] = golfie;
            report['children'] = oscard;
            entity = report;
 821:
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.STAGE_BLOCKED_USERS_SHEET_KEY;
    var _closure1_slot8 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['paddingHorizontal'] = offset;
    tangon['container'] = verify;
    verify = {};
    verify['padding'] = offset;
    tangon['header'] = verify;
    offset = 8;
    verify = {'marginTop': 16, 'marginBottom': 8, 'textAlign': 'center'};
    tangon['title'] = verify;
    verify = {'textAlign': 'center', 'marginBottom': 16};
    tangon['description'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['button'] = verify;
    verify = {'width': '100%', 'backgroundColor': null, 'paddingHorizontal': 16, 'paddingVertical': 8};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MOBILE_PRIMARY;
    verify['backgroundColor'] = romeon;
    tangon['buttons'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'flex-start', 'marginVertical': 8, 'width': '100%'};
    tangon['userContainer'] = verify;
    verify = {'position': 'relative', 'padding': 8, 'paddingTop': 0, 'paddingBottom': 4, 'marginEnd': 12};
    tangon['avatarContainer'] = verify;
    verify = {};
    romeon = 0.5;
    verify['opacity'] = romeon;
    tangon['avatar'] = verify;
    verify = {'position': 'absolute', 'top': 4294967292, 'right': 4, 'height': 16, 'width': 16, 'alignItems': 'center', 'justifyContent': 'center', 'borderRadius': 8, 'borderWidth': 1};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MOBILE_PRIMARY;
    verify['borderColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_ACCENT;
    verify['backgroundColor'] = romeon;
    tangon['iconContainer'] = verify;
    verify = {'height': 12, 'width': 12};
    tangon['icon'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row'};
    tangon['flex'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.unsafe_rawColors;
    romeon = romeon.RED_400;
    verify['color'] = romeon;
    tangon['blocked'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_NORMAL;
    verify['color'] = offset;
    tangon['ignored'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = function(argFoo) { // Original name: RestrictedUser
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            sizing = entity.participant;
            golfie = entity.guildId;
            entity = entity.channelId;
            var _closure2_slot0 = entity;
            entity = _closure1_slot11;
            tangon = undefined;
            source = entity.bind(tangon)();
            report = sizing.user;
            var _closure2_slot1 = report;
            verify = sizing.speaker;
            oscard = _closure1_slot0;
            michal = _closure1_slot2;
            option = 9;
            entity = michal[option];
            romeon = oscard.bind(tangon)(entity);
            yankee = romeon.useStateFromStores;
            entity = _closure1_slot7;
            offset = new Array(1);
            offset[0] = entity;
            entity = function() {
                tangon = _closure1_slot7;
                zuuluu = tangon.isModerator;
                michal = _closure2_slot1;
                michal = michal.id;
                entity = _closure2_slot0;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            entity = yankee.bind(romeon)(offset, entity);
            option = michal[option];
            yankee = oscard.bind(tangon)(option);
            offset = yankee.useStateFromStores;
            romeon = _closure1_slot6;
            option = new Array(1);
            option[0] = romeon;
            zuuluu = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.isBlocked;
                entity = _closure2_slot1;
                entity = entity.id;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            echoed = offset.bind(yankee)(option, zuuluu);
            zuuluu = report.getAvatarSource;
            foxtra = zuuluu.bind(report)(golfie);
            sequen = 10;
            zuuluu = michal[sequen];
            zuuluu = oscard.bind(tangon)(zuuluu);
            report = zuuluu.intl;
            zuuluu = report.string;
            michal = michal[sequen];
            michal = oscard.bind(tangon)(michal);
            michal = michal.t;
            michal = michal.suRAp6;
            michal = zuuluu.bind(report)(michal);
            if(verify) { _fun00004_ip = 263; continue _fun00003 }
 201:
            result = michal;
            if(!entity) { _fun00004_ip = 317; continue _fun00003 }
 207:
            report = _closure1_slot0;
            entity = _closure1_slot2;
            michal = entity[sequen];
            michal = report.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = entity[sequen];
            entity = report.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.GMZqSk;
            result = michal.bind(zuuluu)(entity);
            _fun00004_ip = 317; continue _fun00003;
 263:
            report = _closure1_slot0;
            entity = _closure1_slot2;
            michal = entity[sequen];
            michal = report.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = entity[sequen];
            entity = report.bind(tangon)(entity);
            entity = entity.t;
            entity = entity.LqMmGx;
            result = michal.bind(zuuluu)(entity);
 317:
            zuuluu = _closure1_slot10;
            michal = _closure1_slot5;
            entity = {};
            report = source.userContainer;
            entity['style'] = report;
            golfie = _closure1_slot10;
            oscard = _closure1_slot5;
            report = {};
            option = source.avatarContainer;
            report['style'] = option;
            yankee = _closure1_slot9;
            offset = _closure1_slot1;
            kiloes = _closure1_slot2;
            romeon = 11;
            option = kiloes[romeon];
            offset = offset.bind(tangon)(option);
            option = {};
            option['source'] = foxtra;
            foxtra = _closure1_slot0;
            romeon = kiloes[romeon];
            romeon = foxtra.bind(tangon)(romeon);
            romeon = romeon.AvatarSizes;
            romeon = romeon.REFRESH_MEDIUM_32;
            option['size'] = romeon;
            romeon = source.avatar;
            option['style'] = romeon;
            offset = yankee.bind(tangon)(offset, option);
            option = new Array(2);
            option[0] = offset;
            if(!verify) { _fun00004_ip = 568; continue _fun00003 }
 446:
            romeon = _closure1_slot9;
            yankee = _closure1_slot5;
            offset = {};
            kiloes = source.iconContainer;
            foxtra = new Array(1);
            foxtra[0] = kiloes;
            offset['style'] = foxtra;
            output = _closure1_slot9;
            ctrled = _closure1_slot1;
            vacuum = _closure1_slot2;
            foxtra = 12;
            foxtra = vacuum[foxtra];
            kiloes = ctrled.bind(tangon)(foxtra);
            foxtra = {};
            update = source.icon;
            foxtra['style'] = update;
            update = 13;
            update = vacuum[update];
            update = ctrled.bind(tangon)(update);
            foxtra['source'] = update;
            update = 8;
            update = vacuum[update];
            update = ctrled.bind(tangon)(update);
            update = update.unsafe_rawColors;
            update = update.WHITE_500;
            foxtra['color'] = update;
            foxtra = output.bind(tangon)(kiloes, foxtra);
            offset['children'] = foxtra;
            verify = romeon.bind(tangon)(yankee, offset);
 568:
            option[1] = verify;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot10;
            golfie = _closure1_slot5;
            oscard = {};
            verify = {};
            offset = source.flex;
            verify['style'] = offset;
            romeon = _closure1_slot9;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            output = 14;
            offset = offset[output];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.Text;
            offset = {'variant': 'text-sm/medium', 'color': 'header-primary'};
            kiloes = sizing.user;
            foxtra = kiloes.toString;
            foxtra = foxtra.bind(kiloes)();
            offset['children'] = foxtra;
            yankee = romeon.bind(tangon)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            romeon = sizing.user;
            yankee = romeon.isPomelo;
            yankee = yankee.bind(romeon)();
            yankee = !yankee;
            if(!yankee) { _fun00004_ip = 782; continue _fun00003 }
 707:
            kiloes = _closure1_slot10;
            foxtra = _closure1_slot0;
            romeon = _closure1_slot2;
            romeon = romeon[output];
            romeon = foxtra.bind(tangon)(romeon);
            foxtra = romeon.Text;
            romeon = {'variant': 'text-sm/medium', 'color': 'header-secondary'};
            sizing = sizing.user;
            update = sizing.discriminator;
            sizing = ['#'];
            sizing[1] = update;
            romeon['children'] = sizing;
            yankee = kiloes.bind(tangon)(foxtra, romeon);
 782:
            offset[1] = yankee;
            verify['children'] = offset;
            offset = option.bind(tangon)(golfie, verify);
            verify = new Array(2);
            verify[0] = offset;
            romeon = _closure1_slot10;
            yankee = _closure1_slot5;
            offset = {};
            foxtra = source.flex;
            offset['style'] = foxtra;
            sizing = _closure1_slot9;
            kiloes = _closure1_slot0;
            update = _closure1_slot2;
            foxtra = 15;
            foxtra = update[foxtra];
            foxtra = kiloes.bind(tangon)(foxtra);
            kiloes = foxtra.LegacyText;
            foxtra = {};
            if(echoed) { _fun00004_ip = 866; continue _fun00003 }
 858:
            update = source.ignored;
            _fun00004_ip = 872; continue _fun00003;
 866:
            update = source.blocked;
 872:
            foxtra['style'] = update;
            vacuum = _closure1_slot0;
            update = _closure1_slot2;
            source = update[sequen];
            source = vacuum.bind(tangon)(source);
            ctrled = source.intl;
            source = ctrled.string;
            update = update[sequen];
            update = vacuum.bind(tangon)(update);
            update = update.t;
            if(echoed) { _fun00004_ip = 933; continue _fun00003 }
 920:
            echoed = update.tFY5ZW;
            echoed = source.bind(ctrled)(echoed);
            _fun00004_ip = 946; continue _fun00003;
 933:
            update = update.4bDptL;
            echoed = source.bind(ctrled)(update);
 946:
            foxtra['children'] = echoed;
            kiloes = sizing.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            sizing = _closure1_slot10;
            kiloes = _closure1_slot0;
            backup = _closure1_slot2;
            backup = backup[output];
            backup = kiloes.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {'variant': 'text-sm/medium', 'color': 'text-muted'};
            output = [' ', '| '];
            output[2] = result;
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot12 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/StageBlockedUsersActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: StageBlockedUsersActionSheet
        entity = argFoo;
        michal = entity.channel;
        var _closure2_slot0 = michal;
        entity = entity.onAccept;
        var _closure2_slot1 = entity;
        entity = _closure1_slot11;
        tangon = undefined;
        foxtra = entity.bind(tangon)();
        yankee = _closure1_slot4;
        entity = yankee.useState;
        zuuluu = 0;
        golfie = entity.bind(yankee)(zuuluu);
        report = _closure1_slot3;
        entity = 2;
        report = report.bind(tangon)(golfie, entity);
        offset = report[zuuluu];
        entity = 1;
        entity = report[entity];
        var _closure2_slot2 = entity;
        vacuum = function() { // Original name: handleDismiss
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 16;
            zuuluu = zuuluu[entity];
            entity = undefined;
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = tangon.hideActionSheet;
            michal = _closure1_slot8;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        var _closure2_slot3 = vacuum;
        kiloes = _closure1_slot0;
        sizing = _closure1_slot2;
        report = 17;
        entity = sizing[report];
        option = kiloes.bind(tangon)(entity);
        golfie = option.useStageBlockedUsers;
        entity = michal.id;
        entity = golfie.bind(option)(entity);
        report = sizing[report];
        golfie = kiloes.bind(tangon)(report);
        report = golfie.useStageIgnoredUsers;
        michal = michal.id;
        michal = report.bind(golfie)(michal);
        update = entity.length;
        echoed = michal.length;
        option = yankee.useCallback;
        golfie = function(argFoo) {
            zuuluu = _closure2_slot2;
            entity = argFoo;
            entity = entity.nativeEvent;
            entity = entity.layout;
            michal = entity.height;
            entity = undefined;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        report = new Array(0);
        golfie = option.bind(yankee)(golfie, report);
        yankee = _closure1_slot10;
        report = 18;
        report = sizing[report];
        report = kiloes.bind(tangon)(report);
        option = report.SafeAreaPaddingView;
        report = {};
        backup = true;
        report['bottom'] = backup;
        romeon = foxtra.buttons;
        report['style'] = romeon;
        report['onLayout'] = golfie;
        source = _closure1_slot9;
        golfie = _closure1_slot1;
        sequen = 19;
        romeon = sizing[sequen];
        result = golfie.bind(tangon)(romeon);
        output = {};
        romeon = sizing[sequen];
        romeon = golfie.bind(tangon)(romeon);
        romeon = romeon.Colors;
        romeon = romeon.BRAND;
        output['color'] = romeon;
        romeon = 10;
        ctrled = sizing[romeon];
        ctrled = kiloes.bind(tangon)(ctrled);
        record = ctrled.intl;
        config = record.string;
        ctrled = sizing[romeon];
        ctrled = kiloes.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        ctrled = ctrled.mbD50N;
        ctrled = config.bind(record)(ctrled);
        output['text'] = ctrled;
        ctrled = function() { // Original name: onPress
            tangon = _closure2_slot1;
            zuuluu = _closure2_slot0;
            entity = undefined;
            zuuluu = tangon.bind(entity)(zuuluu);
            michal = _closure2_slot3;
            michal = michal.bind(entity)();
            return entity;
        };
        output['onPress'] = ctrled;
        result = source.bind(tangon)(result, output);
        output = new Array(2);
        output[0] = result;
        ctrled = _closure1_slot9;
        result = sizing[sequen];
        source = golfie.bind(tangon)(result);
        result = {};
        sequen = sizing[sequen];
        sequen = golfie.bind(tangon)(sequen);
        sequen = sequen.Colors;
        sequen = sequen.TRANSPARENT;
        result['color'] = sequen;
        sequen = sizing[romeon];
        sequen = kiloes.bind(tangon)(sequen);
        record = sequen.intl;
        config = record.string;
        sequen = sizing[romeon];
        sequen = kiloes.bind(tangon)(sequen);
        sequen = sequen.t;
        sequen = sequen.CZGqeX;
        sequen = config.bind(record)(sequen);
        result['text'] = sequen;
        result['onPress'] = vacuum;
        result = ctrled.bind(tangon)(source, result);
        output[1] = result;
        report['children'] = output;
        report = yankee.bind(tangon)(option, report);
        yankee = new Array(0);
        target = yankee;
        papara = entity;
        cntext = 0;
        cntext = arraySpread(target, papara, cntext);
        target = yankee;
        papara = michal;
        entity = arraySpread(target, papara, cntext);
        var _closure2_slot4 = yankee;
        zuuluu = _closure1_slot10;
        entity = 20;
        entity = sizing[entity];
        entity = kiloes.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        entity['scrollable'] = backup;
        result = _closure1_slot9;
        output = _closure1_slot13;
        option = {};
        option['blockedUserCount'] = update;
        option['ignoredUserCount'] = echoed;
        option = result.bind(tangon)(output, option);
        entity['header'] = option;
        entity['footer'] = report;
        option = _closure1_slot9;
        report = 21;
        report = sizing[report];
        golfie = golfie.bind(tangon)(report);
        report = {};
        report['inActionSheet'] = backup;
        foxtra = foxtra.container;
        report['contentContainerStyle'] = foxtra;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.3VoRLC;
        romeon = foxtra.bind(backup)(romeon);
        report['accessibilityLabel'] = romeon;
        romeon = yankee.length;
        yankee = new Array(1);
        yankee[0] = romeon;
        report['sections'] = yankee;
        yankee = function(argFoo, argBar) { // Original name: renderItem
            tangon = _closure1_slot9;
            zuuluu = _closure1_slot12;
            michal = {};
            oscard = _closure2_slot4;
            report = argBar;
            report = oscard[report];
            michal['participant'] = report;
            entity = _closure2_slot0;
            report = entity.getGuildId;
            report = report.bind(entity)();
            michal['guildId'] = report;
            entity = entity.id;
            michal['channelId'] = entity;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        report['renderItem'] = yankee;
        verify = function() { // Original name: itemSize
            entity = 48;
            return entity;
        };
        report['itemSize'] = verify;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        option = _closure1_slot9;
        golfie = _closure1_slot5;
        oscard = {};
        verify = {};
        verify['height'] = offset;
        oscard['style'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();