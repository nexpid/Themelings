// app/modules/stage_channels/native/components/ActiveSpeakerTooltip.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.useActiveSpeakerPillScrollHandler;
    var _closure1_slot6 = option;
    tangon = tangon.useActiveSpeakerPillState;
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    foxtra = tangon.Fonts;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot8 = option;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'width': '100%', 'flexDirection': 'column', 'alignItems': 'center', 'justifyContent': 'center'};
    tangon['container'] = offset;
    offset = {'padding': 10, 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'center'};
    yankee = 8;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    offset['backgroundColor'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.round;
    offset['borderRadius'] = backup;
    tangon['participantItemContainer'] = offset;
    offset = {'alignItems': 'center', 'justifyContent': 'center'};
    tangon['participantAvatarContainer'] = offset;
    offset = {};
    backup = 12;
    offset['fontSize'] = backup;
    foxtra = foxtra.PRIMARY_SEMIBOLD;
    offset['fontFamily'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.HEADER_PRIMARY;
    offset['color'] = foxtra;
    foxtra = 18;
    offset['lineHeight'] = foxtra;
    tangon['participantAvatarText'] = offset;
    offset = {'paddingHorizontal': 3, 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'center'};
    tangon['participantNameplateContainer'] = offset;
    offset = {};
    offset['lineHeight'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.HEADER_SECONDARY;
    offset['color'] = yankee;
    tangon['participantNameplateSpeakingText'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot10 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            kiloes = michal.channel;
            var _closure2_slot0 = kiloes;
            michal = _closure1_slot10;
            report = undefined;
            foxtra = michal.bind(report)();
            option = _closure1_slot0;
            verify = _closure1_slot2;
            michal = 9;
            michal = verify[michal];
            golfie = option.bind(report)(michal);
            oscard = golfie.useStateFromStores;
            michal = _closure1_slot5;
            tangon = new Array(1);
            tangon[0] = michal;
            michal = kiloes.id;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = 10;
            michal = verify[michal];
            michal = option.bind(report)(michal);
            echoed = michal.isVersionEqual;
            source = function() {
                tangon = _closure1_slot5;
                zuuluu = tangon.getSpeakingParticipants;
                michal = _closure2_slot0;
                entity = michal.id;
                report = zuuluu.bind(tangon)(entity);
                zuuluu = report.map;
                entity = function(argFoo) {
                    entity = argFoo;
                    entity = entity.user;
                    return entity;
                };
                zuuluu = zuuluu.bind(report)(entity);
                entity = new Array(2);
                entity[0] = zuuluu;
                zuuluu = tangon.getParticipantsVersion;
                michal = michal.id;
                michal = zuuluu.bind(tangon)(michal);
                entity[1] = michal;
                return entity;
            };
            vacuum = golfie;
            ctrled = tangon;
            update = zuuluu;
            entity = vacuum[oscard](ctrled, source, update, echoed, result);
            oscard = _closure1_slot3;
            zuuluu = 1;
            entity = oscard.bind(report)(entity, zuuluu);
            golfie = 0;
            output = entity[golfie];
            entity = _closure1_slot7;
            entity = entity.bind(report)();
            entity = oscard.bind(report)(entity, zuuluu);
            michal = entity[golfie];
            entity = _closure1_slot6;
            tangon = entity.bind(report)();
            entity = 2;
            entity = oscard.bind(report)(tangon, entity);
            oscard = entity[zuuluu];
            tangon = output.length;
            entity = null;
            if(!(golfie !== tangon)) { _fun00002_ip = 524; continue _fun00001 }
 187:
            entity = null;
            if(!michal) { _fun00002_ip = 524; continue _fun00001 }
 195:
            tangon = _closure1_slot8;
            backup = _closure1_slot0;
            result = _closure1_slot2;
            michal = 11;
            michal = result[michal];
            michal = backup.bind(report)(michal);
            zuuluu = michal.PressableOpacity;
            michal = {};
            golfie = 'button';
            michal['accessibilityRole'] = golfie;
            golfie = foxtra.container;
            michal['style'] = golfie;
            michal['onPress'] = oscard;
            option = _closure1_slot9;
            golfie = _closure1_slot4;
            oscard = {};
            verify = foxtra.participantItemContainer;
            oscard['style'] = verify;
            verify = {};
            yankee = foxtra.participantAvatarContainer;
            verify['style'] = yankee;
            yankee = _closure1_slot1;
            offset = 12;
            offset = result[offset];
            yankee = yankee.bind(report)(offset);
            offset = {};
            romeon = foxtra.participantAvatarText;
            offset['namesStyle'] = romeon;
            offset['users'] = output;
            romeon = true;
            offset['withNames'] = romeon;
            romeon = kiloes.id;
            offset['channelId'] = romeon;
            romeon = kiloes.getGuildId;
            romeon = romeon.bind(kiloes)();
            offset['guildId'] = romeon;
            offset = tangon.bind(report)(yankee, offset);
            verify['children'] = offset;
            offset = tangon.bind(report)(golfie, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            yankee = foxtra.participantNameplateContainer;
            offset['style'] = yankee;
            yankee = 13;
            yankee = result[yankee];
            yankee = backup.bind(report)(yankee);
            romeon = yankee.Text;
            yankee = {'style': null, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
            foxtra = foxtra.participantNameplateSpeakingText;
            yankee['style'] = foxtra;
            foxtra = 14;
            kiloes = result[foxtra];
            kiloes = backup.bind(report)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.format;
            foxtra = result[foxtra];
            foxtra = backup.bind(report)(foxtra);
            foxtra = foxtra.t;
            backup = foxtra.+dia6u;
            foxtra = {};
            output = output.length;
            foxtra['count'] = output;
            foxtra = kiloes.bind(sizing)(backup, foxtra);
            yankee['children'] = foxtra;
            yankee = tangon.bind(report)(romeon, yankee);
            offset['children'] = yankee;
            offset = tangon.bind(report)(golfie, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 524:
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/ActiveSpeakerTooltip.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();