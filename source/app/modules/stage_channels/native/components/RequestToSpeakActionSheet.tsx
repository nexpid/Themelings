// app/modules/stage_channels/native/components/RequestToSpeakActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: RequestToSpeakHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.channel;
            michal = _closure1_slot12;
            tangon = undefined;
            output = michal.bind(tangon)();
            foxtra = _closure1_slot0;
            kiloes = _closure1_slot2;
            michal = 9;
            michal = kiloes[michal];
            zuuluu = foxtra.bind(tangon)(michal);
            michal = zuuluu.useRequestToSpeakPermission;
            entity = entity.id;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            romeon = michal[entity];
            entity = 1;
            entity = michal[entity];
            var _closure2_slot0 = entity;
            zuuluu = _closure1_slot10;
            michal = _closure1_slot5;
            entity = {};
            report = output.header;
            entity['style'] = report;
            golfie = _closure1_slot10;
            oscard = _closure1_slot5;
            report = {};
            sizing = _closure1_slot9;
            offset = 10;
            option = kiloes[offset];
            option = foxtra.bind(tangon)(option);
            backup = option.Text;
            option = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-md/semibold', 'color': 'header-primary'};
            output = output.headerTitle;
            option['style'] = output;
            echoed = 11;
            output = kiloes[echoed];
            output = foxtra.bind(tangon)(output);
            update = output.intl;
            result = update.string;
            output = kiloes[echoed];
            output = foxtra.bind(tangon)(output);
            output = output.t;
            output = output.TYZgzc;
            output = result.bind(update)(output);
            option['children'] = output;
            backup = sizing.bind(tangon)(backup, option);
            option = new Array(2);
            option[0] = backup;
            backup = _closure1_slot9;
            offset = kiloes[offset];
            offset = foxtra.bind(tangon)(offset);
            foxtra = offset.Text;
            offset = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            sizing = _closure1_slot0;
            kiloes = _closure1_slot2;
            output = kiloes[echoed];
            output = sizing.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            kiloes = kiloes[echoed];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.t;
            if(romeon) { _fun00002_ip = 323; continue _fun00001 }
 308:
            kiloes = sizing.laPwJS;
            kiloes = output.bind(result)(kiloes);
            _fun00002_ip = 336; continue _fun00001;
 323:
            sizing = sizing.JcFI/f;
            kiloes = output.bind(result)(sizing);
 336:
            offset['children'] = kiloes;
            offset = backup.bind(tangon)(foxtra, offset);
            option[1] = offset;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot9;
            golfie = _closure1_slot5;
            oscard = {};
            offset = _closure1_slot0;
            foxtra = _closure1_slot2;
            verify = 12;
            verify = foxtra[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.FormSwitch;
            verify = {};
            verify['value'] = romeon;
            yankee = function(argFoo) { // Original name: onValueChange
                zuuluu = _closure2_slot0;
                michal = undefined;
                entity = argFoo;
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            verify['onValueChange'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: ManageSelfSpeakerButton
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            option = entity.channel;
            var _closure2_slot0 = option;
            kiloes = entity.numRequestsToSpeak;
            tangon = undefined;
            var _closure2_slot1 = tangon;
            entity = _closure1_slot12;
            yankee = entity.bind(tangon)();
            zuuluu = _closure1_slot0;
            entity = _closure1_slot2;
            michal = 13;
            michal = entity[michal];
            verify = zuuluu.bind(tangon)(michal);
            report = verify.useStateFromStores;
            michal = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot6;
                entity = michal.getId;
                entity = entity.bind(michal)();
                return entity;
            };
            zuuluu = report.bind(verify)(zuuluu, michal);
            michal = _closure1_slot1;
            report = 14;
            entity = entity[report];
            michal = michal.bind(tangon)(entity);
            entity = null;
            verify = entity == option;
            entity = undefined;
            if(verify) { _fun00004_ip = 119; continue _fun00003 }
 114:
            entity = option.id;
 119:
            michal = michal.bind(tangon)(zuuluu, entity);
            zuuluu = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[report];
            entity = zuuluu.bind(tangon)(entity);
            entity = entity.RequestToSpeakStates;
            entity = entity.ON_STAGE;
            entity = michal === entity;
            _closure2_slot1 = entity;
            option = _closure1_slot0;
            michal = _closure1_slot2;
            foxtra = 11;
            zuuluu = michal[foxtra];
            zuuluu = option.bind(tangon)(zuuluu);
            report = zuuluu.intl;
            zuuluu = report.string;
            michal = michal[foxtra];
            michal = option.bind(tangon)(michal);
            michal = michal.t;
            if(entity) { _fun00004_ip = 222; continue _fun00003 }
 209:
            option = michal.8Joh+v;
            source = zuuluu.bind(report)(option);
            _fun00004_ip = 233; continue _fun00003;
 222:
            michal = michal.ezLpY2;
            source = zuuluu.bind(report)(michal);
 233:
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            if(entity) { _fun00004_ip = 264; continue _fun00003 }
 244:
            entity = 16;
            entity = zuuluu[entity];
            entity = michal.bind(tangon)(entity);
            ctrled = entity.MicrophoneArrowRightIcon;
            _fun00004_ip = 282; continue _fun00003;
 264:
            entity = 15;
            entity = zuuluu[entity];
            entity = michal.bind(tangon)(entity);
            ctrled = entity.GroupArrowDownIcon;
 282:
            zuuluu = _closure1_slot10;
            michal = _closure1_slot11;
            entity = {};
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            report = 17;
            report = verify[report];
            report = offset.bind(tangon)(report);
            option = report.PressableOpacity;
            report = {};
            romeon = 'button';
            report['accessibilityRole'] = romeon;
            report['accessibilityLabel'] = source;
            oscard = function() { // Original name: onPress
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                entity = 18;
                zuuluu = report[entity];
                entity = undefined;
                golfie = tangon.bind(entity)(zuuluu);
                oscard = golfie.audienceAckRequestToSpeak;
                tangon = _closure2_slot0;
                zuuluu = _closure2_slot1;
                zuuluu = oscard.bind(golfie)(tangon, zuuluu);
                tangon = _closure1_slot1;
                zuuluu = 19;
                zuuluu = report[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = tangon.hideActionSheet;
                michal = _closure1_slot8;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            report['onPress'] = oscard;
            oscard = yankee.selfSpeakerButton;
            report['style'] = oscard;
            sizing = _closure1_slot10;
            backup = _closure1_slot5;
            romeon = {};
            oscard = yankee.selfSpeakerCTA;
            romeon['style'] = oscard;
            result = _closure1_slot9;
            output = _closure1_slot5;
            oscard = {};
            echoed = yankee.selfSpeakerIcon;
            oscard['style'] = echoed;
            update = _closure1_slot9;
            echoed = {};
            echoed = update.bind(tangon)(ctrled, echoed);
            oscard['children'] = echoed;
            oscard = result.bind(tangon)(output, oscard);
            output = new Array(2);
            output[0] = oscard;
            update = _closure1_slot9;
            oscard = 10;
            result = verify[oscard];
            result = offset.bind(tangon)(result);
            echoed = result.Text;
            result = {'variant': 'text-md/semibold', 'color': 'header-primary'};
            result['children'] = source;
            result = update.bind(tangon)(echoed, result);
            output[1] = result;
            romeon['children'] = output;
            backup = sizing.bind(tangon)(backup, romeon);
            romeon = new Array(2);
            romeon[0] = backup;
            output = _closure1_slot9;
            echoed = _closure1_slot1;
            backup = 20;
            backup = verify[backup];
            sizing = echoed.bind(tangon)(backup);
            backup = {};
            result = 21;
            result = verify[result];
            result = echoed.bind(tangon)(result);
            backup['source'] = result;
            backup = output.bind(tangon)(sizing, backup);
            romeon[1] = backup;
            report['children'] = romeon;
            option = zuuluu.bind(tangon)(option, report);
            report = new Array(2);
            report[0] = option;
            option = _closure1_slot9;
            oscard = verify[oscard];
            oscard = offset.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'style': null, 'accessibilityRole': 'header', 'variant': 'eyebrow', 'color': 'header-secondary'};
            yankee = yankee.participantTitle;
            oscard['style'] = yankee;
            yankee = verify[foxtra];
            yankee = offset.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.format;
            verify = verify[foxtra];
            verify = offset.bind(tangon)(verify);
            verify = verify.t;
            offset = verify.5z7q5e;
            verify = {};
            foxtra = global;
            foxtra = foxtra.HermesInternal;
            backup = foxtra.concat;
            foxtra = '';
            foxtra = backup.bind(foxtra)(kiloes);
            verify['numHands'] = foxtra;
            verify = yankee.bind(romeon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    yankee = 0;
    tangon = oscard[yankee];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    offset = 1;
    golfie = oscard[offset];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.REQUEST_TO_SPEAK_SHEET_KEY;
    var _closure1_slot8 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot11 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['padding'] = yankee;
    yankee = 8;
    romeon = oscard[yankee];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    tangon['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between', 'padding': 12};
    romeon = oscard[yankee];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeon;
    tangon['header'] = verify;
    verify = {};
    verify['flex'] = offset;
    tangon['headerTextContainer'] = verify;
    verify = {'marginTop': 0, 'marginBottom': 0};
    tangon['headerTitle'] = verify;
    verify = {'padding': 12, 'width': '100%'};
    offset = oscard[yankee];
    offset = foxtra.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    offset = oscard[yankee];
    offset = foxtra.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = offset;
    tangon['textInput'] = verify;
    verify = {};
    offset = 16;
    verify['marginTop'] = offset;
    tangon['startButton'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'padding': 16, 'alignItems': 'center', 'justifyContent': 'space-between'};
    tangon['selfSpeakerButton'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['selfSpeakerCTA'] = verify;
    verify = {};
    romeon = oscard[yankee];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.round;
    verify['borderRadius'] = romeon;
    romeon = oscard[yankee];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeon;
    verify['padding'] = yankee;
    verify['marginEnd'] = offset;
    tangon['selfSpeakerIcon'] = verify;
    verify = {'paddingHorizontal': 16, 'marginTop': 8};
    tangon['participantTitle'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 29;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/RequestToSpeakActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: RequestToSpeakActionSheet
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            verify = entity.channelId;
            var _closure2_slot0 = verify;
            vacuum = entity.analyticsLocations;
            entity = _closure1_slot12;
            report = undefined;
            backup = entity.bind(report)();
            option = _closure1_slot1;
            yankee = _closure1_slot2;
            michal = 22;
            entity = yankee[michal];
            oscard = option.bind(report)(entity);
            entity = new Array(1);
            tangon = 0;
            sequen = entity;
            ctrled = 0;
            golfie = arraySpread(sequen, vacuum, ctrled);
            zuuluu = 23;
            zuuluu = yankee[zuuluu];
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.REQUEST_TO_SPEAK;
            entity[golfie] = zuuluu;
            zuuluu = 1;
            golfie = golfie + zuuluu;
            entity = oscard.bind(report)(entity);
            oscard = entity.analyticsLocations;
            offset = _closure1_slot0;
            entity = 13;
            entity = yankee[entity];
            kiloes = offset.bind(report)(entity);
            option = kiloes.useStateFromStores;
            entity = _closure1_slot7;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot7;
                michal = zuuluu.getChannel;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            output = option.bind(kiloes)(golfie, entity);
            entity = 24;
            entity = yankee[entity];
            option = offset.bind(report)(entity);
            golfie = option.useStageParticipantsCount;
            entity = 25;
            entity = yankee[entity];
            entity = offset.bind(report)(entity);
            entity = entity.StageChannelParticipantNamedIndex;
            entity = entity.ALL_REQUESTED_TO_SPEAK;
            update = golfie.bind(option)(verify, entity);
            golfie = _closure1_slot4;
            entity = golfie.useState;
            option = entity.bind(golfie)(tangon);
            golfie = _closure1_slot3;
            entity = 2;
            entity = golfie.bind(report)(option, entity);
            sizing = entity[tangon];
            var _closure2_slot1 = sizing;
            entity = entity[zuuluu];
            var _closure2_slot2 = entity;
            entity = null;
            zuuluu = entity == output;
            if(zuuluu) { _fun00006_ip = 506; continue _fun00005 }
 258:
            tangon = _closure1_slot9;
            offset = _closure1_slot0;
            result = _closure1_slot2;
            michal = result[michal];
            michal = offset.bind(report)(michal);
            zuuluu = michal.AnalyticsLocationProvider;
            michal = {};
            michal['value'] = oscard;
            option = _closure1_slot9;
            oscard = 26;
            oscard = result[oscard];
            oscard = offset.bind(report)(oscard);
            golfie = oscard.BottomSheet;
            oscard = {};
            verify = true;
            oscard['scrollable'] = verify;
            verify = 5;
            verify = update >= verify;
            oscard['startExpanded'] = verify;
            yankee = _closure1_slot10;
            verify = 27;
            verify = result[verify];
            verify = offset.bind(report)(verify);
            offset = verify.BottomSheetScrollView;
            verify = {};
            backup = backup.container;
            verify['style'] = backup;
            romeon = function(argFoo) { // Original name: onLayout
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = argFoo;
                    entity = entity.nativeEvent;
                    entity = entity.layout;
                    michal = entity.height;
                    entity = null;
                    entity = entity != michal;
                    if(!entity) { _fun00008_ip = 39; continue _fun00007 }
 28:
                    zuuluu = _closure2_slot1;
                    entity = zuuluu !== michal;
 39:
                    if(!entity) { _fun00008_ip = 63; continue _fun00007 }
 42:
                    zuuluu = _closure2_slot2;
                    entity = 200;
                    michal = michal - entity;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
 63:
                    entity = undefined;
                    return entity;
                }
            };
            verify['onLayout'] = romeon;
            kiloes = _closure1_slot9;
            backup = _closure1_slot13;
            romeon = {};
            romeon['channel'] = output;
            backup = kiloes.bind(report)(backup, romeon);
            romeon = new Array(3);
            romeon[0] = backup;
            echoed = _closure1_slot9;
            kiloes = _closure1_slot14;
            backup = {};
            backup['channel'] = output;
            backup['numRequestsToSpeak'] = update;
            backup = echoed.bind(report)(kiloes, backup);
            romeon[1] = backup;
            kiloes = _closure1_slot9;
            backup = _closure1_slot1;
            foxtra = 28;
            foxtra = result[foxtra];
            backup = backup.bind(report)(foxtra);
            foxtra = {};
            foxtra['channel'] = output;
            foxtra['height'] = sizing;
            foxtra = kiloes.bind(report)(backup, foxtra);
            romeon[2] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(report)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 506:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();