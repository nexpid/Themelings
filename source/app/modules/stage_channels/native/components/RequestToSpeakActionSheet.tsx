// app/modules/stage_channels/native/components/RequestToSpeakActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: RequestToSpeakHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.channel;
            mike = _closure1_slot12;
            tango = undefined;
            output = mike.bind(tango)();
            foxtrot = _closure1_slot0;
            kilo = _closure1_slot2;
            mike = 9;
            mike = kilo[mike];
            zulu = foxtrot.bind(tango)(mike);
            mike = zulu.useRequestToSpeakPermission;
            entity = entity.id;
            zulu = mike.bind(zulu)(entity);
            mike = _closure1_slot3;
            entity = 2;
            mike = mike.bind(tango)(zulu, entity);
            entity = 0;
            romeo = mike[entity];
            entity = 1;
            entity = mike[entity];
            var _closure2_slot0 = entity;
            zulu = _closure1_slot10;
            mike = _closure1_slot5;
            entity = {};
            report = output.header;
            entity['style'] = report;
            golf = _closure1_slot10;
            oscar = _closure1_slot5;
            report = {};
            sizing = _closure1_slot9;
            offset = 10;
            options = kilo[offset];
            options = foxtrot.bind(tango)(options);
            backup = options.Text;
            options = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-md/semibold', 'color': 'header-primary'};
            output = output.headerTitle;
            options['style'] = output;
            echo = 11;
            output = kilo[echo];
            output = foxtrot.bind(tango)(output);
            update = output.intl;
            result = update.string;
            output = kilo[echo];
            output = foxtrot.bind(tango)(output);
            output = output.t;
            output = output.TYZgzc;
            output = result.bind(update)(output);
            options['children'] = output;
            backup = sizing.bind(tango)(backup, options);
            options = new Array(2);
            options[0] = backup;
            backup = _closure1_slot9;
            offset = kilo[offset];
            offset = foxtrot.bind(tango)(offset);
            foxtrot = offset.Text;
            offset = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            sizing = _closure1_slot0;
            kilo = _closure1_slot2;
            output = kilo[echo];
            output = sizing.bind(tango)(output);
            result = output.intl;
            output = result.string;
            kilo = kilo[echo];
            kilo = sizing.bind(tango)(kilo);
            sizing = kilo.t;
            if(romeo) { _fun00002_ip = 319; continue _fun00001 }
 304:
            kilo = sizing.laPwJS;
            kilo = output.bind(result)(kilo);
            _fun00002_ip = 332; continue _fun00001;
 319:
            sizing = sizing.JcFI/f;
            kilo = output.bind(result)(sizing);
 332:
            offset['children'] = kilo;
            offset = backup.bind(tango)(foxtrot, offset);
            options[1] = offset;
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot5;
            oscar = {};
            offset = _closure1_slot0;
            foxtrot = _closure1_slot2;
            verify = 12;
            verify = foxtrot[verify];
            verify = offset.bind(tango)(verify);
            offset = verify.FormSwitch;
            verify = {};
            verify['value'] = romeo;
            yankee = function(argFoo) { // Original name: onValueChange
                zulu = _closure2_slot0;
                mike = undefined;
                entity = argFoo;
                entity = zulu.bind(mike)(entity);
                return entity;
            };
            verify['onValueChange'] = yankee;
            verify = options.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: ManageSelfSpeakerButton
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            options = entity.channel;
            var _closure2_slot0 = options;
            kilo = entity.numRequestsToSpeak;
            tango = undefined;
            var _closure2_slot1 = tango;
            entity = _closure1_slot12;
            yankee = entity.bind(tango)();
            zulu = _closure1_slot0;
            entity = _closure1_slot2;
            mike = 13;
            mike = entity[mike];
            verify = zulu.bind(tango)(mike);
            report = verify.useStateFromStores;
            mike = _closure1_slot6;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                mike = _closure1_slot6;
                entity = mike.getId;
                entity = entity.bind(mike)();
                return entity;
            };
            zulu = report.bind(verify)(zulu, mike);
            mike = _closure1_slot1;
            report = 14;
            entity = entity[report];
            mike = mike.bind(tango)(entity);
            entity = null;
            verify = entity == options;
            entity = undefined;
            if(verify) { _fun00004_ip = 119; continue _fun00003 }
 114:
            entity = options.id;
 119:
            mike = mike.bind(tango)(zulu, entity);
            zulu = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[report];
            entity = zulu.bind(tango)(entity);
            entity = entity.RequestToSpeakStates;
            entity = entity.ON_STAGE;
            entity = mike === entity;
            _closure2_slot1 = entity;
            options = _closure1_slot0;
            mike = _closure1_slot2;
            foxtrot = 11;
            zulu = mike[foxtrot];
            zulu = options.bind(tango)(zulu);
            report = zulu.intl;
            zulu = report.string;
            mike = mike[foxtrot];
            mike = options.bind(tango)(mike);
            mike = mike.t;
            if(entity) { _fun00004_ip = 222; continue _fun00003 }
 209:
            options = mike.8Joh+v;
            source = zulu.bind(report)(options);
            _fun00004_ip = 233; continue _fun00003;
 222:
            mike = mike.ezLpY2;
            source = zulu.bind(report)(mike);
 233:
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            if(entity) { _fun00004_ip = 264; continue _fun00003 }
 244:
            entity = 16;
            entity = zulu[entity];
            entity = mike.bind(tango)(entity);
            control = entity.MicrophoneArrowRightIcon;
            _fun00004_ip = 282; continue _fun00003;
 264:
            entity = 15;
            entity = zulu[entity];
            entity = mike.bind(tango)(entity);
            control = entity.GroupArrowDownIcon;
 282:
            zulu = _closure1_slot10;
            mike = _closure1_slot11;
            entity = {};
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            report = 17;
            report = verify[report];
            report = offset.bind(tango)(report);
            options = report.PressableOpacity;
            report = {};
            romeo = 'button';
            report['accessibilityRole'] = romeo;
            report['accessibilityLabel'] = source;
            oscar = function() { // Original name: onPress
                tango = _closure1_slot0;
                report = _closure1_slot2;
                entity = 18;
                zulu = report[entity];
                entity = undefined;
                golf = tango.bind(entity)(zulu);
                oscar = golf.audienceAckRequestToSpeak;
                tango = _closure2_slot0;
                zulu = _closure2_slot1;
                zulu = oscar.bind(golf)(tango, zulu);
                tango = _closure1_slot1;
                zulu = 19;
                zulu = report[zulu];
                tango = tango.bind(entity)(zulu);
                zulu = tango.hideActionSheet;
                mike = _closure1_slot8;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            report['onPress'] = oscar;
            oscar = yankee.selfSpeakerButton;
            report['style'] = oscar;
            sizing = _closure1_slot10;
            backup = _closure1_slot5;
            romeo = {};
            oscar = yankee.selfSpeakerCTA;
            romeo['style'] = oscar;
            result = _closure1_slot9;
            output = _closure1_slot5;
            oscar = {};
            echo = yankee.selfSpeakerIcon;
            oscar['style'] = echo;
            update = _closure1_slot9;
            echo = {};
            echo = update.bind(tango)(control, echo);
            oscar['children'] = echo;
            oscar = result.bind(tango)(output, oscar);
            output = new Array(2);
            output[0] = oscar;
            update = _closure1_slot9;
            oscar = 10;
            result = verify[oscar];
            result = offset.bind(tango)(result);
            echo = result.Text;
            result = {'variant': 'text-md/semibold', 'color': 'header-primary'};
            result['children'] = source;
            result = update.bind(tango)(echo, result);
            output[1] = result;
            romeo['children'] = output;
            backup = sizing.bind(tango)(backup, romeo);
            romeo = new Array(2);
            romeo[0] = backup;
            output = _closure1_slot9;
            echo = _closure1_slot1;
            backup = 20;
            backup = verify[backup];
            sizing = echo.bind(tango)(backup);
            backup = {};
            result = 21;
            result = verify[result];
            result = echo.bind(tango)(result);
            backup['source'] = result;
            backup = output.bind(tango)(sizing, backup);
            romeo[1] = backup;
            report['children'] = romeo;
            options = zulu.bind(tango)(options, report);
            report = new Array(2);
            report[0] = options;
            options = _closure1_slot9;
            oscar = verify[oscar];
            oscar = offset.bind(tango)(oscar);
            golf = oscar.Text;
            oscar = {'style': null, 'accessibilityRole': 'header', 'variant': 'eyebrow', 'color': 'header-secondary'};
            yankee = yankee.participantTitle;
            oscar['style'] = yankee;
            yankee = verify[foxtrot];
            yankee = offset.bind(tango)(yankee);
            romeo = yankee.intl;
            yankee = romeo.format;
            verify = verify[foxtrot];
            verify = offset.bind(tango)(verify);
            verify = verify.t;
            offset = verify.5z7q5e;
            verify = {};
            foxtrot = global;
            foxtrot = foxtrot.HermesInternal;
            backup = foxtrot.concat;
            foxtrot = '';
            foxtrot = backup.bind(foxtrot)(kilo);
            verify['numHands'] = foxtrot;
            verify = yankee.bind(romeo)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    yankee = 0;
    tango = oscar[yankee];
    entity = undefined;
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot3 = tango;
    offset = 1;
    golf = oscar[offset];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.REQUEST_TO_SPEAK_SHEET_KEY;
    var _closure1_slot8 = tango;
    tango = 6;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot9 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot11 = tango;
    tango = 7;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    verify['padding'] = yankee;
    yankee = 8;
    romeo = oscar[yankee];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeo;
    tango['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between', 'padding': 12};
    romeo = oscar[yankee];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeo;
    tango['header'] = verify;
    verify = {};
    verify['flex'] = offset;
    tango['headerTextContainer'] = verify;
    verify = {'marginTop': 0, 'marginBottom': 0};
    tango['headerTitle'] = verify;
    verify = {'padding': 12, 'width': '100%'};
    offset = oscar[yankee];
    offset = foxtrot.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    offset = oscar[yankee];
    offset = foxtrot.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = offset;
    tango['textInput'] = verify;
    verify = {};
    offset = 16;
    verify['marginTop'] = offset;
    tango['startButton'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'padding': 16, 'alignItems': 'center', 'justifyContent': 'space-between'};
    tango['selfSpeakerButton'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tango['selfSpeakerCTA'] = verify;
    verify = {};
    romeo = oscar[yankee];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.round;
    verify['borderRadius'] = romeo;
    romeo = oscar[yankee];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeo;
    verify['padding'] = yankee;
    verify['marginEnd'] = offset;
    tango['selfSpeakerIcon'] = verify;
    verify = {'paddingHorizontal': 16, 'marginTop': 8};
    tango['participantTitle'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot12 = tango;
    tango = 29;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/stage_channels/native/components/RequestToSpeakActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: RequestToSpeakActionSheet
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            verify = entity.channelId;
            var _closure2_slot0 = verify;
            vacuum = entity.analyticsLocations;
            entity = _closure1_slot12;
            report = undefined;
            backup = entity.bind(report)();
            options = _closure1_slot1;
            yankee = _closure1_slot2;
            mike = 22;
            entity = yankee[mike];
            oscar = options.bind(report)(entity);
            entity = new Array(1);
            tango = 0;
            sequence = entity;
            control = 0;
            golf = arraySpread(sequence, vacuum, control);
            zulu = 23;
            zulu = yankee[zulu];
            zulu = options.bind(report)(zulu);
            zulu = zulu.REQUEST_TO_SPEAK;
            entity[golf] = zulu;
            zulu = 1;
            golf = golf + zulu;
            entity = oscar.bind(report)(entity);
            oscar = entity.analyticsLocations;
            offset = _closure1_slot0;
            entity = 13;
            entity = yankee[entity];
            kilo = offset.bind(report)(entity);
            options = kilo.useStateFromStores;
            entity = _closure1_slot7;
            golf = new Array(1);
            golf[0] = entity;
            entity = function() {
                zulu = _closure1_slot7;
                mike = zulu.getChannel;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            output = options.bind(kilo)(golf, entity);
            entity = 24;
            entity = yankee[entity];
            options = offset.bind(report)(entity);
            golf = options.useStageParticipantsCount;
            entity = 25;
            entity = yankee[entity];
            entity = offset.bind(report)(entity);
            entity = entity.StageChannelParticipantNamedIndex;
            entity = entity.ALL_REQUESTED_TO_SPEAK;
            update = golf.bind(options)(verify, entity);
            golf = _closure1_slot4;
            entity = golf.useState;
            options = entity.bind(golf)(tango);
            golf = _closure1_slot3;
            entity = 2;
            entity = golf.bind(report)(options, entity);
            sizing = entity[tango];
            var _closure2_slot1 = sizing;
            entity = entity[zulu];
            var _closure2_slot2 = entity;
            entity = null;
            zulu = entity == output;
            if(zulu) { _fun00006_ip = 506; continue _fun00005 }
 258:
            tango = _closure1_slot9;
            offset = _closure1_slot0;
            result = _closure1_slot2;
            mike = result[mike];
            mike = offset.bind(report)(mike);
            zulu = mike.AnalyticsLocationProvider;
            mike = {};
            mike['value'] = oscar;
            options = _closure1_slot9;
            oscar = 26;
            oscar = result[oscar];
            oscar = offset.bind(report)(oscar);
            golf = oscar.BottomSheet;
            oscar = {};
            verify = true;
            oscar['scrollable'] = verify;
            verify = 5;
            verify = update >= verify;
            oscar['startExpanded'] = verify;
            yankee = _closure1_slot10;
            verify = 27;
            verify = result[verify];
            verify = offset.bind(report)(verify);
            offset = verify.BottomSheetScrollView;
            verify = {};
            backup = backup.container;
            verify['style'] = backup;
            romeo = function(argFoo) { // Original name: onLayout
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = argFoo;
                    entity = entity.nativeEvent;
                    entity = entity.layout;
                    mike = entity.height;
                    entity = null;
                    entity = entity != mike;
                    if(!entity) { _fun00008_ip = 39; continue _fun00007 }
 28:
                    zulu = _closure2_slot1;
                    entity = zulu !== mike;
 39:
                    if(!entity) { _fun00008_ip = 63; continue _fun00007 }
 42:
                    zulu = _closure2_slot2;
                    entity = 200;
                    mike = mike - entity;
                    entity = undefined;
                    entity = zulu.bind(entity)(mike);
 63:
                    entity = undefined;
                    return entity;
                }
            };
            verify['onLayout'] = romeo;
            kilo = _closure1_slot9;
            backup = _closure1_slot13;
            romeo = {};
            romeo['channel'] = output;
            backup = kilo.bind(report)(backup, romeo);
            romeo = new Array(3);
            romeo[0] = backup;
            echo = _closure1_slot9;
            kilo = _closure1_slot14;
            backup = {};
            backup['channel'] = output;
            backup['numRequestsToSpeak'] = update;
            backup = echo.bind(report)(kilo, backup);
            romeo[1] = backup;
            kilo = _closure1_slot9;
            backup = _closure1_slot1;
            foxtrot = 28;
            foxtrot = result[foxtrot];
            backup = backup.bind(report)(foxtrot);
            foxtrot = {};
            foxtrot['channel'] = output;
            foxtrot['height'] = sizing;
            foxtrot = kilo.bind(report)(backup, foxtrot);
            romeo[2] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(report)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(report)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 506:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();