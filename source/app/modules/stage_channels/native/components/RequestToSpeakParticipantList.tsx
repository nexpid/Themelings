// app/modules/stage_channels/native/components/RequestToSpeakParticipantList.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: RequestToSpeakParticipant
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            echoed = entity.participant;
            var _closure2_slot0 = echoed;
            ctrled = entity.channel;
            var _closure2_slot1 = ctrled;
            source = entity.onGrantRequest;
            foxtra = entity.onDenyRequest;
            entity = _closure1_slot6;
            tangon = undefined;
            backup = entity.bind(tangon)();
            kiloes = _closure1_slot1;
            result = _closure1_slot2;
            entity = 6;
            entity = result[entity];
            entity = kiloes.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            entity = entity.analyticsLocations;
            var _closure2_slot2 = entity;
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = backup.participantItemContainer;
            entity['style'] = report;
            golfie = _closure1_slot5;
            sizing = _closure1_slot0;
            report = 7;
            report = result[report];
            report = sizing.bind(tangon)(report);
            oscard = report.PressableOpacity;
            report = {};
            option = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 8;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = {};
                report = _closure2_slot0;
                report = report.user;
                report = report.id;
                michal['userId'] = report;
                report = _closure2_slot1;
                report = report.id;
                michal['channelId'] = report;
                report = true;
                michal['isVoiceContext'] = report;
                tangon = _closure2_slot2;
                michal['sourceAnalyticsLocations'] = tangon;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            report['onPress'] = option;
            option = echoed.user;
            option = option.username;
            offset = new Array(2);
            offset[0] = option;
            vacuum = 9;
            option = result[vacuum];
            verify = sizing.bind(tangon)(option);
            option = verify.participantMemberInfo;
            option = option.bind(verify)(echoed);
            offset[1] = option;
            verify = offset.join;
            option = ', ';
            option = verify.bind(offset)(option);
            report['accessibilityLabel'] = option;
            option = 'button';
            report['accessibilityRole'] = option;
            option = backup.touchableContainer;
            report['style'] = option;
            offset = _closure1_slot4;
            verify = _closure1_slot3;
            option = {};
            romeon = backup.participantAvatarContainer;
            option['style'] = romeon;
            output = _closure1_slot4;
            update = 10;
            romeon = result[update];
            kiloes = kiloes.bind(tangon)(romeon);
            romeon = {};
            sequen = echoed.user;
            romeon['user'] = sequen;
            ctrled = ctrled.guild_id;
            romeon['guildId'] = ctrled;
            update = result[update];
            update = sizing.bind(tangon)(update);
            update = update.AvatarSizes;
            update = update.NORMAL;
            romeon['size'] = update;
            romeon = output.bind(tangon)(kiloes, romeon);
            option['children'] = romeon;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            romeon = _closure1_slot5;
            offset = _closure1_slot3;
            verify = {};
            kiloes = backup.participantNameplateContainer;
            verify['style'] = kiloes;
            output = _closure1_slot4;
            kiloes = 11;
            kiloes = result[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.LegacyText;
            kiloes = {};
            update = backup.participantNameplateText;
            result = new Array(2);
            result[0] = update;
            update = {};
            config = echoed.member;
            sequen = null;
            record = sequen == config;
            ctrled = undefined;
            if(record) { _fun00002_ip = 413; continue _fun00001 }
 407:
            ctrled = config.colorString;
 413:
            if(!(sequen == ctrled)) { _fun00002_ip = 428; continue _fun00001 }
 417:
            sequen = backup.participantNameplateText;
            ctrled = sequen.color;
 428:
            update['color'] = ctrled;
            result[1] = update;
            kiloes['style'] = result;
            result = 1;
            kiloes['numberOfLines'] = result;
            result = echoed.user;
            result = result.username;
            kiloes['children'] = result;
            sizing = output.bind(tangon)(sizing, kiloes);
            kiloes = new Array(2);
            kiloes[0] = sizing;
            ctrled = _closure1_slot4;
            update = _closure1_slot0;
            sizing = _closure1_slot2;
            output = 12;
            output = sizing[output];
            output = update.bind(tangon)(output);
            result = output.Text;
            output = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            vacuum = sizing[vacuum];
            sequen = update.bind(tangon)(vacuum);
            vacuum = sequen.participantMemberInfo;
            vacuum = vacuum.bind(sequen)(echoed);
            output['children'] = vacuum;
            output = ctrled.bind(tangon)(result, output);
            kiloes[1] = output;
            verify['children'] = kiloes;
            verify = romeon.bind(tangon)(offset, verify);
            option[1] = verify;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot5;
            golfie = _closure1_slot3;
            oscard = {};
            verify = backup.participantActionContainer;
            oscard['style'] = verify;
            result = _closure1_slot4;
            kiloes = _closure1_slot1;
            offset = 13;
            verify = sizing[offset];
            romeon = kiloes.bind(tangon)(verify);
            verify = {};
            output = 14;
            ctrled = sizing[output];
            ctrled = update.bind(tangon)(ctrled);
            sequen = ctrled.intl;
            vacuum = sequen.string;
            ctrled = sizing[output];
            ctrled = update.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.f0T7hI;
            ctrled = vacuum.bind(sequen)(ctrled);
            verify['accessibilityLabel'] = ctrled;
            ctrled = backup.participantActionIcon;
            verify['containerStyle'] = ctrled;
            ctrled = 15;
            ctrled = sizing[ctrled];
            ctrled = kiloes.bind(tangon)(ctrled);
            verify['source'] = ctrled;
            verify['onPress'] = source;
            source = echoed.rtsState;
            echoed = 16;
            echoed = sizing[echoed];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.RequestToSpeakStates;
            echoed = echoed.REQUESTED_TO_SPEAK_AND_AWAITING_USER_ACK;
            echoed = source === echoed;
            verify['disabled'] = echoed;
            romeon = result.bind(tangon)(romeon, verify);
            verify = new Array(2);
            verify[0] = romeon;
            romeon = _closure1_slot4;
            offset = sizing[offset];
            yankee = kiloes.bind(tangon)(offset);
            offset = {};
            result = sizing[output];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = sizing[output];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.moABMz;
            output = result.bind(echoed)(output);
            offset['accessibilityLabel'] = output;
            backup = backup.participantActionIcon;
            offset['containerStyle'] = backup;
            backup = 17;
            backup = sizing[backup];
            backup = kiloes.bind(tangon)(backup);
            offset['source'] = backup;
            offset['onPress'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot7 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.Fonts;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    foxtra = 4;
    tangon = oscard[foxtra];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'paddingVertical': 4, 'flexDirection': 'column', 'minHeight': 288, 'flex': 1};
    tangon['container'] = verify;
    verify = {'paddingVertical': 4, 'flexDirection': 'column', 'flex': 1};
    tangon['listContainer'] = verify;
    offset = 'center';
    verify = {'padding': 12, 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    tangon['participantItemContainer'] = verify;
    verify = {'flex': 1, 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    tangon['touchableContainer'] = verify;
    verify = {};
    verify['paddingLeft'] = foxtra;
    tangon['participantAvatarContainer'] = verify;
    verify = {'paddingHorizontal': 16, 'flex': 1};
    tangon['participantNameplateContainer'] = verify;
    verify = {'fontSize': 16, 'fontFamily': null, 'marginTop': 0, 'marginBottom': 0};
    yankee = yankee.PRIMARY_SEMIBOLD;
    verify['fontFamily'] = yankee;
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.HEADER_PRIMARY;
    verify['color'] = foxtra;
    tangon['participantNameplateText'] = verify;
    verify = {'flexDirection': 'row', 'paddingRight': 4};
    tangon['participantActionContainer'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = yankee;
    tangon['participantActionIcon'] = verify;
    verify = {'flex': 1, 'alignItems': 'center', 'justifyContent': 'center'};
    tangon['emptyContainer'] = verify;
    verify = {'flex': 1, 'height': 64};
    tangon['emptyParticipant'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 16, 'marginBottom': 8};
    tangon['emptyTitle'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['emptyBody'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 23;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/RequestToSpeakParticipantList.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: RequestToSpeakParticipantList
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            entity = michal.channel;
            var _closure2_slot0 = entity;
            verify = michal.height;
            michal = _closure1_slot6;
            report = undefined;
            backup = michal.bind(report)();
            var _closure2_slot1 = backup;
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 18;
            michal = tangon[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = zuuluu.useSortedRequestToSpeakParticipants;
            entity = entity.id;
            tangon = michal.bind(zuuluu)(entity);
            var _closure2_slot2 = tangon;
            michal = tangon.length;
            entity = 0;
            if(!(entity !== michal)) { _fun00004_ip = 211; continue _fun00003 }
 90:
            zuuluu = _closure1_slot4;
            michal = _closure1_slot1;
            golfie = _closure1_slot2;
            entity = 22;
            entity = golfie[entity];
            michal = michal.bind(report)(entity);
            entity = {};
            option = backup.listContainer;
            golfie = new Array(2);
            golfie[0] = option;
            option = {};
            option['height'] = verify;
            golfie[1] = option;
            entity['style'] = golfie;
            golfie = 64;
            entity['itemSize'] = golfie;
            oscard = function(argFoo, argBar) { // Original name: renderItem
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    tangon = _closure2_slot2;
                    entity = argBar;
                    entity = tangon[entity];
                    var _closure3_slot0 = entity;
                    tangon = null;
                    if(!(tangon != entity)) { _fun00006_ip = 97; continue _fun00005 }
 26:
                    oscard = _closure1_slot4;
                    report = _closure1_slot7;
                    tangon = {};
                    tangon['participant'] = entity;
                    golfie = _closure2_slot0;
                    tangon['channel'] = golfie;
                    golfie = function() { // Original name: onGrantRequest
                        michal = _closure3_slot0;
                        tangon = _closure1_slot0;
                        zuuluu = _closure1_slot2;
                        entity = 19;
                        zuuluu = zuuluu[entity];
                        entity = undefined;
                        oscard = tangon.bind(entity)(zuuluu);
                        report = oscard.setUserSuppress;
                        tangon = _closure2_slot0;
                        michal = michal.user;
                        zuuluu = michal.id;
                        michal = false;
                        michal = report.bind(oscard)(tangon, zuuluu, michal);
                        return entity;
                    };
                    tangon['onGrantRequest'] = golfie;
                    zuuluu = function() { // Original name: onDenyRequest
                        michal = _closure3_slot0;
                        tangon = _closure1_slot0;
                        zuuluu = _closure1_slot2;
                        entity = 19;
                        zuuluu = zuuluu[entity];
                        entity = undefined;
                        oscard = tangon.bind(entity)(zuuluu);
                        report = oscard.setUserSuppress;
                        tangon = _closure2_slot0;
                        michal = michal.user;
                        zuuluu = michal.id;
                        michal = true;
                        michal = report.bind(oscard)(tangon, zuuluu, michal);
                        return entity;
                    };
                    tangon['onDenyRequest'] = zuuluu;
                    entity = entity.user;
                    zuuluu = entity.id;
                    entity = undefined;
                    entity = oscard.bind(entity)(report, tangon, zuuluu);
                    _fun00006_ip = 132; continue _fun00005;
 97:
                    report = _closure1_slot4;
                    tangon = _closure1_slot3;
                    zuuluu = {};
                    michal = _closure2_slot1;
                    michal = michal.emptyParticipant;
                    zuuluu['style'] = michal;
                    michal = undefined;
                    entity = report.bind(michal)(tangon, zuuluu);
 132:
                    return entity;
                }
            };
            entity['renderItem'] = oscard;
            oscard = 'always';
            entity['keyboardShouldPersistTaps'] = oscard;
            oscard = tangon.length;
            tangon = 1;
            oscard = oscard + tangon;
            tangon = new Array(1);
            tangon[0] = oscard;
            entity['sections'] = tangon;
            entity = zuuluu.bind(report)(michal, entity);
            _fun00004_ip = 540; continue _fun00003;
 211:
            tangon = _closure1_slot4;
            zuuluu = _closure1_slot3;
            michal = {};
            oscard = backup.container;
            michal['style'] = oscard;
            option = _closure1_slot5;
            golfie = _closure1_slot3;
            oscard = {};
            verify = backup.emptyContainer;
            oscard['style'] = verify;
            romeon = _closure1_slot4;
            kiloes = _closure1_slot1;
            output = _closure1_slot2;
            verify = 20;
            verify = output[verify];
            offset = kiloes.bind(report)(verify);
            verify = {};
            foxtra = 21;
            foxtra = output[foxtra];
            foxtra = kiloes.bind(report)(foxtra);
            verify['source'] = foxtra;
            offset = romeon.bind(report)(offset, verify);
            verify = new Array(3);
            verify[0] = offset;
            result = _closure1_slot4;
            sizing = _closure1_slot0;
            offset = 12;
            romeon = output[offset];
            romeon = sizing.bind(report)(romeon);
            kiloes = romeon.Text;
            romeon = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/extrabold', 'color': 'header-primary'};
            foxtra = backup.emptyTitle;
            romeon['style'] = foxtra;
            foxtra = 14;
            echoed = output[foxtra];
            echoed = sizing.bind(report)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = output[foxtra];
            echoed = sizing.bind(report)(echoed);
            echoed = echoed.t;
            echoed = echoed.7R24mZ;
            echoed = update.bind(source)(echoed);
            romeon['children'] = echoed;
            romeon = result.bind(report)(kiloes, romeon);
            verify[1] = romeon;
            romeon = _closure1_slot4;
            offset = output[offset];
            offset = sizing.bind(report)(offset);
            yankee = offset.Text;
            offset = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            backup = backup.emptyBody;
            offset['style'] = backup;
            backup = output[foxtra];
            backup = sizing.bind(report)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = output[foxtra];
            foxtra = sizing.bind(report)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.Rpr2s7;
            foxtra = backup.bind(kiloes)(foxtra);
            offset['children'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 540:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();