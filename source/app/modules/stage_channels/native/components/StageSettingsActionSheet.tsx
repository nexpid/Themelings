// app/modules/stage_channels/native/components/StageSettingsActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: close
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 11;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.hideActionSheet;
        michal = _closure1_slot9;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.STAGE_SETTINGS_SHEET_KEY;
    var _closure1_slot9 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.ChannelSettingsSections;
    var _closure1_slot10 = golfie;
    tangon = tangon.UserSettingsSections;
    var _closure1_slot11 = tangon;
    offset = 8;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot12 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['marginTop'] = offset;
    tangon['container'] = verify;
    verify = {};
    offset = 10;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.INTERACTIVE_NORMAL;
    verify['color'] = romeon;
    tangon['icon'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.RED_400;
    verify['color'] = offset;
    tangon['warning'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot14 = tangon;
    tangon = 27;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/StageSettingsActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: StageSettingsActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            oscard = entity.channelId;
            var _closure2_slot0 = oscard;
            yankee = entity.onOpenRTCDebugOverlay;
            var _closure2_slot1 = yankee;
            entity = _closure1_slot14;
            report = undefined;
            echoed = entity.bind(report)();
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 12;
            entity = tangon[michal];
            verify = zuuluu.bind(report)(entity);
            option = verify.useStateFromStores;
            entity = _closure1_slot6;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getChannel;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            entity = option.bind(verify)(golfie, entity);
            var _closure2_slot2 = entity;
            golfie = tangon[michal];
            offset = zuuluu.bind(report)(golfie);
            verify = offset.useStateFromStores;
            golfie = _closure1_slot7;
            option = new Array(1);
            option[0] = golfie;
            golfie = function() {
                tangon = _closure1_slot7;
                zuuluu = tangon.can;
                report = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 13;
                michal = michal[entity];
                entity = undefined;
                entity = report.bind(entity)(michal);
                michal = entity.MODERATE_STAGE_CHANNEL_PERMISSIONS;
                entity = _closure2_slot2;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            backup = verify.bind(offset)(option, golfie);
            golfie = tangon[michal];
            offset = zuuluu.bind(report)(golfie);
            verify = offset.useStateFromStores;
            golfie = _closure1_slot5;
            option = new Array(1);
            option[0] = golfie;
            golfie = new Array(1);
            golfie[0] = oscard;
            oscard = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.getSelectedParticipant;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            verify = verify.bind(offset)(option, oscard, golfie);
            michal = tangon[michal];
            oscard = zuuluu.bind(report)(michal);
            tangon = oscard.useStateFromStores;
            michal = _closure1_slot8;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot8;
                michal = zuuluu.getStageInstanceByChannel;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            output = tangon.bind(oscard)(zuuluu, michal);
            oscard = _closure1_slot3;
            tangon = oscard.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            michal = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot2;
                    entity = null;
                    if(!(entity == michal)) { _fun00004_ip = 26; continue _fun00003 }
 13:
                    michal = _closure1_slot15;
                    entity = undefined;
                    entity = michal.bind(entity)();
 26:
                    entity = undefined;
                    return entity;
                }
            };
            michal = tangon.bind(oscard)(michal, zuuluu);
            offset = null;
            michal = offset == entity;
            entity = null;
            if(michal) { _fun00002_ip = 1256; continue _fun00001 }
 251:
            tangon = _closure1_slot12;
            zuuluu = _closure1_slot0;
            oscard = _closure1_slot2;
            michal = 14;
            michal = oscard[michal];
            michal = zuuluu.bind(report)(michal);
            zuuluu = michal.ActionSheet;
            michal = {};
            oscard = 'always';
            michal['keyboardShouldPersistTaps'] = oscard;
            option = _closure1_slot13;
            golfie = _closure1_slot4;
            oscard = {};
            romeon = echoed.container;
            oscard['style'] = romeon;
            romeon = null;
            if(!backup) { _fun00002_ip = 567; continue _fun00001 }
 321:
            verify = offset == verify;
            romeon = null;
            if(!verify) { _fun00002_ip = 567; continue _fun00001 }
 333:
            sizing = _closure1_slot12;
            backup = _closure1_slot0;
            result = _closure1_slot2;
            verify = 15;
            verify = result[verify];
            verify = backup.bind(report)(verify);
            backup = verify.FormRow;
            verify = {};
            if(!(offset == output)) { _fun00002_ip = 426; continue _fun00001 }
 369:
            source = _closure1_slot0;
            ctrled = _closure1_slot2;
            output = 16;
            result = ctrled[output];
            result = source.bind(report)(result);
            update = result.intl;
            result = update.string;
            output = ctrled[output];
            output = source.bind(report)(output);
            output = output.t;
            output = output.s8mM8P;
            output = result.bind(update)(output);
            _fun00002_ip = 481; continue _fun00001;
 426:
            ctrled = _closure1_slot0;
            vacuum = _closure1_slot2;
            result = 16;
            update = vacuum[result];
            update = ctrled.bind(report)(update);
            source = update.intl;
            update = source.string;
            result = vacuum[result];
            result = ctrled.bind(report)(result);
            result = result.t;
            result = result.5BKP4+;
            output = update.bind(source)(result);
 481:
            verify['label'] = output;
            update = _closure1_slot12;
            ctrled = _closure1_slot1;
            vacuum = _closure1_slot2;
            output = 17;
            output = vacuum[output];
            result = ctrled.bind(report)(output);
            output = {};
            source = 18;
            source = vacuum[source];
            source = ctrled.bind(report)(source);
            output['source'] = source;
            source = echoed.icon;
            source = source.color;
            output['color'] = source;
            output = update.bind(report)(result, output);
            verify['leading'] = output;
            output = function() { // Original name: onPress
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 19;
                zuuluu = zuuluu[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.openStageChannelSettings;
                zuuluu = _closure2_slot2;
                zuuluu = tangon.bind(report)(zuuluu);
                michal = _closure1_slot15;
                michal = michal.bind(entity)();
                return entity;
            };
            verify['onPress'] = output;
            romeon = sizing.bind(report)(backup, verify);
 567:
            verify = new Array(5);
            verify[0] = romeon;
            result = _closure1_slot12;
            record = _closure1_slot0;
            config = _closure1_slot2;
            sizing = 15;
            romeon = config[sizing];
            romeon = record.bind(report)(romeon);
            output = romeon.FormRow;
            romeon = {};
            update = 16;
            backup = config[update];
            backup = record.bind(report)(backup);
            ctrled = backup.intl;
            source = ctrled.string;
            backup = config[update];
            backup = record.bind(report)(backup);
            backup = backup.t;
            backup = backup.NiTd0d;
            backup = source.bind(ctrled)(backup);
            romeon['label'] = backup;
            sequen = _closure1_slot1;
            backup = 17;
            source = config[backup];
            ctrled = sequen.bind(report)(source);
            source = {};
            vacuum = 20;
            vacuum = config[vacuum];
            vacuum = sequen.bind(report)(vacuum);
            source['source'] = vacuum;
            vacuum = echoed.icon;
            vacuum = vacuum.color;
            source['color'] = vacuum;
            source = result.bind(report)(ctrled, source);
            romeon['leading'] = source;
            source = function() { // Original name: onPress
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 21;
                zuuluu = zuuluu[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.openUserSettings;
                zuuluu = {};
                oscard = _closure1_slot11;
                oscard = oscard.VOICE;
                zuuluu['screen'] = oscard;
                zuuluu = tangon.bind(report)(zuuluu);
                michal = _closure1_slot15;
                michal = michal.bind(entity)();
                return entity;
            };
            romeon['onPress'] = source;
            romeon = result.bind(report)(output, romeon);
            verify[1] = romeon;
            romeon = config[sizing];
            romeon = record.bind(report)(romeon);
            output = romeon.FormRow;
            romeon = {};
            source = config[update];
            source = record.bind(report)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = config[update];
            source = record.bind(report)(source);
            source = source.t;
            source = source.h850Sk;
            source = ctrled.bind(vacuum)(source);
            romeon['label'] = source;
            source = config[backup];
            ctrled = sequen.bind(report)(source);
            source = {};
            vacuum = 22;
            vacuum = config[vacuum];
            vacuum = sequen.bind(report)(vacuum);
            source['source'] = vacuum;
            vacuum = echoed.icon;
            vacuum = vacuum.color;
            source['color'] = vacuum;
            source = result.bind(report)(ctrled, source);
            romeon['leading'] = source;
            source = function() { // Original name: onPress
                tangon = _closure1_slot1;
                report = _closure1_slot2;
                zuuluu = 23;
                oscard = report[zuuluu];
                entity = undefined;
                option = tangon.bind(entity)(oscard);
                golfie = option.setSection;
                oscard = _closure1_slot10;
                oscard = oscard.NOTIFICATIONS;
                oscard = golfie.bind(option)(oscard);
                zuuluu = report[zuuluu];
                report = tangon.bind(entity)(zuuluu);
                tangon = report.open;
                zuuluu = _closure2_slot2;
                zuuluu = zuuluu.id;
                zuuluu = tangon.bind(report)(zuuluu);
                michal = _closure1_slot15;
                michal = michal.bind(entity)();
                return entity;
            };
            romeon['onPress'] = source;
            romeon = result.bind(report)(output, romeon);
            verify[2] = romeon;
            offset = offset != yankee;
            if(!offset) { _fun00002_ip = 1030; continue _fun00001 }
 882:
            output = _closure1_slot12;
            vacuum = _closure1_slot0;
            sequen = _closure1_slot2;
            yankee = sequen[sizing];
            yankee = vacuum.bind(report)(yankee);
            romeon = yankee.FormRow;
            yankee = {};
            result = sequen[update];
            result = vacuum.bind(report)(result);
            ctrled = result.intl;
            source = ctrled.string;
            result = sequen[update];
            result = vacuum.bind(report)(result);
            result = result.t;
            result = result.X8bCMT;
            result = source.bind(ctrled)(result);
            yankee['label'] = result;
            vacuum = _closure1_slot1;
            result = sequen[backup];
            source = vacuum.bind(report)(result);
            result = {};
            ctrled = 24;
            ctrled = sequen[ctrled];
            ctrled = vacuum.bind(report)(ctrled);
            result['source'] = ctrled;
            ctrled = echoed.icon;
            ctrled = ctrled.color;
            result['color'] = ctrled;
            result = output.bind(report)(source, result);
            yankee['leading'] = result;
            result = function() { // Original name: onPress
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = _closure2_slot1;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00006_ip = 23; continue _fun00005 }
 13:
                    michal = _closure2_slot1;
                    entity = undefined;
                    entity = michal.bind(entity)();
 23:
                    michal = _closure1_slot15;
                    entity = undefined;
                    michal = michal.bind(entity)();
                    return entity;
                }
            };
            yankee['onPress'] = result;
            offset = output.bind(report)(romeon, yankee);
 1030:
            verify[3] = offset;
            romeon = _closure1_slot12;
            vacuum = _closure1_slot0;
            result = _closure1_slot2;
            offset = result[sizing];
            offset = vacuum.bind(report)(offset);
            yankee = offset.FormRow;
            offset = {};
            sizing = result[sizing];
            sizing = vacuum.bind(report)(sizing);
            output = sizing.FormLabel;
            sizing = {};
            source = result[update];
            source = vacuum.bind(report)(source);
            ctrled = source.intl;
            source = ctrled.string;
            update = result[update];
            update = vacuum.bind(report)(update);
            update = update.t;
            update = update.+78Pfn;
            update = source.bind(ctrled)(update);
            sizing['text'] = update;
            echoed = echoed.warning;
            sizing['style'] = echoed;
            sizing = romeon.bind(report)(output, sizing);
            offset['label'] = sizing;
            output = _closure1_slot1;
            backup = result[backup];
            kiloes = output.bind(report)(backup);
            backup = {};
            sizing = 10;
            sizing = result[sizing];
            sizing = output.bind(report)(sizing);
            sizing = sizing.unsafe_rawColors;
            sizing = sizing.RED_400;
            backup['color'] = sizing;
            sizing = 25;
            sizing = result[sizing];
            sizing = output.bind(report)(sizing);
            backup['source'] = sizing;
            backup = romeon.bind(report)(kiloes, backup);
            offset['leading'] = backup;
            foxtra = function() { // Original name: onPress
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 26;
                zuuluu = zuuluu[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.showReportModalForStageChannel;
                zuuluu = _closure2_slot2;
                zuuluu = tangon.bind(report)(zuuluu);
                michal = _closure1_slot15;
                michal = michal.bind(entity)();
                return entity;
            };
            offset['onPress'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            verify[4] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1256:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();