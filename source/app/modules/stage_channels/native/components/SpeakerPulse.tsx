// app/modules/stage_channels/native/components/SpeakerPulse.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    golfie = tangon.Fragment;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.WHITE;
    verify['backgroundColor'] = romeon;
    tangon['pulse'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.STATUS_SPEAKING;
    verify['backgroundColor'] = offset;
    tangon['border'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = {};
    golfie = 'function SpeakerPulseTsx1(){const{animatedInnerOpacity}=this.__closure;return{opacity:animatedInnerOpacity.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = 'function SpeakerPulseTsx2(){const{animatedOuterOpacity}=this.__closure;return{opacity:animatedOuterOpacity.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/SpeakerPulse.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SpeakerPulse
        michal = argFoo;
        yankee = michal.style;
        michal = _closure1_slot9;
        tangon = undefined;
        verify = michal.bind(tangon)();
        zuuluu = _closure1_slot0;
        romeon = _closure1_slot2;
        michal = 6;
        michal = romeon[michal];
        offset = zuuluu.bind(tangon)(michal);
        option = offset.useStateFromStores;
        michal = _closure1_slot5;
        oscard = new Array(1);
        oscard[0] = michal;
        report = function() {
            entity = _closure1_slot5;
            entity = entity.useReducedMotion;
            entity = !entity;
            return entity;
        };
        michal = new Array(0);
        michal = option.bind(offset)(oscard, report, michal);
        var _closure2_slot0 = michal;
        oscard = 7;
        report = romeon[oscard];
        option = zuuluu.bind(tangon)(report);
        report = option.useSharedValue;
        offset = 0.16;
        backup = report.bind(option)(offset);
        var _closure2_slot1 = backup;
        report = romeon[oscard];
        option = zuuluu.bind(tangon)(report);
        report = option.useSharedValue;
        option = report.bind(option)(offset);
        var _closure2_slot2 = option;
        foxtra = _closure1_slot3;
        offset = foxtra.useEffect;
        report = new Array(3);
        report[0] = michal;
        report[1] = backup;
        report[2] = option;
        michal = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure2_slot0;
                report = _closure2_slot1;
                michal = report.set;
                if(zuuluu) { _fun00002_ip = 53; continue _fun00001 }
 19:
                oscard = 0.16;
                zuuluu = michal.bind(report)(oscard);
                tangon = _closure2_slot2;
                zuuluu = tangon.set;
                zuuluu = zuuluu.bind(tangon)(oscard);
                _fun00002_ip = 402; continue _fun00001;
 53:
                backup = 0;
                michal = michal.bind(report)(backup);
                zuuluu = _closure2_slot2;
                entity = zuuluu.set;
                entity = entity.bind(zuuluu)(backup);
                foxtra = _closure1_slot0;
                sizing = _closure1_slot2;
                verify = 7;
                entity = sizing[verify];
                romeon = undefined;
                oscard = foxtra.bind(romeon)(entity);
                tangon = oscard.withRepeat;
                entity = sizing[verify];
                offset = foxtra.bind(romeon)(entity);
                option = offset.withSequence;
                entity = sizing[verify];
                kiloes = foxtra.bind(romeon)(entity);
                yankee = kiloes.withDelay;
                entity = 8;
                michal = sizing[entity];
                output = foxtra.bind(romeon)(michal);
                golfie = output.withTiming;
                michal = {};
                ctrled = 250;
                michal['duration'] = ctrled;
                source = 0.16;
                golfie = golfie.bind(output)(source, michal);
                michal = 100;
                golfie = yankee.bind(kiloes)(michal, golfie);
                michal = sizing[verify];
                output = foxtra.bind(romeon)(michal);
                yankee = output.withDelay;
                michal = sizing[entity];
                echoed = foxtra.bind(romeon)(michal);
                result = echoed.withTiming;
                michal = {};
                kiloes = 500;
                michal['duration'] = kiloes;
                michal = result.bind(echoed)(backup, michal);
                michal = yankee.bind(output)(ctrled, michal);
                michal = option.bind(offset)(golfie, michal);
                option = -1;
                golfie = false;
                tangon = tangon.bind(oscard)(michal, option, golfie);
                michal = sizing[verify];
                oscard = foxtra.bind(romeon)(michal);
                michal = oscard.withRepeat;
                offset = sizing[verify];
                yankee = foxtra.bind(romeon)(offset);
                offset = yankee.withSequence;
                verify = sizing[verify];
                echoed = foxtra.bind(romeon)(verify);
                result = echoed.withDelay;
                verify = sizing[entity];
                update = foxtra.bind(romeon)(verify);
                output = update.withTiming;
                verify = {};
                verify['duration'] = ctrled;
                output = output.bind(update)(source, verify);
                verify = 350;
                verify = result.bind(echoed)(verify, output);
                entity = sizing[entity];
                foxtra = foxtra.bind(romeon)(entity);
                romeon = foxtra.withTiming;
                entity = {};
                entity['duration'] = kiloes;
                entity = romeon.bind(foxtra)(backup, entity);
                entity = offset.bind(yankee)(verify, entity);
                michal = michal.bind(oscard)(entity, option, golfie);
                entity = report.set;
                entity = entity.bind(report)(tangon);
                entity = zuuluu.set;
                entity = entity.bind(zuuluu)(michal);
 402:
                entity = undefined;
                return entity;
            }
        };
        michal = offset.bind(foxtra)(michal, report);
        michal = romeon[oscard];
        offset = zuuluu.bind(tangon)(michal);
        report = offset.useAnimatedStyle;
        michal = function() { // Original name: T
            entity = {};
            zuuluu = _closure2_slot1;
            michal = zuuluu.get;
            michal = michal.bind(zuuluu)();
            entity['opacity'] = michal;
            return entity;
        };
        foxtra = {};
        foxtra['animatedInnerOpacity'] = backup;
        michal['__closure'] = foxtra;
        foxtra = 202297893401.0;
        michal['__workletHash'] = foxtra;
        foxtra = _closure1_slot10;
        michal['__initData'] = foxtra;
        sizing = report.bind(offset)(michal);
        michal = romeon[oscard];
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.useAnimatedStyle;
        entity = function() { // Original name: k
            entity = {};
            zuuluu = _closure2_slot2;
            michal = zuuluu.get;
            michal = michal.bind(zuuluu)();
            entity['opacity'] = michal;
            return entity;
        };
        report = {};
        report['animatedOuterOpacity'] = option;
        entity['__closure'] = report;
        report = 13537504931930.0;
        entity['__workletHash'] = report;
        report = _closure1_slot11;
        entity['__initData'] = report;
        offset = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot8;
        michal = _closure1_slot7;
        entity = {};
        option = _closure1_slot6;
        foxtra = _closure1_slot4;
        report = {};
        kiloes = verify.border;
        backup = new Array(2);
        backup[0] = kiloes;
        backup[1] = yankee;
        report['style'] = backup;
        foxtra = option.bind(tangon)(foxtra, report);
        report = new Array(3);
        report[0] = foxtra;
        golfie = _closure1_slot1;
        foxtra = romeon[oscard];
        foxtra = golfie.bind(tangon)(foxtra);
        backup = foxtra.View;
        foxtra = {};
        output = verify.pulse;
        kiloes = new Array(4);
        kiloes[0] = output;
        kiloes[1] = yankee;
        kiloes[2] = sizing;
        sizing = {};
        result = {};
        output = 1.5;
        result['scale'] = output;
        output = new Array(1);
        output[0] = result;
        sizing['transform'] = output;
        kiloes[3] = sizing;
        foxtra['style'] = kiloes;
        foxtra = option.bind(tangon)(backup, foxtra);
        report[1] = foxtra;
        oscard = romeon[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.View;
        oscard = {};
        romeon = verify.pulse;
        verify = new Array(4);
        verify[0] = romeon;
        verify[1] = yankee;
        verify[2] = offset;
        offset = {};
        romeon = {};
        yankee = 2;
        romeon['scale'] = yankee;
        yankee = new Array(1);
        yankee[0] = romeon;
        offset['transform'] = yankee;
        verify[3] = offset;
        oscard['style'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();