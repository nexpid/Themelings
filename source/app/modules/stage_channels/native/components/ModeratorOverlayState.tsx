// app/modules/stage_channels/native/components/ModeratorOverlayState.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    option = report.bind(entity)(tangon);
    golfie = option.createWithEqualityFn;
    tangon = function(argFoo, argBar) {
        entity = argFoo;
        var _closure2_slot0 = entity;
        entity = argBar;
        var _closure2_slot1 = entity;
        entity = {};
        zuuluu = global;
        zuuluu = zuuluu.Set;
        tangon = zuuluu.prototype;
        tangon = Object.create(tangon, {constructor: {value: zuuluu}});
        report = tangon;
        zuuluu = new report[zuuluu](tangon);
        zuuluu = zuuluu instanceof Object ? zuuluu : tangon;
        entity['overlayDismissedChannelIds'] = zuuluu;
        michal = function(argFoo) { // Original name: dismissOverlay
            zuuluu = _closure2_slot1;
            entity = undefined;
            zuuluu = zuuluu.bind(entity)();
            report = zuuluu.overlayDismissedChannelIds;
            var _closure3_slot0 = report;
            tangon = report.add;
            zuuluu = argFoo;
            zuuluu = tangon.bind(report)(zuuluu);
            tangon = _closure1_slot0;
            report = _closure1_slot1;
            zuuluu = 1;
            zuuluu = report[zuuluu];
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = tangon.batchUpdates;
            michal = function() {
                zuuluu = _closure2_slot0;
                michal = {};
                entity = _closure3_slot0;
                michal['overlayDismissedChannelIds'] = entity;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        entity['dismissOverlay'] = michal;
        return entity;
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/ModeratorOverlayState.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: useModeratorOverlayChannelState
        tangon = argFoo;
        var _closure2_slot0 = tangon;
        golfie = _closure1_slot2;
        report = _closure1_slot0;
        option = _closure1_slot1;
        entity = 2;
        zuuluu = option[entity];
        oscard = undefined;
        zuuluu = report.bind(oscard)(zuuluu);
        verify = zuuluu.shallow;
        zuuluu = function(argFoo) {
            entity = argFoo;
            entity = entity.overlayDismissedChannelIds;
            return entity;
        };
        zuuluu = golfie.bind(oscard)(zuuluu, verify);
        entity = option[entity];
        entity = report.bind(oscard)(entity);
        report = entity.shallow;
        entity = function(argFoo) {
            entity = argFoo;
            entity = entity.dismissOverlay;
            return entity;
        };
        entity = golfie.bind(oscard)(entity, report);
        var _closure2_slot1 = entity;
        entity = zuuluu.has;
        entity = entity.bind(zuuluu)(tangon);
        zuuluu = !entity;
        entity = new Array(2);
        entity[0] = zuuluu;
        michal = function() {
            zuuluu = _closure2_slot1;
            michal = _closure2_slot0;
            entity = undefined;
            entity = zuuluu.bind(entity)(michal);
            return entity;
        };
        entity[1] = michal;
        return entity;
    };
    zuuluu['useModeratorOverlayChannelState'] = michal;
    return entity;
})();