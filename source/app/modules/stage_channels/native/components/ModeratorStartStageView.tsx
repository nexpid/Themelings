// app/modules/stage_channels/native/components/ModeratorStartStageView.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.Fonts;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ThemeTypes;
    var _closure1_slot6 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'marginTop': 48, 'padding': 16, 'alignItems': 'center'};
    tangon['container'] = verify;
    verify = {'marginTop': 48, 'marginBottom': 16};
    tangon['sparkle'] = verify;
    offset = 8;
    verify = {'marginTop': 16, 'marginBottom': 8, 'textAlign': 'center'};
    tangon['title'] = verify;
    verify = {'fontSize': 14, 'fontFamily': null, 'textAlign': 'center'};
    yankee = yankee.PRIMARY_MEDIUM;
    verify['fontFamily'] = yankee;
    yankee = oscard[offset];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.WHITE;
    verify['color'] = yankee;
    tangon['body'] = verify;
    verify = {'marginTop': 24, 'display': 'flex', 'flexDirection': 'column', 'width': '100%'};
    tangon['prompts'] = verify;
    verify = {};
    verify['marginEnd'] = offset;
    tangon['spacing'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/stage_channels/native/components/ModeratorStartStageView.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ModeratorStartStageView
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            output = michal.channel;
            romeon = michal.onSkip;
            michal = _closure1_slot9;
            report = undefined;
            foxtra = michal.bind(report)();
            tangon = output.guild_id;
            var _closure2_slot0 = tangon;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            oscard = 9;
            oscard = zuuluu[oscard];
            offset = michal.bind(report)(oscard);
            option = offset.useStateFromStores;
            oscard = _closure1_slot5;
            golfie = new Array(1);
            golfie[0] = oscard;
            oscard = new Array(1);
            oscard[0] = tangon;
            entity = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            kiloes = option.bind(offset)(golfie, entity, oscard);
            entity = 10;
            entity = zuuluu[entity];
            golfie = michal.bind(report)(entity);
            oscard = golfie.useGuildChannelScheduledEvents;
            entity = output.id;
            golfie = oscard.bind(golfie)(entity);
            oscard = _closure1_slot3;
            entity = 1;
            oscard = oscard.bind(report)(golfie, entity);
            entity = 0;
            source = oscard[entity];
            oscard = _closure1_slot1;
            entity = 11;
            entity = zuuluu[entity];
            option = oscard.bind(report)(entity);
            golfie = output.id;
            entity = true;
            entity = option.bind(report)(golfie, entity);
            backup = entity.moderator;
            entity = 12;
            entity = zuuluu[entity];
            golfie = michal.bind(report)(entity);
            entity = golfie.useManageResourcePermissions;
            entity = entity.bind(golfie)(output);
            entity = entity.canManageGuildEvent;
            option = entity.bind(report)(source);
            entity = 13;
            entity = zuuluu[entity];
            entity = oscard.bind(report)(entity);
            yankee = entity.bind(report)(tangon);
            entity = 14;
            entity = zuuluu[entity];
            oscard = michal.bind(report)(entity);
            tangon = oscard.useStageChannelStartEvent;
            entity = output.id;
            entity = tangon.bind(oscard)(entity);
            sizing = entity.isLive;
            entity = 15;
            entity = zuuluu[entity];
            michal = michal.bind(report)(entity);
            entity = michal.getNextRecurrenceIdInEvent;
            entity = entity.bind(michal)(source);
            offset = null;
            michal = offset != entity;
            update = undefined;
            if(!michal) { _fun00002_ip = 301; continue _fun00001 }
 298:
            update = entity;
 301:
            michal = offset == kiloes;
            entity = null;
            if(michal) { _fun00002_ip = 876; continue _fun00001 }
 313:
            tangon = _closure1_slot8;
            zuuluu = _closure1_slot4;
            michal = {};
            oscard = foxtra.container;
            michal['style'] = oscard;
            echoed = _closure1_slot7;
            golfie = _closure1_slot1;
            record = _closure1_slot2;
            oscard = 16;
            oscard = record[oscard];
            golfie = golfie.bind(report)(oscard);
            oscard = {};
            result = foxtra.sparkle;
            oscard['style'] = result;
            result = _closure1_slot6;
            result = result.DARK;
            oscard['theme'] = result;
            golfie = echoed.bind(report)(golfie, oscard);
            oscard = new Array(4);
            oscard[0] = golfie;
            config = _closure1_slot0;
            golfie = 17;
            golfie = record[golfie];
            golfie = config.bind(report)(golfie);
            result = golfie.Text;
            golfie = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'always-white'};
            ctrled = foxtra.title;
            golfie['style'] = ctrled;
            ctrled = 18;
            vacuum = record[ctrled];
            vacuum = config.bind(report)(vacuum);
            cntext = vacuum.intl;
            sequen = cntext.string;
            vacuum = record[ctrled];
            vacuum = config.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.QGnDLi;
            vacuum = sequen.bind(cntext)(vacuum);
            golfie['children'] = vacuum;
            golfie = echoed.bind(report)(result, golfie);
            oscard[1] = golfie;
            golfie = 19;
            golfie = record[golfie];
            golfie = config.bind(report)(golfie);
            result = golfie.LegacyText;
            golfie = {};
            vacuum = foxtra.body;
            golfie['style'] = vacuum;
            vacuum = record[ctrled];
            vacuum = config.bind(report)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = record[ctrled];
            ctrled = config.bind(report)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.s/uXzs;
            ctrled = vacuum.bind(sequen)(ctrled);
            golfie['children'] = ctrled;
            golfie = echoed.bind(report)(result, golfie);
            oscard[2] = golfie;
            golfie = {};
            foxtra = foxtra.prompts;
            golfie['style'] = foxtra;
            foxtra = null;
            if(!option) { _fun00002_ip = 681; continue _fun00001 }
 611:
            option = offset != source;
            foxtra = null;
            if(!option) { _fun00002_ip = 681; continue _fun00001 }
 620:
            echoed = _closure1_slot7;
            result = _closure1_slot0;
            ctrled = _closure1_slot2;
            option = 20;
            option = ctrled[option];
            option = result.bind(report)(option);
            result = option.StartEventPrompt;
            option = {};
            option['channel'] = output;
            option['event'] = source;
            option['isLive'] = sizing;
            option['guild'] = kiloes;
            option['recurrenceId'] = update;
            foxtra = echoed.bind(report)(result, option);
 681:
            option = new Array(4);
            option[0] = foxtra;
            foxtra = null;
            if(!backup) { _fun00002_ip = 741; continue _fun00001 }
 694:
            echoed = _closure1_slot7;
            result = _closure1_slot0;
            update = _closure1_slot2;
            backup = 21;
            backup = update[backup];
            backup = result.bind(report)(backup);
            result = backup.StartStagePrompt;
            backup = {};
            backup['channel'] = output;
            backup['isLive'] = sizing;
            foxtra = echoed.bind(report)(result, backup);
 741:
            option[1] = foxtra;
            offset = null;
            if(!yankee) { _fun00002_ip = 801; continue _fun00001 }
 750:
            backup = _closure1_slot7;
            foxtra = _closure1_slot0;
            result = _closure1_slot2;
            yankee = 20;
            yankee = result[yankee];
            yankee = foxtra.bind(report)(yankee);
            foxtra = yankee.ScheduleEventPrompt;
            yankee = {};
            yankee['channel'] = output;
            yankee['isLive'] = sizing;
            yankee['guild'] = kiloes;
            offset = backup.bind(report)(foxtra, yankee);
 801:
            option[2] = offset;
            yankee = _closure1_slot7;
            offset = _closure1_slot0;
            foxtra = _closure1_slot2;
            verify = 21;
            verify = foxtra[verify];
            verify = offset.bind(report)(verify);
            offset = verify.ContinueToStagePrompt;
            verify = {};
            verify['onContinue'] = romeon;
            verify = yankee.bind(report)(offset, verify);
            option[3] = verify;
            golfie['children'] = option;
            golfie = tangon.bind(report)(zuuluu, golfie);
            oscard[3] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 876:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();