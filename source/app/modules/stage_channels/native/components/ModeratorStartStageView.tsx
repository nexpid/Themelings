// app/modules/stage_channels/native/components/ModeratorStartStageView.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = romeo.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    yankee = tango.Fonts;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ThemeTypes;
    var _closure1_slot6 = tango;
    tango = 6;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 7;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'marginTop': 48, 'padding': 16, 'alignItems': 'center'};
    tango['container'] = verify;
    verify = {'marginTop': 48, 'marginBottom': 16};
    tango['sparkle'] = verify;
    offset = 8;
    verify = {'marginTop': 16, 'marginBottom': 8, 'textAlign': 'center'};
    tango['title'] = verify;
    verify = {'fontSize': 14, 'fontFamily': null, 'textAlign': 'center'};
    yankee = yankee.PRIMARY_MEDIUM;
    verify['fontFamily'] = yankee;
    yankee = oscar[offset];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.WHITE;
    verify['color'] = yankee;
    tango['body'] = verify;
    verify = {'marginTop': 24, 'display': 'flex', 'flexDirection': 'column', 'width': '100%'};
    tango['prompts'] = verify;
    verify = {};
    verify['marginEnd'] = offset;
    tango['spacing'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 22;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/stage_channels/native/components/ModeratorStartStageView.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ModeratorStartStageView
        _fun76050: for(var _fun76050_ip = 0; ; ) switch(_fun76050_ip) {
 0:
            mike = argFoo;
            output = mike.channel;
            romeo = mike.onSkip;
            mike = _closure1_slot9;
            report = undefined;
            foxtrot = mike.bind(report)();
            tango = output.guild_id;
            var _closure2_slot0 = tango;
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            oscar = 9;
            oscar = zulu[oscar];
            offset = mike.bind(report)(oscar);
            options = offset.useStateFromStores;
            oscar = _closure1_slot5;
            golf = new Array(1);
            golf[0] = oscar;
            oscar = new Array(1);
            oscar[0] = tango;
            entity = function() {
                zulu = _closure1_slot5;
                mike = zulu.getGuild;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            kilo = options.bind(offset)(golf, entity, oscar);
            entity = 10;
            entity = zulu[entity];
            golf = mike.bind(report)(entity);
            oscar = golf.useGuildChannelScheduledEvents;
            entity = output.id;
            golf = oscar.bind(golf)(entity);
            oscar = _closure1_slot3;
            entity = 1;
            oscar = oscar.bind(report)(golf, entity);
            entity = 0;
            source = oscar[entity];
            oscar = _closure1_slot1;
            entity = 11;
            entity = zulu[entity];
            options = oscar.bind(report)(entity);
            golf = output.id;
            entity = true;
            entity = options.bind(report)(golf, entity);
            backup = entity.moderator;
            entity = 12;
            entity = zulu[entity];
            golf = mike.bind(report)(entity);
            entity = golf.useManageResourcePermissions;
            entity = entity.bind(golf)(output);
            entity = entity.canManageGuildEvent;
            options = entity.bind(report)(source);
            entity = 13;
            entity = zulu[entity];
            entity = oscar.bind(report)(entity);
            yankee = entity.bind(report)(tango);
            entity = 14;
            entity = zulu[entity];
            oscar = mike.bind(report)(entity);
            tango = oscar.useStageChannelStartEvent;
            entity = output.id;
            entity = tango.bind(oscar)(entity);
            sizing = entity.isLive;
            entity = 15;
            entity = zulu[entity];
            mike = mike.bind(report)(entity);
            entity = mike.getNextRecurrenceIdInEvent;
            entity = entity.bind(mike)(source);
            offset = null;
            mike = offset != entity;
            update = undefined;
            if(!mike) { _fun76050_ip = 301; continue _fun76050 }
 298:
            update = entity;
 301:
            mike = offset == kilo;
            entity = null;
            if(mike) { _fun76050_ip = 873; continue _fun76050 }
 313:
            tango = _closure1_slot8;
            zulu = _closure1_slot4;
            mike = {};
            oscar = foxtrot.container;
            mike['style'] = oscar;
            echo = _closure1_slot7;
            golf = _closure1_slot1;
            record = _closure1_slot2;
            oscar = 16;
            oscar = record[oscar];
            golf = golf.bind(report)(oscar);
            oscar = {};
            result = foxtrot.sparkle;
            oscar['style'] = result;
            result = _closure1_slot6;
            result = result.DARK;
            oscar['theme'] = result;
            golf = echo.bind(report)(golf, oscar);
            oscar = new Array(4);
            oscar[0] = golf;
            config = _closure1_slot0;
            golf = 17;
            golf = record[golf];
            golf = config.bind(report)(golf);
            result = golf.Text;
            golf = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'always-white'};
            control = foxtrot.title;
            golf['style'] = control;
            control = 18;
            vacuum = record[control];
            vacuum = config.bind(report)(vacuum);
            context = vacuum.intl;
            sequence = context.string;
            vacuum = record[control];
            vacuum = config.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.QGnDLi;
            vacuum = sequence.bind(context)(vacuum);
            golf['children'] = vacuum;
            golf = echo.bind(report)(result, golf);
            oscar[1] = golf;
            golf = 19;
            golf = record[golf];
            golf = config.bind(report)(golf);
            result = golf.LegacyText;
            golf = {};
            vacuum = foxtrot.body;
            golf['style'] = vacuum;
            vacuum = record[control];
            vacuum = config.bind(report)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.string;
            control = record[control];
            control = config.bind(report)(control);
            control = control.t;
            control = control.s/uXzs;
            control = vacuum.bind(sequence)(control);
            golf['children'] = control;
            golf = echo.bind(report)(result, golf);
            oscar[2] = golf;
            golf = {};
            foxtrot = foxtrot.prompts;
            golf['style'] = foxtrot;
            foxtrot = null;
            if(!options) { _fun76050_ip = 678; continue _fun76050 }
 608:
            options = offset != source;
            foxtrot = null;
            if(!options) { _fun76050_ip = 678; continue _fun76050 }
 617:
            echo = _closure1_slot7;
            result = _closure1_slot0;
            control = _closure1_slot2;
            options = 20;
            options = control[options];
            options = result.bind(report)(options);
            result = options.StartEventPrompt;
            options = {};
            options['channel'] = output;
            options['event'] = source;
            options['isLive'] = sizing;
            options['guild'] = kilo;
            options['recurrenceId'] = update;
            foxtrot = echo.bind(report)(result, options);
 678:
            options = new Array(4);
            options[0] = foxtrot;
            foxtrot = null;
            if(!backup) { _fun76050_ip = 738; continue _fun76050 }
 691:
            echo = _closure1_slot7;
            result = _closure1_slot0;
            update = _closure1_slot2;
            backup = 21;
            backup = update[backup];
            backup = result.bind(report)(backup);
            result = backup.StartStagePrompt;
            backup = {};
            backup['channel'] = output;
            backup['isLive'] = sizing;
            foxtrot = echo.bind(report)(result, backup);
 738:
            options[1] = foxtrot;
            offset = null;
            if(!yankee) { _fun76050_ip = 798; continue _fun76050 }
 747:
            backup = _closure1_slot7;
            foxtrot = _closure1_slot0;
            result = _closure1_slot2;
            yankee = 20;
            yankee = result[yankee];
            yankee = foxtrot.bind(report)(yankee);
            foxtrot = yankee.ScheduleEventPrompt;
            yankee = {};
            yankee['channel'] = output;
            yankee['isLive'] = sizing;
            yankee['guild'] = kilo;
            offset = backup.bind(report)(foxtrot, yankee);
 798:
            options[2] = offset;
            yankee = _closure1_slot7;
            offset = _closure1_slot0;
            foxtrot = _closure1_slot2;
            verify = 21;
            verify = foxtrot[verify];
            verify = offset.bind(report)(verify);
            offset = verify.ContinueToStagePrompt;
            verify = {};
            verify['onContinue'] = romeo;
            verify = yankee.bind(report)(offset, verify);
            options[3] = verify;
            golf['children'] = options;
            golf = tango.bind(report)(zulu, golf);
            oscar[3] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 873:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();