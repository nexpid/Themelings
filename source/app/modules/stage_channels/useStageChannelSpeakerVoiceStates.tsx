// app/modules/stage_channels/useStageChannelSpeakerVoiceStates.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = require;
    var8 = metroImportDefault;
    var3 = exports;
    var7 = dependencyMap;
    var _closure1_slot0 = var6;
    var _closure1_slot1 = var8;
    var _closure1_slot2 = var7;
    var2 = function transformParticipantToSortedVoiceState(arg1) {
        var1 = arg1;
        var5 = var1.voiceState;
        var4 = var1.userNick;
        var2 = var1.user;
        var1 = {};
        var1['user'] = var2;
        var1['voiceState'] = var5;
        var1['nick'] = var4;
        var3 = _closure1_slot6;
        var2 = undefined;
        var2 = var3.bind(var2)(var5, var4);
        var1['comparator'] = var2;
        return var1;
    };
    var _closure1_slot9 = var2;
    var1 = global;
    var10 = var1.Object;
    var9 = var10.defineProperty;
    var5 = {};
    var1 = true;
    var5['value'] = var1;
    var1 = '__esModule';
    var1 = var9.bind(var10)(var3, var1, var5);
    var1 = 0;
    var5 = var7[var1];
    var1 = undefined;
    var5 = var8.bind(var1)(var5);
    var _closure1_slot3 = var5;
    var5 = 1;
    var5 = var7[var5];
    var5 = var8.bind(var1)(var5);
    var _closure1_slot4 = var5;
    var5 = 2;
    var5 = var7[var5];
    var5 = var8.bind(var1)(var5);
    var _closure1_slot5 = var5;
    var5 = 3;
    var5 = var7[var5];
    var5 = var6.bind(var1)(var5);
    var5 = var5.getComparator;
    var _closure1_slot6 = var5;
    var5 = 4;
    var5 = var7[var5];
    var5 = var8.bind(var1)(var5);
    var _closure1_slot7 = var5;
    var5 = 5;
    var5 = var7[var5];
    var5 = var6.bind(var1)(var5);
    var5 = var5.FAVORITES;
    var _closure1_slot8 = var5;
    var5 = 11;
    var5 = var7[var5];
    var7 = var6.bind(var1)(var5);
    var6 = var7.fileFinishedImporting;
    var5 = 'modules/stage_channels/useStageChannelSpeakerVoiceStates.tsx';
    var5 = var6.bind(var7)(var5);
    var4 = function useStageChannelSpeakerVoiceStates(arg1) {
        var3 = arg1;
        var _closure2_slot0 = var3;
        var9 = _closure1_slot0;
        var10 = _closure1_slot2;
        var4 = 6;
        var5 = var10[var4];
        var4 = undefined;
        var8 = var9.bind(var4)(var5);
        var7 = var8.useStateFromStores;
        var5 = _closure1_slot7;
        var6 = new Array(3);
        var6[0] = var5;
        var5 = _closure1_slot5;
        var6[1] = var5;
        var5 = _closure1_slot4;
        var6[2] = var5;
        var5 = new Array(1);
        var5[0] = var3;
        var3 = 10;
        var3 = var10[var3];
        var3 = var9.bind(var4)(var3);
        var11 = var3.isVersionEqual;
        var13 = function() {
            _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
                var5 = _closure2_slot0;
                var4 = _closure1_slot8;
                if(!(var5 !== var4)) { _fun0001_ip = 41; continue _fun0001 }
 20:
                var5 = _closure1_slot7;
                var4 = var5.getChannels;
                var3 = _closure2_slot0;
                var5 = var4.bind(var5)(var3);
                _fun0001_ip = 153; continue _fun0001;
 41:
                var4 = _closure1_slot1;
                var8 = _closure1_slot2;
                var3 = 7;
                var3 = var8[var3];
                var7 = undefined;
                var6 = var4.bind(var7)(var3);
                var4 = var6.keys;
                var9 = _closure1_slot4;
                var3 = var9.getFavoriteChannels;
                var3 = var3.bind(var9)();
                var6 = var4.bind(var6)(var3);
                var4 = var6.map;
                var3 = function(arg1) {
                    var3 = _closure1_slot5;
                    var2 = var3.getChannel;
                    var1 = arg1;
                    var1 = var2.bind(var3)(var1);
                    return var1;
                };
                var4 = var4.bind(var6)(var3);
                var3 = var4.filter;
                var6 = _closure1_slot0;
                var1 = 8;
                var1 = var8[var1];
                var1 = var6.bind(var7)(var1);
                var1 = var1.isNotNullish;
                var4 = var3.bind(var4)(var1);
                var3 = var4.filter;
                var1 = function(arg1) {
                    var2 = arg1;
                    var1 = var2.isGuildStageVoice;
                    var1 = var1.bind(var2)();
                    return var1;
                };
                var5 = var3.bind(var4)(var1);
 153:
                var4 = var5.reduce;
                var3 = function(arg1, arg2) {
                    var1 = arg1;
                    var3 = arg2;
                    var7 = _closure1_slot7;
                    var6 = var7.getMutableParticipants;
                    var5 = var3.id;
                    var9 = _closure1_slot0;
                    var8 = _closure1_slot2;
                    var4 = 9;
                    var8 = var8[var4];
                    var4 = undefined;
                    var4 = var9.bind(var4)(var8);
                    var4 = var4.StageChannelParticipantNamedIndex;
                    var4 = var4.SPEAKER;
                    var6 = var6.bind(var7)(var5, var4);
                    var3 = var3.id;
                    var5 = var6.filter;
                    var4 = function(arg1) {
                        var1 = arg1;
                        var2 = var1.type;
                        var4 = _closure1_slot0;
                        var3 = _closure1_slot2;
                        var1 = 9;
                        var3 = var3[var1];
                        var1 = undefined;
                        var1 = var4.bind(var1)(var3);
                        var1 = var1.StageChannelParticipantTypes;
                        var1 = var1.VOICE;
                        var1 = var2 === var1;
                        return var1;
                    };
                    var5 = var5.bind(var6)(var4);
                    var4 = var5.map;
                    var2 = _closure1_slot9;
                    var2 = var4.bind(var5)(var2);
                    var1[var3] = var2;
                    return var1;
                };
                var1 = {};
                var3 = var4.bind(var5)(var3, var1);
                var1 = new Array(2);
                var1[0] = var3;
                var4 = var5.reduce;
                var3 = function(arg1, arg2) {
                    var1 = arg2;
                    var3 = var1.id;
                    var2 = _closure1_slot7;
                    var1 = var2.getParticipantsVersion;
                    var2 = var1.bind(var2)(var3);
                    var1 = arg1;
                    var1 = var1 + var2;
                    return var1;
                };
                var2 = 0;
                var2 = var4.bind(var5)(var3, var2);
                var1[1] = var2;
                return var1;
            }
        };
        var15 = var8;
        var14 = var6;
        var12 = var5;
        var3 = var15[var7](var14, var13, var12, var11, var10);
        var2 = _closure1_slot3;
        var1 = 1;
        var2 = var2.bind(var4)(var3, var1);
        var1 = 0;
        var1 = var2[var1];
        return var1;
    };
    var3['default'] = var4;
    var3['transformParticipantToSortedVoiceState'] = var2;
    return var1;
})();