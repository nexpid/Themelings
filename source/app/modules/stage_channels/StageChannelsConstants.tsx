// app/modules/stage_channels/StageChannelsConstants.tsx
export default (function(_, argBar, argBaz, __, ___, argFre, argPlu) {
    golfie = argBar;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = golfie;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = option;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, michal);
    romeon = 0;
    michal = option[romeon];
    entity = undefined;
    michal = golfie.bind(entity)(michal);
    michal = michal.HelpdeskArticles;
    var _closure1_slot3 = michal;
    report = {};
    yankee = 1;
    report['EVERYONE'] = yankee;
    michal = 'EVERYONE';
    report[yankee] = michal;
    offset = 2;
    report['NO_ONE'] = offset;
    michal = 'NO_ONE';
    report[offset] = michal;
    oscard = 3;
    report['ROLES'] = oscard;
    michal = 'ROLES';
    report[oscard] = michal;
    michal = {};
    michal['GUILD_SELECTION'] = romeon;
    verify = 'GUILD_SELECTION';
    michal[romeon] = verify;
    michal['STAGE_CHANNEL_SETTINGS'] = yankee;
    verify = 'STAGE_CHANNEL_SETTINGS';
    michal[yankee] = verify;
    michal['PUBLIC_STAGE_PREVIEW'] = offset;
    verify = 'PUBLIC_STAGE_PREVIEW';
    michal[offset] = verify;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = 'modules/stage_channels/StageChannelsConstants.tsx';
    oscard = golfie.bind(option)(oscard);
    oscard = 240;
    zuuluu['MAX_STAGE_TOPIC_LENGTH'] = oscard;
    oscard = 4;
    zuuluu['MAX_AUDIENCE_ROW_LIMIT'] = oscard;
    oscard = '834488117758001152';
    zuuluu['STAGE_APPLICATION_ID'] = oscard;
    oscard = 'request-to-speak-list';
    zuuluu['REQUEST_TO_SPEAK_SHEET_KEY'] = oscard;
    oscard = 'start-stage-channel-event';
    zuuluu['START_STAGE_CHANNEL_EVENT_SHEET_KEY'] = oscard;
    oscard = 'start-stage-channel-event-modal';
    zuuluu['START_STAGE_CHANNEL_EVENT_MODAL_KEY'] = oscard;
    oscard = 'public-stage-info-action-sheet';
    zuuluu['PUBLIC_STAGE_INFO_ACTION_SHEET_KEY'] = oscard;
    oscard = 'stage-channel-audience-notice';
    zuuluu['STAGE_AUDIENCE_NOTICE_SHEET_KEY'] = oscard;
    oscard = 'stage-channel-moderator-join';
    zuuluu['STAGE_MODERATOR_JOIN_SHEET_KEY'] = oscard;
    oscard = 'stage-channel-blocked-users';
    zuuluu['STAGE_BLOCKED_USERS_SHEET_KEY'] = oscard;
    oscard = 'stage-settings';
    zuuluu['STAGE_SETTINGS_SHEET_KEY'] = oscard;
    oscard = 'explicit-end-stage';
    zuuluu['EXPLICIT_END_STAGE_SHEET_KEY'] = oscard;
    oscard = 'stage-invite';
    zuuluu['STAGE_INVITE_STATE_KEY'] = oscard;
    oscard = 'stage-boosting';
    zuuluu['STAGE_BOOSTING_SHEET_KEY'] = oscard;
    oscard = 'stage-channel-audience-notice-shown';
    zuuluu['STAGE_AUDIENCE_NOTICE_SHOWN_STORAGE_KEY'] = oscard;
    zuuluu['RequestToSpeakPermissionStates'] = report;
    tangon = function() { // Original name: getStagePublicInfoText
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        michal = 1;
        entity = golfie[michal];
        report = undefined;
        entity = oscard.bind(report)(entity);
        tangon = entity.intl;
        zuuluu = tangon.string;
        entity = golfie[michal];
        entity = oscard.bind(report)(entity);
        entity = entity.t;
        entity = entity.9XlQ9f;
        zuuluu = zuuluu.bind(tangon)(entity);
        entity = new Array(4);
        entity[0] = zuuluu;
        zuuluu = golfie[michal];
        zuuluu = oscard.bind(report)(zuuluu);
        option = zuuluu.intl;
        tangon = option.string;
        zuuluu = golfie[michal];
        zuuluu = oscard.bind(report)(zuuluu);
        zuuluu = zuuluu.t;
        zuuluu = zuuluu.lF0IbG;
        zuuluu = tangon.bind(option)(zuuluu);
        entity[1] = zuuluu;
        zuuluu = golfie[michal];
        zuuluu = oscard.bind(report)(zuuluu);
        verify = zuuluu.intl;
        option = verify.format;
        zuuluu = golfie[michal];
        zuuluu = oscard.bind(report)(zuuluu);
        zuuluu = zuuluu.t;
        tangon = zuuluu.q2jZ6O;
        zuuluu = {};
        romeon = _closure1_slot1;
        yankee = 2;
        yankee = golfie[yankee];
        romeon = romeon.bind(report)(yankee);
        yankee = romeon.getArticleURL;
        offset = _closure1_slot3;
        offset = offset.STAGE_CHANNEL_GUIDELINES;
        offset = yankee.bind(romeon)(offset);
        zuuluu['articleURL'] = offset;
        zuuluu = option.bind(verify)(tangon, zuuluu);
        entity[2] = zuuluu;
        zuuluu = golfie[michal];
        zuuluu = oscard.bind(report)(zuuluu);
        tangon = zuuluu.intl;
        zuuluu = tangon.string;
        michal = golfie[michal];
        michal = oscard.bind(report)(michal);
        michal = michal.t;
        michal = michal.xfb7ZW;
        michal = zuuluu.bind(tangon)(michal);
        entity[3] = michal;
        return entity;
    };
    zuuluu['getStagePublicInfoText'] = tangon;
    zuuluu['StartStageSteps'] = michal;
    return entity;
})();