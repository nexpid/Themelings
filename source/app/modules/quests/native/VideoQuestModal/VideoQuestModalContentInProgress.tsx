// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.StyleSheet;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot7 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot10 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {'borderRadius': null, 'backgroundColor': null, 'flexGrow': 1, 'flexShrink': 0, 'overflow': 'hidden'};
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            golfie = 6;
            report = tangon[golfie];
            oscard = undefined;
            report = option.bind(oscard)(report);
            report = report.radii;
            report = report.xl;
            michal['borderRadius'] = report;
            report = tangon[golfie];
            report = option.bind(oscard)(report);
            report = report.colors;
            report = report.BACKGROUND_ACCENT;
            michal['backgroundColor'] = report;
            offset = 1;
            report = 0;
            entity['videoWrapper'] = michal;
            michal = {};
            verify = _closure1_slot6;
            romeon = verify.absoluteFillObject;
            foxtra = michal;
            verify = copyDataProperties(foxtra, romeon);
            yankee = 'column';
            verify = 'flexDirection';
            michal[verify] = yankee;
            yankee = 'box-none';
            verify = 'pointerEvents';
            michal[verify] = yankee;
            verify = 'flexGrow';
            michal[verify] = offset;
            verify = 'flexShrink';
            michal[verify] = report;
            offset = 'space-between';
            verify = 'justifyContent';
            michal[verify] = offset;
            verify = tangon[golfie];
            verify = option.bind(oscard)(verify);
            verify = verify.spacing;
            offset = verify.PX_16;
            verify = 'padding';
            michal[verify] = offset;
            entity['videoContentWrapper'] = michal;
            michal = {};
            verify = 'row';
            michal['flexDirection'] = verify;
            entity['videoContentHeaderWrapper'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['videoContentHeading'] = michal;
            michal = {'alignItems': 'center', 'flexDirection': 'row'};
            verify = tangon[golfie];
            verify = option.bind(oscard)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            michal['marginBottom'] = verify;
            entity['questDetails'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['questDetailsGame'] = michal;
            michal = {};
            entity['videoContentFooterWrapper'] = michal;
            michal = {'justifyContent': 'flex-end', 'flexDirection': 'row'};
            tangon = tangon[golfie];
            tangon = option.bind(oscard)(tangon);
            tangon = tangon.spacing;
            tangon = tangon.PX_24;
            michal['padding'] = tangon;
            option = argFoo;
            tangon = undefined;
            if(!option) { _fun00002_ip = 350; continue _fun00001 }
 348:
            tangon = 0;
 350:
            michal['paddingBottom'] = tangon;
            report = _closure1_slot1;
            tangon = _closure1_slot2;
            option = tangon[golfie];
            option = report.bind(oscard)(option);
            option = option.spacing;
            option = option.PX_24;
            michal['gap'] = option;
            entity['footer'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 0};
            entity['questDetailsReward'] = michal;
            michal = {};
            option = tangon[golfie];
            option = report.bind(oscard)(option);
            option = option.colors;
            option = option.TEXT_NORMAL;
            michal['color'] = option;
            entity['icon'] = michal;
            michal = {};
            tangon = tangon[golfie];
            tangon = report.bind(oscard)(tangon);
            tangon = tangon.colors;
            tangon = tangon.TEXT_SECONDARY;
            michal['color'] = tangon;
            entity['iconDisabled'] = michal;
            michal = {};
            zuuluu = _closure1_slot6;
            romeon = zuuluu.absoluteFillObject;
            foxtra = michal;
            zuuluu = copyDataProperties(foxtra, romeon);
            entity['video'] = michal;
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalContentInProgress
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            backup = michal.quest;
            var _closure2_slot0 = backup;
            entity = michal.onClose;
            var _closure2_slot1 = entity;
            zuuluu = michal.fullHeight;
            michal = _closure1_slot11;
            tangon = undefined;
            update = michal.bind(tangon)(zuuluu);
            report = _closure1_slot4;
            zuuluu = report.useState;
            michal = false;
            oscard = zuuluu.bind(report)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(oscard, michal);
            michal = 0;
            echoed = zuuluu[michal];
            michal = 1;
            michal = zuuluu[michal];
            var _closure2_slot2 = michal;
            oscard = report.useCallback;
            zuuluu = function() {
                zuuluu = _closure2_slot2;
                michal = undefined;
                entity = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            michal = new Array(0);
            sizing = oscard.bind(report)(zuuluu, michal);
            oscard = report.useCallback;
            michal = backup.id;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                offset = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 7;
                zuuluu = golfie[entity];
                entity = undefined;
                option = offset.bind(entity)(zuuluu);
                oscard = option.copyShareLink;
                report = _closure2_slot0;
                tangon = report.id;
                zuuluu = {};
                verify = 8;
                verify = golfie[verify];
                verify = offset.bind(entity)(verify);
                verify = verify.QuestContent;
                verify = verify.VIDEO_MODAL_MOBILE;
                zuuluu['content'] = verify;
                verify = 9;
                verify = golfie[verify];
                verify = offset.bind(entity)(verify);
                verify = verify.QuestContentCTA;
                verify = verify.CONTEXT_MENU_COPY_LINK;
                zuuluu['ctaContent'] = verify;
                zuuluu = oscard.bind(option)(tangon, zuuluu);
                oscard = _closure1_slot1;
                michal = 10;
                michal = golfie[michal];
                tangon = oscard.bind(entity)(michal);
                zuuluu = tangon.open;
                michal = {};
                verify = report.id;
                report = global;
                report = report.HermesInternal;
                option = report.concat;
                report = 'copy-share-link-toast-';
                report = option.bind(report)(verify);
                michal['key'] = report;
                report = 11;
                option = golfie[report];
                option = offset.bind(entity)(option);
                verify = option.intl;
                option = verify.string;
                report = golfie[report];
                report = offset.bind(entity)(report);
                report = report.t;
                report = report.t5VZ8/;
                report = option.bind(verify)(report);
                michal['content'] = report;
                report = 12;
                report = golfie[report];
                report = oscard.bind(entity)(report);
                michal['icon'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            offset = oscard.bind(report)(michal, zuuluu);
            zuuluu = report.useCallback;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure2_slot1;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            result = zuuluu.bind(report)(entity, michal);
            output = _closure1_slot0;
            source = _closure1_slot2;
            entity = 13;
            entity = source[entity];
            michal = output.bind(tangon)(entity);
            entity = michal.useQuestImpressionId;
            entity = entity.bind(michal)();
            var _closure2_slot3 = entity;
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = backup;
            michal[1] = entity;
            entity = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 7;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot0;
                michal = {};
                golfie = 8;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 9;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot3;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            sequen = zuuluu.bind(report)(entity, michal);
            entity = 14;
            entity = source[entity];
            michal = output.bind(tangon)(entity);
            entity = michal.useQuestTaskDetails;
            cntext = entity.bind(michal)(backup);
            zuuluu = _closure1_slot9;
            michal = _closure1_slot10;
            entity = {};
            golfie = _closure1_slot5;
            report = {};
            oscard = update.videoWrapper;
            report['style'] = oscard;
            kiloes = _closure1_slot8;
            oscard = 15;
            oscard = source[oscard];
            oscard = output.bind(tangon)(oscard);
            option = oscard.VideoQuestPlayer;
            oscard = {};
            oscard['quest'] = backup;
            oscard['captionsEnabled'] = echoed;
            option = kiloes.bind(tangon)(option, oscard);
            oscard = new Array(2);
            oscard[0] = option;
            option = {};
            verify = update.videoContentWrapper;
            option['style'] = verify;
            record = _closure1_slot1;
            verify = 16;
            verify = source[verify];
            yankee = record.bind(tangon)(verify);
            verify = {};
            verify['quest'] = backup;
            verify['onClose'] = result;
            yankee = kiloes.bind(tangon)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            yankee = {};
            result = update.videoContentFooterWrapper;
            yankee['style'] = result;
            result = {};
            ctrled = update.questDetails;
            result['style'] = ctrled;
            ctrled = {};
            vacuum = update.questDetailsGame;
            ctrled['style'] = vacuum;
            config = 17;
            vacuum = source[config];
            vacuum = output.bind(tangon)(vacuum);
            papara = vacuum.Text;
            vacuum = {'variant': 'heading-lg/semibold', 'color': 'white'};
            target = backup.config;
            target = target.messages;
            target = target.gameTitle;
            vacuum['children'] = target;
            papara = kiloes.bind(tangon)(papara, vacuum);
            vacuum = new Array(2);
            vacuum[0] = papara;
            config = source[config];
            config = output.bind(tangon)(config);
            papara = config.Text;
            config = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            target = backup.config;
            target = target.messages;
            target = target.gamePublisher;
            config['children'] = target;
            config = kiloes.bind(tangon)(papara, config);
            vacuum[1] = config;
            ctrled['children'] = vacuum;
            vacuum = zuuluu.bind(tangon)(golfie, ctrled);
            ctrled = new Array(2);
            ctrled[0] = vacuum;
            vacuum = {};
            config = update.questDetailsReward;
            vacuum['style'] = config;
            config = 18;
            config = source[config];
            record = record.bind(tangon)(config);
            config = {};
            config['quest'] = backup;
            papara = 'x-sm';
            config['size'] = papara;
            cntext = cntext.percentComplete;
            config['progress'] = cntext;
            cntext = true;
            config['hasConfetti'] = cntext;
            config = kiloes.bind(tangon)(record, config);
            vacuum['children'] = config;
            vacuum = kiloes.bind(tangon)(golfie, vacuum);
            ctrled[1] = vacuum;
            result['children'] = ctrled;
            ctrled = zuuluu.bind(tangon)(golfie, result);
            result = new Array(2);
            result[0] = ctrled;
            ctrled = 19;
            ctrled = source[ctrled];
            ctrled = output.bind(tangon)(ctrled);
            vacuum = ctrled.Button;
            ctrled = {};
            ctrled['onPress'] = sequen;
            sequen = 11;
            config = source[sequen];
            config = output.bind(tangon)(config);
            record = config.intl;
            config = record.string;
            sequen = source[sequen];
            sequen = output.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.hvVgAQ;
            sequen = config.bind(record)(sequen);
            ctrled['text'] = sequen;
            ctrled = kiloes.bind(tangon)(vacuum, ctrled);
            result[1] = ctrled;
            yankee['children'] = result;
            yankee = zuuluu.bind(tangon)(golfie, yankee);
            verify[1] = yankee;
            option['children'] = verify;
            option = zuuluu.bind(tangon)(golfie, option);
            oscard[1] = option;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            option = update.footer;
            oscard['style'] = option;
            verify = 20;
            option = source[verify];
            option = output.bind(tangon)(option);
            yankee = option.PressableOpacity;
            option = {};
            result = 'button';
            option['accessibilityRole'] = result;
            option['onPress'] = sizing;
            sizing = 21;
            sizing = source[sizing];
            sizing = output.bind(tangon)(sizing);
            output = sizing.CaptionIcon;
            sizing = {};
            if(echoed) { _fun00004_ip = 872; continue _fun00003 }
 859:
            echoed = update.iconDisabled;
            echoed = echoed.color;
            _fun00004_ip = 882; continue _fun00003;
 872:
            update = update.icon;
            echoed = update.color;
 882:
            sizing['color'] = echoed;
            sizing = kiloes.bind(tangon)(output, sizing);
            option['children'] = sizing;
            yankee = kiloes.bind(tangon)(yankee, option);
            option = new Array(3);
            option[0] = yankee;
            yankee = _closure1_slot8;
            output = _closure1_slot0;
            kiloes = _closure1_slot2;
            verify = kiloes[verify];
            verify = output.bind(tangon)(verify);
            sizing = verify.PressableOpacity;
            verify = {};
            verify['accessibilityRole'] = result;
            verify['onPress'] = offset;
            offset = 22;
            offset = kiloes[offset];
            offset = output.bind(tangon)(offset);
            result = offset.CopyIcon;
            output = {};
            offset = _closure1_slot1;
            echoed = 6;
            echoed = kiloes[echoed];
            echoed = offset.bind(tangon)(echoed);
            echoed = echoed.colors;
            echoed = echoed.TEXT_NORMAL;
            output['color'] = echoed;
            output = yankee.bind(tangon)(result, output);
            verify['children'] = output;
            verify = yankee.bind(tangon)(sizing, verify);
            option[1] = verify;
            verify = 23;
            verify = kiloes[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            verify['quest'] = backup;
            foxtra = _closure1_slot7;
            foxtra = foxtra.VIDEO_MODAL_MOBILE;
            verify['location'] = foxtra;
            romeon = function(argFoo) { // Original name: children
                tangon = _closure1_slot8;
                oscard = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 20;
                entity = verify[entity];
                zuuluu = undefined;
                entity = oscard.bind(zuuluu)(entity);
                michal = entity.PressableOpacity;
                entity = {};
                report = 'button';
                entity['accessibilityRole'] = report;
                offset = argFoo;
                yankee = entity;
                report = copyDataProperties(yankee, offset);
                report = 24;
                report = verify[report];
                report = oscard.bind(zuuluu)(report);
                oscard = report.MoreHorizontalIcon;
                report = {};
                option = _closure1_slot1;
                golfie = 6;
                golfie = verify[golfie];
                golfie = option.bind(zuuluu)(golfie);
                golfie = golfie.colors;
                golfie = golfie.TEXT_NORMAL;
                report['color'] = golfie;
                oscard = tangon.bind(zuuluu)(oscard, report);
                report = 'children';
                entity[report] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();