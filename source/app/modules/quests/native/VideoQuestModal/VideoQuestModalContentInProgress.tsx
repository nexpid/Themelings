// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.StyleSheet;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot7 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot10 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {'height': 210, 'position': 'relative'};
            entity['videoLandscape'] = michal;
            michal = {'borderRadius': null, 'backgroundColor': null, 'flexGrow': 1, 'flexShrink': 0, 'overflow': 'hidden'};
            option = _closure1_slot1;
            zuuluu = _closure1_slot2;
            oscard = 6;
            tangon = zuuluu[oscard];
            report = undefined;
            tangon = option.bind(report)(tangon);
            tangon = tangon.radii;
            tangon = tangon.xl;
            michal['borderRadius'] = tangon;
            tangon = zuuluu[oscard];
            tangon = option.bind(report)(tangon);
            tangon = tangon.colors;
            tangon = tangon.BACKGROUND_ACCENT;
            michal['backgroundColor'] = tangon;
            entity['videoWrapper'] = michal;
            michal = {};
            verify = zuuluu[oscard];
            verify = option.bind(report)(verify);
            verify = verify.colors;
            verify = verify.BACKGROUND_MOBILE_SECONDARY;
            michal['backgroundColor'] = verify;
            verify = zuuluu[oscard];
            verify = option.bind(report)(verify);
            verify = verify.radii;
            verify = verify.none;
            michal['borderTopLeftRadius'] = verify;
            verify = zuuluu[oscard];
            verify = option.bind(report)(verify);
            verify = verify.radii;
            verify = verify.none;
            michal['borderTopRightRadius'] = verify;
            entity['videoWrapperLandscape'] = michal;
            michal = {'flexDirection': 'column', 'pointerEvents': 'box-none', 'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'space-between'};
            verify = zuuluu[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_16;
            michal['padding'] = verify;
            entity['videoContentWrapper'] = michal;
            michal = {};
            verify = zuuluu[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            michal['paddingTop'] = verify;
            entity['videoContentWrapperLandscape'] = michal;
            michal = {};
            verify = _closure1_slot6;
            offset = verify.absoluteFillObject;
            yankee = michal;
            verify = copyDataProperties(yankee, offset);
            entity['videoContentWrapperPortrait'] = michal;
            michal = {};
            verify = 'row';
            michal['flexDirection'] = verify;
            entity['videoContentHeaderWrapper'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['videoContentHeading'] = michal;
            michal = {'alignItems': 'center', 'flexDirection': 'row'};
            verify = zuuluu[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            michal['marginBottom'] = verify;
            entity['questDetails'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['questDetailsGame'] = michal;
            michal = {'justifyContent': 'flex-end', 'flexDirection': 'row'};
            zuuluu = zuuluu[oscard];
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.spacing;
            zuuluu = zuuluu.PX_24;
            michal['padding'] = zuuluu;
            option = argFoo;
            zuuluu = undefined;
            if(!option) { _fun00002_ip = 423; continue _fun00001 }
 421:
            zuuluu = 0;
 423:
            michal['paddingBottom'] = zuuluu;
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_24;
            michal['gap'] = option;
            entity['footer'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 0};
            entity['questDetailsReward'] = michal;
            michal = {};
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.TEXT_NORMAL;
            michal['color'] = option;
            entity['icon'] = michal;
            michal = {};
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.TEXT_SECONDARY;
            michal['color'] = option;
            entity['iconDisabled'] = michal;
            michal = {};
            golfie = _closure1_slot6;
            offset = golfie.absoluteFillObject;
            yankee = michal;
            golfie = copyDataProperties(yankee, offset);
            entity['video'] = michal;
            michal = {};
            golfie = 'absolute';
            michal['position'] = golfie;
            golfie = zuuluu[oscard];
            golfie = tangon.bind(report)(golfie);
            golfie = golfie.spacing;
            golfie = golfie.PX_16;
            michal['top'] = golfie;
            zuuluu = zuuluu[oscard];
            zuuluu = tangon.bind(report)(zuuluu);
            zuuluu = zuuluu.spacing;
            zuuluu = zuuluu.PX_16;
            michal['right'] = zuuluu;
            entity['closeButtonLandscape'] = michal;
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 31;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalContentInProgress
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            kiloes = michal.quest;
            var _closure2_slot0 = kiloes;
            entity = michal.onClose;
            var _closure2_slot1 = entity;
            zuuluu = michal.fullHeight;
            limora = michal.onNavigateToPostWatchVideo;
            michal = _closure1_slot11;
            tangon = undefined;
            ctrled = michal.bind(tangon)(zuuluu);
            golfie = _closure1_slot4;
            zuuluu = golfie.useState;
            michal = false;
            report = zuuluu.bind(golfie)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(report, michal);
            michal = 0;
            source = zuuluu[michal];
            michal = 1;
            michal = zuuluu[michal];
            var _closure2_slot2 = michal;
            report = golfie.useCallback;
            zuuluu = function() {
                zuuluu = _closure2_slot2;
                michal = undefined;
                entity = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            michal = new Array(0);
            output = report.bind(golfie)(zuuluu, michal);
            report = golfie.useCallback;
            michal = kiloes.id;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                offset = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 7;
                zuuluu = golfie[entity];
                entity = undefined;
                option = offset.bind(entity)(zuuluu);
                oscard = option.copyShareLink;
                report = _closure2_slot0;
                tangon = report.id;
                zuuluu = {};
                verify = 8;
                verify = golfie[verify];
                verify = offset.bind(entity)(verify);
                verify = verify.QuestContent;
                verify = verify.VIDEO_MODAL_MOBILE;
                zuuluu['content'] = verify;
                verify = 9;
                verify = golfie[verify];
                verify = offset.bind(entity)(verify);
                verify = verify.QuestContentCTA;
                verify = verify.CONTEXT_MENU_COPY_LINK;
                zuuluu['ctaContent'] = verify;
                zuuluu = oscard.bind(option)(tangon, zuuluu);
                oscard = _closure1_slot1;
                michal = 10;
                michal = golfie[michal];
                tangon = oscard.bind(entity)(michal);
                zuuluu = tangon.open;
                michal = {};
                verify = report.id;
                report = global;
                report = report.HermesInternal;
                option = report.concat;
                report = 'copy-share-link-toast-';
                report = option.bind(report)(verify);
                michal['key'] = report;
                report = 11;
                option = golfie[report];
                option = offset.bind(entity)(option);
                verify = option.intl;
                option = verify.string;
                report = golfie[report];
                report = offset.bind(entity)(report);
                report = report.t;
                report = report.t5VZ8/;
                report = option.bind(verify)(report);
                michal['content'] = report;
                report = 12;
                report = golfie[report];
                report = oscard.bind(entity)(report);
                michal['icon'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            yankee = report.bind(golfie)(michal, zuuluu);
            zuuluu = golfie.useCallback;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure2_slot1;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            vacuum = zuuluu.bind(golfie)(entity, michal);
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 13;
            entity = zuuluu[entity];
            report = michal.bind(tangon)(entity);
            entity = report.useQuestImpressionId;
            entity = entity.bind(report)();
            var _closure2_slot3 = entity;
            oscard = golfie.useCallback;
            report = new Array(2);
            report[0] = kiloes;
            report[1] = entity;
            entity = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 7;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot0;
                michal = {};
                golfie = 8;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 9;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot3;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            whisks = oscard.bind(golfie)(entity, report);
            oscard = golfie.useCallback;
            entity = kiloes.id;
            report = new Array(1);
            report[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 14;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openRewardDetailsBottomSheet;
                michal = {};
                report = _closure2_slot0;
                report = report.id;
                michal['questId'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            sierra = oscard.bind(golfie)(entity, report);
            entity = 15;
            entity = zuuluu[entity];
            report = michal.bind(tangon)(entity);
            entity = report.useQuestTaskDetails;
            equals = entity.bind(report)(kiloes);
            entity = 7;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.getVideoOrientation;
            entity = kiloes.config;
            michal = michal.bind(zuuluu)(entity);
            entity = 'portrait';
            sequen = entity === michal;
            zuuluu = kiloes.userStatus;
            michal = null;
            report = michal == zuuluu;
            entity = undefined;
            if(report) { _fun00004_ip = 355; continue _fun00003 }
 349:
            entity = zuuluu.completedAt;
 355:
            papara = michal != entity;
            zuuluu = _closure1_slot9;
            michal = _closure1_slot10;
            entity = {};
            oscard = _closure1_slot5;
            report = {};
            option = ctrled.videoWrapper;
            golfie = new Array(2);
            golfie[0] = option;
            sizing = !sequen;
            option = sizing;
            if(sequen) { _fun00004_ip = 404; continue _fun00003 }
 398:
            option = ctrled.videoWrapperLandscape;
 404:
            golfie[1] = option;
            report['style'] = golfie;
            verify = _closure1_slot8;
            option = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = 16;
            golfie = offset[golfie];
            golfie = option.bind(tangon)(golfie);
            option = golfie.VideoQuestPlayer;
            golfie = {};
            golfie['quest'] = kiloes;
            golfie['captionsEnabled'] = source;
            offset = sizing;
            if(sequen) { _fun00004_ip = 468; continue _fun00003 }
 462:
            offset = ctrled.videoLandscape;
 468:
            golfie['style'] = offset;
            option = verify.bind(tangon)(option, golfie);
            golfie = new Array(3);
            golfie[0] = option;
            option = sizing;
            if(sequen) { _fun00004_ip = 539; continue _fun00003 }
 492:
            romeon = _closure1_slot8;
            offset = _closure1_slot1;
            result = _closure1_slot2;
            verify = 17;
            verify = result[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            verify['onClose'] = vacuum;
            result = ctrled.closeButtonLandscape;
            verify['style'] = result;
            option = romeon.bind(tangon)(offset, verify);
 539:
            golfie[1] = option;
            offset = _closure1_slot9;
            verify = _closure1_slot5;
            option = {};
            result = ctrled.videoContentWrapper;
            romeon = new Array(2);
            romeon[0] = result;
            if(sequen) { _fun00004_ip = 578; continue _fun00003 }
 570:
            result = ctrled.videoContentWrapperLandscape;
            _fun00004_ip = 584; continue _fun00003;
 578:
            result = ctrled.videoContentWrapperPortrait;
 584:
            romeon[1] = result;
            option['style'] = romeon;
            result = sequen;
            if(!sequen) { _fun00004_ip = 640; continue _fun00003 }
 598:
            update = _closure1_slot8;
            echoed = _closure1_slot1;
            config = _closure1_slot2;
            romeon = 18;
            romeon = config[romeon];
            echoed = echoed.bind(tangon)(romeon);
            romeon = {};
            romeon['quest'] = kiloes;
            romeon['onClose'] = vacuum;
            result = update.bind(tangon)(echoed, romeon);
 640:
            romeon = new Array(3);
            romeon[0] = result;
            if(sequen) { _fun00004_ip = 688; continue _fun00003 }
 651:
            update = _closure1_slot8;
            echoed = _closure1_slot1;
            vacuum = _closure1_slot2;
            result = 19;
            result = vacuum[result];
            echoed = echoed.bind(tangon)(result);
            result = {};
            result['quest'] = kiloes;
            sizing = update.bind(tangon)(echoed, result);
 688:
            romeon[1] = sizing;
            echoed = _closure1_slot9;
            result = _closure1_slot5;
            sizing = {};
            update = {};
            vacuum = ctrled.questDetails;
            update['style'] = vacuum;
            vacuum = {};
            config = ctrled.questDetailsGame;
            vacuum['style'] = config;
            target = _closure1_slot8;
            cntext = _closure1_slot0;
            status = _closure1_slot2;
            record = 20;
            config = status[record];
            config = cntext.bind(tangon)(config);
            quebec = config.Text;
            config = {'variant': 'heading-lg/semibold', 'color': 'white'};
            variable36 = kiloes.config;
            variable36 = variable36.messages;
            variable36 = variable36.gameTitle;
            config['children'] = variable36;
            quebec = target.bind(tangon)(quebec, config);
            config = new Array(2);
            config[0] = quebec;
            record = status[record];
            record = cntext.bind(tangon)(record);
            cntext = record.Text;
            record = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            status = kiloes.config;
            status = status.messages;
            status = status.gamePublisher;
            record['children'] = status;
            record = target.bind(tangon)(cntext, record);
            config[1] = record;
            vacuum['children'] = config;
            config = echoed.bind(tangon)(result, vacuum);
            vacuum = new Array(2);
            vacuum[0] = config;
            if(!sequen) { _fun00004_ip = 977; continue _fun00003 }
 884:
            cntext = _closure1_slot8;
            record = _closure1_slot5;
            config = {};
            target = ctrled.questDetailsReward;
            config['style'] = target;
            status = _closure1_slot1;
            quebec = _closure1_slot2;
            target = 21;
            target = quebec[target];
            status = status.bind(tangon)(target);
            target = {};
            target['quest'] = kiloes;
            quebec = 'x-sm';
            target['size'] = quebec;
            equals = equals.percentComplete;
            target['progress'] = equals;
            equals = true;
            target['hasConfetti'] = equals;
            target['onPress'] = sierra;
            target = cntext.bind(tangon)(status, target);
            config['children'] = target;
            sequen = cntext.bind(tangon)(record, config);
 977:
            vacuum[1] = sequen;
            update['children'] = vacuum;
            update = echoed.bind(tangon)(result, update);
            vacuum = new Array(2);
            vacuum[0] = update;
            record = _closure1_slot9;
            variable36 = _closure1_slot0;
            sierra = _closure1_slot2;
            update = 22;
            update = sierra[update];
            update = variable36.bind(tangon)(update);
            config = update.Stack;
            sequen = {};
            update = 'horizontal';
            sequen['direction'] = update;
            target = _closure1_slot1;
            update = 6;
            cntext = sierra[update];
            cntext = target.bind(tangon)(cntext);
            cntext = cntext.spacing;
            cntext = cntext.PX_16;
            sequen['spacing'] = cntext;
            status = _closure1_slot8;
            cntext = 23;
            cntext = sierra[cntext];
            cntext = variable36.bind(tangon)(cntext);
            target = cntext.Button;
            cntext = {};
            equals = true;
            cntext['grow'] = equals;
            cntext['onPress'] = whisks;
            whisks = 11;
            equals = sierra[whisks];
            equals = variable36.bind(tangon)(equals);
            quebec = equals.intl;
            equals = quebec.string;
            sierra = sierra[whisks];
            sierra = variable36.bind(tangon)(sierra);
            sierra = sierra.t;
            sierra = sierra.hvVgAQ;
            sierra = equals.bind(quebec)(sierra);
            cntext['text'] = sierra;
            target = status.bind(tangon)(target, cntext);
            cntext = new Array(2);
            cntext[0] = target;
            if(!papara) { _fun00004_ip = 1291; continue _fun00003 }
 1173:
            sierra = _closure1_slot8;
            variable37 = _closure1_slot0;
            quebec = _closure1_slot2;
            target = 24;
            target = quebec[target];
            target = variable37.bind(tangon)(target);
            status = target.IconButton;
            target = {};
            equals = quebec[whisks];
            equals = variable37.bind(tangon)(equals);
            variable36 = equals.intl;
            equals = variable36.string;
            whisks = quebec[whisks];
            whisks = variable37.bind(tangon)(whisks);
            whisks = whisks.t;
            whisks = whisks.YsCuyM;
            whisks = equals.bind(variable36)(whisks);
            target['accessibilityLabel'] = whisks;
            equals = _closure1_slot1;
            whisks = 25;
            whisks = quebec[whisks];
            whisks = equals.bind(tangon)(whisks);
            target['icon'] = whisks;
            target['onPress'] = limora;
            limora = 'secondary';
            target['variant'] = limora;
            papara = sierra.bind(tangon)(status, target);
 1291:
            cntext[1] = papara;
            sequen['children'] = cntext;
            sequen = record.bind(tangon)(config, sequen);
            vacuum[1] = sequen;
            sizing['children'] = vacuum;
            sizing = echoed.bind(tangon)(result, sizing);
            romeon[2] = sizing;
            option['children'] = romeon;
            option = offset.bind(tangon)(verify, option);
            golfie[2] = option;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot9;
            golfie = _closure1_slot5;
            oscard = {};
            verify = ctrled.footer;
            oscard['style'] = verify;
            sizing = _closure1_slot8;
            result = _closure1_slot0;
            vacuum = _closure1_slot2;
            offset = 26;
            verify = vacuum[offset];
            verify = result.bind(tangon)(verify);
            romeon = verify.PressableOpacity;
            verify = {};
            echoed = 'button';
            verify['accessibilityRole'] = echoed;
            verify['onPress'] = output;
            output = 27;
            output = vacuum[output];
            output = result.bind(tangon)(output);
            result = output.CaptionIcon;
            output = {};
            if(source) { _fun00004_ip = 1455; continue _fun00003 }
 1442:
            source = ctrled.iconDisabled;
            source = source.color;
            _fun00004_ip = 1465; continue _fun00003;
 1455:
            ctrled = ctrled.icon;
            source = ctrled.color;
 1465:
            output['color'] = source;
            output = sizing.bind(tangon)(result, output);
            verify['children'] = output;
            romeon = sizing.bind(tangon)(romeon, verify);
            verify = new Array(3);
            verify[0] = romeon;
            romeon = _closure1_slot8;
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = sizing[offset];
            offset = result.bind(tangon)(offset);
            output = offset.PressableOpacity;
            offset = {};
            offset['accessibilityRole'] = echoed;
            offset['onPress'] = yankee;
            yankee = 28;
            yankee = sizing[yankee];
            yankee = result.bind(tangon)(yankee);
            echoed = yankee.CopyIcon;
            result = {};
            yankee = _closure1_slot1;
            update = sizing[update];
            update = yankee.bind(tangon)(update);
            update = update.colors;
            update = update.TEXT_NORMAL;
            result['color'] = update;
            result = romeon.bind(tangon)(echoed, result);
            offset['children'] = result;
            offset = romeon.bind(tangon)(output, offset);
            verify[1] = offset;
            offset = 29;
            offset = sizing[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            offset['quest'] = kiloes;
            backup = _closure1_slot7;
            backup = backup.VIDEO_MODAL_MOBILE;
            offset['location'] = backup;
            foxtra = function(argFoo) { // Original name: children
                tangon = _closure1_slot8;
                oscard = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 26;
                entity = verify[entity];
                zuuluu = undefined;
                entity = oscard.bind(zuuluu)(entity);
                michal = entity.PressableOpacity;
                entity = {};
                report = 'button';
                entity['accessibilityRole'] = report;
                offset = argFoo;
                yankee = entity;
                report = copyDataProperties(yankee, offset);
                report = 30;
                report = verify[report];
                report = oscard.bind(zuuluu)(report);
                oscard = report.MoreHorizontalIcon;
                report = {};
                option = _closure1_slot1;
                golfie = 6;
                golfie = verify[golfie];
                golfie = option.bind(zuuluu)(golfie);
                golfie = golfie.colors;
                golfie = golfie.TEXT_NORMAL;
                report['color'] = golfie;
                oscard = tangon.bind(zuuluu)(oscard, report);
                report = 'children';
                entity[report] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();