// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.StyleSheet;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot8 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            verify = 1;
            michal = {'flex': 1, 'justifyContent': 'space-between'};
            entity['wrapper'] = michal;
            michal = {'aspectRatio': 1.7777777777777777, 'width': '100%', 'position': 'relative'};
            entity['videoLandscape'] = michal;
            michal = {'borderRadius': null, 'flexGrow': 0, 'flexShrink': 0, 'overflow': 'hidden'};
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            oscard = 6;
            zuuluu = tangon[oscard];
            report = undefined;
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderRadius'] = zuuluu;
            zuuluu = 0;
            entity['videoWrapper'] = michal;
            michal = {};
            michal['flexGrow'] = verify;
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.radii;
            offset = offset.none;
            michal['borderTopLeftRadius'] = offset;
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.radii;
            offset = offset.none;
            michal['borderTopRightRadius'] = offset;
            entity['videoWrapperLandscape'] = michal;
            michal = {'flexDirection': 'column', 'pointerEvents': 'box-none', 'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'space-between'};
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.spacing;
            offset = offset.PX_16;
            michal['padding'] = offset;
            entity['videoContentWrapper'] = michal;
            michal = {};
            michal['padding'] = zuuluu;
            entity['videoContentWrapperLandscape'] = michal;
            michal = {};
            offset = _closure1_slot6;
            romeon = offset.absoluteFillObject;
            foxtra = michal;
            yankee = copyDataProperties(foxtra, romeon);
            entity['videoContentWrapperPortrait'] = michal;
            michal = {};
            yankee = 'row';
            michal['flexDirection'] = yankee;
            entity['videoContentHeaderWrapper'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['videoContentHeading'] = michal;
            yankee = 'center';
            michal = {'justifyContent': 'center', 'flex': 1};
            entity['rewardContainer'] = michal;
            michal = {};
            romeon = offset.absoluteFillObject;
            foxtra = michal;
            offset = copyDataProperties(foxtra, romeon);
            offset = 'alignItems';
            michal[offset] = yankee;
            offset = 'justifyContent';
            michal[offset] = yankee;
            entity['rewardContentCentered'] = michal;
            michal = {};
            michal['borderTopWidth'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.colors;
            verify = verify.BACKGROUND_ACCENT;
            michal['borderColor'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_16;
            michal['paddingHorizontal'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            michal['paddingTop'] = verify;
            entity['questDetailsLandscape'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 1};
            entity['questDetailsPrimary'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 0};
            entity['questDetailsSecondary'] = michal;
            michal = {};
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.colors;
            verify = verify.BACKGROUND_ACCENT;
            michal['backgroundColor'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.radii;
            verify = verify.round;
            michal['borderRadius'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_8;
            michal['padding'] = verify;
            entity['questDetailsSecondaryButton'] = michal;
            michal = {'justifyContent': 'flex-end', 'flexDirection': 'row'};
            tangon = tangon[oscard];
            tangon = option.bind(report)(tangon);
            tangon = tangon.spacing;
            tangon = tangon.PX_24;
            michal['padding'] = tangon;
            tangon = argFoo;
            if(!tangon) { _fun00002_ip = 602; continue _fun00001 }
 575:
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            tangon = tangon[oscard];
            tangon = option.bind(report)(tangon);
            tangon = tangon.spacing;
            zuuluu = tangon.PX_16;
 602:
            michal['paddingBottom'] = zuuluu;
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_24;
            michal['gap'] = option;
            entity['footer'] = michal;
            michal = {};
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.INTERACTIVE_ACTIVE;
            michal['color'] = option;
            entity['icon'] = michal;
            michal = {};
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.INTERACTIVE_NORMAL;
            michal['color'] = option;
            entity['iconDisabled'] = michal;
            michal = {};
            golfie = _closure1_slot6;
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            option = copyDataProperties(foxtra, romeon);
            entity['video'] = michal;
            michal = {};
            option = 'absolute';
            michal['position'] = option;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_16;
            michal['top'] = option;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_16;
            michal['left'] = option;
            entity['closeButtonLandscape'] = michal;
            michal = {};
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            option = copyDataProperties(foxtra, romeon);
            option = 'bottom';
            michal[option] = report;
            verify = 70;
            option = 'height';
            michal[option] = verify;
            entity['gradientTop'] = michal;
            michal = {};
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            golfie = copyDataProperties(foxtra, romeon);
            golfie = 'top';
            michal[golfie] = report;
            golfie = 150;
            michal[option] = golfie;
            entity['gradientBottom'] = michal;
            michal = {'margin': 4294967281, 'padding': 15, 'textShadowColor': null, 'textShadowOffset': null, 'textShadowRadius': 15};
            golfie = zuuluu[oscard];
            golfie = tangon.bind(report)(golfie);
            golfie = golfie.colors;
            golfie = golfie.BLACK;
            michal['textShadowColor'] = golfie;
            golfie = {'width': 0, 'height': 0};
            michal['textShadowOffset'] = golfie;
            entity['textShadow'] = michal;
            michal = {'borderRadius': null, 'flexGrow': 1, 'flexShrink': 1};
            golfie = zuuluu[oscard];
            golfie = tangon.bind(report)(golfie);
            golfie = golfie.radii;
            golfie = golfie.round;
            michal['borderRadius'] = golfie;
            entity['ctaPrimary'] = michal;
            michal = {'borderRadius': null, 'height': 96, 'width': '100%'};
            zuuluu = zuuluu[oscard];
            zuuluu = tangon.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderRadius'] = zuuluu;
            entity['playerThumbnail'] = michal;
            michal = {};
            zuuluu = -1;
            michal['zIndex'] = zuuluu;
            entity['cloudsBackground'] = michal;
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentInProgressTsx1(){const{withDelay,LOGO_REWARD_TRANSITION_DELAY_MS,withTiming,isComponentMounted,LOGO_REWARD_TRANSITION_DURATION_MS}=this.__closure;return withDelay(LOGO_REWARD_TRANSITION_DELAY_MS,withTiming(isComponentMounted.get(),{duration:LOGO_REWARD_TRANSITION_DURATION_MS}));}';
    tangon['code'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentInProgressTsx2(){const{animation}=this.__closure;return{opacity:animation.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot12 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentInProgressTsx3(){const{animation}=this.__closure;return{opacity:1-animation.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot13 = tangon;
    tangon = {};
    golfie = "function VideoQuestModalContentInProgressTsx4(){const{animation}=this.__closure;return{pointerEvents:animation.get()>0.3?'auto':'none'};}";
    tangon['code'] = golfie;
    var _closure1_slot14 = tangon;
    tangon = function(argFoo) { // Original name: LandscapeLayout
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            update = michal.quest;
            var _closure2_slot0 = update;
            foxtra = michal.captionsEnabled;
            yankee = michal.handleClose;
            config = michal.handlePrimaryCtaPress;
            ctrled = michal.handleShareQuest;
            romeon = michal.handleOpenTranscript;
            offset = michal.handleToggleCaptions;
            vacuum = michal.onNavigateToPostWatchVideo;
            tangon = undefined;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            zuuluu = _closure1_slot10;
            report = _closure1_slot0;
            oscard = _closure1_slot2;
            michal = 7;
            michal = oscard[michal];
            report = report.bind(tangon)(michal);
            michal = report.isAndroid;
            michal = michal.bind(report)();
            source = zuuluu.bind(tangon)(michal);
            oscard = _closure1_slot4;
            report = oscard.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = update;
            michal = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 8;
                michal = golfie[entity];
                report = undefined;
                tangon = oscard.bind(report)(michal);
                zuuluu = tangon.getQuestAsset;
                michal = _closure2_slot0;
                entity = golfie[entity];
                entity = oscard.bind(report)(entity);
                entity = entity.QuestAssetType;
                entity = entity.HERO;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            target = report.bind(oscard)(michal, zuuluu);
            zuuluu = update.userStatus;
            kiloes = null;
            report = kiloes == zuuluu;
            michal = undefined;
            if(report) { _fun00004_ip = 161; continue _fun00003 }
 155:
            michal = zuuluu.completedAt;
 161:
            result = kiloes != michal;
            golfie = _closure1_slot4;
            zuuluu = golfie.useContext;
            whisks = _closure1_slot0;
            sierra = _closure1_slot2;
            michal = 9;
            michal = sierra[michal];
            michal = whisks.bind(tangon)(michal);
            michal = michal.QuestDockGestureContext;
            michal = zuuluu.bind(golfie)(michal);
            cntext = michal.windowDimensions;
            michal = 10;
            zuuluu = sierra[michal];
            oscard = whisks.bind(tangon)(zuuluu);
            report = oscard.useSharedValue;
            zuuluu = 0;
            option = report.bind(oscard)(zuuluu);
            _closure2_slot1 = option;
            oscard = golfie.useEffect;
            report = new Array(1);
            report[0] = option;
            zuuluu = function() {
                zuuluu = _closure2_slot1;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            zuuluu = oscard.bind(golfie)(zuuluu, report);
            zuuluu = sierra[michal];
            oscard = whisks.bind(tangon)(zuuluu);
            report = oscard.useDerivedValue;
            zuuluu = function() { // Original name: L
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 10;
                entity = oscard[entity];
                michal = undefined;
                tangon = report.bind(michal)(entity);
                zuuluu = tangon.withDelay;
                entity = 11;
                entity = oscard[entity];
                oscard = report.bind(michal)(entity);
                report = oscard.withTiming;
                michal = _closure2_slot1;
                entity = michal.get;
                michal = entity.bind(michal)();
                entity = {};
                golfie = 1000;
                entity['duration'] = golfie;
                michal = report.bind(oscard)(michal, entity);
                entity = 3000;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            golfie = {};
            verify = sierra[michal];
            verify = whisks.bind(tangon)(verify);
            verify = verify.withDelay;
            golfie['withDelay'] = verify;
            verify = 3000;
            golfie['LOGO_REWARD_TRANSITION_DELAY_MS'] = verify;
            verify = 11;
            verify = sierra[verify];
            verify = whisks.bind(tangon)(verify);
            verify = verify.withTiming;
            golfie['withTiming'] = verify;
            golfie['isComponentMounted'] = option;
            option = 1000;
            golfie['LOGO_REWARD_TRANSITION_DURATION_MS'] = option;
            zuuluu['__closure'] = golfie;
            golfie = 12561024953493.0;
            zuuluu['__workletHash'] = golfie;
            golfie = _closure1_slot11;
            zuuluu['__initData'] = golfie;
            oscard = report.bind(oscard)(zuuluu);
            _closure2_slot2 = oscard;
            zuuluu = sierra[michal];
            golfie = whisks.bind(tangon)(zuuluu);
            report = golfie.useAnimatedStyle;
            zuuluu = function() { // Original name: R
                entity = {};
                zuuluu = _closure2_slot2;
                michal = zuuluu.get;
                michal = michal.bind(zuuluu)();
                entity['opacity'] = michal;
                return entity;
            };
            option = {};
            option['animation'] = oscard;
            zuuluu['__closure'] = option;
            option = 17463485679217.0;
            zuuluu['__workletHash'] = option;
            option = _closure1_slot12;
            zuuluu['__initData'] = option;
            output = report.bind(golfie)(zuuluu);
            zuuluu = sierra[michal];
            golfie = whisks.bind(tangon)(zuuluu);
            report = golfie.useAnimatedStyle;
            zuuluu = function() { // Original name: E
                entity = {};
                zuuluu = _closure2_slot2;
                michal = zuuluu.get;
                zuuluu = michal.bind(zuuluu)();
                michal = 1;
                michal = michal - zuuluu;
                entity['opacity'] = michal;
                return entity;
            };
            option = {};
            option['animation'] = oscard;
            zuuluu['__closure'] = option;
            option = 9103187579788.0;
            zuuluu['__workletHash'] = option;
            option = _closure1_slot13;
            zuuluu['__initData'] = option;
            record = report.bind(golfie)(zuuluu);
            michal = sierra[michal];
            zuuluu = whisks.bind(tangon)(michal);
            michal = zuuluu.useAnimatedProps;
            entity = function() { // Original name: M
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = {};
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.get;
                    zuuluu = michal.bind(zuuluu)();
                    michal = 0.3;
                    zuuluu = zuuluu > michal;
                    michal = 'none';
                    if(!zuuluu) { _fun00006_ip = 43; continue _fun00005 }
 39:
                    michal = 'auto';
 43:
                    entity['pointerEvents'] = michal;
                    return entity;
                }
            };
            report = {};
            report['animation'] = oscard;
            entity['__closure'] = report;
            report = 11833431315705.0;
            entity['__workletHash'] = report;
            report = _closure1_slot14;
            entity['__initData'] = report;
            backup = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot8;
            entity = 12;
            entity = sierra[entity];
            entity = whisks.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = source.wrapper;
            entity['style'] = report;
            golfie = _closure1_slot9;
            oscard = _closure1_slot5;
            report = {};
            verify = source.videoWrapper;
            option = new Array(2);
            option[0] = verify;
            verify = source.videoWrapperLandscape;
            option[1] = verify;
            report['style'] = option;
            option = 13;
            option = sierra[option];
            option = whisks.bind(tangon)(option);
            verify = option.VideoQuestPlayer;
            option = {};
            option['captionsEnabled'] = foxtra;
            foxtra = 'landscape';
            option['orientation'] = foxtra;
            foxtra = source.videoLandscape;
            option['style'] = foxtra;
            sizing = 16;
            foxtra = {'bottom': 16, 'left': 16, 'right': 16};
            option['safeAreaInsets'] = foxtra;
            option['handleOpenTranscript'] = romeon;
            option['handleToggleCaptions'] = offset;
            verify = zuuluu.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            status = _closure1_slot1;
            verify = 14;
            verify = sierra[verify];
            offset = status.bind(tangon)(verify);
            verify = {};
            verify['onClose'] = yankee;
            yankee = source.closeButtonLandscape;
            verify['style'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[1] = verify;
            verify = {};
            yankee = source.videoContentWrapper;
            offset = new Array(2);
            offset[0] = yankee;
            yankee = source.videoContentWrapperLandscape;
            offset[1] = yankee;
            verify['style'] = offset;
            offset = {};
            yankee = source.rewardContainer;
            offset['style'] = yankee;
            romeon = 15;
            yankee = sierra[romeon];
            foxtra = status.bind(tangon)(yankee);
            yankee = {};
            papara = source.rewardContentCentered;
            echoed = new Array(2);
            echoed[0] = papara;
            echoed[1] = record;
            yankee['style'] = echoed;
            echoed = 'none';
            yankee['pointerEvents'] = echoed;
            sizing = sierra[sizing];
            echoed = status.bind(tangon)(sizing);
            sizing = {};
            record = 8;
            papara = sierra[record];
            equals = whisks.bind(tangon)(papara);
            limora = equals.getQuestAsset;
            record = sierra[record];
            record = whisks.bind(tangon)(record);
            record = record.QuestAssetType;
            papara = record.LOGO_TYPE;
            record = 'dark';
            record = limora.bind(equals)(update, papara, record);
            record = record.url;
            sizing['assetUrl'] = record;
            record = 90;
            sizing['maxHeight'] = record;
            record = cntext.get;
            record = record.bind(cntext)();
            cntext = record.width;
            record = 120;
            record = cntext - record;
            sizing['maxWidth'] = record;
            sizing = zuuluu.bind(tangon)(echoed, sizing);
            yankee['children'] = sizing;
            foxtra = zuuluu.bind(tangon)(foxtra, yankee);
            yankee = new Array(2);
            yankee[0] = foxtra;
            romeon = sierra[romeon];
            foxtra = status.bind(tangon)(romeon);
            romeon = {};
            echoed = source.rewardContentCentered;
            sizing = new Array(2);
            sizing[0] = echoed;
            sizing[1] = output;
            romeon['style'] = sizing;
            romeon['animatedProps'] = backup;
            backup = 17;
            backup = sierra[backup];
            sizing = status.bind(tangon)(backup);
            backup = {};
            backup = zuuluu.bind(tangon)(sizing, backup);
            romeon['children'] = backup;
            romeon = zuuluu.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            offset['children'] = yankee;
            yankee = golfie.bind(tangon)(oscard, offset);
            offset = new Array(3);
            offset[0] = yankee;
            yankee = 18;
            yankee = sierra[yankee];
            romeon = status.bind(tangon)(yankee);
            yankee = {};
            foxtra = 'top';
            yankee['align'] = foxtra;
            foxtra = source.cloudsBackground;
            yankee['style'] = foxtra;
            yankee = zuuluu.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            backup = 19;
            yankee = sierra[backup];
            yankee = whisks.bind(tangon)(yankee);
            romeon = yankee.Stack;
            yankee = {};
            foxtra = 'vertical';
            yankee['direction'] = foxtra;
            output = 6;
            foxtra = sierra[output];
            foxtra = status.bind(tangon)(foxtra);
            foxtra = foxtra.spacing;
            foxtra = foxtra.PX_24;
            yankee['spacing'] = foxtra;
            foxtra = source.questDetailsLandscape;
            yankee['style'] = foxtra;
            foxtra = sierra[backup];
            foxtra = whisks.bind(tangon)(foxtra);
            sizing = foxtra.Stack;
            foxtra = {'direction': 'horizontal', 'justify': 'space-between'};
            echoed = 'horizontal';
            record = sierra[output];
            record = status.bind(tangon)(record);
            record = record.spacing;
            record = record.PX_8;
            foxtra['spacing'] = record;
            record = 20;
            record = sierra[record];
            record = whisks.bind(tangon)(record);
            cntext = record.PressableOpacity;
            record = {};
            papara = source.questDetailsPrimary;
            record['style'] = papara;
            record['onPress'] = config;
            limora = 21;
            papara = sierra[limora];
            papara = whisks.bind(tangon)(papara);
            equals = papara.Text;
            papara = {'variant': 'heading-lg/semibold', 'color': 'white'};
            quebec = update.config;
            quebec = quebec.messages;
            quebec = quebec.gameTitle;
            papara['children'] = quebec;
            equals = zuuluu.bind(tangon)(equals, papara);
            papara = new Array(2);
            papara[0] = equals;
            limora = sierra[limora];
            limora = whisks.bind(tangon)(limora);
            whisks = limora.Text;
            limora = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            equals = update.config;
            equals = equals.messages;
            equals = equals.gamePublisher;
            limora['children'] = equals;
            limora = zuuluu.bind(tangon)(whisks, limora);
            papara[1] = limora;
            record['children'] = papara;
            cntext = golfie.bind(tangon)(cntext, record);
            record = new Array(2);
            record[0] = cntext;
            cntext = {};
            papara = source.questDetailsSecondary;
            cntext['style'] = papara;
            papara = 22;
            papara = sierra[papara];
            status = status.bind(tangon)(papara);
            papara = {};
            papara['quest'] = update;
            sierra = _closure1_slot7;
            sierra = sierra.VIDEO_MODAL_MOBILE;
            papara['location'] = sierra;
            papara = zuuluu.bind(tangon)(status, papara);
            cntext['children'] = papara;
            cntext = zuuluu.bind(tangon)(oscard, cntext);
            record[1] = cntext;
            foxtra['children'] = record;
            sizing = golfie.bind(tangon)(sizing, foxtra);
            foxtra = new Array(3);
            foxtra[0] = sizing;
            kiloes = kiloes != target;
            if(!kiloes) { _fun00004_ip = 1608; continue _fun00003 }
 1551:
            cntext = _closure1_slot8;
            record = _closure1_slot1;
            papara = _closure1_slot2;
            sizing = 23;
            sizing = papara[sizing];
            record = record.bind(tangon)(sizing);
            sizing = {};
            papara = {};
            target = target.url;
            papara['uri'] = target;
            sizing['source'] = papara;
            papara = source.playerThumbnail;
            sizing['style'] = papara;
            kiloes = cntext.bind(tangon)(record, sizing);
 1608:
            foxtra[1] = kiloes;
            sizing = _closure1_slot9;
            limora = _closure1_slot0;
            target = _closure1_slot2;
            backup = target[backup];
            backup = limora.bind(tangon)(backup);
            kiloes = backup.Stack;
            backup = {};
            backup['direction'] = echoed;
            papara = _closure1_slot1;
            output = target[output];
            output = papara.bind(tangon)(output);
            output = output.spacing;
            output = output.PX_16;
            backup['spacing'] = output;
            record = _closure1_slot8;
            output = 24;
            output = target[output];
            echoed = papara.bind(tangon)(output);
            output = {};
            output['onPress'] = config;
            source = source.ctaPrimary;
            output['style'] = source;
            source = 25;
            source = target[source];
            config = limora.bind(tangon)(source);
            source = config.getVideoQuestEndCardCtaText;
            update = update.config;
            update = source.bind(config)(update);
            output['text'] = update;
            echoed = record.bind(tangon)(echoed, output);
            output = new Array(3);
            output[0] = echoed;
            echoed = 26;
            update = target[echoed];
            update = limora.bind(tangon)(update);
            source = update.IconButton;
            update = {};
            config = 27;
            cntext = target[config];
            cntext = limora.bind(tangon)(cntext);
            sierra = cntext.intl;
            status = sierra.string;
            cntext = target[config];
            cntext = limora.bind(tangon)(cntext);
            cntext = cntext.t;
            cntext = cntext.Ej3B3d;
            cntext = status.bind(sierra)(cntext);
            update['accessibilityLabel'] = cntext;
            cntext = 28;
            cntext = target[cntext];
            cntext = papara.bind(tangon)(cntext);
            update['icon'] = cntext;
            update['onPress'] = ctrled;
            ctrled = 'secondary';
            update['variant'] = ctrled;
            update = record.bind(tangon)(source, update);
            output[1] = update;
            if(!result) { _fun00004_ip = 1974; continue _fun00003 }
 1863:
            source = _closure1_slot8;
            target = _closure1_slot0;
            record = _closure1_slot2;
            echoed = record[echoed];
            echoed = target.bind(tangon)(echoed);
            update = echoed.IconButton;
            echoed = {};
            cntext = record[config];
            cntext = target.bind(tangon)(cntext);
            papara = cntext.intl;
            cntext = papara.string;
            config = record[config];
            config = target.bind(tangon)(config);
            config = config.t;
            config = config.cfY4PD;
            config = cntext.bind(papara)(config);
            echoed['accessibilityLabel'] = config;
            config = _closure1_slot1;
            sequen = 29;
            sequen = record[sequen];
            sequen = config.bind(tangon)(sequen);
            echoed['icon'] = sequen;
            echoed['onPress'] = vacuum;
            echoed['variant'] = ctrled;
            result = source.bind(tangon)(update, echoed);
 1974:
            output[2] = result;
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[2] = backup;
            yankee['children'] = foxtra;
            yankee = golfie.bind(tangon)(romeon, yankee);
            offset[2] = yankee;
            verify['children'] = offset;
            verify = golfie.bind(tangon)(oscard, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot15 = tangon;
    tangon = function(argFoo) { // Original name: PortraitLayout
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            kiloes = entity.quest;
            vacuum = entity.captionsEnabled;
            output = entity.handleClose;
            status = entity.handlePrimaryCtaPress;
            variable38 = entity.handleRewardDetailsPress;
            yankee = entity.handleShareQuest;
            sizing = entity.handleOpenTranscript;
            result = entity.handleToggleCaptions;
            sierra = entity.onNavigateToPostWatchVideo;
            tangon = undefined;
            var _closure2_slot0 = tangon;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            var _closure2_slot3 = tangon;
            var _closure2_slot4 = tangon;
            var _closure2_slot5 = tangon;
            report = _closure1_slot10;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 7;
            entity = zuuluu[entity];
            oscard = michal.bind(tangon)(entity);
            entity = oscard.isAndroid;
            entity = entity.bind(oscard)();
            sequen = report.bind(tangon)(entity);
            entity = 30;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useQuestTaskDetails;
            variable40 = entity.bind(michal)(kiloes);
            michal = kiloes.userStatus;
            romeon = null;
            zuuluu = romeon == michal;
            entity = undefined;
            if(zuuluu) { _fun00008_ip = 172; continue _fun00007 }
 166:
            entity = michal.completedAt;
 172:
            cntext = romeon != entity;
            report = _closure1_slot4;
            michal = report.useContext;
            limora = _closure1_slot0;
            whisks = _closure1_slot2;
            entity = 9;
            entity = whisks[entity];
            entity = limora.bind(tangon)(entity);
            entity = entity.QuestDockGestureContext;
            entity = michal.bind(report)(entity);
            oscard = entity.windowDimensions;
            _closure2_slot0 = oscard;
            entity = report.useState;
            entity = entity.bind(report)(romeon);
            verify = _closure1_slot3;
            golfie = 2;
            entity = verify.bind(tangon)(entity, golfie);
            config = 0;
            option = entity[config];
            _closure2_slot1 = option;
            zuuluu = 1;
            entity = entity[zuuluu];
            _closure2_slot2 = entity;
            offset = report.useCallback;
            michal = new Array(1);
            michal[0] = oscard;
            entity = function(argFoo) {
                entity = argFoo;
                michal = entity.naturalSize;
                michal = michal.width;
                entity = entity.naturalSize;
                entity = entity.height;
                report = michal / entity;
                zuuluu = _closure2_slot0;
                entity = zuuluu.get;
                entity = entity.bind(zuuluu)();
                entity = entity.width;
                zuuluu = _closure2_slot2;
                michal = global;
                tangon = michal.Math;
                michal = tangon.floor;
                entity = entity / report;
                michal = michal.bind(tangon)(entity);
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            offset = offset.bind(report)(entity, michal);
            papara = _closure1_slot1;
            entity = 31;
            entity = whisks[entity];
            entity = papara.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            _closure2_slot3 = entity;
            michal = report.useState;
            michal = michal.bind(report)(romeon);
            michal = verify.bind(tangon)(michal, golfie);
            golfie = michal[config];
            _closure2_slot4 = golfie;
            michal = michal[zuuluu];
            _closure2_slot5 = michal;
            verify = report.useCallback;
            zuuluu = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                zuuluu = entity.height;
                michal = _closure2_slot5;
                entity = undefined;
                michal = michal.bind(entity)(zuuluu);
                return entity;
            };
            michal = new Array(0);
            verify = verify.bind(report)(zuuluu, michal);
            zuuluu = report.useMemo;
            michal = new Array(4);
            michal[0] = option;
            michal[1] = golfie;
            michal[2] = oscard;
            michal[3] = entity;
            entity = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    michal = _closure2_slot1;
                    zuuluu = null;
                    if(!(zuuluu != michal)) { _fun00010_ip = 21; continue _fun00009 }
 13:
                    michal = _closure2_slot4;
                    if(!(zuuluu == michal)) { _fun00010_ip = 25; continue _fun00009 }
 21:
                    michal = undefined;
                    return michal;
 25:
                    michal = global;
                    tangon = michal.Math;
                    zuuluu = tangon.min;
                    report = _closure2_slot0;
                    michal = report.get;
                    michal = michal.bind(report)();
                    report = michal.height;
                    michal = _closure2_slot3;
                    michal = michal.top;
                    report = report - michal;
                    michal = _closure2_slot3;
                    michal = michal.bottom;
                    report = report - michal;
                    michal = _closure2_slot4;
                    michal = report - michal;
                    entity = _closure2_slot1;
                    entity = zuuluu.bind(tangon)(michal, entity);
                    return entity;
                }
            };
            romeon = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot9;
            entity = 12;
            entity = whisks[entity];
            entity = limora.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            variable39 = true;
            entity['bottom'] = variable39;
            report = sequen.wrapper;
            entity['style'] = report;
            oscard = _closure1_slot5;
            report = {};
            option = sequen.videoWrapper;
            golfie = new Array(2);
            golfie[0] = option;
            option = {};
            option['height'] = romeon;
            golfie[1] = option;
            report['style'] = golfie;
            target = _closure1_slot8;
            golfie = 13;
            golfie = whisks[golfie];
            golfie = limora.bind(tangon)(golfie);
            option = golfie.VideoQuestPlayer;
            golfie = {};
            golfie['captionsEnabled'] = vacuum;
            golfie['onLoad'] = offset;
            offset = 'portrait';
            golfie['orientation'] = offset;
            offset = {'bottom': 158, 'left': 16, 'right': 16};
            golfie['safeAreaInsets'] = offset;
            golfie['handleOpenTranscript'] = sizing;
            golfie['handleToggleCaptions'] = result;
            option = target.bind(tangon)(option, golfie);
            golfie = new Array(4);
            golfie[0] = option;
            option = 32;
            offset = whisks[option];
            romeon = papara.bind(tangon)(offset);
            offset = {};
            echoed = {'x': 0, 'y': 0};
            offset['start'] = echoed;
            echoed = {'x': 0, 'y': 1};
            offset['end'] = echoed;
            echoed = sequen.gradientTop;
            offset['style'] = echoed;
            echoed = 33;
            update = whisks[echoed];
            ctrled = papara.bind(tangon)(update);
            update = 6;
            source = whisks[update];
            source = papara.bind(tangon)(source);
            source = source.unsafe_rawColors;
            source = source.PLUM_23;
            record = ctrled.bind(tangon)(source);
            source = record.alpha;
            ctrled = 0.4;
            record = source.bind(record)(ctrled);
            source = record.hex;
            record = source.bind(record)();
            source = new Array(2);
            source[0] = record;
            record = whisks[echoed];
            equals = papara.bind(tangon)(record);
            record = whisks[update];
            record = papara.bind(tangon)(record);
            record = record.unsafe_rawColors;
            record = record.PLUM_23;
            equals = equals.bind(tangon)(record);
            record = equals.alpha;
            equals = record.bind(equals)(config);
            record = equals.hex;
            record = record.bind(equals)();
            source[1] = record;
            offset['colors'] = source;
            offset = target.bind(tangon)(romeon, offset);
            golfie[1] = offset;
            option = whisks[option];
            offset = papara.bind(tangon)(option);
            option = {};
            romeon = {'x': 0, 'y': 0};
            option['start'] = romeon;
            romeon = {'x': 0, 'y': 1};
            option['end'] = romeon;
            romeon = sequen.gradientBottom;
            option['style'] = romeon;
            romeon = whisks[echoed];
            source = papara.bind(tangon)(romeon);
            romeon = whisks[update];
            romeon = papara.bind(tangon)(romeon);
            romeon = romeon.unsafe_rawColors;
            romeon = romeon.PLUM_23;
            source = source.bind(tangon)(romeon);
            romeon = source.alpha;
            source = romeon.bind(source)(config);
            romeon = source.hex;
            source = romeon.bind(source)();
            romeon = new Array(2);
            romeon[0] = source;
            echoed = whisks[echoed];
            source = papara.bind(tangon)(echoed);
            echoed = whisks[update];
            echoed = papara.bind(tangon)(echoed);
            echoed = echoed.unsafe_rawColors;
            echoed = echoed.PLUM_23;
            source = source.bind(tangon)(echoed);
            echoed = source.alpha;
            source = echoed.bind(source)(ctrled);
            echoed = source.hex;
            echoed = echoed.bind(source)();
            romeon[1] = echoed;
            option['colors'] = romeon;
            option = target.bind(tangon)(offset, option);
            golfie[2] = option;
            option = {};
            romeon = sequen.videoContentWrapper;
            offset = new Array(2);
            offset[0] = romeon;
            romeon = sequen.videoContentWrapperPortrait;
            offset[1] = romeon;
            option['style'] = offset;
            offset = 34;
            offset = whisks[offset];
            romeon = papara.bind(tangon)(offset);
            offset = {'onClose': null, 'showCurrentVideoTime': true, 'withTextShadow': true};
            offset['onClose'] = output;
            offset = target.bind(tangon)(romeon, offset);
            romeon = new Array(2);
            romeon[0] = offset;
            ctrled = 19;
            offset = whisks[ctrled];
            offset = limora.bind(tangon)(offset);
            echoed = offset.Stack;
            output = {};
            offset = 'vertical';
            output['direction'] = offset;
            offset = whisks[update];
            offset = papara.bind(tangon)(offset);
            offset = offset.spacing;
            offset = offset.PX_24;
            output['spacing'] = offset;
            offset = whisks[ctrled];
            offset = limora.bind(tangon)(offset);
            config = offset.Stack;
            source = {'direction': 'horizontal', 'justify': 'space-between'};
            record = 'horizontal';
            offset = whisks[update];
            offset = papara.bind(tangon)(offset);
            offset = offset.spacing;
            offset = offset.PX_8;
            source['spacing'] = offset;
            offset = 20;
            equals = whisks[offset];
            equals = limora.bind(tangon)(equals);
            quebec = equals.PressableOpacity;
            equals = {};
            variable36 = sequen.questDetailsPrimary;
            equals['style'] = variable36;
            equals['onPress'] = status;
            variable37 = 21;
            variable36 = whisks[variable37];
            variable36 = limora.bind(tangon)(variable36);
            variable41 = variable36.Text;
            variable36 = {'variant': 'heading-lg/semibold', 'color': 'white'};
            variable42 = sequen.textShadow;
            variable36['style'] = variable42;
            variable42 = kiloes.config;
            variable42 = variable42.messages;
            variable42 = variable42.gameTitle;
            variable36['children'] = variable42;
            variable41 = target.bind(tangon)(variable41, variable36);
            variable36 = new Array(2);
            variable36[0] = variable41;
            variable37 = whisks[variable37];
            variable37 = limora.bind(tangon)(variable37);
            variable41 = variable37.Text;
            variable37 = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            variable42 = sequen.textShadow;
            variable37['style'] = variable42;
            variable42 = kiloes.config;
            variable42 = variable42.messages;
            variable42 = variable42.gamePublisher;
            variable37['children'] = variable42;
            variable37 = target.bind(tangon)(variable41, variable37);
            variable36[1] = variable37;
            equals['children'] = variable36;
            quebec = zuuluu.bind(tangon)(quebec, equals);
            equals = new Array(2);
            equals[0] = quebec;
            quebec = {};
            variable36 = sequen.questDetailsSecondary;
            quebec['style'] = variable36;
            variable36 = 35;
            variable36 = whisks[variable36];
            variable37 = papara.bind(tangon)(variable36);
            variable36 = {};
            variable36['quest'] = kiloes;
            variable41 = 'x-sm';
            variable36['size'] = variable41;
            variable40 = variable40.percentComplete;
            variable36['progress'] = variable40;
            variable36['hasConfetti'] = variable39;
            variable36['onPress'] = variable38;
            variable36 = target.bind(tangon)(variable37, variable36);
            quebec['children'] = variable36;
            quebec = target.bind(tangon)(oscard, quebec);
            equals[1] = quebec;
            source['children'] = equals;
            config = zuuluu.bind(tangon)(config, source);
            source = new Array(2);
            source[0] = config;
            ctrled = whisks[ctrled];
            ctrled = limora.bind(tangon)(ctrled);
            config = ctrled.Stack;
            ctrled = {};
            ctrled['direction'] = record;
            record = whisks[update];
            record = papara.bind(tangon)(record);
            record = record.spacing;
            record = record.PX_16;
            ctrled['spacing'] = record;
            record = 24;
            record = whisks[record];
            papara = papara.bind(tangon)(record);
            record = {};
            record['onPress'] = status;
            status = sequen.ctaPrimary;
            record['style'] = status;
            status = 25;
            status = whisks[status];
            whisks = limora.bind(tangon)(status);
            limora = whisks.getVideoQuestEndCardCtaText;
            status = kiloes.config;
            status = limora.bind(whisks)(status);
            record['text'] = status;
            papara = target.bind(tangon)(papara, record);
            record = new Array(2);
            record[0] = papara;
            if(!cntext) { _fun00008_ip = 1683; continue _fun00007 }
 1562:
            status = _closure1_slot8;
            variable36 = _closure1_slot0;
            equals = _closure1_slot2;
            papara = 26;
            papara = equals[papara];
            papara = variable36.bind(tangon)(papara);
            target = papara.IconButton;
            papara = {};
            limora = 27;
            whisks = equals[limora];
            whisks = variable36.bind(tangon)(whisks);
            quebec = whisks.intl;
            whisks = quebec.string;
            limora = equals[limora];
            limora = variable36.bind(tangon)(limora);
            limora = limora.t;
            limora = limora.YsCuyM;
            limora = whisks.bind(quebec)(limora);
            papara['accessibilityLabel'] = limora;
            whisks = _closure1_slot1;
            limora = 29;
            limora = equals[limora];
            limora = whisks.bind(tangon)(limora);
            papara['icon'] = limora;
            papara['onPress'] = sierra;
            sierra = 'secondary';
            papara['variant'] = sierra;
            cntext = status.bind(tangon)(target, papara);
 1683:
            record[1] = cntext;
            ctrled['children'] = record;
            ctrled = zuuluu.bind(tangon)(config, ctrled);
            source[1] = ctrled;
            output['children'] = source;
            output = zuuluu.bind(tangon)(echoed, output);
            romeon[1] = output;
            option['children'] = romeon;
            option = zuuluu.bind(tangon)(oscard, option);
            golfie[3] = option;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot9;
            golfie = _closure1_slot5;
            oscard = {};
            romeon = sequen.footer;
            oscard['style'] = romeon;
            oscard['onLayout'] = verify;
            output = _closure1_slot8;
            ctrled = _closure1_slot0;
            config = _closure1_slot2;
            verify = config[offset];
            verify = ctrled.bind(tangon)(verify);
            romeon = verify.PressableOpacity;
            verify = {};
            source = 'button';
            verify['accessibilityRole'] = source;
            echoed = 27;
            record = config[echoed];
            record = ctrled.bind(tangon)(record);
            papara = record.intl;
            cntext = papara.string;
            record = config[echoed];
            record = ctrled.bind(tangon)(record);
            record = record.t;
            record = record.KCzjTk;
            record = cntext.bind(papara)(record);
            verify['accessibilityLabel'] = record;
            verify['onPress'] = sizing;
            sizing = 36;
            sizing = config[sizing];
            sizing = ctrled.bind(tangon)(sizing);
            record = sizing.PaperIcon;
            sizing = {};
            cntext = sequen.iconDisabled;
            cntext = cntext.color;
            sizing['color'] = cntext;
            sizing = output.bind(tangon)(record, sizing);
            verify['children'] = sizing;
            romeon = output.bind(tangon)(romeon, verify);
            verify = new Array(4);
            verify[0] = romeon;
            romeon = config[offset];
            romeon = ctrled.bind(tangon)(romeon);
            sizing = romeon.PressableOpacity;
            romeon = {};
            romeon['accessibilityRole'] = source;
            record = config[echoed];
            record = ctrled.bind(tangon)(record);
            papara = record.intl;
            cntext = papara.string;
            record = config[echoed];
            record = ctrled.bind(tangon)(record);
            record = record.t;
            record = record.bDSZOz;
            record = cntext.bind(papara)(record);
            romeon['accessibilityLabel'] = record;
            romeon['onPress'] = result;
            result = 37;
            result = config[result];
            result = ctrled.bind(tangon)(result);
            ctrled = result.CaptionIcon;
            result = {};
            if(vacuum) { _fun00008_ip = 2032; continue _fun00007 }
 2019:
            vacuum = sequen.iconDisabled;
            vacuum = vacuum.color;
            _fun00008_ip = 2042; continue _fun00007;
 2032:
            sequen = sequen.icon;
            vacuum = sequen.color;
 2042:
            result['color'] = vacuum;
            result = output.bind(tangon)(ctrled, result);
            romeon['children'] = result;
            romeon = output.bind(tangon)(sizing, romeon);
            verify[1] = romeon;
            romeon = _closure1_slot8;
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = sizing[offset];
            offset = result.bind(tangon)(offset);
            output = offset.PressableOpacity;
            offset = {};
            offset['accessibilityRole'] = source;
            source = sizing[echoed];
            source = result.bind(tangon)(source);
            ctrled = source.intl;
            source = ctrled.string;
            echoed = sizing[echoed];
            echoed = result.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.Ej3B3d;
            echoed = source.bind(ctrled)(echoed);
            offset['accessibilityLabel'] = echoed;
            offset['onPress'] = yankee;
            yankee = 38;
            yankee = sizing[yankee];
            yankee = result.bind(tangon)(yankee);
            echoed = yankee.ShareIcon;
            result = {};
            yankee = _closure1_slot1;
            update = sizing[update];
            update = yankee.bind(tangon)(update);
            update = update.colors;
            update = update.TEXT_NORMAL;
            result['color'] = update;
            result = romeon.bind(tangon)(echoed, result);
            offset['children'] = result;
            offset = romeon.bind(tangon)(output, offset);
            verify[2] = offset;
            offset = 22;
            offset = sizing[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            offset['quest'] = kiloes;
            backup = _closure1_slot7;
            backup = backup.VIDEO_MODAL_MOBILE;
            offset['location'] = backup;
            foxtra = function(argFoo) { // Original name: children
                zuuluu = argFoo;
                option = zuuluu.ref;
                entity = null;
                michal = Object.create(entity);
                entity = 0;
                michal['ref'] = entity;
                kiloes = {};
                backup = zuuluu;
                foxtra = michal;
                backup = copyDataProperties(kiloes, backup, foxtra);
                tangon = _closure1_slot8;
                oscard = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 20;
                entity = verify[entity];
                zuuluu = undefined;
                entity = oscard.bind(zuuluu)(entity);
                michal = entity.PressableOpacity;
                entity = {};
                offset = 'button';
                entity['accessibilityRole'] = offset;
                offset = 27;
                yankee = verify[offset];
                yankee = oscard.bind(zuuluu)(yankee);
                romeon = yankee.intl;
                yankee = romeon.string;
                offset = verify[offset];
                offset = oscard.bind(zuuluu)(offset);
                offset = offset.t;
                offset = offset.PdRCRk;
                offset = yankee.bind(romeon)(offset);
                entity['accessibilityLabel'] = offset;
                entity['ref'] = option;
                kiloes = entity;
                report = copyDataProperties(kiloes, backup);
                report = 39;
                report = verify[report];
                report = oscard.bind(zuuluu)(report);
                oscard = report.MoreHorizontalIcon;
                report = {};
                option = _closure1_slot1;
                golfie = 6;
                golfie = verify[golfie];
                golfie = option.bind(zuuluu)(golfie);
                golfie = golfie.colors;
                golfie = golfie.TEXT_NORMAL;
                report['color'] = golfie;
                oscard = tangon.bind(zuuluu)(oscard, report);
                report = 'children';
                entity[report] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[3] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot16 = tangon;
    tangon = 49;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalContentInProgress
        _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
            entity = argFoo;
            verify = entity.onClose;
            var _closure2_slot0 = verify;
            report = entity.onNavigateToPostWatchVideo;
            zuuluu = _closure1_slot0;
            backup = _closure1_slot2;
            tangon = 40;
            oscard = backup[tangon];
            tangon = undefined;
            golfie = zuuluu.bind(tangon)(oscard);
            oscard = golfie.useVideoQuestModalContext;
            oscard = oscard.bind(golfie)();
            foxtra = oscard.quest;
            var _closure2_slot1 = foxtra;
            sizing = _closure1_slot4;
            golfie = sizing.useState;
            oscard = false;
            option = golfie.bind(sizing)(oscard);
            golfie = _closure1_slot3;
            oscard = 2;
            golfie = golfie.bind(tangon)(option, oscard);
            oscard = 0;
            romeon = golfie[oscard];
            oscard = 1;
            oscard = golfie[oscard];
            var _closure2_slot2 = oscard;
            option = sizing.useCallback;
            golfie = function() {
                zuuluu = _closure2_slot2;
                michal = undefined;
                entity = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            oscard = new Array(0);
            oscard = option.bind(sizing)(golfie, oscard);
            offset = sizing.useCallback;
            option = new Array(1);
            option[0] = foxtra;
            golfie = function() {
                report = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 41;
                tangon = michal[entity];
                entity = undefined;
                oscard = report.bind(entity)(tangon);
                report = oscard.openLazy;
                tangon = _closure1_slot0;
                zuuluu = 43;
                zuuluu = michal[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = 42;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                tangon = tangon.bind(entity)(zuuluu, michal);
                golfie = _closure2_slot1;
                option = golfie.id;
                michal = global;
                michal = michal.HermesInternal;
                zuuluu = michal.concat;
                michal = 'transcript-';
                zuuluu = zuuluu.bind(michal)(option);
                michal = {};
                michal['quest'] = golfie;
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                return entity;
            };
            golfie = offset.bind(sizing)(golfie, option);
            yankee = sizing.useCallback;
            option = foxtra.id;
            offset = new Array(1);
            offset[0] = option;
            option = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 44;
                michal = golfie[entity];
                entity = undefined;
                report = oscard.bind(entity)(michal);
                tangon = report.showShareActionSheet;
                zuuluu = {};
                michal = 25;
                michal = golfie[michal];
                golfie = oscard.bind(entity)(michal);
                oscard = golfie.getQuestUrl;
                michal = _closure2_slot1;
                michal = michal.id;
                michal = oscard.bind(golfie)(michal);
                zuuluu['message'] = michal;
                michal = 'Video Quest Modal';
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            option = yankee.bind(sizing)(option, offset);
            yankee = sizing.useCallback;
            offset = new Array(1);
            offset[0] = verify;
            verify = function() {
                michal = _closure2_slot0;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            yankee = yankee.bind(sizing)(verify, offset);
            verify = 45;
            verify = backup[verify];
            offset = zuuluu.bind(tangon)(verify);
            verify = offset.useQuestImpressionId;
            verify = verify.bind(offset)();
            var _closure2_slot3 = verify;
            kiloes = sizing.useCallback;
            offset = new Array(2);
            offset[0] = foxtra;
            offset[1] = verify;
            verify = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 25;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot1;
                michal = {};
                golfie = 46;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 47;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot3;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            offset = kiloes.bind(sizing)(verify, offset);
            kiloes = sizing.useCallback;
            output = foxtra.id;
            verify = new Array(1);
            verify[0] = output;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 48;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openRewardDetailsBottomSheet;
                michal = {};
                report = _closure2_slot1;
                report = report.id;
                michal['questId'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            verify = kiloes.bind(sizing)(michal, verify);
            michal = 25;
            michal = backup[michal];
            backup = zuuluu.bind(tangon)(michal);
            zuuluu = backup.getVideoOrientation;
            michal = foxtra.config;
            backup = zuuluu.bind(backup)(michal);
            zuuluu = _closure1_slot8;
            michal = 'portrait';
            if(!(michal !== backup)) { _fun00012_ip = 352; continue _fun00011 }
 346:
            michal = _closure1_slot15;
            _fun00012_ip = 356; continue _fun00011;
 352:
            michal = _closure1_slot16;
 356:
            entity = {};
            entity['quest'] = foxtra;
            entity['captionsEnabled'] = romeon;
            entity['handleClose'] = yankee;
            entity['handlePrimaryCtaPress'] = offset;
            entity['handleRewardDetailsPress'] = verify;
            entity['handleShareQuest'] = option;
            entity['handleOpenTranscript'] = golfie;
            entity['handleToggleCaptions'] = oscard;
            entity['onNavigateToPostWatchVideo'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();