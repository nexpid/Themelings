// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: VideoQuestModalFooterButton
        michal = _closure1_slot23;
        tangon = undefined;
        report = michal.bind(tangon)();
        zuuluu = _closure1_slot8;
        michal = _closure1_slot0;
        oscard = _closure1_slot2;
        entity = 21;
        entity = oscard[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.PressableOpacity;
        entity = {};
        oscard = 'button';
        entity['accessibilityRole'] = oscard;
        report = report.footerButton;
        entity['style'] = report;
        golfie = argFoo;
        option = entity;
        report = copyDataProperties(option, golfie);
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot24 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    foxtra = 0;
    tangon = oscard[foxtra];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot5 = option;
    tangon = tangon.StyleSheet;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot8 = option;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = {'x': 0, 'y': 0};
    var _closure1_slot10 = tangon;
    tangon = {'x': 0, 'y': 1};
    var _closure1_slot11 = tangon;
    option = 5;
    tangon = oscard[option];
    verify = romeon.bind(entity)(tangon);
    yankee = 6;
    tangon = oscard[yankee];
    tangon = romeon.bind(entity)(tangon);
    tangon = tangon.unsafe_rawColors;
    tangon = tangon.PLUM_23;
    verify = verify.bind(entity)(tangon);
    tangon = verify.alpha;
    offset = 0.4;
    verify = tangon.bind(verify)(offset);
    tangon = verify.hex;
    verify = tangon.bind(verify)();
    tangon = new Array(2);
    tangon[0] = verify;
    verify = oscard[option];
    backup = romeon.bind(entity)(verify);
    verify = oscard[yankee];
    verify = romeon.bind(entity)(verify);
    verify = verify.unsafe_rawColors;
    verify = verify.PLUM_23;
    backup = backup.bind(entity)(verify);
    verify = backup.alpha;
    backup = verify.bind(backup)(foxtra);
    verify = backup.hex;
    verify = verify.bind(backup)();
    tangon[1] = verify;
    var _closure1_slot12 = tangon;
    tangon = oscard[option];
    verify = romeon.bind(entity)(tangon);
    tangon = oscard[yankee];
    tangon = romeon.bind(entity)(tangon);
    tangon = tangon.unsafe_rawColors;
    tangon = tangon.PLUM_23;
    verify = verify.bind(entity)(tangon);
    tangon = verify.alpha;
    verify = tangon.bind(verify)(foxtra);
    tangon = verify.hex;
    verify = tangon.bind(verify)();
    tangon = new Array(2);
    tangon[0] = verify;
    option = oscard[option];
    verify = romeon.bind(entity)(option);
    option = oscard[yankee];
    option = romeon.bind(entity)(option);
    option = option.unsafe_rawColors;
    option = option.PLUM_23;
    verify = verify.bind(entity)(option);
    option = verify.alpha;
    verify = option.bind(verify)(offset);
    option = verify.hex;
    option = option.bind(verify)();
    tangon[1] = option;
    var _closure1_slot13 = tangon;
    tangon = {'bottom': 158, 'top': 64, 'left': 16, 'right': 16};
    var _closure1_slot14 = tangon;
    tangon = {'bottom': 16, 'left': 16, 'right': 16};
    var _closure1_slot15 = tangon;
    tangon = 7;
    option = oscard[tangon];
    offset = report.bind(entity)(option);
    verify = offset.createStyles;
    option = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {};
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            oscard = 6;
            zuuluu = tangon[oscard];
            report = undefined;
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.colors;
            zuuluu = zuuluu.BG_BASE_TERTIARY;
            michal['backgroundColor'] = zuuluu;
            verify = 1;
            michal['flex'] = verify;
            entity['wrapper'] = michal;
            michal = {};
            zuuluu = tangon[oscard];
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderTopLeftRadius'] = zuuluu;
            zuuluu = tangon[oscard];
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderTopRightRadius'] = zuuluu;
            entity['wrapperPortrait'] = michal;
            michal = {'aspectRatio': 1.7777777777777777, 'width': '100%', 'position': 'relative'};
            entity['videoLandscape'] = michal;
            michal = {'borderRadius': null, 'flexGrow': 0, 'flexShrink': 0, 'overflow': 'hidden'};
            zuuluu = tangon[oscard];
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderRadius'] = zuuluu;
            zuuluu = 0;
            entity['videoWrapper'] = michal;
            michal = {};
            michal['flexGrow'] = verify;
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.radii;
            offset = offset.none;
            michal['borderTopLeftRadius'] = offset;
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.radii;
            offset = offset.none;
            michal['borderTopRightRadius'] = offset;
            entity['videoWrapperLandscape'] = michal;
            michal = {'flexDirection': 'column', 'pointerEvents': 'box-none', 'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'space-between'};
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.spacing;
            offset = offset.PX_16;
            michal['padding'] = offset;
            entity['videoContentWrapper'] = michal;
            michal = {};
            michal['padding'] = zuuluu;
            entity['videoContentWrapperLandscape'] = michal;
            michal = {};
            offset = _closure1_slot6;
            romeon = offset.absoluteFillObject;
            foxtra = michal;
            yankee = copyDataProperties(foxtra, romeon);
            entity['videoContentWrapperPortrait'] = michal;
            michal = {};
            yankee = 'row';
            michal['flexDirection'] = yankee;
            entity['videoContentHeaderWrapper'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['videoContentHeading'] = michal;
            yankee = 'center';
            michal = {'justifyContent': 'center', 'flex': 1};
            entity['rewardContainer'] = michal;
            michal = {};
            romeon = offset.absoluteFillObject;
            foxtra = michal;
            offset = copyDataProperties(foxtra, romeon);
            offset = 'alignItems';
            michal[offset] = yankee;
            offset = 'justifyContent';
            michal[offset] = yankee;
            entity['rewardContentCentered'] = michal;
            michal = {};
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.colors;
            offset = offset.BG_BASE_TERTIARY;
            michal['backgroundColor'] = offset;
            entity['modalBackground'] = michal;
            michal = {};
            michal['borderTopWidth'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.colors;
            verify = verify.BACKGROUND_ACCENT;
            michal['borderColor'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_16;
            michal['paddingHorizontal'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            michal['paddingTop'] = verify;
            entity['questDetailsLandscape'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 1};
            entity['questDetailsPrimary'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 0};
            entity['questDetailsSecondary'] = michal;
            michal = {};
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.colors;
            verify = verify.BACKGROUND_ACCENT;
            michal['backgroundColor'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.radii;
            verify = verify.round;
            michal['borderRadius'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_8;
            michal['padding'] = verify;
            entity['questDetailsSecondaryButton'] = michal;
            michal = {};
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_16;
            michal['paddingHorizontal'] = verify;
            tangon = tangon[oscard];
            tangon = option.bind(report)(tangon);
            tangon = tangon.spacing;
            tangon = tangon.PX_8;
            michal['paddingTop'] = tangon;
            tangon = argFoo;
            if(!tangon) { _fun00002_ip = 719; continue _fun00001 }
 691:
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            tangon = tangon[oscard];
            tangon = option.bind(report)(tangon);
            tangon = tangon.spacing;
            zuuluu = tangon.PX_8;
 719:
            michal['paddingBottom'] = zuuluu;
            entity['footer'] = michal;
            michal = {};
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.INTERACTIVE_ACTIVE;
            michal['color'] = option;
            entity['icon'] = michal;
            michal = {};
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.INTERACTIVE_NORMAL;
            michal['color'] = option;
            entity['iconDisabled'] = michal;
            michal = {};
            golfie = _closure1_slot6;
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            option = copyDataProperties(foxtra, romeon);
            entity['video'] = michal;
            michal = {};
            option = 'absolute';
            michal['position'] = option;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_16;
            michal['top'] = option;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_16;
            michal['left'] = option;
            entity['closeButtonLandscape'] = michal;
            michal = {};
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            option = copyDataProperties(foxtra, romeon);
            option = 'bottom';
            michal[option] = report;
            verify = 70;
            option = 'height';
            michal[option] = verify;
            entity['gradientTop'] = michal;
            michal = {};
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            golfie = copyDataProperties(foxtra, romeon);
            golfie = 'top';
            michal[golfie] = report;
            golfie = 150;
            michal[option] = golfie;
            entity['gradientBottom'] = michal;
            michal = {'margin': 4294967281, 'padding': 15, 'textShadowColor': null, 'textShadowOffset': null, 'textShadowRadius': 15};
            golfie = zuuluu[oscard];
            golfie = tangon.bind(report)(golfie);
            golfie = golfie.colors;
            golfie = golfie.BLACK;
            michal['textShadowColor'] = golfie;
            golfie = {'width': 0, 'height': 0};
            michal['textShadowOffset'] = golfie;
            entity['textShadow'] = michal;
            michal = {'borderRadius': null, 'flexGrow': 1, 'flexShrink': 1};
            golfie = zuuluu[oscard];
            golfie = tangon.bind(report)(golfie);
            golfie = golfie.radii;
            golfie = golfie.round;
            michal['borderRadius'] = golfie;
            entity['ctaPrimary'] = michal;
            michal = {};
            golfie = 'auto';
            michal['marginRight'] = golfie;
            entity['viewRewardBtn'] = michal;
            michal = {'borderRadius': null, 'height': 96, 'width': '100%'};
            zuuluu = zuuluu[oscard];
            zuuluu = tangon.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderRadius'] = zuuluu;
            entity['playerThumbnail'] = michal;
            michal = {};
            zuuluu = -1;
            michal['zIndex'] = zuuluu;
            entity['cloudsBackground'] = michal;
            return entity;
        }
    };
    option = verify.bind(offset)(option);
    var _closure1_slot16 = option;
    option = {};
    verify = 'function VideoQuestModalContentInProgressTsx1(){const{withDelay,LOGO_REWARD_TRANSITION_DELAY_MS,withTiming,isComponentMounted,LOGO_REWARD_TRANSITION_DURATION_MS}=this.__closure;return withDelay(LOGO_REWARD_TRANSITION_DELAY_MS,withTiming(isComponentMounted.get(),{duration:LOGO_REWARD_TRANSITION_DURATION_MS}));}';
    option['code'] = verify;
    var _closure1_slot17 = option;
    option = {};
    verify = 'function VideoQuestModalContentInProgressTsx2(){const{animation}=this.__closure;return{opacity:animation.get()};}';
    option['code'] = verify;
    var _closure1_slot18 = option;
    option = {};
    verify = 'function VideoQuestModalContentInProgressTsx3(){const{animation}=this.__closure;return{opacity:1-animation.get()};}';
    option['code'] = verify;
    var _closure1_slot19 = option;
    option = {};
    verify = "function VideoQuestModalContentInProgressTsx4(){const{animation}=this.__closure;return{pointerEvents:animation.get()>0.3?'auto':'none'};}";
    option['code'] = verify;
    var _closure1_slot20 = option;
    verify = golfie.memo;
    option = function(argFoo) {
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            ctrled = michal.quest;
            var _closure2_slot0 = ctrled;
            papara = michal.captionsEnabled;
            romeon = michal.handleClose;
            cntext = michal.handlePrimaryCtaPress;
            vacuum = michal.handleShareQuest;
            backup = michal.handleOpenTranscript;
            foxtra = michal.handleToggleCaptions;
            sequen = michal.onNavigateToPostWatchVideo;
            yankee = michal.externallyPaused;
            tangon = undefined;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            zuuluu = _closure1_slot16;
            report = _closure1_slot0;
            michal = _closure1_slot2;
            output = 8;
            michal = michal[output];
            report = report.bind(tangon)(michal);
            michal = report.isAndroid;
            michal = michal.bind(report)();
            record = zuuluu.bind(tangon)(michal);
            oscard = _closure1_slot4;
            report = oscard.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = ctrled;
            michal = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 9;
                michal = golfie[entity];
                report = undefined;
                tangon = oscard.bind(report)(michal);
                zuuluu = tangon.getQuestAsset;
                michal = _closure2_slot0;
                entity = golfie[entity];
                entity = oscard.bind(report)(entity);
                entity = entity.QuestAssetType;
                entity = entity.HERO;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            whisks = report.bind(oscard)(michal, zuuluu);
            zuuluu = ctrled.userStatus;
            sizing = null;
            report = sizing == zuuluu;
            michal = undefined;
            if(report) { _fun00004_ip = 167; continue _fun00003 }
 161:
            michal = zuuluu.completedAt;
 167:
            echoed = sizing != michal;
            golfie = _closure1_slot4;
            zuuluu = golfie.useContext;
            update = _closure1_slot0;
            result = _closure1_slot2;
            michal = 10;
            michal = result[michal];
            michal = update.bind(tangon)(michal);
            michal = michal.QuestDockGestureContext;
            michal = zuuluu.bind(golfie)(michal);
            source = michal.windowDimensions;
            michal = 11;
            zuuluu = result[michal];
            oscard = update.bind(tangon)(zuuluu);
            report = oscard.useSharedValue;
            zuuluu = 0;
            option = report.bind(oscard)(zuuluu);
            _closure2_slot1 = option;
            oscard = golfie.useEffect;
            report = new Array(1);
            report[0] = option;
            zuuluu = function() {
                zuuluu = _closure2_slot1;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            zuuluu = oscard.bind(golfie)(zuuluu, report);
            zuuluu = result[michal];
            oscard = update.bind(tangon)(zuuluu);
            report = oscard.useDerivedValue;
            zuuluu = function() { // Original name: L
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 11;
                entity = oscard[entity];
                michal = undefined;
                tangon = report.bind(michal)(entity);
                zuuluu = tangon.withDelay;
                entity = 12;
                entity = oscard[entity];
                oscard = report.bind(michal)(entity);
                report = oscard.withTiming;
                michal = _closure2_slot1;
                entity = michal.get;
                michal = entity.bind(michal)();
                entity = {};
                golfie = 1000;
                entity['duration'] = golfie;
                michal = report.bind(oscard)(michal, entity);
                entity = 3000;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            golfie = {};
            verify = result[michal];
            verify = update.bind(tangon)(verify);
            verify = verify.withDelay;
            golfie['withDelay'] = verify;
            verify = 3000;
            golfie['LOGO_REWARD_TRANSITION_DELAY_MS'] = verify;
            verify = 12;
            verify = result[verify];
            verify = update.bind(tangon)(verify);
            verify = verify.withTiming;
            golfie['withTiming'] = verify;
            golfie['isComponentMounted'] = option;
            option = 1000;
            golfie['LOGO_REWARD_TRANSITION_DURATION_MS'] = option;
            zuuluu['__closure'] = golfie;
            golfie = 12561024953493.0;
            zuuluu['__workletHash'] = golfie;
            golfie = _closure1_slot17;
            zuuluu['__initData'] = golfie;
            oscard = report.bind(oscard)(zuuluu);
            _closure2_slot2 = oscard;
            zuuluu = result[michal];
            golfie = update.bind(tangon)(zuuluu);
            report = golfie.useAnimatedStyle;
            zuuluu = function() { // Original name: M
                entity = {};
                zuuluu = _closure2_slot2;
                michal = zuuluu.get;
                michal = michal.bind(zuuluu)();
                entity['opacity'] = michal;
                return entity;
            };
            option = {};
            option['animation'] = oscard;
            zuuluu['__closure'] = option;
            option = 17463485679217.0;
            zuuluu['__workletHash'] = option;
            option = _closure1_slot18;
            zuuluu['__initData'] = option;
            sierra = report.bind(golfie)(zuuluu);
            zuuluu = result[michal];
            golfie = update.bind(tangon)(zuuluu);
            report = golfie.useAnimatedStyle;
            zuuluu = function() { // Original name: k
                entity = {};
                zuuluu = _closure2_slot2;
                michal = zuuluu.get;
                zuuluu = michal.bind(zuuluu)();
                michal = 1;
                michal = michal - zuuluu;
                entity['opacity'] = michal;
                return entity;
            };
            option = {};
            option['animation'] = oscard;
            zuuluu['__closure'] = option;
            option = 9103187579788.0;
            zuuluu['__workletHash'] = option;
            option = _closure1_slot19;
            zuuluu['__initData'] = option;
            kiloes = report.bind(golfie)(zuuluu);
            michal = result[michal];
            zuuluu = update.bind(tangon)(michal);
            michal = zuuluu.useAnimatedProps;
            entity = function() { // Original name: V
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = {};
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.get;
                    zuuluu = michal.bind(zuuluu)();
                    michal = 0.3;
                    zuuluu = zuuluu > michal;
                    michal = 'none';
                    if(!zuuluu) { _fun00006_ip = 43; continue _fun00005 }
 39:
                    michal = 'auto';
 43:
                    entity['pointerEvents'] = michal;
                    return entity;
                }
            };
            report = {};
            report['animation'] = oscard;
            entity['__closure'] = report;
            report = 11833431315705.0;
            entity['__workletHash'] = report;
            report = _closure1_slot20;
            entity['__initData'] = report;
            target = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot8;
            entity = 13;
            entity = result[entity];
            entity = update.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = record.wrapper;
            entity['style'] = report;
            golfie = _closure1_slot9;
            oscard = _closure1_slot5;
            report = {};
            verify = record.videoWrapper;
            option = new Array(2);
            option[0] = verify;
            verify = record.videoWrapperLandscape;
            option[1] = verify;
            report['style'] = option;
            offset = _closure1_slot8;
            option = 14;
            option = result[option];
            option = update.bind(tangon)(option);
            verify = option.VideoQuestPlayer;
            option = {};
            option['captionsEnabled'] = papara;
            papara = 'landscape';
            option['orientation'] = papara;
            papara = record.videoLandscape;
            option['style'] = papara;
            papara = _closure1_slot15;
            option['safeAreaInsets'] = papara;
            option['handleOpenTranscript'] = backup;
            option['handleToggleCaptions'] = foxtra;
            option['externallyPaused'] = yankee;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            yankee = _closure1_slot8;
            foxtra = _closure1_slot1;
            verify = 15;
            verify = result[verify];
            offset = foxtra.bind(tangon)(verify);
            verify = {};
            verify['onClose'] = romeon;
            romeon = record.closeButtonLandscape;
            verify['style'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            verify = {};
            yankee = record.videoContentWrapper;
            offset = new Array(2);
            offset[0] = yankee;
            yankee = record.videoContentWrapperLandscape;
            offset[1] = yankee;
            verify['style'] = offset;
            offset = {};
            yankee = record.rewardContainer;
            offset['style'] = yankee;
            papara = _closure1_slot8;
            romeon = 16;
            yankee = result[romeon];
            backup = foxtra.bind(tangon)(yankee);
            yankee = {};
            limora = record.rewardContentCentered;
            status = new Array(2);
            status[0] = limora;
            status[1] = sierra;
            yankee['style'] = status;
            yankee['animatedProps'] = target;
            sierra = _closure1_slot8;
            target = 17;
            target = result[target];
            status = foxtra.bind(tangon)(target);
            target = {};
            target = sierra.bind(tangon)(status, target);
            yankee['children'] = target;
            backup = papara.bind(tangon)(backup, yankee);
            yankee = new Array(2);
            yankee[0] = backup;
            romeon = result[romeon];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            papara = record.rewardContentCentered;
            backup = new Array(3);
            backup[0] = papara;
            result = result[output];
            update = update.bind(tangon)(result);
            result = update.isAndroid;
            result = result.bind(update)();
            if(!result) { _fun00004_ip = 999; continue _fun00003 }
 993:
            result = record.modalBackground;
 999:
            backup[1] = result;
            backup[2] = kiloes;
            romeon['style'] = backup;
            backup = 'none';
            romeon['pointerEvents'] = backup;
            kiloes = _closure1_slot0;
            backup = _closure1_slot2;
            backup = backup[output];
            kiloes = kiloes.bind(tangon)(backup);
            backup = kiloes.isAndroid;
            kiloes = backup.bind(kiloes)();
            if(!kiloes) { _fun00004_ip = 1100; continue _fun00003 }
 1049:
            result = _closure1_slot8;
            output = _closure1_slot1;
            update = _closure1_slot2;
            backup = 18;
            backup = update[backup];
            output = output.bind(tangon)(backup);
            backup = {};
            update = 'top';
            backup['align'] = update;
            update = record.cloudsBackground;
            backup['style'] = update;
            kiloes = result.bind(tangon)(output, backup);
 1100:
            backup = new Array(2);
            backup[0] = kiloes;
            result = _closure1_slot8;
            equals = _closure1_slot1;
            variable36 = _closure1_slot2;
            kiloes = 19;
            kiloes = variable36[kiloes];
            output = equals.bind(tangon)(kiloes);
            kiloes = {};
            limora = _closure1_slot0;
            update = 9;
            papara = variable36[update];
            status = limora.bind(tangon)(papara);
            target = status.getQuestAsset;
            update = variable36[update];
            update = limora.bind(tangon)(update);
            update = update.QuestAssetType;
            papara = update.LOGO_TYPE;
            update = 'dark';
            update = target.bind(status)(ctrled, papara, update);
            update = update.url;
            kiloes['assetUrl'] = update;
            update = 90;
            kiloes['maxHeight'] = update;
            update = source.get;
            update = update.bind(source)();
            source = update.width;
            update = 120;
            update = source - update;
            kiloes['maxWidth'] = update;
            kiloes = result.bind(tangon)(output, kiloes);
            backup[1] = kiloes;
            romeon['children'] = backup;
            romeon = golfie.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            offset['children'] = yankee;
            yankee = golfie.bind(tangon)(oscard, offset);
            offset = new Array(3);
            offset[0] = yankee;
            foxtra = _closure1_slot8;
            yankee = 18;
            yankee = variable36[yankee];
            romeon = equals.bind(tangon)(yankee);
            yankee = {};
            backup = 'top';
            yankee['align'] = backup;
            backup = record.cloudsBackground;
            yankee['style'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            foxtra = _closure1_slot9;
            kiloes = 20;
            yankee = variable36[kiloes];
            yankee = limora.bind(tangon)(yankee);
            romeon = yankee.Stack;
            yankee = {};
            backup = 'vertical';
            yankee['direction'] = backup;
            result = 6;
            backup = variable36[result];
            backup = equals.bind(tangon)(backup);
            backup = backup.spacing;
            backup = backup.PX_24;
            yankee['spacing'] = backup;
            backup = record.questDetailsLandscape;
            yankee['style'] = backup;
            backup = variable36[kiloes];
            backup = limora.bind(tangon)(backup);
            source = backup.Stack;
            backup = {'direction': 'horizontal', 'justify': 'space-between'};
            update = 'horizontal';
            output = variable36[result];
            output = equals.bind(tangon)(output);
            output = output.spacing;
            output = output.PX_8;
            backup['spacing'] = output;
            output = 21;
            papara = variable36[output];
            papara = limora.bind(tangon)(papara);
            target = papara.PressableOpacity;
            papara = {};
            status = record.questDetailsPrimary;
            papara['style'] = status;
            papara['onPress'] = cntext;
            variable37 = _closure1_slot8;
            sierra = 22;
            status = variable36[sierra];
            status = limora.bind(tangon)(status);
            quebec = status.Text;
            status = {'variant': 'heading-lg/semibold', 'color': 'white'};
            variable38 = ctrled.config;
            variable38 = variable38.messages;
            variable38 = variable38.gameTitle;
            status['children'] = variable38;
            quebec = variable37.bind(tangon)(quebec, status);
            status = new Array(2);
            status[0] = quebec;
            quebec = _closure1_slot8;
            sierra = variable36[sierra];
            sierra = limora.bind(tangon)(sierra);
            limora = sierra.Text;
            sierra = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            variable37 = ctrled.config;
            variable37 = variable37.messages;
            variable37 = variable37.gamePublisher;
            sierra['children'] = variable37;
            sierra = quebec.bind(tangon)(limora, sierra);
            status[1] = sierra;
            papara['children'] = status;
            target = foxtra.bind(tangon)(target, papara);
            papara = new Array(2);
            papara[0] = target;
            sierra = _closure1_slot8;
            status = _closure1_slot5;
            target = {};
            limora = record.questDetailsSecondary;
            target['style'] = limora;
            quebec = _closure1_slot8;
            limora = 23;
            limora = variable36[limora];
            equals = equals.bind(tangon)(limora);
            limora = {};
            limora['quest'] = ctrled;
            variable36 = _closure1_slot7;
            variable36 = variable36.VIDEO_MODAL_MOBILE;
            limora['location'] = variable36;
            limora = quebec.bind(tangon)(equals, limora);
            target['children'] = limora;
            target = sierra.bind(tangon)(status, target);
            papara[1] = target;
            backup['children'] = papara;
            source = foxtra.bind(tangon)(source, backup);
            backup = new Array(3);
            backup[0] = source;
            sizing = sizing != whisks;
            if(!sizing) { _fun00004_ip = 1831; continue _fun00003 }
 1735:
            papara = _closure1_slot8;
            source = _closure1_slot0;
            limora = _closure1_slot2;
            output = limora[output];
            output = source.bind(tangon)(output);
            source = output.PressableOpacity;
            output = {};
            output['onPress'] = cntext;
            sierra = _closure1_slot8;
            status = _closure1_slot1;
            target = 24;
            target = limora[target];
            status = status.bind(tangon)(target);
            target = {};
            limora = {};
            whisks = whisks.url;
            limora['uri'] = whisks;
            target['source'] = limora;
            limora = record.playerThumbnail;
            target['style'] = limora;
            target = sierra.bind(tangon)(status, target);
            output['children'] = target;
            sizing = papara.bind(tangon)(source, output);
 1831:
            backup[1] = sizing;
            output = _closure1_slot9;
            whisks = _closure1_slot0;
            status = _closure1_slot2;
            kiloes = status[kiloes];
            kiloes = whisks.bind(tangon)(kiloes);
            sizing = kiloes.Stack;
            kiloes = {};
            kiloes['direction'] = update;
            target = _closure1_slot1;
            result = status[result];
            result = target.bind(tangon)(result);
            result = result.spacing;
            result = result.PX_16;
            kiloes['spacing'] = result;
            source = _closure1_slot8;
            result = 25;
            result = status[result];
            update = target.bind(tangon)(result);
            result = {};
            result['onPress'] = cntext;
            record = record.ctaPrimary;
            result['style'] = record;
            record = 26;
            record = status[record];
            cntext = whisks.bind(tangon)(record);
            record = cntext.getVideoQuestEndCardCtaText;
            ctrled = ctrled.config;
            ctrled = record.bind(cntext)(ctrled);
            result['text'] = ctrled;
            update = source.bind(tangon)(update, result);
            result = new Array(3);
            result[0] = update;
            cntext = _closure1_slot8;
            update = 27;
            source = status[update];
            source = whisks.bind(tangon)(source);
            ctrled = source.IconButton;
            source = {};
            record = 28;
            papara = status[record];
            papara = whisks.bind(tangon)(papara);
            limora = papara.intl;
            sierra = limora.string;
            papara = status[record];
            papara = whisks.bind(tangon)(papara);
            papara = papara.t;
            papara = papara.Ej3B3d;
            papara = sierra.bind(limora)(papara);
            source['accessibilityLabel'] = papara;
            papara = 29;
            papara = status[papara];
            papara = target.bind(tangon)(papara);
            source['icon'] = papara;
            source['onPress'] = vacuum;
            vacuum = 'secondary';
            source['variant'] = vacuum;
            source = cntext.bind(tangon)(ctrled, source);
            result[1] = source;
            if(!echoed) { _fun00004_ip = 2201; continue _fun00003 }
 2090:
            ctrled = _closure1_slot8;
            status = _closure1_slot0;
            cntext = _closure1_slot2;
            update = cntext[update];
            update = status.bind(tangon)(update);
            source = update.IconButton;
            update = {};
            papara = cntext[record];
            papara = status.bind(tangon)(papara);
            target = papara.intl;
            papara = target.string;
            record = cntext[record];
            record = status.bind(tangon)(record);
            record = record.t;
            record = record.cfY4PD;
            record = papara.bind(target)(record);
            update['accessibilityLabel'] = record;
            record = _closure1_slot1;
            config = 30;
            config = cntext[config];
            config = record.bind(tangon)(config);
            update['icon'] = config;
            update['onPress'] = sequen;
            update['variant'] = vacuum;
            echoed = ctrled.bind(tangon)(source, update);
 2201:
            result[2] = echoed;
            kiloes['children'] = result;
            kiloes = output.bind(tangon)(sizing, kiloes);
            backup[2] = kiloes;
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[2] = yankee;
            verify['children'] = offset;
            verify = golfie.bind(tangon)(oscard, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    option = verify.bind(golfie)(option);
    var _closure1_slot21 = option;
    verify = golfie.memo;
    option = function(argFoo) {
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            kiloes = entity.quest;
            ctrled = entity.captionsEnabled;
            papara = entity.handleClose;
            equals = entity.handlePrimaryCtaPress;
            variable39 = entity.handleRewardDetailsPress;
            yankee = entity.handleShareQuest;
            update = entity.handleOpenTranscript;
            output = entity.handleToggleCaptions;
            config = entity.onNavigateToPostWatchVideo;
            echoed = entity.externallyPaused;
            tangon = undefined;
            var _closure2_slot0 = tangon;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            var _closure2_slot3 = tangon;
            var _closure2_slot4 = tangon;
            report = _closure1_slot16;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 8;
            entity = zuuluu[entity];
            oscard = michal.bind(tangon)(entity);
            entity = oscard.isAndroid;
            entity = entity.bind(oscard)();
            vacuum = report.bind(tangon)(entity);
            entity = 31;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useQuestTaskDetails;
            variable41 = entity.bind(michal)(kiloes);
            michal = kiloes.userStatus;
            golfie = null;
            zuuluu = golfie == michal;
            entity = undefined;
            if(zuuluu) { _fun00008_ip = 174; continue _fun00007 }
 168:
            entity = michal.completedAt;
 174:
            offset = golfie != entity;
            option = _closure1_slot4;
            zuuluu = option.useContext;
            michal = _closure1_slot0;
            report = _closure1_slot2;
            entity = 10;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            entity = entity.QuestDockGestureContext;
            entity = zuuluu.bind(option)(entity);
            sizing = entity.windowDimensions;
            _closure2_slot0 = sizing;
            oscard = option.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = sizing;
            entity = function() {
                entity = global;
                zuuluu = entity.Math;
                michal = zuuluu.floor;
                tangon = _closure2_slot0;
                entity = tangon.get;
                entity = entity.bind(tangon)();
                tangon = entity.width;
                entity = 0.5625;
                entity = tangon / entity;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            sequen = oscard.bind(option)(entity, zuuluu);
            _closure2_slot1 = sequen;
            oscard = option.useCallback;
            zuuluu = function() {
                entity = undefined;
                return entity;
            };
            entity = new Array(0);
            source = oscard.bind(option)(zuuluu, entity);
            zuuluu = _closure1_slot1;
            entity = 32;
            entity = report[entity];
            entity = zuuluu.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            _closure2_slot2 = entity;
            oscard = option.useState;
            zuuluu = 64;
            verify = oscard.bind(option)(zuuluu);
            oscard = _closure1_slot3;
            zuuluu = 2;
            zuuluu = oscard.bind(tangon)(verify, zuuluu);
            oscard = 0;
            result = zuuluu[oscard];
            _closure2_slot3 = result;
            romeon = 1;
            zuuluu = zuuluu[romeon];
            _closure2_slot4 = zuuluu;
            verify = option.useCallback;
            oscard = function(argFoo) {
                zuuluu = _closure2_slot4;
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                michal = entity.height;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            zuuluu = new Array(0);
            verify = verify.bind(option)(oscard, zuuluu);
            oscard = option.useMemo;
            zuuluu = new Array(4);
            zuuluu[0] = sequen;
            zuuluu[1] = result;
            zuuluu[2] = sizing;
            zuuluu[3] = entity;
            entity = function() {
                entity = global;
                tangon = entity.Math;
                zuuluu = tangon.min;
                report = _closure2_slot0;
                michal = report.get;
                michal = michal.bind(report)();
                report = michal.height;
                michal = _closure2_slot2;
                michal = michal.top;
                report = report - michal;
                michal = _closure2_slot2;
                michal = michal.bottom;
                report = report - michal;
                michal = _closure2_slot3;
                michal = report - michal;
                entity = _closure2_slot1;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            option = oscard.bind(option)(entity, zuuluu);
            zuuluu = _closure1_slot9;
            entity = 13;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            variable40 = true;
            entity['bottom'] = variable40;
            oscard = vacuum.wrapper;
            report = new Array(2);
            report[0] = oscard;
            oscard = vacuum.wrapperPortrait;
            report[1] = oscard;
            entity['style'] = report;
            result = _closure1_slot5;
            report = {};
            sizing = vacuum.videoWrapper;
            oscard = new Array(2);
            oscard[0] = sizing;
            if(!(golfie != option)) { _fun00008_ip = 502; continue _fun00007 }
 494:
            golfie = {};
            golfie['height'] = option;
            _fun00008_ip = 512; continue _fun00007;
 502:
            option = {};
            option['flexGrow'] = romeon;
            golfie = option;
 512:
            oscard[1] = golfie;
            report['style'] = oscard;
            sizing = _closure1_slot8;
            golfie = _closure1_slot0;
            romeon = _closure1_slot2;
            oscard = 14;
            oscard = romeon[oscard];
            oscard = golfie.bind(tangon)(oscard);
            option = oscard.VideoQuestPlayer;
            oscard = {};
            oscard['captionsEnabled'] = ctrled;
            oscard['onLoad'] = source;
            oscard['externallyPaused'] = echoed;
            echoed = 'portrait';
            oscard['orientation'] = echoed;
            echoed = _closure1_slot14;
            oscard['safeAreaInsets'] = echoed;
            oscard['handleOpenTranscript'] = update;
            oscard['handleToggleCaptions'] = output;
            oscard = sizing.bind(tangon)(option, oscard);
            echoed = new Array(4);
            echoed[0] = oscard;
            cntext = _closure1_slot8;
            sizing = _closure1_slot1;
            oscard = 33;
            option = romeon[oscard];
            source = sizing.bind(tangon)(option);
            option = {};
            record = _closure1_slot10;
            option['start'] = record;
            sequen = _closure1_slot11;
            option['end'] = sequen;
            target = vacuum.gradientTop;
            option['style'] = target;
            target = _closure1_slot12;
            option['colors'] = target;
            option = cntext.bind(tangon)(source, option);
            echoed[1] = option;
            source = _closure1_slot8;
            oscard = romeon[oscard];
            option = sizing.bind(tangon)(oscard);
            oscard = {};
            oscard['start'] = record;
            oscard['end'] = sequen;
            sequen = vacuum.gradientBottom;
            oscard['style'] = sequen;
            sequen = _closure1_slot13;
            oscard['colors'] = sequen;
            oscard = source.bind(tangon)(option, oscard);
            echoed[2] = oscard;
            option = _closure1_slot9;
            record = _closure1_slot5;
            sequen = {};
            source = vacuum.videoContentWrapper;
            oscard = new Array(2);
            oscard[0] = source;
            source = vacuum.videoContentWrapperPortrait;
            oscard[1] = source;
            sequen['style'] = oscard;
            cntext = _closure1_slot8;
            oscard = 34;
            oscard = romeon[oscard];
            source = sizing.bind(tangon)(oscard);
            oscard = {'onClose': null, 'showCurrentVideoTime': true, 'withTextShadow': true};
            oscard['onClose'] = papara;
            oscard = cntext.bind(tangon)(source, oscard);
            cntext = new Array(2);
            cntext[0] = oscard;
            oscard = 20;
            source = romeon[oscard];
            source = golfie.bind(tangon)(source);
            target = source.Stack;
            papara = {};
            source = 'vertical';
            papara['direction'] = source;
            source = 6;
            status = romeon[source];
            status = sizing.bind(tangon)(status);
            status = status.spacing;
            status = status.PX_24;
            papara['spacing'] = status;
            status = romeon[oscard];
            status = golfie.bind(tangon)(status);
            sierra = status.Stack;
            status = {'direction': 'horizontal', 'justify': 'space-between'};
            limora = romeon[source];
            limora = sizing.bind(tangon)(limora);
            limora = limora.spacing;
            limora = limora.PX_8;
            status['spacing'] = limora;
            limora = 21;
            limora = romeon[limora];
            limora = golfie.bind(tangon)(limora);
            whisks = limora.PressableOpacity;
            limora = {};
            quebec = vacuum.questDetailsPrimary;
            limora['style'] = quebec;
            limora['onPress'] = equals;
            variable38 = _closure1_slot8;
            variable36 = 22;
            quebec = romeon[variable36];
            quebec = golfie.bind(tangon)(quebec);
            variable37 = quebec.Text;
            quebec = {'variant': 'heading-lg/semibold', 'color': 'white'};
            variable42 = vacuum.textShadow;
            quebec['style'] = variable42;
            variable42 = kiloes.config;
            variable42 = variable42.messages;
            variable42 = variable42.gameTitle;
            quebec['children'] = variable42;
            variable37 = variable38.bind(tangon)(variable37, quebec);
            quebec = new Array(2);
            quebec[0] = variable37;
            variable38 = _closure1_slot8;
            variable36 = romeon[variable36];
            variable36 = golfie.bind(tangon)(variable36);
            variable37 = variable36.Text;
            variable36 = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            variable42 = vacuum.textShadow;
            variable36['style'] = variable42;
            variable42 = kiloes.config;
            variable42 = variable42.messages;
            variable42 = variable42.gamePublisher;
            variable36['children'] = variable42;
            variable36 = variable38.bind(tangon)(variable37, variable36);
            quebec[1] = variable36;
            limora['children'] = quebec;
            whisks = option.bind(tangon)(whisks, limora);
            limora = new Array(2);
            limora[0] = whisks;
            quebec = _closure1_slot8;
            whisks = {};
            variable36 = vacuum.questDetailsSecondary;
            whisks['style'] = variable36;
            variable38 = _closure1_slot8;
            variable36 = 35;
            variable36 = romeon[variable36];
            variable37 = sizing.bind(tangon)(variable36);
            variable36 = {};
            variable36['quest'] = kiloes;
            variable42 = 'x-sm';
            variable36['size'] = variable42;
            variable41 = variable41.percentComplete;
            variable36['progress'] = variable41;
            variable36['hasConfetti'] = variable40;
            variable36['onPress'] = variable39;
            variable36 = variable38.bind(tangon)(variable37, variable36);
            whisks['children'] = variable36;
            whisks = quebec.bind(tangon)(record, whisks);
            limora[1] = whisks;
            status['children'] = limora;
            sierra = option.bind(tangon)(sierra, status);
            status = new Array(2);
            status[0] = sierra;
            whisks = _closure1_slot8;
            sierra = 25;
            sierra = romeon[sierra];
            limora = sizing.bind(tangon)(sierra);
            sierra = {};
            sierra['onPress'] = equals;
            equals = vacuum.ctaPrimary;
            sierra['style'] = equals;
            equals = 26;
            equals = romeon[equals];
            variable36 = golfie.bind(tangon)(equals);
            quebec = variable36.getVideoQuestEndCardCtaText;
            equals = kiloes.config;
            equals = quebec.bind(variable36)(equals);
            sierra['text'] = equals;
            sierra = whisks.bind(tangon)(limora, sierra);
            status[1] = sierra;
            papara['children'] = status;
            papara = option.bind(tangon)(target, papara);
            cntext[1] = papara;
            sequen['children'] = cntext;
            sequen = option.bind(tangon)(record, sequen);
            echoed[3] = sequen;
            report['children'] = echoed;
            result = zuuluu.bind(tangon)(result, report);
            report = new Array(2);
            report[0] = result;
            oscard = romeon[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.Stack;
            oscard = {'direction': 'horizontal', 'justify': 'flex-end', 'align': 'center'};
            result = vacuum.footer;
            oscard['style'] = result;
            romeon = romeon[source];
            romeon = sizing.bind(tangon)(romeon);
            romeon = romeon.spacing;
            romeon = romeon.PX_4;
            oscard['spacing'] = romeon;
            oscard['onLayout'] = verify;
            if(!offset) { _fun00008_ip = 1610; continue _fun00007 }
 1429:
            sizing = _closure1_slot8;
            romeon = _closure1_slot5;
            verify = {};
            result = vacuum.viewRewardBtn;
            verify['style'] = result;
            sequen = _closure1_slot8;
            papara = _closure1_slot0;
            target = _closure1_slot2;
            result = 36;
            result = target[result];
            result = papara.bind(tangon)(result);
            echoed = result.Button;
            result = {'icon': null, 'iconPosition': 'end', 'onPress': null, 'variant': 'secondary', 'size': 'sm'};
            status = _closure1_slot8;
            record = 37;
            record = target[record];
            record = papara.bind(tangon)(record);
            cntext = record.ArrowSmallRightIcon;
            record = {};
            sierra = 'sm';
            record['size'] = sierra;
            record = status.bind(tangon)(cntext, record);
            result['icon'] = record;
            result['onPress'] = config;
            config = 28;
            record = target[config];
            record = papara.bind(tangon)(record);
            cntext = record.intl;
            record = cntext.string;
            config = target[config];
            config = papara.bind(tangon)(config);
            config = config.t;
            config = config.jyYgZ2;
            config = record.bind(cntext)(config);
            result['text'] = config;
            result = sequen.bind(tangon)(echoed, result);
            verify['children'] = result;
            offset = sizing.bind(tangon)(romeon, verify);
 1610:
            verify = new Array(5);
            verify[0] = offset;
            romeon = _closure1_slot8;
            sizing = _closure1_slot24;
            offset = {};
            result = _closure1_slot0;
            sequen = _closure1_slot2;
            echoed = 28;
            config = sequen[echoed];
            config = result.bind(tangon)(config);
            cntext = config.intl;
            record = cntext.string;
            config = sequen[echoed];
            config = result.bind(tangon)(config);
            config = config.t;
            config = config.KCzjTk;
            config = record.bind(cntext)(config);
            offset['accessibilityLabel'] = config;
            offset['onPress'] = update;
            record = _closure1_slot8;
            update = 38;
            update = sequen[update];
            update = result.bind(tangon)(update);
            config = update.TranscriptOutlineIcon;
            update = {};
            cntext = vacuum.iconDisabled;
            cntext = cntext.color;
            update['color'] = cntext;
            update = record.bind(tangon)(config, update);
            offset['children'] = update;
            offset = romeon.bind(tangon)(sizing, offset);
            verify[1] = offset;
            romeon = _closure1_slot8;
            offset = {};
            update = sequen[echoed];
            update = result.bind(tangon)(update);
            record = update.intl;
            config = record.string;
            update = sequen[echoed];
            update = result.bind(tangon)(update);
            update = update.t;
            update = update.bDSZOz;
            update = config.bind(record)(update);
            offset['accessibilityLabel'] = update;
            offset['onPress'] = output;
            update = _closure1_slot8;
            output = 39;
            output = sequen[output];
            output = result.bind(tangon)(output);
            result = output.ClosedCaptionsOutlineIcon;
            output = {};
            if(ctrled) { _fun00008_ip = 1848; continue _fun00007 }
 1835:
            ctrled = vacuum.iconDisabled;
            ctrled = ctrled.color;
            _fun00008_ip = 1858; continue _fun00007;
 1848:
            vacuum = vacuum.icon;
            ctrled = vacuum.color;
 1858:
            output['color'] = ctrled;
            output = update.bind(tangon)(result, output);
            offset['children'] = output;
            offset = romeon.bind(tangon)(sizing, offset);
            verify[2] = offset;
            output = _closure1_slot8;
            romeon = _closure1_slot24;
            offset = {};
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            update = sizing[echoed];
            update = result.bind(tangon)(update);
            ctrled = update.intl;
            update = ctrled.string;
            echoed = sizing[echoed];
            echoed = result.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.Ej3B3d;
            echoed = update.bind(ctrled)(echoed);
            offset['accessibilityLabel'] = echoed;
            offset['onPress'] = yankee;
            update = _closure1_slot8;
            yankee = 40;
            yankee = sizing[yankee];
            yankee = result.bind(tangon)(yankee);
            echoed = yankee.ShareIcon;
            result = {};
            yankee = _closure1_slot1;
            source = sizing[source];
            source = yankee.bind(tangon)(source);
            source = source.colors;
            source = source.TEXT_NORMAL;
            result['color'] = source;
            result = update.bind(tangon)(echoed, result);
            offset['children'] = result;
            offset = output.bind(tangon)(romeon, offset);
            verify[3] = offset;
            romeon = _closure1_slot8;
            offset = 23;
            offset = sizing[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            offset['quest'] = kiloes;
            backup = _closure1_slot7;
            backup = backup.VIDEO_MODAL_MOBILE;
            offset['location'] = backup;
            foxtra = function(argFoo) { // Original name: children
                zuuluu = argFoo;
                golfie = zuuluu.ref;
                entity = null;
                michal = Object.create(entity);
                entity = 0;
                michal['ref'] = entity;
                kiloes = {};
                backup = zuuluu;
                foxtra = michal;
                backup = copyDataProperties(kiloes, backup, foxtra);
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot24;
                michal = {};
                oscard = _closure1_slot0;
                offset = _closure1_slot2;
                verify = 28;
                yankee = offset[verify];
                entity = undefined;
                yankee = oscard.bind(entity)(yankee);
                romeon = yankee.intl;
                yankee = romeon.string;
                verify = offset[verify];
                verify = oscard.bind(entity)(verify);
                verify = verify.t;
                verify = verify.PdRCRk;
                verify = yankee.bind(romeon)(verify);
                michal['accessibilityLabel'] = verify;
                michal['ref'] = golfie;
                kiloes = michal;
                report = copyDataProperties(kiloes, backup);
                golfie = _closure1_slot8;
                report = 41;
                report = offset[report];
                report = oscard.bind(entity)(report);
                oscard = report.MoreHorizontalIcon;
                report = {};
                verify = _closure1_slot1;
                option = 6;
                option = offset[option];
                option = verify.bind(entity)(option);
                option = option.colors;
                option = option.TEXT_NORMAL;
                report['color'] = option;
                oscard = golfie.bind(entity)(oscard, report);
                report = 'children';
                michal[report] = oscard;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[4] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    option = verify.bind(golfie)(option);
    var _closure1_slot22 = option;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_8;
    offset['padding'] = yankee;
    tangon['footerButton'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot23 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: VideoQuestModalContentInProgress
        _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
            entity = argFoo;
            romeon = entity.onClose;
            oscard = entity.onNavigateToPostWatchVideo;
            michal = entity.isModalSignificantlyVisible;
            report = _closure1_slot0;
            kiloes = _closure1_slot2;
            tangon = 42;
            golfie = kiloes[tangon];
            tangon = undefined;
            option = report.bind(tangon)(golfie);
            golfie = option.useVideoQuestModalContext;
            golfie = golfie.bind(option)();
            backup = golfie.quest;
            var _closure2_slot0 = backup;
            result = _closure1_slot4;
            golfie = result.useState;
            echoed = false;
            golfie = golfie.bind(result)(echoed);
            output = _closure1_slot3;
            sizing = 2;
            golfie = output.bind(tangon)(golfie, sizing);
            yankee = 0;
            foxtra = golfie[yankee];
            offset = 1;
            golfie = golfie[offset];
            var _closure2_slot1 = golfie;
            verify = result.useCallback;
            option = function() {
                zuuluu = _closure2_slot1;
                michal = undefined;
                entity = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            golfie = new Array(0);
            golfie = verify.bind(result)(option, golfie);
            update = result.useCallback;
            verify = new Array(1);
            verify[0] = backup;
            option = function() {
                report = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 43;
                tangon = michal[entity];
                entity = undefined;
                oscard = report.bind(entity)(tangon);
                report = oscard.openLazy;
                tangon = _closure1_slot0;
                zuuluu = 45;
                zuuluu = michal[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = 44;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                tangon = tangon.bind(entity)(zuuluu, michal);
                golfie = _closure2_slot0;
                option = golfie.id;
                michal = global;
                michal = michal.HermesInternal;
                zuuluu = michal.concat;
                michal = 'transcript-';
                zuuluu = zuuluu.bind(michal)(option);
                michal = {};
                michal['quest'] = golfie;
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                return entity;
            };
            option = update.bind(result)(option, verify);
            verify = result.useState;
            verify = verify.bind(result)(echoed);
            verify = output.bind(tangon)(verify, sizing);
            sizing = verify[yankee];
            verify = verify[offset];
            var _closure2_slot2 = verify;
            yankee = result.useCallback;
            verify = backup.id;
            offset = new Array(1);
            offset[0] = verify;
            verify = function() {
                report = _closure2_slot2;
                entity = undefined;
                tangon = true;
                tangon = report.bind(entity)(tangon);
                option = _closure1_slot0;
                verify = _closure1_slot2;
                tangon = 46;
                tangon = verify[tangon];
                golfie = option.bind(entity)(tangon);
                oscard = golfie.showShareActionSheet;
                report = {};
                tangon = 26;
                tangon = verify[tangon];
                option = option.bind(entity)(tangon);
                tangon = option.getQuestUrl;
                zuuluu = _closure2_slot0;
                zuuluu = zuuluu.id;
                zuuluu = tangon.bind(option)(zuuluu);
                report['message'] = zuuluu;
                foxtra = 'Video Quest Modal';
                yankee = function() {
                    zuuluu = _closure2_slot2;
                    entity = undefined;
                    michal = false;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                offset = function() {
                    zuuluu = _closure2_slot2;
                    entity = undefined;
                    michal = false;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                kiloes = golfie;
                backup = report;
                romeon = undefined;
                michal = kiloes[oscard](backup, foxtra, romeon, yankee, offset, verify);
                return entity;
            };
            verify = yankee.bind(result)(verify, offset);
            offset = 47;
            offset = kiloes[offset];
            yankee = report.bind(tangon)(offset);
            offset = yankee.useQuestImpressionId;
            offset = offset.bind(yankee)();
            var _closure2_slot3 = offset;
            output = result.useCallback;
            yankee = new Array(2);
            yankee[0] = backup;
            yankee[1] = offset;
            offset = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 26;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot0;
                michal = {};
                golfie = 48;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 49;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot3;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            yankee = output.bind(result)(offset, yankee);
            output = result.useCallback;
            echoed = backup.id;
            offset = new Array(1);
            offset[0] = echoed;
            zuuluu = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 50;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openRewardDetailsBottomSheet;
                michal = {};
                report = _closure2_slot0;
                report = report.id;
                michal['questId'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            offset = output.bind(result)(zuuluu, offset);
            zuuluu = 51;
            zuuluu = kiloes[zuuluu];
            kiloes = report.bind(tangon)(zuuluu);
            report = kiloes.useVideoExternallyPaused;
            zuuluu = backup.id;
            report = report.bind(kiloes)(zuuluu, sizing);
            if(report) { _fun00010_ip = 343; continue _fun00009 }
 340:
            report = !michal;
 343:
            zuuluu = _closure1_slot0;
            kiloes = _closure1_slot2;
            michal = 26;
            michal = kiloes[michal];
            kiloes = zuuluu.bind(tangon)(michal);
            zuuluu = kiloes.getVideoOrientation;
            michal = backup.config;
            kiloes = zuuluu.bind(kiloes)(michal);
            zuuluu = _closure1_slot8;
            michal = 'portrait';
            if(!(michal !== kiloes)) { _fun00010_ip = 399; continue _fun00009 }
 393:
            michal = _closure1_slot21;
            _fun00010_ip = 403; continue _fun00009;
 399:
            michal = _closure1_slot22;
 403:
            entity = {};
            entity['quest'] = backup;
            entity['captionsEnabled'] = foxtra;
            entity['handleClose'] = romeon;
            entity['handlePrimaryCtaPress'] = yankee;
            entity['handleRewardDetailsPress'] = offset;
            entity['handleShareQuest'] = verify;
            entity['handleOpenTranscript'] = option;
            entity['handleToggleCaptions'] = golfie;
            entity['onNavigateToPostWatchVideo'] = oscard;
            entity['externallyPaused'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 52;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();