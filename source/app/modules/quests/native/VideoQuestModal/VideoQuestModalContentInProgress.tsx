// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.StyleSheet;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot8 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {};
            verify = 1;
            michal['flex'] = verify;
            entity['wrapper'] = michal;
            michal = {'aspectRatio': 1.7777777777777777, 'width': '100%', 'position': 'relative'};
            entity['videoLandscape'] = michal;
            michal = {'borderRadius': null, 'flexGrow': 0, 'flexShrink': 0, 'overflow': 'hidden'};
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            oscard = 6;
            zuuluu = tangon[oscard];
            report = undefined;
            zuuluu = option.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderRadius'] = zuuluu;
            zuuluu = 0;
            entity['videoWrapper'] = michal;
            michal = {};
            michal['flexGrow'] = verify;
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.radii;
            offset = offset.none;
            michal['borderTopLeftRadius'] = offset;
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.radii;
            offset = offset.none;
            michal['borderTopRightRadius'] = offset;
            entity['videoWrapperLandscape'] = michal;
            michal = {'flexDirection': 'column', 'pointerEvents': 'box-none', 'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'space-between'};
            offset = tangon[oscard];
            offset = option.bind(report)(offset);
            offset = offset.spacing;
            offset = offset.PX_16;
            michal['padding'] = offset;
            entity['videoContentWrapper'] = michal;
            michal = {};
            michal['padding'] = zuuluu;
            entity['videoContentWrapperLandscape'] = michal;
            michal = {};
            offset = _closure1_slot6;
            romeon = offset.absoluteFillObject;
            foxtra = michal;
            yankee = copyDataProperties(foxtra, romeon);
            entity['videoContentWrapperPortrait'] = michal;
            michal = {};
            yankee = 'row';
            michal['flexDirection'] = yankee;
            entity['videoContentHeaderWrapper'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['videoContentHeading'] = michal;
            yankee = 'center';
            michal = {'justifyContent': 'center', 'flex': 1};
            entity['rewardContainer'] = michal;
            michal = {};
            romeon = offset.absoluteFillObject;
            foxtra = michal;
            offset = copyDataProperties(foxtra, romeon);
            offset = 'alignItems';
            michal[offset] = yankee;
            offset = 'justifyContent';
            michal[offset] = yankee;
            entity['rewardContentCentered'] = michal;
            michal = {};
            michal['borderTopWidth'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.colors;
            verify = verify.BACKGROUND_ACCENT;
            michal['borderColor'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_16;
            michal['paddingHorizontal'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            michal['paddingTop'] = verify;
            entity['questDetailsLandscape'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 1};
            entity['questDetailsPrimary'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 0};
            entity['questDetailsSecondary'] = michal;
            michal = {};
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.colors;
            verify = verify.BACKGROUND_ACCENT;
            michal['backgroundColor'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.radii;
            verify = verify.round;
            michal['borderRadius'] = verify;
            verify = tangon[oscard];
            verify = option.bind(report)(verify);
            verify = verify.spacing;
            verify = verify.PX_8;
            michal['padding'] = verify;
            entity['questDetailsSecondaryButton'] = michal;
            michal = {'padding': null, 'justifyContent': 'flex-end', 'alignItems': 'center', 'flexDirection': 'row'};
            tangon = tangon[oscard];
            tangon = option.bind(report)(tangon);
            tangon = tangon.spacing;
            tangon = tangon.PX_16;
            michal['padding'] = tangon;
            tangon = argFoo;
            if(!tangon) { _fun00002_ip = 595; continue _fun00001 }
 568:
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            tangon = tangon[oscard];
            tangon = option.bind(report)(tangon);
            tangon = tangon.spacing;
            zuuluu = tangon.PX_16;
 595:
            michal['paddingBottom'] = zuuluu;
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_24;
            michal['gap'] = option;
            entity['footer'] = michal;
            michal = {};
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.INTERACTIVE_ACTIVE;
            michal['color'] = option;
            entity['icon'] = michal;
            michal = {};
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.colors;
            option = option.INTERACTIVE_NORMAL;
            michal['color'] = option;
            entity['iconDisabled'] = michal;
            michal = {};
            golfie = _closure1_slot6;
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            option = copyDataProperties(foxtra, romeon);
            entity['video'] = michal;
            michal = {};
            option = 'absolute';
            michal['position'] = option;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_16;
            michal['top'] = option;
            option = zuuluu[oscard];
            option = tangon.bind(report)(option);
            option = option.spacing;
            option = option.PX_16;
            michal['left'] = option;
            entity['closeButtonLandscape'] = michal;
            michal = {};
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            option = copyDataProperties(foxtra, romeon);
            option = 'bottom';
            michal[option] = report;
            verify = 70;
            option = 'height';
            michal[option] = verify;
            entity['gradientTop'] = michal;
            michal = {};
            romeon = golfie.absoluteFillObject;
            foxtra = michal;
            golfie = copyDataProperties(foxtra, romeon);
            golfie = 'top';
            michal[golfie] = report;
            golfie = 150;
            michal[option] = golfie;
            entity['gradientBottom'] = michal;
            michal = {'margin': 4294967281, 'padding': 15, 'textShadowColor': null, 'textShadowOffset': null, 'textShadowRadius': 15};
            golfie = zuuluu[oscard];
            golfie = tangon.bind(report)(golfie);
            golfie = golfie.colors;
            golfie = golfie.BLACK;
            michal['textShadowColor'] = golfie;
            golfie = {'width': 0, 'height': 0};
            michal['textShadowOffset'] = golfie;
            entity['textShadow'] = michal;
            michal = {'borderRadius': null, 'flexGrow': 1, 'flexShrink': 1};
            golfie = zuuluu[oscard];
            golfie = tangon.bind(report)(golfie);
            golfie = golfie.radii;
            golfie = golfie.round;
            michal['borderRadius'] = golfie;
            entity['ctaPrimary'] = michal;
            michal = {};
            golfie = 'auto';
            michal['marginRight'] = golfie;
            entity['viewRewardBtn'] = michal;
            michal = {'borderRadius': null, 'height': 96, 'width': '100%'};
            zuuluu = zuuluu[oscard];
            zuuluu = tangon.bind(report)(zuuluu);
            zuuluu = zuuluu.radii;
            zuuluu = zuuluu.lg;
            michal['borderRadius'] = zuuluu;
            entity['playerThumbnail'] = michal;
            michal = {};
            zuuluu = -1;
            michal['zIndex'] = zuuluu;
            entity['cloudsBackground'] = michal;
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentInProgressTsx1(){const{withDelay,LOGO_REWARD_TRANSITION_DELAY_MS,withTiming,isComponentMounted,LOGO_REWARD_TRANSITION_DURATION_MS}=this.__closure;return withDelay(LOGO_REWARD_TRANSITION_DELAY_MS,withTiming(isComponentMounted.get(),{duration:LOGO_REWARD_TRANSITION_DURATION_MS}));}';
    tangon['code'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentInProgressTsx2(){const{animation}=this.__closure;return{opacity:animation.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot12 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentInProgressTsx3(){const{animation}=this.__closure;return{opacity:1-animation.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot13 = tangon;
    tangon = {};
    golfie = "function VideoQuestModalContentInProgressTsx4(){const{animation}=this.__closure;return{pointerEvents:animation.get()>0.3?'auto':'none'};}";
    tangon['code'] = golfie;
    var _closure1_slot14 = tangon;
    tangon = function(argFoo) { // Original name: LandscapeLayout
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            update = michal.quest;
            var _closure2_slot0 = update;
            foxtra = michal.captionsEnabled;
            yankee = michal.handleClose;
            config = michal.handlePrimaryCtaPress;
            ctrled = michal.handleShareQuest;
            romeon = michal.handleOpenTranscript;
            offset = michal.handleToggleCaptions;
            vacuum = michal.onNavigateToPostWatchVideo;
            tangon = undefined;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            zuuluu = _closure1_slot10;
            report = _closure1_slot0;
            oscard = _closure1_slot2;
            michal = 7;
            michal = oscard[michal];
            report = report.bind(tangon)(michal);
            michal = report.isAndroid;
            michal = michal.bind(report)();
            source = zuuluu.bind(tangon)(michal);
            oscard = _closure1_slot4;
            report = oscard.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = update;
            michal = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 8;
                michal = golfie[entity];
                report = undefined;
                tangon = oscard.bind(report)(michal);
                zuuluu = tangon.getQuestAsset;
                michal = _closure2_slot0;
                entity = golfie[entity];
                entity = oscard.bind(report)(entity);
                entity = entity.QuestAssetType;
                entity = entity.HERO;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            sierra = report.bind(oscard)(michal, zuuluu);
            zuuluu = update.userStatus;
            kiloes = null;
            report = kiloes == zuuluu;
            michal = undefined;
            if(report) { _fun00004_ip = 161; continue _fun00003 }
 155:
            michal = zuuluu.completedAt;
 161:
            result = kiloes != michal;
            golfie = _closure1_slot4;
            zuuluu = golfie.useContext;
            equals = _closure1_slot0;
            limora = _closure1_slot2;
            michal = 9;
            michal = limora[michal];
            michal = equals.bind(tangon)(michal);
            michal = michal.QuestDockGestureContext;
            michal = zuuluu.bind(golfie)(michal);
            cntext = michal.windowDimensions;
            michal = 10;
            zuuluu = limora[michal];
            oscard = equals.bind(tangon)(zuuluu);
            report = oscard.useSharedValue;
            zuuluu = 0;
            option = report.bind(oscard)(zuuluu);
            _closure2_slot1 = option;
            oscard = golfie.useEffect;
            report = new Array(1);
            report[0] = option;
            zuuluu = function() {
                zuuluu = _closure2_slot1;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            zuuluu = oscard.bind(golfie)(zuuluu, report);
            zuuluu = limora[michal];
            oscard = equals.bind(tangon)(zuuluu);
            report = oscard.useDerivedValue;
            zuuluu = function() { // Original name: I
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 10;
                entity = oscard[entity];
                michal = undefined;
                tangon = report.bind(michal)(entity);
                zuuluu = tangon.withDelay;
                entity = 11;
                entity = oscard[entity];
                oscard = report.bind(michal)(entity);
                report = oscard.withTiming;
                michal = _closure2_slot1;
                entity = michal.get;
                michal = entity.bind(michal)();
                entity = {};
                golfie = 1000;
                entity['duration'] = golfie;
                michal = report.bind(oscard)(michal, entity);
                entity = 3000;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            golfie = {};
            verify = limora[michal];
            verify = equals.bind(tangon)(verify);
            verify = verify.withDelay;
            golfie['withDelay'] = verify;
            verify = 3000;
            golfie['LOGO_REWARD_TRANSITION_DELAY_MS'] = verify;
            verify = 11;
            verify = limora[verify];
            verify = equals.bind(tangon)(verify);
            verify = verify.withTiming;
            golfie['withTiming'] = verify;
            golfie['isComponentMounted'] = option;
            option = 1000;
            golfie['LOGO_REWARD_TRANSITION_DURATION_MS'] = option;
            zuuluu['__closure'] = golfie;
            golfie = 12561024953493.0;
            zuuluu['__workletHash'] = golfie;
            golfie = _closure1_slot11;
            zuuluu['__initData'] = golfie;
            oscard = report.bind(oscard)(zuuluu);
            _closure2_slot2 = oscard;
            zuuluu = limora[michal];
            golfie = equals.bind(tangon)(zuuluu);
            report = golfie.useAnimatedStyle;
            zuuluu = function() { // Original name: L
                entity = {};
                zuuluu = _closure2_slot2;
                michal = zuuluu.get;
                michal = michal.bind(zuuluu)();
                entity['opacity'] = michal;
                return entity;
            };
            option = {};
            option['animation'] = oscard;
            zuuluu['__closure'] = option;
            option = 17463485679217.0;
            zuuluu['__workletHash'] = option;
            option = _closure1_slot12;
            zuuluu['__initData'] = option;
            output = report.bind(golfie)(zuuluu);
            zuuluu = limora[michal];
            golfie = equals.bind(tangon)(zuuluu);
            report = golfie.useAnimatedStyle;
            zuuluu = function() { // Original name: E
                entity = {};
                zuuluu = _closure2_slot2;
                michal = zuuluu.get;
                zuuluu = michal.bind(zuuluu)();
                michal = 1;
                michal = michal - zuuluu;
                entity['opacity'] = michal;
                return entity;
            };
            option = {};
            option['animation'] = oscard;
            zuuluu['__closure'] = option;
            option = 9103187579788.0;
            zuuluu['__workletHash'] = option;
            option = _closure1_slot13;
            zuuluu['__initData'] = option;
            record = report.bind(golfie)(zuuluu);
            michal = limora[michal];
            zuuluu = equals.bind(tangon)(michal);
            michal = zuuluu.useAnimatedProps;
            entity = function() { // Original name: M
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = {};
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.get;
                    zuuluu = michal.bind(zuuluu)();
                    michal = 0.3;
                    zuuluu = zuuluu > michal;
                    michal = 'none';
                    if(!zuuluu) { _fun00006_ip = 43; continue _fun00005 }
 39:
                    michal = 'auto';
 43:
                    entity['pointerEvents'] = michal;
                    return entity;
                }
            };
            report = {};
            report['animation'] = oscard;
            entity['__closure'] = report;
            report = 11833431315705.0;
            entity['__workletHash'] = report;
            report = _closure1_slot14;
            entity['__initData'] = report;
            backup = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot8;
            entity = 12;
            entity = limora[entity];
            entity = equals.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            report = true;
            entity['bottom'] = report;
            report = source.wrapper;
            entity['style'] = report;
            golfie = _closure1_slot9;
            oscard = _closure1_slot5;
            report = {};
            verify = source.videoWrapper;
            option = new Array(2);
            option[0] = verify;
            verify = source.videoWrapperLandscape;
            option[1] = verify;
            report['style'] = option;
            option = 13;
            option = limora[option];
            option = equals.bind(tangon)(option);
            verify = option.VideoQuestPlayer;
            option = {};
            option['captionsEnabled'] = foxtra;
            foxtra = 'landscape';
            option['orientation'] = foxtra;
            foxtra = source.videoLandscape;
            option['style'] = foxtra;
            sizing = 16;
            foxtra = {'bottom': 16, 'left': 16, 'right': 16};
            option['safeAreaInsets'] = foxtra;
            option['handleOpenTranscript'] = romeon;
            option['handleToggleCaptions'] = offset;
            verify = zuuluu.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            status = _closure1_slot1;
            verify = 14;
            verify = limora[verify];
            offset = status.bind(tangon)(verify);
            verify = {};
            verify['onClose'] = yankee;
            yankee = source.closeButtonLandscape;
            verify['style'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[1] = verify;
            verify = {};
            yankee = source.videoContentWrapper;
            offset = new Array(2);
            offset[0] = yankee;
            yankee = source.videoContentWrapperLandscape;
            offset[1] = yankee;
            verify['style'] = offset;
            offset = {};
            yankee = source.rewardContainer;
            offset['style'] = yankee;
            romeon = 15;
            yankee = limora[romeon];
            foxtra = status.bind(tangon)(yankee);
            yankee = {};
            papara = source.rewardContentCentered;
            echoed = new Array(2);
            echoed[0] = papara;
            echoed[1] = record;
            yankee['style'] = echoed;
            echoed = 'none';
            yankee['pointerEvents'] = echoed;
            sizing = limora[sizing];
            echoed = status.bind(tangon)(sizing);
            sizing = {};
            record = 8;
            papara = limora[record];
            whisks = equals.bind(tangon)(papara);
            target = whisks.getQuestAsset;
            record = limora[record];
            record = equals.bind(tangon)(record);
            record = record.QuestAssetType;
            papara = record.LOGO_TYPE;
            record = 'dark';
            record = target.bind(whisks)(update, papara, record);
            record = record.url;
            sizing['assetUrl'] = record;
            record = 90;
            sizing['maxHeight'] = record;
            record = cntext.get;
            record = record.bind(cntext)();
            cntext = record.width;
            record = 120;
            record = cntext - record;
            sizing['maxWidth'] = record;
            sizing = zuuluu.bind(tangon)(echoed, sizing);
            yankee['children'] = sizing;
            foxtra = zuuluu.bind(tangon)(foxtra, yankee);
            yankee = new Array(2);
            yankee[0] = foxtra;
            romeon = limora[romeon];
            foxtra = status.bind(tangon)(romeon);
            romeon = {};
            echoed = source.rewardContentCentered;
            sizing = new Array(2);
            sizing[0] = echoed;
            sizing[1] = output;
            romeon['style'] = sizing;
            romeon['animatedProps'] = backup;
            backup = 17;
            backup = limora[backup];
            sizing = status.bind(tangon)(backup);
            backup = {};
            backup = zuuluu.bind(tangon)(sizing, backup);
            romeon['children'] = backup;
            romeon = zuuluu.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            offset['children'] = yankee;
            yankee = golfie.bind(tangon)(oscard, offset);
            offset = new Array(3);
            offset[0] = yankee;
            yankee = 18;
            yankee = limora[yankee];
            romeon = status.bind(tangon)(yankee);
            yankee = {};
            foxtra = 'top';
            yankee['align'] = foxtra;
            foxtra = source.cloudsBackground;
            yankee['style'] = foxtra;
            yankee = zuuluu.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            backup = 19;
            yankee = limora[backup];
            yankee = equals.bind(tangon)(yankee);
            romeon = yankee.Stack;
            yankee = {};
            foxtra = 'vertical';
            yankee['direction'] = foxtra;
            output = 6;
            foxtra = limora[output];
            foxtra = status.bind(tangon)(foxtra);
            foxtra = foxtra.spacing;
            foxtra = foxtra.PX_24;
            yankee['spacing'] = foxtra;
            foxtra = source.questDetailsLandscape;
            yankee['style'] = foxtra;
            foxtra = limora[backup];
            foxtra = equals.bind(tangon)(foxtra);
            record = foxtra.Stack;
            foxtra = {'direction': 'horizontal', 'justify': 'space-between'};
            echoed = 'horizontal';
            sizing = limora[output];
            sizing = status.bind(tangon)(sizing);
            sizing = sizing.spacing;
            sizing = sizing.PX_8;
            foxtra['spacing'] = sizing;
            sizing = 20;
            cntext = limora[sizing];
            cntext = equals.bind(tangon)(cntext);
            papara = cntext.PressableOpacity;
            cntext = {};
            target = source.questDetailsPrimary;
            cntext['style'] = target;
            cntext['onPress'] = config;
            whisks = 21;
            target = limora[whisks];
            target = equals.bind(tangon)(target);
            quebec = target.Text;
            target = {'variant': 'heading-lg/semibold', 'color': 'white'};
            variable36 = update.config;
            variable36 = variable36.messages;
            variable36 = variable36.gameTitle;
            target['children'] = variable36;
            quebec = zuuluu.bind(tangon)(quebec, target);
            target = new Array(2);
            target[0] = quebec;
            whisks = limora[whisks];
            whisks = equals.bind(tangon)(whisks);
            equals = whisks.Text;
            whisks = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            quebec = update.config;
            quebec = quebec.messages;
            quebec = quebec.gamePublisher;
            whisks['children'] = quebec;
            whisks = zuuluu.bind(tangon)(equals, whisks);
            target[1] = whisks;
            cntext['children'] = target;
            papara = golfie.bind(tangon)(papara, cntext);
            cntext = new Array(2);
            cntext[0] = papara;
            papara = {};
            target = source.questDetailsSecondary;
            papara['style'] = target;
            target = 22;
            target = limora[target];
            status = status.bind(tangon)(target);
            target = {};
            target['quest'] = update;
            limora = _closure1_slot7;
            limora = limora.VIDEO_MODAL_MOBILE;
            target['location'] = limora;
            target = zuuluu.bind(tangon)(status, target);
            papara['children'] = target;
            papara = zuuluu.bind(tangon)(oscard, papara);
            cntext[1] = papara;
            foxtra['children'] = cntext;
            record = golfie.bind(tangon)(record, foxtra);
            foxtra = new Array(3);
            foxtra[0] = record;
            kiloes = kiloes != sierra;
            if(!kiloes) { _fun00004_ip = 1644; continue _fun00003 }
 1551:
            cntext = _closure1_slot8;
            record = _closure1_slot0;
            status = _closure1_slot2;
            sizing = status[sizing];
            sizing = record.bind(tangon)(sizing);
            record = sizing.PressableOpacity;
            sizing = {};
            sizing['onPress'] = config;
            target = _closure1_slot1;
            papara = 23;
            papara = status[papara];
            target = target.bind(tangon)(papara);
            papara = {};
            status = {};
            sierra = sierra.url;
            status['uri'] = sierra;
            papara['source'] = status;
            status = source.playerThumbnail;
            papara['style'] = status;
            papara = cntext.bind(tangon)(target, papara);
            sizing['children'] = papara;
            kiloes = cntext.bind(tangon)(record, sizing);
 1644:
            foxtra[1] = kiloes;
            sizing = _closure1_slot9;
            limora = _closure1_slot0;
            target = _closure1_slot2;
            backup = target[backup];
            backup = limora.bind(tangon)(backup);
            kiloes = backup.Stack;
            backup = {};
            backup['direction'] = echoed;
            papara = _closure1_slot1;
            output = target[output];
            output = papara.bind(tangon)(output);
            output = output.spacing;
            output = output.PX_16;
            backup['spacing'] = output;
            record = _closure1_slot8;
            output = 24;
            output = target[output];
            echoed = papara.bind(tangon)(output);
            output = {};
            output['onPress'] = config;
            source = source.ctaPrimary;
            output['style'] = source;
            source = 25;
            source = target[source];
            config = limora.bind(tangon)(source);
            source = config.getVideoQuestEndCardCtaText;
            update = update.config;
            update = source.bind(config)(update);
            output['text'] = update;
            echoed = record.bind(tangon)(echoed, output);
            output = new Array(3);
            output[0] = echoed;
            echoed = 26;
            update = target[echoed];
            update = limora.bind(tangon)(update);
            source = update.IconButton;
            update = {};
            config = 27;
            cntext = target[config];
            cntext = limora.bind(tangon)(cntext);
            sierra = cntext.intl;
            status = sierra.string;
            cntext = target[config];
            cntext = limora.bind(tangon)(cntext);
            cntext = cntext.t;
            cntext = cntext.Ej3B3d;
            cntext = status.bind(sierra)(cntext);
            update['accessibilityLabel'] = cntext;
            cntext = 28;
            cntext = target[cntext];
            cntext = papara.bind(tangon)(cntext);
            update['icon'] = cntext;
            update['onPress'] = ctrled;
            ctrled = 'secondary';
            update['variant'] = ctrled;
            update = record.bind(tangon)(source, update);
            output[1] = update;
            if(!result) { _fun00004_ip = 2010; continue _fun00003 }
 1899:
            source = _closure1_slot8;
            target = _closure1_slot0;
            record = _closure1_slot2;
            echoed = record[echoed];
            echoed = target.bind(tangon)(echoed);
            update = echoed.IconButton;
            echoed = {};
            cntext = record[config];
            cntext = target.bind(tangon)(cntext);
            papara = cntext.intl;
            cntext = papara.string;
            config = record[config];
            config = target.bind(tangon)(config);
            config = config.t;
            config = config.cfY4PD;
            config = cntext.bind(papara)(config);
            echoed['accessibilityLabel'] = config;
            config = _closure1_slot1;
            sequen = 29;
            sequen = record[sequen];
            sequen = config.bind(tangon)(sequen);
            echoed['icon'] = sequen;
            echoed['onPress'] = vacuum;
            echoed['variant'] = ctrled;
            result = source.bind(tangon)(update, echoed);
 2010:
            output[2] = result;
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[2] = backup;
            yankee['children'] = foxtra;
            yankee = golfie.bind(tangon)(romeon, yankee);
            offset[2] = yankee;
            verify['children'] = offset;
            verify = golfie.bind(tangon)(oscard, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot15 = tangon;
    tangon = function(argFoo) { // Original name: PortraitLayout
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            backup = entity.quest;
            ctrled = entity.captionsEnabled;
            result = entity.handleClose;
            target = entity.handlePrimaryCtaPress;
            variable36 = entity.handleRewardDetailsPress;
            offset = entity.handleShareQuest;
            config = entity.handleOpenTranscript;
            output = entity.handleToggleCaptions;
            source = entity.onNavigateToPostWatchVideo;
            tangon = undefined;
            var _closure2_slot0 = tangon;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            var _closure2_slot3 = tangon;
            var _closure2_slot4 = tangon;
            var _closure2_slot5 = tangon;
            report = _closure1_slot10;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 7;
            entity = zuuluu[entity];
            oscard = michal.bind(tangon)(entity);
            entity = oscard.isAndroid;
            entity = entity.bind(oscard)();
            vacuum = report.bind(tangon)(entity);
            entity = 30;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useQuestTaskDetails;
            variable38 = entity.bind(michal)(backup);
            michal = backup.userStatus;
            sizing = null;
            zuuluu = sizing == michal;
            entity = undefined;
            if(zuuluu) { _fun00008_ip = 172; continue _fun00007 }
 166:
            entity = michal.completedAt;
 172:
            yankee = sizing != entity;
            report = _closure1_slot4;
            michal = report.useContext;
            status = _closure1_slot0;
            sierra = _closure1_slot2;
            entity = 9;
            entity = sierra[entity];
            entity = status.bind(tangon)(entity);
            entity = entity.QuestDockGestureContext;
            entity = michal.bind(report)(entity);
            oscard = entity.windowDimensions;
            _closure2_slot0 = oscard;
            entity = report.useState;
            entity = entity.bind(report)(sizing);
            option = _closure1_slot3;
            golfie = 2;
            entity = option.bind(tangon)(entity, golfie);
            limora = 0;
            verify = entity[limora];
            _closure2_slot1 = verify;
            zuuluu = 1;
            entity = entity[zuuluu];
            _closure2_slot2 = entity;
            kiloes = report.useCallback;
            michal = new Array(1);
            michal[0] = oscard;
            entity = function(argFoo) {
                entity = argFoo;
                michal = entity.naturalSize;
                michal = michal.width;
                entity = entity.naturalSize;
                entity = entity.height;
                report = michal / entity;
                zuuluu = _closure2_slot0;
                entity = zuuluu.get;
                entity = entity.bind(zuuluu)();
                entity = entity.width;
                zuuluu = _closure2_slot2;
                michal = global;
                tangon = michal.Math;
                michal = tangon.floor;
                entity = entity / report;
                michal = michal.bind(tangon)(entity);
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            kiloes = kiloes.bind(report)(entity, michal);
            cntext = _closure1_slot1;
            entity = 31;
            entity = sierra[entity];
            entity = cntext.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            _closure2_slot3 = entity;
            michal = report.useState;
            michal = michal.bind(report)(sizing);
            michal = option.bind(tangon)(michal, golfie);
            golfie = michal[limora];
            _closure2_slot4 = golfie;
            michal = michal[zuuluu];
            _closure2_slot5 = michal;
            option = report.useCallback;
            zuuluu = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                zuuluu = entity.height;
                michal = _closure2_slot5;
                entity = undefined;
                michal = michal.bind(entity)(zuuluu);
                return entity;
            };
            michal = new Array(0);
            option = option.bind(report)(zuuluu, michal);
            zuuluu = report.useMemo;
            michal = new Array(4);
            michal[0] = verify;
            michal[1] = golfie;
            michal[2] = oscard;
            michal[3] = entity;
            entity = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    michal = _closure2_slot1;
                    zuuluu = null;
                    if(!(zuuluu != michal)) { _fun00010_ip = 21; continue _fun00009 }
 13:
                    michal = _closure2_slot4;
                    if(!(zuuluu == michal)) { _fun00010_ip = 25; continue _fun00009 }
 21:
                    michal = undefined;
                    return michal;
 25:
                    michal = global;
                    tangon = michal.Math;
                    zuuluu = tangon.min;
                    report = _closure2_slot0;
                    michal = report.get;
                    michal = michal.bind(report)();
                    report = michal.height;
                    michal = _closure2_slot3;
                    michal = michal.top;
                    report = report - michal;
                    michal = _closure2_slot3;
                    michal = michal.bottom;
                    report = report - michal;
                    michal = _closure2_slot4;
                    michal = report - michal;
                    entity = _closure2_slot1;
                    entity = zuuluu.bind(tangon)(michal, entity);
                    return entity;
                }
            };
            sizing = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot9;
            entity = 12;
            entity = sierra[entity];
            entity = status.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            variable37 = true;
            entity['bottom'] = variable37;
            report = vacuum.wrapper;
            entity['style'] = report;
            golfie = _closure1_slot5;
            report = {};
            verify = vacuum.videoWrapper;
            oscard = new Array(2);
            oscard[0] = verify;
            verify = {};
            verify['height'] = sizing;
            oscard[1] = verify;
            report['style'] = oscard;
            papara = _closure1_slot8;
            oscard = 13;
            oscard = sierra[oscard];
            oscard = status.bind(tangon)(oscard);
            verify = oscard.VideoQuestPlayer;
            oscard = {};
            oscard['captionsEnabled'] = ctrled;
            oscard['onLoad'] = kiloes;
            kiloes = 'portrait';
            oscard['orientation'] = kiloes;
            kiloes = {'bottom': 158, 'left': 16, 'right': 16};
            oscard['safeAreaInsets'] = kiloes;
            oscard['handleOpenTranscript'] = config;
            oscard['handleToggleCaptions'] = output;
            verify = papara.bind(tangon)(verify, oscard);
            oscard = new Array(4);
            oscard[0] = verify;
            verify = 32;
            kiloes = sierra[verify];
            sizing = cntext.bind(tangon)(kiloes);
            kiloes = {};
            echoed = {'x': 0, 'y': 0};
            kiloes['start'] = echoed;
            echoed = {'x': 0, 'y': 1};
            kiloes['end'] = echoed;
            echoed = vacuum.gradientTop;
            kiloes['style'] = echoed;
            update = 33;
            echoed = sierra[update];
            record = cntext.bind(tangon)(echoed);
            echoed = 6;
            sequen = sierra[echoed];
            sequen = cntext.bind(tangon)(sequen);
            sequen = sequen.unsafe_rawColors;
            sequen = sequen.PLUM_23;
            whisks = record.bind(tangon)(sequen);
            sequen = whisks.alpha;
            record = 0.4;
            whisks = sequen.bind(whisks)(record);
            sequen = whisks.hex;
            whisks = sequen.bind(whisks)();
            sequen = new Array(2);
            sequen[0] = whisks;
            whisks = sierra[update];
            equals = cntext.bind(tangon)(whisks);
            whisks = sierra[echoed];
            whisks = cntext.bind(tangon)(whisks);
            whisks = whisks.unsafe_rawColors;
            whisks = whisks.PLUM_23;
            equals = equals.bind(tangon)(whisks);
            whisks = equals.alpha;
            equals = whisks.bind(equals)(limora);
            whisks = equals.hex;
            whisks = whisks.bind(equals)();
            sequen[1] = whisks;
            kiloes['colors'] = sequen;
            kiloes = papara.bind(tangon)(sizing, kiloes);
            oscard[1] = kiloes;
            verify = sierra[verify];
            kiloes = cntext.bind(tangon)(verify);
            verify = {};
            sizing = {'x': 0, 'y': 0};
            verify['start'] = sizing;
            sizing = {'x': 0, 'y': 1};
            verify['end'] = sizing;
            sizing = vacuum.gradientBottom;
            verify['style'] = sizing;
            sizing = sierra[update];
            sequen = cntext.bind(tangon)(sizing);
            sizing = sierra[echoed];
            sizing = cntext.bind(tangon)(sizing);
            sizing = sizing.unsafe_rawColors;
            sizing = sizing.PLUM_23;
            sequen = sequen.bind(tangon)(sizing);
            sizing = sequen.alpha;
            sequen = sizing.bind(sequen)(limora);
            sizing = sequen.hex;
            sequen = sizing.bind(sequen)();
            sizing = new Array(2);
            sizing[0] = sequen;
            update = sierra[update];
            sequen = cntext.bind(tangon)(update);
            update = sierra[echoed];
            update = cntext.bind(tangon)(update);
            update = update.unsafe_rawColors;
            update = update.PLUM_23;
            sequen = sequen.bind(tangon)(update);
            update = sequen.alpha;
            sequen = update.bind(sequen)(record);
            update = sequen.hex;
            update = update.bind(sequen)();
            sizing[1] = update;
            verify['colors'] = sizing;
            verify = papara.bind(tangon)(kiloes, verify);
            oscard[2] = verify;
            kiloes = {};
            sizing = vacuum.videoContentWrapper;
            verify = new Array(2);
            verify[0] = sizing;
            sizing = vacuum.videoContentWrapperPortrait;
            verify[1] = sizing;
            kiloes['style'] = verify;
            verify = 34;
            verify = sierra[verify];
            sizing = cntext.bind(tangon)(verify);
            verify = {'onClose': null, 'showCurrentVideoTime': true, 'withTextShadow': true};
            verify['onClose'] = result;
            verify = papara.bind(tangon)(sizing, verify);
            sizing = new Array(2);
            sizing[0] = verify;
            verify = 19;
            result = sierra[verify];
            result = status.bind(tangon)(result);
            update = result.Stack;
            result = {};
            sequen = 'vertical';
            result['direction'] = sequen;
            sequen = sierra[echoed];
            sequen = cntext.bind(tangon)(sequen);
            sequen = sequen.spacing;
            sequen = sequen.PX_24;
            result['spacing'] = sequen;
            verify = sierra[verify];
            verify = status.bind(tangon)(verify);
            record = verify.Stack;
            sequen = {'direction': 'horizontal', 'justify': 'space-between'};
            verify = sierra[echoed];
            verify = cntext.bind(tangon)(verify);
            verify = verify.spacing;
            verify = verify.PX_8;
            sequen['spacing'] = verify;
            verify = 20;
            limora = sierra[verify];
            limora = status.bind(tangon)(limora);
            whisks = limora.PressableOpacity;
            limora = {};
            equals = vacuum.questDetailsPrimary;
            limora['style'] = equals;
            limora['onPress'] = target;
            quebec = 21;
            equals = sierra[quebec];
            equals = status.bind(tangon)(equals);
            variable39 = equals.Text;
            equals = {'variant': 'heading-lg/semibold', 'color': 'white'};
            variable40 = vacuum.textShadow;
            equals['style'] = variable40;
            variable40 = backup.config;
            variable40 = variable40.messages;
            variable40 = variable40.gameTitle;
            equals['children'] = variable40;
            variable39 = papara.bind(tangon)(variable39, equals);
            equals = new Array(2);
            equals[0] = variable39;
            quebec = sierra[quebec];
            quebec = status.bind(tangon)(quebec);
            variable39 = quebec.Text;
            quebec = {'variant': 'heading-sm/semibold', 'color': 'text-normal'};
            variable40 = vacuum.textShadow;
            quebec['style'] = variable40;
            variable40 = backup.config;
            variable40 = variable40.messages;
            variable40 = variable40.gamePublisher;
            quebec['children'] = variable40;
            quebec = papara.bind(tangon)(variable39, quebec);
            equals[1] = quebec;
            limora['children'] = equals;
            whisks = zuuluu.bind(tangon)(whisks, limora);
            limora = new Array(2);
            limora[0] = whisks;
            whisks = {};
            equals = vacuum.questDetailsSecondary;
            whisks['style'] = equals;
            equals = 35;
            equals = sierra[equals];
            quebec = cntext.bind(tangon)(equals);
            equals = {};
            equals['quest'] = backup;
            variable39 = 'x-sm';
            equals['size'] = variable39;
            variable38 = variable38.percentComplete;
            equals['progress'] = variable38;
            equals['hasConfetti'] = variable37;
            equals['onPress'] = variable36;
            equals = papara.bind(tangon)(quebec, equals);
            whisks['children'] = equals;
            whisks = papara.bind(tangon)(golfie, whisks);
            limora[1] = whisks;
            sequen['children'] = limora;
            record = zuuluu.bind(tangon)(record, sequen);
            sequen = new Array(2);
            sequen[0] = record;
            record = 24;
            record = sierra[record];
            cntext = cntext.bind(tangon)(record);
            record = {};
            record['onPress'] = target;
            target = vacuum.ctaPrimary;
            record['style'] = target;
            target = 25;
            target = sierra[target];
            sierra = status.bind(tangon)(target);
            status = sierra.getVideoQuestEndCardCtaText;
            target = backup.config;
            target = status.bind(sierra)(target);
            record['text'] = target;
            record = papara.bind(tangon)(cntext, record);
            sequen[1] = record;
            result['children'] = sequen;
            result = zuuluu.bind(tangon)(update, result);
            sizing[1] = result;
            kiloes['children'] = sizing;
            kiloes = zuuluu.bind(tangon)(golfie, kiloes);
            oscard[3] = kiloes;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            kiloes = vacuum.footer;
            oscard['style'] = kiloes;
            oscard['onLayout'] = option;
            if(!yankee) { _fun00008_ip = 1708; continue _fun00007 }
 1575:
            sizing = _closure1_slot8;
            kiloes = _closure1_slot5;
            option = {};
            result = vacuum.viewRewardBtn;
            option['style'] = result;
            cntext = _closure1_slot0;
            papara = _closure1_slot2;
            result = 36;
            result = papara[result];
            result = cntext.bind(tangon)(result);
            update = result.Button;
            result = {'onPress': null, 'variant': 'secondary', 'size': 'sm'};
            result['onPress'] = source;
            source = 27;
            sequen = papara[source];
            sequen = cntext.bind(tangon)(sequen);
            record = sequen.intl;
            sequen = record.string;
            source = papara[source];
            source = cntext.bind(tangon)(source);
            source = source.t;
            source = source.vTgCW1;
            source = sequen.bind(record)(source);
            result['text'] = source;
            result = sizing.bind(tangon)(update, result);
            option['children'] = result;
            yankee = sizing.bind(tangon)(kiloes, option);
 1708:
            option = new Array(5);
            option[0] = yankee;
            sizing = _closure1_slot8;
            source = _closure1_slot0;
            sequen = _closure1_slot2;
            yankee = sequen[verify];
            yankee = source.bind(tangon)(yankee);
            kiloes = yankee.PressableOpacity;
            yankee = {};
            update = 'button';
            yankee['accessibilityRole'] = update;
            result = 27;
            record = sequen[result];
            record = source.bind(tangon)(record);
            papara = record.intl;
            cntext = papara.string;
            record = sequen[result];
            record = source.bind(tangon)(record);
            record = record.t;
            record = record.KCzjTk;
            record = cntext.bind(papara)(record);
            yankee['accessibilityLabel'] = record;
            yankee['onPress'] = config;
            config = 37;
            config = sequen[config];
            config = source.bind(tangon)(config);
            record = config.TranscriptOutlineIcon;
            config = {};
            cntext = vacuum.iconDisabled;
            cntext = cntext.color;
            config['color'] = cntext;
            config = sizing.bind(tangon)(record, config);
            yankee['children'] = config;
            yankee = sizing.bind(tangon)(kiloes, yankee);
            option[1] = yankee;
            yankee = sequen[verify];
            yankee = source.bind(tangon)(yankee);
            kiloes = yankee.PressableOpacity;
            yankee = {};
            yankee['accessibilityRole'] = update;
            config = sequen[result];
            config = source.bind(tangon)(config);
            cntext = config.intl;
            record = cntext.string;
            config = sequen[result];
            config = source.bind(tangon)(config);
            config = config.t;
            config = config.bDSZOz;
            config = record.bind(cntext)(config);
            yankee['accessibilityLabel'] = config;
            yankee['onPress'] = output;
            output = 38;
            output = sequen[output];
            output = source.bind(tangon)(output);
            source = output.ClosedCaptionsOutlineIcon;
            output = {};
            if(ctrled) { _fun00008_ip = 1972; continue _fun00007 }
 1959:
            ctrled = vacuum.iconDisabled;
            ctrled = ctrled.color;
            _fun00008_ip = 1982; continue _fun00007;
 1972:
            vacuum = vacuum.icon;
            ctrled = vacuum.color;
 1982:
            output['color'] = ctrled;
            output = sizing.bind(tangon)(source, output);
            yankee['children'] = output;
            yankee = sizing.bind(tangon)(kiloes, yankee);
            option[2] = yankee;
            yankee = _closure1_slot8;
            output = _closure1_slot0;
            kiloes = _closure1_slot2;
            verify = kiloes[verify];
            verify = output.bind(tangon)(verify);
            sizing = verify.PressableOpacity;
            verify = {};
            verify['accessibilityRole'] = update;
            update = kiloes[result];
            update = output.bind(tangon)(update);
            source = update.intl;
            update = source.string;
            result = kiloes[result];
            result = output.bind(tangon)(result);
            result = result.t;
            result = result.Ej3B3d;
            result = update.bind(source)(result);
            verify['accessibilityLabel'] = result;
            verify['onPress'] = offset;
            offset = 39;
            offset = kiloes[offset];
            offset = output.bind(tangon)(offset);
            result = offset.ShareIcon;
            output = {};
            offset = _closure1_slot1;
            echoed = kiloes[echoed];
            echoed = offset.bind(tangon)(echoed);
            echoed = echoed.colors;
            echoed = echoed.TEXT_NORMAL;
            output['color'] = echoed;
            output = yankee.bind(tangon)(result, output);
            verify['children'] = output;
            verify = yankee.bind(tangon)(sizing, verify);
            option[3] = verify;
            verify = 22;
            verify = kiloes[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            verify['quest'] = backup;
            foxtra = _closure1_slot7;
            foxtra = foxtra.VIDEO_MODAL_MOBILE;
            verify['location'] = foxtra;
            romeon = function(argFoo) { // Original name: children
                zuuluu = argFoo;
                option = zuuluu.ref;
                entity = null;
                michal = Object.create(entity);
                entity = 0;
                michal['ref'] = entity;
                kiloes = {};
                backup = zuuluu;
                foxtra = michal;
                backup = copyDataProperties(kiloes, backup, foxtra);
                tangon = _closure1_slot8;
                oscard = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 20;
                entity = verify[entity];
                zuuluu = undefined;
                entity = oscard.bind(zuuluu)(entity);
                michal = entity.PressableOpacity;
                entity = {};
                offset = 'button';
                entity['accessibilityRole'] = offset;
                offset = 27;
                yankee = verify[offset];
                yankee = oscard.bind(zuuluu)(yankee);
                romeon = yankee.intl;
                yankee = romeon.string;
                offset = verify[offset];
                offset = oscard.bind(zuuluu)(offset);
                offset = offset.t;
                offset = offset.PdRCRk;
                offset = yankee.bind(romeon)(offset);
                entity['accessibilityLabel'] = offset;
                entity['ref'] = option;
                kiloes = entity;
                report = copyDataProperties(kiloes, backup);
                report = 40;
                report = verify[report];
                report = oscard.bind(zuuluu)(report);
                oscard = report.MoreHorizontalIcon;
                report = {};
                option = _closure1_slot1;
                golfie = 6;
                golfie = verify[golfie];
                golfie = option.bind(zuuluu)(golfie);
                golfie = golfie.colors;
                golfie = golfie.TEXT_NORMAL;
                report['color'] = golfie;
                oscard = tangon.bind(zuuluu)(oscard, report);
                report = 'children';
                entity[report] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[4] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot16 = tangon;
    tangon = 50;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentInProgress.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalContentInProgress
        _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
            entity = argFoo;
            verify = entity.onClose;
            var _closure2_slot0 = verify;
            report = entity.onNavigateToPostWatchVideo;
            zuuluu = _closure1_slot0;
            backup = _closure1_slot2;
            tangon = 41;
            oscard = backup[tangon];
            tangon = undefined;
            golfie = zuuluu.bind(tangon)(oscard);
            oscard = golfie.useVideoQuestModalContext;
            oscard = oscard.bind(golfie)();
            foxtra = oscard.quest;
            var _closure2_slot1 = foxtra;
            sizing = _closure1_slot4;
            golfie = sizing.useState;
            oscard = false;
            option = golfie.bind(sizing)(oscard);
            golfie = _closure1_slot3;
            oscard = 2;
            golfie = golfie.bind(tangon)(option, oscard);
            oscard = 0;
            romeon = golfie[oscard];
            oscard = 1;
            oscard = golfie[oscard];
            var _closure2_slot2 = oscard;
            option = sizing.useCallback;
            golfie = function() {
                zuuluu = _closure2_slot2;
                michal = undefined;
                entity = function(argFoo) {
                    entity = argFoo;
                    entity = !entity;
                    return entity;
                };
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            oscard = new Array(0);
            oscard = option.bind(sizing)(golfie, oscard);
            offset = sizing.useCallback;
            option = new Array(1);
            option[0] = foxtra;
            golfie = function() {
                report = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 42;
                tangon = michal[entity];
                entity = undefined;
                oscard = report.bind(entity)(tangon);
                report = oscard.openLazy;
                tangon = _closure1_slot0;
                zuuluu = 44;
                zuuluu = michal[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = 43;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                tangon = tangon.bind(entity)(zuuluu, michal);
                golfie = _closure2_slot1;
                option = golfie.id;
                michal = global;
                michal = michal.HermesInternal;
                zuuluu = michal.concat;
                michal = 'transcript-';
                zuuluu = zuuluu.bind(michal)(option);
                michal = {};
                michal['quest'] = golfie;
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                return entity;
            };
            golfie = offset.bind(sizing)(golfie, option);
            yankee = sizing.useCallback;
            option = foxtra.id;
            offset = new Array(1);
            offset[0] = option;
            option = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 45;
                michal = golfie[entity];
                entity = undefined;
                report = oscard.bind(entity)(michal);
                tangon = report.showShareActionSheet;
                zuuluu = {};
                michal = 25;
                michal = golfie[michal];
                golfie = oscard.bind(entity)(michal);
                oscard = golfie.getQuestUrl;
                michal = _closure2_slot1;
                michal = michal.id;
                michal = oscard.bind(golfie)(michal);
                zuuluu['message'] = michal;
                michal = 'Video Quest Modal';
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            option = yankee.bind(sizing)(option, offset);
            yankee = sizing.useCallback;
            offset = new Array(1);
            offset[0] = verify;
            verify = function() {
                michal = _closure2_slot0;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            yankee = yankee.bind(sizing)(verify, offset);
            verify = 46;
            verify = backup[verify];
            offset = zuuluu.bind(tangon)(verify);
            verify = offset.useQuestImpressionId;
            verify = verify.bind(offset)();
            var _closure2_slot3 = verify;
            kiloes = sizing.useCallback;
            offset = new Array(2);
            offset[0] = foxtra;
            offset[1] = verify;
            verify = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 25;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot1;
                michal = {};
                golfie = 47;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 48;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot3;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            offset = kiloes.bind(sizing)(verify, offset);
            kiloes = sizing.useCallback;
            output = foxtra.id;
            verify = new Array(1);
            verify[0] = output;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 49;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openRewardDetailsBottomSheet;
                michal = {};
                report = _closure2_slot1;
                report = report.id;
                michal['questId'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            verify = kiloes.bind(sizing)(michal, verify);
            michal = 25;
            michal = backup[michal];
            backup = zuuluu.bind(tangon)(michal);
            zuuluu = backup.getVideoOrientation;
            michal = foxtra.config;
            backup = zuuluu.bind(backup)(michal);
            zuuluu = _closure1_slot8;
            michal = 'portrait';
            if(!(michal !== backup)) { _fun00012_ip = 352; continue _fun00011 }
 346:
            michal = _closure1_slot15;
            _fun00012_ip = 356; continue _fun00011;
 352:
            michal = _closure1_slot16;
 356:
            entity = {};
            entity['quest'] = foxtra;
            entity['captionsEnabled'] = romeon;
            entity['handleClose'] = yankee;
            entity['handlePrimaryCtaPress'] = offset;
            entity['handleRewardDetailsPress'] = verify;
            entity['handleShareQuest'] = option;
            entity['handleOpenTranscript'] = golfie;
            entity['handleToggleCaptions'] = oscard;
            entity['onNavigateToPostWatchVideo'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();