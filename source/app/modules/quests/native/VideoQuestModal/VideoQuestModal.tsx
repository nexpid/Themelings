// app/modules/quests/native/VideoQuestModal/VideoQuestModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    kiloes = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = kiloes;
    var _closure1_slot2 = golfie;
    entity = function(argFoo) { // Original name: VideoQuestModalContent
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            source = michal.onClose;
            verify = michal.initialStep;
            var _closure2_slot0 = verify;
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            report = 7;
            michal = michal[report];
            tangon = undefined;
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.useVideoQuestModalContext;
            michal = michal.bind(zuuluu)();
            michal = michal.quest;
            zuuluu = michal.userStatus;
            golfie = null;
            oscard = golfie == zuuluu;
            michal = undefined;
            if(oscard) { _fun00002_ip = 85; continue _fun00001 }
 79:
            michal = zuuluu.completedAt;
 85:
            update = golfie != michal;
            var _closure2_slot1 = update;
            oscard = _closure1_slot4;
            zuuluu = oscard.useState;
            michal = verify;
            if(!(golfie == michal)) { _fun00002_ip = 133; continue _fun00001 }
 109:
            option = _closure1_slot9;
            if(update) { _fun00002_ip = 124; continue _fun00001 }
 116:
            golfie = option.WATCH_VIDEO;
            _fun00002_ip = 130; continue _fun00001;
 124:
            golfie = option.POST_WATCH_VIDEO;
 130:
            michal = golfie;
 133:
            oscard = zuuluu.bind(oscard)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(oscard, michal);
            michal = 0;
            result = zuuluu[michal];
            var _closure2_slot2 = result;
            golfie = 1;
            zuuluu = zuuluu[golfie];
            var _closure2_slot3 = zuuluu;
            yankee = _closure1_slot4;
            offset = yankee.useContext;
            oscard = _closure1_slot0;
            zuuluu = _closure1_slot2;
            option = 8;
            option = zuuluu[option];
            option = oscard.bind(tangon)(option);
            option = option.QuestDockGestureContext;
            option = offset.bind(yankee)(option);
            yankee = option.windowDimensions;
            romeon = _closure1_slot4;
            option = romeon.useContext;
            offset = _closure1_slot1;
            report = zuuluu[report];
            report = offset.bind(tangon)(report);
            report = option.bind(romeon)(report);
            report = report.isModalPanGestureActive;
            var _closure2_slot4 = report;
            option = _closure1_slot10;
            kiloes = option.bind(tangon)();
            sizing = 9;
            option = zuuluu[sizing];
            romeon = oscard.bind(tangon)(option);
            option = romeon.useSharedValue;
            vacuum = option.bind(romeon)(michal);
            var _closure2_slot5 = vacuum;
            option = 10;
            option = zuuluu[option];
            option = offset.bind(tangon)(option);
            option = option.bind(tangon)(yankee);
            backup = option.height;
            option = 0.8;
            ctrled = option * backup;
            var _closure2_slot6 = ctrled;
            foxtra = _closure1_slot4;
            romeon = foxtra.useCallback;
            yankee = new Array(1);
            yankee[0] = report;
            option = function() {
                michal = _closure2_slot4;
                entity = true;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            foxtra = romeon.bind(foxtra)(option, yankee);
            romeon = _closure1_slot4;
            yankee = romeon.useCallback;
            option = new Array(1);
            option[0] = report;
            report = function() {
                michal = _closure2_slot4;
                entity = false;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            yankee = yankee.bind(romeon)(report, option);
            report = 11;
            report = zuuluu[report];
            option = offset.bind(tangon)(report);
            report = {};
            romeon = true;
            report['gestureEnabled'] = romeon;
            report['height'] = backup;
            report['maxTranslate'] = ctrled;
            echoed = 0.5;
            echoed = echoed * backup;
            report['thresholdTranslate'] = echoed;
            report['translateY'] = vacuum;
            report['onStart'] = foxtra;
            report['onEnd'] = yankee;
            report = option.bind(tangon)(report);
            option = zuuluu[sizing];
            foxtra = oscard.bind(tangon)(option);
            yankee = foxtra.useAnimatedStyle;
            option = function() { // Original name: u
                entity = {};
                zuuluu = {};
                report = _closure1_slot0;
                tangon = _closure1_slot2;
                michal = 9;
                tangon = tangon[michal];
                michal = undefined;
                golfie = report.bind(michal)(tangon);
                oscard = golfie.interpolate;
                report = _closure2_slot5;
                tangon = report.get;
                report = tangon.bind(report)();
                option = _closure2_slot6;
                tangon = [0];
                tangon[1] = option;
                option = _closure2_slot6;
                michal = [0];
                michal[1] = option;
                michal = oscard.bind(golfie)(report, tangon, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            echoed = {};
            sequen = zuuluu[sizing];
            sequen = oscard.bind(tangon)(sequen);
            sequen = sequen.interpolate;
            echoed['interpolate'] = sequen;
            echoed['translateY'] = vacuum;
            echoed['maxVerticalTranslate'] = ctrled;
            option['__closure'] = echoed;
            echoed = 10882296861392.0;
            option['__workletHash'] = echoed;
            echoed = _closure1_slot11;
            option['__initData'] = echoed;
            option = yankee.bind(foxtra)(option);
            echoed = _closure1_slot4;
            foxtra = echoed.useLayoutEffect;
            yankee = new Array(2);
            yankee[0] = update;
            yankee[1] = verify;
            verify = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot1;
                    if(!michal) { _fun00004_ip = 20; continue _fun00003 }
 10:
                    tangon = _closure2_slot0;
                    zuuluu = null;
                    michal = zuuluu == tangon;
 20:
                    if(!michal) { _fun00004_ip = 47; continue _fun00003 }
 23:
                    zuuluu = _closure2_slot3;
                    entity = _closure1_slot9;
                    michal = entity.POST_WATCH_VIDEO;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
 47:
                    entity = undefined;
                    return entity;
                }
            };
            verify = foxtra.bind(echoed)(verify, yankee);
            echoed = _closure1_slot4;
            foxtra = echoed.useCallback;
            yankee = function() {
                zuuluu = _closure2_slot3;
                entity = _closure1_slot9;
                michal = entity.WATCH_VIDEO;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            verify = new Array(0);
            update = foxtra.bind(echoed)(yankee, verify);
            echoed = _closure1_slot4;
            foxtra = echoed.useCallback;
            yankee = function() {
                zuuluu = _closure2_slot3;
                entity = _closure1_slot9;
                michal = entity.POST_WATCH_VIDEO;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            verify = new Array(0);
            vacuum = foxtra.bind(echoed)(yankee, verify);
            verify = 12;
            verify = zuuluu[verify];
            verify = offset.bind(tangon)(verify);
            yankee = verify.bind(tangon)();
            var _closure2_slot7 = yankee;
            zuuluu = zuuluu[sizing];
            oscard = oscard.bind(tangon)(zuuluu);
            zuuluu = oscard.useSharedValue;
            verify = _closure1_slot9;
            verify = verify.POST_WATCH_VIDEO;
            if(!(result === verify)) { _fun00002_ip = 689; continue _fun00001 }
 686:
            michal = golfie;
 689:
            golfie = zuuluu.bind(oscard)(michal);
            var _closure2_slot8 = golfie;
            offset = _closure1_slot0;
            foxtra = _closure1_slot2;
            michal = foxtra[sizing];
            oscard = offset.bind(tangon)(michal);
            zuuluu = oscard.useAnimatedStyle;
            michal = function() { // Original name: M
                entity = {};
                offset = _closure1_slot0;
                yankee = _closure1_slot2;
                report = 13;
                michal = yankee[report];
                verify = undefined;
                foxtra = offset.bind(verify)(michal);
                romeon = foxtra.withTiming;
                option = 9;
                michal = yankee[option];
                backup = offset.bind(verify)(michal);
                golfie = backup.clamp;
                zuuluu = _closure2_slot8;
                michal = zuuluu.get;
                oscard = michal.bind(zuuluu)();
                michal = 0;
                zuuluu = 1;
                oscard = golfie.bind(backup)(oscard, michal, zuuluu);
                zuuluu = {};
                golfie = 500;
                zuuluu['duration'] = golfie;
                zuuluu = romeon.bind(foxtra)(oscard, zuuluu);
                entity['opacity'] = zuuluu;
                zuuluu = {};
                report = yankee[report];
                oscard = offset.bind(verify)(report);
                report = oscard.withTiming;
                option = yankee[option];
                offset = offset.bind(verify)(option);
                verify = offset.interpolate;
                option = _closure2_slot8;
                tangon = option.get;
                option = tangon.bind(option)();
                tangon = new Array(2);
                yankee = -100;
                tangon[0] = yankee;
                tangon[1] = michal;
                michal = [0, 1];
                tangon = verify.bind(offset)(option, michal, tangon);
                michal = {};
                michal['duration'] = golfie;
                michal = report.bind(oscard)(tangon, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            verify = {};
            echoed = 13;
            echoed = foxtra[echoed];
            echoed = offset.bind(tangon)(echoed);
            echoed = echoed.withTiming;
            verify['withTiming'] = echoed;
            echoed = foxtra[sizing];
            echoed = offset.bind(tangon)(echoed);
            echoed = echoed.clamp;
            verify['clamp'] = echoed;
            verify['cloudsAnimationState'] = golfie;
            echoed = 500;
            verify['CLOUDS_BACKGROUND_ENTRANCE_DURATION'] = echoed;
            echoed = foxtra[sizing];
            echoed = offset.bind(tangon)(echoed);
            echoed = echoed.interpolate;
            verify['interpolate'] = echoed;
            michal['__closure'] = verify;
            verify = 1377464767376.0;
            michal['__workletHash'] = verify;
            verify = _closure1_slot12;
            michal['__initData'] = verify;
            config = zuuluu.bind(oscard)(michal);
            michal = foxtra[sizing];
            oscard = offset.bind(tangon)(michal);
            zuuluu = oscard.useAnimatedStyle;
            michal = function() { // Original name: H
                entity = {};
                zuuluu = {};
                option = _closure1_slot0;
                verify = _closure1_slot2;
                michal = 14;
                michal = verify[michal];
                golfie = undefined;
                oscard = option.bind(golfie)(michal);
                report = oscard.withSpring;
                michal = 9;
                michal = verify[michal];
                romeon = option.bind(golfie)(michal);
                yankee = romeon.interpolate;
                offset = _closure2_slot8;
                tangon = offset.get;
                offset = tangon.bind(offset)();
                michal = _closure2_slot7;
                michal = michal.top;
                tangon = new Array(2);
                tangon[0] = michal;
                michal = 0;
                tangon[1] = michal;
                michal = [0, 1];
                tangon = yankee.bind(romeon)(offset, michal, tangon);
                michal = 15;
                michal = verify[michal];
                michal = option.bind(golfie)(michal);
                michal = michal.springStandard;
                michal = report.bind(oscard)(tangon, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            verify = {};
            echoed = 14;
            echoed = foxtra[echoed];
            echoed = offset.bind(tangon)(echoed);
            echoed = echoed.withSpring;
            verify['withSpring'] = echoed;
            sizing = foxtra[sizing];
            sizing = offset.bind(tangon)(sizing);
            sizing = sizing.interpolate;
            verify['interpolate'] = sizing;
            verify['cloudsAnimationState'] = golfie;
            verify['safeAreaInsets'] = yankee;
            yankee = 15;
            yankee = foxtra[yankee];
            yankee = offset.bind(tangon)(yankee);
            yankee = yankee.springStandard;
            verify['springStandard'] = yankee;
            michal['__closure'] = verify;
            verify = 15744155963275.0;
            michal['__workletHash'] = verify;
            verify = _closure1_slot13;
            michal['__initData'] = verify;
            papara = zuuluu.bind(oscard)(michal);
            oscard = _closure1_slot4;
            zuuluu = oscard.useEffect;
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = result;
            entity = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = _closure2_slot8;
                    michal = zuuluu.set;
                    report = _closure2_slot2;
                    entity = _closure1_slot9;
                    tangon = entity.POST_WATCH_VIDEO;
                    entity = 0;
                    if(!(report === tangon)) { _fun00006_ip = 38; continue _fun00005 }
 35:
                    entity = 1;
 38:
                    entity = michal.bind(zuuluu)(entity);
                    entity = undefined;
                    return entity;
                }
            };
            entity = zuuluu.bind(oscard)(entity, michal);
            zuuluu = _closure1_slot7;
            entity = 16;
            entity = foxtra[entity];
            entity = offset.bind(tangon)(entity);
            michal = entity.GestureDetector;
            entity = {};
            entity['gesture'] = report;
            golfie = _closure1_slot8;
            record = _closure1_slot1;
            echoed = 17;
            report = foxtra[echoed];
            oscard = record.bind(tangon)(report);
            report = {};
            report['style'] = option;
            yankee = _closure1_slot8;
            verify = _closure1_slot5;
            option = {};
            ctrled = kiloes.backgroundWrapper;
            sizing = new Array(2);
            sizing[0] = ctrled;
            ctrled = {};
            ctrled['height'] = backup;
            sizing[1] = ctrled;
            option['style'] = sizing;
            sequen = _closure1_slot7;
            sizing = foxtra[echoed];
            ctrled = record.bind(tangon)(sizing);
            sizing = {};
            target = kiloes.postWatchVideoBackground;
            cntext = new Array(2);
            cntext[0] = target;
            cntext[1] = papara;
            sizing['style'] = cntext;
            ctrled = sequen.bind(tangon)(ctrled, sizing);
            sizing = new Array(2);
            sizing[0] = ctrled;
            sequen = _closure1_slot7;
            echoed = foxtra[echoed];
            ctrled = record.bind(tangon)(echoed);
            echoed = {};
            echoed['style'] = config;
            cntext = _closure1_slot7;
            config = 18;
            config = foxtra[config];
            record = record.bind(tangon)(config);
            config = {};
            papara = 'top';
            config['align'] = papara;
            config = cntext.bind(tangon)(record, config);
            echoed['children'] = config;
            echoed = sequen.bind(tangon)(ctrled, echoed);
            sizing[1] = echoed;
            option['children'] = sizing;
            verify = yankee.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            yankee = _closure1_slot7;
            verify = 19;
            verify = foxtra[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.SafeAreaPaddingView;
            verify = {};
            verify['top'] = romeon;
            foxtra = kiloes.wrapper;
            romeon = new Array(2);
            romeon[0] = foxtra;
            foxtra = {};
            foxtra['height'] = backup;
            romeon[1] = foxtra;
            verify['style'] = romeon;
            backup = _closure1_slot8;
            foxtra = _closure1_slot5;
            romeon = {};
            kiloes = kiloes.contentWrapper;
            romeon['style'] = kiloes;
            kiloes = _closure1_slot9;
            kiloes = kiloes.WATCH_VIDEO;
            sizing = result === kiloes;
            if(!sizing) { _fun00002_ip = 1378; continue _fun00001 }
 1336:
            ctrled = _closure1_slot7;
            echoed = _closure1_slot1;
            sequen = _closure1_slot2;
            kiloes = 20;
            kiloes = sequen[kiloes];
            echoed = echoed.bind(tangon)(kiloes);
            kiloes = {};
            kiloes['onNavigateToPostWatchVideo'] = vacuum;
            kiloes['onClose'] = source;
            sizing = ctrled.bind(tangon)(echoed, kiloes);
 1378:
            kiloes = new Array(2);
            kiloes[0] = sizing;
            sizing = _closure1_slot9;
            sizing = sizing.POST_WATCH_VIDEO;
            sizing = result === sizing;
            if(!sizing) { _fun00002_ip = 1445; continue _fun00001 }
 1403:
            echoed = _closure1_slot7;
            result = _closure1_slot1;
            ctrled = _closure1_slot2;
            output = 21;
            output = ctrled[output];
            result = result.bind(tangon)(output);
            output = {};
            output['onClose'] = source;
            output['onRestartVideo'] = update;
            sizing = echoed.bind(tangon)(result, output);
 1445:
            kiloes[1] = sizing;
            romeon['children'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot15 = entity;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    option = 0;
    michal = golfie[option];
    entity = undefined;
    michal = kiloes.bind(entity)(michal);
    var _closure1_slot3 = michal;
    foxtra = 1;
    report = golfie[foxtra];
    michal = argCor;
    michal = michal.bind(entity)(report);
    var _closure1_slot4 = michal;
    michal = 2;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.View;
    var _closure1_slot5 = report;
    sizing = michal.StyleSheet;
    michal = 3;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.ThemeTypes;
    var _closure1_slot6 = michal;
    michal = 4;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.jsx;
    var _closure1_slot7 = report;
    michal = michal.jsxs;
    var _closure1_slot8 = michal;
    michal = {};
    michal['WATCH_VIDEO'] = option;
    report = 'WATCH_VIDEO';
    michal[option] = report;
    michal['POST_WATCH_VIDEO'] = foxtra;
    report = 'POST_WATCH_VIDEO';
    michal[foxtra] = report;
    var _closure1_slot9 = michal;
    report = 5;
    option = golfie[report];
    offset = oscard.bind(entity)(option);
    verify = offset.createStyles;
    option = {};
    yankee = {'flexDirection': 'column', 'flexGrow': 1, 'flexShrink': 1, 'zIndex': 1};
    option['wrapper'] = yankee;
    yankee = {};
    yankee['flex'] = foxtra;
    option['contentWrapper'] = yankee;
    yankee = {};
    update = sizing.absoluteFillObject;
    source = yankee;
    romeon = copyDataProperties(source, update);
    romeon = 6;
    backup = golfie[romeon];
    backup = kiloes.bind(entity)(backup);
    backup = backup.radii;
    output = backup.lg;
    backup = 'borderRadius';
    yankee[backup] = output;
    output = golfie[romeon];
    output = kiloes.bind(entity)(output);
    output = output.colors;
    result = output.BG_BASE_TERTIARY;
    output = 'backgroundColor';
    yankee[output] = result;
    option['postWatchVideoBackground'] = yankee;
    yankee = {};
    update = sizing.absoluteFillObject;
    source = yankee;
    sizing = copyDataProperties(source, update);
    romeon = golfie[romeon];
    romeon = kiloes.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.lg;
    yankee[backup] = romeon;
    romeon = 'flex';
    yankee[romeon] = foxtra;
    backup = 'hidden';
    romeon = 'overflow';
    yankee[romeon] = backup;
    backup = 'none';
    romeon = 'pointerEvents';
    yankee[romeon] = backup;
    romeon = 'zIndex';
    yankee[romeon] = foxtra;
    option['backgroundWrapper'] = yankee;
    option = verify.bind(offset)(option);
    var _closure1_slot10 = option;
    option = {};
    verify = 'function VideoQuestModalTsx1(){const{interpolate,translateY,maxVerticalTranslate}=this.__closure;return{transform:[{translateY:interpolate(translateY.get(),[0,maxVerticalTranslate],[0,maxVerticalTranslate])}]};}';
    option['code'] = verify;
    var _closure1_slot11 = option;
    option = {};
    verify = 'function VideoQuestModalTsx2(){const{withTiming,clamp,cloudsAnimationState,CLOUDS_BACKGROUND_ENTRANCE_DURATION,interpolate}=this.__closure;return{opacity:withTiming(clamp(cloudsAnimationState.get(),0,1),{duration:CLOUDS_BACKGROUND_ENTRANCE_DURATION}),transform:[{translateY:withTiming(interpolate(cloudsAnimationState.get(),[0,1],[-100,0]),{duration:CLOUDS_BACKGROUND_ENTRANCE_DURATION})}]};}';
    option['code'] = verify;
    var _closure1_slot12 = option;
    option = {};
    verify = 'function VideoQuestModalTsx3(){const{withSpring,interpolate,cloudsAnimationState,safeAreaInsets,springStandard}=this.__closure;return{transform:[{translateY:withSpring(interpolate(cloudsAnimationState.get(),[0,1],[safeAreaInsets.top,0]),springStandard)}]};}';
    option['code'] = verify;
    var _closure1_slot13 = option;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    offset = {};
    yankee = 'transparent';
    offset['backgroundColor'] = yankee;
    report['transparentBackground'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot14 = report;
    report = 27;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/quests/native/VideoQuestModal/VideoQuestModal.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: VideoQuestModal
        entity = argFoo;
        verify = entity.questId;
        romeon = entity.questContentPosition;
        var _closure2_slot0 = romeon;
        kiloes = entity.onClose;
        var _closure2_slot1 = kiloes;
        foxtra = entity.videoSessionId;
        var _closure2_slot2 = foxtra;
        yankee = entity.initialStep;
        var _closure2_slot3 = yankee;
        michal = _closure1_slot14;
        tangon = undefined;
        report = michal.bind(tangon)();
        michal = _closure1_slot0;
        golfie = _closure1_slot2;
        oscard = 22;
        oscard = golfie[oscard];
        option = michal.bind(tangon)(oscard);
        oscard = option.useNonNullableQuest;
        backup = oscard.bind(option)(verify);
        var _closure2_slot4 = backup;
        verify = _closure1_slot4;
        option = verify.useRef;
        oscard = false;
        offset = option.bind(verify)(oscard);
        var _closure2_slot5 = offset;
        verify = _closure1_slot4;
        option = verify.useMemo;
        oscard = new Array(6);
        oscard[0] = kiloes;
        oscard[1] = backup;
        oscard[2] = foxtra;
        oscard[3] = romeon;
        oscard[4] = yankee;
        oscard[5] = offset;
        zuuluu = function() {
            entity = {};
            zuuluu = {};
            tangon = true;
            zuuluu['fullscreen'] = tangon;
            tangon = function() { // Original name: headerLeft
                entity = null;
                return entity;
            };
            zuuluu['headerLeft'] = tangon;
            michal = function() { // Original name: render
                tangon = _closure1_slot7;
                output = _closure1_slot0;
                result = _closure1_slot2;
                entity = 23;
                entity = result[entity];
                zuuluu = undefined;
                entity = output.bind(zuuluu)(entity);
                michal = entity.ThemeContextProvider;
                entity = {};
                report = _closure1_slot6;
                report = report.DARKER;
                entity['theme'] = report;
                golfie = _closure1_slot7;
                oscard = _closure1_slot1;
                report = 7;
                report = result[report];
                report = oscard.bind(zuuluu)(report);
                oscard = report.Provider;
                report = {};
                option = {};
                kiloes = _closure2_slot4;
                option['quest'] = kiloes;
                verify = _closure2_slot2;
                option['videoSessionId'] = verify;
                verify = _closure2_slot5;
                option['isModalPanGestureActive'] = verify;
                report['value'] = option;
                offset = _closure1_slot7;
                option = 8;
                option = result[option];
                option = output.bind(zuuluu)(option);
                verify = option.QuestDockGestureContextProvider;
                option = {};
                foxtra = _closure1_slot7;
                yankee = 24;
                yankee = result[yankee];
                yankee = output.bind(zuuluu)(yankee);
                romeon = yankee.QuestContentImpressionTrackerNative;
                yankee = {};
                sizing = true;
                yankee['overrideVisibility'] = sizing;
                sizing = 25;
                sizing = result[sizing];
                sizing = output.bind(zuuluu)(sizing);
                sizing = sizing.QuestContent;
                sizing = sizing.VIDEO_MODAL_MOBILE;
                yankee['questContent'] = sizing;
                yankee['questOrQuests'] = kiloes;
                backup = _closure2_slot0;
                yankee['questContentPosition'] = backup;
                backup = function() { // Original name: children
                    tangon = _closure1_slot7;
                    zuuluu = _closure1_slot15;
                    michal = {};
                    report = _closure2_slot3;
                    michal['initialStep'] = report;
                    entity = _closure2_slot1;
                    michal['onClose'] = entity;
                    entity = undefined;
                    entity = tangon.bind(entity)(zuuluu, michal);
                    return entity;
                };
                yankee['children'] = backup;
                yankee = foxtra.bind(zuuluu)(romeon, yankee);
                option['children'] = yankee;
                option = offset.bind(zuuluu)(verify, option);
                report['children'] = option;
                report = golfie.bind(zuuluu)(oscard, report);
                entity['children'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            zuuluu['render'] = michal;
            michal = 'watch_mobile_video_quest';
            entity[michal] = zuuluu;
            return entity;
        };
        oscard = option.bind(verify)(zuuluu, oscard);
        zuuluu = _closure1_slot7;
        entity = 26;
        entity = golfie[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.Modal;
        entity = {'hideTitle': true, 'initialRouteName': 'watch_mobile_video_quest'};
        entity['screens'] = oscard;
        oscard = report.transparentBackground;
        entity['viewStyle'] = oscard;
        report = report.transparentBackground;
        entity['containerStyle'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = tangon;
    zuuluu['VideoQuestModalSteps'] = michal;
    return entity;
})();