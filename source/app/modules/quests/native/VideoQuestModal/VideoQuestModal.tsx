// app/modules/quests/native/VideoQuestModal/VideoQuestModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    sizing = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = sizing;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    verify = 0;
    michal = golfie[verify];
    entity = undefined;
    michal = sizing.bind(entity)(michal);
    var _closure1_slot3 = michal;
    backup = 1;
    report = golfie[backup];
    michal = argCor;
    option = michal.bind(entity)(report);
    var _closure1_slot4 = option;
    michal = 2;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.View;
    var _closure1_slot5 = report;
    output = michal.StyleSheet;
    michal = 3;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.ThemeTypes;
    var _closure1_slot6 = michal;
    michal = 4;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.jsx;
    var _closure1_slot7 = report;
    michal = michal.jsxs;
    var _closure1_slot8 = michal;
    michal = {'mass': 1.9, 'damping': 18, 'stiffness': 80, 'overshootClamping': true};
    var _closure1_slot9 = michal;
    michal = {};
    michal['WATCH_VIDEO'] = verify;
    report = 'WATCH_VIDEO';
    michal[verify] = report;
    michal['POST_WATCH_VIDEO'] = backup;
    report = 'POST_WATCH_VIDEO';
    michal[backup] = report;
    var _closure1_slot10 = michal;
    report = 5;
    verify = golfie[report];
    yankee = oscard.bind(entity)(verify);
    offset = yankee.createStyles;
    verify = {};
    romeon = {'flexDirection': 'column', 'flexGrow': 1, 'flexShrink': 1, 'zIndex': 1};
    verify['wrapper'] = romeon;
    romeon = {};
    romeon['flex'] = backup;
    verify['contentWrapper'] = romeon;
    romeon = {};
    source = output.absoluteFillObject;
    ctrled = romeon;
    foxtra = copyDataProperties(ctrled, source);
    foxtra = 6;
    kiloes = golfie[foxtra];
    kiloes = sizing.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    result = kiloes.lg;
    kiloes = 'borderRadius';
    romeon[kiloes] = result;
    result = golfie[foxtra];
    result = sizing.bind(entity)(result);
    result = result.colors;
    echoed = result.BG_BASE_TERTIARY;
    result = 'backgroundColor';
    romeon[result] = echoed;
    verify['postWatchVideoBackground'] = romeon;
    romeon = {};
    source = output.absoluteFillObject;
    ctrled = romeon;
    output = copyDataProperties(ctrled, source);
    foxtra = golfie[foxtra];
    foxtra = sizing.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    romeon[kiloes] = foxtra;
    foxtra = 'flex';
    romeon[foxtra] = backup;
    kiloes = 'hidden';
    foxtra = 'overflow';
    romeon[foxtra] = kiloes;
    kiloes = 'none';
    foxtra = 'pointerEvents';
    romeon[foxtra] = kiloes;
    foxtra = 'zIndex';
    romeon[foxtra] = backup;
    verify['backgroundWrapper'] = romeon;
    verify = offset.bind(yankee)(verify);
    var _closure1_slot11 = verify;
    verify = {};
    offset = 'function VideoQuestModalTsx1(){const{interpolate,translateY,maxVerticalTranslate}=this.__closure;return{transform:[{translateY:interpolate(translateY.get(),[0,maxVerticalTranslate],[0,maxVerticalTranslate])}]};}';
    verify['code'] = offset;
    var _closure1_slot12 = verify;
    verify = {};
    offset = 'function VideoQuestModalTsx2(){const{withSpring,clamp,cloudsAnimationState,BACKGROUND_ENTRANCE_ANIMATION_SPRING_CONFIG,interpolate}=this.__closure;return{opacity:withSpring(clamp(cloudsAnimationState.get(),0,1),BACKGROUND_ENTRANCE_ANIMATION_SPRING_CONFIG),transform:[{translateY:withSpring(interpolate(cloudsAnimationState.get(),[0,1],[-100,0]),BACKGROUND_ENTRANCE_ANIMATION_SPRING_CONFIG)}]};}';
    verify['code'] = offset;
    var _closure1_slot13 = verify;
    verify = {};
    offset = 'function VideoQuestModalTsx3(){const{withSpring,interpolate,cloudsAnimationState,safeAreaInsets,BACKGROUND_ENTRANCE_ANIMATION_SPRING_CONFIG}=this.__closure;return{transform:[{translateY:withSpring(interpolate(cloudsAnimationState.get(),[0,1],[safeAreaInsets.top,0]),BACKGROUND_ENTRANCE_ANIMATION_SPRING_CONFIG)}]};}';
    verify['code'] = offset;
    var _closure1_slot14 = verify;
    offset = option.memo;
    verify = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            echoed = michal.onClose;
            verify = michal.initialStep;
            var _closure2_slot0 = verify;
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            report = 7;
            michal = michal[report];
            tangon = undefined;
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.useVideoQuestModalContext;
            michal = michal.bind(zuuluu)();
            michal = michal.quest;
            zuuluu = michal.userStatus;
            golfie = null;
            oscard = golfie == zuuluu;
            michal = undefined;
            if(oscard) { _fun00002_ip = 85; continue _fun00001 }
 79:
            michal = zuuluu.completedAt;
 85:
            result = golfie != michal;
            var _closure2_slot1 = result;
            oscard = _closure1_slot4;
            zuuluu = oscard.useState;
            michal = verify;
            if(!(golfie == michal)) { _fun00002_ip = 133; continue _fun00001 }
 109:
            option = _closure1_slot10;
            if(result) { _fun00002_ip = 124; continue _fun00001 }
 116:
            golfie = option.WATCH_VIDEO;
            _fun00002_ip = 130; continue _fun00001;
 124:
            golfie = option.POST_WATCH_VIDEO;
 130:
            michal = golfie;
 133:
            oscard = zuuluu.bind(oscard)(michal);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(oscard, michal);
            michal = 0;
            sizing = zuuluu[michal];
            var _closure2_slot2 = sizing;
            golfie = 1;
            zuuluu = zuuluu[golfie];
            var _closure2_slot3 = zuuluu;
            update = _closure1_slot4;
            offset = update.useContext;
            oscard = _closure1_slot0;
            zuuluu = _closure1_slot2;
            option = 8;
            option = zuuluu[option];
            option = oscard.bind(tangon)(option);
            option = option.QuestDockGestureContext;
            option = offset.bind(update)(option);
            yankee = option.windowDimensions;
            option = update.useContext;
            offset = _closure1_slot1;
            report = zuuluu[report];
            report = offset.bind(tangon)(report);
            report = option.bind(update)(report);
            report = report.isModalPanGestureActive;
            var _closure2_slot4 = report;
            option = _closure1_slot11;
            foxtra = option.bind(tangon)();
            ctrled = 9;
            option = zuuluu[ctrled];
            romeon = oscard.bind(tangon)(option);
            option = romeon.useSharedValue;
            sequen = option.bind(romeon)(michal);
            var _closure2_slot5 = sequen;
            option = 10;
            option = zuuluu[option];
            option = offset.bind(tangon)(option);
            option = option.bind(tangon)(yankee);
            output = option.height;
            option = 0.8;
            vacuum = option * output;
            var _closure2_slot6 = vacuum;
            romeon = update.useCallback;
            yankee = new Array(1);
            yankee[0] = report;
            option = function() {
                michal = _closure2_slot4;
                entity = true;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            backup = romeon.bind(update)(option, yankee);
            yankee = update.useCallback;
            option = new Array(1);
            option[0] = report;
            report = function() {
                michal = _closure2_slot4;
                entity = false;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            romeon = yankee.bind(update)(report, option);
            report = 11;
            report = zuuluu[report];
            option = offset.bind(tangon)(report);
            report = {};
            yankee = true;
            report['gestureEnabled'] = yankee;
            report['height'] = output;
            report['maxTranslate'] = vacuum;
            source = 0.5;
            source = source * output;
            report['thresholdTranslate'] = source;
            report['translateY'] = sequen;
            report['onStart'] = backup;
            report['onEnd'] = romeon;
            report = option.bind(tangon)(report);
            option = zuuluu[ctrled];
            backup = oscard.bind(tangon)(option);
            romeon = backup.useAnimatedStyle;
            option = function() { // Original name: u
                entity = {};
                zuuluu = {};
                report = _closure1_slot0;
                tangon = _closure1_slot2;
                michal = 9;
                tangon = tangon[michal];
                michal = undefined;
                golfie = report.bind(michal)(tangon);
                oscard = golfie.interpolate;
                report = _closure2_slot5;
                tangon = report.get;
                report = tangon.bind(report)();
                option = _closure2_slot6;
                tangon = [0];
                tangon[1] = option;
                option = _closure2_slot6;
                michal = [0];
                michal[1] = option;
                michal = oscard.bind(golfie)(report, tangon, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            source = {};
            config = zuuluu[ctrled];
            config = oscard.bind(tangon)(config);
            config = config.interpolate;
            source['interpolate'] = config;
            source['translateY'] = sequen;
            source['maxVerticalTranslate'] = vacuum;
            option['__closure'] = source;
            source = 10882296861392.0;
            option['__workletHash'] = source;
            source = _closure1_slot12;
            option['__initData'] = source;
            option = romeon.bind(backup)(option);
            backup = update.useLayoutEffect;
            romeon = new Array(2);
            romeon[0] = result;
            romeon[1] = verify;
            verify = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot1;
                    if(!michal) { _fun00004_ip = 20; continue _fun00003 }
 10:
                    tangon = _closure2_slot0;
                    zuuluu = null;
                    michal = zuuluu == tangon;
 20:
                    if(!michal) { _fun00004_ip = 47; continue _fun00003 }
 23:
                    zuuluu = _closure2_slot3;
                    entity = _closure1_slot10;
                    michal = entity.POST_WATCH_VIDEO;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
 47:
                    entity = undefined;
                    return entity;
                }
            };
            verify = backup.bind(update)(verify, romeon);
            backup = update.useCallback;
            romeon = function() {
                zuuluu = _closure2_slot3;
                entity = _closure1_slot10;
                michal = entity.WATCH_VIDEO;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            verify = new Array(0);
            result = backup.bind(update)(romeon, verify);
            backup = update.useCallback;
            romeon = function() {
                zuuluu = _closure2_slot3;
                entity = _closure1_slot10;
                michal = entity.POST_WATCH_VIDEO;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            verify = new Array(0);
            source = backup.bind(update)(romeon, verify);
            verify = 12;
            verify = zuuluu[verify];
            verify = offset.bind(tangon)(verify);
            update = verify.bind(tangon)();
            var _closure2_slot7 = update;
            zuuluu = zuuluu[ctrled];
            oscard = oscard.bind(tangon)(zuuluu);
            zuuluu = oscard.useSharedValue;
            verify = _closure1_slot10;
            verify = verify.POST_WATCH_VIDEO;
            if(!(sizing === verify)) { _fun00002_ip = 665; continue _fun00001 }
 662:
            michal = golfie;
 665:
            golfie = zuuluu.bind(oscard)(michal);
            var _closure2_slot8 = golfie;
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            michal = backup[ctrled];
            oscard = offset.bind(tangon)(michal);
            zuuluu = oscard.useAnimatedStyle;
            michal = function() { // Original name: W
                entity = {};
                offset = _closure1_slot0;
                yankee = _closure1_slot2;
                tangon = 13;
                michal = yankee[tangon];
                verify = undefined;
                romeon = offset.bind(verify)(michal);
                report = romeon.withSpring;
                option = 9;
                michal = yankee[option];
                kiloes = offset.bind(verify)(michal);
                backup = kiloes.clamp;
                zuuluu = _closure2_slot8;
                michal = zuuluu.get;
                foxtra = michal.bind(zuuluu)();
                michal = 0;
                zuuluu = 1;
                zuuluu = backup.bind(kiloes)(foxtra, michal, zuuluu);
                oscard = _closure1_slot9;
                zuuluu = report.bind(romeon)(zuuluu, oscard);
                entity['opacity'] = zuuluu;
                zuuluu = {};
                tangon = yankee[tangon];
                report = offset.bind(verify)(tangon);
                tangon = report.withSpring;
                option = yankee[option];
                offset = offset.bind(verify)(option);
                verify = offset.interpolate;
                option = _closure2_slot8;
                golfie = option.get;
                option = golfie.bind(option)();
                golfie = new Array(2);
                yankee = -100;
                golfie[0] = yankee;
                golfie[1] = michal;
                michal = [0, 1];
                michal = verify.bind(offset)(option, michal, golfie);
                michal = tangon.bind(report)(michal, oscard);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            verify = {};
            sequen = 13;
            romeon = backup[sequen];
            romeon = offset.bind(tangon)(romeon);
            romeon = romeon.withSpring;
            verify['withSpring'] = romeon;
            romeon = backup[ctrled];
            romeon = offset.bind(tangon)(romeon);
            romeon = romeon.clamp;
            verify['clamp'] = romeon;
            verify['cloudsAnimationState'] = golfie;
            romeon = _closure1_slot9;
            verify['BACKGROUND_ENTRANCE_ANIMATION_SPRING_CONFIG'] = romeon;
            vacuum = backup[ctrled];
            vacuum = offset.bind(tangon)(vacuum);
            vacuum = vacuum.interpolate;
            verify['interpolate'] = vacuum;
            michal['__closure'] = verify;
            verify = 13156087878079.0;
            michal['__workletHash'] = verify;
            verify = _closure1_slot13;
            michal['__initData'] = verify;
            vacuum = zuuluu.bind(oscard)(michal);
            michal = backup[ctrled];
            oscard = offset.bind(tangon)(michal);
            zuuluu = oscard.useAnimatedStyle;
            michal = function() { // Original name: H
                entity = {};
                zuuluu = {};
                option = _closure1_slot0;
                verify = _closure1_slot2;
                tangon = 13;
                tangon = verify[tangon];
                golfie = undefined;
                oscard = option.bind(golfie)(tangon);
                report = oscard.withSpring;
                tangon = 9;
                tangon = verify[tangon];
                offset = option.bind(golfie)(tangon);
                verify = offset.interpolate;
                option = _closure2_slot8;
                golfie = option.get;
                option = golfie.bind(option)();
                tangon = _closure2_slot7;
                tangon = tangon.top;
                golfie = new Array(2);
                golfie[0] = tangon;
                tangon = 0;
                golfie[1] = tangon;
                tangon = [0, 1];
                tangon = verify.bind(offset)(option, tangon, golfie);
                michal = _closure1_slot9;
                michal = report.bind(oscard)(tangon, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            verify = {};
            sequen = backup[sequen];
            sequen = offset.bind(tangon)(sequen);
            sequen = sequen.withSpring;
            verify['withSpring'] = sequen;
            ctrled = backup[ctrled];
            ctrled = offset.bind(tangon)(ctrled);
            ctrled = ctrled.interpolate;
            verify['interpolate'] = ctrled;
            verify['cloudsAnimationState'] = golfie;
            verify['safeAreaInsets'] = update;
            verify['BACKGROUND_ENTRANCE_ANIMATION_SPRING_CONFIG'] = romeon;
            michal['__closure'] = verify;
            verify = 17590901676971.0;
            michal['__workletHash'] = verify;
            verify = _closure1_slot14;
            michal['__initData'] = verify;
            record = zuuluu.bind(oscard)(michal);
            oscard = _closure1_slot4;
            zuuluu = oscard.useEffect;
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = sizing;
            entity = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = _closure2_slot8;
                    michal = zuuluu.set;
                    report = _closure2_slot2;
                    entity = _closure1_slot10;
                    tangon = entity.POST_WATCH_VIDEO;
                    entity = 0;
                    if(!(report === tangon)) { _fun00006_ip = 38; continue _fun00005 }
 35:
                    entity = 1;
 38:
                    entity = michal.bind(zuuluu)(entity);
                    entity = undefined;
                    return entity;
                }
            };
            entity = zuuluu.bind(oscard)(entity, michal);
            zuuluu = _closure1_slot7;
            entity = 14;
            entity = backup[entity];
            entity = offset.bind(tangon)(entity);
            michal = entity.GestureDetector;
            entity = {};
            entity['gesture'] = report;
            golfie = _closure1_slot8;
            sequen = _closure1_slot1;
            update = 15;
            report = backup[update];
            oscard = sequen.bind(tangon)(report);
            report = {};
            report['style'] = option;
            romeon = _closure1_slot5;
            option = {};
            ctrled = foxtra.backgroundWrapper;
            verify = new Array(2);
            verify[0] = ctrled;
            ctrled = {};
            ctrled['height'] = output;
            verify[1] = ctrled;
            option['style'] = verify;
            verify = backup[update];
            ctrled = sequen.bind(tangon)(verify);
            verify = {};
            cntext = foxtra.postWatchVideoBackground;
            config = new Array(2);
            config[0] = cntext;
            config[1] = record;
            verify['style'] = config;
            ctrled = zuuluu.bind(tangon)(ctrled, verify);
            verify = new Array(2);
            verify[0] = ctrled;
            update = backup[update];
            ctrled = sequen.bind(tangon)(update);
            update = {};
            update['style'] = vacuum;
            vacuum = 16;
            vacuum = backup[vacuum];
            sequen = sequen.bind(tangon)(vacuum);
            vacuum = {};
            config = 'top';
            vacuum['align'] = config;
            vacuum = zuuluu.bind(tangon)(sequen, vacuum);
            update['children'] = vacuum;
            update = zuuluu.bind(tangon)(ctrled, update);
            verify[1] = update;
            option['children'] = verify;
            verify = golfie.bind(tangon)(romeon, option);
            option = new Array(2);
            option[0] = verify;
            verify = 17;
            verify = backup[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.SafeAreaPaddingView;
            verify = {};
            verify['top'] = yankee;
            backup = foxtra.wrapper;
            yankee = new Array(2);
            yankee[0] = backup;
            backup = {};
            backup['height'] = output;
            yankee[1] = backup;
            verify['style'] = yankee;
            yankee = {};
            foxtra = foxtra.contentWrapper;
            yankee['style'] = foxtra;
            foxtra = _closure1_slot10;
            foxtra = foxtra.WATCH_VIDEO;
            backup = sizing === foxtra;
            if(!backup) { _fun00002_ip = 1301; continue _fun00001 }
 1259:
            update = _closure1_slot7;
            output = _closure1_slot1;
            ctrled = _closure1_slot2;
            foxtra = 18;
            foxtra = ctrled[foxtra];
            output = output.bind(tangon)(foxtra);
            foxtra = {};
            foxtra['onNavigateToPostWatchVideo'] = source;
            foxtra['onClose'] = echoed;
            backup = update.bind(tangon)(output, foxtra);
 1301:
            foxtra = new Array(2);
            foxtra[0] = backup;
            backup = _closure1_slot10;
            backup = backup.POST_WATCH_VIDEO;
            backup = sizing === backup;
            if(!backup) { _fun00002_ip = 1368; continue _fun00001 }
 1326:
            output = _closure1_slot7;
            sizing = _closure1_slot1;
            update = _closure1_slot2;
            kiloes = 19;
            kiloes = update[kiloes];
            sizing = sizing.bind(tangon)(kiloes);
            kiloes = {};
            kiloes['onClose'] = echoed;
            kiloes['onRestartVideo'] = result;
            backup = output.bind(tangon)(sizing, kiloes);
 1368:
            foxtra[1] = backup;
            yankee['children'] = foxtra;
            yankee = golfie.bind(tangon)(romeon, yankee);
            verify['children'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    verify = offset.bind(option)(verify);
    var _closure1_slot15 = verify;
    report = golfie[report];
    offset = oscard.bind(entity)(report);
    verify = offset.createStyles;
    report = {};
    yankee = {};
    romeon = 'transparent';
    yankee['backgroundColor'] = romeon;
    report['transparentBackground'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot16 = report;
    report = option.memo;
    tangon = function(argFoo) { // Original name: VideoQuestModal
        entity = argFoo;
        verify = entity.questId;
        romeon = entity.questContentPosition;
        var _closure2_slot0 = romeon;
        kiloes = entity.onClose;
        var _closure2_slot1 = kiloes;
        foxtra = entity.videoSessionId;
        var _closure2_slot2 = foxtra;
        yankee = entity.initialStep;
        var _closure2_slot3 = yankee;
        michal = _closure1_slot16;
        tangon = undefined;
        report = michal.bind(tangon)();
        michal = _closure1_slot0;
        golfie = _closure1_slot2;
        oscard = 20;
        oscard = golfie[oscard];
        option = michal.bind(tangon)(oscard);
        oscard = option.useNonNullableQuest;
        backup = oscard.bind(option)(verify);
        var _closure2_slot4 = backup;
        verify = _closure1_slot4;
        option = verify.useRef;
        oscard = false;
        offset = option.bind(verify)(oscard);
        var _closure2_slot5 = offset;
        option = verify.useMemo;
        oscard = new Array(6);
        oscard[0] = kiloes;
        oscard[1] = backup;
        oscard[2] = foxtra;
        oscard[3] = romeon;
        oscard[4] = yankee;
        oscard[5] = offset;
        zuuluu = function() {
            entity = {};
            zuuluu = {};
            tangon = true;
            zuuluu['fullscreen'] = tangon;
            tangon = function() { // Original name: headerLeft
                entity = null;
                return entity;
            };
            zuuluu['headerLeft'] = tangon;
            michal = function() { // Original name: render
                tangon = _closure1_slot7;
                backup = _closure1_slot0;
                kiloes = _closure1_slot2;
                entity = 21;
                entity = kiloes[entity];
                zuuluu = undefined;
                entity = backup.bind(zuuluu)(entity);
                michal = entity.ThemeContextProvider;
                entity = {};
                oscard = _closure1_slot6;
                oscard = oscard.DARKER;
                entity['theme'] = oscard;
                oscard = _closure1_slot1;
                report = 7;
                report = kiloes[report];
                report = oscard.bind(zuuluu)(report);
                oscard = report.Provider;
                report = {};
                golfie = {};
                romeon = _closure2_slot4;
                golfie['quest'] = romeon;
                option = _closure2_slot2;
                golfie['videoSessionId'] = option;
                option = _closure2_slot5;
                golfie['isModalPanGestureActive'] = option;
                report['value'] = golfie;
                golfie = 8;
                golfie = kiloes[golfie];
                golfie = backup.bind(zuuluu)(golfie);
                option = golfie.QuestDockGestureContextProvider;
                golfie = {};
                verify = 22;
                verify = kiloes[verify];
                verify = backup.bind(zuuluu)(verify);
                offset = verify.QuestContentImpressionTrackerNative;
                verify = {};
                foxtra = true;
                verify['overrideVisibility'] = foxtra;
                foxtra = 23;
                foxtra = kiloes[foxtra];
                foxtra = backup.bind(zuuluu)(foxtra);
                foxtra = foxtra.QuestContent;
                foxtra = foxtra.VIDEO_MODAL_MOBILE;
                verify['questContent'] = foxtra;
                verify['questOrQuests'] = romeon;
                yankee = _closure2_slot0;
                verify['questContentPosition'] = yankee;
                yankee = function() { // Original name: children
                    tangon = _closure1_slot7;
                    zuuluu = _closure1_slot15;
                    michal = {};
                    report = _closure2_slot3;
                    michal['initialStep'] = report;
                    entity = _closure2_slot1;
                    michal['onClose'] = entity;
                    entity = undefined;
                    entity = tangon.bind(entity)(zuuluu, michal);
                    return entity;
                };
                verify['children'] = yankee;
                verify = tangon.bind(zuuluu)(offset, verify);
                golfie['children'] = verify;
                golfie = tangon.bind(zuuluu)(option, golfie);
                report['children'] = golfie;
                report = tangon.bind(zuuluu)(oscard, report);
                entity['children'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            zuuluu['render'] = michal;
            michal = 'watch_mobile_video_quest';
            entity[michal] = zuuluu;
            return entity;
        };
        oscard = option.bind(verify)(zuuluu, oscard);
        zuuluu = _closure1_slot7;
        entity = 24;
        entity = golfie[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.Modal;
        entity = {'hideTitle': true, 'initialRouteName': 'watch_mobile_video_quest'};
        entity['screens'] = oscard;
        oscard = report.transparentBackground;
        entity['viewStyle'] = oscard;
        report = report.transparentBackground;
        entity['containerStyle'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    tangon = report.bind(option)(tangon);
    report = 25;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/quests/native/VideoQuestModal/VideoQuestModal.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['VideoQuestModalSteps'] = michal;
    return entity;
})();