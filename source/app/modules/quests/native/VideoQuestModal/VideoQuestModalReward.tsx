// app/modules/quests/native/VideoQuestModal/VideoQuestModalReward.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalReward.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalReward
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            report = michal.style;
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            michal = 3;
            michal = backup[michal];
            tangon = undefined;
            zuuluu = offset.bind(tangon)(michal);
            michal = zuuluu.useVideoQuestModalContext;
            michal = michal.bind(zuuluu)();
            source = michal.quest;
            var _closure2_slot0 = source;
            michal = 4;
            michal = backup[michal];
            zuuluu = offset.bind(tangon)(michal);
            michal = zuuluu.useQuestTaskDetails;
            sizing = michal.bind(zuuluu)(source);
            michal = 5;
            michal = backup[michal];
            oscard = offset.bind(tangon)(michal);
            zuuluu = oscard.useIsQuestBarRewardAvailableExclamationEnabled;
            michal = {};
            golfie = _closure1_slot4;
            golfie = golfie.VIDEO_MODAL_MOBILE;
            michal['location'] = golfie;
            romeon = zuuluu.bind(oscard)(michal);
            oscard = _closure1_slot3;
            zuuluu = oscard.useCallback;
            golfie = source.id;
            michal = new Array(1);
            michal[0] = golfie;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 6;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.openRewardDetailsBottomSheet;
                michal = {};
                report = _closure2_slot0;
                report = report.id;
                michal['questId'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            kiloes = zuuluu.bind(oscard)(entity, michal);
            zuuluu = _closure1_slot6;
            oscard = 7;
            entity = backup[oscard];
            entity = offset.bind(tangon)(entity);
            michal = entity.Stack;
            entity = {};
            verify = _closure1_slot1;
            option = 8;
            golfie = backup[option];
            golfie = verify.bind(tangon)(golfie);
            golfie = golfie.spacing;
            golfie = golfie.PX_24;
            entity['spacing'] = golfie;
            entity['style'] = report;
            yankee = _closure1_slot5;
            report = 9;
            report = backup[report];
            golfie = verify.bind(tangon)(report);
            report = {'hasConfetti': true, 'quest': null, 'size': 'md-lg'};
            report['quest'] = source;
            sizing = sizing.percentComplete;
            report['progress'] = sizing;
            report['onPress'] = kiloes;
            golfie = yankee.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            oscard = backup[oscard];
            oscard = offset.bind(tangon)(oscard);
            golfie = oscard.Stack;
            oscard = {};
            kiloes = 'center';
            oscard['align'] = kiloes;
            option = backup[option];
            option = verify.bind(tangon)(option);
            option = option.spacing;
            option = option.PX_4;
            oscard['spacing'] = option;
            verify = 10;
            option = backup[verify];
            option = offset.bind(tangon)(option);
            kiloes = option.Text;
            option = {'variant': 'heading-lg/semibold', 'color': 'text-primary'};
            output = 11;
            sizing = backup[output];
            sizing = offset.bind(tangon)(sizing);
            update = sizing.intl;
            echoed = update.formatToPlainString;
            sizing = backup[output];
            sizing = offset.bind(tangon)(sizing);
            sizing = sizing.t;
            result = sizing.EAYZAg;
            sizing = {};
            source = source.config;
            source = source.messages;
            source = source.questName;
            sizing['questName'] = source;
            sizing = echoed.bind(update)(result, sizing);
            option['children'] = sizing;
            kiloes = yankee.bind(tangon)(kiloes, option);
            option = new Array(2);
            option[0] = kiloes;
            verify = backup[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'heading-sm/medium', 'color': 'text-secondary'};
            sizing = _closure1_slot0;
            foxtra = _closure1_slot2;
            backup = foxtra[output];
            backup = sizing.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = foxtra[output];
            foxtra = sizing.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            if(romeon) { _fun00002_ip = 534; continue _fun00001 }
 519:
            romeon = foxtra.2BD0CQ;
            romeon = backup.bind(kiloes)(romeon);
            _fun00002_ip = 547; continue _fun00001;
 534:
            foxtra = foxtra.1Wvve3;
            romeon = backup.bind(kiloes)(foxtra);
 547:
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();