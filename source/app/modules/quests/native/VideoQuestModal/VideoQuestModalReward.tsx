// app/modules/quests/native/VideoQuestModal/VideoQuestModalReward.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalReward.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalReward
        michal = argFoo;
        golfie = michal.style;
        kiloes = _closure1_slot0;
        sizing = _closure1_slot2;
        michal = 2;
        michal = sizing[michal];
        tangon = undefined;
        zuuluu = kiloes.bind(tangon)(michal);
        michal = zuuluu.useVideoQuestModalContext;
        michal = michal.bind(zuuluu)();
        echoed = michal.quest;
        var _closure2_slot0 = echoed;
        michal = 3;
        michal = sizing[michal];
        zuuluu = kiloes.bind(tangon)(michal);
        michal = zuuluu.useQuestTaskDetails;
        foxtra = michal.bind(zuuluu)(echoed);
        oscard = _closure1_slot3;
        zuuluu = oscard.useCallback;
        option = echoed.id;
        michal = new Array(1);
        michal[0] = option;
        entity = function() {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 4;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.openRewardDetailsBottomSheet;
            michal = {};
            report = _closure2_slot0;
            report = report.id;
            michal['questId'] = report;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        romeon = zuuluu.bind(oscard)(entity, michal);
        zuuluu = _closure1_slot5;
        oscard = 5;
        entity = sizing[oscard];
        entity = kiloes.bind(tangon)(entity);
        michal = entity.Stack;
        entity = {'justify': 'center', 'align': 'center'};
        offset = 'center';
        verify = _closure1_slot1;
        option = 6;
        yankee = sizing[option];
        yankee = verify.bind(tangon)(yankee);
        yankee = yankee.spacing;
        yankee = yankee.PX_24;
        entity['spacing'] = yankee;
        entity['style'] = golfie;
        yankee = _closure1_slot4;
        report = 7;
        report = sizing[report];
        golfie = verify.bind(tangon)(report);
        report = {'hasConfetti': true, 'quest': null, 'size': 'md-lg'};
        report['quest'] = echoed;
        foxtra = foxtra.percentComplete;
        report['progress'] = foxtra;
        report['onPress'] = romeon;
        golfie = yankee.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        oscard = sizing[oscard];
        oscard = kiloes.bind(tangon)(oscard);
        golfie = oscard.Stack;
        oscard = {};
        oscard['align'] = offset;
        option = sizing[option];
        option = verify.bind(tangon)(option);
        option = option.spacing;
        option = option.PX_4;
        oscard['spacing'] = option;
        verify = 8;
        option = sizing[verify];
        option = kiloes.bind(tangon)(option);
        offset = option.Text;
        option = {'variant': 'heading-lg/semibold', 'color': 'text-primary'};
        romeon = 9;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        result = foxtra.intl;
        output = result.formatToPlainString;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        backup = foxtra.EAYZAg;
        foxtra = {};
        echoed = echoed.config;
        echoed = echoed.messages;
        echoed = echoed.questName;
        foxtra['questName'] = echoed;
        foxtra = output.bind(result)(backup, foxtra);
        option['children'] = foxtra;
        offset = yankee.bind(tangon)(offset, option);
        option = new Array(2);
        option[0] = offset;
        verify = sizing[verify];
        verify = kiloes.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'variant': 'heading-sm/medium', 'color': 'text-secondary'};
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.1Wvve3;
        romeon = foxtra.bind(backup)(romeon);
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        oscard['children'] = option;
        oscard = zuuluu.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();