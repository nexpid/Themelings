// app/modules/quests/native/VideoQuestModal/VideoQuestModalHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flexDirection': 'row', 'justifyContent': 'space-between', 'alignItems': 'center'};
    tangon['videoContentHeaderWrapper'] = verify;
    verify = {};
    offset = 'column';
    verify['flexDirection'] = offset;
    offset = 4;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_4;
    verify['gap'] = offset;
    tangon['videoContentHeading'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            verify = entity.onClose;
            option = entity.style;
            entity = _closure1_slot6;
            tangon = undefined;
            golfie = entity.bind(tangon)();
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 5;
            entity = zuuluu[entity];
            report = michal.bind(tangon)(entity);
            entity = report.useVideoQuestModalContext;
            entity = entity.bind(report)();
            foxtra = entity.quest;
            entity = 6;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useQuestTaskDetails;
            kiloes = entity.bind(michal)(foxtra);
            zuuluu = foxtra.userStatus;
            michal = null;
            report = michal == zuuluu;
            entity = undefined;
            if(report) { _fun00002_ip = 109; continue _fun00001 }
 103:
            entity = zuuluu.completedAt;
 109:
            romeon = michal != entity;
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            offset = golfie.videoContentHeaderWrapper;
            report = new Array(2);
            report[0] = offset;
            report[1] = option;
            entity['style'] = report;
            report = {};
            golfie = golfie.videoContentHeading;
            report['style'] = golfie;
            yankee = _closure1_slot4;
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            option = 7;
            golfie = backup[option];
            golfie = offset.bind(tangon)(golfie);
            sizing = golfie.Text;
            golfie = {'variant': 'heading-md/semibold', 'color': 'white'};
            output = 8;
            result = backup[output];
            result = offset.bind(tangon)(result);
            update = result.intl;
            echoed = update.formatToPlainString;
            output = backup[output];
            output = offset.bind(tangon)(output);
            output = output.t;
            result = output.EQa7oq;
            output = {};
            source = foxtra.config;
            source = source.messages;
            source = source.questName;
            output['questName'] = source;
            output = echoed.bind(update)(result, output);
            golfie['children'] = output;
            sizing = yankee.bind(tangon)(sizing, golfie);
            golfie = new Array(2);
            golfie[0] = sizing;
            option = backup[option];
            option = offset.bind(tangon)(option);
            offset = option.Text;
            option = {'variant': 'heading-md/semibold', 'color': 'interactive-normal'};
            if(romeon) { _fun00002_ip = 354; continue _fun00001 }
 321:
            backup = _closure1_slot0;
            sizing = _closure1_slot2;
            romeon = 9;
            romeon = sizing[romeon];
            backup = backup.bind(tangon)(romeon);
            romeon = backup.formatWatchTaskRemainingTime;
            romeon = romeon.bind(backup)(kiloes);
            _fun00002_ip = 371; continue _fun00001;
 354:
            foxtra = foxtra.config;
            foxtra = foxtra.messages;
            romeon = foxtra.gamePublisher;
 371:
            option['children'] = romeon;
            option = yankee.bind(tangon)(offset, option);
            golfie[1] = option;
            report['children'] = golfie;
            golfie = zuuluu.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot4;
            golfie = _closure1_slot1;
            offset = _closure1_slot2;
            oscard = 10;
            oscard = offset[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            oscard['onClose'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();