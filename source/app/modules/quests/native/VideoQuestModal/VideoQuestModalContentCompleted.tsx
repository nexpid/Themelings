// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    foxtra = 0;
    golfie = oscard[foxtra];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    backup = 1;
    tangon = oscard[backup];
    tangon = report.bind(entity)(tangon);
    option = tangon.ActivityIndicator;
    var _closure1_slot4 = option;
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot6 = option;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = {'mass': 1.9, 'damping': 18, 'stiffness': 80, 'overshootClamping': false};
    var _closure1_slot8 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flexGrow': 1, 'flexShrink': 1};
    tangon['wrapper'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 1};
    tangon['headerContentCopy'] = offset;
    offset = {};
    yankee = 0.5;
    offset['opacity'] = yankee;
    tangon['closeButton'] = offset;
    offset = {};
    yankee = 4;
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    offset['padding'] = kiloes;
    tangon['content'] = offset;
    offset = {};
    offset['flex'] = backup;
    tangon['contentRewardsAnimatedWrapper'] = offset;
    offset = {};
    offset['flex'] = backup;
    tangon['contentRewardsWrapper'] = offset;
    offset = {};
    kiloes = 'center';
    offset['alignItems'] = kiloes;
    tangon['contentRewards'] = offset;
    offset = {};
    offset['textAlign'] = kiloes;
    tangon['contentRewardsCopy'] = offset;
    offset = {};
    kiloes = oscard[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    offset['marginBottom'] = kiloes;
    tangon['contentEndCardHeader'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 1};
    tangon['contentEndCardHeaderCopy'] = offset;
    offset = {};
    offset['borderTopWidth'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BORDER_STRONG;
    offset['borderTopColor'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    offset['paddingTop'] = backup;
    tangon['contentEndCard'] = offset;
    offset = {};
    backup = 210;
    offset['height'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    offset['marginBottom'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.xl;
    offset['borderRadius'] = backup;
    tangon['image'] = offset;
    offset = {};
    offset['flexGrow'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.round;
    offset['borderRadius'] = yankee;
    tangon['ctaPrimary'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot9 = tangon;
    tangon = {};
    option = 'function VideoQuestModalContentCompletedTsx1(){const{withDelay,ANIMATION_DELAY,withSpring,isComponentMounted,ANIMATED_CONTENT_SPRING_CONFIG,interpolate,ANIMATED_CONTENT_OFFSET_Y}=this.__closure;return{opacity:withDelay(ANIMATION_DELAY,withSpring(isComponentMounted.get(),ANIMATED_CONTENT_SPRING_CONFIG)),transform:[{translateY:withDelay(ANIMATION_DELAY,withSpring(interpolate(isComponentMounted.get(),[0,1],[ANIMATED_CONTENT_OFFSET_Y,0]),ANIMATED_CONTENT_SPRING_CONFIG))}]};}';
    tangon['code'] = option;
    var _closure1_slot10 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: VideoQuestModalContentCompleted
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            sierra = michal.onClose;
            papara = michal.onRestartVideo;
            oscard = michal.sourceQuestContent;
            var _closure2_slot0 = oscard;
            michal = _closure1_slot9;
            tangon = undefined;
            update = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            verify = _closure1_slot2;
            michal = 5;
            michal = verify[michal];
            report = zuuluu.bind(tangon)(michal);
            michal = report.useVideoQuestModalContext;
            michal = michal.bind(report)();
            sequen = michal.quest;
            var _closure2_slot1 = sequen;
            option = _closure1_slot3;
            golfie = option.useMemo;
            report = new Array(1);
            report[0] = sequen;
            michal = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 6;
                michal = verify[entity];
                golfie = undefined;
                oscard = option.bind(golfie)(michal);
                report = oscard.resolveVideoQuestAsset;
                tangon = _closure2_slot1;
                michal = 7;
                michal = verify[michal];
                michal = option.bind(golfie)(michal);
                michal = michal.FirstPartyQuestTaskTypes;
                romeon = michal.WATCH_VIDEO_ON_MOBILE;
                michal = verify[entity];
                michal = option.bind(golfie)(michal);
                michal = michal.VideoVariant;
                yankee = michal.VIDEO;
                entity = verify[entity];
                entity = option.bind(golfie)(entity);
                entity = entity.VideoAssetProperty;
                offset = entity.THUMBNAIL;
                backup = oscard;
                foxtra = tangon;
                entity = backup[report](foxtra, romeon, yankee, offset, verify);
                return entity;
            };
            cntext = golfie.bind(option)(michal, report);
            michal = 8;
            michal = verify[michal];
            report = zuuluu.bind(tangon)(michal);
            michal = report.useQuestImpressionId;
            michal = michal.bind(report)();
            var _closure2_slot2 = michal;
            golfie = option.useCallback;
            report = new Array(3);
            report[0] = sequen;
            report[1] = michal;
            report[2] = oscard;
            michal = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 9;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLinkDirectly;
                zuuluu = _closure2_slot1;
                michal = {};
                golfie = 10;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 11;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                golfie = _closure2_slot2;
                michal['impressionId'] = golfie;
                oscard = _closure2_slot0;
                michal['sourceQuestContent'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            config = golfie.bind(option)(michal, report);
            michal = 12;
            michal = verify[michal];
            report = zuuluu.bind(tangon)(michal);
            zuuluu = report.useQuestRewardClaimHandler;
            michal = {};
            michal['quest'] = sequen;
            option = _closure1_slot1;
            golfie = 13;
            golfie = verify[golfie];
            golfie = option.bind(tangon)(golfie);
            golfie = golfie.close;
            michal['onSuccess'] = golfie;
            michal['sourceQuestContent'] = oscard;
            michal = zuuluu.bind(report)(michal);
            backup = michal.isLoading;
            status = michal.isClaiming;
            target = michal.claim;
            zuuluu = sequen.userStatus;
            yankee = null;
            report = yankee == zuuluu;
            michal = undefined;
            if(report) { _fun00002_ip = 273; continue _fun00001 }
 267:
            michal = zuuluu.claimedAt;
 273:
            sizing = yankee != michal;
            romeon = _closure1_slot0;
            kiloes = _closure1_slot2;
            option = 14;
            michal = kiloes[option];
            report = romeon.bind(tangon)(michal);
            zuuluu = report.useSharedValue;
            michal = 0;
            michal = zuuluu.bind(report)(michal);
            var _closure2_slot3 = michal;
            zuuluu = kiloes[option];
            oscard = romeon.bind(tangon)(zuuluu);
            report = oscard.useAnimatedStyle;
            zuuluu = function() { // Original name: y
                entity = {};
                romeon = _closure1_slot0;
                foxtra = _closure1_slot2;
                offset = 14;
                michal = foxtra[offset];
                yankee = undefined;
                report = romeon.bind(yankee)(michal);
                tangon = report.withDelay;
                golfie = 15;
                michal = foxtra[golfie];
                option = romeon.bind(yankee)(michal);
                oscard = option.withSpring;
                backup = _closure2_slot3;
                zuuluu = backup.get;
                zuuluu = zuuluu.bind(backup)();
                verify = _closure1_slot8;
                zuuluu = oscard.bind(option)(zuuluu, verify);
                oscard = 125;
                zuuluu = tangon.bind(report)(oscard, zuuluu);
                entity['opacity'] = zuuluu;
                zuuluu = {};
                tangon = foxtra[offset];
                report = romeon.bind(yankee)(tangon);
                tangon = report.withDelay;
                golfie = foxtra[golfie];
                option = romeon.bind(yankee)(golfie);
                golfie = option.withSpring;
                offset = foxtra[offset];
                foxtra = romeon.bind(yankee)(offset);
                romeon = foxtra.interpolate;
                offset = _closure2_slot3;
                michal = offset.get;
                yankee = michal.bind(offset)();
                offset = [0, 1];
                michal = [75, 0];
                michal = romeon.bind(foxtra)(yankee, offset, michal);
                michal = golfie.bind(option)(michal, verify);
                michal = tangon.bind(report)(oscard, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            golfie = {};
            verify = kiloes[option];
            verify = romeon.bind(tangon)(verify);
            verify = verify.withDelay;
            golfie['withDelay'] = verify;
            verify = 125;
            golfie['ANIMATION_DELAY'] = verify;
            verify = 15;
            verify = kiloes[verify];
            verify = romeon.bind(tangon)(verify);
            verify = verify.withSpring;
            golfie['withSpring'] = verify;
            golfie['isComponentMounted'] = michal;
            verify = _closure1_slot8;
            golfie['ANIMATED_CONTENT_SPRING_CONFIG'] = verify;
            option = kiloes[option];
            option = romeon.bind(tangon)(option);
            option = option.interpolate;
            golfie['interpolate'] = option;
            option = 75;
            golfie['ANIMATED_CONTENT_OFFSET_Y'] = option;
            zuuluu['__closure'] = golfie;
            golfie = 2704439293952.0;
            zuuluu['__workletHash'] = golfie;
            golfie = _closure1_slot10;
            zuuluu['__initData'] = golfie;
            source = report.bind(oscard)(zuuluu);
            zuuluu = _closure1_slot3;
            oscard = zuuluu.useEffect;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                zuuluu = _closure2_slot3;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            michal = oscard.bind(zuuluu)(michal, report);
            oscard = zuuluu.useCallback;
            michal = sequen.id;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 16;
                michal = golfie[entity];
                entity = undefined;
                report = oscard.bind(entity)(michal);
                tangon = report.showShareActionSheet;
                zuuluu = {};
                michal = 9;
                michal = golfie[michal];
                golfie = oscard.bind(entity)(michal);
                oscard = golfie.getQuestUrl;
                michal = _closure2_slot1;
                michal = michal.id;
                michal = oscard.bind(golfie)(michal);
                zuuluu['message'] = michal;
                michal = 'Video Quest Modal';
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            output = oscard.bind(zuuluu)(michal, report);
            report = zuuluu.useLayoutEffect;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 17;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.lockOrientation;
                zuuluu = 'PORTRAIT';
                michal = true;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            entity = new Array(0);
            entity = report.bind(zuuluu)(michal, entity);
            michal = zuuluu.useContext;
            entity = 18;
            entity = kiloes[entity];
            entity = romeon.bind(tangon)(entity);
            entity = entity.QuestDockGestureContext;
            entity = michal.bind(zuuluu)(entity);
            michal = entity.windowDimensions;
            entity = michal.get;
            entity = entity.bind(michal)();
            zuuluu = entity.height;
            entity = 800;
            quebec = zuuluu < entity;
            entity = michal.get;
            entity = entity.bind(michal)();
            michal = entity.height;
            entity = 760;
            equals = michal < entity;
            zuuluu = _closure1_slot7;
            entity = 19;
            entity = kiloes[entity];
            entity = romeon.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            record = true;
            entity['bottom'] = record;
            report = update.wrapper;
            entity['style'] = report;
            offset = 20;
            report = kiloes[offset];
            report = romeon.bind(tangon)(report);
            oscard = report.Stack;
            report = {'align': 'center', 'direction': 'horizontal', 'justify': 'space-between'};
            golfie = update.content;
            report['style'] = golfie;
            option = _closure1_slot6;
            result = 21;
            golfie = kiloes[result];
            golfie = romeon.bind(tangon)(golfie);
            verify = golfie.Text;
            golfie = {'variant': 'heading-sm/semibold', 'color': 'text-secondary'};
            echoed = update.headerContentCopy;
            golfie['style'] = echoed;
            ctrled = 22;
            echoed = kiloes[ctrled];
            echoed = romeon.bind(tangon)(echoed);
            whisks = echoed.intl;
            limora = whisks.formatToPlainString;
            echoed = kiloes[ctrled];
            echoed = romeon.bind(tangon)(echoed);
            echoed = echoed.t;
            vacuum = echoed.EAYZAg;
            echoed = {};
            variable36 = sequen.config;
            variable36 = variable36.messages;
            variable36 = variable36.questName;
            echoed['questName'] = variable36;
            echoed = limora.bind(whisks)(vacuum, echoed);
            golfie['children'] = echoed;
            verify = option.bind(tangon)(verify, golfie);
            golfie = new Array(2);
            golfie[0] = verify;
            echoed = _closure1_slot1;
            verify = 23;
            verify = kiloes[verify];
            vacuum = echoed.bind(tangon)(verify);
            verify = {};
            verify['onClose'] = sierra;
            sierra = update.closeButton;
            verify['style'] = sierra;
            verify = option.bind(tangon)(vacuum, verify);
            golfie[1] = verify;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            oscard = 24;
            oscard = kiloes[oscard];
            golfie = echoed.bind(tangon)(oscard);
            oscard = {};
            vacuum = update.contentRewardsAnimatedWrapper;
            verify = new Array(2);
            verify[0] = vacuum;
            verify[1] = source;
            oscard['style'] = verify;
            verify = kiloes[offset];
            verify = romeon.bind(tangon)(verify);
            romeon = verify.Stack;
            verify = {'align': 'center', 'justify': 'center'};
            source = 4;
            kiloes = kiloes[source];
            kiloes = echoed.bind(tangon)(kiloes);
            kiloes = kiloes.spacing;
            kiloes = kiloes.PX_24;
            verify['spacing'] = kiloes;
            echoed = update.content;
            kiloes = new Array(2);
            kiloes[0] = echoed;
            echoed = update.contentRewardsWrapper;
            kiloes[1] = echoed;
            verify['style'] = kiloes;
            if(backup) { _fun00002_ip = 1289; continue _fun00001 }
 1040:
            echoed = _closure1_slot7;
            kiloes = _closure1_slot5;
            backup = {};
            vacuum = update.contentRewards;
            backup['style'] = vacuum;
            limora = _closure1_slot6;
            sierra = _closure1_slot1;
            whisks = _closure1_slot2;
            vacuum = 25;
            vacuum = whisks[vacuum];
            sierra = sierra.bind(tangon)(vacuum);
            vacuum = {'withQuestName': false, 'withRewardAvailableCopy': false, 'size': null, 'withRewardTileAnimation': true};
            whisks = 'md';
            if(equals) { _fun00002_ip = 1119; continue _fun00001 }
 1105:
            equals = 'lg';
            if(!quebec) { _fun00002_ip = 1116; continue _fun00001 }
 1112:
            equals = 'md-lg';
 1116:
            whisks = equals;
 1119:
            vacuum['size'] = whisks;
            sierra = limora.bind(tangon)(sierra, vacuum);
            vacuum = new Array(2);
            vacuum[0] = sierra;
            whisks = _closure1_slot6;
            limora = _closure1_slot0;
            sierra = _closure1_slot2;
            sierra = sierra[result];
            sierra = limora.bind(tangon)(sierra);
            limora = sierra.Text;
            sierra = {'color': 'text-primary', 'style': null, 'variant': 'heading-lg/semibold'};
            equals = update.contentRewardsCopy;
            sierra['style'] = equals;
            quebec = _closure1_slot0;
            equals = _closure1_slot2;
            variable36 = equals[ctrled];
            variable36 = quebec.bind(tangon)(variable36);
            variable37 = variable36.intl;
            variable36 = variable37.string;
            equals = equals[ctrled];
            equals = quebec.bind(tangon)(equals);
            quebec = equals.t;
            if(sizing) { _fun00002_ip = 1250; continue _fun00001 }
 1235:
            equals = quebec.qyKLdn;
            equals = variable36.bind(variable37)(equals);
            _fun00002_ip = 1263; continue _fun00001;
 1250:
            quebec = quebec.EMp8/P;
            equals = variable36.bind(variable37)(quebec);
 1263:
            sierra['children'] = equals;
            sierra = whisks.bind(tangon)(limora, sierra);
            vacuum[1] = sierra;
            backup['children'] = vacuum;
            kiloes = echoed.bind(tangon)(kiloes, backup);
            _fun00002_ip = 1305; continue _fun00001;
 1289:
            vacuum = _closure1_slot6;
            echoed = _closure1_slot4;
            backup = {};
            kiloes = vacuum.bind(tangon)(echoed, backup);
 1305:
            backup = new Array(2);
            backup[0] = kiloes;
            kiloes = !sizing;
            if(sizing) { _fun00002_ip = 1453; continue _fun00001 }
 1322:
            vacuum = _closure1_slot6;
            echoed = _closure1_slot1;
            sierra = _closure1_slot2;
            sizing = 26;
            sizing = sierra[sizing];
            echoed = echoed.bind(tangon)(sizing);
            sizing = {};
            sizing['loading'] = status;
            sizing['onPress'] = target;
            target = update.ctaPrimary;
            sizing['style'] = target;
            status = _closure1_slot0;
            target = sierra[ctrled];
            target = status.bind(tangon)(target);
            whisks = target.intl;
            limora = whisks.string;
            target = sierra[ctrled];
            target = status.bind(tangon)(target);
            target = target.t;
            target = target.cfY4PD;
            target = limora.bind(whisks)(target);
            sizing['text'] = target;
            target = 27;
            target = sierra[target];
            target = status.bind(tangon)(target);
            target = target.ButtonColors;
            target = target.GREY;
            sizing['color'] = target;
            kiloes = vacuum.bind(tangon)(echoed, sizing);
 1453:
            backup[1] = kiloes;
            verify['children'] = backup;
            verify = zuuluu.bind(tangon)(romeon, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            option = _closure1_slot7;
            golfie = _closure1_slot5;
            oscard = {};
            romeon = update.content;
            verify = new Array(2);
            verify[0] = romeon;
            romeon = update.contentEndCard;
            verify[1] = romeon;
            oscard['style'] = verify;
            target = _closure1_slot0;
            status = _closure1_slot2;
            verify = status[offset];
            verify = target.bind(tangon)(verify);
            romeon = verify.Stack;
            verify = {'direction': 'horizontal', 'justify': 'space-between'};
            backup = update.contentEndCardHeader;
            verify['style'] = backup;
            backup = status[offset];
            backup = target.bind(tangon)(backup);
            kiloes = backup.Stack;
            backup = {};
            sierra = _closure1_slot1;
            sizing = status[source];
            sizing = sierra.bind(tangon)(sizing);
            sizing = sizing.spacing;
            sizing = sizing.PX_4;
            backup['spacing'] = sizing;
            sizing = update.contentEndCardHeaderCopy;
            backup['style'] = sizing;
            echoed = _closure1_slot6;
            sizing = status[result];
            sizing = target.bind(tangon)(sizing);
            vacuum = sizing.Text;
            sizing = {'variant': 'heading-md/semibold', 'color': 'header-primary'};
            limora = sequen.config;
            limora = limora.messages;
            limora = limora.gameTitle;
            sizing['children'] = limora;
            vacuum = echoed.bind(tangon)(vacuum, sizing);
            sizing = new Array(2);
            sizing[0] = vacuum;
            result = status[result];
            result = target.bind(tangon)(result);
            vacuum = result.Text;
            result = {'variant': 'text-sm/medium', 'color': 'text-secondary'};
            limora = sequen.config;
            limora = limora.messages;
            limora = limora.gamePublisher;
            result['children'] = limora;
            result = echoed.bind(tangon)(vacuum, result);
            sizing[1] = result;
            backup['children'] = sizing;
            backup = option.bind(tangon)(kiloes, backup);
            kiloes = new Array(2);
            kiloes[0] = backup;
            backup = 28;
            sizing = status[backup];
            sizing = target.bind(tangon)(sizing);
            result = sizing.PressableOpacity;
            sizing = {};
            vacuum = 'button';
            sizing['accessibilityRole'] = vacuum;
            limora = status[ctrled];
            limora = target.bind(tangon)(limora);
            equals = limora.intl;
            whisks = equals.string;
            limora = status[ctrled];
            limora = target.bind(tangon)(limora);
            limora = limora.t;
            limora = limora.YsCuyM;
            limora = whisks.bind(equals)(limora);
            sizing['accessibilityLabel'] = limora;
            sizing['onPress'] = papara;
            papara = 29;
            papara = status[papara];
            papara = target.bind(tangon)(papara);
            target = papara.RetryIcon;
            papara = {};
            status = status[source];
            status = sierra.bind(tangon)(status);
            status = status.colors;
            status = status.INTERACTIVE_NORMAL;
            papara['color'] = status;
            papara = echoed.bind(tangon)(target, papara);
            sizing['children'] = papara;
            sizing = echoed.bind(tangon)(result, sizing);
            kiloes[1] = sizing;
            verify['children'] = kiloes;
            romeon = option.bind(tangon)(romeon, verify);
            verify = new Array(3);
            verify[0] = romeon;
            yankee = yankee != cntext;
            if(!yankee) { _fun00002_ip = 2035; continue _fun00001 }
 1933:
            sizing = _closure1_slot6;
            kiloes = _closure1_slot0;
            papara = _closure1_slot2;
            romeon = papara[backup];
            romeon = kiloes.bind(tangon)(romeon);
            kiloes = romeon.PressableOpacity;
            romeon = {};
            romeon['onPress'] = config;
            echoed = _closure1_slot1;
            result = 30;
            result = papara[result];
            echoed = echoed.bind(tangon)(result);
            result = {};
            update = update.image;
            result['style'] = update;
            update = {};
            cntext = cntext.url;
            update['uri'] = cntext;
            result['source'] = update;
            update = 'cover';
            result['resizeMode'] = update;
            result = sizing.bind(tangon)(echoed, result);
            romeon['children'] = result;
            yankee = sizing.bind(tangon)(kiloes, romeon);
 2035:
            verify[1] = yankee;
            romeon = _closure1_slot7;
            result = _closure1_slot0;
            echoed = _closure1_slot2;
            offset = echoed[offset];
            offset = result.bind(tangon)(offset);
            yankee = offset.Stack;
            offset = {'direction': 'horizontal', 'spacing': null, 'align': 'center'};
            update = _closure1_slot1;
            kiloes = echoed[source];
            kiloes = update.bind(tangon)(kiloes);
            kiloes = kiloes.spacing;
            kiloes = kiloes.PX_16;
            offset['spacing'] = kiloes;
            sizing = _closure1_slot6;
            foxtra = 31;
            foxtra = echoed[foxtra];
            foxtra = result.bind(tangon)(foxtra);
            kiloes = foxtra.Button;
            foxtra = {};
            foxtra['grow'] = record;
            foxtra['onPress'] = config;
            config = 9;
            config = echoed[config];
            record = result.bind(tangon)(config);
            config = record.getVideoQuestEndCardCtaText;
            sequen = sequen.config;
            sequen = config.bind(record)(sequen);
            foxtra['text'] = sequen;
            kiloes = sizing.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            backup = echoed[backup];
            backup = result.bind(tangon)(backup);
            kiloes = backup.PressableOpacity;
            backup = {};
            backup['accessibilityRole'] = vacuum;
            vacuum = echoed[ctrled];
            vacuum = result.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = echoed[ctrled];
            ctrled = result.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.Ej3B3d;
            ctrled = vacuum.bind(sequen)(ctrled);
            backup['accessibilityLabel'] = ctrled;
            backup['onPress'] = output;
            output = 32;
            output = echoed[output];
            output = result.bind(tangon)(output);
            result = output.ShareIcon;
            output = {};
            echoed = echoed[source];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.colors;
            echoed = echoed.INTERACTIVE_NORMAL;
            output['color'] = echoed;
            output = sizing.bind(tangon)(result, output);
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 33;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();