// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    romeon = 0;
    tangon = oscard[romeon];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    foxtra = 1;
    golfie = oscard[foxtra];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.ActivityIndicator;
    var _closure1_slot5 = golfie;
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    offset = 0.5;
    tangon = {'mass': 0.5, 'damping': 50, 'stiffness': 80, 'overshootClamping': true};
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flexGrow': 1, 'flexShrink': 1};
    tangon['wrapper'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1};
    tangon['headerContentCopy'] = verify;
    verify = {};
    verify['opacity'] = offset;
    tangon['closeButton'] = verify;
    verify = {};
    offset = 5;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['padding'] = backup;
    tangon['content'] = verify;
    verify = {};
    verify['flex'] = foxtra;
    tangon['contentRewardsAnimatedWrapper'] = verify;
    verify = {};
    verify['flex'] = foxtra;
    tangon['contentRewardsWrapper'] = verify;
    verify = {};
    backup = 'center';
    verify['alignItems'] = backup;
    tangon['contentRewards'] = verify;
    verify = {};
    verify['textAlign'] = backup;
    tangon['contentRewardsCopy'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['marginBottom'] = backup;
    tangon['contentEndCardHeader'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1};
    tangon['contentEndCardHeaderCopy'] = verify;
    verify = {};
    verify['borderTopWidth'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BORDER_STRONG;
    verify['borderTopColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['paddingTop'] = foxtra;
    tangon['contentEndCard'] = verify;
    verify = {};
    foxtra = 210;
    verify['height'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['marginBottom'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xl;
    verify['borderRadius'] = foxtra;
    tangon['image'] = verify;
    verify = {};
    verify['flexGrow'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.round;
    verify['borderRadius'] = offset;
    tangon['ctaPrimary'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentCompletedTsx1(){const{withSpring,isComponentMounted,ANIMATED_CONTENT_SPRING_CONFIG,interpolate,ANIMATED_CONTENT_OFFSET_Y}=this.__closure;return{opacity:withSpring(isComponentMounted.get(),ANIMATED_CONTENT_SPRING_CONFIG),transform:[{translateY:withSpring(interpolate(isComponentMounted.get(),[0,1],[ANIMATED_CONTENT_OFFSET_Y,0]))}]};}';
    tangon['code'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = 29;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalContentCompleted
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            cntext = michal.onClose;
            var _closure2_slot0 = cntext;
            echoed = michal.onRestartVideo;
            michal = _closure1_slot10;
            tangon = undefined;
            update = michal.bind(tangon)();
            yankee = _closure1_slot0;
            result = _closure1_slot2;
            michal = 6;
            michal = result[michal];
            zuuluu = yankee.bind(tangon)(michal);
            michal = zuuluu.useVideoQuestModalContext;
            michal = michal.bind(zuuluu)();
            foxtra = michal.quest;
            var _closure2_slot1 = foxtra;
            report = _closure1_slot4;
            oscard = report.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = foxtra;
            michal = function() {
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 7;
                zuuluu = oscard[entity];
                michal = undefined;
                tangon = report.bind(michal)(zuuluu);
                zuuluu = tangon.resolveVideoQuestAsset;
                entity = oscard[entity];
                entity = report.bind(michal)(entity);
                entity = entity.VideoQuestAssetId;
                michal = entity.VIDEO_PLAYER_THUMBNAIL;
                entity = _closure2_slot1;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            source = oscard.bind(report)(michal, zuuluu);
            michal = 8;
            michal = result[michal];
            zuuluu = yankee.bind(tangon)(michal);
            michal = zuuluu.useQuestImpressionId;
            michal = michal.bind(zuuluu)();
            var _closure2_slot2 = michal;
            oscard = report.useCallback;
            zuuluu = new Array(2);
            zuuluu[0] = foxtra;
            zuuluu[1] = michal;
            michal = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 9;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot1;
                michal = {};
                golfie = 10;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 11;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot2;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            backup = oscard.bind(report)(michal, zuuluu);
            michal = 12;
            michal = result[michal];
            oscard = yankee.bind(tangon)(michal);
            zuuluu = oscard.useQuestRewardClaimHandler;
            michal = {};
            michal['quest'] = foxtra;
            michal = zuuluu.bind(oscard)(michal);
            kiloes = michal.isLoading;
            status = michal.isClaiming;
            golfie = michal.claim;
            var _closure2_slot3 = golfie;
            oscard = report.useCallback;
            zuuluu = _closure1_slot3;
            michal = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00004_ip = 47; continue _fun00003 }
 7:
                        michal = _closure2_slot3;
                        zuuluu = undefined;
                        michal = michal.bind(zuuluu)();
                        SaveGenerator(address=24);
 22:
                        return michal;
 24:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00004_ip = 44; continue _fun00003 }
 30:
                        if(!michal) { _fun00004_ip = 41; continue _fun00003 }
 33:
                        tangon = _closure2_slot0;
                        tangon = tangon.bind(zuuluu)();
 41:
                        return zuuluu;
 44:
                        return michal;
 47:
                        return entity;
                    }
                };
                return entity;
            };
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = cntext;
            papara = oscard.bind(report)(zuuluu, michal);
            verify = 13;
            michal = result[verify];
            oscard = yankee.bind(tangon)(michal);
            zuuluu = oscard.useSharedValue;
            michal = 0;
            oscard = zuuluu.bind(oscard)(michal);
            var _closure2_slot4 = oscard;
            michal = result[verify];
            golfie = yankee.bind(tangon)(michal);
            zuuluu = golfie.useAnimatedStyle;
            michal = function() { // Original name: c
                entity = {};
                option = _closure1_slot0;
                verify = _closure1_slot2;
                michal = 14;
                tangon = verify[michal];
                golfie = undefined;
                offset = option.bind(golfie)(tangon);
                report = offset.withSpring;
                oscard = _closure2_slot4;
                tangon = oscard.get;
                tangon = tangon.bind(oscard)();
                zuuluu = _closure1_slot9;
                zuuluu = report.bind(offset)(tangon, zuuluu);
                entity['opacity'] = zuuluu;
                zuuluu = {};
                michal = verify[michal];
                report = option.bind(golfie)(michal);
                tangon = report.withSpring;
                michal = 13;
                michal = verify[michal];
                verify = option.bind(golfie)(michal);
                option = verify.interpolate;
                michal = oscard.get;
                golfie = michal.bind(oscard)();
                oscard = [0, 1];
                michal = [25, 0];
                michal = option.bind(verify)(golfie, oscard, michal);
                michal = tangon.bind(report)(michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            option = {};
            romeon = 14;
            romeon = result[romeon];
            romeon = yankee.bind(tangon)(romeon);
            romeon = romeon.withSpring;
            option['withSpring'] = romeon;
            option['isComponentMounted'] = oscard;
            romeon = _closure1_slot9;
            option['ANIMATED_CONTENT_SPRING_CONFIG'] = romeon;
            verify = result[verify];
            verify = yankee.bind(tangon)(verify);
            verify = verify.interpolate;
            option['interpolate'] = verify;
            sequen = 25;
            option['ANIMATED_CONTENT_OFFSET_Y'] = sequen;
            michal['__closure'] = option;
            option = 15065296650325.0;
            michal['__workletHash'] = option;
            option = _closure1_slot11;
            michal['__initData'] = option;
            sizing = zuuluu.bind(golfie)(michal);
            zuuluu = report.useEffect;
            michal = new Array(1);
            michal[0] = oscard;
            entity = function() {
                zuuluu = _closure2_slot4;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            entity = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot8;
            entity = 15;
            entity = result[entity];
            entity = yankee.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            output = true;
            entity['bottom'] = output;
            report = update.wrapper;
            entity['style'] = report;
            romeon = 16;
            report = result[romeon];
            report = yankee.bind(tangon)(report);
            oscard = report.Stack;
            report = {'align': 'center', 'direction': 'horizontal', 'justify': 'space-between'};
            golfie = update.content;
            report['style'] = golfie;
            option = _closure1_slot7;
            record = 17;
            golfie = result[record];
            golfie = yankee.bind(tangon)(golfie);
            verify = golfie.Text;
            golfie = {'variant': 'heading-sm/semibold', 'color': 'text-primary'};
            ctrled = update.headerContentCopy;
            golfie['style'] = ctrled;
            config = 18;
            ctrled = result[config];
            ctrled = yankee.bind(tangon)(ctrled);
            sierra = ctrled.intl;
            target = sierra.formatToPlainString;
            ctrled = result[config];
            ctrled = yankee.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            vacuum = ctrled.EAYZAg;
            ctrled = {};
            limora = foxtra.config;
            limora = limora.messages;
            limora = limora.questName;
            ctrled['questName'] = limora;
            ctrled = target.bind(sierra)(vacuum, ctrled);
            golfie['children'] = ctrled;
            verify = option.bind(tangon)(verify, golfie);
            golfie = new Array(2);
            golfie[0] = verify;
            ctrled = _closure1_slot1;
            verify = 19;
            verify = result[verify];
            vacuum = ctrled.bind(tangon)(verify);
            verify = {};
            verify['onClose'] = cntext;
            cntext = update.closeButton;
            verify['style'] = cntext;
            verify = option.bind(tangon)(vacuum, verify);
            golfie[1] = verify;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            oscard = 20;
            oscard = result[oscard];
            golfie = ctrled.bind(tangon)(oscard);
            oscard = {};
            vacuum = update.contentRewardsAnimatedWrapper;
            verify = new Array(2);
            verify[0] = vacuum;
            verify[1] = sizing;
            oscard['style'] = verify;
            verify = result[romeon];
            verify = yankee.bind(tangon)(verify);
            yankee = verify.Stack;
            verify = {'align': 'center', 'justify': 'center'};
            sizing = 5;
            result = result[sizing];
            result = ctrled.bind(tangon)(result);
            result = result.spacing;
            result = result.PX_24;
            verify['spacing'] = result;
            ctrled = update.content;
            result = new Array(2);
            result[0] = ctrled;
            ctrled = update.contentRewardsWrapper;
            result[1] = ctrled;
            verify['style'] = result;
            if(kiloes) { _fun00002_ip = 1023; continue _fun00001 }
 835:
            ctrled = _closure1_slot8;
            result = _closure1_slot6;
            kiloes = {};
            vacuum = update.contentRewards;
            kiloes['style'] = vacuum;
            sierra = _closure1_slot7;
            cntext = _closure1_slot1;
            limora = _closure1_slot2;
            vacuum = 21;
            vacuum = limora[vacuum];
            cntext = cntext.bind(tangon)(vacuum);
            vacuum = {'withQuestName': false, 'withRewardAvailableCopy': false};
            cntext = sierra.bind(tangon)(cntext, vacuum);
            vacuum = new Array(2);
            vacuum[0] = cntext;
            quebec = _closure1_slot0;
            cntext = limora[record];
            cntext = quebec.bind(tangon)(cntext);
            target = cntext.Text;
            cntext = {'color': 'text-primary', 'style': null, 'variant': 'heading-lg/semibold'};
            whisks = update.contentRewardsCopy;
            cntext['style'] = whisks;
            whisks = limora[config];
            whisks = quebec.bind(tangon)(whisks);
            equals = whisks.intl;
            whisks = equals.string;
            limora = limora[config];
            limora = quebec.bind(tangon)(limora);
            limora = limora.t;
            limora = limora.qyKLdn;
            limora = whisks.bind(equals)(limora);
            cntext['children'] = limora;
            cntext = sierra.bind(tangon)(target, cntext);
            vacuum[1] = cntext;
            kiloes['children'] = vacuum;
            result = ctrled.bind(tangon)(result, kiloes);
            _fun00002_ip = 1039; continue _fun00001;
 1023:
            vacuum = _closure1_slot7;
            ctrled = _closure1_slot5;
            kiloes = {};
            result = vacuum.bind(tangon)(ctrled, kiloes);
 1039:
            kiloes = new Array(2);
            kiloes[0] = result;
            result = _closure1_slot7;
            vacuum = _closure1_slot1;
            ctrled = _closure1_slot2;
            cntext = 22;
            cntext = ctrled[cntext];
            target = vacuum.bind(tangon)(cntext);
            cntext = {};
            cntext['loading'] = status;
            cntext['onPress'] = papara;
            papara = update.ctaPrimary;
            cntext['style'] = papara;
            papara = _closure1_slot0;
            status = ctrled[config];
            status = papara.bind(tangon)(status);
            limora = status.intl;
            sierra = limora.string;
            status = ctrled[config];
            status = papara.bind(tangon)(status);
            status = status.t;
            status = status.cfY4PD;
            status = sierra.bind(limora)(status);
            cntext['text'] = status;
            status = 23;
            status = ctrled[status];
            status = papara.bind(tangon)(status);
            status = status.ButtonColors;
            status = status.GREY;
            cntext['color'] = status;
            cntext = result.bind(tangon)(target, cntext);
            kiloes[1] = cntext;
            verify['children'] = kiloes;
            verify = zuuluu.bind(tangon)(yankee, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot6;
            oscard = {};
            yankee = update.content;
            verify = new Array(2);
            verify[0] = yankee;
            yankee = update.contentEndCard;
            verify[1] = yankee;
            oscard['style'] = verify;
            verify = ctrled[romeon];
            verify = papara.bind(tangon)(verify);
            yankee = verify.Stack;
            verify = {'direction': 'horizontal', 'justify': 'space-between'};
            kiloes = update.contentEndCardHeader;
            verify['style'] = kiloes;
            romeon = ctrled[romeon];
            romeon = papara.bind(tangon)(romeon);
            kiloes = romeon.Stack;
            romeon = {};
            sizing = ctrled[sizing];
            sizing = vacuum.bind(tangon)(sizing);
            sizing = sizing.spacing;
            sizing = sizing.PX_4;
            romeon['spacing'] = sizing;
            sizing = update.contentEndCardHeaderCopy;
            romeon['style'] = sizing;
            sizing = ctrled[record];
            sizing = papara.bind(tangon)(sizing);
            cntext = sizing.Text;
            sizing = {'variant': 'heading-md/semibold', 'color': 'white'};
            target = ctrled[config];
            target = papara.bind(tangon)(target);
            limora = target.intl;
            sierra = limora.formatToPlainString;
            target = ctrled[config];
            target = papara.bind(tangon)(target);
            target = target.t;
            status = target.EQa7oq;
            target = {};
            whisks = foxtra.config;
            whisks = whisks.messages;
            whisks = whisks.questName;
            target['questName'] = whisks;
            target = sierra.bind(limora)(status, target);
            sizing['children'] = target;
            cntext = result.bind(tangon)(cntext, sizing);
            sizing = new Array(2);
            sizing[0] = cntext;
            record = ctrled[record];
            record = papara.bind(tangon)(record);
            cntext = record.Text;
            record = {'variant': 'text-sm/medium', 'color': 'text-secondary'};
            target = foxtra.config;
            target = target.messages;
            target = target.gamePublisher;
            record['children'] = target;
            record = result.bind(tangon)(cntext, record);
            sizing[1] = record;
            romeon['children'] = sizing;
            kiloes = option.bind(tangon)(kiloes, romeon);
            romeon = new Array(2);
            romeon[0] = kiloes;
            kiloes = 24;
            kiloes = ctrled[kiloes];
            kiloes = papara.bind(tangon)(kiloes);
            sizing = kiloes.IconButton;
            kiloes = {};
            record = ctrled[config];
            record = papara.bind(tangon)(record);
            cntext = record.intl;
            record = cntext.string;
            config = ctrled[config];
            config = papara.bind(tangon)(config);
            config = config.t;
            config = config.YsCuyM;
            config = record.bind(cntext)(config);
            kiloes['accessibilityLabel'] = config;
            ctrled = ctrled[sequen];
            ctrled = vacuum.bind(tangon)(ctrled);
            kiloes['icon'] = ctrled;
            kiloes['onPress'] = echoed;
            echoed = 'secondary';
            kiloes['variant'] = echoed;
            kiloes = result.bind(tangon)(sizing, kiloes);
            romeon[1] = kiloes;
            verify['children'] = romeon;
            yankee = option.bind(tangon)(yankee, verify);
            verify = new Array(3);
            verify[0] = yankee;
            yankee = null;
            yankee = yankee != source;
            if(!yankee) { _fun00002_ip = 1759; continue _fun00001 }
 1655:
            sizing = _closure1_slot7;
            kiloes = _closure1_slot0;
            ctrled = _closure1_slot2;
            romeon = 26;
            romeon = ctrled[romeon];
            romeon = kiloes.bind(tangon)(romeon);
            kiloes = romeon.PressableOpacity;
            romeon = {};
            romeon['onPress'] = backup;
            echoed = _closure1_slot1;
            result = 27;
            result = ctrled[result];
            echoed = echoed.bind(tangon)(result);
            result = {};
            update = update.image;
            result['style'] = update;
            update = {};
            source = source.url;
            update['uri'] = source;
            result['source'] = update;
            update = 'cover';
            result['resizeMode'] = update;
            result = sizing.bind(tangon)(echoed, result);
            romeon['children'] = result;
            yankee = sizing.bind(tangon)(kiloes, romeon);
 1759:
            verify[1] = yankee;
            romeon = _closure1_slot7;
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = 28;
            offset = sizing[offset];
            offset = kiloes.bind(tangon)(offset);
            yankee = offset.Button;
            offset = {};
            offset['grow'] = output;
            offset['onPress'] = backup;
            backup = 9;
            backup = sizing[backup];
            kiloes = kiloes.bind(tangon)(backup);
            backup = kiloes.getVideoQuestEndCardCtaText;
            foxtra = foxtra.config;
            foxtra = backup.bind(kiloes)(foxtra);
            offset['text'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();