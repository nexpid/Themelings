// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.ActivityIndicator;
    var _closure1_slot5 = golfie;
    golfie = tangon.View;
    var _closure1_slot6 = golfie;
    tangon = tangon.StyleSheet;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot8 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot11 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function() {
        entity = {};
        michal = {};
        zuuluu = 210;
        michal['height'] = zuuluu;
        report = _closure1_slot1;
        oscard = _closure1_slot2;
        zuuluu = 6;
        option = oscard[zuuluu];
        tangon = undefined;
        option = report.bind(tangon)(option);
        option = option.spacing;
        option = option.PX_24;
        michal['marginBottom'] = option;
        entity['imageContainer'] = michal;
        michal = {};
        golfie = _closure1_slot7;
        verify = golfie.absoluteFillObject;
        offset = michal;
        golfie = copyDataProperties(offset, verify);
        golfie = oscard[zuuluu];
        golfie = report.bind(tangon)(golfie);
        golfie = golfie.radii;
        option = golfie.xl;
        golfie = 'borderRadius';
        michal[golfie] = option;
        entity['image'] = michal;
        michal = {};
        entity['wrapper'] = michal;
        michal = {};
        golfie = oscard[zuuluu];
        golfie = report.bind(tangon)(golfie);
        golfie = golfie.spacing;
        golfie = golfie.PX_16;
        michal['marginBottom'] = golfie;
        entity['header'] = michal;
        michal = {};
        golfie = 0;
        michal['paddingVertical'] = golfie;
        entity['ctas'] = michal;
        michal = {};
        golfie = oscard[zuuluu];
        golfie = report.bind(tangon)(golfie);
        golfie = golfie.spacing;
        golfie = golfie.PX_16;
        michal['padding'] = golfie;
        entity['content'] = michal;
        michal = {};
        golfie = 1;
        michal['borderBottomWidth'] = golfie;
        golfie = oscard[zuuluu];
        golfie = report.bind(tangon)(golfie);
        golfie = golfie.colors;
        golfie = golfie.BORDER_SUBTLE;
        michal['borderBottomColor'] = golfie;
        golfie = oscard[zuuluu];
        golfie = report.bind(tangon)(golfie);
        golfie = golfie.spacing;
        golfie = golfie.PX_24;
        michal['paddingBottom'] = golfie;
        entity['contentEndCard'] = michal;
        michal = {};
        zuuluu = oscard[zuuluu];
        zuuluu = report.bind(tangon)(zuuluu);
        zuuluu = zuuluu.spacing;
        zuuluu = zuuluu.PX_24;
        michal['paddingTop'] = zuuluu;
        entity['contentRewardsWrapper'] = michal;
        michal = {};
        entity['questTitleWrapper'] = michal;
        return entity;
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 26;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalContentInProgress
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            limora = michal.quest;
            var _closure2_slot0 = limora;
            offset = michal.onClose;
            var _closure2_slot1 = offset;
            zuuluu = michal.fullHeight;
            michal = _closure1_slot12;
            tangon = undefined;
            foxtra = michal.bind(tangon)(zuuluu);
            report = _closure1_slot4;
            oscard = report.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = limora;
            michal = function() {
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 7;
                zuuluu = oscard[entity];
                michal = undefined;
                tangon = report.bind(michal)(zuuluu);
                zuuluu = tangon.resolveVideoQuestAsset;
                entity = oscard[entity];
                entity = report.bind(michal)(entity);
                entity = entity.VideoQuestAssetId;
                michal = entity.VIDEO_PLAYER_THUMBNAIL;
                entity = _closure2_slot0;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            update = oscard.bind(report)(michal, zuuluu);
            zuuluu = _closure1_slot0;
            romeon = _closure1_slot2;
            michal = 8;
            michal = romeon[michal];
            oscard = zuuluu.bind(tangon)(michal);
            michal = oscard.useQuestTaskDetails;
            vacuum = michal.bind(oscard)(limora);
            michal = 9;
            michal = romeon[michal];
            oscard = zuuluu.bind(tangon)(michal);
            michal = oscard.useQuestImpressionId;
            michal = michal.bind(oscard)();
            var _closure2_slot2 = michal;
            golfie = report.useCallback;
            oscard = new Array(2);
            oscard[0] = limora;
            oscard[1] = michal;
            michal = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 10;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot0;
                michal = {};
                golfie = 11;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 12;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot2;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            output = golfie.bind(report)(michal, oscard);
            michal = 13;
            michal = romeon[michal];
            golfie = zuuluu.bind(tangon)(michal);
            oscard = golfie.useIsQuestBarRewardAvailableExclamationEnabled;
            michal = {};
            option = _closure1_slot8;
            option = option.VIDEO_MODAL_MOBILE;
            michal['location'] = option;
            config = oscard.bind(golfie)(michal);
            michal = 14;
            michal = romeon[michal];
            oscard = zuuluu.bind(tangon)(michal);
            zuuluu = oscard.useQuestRewardClaimHandler;
            michal = {};
            michal['quest'] = limora;
            michal = zuuluu.bind(oscard)(michal);
            verify = michal.isLoading;
            result = michal.isClaiming;
            golfie = michal.claim;
            var _closure2_slot3 = golfie;
            oscard = report.useCallback;
            zuuluu = _closure1_slot3;
            michal = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00004_ip = 47; continue _fun00003 }
 7:
                        michal = _closure2_slot3;
                        zuuluu = undefined;
                        michal = michal.bind(zuuluu)();
                        SaveGenerator(address=24);
 22:
                        return michal;
 24:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00004_ip = 44; continue _fun00003 }
 30:
                        if(!michal) { _fun00004_ip = 41; continue _fun00003 }
 33:
                        tangon = _closure2_slot1;
                        tangon = tangon.bind(zuuluu)();
 41:
                        return zuuluu;
 44:
                        return michal;
 47:
                        return entity;
                    }
                };
                return entity;
            };
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = offset;
            backup = oscard.bind(report)(zuuluu, michal);
            zuuluu = report.useCallback;
            michal = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 15;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.open;
                michal = {'key': 'quest-restart-video-not-implemented', 'content': 'Not yet implemented :)'};
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            entity = new Array(0);
            cntext = zuuluu.bind(report)(michal, entity);
            zuuluu = _closure1_slot10;
            michal = _closure1_slot6;
            entity = {};
            report = foxtra.wrapper;
            entity['style'] = report;
            report = {};
            golfie = foxtra.content;
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = foxtra.contentEndCard;
            oscard[1] = golfie;
            report['style'] = oscard;
            option = _closure1_slot9;
            golfie = _closure1_slot1;
            oscard = 16;
            oscard = romeon[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            oscard['quest'] = limora;
            oscard['onClose'] = offset;
            offset = foxtra.header;
            oscard['style'] = offset;
            golfie = option.bind(tangon)(golfie, oscard);
            oscard = new Array(3);
            oscard[0] = golfie;
            golfie = null;
            golfie = golfie != update;
            if(!golfie) { _fun00002_ip = 519; continue _fun00001 }
 427:
            romeon = _closure1_slot9;
            offset = _closure1_slot6;
            option = {};
            kiloes = foxtra.imageContainer;
            option['style'] = kiloes;
            sizing = _closure1_slot1;
            echoed = _closure1_slot2;
            kiloes = 17;
            kiloes = echoed[kiloes];
            sizing = sizing.bind(tangon)(kiloes);
            kiloes = {};
            echoed = foxtra.image;
            kiloes['style'] = echoed;
            echoed = {};
            update = update.url;
            echoed['uri'] = update;
            kiloes['source'] = echoed;
            echoed = 'cover';
            kiloes['resizeMode'] = echoed;
            kiloes = romeon.bind(tangon)(sizing, kiloes);
            option['children'] = kiloes;
            golfie = romeon.bind(tangon)(offset, option);
 519:
            oscard[1] = golfie;
            option = _closure1_slot10;
            golfie = _closure1_slot0;
            romeon = _closure1_slot2;
            offset = 18;
            offset = romeon[offset];
            offset = golfie.bind(tangon)(offset);
            update = offset.ButtonGroup;
            echoed = {};
            offset = 'horizontal';
            echoed['direction'] = offset;
            offset = foxtra.ctas;
            echoed['style'] = offset;
            record = _closure1_slot9;
            offset = 19;
            kiloes = romeon[offset];
            kiloes = golfie.bind(tangon)(kiloes);
            source = kiloes.Button;
            sizing = {};
            kiloes = true;
            sizing['grow'] = kiloes;
            sizing['onPress'] = output;
            output = 20;
            ctrled = romeon[output];
            ctrled = golfie.bind(tangon)(ctrled);
            papara = ctrled.intl;
            sequen = papara.string;
            ctrled = romeon[output];
            ctrled = golfie.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.hvVgAQ;
            ctrled = sequen.bind(papara)(ctrled);
            sizing['text'] = ctrled;
            ctrled = 'secondary';
            sizing['variant'] = ctrled;
            sizing = record.bind(tangon)(source, sizing);
            source = new Array(2);
            source[0] = sizing;
            sizing = 21;
            sizing = romeon[sizing];
            sizing = golfie.bind(tangon)(sizing);
            sequen = sizing.IconButton;
            ctrled = {};
            sizing = romeon[output];
            sizing = golfie.bind(tangon)(sizing);
            target = sizing.intl;
            papara = target.string;
            sizing = romeon[output];
            sizing = golfie.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.YsCuyM;
            sizing = papara.bind(target)(sizing);
            ctrled['accessibilityLabel'] = sizing;
            sizing = _closure1_slot1;
            papara = 22;
            papara = romeon[papara];
            papara = sizing.bind(tangon)(papara);
            ctrled['icon'] = papara;
            ctrled['onPress'] = cntext;
            cntext = 'tertiary';
            ctrled['variant'] = cntext;
            ctrled = record.bind(tangon)(sequen, ctrled);
            source[1] = ctrled;
            echoed['children'] = source;
            echoed = option.bind(tangon)(update, echoed);
            oscard[2] = echoed;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = oscard;
            echoed = 23;
            oscard = romeon[echoed];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.Stack;
            oscard = {};
            cntext = 'center';
            oscard['align'] = cntext;
            source = 6;
            romeon = romeon[source];
            romeon = sizing.bind(tangon)(romeon);
            romeon = romeon.spacing;
            romeon = romeon.PX_24;
            oscard['spacing'] = romeon;
            sizing = foxtra.content;
            romeon = new Array(2);
            romeon[0] = sizing;
            foxtra = foxtra.contentRewardsWrapper;
            romeon[1] = foxtra;
            oscard['style'] = romeon;
            if(verify) { _fun00002_ip = 1304; continue _fun00001 }
 917:
            foxtra = _closure1_slot10;
            romeon = _closure1_slot11;
            verify = {};
            sequen = _closure1_slot9;
            ctrled = _closure1_slot1;
            record = _closure1_slot2;
            sizing = 24;
            sizing = record[sizing];
            update = ctrled.bind(tangon)(sizing);
            sizing = {'hasConfetti': true, 'quest': null, 'size': 'md'};
            sizing['quest'] = limora;
            vacuum = vacuum.percentComplete;
            sizing['progress'] = vacuum;
            update = sequen.bind(tangon)(update, sizing);
            sizing = new Array(2);
            sizing[0] = update;
            vacuum = _closure1_slot0;
            echoed = record[echoed];
            echoed = vacuum.bind(tangon)(echoed);
            update = echoed.Stack;
            echoed = {};
            echoed['align'] = cntext;
            source = record[source];
            source = ctrled.bind(tangon)(source);
            source = source.spacing;
            source = source.PX_4;
            echoed['spacing'] = source;
            ctrled = 25;
            source = record[ctrled];
            source = vacuum.bind(tangon)(source);
            cntext = source.Text;
            source = {'variant': 'heading-md/medium', 'color': 'text-primary'};
            papara = record[output];
            papara = vacuum.bind(tangon)(papara);
            sierra = papara.intl;
            status = sierra.formatToPlainString;
            papara = record[output];
            papara = vacuum.bind(tangon)(papara);
            papara = papara.t;
            target = papara.EAYZAg;
            papara = {};
            limora = limora.config;
            limora = limora.messages;
            limora = limora.questName;
            papara['questName'] = limora;
            papara = status.bind(sierra)(target, papara);
            source['children'] = papara;
            cntext = sequen.bind(tangon)(cntext, source);
            source = new Array(2);
            source[0] = cntext;
            ctrled = record[ctrled];
            ctrled = vacuum.bind(tangon)(ctrled);
            vacuum = ctrled.Text;
            ctrled = {'variant': 'heading-sm/medium', 'color': 'text-secondary'};
            target = _closure1_slot0;
            record = _closure1_slot2;
            cntext = record[output];
            cntext = target.bind(tangon)(cntext);
            papara = cntext.intl;
            cntext = papara.string;
            record = record[output];
            record = target.bind(tangon)(record);
            record = record.t;
            if(config) { _fun00002_ip = 1251; continue _fun00001 }
 1236:
            config = record.2BD0CQ;
            config = cntext.bind(papara)(config);
            _fun00002_ip = 1264; continue _fun00001;
 1251:
            record = record.1Wvve3;
            config = cntext.bind(papara)(record);
 1264:
            ctrled['children'] = config;
            ctrled = sequen.bind(tangon)(vacuum, ctrled);
            source[1] = ctrled;
            echoed['children'] = source;
            echoed = foxtra.bind(tangon)(update, echoed);
            sizing[1] = echoed;
            verify['children'] = sizing;
            romeon = foxtra.bind(tangon)(romeon, verify);
            _fun00002_ip = 1320; continue _fun00001;
 1304:
            sizing = _closure1_slot9;
            foxtra = _closure1_slot5;
            verify = {};
            romeon = sizing.bind(tangon)(foxtra, verify);
 1320:
            verify = new Array(2);
            verify[0] = romeon;
            romeon = _closure1_slot9;
            sizing = _closure1_slot0;
            foxtra = _closure1_slot2;
            offset = foxtra[offset];
            offset = sizing.bind(tangon)(offset);
            yankee = offset.Button;
            offset = {};
            offset['loading'] = result;
            offset['grow'] = kiloes;
            offset['onPress'] = backup;
            backup = foxtra[output];
            backup = sizing.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.string;
            foxtra = foxtra[output];
            foxtra = sizing.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.cfY4PD;
            foxtra = backup.bind(kiloes)(foxtra);
            offset['text'] = foxtra;
            foxtra = 'primary';
            offset['variant'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();