// app/modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    romeon = 0;
    tangon = oscard[romeon];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    foxtra = 1;
    golfie = oscard[foxtra];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.ActivityIndicator;
    var _closure1_slot5 = golfie;
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = {'mass': 1.9, 'damping': 18, 'stiffness': 80, 'overshootClamping': false};
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flexGrow': 1, 'flexShrink': 1};
    tangon['wrapper'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1};
    tangon['headerContentCopy'] = verify;
    verify = {};
    offset = 0.5;
    verify['opacity'] = offset;
    tangon['closeButton'] = verify;
    verify = {};
    offset = 5;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['padding'] = backup;
    tangon['content'] = verify;
    verify = {};
    verify['flex'] = foxtra;
    tangon['contentRewardsAnimatedWrapper'] = verify;
    verify = {};
    verify['flex'] = foxtra;
    tangon['contentRewardsWrapper'] = verify;
    verify = {};
    backup = 'center';
    verify['alignItems'] = backup;
    tangon['contentRewards'] = verify;
    verify = {};
    verify['textAlign'] = backup;
    tangon['contentRewardsCopy'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['marginBottom'] = backup;
    tangon['contentEndCardHeader'] = verify;
    verify = {'flexGrow': 1, 'flexShrink': 1};
    tangon['contentEndCardHeaderCopy'] = verify;
    verify = {};
    verify['borderTopWidth'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BORDER_STRONG;
    verify['borderTopColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['paddingTop'] = foxtra;
    tangon['contentEndCard'] = verify;
    verify = {};
    foxtra = 210;
    verify['height'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['marginBottom'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xl;
    verify['borderRadius'] = foxtra;
    tangon['image'] = verify;
    verify = {};
    verify['flexGrow'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.round;
    verify['borderRadius'] = offset;
    tangon['ctaPrimary'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = 'function VideoQuestModalContentCompletedTsx1(){const{withDelay,ANIMATION_DELAY,withSpring,isComponentMounted,ANIMATED_CONTENT_SPRING_CONFIG,interpolate,ANIMATED_CONTENT_OFFSET_Y}=this.__closure;return{opacity:withDelay(ANIMATION_DELAY,withSpring(isComponentMounted.get(),ANIMATED_CONTENT_SPRING_CONFIG)),transform:[{translateY:withDelay(ANIMATION_DELAY,withSpring(interpolate(isComponentMounted.get(),[0,1],[ANIMATED_CONTENT_OFFSET_Y,0]),ANIMATED_CONTENT_SPRING_CONFIG))}]};}';
    tangon['code'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = 30;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/VideoQuestModal/VideoQuestModalContentCompleted.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VideoQuestModalContentCompleted
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            target = michal.onClose;
            var _closure2_slot0 = target;
            echoed = michal.onRestartVideo;
            michal = _closure1_slot10;
            tangon = undefined;
            update = michal.bind(tangon)();
            yankee = _closure1_slot0;
            backup = _closure1_slot2;
            michal = 6;
            michal = backup[michal];
            zuuluu = yankee.bind(tangon)(michal);
            michal = zuuluu.useVideoQuestModalContext;
            michal = michal.bind(zuuluu)();
            sequen = michal.quest;
            var _closure2_slot1 = sequen;
            report = _closure1_slot4;
            oscard = report.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = sequen;
            michal = function() {
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 7;
                zuuluu = oscard[entity];
                michal = undefined;
                tangon = report.bind(michal)(zuuluu);
                zuuluu = tangon.resolveVideoQuestAsset;
                entity = oscard[entity];
                entity = report.bind(michal)(entity);
                entity = entity.VideoQuestAssetId;
                michal = entity.VIDEO_PLAYER_THUMBNAIL;
                entity = _closure2_slot1;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            cntext = oscard.bind(report)(michal, zuuluu);
            michal = 8;
            michal = backup[michal];
            zuuluu = yankee.bind(tangon)(michal);
            michal = zuuluu.useQuestImpressionId;
            michal = michal.bind(zuuluu)();
            var _closure2_slot2 = michal;
            oscard = report.useCallback;
            zuuluu = new Array(2);
            zuuluu[0] = sequen;
            zuuluu[1] = michal;
            michal = function() {
                option = _closure1_slot0;
                verify = _closure1_slot2;
                entity = 9;
                michal = verify[entity];
                entity = undefined;
                report = option.bind(entity)(michal);
                tangon = report.openGameLink;
                zuuluu = _closure2_slot1;
                michal = {};
                golfie = 10;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContent;
                golfie = golfie.VIDEO_MODAL_MOBILE;
                michal['content'] = golfie;
                golfie = 11;
                golfie = verify[golfie];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.QuestContentCTA;
                golfie = golfie.OPEN_GAME_LINK;
                michal['ctaContent'] = golfie;
                oscard = _closure2_slot2;
                michal['impressionId'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            config = oscard.bind(report)(michal, zuuluu);
            michal = 12;
            michal = backup[michal];
            oscard = yankee.bind(tangon)(michal);
            zuuluu = oscard.useQuestRewardClaimHandler;
            michal = {};
            michal['quest'] = sequen;
            michal = zuuluu.bind(oscard)(michal);
            romeon = michal.isLoading;
            papara = michal.isClaiming;
            golfie = michal.claim;
            var _closure2_slot3 = golfie;
            oscard = report.useCallback;
            zuuluu = _closure1_slot3;
            michal = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00004_ip = 47; continue _fun00003 }
 7:
                        michal = _closure2_slot3;
                        zuuluu = undefined;
                        michal = michal.bind(zuuluu)();
                        SaveGenerator(address=24);
 22:
                        return michal;
 24:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00004_ip = 44; continue _fun00003 }
 30:
                        if(!michal) { _fun00004_ip = 41; continue _fun00003 }
 33:
                        tangon = _closure2_slot0;
                        tangon = tangon.bind(zuuluu)();
 41:
                        return zuuluu;
 44:
                        return michal;
 47:
                        return entity;
                    }
                };
                return entity;
            };
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = target;
            vacuum = oscard.bind(report)(zuuluu, michal);
            verify = 13;
            michal = backup[verify];
            oscard = yankee.bind(tangon)(michal);
            zuuluu = oscard.useSharedValue;
            michal = 0;
            michal = zuuluu.bind(oscard)(michal);
            var _closure2_slot4 = michal;
            zuuluu = backup[verify];
            golfie = yankee.bind(tangon)(zuuluu);
            oscard = golfie.useAnimatedStyle;
            zuuluu = function() { // Original name: c
                entity = {};
                romeon = _closure1_slot0;
                foxtra = _closure1_slot2;
                michal = 13;
                zuuluu = foxtra[michal];
                yankee = undefined;
                report = romeon.bind(yankee)(zuuluu);
                tangon = report.withDelay;
                golfie = 14;
                zuuluu = foxtra[golfie];
                option = romeon.bind(yankee)(zuuluu);
                oscard = option.withSpring;
                offset = _closure2_slot4;
                zuuluu = offset.get;
                zuuluu = zuuluu.bind(offset)();
                verify = _closure1_slot9;
                zuuluu = oscard.bind(option)(zuuluu, verify);
                oscard = 125;
                zuuluu = tangon.bind(report)(oscard, zuuluu);
                entity['opacity'] = zuuluu;
                zuuluu = {};
                tangon = foxtra[michal];
                report = romeon.bind(yankee)(tangon);
                tangon = report.withDelay;
                golfie = foxtra[golfie];
                option = romeon.bind(yankee)(golfie);
                golfie = option.withSpring;
                michal = foxtra[michal];
                foxtra = romeon.bind(yankee)(michal);
                romeon = foxtra.interpolate;
                michal = offset.get;
                yankee = michal.bind(offset)();
                offset = [0, 1];
                michal = [75, 0];
                michal = romeon.bind(foxtra)(yankee, offset, michal);
                michal = golfie.bind(option)(michal, verify);
                michal = tangon.bind(report)(oscard, michal);
                zuuluu['translateY'] = michal;
                michal = new Array(1);
                michal[0] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            option = {};
            offset = backup[verify];
            offset = yankee.bind(tangon)(offset);
            offset = offset.withDelay;
            option['withDelay'] = offset;
            offset = 125;
            option['ANIMATION_DELAY'] = offset;
            offset = 14;
            offset = backup[offset];
            offset = yankee.bind(tangon)(offset);
            offset = offset.withSpring;
            option['withSpring'] = offset;
            option['isComponentMounted'] = michal;
            offset = _closure1_slot9;
            option['ANIMATED_CONTENT_SPRING_CONFIG'] = offset;
            verify = backup[verify];
            verify = yankee.bind(tangon)(verify);
            verify = verify.interpolate;
            option['interpolate'] = verify;
            verify = 75;
            option['ANIMATED_CONTENT_OFFSET_Y'] = verify;
            zuuluu['__closure'] = option;
            option = 2704439293952.0;
            zuuluu['__workletHash'] = option;
            option = _closure1_slot11;
            zuuluu['__initData'] = option;
            result = oscard.bind(golfie)(zuuluu);
            oscard = report.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure2_slot4;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            michal = oscard.bind(report)(michal, zuuluu);
            zuuluu = report.useCallback;
            oscard = sequen.id;
            michal = new Array(1);
            michal[0] = oscard;
            entity = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 15;
                michal = golfie[entity];
                entity = undefined;
                report = oscard.bind(entity)(michal);
                tangon = report.showShareActionSheet;
                zuuluu = {};
                michal = 9;
                michal = golfie[michal];
                golfie = oscard.bind(entity)(michal);
                oscard = golfie.getQuestUrl;
                michal = _closure2_slot1;
                michal = michal.id;
                michal = oscard.bind(golfie)(michal);
                zuuluu['message'] = michal;
                michal = 'Video Quest Modal';
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            output = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot8;
            entity = 16;
            entity = backup[entity];
            entity = yankee.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            record = true;
            entity['bottom'] = record;
            report = update.wrapper;
            entity['style'] = report;
            offset = 17;
            report = backup[offset];
            report = yankee.bind(tangon)(report);
            oscard = report.Stack;
            report = {'align': 'center', 'direction': 'horizontal', 'justify': 'space-between'};
            golfie = update.content;
            report['style'] = golfie;
            option = _closure1_slot7;
            sizing = 18;
            golfie = backup[sizing];
            golfie = yankee.bind(tangon)(golfie);
            verify = golfie.Text;
            golfie = {'variant': 'heading-sm/semibold', 'color': 'text-secondary'};
            kiloes = update.headerContentCopy;
            golfie['style'] = kiloes;
            ctrled = 19;
            kiloes = backup[ctrled];
            kiloes = yankee.bind(tangon)(kiloes);
            sierra = kiloes.intl;
            status = sierra.formatToPlainString;
            kiloes = backup[ctrled];
            kiloes = yankee.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            source = kiloes.EAYZAg;
            kiloes = {};
            limora = sequen.config;
            limora = limora.messages;
            limora = limora.questName;
            kiloes['questName'] = limora;
            kiloes = status.bind(sierra)(source, kiloes);
            golfie['children'] = kiloes;
            verify = option.bind(tangon)(verify, golfie);
            golfie = new Array(2);
            golfie[0] = verify;
            kiloes = _closure1_slot1;
            verify = 20;
            verify = backup[verify];
            source = kiloes.bind(tangon)(verify);
            verify = {};
            verify['onClose'] = target;
            target = update.closeButton;
            verify['style'] = target;
            verify = option.bind(tangon)(source, verify);
            golfie[1] = verify;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            oscard = 21;
            oscard = backup[oscard];
            golfie = kiloes.bind(tangon)(oscard);
            oscard = {};
            source = update.contentRewardsAnimatedWrapper;
            verify = new Array(2);
            verify[0] = source;
            verify[1] = result;
            oscard['style'] = verify;
            verify = backup[offset];
            verify = yankee.bind(tangon)(verify);
            yankee = verify.Stack;
            verify = {'align': 'center', 'justify': 'center'};
            source = 5;
            backup = backup[source];
            backup = kiloes.bind(tangon)(backup);
            backup = backup.spacing;
            backup = backup.PX_24;
            verify['spacing'] = backup;
            kiloes = update.content;
            backup = new Array(2);
            backup[0] = kiloes;
            kiloes = update.contentRewardsWrapper;
            backup[1] = kiloes;
            verify['style'] = backup;
            if(romeon) { _fun00002_ip = 1080; continue _fun00001 }
 896:
            kiloes = _closure1_slot8;
            backup = _closure1_slot6;
            romeon = {};
            result = update.contentRewards;
            romeon['style'] = result;
            sierra = _closure1_slot7;
            target = _closure1_slot1;
            limora = _closure1_slot2;
            result = 22;
            result = limora[result];
            target = target.bind(tangon)(result);
            result = {'withQuestName': false, 'withRewardAvailableCopy': false};
            target = sierra.bind(tangon)(target, result);
            result = new Array(2);
            result[0] = target;
            quebec = _closure1_slot0;
            target = limora[sizing];
            target = quebec.bind(tangon)(target);
            status = target.Text;
            target = {'color': 'text-primary', 'style': null, 'variant': 'heading-lg/semibold'};
            whisks = update.contentRewardsCopy;
            target['style'] = whisks;
            whisks = limora[ctrled];
            whisks = quebec.bind(tangon)(whisks);
            equals = whisks.intl;
            whisks = equals.string;
            limora = limora[ctrled];
            limora = quebec.bind(tangon)(limora);
            limora = limora.t;
            limora = limora.qyKLdn;
            limora = whisks.bind(equals)(limora);
            target['children'] = limora;
            target = sierra.bind(tangon)(status, target);
            result[1] = target;
            romeon['children'] = result;
            backup = kiloes.bind(tangon)(backup, romeon);
            _fun00002_ip = 1096; continue _fun00001;
 1080:
            result = _closure1_slot7;
            kiloes = _closure1_slot5;
            romeon = {};
            backup = result.bind(tangon)(kiloes, romeon);
 1096:
            romeon = new Array(2);
            romeon[0] = backup;
            result = _closure1_slot7;
            status = _closure1_slot1;
            target = _closure1_slot2;
            backup = 23;
            backup = target[backup];
            kiloes = status.bind(tangon)(backup);
            backup = {};
            backup['loading'] = papara;
            backup['onPress'] = vacuum;
            vacuum = update.ctaPrimary;
            backup['style'] = vacuum;
            papara = _closure1_slot0;
            vacuum = target[ctrled];
            vacuum = papara.bind(tangon)(vacuum);
            limora = vacuum.intl;
            sierra = limora.string;
            vacuum = target[ctrled];
            vacuum = papara.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.cfY4PD;
            vacuum = sierra.bind(limora)(vacuum);
            backup['text'] = vacuum;
            vacuum = 24;
            vacuum = target[vacuum];
            vacuum = papara.bind(tangon)(vacuum);
            vacuum = vacuum.ButtonColors;
            vacuum = vacuum.GREY;
            backup['color'] = vacuum;
            backup = result.bind(tangon)(kiloes, backup);
            romeon[1] = backup;
            verify['children'] = romeon;
            verify = zuuluu.bind(tangon)(yankee, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot6;
            oscard = {};
            yankee = update.content;
            verify = new Array(2);
            verify[0] = yankee;
            yankee = update.contentEndCard;
            verify[1] = yankee;
            oscard['style'] = verify;
            verify = target[offset];
            verify = papara.bind(tangon)(verify);
            yankee = verify.Stack;
            verify = {'direction': 'horizontal', 'justify': 'space-between'};
            romeon = update.contentEndCardHeader;
            verify['style'] = romeon;
            romeon = target[offset];
            romeon = papara.bind(tangon)(romeon);
            backup = romeon.Stack;
            romeon = {};
            kiloes = target[source];
            kiloes = status.bind(tangon)(kiloes);
            kiloes = kiloes.spacing;
            kiloes = kiloes.PX_4;
            romeon['spacing'] = kiloes;
            kiloes = update.contentEndCardHeaderCopy;
            romeon['style'] = kiloes;
            kiloes = target[sizing];
            kiloes = papara.bind(tangon)(kiloes);
            vacuum = kiloes.Text;
            kiloes = {'variant': 'heading-md/semibold', 'color': 'white'};
            sierra = target[ctrled];
            sierra = papara.bind(tangon)(sierra);
            equals = sierra.intl;
            whisks = equals.formatToPlainString;
            sierra = target[ctrled];
            sierra = papara.bind(tangon)(sierra);
            sierra = sierra.t;
            limora = sierra.EQa7oq;
            sierra = {};
            quebec = sequen.config;
            quebec = quebec.messages;
            quebec = quebec.questName;
            sierra['questName'] = quebec;
            sierra = whisks.bind(equals)(limora, sierra);
            kiloes['children'] = sierra;
            vacuum = result.bind(tangon)(vacuum, kiloes);
            kiloes = new Array(2);
            kiloes[0] = vacuum;
            sizing = target[sizing];
            sizing = papara.bind(tangon)(sizing);
            vacuum = sizing.Text;
            sizing = {'variant': 'text-sm/medium', 'color': 'text-secondary'};
            sierra = sequen.config;
            sierra = sierra.messages;
            sierra = sierra.gamePublisher;
            sizing['children'] = sierra;
            sizing = result.bind(tangon)(vacuum, sizing);
            kiloes[1] = sizing;
            romeon['children'] = kiloes;
            backup = option.bind(tangon)(backup, romeon);
            romeon = new Array(2);
            romeon[0] = backup;
            backup = 25;
            kiloes = target[backup];
            kiloes = papara.bind(tangon)(kiloes);
            sizing = kiloes.PressableOpacity;
            kiloes = {};
            vacuum = 'button';
            kiloes['accessibilityRole'] = vacuum;
            sierra = target[ctrled];
            sierra = papara.bind(tangon)(sierra);
            whisks = sierra.intl;
            limora = whisks.string;
            sierra = target[ctrled];
            sierra = papara.bind(tangon)(sierra);
            sierra = sierra.t;
            sierra = sierra.YsCuyM;
            sierra = limora.bind(whisks)(sierra);
            kiloes['accessibilityLabel'] = sierra;
            kiloes['onPress'] = echoed;
            echoed = 26;
            echoed = target[echoed];
            echoed = papara.bind(tangon)(echoed);
            papara = echoed.RetryIcon;
            echoed = {};
            target = target[source];
            target = status.bind(tangon)(target);
            target = target.colors;
            target = target.INTERACTIVE_NORMAL;
            echoed['color'] = target;
            echoed = result.bind(tangon)(papara, echoed);
            kiloes['children'] = echoed;
            kiloes = result.bind(tangon)(sizing, kiloes);
            romeon[1] = kiloes;
            verify['children'] = romeon;
            yankee = option.bind(tangon)(yankee, verify);
            verify = new Array(3);
            verify[0] = yankee;
            yankee = null;
            yankee = yankee != cntext;
            if(!yankee) { _fun00002_ip = 1854; continue _fun00001 }
 1753:
            sizing = _closure1_slot7;
            kiloes = _closure1_slot0;
            papara = _closure1_slot2;
            romeon = papara[backup];
            romeon = kiloes.bind(tangon)(romeon);
            kiloes = romeon.PressableOpacity;
            romeon = {};
            romeon['onPress'] = config;
            echoed = _closure1_slot1;
            result = 27;
            result = papara[result];
            echoed = echoed.bind(tangon)(result);
            result = {};
            update = update.image;
            result['style'] = update;
            update = {};
            cntext = cntext.url;
            update['uri'] = cntext;
            result['source'] = update;
            update = 'cover';
            result['resizeMode'] = update;
            result = sizing.bind(tangon)(echoed, result);
            romeon['children'] = result;
            yankee = sizing.bind(tangon)(kiloes, romeon);
 1854:
            verify[1] = yankee;
            romeon = _closure1_slot8;
            result = _closure1_slot0;
            echoed = _closure1_slot2;
            offset = echoed[offset];
            offset = result.bind(tangon)(offset);
            yankee = offset.Stack;
            offset = {'direction': 'horizontal', 'spacing': null, 'align': 'center'};
            update = _closure1_slot1;
            kiloes = echoed[source];
            kiloes = update.bind(tangon)(kiloes);
            kiloes = kiloes.spacing;
            kiloes = kiloes.PX_16;
            offset['spacing'] = kiloes;
            sizing = _closure1_slot7;
            foxtra = 28;
            foxtra = echoed[foxtra];
            foxtra = result.bind(tangon)(foxtra);
            kiloes = foxtra.Button;
            foxtra = {};
            foxtra['grow'] = record;
            foxtra['onPress'] = config;
            config = 9;
            config = echoed[config];
            record = result.bind(tangon)(config);
            config = record.getVideoQuestEndCardCtaText;
            sequen = sequen.config;
            sequen = config.bind(record)(sequen);
            foxtra['text'] = sequen;
            kiloes = sizing.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            backup = echoed[backup];
            backup = result.bind(tangon)(backup);
            kiloes = backup.PressableOpacity;
            backup = {};
            backup['accessibilityRole'] = vacuum;
            vacuum = echoed[ctrled];
            vacuum = result.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = echoed[ctrled];
            ctrled = result.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.Ej3B3d;
            ctrled = vacuum.bind(sequen)(ctrled);
            backup['accessibilityLabel'] = ctrled;
            backup['onPress'] = output;
            output = 29;
            output = echoed[output];
            output = result.bind(tangon)(output);
            result = output.ShareIcon;
            output = {};
            echoed = echoed[source];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.colors;
            echoed = echoed.INTERACTIVE_NORMAL;
            output['color'] = echoed;
            output = sizing.bind(tangon)(result, output);
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();