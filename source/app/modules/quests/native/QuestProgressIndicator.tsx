// app/modules/quests/native/QuestProgressIndicator.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    option = tangon.useMemo;
    var _closure1_slot3 = option;
    option = tangon.useEffect;
    var _closure1_slot4 = option;
    tangon = tangon.useRef;
    var _closure1_slot5 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 3;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot8 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = ['#666777', '#535564'];
    var _closure1_slot10 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = golfie.bind(entity)(tangon);
    golfie = option.createAnimatedComponent;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Circle;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        tangon = argFoo;
        entity = {};
        michal = {};
        zuuluu = 'relative';
        michal['position'] = zuuluu;
        entity['wrapper'] = michal;
        michal = {'position': 'relative', 'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'zIndex': 1};
        entity['container'] = michal;
        michal = {'shadowOffset': null, 'shadowRadius': 20, 'shadowOpacity': 0, 'elevation': 4, 'shadowColor': '#30C77399'};
        zuuluu = {'width': 0, 'height': 0};
        michal['shadowOffset'] = zuuluu;
        entity['completionGlow'] = michal;
        michal = {};
        report = {};
        zuuluu = '-90deg';
        report['rotate'] = zuuluu;
        zuuluu = new Array(1);
        zuuluu[0] = report;
        michal['transform'] = zuuluu;
        entity['canvas'] = michal;
        michal = {};
        golfie = 'absolute';
        michal['position'] = golfie;
        zuuluu = 0.78;
        report = zuuluu * tangon;
        michal['height'] = report;
        zuuluu = zuuluu * tangon;
        michal['width'] = zuuluu;
        report = _closure1_slot1;
        oscard = _closure1_slot2;
        zuuluu = 7;
        option = oscard[zuuluu];
        tangon = undefined;
        option = report.bind(tangon)(option);
        option = option.radii;
        option = option.round;
        michal['borderRadius'] = option;
        option = 'hidden';
        michal['overflow'] = option;
        entity['imageContainer'] = michal;
        michal = {'height': '100%', 'width': '100%'};
        entity['image'] = michal;
        michal = {};
        option = oscard[zuuluu];
        option = report.bind(tangon)(option);
        option = option.unsafe_rawColors;
        option = option.GREEN_300;
        michal['color'] = option;
        entity['progressPath'] = michal;
        michal = {};
        michal['position'] = golfie;
        entity['confetti'] = michal;
        michal = {'backgroundColor': null, 'position': 'absolute', 'top': 0, 'left': 0, 'right': 0, 'bottom': 0, 'zIndex': 2};
        zuuluu = oscard[zuuluu];
        zuuluu = report.bind(tangon)(zuuluu);
        zuuluu = zuuluu.colors;
        zuuluu = zuuluu.CARD_PRIMARY_BG;
        michal['backgroundColor'] = zuuluu;
        entity['opacityMask'] = michal;
        return entity;
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = {};
    golfie = 'function QuestProgressIndicatorTsx1(){const{styles,glowOpacity}=this.__closure;return{...styles.completionGlow,shadowOpacity:glowOpacity.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot13 = tangon;
    tangon = {};
    golfie = 'function QuestProgressIndicatorTsx2(){const{circumference,animatedProgress}=this.__closure;return{strokeDashoffset:circumference-circumference*animatedProgress.get()};}';
    tangon['code'] = golfie;
    var _closure1_slot14 = tangon;
    tangon = {};
    golfie = 'function QuestProgressIndicatorTsx3(){const{underlayOpacity,styles}=this.__closure;return{opacity:underlayOpacity.get(),...styles.opacityMask};}';
    tangon['code'] = golfie;
    var _closure1_slot15 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestProgressIndicator.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: QuestProgressIndicator
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            backup = michal.quest;
            report = michal.size;
            result = michal.progress;
            var _closure2_slot0 = result;
            output = michal.loading;
            var _closure2_slot1 = output;
            offset = michal.hasConfetti;
            tangon = undefined;
            if(!(offset === tangon)) { _fun00002_ip = 50; continue _fun00001 }
 48:
            offset = false;
 50:
            var _closure2_slot2 = tangon;
            var _closure2_slot3 = tangon;
            var _closure2_slot4 = tangon;
            var _closure2_slot5 = tangon;
            var _closure2_slot6 = tangon;
            var _closure2_slot7 = tangon;
            var _closure2_slot8 = tangon;
            var _closure2_slot9 = tangon;
            var _closure2_slot10 = tangon;
            var _closure2_slot11 = tangon;
            golfie = _closure1_slot0;
            zuuluu = _closure1_slot2;
            michal = 8;
            michal = zuuluu[michal];
            verify = golfie.bind(tangon)(michal);
            option = verify.useStateFromStores;
            michal = _closure1_slot7;
            oscard = new Array(1);
            oscard[0] = michal;
            michal = function() {
                entity = _closure1_slot7;
                entity = entity.useReducedMotion;
                return entity;
            };
            oscard = option.bind(verify)(oscard, michal);
            _closure2_slot2 = oscard;
            michal = {'x-sm': 3, 'sm': 3, 'lg': 6};
            sequen = michal[report];
            michal = {'x-sm': 40, 'sm': 64, 'lg': 128};
            kiloes = michal[report];
            _closure2_slot3 = kiloes;
            quebec = 1;
            michal = {'x-sm': 1.6, 'sm': 1, 'lg': 1.6};
            michal = michal[report];
            _closure2_slot4 = michal;
            cntext = 2;
            option = kiloes / cntext;
            report = sequen / cntext;
            record = option - report;
            report = global;
            report = report.Math;
            report = report.PI;
            report = cntext * report;
            vacuum = report * record;
            _closure2_slot5 = vacuum;
            report = _closure1_slot12;
            foxtra = report.bind(tangon)(kiloes);
            _closure2_slot6 = foxtra;
            report = 4;
            option = zuuluu[report];
            verify = golfie.bind(tangon)(option);
            option = verify.useSharedValue;
            papara = option.bind(verify)(result);
            _closure2_slot7 = papara;
            zuuluu = zuuluu[report];
            option = golfie.bind(tangon)(zuuluu);
            golfie = option.useSharedValue;
            whisks = 0;
            zuuluu = 0;
            if(!output) { _fun00002_ip = 323; continue _fun00001 }
 313:
            zuuluu = 0.7;
 323:
            echoed = golfie.bind(option)(zuuluu);
            _closure2_slot8 = echoed;
            golfie = backup.userStatus;
            verify = null;
            option = verify == golfie;
            zuuluu = undefined;
            if(option) { _fun00002_ip = 355; continue _fun00001 }
 349:
            zuuluu = golfie.completedAt;
 355:
            sizing = verify != zuuluu;
            _closure2_slot9 = sizing;
            golfie = _closure1_slot0;
            zuuluu = _closure1_slot2;
            zuuluu = zuuluu[report];
            option = golfie.bind(tangon)(zuuluu);
            golfie = option.useSharedValue;
            zuuluu = 0;
            if(!sizing) { _fun00002_ip = 393; continue _fun00001 }
 390:
            zuuluu = quebec;
 393:
            option = golfie.bind(option)(zuuluu);
            _closure2_slot10 = option;
            update = _closure1_slot0;
            config = _closure1_slot2;
            zuuluu = config[report];
            yankee = update.bind(tangon)(zuuluu);
            golfie = yankee.useAnimatedStyle;
            zuuluu = function() { // Original name: I
                entity = {};
                zuuluu = _closure2_slot6;
                tangon = zuuluu.completionGlow;
                report = entity;
                zuuluu = copyDataProperties(report, tangon);
                zuuluu = _closure2_slot10;
                michal = zuuluu.get;
                zuuluu = michal.bind(zuuluu)();
                michal = 'shadowOpacity';
                entity[michal] = zuuluu;
                return entity;
            };
            source = {};
            source['styles'] = foxtra;
            source['glowOpacity'] = option;
            zuuluu['__closure'] = source;
            source = 6810183053526.0;
            zuuluu['__workletHash'] = source;
            source = _closure1_slot13;
            zuuluu['__initData'] = source;
            yankee = golfie.bind(yankee)(zuuluu);
            zuuluu = config[report];
            source = update.bind(tangon)(zuuluu);
            golfie = source.useAnimatedProps;
            zuuluu = function() { // Original name: O
                entity = {};
                zuuluu = _closure2_slot5;
                tangon = _closure2_slot7;
                michal = tangon.get;
                michal = michal.bind(tangon)();
                michal = zuuluu * michal;
                michal = zuuluu - michal;
                entity['strokeDashoffset'] = michal;
                return entity;
            };
            ctrled = {};
            ctrled['circumference'] = vacuum;
            ctrled['animatedProgress'] = papara;
            zuuluu['__closure'] = ctrled;
            ctrled = 17281152506254.0;
            zuuluu['__workletHash'] = ctrled;
            ctrled = _closure1_slot14;
            zuuluu['__initData'] = ctrled;
            ctrled = golfie.bind(source)(zuuluu);
            zuuluu = config[report];
            source = update.bind(tangon)(zuuluu);
            golfie = source.useAnimatedStyle;
            zuuluu = function() { // Original name: A
                entity = {};
                tangon = _closure2_slot8;
                zuuluu = tangon.get;
                zuuluu = zuuluu.bind(tangon)();
                entity['opacity'] = zuuluu;
                michal = _closure2_slot6;
                report = michal.opacityMask;
                oscard = entity;
                michal = copyDataProperties(oscard, report);
                return entity;
            };
            target = {};
            target['underlayOpacity'] = echoed;
            target['styles'] = foxtra;
            zuuluu['__closure'] = target;
            target = 4427598698568.0;
            zuuluu['__workletHash'] = target;
            target = _closure1_slot15;
            zuuluu['__initData'] = target;
            golfie = golfie.bind(source)(zuuluu);
            zuuluu = _closure1_slot4;
            source = new Array(3);
            source[0] = papara;
            source[1] = result;
            source[2] = oscard;
            result = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot7;
                    michal = zuuluu.set;
                    report = _closure1_slot0;
                    tangon = _closure1_slot2;
                    entity = 9;
                    tangon = tangon[entity];
                    entity = undefined;
                    oscard = report.bind(entity)(tangon);
                    report = oscard.withTiming;
                    tangon = _closure2_slot0;
                    entity = {};
                    option = _closure2_slot2;
                    golfie = 500;
                    if(!option) { _fun00004_ip = 63; continue _fun00003 }
 61:
                    golfie = 0;
 63:
                    entity['duration'] = golfie;
                    entity = report.bind(oscard)(tangon, entity);
                    entity = michal.bind(zuuluu)(entity);
                    entity = function() {
                        zuuluu = _closure1_slot0;
                        michal = _closure1_slot2;
                        entity = 4;
                        michal = michal[entity];
                        entity = undefined;
                        tangon = zuuluu.bind(entity)(michal);
                        zuuluu = tangon.cancelAnimation;
                        michal = _closure2_slot7;
                        michal = zuuluu.bind(tangon)(michal);
                        return entity;
                    };
                    return entity;
                }
            };
            result = zuuluu.bind(tangon)(result, source);
            result = new Array(2);
            result[0] = echoed;
            result[1] = output;
            output = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = _closure2_slot8;
                    michal = zuuluu.set;
                    oscard = _closure1_slot0;
                    report = _closure1_slot2;
                    tangon = 9;
                    report = report[tangon];
                    tangon = undefined;
                    oscard = oscard.bind(tangon)(report);
                    report = oscard.withTiming;
                    entity = _closure2_slot1;
                    tangon = 0;
                    if(!entity) { _fun00006_ip = 61; continue _fun00005 }
 51:
                    tangon = 0.7;
 61:
                    entity = {};
                    golfie = 500;
                    entity['duration'] = golfie;
                    entity = report.bind(oscard)(tangon, entity);
                    entity = michal.bind(zuuluu)(entity);
                    entity = function() {
                        zuuluu = _closure1_slot0;
                        michal = _closure1_slot2;
                        entity = 4;
                        michal = michal[entity];
                        entity = undefined;
                        tangon = zuuluu.bind(entity)(michal);
                        zuuluu = tangon.cancelAnimation;
                        michal = _closure2_slot8;
                        michal = zuuluu.bind(tangon)(michal);
                        return entity;
                    };
                    return entity;
                }
            };
            output = zuuluu.bind(tangon)(output, result);
            output = _closure1_slot5;
            result = output.bind(tangon)(verify);
            _closure2_slot11 = result;
            echoed = _closure1_slot3;
            source = foxtra.confetti;
            output = new Array(3);
            output[0] = source;
            output[1] = michal;
            output[2] = kiloes;
            michal = function() {
                entity = {};
                michal = _closure2_slot6;
                report = michal.confetti;
                oscard = entity;
                michal = copyDataProperties(oscard, report);
                tangon = _closure2_slot3;
                michal = 'width';
                entity[michal] = tangon;
                tangon = _closure2_slot3;
                michal = 'height';
                entity[michal] = tangon;
                michal = {};
                zuuluu = _closure2_slot4;
                michal['scale'] = zuuluu;
                zuuluu = new Array(1);
                zuuluu[0] = michal;
                michal = 'transform';
                entity[michal] = zuuluu;
                return entity;
            };
            output = echoed.bind(tangon)(michal, output);
            michal = new Array(3);
            michal[0] = sizing;
            michal[1] = option;
            michal[2] = oscard;
            entity = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    michal = _closure2_slot2;
                    if(michal) { _fun00008_ip = 119; continue _fun00007 }
 10:
                    michal = _closure2_slot9;
                    if(!michal) { _fun00008_ip = 119; continue _fun00007 }
 17:
                    michal = _closure2_slot9;
                    if(!michal) { _fun00008_ip = 160; continue _fun00007 }
 27:
                    tangon = _closure2_slot10;
                    zuuluu = tangon.set;
                    oscard = _closure1_slot0;
                    report = _closure1_slot2;
                    michal = 9;
                    report = report[michal];
                    michal = undefined;
                    golfie = oscard.bind(michal)(report);
                    oscard = golfie.withTiming;
                    report = {};
                    michal = 500;
                    report['duration'] = michal;
                    michal = 1;
                    michal = oscard.bind(golfie)(michal, report);
                    michal = zuuluu.bind(tangon)(michal);
                    michal = _closure2_slot11;
                    zuuluu = michal.current;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00008_ip = 160; continue _fun00007 }
 107:
                    michal = zuuluu.play;
                    michal = michal.bind(zuuluu)();
                    _fun00008_ip = 160; continue _fun00007;
 119:
                    tangon = _closure2_slot10;
                    zuuluu = tangon.set;
                    michal = 0;
                    michal = zuuluu.bind(tangon)(michal);
                    entity = _closure2_slot11;
                    michal = entity.current;
                    entity = null;
                    if(!(entity != michal)) { _fun00008_ip = 160; continue _fun00007 }
 150:
                    entity = michal.reset;
                    entity = entity.bind(michal)();
 160:
                    entity = undefined;
                    return entity;
                }
            };
            entity = zuuluu.bind(tangon)(entity, michal);
            zuuluu = _closure1_slot9;
            oscard = _closure1_slot1;
            entity = config[report];
            entity = oscard.bind(tangon)(entity);
            michal = entity.View;
            entity = {};
            sizing = foxtra.wrapper;
            option = new Array(2);
            option[0] = sizing;
            option[1] = yankee;
            entity['style'] = option;
            source = _closure1_slot8;
            report = config[report];
            report = oscard.bind(tangon)(report);
            oscard = report.View;
            report = {};
            report['style'] = golfie;
            oscard = source.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            golfie = _closure1_slot6;
            oscard = {};
            option = foxtra.container;
            oscard['style'] = option;
            echoed = 5;
            option = config[echoed];
            option = update.bind(tangon)(option);
            yankee = option.Svg;
            option = {};
            option['height'] = kiloes;
            option['width'] = kiloes;
            sizing = foxtra.canvas;
            option['style'] = sizing;
            sizing = config[echoed];
            sizing = update.bind(tangon)(sizing);
            papara = sizing.Defs;
            sizing = {};
            target = config[echoed];
            target = update.bind(tangon)(target);
            status = target.LinearGradient;
            target = {'id': 'underlayGradient', 'x1': '0', 'y1': '0.5', 'x2': '1', 'y2': '0.5'};
            equals = '0';
            variable36 = '1';
            sierra = config[echoed];
            sierra = update.bind(tangon)(sierra);
            limora = sierra.Stop;
            sierra = {};
            sierra['offset'] = equals;
            equals = _closure1_slot10;
            whisks = equals[whisks];
            sierra['stopColor'] = whisks;
            limora = source.bind(tangon)(limora, sierra);
            sierra = new Array(2);
            sierra[0] = limora;
            limora = config[echoed];
            limora = update.bind(tangon)(limora);
            whisks = limora.Stop;
            limora = {};
            limora['offset'] = variable36;
            equals = equals[quebec];
            limora['stopColor'] = equals;
            limora = source.bind(tangon)(whisks, limora);
            sierra[1] = limora;
            target['children'] = sierra;
            target = zuuluu.bind(tangon)(status, target);
            sizing['children'] = target;
            papara = source.bind(tangon)(papara, sizing);
            sizing = new Array(3);
            sizing[0] = papara;
            echoed = config[echoed];
            echoed = update.bind(tangon)(echoed);
            update = echoed.Circle;
            echoed = {};
            config = kiloes / cntext;
            echoed['cx'] = config;
            config = kiloes / cntext;
            echoed['cy'] = config;
            echoed['r'] = record;
            config = 'none';
            echoed['fill'] = config;
            papara = 'url(#underlayGradient)';
            echoed['stroke'] = papara;
            echoed['strokeWidth'] = sequen;
            echoed = source.bind(tangon)(update, echoed);
            sizing[1] = echoed;
            update = _closure1_slot11;
            echoed = {};
            papara = kiloes / cntext;
            echoed['cx'] = papara;
            cntext = kiloes / cntext;
            echoed['cy'] = cntext;
            echoed['r'] = record;
            echoed['fill'] = config;
            config = foxtra.progressPath;
            config = config.color;
            echoed['stroke'] = config;
            echoed['strokeWidth'] = sequen;
            echoed['strokeDasharray'] = vacuum;
            vacuum = 'round';
            echoed['strokeLinecap'] = vacuum;
            echoed['animatedProps'] = ctrled;
            echoed = source.bind(tangon)(update, echoed);
            sizing[2] = echoed;
            option['children'] = sizing;
            yankee = zuuluu.bind(tangon)(yankee, option);
            option = new Array(3);
            option[0] = yankee;
            verify = null;
            if(!offset) { _fun00002_ip = 1335; continue _fun00001 }
 1263:
            sizing = _closure1_slot8;
            yankee = _closure1_slot1;
            echoed = _closure1_slot2;
            offset = 10;
            offset = echoed[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            offset['ref'] = result;
            offset['style'] = output;
            result = _closure1_slot0;
            output = 11;
            output = echoed[output];
            output = result.bind(tangon)(output);
            offset['source'] = output;
            output = false;
            offset['autoPlay'] = output;
            offset['loop'] = output;
            verify = sizing.bind(tangon)(yankee, offset);
 1335:
            option[1] = verify;
            yankee = _closure1_slot8;
            offset = _closure1_slot6;
            verify = {};
            foxtra = foxtra.imageContainer;
            verify['style'] = foxtra;
            foxtra = _closure1_slot1;
            sizing = _closure1_slot2;
            romeon = 12;
            romeon = sizing[romeon];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            romeon['quest'] = backup;
            backup = 0.78;
            sizing = backup * kiloes;
            romeon['height'] = sizing;
            backup = backup * kiloes;
            romeon['width'] = backup;
            romeon = yankee.bind(tangon)(foxtra, romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();