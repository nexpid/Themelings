// app/modules/quests/native/QuestCard.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    output = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = output;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = golf[entity];
    entity = undefined;
    tango = output.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    report = golf[tango];
    tango = argCorge;
    options = tango.bind(entity)(report);
    var _closure1_slot4 = options;
    tango = 2;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    report = tango.Image;
    var _closure1_slot5 = report;
    kilo = tango.StyleSheet;
    tango = tango.View;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = golf[tango];
    tango = output.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 4;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.QuestsExperimentLocations;
    var _closure1_slot8 = tango;
    tango = 5;
    report = golf[tango];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot9 = report;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot10 = tango;
    sizing = 6;
    tango = golf[sizing];
    tango = output.bind(entity)(tango);
    tango = tango.colors;
    yankee = tango.BG_SURFACE_RAISED;
    tango = golf[sizing];
    tango = output.bind(entity)(tango);
    tango = tango.colors;
    result = tango.BORDER_SUBTLE;
    report = 7;
    tango = golf[report];
    offset = oscar.bind(entity)(tango);
    verify = offset.experimental_createToken;
    tango = function(argFoo) {
        entity = argFoo;
        golf = entity.theme;
        options = _closure1_slot1;
        report = _closure1_slot2;
        mike = 6;
        tango = report[mike];
        zulu = undefined;
        tango = options.bind(zulu)(tango);
        oscar = tango.internal;
        tango = oscar.resolveSemanticColor;
        mike = report[mike];
        mike = options.bind(zulu)(mike);
        mike = mike.colors;
        mike = mike.BG_SURFACE_RAISED;
        tango = tango.bind(oscar)(golf, mike);
        mike = _closure1_slot0;
        entity = 8;
        entity = report[entity];
        zulu = mike.bind(zulu)(entity);
        mike = zulu.hexOpacityToRgba;
        entity = 0;
        entity = mike.bind(zulu)(tango, entity);
        return entity;
    };
    foxtrot = verify.bind(offset)(tango);
    tango = golf[report];
    offset = oscar.bind(entity)(tango);
    verify = offset.experimental_createToken;
    tango = function(argFoo) {
        entity = argFoo;
        golf = entity.theme;
        options = _closure1_slot1;
        report = _closure1_slot2;
        mike = 6;
        tango = report[mike];
        zulu = undefined;
        tango = options.bind(zulu)(tango);
        oscar = tango.internal;
        tango = oscar.resolveSemanticColor;
        mike = report[mike];
        mike = options.bind(zulu)(mike);
        mike = mike.colors;
        mike = mike.BG_SURFACE_RAISED;
        tango = tango.bind(oscar)(golf, mike);
        mike = _closure1_slot0;
        entity = 8;
        entity = report[entity];
        zulu = mike.bind(zulu)(entity);
        mike = zulu.hexOpacityToRgba;
        entity = 0.8;
        entity = mike.bind(zulu)(tango, entity);
        return entity;
    };
    romeo = verify.bind(offset)(tango);
    tango = golf[sizing];
    tango = output.bind(entity)(tango);
    tango = tango.spacing;
    tango = tango.PX_16;
    verify = golf[report];
    backup = oscar.bind(entity)(verify);
    offset = backup.createStyles;
    verify = {};
    echo = {'position': 'relative', 'padding': 0};
    update = golf[sizing];
    update = output.bind(entity)(update);
    update = update.radii;
    update = update.sm;
    echo['borderRadius'] = update;
    echo['backgroundColor'] = yankee;
    update = golf[sizing];
    update = output.bind(entity)(update);
    update = update.spacing;
    update = update.PX_16;
    echo['marginBottom'] = update;
    update = 'hidden';
    echo['overflow'] = update;
    verify['container'] = echo;
    update = {'display': 'flex', 'flexDirection': 'column', 'justifyContent': 'flex-end', 'padding': null, 'height': 165};
    echo = 'flex';
    source = golf[sizing];
    source = output.bind(entity)(source);
    source = source.spacing;
    source = source.PX_12;
    update['padding'] = source;
    verify['heroContainer'] = update;
    update = {};
    source = 'cover';
    update['resizeMode'] = source;
    vacuum = kilo.absoluteFillObject;
    sequence = update;
    source = copyDataProperties(sequence, vacuum);
    verify['heroImg'] = update;
    kilo = kilo.absoluteFillObject;
    verify['heroLinearGradientOverlay'] = kilo;
    kilo = {'height': 64, 'width': 64};
    update = golf[sizing];
    update = output.bind(entity)(update);
    update = update.spacing;
    update = update.PX_12;
    kilo['marginRight'] = update;
    verify['rewardImgContainer'] = kilo;
    kilo = {'height': '100%', 'width': '100%'};
    update = golf[sizing];
    update = output.bind(entity)(update);
    update = update.radii;
    update = update.sm;
    kilo['borderRadius'] = update;
    verify['rewardImg'] = kilo;
    kilo = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'space-between', 'alignItems': 'flex-end'};
    verify['heroFooterContainer'] = kilo;
    kilo = {'flex': 1, 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'flex-start'};
    verify['heroFooterLeftContainer'] = kilo;
    kilo = {};
    kilo['display'] = echo;
    echo = golf[sizing];
    echo = output.bind(entity)(echo);
    echo = echo.spacing;
    echo = echo.PX_12;
    kilo['padding'] = echo;
    verify['detailsWrapper'] = kilo;
    kilo = {'display': 'flex', 'flexDirection': 'row'};
    verify['detailsContainer'] = kilo;
    kilo = {};
    echo = golf[sizing];
    echo = output.bind(entity)(echo);
    echo = echo.spacing;
    echo = echo.PX_4;
    kilo['marginBottom'] = echo;
    verify['questName'] = kilo;
    kilo = {'flex': 1, 'justifyContent': 'center'};
    verify['detailsTextContainer'] = kilo;
    kilo = {'borderTopWidth': 1, 'borderTopColor': null, 'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    kilo['borderTopColor'] = result;
    result = golf[sizing];
    result = output.bind(entity)(result);
    result = result.spacing;
    result = result.PX_12;
    kilo['padding'] = result;
    verify['buttonContainers'] = kilo;
    kilo = {};
    sizing = golf[sizing];
    sizing = output.bind(entity)(sizing);
    sizing = sizing.spacing;
    sizing = sizing.PX_8;
    kilo['marginLeft'] = sizing;
    verify['overflowButton'] = kilo;
    verify = offset.bind(backup)(verify);
    var _closure1_slot11 = verify;
    report = golf[report];
    offset = oscar.bind(entity)(report);
    verify = offset.createStyleProperties;
    report = {};
    report['gradientStart'] = foxtrot;
    report['gradientMid'] = romeo;
    report['gradientEnd'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot12 = report;
    report = 9;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.QuestContent;
    report = report.QUEST_HOME_MOBILE;
    var _closure1_slot13 = report;
    report = options.memo;
    mike = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            entity = mike.onLayout;
            var _closure2_slot1 = entity;
            entity = mike.quest;
            var _closure2_slot2 = entity;
            mike = mike.questContentPosition;
            var _closure2_slot3 = mike;
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            tango = 10;
            tango = mike[tango];
            report = undefined;
            options = zulu.bind(report)(tango);
            golf = options.getQuestLogger;
            tango = {};
            tango['quest'] = entity;
            verify = _closure1_slot8;
            verify = verify.QUEST_HOME_MOBILE;
            tango['location'] = verify;
            tango = golf.bind(options)(tango);
            var _closure2_slot4 = tango;
            tango = 11;
            tango = mike[tango];
            golf = zulu.bind(report)(tango);
            tango = golf.useTrackQuestContentClickedWithImpression;
            tango = tango.bind(golf)();
            var _closure2_slot5 = tango;
            offset = 12;
            mike = mike[offset];
            zulu = zulu.bind(report)(mike);
            mike = zulu.useQuestTaskDetails;
            update = mike.bind(zulu)(entity);
            zulu = entity.userStatus;
            target = null;
            tango = target == zulu;
            mike = undefined;
            if(tango) { _fun00002_ip = 168; continue _fun00001 }
 162:
            mike = zulu.enrolledAt;
 168:
            verify = target != mike;
            mike = _closure1_slot11;
            backup = mike.bind(report)();
            golf = _closure1_slot0;
            yankee = _closure1_slot2;
            mike = 13;
            mike = yankee[mike];
            tango = golf.bind(report)(mike);
            zulu = tango.useQuestsInstructionsToWinReward;
            mike = {};
            mike['quest'] = entity;
            mike['taskDetails'] = update;
            romeo = _closure1_slot8;
            options = romeo.QUEST_HOME_MOBILE;
            mike['location'] = options;
            options = 9;
            options = yankee[options];
            options = golf.bind(report)(options);
            options = options.QuestContent;
            options = options.QUEST_HOME_MOBILE;
            mike['questContent'] = options;
            options = zulu.bind(tango)(mike);
            kilo = _closure1_slot4;
            tango = kilo.useMemo;
            zulu = new Array(1);
            zulu[0] = entity;
            mike = function() {
                oscar = _closure1_slot0;
                golf = _closure1_slot2;
                entity = 14;
                mike = golf[entity];
                report = undefined;
                tango = oscar.bind(report)(mike);
                zulu = tango.getQuestAsset;
                mike = _closure2_slot2;
                entity = golf[entity];
                entity = oscar.bind(report)(entity);
                entity = entity.QuestAssetType;
                entity = entity.HERO;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            source = tango.bind(kilo)(mike, zulu);
            record = 15;
            mike = yankee[record];
            zulu = golf.bind(report)(mike);
            mike = zulu.useQuestGameLogotypeAssetUrl;
            vacuum = mike.bind(zulu)(entity);
            mike = _closure1_slot12;
            mike = mike.bind(report)();
            papa = mike.gradientStart;
            sequence = mike.gradientMid;
            control = mike.gradientEnd;
            tango = kilo.useMemo;
            mike = entity.config;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 16;
                mike = mike[entity];
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                zulu = entity.SharedQuestFields;
                mike = zulu.build;
                entity = _closure2_slot2;
                entity = entity.config;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = tango.bind(kilo)(mike, zulu);
            zulu = mike.defaultReward;
            zulu = zulu.messages;
            sizing = zulu.nameWithArticle;
            zulu = mike.defaultReward;
            zulu = zulu.messages;
            zulu = zulu.name;
            tango = 17;
            tango = yankee[tango];
            yankee = golf.bind(report)(tango);
            golf = yankee.useIsQuestBarCopySimplificationEnabled;
            tango = {};
            romeo = romeo.QUEST_HOME_MOBILE;
            tango['location'] = romeo;
            tango = golf.bind(yankee)(tango);
            if(!tango) { _fun00002_ip = 452; continue _fun00001 }
 449:
            sizing = zulu;
 452:
            var _closure2_slot6 = sizing;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            golf = 18;
            golf = zulu[golf];
            kilo = tango.bind(report)(golf);
            romeo = kilo.useStateFromStoresObject;
            golf = _closure1_slot7;
            yankee = new Array(1);
            yankee[0] = golf;
            golf = function() {
                entity = {};
                tango = _closure1_slot7;
                report = tango.getRewards;
                mike = _closure2_slot2;
                zulu = mike.id;
                zulu = report.bind(tango)(zulu);
                entity['reward'] = zulu;
                report = tango.isFetchingRewardCode;
                zulu = mike.id;
                zulu = report.bind(tango)(zulu);
                entity['isFetchingRewardCode'] = zulu;
                report = tango.isClaimingReward;
                zulu = mike.id;
                zulu = report.bind(tango)(zulu);
                entity['isClaimingReward'] = zulu;
                zulu = tango.isEnrolling;
                mike = mike.id;
                mike = zulu.bind(tango)(mike);
                entity['isEnrolling'] = mike;
                return entity;
            };
            golf = romeo.bind(kilo)(yankee, golf);
            result = golf.isFetchingRewardCode;
            yankee = golf.isClaimingReward;
            golf = golf.isEnrolling;
            zulu = zulu[offset];
            romeo = tango.bind(report)(zulu);
            offset = romeo.useQuestFormattedDate;
            zulu = entity.userStatus;
            kilo = target == zulu;
            tango = undefined;
            if(kilo) { _fun00002_ip = 561; continue _fun00001 }
 555:
            tango = zulu.completedAt;
 561:
            zulu = {'year': 'numeric', 'month': 'long', 'day': 'numeric'};
            romeo = offset.bind(romeo)(tango, zulu);
            tango = entity.userStatus;
            offset = target == tango;
            zulu = undefined;
            if(offset) { _fun00002_ip = 602; continue _fun00001 }
 596:
            zulu = tango.enrolledAt;
 602:
            output = target != zulu;
            tango = entity.userStatus;
            offset = target == tango;
            zulu = undefined;
            if(offset) { _fun00002_ip = 627; continue _fun00001 }
 621:
            zulu = tango.completedAt;
 627:
            tango = target != zulu;
            offset = entity.userStatus;
            kilo = target == offset;
            zulu = undefined;
            if(kilo) { _fun00002_ip = 652; continue _fun00001 }
 646:
            zulu = offset.claimedAt;
 652:
            zulu = target != zulu;
            echo = _closure1_slot0;
            config = _closure1_slot2;
            offset = 19;
            kilo = config[offset];
            context = echo.bind(report)(kilo);
            kilo = context.isQuestExpired;
            kilo = kilo.bind(context)(entity);
            context = mike.defaultReward;
            context = context.skuId;
            offset = config[offset];
            sierra = echo.bind(report)(offset);
            status = sierra.hasCollectiblesQuestReward;
            offset = entity.config;
            status = status.bind(sierra)(offset);
            offset = 20;
            offset = config[offset];
            config = echo.bind(report)(offset);
            echo = config.useFetchCollectiblesProduct;
            offset = null;
            if(!status) { _fun00002_ip = 755; continue _fun00001 }
 747:
            offset = null;
            if(!tango) { _fun00002_ip = 755; continue _fun00001 }
 752:
            offset = context;
 755:
            offset = echo.bind(config)(offset);
            echo = offset.product;
            var _closure2_slot7 = echo;
            offset = offset.isFetching;
            config = _closure1_slot0;
            echo = _closure1_slot2;
            echo = echo[record];
            context = config.bind(report)(echo);
            record = context.useShouldAllowMobileVideoTask;
            config = entity.config;
            echo = {};
            target = _closure1_slot8;
            target = target.QUESTS_CARD;
            echo['location'] = target;
            echo = record.bind(context)(config, echo);
            var _closure2_slot8 = echo;
            echo = function(argFoo) { // Original name: trackClick
                zulu = _closure2_slot5;
                mike = {};
                entity = _closure2_slot2;
                entity = entity.id;
                mike['questId'] = entity;
                report = _closure1_slot0;
                tango = _closure1_slot2;
                entity = 9;
                tango = tango[entity];
                entity = undefined;
                tango = report.bind(entity)(tango);
                tango = tango.QuestContent;
                tango = tango.QUEST_HOME_MOBILE;
                mike['questContent'] = tango;
                tango = argFoo;
                mike['questContentCTA'] = tango;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            var _closure2_slot9 = echo;
            echo = function() { // Original name: showQuestBottomSheet
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    report = _closure2_slot8;
                    tango = _closure1_slot1;
                    entity = _closure1_slot2;
                    if(report) { _fun00004_ip = 106; continue _fun00003 }
 21:
                    report = 24;
                    report = entity[report];
                    offset = undefined;
                    options = tango.bind(offset)(report);
                    golf = options.openLazy;
                    oscar = _closure1_slot0;
                    report = 23;
                    report = entity[report];
                    verify = oscar.bind(offset)(report);
                    report = 25;
                    oscar = entity[report];
                    report = entity.paths;
                    oscar = verify.bind(offset)(oscar, report);
                    report = {};
                    zulu = _closure2_slot2;
                    zulu = zulu.id;
                    report['questId'] = zulu;
                    zulu = 'QuestBottomSheet';
                    zulu = golf.bind(options)(oscar, zulu, report);
                    _fun00004_ip = 173; continue _fun00003;
 106:
                    zulu = 21;
                    zulu = entity[zulu];
                    report = undefined;
                    tango = tango.bind(report)(zulu);
                    zulu = tango.pushLazy;
                    oscar = _closure1_slot0;
                    mike = 23;
                    mike = entity[mike];
                    oscar = oscar.bind(report)(mike);
                    mike = 22;
                    mike = entity[mike];
                    entity = entity.paths;
                    mike = oscar.bind(report)(mike, entity);
                    entity = 'VideoQuestModalModal';
                    entity = zulu.bind(tango)(mike, report, entity);
 173:
                    entity = undefined;
                    return entity;
                }
            };
            var _closure2_slot10 = echo;
            if(zulu) { _fun00002_ip = 1155; continue _fun00001 }
 858:
            if(tango) { _fun00002_ip = 1061; continue _fun00001 }
 864:
            if(output) { _fun00002_ip = 972; continue _fun00001 }
 867:
            output = {};
            context = _closure1_slot0;
            target = _closure1_slot2;
            echo = 26;
            config = target[echo];
            config = context.bind(report)(config);
            record = config.intl;
            config = record.string;
            echo = target[echo];
            echo = context.bind(report)(echo);
            echo = echo.t;
            echo = echo.kUQLMD;
            echo = config.bind(record)(echo);
            output['text'] = echo;
            echo = false;
            output['disabled'] = echo;
            output['loading'] = golf;
            echo = _closure1_slot3;
            golf = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(mike) { _fun00006_ip = 164; continue _fun00005 }
 10:
                        report = _closure2_slot4;
                        zulu = report.log;
                        mike = 'Enrolling in quest';
                        mike = zulu.bind(report)(mike);
                        verify = _closure1_slot0;
                        offset = _closure1_slot2;
                        mike = 28;
                        mike = offset[mike];
                        zulu = undefined;
                        golf = verify.bind(zulu)(mike);
                        oscar = golf.enrollInQuest;
                        mike = _closure2_slot2;
                        report = mike.id;
                        mike = {};
                        options = 9;
                        options = offset[options];
                        options = verify.bind(zulu)(options);
                        options = options.QuestContent;
                        options = options.QUEST_HOME_MOBILE;
                        mike['questContent'] = options;
                        options = 11;
                        options = offset[options];
                        options = verify.bind(zulu)(options);
                        options = options.QuestContentCTA;
                        options = options.ACCEPT_QUEST;
                        mike['questContentCTA'] = options;
                        mike = oscar.bind(golf)(report, mike);
                        SaveGenerator(address=144);
 142:
                        return mike;
 144:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00006_ip = 161; continue _fun00005 }
 150:
                        tango = _closure2_slot10;
                        tango = tango.bind(zulu)();
                        return zulu;
 161:
                        return mike;
 164:
                        return entity;
                    }
                };
                return entity;
            };
            golf = echo.bind(report)(golf);
            var _closure2_slot0 = golf;
            golf = function() {
                entity = undefined;
                tango = _closure2_slot0;
                zulu = tango.apply;
                entity = arguments;
                mike = entity;
                entity = this;
                entity = zulu.bind(tango)(entity, mike);
                return entity;
            };
            output['onPress'] = golf;
            _fun00002_ip = 1059; continue _fun00001;
 972:
            golf = {'text': null, 'variant': 'secondary', 'disabled': false};
            context = _closure1_slot0;
            target = _closure1_slot2;
            echo = 26;
            config = target[echo];
            config = context.bind(report)(config);
            record = config.intl;
            config = record.string;
            echo = target[echo];
            echo = context.bind(report)(echo);
            echo = echo.t;
            echo = echo.JiosAg;
            echo = config.bind(record)(echo);
            golf['text'] = echo;
            echo = function() { // Original name: onPress
                tango = _closure2_slot4;
                zulu = tango.log;
                entity = 'Navigating to console connection action sheet';
                entity = zulu.bind(tango)(entity);
                tango = _closure2_slot9;
                report = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 11;
                zulu = zulu[entity];
                entity = undefined;
                zulu = report.bind(entity)(zulu);
                zulu = zulu.QuestContentCTA;
                zulu = zulu.VIEW_REQUIREMENTS;
                zulu = tango.bind(entity)(zulu);
                mike = _closure2_slot10;
                mike = mike.bind(entity)();
                return entity;
            };
            golf['onPress'] = echo;
            output = golf;
 1059:
            _fun00002_ip = 1153; continue _fun00001;
 1061:
            golf = {};
            context = _closure1_slot0;
            target = _closure1_slot2;
            echo = 26;
            config = target[echo];
            config = context.bind(report)(config);
            record = config.intl;
            config = record.string;
            echo = target[echo];
            echo = context.bind(report)(echo);
            echo = echo.t;
            echo = echo.cfY4PD;
            echo = config.bind(record)(echo);
            golf['text'] = echo;
            if(yankee) { _fun00002_ip = 1128; continue _fun00001 }
 1125:
            yankee = result;
 1128:
            if(yankee) { _fun00002_ip = 1134; continue _fun00001 }
 1131:
            yankee = offset;
 1134:
            golf['loading'] = yankee;
            yankee = function() { // Original name: onPress
                golf = _closure2_slot9;
                zulu = _closure1_slot0;
                tango = _closure1_slot2;
                entity = 11;
                mike = tango[entity];
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                mike = mike.QuestContentCTA;
                mike = mike.CLAIM_REWARD;
                mike = golf.bind(entity)(mike);
                mike = 27;
                mike = tango[mike];
                tango = zulu.bind(entity)(mike);
                zulu = tango.handleRewardClaimThenView;
                mike = {};
                golf = _closure2_slot7;
                mike['product'] = golf;
                golf = _closure2_slot2;
                mike['quest'] = golf;
                oscar = _closure1_slot13;
                mike['questContent'] = oscar;
                report = _closure2_slot3;
                mike['questContentPosition'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            golf['onPress'] = yankee;
            output = golf;
 1153:
            _fun00002_ip = 1237; continue _fun00001;
 1155:
            golf = {};
            config = _closure1_slot0;
            record = _closure1_slot2;
            yankee = 26;
            result = record[yankee];
            result = config.bind(report)(result);
            echo = result.intl;
            result = echo.string;
            yankee = record[yankee];
            yankee = config.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.vTgCW1;
            yankee = result.bind(echo)(yankee);
            golf['text'] = yankee;
            golf['loading'] = offset;
            offset = function() { // Original name: onPress
                golf = _closure2_slot9;
                zulu = _closure1_slot0;
                tango = _closure1_slot2;
                entity = 11;
                mike = tango[entity];
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                mike = mike.QuestContentCTA;
                mike = mike.SHOW_REWARD;
                mike = golf.bind(entity)(mike);
                mike = 27;
                mike = tango[mike];
                tango = zulu.bind(entity)(mike);
                zulu = tango.viewReward;
                mike = {};
                golf = _closure2_slot7;
                mike['product'] = golf;
                golf = _closure2_slot2;
                mike['quest'] = golf;
                oscar = _closure1_slot13;
                mike['questContent'] = oscar;
                report = _closure2_slot3;
                mike['questContentPosition'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            golf['onPress'] = offset;
            output = golf;
 1237:
            offset = _closure1_slot0;
            golf = _closure1_slot2;
            sierra = 26;
            yankee = golf[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.formatToPlainString;
            golf = golf[sierra];
            golf = offset.bind(report)(golf);
            golf = golf.t;
            offset = golf.EAYZAg;
            golf = {};
            echo = entity.config;
            echo = echo.messages;
            echo = echo.questName;
            golf['questName'] = echo;
            record = yankee.bind(result)(offset, golf);
            if(!kilo) { _fun00002_ip = 1323; continue _fun00001 }
 1320:
            if(zulu) { _fun00002_ip = 1396; continue _fun00001 }
 1323:
            offset = _closure1_slot0;
            golf = _closure1_slot2;
            yankee = golf[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.format;
            golf = golf[sierra];
            golf = offset.bind(report)(golf);
            golf = golf.t;
            offset = golf.0IUT4e;
            golf = {};
            echo = function() { // Original name: rewardWithArticleHook
                tango = _closure1_slot9;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 29;
                entity = zulu[entity];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.Text;
                entity = {'variant': 'text-md/semibold', 'color': 'text-normal'};
                report = _closure2_slot6;
                entity['children'] = report;
                entity = tango.bind(zulu)(mike, entity);
                return entity;
            };
            golf['rewardWithArticleHook'] = echo;
            context = yankee.bind(result)(offset, golf);
            _fun00002_ip = 1473; continue _fun00001;
 1396:
            offset = _closure1_slot0;
            golf = _closure1_slot2;
            yankee = golf[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.formatToPlainString;
            golf = golf[sierra];
            golf = offset.bind(report)(golf);
            golf = golf.t;
            offset = golf.ge+AJi;
            golf = {};
            echo = entity.config;
            echo = echo.messages;
            echo = echo.questName;
            golf['questName'] = echo;
            context = yankee.bind(result)(offset, golf);
 1473:
            if(!kilo) { _fun00002_ip = 1546; continue _fun00001 }
 1476:
            if(!tango) { _fun00002_ip = 1546; continue _fun00001 }
 1479:
            if(zulu) { _fun00002_ip = 1546; continue _fun00001 }
 1482:
            offset = _closure1_slot0;
            golf = _closure1_slot2;
            yankee = golf[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.formatToPlainString;
            golf = golf[sierra];
            golf = offset.bind(report)(golf);
            golf = golf.t;
            offset = golf.l1jCMz;
            golf = {};
            golf['date'] = romeo;
            config = yankee.bind(result)(offset, golf);
            _fun00002_ip = 1628; continue _fun00001;
 1546:
            golf = kilo;
            if(!kilo) { _fun00002_ip = 1555; continue _fun00001 }
 1552:
            golf = zulu;
 1555:
            config = options;
            if(!golf) { _fun00002_ip = 1628; continue _fun00001 }
 1561:
            options = _closure1_slot0;
            golf = _closure1_slot2;
            offset = golf[sierra];
            offset = options.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            golf = golf[sierra];
            golf = options.bind(report)(golf);
            golf = golf.t;
            options = golf.RrxtPT;
            golf = {};
            golf['reward'] = sizing;
            golf['date'] = romeo;
            config = offset.bind(yankee)(options, golf);
 1628:
            sizing = global;
            offset = sizing.Date;
            golf = entity.config;
            variable37 = golf.expiresAt;
            options = offset.prototype;
            options = Object.create(options, {constructor: {value: offset}});
            variable38 = options;
            golf = new variable38[offset](variable37, variable36);
            options = golf instanceof Object ? golf : options;
            golf = options.toLocaleDateString;
            romeo = golf.bind(options)();
            options = sizing.Date;
            variable37 = mike.rewardsExpireAt;
            golf = options.prototype;
            golf = Object.create(golf, {constructor: {value: options}});
            variable38 = golf;
            mike = new variable38[options](variable37, variable36);
            golf = mike instanceof Object ? mike : golf;
            mike = golf.toLocaleDateString;
            options = mike.bind(golf)();
            golf = _closure1_slot0;
            mike = _closure1_slot2;
            offset = mike[sierra];
            offset = golf.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            mike = mike[sierra];
            mike = golf.bind(report)(mike);
            mike = mike.t;
            golf = mike.HnG2TE;
            mike = {};
            echo = sizing.Date;
            sizing = entity.config;
            variable37 = sizing.expiresAt;
            result = echo.prototype;
            result = Object.create(result, {constructor: {value: echo}});
            variable38 = result;
            sizing = new variable38[echo](variable37, variable36);
            result = sizing instanceof Object ? sizing : result;
            sizing = result.toLocaleDateString;
            sizing = sizing.bind(result)();
            mike['expirationDate'] = sizing;
            golf = offset.bind(yankee)(golf, mike);
            mike = kilo;
            if(!kilo) { _fun00002_ip = 1837; continue _fun00001 }
 1834:
            mike = zulu;
 1837:
            echo = golf;
            if(!mike) { _fun00002_ip = 1905; continue _fun00001 }
 1843:
            golf = _closure1_slot0;
            mike = _closure1_slot2;
            offset = mike[sierra];
            offset = golf.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            mike = mike[sierra];
            mike = golf.bind(report)(mike);
            mike = mike.t;
            golf = mike.8K9PEx;
            mike = {};
            mike['expirationDate'] = romeo;
            echo = offset.bind(yankee)(golf, mike);
 1905:
            mike = kilo;
            if(!mike) { _fun00002_ip = 1914; continue _fun00001 }
 1911:
            mike = tango;
 1914:
            if(!mike) { _fun00002_ip = 1920; continue _fun00001 }
 1917:
            mike = !zulu;
 1920:
            if(!mike) { _fun00002_ip = 1983; continue _fun00001 }
 1923:
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            tango = mike[sierra];
            tango = zulu.bind(report)(tango);
            golf = tango.intl;
            tango = golf.formatToPlainString;
            mike = mike[sierra];
            mike = zulu.bind(report)(mike);
            mike = mike.t;
            zulu = mike.APddvL;
            mike = {};
            mike['expirationDate'] = options;
            echo = tango.bind(golf)(zulu, mike);
 1983:
            tango = _closure1_slot10;
            sizing = _closure1_slot0;
            romeo = _closure1_slot2;
            mike = 30;
            mike = romeo[mike];
            mike = sizing.bind(report)(mike);
            zulu = mike.Card;
            mike = {};
            golf = backup.container;
            mike['style'] = golf;
            oscar = function(argFoo) { // Original name: onLayout
                tango = _closure2_slot1;
                entity = _closure2_slot2;
                zulu = entity.id;
                entity = undefined;
                mike = argFoo;
                mike = tango.bind(entity)(mike, zulu);
                return entity;
            };
            mike['onLayout'] = oscar;
            result = _closure1_slot6;
            oscar = {};
            golf = backup.heroContainer;
            oscar['style'] = golf;
            offset = _closure1_slot9;
            whiskey = _closure1_slot1;
            golf = 31;
            golf = romeo[golf];
            options = whiskey.bind(report)(golf);
            golf = {};
            yankee = {};
            source = source.url;
            yankee['uri'] = source;
            golf['source'] = yankee;
            yankee = backup.heroImg;
            golf['style'] = yankee;
            options = offset.bind(report)(options, golf);
            golf = new Array(3);
            golf[0] = options;
            options = 32;
            options = romeo[options];
            yankee = whiskey.bind(report)(options);
            options = {};
            source = backup.heroLinearGradientOverlay;
            options['style'] = source;
            source = 33;
            target = romeo[source];
            target = sizing.bind(report)(target);
            target = target.VerticalGradient;
            target = target.START;
            options['start'] = target;
            source = romeo[source];
            source = sizing.bind(report)(source);
            source = source.VerticalGradient;
            source = source.END;
            options['end'] = source;
            source = new Array(3);
            source[0] = papa;
            source[1] = sequence;
            source[2] = control;
            options['colors'] = source;
            options = offset.bind(report)(yankee, options);
            golf[1] = options;
            options = {};
            yankee = backup.heroFooterContainer;
            options['style'] = yankee;
            yankee = {};
            source = backup.heroFooterLeftContainer;
            yankee['style'] = source;
            source = 34;
            source = romeo[source];
            control = whiskey.bind(report)(source);
            source = {};
            source['assetUrl'] = vacuum;
            source = offset.bind(report)(control, source);
            control = new Array(2);
            control[0] = source;
            source = 35;
            source = romeo[source];
            source = sizing.bind(report)(source);
            papa = source.Stack;
            sequence = {'direction': 'horizontal', 'align': 'center', 'spacing': 4};
            vacuum = 29;
            source = romeo[vacuum];
            source = sizing.bind(report)(source);
            status = source.Text;
            target = {'variant': 'text-xs/medium', 'color': 'text-muted'};
            source = 'text-xs/medium';
            lima = romeo[sierra];
            lima = sizing.bind(report)(lima);
            equality = lima.intl;
            lima = equality.string;
            sierra = romeo[sierra];
            sierra = sizing.bind(report)(sierra);
            sierra = sierra.t;
            sierra = sierra.VAbKhI;
            sierra = lima.bind(equality)(sierra);
            target['children'] = sierra;
            status = offset.bind(report)(status, target);
            target = new Array(3);
            target[0] = status;
            sierra = _closure1_slot5;
            status = {};
            lima = 36;
            lima = romeo[lima];
            lima = whiskey.bind(report)(lima);
            status['source'] = lima;
            lima = {'height': 16, 'width': 16};
            status['style'] = lima;
            status = offset.bind(report)(sierra, status);
            target[1] = status;
            status = romeo[vacuum];
            status = sizing.bind(report)(status);
            sierra = status.Text;
            status = {'variant': 'text-xs/medium', 'color': 'text-normal'};
            lima = entity.config;
            lima = lima.messages;
            lima = lima.gamePublisher;
            status['children'] = lima;
            status = offset.bind(report)(sierra, status);
            target[2] = status;
            sequence['children'] = target;
            sequence = tango.bind(report)(papa, sequence);
            control[1] = sequence;
            yankee['children'] = control;
            control = tango.bind(report)(result, yankee);
            yankee = new Array(2);
            yankee[0] = control;
            romeo = romeo[vacuum];
            romeo = sizing.bind(report)(romeo);
            sizing = romeo.Text;
            romeo = {};
            romeo['variant'] = source;
            romeo['children'] = echo;
            romeo = offset.bind(report)(sizing, romeo);
            yankee[1] = romeo;
            options['children'] = yankee;
            options = tango.bind(report)(result, options);
            golf[2] = options;
            oscar['children'] = golf;
            golf = tango.bind(report)(result, oscar);
            oscar = new Array(3);
            oscar[0] = golf;
            golf = {};
            options = backup.detailsWrapper;
            golf['style'] = options;
            echo = {};
            options = backup.detailsContainer;
            echo['style'] = options;
            options = {};
            yankee = backup.rewardImgContainer;
            options['style'] = yankee;
            sizing = _closure1_slot9;
            romeo = _closure1_slot1;
            source = _closure1_slot2;
            if(verify) { _fun00002_ip = 2699; continue _fun00001 }
 2663:
            verify = 38;
            verify = source[verify];
            yankee = romeo.bind(report)(verify);
            verify = {'quest': null, 'height': 64, 'width': 64};
            verify['quest'] = entity;
            verify = sizing.bind(report)(yankee, verify);
            _fun00002_ip = 2743; continue _fun00001;
 2699:
            yankee = 37;
            yankee = source[yankee];
            romeo = romeo.bind(report)(yankee);
            yankee = {};
            yankee['quest'] = entity;
            update = update.percentComplete;
            yankee['progress'] = update;
            update = 'sm';
            yankee['size'] = update;
            verify = sizing.bind(report)(romeo, yankee);
 2743:
            options['children'] = verify;
            options = offset.bind(report)(result, options);
            update = new Array(2);
            update[0] = options;
            verify = _closure1_slot10;
            options = _closure1_slot6;
            source = {};
            yankee = backup.detailsTextContainer;
            source['style'] = yankee;
            romeo = _closure1_slot9;
            yankee = _closure1_slot0;
            sizing = _closure1_slot2;
            control = sizing[vacuum];
            control = yankee.bind(report)(control);
            sequence = control.Text;
            control = {'variant': 'eyebrow', 'color': 'text-brand'};
            papa = backup.questName;
            control['style'] = papa;
            control['children'] = record;
            sequence = romeo.bind(report)(sequence, control);
            control = new Array(3);
            control[0] = sequence;
            sequence = sizing[vacuum];
            sequence = yankee.bind(report)(sequence);
            record = sequence.Text;
            sequence = {'variant': 'text-md/semibold', 'color': 'header-primary'};
            sequence['children'] = context;
            sequence = romeo.bind(report)(record, sequence);
            control[1] = sequence;
            vacuum = sizing[vacuum];
            vacuum = yankee.bind(report)(vacuum);
            sequence = vacuum.Text;
            vacuum = {'variant': 'text-sm/medium', 'color': 'text-muted'};
            vacuum['children'] = config;
            vacuum = romeo.bind(report)(sequence, vacuum);
            control[2] = vacuum;
            source['children'] = control;
            source = verify.bind(report)(options, source);
            update[1] = source;
            echo['children'] = update;
            echo = tango.bind(report)(result, echo);
            golf['children'] = echo;
            golf = offset.bind(report)(result, golf);
            oscar[1] = golf;
            golf = {};
            offset = backup.buttonContainers;
            golf['style'] = offset;
            offset = 39;
            offset = sizing[offset];
            offset = yankee.bind(report)(offset);
            yankee = offset.Button;
            offset = {};
            result = true;
            offset['grow'] = result;
            variable37 = offset;
            variable36 = output;
            output = copyDataProperties(variable37, variable36);
            yankee = romeo.bind(report)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = {};
            backup = backup.overflowButton;
            yankee['style'] = backup;
            backup = _closure1_slot1;
            foxtrot = 40;
            foxtrot = sizing[foxtrot];
            backup = backup.bind(report)(foxtrot);
            foxtrot = {};
            foxtrot['quest'] = entity;
            kilo = !kilo;
            foxtrot['showShareLink'] = kilo;
            foxtrot = romeo.bind(report)(backup, foxtrot);
            yankee['children'] = foxtrot;
            yankee = romeo.bind(report)(options, yankee);
            offset[1] = yankee;
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[2] = golf;
            mike['children'] = oscar;
            entity = entity.id;
            entity = tango.bind(report)(zulu, mike, entity);
            return entity;
        }
    };
    mike = report.bind(options)(mike);
    report = 41;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/quests/native/QuestCard.tsx';
    report = oscar.bind(golf)(report);
    zulu['QUEST_CARD_SPACING'] = tango;
    zulu['QuestCard'] = mike;
    return entity;
})();