// app/modules/quests/native/QuestCard.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    output = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = output;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = golfie[entity];
    entity = undefined;
    tangon = output.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    report = golfie[tangon];
    tangon = argCor;
    option = tangon.bind(entity)(report);
    var _closure1_slot4 = option;
    tangon = 2;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    report = tangon.Image;
    var _closure1_slot5 = report;
    kiloes = tangon.StyleSheet;
    tangon = tangon.View;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = golfie[tangon];
    tangon = output.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = golfie[tangon];
    tangon = output.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot9 = tangon;
    tangon = 6;
    report = golfie[tangon];
    report = oscard.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot10 = report;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    sizing = 7;
    tangon = golfie[sizing];
    tangon = output.bind(entity)(tangon);
    tangon = tangon.colors;
    yankee = tangon.BG_SURFACE_RAISED;
    tangon = golfie[sizing];
    tangon = output.bind(entity)(tangon);
    tangon = tangon.colors;
    result = tangon.BORDER_SUBTLE;
    report = 8;
    tangon = golfie[report];
    offset = oscard.bind(entity)(tangon);
    verify = offset.experimental_createToken;
    tangon = function(argFoo) {
        entity = argFoo;
        golfie = entity.theme;
        option = _closure1_slot1;
        report = _closure1_slot2;
        michal = 7;
        tangon = report[michal];
        zuuluu = undefined;
        tangon = option.bind(zuuluu)(tangon);
        oscard = tangon.internal;
        tangon = oscard.resolveSemanticColor;
        michal = report[michal];
        michal = option.bind(zuuluu)(michal);
        michal = michal.colors;
        michal = michal.BG_SURFACE_RAISED;
        tangon = tangon.bind(oscard)(golfie, michal);
        michal = _closure1_slot0;
        entity = 9;
        entity = report[entity];
        zuuluu = michal.bind(zuuluu)(entity);
        michal = zuuluu.hexOpacityToRgba;
        entity = 0;
        entity = michal.bind(zuuluu)(tangon, entity);
        return entity;
    };
    foxtra = verify.bind(offset)(tangon);
    tangon = golfie[report];
    offset = oscard.bind(entity)(tangon);
    verify = offset.experimental_createToken;
    tangon = function(argFoo) {
        entity = argFoo;
        golfie = entity.theme;
        option = _closure1_slot1;
        report = _closure1_slot2;
        michal = 7;
        tangon = report[michal];
        zuuluu = undefined;
        tangon = option.bind(zuuluu)(tangon);
        oscard = tangon.internal;
        tangon = oscard.resolveSemanticColor;
        michal = report[michal];
        michal = option.bind(zuuluu)(michal);
        michal = michal.colors;
        michal = michal.BG_SURFACE_RAISED;
        tangon = tangon.bind(oscard)(golfie, michal);
        michal = _closure1_slot0;
        entity = 9;
        entity = report[entity];
        zuuluu = michal.bind(zuuluu)(entity);
        michal = zuuluu.hexOpacityToRgba;
        entity = 0.8;
        entity = michal.bind(zuuluu)(tangon, entity);
        return entity;
    };
    romeon = verify.bind(offset)(tangon);
    tangon = golfie[sizing];
    tangon = output.bind(entity)(tangon);
    tangon = tangon.spacing;
    tangon = tangon.PX_16;
    verify = golfie[report];
    backup = oscard.bind(entity)(verify);
    offset = backup.createStyles;
    verify = {};
    echoed = {'position': 'relative', 'padding': 0};
    update = golfie[sizing];
    update = output.bind(entity)(update);
    update = update.radii;
    update = update.sm;
    echoed['borderRadius'] = update;
    echoed['backgroundColor'] = yankee;
    update = golfie[sizing];
    update = output.bind(entity)(update);
    update = update.spacing;
    update = update.PX_16;
    echoed['marginBottom'] = update;
    update = 'hidden';
    echoed['overflow'] = update;
    verify['container'] = echoed;
    update = {'display': 'flex', 'flexDirection': 'column', 'justifyContent': 'flex-end', 'padding': null, 'height': 165};
    echoed = 'flex';
    source = golfie[sizing];
    source = output.bind(entity)(source);
    source = source.spacing;
    source = source.PX_12;
    update['padding'] = source;
    verify['heroContainer'] = update;
    update = {};
    source = 'cover';
    update['resizeMode'] = source;
    vacuum = kiloes.absoluteFillObject;
    sequen = update;
    source = copyDataProperties(sequen, vacuum);
    verify['heroImg'] = update;
    kiloes = kiloes.absoluteFillObject;
    verify['heroLinearGradientOverlay'] = kiloes;
    kiloes = {'height': 64, 'width': 64};
    update = golfie[sizing];
    update = output.bind(entity)(update);
    update = update.spacing;
    update = update.PX_12;
    kiloes['marginRight'] = update;
    verify['rewardImgContainer'] = kiloes;
    kiloes = {'height': '100%', 'width': '100%'};
    update = golfie[sizing];
    update = output.bind(entity)(update);
    update = update.radii;
    update = update.sm;
    kiloes['borderRadius'] = update;
    verify['rewardImg'] = kiloes;
    kiloes = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'space-between', 'alignItems': 'flex-end'};
    verify['heroFooterContainer'] = kiloes;
    kiloes = {'flex': 1, 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'flex-start'};
    verify['heroFooterLeftContainer'] = kiloes;
    kiloes = {};
    kiloes['display'] = echoed;
    echoed = golfie[sizing];
    echoed = output.bind(entity)(echoed);
    echoed = echoed.spacing;
    echoed = echoed.PX_12;
    kiloes['padding'] = echoed;
    verify['detailsWrapper'] = kiloes;
    kiloes = {'display': 'flex', 'flexDirection': 'row'};
    verify['detailsContainer'] = kiloes;
    kiloes = {};
    echoed = golfie[sizing];
    echoed = output.bind(entity)(echoed);
    echoed = echoed.spacing;
    echoed = echoed.PX_4;
    kiloes['marginBottom'] = echoed;
    verify['questName'] = kiloes;
    kiloes = {'flex': 1, 'justifyContent': 'center'};
    verify['detailsTextContainer'] = kiloes;
    kiloes = {'borderTopWidth': 1, 'borderTopColor': null, 'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    kiloes['borderTopColor'] = result;
    result = golfie[sizing];
    result = output.bind(entity)(result);
    result = result.spacing;
    result = result.PX_12;
    kiloes['padding'] = result;
    verify['buttonContainers'] = kiloes;
    kiloes = {};
    sizing = golfie[sizing];
    sizing = output.bind(entity)(sizing);
    sizing = sizing.spacing;
    sizing = sizing.PX_8;
    kiloes['marginLeft'] = sizing;
    verify['overflowButton'] = kiloes;
    verify = offset.bind(backup)(verify);
    var _closure1_slot12 = verify;
    report = golfie[report];
    offset = oscard.bind(entity)(report);
    verify = offset.createStyleProperties;
    report = {};
    report['gradientStart'] = foxtra;
    report['gradientMid'] = romeon;
    report['gradientEnd'] = yankee;
    report = verify.bind(offset)(report);
    var _closure1_slot13 = report;
    report = 10;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.QuestContent;
    report = report.QUEST_HOME_MOBILE;
    var _closure1_slot14 = report;
    report = option.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.onLayout;
            var _closure2_slot1 = entity;
            entity = michal.quest;
            var _closure2_slot2 = entity;
            michal = michal.questContentPosition;
            var _closure2_slot3 = michal;
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            tangon = 11;
            tangon = michal[tangon];
            report = undefined;
            option = zuuluu.bind(report)(tangon);
            golfie = option.getQuestLogger;
            tangon = {};
            tangon['quest'] = entity;
            verify = _closure1_slot9;
            verify = verify.QUEST_HOME_MOBILE;
            tangon['location'] = verify;
            tangon = golfie.bind(option)(tangon);
            var _closure2_slot4 = tangon;
            tangon = 12;
            tangon = michal[tangon];
            golfie = zuuluu.bind(report)(tangon);
            tangon = golfie.useTrackQuestContentClickedWithImpression;
            tangon = tangon.bind(golfie)();
            var _closure2_slot5 = tangon;
            offset = 13;
            michal = michal[offset];
            zuuluu = zuuluu.bind(report)(michal);
            michal = zuuluu.useQuestTaskDetails;
            update = michal.bind(zuuluu)(entity);
            zuuluu = entity.userStatus;
            target = null;
            tangon = target == zuuluu;
            michal = undefined;
            if(tangon) { _fun00002_ip = 168; continue _fun00001 }
 162:
            michal = zuuluu.enrolledAt;
 168:
            verify = target != michal;
            michal = _closure1_slot12;
            foxtra = michal.bind(report)();
            golfie = _closure1_slot0;
            yankee = _closure1_slot2;
            michal = 14;
            michal = yankee[michal];
            tangon = golfie.bind(report)(michal);
            zuuluu = tangon.useQuestsInstructionsToWinReward;
            michal = {};
            michal['quest'] = entity;
            michal['taskDetails'] = update;
            romeon = _closure1_slot9;
            option = romeon.QUEST_HOME_MOBILE;
            michal['location'] = option;
            option = 10;
            option = yankee[option];
            option = golfie.bind(report)(option);
            option = option.QuestContent;
            option = option.QUEST_HOME_MOBILE;
            michal['questContent'] = option;
            option = zuuluu.bind(tangon)(michal);
            backup = _closure1_slot4;
            tangon = backup.useMemo;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            michal = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 15;
                michal = golfie[entity];
                report = undefined;
                tangon = oscard.bind(report)(michal);
                zuuluu = tangon.getQuestAsset;
                michal = _closure2_slot2;
                entity = golfie[entity];
                entity = oscard.bind(report)(entity);
                entity = entity.QuestAssetType;
                entity = entity.HERO;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            source = tangon.bind(backup)(michal, zuuluu);
            michal = 16;
            michal = yankee[michal];
            zuuluu = golfie.bind(report)(michal);
            michal = zuuluu.useQuestGameLogotypeAssetUrl;
            vacuum = michal.bind(zuuluu)(entity);
            michal = _closure1_slot13;
            michal = michal.bind(report)();
            papara = michal.gradientStart;
            sequen = michal.gradientMid;
            ctrled = michal.gradientEnd;
            tangon = backup.useMemo;
            michal = entity.config;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 17;
                michal = michal[entity];
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                zuuluu = entity.SharedQuestFields;
                michal = zuuluu.build;
                entity = _closure2_slot2;
                entity = entity.config;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            michal = tangon.bind(backup)(michal, zuuluu);
            zuuluu = michal.defaultReward;
            zuuluu = zuuluu.messages;
            output = zuuluu.nameWithArticle;
            zuuluu = michal.defaultReward;
            zuuluu = zuuluu.messages;
            zuuluu = zuuluu.name;
            tangon = 18;
            tangon = yankee[tangon];
            yankee = golfie.bind(report)(tangon);
            golfie = yankee.useIsQuestBarCopySimplificationEnabled;
            tangon = {};
            romeon = romeon.QUEST_HOME_MOBILE;
            tangon['location'] = romeon;
            tangon = golfie.bind(yankee)(tangon);
            if(!tangon) { _fun00002_ip = 452; continue _fun00001 }
 449:
            output = zuuluu;
 452:
            var _closure2_slot6 = output;
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot2;
            record = 19;
            golfie = zuuluu[record];
            backup = tangon.bind(report)(golfie);
            romeon = backup.useStateFromStoresObject;
            golfie = _closure1_slot8;
            yankee = new Array(1);
            yankee[0] = golfie;
            golfie = function() {
                entity = {};
                tangon = _closure1_slot8;
                report = tangon.getRewards;
                michal = _closure2_slot2;
                zuuluu = michal.id;
                zuuluu = report.bind(tangon)(zuuluu);
                entity['reward'] = zuuluu;
                report = tangon.isFetchingRewardCode;
                zuuluu = michal.id;
                zuuluu = report.bind(tangon)(zuuluu);
                entity['isFetchingRewardCode'] = zuuluu;
                report = tangon.isClaimingReward;
                zuuluu = michal.id;
                zuuluu = report.bind(tangon)(zuuluu);
                entity['isClaimingReward'] = zuuluu;
                zuuluu = tangon.isEnrolling;
                michal = michal.id;
                michal = zuuluu.bind(tangon)(michal);
                entity['isEnrolling'] = michal;
                return entity;
            };
            golfie = romeon.bind(backup)(yankee, golfie);
            result = golfie.isFetchingRewardCode;
            yankee = golfie.isClaimingReward;
            golfie = golfie.isEnrolling;
            zuuluu = zuuluu[offset];
            romeon = tangon.bind(report)(zuuluu);
            offset = romeon.useQuestFormattedDate;
            zuuluu = entity.userStatus;
            backup = target == zuuluu;
            tangon = undefined;
            if(backup) { _fun00002_ip = 561; continue _fun00001 }
 555:
            tangon = zuuluu.completedAt;
 561:
            zuuluu = {'year': 'numeric', 'month': 'long', 'day': 'numeric'};
            romeon = offset.bind(romeon)(tangon, zuuluu);
            tangon = entity.userStatus;
            offset = target == tangon;
            zuuluu = undefined;
            if(offset) { _fun00002_ip = 602; continue _fun00001 }
 596:
            zuuluu = tangon.enrolledAt;
 602:
            backup = target != zuuluu;
            tangon = entity.userStatus;
            offset = target == tangon;
            zuuluu = undefined;
            if(offset) { _fun00002_ip = 627; continue _fun00001 }
 621:
            zuuluu = tangon.completedAt;
 627:
            tangon = target != zuuluu;
            offset = entity.userStatus;
            sizing = target == offset;
            zuuluu = undefined;
            if(sizing) { _fun00002_ip = 652; continue _fun00001 }
 646:
            zuuluu = offset.claimedAt;
 652:
            zuuluu = target != zuuluu;
            echoed = _closure1_slot0;
            config = _closure1_slot2;
            offset = 20;
            sizing = config[offset];
            cntext = echoed.bind(report)(sizing);
            sizing = cntext.isQuestExpired;
            sizing = sizing.bind(cntext)(entity);
            cntext = michal.defaultReward;
            cntext = cntext.skuId;
            offset = config[offset];
            sierra = echoed.bind(report)(offset);
            status = sierra.hasCollectiblesQuestReward;
            offset = entity.config;
            status = status.bind(sierra)(offset);
            offset = 21;
            offset = config[offset];
            config = echoed.bind(report)(offset);
            echoed = config.useFetchCollectiblesProduct;
            offset = null;
            if(!status) { _fun00002_ip = 755; continue _fun00001 }
 747:
            offset = null;
            if(!tangon) { _fun00002_ip = 755; continue _fun00001 }
 752:
            offset = cntext;
 755:
            offset = echoed.bind(config)(offset);
            echoed = offset.product;
            var _closure2_slot7 = echoed;
            offset = offset.isFetching;
            config = _closure1_slot0;
            echoed = _closure1_slot2;
            echoed = echoed[record];
            cntext = config.bind(report)(echoed);
            record = cntext.useStateFromStores;
            echoed = _closure1_slot7;
            config = new Array(1);
            config[0] = echoed;
            echoed = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure1_slot7;
                    entity = michal.getCurrentUser;
                    zuuluu = entity.bind(michal)();
                    entity = null;
                    michal = entity == zuuluu;
                    entity = undefined;
                    if(michal) { _fun00004_ip = 37; continue _fun00003 }
 27:
                    michal = zuuluu.hasVerifiedEmailOrPhone;
                    entity = michal.bind(zuuluu)();
 37:
                    return entity;
                }
            };
            echoed = record.bind(cntext)(config, echoed);
            var _closure2_slot8 = echoed;
            echoed = function(argFoo) { // Original name: trackClick
                zuuluu = _closure2_slot5;
                michal = {};
                entity = _closure2_slot2;
                entity = entity.id;
                michal['questId'] = entity;
                report = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 10;
                tangon = tangon[entity];
                entity = undefined;
                tangon = report.bind(entity)(tangon);
                tangon = tangon.QuestContent;
                tangon = tangon.QUEST_HOME_MOBILE;
                michal['questContent'] = tangon;
                tangon = argFoo;
                michal['questContentCTA'] = tangon;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            var _closure2_slot9 = echoed;
            echoed = function() { // Original name: showQuestBottomSheet
                report = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 22;
                tangon = michal[entity];
                entity = undefined;
                oscard = report.bind(entity)(tangon);
                report = oscard.openLazy;
                tangon = _closure1_slot0;
                zuuluu = 24;
                zuuluu = michal[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = 23;
                zuuluu = michal[zuuluu];
                michal = michal.paths;
                tangon = tangon.bind(entity)(zuuluu, michal);
                zuuluu = {};
                michal = _closure2_slot2;
                michal = michal.id;
                zuuluu['questId'] = michal;
                michal = 'QuestBottomSheet';
                michal = report.bind(oscard)(tangon, michal, zuuluu);
                return entity;
            };
            var _closure2_slot10 = echoed;
            if(zuuluu) { _fun00002_ip = 1156; continue _fun00001 }
 855:
            if(tangon) { _fun00002_ip = 1062; continue _fun00001 }
 861:
            if(backup) { _fun00002_ip = 969; continue _fun00001 }
 864:
            backup = {};
            cntext = _closure1_slot0;
            target = _closure1_slot2;
            echoed = 25;
            config = target[echoed];
            config = cntext.bind(report)(config);
            record = config.intl;
            config = record.string;
            echoed = target[echoed];
            echoed = cntext.bind(report)(echoed);
            echoed = echoed.t;
            echoed = echoed.kUQLMD;
            echoed = config.bind(record)(echoed);
            backup['text'] = echoed;
            echoed = false;
            backup['disabled'] = echoed;
            backup['loading'] = golfie;
            echoed = _closure1_slot3;
            golfie = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00006_ip = 164; continue _fun00005 }
 10:
                        report = _closure2_slot4;
                        zuuluu = report.log;
                        michal = 'Enrolling in quest';
                        michal = zuuluu.bind(report)(michal);
                        verify = _closure1_slot0;
                        offset = _closure1_slot2;
                        michal = 27;
                        michal = offset[michal];
                        zuuluu = undefined;
                        golfie = verify.bind(zuuluu)(michal);
                        oscard = golfie.enrollInQuest;
                        michal = _closure2_slot2;
                        report = michal.id;
                        michal = {};
                        option = 10;
                        option = offset[option];
                        option = verify.bind(zuuluu)(option);
                        option = option.QuestContent;
                        option = option.QUEST_HOME_MOBILE;
                        michal['questContent'] = option;
                        option = 12;
                        option = offset[option];
                        option = verify.bind(zuuluu)(option);
                        option = option.QuestContentCTA;
                        option = option.ACCEPT_QUEST;
                        michal['questContentCTA'] = option;
                        michal = oscard.bind(golfie)(report, michal);
                        SaveGenerator(address=144);
 142:
                        return michal;
 144:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00006_ip = 161; continue _fun00005 }
 150:
                        tangon = _closure2_slot10;
                        tangon = tangon.bind(zuuluu)();
                        return zuuluu;
 161:
                        return michal;
 164:
                        return entity;
                    }
                };
                return entity;
            };
            golfie = echoed.bind(report)(golfie);
            var _closure2_slot0 = golfie;
            golfie = function() {
                entity = undefined;
                tangon = _closure2_slot0;
                zuuluu = tangon.apply;
                entity = arguments;
                michal = entity;
                entity = this;
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            backup['onPress'] = golfie;
            _fun00002_ip = 1060; continue _fun00001;
 969:
            golfie = {'text': null, 'variant': 'secondary', 'disabled': false};
            cntext = _closure1_slot0;
            target = _closure1_slot2;
            echoed = 25;
            config = target[echoed];
            config = cntext.bind(report)(config);
            record = config.intl;
            config = record.string;
            echoed = target[echoed];
            echoed = cntext.bind(report)(echoed);
            echoed = echoed.t;
            echoed = echoed.JiosAg;
            echoed = config.bind(record)(echoed);
            golfie['text'] = echoed;
            echoed = function() { // Original name: onPress
                tangon = _closure2_slot4;
                zuuluu = tangon.log;
                entity = 'Navigating to console connection action sheet';
                entity = zuuluu.bind(tangon)(entity);
                tangon = _closure2_slot9;
                report = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 12;
                zuuluu = zuuluu[entity];
                entity = undefined;
                zuuluu = report.bind(entity)(zuuluu);
                zuuluu = zuuluu.QuestContentCTA;
                zuuluu = zuuluu.VIEW_REQUIREMENTS;
                zuuluu = tangon.bind(entity)(zuuluu);
                michal = _closure2_slot10;
                michal = michal.bind(entity)();
                return entity;
            };
            golfie['onPress'] = echoed;
            backup = golfie;
 1060:
            _fun00002_ip = 1154; continue _fun00001;
 1062:
            golfie = {};
            cntext = _closure1_slot0;
            target = _closure1_slot2;
            echoed = 25;
            config = target[echoed];
            config = cntext.bind(report)(config);
            record = config.intl;
            config = record.string;
            echoed = target[echoed];
            echoed = cntext.bind(report)(echoed);
            echoed = echoed.t;
            echoed = echoed.cfY4PD;
            echoed = config.bind(record)(echoed);
            golfie['text'] = echoed;
            if(yankee) { _fun00002_ip = 1129; continue _fun00001 }
 1126:
            yankee = result;
 1129:
            if(yankee) { _fun00002_ip = 1135; continue _fun00001 }
 1132:
            yankee = offset;
 1135:
            golfie['loading'] = yankee;
            yankee = function() { // Original name: onPress
                golfie = _closure2_slot9;
                zuuluu = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 12;
                michal = tangon[entity];
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                michal = michal.QuestContentCTA;
                michal = michal.CLAIM_REWARD;
                michal = golfie.bind(entity)(michal);
                michal = 26;
                michal = tangon[michal];
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.handleRewardClaimThenView;
                michal = {};
                golfie = _closure2_slot7;
                michal['product'] = golfie;
                golfie = _closure2_slot2;
                michal['quest'] = golfie;
                oscard = _closure1_slot14;
                michal['questContent'] = oscard;
                oscard = _closure2_slot3;
                michal['questContentPosition'] = oscard;
                report = _closure2_slot8;
                michal['currentUserHasVerifiedEmailOrPhone'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            golfie['onPress'] = yankee;
            backup = golfie;
 1154:
            _fun00002_ip = 1238; continue _fun00001;
 1156:
            golfie = {};
            config = _closure1_slot0;
            record = _closure1_slot2;
            yankee = 25;
            result = record[yankee];
            result = config.bind(report)(result);
            echoed = result.intl;
            result = echoed.string;
            yankee = record[yankee];
            yankee = config.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.vTgCW1;
            yankee = result.bind(echoed)(yankee);
            golfie['text'] = yankee;
            golfie['loading'] = offset;
            offset = function() { // Original name: onPress
                golfie = _closure2_slot9;
                zuuluu = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 12;
                michal = tangon[entity];
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                michal = michal.QuestContentCTA;
                michal = michal.SHOW_REWARD;
                michal = golfie.bind(entity)(michal);
                michal = 26;
                michal = tangon[michal];
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.viewReward;
                michal = {};
                golfie = _closure2_slot7;
                michal['product'] = golfie;
                golfie = _closure2_slot2;
                michal['quest'] = golfie;
                oscard = _closure1_slot14;
                michal['questContent'] = oscard;
                report = _closure2_slot3;
                michal['questContentPosition'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            golfie['onPress'] = offset;
            backup = golfie;
 1238:
            offset = _closure1_slot0;
            golfie = _closure1_slot2;
            sierra = 25;
            yankee = golfie[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.formatToPlainString;
            golfie = golfie[sierra];
            golfie = offset.bind(report)(golfie);
            golfie = golfie.t;
            offset = golfie.EAYZAg;
            golfie = {};
            echoed = entity.config;
            echoed = echoed.messages;
            echoed = echoed.questName;
            golfie['questName'] = echoed;
            record = yankee.bind(result)(offset, golfie);
            if(!sizing) { _fun00002_ip = 1324; continue _fun00001 }
 1321:
            if(zuuluu) { _fun00002_ip = 1397; continue _fun00001 }
 1324:
            offset = _closure1_slot0;
            golfie = _closure1_slot2;
            yankee = golfie[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.format;
            golfie = golfie[sierra];
            golfie = offset.bind(report)(golfie);
            golfie = golfie.t;
            offset = golfie.0IUT4e;
            golfie = {};
            echoed = function() { // Original name: rewardWithArticleHook
                tangon = _closure1_slot10;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 28;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.Text;
                entity = {'variant': 'text-md/semibold', 'color': 'text-normal'};
                report = _closure2_slot6;
                entity['children'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            golfie['rewardWithArticleHook'] = echoed;
            cntext = yankee.bind(result)(offset, golfie);
            _fun00002_ip = 1474; continue _fun00001;
 1397:
            offset = _closure1_slot0;
            golfie = _closure1_slot2;
            yankee = golfie[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.formatToPlainString;
            golfie = golfie[sierra];
            golfie = offset.bind(report)(golfie);
            golfie = golfie.t;
            offset = golfie.ge+AJi;
            golfie = {};
            echoed = entity.config;
            echoed = echoed.messages;
            echoed = echoed.questName;
            golfie['questName'] = echoed;
            cntext = yankee.bind(result)(offset, golfie);
 1474:
            if(!sizing) { _fun00002_ip = 1547; continue _fun00001 }
 1477:
            if(!tangon) { _fun00002_ip = 1547; continue _fun00001 }
 1480:
            if(zuuluu) { _fun00002_ip = 1547; continue _fun00001 }
 1483:
            offset = _closure1_slot0;
            golfie = _closure1_slot2;
            yankee = golfie[sierra];
            yankee = offset.bind(report)(yankee);
            result = yankee.intl;
            yankee = result.formatToPlainString;
            golfie = golfie[sierra];
            golfie = offset.bind(report)(golfie);
            golfie = golfie.t;
            offset = golfie.l1jCMz;
            golfie = {};
            golfie['date'] = romeon;
            config = yankee.bind(result)(offset, golfie);
            _fun00002_ip = 1629; continue _fun00001;
 1547:
            golfie = sizing;
            if(!sizing) { _fun00002_ip = 1556; continue _fun00001 }
 1553:
            golfie = zuuluu;
 1556:
            config = option;
            if(!golfie) { _fun00002_ip = 1629; continue _fun00001 }
 1562:
            option = _closure1_slot0;
            golfie = _closure1_slot2;
            offset = golfie[sierra];
            offset = option.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            golfie = golfie[sierra];
            golfie = option.bind(report)(golfie);
            golfie = golfie.t;
            option = golfie.RrxtPT;
            golfie = {};
            golfie['reward'] = output;
            golfie['date'] = romeon;
            config = offset.bind(yankee)(option, golfie);
 1629:
            output = global;
            offset = output.Date;
            golfie = entity.config;
            variable37 = golfie.expiresAt;
            option = offset.prototype;
            option = Object.create(option, {constructor: {value: offset}});
            variable38 = option;
            golfie = new variable38[offset](variable37, variable36);
            option = golfie instanceof Object ? golfie : option;
            golfie = option.toLocaleDateString;
            romeon = golfie.bind(option)();
            option = output.Date;
            variable37 = michal.rewardsExpireAt;
            golfie = option.prototype;
            golfie = Object.create(golfie, {constructor: {value: option}});
            variable38 = golfie;
            michal = new variable38[option](variable37, variable36);
            golfie = michal instanceof Object ? michal : golfie;
            michal = golfie.toLocaleDateString;
            option = michal.bind(golfie)();
            golfie = _closure1_slot0;
            michal = _closure1_slot2;
            offset = michal[sierra];
            offset = golfie.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            michal = michal[sierra];
            michal = golfie.bind(report)(michal);
            michal = michal.t;
            golfie = michal.HnG2TE;
            michal = {};
            echoed = output.Date;
            output = entity.config;
            variable37 = output.expiresAt;
            result = echoed.prototype;
            result = Object.create(result, {constructor: {value: echoed}});
            variable38 = result;
            output = new variable38[echoed](variable37, variable36);
            result = output instanceof Object ? output : result;
            output = result.toLocaleDateString;
            output = output.bind(result)();
            michal['expirationDate'] = output;
            golfie = offset.bind(yankee)(golfie, michal);
            michal = sizing;
            if(!sizing) { _fun00002_ip = 1838; continue _fun00001 }
 1835:
            michal = zuuluu;
 1838:
            echoed = golfie;
            if(!michal) { _fun00002_ip = 1906; continue _fun00001 }
 1844:
            golfie = _closure1_slot0;
            michal = _closure1_slot2;
            offset = michal[sierra];
            offset = golfie.bind(report)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            michal = michal[sierra];
            michal = golfie.bind(report)(michal);
            michal = michal.t;
            golfie = michal.8K9PEx;
            michal = {};
            michal['expirationDate'] = romeon;
            echoed = offset.bind(yankee)(golfie, michal);
 1906:
            michal = sizing;
            if(!michal) { _fun00002_ip = 1915; continue _fun00001 }
 1912:
            michal = tangon;
 1915:
            if(!michal) { _fun00002_ip = 1921; continue _fun00001 }
 1918:
            michal = !zuuluu;
 1921:
            if(!michal) { _fun00002_ip = 1984; continue _fun00001 }
 1924:
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            tangon = michal[sierra];
            tangon = zuuluu.bind(report)(tangon);
            golfie = tangon.intl;
            tangon = golfie.formatToPlainString;
            michal = michal[sierra];
            michal = zuuluu.bind(report)(michal);
            michal = michal.t;
            zuuluu = michal.APddvL;
            michal = {};
            michal['expirationDate'] = option;
            echoed = tangon.bind(golfie)(zuuluu, michal);
 1984:
            tangon = _closure1_slot11;
            output = _closure1_slot0;
            romeon = _closure1_slot2;
            michal = 29;
            michal = romeon[michal];
            michal = output.bind(report)(michal);
            zuuluu = michal.Card;
            michal = {};
            golfie = foxtra.container;
            michal['style'] = golfie;
            oscard = function(argFoo) { // Original name: onLayout
                tangon = _closure2_slot1;
                entity = _closure2_slot2;
                zuuluu = entity.id;
                entity = undefined;
                michal = argFoo;
                michal = tangon.bind(entity)(michal, zuuluu);
                return entity;
            };
            michal['onLayout'] = oscard;
            result = _closure1_slot6;
            oscard = {};
            golfie = foxtra.heroContainer;
            oscard['style'] = golfie;
            offset = _closure1_slot10;
            whisks = _closure1_slot1;
            golfie = 30;
            golfie = romeon[golfie];
            option = whisks.bind(report)(golfie);
            golfie = {};
            yankee = {};
            source = source.url;
            yankee['uri'] = source;
            golfie['source'] = yankee;
            yankee = foxtra.heroImg;
            golfie['style'] = yankee;
            option = offset.bind(report)(option, golfie);
            golfie = new Array(3);
            golfie[0] = option;
            option = 31;
            option = romeon[option];
            yankee = whisks.bind(report)(option);
            option = {};
            source = foxtra.heroLinearGradientOverlay;
            option['style'] = source;
            source = 32;
            target = romeon[source];
            target = output.bind(report)(target);
            target = target.VerticalGradient;
            target = target.START;
            option['start'] = target;
            source = romeon[source];
            source = output.bind(report)(source);
            source = source.VerticalGradient;
            source = source.END;
            option['end'] = source;
            source = new Array(3);
            source[0] = papara;
            source[1] = sequen;
            source[2] = ctrled;
            option['colors'] = source;
            option = offset.bind(report)(yankee, option);
            golfie[1] = option;
            option = {};
            yankee = foxtra.heroFooterContainer;
            option['style'] = yankee;
            yankee = {};
            source = foxtra.heroFooterLeftContainer;
            yankee['style'] = source;
            source = 33;
            source = romeon[source];
            ctrled = whisks.bind(report)(source);
            source = {};
            source['assetUrl'] = vacuum;
            source = offset.bind(report)(ctrled, source);
            ctrled = new Array(2);
            ctrled[0] = source;
            source = 34;
            source = romeon[source];
            source = output.bind(report)(source);
            papara = source.Stack;
            sequen = {'direction': 'horizontal', 'align': 'center', 'spacing': 4};
            vacuum = 28;
            source = romeon[vacuum];
            source = output.bind(report)(source);
            status = source.Text;
            target = {'variant': 'text-xs/medium', 'color': 'text-muted'};
            source = 'text-xs/medium';
            limora = romeon[sierra];
            limora = output.bind(report)(limora);
            equals = limora.intl;
            limora = equals.string;
            sierra = romeon[sierra];
            sierra = output.bind(report)(sierra);
            sierra = sierra.t;
            sierra = sierra.VAbKhI;
            sierra = limora.bind(equals)(sierra);
            target['children'] = sierra;
            status = offset.bind(report)(status, target);
            target = new Array(3);
            target[0] = status;
            sierra = _closure1_slot5;
            status = {};
            limora = 35;
            limora = romeon[limora];
            limora = whisks.bind(report)(limora);
            status['source'] = limora;
            limora = {'height': 16, 'width': 16};
            status['style'] = limora;
            status = offset.bind(report)(sierra, status);
            target[1] = status;
            status = romeon[vacuum];
            status = output.bind(report)(status);
            sierra = status.Text;
            status = {'variant': 'text-xs/medium', 'color': 'text-normal'};
            limora = entity.config;
            limora = limora.messages;
            limora = limora.gamePublisher;
            status['children'] = limora;
            status = offset.bind(report)(sierra, status);
            target[2] = status;
            sequen['children'] = target;
            sequen = tangon.bind(report)(papara, sequen);
            ctrled[1] = sequen;
            yankee['children'] = ctrled;
            ctrled = tangon.bind(report)(result, yankee);
            yankee = new Array(2);
            yankee[0] = ctrled;
            romeon = romeon[vacuum];
            romeon = output.bind(report)(romeon);
            output = romeon.Text;
            romeon = {};
            romeon['variant'] = source;
            romeon['children'] = echoed;
            romeon = offset.bind(report)(output, romeon);
            yankee[1] = romeon;
            option['children'] = yankee;
            option = tangon.bind(report)(result, option);
            golfie[2] = option;
            oscard['children'] = golfie;
            golfie = tangon.bind(report)(result, oscard);
            oscard = new Array(3);
            oscard[0] = golfie;
            golfie = {};
            option = foxtra.detailsWrapper;
            golfie['style'] = option;
            echoed = {};
            option = foxtra.detailsContainer;
            echoed['style'] = option;
            option = {};
            yankee = foxtra.rewardImgContainer;
            option['style'] = yankee;
            output = _closure1_slot10;
            romeon = _closure1_slot1;
            source = _closure1_slot2;
            if(verify) { _fun00002_ip = 2703; continue _fun00001 }
 2663:
            verify = 37;
            verify = source[verify];
            yankee = romeon.bind(report)(verify);
            verify = {'quest': null, 'height': 64, 'width': 64};
            verify['quest'] = entity;
            verify = output.bind(report)(yankee, verify);
            _fun00002_ip = 2747; continue _fun00001;
 2703:
            yankee = 36;
            yankee = source[yankee];
            romeon = romeon.bind(report)(yankee);
            yankee = {};
            yankee['quest'] = entity;
            update = update.percentComplete;
            yankee['progress'] = update;
            update = 'sm';
            yankee['size'] = update;
            verify = output.bind(report)(romeon, yankee);
 2747:
            option['children'] = verify;
            option = offset.bind(report)(result, option);
            update = new Array(2);
            update[0] = option;
            verify = _closure1_slot11;
            option = _closure1_slot6;
            source = {};
            yankee = foxtra.detailsTextContainer;
            source['style'] = yankee;
            romeon = _closure1_slot10;
            yankee = _closure1_slot0;
            output = _closure1_slot2;
            ctrled = output[vacuum];
            ctrled = yankee.bind(report)(ctrled);
            sequen = ctrled.Text;
            ctrled = {'variant': 'eyebrow', 'color': 'text-brand'};
            papara = foxtra.questName;
            ctrled['style'] = papara;
            ctrled['children'] = record;
            sequen = romeon.bind(report)(sequen, ctrled);
            ctrled = new Array(3);
            ctrled[0] = sequen;
            sequen = output[vacuum];
            sequen = yankee.bind(report)(sequen);
            record = sequen.Text;
            sequen = {'variant': 'text-md/semibold', 'color': 'header-primary'};
            sequen['children'] = cntext;
            sequen = romeon.bind(report)(record, sequen);
            ctrled[1] = sequen;
            vacuum = output[vacuum];
            vacuum = yankee.bind(report)(vacuum);
            sequen = vacuum.Text;
            vacuum = {'variant': 'text-sm/medium', 'color': 'text-muted'};
            vacuum['children'] = config;
            vacuum = romeon.bind(report)(sequen, vacuum);
            ctrled[2] = vacuum;
            source['children'] = ctrled;
            source = verify.bind(report)(option, source);
            update[1] = source;
            echoed['children'] = update;
            echoed = tangon.bind(report)(result, echoed);
            golfie['children'] = echoed;
            golfie = offset.bind(report)(result, golfie);
            oscard[1] = golfie;
            golfie = {};
            offset = foxtra.buttonContainers;
            golfie['style'] = offset;
            offset = 38;
            offset = output[offset];
            offset = yankee.bind(report)(offset);
            yankee = offset.Button;
            offset = {};
            result = true;
            offset['grow'] = result;
            variable37 = offset;
            variable36 = backup;
            backup = copyDataProperties(variable37, variable36);
            yankee = romeon.bind(report)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = {};
            foxtra = foxtra.overflowButton;
            yankee['style'] = foxtra;
            backup = _closure1_slot1;
            foxtra = 39;
            foxtra = output[foxtra];
            backup = backup.bind(report)(foxtra);
            foxtra = {};
            foxtra['quest'] = entity;
            sizing = !sizing;
            foxtra['showShareLink'] = sizing;
            kiloes = _closure1_slot9;
            kiloes = kiloes.QUESTS_CARD;
            foxtra['location'] = kiloes;
            foxtra = romeon.bind(report)(backup, foxtra);
            yankee['children'] = foxtra;
            yankee = romeon.bind(report)(option, yankee);
            offset[1] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[2] = golfie;
            michal['children'] = oscard;
            entity = entity.id;
            entity = tangon.bind(report)(zuuluu, michal, entity);
            return entity;
        }
    };
    michal = report.bind(option)(michal);
    report = 40;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/quests/native/QuestCard.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['QUEST_CARD_SPACING'] = tangon;
    zuuluu['QuestCard'] = michal;
    return entity;
})();