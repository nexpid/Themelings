// app/modules/quests/native/QuestDisclosureModal/QuestDisclosureModalInner.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    romeon = 0;
    tangon = oscard[romeon];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    backup = 1;
    tangon = oscard[backup];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.HelpdeskArticles;
    var _closure1_slot5 = tangon;
    foxtra = 2;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['flex'] = backup;
    offset = 4;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_24;
    verify['padding'] = kiloes;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    verify['gap'] = kiloes;
    kiloes = 480;
    verify['maxWidth'] = kiloes;
    tangon['container'] = verify;
    verify = {'alignSelf': 'center', 'marginBottom': null, 'width': 248, 'height': 121};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_8;
    verify['marginBottom'] = kiloes;
    tangon['image'] = verify;
    verify = {};
    kiloes = 'auto';
    verify['marginTop'] = kiloes;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_8;
    verify['paddingHorizontal'] = kiloes;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_24;
    verify['marginBottom'] = kiloes;
    tangon['closeButton'] = verify;
    verify = {};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BG_SURFACE_RAISED;
    verify['backgroundColor'] = kiloes;
    verify['borderWidth'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BORDER_SUBTLE;
    verify['borderColor'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderRadius'] = backup;
    backup = '#000';
    verify['shadowColor'] = backup;
    backup = {'width': 0, 'height': 2};
    verify['shadowOffset'] = backup;
    backup = 0.1;
    verify['shadowOpacity'] = backup;
    verify['shadowRadius'] = offset;
    verify['elevation'] = foxtra;
    tangon['targetList'] = verify;
    verify = {'flexDirection': 'row', 'flexWrap': 'nowrap', 'alignItems': 'center'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingLeft'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['gap'] = foxtra;
    tangon['targetItem'] = verify;
    verify = {};
    verify['borderBottomWidth'] = romeon;
    tangon['lastTargetItem'] = verify;
    verify = {'flex': 1, 'paddingVertical': null, 'borderBottomWidth': 1};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['paddingVertical'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.DIVIDER_SUBTLE;
    verify['borderBottomColor'] = offset;
    tangon['disclosureText'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 16;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestDisclosureModal/QuestDisclosureModalInner.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: QuestDisclosureModalInner
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            golfie = entity.isTargetedDisclosure;
            source = entity.gamePublisher;
            update = entity.gameTitle;
            yankee = entity.onClose;
            echoed = entity.cosponsorName;
            entity = _closure1_slot8;
            tangon = undefined;
            verify = entity.bind(tangon)();
            var _closure2_slot0 = verify;
            entity = {};
            romeon = _closure1_slot6;
            output = _closure1_slot0;
            result = _closure1_slot2;
            michal = 5;
            michal = result[michal];
            michal = output.bind(tangon)(michal);
            zuuluu = michal.GlobeEarthIcon;
            michal = {};
            report = 'xs';
            michal['size'] = report;
            michal = romeon.bind(tangon)(zuuluu, michal);
            entity['icon'] = michal;
            sizing = 6;
            michal = result[sizing];
            michal = output.bind(tangon)(michal);
            option = michal.intl;
            zuuluu = option.string;
            michal = result[sizing];
            michal = output.bind(tangon)(michal);
            michal = michal.t;
            michal = michal.xQSdPj;
            michal = zuuluu.bind(option)(michal);
            entity['text'] = michal;
            kiloes = new Array(3);
            kiloes[0] = entity;
            entity = {};
            michal = 7;
            michal = result[michal];
            michal = output.bind(tangon)(michal);
            zuuluu = michal.UserIcon;
            michal = {};
            michal['size'] = report;
            michal = romeon.bind(tangon)(zuuluu, michal);
            entity['icon'] = michal;
            michal = result[sizing];
            michal = output.bind(tangon)(michal);
            option = michal.intl;
            zuuluu = option.string;
            michal = result[sizing];
            michal = output.bind(tangon)(michal);
            michal = michal.t;
            michal = michal.mYt7hY;
            michal = zuuluu.bind(option)(michal);
            entity['text'] = michal;
            kiloes[1] = entity;
            entity = {};
            michal = 8;
            michal = result[michal];
            michal = output.bind(tangon)(michal);
            zuuluu = michal.GameControllerIcon;
            michal = {};
            michal['size'] = report;
            michal = romeon.bind(tangon)(zuuluu, michal);
            entity['icon'] = michal;
            michal = result[sizing];
            michal = output.bind(tangon)(michal);
            report = michal.intl;
            zuuluu = report.string;
            michal = result[sizing];
            michal = output.bind(tangon)(michal);
            michal = michal.t;
            michal = michal.XAsWxc;
            michal = zuuluu.bind(report)(michal);
            entity['text'] = michal;
            kiloes[2] = entity;
            var _closure2_slot1 = kiloes;
            zuuluu = _closure1_slot7;
            michal = _closure1_slot4;
            entity = {};
            report = verify.container;
            entity['style'] = report;
            option = _closure1_slot3;
            report = {};
            backup = _closure1_slot1;
            offset = 9;
            offset = result[offset];
            offset = backup.bind(tangon)(offset);
            report['source'] = offset;
            offset = verify.image;
            report['style'] = offset;
            option = romeon.bind(tangon)(option, report);
            report = new Array(5);
            report[0] = option;
            option = 10;
            option = result[option];
            option = output.bind(tangon)(option);
            offset = option.Text;
            option = {'variant': 'text-md/normal', 'color': 'header-primary'};
            backup = 11;
            backup = result[backup];
            result = output.bind(tangon)(backup);
            output = result.getDisclosureText;
            backup = {};
            backup['gamePublisher'] = source;
            backup['gameTitle'] = update;
            backup['isTargetedDisclosure'] = golfie;
            backup['cosponsorName'] = echoed;
            backup = output.bind(result)(backup);
            option['children'] = backup;
            option = romeon.bind(tangon)(offset, option);
            report[1] = option;
            if(!golfie) { _fun00002_ip = 580; continue _fun00001 }
 511:
            romeon = _closure1_slot6;
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            option = 12;
            option = backup[option];
            option = offset.bind(tangon)(option);
            offset = option.Stack;
            option = {};
            backup = verify.targetList;
            option['style'] = backup;
            backup = kiloes.map;
            foxtra = function(argFoo, argBar) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = argFoo;
                    report = argBar;
                    golfie = entity.icon;
                    romeon = entity.text;
                    tangon = _closure1_slot7;
                    zuuluu = _closure1_slot4;
                    michal = {};
                    verify = _closure2_slot0;
                    oscard = verify.targetItem;
                    michal['style'] = oscard;
                    oscard = new Array(2);
                    oscard[0] = golfie;
                    option = _closure1_slot6;
                    golfie = {};
                    offset = verify.disclosureText;
                    verify = new Array(2);
                    verify[0] = offset;
                    offset = _closure2_slot1;
                    foxtra = offset.length;
                    offset = 1;
                    offset = foxtra - offset;
                    offset = report === offset;
                    if(!offset) { _fun00004_ip = 107; continue _fun00003 }
 97:
                    yankee = _closure2_slot0;
                    offset = yankee.lastTargetItem;
 107:
                    verify[1] = offset;
                    golfie['style'] = verify;
                    yankee = _closure1_slot6;
                    offset = _closure1_slot0;
                    verify = _closure1_slot2;
                    entity = 10;
                    verify = verify[entity];
                    entity = undefined;
                    verify = offset.bind(entity)(verify);
                    offset = verify.Text;
                    verify = {};
                    foxtra = 'text-md/semibold';
                    verify['variant'] = foxtra;
                    verify['children'] = romeon;
                    verify = yankee.bind(entity)(offset, verify);
                    golfie['children'] = verify;
                    golfie = option.bind(entity)(zuuluu, golfie);
                    oscard[1] = golfie;
                    michal['children'] = oscard;
                    entity = tangon.bind(entity)(zuuluu, michal, report);
                    return entity;
                }
            };
            foxtra = backup.bind(kiloes)(foxtra);
            option['children'] = foxtra;
            golfie = romeon.bind(tangon)(offset, option);
 580:
            report[2] = golfie;
            option = _closure1_slot6;
            kiloes = _closure1_slot0;
            romeon = _closure1_slot2;
            golfie = 13;
            golfie = romeon[golfie];
            golfie = kiloes.bind(tangon)(golfie);
            offset = golfie.TextWithIOSLinkWorkaround;
            golfie = {'variant': 'text-md/medium', 'color': 'header-primary'};
            foxtra = romeon[sizing];
            foxtra = kiloes.bind(tangon)(foxtra);
            result = foxtra.intl;
            output = result.format;
            foxtra = romeon[sizing];
            foxtra = kiloes.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            backup = foxtra.tzq9WV;
            foxtra = {};
            update = _closure1_slot1;
            echoed = 14;
            echoed = romeon[echoed];
            source = update.bind(tangon)(echoed);
            update = source.getArticleURL;
            echoed = _closure1_slot5;
            echoed = echoed.QUESTS_PRIVACY_CONTROLS;
            echoed = update.bind(source)(echoed);
            foxtra['privacySettingsUrl'] = echoed;
            foxtra = output.bind(result)(backup, foxtra);
            golfie['children'] = foxtra;
            golfie = option.bind(tangon)(offset, golfie);
            report[3] = golfie;
            golfie = _closure1_slot4;
            oscard = {};
            verify = verify.closeButton;
            oscard['style'] = verify;
            verify = 15;
            verify = romeon[verify];
            verify = kiloes.bind(tangon)(verify);
            offset = verify.Button;
            verify = {'variant': 'primary', 'grow': true, 'size': 'lg'};
            foxtra = romeon[sizing];
            foxtra = kiloes.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            romeon = romeon[sizing];
            romeon = kiloes.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.cpT0Cg;
            romeon = foxtra.bind(backup)(romeon);
            verify['text'] = romeon;
            verify['onPress'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[4] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();