// app/modules/quests/native/QuestDisclosureModal/QuestDisclosureModalInner.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    romeo = 0;
    tango = oscar[romeo];
    entity = undefined;
    tango = report.bind(entity)(tango);
    golf = tango.Image;
    var _closure1_slot3 = golf;
    tango = tango.View;
    var _closure1_slot4 = tango;
    backup = 1;
    tango = oscar[backup];
    tango = report.bind(entity)(tango);
    tango = tango.HelpdeskArticles;
    var _closure1_slot5 = tango;
    foxtrot = 2;
    tango = oscar[foxtrot];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot6 = tango;
    tango = oscar[foxtrot];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    verify['flex'] = backup;
    offset = 4;
    kilo = oscar[offset];
    kilo = yankee.bind(entity)(kilo);
    kilo = kilo.spacing;
    kilo = kilo.PX_24;
    verify['padding'] = kilo;
    kilo = oscar[offset];
    kilo = yankee.bind(entity)(kilo);
    kilo = kilo.spacing;
    kilo = kilo.PX_16;
    verify['gap'] = kilo;
    kilo = 480;
    verify['maxWidth'] = kilo;
    tango['container'] = verify;
    verify = {'alignSelf': 'center', 'marginBottom': null, 'width': 248, 'height': 121};
    kilo = oscar[offset];
    kilo = yankee.bind(entity)(kilo);
    kilo = kilo.spacing;
    kilo = kilo.PX_8;
    verify['marginBottom'] = kilo;
    tango['image'] = verify;
    verify = {};
    kilo = 'auto';
    verify['marginTop'] = kilo;
    kilo = oscar[offset];
    kilo = yankee.bind(entity)(kilo);
    kilo = kilo.spacing;
    kilo = kilo.PX_8;
    verify['paddingHorizontal'] = kilo;
    kilo = oscar[offset];
    kilo = yankee.bind(entity)(kilo);
    kilo = kilo.spacing;
    kilo = kilo.PX_24;
    verify['marginBottom'] = kilo;
    tango['closeButton'] = verify;
    verify = {};
    kilo = oscar[offset];
    kilo = yankee.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BG_SURFACE_RAISED;
    verify['backgroundColor'] = kilo;
    verify['borderWidth'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BORDER_SUBTLE;
    verify['borderColor'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderRadius'] = backup;
    backup = '#000';
    verify['shadowColor'] = backup;
    backup = {'width': 0, 'height': 2};
    verify['shadowOffset'] = backup;
    backup = 0.1;
    verify['shadowOpacity'] = backup;
    verify['shadowRadius'] = offset;
    verify['elevation'] = foxtrot;
    tango['targetList'] = verify;
    verify = {'flexDirection': 'row', 'flexWrap': 'nowrap', 'alignItems': 'center'};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    verify['paddingLeft'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_16;
    verify['gap'] = foxtrot;
    tango['targetItem'] = verify;
    verify = {};
    verify['borderBottomWidth'] = romeo;
    tango['lastTargetItem'] = verify;
    verify = {'flex': 1, 'paddingVertical': null, 'borderBottomWidth': 1};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_12;
    verify['paddingVertical'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.DIVIDER_SUBTLE;
    verify['borderBottomColor'] = offset;
    tango['disclosureText'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 16;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/quests/native/QuestDisclosureModal/QuestDisclosureModalInner.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: QuestDisclosureModalInner
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            golf = entity.isTargetedDisclosure;
            source = entity.gamePublisher;
            update = entity.gameTitle;
            yankee = entity.onClose;
            echo = entity.cosponsorName;
            entity = _closure1_slot8;
            tango = undefined;
            verify = entity.bind(tango)();
            var _closure2_slot0 = verify;
            entity = {};
            romeo = _closure1_slot6;
            output = _closure1_slot0;
            result = _closure1_slot2;
            mike = 5;
            mike = result[mike];
            mike = output.bind(tango)(mike);
            zulu = mike.GlobeEarthIcon;
            mike = {};
            report = 'xs';
            mike['size'] = report;
            mike = romeo.bind(tango)(zulu, mike);
            entity['icon'] = mike;
            sizing = 6;
            mike = result[sizing];
            mike = output.bind(tango)(mike);
            options = mike.intl;
            zulu = options.string;
            mike = result[sizing];
            mike = output.bind(tango)(mike);
            mike = mike.t;
            mike = mike.xQSdPj;
            mike = zulu.bind(options)(mike);
            entity['text'] = mike;
            kilo = new Array(3);
            kilo[0] = entity;
            entity = {};
            mike = 7;
            mike = result[mike];
            mike = output.bind(tango)(mike);
            zulu = mike.UserIcon;
            mike = {};
            mike['size'] = report;
            mike = romeo.bind(tango)(zulu, mike);
            entity['icon'] = mike;
            mike = result[sizing];
            mike = output.bind(tango)(mike);
            options = mike.intl;
            zulu = options.string;
            mike = result[sizing];
            mike = output.bind(tango)(mike);
            mike = mike.t;
            mike = mike.mYt7hY;
            mike = zulu.bind(options)(mike);
            entity['text'] = mike;
            kilo[1] = entity;
            entity = {};
            mike = 8;
            mike = result[mike];
            mike = output.bind(tango)(mike);
            zulu = mike.GameControllerIcon;
            mike = {};
            mike['size'] = report;
            mike = romeo.bind(tango)(zulu, mike);
            entity['icon'] = mike;
            mike = result[sizing];
            mike = output.bind(tango)(mike);
            report = mike.intl;
            zulu = report.string;
            mike = result[sizing];
            mike = output.bind(tango)(mike);
            mike = mike.t;
            mike = mike.XAsWxc;
            mike = zulu.bind(report)(mike);
            entity['text'] = mike;
            kilo[2] = entity;
            var _closure2_slot1 = kilo;
            zulu = _closure1_slot7;
            mike = _closure1_slot4;
            entity = {};
            report = verify.container;
            entity['style'] = report;
            options = _closure1_slot3;
            report = {};
            backup = _closure1_slot1;
            offset = 9;
            offset = result[offset];
            offset = backup.bind(tango)(offset);
            report['source'] = offset;
            offset = verify.image;
            report['style'] = offset;
            options = romeo.bind(tango)(options, report);
            report = new Array(5);
            report[0] = options;
            options = 10;
            options = result[options];
            options = output.bind(tango)(options);
            offset = options.Text;
            options = {'variant': 'text-md/normal', 'color': 'header-primary'};
            backup = 11;
            backup = result[backup];
            result = output.bind(tango)(backup);
            output = result.getDisclosureText;
            backup = {};
            backup['gamePublisher'] = source;
            backup['gameTitle'] = update;
            backup['isTargetedDisclosure'] = golf;
            backup['cosponsorName'] = echo;
            backup = output.bind(result)(backup);
            options['children'] = backup;
            options = romeo.bind(tango)(offset, options);
            report[1] = options;
            if(!golf) { _fun00002_ip = 580; continue _fun00001 }
 511:
            romeo = _closure1_slot6;
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            options = 12;
            options = backup[options];
            options = offset.bind(tango)(options);
            offset = options.Stack;
            options = {};
            backup = verify.targetList;
            options['style'] = backup;
            backup = kilo.map;
            foxtrot = function(argFoo, argBar) {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = argFoo;
                    report = argBar;
                    golf = entity.icon;
                    romeo = entity.text;
                    tango = _closure1_slot7;
                    zulu = _closure1_slot4;
                    mike = {};
                    verify = _closure2_slot0;
                    oscar = verify.targetItem;
                    mike['style'] = oscar;
                    oscar = new Array(2);
                    oscar[0] = golf;
                    options = _closure1_slot6;
                    golf = {};
                    offset = verify.disclosureText;
                    verify = new Array(2);
                    verify[0] = offset;
                    offset = _closure2_slot1;
                    foxtrot = offset.length;
                    offset = 1;
                    offset = foxtrot - offset;
                    offset = report === offset;
                    if(!offset) { _fun00004_ip = 107; continue _fun00003 }
 97:
                    yankee = _closure2_slot0;
                    offset = yankee.lastTargetItem;
 107:
                    verify[1] = offset;
                    golf['style'] = verify;
                    yankee = _closure1_slot6;
                    offset = _closure1_slot0;
                    verify = _closure1_slot2;
                    entity = 10;
                    verify = verify[entity];
                    entity = undefined;
                    verify = offset.bind(entity)(verify);
                    offset = verify.Text;
                    verify = {};
                    foxtrot = 'text-md/semibold';
                    verify['variant'] = foxtrot;
                    verify['children'] = romeo;
                    verify = yankee.bind(entity)(offset, verify);
                    golf['children'] = verify;
                    golf = options.bind(entity)(zulu, golf);
                    oscar[1] = golf;
                    mike['children'] = oscar;
                    entity = tango.bind(entity)(zulu, mike, report);
                    return entity;
                }
            };
            foxtrot = backup.bind(kilo)(foxtrot);
            options['children'] = foxtrot;
            golf = romeo.bind(tango)(offset, options);
 580:
            report[2] = golf;
            options = _closure1_slot6;
            kilo = _closure1_slot0;
            romeo = _closure1_slot2;
            golf = 13;
            golf = romeo[golf];
            golf = kilo.bind(tango)(golf);
            offset = golf.TextWithIOSLinkWorkaround;
            golf = {'variant': 'text-md/medium', 'color': 'header-primary'};
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            result = foxtrot.intl;
            output = result.format;
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            backup = foxtrot.tzq9WV;
            foxtrot = {};
            update = _closure1_slot1;
            echo = 14;
            echo = romeo[echo];
            source = update.bind(tango)(echo);
            update = source.getArticleURL;
            echo = _closure1_slot5;
            echo = echo.QUESTS_PRIVACY_CONTROLS;
            echo = update.bind(source)(echo);
            foxtrot['privacySettingsUrl'] = echo;
            foxtrot = output.bind(result)(backup, foxtrot);
            golf['children'] = foxtrot;
            golf = options.bind(tango)(offset, golf);
            report[3] = golf;
            golf = _closure1_slot4;
            oscar = {};
            verify = verify.closeButton;
            oscar['style'] = verify;
            verify = 15;
            verify = romeo[verify];
            verify = kilo.bind(tango)(verify);
            offset = verify.Button;
            verify = {'variant': 'primary', 'grow': true, 'size': 'lg'};
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            romeo = romeo[sizing];
            romeo = kilo.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.cpT0Cg;
            romeo = foxtrot.bind(backup)(romeo);
            verify['text'] = romeo;
            verify['onPress'] = yankee;
            verify = options.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[4] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();