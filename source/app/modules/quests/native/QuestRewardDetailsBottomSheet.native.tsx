// app/modules/quests/native/QuestRewardDetailsBottomSheet.native.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot6 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 4;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingHorizontal'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['paddingBottom'] = foxtra;
    tangon['wrapper'] = verify;
    verify = {};
    verify['flexShrink'] = romeon;
    tangon['rewardDetailsCopy'] = verify;
    verify = {};
    verify['height'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BORDER_STRONG;
    verify['backgroundColor'] = offset;
    tangon['separator'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestRewardDetailsBottomSheet.native.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: QuestRewardDetailsBottomSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            report = michal.questId;
            sizing = _closure1_slot0;
            kiloes = _closure1_slot2;
            michal = 5;
            michal = kiloes[michal];
            tangon = undefined;
            zuuluu = sizing.bind(tangon)(michal);
            michal = zuuluu.useNonNullableQuest;
            ctrled = michal.bind(zuuluu)(report);
            var _closure2_slot0 = ctrled;
            michal = _closure1_slot8;
            echoed = michal.bind(tangon)();
            report = _closure1_slot3;
            oscard = report.useMemo;
            michal = ctrled.config;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 6;
                michal = michal[entity];
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                zuuluu = entity.SharedQuestFields;
                michal = zuuluu.build;
                entity = _closure2_slot0;
                entity = entity.config;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            update = oscard.bind(report)(michal, zuuluu);
            oscard = report.useMemo;
            michal = ctrled.config;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 7;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.isCollectibleQuestRewardPremiumExtendable;
                entity = _closure2_slot0;
                entity = entity.config;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            oscard = oscard.bind(report)(michal, zuuluu);
            var _closure2_slot1 = oscard;
            zuuluu = report.useMemo;
            michal = new Array(2);
            michal[0] = ctrled;
            michal[1] = oscard;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    report = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 7;
                    entity = michal[entity];
                    oscard = undefined;
                    option = report.bind(oscard)(entity);
                    golfie = option.getQuestPrimaryReward;
                    zuuluu = _closure2_slot0;
                    zuuluu = golfie.bind(option)(zuuluu);
                    zuuluu = zuuluu.type;
                    golfie = 8;
                    michal = michal[golfie];
                    michal = report.bind(oscard)(michal);
                    michal = michal.QuestRewardTypes;
                    michal = michal.COLLECTIBLE;
                    if(!(michal !== zuuluu)) { _fun00004_ip = 172; continue _fun00003 }
 76:
                    report = _closure1_slot0;
                    michal = _closure1_slot2;
                    michal = michal[golfie];
                    michal = report.bind(oscard)(michal);
                    michal = michal.QuestRewardTypes;
                    michal = michal.FRACTIONAL_PREMIUM;
                    if(!(michal !== zuuluu)) { _fun00004_ip = 113; continue _fun00003 }
 109:
                    michal = null;
                    return michal;
 113:
                    golfie = _closure1_slot0;
                    option = _closure1_slot2;
                    michal = 9;
                    zuuluu = option[michal];
                    zuuluu = golfie.bind(oscard)(zuuluu);
                    report = zuuluu.intl;
                    zuuluu = report.string;
                    michal = option[michal];
                    michal = golfie.bind(oscard)(michal);
                    michal = michal.t;
                    michal = michal.maMtqK;
                    michal = zuuluu.bind(report)(michal);
                    return michal;
 172:
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    golfie = 9;
                    michal = michal[golfie];
                    michal = zuuluu.bind(oscard)(michal);
                    zuuluu = michal.intl;
                    michal = zuuluu.string;
                    entity = _closure2_slot1;
                    report = _closure1_slot0;
                    tangon = _closure1_slot2;
                    tangon = tangon[golfie];
                    tangon = report.bind(oscard)(tangon);
                    tangon = tangon.t;
                    if(entity) { _fun00004_ip = 241; continue _fun00003 }
 231:
                    entity = tangon.ABD2CA;
                    _fun00004_ip = 249; continue _fun00003;
 241:
                    entity = tangon.66YyBA;
 249:
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
                }
            };
            output = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot5;
            entity = 10;
            entity = kiloes[entity];
            entity = sizing.bind(tangon)(entity);
            michal = entity.BottomSheet;
            entity = {};
            report = true;
            entity['startExpanded'] = report;
            golfie = _closure1_slot6;
            yankee = 11;
            report = kiloes[yankee];
            report = sizing.bind(tangon)(report);
            oscard = report.Stack;
            report = {};
            source = 'vertical';
            report['direction'] = source;
            result = _closure1_slot1;
            foxtra = 4;
            option = kiloes[foxtra];
            option = result.bind(tangon)(option);
            option = option.spacing;
            option = option.PX_16;
            report['spacing'] = option;
            option = echoed.wrapper;
            report['style'] = option;
            option = kiloes[yankee];
            option = sizing.bind(tangon)(option);
            verify = option.Stack;
            option = {'align': 'center', 'direction': 'horizontal'};
            offset = kiloes[foxtra];
            offset = result.bind(tangon)(offset);
            offset = offset.spacing;
            offset = offset.PX_16;
            option['spacing'] = offset;
            offset = 12;
            offset = kiloes[offset];
            romeon = result.bind(tangon)(offset);
            offset = {'quest': null, 'height': 56, 'width': 56, 'withAnimation': true};
            offset['quest'] = ctrled;
            romeon = zuuluu.bind(tangon)(romeon, offset);
            offset = new Array(2);
            offset[0] = romeon;
            yankee = kiloes[yankee];
            yankee = sizing.bind(tangon)(yankee);
            romeon = yankee.Stack;
            yankee = {};
            yankee['direction'] = source;
            foxtra = kiloes[foxtra];
            foxtra = result.bind(tangon)(foxtra);
            foxtra = foxtra.spacing;
            foxtra = foxtra.PX_4;
            yankee['spacing'] = foxtra;
            foxtra = echoed.rewardDetailsCopy;
            yankee['style'] = foxtra;
            result = 13;
            foxtra = kiloes[result];
            foxtra = sizing.bind(tangon)(foxtra);
            source = foxtra.Text;
            foxtra = {'variant': 'eyebrow', 'color': 'text-secondary'};
            ctrled = 9;
            vacuum = kiloes[ctrled];
            vacuum = sizing.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = kiloes[ctrled];
            ctrled = sizing.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.jyYgZ2;
            ctrled = vacuum.bind(sequen)(ctrled);
            foxtra['children'] = ctrled;
            source = zuuluu.bind(tangon)(source, foxtra);
            foxtra = new Array(2);
            foxtra[0] = source;
            kiloes = kiloes[result];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.Text;
            kiloes = {'variant': 'heading-lg/semibold', 'color': 'text-primary'};
            update = update.defaultReward;
            update = update.messages;
            update = update.name;
            kiloes['children'] = update;
            kiloes = zuuluu.bind(tangon)(sizing, kiloes);
            foxtra[1] = kiloes;
            yankee['children'] = foxtra;
            yankee = golfie.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            option['children'] = offset;
            verify = golfie.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            verify = null;
            verify = verify != output;
            if(!verify) { _fun00002_ip = 717; continue _fun00001 }
 613:
            romeon = _closure1_slot6;
            yankee = _closure1_slot7;
            offset = {};
            sizing = _closure1_slot5;
            kiloes = _closure1_slot4;
            foxtra = {};
            echoed = echoed.separator;
            foxtra['style'] = echoed;
            kiloes = sizing.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            kiloes = _closure1_slot0;
            backup = _closure1_slot2;
            backup = backup[result];
            backup = kiloes.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {'variant': 'text-md/normal', 'color': 'text-secondary'};
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            verify = romeon.bind(tangon)(yankee, offset);
 717:
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();