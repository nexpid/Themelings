// app/modules/quests/native/QuestRewardDetailsBottomSheet.native.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {};
            report = _closure1_slot1;
            zuuluu = _closure1_slot2;
            golfie = 3;
            zuuluu = zuuluu[golfie];
            oscard = undefined;
            zuuluu = report.bind(oscard)(zuuluu);
            zuuluu = zuuluu.spacing;
            zuuluu = zuuluu.PX_16;
            michal['paddingHorizontal'] = zuuluu;
            report = argFoo;
            zuuluu = undefined;
            if(!report) { _fun00002_ip = 79; continue _fun00001 }
 51:
            report = _closure1_slot1;
            tangon = _closure1_slot2;
            tangon = tangon[golfie];
            tangon = report.bind(oscard)(tangon);
            tangon = tangon.spacing;
            zuuluu = tangon.PX_8;
 79:
            michal['paddingBottom'] = zuuluu;
            entity['wrapper'] = michal;
            michal = {};
            zuuluu = 1;
            michal['flexShrink'] = zuuluu;
            entity['rewardDetailsCopy'] = michal;
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestRewardDetailsBottomSheet.native.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: QuestRewardDetailsBottomSheet
        michal = argFoo;
        report = michal.questId;
        foxtra = _closure1_slot0;
        kiloes = _closure1_slot2;
        michal = 4;
        michal = kiloes[michal];
        tangon = undefined;
        zuuluu = foxtra.bind(tangon)(michal);
        michal = zuuluu.useNonNullableQuest;
        output = michal.bind(zuuluu)(report);
        var _closure2_slot0 = output;
        zuuluu = _closure1_slot6;
        michal = 5;
        michal = kiloes[michal];
        report = foxtra.bind(tangon)(michal);
        michal = report.isAndroid;
        michal = michal.bind(report)();
        yankee = zuuluu.bind(tangon)(michal);
        report = _closure1_slot3;
        zuuluu = report.useMemo;
        oscard = output.config;
        michal = new Array(1);
        michal[0] = oscard;
        entity = function() {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 6;
            michal = michal[entity];
            entity = undefined;
            entity = zuuluu.bind(entity)(michal);
            zuuluu = entity.SharedQuestFields;
            michal = zuuluu.build;
            entity = _closure2_slot0;
            entity = entity.config;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        backup = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot4;
        entity = 7;
        entity = kiloes[entity];
        entity = foxtra.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        report = true;
        entity['startExpanded'] = report;
        golfie = _closure1_slot5;
        verify = 8;
        report = kiloes[verify];
        report = foxtra.bind(tangon)(report);
        oscard = report.Stack;
        report = {'align': 'center', 'direction': 'horizontal'};
        sizing = _closure1_slot1;
        romeon = 3;
        option = kiloes[romeon];
        option = sizing.bind(tangon)(option);
        option = option.spacing;
        option = option.PX_16;
        report['spacing'] = option;
        option = yankee.wrapper;
        report['style'] = option;
        option = 9;
        option = kiloes[option];
        offset = sizing.bind(tangon)(option);
        option = {'quest': null, 'height': 56, 'width': 56};
        option['quest'] = output;
        offset = zuuluu.bind(tangon)(offset, option);
        option = new Array(2);
        option[0] = offset;
        verify = kiloes[verify];
        verify = foxtra.bind(tangon)(verify);
        offset = verify.Stack;
        verify = {};
        output = 'vertical';
        verify['direction'] = output;
        romeon = kiloes[romeon];
        romeon = sizing.bind(tangon)(romeon);
        romeon = romeon.spacing;
        romeon = romeon.PX_4;
        verify['spacing'] = romeon;
        yankee = yankee.rewardDetailsCopy;
        verify['style'] = yankee;
        romeon = 10;
        yankee = kiloes[romeon];
        yankee = foxtra.bind(tangon)(yankee);
        sizing = yankee.Text;
        yankee = {'variant': 'eyebrow', 'color': 'text-secondary'};
        output = 11;
        result = kiloes[output];
        result = foxtra.bind(tangon)(result);
        echoed = result.intl;
        result = echoed.string;
        output = kiloes[output];
        output = foxtra.bind(tangon)(output);
        output = output.t;
        output = output.jyYgZ2;
        output = result.bind(echoed)(output);
        yankee['children'] = output;
        sizing = zuuluu.bind(tangon)(sizing, yankee);
        yankee = new Array(2);
        yankee[0] = sizing;
        romeon = kiloes[romeon];
        romeon = foxtra.bind(tangon)(romeon);
        foxtra = romeon.Text;
        romeon = {'variant': 'heading-lg/semibold', 'color': 'text-primary'};
        backup = backup.defaultReward;
        backup = backup.messages;
        backup = backup.name;
        romeon['children'] = backup;
        romeon = zuuluu.bind(tangon)(foxtra, romeon);
        yankee[1] = romeon;
        verify['children'] = yankee;
        verify = golfie.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();