// app/modules/quests/native/QuestRewardDetailsBottomSheet.native.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {};
            golfie = _closure1_slot1;
            tangon = _closure1_slot2;
            oscard = 4;
            tangon = tangon[oscard];
            report = undefined;
            tangon = golfie.bind(report)(tangon);
            tangon = tangon.spacing;
            tangon = tangon.PX_16;
            michal['paddingHorizontal'] = tangon;
            golfie = argFoo;
            tangon = undefined;
            if(!golfie) { _fun00002_ip = 79; continue _fun00001 }
 51:
            option = _closure1_slot1;
            golfie = _closure1_slot2;
            golfie = golfie[oscard];
            golfie = option.bind(report)(golfie);
            golfie = golfie.spacing;
            tangon = golfie.PX_8;
 79:
            michal['paddingBottom'] = tangon;
            entity['wrapper'] = michal;
            michal = {};
            tangon = 1;
            michal['flexShrink'] = tangon;
            entity['rewardDetailsCopy'] = michal;
            michal = {};
            michal['height'] = tangon;
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            zuuluu = zuuluu[oscard];
            zuuluu = tangon.bind(report)(zuuluu);
            zuuluu = zuuluu.colors;
            zuuluu = zuuluu.BORDER_STRONG;
            michal['backgroundColor'] = zuuluu;
            entity['separator'] = michal;
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestRewardDetailsBottomSheet.native.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: QuestRewardDetailsBottomSheet
        michal = argFoo;
        report = michal.questId;
        offset = _closure1_slot0;
        romeon = _closure1_slot2;
        michal = 5;
        michal = romeon[michal];
        tangon = undefined;
        zuuluu = offset.bind(tangon)(michal);
        michal = zuuluu.useNonNullableQuest;
        source = michal.bind(zuuluu)(report);
        var _closure2_slot0 = source;
        zuuluu = _closure1_slot7;
        michal = 6;
        michal = romeon[michal];
        report = offset.bind(tangon)(michal);
        michal = report.isAndroid;
        michal = michal.bind(report)();
        kiloes = zuuluu.bind(tangon)(michal);
        report = _closure1_slot3;
        oscard = report.useMemo;
        michal = source.config;
        zuuluu = new Array(1);
        zuuluu[0] = michal;
        michal = function() {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 7;
            michal = michal[entity];
            entity = undefined;
            entity = zuuluu.bind(entity)(michal);
            zuuluu = entity.SharedQuestFields;
            michal = zuuluu.build;
            entity = _closure2_slot0;
            entity = entity.config;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        ctrled = oscard.bind(report)(michal, zuuluu);
        oscard = report.useMemo;
        michal = source.config;
        zuuluu = new Array(1);
        zuuluu[0] = michal;
        michal = function() {
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 8;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.isCollectibleQuestRewardPremiumExtendable;
            entity = _closure2_slot0;
            entity = entity.config;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        oscard = oscard.bind(report)(michal, zuuluu);
        var _closure2_slot1 = oscard;
        zuuluu = report.useMemo;
        michal = new Array(2);
        michal[0] = source;
        michal[1] = oscard;
        entity = function() {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                oscard = _closure1_slot0;
                zuuluu = _closure1_slot2;
                michal = 8;
                michal = zuuluu[michal];
                report = undefined;
                option = oscard.bind(report)(michal);
                golfie = option.getQuestPrimaryReward;
                tangon = _closure2_slot0;
                tangon = golfie.bind(option)(tangon);
                tangon = tangon.type;
                golfie = 9;
                zuuluu = zuuluu[golfie];
                zuuluu = oscard.bind(report)(zuuluu);
                zuuluu = zuuluu.QuestRewardTypes;
                zuuluu = zuuluu.REWARD_CODE;
                if(!(zuuluu !== tangon)) { _fun00004_ip = 484; continue _fun00003 }
 79:
                oscard = _closure1_slot0;
                zuuluu = _closure1_slot2;
                zuuluu = zuuluu[golfie];
                zuuluu = oscard.bind(report)(zuuluu);
                zuuluu = zuuluu.QuestRewardTypes;
                zuuluu = zuuluu.COLLECTIBLE;
                if(!(zuuluu !== tangon)) { _fun00004_ip = 400; continue _fun00003 }
 115:
                oscard = _closure1_slot0;
                zuuluu = _closure1_slot2;
                zuuluu = zuuluu[golfie];
                zuuluu = oscard.bind(report)(zuuluu);
                zuuluu = zuuluu.QuestRewardTypes;
                zuuluu = zuuluu.IN_GAME;
                if(!(zuuluu !== tangon)) { _fun00004_ip = 341; continue _fun00003 }
 151:
                oscard = _closure1_slot0;
                zuuluu = _closure1_slot2;
                zuuluu = zuuluu[golfie];
                zuuluu = oscard.bind(report)(zuuluu);
                zuuluu = zuuluu.QuestRewardTypes;
                zuuluu = zuuluu.VIRTUAL_CURRENCY;
                if(!(zuuluu !== tangon)) { _fun00004_ip = 282; continue _fun00003 }
 184:
                oscard = _closure1_slot0;
                zuuluu = _closure1_slot2;
                zuuluu = zuuluu[golfie];
                zuuluu = oscard.bind(report)(zuuluu);
                zuuluu = zuuluu.QuestRewardTypes;
                zuuluu = zuuluu.FRACTIONAL_PREMIUM;
                if(!(zuuluu !== tangon)) { _fun00004_ip = 223; continue _fun00003 }
 217:
                zuuluu = '';
                return zuuluu;
 223:
                golfie = _closure1_slot0;
                option = _closure1_slot2;
                zuuluu = 10;
                tangon = option[zuuluu];
                tangon = golfie.bind(report)(tangon);
                oscard = tangon.intl;
                tangon = oscard.string;
                zuuluu = option[zuuluu];
                zuuluu = golfie.bind(report)(zuuluu);
                zuuluu = zuuluu.t;
                zuuluu = zuuluu.maMtqK;
                zuuluu = tangon.bind(oscard)(zuuluu);
                return zuuluu;
 282:
                golfie = _closure1_slot0;
                option = _closure1_slot2;
                zuuluu = 10;
                tangon = option[zuuluu];
                tangon = golfie.bind(report)(tangon);
                oscard = tangon.intl;
                tangon = oscard.string;
                zuuluu = option[zuuluu];
                zuuluu = golfie.bind(report)(zuuluu);
                zuuluu = zuuluu.t;
                zuuluu = zuuluu.c2uVzc;
                zuuluu = tangon.bind(oscard)(zuuluu);
                return zuuluu;
 341:
                golfie = _closure1_slot0;
                option = _closure1_slot2;
                zuuluu = 10;
                tangon = option[zuuluu];
                tangon = golfie.bind(report)(tangon);
                oscard = tangon.intl;
                tangon = oscard.string;
                zuuluu = option[zuuluu];
                zuuluu = golfie.bind(report)(zuuluu);
                zuuluu = zuuluu.t;
                zuuluu = zuuluu.efPXsr;
                zuuluu = tangon.bind(oscard)(zuuluu);
                return zuuluu;
 400:
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot2;
                option = 10;
                zuuluu = zuuluu[option];
                zuuluu = tangon.bind(report)(zuuluu);
                tangon = zuuluu.intl;
                zuuluu = tangon.string;
                michal = _closure2_slot1;
                golfie = _closure1_slot0;
                oscard = _closure1_slot2;
                oscard = oscard[option];
                oscard = golfie.bind(report)(oscard);
                oscard = oscard.t;
                if(michal) { _fun00004_ip = 469; continue _fun00003 }
 459:
                michal = oscard.ABD2CA;
                _fun00004_ip = 477; continue _fun00003;
 469:
                michal = oscard.66YyBA;
 477:
                michal = zuuluu.bind(tangon)(michal);
                return michal;
 484:
                tangon = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 10;
                michal = oscard[entity];
                michal = tangon.bind(report)(michal);
                zuuluu = michal.intl;
                michal = zuuluu.string;
                entity = oscard[entity];
                entity = tangon.bind(report)(entity);
                entity = entity.t;
                entity = entity.rc9liI;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            }
        };
        yankee = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot5;
        entity = 11;
        entity = romeon[entity];
        entity = offset.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        report = true;
        entity['startExpanded'] = report;
        golfie = _closure1_slot6;
        output = 12;
        report = romeon[output];
        report = offset.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        update = 'vertical';
        report['direction'] = update;
        echoed = _closure1_slot1;
        verify = 4;
        option = romeon[verify];
        option = echoed.bind(tangon)(option);
        option = option.spacing;
        option = option.PX_16;
        report['spacing'] = option;
        option = kiloes.wrapper;
        report['style'] = option;
        option = romeon[output];
        option = offset.bind(tangon)(option);
        backup = option.Stack;
        option = {'align': 'center', 'direction': 'horizontal'};
        sizing = romeon[verify];
        sizing = echoed.bind(tangon)(sizing);
        sizing = sizing.spacing;
        sizing = sizing.PX_16;
        option['spacing'] = sizing;
        sizing = 13;
        sizing = romeon[sizing];
        result = echoed.bind(tangon)(sizing);
        sizing = {'quest': null, 'height': 56, 'width': 56};
        sizing['quest'] = source;
        result = zuuluu.bind(tangon)(result, sizing);
        sizing = new Array(2);
        sizing[0] = result;
        output = romeon[output];
        output = offset.bind(tangon)(output);
        result = output.Stack;
        output = {};
        output['direction'] = update;
        verify = romeon[verify];
        verify = echoed.bind(tangon)(verify);
        verify = verify.spacing;
        verify = verify.PX_4;
        output['spacing'] = verify;
        verify = kiloes.rewardDetailsCopy;
        output['style'] = verify;
        verify = 14;
        echoed = romeon[verify];
        echoed = offset.bind(tangon)(echoed);
        update = echoed.Text;
        echoed = {'variant': 'eyebrow', 'color': 'text-secondary'};
        source = 10;
        vacuum = romeon[source];
        vacuum = offset.bind(tangon)(vacuum);
        sequen = vacuum.intl;
        vacuum = sequen.string;
        source = romeon[source];
        source = offset.bind(tangon)(source);
        source = source.t;
        source = source.jyYgZ2;
        source = vacuum.bind(sequen)(source);
        echoed['children'] = source;
        update = zuuluu.bind(tangon)(update, echoed);
        echoed = new Array(2);
        echoed[0] = update;
        update = romeon[verify];
        update = offset.bind(tangon)(update);
        source = update.Text;
        update = {'variant': 'heading-lg/semibold', 'color': 'text-primary'};
        ctrled = ctrled.defaultReward;
        ctrled = ctrled.messages;
        ctrled = ctrled.name;
        update['children'] = ctrled;
        update = zuuluu.bind(tangon)(source, update);
        echoed[1] = update;
        output['children'] = echoed;
        output = golfie.bind(tangon)(result, output);
        sizing[1] = output;
        option['children'] = sizing;
        backup = golfie.bind(tangon)(backup, option);
        option = new Array(3);
        option[0] = backup;
        backup = _closure1_slot4;
        foxtra = {};
        kiloes = kiloes.separator;
        foxtra['style'] = kiloes;
        foxtra = zuuluu.bind(tangon)(backup, foxtra);
        option[1] = foxtra;
        verify = romeon[verify];
        verify = offset.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'variant': 'text-md/normal', 'color': 'text-secondary'};
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();