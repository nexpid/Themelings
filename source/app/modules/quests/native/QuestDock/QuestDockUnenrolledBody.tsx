// app/modules/quests/native/QuestDock/QuestDockUnenrolledBody.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: SimplifiedInstructions
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.quest;
            var _closure2_slot0 = entity;
            report = _closure1_slot3;
            tangon = report.useMemo;
            oscard = entity.config;
            zuuluu = new Array(1);
            zuuluu[0] = oscard;
            michal = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 9;
                michal = michal[entity];
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                zuuluu = entity.SharedQuestFields;
                michal = zuuluu.build;
                entity = _closure2_slot0;
                entity = entity.config;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            foxtra = tangon.bind(report)(michal, zuuluu);
            verify = _closure1_slot0;
            option = _closure1_slot2;
            michal = 10;
            michal = option[michal];
            tangon = undefined;
            report = verify.bind(tangon)(michal);
            zuuluu = report.getCollectibleQuestRewardDuration;
            michal = entity.config;
            source = zuuluu.bind(report)(michal);
            michal = 11;
            michal = option[michal];
            zuuluu = verify.bind(tangon)(michal);
            michal = zuuluu.usePremiumExtendableCopy;
            entity = entity.config;
            kiloes = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot4;
            entity = {};
            golfie = _closure1_slot9;
            sizing = 12;
            report = option[sizing];
            report = verify.bind(tangon)(report);
            oscard = report.Text;
            report = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            ctrled = 13;
            offset = option[ctrled];
            offset = verify.bind(tangon)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            option = option[ctrled];
            option = verify.bind(tangon)(option);
            option = option.t;
            verify = option.W8/b3d;
            option = {};
            foxtra = foxtra.defaultReward;
            foxtra = foxtra.messages;
            foxtra = foxtra.name;
            option['rewardName'] = foxtra;
            option = offset.bind(yankee)(verify, option);
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            yankee = null;
            oscard = yankee != source;
            if(!oscard) { _fun00002_ip = 461; continue _fun00001 }
 266:
            verify = _closure1_slot11;
            option = _closure1_slot10;
            golfie = {};
            backup = _closure1_slot9;
            result = _closure1_slot0;
            output = _closure1_slot2;
            offset = output[sizing];
            offset = result.bind(tangon)(offset);
            foxtra = offset.Text;
            offset = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            echoed = output[ctrled];
            echoed = result.bind(tangon)(echoed);
            update = echoed.intl;
            echoed = update.formatToPlainString;
            output = output[ctrled];
            output = result.bind(tangon)(output);
            output = output.t;
            result = output.coKAb2;
            output = {};
            output['rewardsDuration'] = source;
            output = echoed.bind(update)(result, output);
            offset['children'] = output;
            foxtra = backup.bind(tangon)(foxtra, offset);
            offset = new Array(2);
            offset[0] = foxtra;
            yankee = yankee != kiloes;
            if(!yankee) { _fun00002_ip = 447; continue _fun00001 }
 397:
            backup = _closure1_slot9;
            foxtra = _closure1_slot0;
            romeon = _closure1_slot2;
            romeon = romeon[sizing];
            romeon = foxtra.bind(tangon)(romeon);
            foxtra = romeon.Text;
            romeon = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            romeon['children'] = kiloes;
            yankee = backup.bind(tangon)(foxtra, romeon);
 447:
            offset[1] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 461:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: VerboseInstructions
        romeon = argFoo;
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        entity = 14;
        entity = yankee[entity];
        tangon = undefined;
        zuuluu = offset.bind(tangon)(entity);
        michal = zuuluu.useQuestTaskDetails;
        entity = romeon.quest;
        option = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot9;
        entity = 12;
        entity = yankee[entity];
        entity = offset.bind(tangon)(entity);
        michal = entity.Text;
        entity = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
        report = 11;
        report = yankee[report];
        golfie = offset.bind(tangon)(report);
        oscard = golfie.useQuestsInstructionsToWinReward;
        report = {};
        romeon = romeon.quest;
        report['quest'] = romeon;
        verify = _closure1_slot8;
        verify = verify.QUESTS_BAR_MOBILE;
        report['location'] = verify;
        verify = 15;
        verify = yankee[verify];
        verify = offset.bind(tangon)(verify);
        verify = verify.QuestContent;
        verify = verify.QUEST_BAR_MOBILE;
        report['questContent'] = verify;
        report['taskDetails'] = option;
        report = oscard.bind(golfie)(report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.QuestDockMode;
    var _closure1_slot7 = option;
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.QUEST_DOCK_BORDER_RADII;
    foxtra = tangon.QUEST_DOCK_EXPANDED_PADDING_BOTTOM;
    backup = tangon.QUEST_DOCK_EXPANDED_PADDING_HORIZONTAL;
    tangon = 6;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot9 = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.Fragment;
    var _closure1_slot10 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'flex-end'};
    offset['paddingHorizontal'] = backup;
    offset['paddingBottom'] = foxtra;
    tangon['wrapper'] = offset;
    offset = {'borderRadius': null, 'overflow': 'hidden', 'padding': 8, 'paddingRight': 16};
    offset['borderRadius'] = yankee;
    yankee = 8;
    tangon['rewardContentWrapper'] = offset;
    offset = {'alignItems': 'center', 'flexDirection': 'row', 'gap': 16};
    tangon['rewardContent'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 1, 'gap': 4};
    tangon['rewardContentCopy'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    offset['borderRadius'] = foxtra;
    tangon['questDockRewardTile'] = offset;
    offset = {'marginTop': 12, 'paddingHorizontal': 4, 'paddingTop': 16, 'position': 'relative'};
    tangon['questDockCtaWrapper'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    offset['borderRadius'] = foxtra;
    tangon['questDockCta'] = offset;
    offset = {'position': 'absolute', 'left': 4294967284, 'right': 4294967284, 'top': 0, 'backgroundColor': null, 'height': 1, 'opacity': 1};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    offset['backgroundColor'] = yankee;
    tangon['questDockCtaSaparator'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot12 = tangon;
    tangon = golfie.memo;
    michal = function() { // Original name: QuestDockUnenrolledBody
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            report = _closure1_slot3;
            zuuluu = report.useContext;
            sizing = _closure1_slot1;
            source = _closure1_slot2;
            michal = 16;
            michal = source[michal];
            tangon = undefined;
            michal = sizing.bind(tangon)(michal);
            michal = zuuluu.bind(report)(michal);
            ctrled = michal.isVisible;
            result = michal.quest;
            var _closure2_slot0 = result;
            michal = _closure1_slot12;
            echoed = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            michal = 17;
            report = source[michal];
            option = zuuluu.bind(tangon)(report);
            golfie = option.useStateFromStores;
            report = _closure1_slot6;
            oscard = new Array(1);
            oscard[0] = report;
            report = function() {
                michal = _closure1_slot6;
                michal = michal.prevRestingQuestDockMode;
                entity = _closure1_slot7;
                entity = entity.EXPANDED;
                entity = michal === entity;
                return entity;
            };
            foxtra = golfie.bind(option)(oscard, report);
            michal = source[michal];
            golfie = zuuluu.bind(tangon)(michal);
            oscard = golfie.useStateFromStores;
            michal = _closure1_slot5;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.isEnrolling;
                entity = _closure2_slot0;
                entity = entity.id;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            backup = oscard.bind(golfie)(report, michal);
            michal = 18;
            michal = source[michal];
            report = zuuluu.bind(tangon)(michal);
            zuuluu = report.useIsQuestBarCopySimplificationEnabled;
            michal = {};
            oscard = _closure1_slot8;
            oscard = oscard.QUESTS_BAR_MOBILE;
            michal['location'] = oscard;
            vacuum = zuuluu.bind(report)(michal);
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            oscard = result.id;
            michal = new Array(1);
            michal[0] = oscard;
            entity = function() {
                golfie = _closure1_slot0;
                option = _closure1_slot2;
                entity = 19;
                michal = option[entity];
                entity = undefined;
                report = golfie.bind(entity)(michal);
                tangon = report.enrollInQuest;
                michal = _closure2_slot0;
                zuuluu = michal.id;
                michal = {};
                oscard = 20;
                oscard = option[oscard];
                oscard = golfie.bind(entity)(oscard);
                oscard = oscard.QuestContentCTA;
                oscard = oscard.ACCEPT_QUEST;
                michal['questContentCTA'] = oscard;
                oscard = 15;
                oscard = option[oscard];
                oscard = golfie.bind(entity)(oscard);
                oscard = oscard.QuestContent;
                oscard = oscard.QUEST_BAR_MOBILE;
                michal['questContent'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            kiloes = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot4;
            entity = {};
            report = echoed.wrapper;
            entity['style'] = report;
            golfie = _closure1_slot11;
            oscard = _closure1_slot4;
            report = {};
            option = echoed.rewardContentWrapper;
            report['style'] = option;
            offset = _closure1_slot9;
            option = 21;
            option = source[option];
            verify = sizing.bind(tangon)(option);
            option = {};
            verify = offset.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            yankee = _closure1_slot11;
            offset = _closure1_slot4;
            verify = {};
            romeon = echoed.rewardContent;
            verify['style'] = romeon;
            update = _closure1_slot9;
            romeon = 22;
            romeon = source[romeon];
            sizing = sizing.bind(tangon)(romeon);
            romeon = {'paused': null, 'height': 80, 'width': 80};
            source = !foxtra;
            if(source) { _fun00004_ip = 356; continue _fun00003 }
 353:
            source = !ctrled;
 356:
            romeon['paused'] = source;
            romeon['quest'] = result;
            source = echoed.questDockRewardTile;
            romeon['style'] = source;
            sizing = update.bind(tangon)(sizing, romeon);
            romeon = new Array(2);
            romeon[0] = sizing;
            source = _closure1_slot11;
            update = _closure1_slot4;
            sizing = {};
            ctrled = echoed.rewardContentCopy;
            sizing['style'] = ctrled;
            config = _closure1_slot9;
            cntext = _closure1_slot0;
            status = _closure1_slot2;
            ctrled = 12;
            ctrled = status[ctrled];
            ctrled = cntext.bind(tangon)(ctrled);
            sequen = ctrled.Text;
            ctrled = {'variant': 'heading-md/medium', 'color': 'header-primary'};
            record = 13;
            papara = status[record];
            papara = cntext.bind(tangon)(papara);
            target = papara.intl;
            papara = target.format;
            record = status[record];
            record = cntext.bind(tangon)(record);
            record = record.t;
            cntext = record.EQa7oq;
            record = {};
            status = result.config;
            status = status.messages;
            status = status.questName;
            record['questName'] = status;
            record = papara.bind(target)(cntext, record);
            ctrled['children'] = record;
            sequen = config.bind(tangon)(sequen, ctrled);
            ctrled = new Array(2);
            ctrled[0] = sequen;
            config = _closure1_slot9;
            if(vacuum) { _fun00004_ip = 557; continue _fun00003 }
 551:
            sequen = _closure1_slot14;
            _fun00004_ip = 561; continue _fun00003;
 557:
            sequen = _closure1_slot13;
 561:
            vacuum = {};
            vacuum['quest'] = result;
            vacuum = config.bind(tangon)(sequen, vacuum);
            ctrled[1] = vacuum;
            sizing['children'] = ctrled;
            sizing = source.bind(tangon)(update, sizing);
            romeon[1] = sizing;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot11;
            golfie = _closure1_slot4;
            oscard = {};
            verify = echoed.questDockCtaWrapper;
            oscard['style'] = verify;
            yankee = _closure1_slot9;
            offset = _closure1_slot4;
            verify = {};
            romeon = echoed.questDockCtaSaparator;
            verify['style'] = romeon;
            offset = yankee.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            romeon = _closure1_slot9;
            yankee = _closure1_slot1;
            sizing = _closure1_slot2;
            offset = 23;
            offset = sizing[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            echoed = echoed.questDockCta;
            offset['style'] = echoed;
            offset['onPress'] = kiloes;
            offset['loading'] = backup;
            kiloes = _closure1_slot0;
            backup = 11;
            backup = sizing[backup];
            sizing = kiloes.bind(tangon)(backup);
            kiloes = sizing.usePrimaryCtaCopy;
            backup = {};
            backup['quest'] = result;
            output = _closure1_slot8;
            output = output.QUESTS_BAR_MOBILE;
            backup['location'] = output;
            backup = kiloes.bind(sizing)(backup);
            offset['text'] = backup;
            foxtra = !foxtra;
            offset['shineDisabled'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 24;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestDock/QuestDockUnenrolledBody.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();