// app/modules/quests/native/QuestDock/QuestDockUnenrolledBody.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.QuestDockMode;
    var _closure1_slot8 = option;
    tangon = tangon.QuestsExperimentLocations;
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.QUEST_DOCK_BORDER_RADII;
    foxtra = tangon.QUEST_DOCK_EXPANDED_PADDING_BOTTOM;
    backup = tangon.QUEST_DOCK_EXPANDED_PADDING_HORIZONTAL;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot10 = option;
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'flex-end'};
    offset['paddingHorizontal'] = backup;
    offset['paddingBottom'] = foxtra;
    tangon['wrapper'] = offset;
    offset = {'borderRadius': null, 'overflow': 'hidden', 'padding': 8, 'paddingRight': 16};
    offset['borderRadius'] = yankee;
    tangon['rewardContentWrapper'] = offset;
    offset = {'alignItems': 'center', 'flexDirection': 'row', 'gap': 16};
    tangon['rewardContent'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 1, 'gap': 4};
    tangon['rewardContentCopy'] = offset;
    offset = {};
    yankee = 9;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    offset['borderRadius'] = foxtra;
    tangon['questDockRewardTile'] = offset;
    offset = {'marginTop': 12, 'paddingHorizontal': 4, 'paddingTop': 16, 'position': 'relative'};
    tangon['questDockCtaWrapper'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.round;
    offset['borderRadius'] = foxtra;
    tangon['questDockCta'] = offset;
    offset = {'position': 'absolute', 'left': 4294967284, 'right': 4294967284, 'top': 0, 'backgroundColor': null, 'height': 1, 'opacity': 1};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    offset['backgroundColor'] = yankee;
    tangon['questDockCtaSaparator'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot12 = tangon;
    tangon = golfie.memo;
    michal = function() { // Original name: QuestDockUnenrolledBody
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            report = _closure1_slot4;
            zuuluu = report.useContext;
            option = _closure1_slot1;
            romeon = _closure1_slot2;
            michal = 10;
            michal = romeon[michal];
            tangon = undefined;
            michal = option.bind(tangon)(michal);
            michal = zuuluu.bind(report)(michal);
            backup = michal.isVisible;
            output = michal.quest;
            var _closure2_slot0 = output;
            michal = _closure1_slot12;
            update = michal.bind(tangon)();
            oscard = _closure1_slot0;
            michal = 11;
            zuuluu = romeon[michal];
            yankee = oscard.bind(tangon)(zuuluu);
            verify = yankee.useStateFromStores;
            zuuluu = _closure1_slot7;
            golfie = new Array(1);
            golfie[0] = zuuluu;
            zuuluu = function() {
                michal = _closure1_slot7;
                michal = michal.prevRestingQuestDockMode;
                entity = _closure1_slot8;
                entity = entity.EXPANDED;
                entity = michal === entity;
                return entity;
            };
            foxtra = verify.bind(yankee)(golfie, zuuluu);
            michal = romeon[michal];
            verify = oscard.bind(tangon)(michal);
            golfie = verify.useStateFromStores;
            michal = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.isEnrolling;
                entity = _closure2_slot0;
                entity = entity.id;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            result = golfie.bind(verify)(zuuluu, michal);
            michal = 12;
            michal = romeon[michal];
            verify = oscard.bind(tangon)(michal);
            golfie = verify.useShouldAllowMobileVideoTask;
            zuuluu = output.config;
            michal = {};
            yankee = _closure1_slot9;
            yankee = yankee.QUESTS_BAR_MOBILE;
            michal['location'] = yankee;
            golfie = golfie.bind(verify)(zuuluu, michal);
            var _closure2_slot1 = golfie;
            michal = 13;
            michal = romeon[michal];
            zuuluu = oscard.bind(tangon)(michal);
            michal = zuuluu.useQuestTaskDetails;
            target = michal.bind(zuuluu)(output);
            zuuluu = report.useContext;
            michal = 14;
            michal = romeon[michal];
            michal = oscard.bind(tangon)(michal);
            michal = michal.QuestDockExternalCoordinationContext;
            michal = zuuluu.bind(report)(michal);
            oscard = michal.setRestingQuestDockMode;
            var _closure2_slot2 = oscard;
            zuuluu = report.useCallback;
            michal = _closure1_slot3;
            entity = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00004_ip = 258; continue _fun00003 }
 10:
                        yankee = _closure1_slot0;
                        verify = _closure1_slot2;
                        michal = 15;
                        michal = verify[michal];
                        zuuluu = undefined;
                        option = yankee.bind(zuuluu)(michal);
                        golfie = option.enrollInQuest;
                        michal = _closure2_slot0;
                        oscard = michal.id;
                        michal = {};
                        offset = 16;
                        offset = verify[offset];
                        offset = yankee.bind(zuuluu)(offset);
                        offset = offset.QuestContentCTA;
                        offset = offset.ACCEPT_QUEST;
                        michal['questContentCTA'] = offset;
                        offset = 17;
                        romeon = verify[offset];
                        romeon = yankee.bind(zuuluu)(romeon);
                        romeon = romeon.QuestContent;
                        romeon = romeon.QUEST_BAR_MOBILE;
                        michal['questContent'] = romeon;
                        verify = verify[offset];
                        verify = yankee.bind(zuuluu)(verify);
                        verify = verify.QuestContent;
                        verify = verify.QUEST_BAR_MOBILE;
                        michal['sourceQuestContent'] = verify;
                        michal = golfie.bind(option)(oscard, michal);
                        SaveGenerator(address=149);
 147:
                        return michal;
 149:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=5);
                        if(oscard) { _fun00004_ip = 255; continue _fun00003 }
 155:
                        oscard = _closure2_slot1;
                        if(!oscard) { _fun00004_ip = 252; continue _fun00003 }
 162:
                        golfie = _closure1_slot1;
                        option = _closure1_slot2;
                        oscard = 18;
                        oscard = option[oscard];
                        golfie = golfie.bind(zuuluu)(oscard);
                        oscard = {};
                        verify = _closure2_slot0;
                        verify = verify.id;
                        oscard['questId'] = verify;
                        verify = _closure1_slot0;
                        option = option[offset];
                        option = verify.bind(zuuluu)(option);
                        option = option.QuestContent;
                        option = option.QUEST_BAR_MOBILE;
                        oscard['sourceQuestContent'] = option;
                        oscard = golfie.bind(zuuluu)(oscard);
                        report = _closure2_slot2;
                        tangon = _closure1_slot8;
                        tangon = tangon.COLLAPSED;
                        tangon = report.bind(zuuluu)(tangon);
 252:
                        return zuuluu;
 255:
                        return michal;
 258:
                        return entity;
                    }
                };
                return entity;
            };
            michal = michal.bind(tangon)(entity);
            verify = output.id;
            entity = new Array(3);
            entity[0] = verify;
            entity[1] = golfie;
            entity[2] = oscard;
            echoed = zuuluu.bind(report)(michal, entity);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot5;
            entity = {};
            report = update.wrapper;
            entity['style'] = report;
            report = {};
            oscard = update.rewardContentWrapper;
            report['style'] = oscard;
            yankee = _closure1_slot10;
            oscard = 19;
            oscard = romeon[oscard];
            golfie = option.bind(tangon)(oscard);
            oscard = {};
            golfie = yankee.bind(tangon)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            verify = {};
            golfie = update.rewardContent;
            verify['style'] = golfie;
            golfie = 20;
            golfie = romeon[golfie];
            option = option.bind(tangon)(golfie);
            golfie = {'paused': null, 'height': 80, 'width': 80};
            romeon = !foxtra;
            if(romeon) { _fun00002_ip = 421; continue _fun00001 }
 418:
            romeon = !backup;
 421:
            golfie['paused'] = romeon;
            golfie['quest'] = output;
            romeon = update.questDockRewardTile;
            golfie['style'] = romeon;
            romeon = foxtra;
            if(!romeon) { _fun00002_ip = 451; continue _fun00001 }
 448:
            romeon = backup;
 451:
            golfie['withAnimation'] = romeon;
            golfie = yankee.bind(tangon)(option, golfie);
            yankee = new Array(2);
            yankee[0] = golfie;
            option = _closure1_slot11;
            golfie = _closure1_slot5;
            source = {};
            romeon = update.rewardContentCopy;
            source['style'] = romeon;
            romeon = _closure1_slot10;
            kiloes = _closure1_slot0;
            sizing = _closure1_slot2;
            backup = 21;
            ctrled = sizing[backup];
            ctrled = kiloes.bind(tangon)(ctrled);
            vacuum = ctrled.Text;
            ctrled = {'variant': 'heading-md/medium', 'color': 'header-primary'};
            sequen = 22;
            config = sizing[sequen];
            config = kiloes.bind(tangon)(config);
            cntext = config.intl;
            record = cntext.format;
            sequen = sizing[sequen];
            sequen = kiloes.bind(tangon)(sequen);
            sequen = sequen.t;
            config = sequen.EQa7oq;
            sequen = {};
            papara = output.config;
            papara = papara.messages;
            papara = papara.questName;
            sequen['questName'] = papara;
            sequen = record.bind(cntext)(config, sequen);
            ctrled['children'] = sequen;
            vacuum = romeon.bind(tangon)(vacuum, ctrled);
            ctrled = new Array(2);
            ctrled[0] = vacuum;
            backup = sizing[backup];
            backup = kiloes.bind(tangon)(backup);
            sequen = backup.Text;
            vacuum = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            backup = 23;
            config = sizing[backup];
            cntext = kiloes.bind(tangon)(config);
            record = cntext.useQuestsInstructionsToWinReward;
            config = {};
            config['quest'] = output;
            papara = _closure1_slot9;
            papara = papara.QUESTS_BAR_MOBILE;
            config['location'] = papara;
            papara = 17;
            status = sizing[papara];
            status = kiloes.bind(tangon)(status);
            status = status.QuestContent;
            status = status.QUEST_BAR_MOBILE;
            config['questContent'] = status;
            config['taskDetails'] = target;
            papara = sizing[papara];
            papara = kiloes.bind(tangon)(papara);
            papara = papara.QuestContent;
            papara = papara.QUEST_BAR_MOBILE;
            config['sourceQuestContent'] = papara;
            config = record.bind(cntext)(config);
            vacuum['children'] = config;
            vacuum = romeon.bind(tangon)(sequen, vacuum);
            ctrled[1] = vacuum;
            source['children'] = ctrled;
            source = option.bind(tangon)(golfie, source);
            yankee[1] = source;
            verify['children'] = yankee;
            verify = zuuluu.bind(tangon)(michal, verify);
            oscard[1] = verify;
            report['children'] = oscard;
            oscard = zuuluu.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            verify = update.questDockCtaWrapper;
            oscard['style'] = verify;
            verify = {};
            yankee = update.questDockCtaSaparator;
            verify['style'] = yankee;
            yankee = romeon.bind(tangon)(golfie, verify);
            verify = new Array(2);
            verify[0] = yankee;
            yankee = _closure1_slot1;
            offset = 24;
            offset = sizing[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            update = update.questDockCta;
            offset['style'] = update;
            offset['onPress'] = echoed;
            offset['loading'] = result;
            backup = sizing[backup];
            sizing = kiloes.bind(tangon)(backup);
            kiloes = sizing.usePrimaryCtaCopy;
            backup = {};
            backup['quest'] = output;
            backup = kiloes.bind(sizing)(backup);
            offset['text'] = backup;
            foxtra = !foxtra;
            offset['shineDisabled'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestDock/QuestDockUnenrolledBody.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();