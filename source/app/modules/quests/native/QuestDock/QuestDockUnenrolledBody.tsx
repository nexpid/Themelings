// app/modules/quests/native/QuestDock/QuestDockUnenrolledBody.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: SimplifiedInstructions
        _fun116284: for(var _fun116284_ip = 0; ; ) switch(_fun116284_ip) {
 0:
            entity = argFoo;
            entity = entity.quest;
            var _closure2_slot0 = entity;
            report = _closure1_slot3;
            tango = report.useMemo;
            oscar = entity.config;
            zulu = new Array(1);
            zulu[0] = oscar;
            mike = function() {
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 9;
                mike = mike[entity];
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                zulu = entity.SharedQuestFields;
                mike = zulu.build;
                entity = _closure2_slot0;
                entity = entity.config;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            foxtrot = tango.bind(report)(mike, zulu);
            verify = _closure1_slot0;
            options = _closure1_slot2;
            mike = 10;
            mike = options[mike];
            tango = undefined;
            report = verify.bind(tango)(mike);
            zulu = report.getCollectibleQuestRewardDuration;
            mike = entity.config;
            source = zulu.bind(report)(mike);
            mike = 11;
            mike = options[mike];
            zulu = verify.bind(tango)(mike);
            mike = zulu.usePremiumExtendableCopy;
            entity = entity.config;
            kilo = mike.bind(zulu)(entity);
            zulu = _closure1_slot11;
            mike = _closure1_slot4;
            entity = {};
            golf = _closure1_slot9;
            sizing = 12;
            report = options[sizing];
            report = verify.bind(tango)(report);
            oscar = report.Text;
            report = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            control = 13;
            offset = options[control];
            offset = verify.bind(tango)(offset);
            yankee = offset.intl;
            offset = yankee.formatToPlainString;
            options = options[control];
            options = verify.bind(tango)(options);
            options = options.t;
            verify = options.W8/b3d;
            options = {};
            foxtrot = foxtrot.defaultReward;
            foxtrot = foxtrot.messages;
            foxtrot = foxtrot.name;
            options['rewardName'] = foxtrot;
            options = offset.bind(yankee)(verify, options);
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            yankee = null;
            oscar = yankee != source;
            if(!oscar) { _fun116284_ip = 459; continue _fun116284 }
 266:
            verify = _closure1_slot11;
            options = _closure1_slot10;
            golf = {};
            backup = _closure1_slot9;
            result = _closure1_slot0;
            output = _closure1_slot2;
            offset = output[sizing];
            offset = result.bind(tango)(offset);
            foxtrot = offset.Text;
            offset = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            echo = output[control];
            echo = result.bind(tango)(echo);
            update = echo.intl;
            echo = update.formatToPlainString;
            output = output[control];
            output = result.bind(tango)(output);
            output = output.t;
            result = output.coKAb2;
            output = {};
            output['rewardsDuration'] = source;
            output = echo.bind(update)(result, output);
            offset['children'] = output;
            foxtrot = backup.bind(tango)(foxtrot, offset);
            offset = new Array(2);
            offset[0] = foxtrot;
            yankee = yankee != kilo;
            if(!yankee) { _fun116284_ip = 445; continue _fun116284 }
 395:
            backup = _closure1_slot9;
            foxtrot = _closure1_slot0;
            romeo = _closure1_slot2;
            romeo = romeo[sizing];
            romeo = foxtrot.bind(tango)(romeo);
            foxtrot = romeo.Text;
            romeo = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
            romeo['children'] = kilo;
            yankee = backup.bind(tango)(foxtrot, romeo);
 445:
            offset[1] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 459:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: VerboseInstructions
        romeo = argFoo;
        offset = _closure1_slot0;
        yankee = _closure1_slot2;
        entity = 14;
        entity = yankee[entity];
        tango = undefined;
        zulu = offset.bind(tango)(entity);
        mike = zulu.useQuestTaskDetails;
        entity = romeo.quest;
        options = mike.bind(zulu)(entity);
        zulu = _closure1_slot9;
        entity = 12;
        entity = yankee[entity];
        entity = offset.bind(tango)(entity);
        mike = entity.Text;
        entity = {'color': 'header-secondary', 'variant': 'text-sm/normal'};
        report = 11;
        report = yankee[report];
        golf = offset.bind(tango)(report);
        oscar = golf.useQuestsInstructionsToWinReward;
        report = {};
        romeo = romeo.quest;
        report['quest'] = romeo;
        verify = _closure1_slot8;
        verify = verify.QUESTS_BAR_MOBILE;
        report['location'] = verify;
        verify = 15;
        verify = yankee[verify];
        verify = offset.bind(tango)(verify);
        verify = verify.QuestContent;
        verify = verify.QUEST_BAR_MOBILE;
        report['questContent'] = verify;
        report['taskDetails'] = options;
        report = oscar.bind(golf)(report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = romeo.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.QuestDockMode;
    var _closure1_slot7 = options;
    tango = tango.QuestsExperimentLocations;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    yankee = tango.QUEST_DOCK_BORDER_RADII;
    foxtrot = tango.QUEST_DOCK_EXPANDED_PADDING_BOTTOM;
    backup = tango.QUEST_DOCK_EXPANDED_PADDING_HORIZONTAL;
    tango = 6;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot9 = options;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.Fragment;
    var _closure1_slot10 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot11 = tango;
    tango = 7;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'flexGrow': 1, 'flexShrink': 0, 'justifyContent': 'flex-end'};
    offset['paddingHorizontal'] = backup;
    offset['paddingBottom'] = foxtrot;
    tango['wrapper'] = offset;
    offset = {'borderRadius': null, 'overflow': 'hidden', 'padding': 8, 'paddingRight': 16};
    offset['borderRadius'] = yankee;
    yankee = 8;
    tango['rewardContentWrapper'] = offset;
    offset = {'alignItems': 'center', 'flexDirection': 'row', 'gap': 16};
    tango['rewardContent'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 1, 'gap': 4};
    tango['rewardContentCopy'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.lg;
    offset['borderRadius'] = foxtrot;
    tango['questDockRewardTile'] = offset;
    offset = {'marginTop': 12, 'paddingHorizontal': 4, 'paddingTop': 16, 'position': 'relative'};
    tango['questDockCtaWrapper'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.round;
    offset['borderRadius'] = foxtrot;
    tango['questDockCta'] = offset;
    offset = {'position': 'absolute', 'left': 4294967284, 'right': 4294967284, 'top': 0, 'backgroundColor': null, 'height': 1, 'opacity': 1};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    offset['backgroundColor'] = yankee;
    tango['questDockCtaSaparator'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot12 = tango;
    tango = golf.memo;
    mike = function() { // Original name: QuestDockUnenrolledBody
        _fun116287: for(var _fun116287_ip = 0; ; ) switch(_fun116287_ip) {
 0:
            report = _closure1_slot3;
            zulu = report.useContext;
            sizing = _closure1_slot1;
            source = _closure1_slot2;
            mike = 16;
            mike = source[mike];
            tango = undefined;
            mike = sizing.bind(tango)(mike);
            mike = zulu.bind(report)(mike);
            control = mike.isVisible;
            result = mike.quest;
            var _closure2_slot0 = result;
            mike = _closure1_slot12;
            echo = mike.bind(tango)();
            zulu = _closure1_slot0;
            mike = 17;
            report = source[mike];
            options = zulu.bind(tango)(report);
            golf = options.useStateFromStores;
            report = _closure1_slot6;
            oscar = new Array(1);
            oscar[0] = report;
            report = function() {
                mike = _closure1_slot6;
                mike = mike.prevRestingQuestDockMode;
                entity = _closure1_slot7;
                entity = entity.EXPANDED;
                entity = mike === entity;
                return entity;
            };
            foxtrot = golf.bind(options)(oscar, report);
            mike = source[mike];
            golf = zulu.bind(tango)(mike);
            oscar = golf.useStateFromStores;
            mike = _closure1_slot5;
            report = new Array(1);
            report[0] = mike;
            mike = function() {
                zulu = _closure1_slot5;
                mike = zulu.isEnrolling;
                entity = _closure2_slot0;
                entity = entity.id;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            backup = oscar.bind(golf)(report, mike);
            mike = 18;
            mike = source[mike];
            report = zulu.bind(tango)(mike);
            zulu = report.useIsQuestBarCopySimplificationEnabled;
            mike = {};
            oscar = _closure1_slot8;
            oscar = oscar.QUESTS_BAR_MOBILE;
            mike['location'] = oscar;
            vacuum = zulu.bind(report)(mike);
            report = _closure1_slot3;
            zulu = report.useCallback;
            oscar = result.id;
            mike = new Array(1);
            mike[0] = oscar;
            entity = function() {
                golf = _closure1_slot0;
                options = _closure1_slot2;
                entity = 19;
                mike = options[entity];
                entity = undefined;
                report = golf.bind(entity)(mike);
                tango = report.enrollInQuest;
                mike = _closure2_slot0;
                zulu = mike.id;
                mike = {};
                oscar = 20;
                oscar = options[oscar];
                oscar = golf.bind(entity)(oscar);
                oscar = oscar.QuestContentCTA;
                oscar = oscar.ACCEPT_QUEST;
                mike['questContentCTA'] = oscar;
                oscar = 15;
                oscar = options[oscar];
                oscar = golf.bind(entity)(oscar);
                oscar = oscar.QuestContent;
                oscar = oscar.QUEST_BAR_MOBILE;
                mike['questContent'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            kilo = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot11;
            mike = _closure1_slot4;
            entity = {};
            report = echo.wrapper;
            entity['style'] = report;
            golf = _closure1_slot11;
            oscar = _closure1_slot4;
            report = {};
            options = echo.rewardContentWrapper;
            report['style'] = options;
            offset = _closure1_slot9;
            options = 21;
            options = source[options];
            verify = sizing.bind(tango)(options);
            options = {};
            verify = offset.bind(tango)(verify, options);
            options = new Array(2);
            options[0] = verify;
            yankee = _closure1_slot11;
            offset = _closure1_slot4;
            verify = {};
            romeo = echo.rewardContent;
            verify['style'] = romeo;
            update = _closure1_slot9;
            romeo = 22;
            romeo = source[romeo];
            sizing = sizing.bind(tango)(romeo);
            romeo = {'paused': null, 'height': 80, 'width': 80};
            source = !foxtrot;
            if(source) { _fun116287_ip = 356; continue _fun116287 }
 353:
            source = !control;
 356:
            romeo['paused'] = source;
            romeo['quest'] = result;
            source = echo.questDockRewardTile;
            romeo['style'] = source;
            sizing = update.bind(tango)(sizing, romeo);
            romeo = new Array(2);
            romeo[0] = sizing;
            source = _closure1_slot11;
            update = _closure1_slot4;
            sizing = {};
            control = echo.rewardContentCopy;
            sizing['style'] = control;
            config = _closure1_slot9;
            context = _closure1_slot0;
            status = _closure1_slot2;
            control = 12;
            control = status[control];
            control = context.bind(tango)(control);
            sequence = control.Text;
            control = {'variant': 'heading-md/medium', 'color': 'header-primary'};
            record = 13;
            papa = status[record];
            papa = context.bind(tango)(papa);
            target = papa.intl;
            papa = target.format;
            record = status[record];
            record = context.bind(tango)(record);
            record = record.t;
            context = record.EQa7oq;
            record = {};
            status = result.config;
            status = status.messages;
            status = status.questName;
            record['questName'] = status;
            record = papa.bind(target)(context, record);
            control['children'] = record;
            sequence = config.bind(tango)(sequence, control);
            control = new Array(2);
            control[0] = sequence;
            config = _closure1_slot9;
            if(vacuum) { _fun116287_ip = 557; continue _fun116287 }
 551:
            sequence = _closure1_slot14;
            _fun116287_ip = 561; continue _fun116287;
 557:
            sequence = _closure1_slot13;
 561:
            vacuum = {};
            vacuum['quest'] = result;
            vacuum = config.bind(tango)(sequence, vacuum);
            control[1] = vacuum;
            sizing['children'] = control;
            sizing = source.bind(tango)(update, sizing);
            romeo[1] = sizing;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[1] = verify;
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot11;
            golf = _closure1_slot4;
            oscar = {};
            verify = echo.questDockCtaWrapper;
            oscar['style'] = verify;
            yankee = _closure1_slot9;
            offset = _closure1_slot4;
            verify = {};
            romeo = echo.questDockCtaSaparator;
            verify['style'] = romeo;
            offset = yankee.bind(tango)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            romeo = _closure1_slot9;
            yankee = _closure1_slot1;
            sizing = _closure1_slot2;
            offset = 23;
            offset = sizing[offset];
            yankee = yankee.bind(tango)(offset);
            offset = {};
            echo = echo.questDockCta;
            offset['style'] = echo;
            offset['onPress'] = kilo;
            offset['loading'] = backup;
            kilo = _closure1_slot0;
            backup = 11;
            backup = sizing[backup];
            sizing = kilo.bind(tango)(backup);
            kilo = sizing.usePrimaryCtaCopy;
            backup = {};
            backup['quest'] = result;
            output = _closure1_slot8;
            output = output.QUESTS_BAR_MOBILE;
            backup['location'] = output;
            backup = kilo.bind(sizing)(backup);
            offset['text'] = backup;
            foxtrot = !foxtrot;
            offset['shineDisabled'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 24;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/quests/native/QuestDock/QuestDockUnenrolledBody.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();