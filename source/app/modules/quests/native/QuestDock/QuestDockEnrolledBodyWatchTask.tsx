// app/modules/quests/native/QuestDock/QuestDockEnrolledBodyWatchTask.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.StyleSheet;
    var _closure1_slot5 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = {};
    golfie = 'https://cdn.discordapp.com/assets/quests/1303112069985603634/video_high_res2.mp4';
    tangon['uri'] = golfie;
    var _closure1_slot8 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {};
            option = _closure1_slot1;
            tangon = _closure1_slot2;
            golfie = 4;
            report = tangon[golfie];
            oscard = undefined;
            report = option.bind(oscard)(report);
            report = report.colors;
            report = report.BG_BASE_TERTIARY;
            michal['backgroundColor'] = report;
            yankee = 'column';
            michal['flexDirection'] = yankee;
            entity['wrapper'] = michal;
            michal = {'borderRadius': null, 'backgroundColor': null, 'flexGrow': 1, 'flexShrink': 0, 'overflow': 'hidden'};
            report = tangon[golfie];
            report = option.bind(oscard)(report);
            report = report.radii;
            report = report.xl;
            michal['borderRadius'] = report;
            report = tangon[golfie];
            report = option.bind(oscard)(report);
            report = report.colors;
            report = report.BACKGROUND_ACCENT;
            michal['backgroundColor'] = report;
            offset = 1;
            report = 0;
            entity['videoWrapper'] = michal;
            michal = {};
            verify = _closure1_slot5;
            romeon = verify.absoluteFillObject;
            foxtra = michal;
            verify = copyDataProperties(foxtra, romeon);
            verify = 'flexDirection';
            michal[verify] = yankee;
            verify = 'flexGrow';
            michal[verify] = offset;
            verify = 'flexShrink';
            michal[verify] = report;
            offset = 'space-between';
            verify = 'justifyContent';
            michal[verify] = offset;
            verify = tangon[golfie];
            verify = option.bind(oscard)(verify);
            verify = verify.spacing;
            offset = verify.PX_16;
            verify = 'paddingHorizontal';
            michal[verify] = offset;
            verify = tangon[golfie];
            verify = option.bind(oscard)(verify);
            verify = verify.spacing;
            offset = verify.PX_16;
            verify = 'paddingVertical';
            michal[verify] = offset;
            entity['videoContentWrapper'] = michal;
            michal = {};
            verify = 'row';
            michal['flexDirection'] = verify;
            entity['videoContentHeaderWrapper'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['videoContentHeading'] = michal;
            michal = {'alignItems': 'center', 'flexDirection': 'row'};
            verify = tangon[golfie];
            verify = option.bind(oscard)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            michal['marginBottom'] = verify;
            entity['questDetails'] = michal;
            michal = {'flexGrow': 1, 'flexShrink': 1};
            entity['questDetailsGame'] = michal;
            michal = {};
            entity['videoContentFooterWrapper'] = michal;
            michal = {'justifyContent': 'flex-end', 'flexDirection': 'row'};
            tangon = tangon[golfie];
            tangon = option.bind(oscard)(tangon);
            tangon = tangon.spacing;
            tangon = tangon.PX_24;
            michal['padding'] = tangon;
            option = argFoo;
            tangon = undefined;
            if(!option) { _fun00002_ip = 390; continue _fun00001 }
 388:
            tangon = 0;
 390:
            michal['paddingBottom'] = tangon;
            report = _closure1_slot1;
            tangon = _closure1_slot2;
            tangon = tangon[golfie];
            tangon = report.bind(oscard)(tangon);
            tangon = tangon.spacing;
            tangon = tangon.PX_24;
            michal['gap'] = tangon;
            entity['footer'] = michal;
            michal = {'flexGrow': 0, 'flexShrink': 0};
            entity['questDetailsReward'] = michal;
            michal = {};
            zuuluu = _closure1_slot5;
            romeon = zuuluu.absoluteFillObject;
            foxtra = michal;
            zuuluu = copyDataProperties(foxtra, romeon);
            entity['video'] = michal;
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestDock/QuestDockEnrolledBodyWatchTask.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: QuestDockEnrolledBodyWatchTask
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            foxtra = function() { // Original name: handleClose
                michal = _closure2_slot0;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            michal = entity.fullHeight;
            tangon = undefined;
            golfie = tangon !== michal;
            if(!golfie) { _fun00004_ip = 30; continue _fun00003 }
 27:
            golfie = michal;
 30:
            michal = entity.onClose;
            var _closure2_slot0 = michal;
            michal = entity.paddingTop;
            option = 0;
            if(!(tangon !== michal)) { _fun00004_ip = 55; continue _fun00003 }
 52:
            option = michal;
 55:
            entity = entity.paddingBottom;
            offset = 0;
            if(!(tangon !== entity)) { _fun00004_ip = 70; continue _fun00003 }
 67:
            offset = entity;
 70:
            entity = _closure1_slot9;
            verify = entity.bind(tangon)(golfie);
            oscard = _closure1_slot3;
            zuuluu = oscard.useContext;
            michal = _closure1_slot0;
            report = _closure1_slot2;
            entity = 5;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            entity = entity.QuestDockGestureContext;
            entity = zuuluu.bind(oscard)(entity);
            yankee = entity.windowDimensions;
            zuuluu = _closure1_slot7;
            entity = 6;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.SafeAreaPaddingView;
            entity = {};
            entity['bottom'] = golfie;
            report = true;
            entity['top'] = report;
            report = {};
            cntext = verify.wrapper;
            papara = report;
            oscard = copyDataProperties(papara, cntext);
            oscard = yankee.get;
            oscard = oscard.bind(yankee)();
            if(golfie) { _fun00004_ip = 206; continue _fun00003 }
 190:
            golfie = oscard.maxContentHeight;
            golfie = golfie - offset;
            golfie = golfie - option;
            _fun00004_ip = 211; continue _fun00003;
 206:
            golfie = oscard.height;
 211:
            oscard = 'height';
            report[oscard] = golfie;
            entity['style'] = report;
            option = _closure1_slot7;
            golfie = _closure1_slot4;
            report = {};
            oscard = verify.videoWrapper;
            report['style'] = oscard;
            romeon = _closure1_slot6;
            backup = _closure1_slot0;
            output = _closure1_slot2;
            oscard = 7;
            oscard = output[oscard];
            oscard = backup.bind(tangon)(oscard);
            offset = oscard.VideoComponent;
            oscard = {'style': null, 'source': null, 'resizeMode': 'cover', 'mixWithOthers': 'mix', 'muted': true};
            yankee = verify.video;
            oscard['style'] = yankee;
            yankee = _closure1_slot8;
            oscard['source'] = yankee;
            offset = romeon.bind(tangon)(offset, oscard);
            oscard = new Array(2);
            oscard[0] = offset;
            yankee = {};
            offset = verify.videoContentWrapper;
            yankee['style'] = offset;
            echoed = {};
            offset = verify.videoContentHeaderWrapper;
            echoed['style'] = offset;
            sequen = 8;
            offset = output[sequen];
            offset = backup.bind(tangon)(offset);
            sizing = offset.Text;
            offset = {'style': null, 'variant': 'heading-md/semibold', 'color': 'header-primary', 'children': 'Quest name'};
            result = verify.videoContentHeading;
            offset['style'] = result;
            offset = romeon.bind(tangon)(sizing, offset);
            update = new Array(2);
            update[0] = offset;
            offset = 9;
            sizing = output[offset];
            sizing = backup.bind(tangon)(sizing);
            ctrled = sizing.PressableOpacity;
            source = {};
            result = 'button';
            source['accessibilityRole'] = result;
            source['onPress'] = foxtra;
            sizing = 10;
            sizing = output[sizing];
            sizing = backup.bind(tangon)(sizing);
            config = sizing.XSmallIcon;
            vacuum = {};
            sizing = _closure1_slot1;
            kiloes = 4;
            record = output[kiloes];
            record = sizing.bind(tangon)(record);
            record = record.colors;
            record = record.INTERACTIVE_ACTIVE;
            vacuum['color'] = record;
            vacuum = romeon.bind(tangon)(config, vacuum);
            source['children'] = vacuum;
            source = romeon.bind(tangon)(ctrled, source);
            update[1] = source;
            echoed['children'] = update;
            update = option.bind(tangon)(golfie, echoed);
            echoed = new Array(2);
            echoed[0] = update;
            update = {};
            source = verify.videoContentFooterWrapper;
            update['style'] = source;
            source = {};
            ctrled = verify.questDetails;
            source['style'] = ctrled;
            ctrled = {};
            vacuum = verify.questDetailsGame;
            ctrled['style'] = vacuum;
            vacuum = output[sequen];
            vacuum = backup.bind(tangon)(vacuum);
            config = vacuum.Text;
            vacuum = {'variant': 'heading-lg/semibold', 'color': 'header-primary', 'children': 'Game name'};
            config = romeon.bind(tangon)(config, vacuum);
            vacuum = new Array(2);
            vacuum[0] = config;
            config = output[sequen];
            config = backup.bind(tangon)(config);
            record = config.Text;
            config = {'variant': 'heading-sm/semibold', 'color': 'text-normal', 'children': 'Publisher name'};
            config = romeon.bind(tangon)(record, config);
            vacuum[1] = config;
            ctrled['children'] = vacuum;
            vacuum = option.bind(tangon)(golfie, ctrled);
            ctrled = new Array(2);
            ctrled[0] = vacuum;
            vacuum = {};
            config = verify.questDetailsReward;
            vacuum['style'] = config;
            sequen = output[sequen];
            sequen = backup.bind(tangon)(sequen);
            config = sequen.Text;
            sequen = {'variant': 'text-sm/medium', 'children': 'Reward'};
            sequen = romeon.bind(tangon)(config, sequen);
            vacuum['children'] = sequen;
            vacuum = romeon.bind(tangon)(golfie, vacuum);
            ctrled[1] = vacuum;
            source['children'] = ctrled;
            ctrled = option.bind(tangon)(golfie, source);
            source = new Array(2);
            source[0] = ctrled;
            ctrled = 11;
            ctrled = output[ctrled];
            ctrled = backup.bind(tangon)(ctrled);
            vacuum = ctrled.Button;
            ctrled = {};
            ctrled['onPress'] = foxtra;
            sequen = 'Download Now';
            ctrled['text'] = sequen;
            ctrled = romeon.bind(tangon)(vacuum, ctrled);
            source[1] = ctrled;
            update['children'] = source;
            update = option.bind(tangon)(golfie, update);
            echoed[1] = update;
            yankee['children'] = echoed;
            yankee = option.bind(tangon)(golfie, yankee);
            oscard[1] = yankee;
            report['children'] = oscard;
            oscard = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            verify = verify.footer;
            oscard['style'] = verify;
            verify = output[offset];
            verify = backup.bind(tangon)(verify);
            yankee = verify.PressableOpacity;
            verify = {};
            verify['accessibilityRole'] = result;
            verify['onPress'] = foxtra;
            echoed = 12;
            echoed = output[echoed];
            echoed = backup.bind(tangon)(echoed);
            update = echoed.CopyIcon;
            echoed = {};
            source = output[kiloes];
            source = sizing.bind(tangon)(source);
            source = source.colors;
            source = source.TEXT_NORMAL;
            echoed['color'] = source;
            echoed = romeon.bind(tangon)(update, echoed);
            verify['children'] = echoed;
            yankee = romeon.bind(tangon)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            offset = output[offset];
            offset = backup.bind(tangon)(offset);
            yankee = offset.PressableOpacity;
            offset = {};
            offset['accessibilityRole'] = result;
            offset['onPress'] = foxtra;
            foxtra = 13;
            foxtra = output[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.MoreHorizontalIcon;
            foxtra = {};
            kiloes = output[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            kiloes = kiloes.colors;
            kiloes = kiloes.TEXT_NORMAL;
            foxtra['color'] = kiloes;
            foxtra = romeon.bind(tangon)(backup, foxtra);
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();