// app/modules/quests/native/QuestDock/QuestDockEnrolledBodyWatchTask.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot4 = golf;
    tango = tango.StyleSheet;
    var _closure1_slot5 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = {};
    golf = 'https://cdn.discordapp.com/assets/quests/1303112069985603634/video_high_res2.mp4';
    tango['uri'] = golf;
    var _closure1_slot8 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            mike = {};
            options = _closure1_slot1;
            tango = _closure1_slot2;
            golf = 4;
            report = tango[golf];
            oscar = undefined;
            report = options.bind(oscar)(report);
            report = report.colors;
            report = report.BG_BASE_TERTIARY;
            mike['backgroundColor'] = report;
            yankee = 'column';
            mike['flexDirection'] = yankee;
            entity['wrapper'] = mike;
            mike = {'borderRadius': null, 'backgroundColor': null, 'flexGrow': 1, 'flexShrink': 0, 'overflow': 'hidden'};
            report = tango[golf];
            report = options.bind(oscar)(report);
            report = report.radii;
            report = report.xl;
            mike['borderRadius'] = report;
            report = tango[golf];
            report = options.bind(oscar)(report);
            report = report.colors;
            report = report.BACKGROUND_ACCENT;
            mike['backgroundColor'] = report;
            offset = 1;
            report = 0;
            entity['videoWrapper'] = mike;
            mike = {};
            verify = _closure1_slot5;
            romeo = verify.absoluteFillObject;
            foxtrot = mike;
            verify = copyDataProperties(foxtrot, romeo);
            verify = 'flexDirection';
            mike[verify] = yankee;
            verify = 'flexGrow';
            mike[verify] = offset;
            verify = 'flexShrink';
            mike[verify] = report;
            offset = 'space-between';
            verify = 'justifyContent';
            mike[verify] = offset;
            verify = tango[golf];
            verify = options.bind(oscar)(verify);
            verify = verify.spacing;
            offset = verify.PX_16;
            verify = 'paddingHorizontal';
            mike[verify] = offset;
            verify = tango[golf];
            verify = options.bind(oscar)(verify);
            verify = verify.spacing;
            offset = verify.PX_16;
            verify = 'paddingVertical';
            mike[verify] = offset;
            entity['videoContentWrapper'] = mike;
            mike = {};
            verify = 'row';
            mike['flexDirection'] = verify;
            entity['videoContentHeaderWrapper'] = mike;
            mike = {'flexGrow': 1, 'flexShrink': 1};
            entity['videoContentHeading'] = mike;
            mike = {'alignItems': 'center', 'flexDirection': 'row'};
            verify = tango[golf];
            verify = options.bind(oscar)(verify);
            verify = verify.spacing;
            verify = verify.PX_24;
            mike['marginBottom'] = verify;
            entity['questDetails'] = mike;
            mike = {'flexGrow': 1, 'flexShrink': 1};
            entity['questDetailsGame'] = mike;
            mike = {};
            entity['videoContentFooterWrapper'] = mike;
            mike = {'justifyContent': 'flex-end', 'flexDirection': 'row'};
            tango = tango[golf];
            tango = options.bind(oscar)(tango);
            tango = tango.spacing;
            tango = tango.PX_24;
            mike['padding'] = tango;
            options = argFoo;
            tango = undefined;
            if(!options) { _fun00002_ip = 390; continue _fun00001 }
 388:
            tango = 0;
 390:
            mike['paddingBottom'] = tango;
            report = _closure1_slot1;
            tango = _closure1_slot2;
            tango = tango[golf];
            tango = report.bind(oscar)(tango);
            tango = tango.spacing;
            tango = tango.PX_24;
            mike['gap'] = tango;
            entity['footer'] = mike;
            mike = {'flexGrow': 0, 'flexShrink': 0};
            entity['questDetailsReward'] = mike;
            mike = {};
            zulu = _closure1_slot5;
            romeo = zulu.absoluteFillObject;
            foxtrot = mike;
            zulu = copyDataProperties(foxtrot, romeo);
            entity['video'] = mike;
            return entity;
        }
    };
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 14;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/quests/native/QuestDock/QuestDockEnrolledBodyWatchTask.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: QuestDockEnrolledBodyWatchTask
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            foxtrot = function() { // Original name: handleClose
                mike = _closure2_slot0;
                entity = undefined;
                mike = mike.bind(entity)();
                return entity;
            };
            mike = entity.fullHeight;
            tango = undefined;
            golf = tango !== mike;
            if(!golf) { _fun00004_ip = 30; continue _fun00003 }
 27:
            golf = mike;
 30:
            mike = entity.onClose;
            var _closure2_slot0 = mike;
            mike = entity.paddingTop;
            options = 0;
            if(!(tango !== mike)) { _fun00004_ip = 55; continue _fun00003 }
 52:
            options = mike;
 55:
            entity = entity.paddingBottom;
            offset = 0;
            if(!(tango !== entity)) { _fun00004_ip = 70; continue _fun00003 }
 67:
            offset = entity;
 70:
            entity = _closure1_slot9;
            verify = entity.bind(tango)(golf);
            oscar = _closure1_slot3;
            zulu = oscar.useContext;
            mike = _closure1_slot0;
            report = _closure1_slot2;
            entity = 5;
            entity = report[entity];
            entity = mike.bind(tango)(entity);
            entity = entity.QuestDockGestureContext;
            entity = zulu.bind(oscar)(entity);
            yankee = entity.windowDimensions;
            zulu = _closure1_slot7;
            entity = 6;
            entity = report[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.SafeAreaPaddingView;
            entity = {};
            entity['bottom'] = golf;
            report = true;
            entity['top'] = report;
            report = {};
            context = verify.wrapper;
            papa = report;
            oscar = copyDataProperties(papa, context);
            oscar = yankee.get;
            oscar = oscar.bind(yankee)();
            if(golf) { _fun00004_ip = 206; continue _fun00003 }
 190:
            golf = oscar.maxContentHeight;
            golf = golf - offset;
            golf = golf - options;
            _fun00004_ip = 211; continue _fun00003;
 206:
            golf = oscar.height;
 211:
            oscar = 'height';
            report[oscar] = golf;
            entity['style'] = report;
            options = _closure1_slot7;
            golf = _closure1_slot4;
            report = {};
            oscar = verify.videoWrapper;
            report['style'] = oscar;
            romeo = _closure1_slot6;
            backup = _closure1_slot0;
            output = _closure1_slot2;
            oscar = 7;
            oscar = output[oscar];
            oscar = backup.bind(tango)(oscar);
            offset = oscar.VideoComponent;
            oscar = {'style': null, 'source': null, 'resizeMode': 'cover', 'mixWithOthers': 'mix', 'muted': true};
            yankee = verify.video;
            oscar['style'] = yankee;
            yankee = _closure1_slot8;
            oscar['source'] = yankee;
            offset = romeo.bind(tango)(offset, oscar);
            oscar = new Array(2);
            oscar[0] = offset;
            yankee = {};
            offset = verify.videoContentWrapper;
            yankee['style'] = offset;
            echo = {};
            offset = verify.videoContentHeaderWrapper;
            echo['style'] = offset;
            sequence = 8;
            offset = output[sequence];
            offset = backup.bind(tango)(offset);
            sizing = offset.Text;
            offset = {'style': null, 'variant': 'heading-md/semibold', 'color': 'header-primary', 'children': 'Quest name'};
            result = verify.videoContentHeading;
            offset['style'] = result;
            offset = romeo.bind(tango)(sizing, offset);
            update = new Array(2);
            update[0] = offset;
            offset = 9;
            sizing = output[offset];
            sizing = backup.bind(tango)(sizing);
            control = sizing.PressableOpacity;
            source = {};
            result = 'button';
            source['accessibilityRole'] = result;
            source['onPress'] = foxtrot;
            sizing = 10;
            sizing = output[sizing];
            sizing = backup.bind(tango)(sizing);
            config = sizing.XSmallIcon;
            vacuum = {};
            sizing = _closure1_slot1;
            kilo = 4;
            record = output[kilo];
            record = sizing.bind(tango)(record);
            record = record.colors;
            record = record.INTERACTIVE_ACTIVE;
            vacuum['color'] = record;
            vacuum = romeo.bind(tango)(config, vacuum);
            source['children'] = vacuum;
            source = romeo.bind(tango)(control, source);
            update[1] = source;
            echo['children'] = update;
            update = options.bind(tango)(golf, echo);
            echo = new Array(2);
            echo[0] = update;
            update = {};
            source = verify.videoContentFooterWrapper;
            update['style'] = source;
            source = {};
            control = verify.questDetails;
            source['style'] = control;
            control = {};
            vacuum = verify.questDetailsGame;
            control['style'] = vacuum;
            vacuum = output[sequence];
            vacuum = backup.bind(tango)(vacuum);
            config = vacuum.Text;
            vacuum = {'variant': 'heading-lg/semibold', 'color': 'header-primary', 'children': 'Game name'};
            config = romeo.bind(tango)(config, vacuum);
            vacuum = new Array(2);
            vacuum[0] = config;
            config = output[sequence];
            config = backup.bind(tango)(config);
            record = config.Text;
            config = {'variant': 'heading-sm/semibold', 'color': 'text-normal', 'children': 'Publisher name'};
            config = romeo.bind(tango)(record, config);
            vacuum[1] = config;
            control['children'] = vacuum;
            vacuum = options.bind(tango)(golf, control);
            control = new Array(2);
            control[0] = vacuum;
            vacuum = {};
            config = verify.questDetailsReward;
            vacuum['style'] = config;
            sequence = output[sequence];
            sequence = backup.bind(tango)(sequence);
            config = sequence.Text;
            sequence = {'variant': 'text-sm/medium', 'children': 'Reward'};
            sequence = romeo.bind(tango)(config, sequence);
            vacuum['children'] = sequence;
            vacuum = romeo.bind(tango)(golf, vacuum);
            control[1] = vacuum;
            source['children'] = control;
            control = options.bind(tango)(golf, source);
            source = new Array(2);
            source[0] = control;
            control = 11;
            control = output[control];
            control = backup.bind(tango)(control);
            vacuum = control.Button;
            control = {};
            control['onPress'] = foxtrot;
            sequence = 'Download Now';
            control['text'] = sequence;
            control = romeo.bind(tango)(vacuum, control);
            source[1] = control;
            update['children'] = source;
            update = options.bind(tango)(golf, update);
            echo[1] = update;
            yankee['children'] = echo;
            yankee = options.bind(tango)(golf, yankee);
            oscar[1] = yankee;
            report['children'] = oscar;
            oscar = options.bind(tango)(golf, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            verify = verify.footer;
            oscar['style'] = verify;
            verify = output[offset];
            verify = backup.bind(tango)(verify);
            yankee = verify.PressableOpacity;
            verify = {};
            verify['accessibilityRole'] = result;
            verify['onPress'] = foxtrot;
            echo = 12;
            echo = output[echo];
            echo = backup.bind(tango)(echo);
            update = echo.CopyIcon;
            echo = {};
            source = output[kilo];
            source = sizing.bind(tango)(source);
            source = source.colors;
            source = source.TEXT_NORMAL;
            echo['color'] = source;
            echo = romeo.bind(tango)(update, echo);
            verify['children'] = echo;
            yankee = romeo.bind(tango)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            offset = output[offset];
            offset = backup.bind(tango)(offset);
            yankee = offset.PressableOpacity;
            offset = {};
            offset['accessibilityRole'] = result;
            offset['onPress'] = foxtrot;
            foxtrot = 13;
            foxtrot = output[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            backup = foxtrot.MoreHorizontalIcon;
            foxtrot = {};
            kilo = output[kilo];
            kilo = sizing.bind(tango)(kilo);
            kilo = kilo.colors;
            kilo = kilo.TEXT_NORMAL;
            foxtrot['color'] = kilo;
            foxtrot = romeo.bind(tango)(backup, foxtrot);
            offset['children'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();