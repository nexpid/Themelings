// app/modules/quests/native/QuestDock/QuestDockEnrolledBodyStreamOrPlayTask.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    romeon = tangon.QUEST_DOCK_EXPANDED_ENROLLED_PADDING_TOP;
    foxtra = tangon.QUEST_DOCK_EXPANDED_PADDING_BOTTOM;
    offset = tangon.QUEST_DOCK_EXPANDED_PADDING_HORIZONTAL;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['paddingBottom'] = foxtra;
    verify['paddingTop'] = romeon;
    verify['paddingHorizontal'] = offset;
    tangon['wrapper'] = verify;
    verify = {};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginBottom'] = romeon;
    tangon['headerWrapper'] = verify;
    verify = {'display': 'flex', 'gap': null, 'flexGrow': 0, 'flexShrink': 0};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['gap'] = romeon;
    tangon['contentWrapper'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginTop'] = romeon;
    tangon['footer'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    romeon = -romeon;
    verify['marginLeft'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    offset = -offset;
    verify['marginRight'] = offset;
    tangon['footerWrapper'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestDock/QuestDockEnrolledBodyStreamOrPlayTask.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: QuestDockEnrolledBodyStreamOrPlayTask
        entity = argFoo;
        zuuluu = entity.questId;
        sizing = _closure1_slot0;
        kiloes = _closure1_slot2;
        option = 6;
        entity = kiloes[option];
        tangon = undefined;
        michal = sizing.bind(tangon)(entity);
        entity = michal.useEnrolledQuestContentProps;
        entity = entity.bind(michal)(zuuluu);
        backup = entity.quest;
        foxtra = entity.step;
        romeon = entity.defibrillator;
        yankee = entity.stepActions;
        result = entity.handleTaskSelect;
        output = entity.showMicrophone;
        entity = _closure1_slot6;
        offset = entity.bind(tangon)();
        zuuluu = _closure1_slot5;
        michal = _closure1_slot3;
        entity = {};
        report = offset.wrapper;
        entity['style'] = report;
        golfie = _closure1_slot4;
        report = {};
        verify = offset.headerWrapper;
        report['style'] = verify;
        verify = _closure1_slot1;
        oscard = 7;
        oscard = kiloes[oscard];
        echoed = verify.bind(tangon)(oscard);
        oscard = {};
        oscard['quest'] = backup;
        oscard['step'] = foxtra;
        update = true;
        oscard['withActionSheet'] = update;
        oscard = golfie.bind(tangon)(echoed, oscard);
        report['children'] = oscard;
        oscard = golfie.bind(tangon)(michal, report);
        report = new Array(3);
        report[0] = oscard;
        oscard = {};
        echoed = offset.contentWrapper;
        oscard['style'] = echoed;
        option = kiloes[option];
        option = sizing.bind(tangon)(option);
        sizing = option.QuestBottomSheetContent;
        option = {};
        option['defibrillator'] = romeon;
        option['quest'] = backup;
        option['handleTaskSelect'] = result;
        option['showMicrophone'] = output;
        option['step'] = foxtra;
        option = golfie.bind(tangon)(sizing, option);
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[1] = oscard;
        oscard = {};
        option = offset.footerWrapper;
        oscard['style'] = option;
        option = 8;
        option = kiloes[option];
        verify = verify.bind(tangon)(option);
        option = {};
        option['quest'] = backup;
        option['step'] = foxtra;
        foxtra = romeon.isActive;
        option['isDefibrilating'] = foxtra;
        foxtra = yankee.onBack;
        option['onBack'] = foxtra;
        romeon = romeon.start;
        option['onDefib'] = romeon;
        yankee = yankee.onNext;
        option['onConnectConsoleNext'] = yankee;
        offset = offset.footer;
        option['style'] = offset;
        offset = false;
        option['withSafeArea'] = offset;
        option = golfie.bind(tangon)(verify, option);
        oscard['children'] = option;
        oscard = golfie.bind(tangon)(michal, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();