// app/modules/quests/native/QuestDock/QuestDockGestureContext.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    report = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = report;
    var _closure1_slot2 = golfie;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    yankee = 0;
    option = golfie[yankee];
    tangon = argCor;
    entity = undefined;
    option = tangon.bind(entity)(option);
    var _closure1_slot3 = option;
    tangon = 1;
    tangon = golfie[tangon];
    tangon = report.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    offset = tangon.QuestDockMode;
    var _closure1_slot5 = offset;
    tangon = 3;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    report = tangon.QUEST_DOCK_COLLAPSED_HEIGHT;
    var _closure1_slot6 = report;
    tangon = tangon.QUEST_DOCK_EXPANDED_HEIGHT;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot8 = tangon;
    report = option.createContext;
    tangon = {};
    verify = 5;
    romeon = golfie[verify];
    backup = oscard.bind(entity)(romeon);
    foxtra = backup.createFakeSharedValue;
    romeon = {'width': 0, 'height': 0, 'x': 0, 'y': 0, 'prevDeltaY': 0};
    romeon = foxtra.bind(backup)(romeon);
    tangon['questDockWrapperSpecs'] = romeon;
    romeon = golfie[verify];
    backup = oscard.bind(entity)(romeon);
    foxtra = backup.createFakeSharedValue;
    romeon = {'width': 0, 'height': 0, 'maxContentHeight': 0, 'landscape': false};
    romeon = foxtra.bind(backup)(romeon);
    tangon['windowDimensions'] = romeon;
    romeon = golfie[verify];
    foxtra = oscard.bind(entity)(romeon);
    romeon = foxtra.createFakeSharedValue;
    offset = offset.COLLAPSED;
    offset = romeon.bind(foxtra)(offset);
    tangon['activeQuestDockMode'] = offset;
    verify = golfie[verify];
    offset = oscard.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(yankee);
    tangon['minExpandedContentHeight'] = verify;
    tangon = report.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    report = option.memo;
    michal = function(argFoo) { // Original name: QuestDockGestureContextProviderInner
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            oscard = _closure1_slot3;
            golfie = oscard.useMemo;
            yankee = _closure1_slot0;
            romeon = _closure1_slot2;
            zuuluu = 6;
            zuuluu = romeon[zuuluu];
            tangon = undefined;
            zuuluu = yankee.bind(tangon)(zuuluu);
            report = zuuluu.getWindowDimensions;
            zuuluu = new Array(0);
            foxtra = golfie.bind(oscard)(report, zuuluu);
            zuuluu = 7;
            zuuluu = romeon[zuuluu];
            golfie = yankee.bind(tangon)(zuuluu);
            report = golfie.useMainTabsHeight;
            zuuluu = {'enabled': true, 'ignoreQuestDock': true};
            zuuluu = report.bind(golfie)(zuuluu);
            var _closure2_slot0 = zuuluu;
            report = oscard.useRef;
            report = report.bind(oscard)(zuuluu);
            var _closure2_slot1 = report;
            golfie = 8;
            report = romeon[golfie];
            option = yankee.bind(tangon)(report);
            oscard = option.useSharedValue;
            report = {};
            verify = foxtra.width;
            report['width'] = verify;
            verify = foxtra.height;
            report['height'] = verify;
            offset = foxtra.width;
            verify = foxtra.height;
            verify = offset > verify;
            report['landscape'] = verify;
            verify = foxtra.height;
            verify = verify - zuuluu;
            report['maxContentHeight'] = verify;
            offset = oscard.bind(option)(report);
            var _closure2_slot2 = offset;
            report = romeon[golfie];
            verify = yankee.bind(tangon)(report);
            option = verify.useSharedValue;
            oscard = {};
            report = 9;
            backup = romeon[report];
            output = yankee.bind(tangon)(backup);
            sizing = output.getQuestDockCollapsedWidth;
            kiloes = foxtra.width;
            foxtra = 10;
            backup = romeon[foxtra];
            result = yankee.bind(tangon)(backup);
            backup = result.getSafeAreaInsets;
            backup = backup.bind(result)();
            backup = backup.left;
            foxtra = romeon[foxtra];
            result = yankee.bind(tangon)(foxtra);
            foxtra = result.getSafeAreaInsets;
            foxtra = foxtra.bind(result)();
            foxtra = foxtra.right;
            foxtra = sizing.bind(output)(kiloes, backup, foxtra);
            oscard['width'] = foxtra;
            backup = _closure1_slot6;
            oscard['height'] = backup;
            foxtra = 0;
            oscard['x'] = foxtra;
            oscard['y'] = backup;
            oscard['prevDeltaY'] = foxtra;
            verify = option.bind(verify)(oscard);
            var _closure2_slot3 = verify;
            oscard = romeon[golfie];
            option = yankee.bind(tangon)(oscard);
            oscard = option.useSharedValue;
            report = romeon[report];
            romeon = yankee.bind(tangon)(report);
            yankee = romeon.isSoftDismissed;
            report = _closure1_slot4;
            report = report.questDockSoftDismissedAt;
            report = yankee.bind(romeon)(report);
            yankee = _closure1_slot5;
            if(report) { _fun00002_ip = 378; continue _fun00001 }
 370:
            report = yankee.COLLAPSED;
            _fun00002_ip = 384; continue _fun00001;
 378:
            report = yankee.SOFT_DISMISSED;
 384:
            option = oscard.bind(option)(report);
            var _closure2_slot4 = option;
            oscard = _closure1_slot0;
            report = _closure1_slot2;
            report = report[golfie];
            golfie = oscard.bind(tangon)(report);
            oscard = golfie.useSharedValue;
            report = _closure1_slot7;
            golfie = oscard.bind(golfie)(report);
            var _closure2_slot5 = golfie;
            oscard = _closure1_slot3;
            yankee = oscard.useEffect;
            report = new Array(1);
            report[0] = zuuluu;
            zuuluu = function() {
                michal = _closure2_slot1;
                entity = _closure2_slot0;
                michal['current'] = entity;
                entity = undefined;
                return entity;
            };
            zuuluu = yankee.bind(oscard)(zuuluu, report);
            yankee = oscard.useEffect;
            report = new Array(1);
            report[0] = offset;
            zuuluu = function() {
                michal = _closure1_slot1;
                zuuluu = _closure1_slot2;
                entity = 11;
                entity = zuuluu[entity];
                zuuluu = undefined;
                michal = michal.bind(zuuluu)(entity);
                entity = function(argFoo) {
                    entity = argFoo;
                    oscard = entity.width;
                    report = entity.height;
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.set;
                    entity = {};
                    entity['width'] = oscard;
                    entity['height'] = report;
                    oscard = oscard > report;
                    entity['landscape'] = oscard;
                    tangon = _closure2_slot1;
                    tangon = tangon.current;
                    tangon = report - tangon;
                    entity['maxContentHeight'] = tangon;
                    entity = michal.bind(zuuluu)(entity);
                    entity = undefined;
                    return entity;
                };
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            zuuluu = yankee.bind(oscard)(zuuluu, report);
            report = oscard.useMemo;
            zuuluu = new Array(4);
            zuuluu[0] = offset;
            zuuluu[1] = verify;
            zuuluu[2] = option;
            zuuluu[3] = golfie;
            michal = function() {
                entity = {};
                zuuluu = _closure2_slot2;
                entity['windowDimensions'] = zuuluu;
                zuuluu = _closure2_slot3;
                entity['questDockWrapperSpecs'] = zuuluu;
                zuuluu = _closure2_slot4;
                entity['activeQuestDockMode'] = zuuluu;
                michal = _closure2_slot5;
                entity['minExpandedContentHeight'] = michal;
                return entity;
            };
            report = report.bind(oscard)(michal, zuuluu);
            zuuluu = _closure1_slot8;
            entity = _closure1_slot9;
            michal = entity.Provider;
            entity = {};
            entity['value'] = report;
            report = argFoo;
            report = report.children;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = report.bind(option)(michal);
    report = 12;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/quests/native/QuestDock/QuestDockGestureContext.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['QuestDockGestureContext'] = tangon;
    zuuluu['QuestDockGestureContextProvider'] = michal;
    return entity;
})();