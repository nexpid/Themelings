// app/modules/quests/native/QuestDock/QuestDockGestureContext.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    report = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = report;
    var _closure1_slot2 = golf;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    yankee = 0;
    options = golf[yankee];
    tango = argCorge;
    entity = undefined;
    options = tango.bind(entity)(options);
    var _closure1_slot3 = options;
    tango = 1;
    tango = golf[tango];
    tango = report.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    offset = tango.QuestDockMode;
    var _closure1_slot5 = offset;
    tango = 3;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    report = tango.QUEST_DOCK_COLLAPSED_HEIGHT;
    var _closure1_slot6 = report;
    tango = tango.QUEST_DOCK_EXPANDED_HEIGHT;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot8 = tango;
    report = options.createContext;
    tango = {};
    verify = 5;
    romeo = golf[verify];
    backup = oscar.bind(entity)(romeo);
    foxtrot = backup.createFakeSharedValue;
    romeo = {'width': 0, 'height': 0, 'x': 0, 'y': 0};
    romeo = foxtrot.bind(backup)(romeo);
    tango['questDockWrapperSpecs'] = romeo;
    romeo = golf[verify];
    backup = oscar.bind(entity)(romeo);
    foxtrot = backup.createFakeSharedValue;
    romeo = {'width': 0, 'height': 0, 'maxContentHeight': 0, 'landscape': false};
    romeo = foxtrot.bind(backup)(romeo);
    tango['windowDimensions'] = romeo;
    romeo = golf[verify];
    foxtrot = oscar.bind(entity)(romeo);
    romeo = foxtrot.createFakeSharedValue;
    offset = offset.COLLAPSED;
    offset = romeo.bind(foxtrot)(offset);
    tango['activeQuestDockMode'] = offset;
    verify = golf[verify];
    offset = oscar.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(yankee);
    tango['minExpandedContentHeight'] = verify;
    tango = report.bind(options)(tango);
    var _closure1_slot9 = tango;
    report = options.memo;
    mike = function(argFoo) { // Original name: QuestDockGestureContextProviderInner
        _fun91316: for(var _fun91316_ip = 0; ; ) switch(_fun91316_ip) {
 0:
            oscar = _closure1_slot3;
            golf = oscar.useMemo;
            yankee = _closure1_slot0;
            romeo = _closure1_slot2;
            zulu = 6;
            zulu = romeo[zulu];
            tango = undefined;
            zulu = yankee.bind(tango)(zulu);
            report = zulu.getWindowDimensions;
            zulu = new Array(0);
            foxtrot = golf.bind(oscar)(report, zulu);
            zulu = 7;
            zulu = romeo[zulu];
            golf = yankee.bind(tango)(zulu);
            report = golf.useMainTabsHeight;
            zulu = {'enabled': true, 'ignoreQuestDock': true};
            zulu = report.bind(golf)(zulu);
            var _closure2_slot0 = zulu;
            report = oscar.useRef;
            report = report.bind(oscar)(zulu);
            var _closure2_slot1 = report;
            golf = 8;
            report = romeo[golf];
            options = yankee.bind(tango)(report);
            oscar = options.useSharedValue;
            report = {};
            verify = foxtrot.width;
            report['width'] = verify;
            verify = foxtrot.height;
            report['height'] = verify;
            offset = foxtrot.width;
            verify = foxtrot.height;
            verify = offset > verify;
            report['landscape'] = verify;
            verify = foxtrot.height;
            verify = verify - zulu;
            report['maxContentHeight'] = verify;
            offset = oscar.bind(options)(report);
            var _closure2_slot2 = offset;
            report = romeo[golf];
            verify = yankee.bind(tango)(report);
            options = verify.useSharedValue;
            oscar = {};
            report = 9;
            backup = romeo[report];
            output = yankee.bind(tango)(backup);
            sizing = output.getQuestDockCollapsedWidth;
            kilo = foxtrot.width;
            foxtrot = 10;
            backup = romeo[foxtrot];
            result = yankee.bind(tango)(backup);
            backup = result.getSafeAreaInsets;
            backup = backup.bind(result)();
            backup = backup.left;
            foxtrot = romeo[foxtrot];
            result = yankee.bind(tango)(foxtrot);
            foxtrot = result.getSafeAreaInsets;
            foxtrot = foxtrot.bind(result)();
            foxtrot = foxtrot.right;
            foxtrot = sizing.bind(output)(kilo, backup, foxtrot);
            oscar['width'] = foxtrot;
            foxtrot = _closure1_slot6;
            oscar['height'] = foxtrot;
            backup = 0;
            oscar['x'] = backup;
            oscar['y'] = foxtrot;
            verify = options.bind(verify)(oscar);
            var _closure2_slot3 = verify;
            oscar = romeo[golf];
            options = yankee.bind(tango)(oscar);
            oscar = options.useSharedValue;
            report = romeo[report];
            romeo = yankee.bind(tango)(report);
            yankee = romeo.isSoftDismissed;
            report = _closure1_slot4;
            report = report.questDockSoftDismissedAt;
            report = yankee.bind(romeo)(report);
            yankee = _closure1_slot5;
            if(report) { _fun91316_ip = 369; continue _fun91316 }
 361:
            report = yankee.COLLAPSED;
            _fun91316_ip = 375; continue _fun91316;
 369:
            report = yankee.SOFT_DISMISSED;
 375:
            options = oscar.bind(options)(report);
            var _closure2_slot4 = options;
            oscar = _closure1_slot0;
            report = _closure1_slot2;
            report = report[golf];
            golf = oscar.bind(tango)(report);
            oscar = golf.useSharedValue;
            report = _closure1_slot7;
            golf = oscar.bind(golf)(report);
            var _closure2_slot5 = golf;
            oscar = _closure1_slot3;
            yankee = oscar.useEffect;
            report = new Array(1);
            report[0] = zulu;
            zulu = function() {
                mike = _closure2_slot1;
                entity = _closure2_slot0;
                mike['current'] = entity;
                entity = undefined;
                return entity;
            };
            zulu = yankee.bind(oscar)(zulu, report);
            yankee = oscar.useEffect;
            report = new Array(1);
            report[0] = offset;
            zulu = function() {
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 11;
                entity = zulu[entity];
                zulu = undefined;
                mike = mike.bind(zulu)(entity);
                entity = function(argFoo) {
                    entity = argFoo;
                    oscar = entity.width;
                    report = entity.height;
                    zulu = _closure2_slot2;
                    mike = zulu.set;
                    entity = {};
                    entity['width'] = oscar;
                    entity['height'] = report;
                    oscar = oscar > report;
                    entity['landscape'] = oscar;
                    tango = _closure2_slot1;
                    tango = tango.current;
                    tango = report - tango;
                    entity['maxContentHeight'] = tango;
                    entity = mike.bind(zulu)(entity);
                    entity = undefined;
                    return entity;
                };
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            zulu = yankee.bind(oscar)(zulu, report);
            report = oscar.useMemo;
            zulu = new Array(4);
            zulu[0] = offset;
            zulu[1] = verify;
            zulu[2] = options;
            zulu[3] = golf;
            mike = function() {
                entity = {};
                zulu = _closure2_slot2;
                entity['windowDimensions'] = zulu;
                zulu = _closure2_slot3;
                entity['questDockWrapperSpecs'] = zulu;
                zulu = _closure2_slot4;
                entity['activeQuestDockMode'] = zulu;
                mike = _closure2_slot5;
                entity['minExpandedContentHeight'] = mike;
                return entity;
            };
            report = report.bind(oscar)(mike, zulu);
            zulu = _closure1_slot8;
            entity = _closure1_slot9;
            mike = entity.Provider;
            entity = {};
            entity['value'] = report;
            report = argFoo;
            report = report.children;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = report.bind(options)(mike);
    report = 12;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/quests/native/QuestDock/QuestDockGestureContext.tsx';
    report = oscar.bind(golf)(report);
    zulu['QuestDockGestureContext'] = tango;
    zulu['QuestDockGestureContextProvider'] = mike;
    return entity;
})();