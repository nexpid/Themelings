// app/modules/quests/native/QuestDock/QuestDockUtils.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var10 = require;
    var3 = exports;
    var11 = dependencyMap;
    var1 = global;
    var6 = var1.Object;
    var5 = var6.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var5.bind(var6)(var3, var1, var4);
    var1 = 0;
    var4 = var11[var1];
    var1 = undefined;
    var4 = var10.bind(var1)(var4);
    var5 = var4.PixelRatio;
    var4 = 1;
    var4 = var11[var4];
    var4 = var10.bind(var1)(var4);
    var6 = var4.QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED;
    var _closure1_slot0 = var6;
    var6 = var4.QUEST_DOCK_COLLAPSED_MAX_WIDTH;
    var _closure1_slot1 = var6;
    var4 = var4.QUEST_DOCK_COLLAPSED_HEIGHT;
    var _closure1_slot2 = var4;
    var4 = var5.get;
    var4 = var4.bind(var5)();
    var _closure1_slot3 = var4;
    var4 = {};
    var5 = 'function roundToNearestPixel_QuestDockUtilsTsx1(position){const{PIXEL_DENSITY}=this.__closure;return Math.round(position*PIXEL_DENSITY)/PIXEL_DENSITY;}';
    var4['code'] = var5;
    var _closure1_slot4 = var4;
    var4 = function() {
        var1 = function roundToNearestPixel(arg1) {
            var1 = global;
            var4 = var1.Math;
            var3 = var4.round;
            var2 = _closure1_slot3;
            var1 = arg1;
            var1 = var1 * var2;
            var1 = var3.bind(var4)(var1);
            var1 = var1 / var2;
            return var1;
        };
        var3 = {};
        var4 = _closure1_slot3;
        var3['PIXEL_DENSITY'] = var4;
        var1['__closure'] = var3;
        var3 = 9602449563120.0;
        var1['__workletHash'] = var3;
        var2 = _closure1_slot4;
        var1['__initData'] = var2;
        return var1;
    };
    var8 = var4.bind(var1)();
    var4 = {};
    var5 = 'function getQuestDockExpandedHeightLimits_QuestDockUtilsTsx2(windowHeight,safeAreaTop,minContentHeight){const{QUEST_DOCK_COLLAPSED_HEIGHT}=this.__closure;return{minHeight:QUEST_DOCK_COLLAPSED_HEIGHT,maxHeight:Math.min(minContentHeight,windowHeight-safeAreaTop)};}';
    var4['code'] = var5;
    var _closure1_slot5 = var4;
    var4 = function() {
        var1 = function getQuestDockExpandedHeightLimits(arg1, arg2, arg3) {
            var1 = {};
            var2 = _closure1_slot2;
            var1['minHeight'] = var2;
            var2 = global;
            var5 = var2.Math;
            var4 = var5.min;
            var3 = arg1;
            var2 = arg2;
            var3 = var3 - var2;
            var2 = arg3;
            var2 = var4.bind(var5)(var2, var3);
            var1['maxHeight'] = var2;
            return var1;
        };
        var3 = {};
        var4 = _closure1_slot2;
        var3['QUEST_DOCK_COLLAPSED_HEIGHT'] = var4;
        var1['__closure'] = var3;
        var3 = 880847803554.0;
        var1['__workletHash'] = var3;
        var2 = _closure1_slot5;
        var1['__initData'] = var2;
        return var1;
    };
    var7 = var4.bind(var1)();
    var4 = {};
    var5 = 'function getQuestDockCollapsedWidth_QuestDockUtilsTsx3(windowWidth,safeAreaLeft,safeAreaRight){const{QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED,QUEST_DOCK_COLLAPSED_MAX_WIDTH}=this.__closure;safeAreaLeft=Math.max(safeAreaLeft,QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED);safeAreaRight=Math.max(safeAreaRight,QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED);return Math.min(windowWidth-safeAreaLeft-safeAreaRight,QUEST_DOCK_COLLAPSED_MAX_WIDTH);}';
    var4['code'] = var5;
    var _closure1_slot6 = var4;
    var4 = function() {
        var1 = function getQuestDockCollapsedWidth(arg1, arg2, arg3) {
            var2 = global;
            var5 = var2.Math;
            var4 = var5.max;
            var7 = _closure1_slot0;
            var3 = arg2;
            var6 = var4.bind(var5)(var3, var7);
            var5 = var2.Math;
            var4 = var5.max;
            var3 = arg3;
            var5 = var4.bind(var5)(var3, var7);
            var4 = var2.Math;
            var3 = var4.min;
            var2 = arg1;
            var2 = var2 - var6;
            var2 = var2 - var5;
            var1 = _closure1_slot1;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        };
        var3 = {};
        var4 = _closure1_slot0;
        var3['QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED'] = var4;
        var4 = _closure1_slot1;
        var3['QUEST_DOCK_COLLAPSED_MAX_WIDTH'] = var4;
        var1['__closure'] = var3;
        var3 = 1119343760780.0;
        var1['__workletHash'] = var3;
        var2 = _closure1_slot6;
        var1['__initData'] = var2;
        return var1;
    };
    var6 = var4.bind(var1)();
    var4 = {};
    var5 = 'function getQuestDockExpandedWidth_QuestDockUtilsTsx4(windowWidth,safeAreaLeft,safeAreaRight){const{QUEST_DOCK_COLLAPSED_MAX_WIDTH}=this.__closure;return Math.min(windowWidth-safeAreaLeft-safeAreaRight,QUEST_DOCK_COLLAPSED_MAX_WIDTH);}';
    var4['code'] = var5;
    var _closure1_slot7 = var4;
    var4 = function() {
        var1 = function getQuestDockExpandedWidth(arg1, arg2, arg3) {
            var1 = global;
            var4 = var1.Math;
            var3 = var4.min;
            var2 = arg1;
            var1 = arg2;
            var2 = var2 - var1;
            var1 = arg3;
            var2 = var2 - var1;
            var1 = _closure1_slot1;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        };
        var3 = {};
        var4 = _closure1_slot1;
        var3['QUEST_DOCK_COLLAPSED_MAX_WIDTH'] = var4;
        var1['__closure'] = var3;
        var3 = 6480418564130.0;
        var1['__workletHash'] = var3;
        var2 = _closure1_slot7;
        var1['__initData'] = var2;
        return var1;
    };
    var5 = var4.bind(var1)();
    var4 = {};
    var9 = 'function getQuestDockClosedWidth_QuestDockUtilsTsx5(windowWidth,safeAreaLeft,safeAreaRight){const{QUEST_DOCK_COLLAPSED_MAX_WIDTH}=this.__closure;return Math.min(windowWidth-safeAreaLeft-safeAreaRight,QUEST_DOCK_COLLAPSED_MAX_WIDTH);}';
    var4['code'] = var9;
    var _closure1_slot8 = var4;
    var4 = function() {
        var1 = function getQuestDockClosedWidth(arg1, arg2, arg3) {
            var1 = global;
            var4 = var1.Math;
            var3 = var4.min;
            var2 = arg1;
            var1 = arg2;
            var2 = var2 - var1;
            var1 = arg3;
            var2 = var2 - var1;
            var1 = _closure1_slot1;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        };
        var3 = {};
        var4 = _closure1_slot1;
        var3['QUEST_DOCK_COLLAPSED_MAX_WIDTH'] = var4;
        var1['__closure'] = var3;
        var3 = 14159592925974.0;
        var1['__workletHash'] = var3;
        var2 = _closure1_slot8;
        var1['__initData'] = var2;
        return var1;
    };
    var4 = var4.bind(var1)();
    var9 = 2;
    var12 = var11[var9];
    var9 = metroImportDefault;
    var9 = var9.bind(var1)(var12);
    var9 = var9.Millis;
    var12 = var9.HOUR;
    var9 = 3;
    var12 = var9 * var12;
    var _closure1_slot9 = var12;
    var9 = var11[var9];
    var11 = var10.bind(var1)(var9);
    var10 = var11.fileFinishedImporting;
    var9 = 'modules/quests/native/QuestDock/QuestDockUtils.tsx';
    var9 = var10.bind(var11)(var9);
    var3['roundToNearestPixel'] = var8;
    var3['getQuestDockExpandedHeightLimits'] = var7;
    var3['getQuestDockCollapsedWidth'] = var6;
    var3['getQuestDockExpandedWidth'] = var5;
    var3['getQuestDockClosedWidth'] = var4;
    var2 = function isSoftDismissed(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var3 = arg1;
            var1 = null;
            var1 = var1 != var3;
            if(!var1) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var2 = global;
            var4 = var2.Date;
            var2 = var4.now;
            var2 = var2.bind(var4)();
            var3 = var2 - var3;
            var2 = _closure1_slot9;
            var1 = var3 < var2;
case 2:
            return var1;
        }
    };
    var3['isSoftDismissed'] = var2;
    return var1;
})();