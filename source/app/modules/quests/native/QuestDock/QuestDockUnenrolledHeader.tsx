// app/modules/quests/native/QuestDock/QuestDockUnenrolledHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    yankee = 2;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.QuestDockMode;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED;
    var _closure1_slot6 = option;
    option = tangon.QUEST_DOCK_CONTENT_BORDER_RADII;
    var _closure1_slot7 = option;
    option = tangon.QUEST_DOCK_BORDER_RADII;
    var _closure1_slot8 = option;
    foxtra = tangon.QUEST_DOCK_COLLAPSED_HEIGHT;
    option = tangon.QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED;
    var _closure1_slot9 = option;
    tangon = tangon.QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED;
    var _closure1_slot10 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ThemeTypes;
    var _closure1_slot11 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot12 = option;
    option = tangon.jsxs;
    var _closure1_slot13 = option;
    tangon = tangon.Fragment;
    var _closure1_slot14 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'alignItems': 'center', 'justifyContent': 'space-between', 'flexDirection': 'row', 'height': null, 'overflow': 'hidden', 'paddingRight': 16, 'paddingLeft': 8, 'position': 'absolute', 'zIndex': 2};
    offset['height'] = foxtra;
    tangon['questDockHeader'] = offset;
    offset = {'height': 35, 'marginRight': 4, 'width': 35};
    tangon['wreathImage'] = offset;
    offset = {'alignItems': 'center', 'flexDirection': 'row'};
    tangon['questDockHeaderPrimary'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    tangon['logo'] = offset;
    offset = {'flexGrow': 0, 'flexShrink': 0};
    tangon['questDockHeaderSecondary'] = offset;
    offset = {'justifyContent': 'center', 'position': 'absolute', 'bottom': 0, 'top': 0, 'right': 0};
    tangon['questDockHeaderContentCollapsed'] = offset;
    offset = {'alignItems': 'center', 'flexDirection': 'row', 'gap': 8};
    tangon['questDockHeaderContentExpanded'] = offset;
    offset = {'alignItems': 'center', 'display': 'flex', 'flexDirection': 'row', 'gap': 4};
    tangon['questDockHeaderActionDisclosures'] = offset;
    offset = {'height': 14, 'width': 14};
    tangon['questDockHeaderActionDisclosuresIcon'] = offset;
    offset = {'backgroundColor': null, 'opacity': 0.2, 'height': 18, 'width': 1.5};
    yankee = 7;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_NORMAL;
    offset['backgroundColor'] = yankee;
    tangon['questDockHeaderActionSeparator'] = offset;
    offset = {};
    yankee = 0.7;
    offset['opacity'] = yankee;
    tangon['questDockHeaderTertiaryContent'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot15 = tangon;
    tangon = {};
    option = 'function questDockHeaderLayoutAnimation_QuestDockUnenrolledHeaderTsx1(values){const{withSpring,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED}=this.__closure;return{initialValues:{originX:values.currentOriginX,originY:values.currentOriginY,width:values.currentWidth,height:values.currentHeight},animations:{originX:withSpring(values.targetOriginX,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),originY:withSpring(values.targetOriginY,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),height:withSpring(values.targetHeight,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),width:withSpring(values.targetWidth,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED)}};}';
    tangon['code'] = option;
    var _closure1_slot16 = tangon;
    tangon = function() {
        entity = function(argFoo) { // Original name: questDockHeaderLayoutAnimation
            zuuluu = argFoo;
            entity = {};
            michal = {};
            tangon = zuuluu.currentOriginX;
            michal['originX'] = tangon;
            tangon = zuuluu.currentOriginY;
            michal['originY'] = tangon;
            tangon = zuuluu.currentWidth;
            michal['width'] = tangon;
            tangon = zuuluu.currentHeight;
            michal['height'] = tangon;
            entity['initialValues'] = michal;
            michal = {};
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            tangon = 8;
            verify = option[tangon];
            report = undefined;
            yankee = golfie.bind(report)(verify);
            offset = yankee.withSpring;
            verify = zuuluu.targetOriginX;
            oscard = _closure1_slot6;
            verify = offset.bind(yankee)(verify, oscard);
            michal['originX'] = verify;
            verify = option[tangon];
            yankee = golfie.bind(report)(verify);
            offset = yankee.withSpring;
            verify = zuuluu.targetOriginY;
            verify = offset.bind(yankee)(verify, oscard);
            michal['originY'] = verify;
            verify = option[tangon];
            yankee = golfie.bind(report)(verify);
            offset = yankee.withSpring;
            verify = zuuluu.targetHeight;
            verify = offset.bind(yankee)(verify, oscard);
            michal['height'] = verify;
            tangon = option[tangon];
            report = golfie.bind(report)(tangon);
            tangon = report.withSpring;
            zuuluu = zuuluu.targetWidth;
            zuuluu = tangon.bind(report)(zuuluu, oscard);
            michal['width'] = zuuluu;
            entity['animations'] = michal;
            return entity;
        };
        zuuluu = {};
        oscard = _closure1_slot0;
        report = _closure1_slot2;
        tangon = 8;
        report = report[tangon];
        tangon = undefined;
        tangon = oscard.bind(tangon)(report);
        tangon = tangon.withSpring;
        zuuluu['withSpring'] = tangon;
        tangon = _closure1_slot6;
        zuuluu['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = tangon;
        entity['__closure'] = zuuluu;
        zuuluu = 6787168806966.0;
        entity['__workletHash'] = zuuluu;
        michal = _closure1_slot16;
        entity['__initData'] = michal;
        return entity;
    };
    tangon = tangon.bind(entity)();
    var _closure1_slot17 = tangon;
    tangon = {};
    option = 'function QuestDockUnenrolledHeaderTsx2(){const{activeQuestDockMode,QuestDockMode,QUEST_DOCK_CONTENT_BORDER_RADII,QUEST_DOCK_BORDER_RADII,questDockWrapperSpecs,QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED,withSpring,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED}=this.__closure;return{borderRadius:activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_CONTENT_BORDER_RADII:QUEST_DOCK_BORDER_RADII,width:activeQuestDockMode.get()===QuestDockMode.EXPANDED?questDockWrapperSpecs.get().width-QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED*2:questDockWrapperSpecs.get().width,transform:[{translateX:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED:0,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED)},{translateY:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED:0,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED)}]};}';
    tangon['code'] = option;
    var _closure1_slot18 = tangon;
    tangon = {};
    option = 'function QuestDockUnenrolledHeaderTsx3(){const{withSpring,activeQuestDockMode,QuestDockMode,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED,QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED}=this.__closure;return{opacity:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?0:1,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),right:activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED*-1:0};}';
    tangon['code'] = option;
    var _closure1_slot19 = tangon;
    tangon = {};
    option = 'function QuestDockUnenrolledHeaderTsx4(){const{withSpring,activeQuestDockMode,QuestDockMode,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED,QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED}=this.__closure;return{opacity:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?1:0,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),right:activeQuestDockMode.get()===QuestDockMode.EXPANDED?0:QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED};}';
    tangon['code'] = option;
    var _closure1_slot20 = tangon;
    tangon = {};
    option = "function QuestDockUnenrolledHeaderTsx5(){const{activeQuestDockMode,QuestDockMode}=this.__closure;return{pointerEvents:activeQuestDockMode.get()===QuestDockMode.EXPANDED?'auto':'none'};}";
    tangon['code'] = option;
    var _closure1_slot21 = tangon;
    tangon = {};
    option = 'function QuestDockUnenrolledHeaderTsx6(){const{activeQuestDockMode,QuestDockMode,QUEST_DOCK_CONTENT_BORDER_RADII,QUEST_DOCK_BORDER_RADII,questDockWrapperSpecs}=this.__closure;return{borderRadius:activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_CONTENT_BORDER_RADII:QUEST_DOCK_BORDER_RADII,width:questDockWrapperSpecs.get().width};}';
    tangon['code'] = option;
    var _closure1_slot22 = tangon;
    tangon = golfie.memo;
    michal = function() { // Original name: QuestDockUnenrolledHeader
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            yankee = _closure1_slot3;
            zuuluu = yankee.useContext;
            oscard = _closure1_slot1;
            golfie = _closure1_slot2;
            michal = 9;
            michal = golfie[michal];
            tangon = undefined;
            michal = oscard.bind(tangon)(michal);
            michal = zuuluu.bind(yankee)(michal);
            zuuluu = michal.quest;
            var _closure2_slot0 = zuuluu;
            option = yankee.useContext;
            report = _closure1_slot0;
            michal = 10;
            michal = golfie[michal];
            michal = report.bind(tangon)(michal);
            michal = michal.QuestDockGestureContext;
            michal = option.bind(yankee)(michal);
            sizing = michal.activeQuestDockMode;
            var _closure2_slot1 = sizing;
            verify = michal.questDockWrapperSpecs;
            var _closure2_slot2 = verify;
            michal = 11;
            michal = golfie[michal];
            option = report.bind(tangon)(michal);
            michal = option.useActionSheetPressHandler;
            source = michal.bind(option)(zuuluu);
            offset = yankee.useCallback;
            option = new Array(1);
            option[0] = zuuluu;
            michal = function() {
                zuuluu = _closure1_slot1;
                option = _closure1_slot2;
                entity = 12;
                michal = option[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.showModal;
                michal = {};
                report = _closure2_slot0;
                michal['quest'] = report;
                report = true;
                michal['isTargetedDisclosure'] = report;
                report = {};
                golfie = _closure1_slot0;
                oscard = 13;
                oscard = option[oscard];
                oscard = golfie.bind(entity)(oscard);
                oscard = oscard.QuestContent;
                oscard = oscard.QUEST_BAR_MOBILE;
                report['content'] = oscard;
                oscard = 14;
                oscard = option[oscard];
                oscard = golfie.bind(entity)(oscard);
                oscard = oscard.QuestContentCTA;
                oscard = oscard.CONTEXT_MENU_OPEN_DISCLOSURE;
                report['ctaContent'] = oscard;
                michal['trackingCtx'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            ctrled = offset.bind(yankee)(michal, option);
            michal = 15;
            michal = golfie[michal];
            michal = oscard.bind(tangon)(michal);
            oscard = michal.bind(tangon)();
            michal = 16;
            michal = golfie[michal];
            report = report.bind(tangon)(michal);
            michal = report.isThemeDark;
            report = michal.bind(report)(oscard);
            michal = _closure1_slot11;
            if(report) { _fun00002_ip = 208; continue _fun00001 }
 200:
            result = michal.LIGHT;
            _fun00002_ip = 214; continue _fun00001;
 208:
            result = michal.DARK;
 214:
            michal = _closure1_slot0;
            kiloes = _closure1_slot2;
            report = 17;
            oscard = kiloes[report];
            option = michal.bind(tangon)(oscard);
            golfie = option.useAnimatedStyle;
            oscard = function() { // Original name: _
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    zuuluu = _closure2_slot1;
                    michal = zuuluu.get;
                    zuuluu = michal.bind(zuuluu)();
                    michal = _closure1_slot5;
                    michal = michal.EXPANDED;
                    if(!(zuuluu !== michal)) { _fun00004_ip = 41; continue _fun00003 }
 35:
                    michal = _closure1_slot8;
                    _fun00004_ip = 45; continue _fun00003;
 41:
                    michal = _closure1_slot7;
 45:
                    entity['borderRadius'] = michal;
                    zuuluu = _closure2_slot1;
                    michal = zuuluu.get;
                    zuuluu = michal.bind(zuuluu)();
                    michal = _closure1_slot5;
                    michal = michal.EXPANDED;
                    if(!(zuuluu !== michal)) { _fun00004_ip = 96; continue _fun00003 }
 76:
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.get;
                    michal = michal.bind(zuuluu)();
                    michal = michal.width;
                    _fun00004_ip = 129; continue _fun00003;
 96:
                    report = _closure2_slot2;
                    zuuluu = report.get;
                    zuuluu = zuuluu.bind(report)();
                    report = zuuluu.width;
                    oscard = _closure1_slot10;
                    zuuluu = 2;
                    zuuluu = zuuluu * oscard;
                    michal = report - zuuluu;
 129:
                    entity['width'] = michal;
                    zuuluu = {};
                    report = _closure1_slot0;
                    michal = _closure1_slot2;
                    offset = 8;
                    michal = michal[offset];
                    verify = undefined;
                    yankee = report.bind(verify)(michal);
                    oscard = yankee.withSpring;
                    report = _closure2_slot1;
                    michal = report.get;
                    romeon = michal.bind(report)();
                    michal = _closure1_slot5;
                    michal = michal.EXPANDED;
                    report = 0;
                    if(!(romeon === michal)) { _fun00004_ip = 195; continue _fun00003 }
 191:
                    report = _closure1_slot10;
 195:
                    michal = _closure1_slot6;
                    michal = oscard.bind(yankee)(report, michal);
                    zuuluu['translateX'] = michal;
                    michal = new Array(2);
                    michal[0] = zuuluu;
                    zuuluu = {};
                    oscard = _closure1_slot0;
                    report = _closure1_slot2;
                    report = report[offset];
                    oscard = oscard.bind(verify)(report);
                    report = oscard.withSpring;
                    verify = _closure2_slot1;
                    option = verify.get;
                    verify = option.bind(verify)();
                    option = _closure1_slot5;
                    option = option.EXPANDED;
                    golfie = 0;
                    if(!(verify === option)) { _fun00004_ip = 275; continue _fun00003 }
 271:
                    golfie = _closure1_slot10;
 275:
                    tangon = _closure1_slot6;
                    tangon = report.bind(oscard)(golfie, tangon);
                    zuuluu['translateY'] = tangon;
                    michal[1] = zuuluu;
                    entity['transform'] = michal;
                    return entity;
                }
            };
            romeon = {};
            romeon['activeQuestDockMode'] = sizing;
            backup = _closure1_slot5;
            romeon['QuestDockMode'] = backup;
            yankee = _closure1_slot7;
            romeon['QUEST_DOCK_CONTENT_BORDER_RADII'] = yankee;
            offset = _closure1_slot8;
            romeon['QUEST_DOCK_BORDER_RADII'] = offset;
            romeon['questDockWrapperSpecs'] = verify;
            foxtra = _closure1_slot10;
            romeon['QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED'] = foxtra;
            sequen = 8;
            foxtra = kiloes[sequen];
            foxtra = michal.bind(tangon)(foxtra);
            foxtra = foxtra.withSpring;
            romeon['withSpring'] = foxtra;
            update = _closure1_slot6;
            romeon['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = update;
            oscard['__closure'] = romeon;
            romeon = 10188474525629.0;
            oscard['__workletHash'] = romeon;
            romeon = _closure1_slot18;
            oscard['__initData'] = romeon;
            oscard = golfie.bind(option)(oscard);
            golfie = kiloes[report];
            romeon = michal.bind(tangon)(golfie);
            option = romeon.useAnimatedStyle;
            golfie = function() { // Original name: c
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = {};
                    report = _closure1_slot0;
                    tangon = _closure1_slot2;
                    michal = 8;
                    tangon = tangon[michal];
                    michal = undefined;
                    golfie = report.bind(michal)(tangon);
                    oscard = golfie.withSpring;
                    report = _closure2_slot1;
                    tangon = report.get;
                    option = tangon.bind(report)();
                    tangon = _closure1_slot5;
                    tangon = tangon.EXPANDED;
                    report = 1;
                    if(!(option === tangon)) { _fun00006_ip = 67; continue _fun00005 }
 65:
                    report = 0;
 67:
                    tangon = _closure1_slot6;
                    tangon = oscard.bind(golfie)(report, tangon);
                    entity['opacity'] = tangon;
                    tangon = _closure2_slot1;
                    michal = tangon.get;
                    report = michal.bind(tangon)();
                    michal = _closure1_slot5;
                    tangon = michal.EXPANDED;
                    michal = 0;
                    if(!(report === tangon)) { _fun00006_ip = 124; continue _fun00005 }
 110:
                    tangon = _closure1_slot9;
                    zuuluu = -1;
                    michal = zuuluu * tangon;
 124:
                    entity['right'] = michal;
                    return entity;
                }
            };
            foxtra = {};
            output = kiloes[sequen];
            output = michal.bind(tangon)(output);
            output = output.withSpring;
            foxtra['withSpring'] = output;
            foxtra['activeQuestDockMode'] = sizing;
            foxtra['QuestDockMode'] = backup;
            foxtra['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = update;
            echoed = _closure1_slot9;
            foxtra['QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED'] = echoed;
            golfie['__closure'] = foxtra;
            foxtra = 16795373856064.0;
            golfie['__workletHash'] = foxtra;
            foxtra = _closure1_slot19;
            golfie['__initData'] = foxtra;
            output = option.bind(romeon)(golfie);
            golfie = kiloes[report];
            romeon = michal.bind(tangon)(golfie);
            option = romeon.useAnimatedStyle;
            golfie = function() { // Original name: l
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = {};
                    report = _closure1_slot0;
                    tangon = _closure1_slot2;
                    michal = 8;
                    tangon = tangon[michal];
                    michal = undefined;
                    option = report.bind(michal)(tangon);
                    golfie = option.withSpring;
                    report = _closure2_slot1;
                    michal = report.get;
                    verify = michal.bind(report)();
                    michal = _closure1_slot5;
                    report = michal.EXPANDED;
                    oscard = 0;
                    if(!(verify === report)) { _fun00008_ip = 67; continue _fun00007 }
 64:
                    oscard = 1;
 67:
                    report = _closure1_slot6;
                    report = golfie.bind(option)(oscard, report);
                    entity['opacity'] = report;
                    report = _closure2_slot1;
                    tangon = report.get;
                    report = tangon.bind(report)();
                    tangon = _closure1_slot5;
                    tangon = tangon.EXPANDED;
                    michal = 0;
                    if(!(report !== tangon)) { _fun00008_ip = 114; continue _fun00007 }
 110:
                    michal = _closure1_slot9;
 114:
                    entity['right'] = michal;
                    return entity;
                }
            };
            foxtra = {};
            sequen = kiloes[sequen];
            sequen = michal.bind(tangon)(sequen);
            sequen = sequen.withSpring;
            foxtra['withSpring'] = sequen;
            foxtra['activeQuestDockMode'] = sizing;
            foxtra['QuestDockMode'] = backup;
            foxtra['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = update;
            foxtra['QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED'] = echoed;
            golfie['__closure'] = foxtra;
            foxtra = 11741220477745.0;
            golfie['__workletHash'] = foxtra;
            foxtra = _closure1_slot20;
            golfie['__initData'] = foxtra;
            foxtra = option.bind(romeon)(golfie);
            golfie = kiloes[report];
            romeon = michal.bind(tangon)(golfie);
            option = romeon.useAnimatedProps;
            golfie = function() { // Original name: Q
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    entity = {};
                    zuuluu = _closure2_slot1;
                    michal = zuuluu.get;
                    tangon = michal.bind(zuuluu)();
                    michal = _closure1_slot5;
                    zuuluu = michal.EXPANDED;
                    michal = 'none';
                    if(!(tangon === zuuluu)) { _fun00010_ip = 43; continue _fun00009 }
 39:
                    michal = 'auto';
 43:
                    entity['pointerEvents'] = michal;
                    return entity;
                }
            };
            echoed = {};
            echoed['activeQuestDockMode'] = sizing;
            echoed['QuestDockMode'] = backup;
            golfie['__closure'] = echoed;
            echoed = 16421998349674.0;
            golfie['__workletHash'] = echoed;
            echoed = _closure1_slot21;
            golfie['__initData'] = echoed;
            romeon = option.bind(romeon)(golfie);
            report = kiloes[report];
            golfie = michal.bind(tangon)(report);
            report = golfie.useAnimatedStyle;
            entity = function() { // Original name: I
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    entity = {};
                    tangon = _closure2_slot1;
                    zuuluu = tangon.get;
                    report = zuuluu.bind(tangon)();
                    zuuluu = _closure1_slot5;
                    zuuluu = zuuluu.EXPANDED;
                    if(!(report !== zuuluu)) { _fun00012_ip = 41; continue _fun00011 }
 35:
                    zuuluu = _closure1_slot8;
                    _fun00012_ip = 45; continue _fun00011;
 41:
                    zuuluu = _closure1_slot7;
 45:
                    entity['borderRadius'] = zuuluu;
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.get;
                    michal = michal.bind(zuuluu)();
                    michal = michal.width;
                    entity['width'] = michal;
                    return entity;
                }
            };
            option = {};
            option['activeQuestDockMode'] = sizing;
            option['QuestDockMode'] = backup;
            option['QUEST_DOCK_CONTENT_BORDER_RADII'] = yankee;
            option['QUEST_DOCK_BORDER_RADII'] = offset;
            option['questDockWrapperSpecs'] = verify;
            entity['__closure'] = option;
            option = 10463333318801.0;
            entity['__workletHash'] = option;
            option = _closure1_slot22;
            entity['__initData'] = option;
            option = report.bind(golfie)(entity);
            entity = _closure1_slot15;
            sizing = entity.bind(tangon)();
            entity = 18;
            entity = kiloes[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.useQuestGameLogotypeAssetUrl;
            backup = entity.bind(michal)(zuuluu);
            zuuluu = _closure1_slot13;
            verify = _closure1_slot1;
            offset = 19;
            entity = kiloes[offset];
            michal = verify.bind(tangon)(entity);
            entity = {};
            golfie = sizing.questDockHeader;
            report = new Array(2);
            report[0] = golfie;
            report[1] = oscard;
            entity['style'] = report;
            golfie = _closure1_slot17;
            entity['layout'] = golfie;
            yankee = _closure1_slot12;
            report = 20;
            report = kiloes[report];
            oscard = verify.bind(tangon)(report);
            report = {};
            report['animatedStyle'] = option;
            report['animatedLayout'] = golfie;
            oscard = yankee.bind(tangon)(oscard, report);
            report = new Array(3);
            report[0] = oscard;
            golfie = _closure1_slot4;
            oscard = {};
            option = sizing.questDockHeaderPrimary;
            oscard['style'] = option;
            option = 21;
            option = kiloes[option];
            verify = verify.bind(tangon)(option);
            option = {};
            kiloes = _closure1_slot11;
            kiloes = kiloes.DARK;
            if(!(result !== kiloes)) { _fun00002_ip = 913; continue _fun00001 }
 891:
            result = _closure1_slot1;
            echoed = _closure1_slot2;
            kiloes = 23;
            kiloes = echoed[kiloes];
            kiloes = result.bind(tangon)(kiloes);
            _fun00002_ip = 933; continue _fun00001;
 913:
            echoed = _closure1_slot1;
            update = _closure1_slot2;
            result = 22;
            result = update[result];
            kiloes = echoed.bind(tangon)(result);
 933:
            option['source'] = kiloes;
            kiloes = 'contain';
            option['resizeMode'] = kiloes;
            kiloes = sizing.wreathImage;
            option['style'] = kiloes;
            verify = yankee.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            kiloes = _closure1_slot12;
            echoed = _closure1_slot1;
            update = _closure1_slot2;
            verify = 24;
            verify = update[verify];
            yankee = echoed.bind(tangon)(verify);
            verify = {'assetUrl': null, 'height': 36, 'maxWidth': 120};
            verify['assetUrl'] = backup;
            backup = sizing.logo;
            verify['style'] = backup;
            verify = kiloes.bind(tangon)(yankee, verify);
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            option = _closure1_slot13;
            golfie = _closure1_slot4;
            oscard = {};
            verify = sizing.questDockHeaderSecondary;
            oscard['style'] = verify;
            verify = update[offset];
            yankee = echoed.bind(tangon)(verify);
            verify = {};
            result = sizing.questDockHeaderContentCollapsed;
            backup = new Array(2);
            backup[0] = result;
            backup[1] = output;
            verify['style'] = backup;
            output = _closure1_slot0;
            result = 25;
            backup = update[result];
            backup = output.bind(tangon)(backup);
            sequen = backup.Text;
            backup = {'style': null, 'variant': 'text-sm/medium', 'color': 'interactive-active'};
            config = sizing.questDockHeaderTertiaryContent;
            backup['style'] = config;
            record = 26;
            config = update[record];
            config = output.bind(tangon)(config);
            papara = config.intl;
            cntext = papara.string;
            config = update[record];
            config = output.bind(tangon)(config);
            config = config.t;
            config = config.g8zcER;
            config = cntext.bind(papara)(config);
            backup['children'] = config;
            backup = kiloes.bind(tangon)(sequen, backup);
            verify['children'] = backup;
            yankee = kiloes.bind(tangon)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            offset = update[offset];
            yankee = echoed.bind(tangon)(offset);
            offset = {};
            offset['animatedProps'] = romeon;
            backup = sizing.questDockHeaderContentExpanded;
            romeon = new Array(2);
            romeon[0] = backup;
            romeon[1] = foxtra;
            offset['style'] = romeon;
            foxtra = 27;
            romeon = update[foxtra];
            romeon = output.bind(tangon)(romeon);
            backup = romeon.PressableOpacity;
            romeon = {};
            romeon['onPress'] = ctrled;
            ctrled = 'button';
            romeon['accessibilityRole'] = ctrled;
            config = sizing.questDockHeaderActionDisclosures;
            sequen = new Array(2);
            sequen[0] = config;
            config = sizing.questDockHeaderTertiaryContent;
            sequen[1] = config;
            romeon['style'] = sequen;
            sequen = _closure1_slot14;
            vacuum = {};
            result = update[result];
            result = output.bind(tangon)(result);
            config = result.Text;
            result = {'color': 'interactive-active', 'variant': 'text-sm/medium'};
            cntext = update[record];
            cntext = output.bind(tangon)(cntext);
            papara = cntext.intl;
            cntext = papara.string;
            record = update[record];
            record = output.bind(tangon)(record);
            record = record.t;
            record = record.o6FLcH;
            record = cntext.bind(papara)(record);
            result['children'] = record;
            result = kiloes.bind(tangon)(config, result);
            config = new Array(2);
            config[0] = result;
            result = 28;
            result = update[result];
            result = output.bind(tangon)(result);
            cntext = result.CircleQuestionIcon;
            record = {};
            result = 7;
            papara = update[result];
            papara = echoed.bind(tangon)(papara);
            papara = papara.colors;
            papara = papara.INTERACTIVE_ACTIVE;
            record['color'] = papara;
            papara = sizing.questDockHeaderActionDisclosuresIcon;
            record['style'] = papara;
            record = kiloes.bind(tangon)(cntext, record);
            config[1] = record;
            vacuum['children'] = config;
            vacuum = option.bind(tangon)(sequen, vacuum);
            romeon['children'] = vacuum;
            backup = kiloes.bind(tangon)(backup, romeon);
            romeon = new Array(3);
            romeon[0] = backup;
            backup = {};
            vacuum = sizing.questDockHeaderActionSeparator;
            backup['style'] = vacuum;
            backup = kiloes.bind(tangon)(golfie, backup);
            romeon[1] = backup;
            foxtra = update[foxtra];
            foxtra = output.bind(tangon)(foxtra);
            backup = foxtra.PressableOpacity;
            foxtra = {};
            foxtra['accessibilityRole'] = ctrled;
            foxtra['onPress'] = source;
            sizing = sizing.questDockHeaderTertiaryContent;
            foxtra['style'] = sizing;
            sizing = 29;
            sizing = update[sizing];
            sizing = output.bind(tangon)(sizing);
            output = sizing.MoreHorizontalIcon;
            sizing = {};
            result = update[result];
            result = echoed.bind(tangon)(result);
            result = result.colors;
            result = result.INTERACTIVE_ACTIVE;
            sizing['color'] = result;
            sizing = kiloes.bind(tangon)(output, sizing);
            foxtra['children'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[2] = foxtra;
            offset['children'] = romeon;
            offset = option.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 30;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/quests/native/QuestDock/QuestDockUnenrolledHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();