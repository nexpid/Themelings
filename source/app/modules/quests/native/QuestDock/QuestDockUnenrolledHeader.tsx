// app/modules/quests/native/QuestDock/QuestDockUnenrolledHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    yankee = 2;
    tango = oscar[yankee];
    tango = report.bind(entity)(tango);
    tango = tango.QuestDockMode;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED;
    var _closure1_slot6 = options;
    options = tango.QUEST_DOCK_CONTENT_BORDER_RADII;
    var _closure1_slot7 = options;
    options = tango.QUEST_DOCK_BORDER_RADII;
    var _closure1_slot8 = options;
    foxtrot = tango.QUEST_DOCK_COLLAPSED_HEIGHT;
    options = tango.QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED;
    var _closure1_slot9 = options;
    tango = tango.QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED;
    var _closure1_slot10 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ThemeTypes;
    var _closure1_slot11 = tango;
    tango = 5;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot12 = options;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsxs;
    var _closure1_slot13 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot14 = tango;
    tango = 6;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'alignItems': 'center', 'justifyContent': 'space-between', 'flexDirection': 'row', 'height': null, 'overflow': 'hidden', 'paddingRight': 16, 'paddingLeft': 8, 'position': 'absolute', 'zIndex': 2};
    offset['height'] = foxtrot;
    tango['questDockHeader'] = offset;
    offset = {'height': 35, 'marginRight': 4, 'width': 35};
    tango['wreathImage'] = offset;
    offset = {'alignItems': 'center', 'flexDirection': 'row'};
    tango['questDockHeaderPrimary'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    tango['logo'] = offset;
    offset = {'flexGrow': 0, 'flexShrink': 0};
    tango['questDockHeaderSecondary'] = offset;
    offset = {'justifyContent': 'center', 'position': 'absolute', 'bottom': 0, 'top': 0, 'right': 0};
    tango['questDockHeaderContentCollapsed'] = offset;
    offset = {'alignItems': 'center', 'flexDirection': 'row', 'gap': 8};
    tango['questDockHeaderContentExpanded'] = offset;
    offset = {'alignItems': 'center', 'display': 'flex', 'flexDirection': 'row', 'gap': 4};
    tango['questDockHeaderActionDisclosures'] = offset;
    offset = {'height': 14, 'width': 14};
    tango['questDockHeaderActionDisclosuresIcon'] = offset;
    offset = {'backgroundColor': null, 'opacity': 0.2, 'height': 18, 'width': 1.5};
    yankee = 7;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_NORMAL;
    offset['backgroundColor'] = yankee;
    tango['questDockHeaderActionSeparator'] = offset;
    offset = {};
    yankee = 0.7;
    offset['opacity'] = yankee;
    tango['questDockHeaderTertiaryContent'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot15 = tango;
    tango = {};
    options = 'function questDockHeaderLayoutAnimation_QuestDockUnenrolledHeaderTsx1(values){const{withSpring,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED}=this.__closure;return{initialValues:{originX:values.currentOriginX,originY:values.currentOriginY,width:values.currentWidth,height:values.currentHeight},animations:{originX:withSpring(values.targetOriginX,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),originY:withSpring(values.targetOriginY,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),height:withSpring(values.targetHeight,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),width:withSpring(values.targetWidth,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED)}};}';
    tango['code'] = options;
    var _closure1_slot16 = tango;
    tango = function() {
        entity = function(argFoo) { // Original name: questDockHeaderLayoutAnimation
            zulu = argFoo;
            entity = {};
            mike = {};
            tango = zulu.currentOriginX;
            mike['originX'] = tango;
            tango = zulu.currentOriginY;
            mike['originY'] = tango;
            tango = zulu.currentWidth;
            mike['width'] = tango;
            tango = zulu.currentHeight;
            mike['height'] = tango;
            entity['initialValues'] = mike;
            mike = {};
            golf = _closure1_slot0;
            options = _closure1_slot2;
            tango = 8;
            verify = options[tango];
            report = undefined;
            yankee = golf.bind(report)(verify);
            offset = yankee.withSpring;
            verify = zulu.targetOriginX;
            oscar = _closure1_slot6;
            verify = offset.bind(yankee)(verify, oscar);
            mike['originX'] = verify;
            verify = options[tango];
            yankee = golf.bind(report)(verify);
            offset = yankee.withSpring;
            verify = zulu.targetOriginY;
            verify = offset.bind(yankee)(verify, oscar);
            mike['originY'] = verify;
            verify = options[tango];
            yankee = golf.bind(report)(verify);
            offset = yankee.withSpring;
            verify = zulu.targetHeight;
            verify = offset.bind(yankee)(verify, oscar);
            mike['height'] = verify;
            tango = options[tango];
            report = golf.bind(report)(tango);
            tango = report.withSpring;
            zulu = zulu.targetWidth;
            zulu = tango.bind(report)(zulu, oscar);
            mike['width'] = zulu;
            entity['animations'] = mike;
            return entity;
        };
        zulu = {};
        oscar = _closure1_slot0;
        report = _closure1_slot2;
        tango = 8;
        report = report[tango];
        tango = undefined;
        tango = oscar.bind(tango)(report);
        tango = tango.withSpring;
        zulu['withSpring'] = tango;
        tango = _closure1_slot6;
        zulu['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = tango;
        entity['__closure'] = zulu;
        zulu = 6787168806966.0;
        entity['__workletHash'] = zulu;
        mike = _closure1_slot16;
        entity['__initData'] = mike;
        return entity;
    };
    tango = tango.bind(entity)();
    var _closure1_slot17 = tango;
    tango = {};
    options = 'function QuestDockUnenrolledHeaderTsx2(){const{activeQuestDockMode,QuestDockMode,QUEST_DOCK_CONTENT_BORDER_RADII,QUEST_DOCK_BORDER_RADII,questDockWrapperSpecs,QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED,withSpring,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED}=this.__closure;return{borderRadius:activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_CONTENT_BORDER_RADII:QUEST_DOCK_BORDER_RADII,width:activeQuestDockMode.get()===QuestDockMode.EXPANDED?questDockWrapperSpecs.get().width-QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED*2:questDockWrapperSpecs.get().width,transform:[{translateX:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED:0,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED)},{translateY:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED:0,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED)}]};}';
    tango['code'] = options;
    var _closure1_slot18 = tango;
    tango = {};
    options = 'function QuestDockUnenrolledHeaderTsx3(){const{withSpring,activeQuestDockMode,QuestDockMode,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED,QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED}=this.__closure;return{opacity:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?0:1,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),right:activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED*-1:0};}';
    tango['code'] = options;
    var _closure1_slot19 = tango;
    tango = {};
    options = 'function QuestDockUnenrolledHeaderTsx4(){const{withSpring,activeQuestDockMode,QuestDockMode,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED,QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED}=this.__closure;return{opacity:withSpring(activeQuestDockMode.get()===QuestDockMode.EXPANDED?1:0,QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED),right:activeQuestDockMode.get()===QuestDockMode.EXPANDED?0:QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED};}';
    tango['code'] = options;
    var _closure1_slot20 = tango;
    tango = {};
    options = "function QuestDockUnenrolledHeaderTsx5(){const{activeQuestDockMode,QuestDockMode}=this.__closure;return{pointerEvents:activeQuestDockMode.get()===QuestDockMode.EXPANDED?'auto':'none'};}";
    tango['code'] = options;
    var _closure1_slot21 = tango;
    tango = {};
    options = 'function QuestDockUnenrolledHeaderTsx6(){const{activeQuestDockMode,QuestDockMode,QUEST_DOCK_CONTENT_BORDER_RADII,QUEST_DOCK_BORDER_RADII,questDockWrapperSpecs}=this.__closure;return{borderRadius:activeQuestDockMode.get()===QuestDockMode.EXPANDED?QUEST_DOCK_CONTENT_BORDER_RADII:QUEST_DOCK_BORDER_RADII,width:questDockWrapperSpecs.get().width};}';
    tango['code'] = options;
    var _closure1_slot22 = tango;
    tango = golf.memo;
    mike = function() { // Original name: QuestDockUnenrolledHeader
        _fun116265: for(var _fun116265_ip = 0; ; ) switch(_fun116265_ip) {
 0:
            yankee = _closure1_slot3;
            zulu = yankee.useContext;
            oscar = _closure1_slot1;
            golf = _closure1_slot2;
            mike = 9;
            mike = golf[mike];
            tango = undefined;
            mike = oscar.bind(tango)(mike);
            mike = zulu.bind(yankee)(mike);
            zulu = mike.quest;
            var _closure2_slot0 = zulu;
            options = yankee.useContext;
            report = _closure1_slot0;
            mike = 10;
            mike = golf[mike];
            mike = report.bind(tango)(mike);
            mike = mike.QuestDockGestureContext;
            mike = options.bind(yankee)(mike);
            sizing = mike.activeQuestDockMode;
            var _closure2_slot1 = sizing;
            verify = mike.questDockWrapperSpecs;
            var _closure2_slot2 = verify;
            mike = 11;
            mike = golf[mike];
            options = report.bind(tango)(mike);
            mike = options.useActionSheetPressHandler;
            source = mike.bind(options)(zulu);
            offset = yankee.useCallback;
            options = new Array(1);
            options[0] = zulu;
            mike = function() {
                zulu = _closure1_slot1;
                options = _closure1_slot2;
                entity = 12;
                mike = options[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.showModal;
                mike = {};
                report = _closure2_slot0;
                mike['quest'] = report;
                report = true;
                mike['isTargetedDisclosure'] = report;
                report = {};
                golf = _closure1_slot0;
                oscar = 13;
                oscar = options[oscar];
                oscar = golf.bind(entity)(oscar);
                oscar = oscar.QuestContent;
                oscar = oscar.QUEST_BAR_MOBILE;
                report['content'] = oscar;
                oscar = 14;
                oscar = options[oscar];
                oscar = golf.bind(entity)(oscar);
                oscar = oscar.QuestContentCTA;
                oscar = oscar.CONTEXT_MENU_OPEN_DISCLOSURE;
                report['ctaContent'] = oscar;
                mike['trackingCtx'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            control = offset.bind(yankee)(mike, options);
            mike = 15;
            mike = golf[mike];
            mike = oscar.bind(tango)(mike);
            oscar = mike.bind(tango)();
            mike = 16;
            mike = golf[mike];
            report = report.bind(tango)(mike);
            mike = report.isThemeDark;
            report = mike.bind(report)(oscar);
            mike = _closure1_slot11;
            if(report) { _fun116265_ip = 208; continue _fun116265 }
 200:
            result = mike.LIGHT;
            _fun116265_ip = 214; continue _fun116265;
 208:
            result = mike.DARK;
 214:
            mike = _closure1_slot0;
            kilo = _closure1_slot2;
            report = 17;
            oscar = kilo[report];
            options = mike.bind(tango)(oscar);
            golf = options.useAnimatedStyle;
            oscar = function() { // Original name: _
                _fun116267: for(var _fun116267_ip = 0; ; ) switch(_fun116267_ip) {
 0:
                    entity = {};
                    zulu = _closure2_slot1;
                    mike = zulu.get;
                    zulu = mike.bind(zulu)();
                    mike = _closure1_slot5;
                    mike = mike.EXPANDED;
                    if(!(zulu !== mike)) { _fun116267_ip = 41; continue _fun116267 }
 35:
                    mike = _closure1_slot8;
                    _fun116267_ip = 45; continue _fun116267;
 41:
                    mike = _closure1_slot7;
 45:
                    entity['borderRadius'] = mike;
                    zulu = _closure2_slot1;
                    mike = zulu.get;
                    zulu = mike.bind(zulu)();
                    mike = _closure1_slot5;
                    mike = mike.EXPANDED;
                    if(!(zulu !== mike)) { _fun116267_ip = 96; continue _fun116267 }
 76:
                    zulu = _closure2_slot2;
                    mike = zulu.get;
                    mike = mike.bind(zulu)();
                    mike = mike.width;
                    _fun116267_ip = 129; continue _fun116267;
 96:
                    report = _closure2_slot2;
                    zulu = report.get;
                    zulu = zulu.bind(report)();
                    report = zulu.width;
                    oscar = _closure1_slot10;
                    zulu = 2;
                    zulu = zulu * oscar;
                    mike = report - zulu;
 129:
                    entity['width'] = mike;
                    zulu = {};
                    report = _closure1_slot0;
                    mike = _closure1_slot2;
                    offset = 8;
                    mike = mike[offset];
                    verify = undefined;
                    yankee = report.bind(verify)(mike);
                    oscar = yankee.withSpring;
                    report = _closure2_slot1;
                    mike = report.get;
                    romeo = mike.bind(report)();
                    mike = _closure1_slot5;
                    mike = mike.EXPANDED;
                    report = 0;
                    if(!(romeo === mike)) { _fun116267_ip = 195; continue _fun116267 }
 191:
                    report = _closure1_slot10;
 195:
                    mike = _closure1_slot6;
                    mike = oscar.bind(yankee)(report, mike);
                    zulu['translateX'] = mike;
                    mike = new Array(2);
                    mike[0] = zulu;
                    zulu = {};
                    oscar = _closure1_slot0;
                    report = _closure1_slot2;
                    report = report[offset];
                    oscar = oscar.bind(verify)(report);
                    report = oscar.withSpring;
                    verify = _closure2_slot1;
                    options = verify.get;
                    verify = options.bind(verify)();
                    options = _closure1_slot5;
                    options = options.EXPANDED;
                    golf = 0;
                    if(!(verify === options)) { _fun116267_ip = 275; continue _fun116267 }
 271:
                    golf = _closure1_slot10;
 275:
                    tango = _closure1_slot6;
                    tango = report.bind(oscar)(golf, tango);
                    zulu['translateY'] = tango;
                    mike[1] = zulu;
                    entity['transform'] = mike;
                    return entity;
                }
            };
            romeo = {};
            romeo['activeQuestDockMode'] = sizing;
            backup = _closure1_slot5;
            romeo['QuestDockMode'] = backup;
            yankee = _closure1_slot7;
            romeo['QUEST_DOCK_CONTENT_BORDER_RADII'] = yankee;
            offset = _closure1_slot8;
            romeo['QUEST_DOCK_BORDER_RADII'] = offset;
            romeo['questDockWrapperSpecs'] = verify;
            foxtrot = _closure1_slot10;
            romeo['QUEST_DOCK_UNENROLLED_HEADER_INSET_EXPANDED'] = foxtrot;
            sequence = 8;
            foxtrot = kilo[sequence];
            foxtrot = mike.bind(tango)(foxtrot);
            foxtrot = foxtrot.withSpring;
            romeo['withSpring'] = foxtrot;
            update = _closure1_slot6;
            romeo['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = update;
            oscar['__closure'] = romeo;
            romeo = 10188474525629.0;
            oscar['__workletHash'] = romeo;
            romeo = _closure1_slot18;
            oscar['__initData'] = romeo;
            oscar = golf.bind(options)(oscar);
            golf = kilo[report];
            romeo = mike.bind(tango)(golf);
            options = romeo.useAnimatedStyle;
            golf = function() { // Original name: c
                _fun116268: for(var _fun116268_ip = 0; ; ) switch(_fun116268_ip) {
 0:
                    entity = {};
                    report = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 8;
                    tango = tango[mike];
                    mike = undefined;
                    golf = report.bind(mike)(tango);
                    oscar = golf.withSpring;
                    report = _closure2_slot1;
                    tango = report.get;
                    options = tango.bind(report)();
                    tango = _closure1_slot5;
                    tango = tango.EXPANDED;
                    report = 1;
                    if(!(options === tango)) { _fun116268_ip = 67; continue _fun116268 }
 65:
                    report = 0;
 67:
                    tango = _closure1_slot6;
                    tango = oscar.bind(golf)(report, tango);
                    entity['opacity'] = tango;
                    tango = _closure2_slot1;
                    mike = tango.get;
                    report = mike.bind(tango)();
                    mike = _closure1_slot5;
                    tango = mike.EXPANDED;
                    mike = 0;
                    if(!(report === tango)) { _fun116268_ip = 124; continue _fun116268 }
 110:
                    tango = _closure1_slot9;
                    zulu = -1;
                    mike = zulu * tango;
 124:
                    entity['right'] = mike;
                    return entity;
                }
            };
            foxtrot = {};
            output = kilo[sequence];
            output = mike.bind(tango)(output);
            output = output.withSpring;
            foxtrot['withSpring'] = output;
            foxtrot['activeQuestDockMode'] = sizing;
            foxtrot['QuestDockMode'] = backup;
            foxtrot['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = update;
            echo = _closure1_slot9;
            foxtrot['QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED'] = echo;
            golf['__closure'] = foxtrot;
            foxtrot = 16795373856064.0;
            golf['__workletHash'] = foxtrot;
            foxtrot = _closure1_slot19;
            golf['__initData'] = foxtrot;
            output = options.bind(romeo)(golf);
            golf = kilo[report];
            romeo = mike.bind(tango)(golf);
            options = romeo.useAnimatedStyle;
            golf = function() { // Original name: h
                _fun116269: for(var _fun116269_ip = 0; ; ) switch(_fun116269_ip) {
 0:
                    entity = {};
                    report = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 8;
                    tango = tango[mike];
                    mike = undefined;
                    options = report.bind(mike)(tango);
                    golf = options.withSpring;
                    report = _closure2_slot1;
                    mike = report.get;
                    verify = mike.bind(report)();
                    mike = _closure1_slot5;
                    report = mike.EXPANDED;
                    oscar = 0;
                    if(!(verify === report)) { _fun116269_ip = 67; continue _fun116269 }
 64:
                    oscar = 1;
 67:
                    report = _closure1_slot6;
                    report = golf.bind(options)(oscar, report);
                    entity['opacity'] = report;
                    report = _closure2_slot1;
                    tango = report.get;
                    report = tango.bind(report)();
                    tango = _closure1_slot5;
                    tango = tango.EXPANDED;
                    mike = 0;
                    if(!(report !== tango)) { _fun116269_ip = 114; continue _fun116269 }
 110:
                    mike = _closure1_slot9;
 114:
                    entity['right'] = mike;
                    return entity;
                }
            };
            foxtrot = {};
            sequence = kilo[sequence];
            sequence = mike.bind(tango)(sequence);
            sequence = sequence.withSpring;
            foxtrot['withSpring'] = sequence;
            foxtrot['activeQuestDockMode'] = sizing;
            foxtrot['QuestDockMode'] = backup;
            foxtrot['QUEST_DOCK_MODE_CHANGE_PHYSICS_CLAMPED'] = update;
            foxtrot['QUEST_DOCK_HORIZONTAL_EDGE_GUTTER_COLLAPSED'] = echo;
            golf['__closure'] = foxtrot;
            foxtrot = 11741220477745.0;
            golf['__workletHash'] = foxtrot;
            foxtrot = _closure1_slot20;
            golf['__initData'] = foxtrot;
            foxtrot = options.bind(romeo)(golf);
            golf = kilo[report];
            romeo = mike.bind(tango)(golf);
            options = romeo.useAnimatedProps;
            golf = function() { // Original name: M
                _fun116270: for(var _fun116270_ip = 0; ; ) switch(_fun116270_ip) {
 0:
                    entity = {};
                    zulu = _closure2_slot1;
                    mike = zulu.get;
                    tango = mike.bind(zulu)();
                    mike = _closure1_slot5;
                    zulu = mike.EXPANDED;
                    mike = 'none';
                    if(!(tango === zulu)) { _fun116270_ip = 43; continue _fun116270 }
 39:
                    mike = 'auto';
 43:
                    entity['pointerEvents'] = mike;
                    return entity;
                }
            };
            echo = {};
            echo['activeQuestDockMode'] = sizing;
            echo['QuestDockMode'] = backup;
            golf['__closure'] = echo;
            echo = 16421998349674.0;
            golf['__workletHash'] = echo;
            echo = _closure1_slot21;
            golf['__initData'] = echo;
            romeo = options.bind(romeo)(golf);
            report = kilo[report];
            golf = mike.bind(tango)(report);
            report = golf.useAnimatedStyle;
            entity = function() { // Original name: I
                _fun116271: for(var _fun116271_ip = 0; ; ) switch(_fun116271_ip) {
 0:
                    entity = {};
                    tango = _closure2_slot1;
                    zulu = tango.get;
                    report = zulu.bind(tango)();
                    zulu = _closure1_slot5;
                    zulu = zulu.EXPANDED;
                    if(!(report !== zulu)) { _fun116271_ip = 41; continue _fun116271 }
 35:
                    zulu = _closure1_slot8;
                    _fun116271_ip = 45; continue _fun116271;
 41:
                    zulu = _closure1_slot7;
 45:
                    entity['borderRadius'] = zulu;
                    zulu = _closure2_slot2;
                    mike = zulu.get;
                    mike = mike.bind(zulu)();
                    mike = mike.width;
                    entity['width'] = mike;
                    return entity;
                }
            };
            options = {};
            options['activeQuestDockMode'] = sizing;
            options['QuestDockMode'] = backup;
            options['QUEST_DOCK_CONTENT_BORDER_RADII'] = yankee;
            options['QUEST_DOCK_BORDER_RADII'] = offset;
            options['questDockWrapperSpecs'] = verify;
            entity['__closure'] = options;
            options = 10463333318801.0;
            entity['__workletHash'] = options;
            options = _closure1_slot22;
            entity['__initData'] = options;
            options = report.bind(golf)(entity);
            entity = _closure1_slot15;
            sizing = entity.bind(tango)();
            entity = 18;
            entity = kilo[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.useQuestGameLogotypeAssetUrl;
            backup = entity.bind(mike)(zulu);
            zulu = _closure1_slot13;
            verify = _closure1_slot1;
            offset = 19;
            entity = kilo[offset];
            mike = verify.bind(tango)(entity);
            entity = {};
            golf = sizing.questDockHeader;
            report = new Array(2);
            report[0] = golf;
            report[1] = oscar;
            entity['style'] = report;
            golf = _closure1_slot17;
            entity['layout'] = golf;
            yankee = _closure1_slot12;
            report = 20;
            report = kilo[report];
            oscar = verify.bind(tango)(report);
            report = {};
            report['animatedStyle'] = options;
            report['animatedLayout'] = golf;
            oscar = yankee.bind(tango)(oscar, report);
            report = new Array(3);
            report[0] = oscar;
            golf = _closure1_slot4;
            oscar = {};
            options = sizing.questDockHeaderPrimary;
            oscar['style'] = options;
            options = 21;
            options = kilo[options];
            verify = verify.bind(tango)(options);
            options = {};
            kilo = _closure1_slot11;
            kilo = kilo.DARK;
            if(!(result !== kilo)) { _fun116265_ip = 913; continue _fun116265 }
 891:
            result = _closure1_slot1;
            echo = _closure1_slot2;
            kilo = 23;
            kilo = echo[kilo];
            kilo = result.bind(tango)(kilo);
            _fun116265_ip = 933; continue _fun116265;
 913:
            echo = _closure1_slot1;
            update = _closure1_slot2;
            result = 22;
            result = update[result];
            kilo = echo.bind(tango)(result);
 933:
            options['source'] = kilo;
            kilo = 'contain';
            options['resizeMode'] = kilo;
            kilo = sizing.wreathImage;
            options['style'] = kilo;
            verify = yankee.bind(tango)(verify, options);
            options = new Array(2);
            options[0] = verify;
            kilo = _closure1_slot12;
            echo = _closure1_slot1;
            update = _closure1_slot2;
            verify = 24;
            verify = update[verify];
            yankee = echo.bind(tango)(verify);
            verify = {'assetUrl': null, 'height': 36, 'maxWidth': 120};
            verify['assetUrl'] = backup;
            backup = sizing.logo;
            verify['style'] = backup;
            verify = kilo.bind(tango)(yankee, verify);
            options[1] = verify;
            oscar['children'] = options;
            oscar = zulu.bind(tango)(golf, oscar);
            report[1] = oscar;
            options = _closure1_slot13;
            golf = _closure1_slot4;
            oscar = {};
            verify = sizing.questDockHeaderSecondary;
            oscar['style'] = verify;
            verify = update[offset];
            yankee = echo.bind(tango)(verify);
            verify = {};
            result = sizing.questDockHeaderContentCollapsed;
            backup = new Array(2);
            backup[0] = result;
            backup[1] = output;
            verify['style'] = backup;
            output = _closure1_slot0;
            result = 25;
            backup = update[result];
            backup = output.bind(tango)(backup);
            sequence = backup.Text;
            backup = {'style': null, 'variant': 'text-sm/medium', 'color': 'interactive-active'};
            config = sizing.questDockHeaderTertiaryContent;
            backup['style'] = config;
            record = 26;
            config = update[record];
            config = output.bind(tango)(config);
            papa = config.intl;
            context = papa.string;
            config = update[record];
            config = output.bind(tango)(config);
            config = config.t;
            config = config.g8zcER;
            config = context.bind(papa)(config);
            backup['children'] = config;
            backup = kilo.bind(tango)(sequence, backup);
            verify['children'] = backup;
            yankee = kilo.bind(tango)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            offset = update[offset];
            yankee = echo.bind(tango)(offset);
            offset = {};
            offset['animatedProps'] = romeo;
            backup = sizing.questDockHeaderContentExpanded;
            romeo = new Array(2);
            romeo[0] = backup;
            romeo[1] = foxtrot;
            offset['style'] = romeo;
            foxtrot = 27;
            romeo = update[foxtrot];
            romeo = output.bind(tango)(romeo);
            backup = romeo.PressableOpacity;
            romeo = {};
            romeo['onPress'] = control;
            control = 'button';
            romeo['accessibilityRole'] = control;
            config = sizing.questDockHeaderActionDisclosures;
            sequence = new Array(2);
            sequence[0] = config;
            config = sizing.questDockHeaderTertiaryContent;
            sequence[1] = config;
            romeo['style'] = sequence;
            sequence = _closure1_slot14;
            vacuum = {};
            result = update[result];
            result = output.bind(tango)(result);
            config = result.Text;
            result = {'color': 'interactive-active', 'variant': 'text-sm/medium'};
            context = update[record];
            context = output.bind(tango)(context);
            papa = context.intl;
            context = papa.string;
            record = update[record];
            record = output.bind(tango)(record);
            record = record.t;
            record = record.o6FLcH;
            record = context.bind(papa)(record);
            result['children'] = record;
            result = kilo.bind(tango)(config, result);
            config = new Array(2);
            config[0] = result;
            result = 28;
            result = update[result];
            result = output.bind(tango)(result);
            context = result.CircleQuestionIcon;
            record = {};
            result = 7;
            papa = update[result];
            papa = echo.bind(tango)(papa);
            papa = papa.colors;
            papa = papa.INTERACTIVE_ACTIVE;
            record['color'] = papa;
            papa = sizing.questDockHeaderActionDisclosuresIcon;
            record['style'] = papa;
            record = kilo.bind(tango)(context, record);
            config[1] = record;
            vacuum['children'] = config;
            vacuum = options.bind(tango)(sequence, vacuum);
            romeo['children'] = vacuum;
            backup = kilo.bind(tango)(backup, romeo);
            romeo = new Array(3);
            romeo[0] = backup;
            backup = {};
            vacuum = sizing.questDockHeaderActionSeparator;
            backup['style'] = vacuum;
            backup = kilo.bind(tango)(golf, backup);
            romeo[1] = backup;
            foxtrot = update[foxtrot];
            foxtrot = output.bind(tango)(foxtrot);
            backup = foxtrot.PressableOpacity;
            foxtrot = {};
            foxtrot['accessibilityRole'] = control;
            foxtrot['onPress'] = source;
            sizing = sizing.questDockHeaderTertiaryContent;
            foxtrot['style'] = sizing;
            sizing = 29;
            sizing = update[sizing];
            sizing = output.bind(tango)(sizing);
            output = sizing.MoreHorizontalIcon;
            sizing = {};
            result = update[result];
            result = echo.bind(tango)(result);
            result = result.colors;
            result = result.INTERACTIVE_ACTIVE;
            sizing['color'] = result;
            sizing = kilo.bind(tango)(output, sizing);
            foxtrot['children'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[2] = foxtrot;
            offset['children'] = romeo;
            offset = options.bind(tango)(yankee, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 30;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/quests/native/QuestDock/QuestDockUnenrolledHeader.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();