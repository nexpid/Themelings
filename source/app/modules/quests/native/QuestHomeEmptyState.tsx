// app/modules/quests/native/QuestHomeEmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    offset = 1;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    tango = tango.ImageBackground;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.VerticalGradient;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    verify['flex'] = offset;
    tango['container'] = verify;
    offset = 'center';
    verify = {'justifyContent': 'center', 'alignItems': 'center', 'flex': 1};
    tango['emptyStateContainer'] = verify;
    verify = {'top': 4294967241, 'maxWidth': 263};
    tango['emptyStateContentContainer'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tango['emptyStateContentTitle'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 4};
    tango['emptyStateContentDescription'] = verify;
    verify = {'flex': 1, 'width': '100%', 'aspectRatio': 1.6375545851528384, 'minWidth': '100%', 'position': 'absolute', 'bottom': 0, 'zIndex': 4294967295};
    tango['emptyImage'] = verify;
    verify = {'height': 22, 'width': '100%', 'position': 'absolute', 'bottom': 0};
    tango['gradient'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/quests/native/QuestHomeEmptyState.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: QuestHomeEmptyState
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.action;
            entity = _closure1_slot9;
            tango = undefined;
            result = entity.bind(tango)();
            echo = _closure1_slot0;
            update = _closure1_slot2;
            entity = 5;
            entity = update[entity];
            report = echo.bind(tango)(entity);
            zulu = report.useToken;
            mike = _closure1_slot1;
            entity = 6;
            entity = update[entity];
            entity = mike.bind(tango)(entity);
            entity = entity.colors;
            entity = entity.BG_BASE_SECONDARY;
            output = zulu.bind(report)(entity);
            entity = 7;
            entity = update[entity];
            entity = mike.bind(tango)(entity);
            entity = entity.bind(tango)();
            verify = entity.isChatLockedOpen;
            zulu = _closure1_slot6;
            mike = _closure1_slot3;
            entity = {};
            report = result.container;
            entity['style'] = report;
            oscar = _closure1_slot7;
            report = {};
            golf = result.emptyStateContainer;
            report['style'] = golf;
            golf = {};
            options = result.emptyStateContentContainer;
            golf['style'] = options;
            yankee = 8;
            options = update[yankee];
            options = echo.bind(tango)(options);
            romeo = options.Text;
            options = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            foxtrot = result.emptyStateContentTitle;
            options['style'] = foxtrot;
            foxtrot = 9;
            backup = update[foxtrot];
            backup = echo.bind(tango)(backup);
            source = backup.intl;
            kilo = source.string;
            backup = update[foxtrot];
            backup = echo.bind(tango)(backup);
            backup = backup.t;
            backup = backup.SdlRnJ;
            backup = kilo.bind(source)(backup);
            options['children'] = backup;
            romeo = zulu.bind(tango)(romeo, options);
            options = new Array(3);
            options[0] = romeo;
            yankee = update[yankee];
            yankee = echo.bind(tango)(yankee);
            romeo = yankee.Text;
            yankee = {'variant': 'text-md/normal', 'color': 'header-secondary'};
            backup = result.emptyStateContentDescription;
            yankee['style'] = backup;
            backup = update[foxtrot];
            backup = echo.bind(tango)(backup);
            kilo = backup.intl;
            backup = kilo.string;
            foxtrot = update[foxtrot];
            foxtrot = echo.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.R7mv+P;
            foxtrot = backup.bind(kilo)(foxtrot);
            yankee['children'] = foxtrot;
            yankee = zulu.bind(tango)(romeo, yankee);
            options[1] = yankee;
            options[2] = offset;
            golf['children'] = options;
            options = oscar.bind(tango)(mike, golf);
            golf = new Array(2);
            golf[0] = options;
            options = null;
            if(verify) { _fun00002_ip = 543; continue _fun00001 }
 380:
            yankee = _closure1_slot7;
            offset = _closure1_slot8;
            verify = {};
            kilo = _closure1_slot6;
            foxtrot = _closure1_slot4;
            romeo = {};
            backup = result.emptyImage;
            romeo['style'] = backup;
            backup = _closure1_slot1;
            echo = _closure1_slot2;
            update = 10;
            update = echo[update];
            update = backup.bind(tango)(update);
            romeo['source'] = update;
            update = 'cover';
            romeo['resizeMode'] = update;
            foxtrot = kilo.bind(tango)(foxtrot, romeo);
            romeo = new Array(2);
            romeo[0] = foxtrot;
            foxtrot = 11;
            foxtrot = echo[foxtrot];
            backup = backup.bind(tango)(foxtrot);
            foxtrot = {};
            result = result.gradient;
            foxtrot['style'] = result;
            sizing = _closure1_slot5;
            result = sizing.END;
            foxtrot['end'] = result;
            sizing = sizing.START;
            foxtrot['start'] = sizing;
            sizing = ['rgba(0, 0, 0, 0)'];
            sizing[1] = output;
            foxtrot['colors'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[1] = foxtrot;
            verify['children'] = romeo;
            options = yankee.bind(tango)(offset, verify);
 543:
            golf[1] = options;
            report['children'] = golf;
            report = oscar.bind(tango)(mike, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();