// app/modules/quests/native/ATTModal/ATTExperiment.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    golfie = argBar;
    zuuluu = argFre;
    option = argPlu;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    tangon = {};
    report = 1;
    tangon['DEFAULT'] = report;
    entity = 'DEFAULT';
    tangon[report] = entity;
    oscard = 2;
    tangon['COPY_2'] = oscard;
    entity = 'COPY_2';
    tangon[oscard] = entity;
    michal = 3;
    tangon['COPY_3'] = michal;
    entity = 'COPY_3';
    tangon[michal] = entity;
    michal = 4;
    tangon['COPY_4'] = michal;
    entity = 'COPY_4';
    tangon[michal] = entity;
    michal = {};
    offset = tangon.DEFAULT;
    verify = {};
    yankee = 0;
    romeon = option[yankee];
    entity = undefined;
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.vlj5uL;
    verify['body'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.mH8BIS;
    verify['subBody'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.fpfPTk;
    verify['personalizedCopy'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.y4HOMj;
    verify['cozyCopy'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.UBpcNz;
    verify['supportCopy'] = romeon;
    michal[offset] = verify;
    offset = tangon.COPY_2;
    verify = {};
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.1dqa3d;
    verify['body'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.1xzDm5;
    verify['subBody'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.ZxkYWV;
    verify['personalizedCopy'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.YW0z09;
    verify['cozyCopy'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.TSMwsr;
    verify['supportCopy'] = romeon;
    michal[offset] = verify;
    offset = tangon.COPY_3;
    verify = {};
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.acNnra;
    verify['body'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.P9bOBQ;
    verify['subBody'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.2xEEtr;
    verify['personalizedCopy'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.xaXauL;
    verify['cozyCopy'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.mE2qtL;
    verify['supportCopy'] = romeon;
    michal[offset] = verify;
    offset = tangon.COPY_4;
    verify = {};
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.Cq8QKS;
    verify['body'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.b0WurK;
    verify['subBody'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.nvVy39;
    verify['personalizedCopy'] = romeon;
    romeon = option[yankee];
    romeon = golfie.bind(entity)(romeon);
    romeon = romeon.t;
    romeon = romeon.oD52ER;
    verify['cozyCopy'] = romeon;
    yankee = option[yankee];
    yankee = golfie.bind(entity)(yankee);
    yankee = yankee.t;
    yankee = yankee.QNWJs7;
    verify['supportCopy'] = yankee;
    michal[offset] = verify;
    report = option[report];
    offset = golfie.bind(entity)(report);
    verify = offset.createExperiment;
    report = {'kind': 'user', 'id': '2025-04_att_ios_rollout', 'label': 'ATT iOS rollout experiment'};
    yankee = {'showPrePrompt': false, 'showPrompt': false, 'showCelebration': false};
    romeon = tangon.DEFAULT;
    yankee['copyKey'] = romeon;
    report['defaultConfig'] = yankee;
    romeon = {'id': 0, 'label': "A/A, No Treatment: Just testing that the code merged doesn't break anything"};
    yankee = {'showPrePrompt': false, 'showPrompt': false, 'showCelebration': false};
    foxtra = tangon.DEFAULT;
    yankee['copyKey'] = foxtra;
    romeon['config'] = yankee;
    yankee = new Array(7);
    yankee[0] = romeon;
    romeon = {'id': 1, 'label': 'Treatment #1: Baselining opt-in rates with no pre-prompt at all'};
    foxtra = {'showPrePrompt': false, 'showPrompt': true, 'showCelebration': false};
    backup = tangon.DEFAULT;
    foxtra['copyKey'] = backup;
    romeon['config'] = foxtra;
    yankee[1] = romeon;
    romeon = {'id': 2, 'label': 'Treatment #2: Exploring pre-prompt vs. no pre-prompt'};
    foxtra = {'showPrePrompt': true, 'showPrompt': true, 'showCelebration': false};
    backup = tangon.DEFAULT;
    foxtra['copyKey'] = backup;
    romeon['config'] = foxtra;
    yankee[2] = romeon;
    romeon = {'id': 3, 'label': 'Treatment #3: Exploring alternative pre-prompt language'};
    foxtra = {'showPrePrompt': true, 'showPrompt': true, 'showCelebration': false};
    backup = tangon.COPY_2;
    foxtra['copyKey'] = backup;
    romeon['config'] = foxtra;
    yankee[3] = romeon;
    romeon = {'id': 4, 'label': 'Treatment #4: Exploring alternative pre-prompt language'};
    foxtra = {'showPrePrompt': true, 'showPrompt': true, 'showCelebration': false};
    backup = tangon.COPY_3;
    foxtra['copyKey'] = backup;
    romeon['config'] = foxtra;
    yankee[4] = romeon;
    romeon = {'id': 5, 'label': 'Treatment #5: Exploring alternative pre-prompt language'};
    foxtra = {'showPrePrompt': true, 'showPrompt': true, 'showCelebration': false};
    backup = tangon.COPY_4;
    foxtra['copyKey'] = backup;
    romeon['config'] = foxtra;
    yankee[5] = romeon;
    romeon = {'id': 6, 'label': 'Treatment #6: Exploring celebration vs. not with winning pre-prompt language'};
    foxtra = {'showPrePrompt': true, 'showPrompt': true, 'showCelebration': true};
    backup = tangon.DEFAULT;
    foxtra['copyKey'] = backup;
    romeon['config'] = foxtra;
    yankee[6] = romeon;
    report['treatments'] = yankee;
    report = verify.bind(offset)(report);
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = 'modules/quests/native/ATTModal/ATTExperiment.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['default'] = report;
    zuuluu['ATTCopyKey'] = tangon;
    zuuluu['ATT_COPIES'] = michal;
    return entity;
})();