// app/modules/guild_antiraid/native/GuildIncidentActionsActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, mike);
    entity = 0;
    golf = oscar[entity];
    mike = argCorge;
    entity = undefined;
    mike = mike.bind(entity)(golf);
    var _closure1_slot3 = mike;
    mike = 1;
    mike = oscar[mike];
    mike = yankee.bind(entity)(mike);
    var _closure1_slot4 = mike;
    mike = 2;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    golf = mike.resetGuildIncidentsActionSheetStore;
    var _closure1_slot5 = golf;
    golf = mike.setPauseDms;
    var _closure1_slot6 = golf;
    golf = mike.setPauseInvites;
    var _closure1_slot7 = golf;
    golf = mike.setTime;
    var _closure1_slot8 = golf;
    mike = mike.useGuildIncidentsActionSheetStore;
    var _closure1_slot9 = mike;
    mike = 3;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    mike = mike.getTimeframes;
    var _closure1_slot10 = mike;
    mike = 4;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    golf = mike.AnalyticEvents;
    var _closure1_slot11 = golf;
    mike = mike.GuildFeatures;
    var _closure1_slot12 = mike;
    mike = 5;
    golf = oscar[mike];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot13 = golf;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot14 = mike;
    mike = 6;
    mike = oscar[mike];
    options = report.bind(entity)(mike);
    golf = options.createStyles;
    mike = {};
    verify = {'paddingVertical': 24, 'paddingHorizontal': 16, 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center'};
    mike['container'] = verify;
    verify = {'marginBottom': 12, 'textAlign': 'center', 'display': 'flex', 'flexDirection': 'row'};
    mike['title'] = verify;
    verify = {};
    offset = -12;
    verify['marginLeft'] = offset;
    mike['beta'] = verify;
    verify = {'marginBottom': 16, 'textAlign': 'center'};
    mike['subtitle'] = verify;
    verify = {'backgroundColor': null, 'padding': 12, 'borderRadius': null, 'width': '100%', 'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    offset = 7;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.INPUT_BACKGROUND;
    verify['backgroundColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderRadius'] = romeo;
    mike['dropdown'] = verify;
    verify = {'width': 20, 'height': 20};
    mike['dropdownIcon'] = verify;
    verify = {'width': '100%', 'position': 'relative'};
    mike['invitesOptionContainer'] = verify;
    verify = {'borderColor': null, 'borderWidth': 1, 'marginBottom': 12};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_ACCENT;
    verify['borderColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    mike['optionContainer'] = verify;
    mike = golf.bind(options)(mike);
    var _closure1_slot15 = mike;
    mike = function(argFoo) { // Original name: DurationSelectionActionSheet
        entity = argFoo;
        entity = entity.onClose;
        var _closure2_slot0 = entity;
        entity = _closure1_slot10;
        tango = undefined;
        yankee = entity.bind(tango)();
        zulu = _closure1_slot14;
        golf = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 8;
        entity = offset[entity];
        entity = golf.bind(tango)(entity);
        mike = entity.ActionSheet;
        entity = {};
        options = _closure1_slot13;
        report = 9;
        report = offset[report];
        report = golf.bind(tango)(report);
        oscar = report.BottomSheetTitleHeader;
        report = {};
        romeo = 10;
        foxtrot = offset[romeo];
        foxtrot = golf.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.string;
        romeo = offset[romeo];
        romeo = golf.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.vKYZzc;
        romeo = foxtrot.bind(backup)(romeo);
        report['title'] = romeo;
        oscar = options.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = 11;
        oscar = offset[oscar];
        oscar = golf.bind(tango)(oscar);
        oscar = oscar.ActionSheetRow;
        golf = oscar.Group;
        oscar = {};
        offset = false;
        oscar['hasIcons'] = offset;
        offset = yankee.map;
        verify = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            report = _closure1_slot13;
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            mike = 11;
            mike = tango[mike];
            tango = undefined;
            mike = zulu.bind(tango)(mike);
            zulu = mike.ActionSheetRow;
            mike = {};
            golf = entity.label;
            mike['label'] = golf;
            oscar = function() { // Original name: onPress
                zulu = _closure1_slot8;
                entity = _closure3_slot0;
                mike = entity.value;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                mike = _closure2_slot0;
                mike = mike.bind(entity)();
                return entity;
            };
            mike['onPress'] = oscar;
            entity = entity.value;
            entity = report.bind(tango)(zulu, mike, entity);
            return entity;
        };
        verify = offset.bind(yankee)(verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot16 = mike;
    mike = function(argFoo) { // Original name: GuildIncidentActionsActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            report = entity.guild;
            var _closure2_slot0 = report;
            entity = entity.analyticsData;
            var _closure2_slot1 = entity;
            tango = undefined;
            var _closure2_slot7 = tango;
            var _closure2_slot8 = tango;
            entity = _closure1_slot15;
            config = entity.bind(tango)();
            entity = _closure1_slot9;
            mike = entity.bind(tango)();
            entity = mike.time;
            var _closure2_slot2 = entity;
            source = mike.pauseInvites;
            var _closure2_slot3 = source;
            update = mike.pauseDms;
            var _closure2_slot4 = update;
            output = mike.hasTimeChanges;
            zulu = _closure1_slot0;
            golf = _closure1_slot2;
            mike = 12;
            mike = golf[mike];
            verify = zulu.bind(tango)(mike);
            options = verify.useStateFromStores;
            mike = _closure1_slot4;
            oscar = new Array(1);
            oscar[0] = mike;
            mike = function() {
                zulu = _closure1_slot4;
                mike = zulu.getGuildIncident;
                entity = _closure2_slot0;
                entity = entity.id;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            oscar = options.bind(verify)(oscar, mike);
            mike = 13;
            options = golf[mike];
            verify = zulu.bind(tango)(options);
            options = verify.hasInvitesDisabled;
            sizing = options.bind(verify)(oscar);
            var _closure2_slot5 = sizing;
            mike = golf[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.hasDMsDisabled;
            echo = mike.bind(zulu)(oscar);
            var _closure2_slot6 = echo;
            verify = null;
            mike = verify == report;
            foxtrot = undefined;
            if(mike) { _fun00002_ip = 222; continue _fun00001 }
 201:
            zulu = report.hasFeature;
            mike = _closure1_slot12;
            mike = mike.INVITES_DISABLED;
            foxtrot = zulu.bind(report)(mike);
 222:
            report = _closure1_slot3;
            oscar = report.useEffect;
            zulu = new Array(2);
            zulu[0] = echo;
            zulu[1] = sizing;
            mike = function() {
                report = _closure1_slot7;
                tango = _closure2_slot5;
                entity = undefined;
                tango = report.bind(entity)(tango);
                zulu = _closure1_slot6;
                mike = _closure2_slot6;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            mike = oscar.bind(report)(mike, zulu);
            zulu = report.useMemo;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    mike = _closure1_slot10;
                    entity = undefined;
                    tango = mike.bind(entity)();
                    zulu = tango.find;
                    mike = function(argFoo) {
                        entity = argFoo;
                        mike = entity.value;
                        entity = _closure2_slot2;
                        entity = mike === entity;
                        return entity;
                    };
                    mike = zulu.bind(tango)(mike);
                    zulu = null;
                    zulu = zulu == mike;
                    if(zulu) { _fun00004_ip = 46; continue _fun00003 }
 41:
                    entity = mike.label;
 46:
                    return entity;
                }
            };
            offset = zulu.bind(report)(entity, mike);
            entity = function() { // Original name: onDurationSelectorClose
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 14;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.showActionSheet;
                mike = {};
                golf = _closure1_slot13;
                oscar = _closure1_slot17;
                report = {};
                verify = _closure2_slot0;
                report['guild'] = verify;
                options = _closure2_slot1;
                report['analyticsData'] = options;
                report = golf.bind(entity)(oscar, report);
                mike['content'] = report;
                report = 'GuildIncidentActionsActionSheet';
                mike['key'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            _closure2_slot7 = entity;
            kilo = function() { // Original name: handleClose
                tango = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 14;
                zulu = zulu[entity];
                entity = undefined;
                report = tango.bind(entity)(zulu);
                tango = report.hideActionSheet;
                zulu = 'GuildIncidentActionsActionSheet';
                zulu = tango.bind(report)(zulu);
                mike = _closure1_slot5;
                mike = mike.bind(entity)();
                return entity;
            };
            _closure2_slot8 = kilo;
            zulu = _closure1_slot14;
            backup = _closure1_slot0;
            vacuum = _closure1_slot2;
            entity = 8;
            entity = vacuum[entity];
            entity = backup.bind(tango)(entity);
            mike = entity.ActionSheet;
            entity = {};
            options = true;
            entity['startExpanded'] = options;
            golf = _closure1_slot13;
            report = 9;
            report = vacuum[report];
            report = backup.bind(tango)(report);
            oscar = report.BottomSheetTitleHeader;
            report = {};
            result = 10;
            romeo = vacuum[result];
            romeo = backup.bind(tango)(romeo);
            record = romeo.intl;
            sequence = record.string;
            romeo = vacuum[result];
            romeo = backup.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.oCYAc3;
            romeo = sequence.bind(record)(romeo);
            report['title'] = romeo;
            sequence = _closure1_slot1;
            record = 15;
            romeo = vacuum[record];
            sequence = sequence.bind(tango)(romeo);
            romeo = {};
            record = vacuum[record];
            record = backup.bind(tango)(record);
            record = record.BetaSizes;
            record = record.SMALL;
            romeo['size'] = record;
            config = config.beta;
            romeo['style'] = config;
            romeo = golf.bind(tango)(sequence, romeo);
            report['leading'] = romeo;
            report = golf.bind(tango)(oscar, report);
            entity['header'] = report;
            report = 16;
            report = vacuum[report];
            report = backup.bind(tango)(report);
            oscar = report.InputButton;
            report = {};
            romeo = 17;
            romeo = vacuum[romeo];
            romeo = backup.bind(tango)(romeo);
            backup = romeo.ChevronLargeDownIcon;
            romeo = {};
            vacuum = 'sm';
            romeo['size'] = vacuum;
            romeo = golf.bind(tango)(backup, romeo);
            report['icon'] = romeo;
            romeo = 'end';
            report['iconPosition'] = romeo;
            romeo = verify != offset;
            verify = '';
            if(!romeo) { _fun00002_ip = 573; continue _fun00001 }
 570:
            verify = offset;
 573:
            report['text'] = verify;
            verify = function() { // Original name: onPress
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 14;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.showActionSheet;
                mike = {};
                golf = _closure1_slot13;
                oscar = _closure1_slot16;
                report = {};
                options = _closure2_slot7;
                report['onClose'] = options;
                report = golf.bind(entity)(oscar, report);
                mike['content'] = report;
                report = 'DurationSelectionActionSheet';
                mike['key'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            report['onPress'] = verify;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(4);
            report[0] = oscar;
            offset = _closure1_slot14;
            context = _closure1_slot0;
            sequence = _closure1_slot2;
            oscar = 18;
            oscar = sequence[oscar];
            oscar = context.bind(tango)(oscar);
            verify = oscar.TableRowGroup;
            golf = {};
            oscar = false;
            golf['hasIcons'] = oscar;
            vacuum = _closure1_slot13;
            oscar = 19;
            romeo = sequence[oscar];
            romeo = context.bind(tango)(romeo);
            backup = romeo.TableSwitchRow;
            romeo = {};
            config = sequence[result];
            config = context.bind(tango)(config);
            papa = config.intl;
            record = papa.string;
            config = sequence[result];
            config = context.bind(tango)(config);
            config = config.t;
            config = config.Uwsjn5;
            config = record.bind(papa)(config);
            romeo['label'] = config;
            config = sequence[result];
            config = context.bind(tango)(config);
            record = config.intl;
            config = record.string;
            sequence = sequence[result];
            sequence = context.bind(tango)(sequence);
            sequence = sequence.t;
            sequence = sequence.qPJkZm;
            sequence = config.bind(record)(sequence);
            romeo['subLabel'] = sequence;
            sequence = source;
            if(sequence) { _fun00002_ip = 771; continue _fun00001 }
 768:
            sequence = foxtrot;
 771:
            romeo['value'] = sequence;
            sequence = function() { // Original name: onValueChange
                zulu = _closure1_slot7;
                entity = _closure2_slot3;
                mike = !entity;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            romeo['onValueChange'] = sequence;
            romeo['disabled'] = foxtrot;
            backup = vacuum.bind(tango)(backup, romeo);
            romeo = new Array(2);
            romeo[0] = backup;
            if(!foxtrot) { _fun00002_ip = 981; continue _fun00001 }
 811:
            sequence = _closure1_slot13;
            papa = _closure1_slot0;
            config = _closure1_slot2;
            record = 20;
            backup = config[record];
            backup = papa.bind(tango)(backup);
            vacuum = backup.TableRow;
            backup = {};
            record = config[record];
            record = papa.bind(tango)(record);
            record = record.TableRow;
            context = record.Icon;
            record = {};
            status = _closure1_slot1;
            target = 21;
            target = config[target];
            target = status.bind(tango)(target);
            record['source'] = target;
            target = 22;
            target = config[target];
            target = papa.bind(tango)(target);
            target = target.WarningIcon;
            record['IconComponent'] = target;
            target = 'secondary';
            record['variant'] = target;
            record = sequence.bind(tango)(context, record);
            backup['icon'] = record;
            record = config[result];
            record = papa.bind(tango)(record);
            context = record.intl;
            record = context.string;
            config = config[result];
            config = papa.bind(tango)(config);
            config = config.t;
            config = config.9GPbsb;
            config = record.bind(context)(config);
            backup['label'] = config;
            foxtrot = sequence.bind(tango)(vacuum, backup);
 981:
            romeo[1] = foxtrot;
            golf['children'] = romeo;
            golf = offset.bind(tango)(verify, golf);
            report[1] = golf;
            backup = _closure1_slot13;
            sequence = _closure1_slot0;
            foxtrot = _closure1_slot2;
            oscar = foxtrot[oscar];
            oscar = sequence.bind(tango)(oscar);
            golf = oscar.TableSwitchRow;
            oscar = {};
            verify = foxtrot[result];
            verify = sequence.bind(tango)(verify);
            romeo = verify.intl;
            offset = romeo.string;
            verify = foxtrot[result];
            verify = sequence.bind(tango)(verify);
            verify = verify.t;
            verify = verify.wrDmAw;
            verify = offset.bind(romeo)(verify);
            oscar['label'] = verify;
            verify = foxtrot[result];
            verify = sequence.bind(tango)(verify);
            romeo = verify.intl;
            offset = romeo.string;
            verify = foxtrot[result];
            verify = sequence.bind(tango)(verify);
            verify = verify.t;
            verify = verify.UQbJW1;
            verify = offset.bind(romeo)(verify);
            oscar['subLabel'] = verify;
            oscar['value'] = update;
            verify = function() { // Original name: onValueChange
                zulu = _closure1_slot6;
                entity = _closure2_slot4;
                mike = !entity;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            oscar['onValueChange'] = verify;
            oscar['start'] = options;
            oscar['end'] = options;
            oscar = backup.bind(tango)(golf, oscar);
            report[2] = oscar;
            options = _closure1_slot14;
            oscar = 23;
            oscar = foxtrot[oscar];
            oscar = sequence.bind(tango)(oscar);
            golf = oscar.ButtonGroup;
            oscar = {};
            offset = 24;
            verify = foxtrot[offset];
            verify = sequence.bind(tango)(verify);
            romeo = verify.Button;
            verify = {};
            control = function() { // Original name: onPress
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    offset = _closure1_slot0;
                    foxtrot = _closure1_slot2;
                    entity = 25;
                    mike = foxtrot[entity];
                    entity = undefined;
                    tango = offset.bind(entity)(mike);
                    zulu = tango.setGuildIncidentActions;
                    sizing = _closure2_slot0;
                    update = sizing.id;
                    romeo = _closure2_slot3;
                    yankee = _closure2_slot4;
                    verify = _closure2_slot2;
                    source = tango;
                    echo = romeo;
                    result = yankee;
                    output = verify;
                    mike = source[zulu](update, echo, result, output, sizing);
                    mike = _closure2_slot8;
                    mike = mike.bind(entity)();
                    mike = _closure2_slot1;
                    kilo = mike.source;
                    golf = mike.alertType;
                    backup = mike.messageId;
                    zulu = _closure1_slot1;
                    mike = 26;
                    mike = foxtrot[mike];
                    oscar = zulu.bind(entity)(mike);
                    tango = oscar.track;
                    mike = _closure1_slot11;
                    zulu = mike.GUILD_RAID_INTERVENTION_STATE_CHANGE;
                    mike = {};
                    sizing = sizing.id;
                    mike['guild_id'] = sizing;
                    mike['source'] = kilo;
                    mike['raid_alert_id'] = backup;
                    mike['raid_alert_type'] = golf;
                    golf = 13;
                    backup = foxtrot[golf];
                    kilo = offset.bind(entity)(backup);
                    backup = kilo.getEnabledInterventions;
                    backup = backup.bind(kilo)(romeo, yankee);
                    mike['intervention_type_enabled'] = backup;
                    golf = foxtrot[golf];
                    offset = offset.bind(entity)(golf);
                    golf = offset.getDisabledInterventions;
                    golf = golf.bind(offset)(romeo, yankee);
                    mike['intervention_type_disabled'] = golf;
                    golf = 60;
                    golf = golf * verify;
                    mike['duration'] = golf;
                    mike = tango.bind(oscar)(zulu, mike);
                    mike = _closure2_slot5;
                    mike = !mike;
                    if(!mike) { _fun00006_ip = 248; continue _fun00005 }
 241:
                    zulu = _closure2_slot6;
                    mike = !zulu;
 248:
                    if(mike) { _fun00006_ip = 255; continue _fun00005 }
 251:
                    mike = _closure2_slot3;
 255:
                    if(mike) { _fun00006_ip = 262; continue _fun00005 }
 258:
                    mike = _closure2_slot4;
 262:
                    if(mike) { _fun00006_ip = 353; continue _fun00005 }
 265:
                    zulu = _closure1_slot0;
                    verify = _closure1_slot2;
                    mike = 14;
                    mike = verify[mike];
                    tango = zulu.bind(entity)(mike);
                    zulu = tango.showActionSheet;
                    mike = {};
                    golf = _closure1_slot13;
                    oscar = _closure1_slot1;
                    report = 27;
                    report = verify[report];
                    oscar = oscar.bind(entity)(report);
                    report = {};
                    options = _closure2_slot0;
                    options = options.id;
                    report['guildId'] = options;
                    report = golf.bind(entity)(oscar, report);
                    mike['content'] = report;
                    report = 'GuildRaidLockdownFeedbackActionSheet';
                    mike['key'] = report;
                    mike = zulu.bind(tango)(mike);
 353:
                    return entity;
                }
            };
            verify['onPress'] = control;
            control = foxtrot[result];
            control = sequence.bind(tango)(control);
            vacuum = control.intl;
            control = vacuum.string;
            foxtrot = foxtrot[result];
            foxtrot = sequence.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.R3BPHx;
            foxtrot = control.bind(vacuum)(foxtrot);
            verify['text'] = foxtrot;
            foxtrot = 'primary';
            verify['variant'] = foxtrot;
            foxtrot = 'md';
            verify['size'] = foxtrot;
            sizing = source !== sizing;
            if(sizing) { _fun00002_ip = 1289; continue _fun00001 }
 1285:
            sizing = update !== echo;
 1289:
            if(sizing) { _fun00002_ip = 1295; continue _fun00001 }
 1292:
            sizing = output;
 1295:
            sizing = !sizing;
            verify['disabled'] = sizing;
            romeo = backup.bind(tango)(romeo, verify);
            verify = new Array(2);
            verify[0] = romeo;
            romeo = _closure1_slot13;
            output = _closure1_slot0;
            backup = _closure1_slot2;
            offset = backup[offset];
            offset = output.bind(tango)(offset);
            yankee = offset.Button;
            offset = {};
            offset['onPress'] = kilo;
            kilo = backup[result];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = backup[result];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            backup = backup.ETE/oK;
            backup = kilo.bind(sizing)(backup);
            offset['text'] = backup;
            backup = 'secondary';
            offset['variant'] = backup;
            offset['size'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[3] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot17 = mike;
    tango = 28;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_antiraid/native/GuildIncidentActionsActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();