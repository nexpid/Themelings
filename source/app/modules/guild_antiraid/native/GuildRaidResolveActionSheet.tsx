// app/modules/guild_antiraid/native/GuildRaidResolveActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'paddingVertical': 24, 'paddingHorizontal': 16, 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center'};
    tangon['container'] = verify;
    verify = {'marginBottom': 8, 'textAlign': 'center'};
    tangon['title'] = verify;
    verify = {'marginBottom': 16, 'textAlign': 'center'};
    tangon['subtitle'] = verify;
    verify = {'borderColor': null, 'borderWidth': 1, 'borderRadius': null, 'display': 'flex', 'flexDirection': 'column', 'marginBottom': 14, 'width': '100%'};
    offset = 6;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_ACCENT;
    verify['borderColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.xs;
    verify['borderRadius'] = romeon;
    romeon = '100%';
    tangon['optionContainer'] = verify;
    verify = {};
    verify['width'] = romeon;
    tangon['option'] = verify;
    verify = {'paddingLeft': 54, 'paddingRight': 16, 'paddingBottom': 16};
    tangon['textInputContainer'] = verify;
    verify = {'backgroundColor': null, 'width': '100%', 'padding': 8};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.INPUT_BACKGROUND;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['textInput'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_antiraid/native/GuildRaidResolveActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        michal = entity.guildId;
        var _closure2_slot0 = michal;
        entity = entity.messageId;
        var _closure2_slot1 = entity;
        tangon = undefined;
        var _closure2_slot6 = tangon;
        entity = function(argFoo) { // Original name: handleTextInputChange
            zuuluu = _closure2_slot6;
            entity = undefined;
            michal = argFoo;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        var _closure2_slot7 = entity;
        kiloes = function() { // Original name: handleClose
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 9;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.hideActionSheet;
            michal = 'GuildRaidResolveActionSheet';
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        var _closure2_slot8 = kiloes;
        entity = _closure1_slot9;
        result = entity.bind(tangon)();
        var _closure2_slot2 = result;
        option = _closure1_slot4;
        michal = option.useState;
        entity = new Array(0);
        entity = michal.bind(option)(entity);
        golfie = _closure1_slot3;
        oscard = 2;
        entity = golfie.bind(tangon)(entity, oscard);
        zuuluu = 0;
        michal = entity[zuuluu];
        var _closure2_slot3 = michal;
        michal = 1;
        entity = entity[michal];
        var _closure2_slot4 = entity;
        entity = option.useState;
        entity = entity.bind(option)();
        entity = golfie.bind(tangon)(entity, oscard);
        zuuluu = entity[zuuluu];
        var _closure2_slot5 = zuuluu;
        entity = entity[michal];
        _closure2_slot6 = entity;
        entity = {};
        output = _closure1_slot0;
        foxtra = _closure1_slot2;
        backup = 7;
        michal = foxtra[backup];
        michal = output.bind(tangon)(michal);
        oscard = michal.intl;
        zuuluu = oscard.string;
        michal = foxtra[backup];
        michal = output.bind(tangon)(michal);
        michal = michal.t;
        michal = michal.yeaXw8;
        michal = zuuluu.bind(oscard)(michal);
        entity['text'] = michal;
        michal = 8;
        zuuluu = foxtra[michal];
        zuuluu = output.bind(tangon)(zuuluu);
        zuuluu = zuuluu.RaidResolutionType;
        zuuluu = zuuluu.LEGITIMATE_ACTIVITY;
        entity['value'] = zuuluu;
        yankee = new Array(4);
        yankee[0] = entity;
        entity = {};
        zuuluu = foxtra[backup];
        zuuluu = output.bind(tangon)(zuuluu);
        golfie = zuuluu.intl;
        oscard = golfie.string;
        zuuluu = foxtra[backup];
        zuuluu = output.bind(tangon)(zuuluu);
        zuuluu = zuuluu.t;
        zuuluu = zuuluu.o++3Bw;
        zuuluu = oscard.bind(golfie)(zuuluu);
        entity['text'] = zuuluu;
        zuuluu = foxtra[michal];
        zuuluu = output.bind(tangon)(zuuluu);
        zuuluu = zuuluu.RaidResolutionType;
        zuuluu = zuuluu.DM_SPAM;
        entity['value'] = zuuluu;
        yankee[1] = entity;
        entity = {};
        zuuluu = foxtra[backup];
        zuuluu = output.bind(tangon)(zuuluu);
        golfie = zuuluu.intl;
        oscard = golfie.string;
        zuuluu = foxtra[backup];
        zuuluu = output.bind(tangon)(zuuluu);
        zuuluu = zuuluu.t;
        zuuluu = zuuluu.UfHAwc;
        zuuluu = oscard.bind(golfie)(zuuluu);
        entity['text'] = zuuluu;
        zuuluu = foxtra[michal];
        zuuluu = output.bind(tangon)(zuuluu);
        zuuluu = zuuluu.RaidResolutionType;
        zuuluu = zuuluu.JOIN_RAID;
        entity['value'] = zuuluu;
        yankee[2] = entity;
        entity = {};
        zuuluu = foxtra[backup];
        zuuluu = output.bind(tangon)(zuuluu);
        golfie = zuuluu.intl;
        oscard = golfie.string;
        zuuluu = foxtra[backup];
        zuuluu = output.bind(tangon)(zuuluu);
        zuuluu = zuuluu.t;
        zuuluu = zuuluu.K3UWeX;
        zuuluu = oscard.bind(golfie)(zuuluu);
        entity['text'] = zuuluu;
        michal = foxtra[michal];
        michal = output.bind(tangon)(michal);
        michal = michal.RaidResolutionType;
        michal = michal.OTHER;
        entity['value'] = michal;
        yankee[3] = entity;
        zuuluu = _closure1_slot7;
        entity = 10;
        entity = foxtra[entity];
        entity = output.bind(tangon)(entity);
        michal = entity.ActionSheet;
        entity = {};
        golfie = _closure1_slot8;
        romeon = _closure1_slot1;
        report = 11;
        report = foxtra[report];
        oscard = romeon.bind(tangon)(report);
        report = {};
        option = result.container;
        report['style'] = option;
        verify = 12;
        option = foxtra[verify];
        option = output.bind(tangon)(option);
        offset = option.Text;
        option = {'style': null, 'variant': 'heading-xl/bold', 'color': 'header-primary'};
        echoed = result.title;
        option['style'] = echoed;
        echoed = foxtra[backup];
        echoed = output.bind(tangon)(echoed);
        source = echoed.intl;
        update = source.string;
        echoed = foxtra[backup];
        echoed = output.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.1zmw/P;
        echoed = update.bind(source)(echoed);
        option['children'] = echoed;
        offset = zuuluu.bind(tangon)(offset, option);
        option = new Array(5);
        option[0] = offset;
        verify = foxtra[verify];
        verify = output.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'style': null, 'variant': 'text-sm/normal', 'color': 'header-secondary'};
        result = result.subtitle;
        verify['style'] = result;
        result = foxtra[backup];
        result = output.bind(tangon)(result);
        update = result.intl;
        echoed = update.string;
        result = foxtra[backup];
        result = output.bind(tangon)(result);
        result = result.t;
        result = result.nF79oK;
        result = echoed.bind(update)(result);
        verify['children'] = result;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[1] = verify;
        offset = yankee.map;
        verify = function(argFoo) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                yankee = entity.text;
                report = entity.value;
                var _closure3_slot0 = report;
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot5;
                michal = {};
                kiloes = _closure2_slot2;
                entity = kiloes.optionContainer;
                michal['style'] = entity;
                offset = _closure1_slot7;
                option = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 13;
                oscard = golfie[entity];
                entity = undefined;
                oscard = option.bind(entity)(oscard);
                verify = oscard.FormRow;
                oscard = {};
                kiloes = kiloes.option;
                oscard['style'] = kiloes;
                romeon = function() { // Original name: onPress
                    zuuluu = _closure3_slot0;
                    michal = function(argFoo) { // Original name: onCheckboxChange
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            report = argFoo;
                            var _closure5_slot0 = report;
                            tangon = _closure2_slot3;
                            michal = tangon.includes;
                            michal = michal.bind(tangon)(report);
                            zuuluu = _closure2_slot4;
                            if(michal) { _fun00004_ip = 42; continue _fun00003 }
 33:
                            michal = function(argFoo) {
                                entity = new Array(1);
                                report = argFoo;
                                tangon = 0;
                                oscard = entity;
                                zuuluu = arraySpread(oscard, report, tangon);
                                michal = _closure5_slot0;
                                entity[zuuluu] = michal;
                                michal = 1;
                                michal = zuuluu + michal;
                                return entity;
                            };
                            _fun00004_ip = 49; continue _fun00003;
 42:
                            michal = function(argFoo) {
                                zuuluu = argFoo;
                                michal = zuuluu.filter;
                                entity = function(argFoo) {
                                    michal = _closure5_slot0;
                                    entity = argFoo;
                                    entity = entity !== michal;
                                    return entity;
                                };
                                entity = michal.bind(zuuluu)(entity);
                                return entity;
                            };
 49:
                            entity = undefined;
                            michal = zuuluu.bind(entity)(michal);
                            return entity;
                        }
                    };
                    entity = undefined;
                    michal = michal.bind(entity)(zuuluu);
                    return entity;
                };
                oscard['onPress'] = romeon;
                kiloes = _closure1_slot1;
                romeon = 14;
                romeon = golfie[romeon];
                kiloes = kiloes.bind(entity)(romeon);
                romeon = {};
                output = _closure2_slot3;
                sizing = output.includes;
                sizing = sizing.bind(output)(report);
                romeon['selected'] = sizing;
                romeon = offset.bind(entity)(kiloes, romeon);
                oscard['leading'] = romeon;
                oscard['label'] = yankee;
                verify = offset.bind(entity)(verify, oscard);
                oscard = new Array(2);
                oscard[0] = verify;
                romeon = 8;
                golfie = golfie[romeon];
                golfie = option.bind(entity)(golfie);
                golfie = golfie.RaidResolutionType;
                golfie = golfie.OTHER;
                golfie = report === golfie;
                if(!golfie) { _fun00002_ip = 244; continue _fun00001 }
 201:
                offset = _closure2_slot3;
                verify = offset.includes;
                yankee = _closure1_slot0;
                option = _closure1_slot2;
                option = option[romeon];
                option = yankee.bind(entity)(option);
                option = option.RaidResolutionType;
                option = option.OTHER;
                golfie = verify.bind(offset)(option);
 244:
                if(!golfie) { _fun00002_ip = 404; continue _fun00001 }
 250:
                offset = _closure1_slot7;
                verify = _closure1_slot5;
                option = {};
                kiloes = _closure2_slot2;
                yankee = kiloes.textInputContainer;
                option['style'] = yankee;
                romeon = _closure1_slot1;
                result = _closure1_slot2;
                yankee = 15;
                yankee = result[yankee];
                romeon = romeon.bind(entity)(yankee);
                yankee = {};
                kiloes = kiloes.textInput;
                yankee['style'] = kiloes;
                kiloes = 'off';
                yankee['autoComplete'] = kiloes;
                kiloes = _closure2_slot5;
                yankee['value'] = kiloes;
                output = _closure1_slot0;
                backup = 7;
                kiloes = result[backup];
                kiloes = output.bind(entity)(kiloes);
                sizing = kiloes.intl;
                kiloes = sizing.string;
                backup = result[backup];
                backup = output.bind(entity)(backup);
                backup = backup.t;
                backup = backup.PAM+JS;
                backup = kiloes.bind(sizing)(backup);
                yankee['placeholder'] = backup;
                foxtra = _closure2_slot7;
                yankee['onChangeText'] = foxtra;
                yankee = offset.bind(entity)(romeon, yankee);
                option['children'] = yankee;
                golfie = offset.bind(entity)(verify, option);
 404:
                oscard[1] = golfie;
                michal['children'] = oscard;
                entity = tangon.bind(entity)(zuuluu, michal, report);
                return entity;
            }
        };
        verify = offset.bind(yankee)(verify);
        option[2] = verify;
        yankee = 16;
        verify = foxtra[yankee];
        offset = romeon.bind(tangon)(verify);
        verify = {};
        sizing = function() { // Original name: onPress
            backup = {};
            yankee = _closure1_slot0;
            tangon = _closure1_slot2;
            oscard = 8;
            zuuluu = tangon[oscard];
            entity = undefined;
            zuuluu = yankee.bind(entity)(zuuluu);
            zuuluu = zuuluu.RaidAlertType;
            zuuluu = zuuluu.JOIN_RAID;
            backup['raid_alert_type'] = zuuluu;
            offset = _closure2_slot1;
            backup['raid_alert_id'] = offset;
            romeon = _closure2_slot3;
            option = romeon.map;
            golfie = function(argFoo) {
                michal = argFoo;
                entity = michal.toString;
                entity = entity.bind(michal)();
                return entity;
            };
            golfie = option.bind(romeon)(golfie);
            backup['false_alarm_type'] = golfie;
            golfie = _closure2_slot5;
            backup['false_alarm_other_reason'] = golfie;
            verify = _closure2_slot0;
            backup['guild_id'] = verify;
            golfie = 17;
            golfie = tangon[golfie];
            foxtra = yankee.bind(entity)(golfie);
            option = foxtra.trackWithMetadata;
            golfie = _closure1_slot6;
            golfie = golfie.GUILD_RAID_FEEDBACK;
            golfie = option.bind(foxtra)(golfie, backup);
            golfie = 18;
            golfie = tangon[golfie];
            option = yankee.bind(entity)(golfie);
            golfie = option.handleResolveRaid;
            oscard = tangon[oscard];
            yankee = yankee.bind(entity)(oscard);
            oscard = yankee.getMostImportantRaidResolutionType;
            oscard = oscard.bind(yankee)(romeon);
            oscard = golfie.bind(option)(verify, offset, oscard);
            zuuluu = _closure2_slot8;
            zuuluu = zuuluu.bind(entity)();
            zuuluu = _closure1_slot1;
            michal = 19;
            michal = tangon[michal];
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.openLazy;
            michal = {};
            report = function() { // Original name: importer
                zuuluu = _closure1_slot0;
                entity = _closure1_slot2;
                michal = 21;
                michal = entity[michal];
                tangon = undefined;
                zuuluu = zuuluu.bind(tangon)(michal);
                michal = 20;
                michal = entity[michal];
                entity = entity.paths;
                zuuluu = zuuluu.bind(tangon)(michal, entity);
                michal = zuuluu.then;
                entity = function(argFoo) {
                    michal = argFoo;
                    michal = michal.default;
                    var _closure5_slot0 = michal;
                    entity = function(argFoo) {
                        tangon = _closure1_slot7;
                        zuuluu = _closure5_slot0;
                        michal = {};
                        report = argFoo;
                        oscard = michal;
                        entity = copyDataProperties(oscard, report);
                        entity = undefined;
                        entity = tangon.bind(entity)(zuuluu, michal);
                        return entity;
                    };
                    return entity;
                };
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            michal['importer'] = report;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        verify['onPress'] = sizing;
        sizing = foxtra[backup];
        sizing = output.bind(tangon)(sizing);
        echoed = sizing.intl;
        result = echoed.string;
        sizing = foxtra[backup];
        sizing = output.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.Gh3A0N;
        sizing = result.bind(echoed)(sizing);
        verify['text'] = sizing;
        sizing = foxtra[yankee];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.Colors;
        sizing = sizing.BRAND;
        verify['color'] = sizing;
        sizing = foxtra[yankee];
        sizing = romeon.bind(tangon)(sizing);
        sizing = sizing.Sizes;
        sizing = sizing.MEDIUM;
        verify['size'] = sizing;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[3] = verify;
        verify = foxtra[yankee];
        offset = romeon.bind(tangon)(verify);
        verify = {};
        verify['onPress'] = kiloes;
        kiloes = foxtra[backup];
        kiloes = output.bind(tangon)(kiloes);
        sizing = kiloes.intl;
        kiloes = sizing.string;
        backup = foxtra[backup];
        backup = output.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.ETE/oK;
        backup = kiloes.bind(sizing)(backup);
        verify['text'] = backup;
        backup = foxtra[yankee];
        backup = romeon.bind(tangon)(backup);
        backup = backup.Colors;
        backup = backup.TRANSPARENT;
        verify['color'] = backup;
        yankee = foxtra[yankee];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.Sizes;
        yankee = yankee.MEDIUM;
        verify['size'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[4] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();