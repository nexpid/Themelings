// app/modules/guild_antiraid/native/GuildRaidResolveActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'paddingVertical': 24, 'paddingHorizontal': 16, 'display': 'flex', 'flexDirection': 'column', 'alignItems': 'center'};
    tango['container'] = verify;
    verify = {'marginBottom': 8, 'textAlign': 'center'};
    tango['title'] = verify;
    verify = {'marginBottom': 16, 'textAlign': 'center'};
    tango['subtitle'] = verify;
    verify = {'borderColor': null, 'borderWidth': 1, 'borderRadius': null, 'display': 'flex', 'flexDirection': 'column', 'marginBottom': 14, 'width': '100%'};
    offset = 6;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_ACCENT;
    verify['borderColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.xs;
    verify['borderRadius'] = romeo;
    romeo = '100%';
    tango['optionContainer'] = verify;
    verify = {};
    verify['width'] = romeo;
    tango['option'] = verify;
    verify = {'paddingLeft': 54, 'paddingRight': 16, 'paddingBottom': 16};
    tango['textInputContainer'] = verify;
    verify = {'backgroundColor': null, 'width': '100%', 'padding': 8};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.INPUT_BACKGROUND;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tango['textInput'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 22;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_antiraid/native/GuildRaidResolveActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        entity = argFoo;
        mike = entity.guildId;
        var _closure2_slot0 = mike;
        entity = entity.messageId;
        var _closure2_slot1 = entity;
        tango = undefined;
        var _closure2_slot6 = tango;
        entity = function(argFoo) { // Original name: handleTextInputChange
            zulu = _closure2_slot6;
            entity = undefined;
            mike = argFoo;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        var _closure2_slot7 = entity;
        kilo = function() { // Original name: handleClose
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 9;
            mike = mike[entity];
            entity = undefined;
            tango = zulu.bind(entity)(mike);
            zulu = tango.hideActionSheet;
            mike = 'GuildRaidResolveActionSheet';
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        var _closure2_slot8 = kilo;
        entity = _closure1_slot9;
        result = entity.bind(tango)();
        var _closure2_slot2 = result;
        options = _closure1_slot4;
        mike = options.useState;
        entity = new Array(0);
        entity = mike.bind(options)(entity);
        golf = _closure1_slot3;
        oscar = 2;
        entity = golf.bind(tango)(entity, oscar);
        zulu = 0;
        mike = entity[zulu];
        var _closure2_slot3 = mike;
        mike = 1;
        entity = entity[mike];
        var _closure2_slot4 = entity;
        entity = options.useState;
        entity = entity.bind(options)();
        entity = golf.bind(tango)(entity, oscar);
        zulu = entity[zulu];
        var _closure2_slot5 = zulu;
        entity = entity[mike];
        _closure2_slot6 = entity;
        entity = {};
        output = _closure1_slot0;
        foxtrot = _closure1_slot2;
        backup = 7;
        mike = foxtrot[backup];
        mike = output.bind(tango)(mike);
        oscar = mike.intl;
        zulu = oscar.string;
        mike = foxtrot[backup];
        mike = output.bind(tango)(mike);
        mike = mike.t;
        mike = mike.yeaXw8;
        mike = zulu.bind(oscar)(mike);
        entity['text'] = mike;
        mike = 8;
        zulu = foxtrot[mike];
        zulu = output.bind(tango)(zulu);
        zulu = zulu.RaidResolutionType;
        zulu = zulu.LEGITIMATE_ACTIVITY;
        entity['value'] = zulu;
        yankee = new Array(4);
        yankee[0] = entity;
        entity = {};
        zulu = foxtrot[backup];
        zulu = output.bind(tango)(zulu);
        golf = zulu.intl;
        oscar = golf.string;
        zulu = foxtrot[backup];
        zulu = output.bind(tango)(zulu);
        zulu = zulu.t;
        zulu = zulu.o++3Bw;
        zulu = oscar.bind(golf)(zulu);
        entity['text'] = zulu;
        zulu = foxtrot[mike];
        zulu = output.bind(tango)(zulu);
        zulu = zulu.RaidResolutionType;
        zulu = zulu.DM_SPAM;
        entity['value'] = zulu;
        yankee[1] = entity;
        entity = {};
        zulu = foxtrot[backup];
        zulu = output.bind(tango)(zulu);
        golf = zulu.intl;
        oscar = golf.string;
        zulu = foxtrot[backup];
        zulu = output.bind(tango)(zulu);
        zulu = zulu.t;
        zulu = zulu.UfHAwc;
        zulu = oscar.bind(golf)(zulu);
        entity['text'] = zulu;
        zulu = foxtrot[mike];
        zulu = output.bind(tango)(zulu);
        zulu = zulu.RaidResolutionType;
        zulu = zulu.JOIN_RAID;
        entity['value'] = zulu;
        yankee[2] = entity;
        entity = {};
        zulu = foxtrot[backup];
        zulu = output.bind(tango)(zulu);
        golf = zulu.intl;
        oscar = golf.string;
        zulu = foxtrot[backup];
        zulu = output.bind(tango)(zulu);
        zulu = zulu.t;
        zulu = zulu.K3UWeX;
        zulu = oscar.bind(golf)(zulu);
        entity['text'] = zulu;
        mike = foxtrot[mike];
        mike = output.bind(tango)(mike);
        mike = mike.RaidResolutionType;
        mike = mike.OTHER;
        entity['value'] = mike;
        yankee[3] = entity;
        zulu = _closure1_slot7;
        entity = 10;
        entity = foxtrot[entity];
        entity = output.bind(tango)(entity);
        mike = entity.ActionSheet;
        entity = {};
        golf = _closure1_slot8;
        romeo = _closure1_slot1;
        report = 11;
        report = foxtrot[report];
        oscar = romeo.bind(tango)(report);
        report = {};
        options = result.container;
        report['style'] = options;
        verify = 12;
        options = foxtrot[verify];
        options = output.bind(tango)(options);
        offset = options.Text;
        options = {'style': null, 'variant': 'heading-xl/bold', 'color': 'header-primary'};
        echo = result.title;
        options['style'] = echo;
        echo = foxtrot[backup];
        echo = output.bind(tango)(echo);
        source = echo.intl;
        update = source.string;
        echo = foxtrot[backup];
        echo = output.bind(tango)(echo);
        echo = echo.t;
        echo = echo.1zmw/P;
        echo = update.bind(source)(echo);
        options['children'] = echo;
        offset = zulu.bind(tango)(offset, options);
        options = new Array(5);
        options[0] = offset;
        verify = foxtrot[verify];
        verify = output.bind(tango)(verify);
        offset = verify.Text;
        verify = {'style': null, 'variant': 'text-sm/normal', 'color': 'header-secondary'};
        result = result.subtitle;
        verify['style'] = result;
        result = foxtrot[backup];
        result = output.bind(tango)(result);
        update = result.intl;
        echo = update.string;
        result = foxtrot[backup];
        result = output.bind(tango)(result);
        result = result.t;
        result = result.nF79oK;
        result = echo.bind(update)(result);
        verify['children'] = result;
        verify = zulu.bind(tango)(offset, verify);
        options[1] = verify;
        offset = yankee.map;
        verify = function(argFoo) {
            _fun91955: for(var _fun91955_ip = 0; ; ) switch(_fun91955_ip) {
 0:
                entity = argFoo;
                yankee = entity.text;
                report = entity.value;
                var _closure3_slot0 = report;
                tango = _closure1_slot8;
                zulu = _closure1_slot5;
                mike = {};
                kilo = _closure2_slot2;
                entity = kilo.optionContainer;
                mike['style'] = entity;
                offset = _closure1_slot7;
                options = _closure1_slot0;
                golf = _closure1_slot2;
                entity = 13;
                oscar = golf[entity];
                entity = undefined;
                oscar = options.bind(entity)(oscar);
                verify = oscar.FormRow;
                oscar = {};
                kilo = kilo.option;
                oscar['style'] = kilo;
                romeo = function() { // Original name: onPress
                    zulu = _closure3_slot0;
                    mike = function(argFoo) { // Original name: onCheckboxChange
                        _fun91957: for(var _fun91957_ip = 0; ; ) switch(_fun91957_ip) {
 0:
                            report = argFoo;
                            var _closure5_slot0 = report;
                            tango = _closure2_slot3;
                            mike = tango.includes;
                            mike = mike.bind(tango)(report);
                            zulu = _closure2_slot4;
                            if(mike) { _fun91957_ip = 42; continue _fun91957 }
 33:
                            mike = function(argFoo) {
                                entity = new Array(1);
                                report = argFoo;
                                tango = 0;
                                oscar = entity;
                                zulu = arraySpread(oscar, report, tango);
                                mike = _closure5_slot0;
                                entity[zulu] = mike;
                                mike = 1;
                                mike = zulu + mike;
                                return entity;
                            };
                            _fun91957_ip = 49; continue _fun91957;
 42:
                            mike = function(argFoo) {
                                zulu = argFoo;
                                mike = zulu.filter;
                                entity = function(argFoo) {
                                    mike = _closure5_slot0;
                                    entity = argFoo;
                                    entity = entity !== mike;
                                    return entity;
                                };
                                entity = mike.bind(zulu)(entity);
                                return entity;
                            };
 49:
                            entity = undefined;
                            mike = zulu.bind(entity)(mike);
                            return entity;
                        }
                    };
                    entity = undefined;
                    mike = mike.bind(entity)(zulu);
                    return entity;
                };
                oscar['onPress'] = romeo;
                kilo = _closure1_slot1;
                romeo = 14;
                romeo = golf[romeo];
                kilo = kilo.bind(entity)(romeo);
                romeo = {};
                output = _closure2_slot3;
                sizing = output.includes;
                sizing = sizing.bind(output)(report);
                romeo['selected'] = sizing;
                romeo = offset.bind(entity)(kilo, romeo);
                oscar['leading'] = romeo;
                oscar['label'] = yankee;
                verify = offset.bind(entity)(verify, oscar);
                oscar = new Array(2);
                oscar[0] = verify;
                romeo = 8;
                golf = golf[romeo];
                golf = options.bind(entity)(golf);
                golf = golf.RaidResolutionType;
                golf = golf.OTHER;
                golf = report === golf;
                if(!golf) { _fun91955_ip = 244; continue _fun91955 }
 201:
                offset = _closure2_slot3;
                verify = offset.includes;
                yankee = _closure1_slot0;
                options = _closure1_slot2;
                options = options[romeo];
                options = yankee.bind(entity)(options);
                options = options.RaidResolutionType;
                options = options.OTHER;
                golf = verify.bind(offset)(options);
 244:
                if(!golf) { _fun91955_ip = 404; continue _fun91955 }
 250:
                offset = _closure1_slot7;
                verify = _closure1_slot5;
                options = {};
                kilo = _closure2_slot2;
                yankee = kilo.textInputContainer;
                options['style'] = yankee;
                romeo = _closure1_slot1;
                result = _closure1_slot2;
                yankee = 15;
                yankee = result[yankee];
                romeo = romeo.bind(entity)(yankee);
                yankee = {};
                kilo = kilo.textInput;
                yankee['style'] = kilo;
                kilo = 'off';
                yankee['autoComplete'] = kilo;
                kilo = _closure2_slot5;
                yankee['value'] = kilo;
                output = _closure1_slot0;
                backup = 7;
                kilo = result[backup];
                kilo = output.bind(entity)(kilo);
                sizing = kilo.intl;
                kilo = sizing.string;
                backup = result[backup];
                backup = output.bind(entity)(backup);
                backup = backup.t;
                backup = backup.PAM+JS;
                backup = kilo.bind(sizing)(backup);
                yankee['placeholder'] = backup;
                foxtrot = _closure2_slot7;
                yankee['onChangeText'] = foxtrot;
                yankee = offset.bind(entity)(romeo, yankee);
                options['children'] = yankee;
                golf = offset.bind(entity)(verify, options);
 404:
                oscar[1] = golf;
                mike['children'] = oscar;
                entity = tango.bind(entity)(zulu, mike, report);
                return entity;
            }
        };
        verify = offset.bind(yankee)(verify);
        options[2] = verify;
        yankee = 16;
        verify = foxtrot[yankee];
        offset = romeo.bind(tango)(verify);
        verify = {};
        sizing = function() { // Original name: onPress
            backup = {};
            yankee = _closure1_slot0;
            tango = _closure1_slot2;
            oscar = 8;
            zulu = tango[oscar];
            entity = undefined;
            zulu = yankee.bind(entity)(zulu);
            zulu = zulu.RaidAlertType;
            zulu = zulu.JOIN_RAID;
            backup['raid_alert_type'] = zulu;
            offset = _closure2_slot1;
            backup['raid_alert_id'] = offset;
            romeo = _closure2_slot3;
            options = romeo.map;
            golf = function(argFoo) {
                mike = argFoo;
                entity = mike.toString;
                entity = entity.bind(mike)();
                return entity;
            };
            golf = options.bind(romeo)(golf);
            backup['false_alarm_type'] = golf;
            golf = _closure2_slot5;
            backup['false_alarm_other_reason'] = golf;
            verify = _closure2_slot0;
            backup['guild_id'] = verify;
            golf = 17;
            golf = tango[golf];
            foxtrot = yankee.bind(entity)(golf);
            options = foxtrot.trackWithMetadata;
            golf = _closure1_slot6;
            golf = golf.GUILD_RAID_FEEDBACK;
            golf = options.bind(foxtrot)(golf, backup);
            golf = 18;
            golf = tango[golf];
            options = yankee.bind(entity)(golf);
            golf = options.handleResolveRaid;
            oscar = tango[oscar];
            yankee = yankee.bind(entity)(oscar);
            oscar = yankee.getMostImportantRaidResolutionType;
            oscar = oscar.bind(yankee)(romeo);
            oscar = golf.bind(options)(verify, offset, oscar);
            zulu = _closure2_slot8;
            zulu = zulu.bind(entity)();
            zulu = _closure1_slot1;
            mike = 19;
            mike = tango[mike];
            tango = zulu.bind(entity)(mike);
            zulu = tango.openLazy;
            mike = {};
            report = function() { // Original name: importer
                zulu = _closure1_slot0;
                entity = _closure1_slot2;
                mike = 21;
                mike = entity[mike];
                tango = undefined;
                zulu = zulu.bind(tango)(mike);
                mike = 20;
                mike = entity[mike];
                entity = entity.paths;
                zulu = zulu.bind(tango)(mike, entity);
                mike = zulu.then;
                entity = function(argFoo) {
                    mike = argFoo;
                    mike = mike.default;
                    var _closure5_slot0 = mike;
                    entity = function(argFoo) {
                        tango = _closure1_slot7;
                        zulu = _closure5_slot0;
                        mike = {};
                        report = argFoo;
                        oscar = mike;
                        entity = copyDataProperties(oscar, report);
                        entity = undefined;
                        entity = tango.bind(entity)(zulu, mike);
                        return entity;
                    };
                    return entity;
                };
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike['importer'] = report;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        verify['onPress'] = sizing;
        sizing = foxtrot[backup];
        sizing = output.bind(tango)(sizing);
        echo = sizing.intl;
        result = echo.string;
        sizing = foxtrot[backup];
        sizing = output.bind(tango)(sizing);
        sizing = sizing.t;
        sizing = sizing.Gh3A0N;
        sizing = result.bind(echo)(sizing);
        verify['text'] = sizing;
        sizing = foxtrot[yankee];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.Colors;
        sizing = sizing.BRAND;
        verify['color'] = sizing;
        sizing = foxtrot[yankee];
        sizing = romeo.bind(tango)(sizing);
        sizing = sizing.Sizes;
        sizing = sizing.MEDIUM;
        verify['size'] = sizing;
        verify = zulu.bind(tango)(offset, verify);
        options[3] = verify;
        verify = foxtrot[yankee];
        offset = romeo.bind(tango)(verify);
        verify = {};
        verify['onPress'] = kilo;
        kilo = foxtrot[backup];
        kilo = output.bind(tango)(kilo);
        sizing = kilo.intl;
        kilo = sizing.string;
        backup = foxtrot[backup];
        backup = output.bind(tango)(backup);
        backup = backup.t;
        backup = backup.ETE/oK;
        backup = kilo.bind(sizing)(backup);
        verify['text'] = backup;
        backup = foxtrot[yankee];
        backup = romeo.bind(tango)(backup);
        backup = backup.Colors;
        backup = backup.TRANSPARENT;
        verify['color'] = backup;
        yankee = foxtrot[yankee];
        yankee = romeo.bind(tango)(yankee);
        yankee = yankee.Sizes;
        yankee = yankee.MEDIUM;
        verify['size'] = yankee;
        verify = zulu.bind(tango)(offset, verify);
        options[4] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();