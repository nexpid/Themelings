// app/modules/guild_antiraid/native/GuildRaidLockdownFeedbackActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'display': 'flex', 'gap': 24};
    tango['container'] = verify;
    verify = {'marginBottom': 8, 'textAlign': 'center'};
    tango['title'] = verify;
    verify = {'borderColor': null, 'borderWidth': 1, 'borderRadius': null, 'display': 'flex', 'flexDirection': 'column', 'marginBottom': 16, 'width': '100%'};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_ACCENT;
    verify['borderColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.xs;
    verify['borderRadius'] = romeo;
    romeo = '100%';
    tango['optionContainer'] = verify;
    verify = {};
    verify['width'] = romeo;
    tango['option'] = verify;
    verify = {'paddingLeft': 54, 'paddingRight': 16, 'paddingBottom': 16};
    tango['textInputContainer'] = verify;
    verify = {'backgroundColor': null, 'width': '100%', 'padding': 8};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.INPUT_BACKGROUND;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tango['textInput'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 17;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/guild_antiraid/native/GuildRaidLockdownFeedbackActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.guildId;
            var _closure2_slot0 = entity;
            entity = _closure1_slot8;
            tango = undefined;
            options = entity.bind(tango)();
            golf = _closure1_slot4;
            mike = golf.useState;
            entity = new Array(0);
            entity = mike.bind(golf)(entity);
            oscar = _closure1_slot3;
            report = 2;
            entity = oscar.bind(tango)(entity, report);
            zulu = 0;
            romeo = entity[zulu];
            var _closure2_slot1 = romeo;
            mike = 1;
            entity = entity[mike];
            var _closure2_slot2 = entity;
            entity = golf.useState;
            entity = entity.bind(golf)();
            entity = oscar.bind(tango)(entity, report);
            output = entity[zulu];
            var _closure2_slot3 = output;
            entity = entity[mike];
            var _closure2_slot4 = entity;
            entity = {};
            backup = _closure1_slot0;
            kilo = _closure1_slot2;
            sizing = 6;
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            report = mike.intl;
            zulu = report.string;
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            mike = mike.t;
            mike = mike.//3pvr;
            mike = zulu.bind(report)(mike);
            entity['text'] = mike;
            offset = 7;
            mike = kilo[offset];
            mike = backup.bind(tango)(mike);
            mike = mike.RaidLockdownFeedbackType;
            mike = mike.DM_SPAM;
            entity['value'] = mike;
            update = new Array(6);
            update[0] = entity;
            entity = {};
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            report = mike.intl;
            zulu = report.string;
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            mike = mike.t;
            mike = mike.SdVsio;
            mike = zulu.bind(report)(mike);
            entity['text'] = mike;
            mike = kilo[offset];
            mike = backup.bind(tango)(mike);
            mike = mike.RaidLockdownFeedbackType;
            mike = mike.MENTION_SPAM;
            entity['value'] = mike;
            update[1] = entity;
            entity = {};
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            report = mike.intl;
            zulu = report.string;
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            mike = mike.t;
            mike = mike.uTiSVF;
            mike = zulu.bind(report)(mike);
            entity['text'] = mike;
            mike = kilo[offset];
            mike = backup.bind(tango)(mike);
            mike = mike.RaidLockdownFeedbackType;
            mike = mike.CHANNEL_SPAM;
            entity['value'] = mike;
            update[2] = entity;
            entity = {};
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            report = mike.intl;
            zulu = report.string;
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            mike = mike.t;
            mike = mike.GQczU1;
            mike = zulu.bind(report)(mike);
            entity['text'] = mike;
            mike = kilo[offset];
            mike = backup.bind(tango)(mike);
            mike = mike.RaidLockdownFeedbackType;
            mike = mike.SUS_NEW_MEMBERS;
            entity['value'] = mike;
            update[3] = entity;
            entity = {};
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            report = mike.intl;
            zulu = report.string;
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            mike = mike.t;
            mike = mike.AAgqy8;
            mike = zulu.bind(report)(mike);
            entity['text'] = mike;
            mike = kilo[offset];
            mike = backup.bind(tango)(mike);
            mike = mike.RaidLockdownFeedbackType;
            mike = mike.CHANGING_SETTINGS;
            entity['value'] = mike;
            update[4] = entity;
            entity = {};
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            report = mike.intl;
            zulu = report.string;
            mike = kilo[sizing];
            mike = backup.bind(tango)(mike);
            mike = mike.t;
            mike = mike.ryPKb2;
            mike = zulu.bind(report)(mike);
            entity['text'] = mike;
            mike = kilo[offset];
            mike = backup.bind(tango)(mike);
            mike = mike.RaidLockdownFeedbackType;
            mike = mike.OTHER;
            entity['value'] = mike;
            update[5] = entity;
            zulu = _closure1_slot6;
            entity = 9;
            entity = kilo[entity];
            entity = backup.bind(tango)(entity);
            mike = entity.ActionSheet;
            entity = {};
            report = true;
            entity['startExpanded'] = report;
            report = 10;
            report = kilo[report];
            report = backup.bind(tango)(report);
            oscar = report.BottomSheetTitleHeader;
            report = {};
            golf = kilo[sizing];
            golf = backup.bind(tango)(golf);
            result = golf.intl;
            yankee = result.string;
            golf = kilo[sizing];
            golf = backup.bind(tango)(golf);
            golf = golf.t;
            golf = golf.f5hd9P;
            golf = yankee.bind(result)(golf);
            report['title'] = golf;
            report = zulu.bind(tango)(oscar, report);
            entity['header'] = report;
            golf = _closure1_slot7;
            oscar = _closure1_slot1;
            report = 11;
            report = kilo[report];
            oscar = oscar.bind(tango)(report);
            report = {};
            options = options.container;
            report['style'] = options;
            options = 12;
            options = kilo[options];
            options = backup.bind(tango)(options);
            yankee = options.TableRowGroup;
            options = {};
            result = false;
            options['hasIcons'] = result;
            echo = update.map;
            result = function(argFoo) {
                entity = argFoo;
                oscar = entity.text;
                report = entity.value;
                var _closure3_slot0 = report;
                tango = _closure1_slot6;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 13;
                entity = zulu[entity];
                zulu = undefined;
                entity = mike.bind(zulu)(entity);
                mike = entity.TableCheckboxRow;
                entity = {};
                golf = function() { // Original name: onPress
                    zulu = _closure3_slot0;
                    mike = function(argFoo) { // Original name: onCheckboxChange
                        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                            report = argFoo;
                            var _closure5_slot0 = report;
                            tango = _closure2_slot1;
                            mike = tango.includes;
                            mike = mike.bind(tango)(report);
                            zulu = _closure2_slot2;
                            if(mike) { _fun00004_ip = 42; continue _fun00003 }
 33:
                            mike = function(argFoo) {
                                entity = new Array(1);
                                report = argFoo;
                                tango = 0;
                                oscar = entity;
                                zulu = arraySpread(oscar, report, tango);
                                mike = _closure5_slot0;
                                entity[zulu] = mike;
                                mike = 1;
                                mike = zulu + mike;
                                return entity;
                            };
                            _fun00004_ip = 49; continue _fun00003;
 42:
                            mike = function(argFoo) {
                                zulu = argFoo;
                                mike = zulu.filter;
                                entity = function(argFoo) {
                                    mike = _closure5_slot0;
                                    entity = argFoo;
                                    entity = entity !== mike;
                                    return entity;
                                };
                                entity = mike.bind(zulu)(entity);
                                return entity;
                            };
 49:
                            entity = undefined;
                            mike = zulu.bind(entity)(mike);
                            return entity;
                        }
                    };
                    entity = undefined;
                    mike = mike.bind(entity)(zulu);
                    return entity;
                };
                entity['onPress'] = golf;
                options = _closure2_slot1;
                golf = options.includes;
                golf = golf.bind(options)(report);
                entity['checked'] = golf;
                entity['label'] = oscar;
                entity = tango.bind(zulu)(mike, entity, report);
                return entity;
            };
            result = echo.bind(update)(result);
            options['children'] = result;
            yankee = zulu.bind(tango)(yankee, options);
            options = new Array(3);
            options[0] = yankee;
            yankee = romeo.includes;
            offset = kilo[offset];
            offset = backup.bind(tango)(offset);
            offset = offset.RaidLockdownFeedbackType;
            offset = offset.OTHER;
            offset = yankee.bind(romeo)(offset);
            if(!offset) { _fun00002_ip = 964; continue _fun00001 }
 852:
            backup = _closure1_slot6;
            echo = _closure1_slot0;
            kilo = _closure1_slot2;
            yankee = 14;
            yankee = kilo[yankee];
            yankee = echo.bind(tango)(yankee);
            romeo = yankee.TextArea;
            yankee = {};
            result = 'off';
            yankee['autoComplete'] = result;
            yankee['value'] = output;
            output = kilo[sizing];
            output = echo.bind(tango)(output);
            result = output.intl;
            output = result.string;
            kilo = kilo[sizing];
            kilo = echo.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.PAM+JS;
            kilo = output.bind(result)(kilo);
            yankee['placeholder'] = kilo;
            kilo = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot4;
                entity = undefined;
                mike = argFoo;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            yankee['onChange'] = kilo;
            offset = backup.bind(tango)(romeo, yankee);
 964:
            options[1] = offset;
            yankee = _closure1_slot6;
            kilo = _closure1_slot0;
            romeo = _closure1_slot2;
            verify = 15;
            verify = romeo[verify];
            verify = kilo.bind(tango)(verify);
            offset = verify.Button;
            verify = {};
            foxtrot = function() { // Original name: onPress
                report = _closure1_slot0;
                tango = _closure1_slot2;
                entity = 16;
                zulu = tango[entity];
                entity = undefined;
                golf = report.bind(entity)(zulu);
                oscar = golf.trackWithMetadata;
                zulu = _closure1_slot5;
                report = zulu.GUILD_RAID_LOCKDOWN_FEEDBACK;
                zulu = {};
                verify = _closure2_slot1;
                zulu['raid_lockdown_feedback_type'] = verify;
                verify = _closure2_slot3;
                zulu['raid_lockdown_feedback_other_reason'] = verify;
                options = _closure2_slot0;
                zulu['guild_id'] = options;
                zulu = oscar.bind(golf)(report, zulu);
                zulu = _closure1_slot1;
                mike = 8;
                mike = tango[mike];
                tango = zulu.bind(entity)(mike);
                zulu = tango.hideActionSheet;
                mike = 'GuildRaidLockdownFeedbackActionSheet';
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            verify['onPress'] = foxtrot;
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            romeo = romeo[sizing];
            romeo = kilo.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.nAt0rK;
            romeo = foxtrot.bind(backup)(romeo);
            verify['text'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[2] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();