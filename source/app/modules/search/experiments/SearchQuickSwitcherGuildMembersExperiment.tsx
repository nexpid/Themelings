// app/modules/search/experiments/SearchQuickSwitcherGuildMembersExperiment.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = require;
    var3 = exports;
    var7 = dependencyMap;
    var _closure1_slot0 = var6;
    var _closure1_slot1 = var7;
    var1 = global;
    var8 = var1.Object;
    var5 = var8.defineProperty;
    var4 = {};
    var14 = true;
    var4['value'] = var14;
    var1 = '__esModule';
    var1 = var5.bind(var8)(var3, var1, var4);
    var4 = {};
    var1 = 'NONE';
    var4['NONE'] = var1;
    var1 = 'ALL_GUILDS';
    var4['ALL_GUILDS'] = var1;
    var1 = 'SELECTED_GUILD';
    var4['SELECTED_GUILD'] = var1;
    var1 = 'FRECENCY_GUILDS';
    var4['FRECENCY_GUILDS'] = var1;
    var5 = {};
    var1 = false;
    var5['enabled'] = var1;
    var1 = var4.NONE;
    var5['type'] = var1;
    var1 = 0;
    var8 = var7[var1];
    var1 = undefined;
    var10 = var6.bind(var1)(var8);
    var9 = var10.createExperiment;
    var8 = {'kind': 'user', 'id': '2025-08_search_quick_switcher_guild_members', 'label': 'Search Quick Switcher Guild Members Experiment'};
    var8['defaultConfig'] = var5;
    var5 = {'id': 1, 'label': 'Enables searching against all guild members by default'};
    var11 = {};
    var11['enabled'] = var14;
    var12 = var4.ALL_GUILDS;
    var11['type'] = var12;
    var5['config'] = var11;
    var11 = new Array(3);
    var11[0] = var5;
    var12 = {'id': 2, 'label': 'Enables searching against members of the selected guild by default'};
    var5 = 2;
    var13 = {};
    var13['enabled'] = var14;
    var15 = var4.SELECTED_GUILD;
    var13['type'] = var15;
    var12['config'] = var13;
    var11[1] = var12;
    var12 = {'id': 3, 'label': 'Enables searching against guilds with the highest frecency by default'};
    var13 = {};
    var13['enabled'] = var14;
    var14 = var4.FRECENCY_GUILDS;
    var13['type'] = var14;
    var12['config'] = var13;
    var11[2] = var12;
    var8['treatments'] = var11;
    var8 = var9.bind(var10)(var8);
    var _closure1_slot2 = var8;
    var5 = var7[var5];
    var7 = var6.bind(var1)(var5);
    var6 = var7.fileFinishedImporting;
    var5 = 'modules/search/experiments/SearchQuickSwitcherGuildMembersExperiment.tsx';
    var5 = var6.bind(var7)(var5);
    var3['SearchQuickSwitcherGuildMembersTreatment'] = var4;
    var2 = function getIsSearchQuickSwitcherGuildMembersExperimentEnabled(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var2 = arg1;
            var1 = var2.location;
            var6 = var2.autoTrackExposure;
            var5 = undefined;
            if(!(var6 === var5)) { _fun0001_ip = 22; continue _fun0001 }
 20:
            var6 = true;
 22:
            var4 = _closure1_slot0;
            var7 = _closure1_slot1;
            var3 = 1;
            var3 = var7[var3];
            var5 = var4.bind(var5)(var3);
            var4 = var5.getIsInSearchImprovementsHoldout;
            var3 = {};
            var3['location'] = var1;
            var3['autoTrackExposure'] = var6;
            var5 = var4.bind(var5)(var3);
            var4 = _closure1_slot2;
            var3 = var4.getCurrentConfig;
            var2 = {};
            var2['location'] = var1;
            var1 = {};
            var1['autoTrackExposure'] = var6;
            var1['disable'] = var5;
            var2 = var3.bind(var4)(var2, var1);
            var1 = {};
            var3 = var2.enabled;
            var1['enabled'] = var3;
            var2 = var2.type;
            var1['type'] = var2;
            return var1;
        }
    };
    var3['getIsSearchQuickSwitcherGuildMembersExperimentEnabled'] = var2;
    return var1;
})();