// app/modules/shared_space_warnings/SharedSpacesWarningStore.tsx
export default (function(argFoo, argBar, _, __, ___, argFred, argPlugh) {
    oscar = argBar;
    zulu = argFred;
    golf = argPlugh;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = golf[entity];
    entity = undefined;
    options = oscar.bind(entity)(tango);
    report = options.create;
    tango = 1;
    verify = golf[tango];
    yankee = oscar.bind(entity)(verify);
    offset = yankee.persist;
    verify = {};
    romeo = 'shared-spaces-warning-storage';
    verify['name'] = romeo;
    tango = golf[tango];
    foxtrot = oscar.bind(entity)(tango);
    romeo = foxtrot.createJSONStorage;
    tango = function() {
        entity = global;
        entity = entity.localStorage;
        return entity;
    };
    tango = romeo.bind(foxtrot)(tango);
    verify['storage'] = tango;
    tango = function() {
        entity = {};
        mike = {};
        entity['channelDismissTimestamps'] = mike;
        mike = false;
        entity['queuedWarning'] = mike;
        return entity;
    };
    tango = offset.bind(yankee)(tango, verify);
    tango = report.bind(options)(tango);
    var _closure1_slot0 = tango;
    report = 2;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/shared_space_warnings/SharedSpacesWarningStore.tsx';
    report = oscar.bind(golf)(report);
    zulu['useSharedSpacesWarningStore'] = tango;
    tango = function(argFoo) { // Original name: getDismissTimestamp
        mike = _closure1_slot0;
        entity = mike.getState;
        entity = entity.bind(mike)();
        mike = entity.channelDismissTimestamps;
        entity = argFoo;
        entity = mike[entity];
        return entity;
    };
    zulu['getDismissTimestamp'] = tango;
    tango = function() { // Original name: isBlockedWarningQueued
        mike = _closure1_slot0;
        entity = mike.getState;
        entity = entity.bind(mike)();
        entity = entity.queuedWarning;
        return entity;
    };
    zulu['isBlockedWarningQueued'] = tango;
    tango = function() { // Original name: queueBlockWarning
        zulu = _closure1_slot0;
        mike = zulu.setState;
        entity = {};
        tango = true;
        entity['queuedWarning'] = tango;
        entity = mike.bind(zulu)(entity);
        entity = undefined;
        return entity;
    };
    zulu['queueBlockWarning'] = tango;
    tango = function() { // Original name: dequeueBlockWarning
        zulu = _closure1_slot0;
        mike = zulu.setState;
        entity = {};
        tango = false;
        entity['queuedWarning'] = tango;
        entity = mike.bind(zulu)(entity);
        entity = undefined;
        return entity;
    };
    zulu['dequeueBlockWarning'] = tango;
    mike = function(argFoo) { // Original name: setDismissalTimeForChannel
        mike = argFoo;
        var _closure2_slot0 = mike;
        zulu = _closure1_slot0;
        mike = zulu.setState;
        entity = function(argFoo) {
            entity = {};
            mike = {};
            zulu = argFoo;
            oscar = zulu.channelDismissTimestamps;
            golf = mike;
            zulu = copyDataProperties(golf, oscar);
            tango = _closure2_slot0;
            zulu = global;
            report = zulu.Date;
            zulu = report.now;
            zulu = zulu.bind(report)();
            mike[tango] = zulu;
            entity['channelDismissTimestamps'] = mike;
            return entity;
        };
        entity = mike.bind(zulu)(entity);
        entity = undefined;
        return entity;
    };
    zulu['setDismissalTimeForChannel'] = mike;
    return entity;
})();