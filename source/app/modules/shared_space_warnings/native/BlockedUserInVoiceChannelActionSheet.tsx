// app/modules/shared_space_warnings/native/BlockedUserInVoiceChannelActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Image;
    var _closure1_slot3 = golf;
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.setDismissalTimeForChannel;
    var _closure1_slot8 = tango;
    tango = 6;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.BlockWarningEngagements;
    var _closure1_slot9 = golf;
    tango = tango.VoiceChannelWarningSurfaces;
    var _closure1_slot10 = tango;
    tango = 7;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot11 = tango;
    foxtrot = 8;
    tango = oscar[foxtrot];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot12 = tango;
    tango = oscar[foxtrot];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot13 = tango;
    tango = oscar[foxtrot];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot14 = tango;
    tango = 9;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 10;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_12;
    verify['paddingTop'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    verify['gap'] = romeo;
    tango['container'] = verify;
    romeo = 'center';
    verify = {'alignSelf': 'center', 'width': 73, 'height': 86};
    tango['headerImage'] = verify;
    verify = {};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_4;
    verify['gap'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['marginBottom'] = backup;
    tango['headerText'] = verify;
    verify = {'textAlign': 'center', 'alignSelf': 'center'};
    tango['centerText'] = verify;
    verify = {};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    verify['paddingVertical'] = backup;
    tango['tableGroup'] = verify;
    verify = {};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingVertical'] = backup;
    verify['gap'] = foxtrot;
    tango['buttonGroup'] = verify;
    verify = {};
    verify['textAlign'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tango['footer'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot15 = tango;
    tango = 27;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/shared_space_warnings/native/BlockedUserInVoiceChannelActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: BlockedUserInVoiceChannelActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            mike = entity.channelId;
            var _closure2_slot0 = mike;
            zulu = entity.blockedUserId;
            var _closure2_slot1 = zulu;
            entity = _closure1_slot15;
            tango = undefined;
            romeo = entity.bind(tango)();
            foxtrot = _closure1_slot0;
            offset = _closure1_slot2;
            entity = 11;
            mike = offset[entity];
            golf = foxtrot.bind(tango)(mike);
            oscar = golf.useStateFromStores;
            mike = _closure1_slot6;
            report = new Array(1);
            report[0] = mike;
            mike = function() {
                zulu = _closure1_slot6;
                mike = zulu.isBlocked;
                entity = _closure2_slot1;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            report = oscar.bind(golf)(report, mike);
            var _closure2_slot2 = report;
            mike = 12;
            mike = offset[mike];
            golf = foxtrot.bind(tango)(mike);
            oscar = golf.useIsStealthRemediationEnabled;
            mike = {};
            options = 'blocked_user_voice_channel_warning';
            mike['location'] = options;
            sizing = oscar.bind(golf)(mike);
            entity = offset[entity];
            golf = foxtrot.bind(tango)(entity);
            oscar = golf.useStateFromStores;
            entity = _closure1_slot5;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                zulu = _closure1_slot5;
                mike = zulu.getChannel;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            config = oscar.bind(golf)(mike, entity);
            mike = _closure1_slot7;
            entity = mike.getUser;
            record = entity.bind(mike)(zulu);
            entity = 13;
            entity = offset[entity];
            zulu = foxtrot.bind(tango)(entity);
            mike = zulu.match;
            entity = {};
            entity['isBlocked'] = report;
            entity['isStealthRemediationEnabled'] = sizing;
            oscar = mike.bind(zulu)(entity);
            zulu = oscar.with;
            report = true;
            mike = {'isBlocked': true, 'isStealthRemediationEnabled': true};
            entity = function() {
                tango = _closure1_slot13;
                zulu = _closure1_slot12;
                mike = {};
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                oscar = 14;
                report = offset[oscar];
                entity = undefined;
                report = verify.bind(entity)(report);
                options = report.intl;
                golf = options.string;
                report = offset[oscar];
                report = verify.bind(entity)(report);
                report = report.t;
                report = report.cpgfFh;
                golf = golf.bind(options)(report);
                report = new Array(3);
                report[0] = golf;
                golf = '\n';
                report[1] = golf;
                golf = offset[oscar];
                golf = verify.bind(entity)(golf);
                options = golf.intl;
                golf = options.string;
                oscar = offset[oscar];
                oscar = verify.bind(entity)(oscar);
                oscar = oscar.t;
                oscar = oscar.UKQ4Cg;
                oscar = golf.bind(options)(oscar);
                report[2] = oscar;
                mike['children'] = report;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            oscar = zulu.bind(oscar)(mike, entity);
            zulu = oscar.with;
            mike = {'isBlocked': false, 'isStealthRemediationEnabled': true};
            entity = function() {
                tango = _closure1_slot13;
                zulu = _closure1_slot12;
                mike = {};
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                oscar = 14;
                report = offset[oscar];
                entity = undefined;
                report = verify.bind(entity)(report);
                options = report.intl;
                golf = options.string;
                report = offset[oscar];
                report = verify.bind(entity)(report);
                report = report.t;
                report = report.xj3j4+;
                golf = golf.bind(options)(report);
                report = new Array(3);
                report[0] = golf;
                golf = '\n';
                report[1] = golf;
                golf = offset[oscar];
                golf = verify.bind(entity)(golf);
                options = golf.intl;
                golf = options.string;
                oscar = offset[oscar];
                oscar = verify.bind(entity)(oscar);
                oscar = oscar.t;
                oscar = oscar.wWueRU;
                oscar = golf.bind(options)(oscar);
                report[2] = oscar;
                mike['children'] = report;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            zulu = zulu.bind(oscar)(mike, entity);
            mike = zulu.otherwise;
            entity = function() {
                report = _closure1_slot0;
                oscar = _closure1_slot2;
                entity = 14;
                mike = oscar[entity];
                tango = undefined;
                mike = report.bind(tango)(mike);
                zulu = mike.intl;
                mike = zulu.string;
                entity = oscar[entity];
                entity = report.bind(tango)(entity);
                entity = entity.t;
                entity = entity.K8YIgY;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            result = mike.bind(zulu)(entity);
            zulu = _closure1_slot14;
            entity = 15;
            entity = offset[entity];
            entity = foxtrot.bind(tango)(entity);
            mike = entity.ActionSheet;
            entity = {};
            entity['startExpanded'] = report;
            golf = _closure1_slot13;
            oscar = _closure1_slot4;
            report = {};
            options = romeo.container;
            report['style'] = options;
            verify = _closure1_slot3;
            options = {};
            backup = _closure1_slot1;
            yankee = 16;
            yankee = offset[yankee];
            yankee = backup.bind(tango)(yankee);
            options['source'] = yankee;
            yankee = romeo.headerImage;
            options['style'] = yankee;
            verify = zulu.bind(tango)(verify, options);
            options = new Array(4);
            options[0] = verify;
            verify = {};
            yankee = romeo.headerText;
            verify['style'] = yankee;
            yankee = 17;
            offset = offset[yankee];
            offset = foxtrot.bind(tango)(offset);
            foxtrot = offset.Text;
            offset = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            backup = romeo.centerText;
            offset['style'] = backup;
            if(sizing) { _fun00002_ip = 593; continue _fun00001 }
 450:
            output = _closure1_slot13;
            kilo = _closure1_slot12;
            backup = {};
            context = _closure1_slot0;
            papa = _closure1_slot2;
            control = 14;
            source = papa[control];
            source = context.bind(tango)(source);
            sequence = source.intl;
            vacuum = sequence.string;
            source = papa[control];
            source = context.bind(tango)(source);
            source = source.t;
            source = source.LGnmpa;
            vacuum = vacuum.bind(sequence)(source);
            source = new Array(3);
            source[0] = vacuum;
            vacuum = '\n';
            source[1] = vacuum;
            vacuum = papa[control];
            vacuum = context.bind(tango)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.string;
            control = papa[control];
            control = context.bind(tango)(control);
            control = control.t;
            control = control.1/gpFh;
            control = vacuum.bind(sequence)(control);
            source[2] = control;
            backup['children'] = source;
            backup = output.bind(tango)(kilo, backup);
            _fun00002_ip = 648; continue _fun00001;
 593:
            control = _closure1_slot0;
            vacuum = _closure1_slot2;
            kilo = 14;
            output = vacuum[kilo];
            output = control.bind(tango)(output);
            source = output.intl;
            output = source.string;
            kilo = vacuum[kilo];
            kilo = control.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.1/gpFh;
            backup = output.bind(source)(kilo);
 648:
            offset['children'] = backup;
            foxtrot = zulu.bind(tango)(foxtrot, offset);
            offset = new Array(2);
            offset[0] = foxtrot;
            output = _closure1_slot14;
            kilo = _closure1_slot0;
            foxtrot = _closure1_slot2;
            yankee = foxtrot[yankee];
            yankee = kilo.bind(tango)(yankee);
            backup = yankee.Text;
            yankee = {};
            source = 'text-md/medium';
            yankee['variant'] = source;
            source = romeo.centerText;
            yankee['style'] = source;
            yankee['children'] = result;
            yankee = output.bind(tango)(backup, yankee);
            offset[1] = yankee;
            verify['children'] = offset;
            verify = golf.bind(tango)(oscar, verify);
            options[1] = verify;
            yankee = _closure1_slot13;
            verify = 18;
            verify = foxtrot[verify];
            verify = kilo.bind(tango)(verify);
            offset = verify.TableRowGroup;
            verify = {};
            backup = 19;
            foxtrot = foxtrot[backup];
            foxtrot = kilo.bind(tango)(foxtrot);
            kilo = foxtrot.TableRow;
            foxtrot = {};
            if(!sizing) { _fun00002_ip = 793; continue _fun00001 }
 787:
            sequence = null;
            if(!(sequence == record)) { _fun00002_ip = 833; continue _fun00001 }
 793:
            control = _closure1_slot14;
            source = _closure1_slot0;
            vacuum = _closure1_slot2;
            result = 21;
            result = vacuum[result];
            result = source.bind(tango)(result);
            source = result.UserIcon;
            result = {};
            result = control.bind(tango)(source, result);
            _fun00002_ip = 916; continue _fun00001;
 833:
            vacuum = _closure1_slot14;
            control = _closure1_slot1;
            target = _closure1_slot2;
            context = 20;
            source = target[context];
            control = control.bind(tango)(source);
            source = {};
            papa = _closure1_slot0;
            context = target[context];
            context = papa.bind(tango)(context);
            context = context.AvatarSizes;
            context = context.SMALL;
            source['size'] = context;
            source['user'] = record;
            context = sequence == config;
            sequence = undefined;
            if(context) { _fun00002_ip = 906; continue _fun00001 }
 901:
            sequence = config.guild_id;
 906:
            source['guildId'] = sequence;
            result = vacuum.bind(tango)(control, source);
 916:
            foxtrot['icon'] = result;
            control = _closure1_slot0;
            result = _closure1_slot2;
            source = 14;
            vacuum = result[source];
            vacuum = control.bind(tango)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.formatToPlainString;
            result = result[source];
            result = control.bind(tango)(result);
            result = result.t;
            control = result.w0YvUl;
            result = {};
            config = null;
            context = config == record;
            config = undefined;
            if(context) { _fun00002_ip = 990; continue _fun00001 }
 985:
            config = record.username;
 990:
            result['userName'] = config;
            result = vacuum.bind(sequence)(control, result);
            foxtrot['label'] = result;
            kilo = output.bind(tango)(kilo, foxtrot);
            foxtrot = new Array(2);
            foxtrot[0] = kilo;
            kilo = _closure1_slot14;
            result = _closure1_slot0;
            output = _closure1_slot2;
            backup = output[backup];
            backup = result.bind(tango)(backup);
            control = backup.TableRow;
            backup = {};
            vacuum = 22;
            vacuum = output[vacuum];
            vacuum = result.bind(tango)(vacuum);
            sequence = vacuum.MicrophoneIcon;
            vacuum = {};
            vacuum = kilo.bind(tango)(sequence, vacuum);
            backup['icon'] = vacuum;
            vacuum = output[source];
            vacuum = result.bind(tango)(vacuum);
            config = vacuum.intl;
            sequence = config.string;
            vacuum = output[source];
            vacuum = result.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.+4O9nZ;
            vacuum = sequence.bind(config)(vacuum);
            backup['label'] = vacuum;
            backup = kilo.bind(tango)(control, backup);
            foxtrot[1] = backup;
            verify['children'] = foxtrot;
            verify = yankee.bind(tango)(offset, verify);
            options[2] = verify;
            yankee = _closure1_slot13;
            offset = _closure1_slot4;
            verify = {};
            romeo = romeo.buttonGroup;
            verify['style'] = romeo;
            foxtrot = 23;
            romeo = output[foxtrot];
            romeo = result.bind(tango)(romeo);
            backup = romeo.Button;
            romeo = {};
            control = 'lg';
            romeo['size'] = control;
            control = function() { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zulu = _closure1_slot1;
                    tango = _closure1_slot2;
                    entity = 24;
                    mike = tango[entity];
                    entity = undefined;
                    report = zulu.bind(entity)(mike);
                    mike = report.hideActionSheet;
                    mike = mike.bind(report)();
                    mike = 25;
                    mike = tango[mike];
                    report = zulu.bind(entity)(mike);
                    mike = report.disconnect;
                    mike = mike.bind(report)();
                    mike = 26;
                    mike = tango[mike];
                    report = zulu.bind(entity)(mike);
                    tango = report.track;
                    mike = _closure1_slot11;
                    zulu = mike.VOICE_CHANNEL_BLOCKED_USER_WARNING_ENGAGEMENT;
                    mike = {};
                    golf = _closure1_slot9;
                    golf = golf.CLICK_TO_LEAVE;
                    mike['action'] = golf;
                    options = _closure2_slot0;
                    mike['channel_id'] = options;
                    options = _closure2_slot2;
                    if(options) { _fun00004_ip = 124; continue _fun00003 }
 118:
                    options = new Array(0);
                    _fun00004_ip = 139; continue _fun00003;
 124:
                    offset = _closure2_slot1;
                    verify = new Array(1);
                    verify[0] = offset;
                    options = verify;
 139:
                    mike['blocked_user_ids'] = options;
                    options = _closure2_slot2;
                    if(options) { _fun00004_ip = 165; continue _fun00003 }
 151:
                    options = _closure2_slot1;
                    golf = new Array(1);
                    golf[0] = options;
                    _fun00004_ip = 169; continue _fun00003;
 165:
                    golf = new Array(0);
 169:
                    mike['ignored_user_ids'] = golf;
                    oscar = _closure1_slot10;
                    oscar = oscar.POST_JOIN_SHEET;
                    mike['warning_surface'] = oscar;
                    mike = tango.bind(report)(zulu, mike);
                    return entity;
                }
            };
            romeo['onPress'] = control;
            control = output[source];
            control = result.bind(tango)(control);
            sequence = control.intl;
            vacuum = sequence.string;
            control = output[source];
            control = result.bind(tango)(control);
            control = control.t;
            control = control.Y56/oK;
            control = vacuum.bind(sequence)(control);
            romeo['text'] = control;
            backup = kilo.bind(tango)(backup, romeo);
            romeo = new Array(2);
            romeo[0] = backup;
            foxtrot = output[foxtrot];
            foxtrot = result.bind(tango)(foxtrot);
            backup = foxtrot.Button;
            foxtrot = {'size': 'lg', 'variant': 'secondary'};
            update = function() { // Original name: onPress
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zulu = _closure1_slot1;
                    tango = _closure1_slot2;
                    entity = 24;
                    mike = tango[entity];
                    entity = undefined;
                    report = zulu.bind(entity)(mike);
                    mike = report.hideActionSheet;
                    mike = mike.bind(report)();
                    mike = _closure1_slot8;
                    options = _closure2_slot0;
                    mike = mike.bind(entity)(options);
                    mike = 26;
                    mike = tango[mike];
                    report = zulu.bind(entity)(mike);
                    tango = report.track;
                    mike = _closure1_slot11;
                    zulu = mike.VOICE_CHANNEL_BLOCKED_USER_WARNING_ENGAGEMENT;
                    mike = {};
                    verify = _closure1_slot9;
                    verify = verify.CLICK_TO_STAY;
                    mike['action'] = verify;
                    mike['channel_id'] = options;
                    options = _closure2_slot2;
                    if(options) { _fun00006_ip = 111; continue _fun00005 }
 105:
                    options = new Array(0);
                    _fun00006_ip = 126; continue _fun00005;
 111:
                    offset = _closure2_slot1;
                    verify = new Array(1);
                    verify[0] = offset;
                    options = verify;
 126:
                    mike['blocked_user_ids'] = options;
                    options = _closure2_slot2;
                    if(options) { _fun00006_ip = 152; continue _fun00005 }
 138:
                    options = _closure2_slot1;
                    golf = new Array(1);
                    golf[0] = options;
                    _fun00006_ip = 156; continue _fun00005;
 152:
                    golf = new Array(0);
 156:
                    mike['ignored_user_ids'] = golf;
                    oscar = _closure1_slot10;
                    oscar = oscar.POST_JOIN_SHEET;
                    mike['warning_surface'] = oscar;
                    mike = tango.bind(report)(zulu, mike);
                    return entity;
                }
            };
            foxtrot['onPress'] = update;
            output = output[source];
            output = result.bind(tango)(output);
            result = output.intl;
            output = result.string;
            update = _closure1_slot0;
            echo = _closure1_slot2;
            echo = echo[source];
            echo = update.bind(tango)(echo);
            echo = echo.t;
            if(sizing) { _fun00002_ip = 1369; continue _fun00001 }
 1359:
            sizing = echo.Z+/hfX;
            _fun00002_ip = 1377; continue _fun00001;
 1369:
            sizing = echo.bCcJSU;
 1377:
            sizing = output.bind(result)(sizing);
            foxtrot['text'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[1] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[3] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();