// app/modules/shared_space_warnings/native/BlockedUserInVoiceChannelActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.setDismissalTimeForChannel;
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.BlockWarningEngagements;
    var _closure1_slot9 = golfie;
    tangon = tangon.VoiceChannelWarningSurfaces;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot11 = tangon;
    foxtra = 8;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot12 = tangon;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot14 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 10;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['paddingTop'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    verify['gap'] = romeon;
    tangon['container'] = verify;
    romeon = 'center';
    verify = {'alignSelf': 'center', 'width': 73, 'height': 86};
    tangon['headerImage'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_4;
    verify['gap'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['marginBottom'] = backup;
    tangon['headerText'] = verify;
    verify = {'textAlign': 'center', 'alignSelf': 'center'};
    tangon['centerText'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    verify['paddingVertical'] = backup;
    tangon['tableGroup'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingVertical'] = backup;
    verify['gap'] = foxtra;
    tangon['buttonGroup'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tangon['footer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot15 = tangon;
    tangon = 27;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/shared_space_warnings/native/BlockedUserInVoiceChannelActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: BlockedUserInVoiceChannelActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.channelId;
            var _closure2_slot0 = michal;
            zuuluu = entity.blockedUserId;
            var _closure2_slot1 = zuuluu;
            entity = _closure1_slot15;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            foxtra = _closure1_slot0;
            offset = _closure1_slot2;
            entity = 11;
            michal = offset[entity];
            golfie = foxtra.bind(tangon)(michal);
            oscard = golfie.useStateFromStores;
            michal = _closure1_slot6;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.isBlocked;
                entity = _closure2_slot1;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            report = oscard.bind(golfie)(report, michal);
            var _closure2_slot2 = report;
            michal = 12;
            michal = offset[michal];
            golfie = foxtra.bind(tangon)(michal);
            oscard = golfie.useIsStealthRemediationEnabled;
            michal = {};
            option = 'blocked_user_voice_channel_warning';
            michal['location'] = option;
            sizing = oscard.bind(golfie)(michal);
            entity = offset[entity];
            golfie = foxtra.bind(tangon)(entity);
            oscard = golfie.useStateFromStores;
            entity = _closure1_slot5;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.getChannel;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            config = oscard.bind(golfie)(michal, entity);
            michal = _closure1_slot7;
            entity = michal.getUser;
            record = entity.bind(michal)(zuuluu);
            entity = 13;
            entity = offset[entity];
            zuuluu = foxtra.bind(tangon)(entity);
            michal = zuuluu.match;
            entity = {};
            entity['isBlocked'] = report;
            entity['isStealthRemediationEnabled'] = sizing;
            oscard = michal.bind(zuuluu)(entity);
            zuuluu = oscard.with;
            report = true;
            michal = {'isBlocked': true, 'isStealthRemediationEnabled': true};
            entity = function() {
                tangon = _closure1_slot13;
                zuuluu = _closure1_slot12;
                michal = {};
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                oscard = 14;
                report = offset[oscard];
                entity = undefined;
                report = verify.bind(entity)(report);
                option = report.intl;
                golfie = option.string;
                report = offset[oscard];
                report = verify.bind(entity)(report);
                report = report.t;
                report = report.cpgfFh;
                golfie = golfie.bind(option)(report);
                report = new Array(3);
                report[0] = golfie;
                golfie = '\n';
                report[1] = golfie;
                golfie = offset[oscard];
                golfie = verify.bind(entity)(golfie);
                option = golfie.intl;
                golfie = option.string;
                oscard = offset[oscard];
                oscard = verify.bind(entity)(oscard);
                oscard = oscard.t;
                oscard = oscard.UKQ4Cg;
                oscard = golfie.bind(option)(oscard);
                report[2] = oscard;
                michal['children'] = report;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            oscard = zuuluu.bind(oscard)(michal, entity);
            zuuluu = oscard.with;
            michal = {'isBlocked': false, 'isStealthRemediationEnabled': true};
            entity = function() {
                tangon = _closure1_slot13;
                zuuluu = _closure1_slot12;
                michal = {};
                verify = _closure1_slot0;
                offset = _closure1_slot2;
                oscard = 14;
                report = offset[oscard];
                entity = undefined;
                report = verify.bind(entity)(report);
                option = report.intl;
                golfie = option.string;
                report = offset[oscard];
                report = verify.bind(entity)(report);
                report = report.t;
                report = report.xj3j4+;
                golfie = golfie.bind(option)(report);
                report = new Array(3);
                report[0] = golfie;
                golfie = '\n';
                report[1] = golfie;
                golfie = offset[oscard];
                golfie = verify.bind(entity)(golfie);
                option = golfie.intl;
                golfie = option.string;
                oscard = offset[oscard];
                oscard = verify.bind(entity)(oscard);
                oscard = oscard.t;
                oscard = oscard.wWueRU;
                oscard = golfie.bind(option)(oscard);
                report[2] = oscard;
                michal['children'] = report;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            zuuluu = zuuluu.bind(oscard)(michal, entity);
            michal = zuuluu.otherwise;
            entity = function() {
                report = _closure1_slot0;
                oscard = _closure1_slot2;
                entity = 14;
                michal = oscard[entity];
                tangon = undefined;
                michal = report.bind(tangon)(michal);
                zuuluu = michal.intl;
                michal = zuuluu.string;
                entity = oscard[entity];
                entity = report.bind(tangon)(entity);
                entity = entity.t;
                entity = entity.K8YIgY;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            result = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot14;
            entity = 15;
            entity = offset[entity];
            entity = foxtra.bind(tangon)(entity);
            michal = entity.ActionSheet;
            entity = {};
            entity['startExpanded'] = report;
            golfie = _closure1_slot13;
            oscard = _closure1_slot4;
            report = {};
            option = romeon.container;
            report['style'] = option;
            verify = _closure1_slot3;
            option = {};
            backup = _closure1_slot1;
            yankee = 16;
            yankee = offset[yankee];
            yankee = backup.bind(tangon)(yankee);
            option['source'] = yankee;
            yankee = romeon.headerImage;
            option['style'] = yankee;
            verify = zuuluu.bind(tangon)(verify, option);
            option = new Array(4);
            option[0] = verify;
            verify = {};
            yankee = romeon.headerText;
            verify['style'] = yankee;
            yankee = 17;
            offset = offset[yankee];
            offset = foxtra.bind(tangon)(offset);
            foxtra = offset.Text;
            offset = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            backup = romeon.centerText;
            offset['style'] = backup;
            if(sizing) { _fun00002_ip = 593; continue _fun00001 }
 450:
            output = _closure1_slot13;
            kiloes = _closure1_slot12;
            backup = {};
            cntext = _closure1_slot0;
            papara = _closure1_slot2;
            ctrled = 14;
            source = papara[ctrled];
            source = cntext.bind(tangon)(source);
            sequen = source.intl;
            vacuum = sequen.string;
            source = papara[ctrled];
            source = cntext.bind(tangon)(source);
            source = source.t;
            source = source.LGnmpa;
            vacuum = vacuum.bind(sequen)(source);
            source = new Array(3);
            source[0] = vacuum;
            vacuum = '\n';
            source[1] = vacuum;
            vacuum = papara[ctrled];
            vacuum = cntext.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = papara[ctrled];
            ctrled = cntext.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.1/gpFh;
            ctrled = vacuum.bind(sequen)(ctrled);
            source[2] = ctrled;
            backup['children'] = source;
            backup = output.bind(tangon)(kiloes, backup);
            _fun00002_ip = 648; continue _fun00001;
 593:
            ctrled = _closure1_slot0;
            vacuum = _closure1_slot2;
            kiloes = 14;
            output = vacuum[kiloes];
            output = ctrled.bind(tangon)(output);
            source = output.intl;
            output = source.string;
            kiloes = vacuum[kiloes];
            kiloes = ctrled.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.1/gpFh;
            backup = output.bind(source)(kiloes);
 648:
            offset['children'] = backup;
            foxtra = zuuluu.bind(tangon)(foxtra, offset);
            offset = new Array(2);
            offset[0] = foxtra;
            output = _closure1_slot14;
            kiloes = _closure1_slot0;
            foxtra = _closure1_slot2;
            yankee = foxtra[yankee];
            yankee = kiloes.bind(tangon)(yankee);
            backup = yankee.Text;
            yankee = {};
            source = 'text-md/medium';
            yankee['variant'] = source;
            source = romeon.centerText;
            yankee['style'] = source;
            yankee['children'] = result;
            yankee = output.bind(tangon)(backup, yankee);
            offset[1] = yankee;
            verify['children'] = offset;
            verify = golfie.bind(tangon)(oscard, verify);
            option[1] = verify;
            yankee = _closure1_slot13;
            verify = 18;
            verify = foxtra[verify];
            verify = kiloes.bind(tangon)(verify);
            offset = verify.TableRowGroup;
            verify = {};
            backup = 19;
            foxtra = foxtra[backup];
            foxtra = kiloes.bind(tangon)(foxtra);
            kiloes = foxtra.TableRow;
            foxtra = {};
            if(!sizing) { _fun00002_ip = 793; continue _fun00001 }
 787:
            sequen = null;
            if(!(sequen == record)) { _fun00002_ip = 833; continue _fun00001 }
 793:
            ctrled = _closure1_slot14;
            source = _closure1_slot0;
            vacuum = _closure1_slot2;
            result = 21;
            result = vacuum[result];
            result = source.bind(tangon)(result);
            source = result.UserIcon;
            result = {};
            result = ctrled.bind(tangon)(source, result);
            _fun00002_ip = 916; continue _fun00001;
 833:
            vacuum = _closure1_slot14;
            ctrled = _closure1_slot1;
            target = _closure1_slot2;
            cntext = 20;
            source = target[cntext];
            ctrled = ctrled.bind(tangon)(source);
            source = {};
            papara = _closure1_slot0;
            cntext = target[cntext];
            cntext = papara.bind(tangon)(cntext);
            cntext = cntext.AvatarSizes;
            cntext = cntext.SMALL;
            source['size'] = cntext;
            source['user'] = record;
            cntext = sequen == config;
            sequen = undefined;
            if(cntext) { _fun00002_ip = 906; continue _fun00001 }
 901:
            sequen = config.guild_id;
 906:
            source['guildId'] = sequen;
            result = vacuum.bind(tangon)(ctrled, source);
 916:
            foxtra['icon'] = result;
            ctrled = _closure1_slot0;
            result = _closure1_slot2;
            source = 14;
            vacuum = result[source];
            vacuum = ctrled.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.formatToPlainString;
            result = result[source];
            result = ctrled.bind(tangon)(result);
            result = result.t;
            ctrled = result.w0YvUl;
            result = {};
            config = null;
            cntext = config == record;
            config = undefined;
            if(cntext) { _fun00002_ip = 990; continue _fun00001 }
 985:
            config = record.username;
 990:
            result['userName'] = config;
            result = vacuum.bind(sequen)(ctrled, result);
            foxtra['label'] = result;
            kiloes = output.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            kiloes = _closure1_slot14;
            result = _closure1_slot0;
            output = _closure1_slot2;
            backup = output[backup];
            backup = result.bind(tangon)(backup);
            ctrled = backup.TableRow;
            backup = {};
            vacuum = 22;
            vacuum = output[vacuum];
            vacuum = result.bind(tangon)(vacuum);
            sequen = vacuum.MicrophoneIcon;
            vacuum = {};
            vacuum = kiloes.bind(tangon)(sequen, vacuum);
            backup['icon'] = vacuum;
            vacuum = output[source];
            vacuum = result.bind(tangon)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = output[source];
            vacuum = result.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.+4O9nZ;
            vacuum = sequen.bind(config)(vacuum);
            backup['label'] = vacuum;
            backup = kiloes.bind(tangon)(ctrled, backup);
            foxtra[1] = backup;
            verify['children'] = foxtra;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            yankee = _closure1_slot13;
            offset = _closure1_slot4;
            verify = {};
            romeon = romeon.buttonGroup;
            verify['style'] = romeon;
            foxtra = 23;
            romeon = output[foxtra];
            romeon = result.bind(tangon)(romeon);
            backup = romeon.Button;
            romeon = {};
            ctrled = 'lg';
            romeon['size'] = ctrled;
            ctrled = function() { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    entity = 24;
                    michal = tangon[entity];
                    entity = undefined;
                    report = zuuluu.bind(entity)(michal);
                    michal = report.hideActionSheet;
                    michal = michal.bind(report)();
                    michal = 25;
                    michal = tangon[michal];
                    report = zuuluu.bind(entity)(michal);
                    michal = report.disconnect;
                    michal = michal.bind(report)();
                    michal = 26;
                    michal = tangon[michal];
                    report = zuuluu.bind(entity)(michal);
                    tangon = report.track;
                    michal = _closure1_slot11;
                    zuuluu = michal.VOICE_CHANNEL_BLOCKED_USER_WARNING_ENGAGEMENT;
                    michal = {};
                    golfie = _closure1_slot9;
                    golfie = golfie.CLICK_TO_LEAVE;
                    michal['action'] = golfie;
                    option = _closure2_slot0;
                    michal['channel_id'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00004_ip = 124; continue _fun00003 }
 118:
                    option = new Array(0);
                    _fun00004_ip = 139; continue _fun00003;
 124:
                    offset = _closure2_slot1;
                    verify = new Array(1);
                    verify[0] = offset;
                    option = verify;
 139:
                    michal['blocked_user_ids'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00004_ip = 165; continue _fun00003 }
 151:
                    option = _closure2_slot1;
                    golfie = new Array(1);
                    golfie[0] = option;
                    _fun00004_ip = 169; continue _fun00003;
 165:
                    golfie = new Array(0);
 169:
                    michal['ignored_user_ids'] = golfie;
                    oscard = _closure1_slot10;
                    oscard = oscard.POST_JOIN_SHEET;
                    michal['warning_surface'] = oscard;
                    michal = tangon.bind(report)(zuuluu, michal);
                    return entity;
                }
            };
            romeon['onPress'] = ctrled;
            ctrled = output[source];
            ctrled = result.bind(tangon)(ctrled);
            sequen = ctrled.intl;
            vacuum = sequen.string;
            ctrled = output[source];
            ctrled = result.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.Y56/oK;
            ctrled = vacuum.bind(sequen)(ctrled);
            romeon['text'] = ctrled;
            backup = kiloes.bind(tangon)(backup, romeon);
            romeon = new Array(2);
            romeon[0] = backup;
            foxtra = output[foxtra];
            foxtra = result.bind(tangon)(foxtra);
            backup = foxtra.Button;
            foxtra = {'size': 'lg', 'variant': 'secondary'};
            update = function() { // Original name: onPress
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    entity = 24;
                    michal = tangon[entity];
                    entity = undefined;
                    report = zuuluu.bind(entity)(michal);
                    michal = report.hideActionSheet;
                    michal = michal.bind(report)();
                    michal = _closure1_slot8;
                    option = _closure2_slot0;
                    michal = michal.bind(entity)(option);
                    michal = 26;
                    michal = tangon[michal];
                    report = zuuluu.bind(entity)(michal);
                    tangon = report.track;
                    michal = _closure1_slot11;
                    zuuluu = michal.VOICE_CHANNEL_BLOCKED_USER_WARNING_ENGAGEMENT;
                    michal = {};
                    verify = _closure1_slot9;
                    verify = verify.CLICK_TO_STAY;
                    michal['action'] = verify;
                    michal['channel_id'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00006_ip = 111; continue _fun00005 }
 105:
                    option = new Array(0);
                    _fun00006_ip = 126; continue _fun00005;
 111:
                    offset = _closure2_slot1;
                    verify = new Array(1);
                    verify[0] = offset;
                    option = verify;
 126:
                    michal['blocked_user_ids'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00006_ip = 152; continue _fun00005 }
 138:
                    option = _closure2_slot1;
                    golfie = new Array(1);
                    golfie[0] = option;
                    _fun00006_ip = 156; continue _fun00005;
 152:
                    golfie = new Array(0);
 156:
                    michal['ignored_user_ids'] = golfie;
                    oscard = _closure1_slot10;
                    oscard = oscard.POST_JOIN_SHEET;
                    michal['warning_surface'] = oscard;
                    michal = tangon.bind(report)(zuuluu, michal);
                    return entity;
                }
            };
            foxtra['onPress'] = update;
            output = output[source];
            output = result.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            update = _closure1_slot0;
            echoed = _closure1_slot2;
            echoed = echoed[source];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.t;
            if(sizing) { _fun00002_ip = 1369; continue _fun00001 }
 1359:
            sizing = echoed.Z+/hfX;
            _fun00002_ip = 1377; continue _fun00001;
 1369:
            sizing = echoed.bCcJSU;
 1377:
            sizing = output.bind(result)(sizing);
            foxtra['text'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[1] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[3] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();