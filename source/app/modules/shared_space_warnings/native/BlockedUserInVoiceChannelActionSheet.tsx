// app/modules/shared_space_warnings/native/BlockedUserInVoiceChannelActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.setDismissalTimeForChannel;
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.BlockWarningEngagements;
    var _closure1_slot9 = golfie;
    tangon = tangon.VoiceChannelWarningSurfaces;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot11 = tangon;
    foxtra = 8;
    tangon = oscard[foxtra];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Fragment;
    var _closure1_slot12 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot13 = golfie;
    tangon = tangon.jsx;
    var _closure1_slot14 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 10;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['paddingTop'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    verify['gap'] = romeon;
    tangon['container'] = verify;
    romeon = 'center';
    verify = {'alignSelf': 'center', 'width': 73, 'height': 86};
    tangon['headerImage'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_4;
    verify['gap'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['marginBottom'] = backup;
    tangon['headerText'] = verify;
    verify = {'textAlign': 'center', 'alignSelf': 'center'};
    tangon['centerText'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    verify['paddingVertical'] = backup;
    tangon['tableGroup'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    verify['paddingVertical'] = backup;
    verify['gap'] = foxtra;
    tangon['buttonGroup'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tangon['footer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot15 = tangon;
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/shared_space_warnings/native/BlockedUserInVoiceChannelActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: BlockedUserInVoiceChannelActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.channelId;
            var _closure2_slot0 = michal;
            report = entity.blockedUserId;
            var _closure2_slot1 = report;
            entity = _closure1_slot15;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            zuuluu = _closure1_slot0;
            oscard = _closure1_slot2;
            michal = 11;
            entity = oscard[michal];
            offset = zuuluu.bind(tangon)(entity);
            option = offset.useStateFromStores;
            entity = _closure1_slot6;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.isBlocked;
                entity = _closure2_slot1;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            entity = option.bind(offset)(golfie, entity);
            var _closure2_slot2 = entity;
            michal = oscard[michal];
            golfie = zuuluu.bind(tangon)(michal);
            oscard = golfie.useStateFromStores;
            michal = _closure1_slot5;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.getChannel;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            config = oscard.bind(golfie)(zuuluu, michal);
            zuuluu = _closure1_slot7;
            michal = zuuluu.getUser;
            vacuum = michal.bind(zuuluu)(report);
            zuuluu = _closure1_slot13;
            michal = _closure1_slot12;
            report = {};
            yankee = _closure1_slot0;
            golfie = _closure1_slot2;
            update = 12;
            oscard = golfie[update];
            oscard = yankee.bind(tangon)(oscard);
            offset = oscard.intl;
            option = offset.string;
            oscard = golfie[update];
            oscard = yankee.bind(tangon)(oscard);
            oscard = oscard.t;
            if(entity) { _fun00002_ip = 290; continue _fun00001 }
 202:
            entity = oscard.xj3j4+;
            foxtra = option.bind(offset)(entity);
            entity = new Array(3);
            entity[0] = foxtra;
            foxtra = '\n';
            entity[1] = foxtra;
            foxtra = golfie[update];
            foxtra = yankee.bind(tangon)(foxtra);
            kiloes = foxtra.intl;
            backup = kiloes.string;
            foxtra = golfie[update];
            foxtra = yankee.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.wWueRU;
            foxtra = backup.bind(kiloes)(foxtra);
            entity[2] = foxtra;
            report['children'] = entity;
            entity = report;
            _fun00002_ip = 376; continue _fun00001;
 290:
            oscard = oscard.cpgfFh;
            option = option.bind(offset)(oscard);
            oscard = new Array(3);
            oscard[0] = option;
            option = '\n';
            oscard[1] = option;
            option = golfie[update];
            option = yankee.bind(tangon)(option);
            offset = option.intl;
            option = offset.string;
            golfie = golfie[update];
            golfie = yankee.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.UKQ4Cg;
            golfie = option.bind(offset)(golfie);
            oscard[2] = golfie;
            report['children'] = oscard;
            entity = report;
 376:
            result = zuuluu.bind(tangon)(michal, entity);
            zuuluu = _closure1_slot14;
            kiloes = _closure1_slot0;
            foxtra = _closure1_slot2;
            entity = 13;
            entity = foxtra[entity];
            entity = kiloes.bind(tangon)(entity);
            michal = entity.ActionSheet;
            entity = {};
            report = true;
            entity['startExpanded'] = report;
            golfie = _closure1_slot13;
            oscard = _closure1_slot4;
            report = {};
            option = romeon.container;
            report['style'] = option;
            offset = _closure1_slot3;
            option = {};
            backup = _closure1_slot1;
            yankee = 14;
            yankee = foxtra[yankee];
            yankee = backup.bind(tangon)(yankee);
            option['source'] = yankee;
            yankee = romeon.headerImage;
            option['style'] = yankee;
            offset = zuuluu.bind(tangon)(offset, option);
            option = new Array(4);
            option[0] = offset;
            offset = {};
            yankee = romeon.headerText;
            offset['style'] = yankee;
            backup = 15;
            yankee = foxtra[backup];
            yankee = kiloes.bind(tangon)(yankee);
            sizing = yankee.Text;
            yankee = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            echoed = romeon.centerText;
            yankee['style'] = echoed;
            echoed = foxtra[update];
            echoed = kiloes.bind(tangon)(echoed);
            ctrled = echoed.intl;
            source = ctrled.string;
            echoed = foxtra[update];
            echoed = kiloes.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.1/gpFh;
            echoed = source.bind(ctrled)(echoed);
            yankee['children'] = echoed;
            sizing = zuuluu.bind(tangon)(sizing, yankee);
            yankee = new Array(2);
            yankee[0] = sizing;
            backup = foxtra[backup];
            backup = kiloes.bind(tangon)(backup);
            sizing = backup.Text;
            backup = {};
            echoed = 'text-md/medium';
            backup['variant'] = echoed;
            echoed = romeon.centerText;
            backup['style'] = echoed;
            backup['children'] = result;
            backup = zuuluu.bind(tangon)(sizing, backup);
            yankee[1] = backup;
            offset['children'] = yankee;
            offset = golfie.bind(tangon)(oscard, offset);
            option[1] = offset;
            offset = 16;
            offset = foxtra[offset];
            offset = kiloes.bind(tangon)(offset);
            yankee = offset.TableRowGroup;
            offset = {};
            backup = 17;
            foxtra = foxtra[backup];
            foxtra = kiloes.bind(tangon)(foxtra);
            kiloes = foxtra.TableRow;
            foxtra = {};
            ctrled = null;
            if(!(ctrled == vacuum)) { _fun00002_ip = 755; continue _fun00001 }
 715:
            echoed = _closure1_slot14;
            result = _closure1_slot0;
            source = _closure1_slot2;
            sizing = 19;
            sizing = source[sizing];
            sizing = result.bind(tangon)(sizing);
            result = sizing.UserIcon;
            sizing = {};
            sizing = echoed.bind(tangon)(result, sizing);
            _fun00002_ip = 838; continue _fun00001;
 755:
            source = _closure1_slot14;
            echoed = _closure1_slot1;
            cntext = _closure1_slot2;
            sequen = 18;
            result = cntext[sequen];
            echoed = echoed.bind(tangon)(result);
            result = {};
            record = _closure1_slot0;
            sequen = cntext[sequen];
            sequen = record.bind(tangon)(sequen);
            sequen = sequen.AvatarSizes;
            sequen = sequen.SMALL;
            result['size'] = sequen;
            result['user'] = vacuum;
            record = ctrled == config;
            sequen = undefined;
            if(record) { _fun00002_ip = 828; continue _fun00001 }
 823:
            sequen = config.guild_id;
 828:
            result['guildId'] = sequen;
            sizing = source.bind(tangon)(echoed, result);
 838:
            foxtra['icon'] = sizing;
            result = _closure1_slot0;
            sizing = _closure1_slot2;
            echoed = sizing[update];
            echoed = result.bind(tangon)(echoed);
            source = echoed.intl;
            echoed = source.formatToPlainString;
            sizing = sizing[update];
            sizing = result.bind(tangon)(sizing);
            sizing = sizing.t;
            result = sizing.w0YvUl;
            sizing = {};
            sequen = ctrled == vacuum;
            ctrled = undefined;
            if(sequen) { _fun00002_ip = 907; continue _fun00001 }
 902:
            ctrled = vacuum.username;
 907:
            sizing['userName'] = ctrled;
            sizing = echoed.bind(source)(result, sizing);
            foxtra['label'] = sizing;
            kiloes = zuuluu.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            kiloes = _closure1_slot14;
            echoed = _closure1_slot0;
            sizing = _closure1_slot2;
            backup = sizing[backup];
            backup = echoed.bind(tangon)(backup);
            result = backup.TableRow;
            backup = {};
            source = 20;
            source = sizing[source];
            source = echoed.bind(tangon)(source);
            ctrled = source.MicrophoneIcon;
            source = {};
            source = kiloes.bind(tangon)(ctrled, source);
            backup['icon'] = source;
            source = sizing[update];
            source = echoed.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = sizing[update];
            source = echoed.bind(tangon)(source);
            source = source.t;
            source = source.+4O9nZ;
            source = ctrled.bind(vacuum)(source);
            backup['label'] = source;
            backup = kiloes.bind(tangon)(result, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            offset = golfie.bind(tangon)(yankee, offset);
            option[2] = offset;
            yankee = _closure1_slot13;
            offset = _closure1_slot4;
            verify = {};
            romeon = romeon.buttonGroup;
            verify['style'] = romeon;
            foxtra = 21;
            romeon = sizing[foxtra];
            romeon = echoed.bind(tangon)(romeon);
            backup = romeon.Button;
            romeon = {};
            result = 'lg';
            romeon['size'] = result;
            result = function() { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    entity = 22;
                    michal = tangon[entity];
                    entity = undefined;
                    report = zuuluu.bind(entity)(michal);
                    michal = report.hideActionSheet;
                    michal = michal.bind(report)();
                    michal = 23;
                    michal = tangon[michal];
                    report = zuuluu.bind(entity)(michal);
                    michal = report.disconnect;
                    michal = michal.bind(report)();
                    michal = 24;
                    michal = tangon[michal];
                    report = zuuluu.bind(entity)(michal);
                    tangon = report.track;
                    michal = _closure1_slot11;
                    zuuluu = michal.VOICE_CHANNEL_BLOCKED_USER_WARNING_ENGAGEMENT;
                    michal = {};
                    golfie = _closure1_slot9;
                    golfie = golfie.CLICK_TO_LEAVE;
                    michal['action'] = golfie;
                    option = _closure2_slot0;
                    michal['channel_id'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00004_ip = 124; continue _fun00003 }
 118:
                    option = new Array(0);
                    _fun00004_ip = 139; continue _fun00003;
 124:
                    offset = _closure2_slot1;
                    verify = new Array(1);
                    verify[0] = offset;
                    option = verify;
 139:
                    michal['blocked_user_ids'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00004_ip = 165; continue _fun00003 }
 151:
                    option = _closure2_slot1;
                    golfie = new Array(1);
                    golfie[0] = option;
                    _fun00004_ip = 169; continue _fun00003;
 165:
                    golfie = new Array(0);
 169:
                    michal['ignored_user_ids'] = golfie;
                    oscard = _closure1_slot10;
                    oscard = oscard.POST_JOIN_SHEET;
                    michal['warning_surface'] = oscard;
                    michal = tangon.bind(report)(zuuluu, michal);
                    return entity;
                }
            };
            romeon['onPress'] = result;
            result = sizing[update];
            result = echoed.bind(tangon)(result);
            ctrled = result.intl;
            source = ctrled.string;
            result = sizing[update];
            result = echoed.bind(tangon)(result);
            result = result.t;
            result = result.Y56/oK;
            result = source.bind(ctrled)(result);
            romeon['text'] = result;
            backup = kiloes.bind(tangon)(backup, romeon);
            romeon = new Array(2);
            romeon[0] = backup;
            foxtra = sizing[foxtra];
            foxtra = echoed.bind(tangon)(foxtra);
            backup = foxtra.Button;
            foxtra = {'size': 'lg', 'variant': 'secondary'};
            output = function() { // Original name: onPress
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    entity = 22;
                    michal = tangon[entity];
                    entity = undefined;
                    report = zuuluu.bind(entity)(michal);
                    michal = report.hideActionSheet;
                    michal = michal.bind(report)();
                    michal = _closure1_slot8;
                    option = _closure2_slot0;
                    michal = michal.bind(entity)(option);
                    michal = 24;
                    michal = tangon[michal];
                    report = zuuluu.bind(entity)(michal);
                    tangon = report.track;
                    michal = _closure1_slot11;
                    zuuluu = michal.VOICE_CHANNEL_BLOCKED_USER_WARNING_ENGAGEMENT;
                    michal = {};
                    verify = _closure1_slot9;
                    verify = verify.CLICK_TO_STAY;
                    michal['action'] = verify;
                    michal['channel_id'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00006_ip = 111; continue _fun00005 }
 105:
                    option = new Array(0);
                    _fun00006_ip = 126; continue _fun00005;
 111:
                    offset = _closure2_slot1;
                    verify = new Array(1);
                    verify[0] = offset;
                    option = verify;
 126:
                    michal['blocked_user_ids'] = option;
                    option = _closure2_slot2;
                    if(option) { _fun00006_ip = 152; continue _fun00005 }
 138:
                    option = _closure2_slot1;
                    golfie = new Array(1);
                    golfie[0] = option;
                    _fun00006_ip = 156; continue _fun00005;
 152:
                    golfie = new Array(0);
 156:
                    michal['ignored_user_ids'] = golfie;
                    oscard = _closure1_slot10;
                    oscard = oscard.POST_JOIN_SHEET;
                    michal['warning_surface'] = oscard;
                    michal = tangon.bind(report)(zuuluu, michal);
                    return entity;
                }
            };
            foxtra['onPress'] = output;
            output = sizing[update];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = sizing[update];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.bCcJSU;
            sizing = output.bind(result)(sizing);
            foxtra['text'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[1] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[3] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();