// app/modules/voice_panel/native/card/VoicePanelNoVideoParticipantsCard.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Pressable;
    var _closure1_slot4 = tango;
    tango = 2;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot5 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'width': '100%', 'height': '100%', 'alignItems': 'center', 'justifyContent': 'center', 'padding': 16};
    yankee = 4;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.VOICE_VIDEO_VIDEO_TILE_BACKGROUND;
    offset['backgroundColor'] = foxtrot;
    tango['container'] = offset;
    offset = {'marginBottom': 16, 'textAlign': 'center'};
    tango['label'] = offset;
    offset = {'paddingHorizontal': 20, 'paddingVertical': 12, 'backgroundColor': 'white'};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.round;
    offset['borderRadius'] = foxtrot;
    tango['button'] = offset;
    offset = {};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.unsafe_rawColors;
    yankee = yankee.PRIMARY_860;
    offset['color'] = yankee;
    tango['buttonText'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot7 = tango;
    tango = golf.memo;
    mike = function() { // Original name: VoicePanelNoVideoParticipantsCard
        golf = _closure1_slot3;
        report = golf.useContext;
        mike = _closure1_slot1;
        kilo = _closure1_slot2;
        zulu = 5;
        zulu = kilo[zulu];
        tango = undefined;
        zulu = mike.bind(tango)(zulu);
        zulu = report.bind(golf)(zulu);
        options = zulu.channelId;
        var _closure2_slot0 = options;
        zulu = _closure1_slot7;
        romeo = zulu.bind(tango)();
        report = golf.useCallback;
        zulu = new Array(1);
        zulu[0] = options;
        entity = function() {
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 6;
            mike = mike[entity];
            entity = undefined;
            report = zulu.bind(entity)(mike);
            tango = report.toggleVoiceParticipantsHidden;
            zulu = _closure2_slot0;
            mike = false;
            mike = tango.bind(report)(zulu, mike);
            return entity;
        };
        offset = report.bind(golf)(entity, zulu);
        zulu = _closure1_slot6;
        entity = 7;
        entity = kilo[entity];
        mike = mike.bind(tango)(entity);
        entity = {};
        report = romeo.container;
        entity['style'] = report;
        options = _closure1_slot5;
        backup = _closure1_slot0;
        verify = 8;
        report = kilo[verify];
        report = backup.bind(tango)(report);
        golf = report.Text;
        report = {'style': null, 'variant': 'text-md/semibold', 'color': 'always-white'};
        yankee = romeo.label;
        report['style'] = yankee;
        yankee = 9;
        foxtrot = kilo[yankee];
        foxtrot = backup.bind(tango)(foxtrot);
        output = foxtrot.intl;
        sizing = output.string;
        foxtrot = kilo[yankee];
        foxtrot = backup.bind(tango)(foxtrot);
        foxtrot = foxtrot.t;
        foxtrot = foxtrot.8eBJ7+;
        foxtrot = sizing.bind(output)(foxtrot);
        report['children'] = foxtrot;
        golf = options.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        golf = _closure1_slot4;
        oscar = {};
        foxtrot = romeo.button;
        oscar['style'] = foxtrot;
        oscar['onPress'] = offset;
        verify = kilo[verify];
        verify = backup.bind(tango)(verify);
        offset = verify.Text;
        verify = {};
        foxtrot = 'text-sm/semibold';
        verify['variant'] = foxtrot;
        romeo = romeo.buttonText;
        verify['style'] = romeo;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        foxtrot = romeo.intl;
        romeo = foxtrot.string;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.kLQySE;
        yankee = romeo.bind(foxtrot)(yankee);
        verify['children'] = yankee;
        verify = options.bind(tango)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = tango.bind(golf)(mike);
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/voice_panel/native/card/VoicePanelNoVideoParticipantsCard.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();