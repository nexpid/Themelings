// app/modules/voice_panel/native/VoicePanelStateContext.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    offset = global;
    golfie = offset.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    kiloes = 0;
    tangon = oscard[kiloes];
    michal = argCor;
    entity = undefined;
    golfie = michal.bind(entity)(tangon);
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    foxtra = michal.VoicePanelModes;
    michal = 2;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    result = michal.CONTROLS_HEIGHT;
    echoed = michal.VoicePanelControlsModes;
    michal = 3;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    backup = michal.MorphablePanelModes;
    tangon = golfie.createContext;
    michal = {};
    option = 'context-not-initialized';
    michal['channelId'] = option;
    option = 4;
    yankee = oscard[option];
    sizing = report.bind(entity)(yankee);
    romeon = sizing.createFakeSharedValue;
    yankee = false;
    romeon = romeon.bind(sizing)(yankee);
    michal['connected'] = romeon;
    romeon = oscard[option];
    output = report.bind(entity)(romeon);
    sizing = output.createFakeSharedValue;
    romeon = {'width': 0, 'height': 0};
    romeon = sizing.bind(output)(romeon);
    michal['contentDimensions'] = romeon;
    romeon = oscard[option];
    output = report.bind(entity)(romeon);
    sizing = output.createFakeSharedValue;
    romeon = {};
    echoed = echoed.FLOATING_DEFAULT;
    romeon['mode'] = echoed;
    romeon['locked'] = yankee;
    romeon['height'] = result;
    romeon['pushToTalk'] = yankee;
    romeon = sizing.bind(output)(romeon);
    michal['controlsSpecs'] = romeon;
    romeon = function() { // Original name: dismissPanel
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.dismissDrawer: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['dismissPanel'] = romeon;
    romeon = {};
    romeon['current'] = entity;
    michal['dismissToPIPGestureRef'] = romeon;
    romeon = oscard[option];
    sizing = report.bind(entity)(romeon);
    romeon = sizing.createFakeSharedValue;
    romeon = romeon.bind(sizing)(yankee);
    michal['dragScrolling'] = romeon;
    romeon = oscard[option];
    output = report.bind(entity)(romeon);
    sizing = output.createFakeSharedValue;
    romeon = null;
    sizing = sizing.bind(output)(romeon);
    michal['focused'] = sizing;
    sizing = function() { // Original name: generateStateLocker
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.generateStateLocker: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['generateStateLocker'] = sizing;
    michal['guildId'] = entity;
    sizing = function() { // Original name: hideControls
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.hideControls: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['hideControls'] = sizing;
    michal['isCall'] = yankee;
    sizing = oscard[option];
    output = report.bind(entity)(sizing);
    sizing = output.createFakeSharedValue;
    sizing = sizing.bind(output)(yankee);
    michal['isFocusedVideoZoomed'] = sizing;
    sizing = 5;
    output = oscard[sizing];
    sizing = argBaz;
    result = sizing.bind(entity)(output);
    sizing = result.prototype;
    output = Object.create(sizing, {constructor: {value: result}});
    ctrled = 'invalid';
    vacuum = output;
    sizing = new vacuum[result](ctrled, source);
    sizing = sizing instanceof Object ? sizing : output;
    michal['layoutManager'] = sizing;
    sizing = oscard[option];
    result = report.bind(entity)(sizing);
    output = result.createFakeSharedValue;
    sizing = foxtra.PANEL;
    sizing = output.bind(result)(sizing);
    michal['mode'] = sizing;
    sizing = oscard[option];
    output = report.bind(entity)(sizing);
    sizing = output.createFakeSharedValue;
    backup = backup.PANEL;
    backup = sizing.bind(output)(backup);
    michal['morphablePanelMode'] = backup;
    offset = offset.Set;
    backup = offset.prototype;
    backup = Object.create(backup, {constructor: {value: offset}});
    vacuum = backup;
    offset = new vacuum[offset](ctrled);
    offset = offset instanceof Object ? offset : backup;
    michal['mountedCards'] = offset;
    offset = oscard[option];
    sizing = report.bind(entity)(offset);
    backup = sizing.createFakeSharedValue;
    offset = {'top': 0, 'bottom': 0};
    offset = backup.bind(sizing)(offset);
    michal['pipAvoidanceSpecs'] = offset;
    offset = {};
    offset['current'] = romeon;
    backup = function() { // Original name: getTag
        entity = 0;
        return entity;
    };
    offset['getTag'] = backup;
    michal['pipContainerRef'] = offset;
    offset = oscard[option];
    backup = report.bind(entity)(offset);
    offset = backup.createFakeSharedValue;
    offset = offset.bind(backup)(kiloes);
    michal['preJoinContentSize'] = offset;
    offset = oscard[option];
    sizing = report.bind(entity)(offset);
    backup = sizing.createFakeSharedValue;
    offset = 6;
    offset = oscard[offset];
    offset = report.bind(entity)(offset);
    offset = offset.EMPTY_SAFE_AREA_INSETS;
    offset = backup.bind(sizing)(offset);
    michal['safeArea'] = offset;
    offset = oscard[option];
    backup = report.bind(entity)(offset);
    offset = backup.createFakeSharedValue;
    offset = offset.bind(backup)(kiloes);
    michal['scrollPosition'] = offset;
    offset = function() { // Original name: setControlsMode
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.setControlsMode: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['setControlsMode'] = offset;
    offset = function() { // Original name: setFocused
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.setFocused: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['setFocused'] = offset;
    offset = function() { // Original name: setIsFocusedVideoZoomed
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.showControls: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['setIsFocusedVideoZoomed'] = offset;
    offset = function() { // Original name: setMode
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.setMode: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['setMode'] = offset;
    offset = function() { // Original name: setShowFloatingCTA
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.showFloatingCTA: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['setShowFloatingCTA'] = offset;
    verify = function() { // Original name: showControls
        entity = global;
        zuuluu = entity.Error;
        entity = zuuluu.prototype;
        michal = Object.create(entity, {constructor: {value: zuuluu}});
        tangon = 'VoicePanelContextType.Provider.showControls: not called within a context provider';
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        throw entity;
    };
    michal['showControls'] = verify;
    verify = oscard[option];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(romeon);
    michal['showFloatingCTA'] = verify;
    verify = {};
    michal['streamOutputSinkStack'] = verify;
    verify = oscard[option];
    romeon = report.bind(entity)(verify);
    offset = romeon.createFakeSharedValue;
    verify = {'width': 0, 'height': 0, 'landscape': false};
    verify = offset.bind(romeon)(verify);
    michal['windowDimensions'] = verify;
    verify = oscard[option];
    romeon = report.bind(entity)(verify);
    offset = romeon.createFakeSharedValue;
    verify = {'drawerWidth': 0, 'drawerHeight': 0, 'drawerX': 0, 'drawerY': 0, 'pipX': 0, 'pipY': 0, 'animated': true};
    foxtra = foxtra.PANEL;
    verify['mode'] = foxtra;
    verify = offset.bind(romeon)(verify);
    michal['wrapperDimensions'] = verify;
    verify = oscard[option];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(yankee);
    michal['useReducedMotion'] = verify;
    option = oscard[option];
    offset = report.bind(entity)(option);
    verify = offset.createFakeSharedValue;
    option = {'gestureActive': false, 'x': 0, 'y': 0};
    option = verify.bind(offset)(option);
    michal['wrapperOffset'] = option;
    michal = tangon.bind(golfie)(michal);
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/voice_panel/native/VoicePanelStateContext.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();