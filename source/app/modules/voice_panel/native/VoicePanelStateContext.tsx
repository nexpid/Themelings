// app/modules/voice_panel/native/VoicePanelStateContext.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    offset = global;
    golf = offset.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    kilo = 0;
    tango = oscar[kilo];
    mike = argCorge;
    entity = undefined;
    golf = mike.bind(entity)(tango);
    mike = 1;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    foxtrot = mike.VoicePanelModes;
    mike = 2;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    result = mike.CONTROLS_HEIGHT;
    echo = mike.VoicePanelControlsModes;
    mike = 3;
    mike = oscar[mike];
    mike = report.bind(entity)(mike);
    backup = mike.MorphablePanelModes;
    tango = golf.createContext;
    mike = {};
    options = 'context-not-initialized';
    mike['channelId'] = options;
    options = 4;
    yankee = oscar[options];
    sizing = report.bind(entity)(yankee);
    romeo = sizing.createFakeSharedValue;
    yankee = false;
    romeo = romeo.bind(sizing)(yankee);
    mike['connected'] = romeo;
    romeo = oscar[options];
    output = report.bind(entity)(romeo);
    sizing = output.createFakeSharedValue;
    romeo = {'width': 0, 'height': 0};
    romeo = sizing.bind(output)(romeo);
    mike['contentDimensions'] = romeo;
    romeo = oscar[options];
    output = report.bind(entity)(romeo);
    sizing = output.createFakeSharedValue;
    romeo = {};
    echo = echo.FLOATING_DEFAULT;
    romeo['mode'] = echo;
    romeo['locked'] = yankee;
    romeo['height'] = result;
    romeo['pushToTalk'] = yankee;
    romeo = sizing.bind(output)(romeo);
    mike['controlsSpecs'] = romeo;
    romeo = function() { // Original name: dismissPanel
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.dismissDrawer: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['dismissPanel'] = romeo;
    romeo = {};
    romeo['current'] = entity;
    mike['dismissToPIPGestureRef'] = romeo;
    romeo = oscar[options];
    sizing = report.bind(entity)(romeo);
    romeo = sizing.createFakeSharedValue;
    romeo = romeo.bind(sizing)(yankee);
    mike['dragScrolling'] = romeo;
    romeo = oscar[options];
    output = report.bind(entity)(romeo);
    sizing = output.createFakeSharedValue;
    romeo = null;
    sizing = sizing.bind(output)(romeo);
    mike['focused'] = sizing;
    sizing = function() { // Original name: generateStateLocker
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.generateStateLocker: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['generateStateLocker'] = sizing;
    mike['guildId'] = entity;
    sizing = function() { // Original name: hideControls
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.hideControls: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['hideControls'] = sizing;
    mike['isCall'] = yankee;
    sizing = oscar[options];
    output = report.bind(entity)(sizing);
    sizing = output.createFakeSharedValue;
    sizing = sizing.bind(output)(yankee);
    mike['isFocusedVideoZoomed'] = sizing;
    sizing = 5;
    output = oscar[sizing];
    sizing = argBaz;
    result = sizing.bind(entity)(output);
    sizing = result.prototype;
    output = Object.create(sizing, {constructor: {value: result}});
    control = 'invalid';
    vacuum = output;
    sizing = new vacuum[result](control, source);
    sizing = sizing instanceof Object ? sizing : output;
    mike['layoutManager'] = sizing;
    sizing = oscar[options];
    result = report.bind(entity)(sizing);
    output = result.createFakeSharedValue;
    sizing = foxtrot.PANEL;
    sizing = output.bind(result)(sizing);
    mike['mode'] = sizing;
    sizing = oscar[options];
    output = report.bind(entity)(sizing);
    sizing = output.createFakeSharedValue;
    backup = backup.PANEL;
    backup = sizing.bind(output)(backup);
    mike['morphablePanelMode'] = backup;
    offset = offset.Set;
    backup = offset.prototype;
    backup = Object.create(backup, {constructor: {value: offset}});
    vacuum = backup;
    offset = new vacuum[offset](control);
    offset = offset instanceof Object ? offset : backup;
    mike['mountedCards'] = offset;
    offset = oscar[options];
    sizing = report.bind(entity)(offset);
    backup = sizing.createFakeSharedValue;
    offset = {'top': 0, 'bottom': 0};
    offset = backup.bind(sizing)(offset);
    mike['pipAvoidanceSpecs'] = offset;
    offset = {};
    offset['current'] = romeo;
    backup = function() { // Original name: getTag
        entity = 0;
        return entity;
    };
    offset['getTag'] = backup;
    mike['pipContainerRef'] = offset;
    offset = oscar[options];
    backup = report.bind(entity)(offset);
    offset = backup.createFakeSharedValue;
    offset = offset.bind(backup)(kilo);
    mike['preJoinContentSize'] = offset;
    offset = oscar[options];
    sizing = report.bind(entity)(offset);
    backup = sizing.createFakeSharedValue;
    offset = 6;
    offset = oscar[offset];
    offset = report.bind(entity)(offset);
    offset = offset.EMPTY_SAFE_AREA_INSETS;
    offset = backup.bind(sizing)(offset);
    mike['safeArea'] = offset;
    offset = oscar[options];
    backup = report.bind(entity)(offset);
    offset = backup.createFakeSharedValue;
    offset = offset.bind(backup)(kilo);
    mike['scrollPosition'] = offset;
    offset = function() { // Original name: setControlsMode
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.setControlsMode: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['setControlsMode'] = offset;
    offset = function() { // Original name: setFocused
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.setFocused: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['setFocused'] = offset;
    offset = function() { // Original name: setIsFocusedVideoZoomed
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.showControls: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['setIsFocusedVideoZoomed'] = offset;
    offset = function() { // Original name: setMode
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.setMode: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['setMode'] = offset;
    offset = function() { // Original name: setShowFloatingCTA
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.showFloatingCTA: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['setShowFloatingCTA'] = offset;
    verify = function() { // Original name: showControls
        entity = global;
        zulu = entity.Error;
        entity = zulu.prototype;
        mike = Object.create(entity, {constructor: {value: zulu}});
        tango = 'VoicePanelContextType.Provider.showControls: not called within a context provider';
        report = mike;
        entity = new report[zulu](tango, zulu);
        entity = entity instanceof Object ? entity : mike;
        throw entity;
    };
    mike['showControls'] = verify;
    verify = oscar[options];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(romeo);
    mike['showFloatingCTA'] = verify;
    verify = {};
    mike['streamOutputSinkStack'] = verify;
    verify = oscar[options];
    romeo = report.bind(entity)(verify);
    offset = romeo.createFakeSharedValue;
    verify = {'width': 0, 'height': 0, 'landscape': false};
    verify = offset.bind(romeo)(verify);
    mike['windowDimensions'] = verify;
    verify = oscar[options];
    romeo = report.bind(entity)(verify);
    offset = romeo.createFakeSharedValue;
    verify = {'drawerWidth': 0, 'drawerHeight': 0, 'drawerX': 0, 'drawerY': 0, 'pipX': 0, 'pipY': 0, 'animated': true};
    foxtrot = foxtrot.PANEL;
    verify['mode'] = foxtrot;
    verify = offset.bind(romeo)(verify);
    mike['wrapperDimensions'] = verify;
    verify = oscar[options];
    offset = report.bind(entity)(verify);
    verify = offset.createFakeSharedValue;
    verify = verify.bind(offset)(yankee);
    mike['useReducedMotion'] = verify;
    options = oscar[options];
    offset = report.bind(entity)(options);
    verify = offset.createFakeSharedValue;
    options = {'gestureActive': false, 'x': 0, 'y': 0};
    options = verify.bind(offset)(options);
    mike['wrapperOffset'] = options;
    mike = tango.bind(golf)(mike);
    tango = 7;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/voice_panel/native/VoicePanelStateContext.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();