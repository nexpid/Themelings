// app/modules/voice_panel/native/alerts/VoicePanelMaxCapacityAlert.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot4 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/voice_panel/native/alerts/VoicePanelMaxCapacityAlert.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: VoicePanelMaxCapacityAlert
        michal = argFoo;
        option = michal.channelId;
        var _closure2_slot0 = option;
        yankee = _closure1_slot0;
        romeon = _closure1_slot2;
        michal = 3;
        michal = romeon[michal];
        tangon = undefined;
        golfie = yankee.bind(tangon)(michal);
        report = golfie.useStateFromStores;
        michal = _closure1_slot3;
        zuuluu = new Array(1);
        zuuluu[0] = michal;
        michal = new Array(1);
        michal[0] = option;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = _closure1_slot3;
                michal = zuuluu.getChannel;
                entity = _closure2_slot0;
                zuuluu = michal.bind(zuuluu)(entity);
                entity = null;
                tangon = entity == zuuluu;
                michal = undefined;
                if(tangon) { _fun00002_ip = 41; continue _fun00001 }
 35:
                michal = zuuluu.userLimit;
 41:
                zuuluu = entity != michal;
                entity = 0;
                if(!zuuluu) { _fun00002_ip = 53; continue _fun00001 }
 50:
                entity = michal;
 53:
                return entity;
            }
        };
        backup = report.bind(golfie)(zuuluu, entity, michal);
        report = 4;
        entity = romeon[report];
        michal = yankee.bind(tangon)(entity);
        entity = michal.useDismissModalCallback;
        golfie = entity.bind(michal)();
        zuuluu = _closure1_slot4;
        entity = 5;
        entity = romeon[entity];
        entity = yankee.bind(tangon)(entity);
        michal = entity.AlertModal;
        entity = {};
        option = _closure1_slot1;
        oscard = 6;
        oscard = romeon[oscard];
        option = option.bind(tangon)(oscard);
        oscard = {};
        oscard = zuuluu.bind(tangon)(option, oscard);
        entity['header'] = oscard;
        option = 7;
        oscard = romeon[option];
        oscard = yankee.bind(tangon)(oscard);
        offset = oscard.intl;
        verify = offset.string;
        oscard = romeon[option];
        oscard = yankee.bind(tangon)(oscard);
        oscard = oscard.t;
        oscard = oscard.hHbsQk;
        oscard = verify.bind(offset)(oscard);
        entity['title'] = oscard;
        oscard = romeon[option];
        oscard = yankee.bind(tangon)(oscard);
        foxtra = oscard.intl;
        offset = foxtra.formatToPlainString;
        oscard = romeon[option];
        oscard = yankee.bind(tangon)(oscard);
        oscard = oscard.t;
        verify = oscard.387SQE;
        oscard = {};
        oscard['count'] = backup;
        oscard = offset.bind(foxtra)(verify, oscard);
        entity['content'] = oscard;
        report = romeon[report];
        report = yankee.bind(tangon)(report);
        oscard = report.AlertActionButton;
        report = {};
        verify = 'secondary';
        report['variant'] = verify;
        verify = romeon[option];
        verify = yankee.bind(tangon)(verify);
        offset = verify.intl;
        verify = offset.string;
        option = romeon[option];
        option = yankee.bind(tangon)(option);
        option = option.t;
        option = option.NX+WJC;
        option = verify.bind(offset)(option);
        report['text'] = option;
        report['onPress'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['actions'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    michal = 'voice-panel-max-capacity';
    zuuluu['VOICE_PANEL_MAX_CAPACITY_KEY'] = michal;
    return entity;
})();