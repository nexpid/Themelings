// app/modules/voice_panel/native/pip/VoicePanelPIPPushToTalkOverlay.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    romeo = tango.StyleSheet;
    tango = 3;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.PUSH_TO_TALK_PIP_PHYSICS;
    var _closure1_slot6 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot9 = tango;
    tango = 6;
    golf = oscar[tango];
    verify = yankee.bind(entity)(golf);
    options = verify.createAnimatedComponent;
    golf = 7;
    golf = oscar[golf];
    golf = yankee.bind(entity)(golf);
    golf = options.bind(verify)(golf);
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    options = yankee.bind(entity)(tango);
    golf = options.createAnimatedComponent;
    tango = 8;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    tango = golf.bind(options)(tango);
    var _closure1_slot11 = tango;
    tango = {'top': 6, 'bottom': 6, 'left': 6, 'right': 6};
    var _closure1_slot12 = tango;
    tango = 9;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'position': 'absolute', 'width': 32, 'height': 32, 'alignItems': 'center', 'justifyContent': 'center'};
    offset = 10;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.round;
    verify['borderRadius'] = foxtrot;
    tango['iconContainer'] = verify;
    verify = {};
    kilo = romeo.absoluteFillObject;
    sizing = verify;
    romeo = copyDataProperties(sizing, kilo);
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    yankee = offset.BLACK;
    offset = 'backgroundColor';
    verify[offset] = yankee;
    tango['overlay'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot13 = tango;
    tango = {};
    golf = "function VoicePanelPIPPushToTalkOverlayTsx1(){const{isPushingToTalk,EXPANDED_ICON_SIZE,BASE_ICON_SIZE,withSpring,PUSH_TO_TALK_PIP_PHYSICS,white}=this.__closure;const padding=isPushingToTalk.get()?8*EXPANDED_ICON_SIZE/BASE_ICON_SIZE+8:8;return{right:withSpring(padding,PUSH_TO_TALK_PIP_PHYSICS),bottom:withSpring(padding,PUSH_TO_TALK_PIP_PHYSICS),transform:[{scale:withSpring(isPushingToTalk.get()?EXPANDED_ICON_SIZE/BASE_ICON_SIZE:1,PUSH_TO_TALK_PIP_PHYSICS)}],backgroundColor:withSpring(isPushingToTalk.get()?white:'rgba(0, 0, 0, 0.54)',PUSH_TO_TALK_PIP_PHYSICS)};}";
    tango['code'] = golf;
    var _closure1_slot14 = tango;
    tango = {};
    golf = 'function VoicePanelPIPPushToTalkOverlayTsx2(){const{withSpring,isPushingToTalk,black,white,PUSH_TO_TALK_PIP_PHYSICS}=this.__closure;return{tintColor:withSpring(isPushingToTalk.get()?black:white,PUSH_TO_TALK_PIP_PHYSICS)};}';
    tango['code'] = golf;
    var _closure1_slot15 = tango;
    tango = {};
    golf = 'function VoicePanelPIPPushToTalkOverlayTsx3(){const{withSpring,isPushingToTalk,PUSH_TO_TALK_PIP_PHYSICS,getVoicePanelPIPBorderRadius,pipState}=this.__closure;return{opacity:withSpring(isPushingToTalk.get()?0.5:0,PUSH_TO_TALK_PIP_PHYSICS),borderRadius:getVoicePanelPIPBorderRadius(pipState.width,pipState.height)};}';
    tango['code'] = golf;
    var _closure1_slot16 = tango;
    tango = {};
    golf = 'function VoicePanelPIPPushToTalkOverlayTsx4(event,success){const{runOnJS,handlePushToTalk}=this.__closure;if(!success){return;}runOnJS(handlePushToTalk)(false);}';
    tango['code'] = golf;
    var _closure1_slot17 = tango;
    tango = {};
    golf = 'function VoicePanelPIPPushToTalkOverlayTsx5(){const{runOnJS,handlePushToTalk}=this.__closure;runOnJS(handlePushToTalk)(true);}';
    tango['code'] = golf;
    var _closure1_slot18 = tango;
    tango = {};
    golf = 'function VoicePanelPIPPushToTalkOverlayTsx6(){const{runOnJS,handlePushToTalk}=this.__closure;runOnJS(handlePushToTalk)(false);}';
    tango['code'] = golf;
    var _closure1_slot19 = tango;
    tango = 16;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/voice_panel/native/pip/VoicePanelPIPPushToTalkOverlay.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: VoicePanelPIPPushToTalkOverlay
        golf = _closure1_slot0;
        kilo = _closure1_slot2;
        mike = 11;
        mike = kilo[mike];
        tango = undefined;
        zulu = golf.bind(tango)(mike);
        mike = zulu.usePIPState;
        verify = mike.bind(zulu)();
        var _closure2_slot0 = verify;
        mike = _closure1_slot13;
        romeo = mike.bind(tango)();
        mike = function() { // Original name: usePushToTalk
            report = _closure1_slot0;
            tango = _closure1_slot2;
            zulu = 6;
            tango = tango[zulu];
            zulu = undefined;
            report = report.bind(zulu)(tango);
            zulu = report.useSharedValue;
            tango = false;
            zulu = zulu.bind(report)(tango);
            var _closure3_slot0 = zulu;
            report = _closure1_slot4;
            mike = report.useRef;
            mike = mike.bind(report)(tango);
            var _closure3_slot1 = mike;
            tango = report.useCallback;
            mike = new Array(1);
            mike[0] = zulu;
            entity = function(argFoo) {
                _fun122599: for(var _fun122599_ip = 0; ; ) switch(_fun122599_ip) {
 0:
                    zulu = argFoo;
                    var _closure4_slot0 = zulu;
                    tango = _closure3_slot1;
                    tango = tango.current;
                    if(!(zulu !== tango)) { _fun122599_ip = 84; continue _fun122599 }
 25:
                    tango = _closure3_slot1;
                    tango['current'] = zulu;
                    report = _closure1_slot5;
                    tango = report.getMediaEngine;
                    report = tango.bind(report)();
                    tango = report.eachConnection;
                    mike = function(argFoo) {
                        zulu = argFoo;
                        mike = zulu.setForceAudioInput;
                        entity = _closure4_slot0;
                        entity = mike.bind(zulu)(entity);
                        return entity;
                    };
                    mike = tango.bind(report)(mike);
                    mike = _closure3_slot0;
                    entity = mike.set;
                    entity = entity.bind(mike)(zulu);
 84:
                    entity = undefined;
                    return entity;
                }
            };
            mike = tango.bind(report)(entity, mike);
            entity = new Array(2);
            entity[0] = zulu;
            entity[1] = mike;
            return entity;
        };
        report = mike.bind(tango)();
        zulu = _closure1_slot3;
        mike = 2;
        zulu = zulu.bind(tango)(report, mike);
        mike = 0;
        output = zulu[mike];
        var _closure2_slot1 = output;
        mike = 1;
        oscar = zulu[mike];
        var _closure2_slot2 = oscar;
        backup = _closure1_slot1;
        mike = 10;
        zulu = kilo[mike];
        zulu = backup.bind(tango)(zulu);
        zulu = zulu.unsafe_rawColors;
        echo = zulu.WHITE_500;
        var _closure2_slot3 = echo;
        mike = kilo[mike];
        mike = backup.bind(tango)(mike);
        mike = mike.unsafe_rawColors;
        update = mike.BLACK_500;
        var _closure2_slot4 = update;
        mike = 6;
        zulu = kilo[mike];
        options = golf.bind(tango)(zulu);
        report = options.useAnimatedStyle;
        zulu = function() { // Original name: o
            _fun122601: for(var _fun122601_ip = 0; ; ) switch(_fun122601_ip) {
 0:
                mike = _closure2_slot1;
                entity = mike.get;
                entity = entity.bind(mike)();
                yankee = 8;
                if(!entity) { _fun122601_ip = 25; continue _fun122601 }
 22:
                yankee = 20;
 25:
                entity = {};
                options = _closure1_slot0;
                zulu = _closure1_slot2;
                golf = 12;
                tango = zulu[golf];
                report = undefined;
                verify = options.bind(report)(tango);
                tango = verify.withSpring;
                offset = _closure1_slot6;
                tango = tango.bind(verify)(yankee, offset);
                entity['right'] = tango;
                tango = zulu[golf];
                verify = options.bind(report)(tango);
                tango = verify.withSpring;
                tango = tango.bind(verify)(yankee, offset);
                entity['bottom'] = tango;
                tango = {};
                zulu = zulu[golf];
                offset = options.bind(report)(zulu);
                verify = offset.withSpring;
                options = _closure2_slot1;
                zulu = options.get;
                zulu = zulu.bind(options)();
                options = 1;
                if(!zulu) { _fun122601_ip = 140; continue _fun122601 }
 130:
                options = 1.5;
 140:
                zulu = _closure1_slot6;
                zulu = verify.bind(offset)(options, zulu);
                tango['scale'] = zulu;
                zulu = new Array(1);
                zulu[0] = tango;
                entity['transform'] = zulu;
                tango = _closure1_slot0;
                zulu = _closure1_slot2;
                zulu = zulu[golf];
                report = tango.bind(report)(zulu);
                tango = report.withSpring;
                golf = _closure2_slot1;
                zulu = golf.get;
                golf = zulu.bind(golf)();
                zulu = 'rgba(0, 0, 0, 0.54)';
                if(!golf) { _fun122601_ip = 215; continue _fun122601 }
 211:
                zulu = _closure2_slot3;
 215:
                mike = _closure1_slot6;
                mike = tango.bind(report)(zulu, mike);
                entity['backgroundColor'] = mike;
                return entity;
            }
        };
        foxtrot = {'isPushingToTalk': null, 'EXPANDED_ICON_SIZE': 48, 'BASE_ICON_SIZE': 32};
        foxtrot['isPushingToTalk'] = output;
        result = 12;
        offset = kilo[result];
        offset = golf.bind(tango)(offset);
        offset = offset.withSpring;
        foxtrot['withSpring'] = offset;
        offset = _closure1_slot6;
        foxtrot['PUSH_TO_TALK_PIP_PHYSICS'] = offset;
        foxtrot['white'] = echo;
        zulu['__closure'] = foxtrot;
        foxtrot = 3936373516983.0;
        zulu['__workletHash'] = foxtrot;
        foxtrot = _closure1_slot14;
        zulu['__initData'] = foxtrot;
        sizing = report.bind(options)(zulu);
        zulu = kilo[mike];
        options = golf.bind(tango)(zulu);
        report = options.useAnimatedStyle;
        zulu = function() { // Original name: H
            _fun122602: for(var _fun122602_ip = 0; ; ) switch(_fun122602_ip) {
 0:
                entity = {};
                report = _closure1_slot0;
                tango = _closure1_slot2;
                zulu = 12;
                tango = tango[zulu];
                zulu = undefined;
                report = report.bind(zulu)(tango);
                tango = report.withSpring;
                golf = _closure2_slot1;
                zulu = golf.get;
                zulu = zulu.bind(golf)();
                if(zulu) { _fun122602_ip = 57; continue _fun122602 }
 51:
                zulu = _closure2_slot3;
                _fun122602_ip = 61; continue _fun122602;
 57:
                zulu = _closure2_slot4;
 61:
                mike = _closure1_slot6;
                mike = tango.bind(report)(zulu, mike);
                entity['tintColor'] = mike;
                return entity;
            }
        };
        foxtrot = {};
        source = kilo[result];
        source = golf.bind(tango)(source);
        source = source.withSpring;
        foxtrot['withSpring'] = source;
        foxtrot['isPushingToTalk'] = output;
        foxtrot['black'] = update;
        foxtrot['white'] = echo;
        foxtrot['PUSH_TO_TALK_PIP_PHYSICS'] = offset;
        zulu['__closure'] = foxtrot;
        foxtrot = 11469896791985.0;
        zulu['__workletHash'] = foxtrot;
        foxtrot = _closure1_slot15;
        zulu['__initData'] = foxtrot;
        foxtrot = report.bind(options)(zulu);
        mike = kilo[mike];
        report = golf.bind(tango)(mike);
        zulu = report.useAnimatedStyle;
        mike = function() { // Original name: f
            _fun122603: for(var _fun122603_ip = 0; ; ) switch(_fun122603_ip) {
 0:
                entity = {};
                tango = _closure1_slot0;
                report = _closure1_slot2;
                mike = 12;
                mike = report[mike];
                report = undefined;
                options = tango.bind(report)(mike);
                golf = options.withSpring;
                oscar = _closure2_slot1;
                tango = oscar.get;
                tango = tango.bind(oscar)();
                oscar = 0;
                if(!tango) { _fun122603_ip = 63; continue _fun122603 }
 53:
                oscar = 0.5;
 63:
                tango = _closure1_slot6;
                tango = golf.bind(options)(oscar, tango);
                entity['opacity'] = tango;
                tango = _closure1_slot0;
                oscar = _closure1_slot2;
                zulu = 13;
                zulu = oscar[zulu];
                report = tango.bind(report)(zulu);
                tango = report.getVoicePanelPIPBorderRadius;
                mike = _closure2_slot0;
                zulu = mike.width;
                mike = mike.height;
                mike = tango.bind(report)(zulu, mike);
                entity['borderRadius'] = mike;
                return entity;
            }
        };
        options = {};
        result = kilo[result];
        result = golf.bind(tango)(result);
        result = result.withSpring;
        options['withSpring'] = result;
        options['isPushingToTalk'] = output;
        options['PUSH_TO_TALK_PIP_PHYSICS'] = offset;
        offset = 13;
        offset = kilo[offset];
        offset = golf.bind(tango)(offset);
        offset = offset.getVoicePanelPIPBorderRadius;
        options['getVoicePanelPIPBorderRadius'] = offset;
        options['pipState'] = verify;
        mike['__closure'] = options;
        options = 450590017248.0;
        mike['__workletHash'] = options;
        options = _closure1_slot16;
        mike['__initData'] = options;
        output = zulu.bind(report)(mike);
        report = _closure1_slot4;
        zulu = report.useMemo;
        mike = new Array(1);
        mike[0] = oscar;
        entity = function() {
            romeo = _closure1_slot0;
            foxtrot = _closure1_slot2;
            report = 14;
            mike = foxtrot[report];
            yankee = undefined;
            mike = romeo.bind(yankee)(mike);
            tango = mike.Gesture;
            zulu = tango.Exclusive;
            mike = foxtrot[report];
            mike = romeo.bind(yankee)(mike);
            oscar = mike.Gesture;
            mike = oscar.Tap;
            options = mike.bind(oscar)();
            oscar = options.maxDistance;
            mike = 30;
            options = oscar.bind(options)(mike);
            oscar = options.onEnd;
            mike = function(argFoo, argBar) { // Original name: o
                _fun122605: for(var _fun122605_ip = 0; ; ) switch(_fun122605_ip) {
 0:
                    entity = argBar;
                    if(!entity) { _fun122605_ip = 55; continue _fun122605 }
 6:
                    mike = _closure1_slot0;
                    zulu = _closure1_slot2;
                    entity = 6;
                    entity = zulu[entity];
                    zulu = undefined;
                    tango = mike.bind(zulu)(entity);
                    mike = tango.runOnJS;
                    entity = _closure2_slot2;
                    mike = mike.bind(tango)(entity);
                    entity = false;
                    entity = mike.bind(zulu)(entity);
 55:
                    entity = undefined;
                    return entity;
                }
            };
            backup = {};
            offset = 6;
            verify = foxtrot[offset];
            verify = romeo.bind(yankee)(verify);
            verify = verify.runOnJS;
            backup['runOnJS'] = verify;
            verify = _closure2_slot2;
            backup['handlePushToTalk'] = verify;
            mike['__closure'] = backup;
            backup = 13736796804739.0;
            mike['__workletHash'] = backup;
            backup = _closure1_slot17;
            mike['__initData'] = backup;
            mike = oscar.bind(options)(mike);
            report = foxtrot[report];
            report = romeo.bind(yankee)(report);
            oscar = report.Gesture;
            report = oscar.Pan;
            options = report.bind(oscar)();
            oscar = options.maxPointers;
            report = 1;
            options = oscar.bind(options)(report);
            oscar = options.shouldCancelWhenOutside;
            report = false;
            options = oscar.bind(options)(report);
            oscar = options.onBegin;
            report = function() { // Original name: t
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 6;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.runOnJS;
                mike = _closure2_slot2;
                zulu = zulu.bind(tango)(mike);
                mike = true;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            backup = {};
            kilo = foxtrot[offset];
            kilo = romeo.bind(yankee)(kilo);
            kilo = kilo.runOnJS;
            backup['runOnJS'] = kilo;
            backup['handlePushToTalk'] = verify;
            report['__closure'] = backup;
            backup = 13835424148241.0;
            report['__workletHash'] = backup;
            backup = _closure1_slot18;
            report['__initData'] = backup;
            oscar = oscar.bind(options)(report);
            report = oscar.onFinalize;
            entity = function() { // Original name: n
                zulu = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 6;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.runOnJS;
                mike = _closure2_slot2;
                zulu = zulu.bind(tango)(mike);
                mike = false;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            options = {};
            offset = foxtrot[offset];
            offset = romeo.bind(yankee)(offset);
            offset = offset.runOnJS;
            options['runOnJS'] = offset;
            options['handlePushToTalk'] = verify;
            entity['__closure'] = options;
            options = 13312872336633.0;
            entity['__workletHash'] = options;
            golf = _closure1_slot19;
            entity['__initData'] = golf;
            entity = report.bind(oscar)(entity);
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        };
        verify = zulu.bind(report)(entity, mike);
        zulu = _closure1_slot9;
        mike = _closure1_slot8;
        entity = {};
        options = _closure1_slot7;
        offset = _closure1_slot10;
        report = {};
        oscar = 'none';
        report['pointerEvents'] = oscar;
        result = romeo.overlay;
        oscar = new Array(2);
        oscar[0] = result;
        oscar[1] = output;
        report['style'] = oscar;
        oscar = options.bind(tango)(offset, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = 14;
        oscar = kilo[oscar];
        oscar = golf.bind(tango)(oscar);
        golf = oscar.GestureDetector;
        oscar = {};
        oscar['gesture'] = verify;
        verify = {};
        output = romeo.iconContainer;
        romeo = new Array(2);
        romeo[0] = output;
        romeo[1] = sizing;
        verify['style'] = romeo;
        romeo = _closure1_slot12;
        verify['hitSlop'] = romeo;
        romeo = _closure1_slot11;
        yankee = {};
        yankee['style'] = foxtrot;
        foxtrot = 8;
        foxtrot = kilo[foxtrot];
        foxtrot = backup.bind(tango)(foxtrot);
        foxtrot = foxtrot.Sizes;
        foxtrot = foxtrot.SMALL_20;
        yankee['size'] = foxtrot;
        foxtrot = 15;
        foxtrot = kilo[foxtrot];
        foxtrot = backup.bind(tango)(foxtrot);
        yankee['source'] = foxtrot;
        foxtrot = true;
        yankee['disableColor'] = foxtrot;
        yankee = options.bind(tango)(romeo, yankee);
        verify['children'] = yankee;
        verify = options.bind(tango)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();