// app/modules/voice_panel/native/controls/VoicePanelControlsAppLauncher.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = option;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    golfie = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.VoicePanelControlsModes;
    var _closure1_slot5 = option;
    yankee = tangon.CONTROLS_DRAWER_HEADER_SIZE;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ComponentActions;
    var _closure1_slot6 = tangon;
    tangon = 4;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot7 = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsxs;
    var _closure1_slot8 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    romeon = '100%';
    offset['width'] = romeon;
    offset['paddingTop'] = yankee;
    tangon['container'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot10 = tangon;
    tangon = {};
    option = 'function VoicePanelControlsAppLauncherTsx1(){const{gestureSpecs}=this.__closure;return gestureSpecs.get().active;}';
    tangon['code'] = option;
    var _closure1_slot11 = tangon;
    tangon = {};
    option = "function VoicePanelControlsAppLauncherTsx2(){const{isGestureActive,windowDimensions,safeArea}=this.__closure;const height=isGestureActive.get()?windowDimensions.height-safeArea.top:'100%';return{height:height};}";
    tangon['code'] = option;
    var _closure1_slot12 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: VoicePanelControlsAppLauncher
        michal = argFoo;
        sequen = michal.gestureSpecs;
        var _closure2_slot0 = sequen;
        michal = _closure1_slot10;
        tangon = undefined;
        option = michal.bind(tangon)();
        kiloes = _closure1_slot0;
        sizing = _closure1_slot2;
        michal = 6;
        michal = sizing[michal];
        zuuluu = kiloes.bind(tangon)(michal);
        michal = zuuluu.useGradientTop;
        source = michal.bind(zuuluu)();
        zuuluu = _closure1_slot3;
        report = zuuluu.useContext;
        offset = _closure1_slot1;
        michal = 7;
        michal = sizing[michal];
        michal = offset.bind(tangon)(michal);
        michal = report.bind(zuuluu)(michal);
        yankee = michal.setControlsMode;
        var _closure2_slot1 = yankee;
        golfie = michal.safeArea;
        romeon = michal.windowDimensions;
        report = michal.channelId;
        var _closure2_slot2 = report;
        michal = michal.setFocused;
        var _closure2_slot3 = michal;
        report = 8;
        verify = sizing[report];
        verify = offset.bind(tangon)(verify);
        ctrled = verify.bind(tangon)(romeon);
        var _closure2_slot4 = ctrled;
        report = sizing[report];
        report = offset.bind(tangon)(report);
        verify = report.bind(tangon)(golfie);
        var _closure2_slot5 = verify;
        report = 9;
        report = sizing[report];
        foxtra = kiloes.bind(tangon)(report);
        romeon = foxtra.useStateFromStores;
        report = _closure1_slot4;
        golfie = new Array(1);
        golfie[0] = report;
        report = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.getChannel;
            entity = _closure2_slot2;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        echoed = romeon.bind(foxtra)(golfie, report);
        report = 10;
        report = sizing[report];
        romeon = offset.bind(tangon)(report);
        report = null;
        golfie = report != echoed;
        report = 'channel should not be null';
        report = romeon.bind(tangon)(golfie, report);
        report = 11;
        report = sizing[report];
        backup = kiloes.bind(tangon)(report);
        foxtra = backup.getControlsDrawerOpenWidth;
        romeon = ctrled.width;
        golfie = verify.left;
        report = verify.right;
        romeon = foxtra.bind(backup)(romeon, golfie, report);
        golfie = zuuluu.useCallback;
        report = new Array(2);
        report[0] = yankee;
        report[1] = michal;
        michal = function(argFoo) {
            entity = argFoo;
            report = entity.applicationId;
            tangon = _closure1_slot0;
            oscard = _closure1_slot2;
            entity = 12;
            michal = oscard[entity];
            entity = undefined;
            michal = tangon.bind(entity)(michal);
            golfie = michal.ComponentDispatch;
            zuuluu = golfie.dispatch;
            michal = _closure1_slot6;
            michal = michal.SELECT_ACTIVITY;
            michal = zuuluu.bind(golfie)(michal);
            golfie = _closure2_slot1;
            zuuluu = {};
            option = _closure1_slot5;
            option = option.HIDDEN;
            zuuluu['mode'] = option;
            zuuluu = golfie.bind(entity)(zuuluu);
            zuuluu = _closure2_slot3;
            michal = 13;
            michal = oscard[michal];
            tangon = tangon.bind(entity)(michal);
            michal = tangon.embeddedActivityParticipantId;
            michal = michal.bind(tangon)(report);
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        foxtra = golfie.bind(zuuluu)(michal, report);
        michal = 14;
        report = sizing[michal];
        backup = kiloes.bind(tangon)(report);
        golfie = backup.useAppLauncherChatInputRefDummy;
        report = {};
        yankee = true;
        report['noop'] = yankee;
        result = golfie.bind(backup)(report);
        report = 15;
        report = sizing[report];
        report = kiloes.bind(tangon)(report);
        report = report.AppLauncherEntrypoint;
        output = report.VOICE;
        report = zuuluu.useRef;
        michal = sizing[michal];
        michal = kiloes.bind(tangon)(michal);
        michal = michal.AppLauncherKeyboardCloseReason;
        michal = michal.DISMISSED;
        backup = report.bind(zuuluu)(michal);
        michal = zuuluu.useRef;
        update = michal.bind(zuuluu)(tangon);
        report = 16;
        michal = sizing[report];
        golfie = kiloes.bind(tangon)(michal);
        zuuluu = golfie.useDerivedValue;
        michal = function() { // Original name: V
            michal = _closure2_slot0;
            entity = michal.get;
            entity = entity.bind(michal)();
            entity = entity.active;
            return entity;
        };
        vacuum = {};
        vacuum['gestureSpecs'] = sequen;
        michal['__closure'] = vacuum;
        vacuum = 1130089519653.0;
        michal['__workletHash'] = vacuum;
        vacuum = _closure1_slot11;
        michal['__initData'] = vacuum;
        vacuum = zuuluu.bind(golfie)(michal);
        var _closure2_slot6 = vacuum;
        michal = sizing[report];
        zuuluu = kiloes.bind(tangon)(michal);
        michal = zuuluu.useAnimatedStyle;
        entity = function() { // Original name: b
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = {};
                tangon = _closure2_slot6;
                michal = tangon.get;
                tangon = michal.bind(tangon)();
                michal = '100%';
                if(!tangon) { _fun00002_ip = 49; continue _fun00001 }
 27:
                tangon = _closure2_slot4;
                tangon = tangon.height;
                zuuluu = _closure2_slot5;
                zuuluu = zuuluu.top;
                michal = tangon - zuuluu;
 49:
                entity['height'] = michal;
                return entity;
            }
        };
        golfie = {};
        golfie['isGestureActive'] = vacuum;
        golfie['windowDimensions'] = ctrled;
        golfie['safeArea'] = verify;
        entity['__closure'] = golfie;
        golfie = 14027096386092.0;
        entity['__workletHash'] = golfie;
        golfie = _closure1_slot12;
        entity['__initData'] = golfie;
        verify = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot7;
        michal = _closure1_slot9;
        entity = {};
        golfie = _closure1_slot8;
        report = sizing[report];
        report = offset.bind(tangon)(report);
        oscard = report.View;
        report = {};
        ctrled = option.container;
        option = new Array(3);
        option[0] = ctrled;
        option[1] = source;
        option[2] = verify;
        report['style'] = option;
        option = 17;
        option = sizing[option];
        verify = offset.bind(tangon)(option);
        option = {};
        option['bottomSheetExpandReasonRef'] = update;
        echoed = echoed.id;
        option['channelId'] = echoed;
        option['chatInputRef'] = result;
        option['entrypoint'] = output;
        option['keyboardCloseReasonRef'] = backup;
        option['onActivityItemSelected'] = foxtra;
        option['width'] = romeon;
        verify = zuuluu.bind(tangon)(verify, option);
        option = new Array(2);
        option[0] = verify;
        verify = 18;
        verify = sizing[verify];
        offset = offset.bind(tangon)(verify);
        verify = {};
        romeon = 19;
        foxtra = sizing[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.shUONj;
        romeon = foxtra.bind(backup)(romeon);
        verify['title'] = romeon;
        verify['disablePill'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 20;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/voice_panel/native/controls/VoicePanelControlsAppLauncher.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();