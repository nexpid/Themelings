// app/modules/voice_panel/native/controls/VoicePanelVoiceControls.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    verify = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: NOOP
        entity = undefined;
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    kiloes = 1;
    tangon = oscard[kiloes];
    tangon = report.bind(entity)(tangon);
    romeon = tangon.StyleSheet;
    offset = tangon.ScrollView;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = verify.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.CONTROLS_DRAWER_HEADER_EXPANDED_SIZE;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    yankee = tangon.jsx;
    var _closure1_slot5 = yankee;
    yankee = tangon.jsxs;
    var _closure1_slot6 = yankee;
    tangon = tangon.Fragment;
    var _closure1_slot7 = tangon;
    yankee = romeon.create;
    tangon = {};
    foxtra = {};
    foxtra['flex'] = kiloes;
    tangon['wrapper'] = foxtra;
    foxtra = {};
    foxtra['flex'] = kiloes;
    backup = 5;
    sizing = oscard[backup];
    sizing = verify.bind(entity)(sizing);
    sizing = sizing.spacing;
    sizing = sizing.PX_16;
    foxtra['paddingHorizontal'] = sizing;
    tangon['scrollView'] = foxtra;
    foxtra = {};
    foxtra['flex'] = kiloes;
    kiloes = oscard[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    foxtra['paddingHorizontal'] = kiloes;
    foxtra['marginTop'] = option;
    tangon['scrollViewScreenReader'] = foxtra;
    foxtra = {};
    backup = oscard[backup];
    backup = verify.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    foxtra['marginBottom'] = backup;
    tangon['groupSpacing'] = foxtra;
    foxtra = {'position': 'absolute', 'top': 0, 'left': 0, 'right': 0};
    tangon['blur'] = foxtra;
    foxtra = {};
    foxtra['height'] = option;
    tangon['blurRegion'] = foxtra;
    foxtra = {};
    backup = 'relative';
    foxtra['position'] = backup;
    foxtra['height'] = option;
    tangon['blurRegionScreenReader'] = foxtra;
    tangon = yankee.bind(romeon)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    verify = verify.bind(entity)(tangon);
    tangon = verify.createAnimatedComponent;
    tangon = tangon.bind(verify)(offset);
    var _closure1_slot9 = tangon;
    verify = golfie.memo;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            source = entity.channel;
            oscard = _closure1_slot3;
            zuuluu = oscard.useContext;
            michal = _closure1_slot1;
            report = _closure1_slot2;
            entity = 7;
            entity = report[entity];
            tangon = undefined;
            entity = michal.bind(tangon)(entity);
            entity = zuuluu.bind(oscard)(entity);
            sequen = entity.channelId;
            entity = 8;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            romeon = entity.bind(tangon)(sequen);
            michal = _closure1_slot0;
            kiloes = 9;
            entity = report[kiloes];
            zuuluu = michal.bind(tangon)(entity);
            entity = zuuluu.useEmbeddedActivityLaunchability;
            verify = entity.bind(zuuluu)(sequen);
            entity = 10;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            zuuluu = entity.DeveloperMode;
            entity = zuuluu.useSetting;
            option = entity.bind(zuuluu)();
            zuuluu = _closure1_slot6;
            entity = 11;
            entity = report[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.Stack;
            entity = {};
            report = 24;
            entity['spacing'] = report;
            oscard = romeon;
            if(!romeon) { _fun00002_ip = 277; continue _fun00001 }
 162:
            yankee = _closure1_slot6;
            sizing = _closure1_slot0;
            result = _closure1_slot2;
            report = 12;
            report = result[report];
            report = sizing.bind(tangon)(report);
            golfie = report.TableRowGroup;
            report = {};
            output = _closure1_slot5;
            backup = 13;
            foxtra = result[backup];
            foxtra = sizing.bind(tangon)(foxtra);
            echoed = foxtra.SoundboardButton;
            foxtra = {};
            foxtra['channel'] = source;
            echoed = output.bind(tangon)(echoed, foxtra);
            foxtra = new Array(2);
            foxtra[0] = echoed;
            backup = result[backup];
            backup = sizing.bind(tangon)(backup);
            sizing = backup.ScreenshareButton;
            backup = {};
            backup['channel'] = source;
            backup = output.bind(tangon)(sizing, backup);
            foxtra[1] = backup;
            report['children'] = foxtra;
            oscard = yankee.bind(tangon)(golfie, report);
 277:
            report = new Array(7);
            report[0] = oscard;
            update = _closure1_slot5;
            echoed = _closure1_slot0;
            result = _closure1_slot2;
            backup = 13;
            oscard = result[backup];
            oscard = echoed.bind(tangon)(oscard);
            golfie = oscard.GameConsoles;
            oscard = {};
            oscard['channel'] = source;
            oscard['connected'] = romeon;
            oscard = update.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            oscard = result[backup];
            oscard = echoed.bind(tangon)(oscard);
            golfie = oscard.StreamVolumeItem;
            oscard = {};
            oscard = update.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            sizing = _closure1_slot6;
            golfie = 12;
            oscard = result[golfie];
            oscard = echoed.bind(tangon)(oscard);
            yankee = oscard.TableRowGroup;
            oscard = {};
            foxtra = 14;
            output = result[foxtra];
            output = echoed.bind(tangon)(output);
            vacuum = output.intl;
            ctrled = vacuum.string;
            output = result[foxtra];
            output = echoed.bind(tangon)(output);
            output = output.t;
            output = output.NiTd0d;
            output = ctrled.bind(vacuum)(output);
            oscard['title'] = output;
            output = result[backup];
            output = echoed.bind(tangon)(output);
            ctrled = output.DeafenSwitch;
            output = {};
            ctrled = update.bind(tangon)(ctrled, output);
            output = new Array(5);
            output[0] = ctrled;
            ctrled = result[backup];
            ctrled = echoed.bind(tangon)(ctrled);
            vacuum = ctrled.AudioRouteButton;
            ctrled = {};
            ctrled['channel'] = source;
            ctrled['connected'] = romeon;
            ctrled = update.bind(tangon)(vacuum, ctrled);
            output[1] = ctrled;
            ctrled = result[backup];
            ctrled = echoed.bind(tangon)(ctrled);
            vacuum = ctrled.HideNonVideoParticipants;
            ctrled = {};
            ctrled['channelId'] = sequen;
            ctrled = update.bind(tangon)(vacuum, ctrled);
            output[2] = ctrled;
            result = result[backup];
            result = echoed.bind(tangon)(result);
            echoed = result.HideSelfVideo;
            result = {};
            result = update.bind(tangon)(echoed, result);
            output[3] = result;
            result = romeon;
            if(!result) { _fun00002_ip = 613; continue _fun00001 }
 569:
            ctrled = _closure1_slot5;
            update = _closure1_slot0;
            echoed = _closure1_slot2;
            echoed = echoed[backup];
            echoed = update.bind(tangon)(echoed);
            update = echoed.InviteButton;
            echoed = {};
            echoed['channel'] = source;
            echoed['connected'] = romeon;
            result = ctrled.bind(tangon)(update, echoed);
 613:
            output[4] = result;
            oscard['children'] = output;
            oscard = sizing.bind(tangon)(yankee, oscard);
            report[3] = oscard;
            update = _closure1_slot5;
            echoed = _closure1_slot0;
            result = _closure1_slot2;
            oscard = 15;
            oscard = result[oscard];
            oscard = echoed.bind(tangon)(oscard);
            yankee = oscard.VoiceProcessingOptions;
            oscard = {};
            oscard = update.bind(tangon)(yankee, oscard);
            report[4] = oscard;
            sizing = _closure1_slot6;
            oscard = result[golfie];
            oscard = echoed.bind(tangon)(oscard);
            yankee = oscard.TableRowGroup;
            oscard = {};
            output = result[backup];
            output = echoed.bind(tangon)(output);
            ctrled = output.VoiceSettingsButton;
            output = {};
            vacuum = source.guild_id;
            output['guildId'] = vacuum;
            ctrled = update.bind(tangon)(ctrled, output);
            output = new Array(2);
            output[0] = ctrled;
            result = result[backup];
            result = echoed.bind(tangon)(result);
            echoed = result.ReportStreamIssueButton;
            result = {};
            result['channel'] = source;
            result = update.bind(tangon)(echoed, result);
            output[1] = result;
            oscard['children'] = output;
            oscard = sizing.bind(tangon)(yankee, oscard);
            report[5] = oscard;
            oscard = null;
            if(!romeon) { _fun00002_ip = 1009; continue _fun00001 }
 787:
            oscard = null;
            if(!option) { _fun00002_ip = 1009; continue _fun00001 }
 795:
            romeon = _closure1_slot0;
            option = _closure1_slot2;
            option = option[kiloes];
            option = romeon.bind(tangon)(option);
            option = option.EmbeddedActivityLaunchability;
            option = option.CAN_LAUNCH;
            oscard = null;
            if(!(verify === option)) { _fun00002_ip = 1009; continue _fun00001 }
 833:
            verify = _closure1_slot6;
            romeon = _closure1_slot0;
            yankee = _closure1_slot2;
            golfie = yankee[golfie];
            golfie = romeon.bind(tangon)(golfie);
            option = golfie.TableRowGroup;
            golfie = {};
            kiloes = yankee[foxtra];
            kiloes = romeon.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            foxtra = yankee[foxtra];
            foxtra = romeon.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.J6rqBw;
            foxtra = kiloes.bind(sizing)(foxtra);
            golfie['title'] = foxtra;
            foxtra = _closure1_slot5;
            offset = yankee[backup];
            offset = romeon.bind(tangon)(offset);
            kiloes = offset.LeaveActivitiesButton;
            offset = {};
            kiloes = foxtra.bind(tangon)(kiloes, offset);
            offset = new Array(3);
            offset[0] = kiloes;
            kiloes = yankee[backup];
            kiloes = romeon.bind(tangon)(kiloes);
            sizing = kiloes.ShareActivityLogsButton;
            kiloes = {};
            kiloes = foxtra.bind(tangon)(sizing, kiloes);
            offset[1] = kiloes;
            yankee = yankee[backup];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.ToggleShowActivitiesDebugOverlay;
            yankee = {};
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[2] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 1009:
            report[6] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    tangon = verify.bind(golfie)(tangon);
    var _closure1_slot10 = tangon;
    tangon = {};
    tangon['top'] = option;
    var _closure1_slot11 = tangon;
    tangon = {};
    option = 'function VoicePanelVoiceControlsTsx1({offset:offset}){const{isScrolled}=this.__closure;isScrolled.set(offset>0);}';
    tangon['code'] = option;
    var _closure1_slot12 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: VoicePanelVoiceControls
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            michal = michal.isVisible;
            var _closure2_slot0 = michal;
            report = _closure1_slot3;
            oscard = report.useContext;
            golfie = _closure1_slot1;
            romeon = _closure1_slot2;
            zuuluu = 7;
            zuuluu = romeon[zuuluu];
            tangon = undefined;
            zuuluu = golfie.bind(tangon)(zuuluu);
            zuuluu = oscard.bind(report)(zuuluu);
            zuuluu = zuuluu.channelId;
            var _closure2_slot1 = zuuluu;
            golfie = _closure1_slot0;
            zuuluu = 16;
            zuuluu = romeon[zuuluu];
            verify = golfie.bind(tangon)(zuuluu);
            option = verify.useStateFromStores;
            zuuluu = _closure1_slot4;
            oscard = new Array(1);
            oscard[0] = zuuluu;
            zuuluu = function() {
                zuuluu = _closure1_slot4;
                michal = zuuluu.getChannel;
                entity = _closure2_slot1;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            result = option.bind(verify)(oscard, zuuluu);
            zuuluu = 6;
            zuuluu = romeon[zuuluu];
            option = golfie.bind(tangon)(zuuluu);
            oscard = option.useSharedValue;
            zuuluu = false;
            yankee = oscard.bind(option)(zuuluu);
            var _closure2_slot2 = yankee;
            option = report.useCallback;
            oscard = function(argFoo) { // Original name: o
                entity = argFoo;
                tangon = entity.offset;
                zuuluu = _closure2_slot2;
                michal = zuuluu.set;
                entity = 0;
                entity = tangon > entity;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            zuuluu = {};
            zuuluu['isScrolled'] = yankee;
            oscard['__closure'] = zuuluu;
            zuuluu = 16758626276795.0;
            oscard['__workletHash'] = zuuluu;
            zuuluu = _closure1_slot12;
            oscard['__initData'] = zuuluu;
            zuuluu = new Array(1);
            zuuluu[0] = yankee;
            option = option.bind(report)(oscard, zuuluu);
            oscard = report.useContext;
            zuuluu = 17;
            zuuluu = romeon[zuuluu];
            zuuluu = golfie.bind(tangon)(zuuluu);
            zuuluu = zuuluu.ControlsGestureScrollLock;
            oscard = oscard.bind(report)(zuuluu);
            zuuluu = {};
            zuuluu['onScrollHandlerWorkletized'] = option;
            zuuluu = oscard.bind(tangon)(zuuluu);
            backup = zuuluu.onScroll;
            option = zuuluu.gestureRef;
            var _closure2_slot3 = option;
            kiloes = zuuluu.scrollerRef;
            var _closure2_slot4 = kiloes;
            foxtra = zuuluu.animatedProps;
            zuuluu = 18;
            zuuluu = romeon[zuuluu];
            oscard = golfie.bind(tangon)(zuuluu);
            zuuluu = oscard.useIsScreenReaderEnabled;
            oscard = zuuluu.bind(oscard)();
            verify = report.useEffect;
            zuuluu = new Array(2);
            zuuluu[0] = michal;
            zuuluu[1] = kiloes;
            michal = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    michal = _closure2_slot0;
                    if(!michal) { _fun00006_ip = 20; continue _fun00005 }
 10:
                    tangon = _closure2_slot4;
                    zuuluu = null;
                    michal = zuuluu != tangon;
 20:
                    if(!michal) { _fun00006_ip = 63; continue _fun00005 }
 23:
                    entity = _closure2_slot4;
                    zuuluu = entity.current;
                    entity = null;
                    if(!(entity != zuuluu)) { _fun00006_ip = 63; continue _fun00005 }
 38:
                    michal = zuuluu.scrollTo;
                    entity = {'x': 0, 'y': 0, 'animated': false};
                    entity = michal.bind(zuuluu)(entity);
 63:
                    entity = undefined;
                    return entity;
                }
            };
            michal = verify.bind(report)(michal, zuuluu);
            zuuluu = report.useMemo;
            michal = new Array(1);
            michal[0] = option;
            entity = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 19;
                    michal = michal[entity];
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
                    michal = entity.Gesture;
                    entity = michal.Native;
                    tangon = entity.bind(michal)();
                    report = _closure2_slot3;
                    zuuluu = null;
                    entity = tangon;
                    if(!(zuuluu != report)) { _fun00008_ip = 72; continue _fun00007 }
 57:
                    zuuluu = tangon.simultaneousWithExternalGesture;
                    michal = _closure2_slot3;
                    entity = zuuluu.bind(tangon)(michal);
 72:
                    return entity;
                }
            };
            verify = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot6;
            michal = _closure1_slot7;
            entity = {};
            option = _closure1_slot5;
            report = 19;
            report = romeon[report];
            report = golfie.bind(tangon)(report);
            golfie = report.GestureDetector;
            report = {};
            report['gesture'] = verify;
            romeon = _closure1_slot9;
            verify = {};
            output = _closure1_slot8;
            if(oscard) { _fun00004_ip = 416; continue _fun00003 }
 408:
            sizing = output.scrollView;
            _fun00004_ip = 422; continue _fun00003;
 416:
            sizing = output.scrollViewScreenReader;
 422:
            verify['style'] = sizing;
            verify['ref'] = kiloes;
            verify['onScroll'] = backup;
            verify['animatedProps'] = foxtra;
            foxtra = _closure1_slot13;
            verify['onMomentumScrollEnd'] = foxtra;
            foxtra = 8.333333333333334;
            verify['scrollEventThrottle'] = foxtra;
            foxtra = _closure1_slot11;
            verify['scrollIndicatorInsets'] = foxtra;
            backup = !oscard;
            if(!backup) { _fun00004_ip = 525; continue _fun00003 }
 479:
            sizing = _closure1_slot5;
            kiloes = _closure1_slot1;
            output = _closure1_slot2;
            foxtra = 20;
            foxtra = output[foxtra];
            kiloes = kiloes.bind(tangon)(foxtra);
            foxtra = {};
            output = _closure1_slot8;
            output = output.blurRegion;
            foxtra['style'] = output;
            backup = sizing.bind(tangon)(kiloes, foxtra);
 525:
            foxtra = new Array(3);
            foxtra[0] = backup;
            backup = null;
            backup = backup != result;
            if(!backup) { _fun00004_ip = 562; continue _fun00003 }
 542:
            output = _closure1_slot5;
            sizing = _closure1_slot10;
            kiloes = {};
            kiloes['channel'] = result;
            backup = output.bind(tangon)(sizing, kiloes);
 562:
            foxtra[1] = backup;
            sizing = _closure1_slot5;
            kiloes = _closure1_slot0;
            output = _closure1_slot2;
            backup = 21;
            backup = output[backup];
            backup = kiloes.bind(tangon)(backup);
            kiloes = backup.SafeAreaPaddingView;
            backup = {};
            output = true;
            backup['bottom'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[2] = backup;
            verify['children'] = foxtra;
            verify = zuuluu.bind(tangon)(romeon, verify);
            report['children'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            oscard = !oscard;
            if(!oscard) { _fun00004_ip = 699; continue _fun00003 }
 648:
            verify = _closure1_slot5;
            option = _closure1_slot1;
            romeon = _closure1_slot2;
            golfie = 22;
            golfie = romeon[golfie];
            option = option.bind(tangon)(golfie);
            golfie = {};
            golfie['shown'] = yankee;
            offset = _closure1_slot8;
            offset = offset.blurRegion;
            golfie['style'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 699:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 23;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/voice_panel/native/controls/VoicePanelVoiceControls.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();