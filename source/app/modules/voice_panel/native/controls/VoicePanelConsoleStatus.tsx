// app/modules/voice_panel/native/controls/VoicePanelConsoleStatus.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    golf = argBar;
    sizing = argBaz;
    zulu = argFred;
    options = argPlugh;
    var _closure1_slot0 = golf;
    var _closure1_slot1 = sizing;
    var _closure1_slot2 = options;
    report = function(argFoo) { // Original name: VoicePanelConsoleStatus
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zulu = argFoo;
            golf = zulu.wrapperSpecs;
            report = zulu.accessoryHeights;
            mike = zulu.state;
            var _closure2_slot0 = mike;
            romeo = zulu.cleanUp;
            var _closure2_slot1 = romeo;
            zulu = _closure1_slot10;
            tango = undefined;
            offset = zulu.bind(tango)();
            options = _closure1_slot3;
            oscar = options.useContext;
            control = _closure1_slot1;
            echo = _closure1_slot2;
            zulu = 8;
            zulu = echo[zulu];
            zulu = control.bind(tango)(zulu);
            zulu = oscar.bind(options)(zulu);
            yankee = zulu.channelId;
            options = zulu.windowDimensions;
            var _closure2_slot2 = options;
            zulu = zulu.mode;
            oscar = 9;
            oscar = echo[oscar];
            oscar = control.bind(tango)(oscar);
            oscar = oscar.bind(tango)(yankee);
            record = oscar.icon;
            sequence = oscar.text;
            backup = oscar.color;
            var _closure2_slot3 = backup;
            update = oscar.displayCancel;
            source = _closure1_slot0;
            oscar = 10;
            yankee = echo[oscar];
            kilo = source.bind(tango)(yankee);
            foxtrot = kilo.useSharedValue;
            yankee = false;
            foxtrot = foxtrot.bind(kilo)(yankee);
            var _closure2_slot4 = foxtrot;
            sizing = _closure1_slot3;
            kilo = sizing.useEffect;
            yankee = new Array(2);
            yankee[0] = foxtrot;
            yankee[1] = mike;
            mike = function() {
                tango = _closure2_slot4;
                zulu = tango.set;
                report = _closure2_slot0;
                oscar = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 11;
                mike = mike[entity];
                entity = undefined;
                mike = oscar.bind(entity)(mike);
                mike = mike.TransitionStates;
                mike = mike.YEETED;
                mike = report !== mike;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            mike = kilo.bind(sizing)(mike, yankee);
            mike = 12;
            mike = echo[mike];
            mike = control.bind(tango)(mike);
            golf = mike.bind(tango)(zulu, golf, report);
            mike = echo[oscar];
            report = source.bind(tango)(mike);
            zulu = report.useAnimatedStyle;
            mike = function() { // Original name: y
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    mike = _closure2_slot3;
                    entity['backgroundColor'] = mike;
                    zulu = _closure2_slot2;
                    mike = zulu.get;
                    mike = mike.bind(zulu)();
                    tango = mike.width;
                    report = _closure1_slot4;
                    zulu = 2;
                    zulu = zulu * report;
                    zulu = tango - zulu;
                    entity['width'] = zulu;
                    tango = _closure1_slot5;
                    zulu = _closure1_slot9;
                    zulu = tango + zulu;
                    entity['height'] = zulu;
                    zulu = 32;
                    entity['borderRadius'] = zulu;
                    zulu = {};
                    report = _closure1_slot0;
                    oscar = _closure1_slot2;
                    tango = 13;
                    tango = oscar[tango];
                    foxtrot = undefined;
                    options = report.bind(foxtrot)(tango);
                    golf = options.withSpring;
                    report = _closure2_slot4;
                    tango = report.get;
                    tango = tango.bind(report)();
                    oscar = 100;
                    if(!tango) { _fun00004_ip = 126; continue _fun00003 }
 124:
                    oscar = 0;
 126:
                    output = _closure1_slot11;
                    tango = function(argFoo) { // Original name: n
                        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                            entity = argFoo;
                            if(!entity) { _fun00006_ip = 25; continue _fun00005 }
 6:
                            zulu = _closure2_slot4;
                            mike = zulu.get;
                            mike = mike.bind(zulu)();
                            entity = !mike;
 25:
                            if(!entity) { _fun00006_ip = 74; continue _fun00005 }
 28:
                            zulu = _closure1_slot0;
                            mike = _closure1_slot2;
                            entity = 10;
                            entity = mike[entity];
                            mike = undefined;
                            tango = zulu.bind(mike)(entity);
                            zulu = tango.runOnJS;
                            entity = _closure2_slot1;
                            entity = zulu.bind(tango)(entity);
                            entity = entity.bind(mike)();
 74:
                            entity = undefined;
                            return entity;
                        }
                    };
                    verify = {};
                    yankee = _closure2_slot4;
                    verify['shouldShow'] = yankee;
                    romeo = _closure1_slot0;
                    backup = _closure1_slot2;
                    yankee = 10;
                    yankee = backup[yankee];
                    yankee = romeo.bind(foxtrot)(yankee);
                    yankee = yankee.runOnJS;
                    verify['runOnJS'] = yankee;
                    offset = _closure2_slot1;
                    verify['cleanUp'] = offset;
                    tango['__closure'] = verify;
                    verify = 9820708059867.0;
                    tango['__workletHash'] = verify;
                    mike = _closure1_slot13;
                    tango['__initData'] = mike;
                    sizing = 'respect-motion-settings';
                    echo = options;
                    result = oscar;
                    kilo = tango;
                    mike = echo[golf](result, output, sizing, kilo, backup);
                    zulu['translateY'] = mike;
                    mike = new Array(1);
                    mike[0] = zulu;
                    entity['transform'] = mike;
                    return entity;
                }
            };
            yankee = {};
            yankee['color'] = backup;
            yankee['windowDimensions'] = options;
            backup = _closure1_slot4;
            yankee['EDGE_GUTTER'] = backup;
            backup = _closure1_slot5;
            yankee['CONTROLS_HEIGHT'] = backup;
            backup = _closure1_slot9;
            yankee['CONSOLE_STATUS_HEIGHT'] = backup;
            backup = 13;
            backup = echo[backup];
            backup = source.bind(tango)(backup);
            backup = backup.withSpring;
            yankee['withSpring'] = backup;
            yankee['shouldShow'] = foxtrot;
            foxtrot = _closure1_slot11;
            yankee['FADE_IN_MODE_PHYSICS'] = foxtrot;
            foxtrot = echo[oscar];
            foxtrot = source.bind(tango)(foxtrot);
            foxtrot = foxtrot.runOnJS;
            yankee['runOnJS'] = foxtrot;
            yankee['cleanUp'] = romeo;
            mike['__closure'] = yankee;
            yankee = 14156265059426.0;
            mike['__workletHash'] = yankee;
            yankee = _closure1_slot12;
            mike['__initData'] = yankee;
            sizing = zulu.bind(report)(mike);
            mike = echo[oscar];
            zulu = source.bind(tango)(mike);
            mike = zulu.useAnimatedStyle;
            entity = function() { // Original name: b
                entity = {};
                zulu = _closure2_slot2;
                mike = zulu.get;
                mike = mike.bind(zulu)();
                zulu = mike.width;
                tango = _closure1_slot4;
                mike = 2;
                mike = mike * tango;
                mike = zulu - mike;
                entity['width'] = mike;
                return entity;
            };
            report = {};
            report['windowDimensions'] = options;
            options = _closure1_slot4;
            report['EDGE_GUTTER'] = options;
            entity['__closure'] = report;
            report = 2418678233810.0;
            entity['__workletHash'] = report;
            report = _closure1_slot14;
            entity['__initData'] = report;
            yankee = mike.bind(zulu)(entity);
            zulu = _closure1_slot8;
            entity = echo[oscar];
            entity = control.bind(tango)(entity);
            mike = entity.View;
            entity = {};
            options = offset.consoleParentContainer;
            report = new Array(2);
            report[0] = options;
            report[1] = golf;
            entity['style'] = report;
            options = _closure1_slot7;
            kilo = 14;
            report = echo[kilo];
            golf = control.bind(tango)(report);
            report = {};
            foxtrot = offset.consoleContainer;
            romeo = new Array(1);
            romeo[0] = foxtrot;
            report['style'] = romeo;
            backup = _closure1_slot7;
            romeo = echo[oscar];
            romeo = control.bind(tango)(romeo);
            foxtrot = romeo.View;
            romeo = {};
            romeo['style'] = sizing;
            output = _closure1_slot8;
            kilo = echo[kilo];
            sizing = control.bind(tango)(kilo);
            kilo = {};
            result = offset.consoleItemContainer;
            kilo['style'] = result;
            vacuum = _closure1_slot7;
            config = 15;
            result = echo[config];
            control = control.bind(tango)(result);
            result = {};
            result['source'] = record;
            record = _closure1_slot6;
            record = record.WHITE;
            result['color'] = record;
            config = echo[config];
            config = source.bind(tango)(config);
            config = config.IconSizes;
            config = config.SMALL;
            result['size'] = config;
            control = vacuum.bind(tango)(control, result);
            result = new Array(3);
            result[0] = control;
            control = _closure1_slot7;
            vacuum = 16;
            echo = echo[vacuum];
            echo = source.bind(tango)(echo);
            source = echo.Text;
            echo = {'variant': 'text-sm/medium', 'color': 'always-white'};
            config = offset.consoleText;
            echo['style'] = config;
            echo['children'] = sequence;
            echo = control.bind(tango)(source, echo);
            result[1] = echo;
            echo = null;
            if(!update) { _fun00002_ip = 893; continue _fun00001 }
 732:
            control = _closure1_slot7;
            target = _closure1_slot0;
            status = _closure1_slot2;
            update = 17;
            update = status[update];
            update = target.bind(tango)(update);
            source = update.PressableOpacity;
            update = {};
            sequence = 4;
            update['hitSlop'] = sequence;
            sequence = 18;
            sequence = status[sequence];
            sequence = target.bind(tango)(sequence);
            sequence = sequence.disconnectRemote;
            update['onPress'] = sequence;
            config = _closure1_slot7;
            vacuum = status[vacuum];
            vacuum = target.bind(tango)(vacuum);
            sequence = vacuum.Text;
            vacuum = {'variant': 'text-sm/medium', 'color': 'always-white'};
            record = 19;
            context = status[record];
            context = target.bind(tango)(context);
            papa = context.intl;
            context = papa.string;
            record = status[record];
            record = target.bind(tango)(record);
            record = record.t;
            record = record.ETE/oK;
            record = context.bind(papa)(record);
            vacuum['children'] = record;
            vacuum = config.bind(tango)(sequence, vacuum);
            update['children'] = vacuum;
            echo = control.bind(tango)(source, update);
 893:
            result[2] = echo;
            kilo['children'] = result;
            kilo = output.bind(tango)(sizing, kilo);
            romeo['children'] = kilo;
            romeo = backup.bind(tango)(foxtrot, romeo);
            report['children'] = romeo;
            golf = options.bind(tango)(golf, report);
            report = new Array(2);
            report[0] = golf;
            options = _closure1_slot7;
            golf = _closure1_slot1;
            romeo = _closure1_slot2;
            oscar = romeo[oscar];
            oscar = golf.bind(tango)(oscar);
            golf = oscar.View;
            oscar = {};
            foxtrot = offset.blockingControlCover;
            offset = new Array(2);
            offset[0] = foxtrot;
            offset[1] = yankee;
            oscar['style'] = offset;
            yankee = _closure1_slot7;
            offset = _closure1_slot0;
            verify = 20;
            verify = romeo[verify];
            verify = offset.bind(tango)(verify);
            offset = verify.VoicePanelVisualEffectView;
            verify = {};
            verify = yankee.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot15 = report;
    entity = global;
    verify = entity.Object;
    oscar = verify.defineProperty;
    tango = {};
    offset = true;
    tango['value'] = offset;
    entity = '__esModule';
    entity = oscar.bind(verify)(zulu, entity, tango);
    entity = 0;
    oscar = options[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(oscar);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = options[tango];
    tango = golf.bind(entity)(tango);
    update = tango.MODE_CHANGE_PHYSICS;
    tango = 2;
    tango = options[tango];
    tango = golf.bind(entity)(tango);
    tango = tango.EDGE_GUTTER;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = options[tango];
    tango = golf.bind(entity)(tango);
    backup = tango.CONTROLS_HEIGHT;
    var _closure1_slot5 = backup;
    tango = 4;
    tango = options[tango];
    tango = golf.bind(entity)(tango);
    tango = tango.Colors;
    var _closure1_slot6 = tango;
    tango = 5;
    oscar = options[tango];
    oscar = golf.bind(entity)(oscar);
    oscar = oscar.jsx;
    var _closure1_slot7 = oscar;
    tango = options[tango];
    tango = golf.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 36;
    var _closure1_slot9 = tango;
    oscar = 6;
    oscar = options[oscar];
    romeo = golf.bind(entity)(oscar);
    yankee = romeo.createStyles;
    oscar = {};
    output = 'hidden';
    foxtrot = {'zIndex': 1, 'position': 'absolute', 'bottom': 0, 'overflow': 'hidden', 'left': -0.5, 'right': 0, 'alignItems': 'center'};
    oscar['consoleParentContainer'] = foxtrot;
    foxtrot = {};
    kilo = 7;
    result = options[kilo];
    result = sizing.bind(entity)(result);
    result = result.radii;
    result = result.xxl;
    foxtrot['borderRadius'] = result;
    foxtrot['overflow'] = output;
    oscar['consoleContainer'] = foxtrot;
    foxtrot = {'flexDirection': 'row', 'alignItems': 'center', 'height': 36, 'marginHorizontal': 18};
    oscar['consoleItemContainer'] = foxtrot;
    foxtrot = {'textAlign': 'left', 'marginStart': 4, 'flex': 1};
    oscar['consoleText'] = foxtrot;
    foxtrot = {'position': 'absolute', 'bottom': 0, 'borderRadius': null, 'flex': 1, 'height': null, 'overflow': 'hidden'};
    kilo = options[kilo];
    kilo = sizing.bind(entity)(kilo);
    kilo = kilo.radii;
    kilo = kilo.xxl;
    foxtrot['borderRadius'] = kilo;
    foxtrot['height'] = backup;
    oscar['blockingControlCover'] = foxtrot;
    oscar = yankee.bind(romeo)(oscar);
    var _closure1_slot10 = oscar;
    oscar = {};
    source = oscar;
    verify = copyDataProperties(source, update);
    verify = 'overshootClamping';
    oscar[verify] = offset;
    var _closure1_slot11 = oscar;
    oscar = {};
    verify = "function VoicePanelConsoleStatusTsx1(){const{color,windowDimensions,EDGE_GUTTER,CONTROLS_HEIGHT,CONSOLE_STATUS_HEIGHT,withSpring,shouldShow,FADE_IN_MODE_PHYSICS,runOnJS,cleanUp}=this.__closure;return{backgroundColor:color,width:windowDimensions.get().width-EDGE_GUTTER*2,height:CONTROLS_HEIGHT+CONSOLE_STATUS_HEIGHT,borderRadius:32,transform:[{translateY:withSpring(shouldShow.get()?0:100,FADE_IN_MODE_PHYSICS,'respect-motion-settings',function(finished){if(finished&&!shouldShow.get()){runOnJS(cleanUp)();}})}]};}";
    oscar['code'] = verify;
    var _closure1_slot12 = oscar;
    oscar = {};
    verify = 'function VoicePanelConsoleStatusTsx2(finished){const{shouldShow,runOnJS,cleanUp}=this.__closure;if(finished&&!shouldShow.get()){runOnJS(cleanUp)();}}';
    oscar['code'] = verify;
    var _closure1_slot13 = oscar;
    oscar = {};
    verify = 'function VoicePanelConsoleStatusTsx3(){const{windowDimensions,EDGE_GUTTER}=this.__closure;return{width:windowDimensions.get().width-EDGE_GUTTER*2};}';
    oscar['code'] = verify;
    var _closure1_slot14 = oscar;
    oscar = 21;
    oscar = options[oscar];
    options = golf.bind(entity)(oscar);
    golf = options.fileFinishedImporting;
    oscar = 'modules/voice_panel/native/controls/VoicePanelConsoleStatus.tsx';
    oscar = golf.bind(options)(oscar);
    zulu['default'] = report;
    zulu['CONSOLE_STATUS_HEIGHT'] = tango;
    mike = function(argFoo, argBar, argBaz, argCorge) { // Original name: renderVoicePanelConsoleStatus
        report = _closure1_slot7;
        tango = _closure1_slot15;
        zulu = {};
        golf = argBar;
        options = zulu;
        entity = copyDataProperties(options, golf);
        mike = argBaz;
        entity = 'state';
        zulu[entity] = mike;
        mike = argCorge;
        entity = 'cleanUp';
        zulu[entity] = mike;
        mike = undefined;
        entity = argFoo;
        entity = report.bind(mike)(tango, zulu, entity);
        return entity;
    };
    zulu['renderVoicePanelConsoleStatus'] = mike;
    return entity;
})();