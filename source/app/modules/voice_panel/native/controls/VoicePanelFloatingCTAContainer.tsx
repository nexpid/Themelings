// app/modules/voice_panel/native/controls/VoicePanelFloatingCTAContainer.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    golfie = argBar;
    kiloes = argBaz;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = golfie;
    var _closure1_slot1 = kiloes;
    var _closure1_slot2 = option;
    entity = function(argFoo) { // Original name: FloatingCTA
        zuuluu = argFoo;
        verify = zuuluu.trailing;
        offset = null;
        michal = Object.create(offset);
        entity = 0;
        michal['trailing'] = entity;
        backup = {};
        foxtra = zuuluu;
        romeon = michal;
        foxtra = copyDataProperties(backup, foxtra, romeon);
        tangon = _closure1_slot9;
        oscard = _closure1_slot0;
        yankee = _closure1_slot2;
        entity = 10;
        entity = yankee[entity];
        zuuluu = undefined;
        entity = oscard.bind(zuuluu)(entity);
        michal = entity.Stack;
        entity = {};
        golfie = _closure1_slot9;
        report = 11;
        report = yankee[report];
        report = oscard.bind(zuuluu)(report);
        oscard = report.RowButton;
        report = {};
        yankee = true;
        report['experimental_withBlurBackground'] = yankee;
        offset = offset == verify;
        report['arrow'] = offset;
        report['trailing'] = verify;
        backup = report;
        option = copyDataProperties(backup, foxtra);
        report = golfie.bind(zuuluu)(oscard, report);
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    report = function(argFoo) { // Original name: VoicePanelFloatingCTAContainer
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            output = entity.wrapperSpecs;
            var _closure2_slot0 = output;
            kiloes = entity.accessoryHeights;
            var _closure2_slot1 = kiloes;
            source = entity.controlsSpecs;
            var _closure2_slot2 = source;
            ctrled = entity.state;
            var _closure2_slot3 = ctrled;
            result = entity.cleanUp;
            var _closure2_slot4 = result;
            sizing = entity.gestureState;
            var _closure2_slot5 = sizing;
            entity = _closure1_slot10;
            tangon = undefined;
            report = entity.bind(tangon)();
            golfie = _closure1_slot4;
            zuuluu = golfie.useContext;
            michal = _closure1_slot1;
            foxtra = _closure1_slot2;
            entity = 13;
            entity = foxtra[entity];
            entity = michal.bind(tangon)(entity);
            entity = zuuluu.bind(golfie)(entity);
            sequen = entity.windowDimensions;
            var _closure2_slot6 = sequen;
            yankee = entity.channelId;
            var _closure2_slot7 = yankee;
            vacuum = entity.safeArea;
            var _closure2_slot8 = vacuum;
            entity = 14;
            entity = foxtra[entity];
            entity = michal.bind(tangon)(entity);
            offset = entity.bind(tangon)(yankee);
            update = _closure1_slot0;
            entity = 15;
            entity = foxtra[entity];
            zuuluu = update.bind(tangon)(entity);
            entity = zuuluu.useGetDismissibleContent;
            golfie = entity.bind(zuuluu)(offset);
            zuuluu = _closure1_slot3;
            entity = 1;
            zuuluu = zuuluu.bind(tangon)(golfie, entity);
            entity = 0;
            entity = zuuluu[entity];
            var _closure2_slot9 = entity;
            zuuluu = 16;
            zuuluu = foxtra[zuuluu];
            romeon = update.bind(tangon)(zuuluu);
            option = romeon.useStateFromStores;
            zuuluu = _closure1_slot5;
            golfie = new Array(1);
            golfie[0] = zuuluu;
            zuuluu = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.getChannel;
                entity = _closure2_slot7;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            option = option.bind(romeon)(golfie, zuuluu);
            var _closure2_slot10 = option;
            romeon = _closure1_slot4;
            golfie = romeon.useMemo;
            zuuluu = new Array(2);
            zuuluu[0] = entity;
            zuuluu[1] = option;
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 17;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.getDismissableCTAProps;
                entity = {};
                report = _closure2_slot9;
                entity['dismissableContent'] = report;
                tangon = _closure2_slot10;
                entity['channel'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            golfie = golfie.bind(romeon)(entity, zuuluu);
            var _closure2_slot11 = golfie;
            entity = 17;
            entity = foxtra[entity];
            zuuluu = update.bind(tangon)(entity);
            entity = zuuluu.useFloatingCTAProps;
            romeon = entity.bind(zuuluu)(option);
            echoed = 18;
            entity = foxtra[echoed];
            option = update.bind(tangon)(entity);
            zuuluu = option.useAnimatedStyle;
            entity = function() { // Original name: A
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot0;
                    entity = _closure1_slot2;
                    michal = 19;
                    michal = entity[michal];
                    golfie = undefined;
                    offset = zuuluu.bind(golfie)(michal);
                    verify = offset.getControlsDefaultWidth;
                    report = _closure2_slot6;
                    michal = report.get;
                    michal = michal.bind(report)();
                    oscard = michal.width;
                    yankee = _closure2_slot8;
                    michal = yankee.get;
                    michal = michal.bind(yankee)();
                    report = michal.left;
                    michal = yankee.get;
                    michal = michal.bind(yankee)();
                    michal = michal.right;
                    report = verify.bind(offset)(oscard, report, michal);
                    michal = _closure2_slot3;
                    backup = 20;
                    entity = entity[backup];
                    entity = zuuluu.bind(golfie)(entity);
                    entity = entity.TransitionStates;
                    entity = entity.YEETED;
                    foxtra = 1;
                    if(!(michal === entity)) { _fun00004_ip = 128; continue _fun00003 }
 126:
                    foxtra = 0;
 128:
                    entity = {};
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.get;
                    michal = michal.bind(zuuluu)();
                    zuuluu = michal.height;
                    michal = 16;
                    michal = zuuluu + michal;
                    entity['bottom'] = michal;
                    entity['width'] = report;
                    zuuluu = _closure1_slot1;
                    offset = _closure1_slot2;
                    michal = 21;
                    michal = offset[michal];
                    zuuluu = zuuluu.bind(golfie)(michal);
                    michal = 2;
                    michal = report / michal;
                    zuuluu = zuuluu.bind(golfie)(michal);
                    michal = -1;
                    michal = michal * zuuluu;
                    entity['marginLeft'] = michal;
                    oscard = _closure1_slot0;
                    report = 22;
                    michal = offset[report];
                    romeon = oscard.bind(golfie)(michal);
                    yankee = romeon.withSpring;
                    result = _closure1_slot11;
                    zuuluu = function(argFoo) { // Original name: t
                        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                            entity = argFoo;
                            if(!entity) { _fun00006_ip = 54; continue _fun00005 }
 6:
                            zuuluu = _closure2_slot3;
                            report = _closure1_slot0;
                            tangon = _closure1_slot2;
                            michal = 20;
                            tangon = tangon[michal];
                            michal = undefined;
                            michal = report.bind(michal)(tangon);
                            michal = michal.TransitionStates;
                            michal = michal.YEETED;
                            entity = zuuluu === michal;
 54:
                            if(!entity) { _fun00006_ip = 103; continue _fun00005 }
 57:
                            zuuluu = _closure1_slot0;
                            michal = _closure1_slot2;
                            entity = 18;
                            entity = michal[entity];
                            michal = undefined;
                            tangon = zuuluu.bind(michal)(entity);
                            zuuluu = tangon.runOnJS;
                            entity = _closure2_slot4;
                            entity = zuuluu.bind(tangon)(entity);
                            entity = entity.bind(michal)();
 103:
                            entity = undefined;
                            return entity;
                        }
                    };
                    michal = {};
                    kiloes = _closure2_slot3;
                    michal['state'] = kiloes;
                    backup = offset[backup];
                    backup = oscard.bind(golfie)(backup);
                    backup = backup.TransitionStates;
                    michal['TransitionStates'] = backup;
                    backup = 18;
                    backup = offset[backup];
                    backup = oscard.bind(golfie)(backup);
                    backup = backup.runOnJS;
                    michal['runOnJS'] = backup;
                    backup = _closure2_slot4;
                    michal['cleanUp'] = backup;
                    zuuluu['__closure'] = michal;
                    michal = 7334460639890.0;
                    zuuluu['__workletHash'] = michal;
                    michal = _closure1_slot13;
                    zuuluu['__initData'] = michal;
                    output = 'respect-motion-settings';
                    update = romeon;
                    echoed = foxtra;
                    sizing = zuuluu;
                    michal = update[yankee](echoed, result, output, sizing, kiloes);
                    entity['opacity'] = michal;
                    zuuluu = {};
                    michal = offset[report];
                    foxtra = oscard.bind(golfie)(michal);
                    romeon = foxtra.withSpring;
                    verify = _closure2_slot0;
                    michal = verify.get;
                    michal = michal.bind(verify)();
                    yankee = michal.x;
                    michal = _closure1_slot6;
                    michal = romeon.bind(foxtra)(yankee, michal);
                    zuuluu['translateX'] = michal;
                    michal = new Array(2);
                    michal[0] = zuuluu;
                    zuuluu = {};
                    report = offset[report];
                    golfie = oscard.bind(golfie)(report);
                    oscard = golfie.withSpring;
                    report = verify.get;
                    report = report.bind(verify)();
                    report = report.hidden;
                    if(report) { _fun00004_ip = 514; continue _fun00003 }
 450:
                    verify = _closure2_slot5;
                    report = verify.get;
                    report = report.bind(verify)();
                    report = report.active;
                    if(!report) { _fun00004_ip = 494; continue _fun00003 }
 472:
                    verify = _closure2_slot5;
                    report = verify.get;
                    report = report.bind(verify)();
                    report = report.requiresPop;
                    if(!report) { _fun00004_ip = 514; continue _fun00003 }
 494:
                    verify = _closure2_slot0;
                    report = verify.get;
                    report = report.bind(verify)();
                    report = report.y;
                    _fun00004_ip = 557; continue _fun00003;
 514:
                    offset = _closure2_slot0;
                    verify = offset.get;
                    verify = verify.bind(offset)();
                    offset = verify.height;
                    verify = _closure1_slot7;
                    verify = offset + verify;
                    offset = _closure2_slot1;
                    option = offset.get;
                    option = option.bind(offset)();
                    report = verify + option;
 557:
                    tangon = _closure1_slot6;
                    tangon = oscard.bind(golfie)(report, tangon);
                    zuuluu['translateY'] = tangon;
                    michal[1] = zuuluu;
                    entity['transform'] = michal;
                    return entity;
                }
            };
            backup = {};
            config = 19;
            config = foxtra[config];
            config = update.bind(tangon)(config);
            config = config.getControlsDefaultWidth;
            backup['getControlsDefaultWidth'] = config;
            backup['windowDimensions'] = sequen;
            backup['safeArea'] = vacuum;
            backup['state'] = ctrled;
            ctrled = 20;
            ctrled = foxtra[ctrled];
            ctrled = update.bind(tangon)(ctrled);
            ctrled = ctrled.TransitionStates;
            backup['TransitionStates'] = ctrled;
            backup['controlsSpecs'] = source;
            source = 21;
            source = foxtra[source];
            source = michal.bind(tangon)(source);
            backup['roundToNearestPixel'] = source;
            source = 22;
            source = foxtra[source];
            source = update.bind(tangon)(source);
            source = source.withSpring;
            backup['withSpring'] = source;
            source = _closure1_slot11;
            backup['OPACITY_CHANGE_PHYSICS'] = source;
            echoed = foxtra[echoed];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.runOnJS;
            backup['runOnJS'] = echoed;
            backup['cleanUp'] = result;
            backup['wrapperSpecs'] = output;
            output = _closure1_slot6;
            backup['UI_SHOW_HIDE_PHYSICS'] = output;
            backup['gestureState'] = sizing;
            sizing = _closure1_slot7;
            backup['CALL_TILE_GUTTER'] = sizing;
            backup['accessoryHeights'] = kiloes;
            entity['__closure'] = backup;
            backup = 3338259366067.0;
            entity['__workletHash'] = backup;
            backup = _closure1_slot12;
            entity['__initData'] = backup;
            option = zuuluu.bind(option)(entity);
            zuuluu = _closure1_slot9;
            entity = 23;
            entity = foxtra[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            foxtra = report.container;
            report = new Array(2);
            report[0] = foxtra;
            report[1] = option;
            entity['style'] = report;
            report = null;
            if(!(report == golfie)) { _fun00002_ip = 664; continue _fun00001 }
 594:
            if(!(report == romeon)) { _fun00002_ip = 636; continue _fun00001 }
 598:
            option = _closure1_slot9;
            golfie = _closure1_slot1;
            foxtra = _closure1_slot2;
            report = 25;
            report = foxtra[report];
            golfie = golfie.bind(tangon)(report);
            report = {};
            report['channelId'] = yankee;
            report = option.bind(tangon)(golfie, report);
            _fun00002_ip = 662; continue _fun00001;
 636:
            yankee = _closure1_slot9;
            option = _closure1_slot14;
            golfie = {};
            cntext = golfie;
            record = romeon;
            romeon = copyDataProperties(cntext, record);
            report = yankee.bind(tangon)(option, golfie);
 662:
            _fun00002_ip = 712; continue _fun00001;
 664:
            option = _closure1_slot9;
            golfie = _closure1_slot1;
            yankee = _closure1_slot2;
            oscard = 24;
            oscard = yankee[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            oscard['contentTypes'] = offset;
            verify = function() { // Original name: children
                tangon = _closure1_slot9;
                zuuluu = _closure1_slot14;
                michal = {};
                report = _closure2_slot11;
                oscard = michal;
                entity = copyDataProperties(oscard, report);
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            oscard['children'] = verify;
            report = option.bind(tangon)(golfie, oscard);
 712:
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot15 = report;
    entity = global;
    verify = entity.Object;
    oscard = verify.defineProperty;
    tangon = {};
    offset = true;
    tangon['value'] = offset;
    entity = '__esModule';
    entity = oscard.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = option[entity];
    entity = undefined;
    tangon = kiloes.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    oscard = option[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(oscard);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = option[tangon];
    tangon = golfie.bind(entity)(tangon);
    oscard = tangon.TABLE_ROW_HEIGHT;
    tangon = 3;
    tangon = option[tangon];
    tangon = kiloes.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = option[tangon];
    tangon = golfie.bind(entity)(tangon);
    output = tangon.MODE_CHANGE_PHYSICS;
    tangon = tangon.UI_SHOW_HIDE_PHYSICS;
    var _closure1_slot6 = tangon;
    tangon = 5;
    tangon = option[tangon];
    tangon = golfie.bind(entity)(tangon);
    tangon = tangon.CALL_TILE_GUTTER;
    var _closure1_slot7 = tangon;
    tangon = 6;
    tangon = option[tangon];
    tangon = golfie.bind(entity)(tangon);
    tangon = tangon.ThemeTypes;
    var _closure1_slot8 = tangon;
    tangon = 7;
    tangon = option[tangon];
    tangon = golfie.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot9 = tangon;
    tangon = 16;
    tangon = oscard + tangon;
    oscard = 8;
    oscard = option[oscard];
    romeon = golfie.bind(entity)(oscard);
    yankee = romeon.createStyles;
    oscard = {};
    foxtra = {'zIndex': 1, 'position': 'absolute', 'bottom': 0, 'left': '50%', 'overflow': 'hidden', 'alignItems': 'center'};
    backup = 9;
    backup = option[backup];
    backup = kiloes.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.lg;
    foxtra['borderRadius'] = backup;
    oscard['container'] = foxtra;
    oscard = yankee.bind(romeon)(oscard);
    var _closure1_slot10 = oscard;
    oscard = {};
    result = oscard;
    verify = copyDataProperties(result, output);
    verify = 'overshootClamping';
    oscard[verify] = offset;
    var _closure1_slot11 = oscard;
    oscard = {};
    verify = "function VoicePanelFloatingCTAContainerTsx1(){const{getControlsDefaultWidth,windowDimensions,safeArea,state,TransitionStates,controlsSpecs,roundToNearestPixel,withSpring,OPACITY_CHANGE_PHYSICS,runOnJS,cleanUp,wrapperSpecs,UI_SHOW_HIDE_PHYSICS,gestureState,CALL_TILE_GUTTER,accessoryHeights}=this.__closure;const width=getControlsDefaultWidth(windowDimensions.get().width,safeArea.get().left,safeArea.get().right);const opacity=state===TransitionStates.YEETED?0:1;return{bottom:controlsSpecs.get().height+16,width:width,marginLeft:roundToNearestPixel(width/2)*-1,opacity:withSpring(opacity,OPACITY_CHANGE_PHYSICS,'respect-motion-settings',function(finished){if(finished&&state===TransitionStates.YEETED){runOnJS(cleanUp)();}}),transform:[{translateX:withSpring(wrapperSpecs.get().x,UI_SHOW_HIDE_PHYSICS)},{translateY:withSpring(wrapperSpecs.get().hidden||gestureState.get().active&&!gestureState.get().requiresPop?wrapperSpecs.get().height+CALL_TILE_GUTTER+accessoryHeights.get():wrapperSpecs.get().y,UI_SHOW_HIDE_PHYSICS)}]};}";
    oscard['code'] = verify;
    var _closure1_slot12 = oscard;
    oscard = {};
    verify = 'function VoicePanelFloatingCTAContainerTsx2(finished){const{state,TransitionStates,runOnJS,cleanUp}=this.__closure;if(finished&&state===TransitionStates.YEETED){runOnJS(cleanUp)();}}';
    oscard['code'] = verify;
    var _closure1_slot13 = oscard;
    oscard = 26;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = 'modules/voice_panel/native/controls/VoicePanelFloatingCTAContainer.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['default'] = report;
    zuuluu['FLOATING_CTA_TOTAL_VIEW_HEIGHT'] = tangon;
    michal = function(argFoo, argBar, argBaz, argCor) { // Original name: renderVoicePanelFloatingCTA
        report = _closure1_slot9;
        zuuluu = _closure1_slot0;
        tangon = _closure1_slot2;
        michal = 12;
        michal = tangon[michal];
        tangon = undefined;
        michal = zuuluu.bind(tangon)(michal);
        zuuluu = michal.ThemeContextProvider;
        michal = {};
        oscard = _closure1_slot8;
        oscard = oscard.DARK;
        michal['theme'] = oscard;
        golfie = _closure1_slot9;
        oscard = _closure1_slot15;
        entity = {};
        yankee = argBar;
        romeon = entity;
        option = copyDataProperties(romeon, yankee);
        verify = argBaz;
        option = 'state';
        entity[option] = verify;
        verify = argCor;
        option = 'cleanUp';
        entity[option] = verify;
        entity = golfie.bind(tangon)(oscard, entity);
        michal['children'] = entity;
        entity = argFoo;
        entity = report.bind(tangon)(zuuluu, michal, entity);
        return entity;
    };
    zuuluu['renderVoicePanelFloatingCTA'] = michal;
    return entity;
})();