// app/modules/creator_monetization_eligibility/CreatorMonetizationEligibilityExperiments.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    verify = argBar;
    zuuluu = argFre;
    offset = argPlu;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    kiloes = true;
    michal['value'] = kiloes;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    michal = 0;
    tangon = offset[michal];
    entity = undefined;
    oscard = verify.bind(entity)(tangon);
    report = oscard.createExperiment;
    tangon = {'kind': 'user', 'id': '2022-04_creator_monetization_country_allowlist', 'label': 'Creator Monetization Available in Country'};
    golfie = {};
    backup = false;
    golfie['isUserEligibleForCreatorMonetization'] = backup;
    tangon['defaultConfig'] = golfie;
    yankee = {'id': 1, 'label': 'Enables users to view Creator Monetization entrypoints'};
    option = 1;
    golfie = {};
    golfie['isUserEligibleForCreatorMonetization'] = kiloes;
    yankee['config'] = golfie;
    golfie = new Array(1);
    golfie[0] = yankee;
    tangon['treatments'] = golfie;
    golfie = report.bind(oscard)(tangon);
    tangon = offset[michal];
    oscard = verify.bind(entity)(tangon);
    report = oscard.createExperiment;
    tangon = {'kind': 'guild', 'id': '2022-09_creator_monetization_raven', 'label': 'Creator Monetization Onboarding v2'};
    yankee = {};
    yankee['enableFastMonetizationOnboardingForGuild'] = backup;
    tangon['defaultConfig'] = yankee;
    romeon = {'id': 1, 'label': 'Enables guild to create Guild Role Subscriptions quickly'};
    yankee = {};
    yankee['enableFastMonetizationOnboardingForGuild'] = kiloes;
    romeon['config'] = yankee;
    yankee = new Array(1);
    yankee[0] = romeon;
    tangon['treatments'] = yankee;
    oscard = report.bind(oscard)(tangon);
    tangon = offset[michal];
    yankee = verify.bind(entity)(tangon);
    report = yankee.createExperiment;
    tangon = {'kind': 'user', 'id': '2022-09_creator_monetization_raven_users', 'label': 'Creator Monetization Onboarding v2 Users'};
    romeon = {};
    romeon['enableFastMonetizationOnboardingForUser'] = backup;
    tangon['defaultConfig'] = romeon;
    foxtra = {'id': 1, 'label': 'Enables users to create Guild Role Subscriptions quickly'};
    romeon = {};
    romeon['enableFastMonetizationOnboardingForUser'] = kiloes;
    foxtra['config'] = romeon;
    romeon = new Array(1);
    romeon[0] = foxtra;
    tangon['treatments'] = romeon;
    report = report.bind(yankee)(tangon);
    tangon = offset[michal];
    romeon = verify.bind(entity)(tangon);
    yankee = romeon.createExperiment;
    tangon = {'kind': 'guild', 'id': '2022-11_creator_monetization_onboarding_waitlist', 'label': 'Creator Monetization Onboarding Waitlist'};
    foxtra = {};
    foxtra['enableWaitlist'] = backup;
    tangon['defaultConfig'] = foxtra;
    sizing = {'id': 1, 'label': 'Enables Guilds to (possibly) see the waitlist'};
    foxtra = {};
    foxtra['enableWaitlist'] = kiloes;
    sizing['config'] = foxtra;
    foxtra = new Array(1);
    foxtra[0] = sizing;
    tangon['treatments'] = foxtra;
    tangon = yankee.bind(romeon)(tangon);
    michal = offset[michal];
    romeon = verify.bind(entity)(michal);
    yankee = romeon.createExperiment;
    michal = {'kind': 'user', 'id': '2023-01_creator_monetization_nag_activate_users', 'label': 'Creator Monetization Nag Activate Users'};
    foxtra = {};
    foxtra['enableCreatorMonetizationNagActivateForUser'] = backup;
    michal['defaultConfig'] = foxtra;
    backup = {'id': 1, 'label': 'Enables users to see nag bar to activate server subscriptions'};
    foxtra = {};
    foxtra['enableCreatorMonetizationNagActivateForUser'] = kiloes;
    backup['config'] = foxtra;
    foxtra = new Array(1);
    foxtra[0] = backup;
    michal['treatments'] = foxtra;
    michal = yankee.bind(romeon)(michal);
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'modules/creator_monetization_eligibility/CreatorMonetizationEligibilityExperiments.tsx';
    option = verify.bind(offset)(option);
    zuuluu['CreatorMonetizationCountryAllowlistExperiment'] = golfie;
    zuuluu['CreatorMonetizationRavenOnboardingGuildExperiment'] = oscard;
    zuuluu['CreatorMonetizationRavenOnboardingUserExperiment'] = report;
    zuuluu['CreatorMonetizationOnboardingWaitlistExperiment'] = tangon;
    zuuluu['CreatorMonetizationNagActivateExperiment'] = michal;
    return entity;
})();