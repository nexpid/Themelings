// app/modules/keyboard/native/AnimatedKeyboardProviderReanimated.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    verify = 0;
    tangon = oscard[verify];
    michal = argCor;
    entity = undefined;
    offset = michal.bind(entity)(tangon);
    michal = 1;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    tangon = michal.jsx;
    var _closure1_slot3 = tangon;
    tangon = michal.Fragment;
    var _closure1_slot4 = tangon;
    michal = michal.jsxs;
    var _closure1_slot5 = michal;
    michal = 2;
    tangon = oscard[michal];
    golfie = report.bind(entity)(tangon);
    tangon = golfie.makeMutable;
    golfie = tangon.bind(golfie)(verify);
    var _closure1_slot6 = golfie;
    tangon = oscard[michal];
    verify = report.bind(entity)(tangon);
    tangon = verify.makeMutable;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    michal = michal.KeyboardState;
    michal = michal.UNKNOWN;
    tangon = tangon.bind(verify)(michal);
    var _closure1_slot7 = tangon;
    michal = {};
    verify = 'function AnimatedKeyboardProviderReanimatedTsx1(){const{systemKeyboardHeight}=this.__closure;return systemKeyboardHeight;}';
    michal['code'] = verify;
    var _closure1_slot8 = michal;
    michal = {};
    verify = 'function AnimatedKeyboardProviderReanimatedTsx2(systemKeyboardHeight){const{state,KeyboardState,animatedKeyboardHeight,animatedKeyboardState}=this.__closure;const isKeyboardOpeningOrClosing=state.get()===KeyboardState.OPENING||state.get()===KeyboardState.CLOSING;if(isKeyboardOpeningOrClosing){return;}animatedKeyboardHeight.set(systemKeyboardHeight);animatedKeyboardState.set(systemKeyboardHeight>0?KeyboardState.OPEN:KeyboardState.CLOSED);}';
    michal['code'] = verify;
    var _closure1_slot9 = michal;
    michal = {};
    verify = 'function AnimatedKeyboardProviderReanimatedTsx3(){const{height}=this.__closure;return height.get();}';
    michal['code'] = verify;
    var _closure1_slot10 = michal;
    michal = {};
    verify = 'function AnimatedKeyboardProviderReanimatedTsx4(height){const{animatedKeyboardHeight}=this.__closure;animatedKeyboardHeight.set(height);}';
    michal['code'] = verify;
    var _closure1_slot11 = michal;
    michal = {};
    verify = 'function AnimatedKeyboardProviderReanimatedTsx5(){const{state}=this.__closure;return state.get();}';
    michal['code'] = verify;
    var _closure1_slot12 = michal;
    michal = {};
    verify = 'function AnimatedKeyboardProviderReanimatedTsx6(state){const{animatedKeyboardState}=this.__closure;animatedKeyboardState.set(state);}';
    michal['code'] = verify;
    var _closure1_slot13 = michal;
    verify = offset.memo;
    michal = function(argFoo) {
        michal = argFoo;
        foxtra = michal.height;
        var _closure2_slot0 = foxtra;
        option = michal.state;
        var _closure2_slot1 = option;
        zuuluu = _closure1_slot1;
        oscard = _closure1_slot2;
        michal = 3;
        michal = oscard[michal];
        tangon = undefined;
        michal = zuuluu.bind(tangon)(michal);
        verify = michal.bind(tangon)();
        var _closure2_slot2 = verify;
        zuuluu = _closure1_slot0;
        michal = 2;
        golfie = oscard[michal];
        romeon = zuuluu.bind(tangon)(golfie);
        yankee = romeon.useAnimatedReaction;
        offset = function() { // Original name: s
            entity = _closure2_slot2;
            return entity;
        };
        golfie = {};
        golfie['systemKeyboardHeight'] = verify;
        offset['__closure'] = golfie;
        golfie = 15046795581306.0;
        offset['__workletHash'] = golfie;
        golfie = _closure1_slot8;
        offset['__initData'] = golfie;
        verify = function(argFoo) { // Original name: n
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                oscard = argFoo;
                michal = _closure2_slot1;
                entity = michal.get;
                tangon = entity.bind(michal)();
                option = _closure1_slot0;
                entity = _closure1_slot2;
                golfie = 2;
                michal = entity[golfie];
                entity = undefined;
                michal = option.bind(entity)(michal);
                michal = michal.KeyboardState;
                michal = michal.OPENING;
                michal = tangon === michal;
                if(michal) { _fun00002_ip = 109; continue _fun00001 }
 63:
                tangon = _closure2_slot1;
                zuuluu = tangon.get;
                tangon = zuuluu.bind(tangon)();
                option = _closure1_slot0;
                zuuluu = _closure1_slot2;
                zuuluu = zuuluu[golfie];
                zuuluu = option.bind(entity)(zuuluu);
                zuuluu = zuuluu.KeyboardState;
                zuuluu = zuuluu.CLOSING;
                michal = tangon === zuuluu;
 109:
                if(michal) { _fun00002_ip = 206; continue _fun00001 }
 112:
                zuuluu = _closure1_slot6;
                michal = zuuluu.set;
                michal = michal.bind(zuuluu)(oscard);
                tangon = _closure1_slot7;
                zuuluu = tangon.set;
                michal = 0;
                if(!(!(oscard > michal))) { _fun00002_ip = 172; continue _fun00001 }
 141:
                oscard = _closure1_slot0;
                michal = _closure1_slot2;
                michal = michal[golfie];
                michal = oscard.bind(entity)(michal);
                michal = michal.KeyboardState;
                michal = michal.CLOSED;
                _fun00002_ip = 201; continue _fun00001;
 172:
                oscard = _closure1_slot0;
                report = _closure1_slot2;
                report = report[golfie];
                report = oscard.bind(entity)(report);
                report = report.KeyboardState;
                michal = report.OPEN;
 201:
                michal = zuuluu.bind(tangon)(michal);
 206:
                return entity;
            }
        };
        kiloes = {};
        kiloes['state'] = option;
        golfie = oscard[michal];
        golfie = zuuluu.bind(tangon)(golfie);
        golfie = golfie.KeyboardState;
        kiloes['KeyboardState'] = golfie;
        backup = _closure1_slot6;
        kiloes['animatedKeyboardHeight'] = backup;
        golfie = _closure1_slot7;
        kiloes['animatedKeyboardState'] = golfie;
        verify['__closure'] = kiloes;
        kiloes = 15519038212238.0;
        verify['__workletHash'] = kiloes;
        kiloes = _closure1_slot9;
        verify['__initData'] = kiloes;
        verify = yankee.bind(romeon)(offset, verify);
        verify = oscard[michal];
        romeon = zuuluu.bind(tangon)(verify);
        yankee = romeon.useAnimatedReaction;
        offset = function() { // Original name: f
            michal = _closure2_slot0;
            entity = michal.get;
            entity = entity.bind(michal)();
            return entity;
        };
        verify = {};
        verify['height'] = foxtra;
        offset['__closure'] = verify;
        verify = 14085662561953.0;
        offset['__workletHash'] = verify;
        verify = _closure1_slot10;
        offset['__initData'] = verify;
        verify = function(argFoo) { // Original name: _
            zuuluu = _closure1_slot6;
            michal = zuuluu.set;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        foxtra = {};
        foxtra['animatedKeyboardHeight'] = backup;
        verify['__closure'] = foxtra;
        foxtra = 3358099714680.0;
        verify['__workletHash'] = foxtra;
        foxtra = _closure1_slot11;
        verify['__initData'] = foxtra;
        verify = yankee.bind(romeon)(offset, verify);
        michal = oscard[michal];
        tangon = zuuluu.bind(tangon)(michal);
        zuuluu = tangon.useAnimatedReaction;
        michal = function() { // Original name: v
            michal = _closure2_slot1;
            entity = michal.get;
            entity = entity.bind(michal)();
            return entity;
        };
        oscard = {};
        oscard['state'] = option;
        michal['__closure'] = oscard;
        oscard = 17144867155271.0;
        michal['__workletHash'] = oscard;
        oscard = _closure1_slot12;
        michal['__initData'] = oscard;
        entity = function(argFoo) { // Original name: H
            zuuluu = _closure1_slot7;
            michal = zuuluu.set;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        oscard = {};
        oscard['animatedKeyboardState'] = golfie;
        entity['__closure'] = oscard;
        oscard = 14587889692410.0;
        entity['__workletHash'] = oscard;
        report = _closure1_slot13;
        entity['__initData'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        entity = null;
        return entity;
    };
    michal = verify.bind(offset)(michal);
    var _closure1_slot14 = michal;
    michal = {};
    option = function(argFoo) { // Original name: Component
        entity = argFoo;
        golfie = entity.children;
        michal = _closure1_slot0;
        zuuluu = _closure1_slot2;
        entity = 2;
        entity = zuuluu[entity];
        tangon = undefined;
        zuuluu = michal.bind(tangon)(entity);
        michal = zuuluu.useAnimatedKeyboard;
        entity = {'isStatusBarTranslucentAndroid': true, 'isNavigationBarTranslucentAndroid': true};
        entity = michal.bind(zuuluu)(entity);
        offset = entity.height;
        verify = entity.state;
        zuuluu = _closure1_slot5;
        michal = _closure1_slot4;
        entity = {};
        report = new Array(2);
        report[0] = golfie;
        option = _closure1_slot3;
        golfie = _closure1_slot14;
        oscard = {};
        oscard['height'] = offset;
        oscard['state'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal['Component'] = option;
    michal['animatedKeyboardHeight'] = golfie;
    michal['animatedKeyboardState'] = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/keyboard/native/AnimatedKeyboardProviderReanimated.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();