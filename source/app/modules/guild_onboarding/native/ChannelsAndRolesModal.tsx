// app/modules/guild_onboarding/native/ChannelsAndRolesModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: ChannelsAndRolesScreen
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.guildId;
            var _closure2_slot0 = offset;
            zuuluu = entity.defaultTab;
            entity = _closure1_slot10;
            tangon = undefined;
            foxtra = entity.bind(tangon)();
            michal = _closure1_slot0;
            oscard = _closure1_slot2;
            entity = 8;
            entity = oscard[entity];
            option = michal.bind(tangon)(entity);
            report = option.useStateFromStores;
            entity = _closure1_slot6;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            michal = report.bind(option)(michal, entity);
            report = _closure1_slot1;
            entity = 9;
            entity = oscard[entity];
            entity = report.bind(tangon)(entity);
            report = entity.bind(tangon)(michal);
            michal = _closure1_slot4;
            entity = michal.useState;
            oscard = null;
            if(!(oscard == zuuluu)) { _fun00002_ip = 130; continue _fun00001 }
 119:
            option = 1;
            if(!report) { _fun00002_ip = 127; continue _fun00001 }
 125:
            option = 0;
 127:
            zuuluu = option;
 130:
            zuuluu = entity.bind(michal)(zuuluu);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            romeon = 0;
            option = michal[romeon];
            entity = 1;
            yankee = michal[entity];
            output = _closure1_slot0;
            result = _closure1_slot2;
            entity = 10;
            entity = result[entity];
            zuuluu = output.bind(tangon)(entity);
            michal = zuuluu.useSegmentedControlState;
            entity = {};
            entity['pageWidth'] = romeon;
            entity['defaultIndex'] = option;
            entity['onSetActiveIndex'] = yankee;
            romeon = 11;
            backup = result[romeon];
            backup = output.bind(tangon)(backup);
            sizing = backup.intl;
            kiloes = sizing.string;
            backup = result[romeon];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.F1Vixc;
            kiloes = kiloes.bind(sizing)(backup);
            backup = new Array(2);
            backup[0] = kiloes;
            kiloes = result[romeon];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            romeon = result[romeon];
            romeon = output.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.MWmtj4;
            romeon = kiloes.bind(sizing)(romeon);
            backup[1] = romeon;
            romeon = backup.map;
            verify = function(argFoo) {
                michal = argFoo;
                entity = {};
                entity['id'] = michal;
                entity['label'] = michal;
                michal = null;
                entity['page'] = michal;
                return entity;
            };
            verify = romeon.bind(backup)(verify);
            entity['items'] = verify;
            sizing = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot9;
            michal = _closure1_slot5;
            entity = {};
            verify = foxtra.screen;
            entity['style'] = verify;
            oscard = null;
            if(!report) { _fun00002_ip = 435; continue _fun00001 }
 363:
            romeon = _closure1_slot8;
            verify = _closure1_slot5;
            report = {};
            foxtra = foxtra.tabBar;
            report['style'] = foxtra;
            kiloes = _closure1_slot8;
            backup = _closure1_slot0;
            output = _closure1_slot2;
            foxtra = 12;
            foxtra = output[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.SegmentedControl;
            foxtra = {};
            foxtra['state'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            report['children'] = foxtra;
            oscard = romeon.bind(tangon)(verify, report);
 435:
            report = new Array(2);
            report[0] = oscard;
            oscard = _closure1_slot7;
            oscard = oscard.CUSTOMIZE;
            if(!(option !== oscard)) { _fun00002_ip = 495; continue _fun00001 }
 457:
            verify = _closure1_slot8;
            option = _closure1_slot1;
            romeon = _closure1_slot2;
            oscard = 14;
            oscard = romeon[oscard];
            option = option.bind(tangon)(oscard);
            oscard = {};
            oscard['guildId'] = offset;
            oscard = verify.bind(tangon)(option, oscard);
            _fun00002_ip = 536; continue _fun00001;
 495:
            verify = _closure1_slot8;
            option = _closure1_slot1;
            romeon = _closure1_slot2;
            golfie = 13;
            golfie = romeon[golfie];
            option = option.bind(tangon)(golfie);
            golfie = {};
            golfie['setTab'] = yankee;
            golfie['guildId'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 536:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot11 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    offset = 1;
    golfie = oscard[offset];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildOnboardingTab;
    var _closure1_slot7 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['flex'] = offset;
    offset = 7;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeon;
    tangon['screen'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['paddingHorizontal'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingTop'] = offset;
    tangon['tabBar'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 16;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_onboarding/native/ChannelsAndRolesModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ChannelsAndRolesModal
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            michal = entity.guildId;
            var _closure2_slot0 = michal;
            entity = entity.defaultTab;
            var _closure2_slot1 = entity;
            michal = _closure1_slot0;
            option = _closure1_slot2;
            entity = 8;
            entity = option[entity];
            tangon = undefined;
            oscard = michal.bind(tangon)(entity);
            zuuluu = oscard.useStateFromStores;
            entity = _closure1_slot6;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            zuuluu = zuuluu.bind(oscard)(michal, entity);
            michal = _closure1_slot1;
            entity = 9;
            entity = option[entity];
            entity = michal.bind(tangon)(entity);
            oscard = entity.bind(tangon)(zuuluu);
            zuuluu = _closure1_slot8;
            entity = 15;
            entity = option[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            option = 'channelAndRolesModal';
            entity['screenKey'] = option;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            golfie = 11;
            option = yankee[golfie];
            option = offset.bind(tangon)(option);
            verify = option.intl;
            option = verify.string;
            golfie = yankee[golfie];
            golfie = offset.bind(tangon)(golfie);
            golfie = golfie.t;
            if(oscard) { _fun00004_ip = 189; continue _fun00003 }
 176:
            oscard = golfie.et6wam;
            oscard = option.bind(verify)(oscard);
            _fun00004_ip = 200; continue _fun00003;
 189:
            golfie = golfie.h9mGOD;
            oscard = option.bind(verify)(golfie);
 200:
            entity['title'] = oscard;
            report = function() { // Original name: render
                tangon = _closure1_slot8;
                zuuluu = _closure1_slot11;
                michal = {};
                report = _closure2_slot0;
                michal['guildId'] = report;
                entity = _closure2_slot1;
                michal['defaultTab'] = entity;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            entity['render'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();