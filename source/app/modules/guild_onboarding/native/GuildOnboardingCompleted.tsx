// app/modules/guild_onboarding/native/GuildOnboardingCompleted.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    backup = tangon.StyleSheet;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {'flex': 1, 'position': 'relative'};
    golfie['screen'] = tangon;
    yankee = 24;
    tangon = {'backgroundColor': 'rgba(0, 0, 0, 0.5)', 'paddingHorizontal': 24, 'display': 'flex', 'justifyContent': 'center', 'flexGrow': 1};
    golfie['container'] = tangon;
    tangon = {};
    romeon = 8;
    offset = oscard[romeon];
    offset = foxtra.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_TERTIARY;
    tangon['backgroundColor'] = offset;
    golfie['containerWithoutSplash'] = tangon;
    tangon = {'position': 'absolute', 'width': '100%', 'height': '100%'};
    golfie['backgroundImage'] = tangon;
    tangon = {};
    golfie['title'] = tangon;
    tangon = {};
    offset = 16;
    tangon['marginTop'] = offset;
    golfie['subtitle'] = tangon;
    tangon = {'marginTop': 24, 'padding': 16, 'paddingBottom': 32};
    kiloes = oscard[romeon];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.sm;
    tangon['borderRadius'] = kiloes;
    kiloes = oscard[romeon];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_FLOATING;
    tangon['backgroundColor'] = kiloes;
    golfie['card'] = tangon;
    tangon = {};
    tangon['marginTop'] = offset;
    golfie['username'] = tangon;
    tangon = {};
    tangon['marginTop'] = romeon;
    golfie['rolesHeader'] = tangon;
    tangon = {'marginTop': 12, 'display': 'flex', 'flexDirection': 'row', 'flexWrap': 'wrap'};
    golfie['roles'] = tangon;
    tangon = {};
    tangon['marginRight'] = romeon;
    golfie['role'] = tangon;
    offset = {'paddingHorizontal': 8, 'height': 28, 'borderRadius': null, 'display': 'flex', 'justifyContent': 'center'};
    tangon = 28;
    kiloes = oscard[romeon];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.xs;
    offset['borderRadius'] = kiloes;
    backup = backup.hairlineWidth;
    offset['borderWidth'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MODIFIER_ACCENT;
    offset['borderColor'] = backup;
    golfie['roleOverflow'] = offset;
    offset = {'marginTop': 24, 'borderColor': null, 'borderWidth': 2, 'borderRadius': null, 'padding': 12, 'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MODIFIER_ACCENT;
    offset['borderColor'] = backup;
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    offset['borderRadius'] = romeon;
    golfie['animation'] = offset;
    offset = {};
    romeon = {};
    romeon['translateX'] = yankee;
    yankee = new Array(2);
    yankee[0] = romeon;
    romeon = {};
    foxtra = '5deg';
    romeon['rotate'] = foxtra;
    yankee[1] = romeon;
    offset['transform'] = yankee;
    golfie['wave'] = offset;
    offset = {'flexGrow': 1, 'marginLeft': 8};
    golfie['animationText'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot11 = golfie;
    golfie = {};
    option = "function GuildOnboardingCompletedTsx1(){const{withSequence,withTiming,withDelay,ANIMATION_DURATION,Easing,useReducedMotion}=this.__closure;const opacity=withSequence(withTiming(0,{duration:0}),withDelay(ANIMATION_DURATION,withTiming(0.5,{duration:ANIMATION_DURATION})),withTiming(1,{duration:ANIMATION_DURATION,easing:Easing.out(Easing.ease)}));const scale=withSequence(withTiming(1,{duration:0}),withDelay(ANIMATION_DURATION,withTiming(1.5,{duration:ANIMATION_DURATION,easing:Easing.out(Easing.ease)})),withTiming(1,{duration:useReducedMotion?1:ANIMATION_DURATION,easing:Easing.out(Easing.ease)}));const rawRotation=withSequence(withTiming('0deg',{duration:0}),withDelay(ANIMATION_DURATION,withTiming('-2deg',{duration:ANIMATION_DURATION})),withTiming('-5deg',{duration:ANIMATION_DURATION}));return{opacity:opacity,transform:[{rotate:rawRotation},{scale:scale}]};}";
    golfie['code'] = option;
    var _closure1_slot12 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/guild_onboarding/native/GuildOnboardingCompleted.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GuildOnboardingCompleted
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            papara = entity.guildId;
            var _closure2_slot0 = papara;
            yankee = entity.prompts;
            offset = entity.completeOnboarding;
            var _closure2_slot1 = offset;
            zuuluu = entity.onClose;
            var _closure2_slot2 = zuuluu;
            report = undefined;
            var _closure2_slot8 = report;
            var _closure2_slot9 = report;
            var _closure2_slot10 = report;
            entity = _closure1_slot11;
            config = entity.bind(report)();
            var _closure2_slot3 = config;
            oscard = _closure1_slot0;
            option = _closure1_slot2;
            entity = 9;
            entity = option[entity];
            michal = oscard.bind(report)(entity);
            entity = michal.useNavigation;
            tangon = entity.bind(michal)();
            var _closure2_slot4 = tangon;
            michal = 10;
            entity = option[michal];
            romeon = oscard.bind(report)(entity);
            verify = romeon.useStateFromStores;
            entity = _closure1_slot7;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                michal = _closure1_slot7;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            record = verify.bind(romeon)(golfie, entity);
            entity = option[michal];
            foxtra = oscard.bind(report)(entity);
            romeon = foxtra.useStateFromStores;
            entity = _closure1_slot6;
            verify = new Array(1);
            verify[0] = entity;
            golfie = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            variable36 = romeon.bind(foxtra)(verify, golfie);
            var _closure2_slot5 = variable36;
            golfie = option[michal];
            romeon = oscard.bind(report)(golfie);
            verify = romeon.useStateFromStores;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getRoles;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            entity = verify.bind(romeon)(golfie, entity);
            var _closure2_slot6 = entity;
            golfie = _closure1_slot1;
            entity = 11;
            entity = option[entity];
            entity = golfie.bind(report)(entity);
            foxtra = entity.bind(report)(papara);
            var _closure2_slot7 = foxtra;
            entity = 12;
            entity = option[entity];
            golfie = oscard.bind(report)(entity);
            entity = golfie.useThemeContext;
            entity = entity.bind(golfie)();
            golfie = entity.theme;
            entity = 13;
            entity = option[entity];
            oscard = oscard.bind(report)(entity);
            entity = oscard.useProfileThemeValues;
            golfie = entity.bind(oscard)(golfie);
            whisks = {};
            entity = null;
            option = entity == golfie;
            oscard = undefined;
            if(option) { _fun00002_ip = 316; continue _fun00001 }
 310:
            oscard = golfie.rolePillBackgroundColor;
 316:
            whisks['backgroundColor'] = oscard;
            oscard = entity != variable36;
            echoed = null;
            if(!oscard) { _fun00002_ip = 412; continue _fun00001 }
 329:
            romeon = _closure1_slot1;
            backup = _closure1_slot2;
            oscard = 14;
            oscard = backup[oscard];
            option = romeon.bind(report)(oscard);
            golfie = option.getGuildSplashURL;
            oscard = {};
            verify = variable36.id;
            oscard['id'] = verify;
            verify = variable36.splash;
            oscard['splash'] = verify;
            verify = 15;
            verify = backup[verify];
            verify = romeon.bind(report)(verify);
            romeon = verify.bind(report)();
            verify = 400;
            verify = verify * romeon;
            oscard['size'] = verify;
            echoed = golfie.bind(option)(oscard);
 412:
            verify = _closure1_slot0;
            option = _closure1_slot2;
            oscard = option[michal];
            kiloes = verify.bind(report)(oscard);
            backup = kiloes.useStateFromStoresArray;
            oscard = _closure1_slot8;
            romeon = new Array(1);
            romeon[0] = oscard;
            golfie = new Array(1);
            golfie[0] = papara;
            oscard = function() {
                zuuluu = _closure1_slot8;
                michal = zuuluu.getOnboardingResponses;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            oscard = backup.bind(kiloes)(romeon, oscard, golfie);
            _closure2_slot8 = oscard;
            golfie = yankee.map;
            oscard = function(argFoo) {
                entity = argFoo;
                entity = entity.options;
                return entity;
            };
            golfie = golfie.bind(yankee)(oscard);
            oscard = golfie.flat;
            yankee = oscard.bind(golfie)();
            golfie = yankee.filter;
            oscard = function(argFoo) {
                zuuluu = _closure2_slot8;
                michal = zuuluu.includes;
                entity = argFoo;
                entity = entity.id;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            oscard = golfie.bind(yankee)(oscard);
            _closure2_slot9 = oscard;
            golfie = _closure1_slot3;
            romeon = golfie.useMemo;
            yankee = new Array(2);
            yankee[0] = foxtra;
            yankee[1] = oscard;
            oscard = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    report = _closure2_slot9;
                    michal = report.map;
                    entity = function(argFoo) {
                        entity = argFoo;
                        entity = entity.roleIds;
                        return entity;
                    };
                    michal = michal.bind(report)(entity);
                    entity = michal.flat;
                    report = entity.bind(michal)();
                    michal = report.filter;
                    golfie = _closure1_slot0;
                    oscard = _closure1_slot2;
                    entity = 16;
                    oscard = oscard[entity];
                    entity = undefined;
                    entity = golfie.bind(entity)(oscard);
                    entity = entity.isNotNullish;
                    michal = michal.bind(report)(entity);
                    entity = {};
                    report = _closure2_slot7;
                    zuuluu = null;
                    report = zuuluu != report;
                    option = 0;
                    zuuluu = 0;
                    if(!report) { _fun00004_ip = 162; continue _fun00003 }
 94:
                    report = michal.length;
                    report = report > option;
                    zuuluu = 0;
                    if(!report) { _fun00004_ip = 162; continue _fun00003 }
 108:
                    report = global;
                    oscard = report.Math;
                    report = oscard.max;
                    golfie = michal.map;
                    tangon = function(argFoo) {
                        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                            michal = _closure2_slot7;
                            entity = argFoo;
                            michal = michal[entity];
                            entity = null;
                            zuuluu = entity != michal;
                            entity = 0;
                            if(!zuuluu) { _fun00006_ip = 28; continue _fun00005 }
 25:
                            entity = michal;
 28:
                            return entity;
                        }
                    };
                    offset = golfie.bind(michal)(tangon);
                    tangon = new Array(0);
                    yankee = tangon;
                    verify = 0;
                    golfie = arraySpread(yankee, offset, verify);
                    yankee = report;
                    offset = tangon;
                    verify = oscard;
                    zuuluu = apply(yankee, offset, verify);
 162:
                    entity['numSharedRoleMembers'] = zuuluu;
                    entity['allSelectedRoleIds'] = michal;
                    return entity;
                }
            };
            oscard = romeon.bind(golfie)(oscard, yankee);
            variable39 = oscard.numSharedRoleMembers;
            sierra = oscard.allSelectedRoleIds;
            yankee = golfie.useLayoutEffect;
            oscard = new Array(1);
            oscard[0] = tangon;
            tangon = function() {
                zuuluu = _closure2_slot4;
                michal = zuuluu.setOptions;
                entity = {};
                tangon = function() { // Original name: headerLeft
                    entity = null;
                    return entity;
                };
                entity['headerLeft'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            tangon = yankee.bind(golfie)(tangon, oscard);
            oscard = golfie.useEffect;
            tangon = new Array(2);
            tangon[0] = offset;
            tangon[1] = zuuluu;
            zuuluu = function() {
                entity = global;
                tangon = entity.setTimeout;
                entity = undefined;
                zuuluu = function() {
                    zuuluu = _closure2_slot1;
                    entity = undefined;
                    zuuluu = zuuluu.bind(entity)();
                    michal = _closure2_slot2;
                    michal = michal.bind(entity)();
                    return entity;
                };
                michal = 3600;
                michal = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            zuuluu = oscard.bind(golfie)(zuuluu, tangon);
            michal = option[michal];
            oscard = verify.bind(report)(michal);
            tangon = oscard.useStateFromStores;
            michal = _closure1_slot5;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                entity = _closure1_slot5;
                entity = entity.useReducedMotion;
                return entity;
            };
            golfie = tangon.bind(oscard)(zuuluu, michal);
            _closure2_slot10 = golfie;
            result = 17;
            michal = option[result];
            tangon = verify.bind(report)(michal);
            zuuluu = tangon.useAnimatedStyle;
            michal = function() { // Original name: q
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    offset = _closure1_slot0;
                    entity = _closure1_slot2;
                    report = 17;
                    michal = entity[report];
                    yankee = undefined;
                    foxtra = offset.bind(yankee)(michal);
                    option = foxtra.withSequence;
                    romeon = 18;
                    michal = entity[romeon];
                    tangon = offset.bind(yankee)(michal);
                    zuuluu = tangon.withTiming;
                    michal = {};
                    oscard = 0;
                    michal['duration'] = oscard;
                    golfie = zuuluu.bind(tangon)(oscard, michal);
                    michal = entity[report];
                    backup = offset.bind(yankee)(michal);
                    tangon = backup.withDelay;
                    michal = entity[romeon];
                    output = offset.bind(yankee)(michal);
                    sizing = output.withTiming;
                    kiloes = {};
                    michal = 400;
                    kiloes['duration'] = michal;
                    zuuluu = 0.5;
                    zuuluu = sizing.bind(output)(zuuluu, kiloes);
                    tangon = tangon.bind(backup)(michal, zuuluu);
                    zuuluu = entity[romeon];
                    kiloes = offset.bind(yankee)(zuuluu);
                    backup = kiloes.withTiming;
                    zuuluu = {};
                    zuuluu['duration'] = michal;
                    sizing = entity[report];
                    sizing = offset.bind(yankee)(sizing);
                    result = sizing.Easing;
                    output = result.out;
                    sizing = entity[report];
                    sizing = offset.bind(yankee)(sizing);
                    sizing = sizing.Easing;
                    sizing = sizing.ease;
                    sizing = output.bind(result)(sizing);
                    zuuluu['easing'] = sizing;
                    sizing = 1;
                    zuuluu = backup.bind(kiloes)(sizing, zuuluu);
                    zuuluu = option.bind(foxtra)(golfie, tangon, zuuluu);
                    tangon = entity[report];
                    foxtra = offset.bind(yankee)(tangon);
                    option = foxtra.withSequence;
                    tangon = entity[romeon];
                    backup = offset.bind(yankee)(tangon);
                    golfie = backup.withTiming;
                    tangon = {};
                    tangon['duration'] = oscard;
                    golfie = golfie.bind(backup)(sizing, tangon);
                    tangon = entity[report];
                    kiloes = offset.bind(yankee)(tangon);
                    backup = kiloes.withDelay;
                    tangon = entity[romeon];
                    echoed = offset.bind(yankee)(tangon);
                    result = echoed.withTiming;
                    output = {};
                    output['duration'] = michal;
                    tangon = entity[report];
                    tangon = offset.bind(yankee)(tangon);
                    source = tangon.Easing;
                    update = source.out;
                    tangon = entity[report];
                    tangon = offset.bind(yankee)(tangon);
                    tangon = tangon.Easing;
                    tangon = tangon.ease;
                    tangon = update.bind(source)(tangon);
                    output['easing'] = tangon;
                    tangon = 1.5;
                    tangon = result.bind(echoed)(tangon, output);
                    tangon = backup.bind(kiloes)(michal, tangon);
                    entity = entity[romeon];
                    kiloes = offset.bind(yankee)(entity);
                    backup = kiloes.withTiming;
                    entity = {};
                    output = _closure2_slot10;
                    offset = sizing;
                    if(output) { _fun00008_ip = 395; continue _fun00007 }
 392:
                    offset = michal;
 395:
                    entity['duration'] = offset;
                    offset = _closure1_slot0;
                    verify = _closure1_slot2;
                    output = verify[report];
                    output = offset.bind(yankee)(output);
                    echoed = output.Easing;
                    result = echoed.out;
                    output = verify[report];
                    output = offset.bind(yankee)(output);
                    output = output.Easing;
                    output = output.ease;
                    output = result.bind(echoed)(output);
                    entity['easing'] = output;
                    entity = backup.bind(kiloes)(sizing, entity);
                    tangon = option.bind(foxtra)(golfie, tangon, entity);
                    entity = {};
                    entity['opacity'] = zuuluu;
                    zuuluu = {};
                    golfie = verify[report];
                    option = offset.bind(yankee)(golfie);
                    golfie = option.withSequence;
                    foxtra = verify[romeon];
                    kiloes = offset.bind(yankee)(foxtra);
                    backup = kiloes.withTiming;
                    foxtra = {};
                    foxtra['duration'] = oscard;
                    oscard = '0deg';
                    oscard = backup.bind(kiloes)(oscard, foxtra);
                    report = verify[report];
                    backup = offset.bind(yankee)(report);
                    foxtra = backup.withDelay;
                    report = verify[romeon];
                    output = offset.bind(yankee)(report);
                    sizing = output.withTiming;
                    kiloes = {};
                    kiloes['duration'] = michal;
                    report = '-2deg';
                    report = sizing.bind(output)(report, kiloes);
                    report = foxtra.bind(backup)(michal, report);
                    verify = verify[romeon];
                    yankee = offset.bind(yankee)(verify);
                    offset = yankee.withTiming;
                    verify = {};
                    verify['duration'] = michal;
                    michal = '-5deg';
                    michal = offset.bind(yankee)(michal, verify);
                    michal = golfie.bind(option)(oscard, report, michal);
                    zuuluu['rotate'] = michal;
                    michal = new Array(2);
                    michal[0] = zuuluu;
                    zuuluu = {};
                    zuuluu['scale'] = tangon;
                    michal[1] = zuuluu;
                    entity['transform'] = michal;
                    return entity;
                }
            };
            oscard = {};
            offset = option[result];
            offset = verify.bind(report)(offset);
            offset = offset.withSequence;
            oscard['withSequence'] = offset;
            offset = 18;
            offset = option[offset];
            offset = verify.bind(report)(offset);
            offset = offset.withTiming;
            oscard['withTiming'] = offset;
            offset = option[result];
            offset = verify.bind(report)(offset);
            offset = offset.withDelay;
            oscard['withDelay'] = offset;
            offset = 400;
            oscard['ANIMATION_DURATION'] = offset;
            option = option[result];
            option = verify.bind(report)(option);
            option = option.Easing;
            oscard['Easing'] = option;
            oscard['useReducedMotion'] = golfie;
            michal['__closure'] = oscard;
            oscard = 8282245217026.0;
            michal['__workletHash'] = oscard;
            oscard = _closure1_slot12;
            michal['__initData'] = oscard;
            vacuum = zuuluu.bind(tangon)(michal);
            if(!(entity != record)) { _fun00002_ip = 2278; continue _fun00001 }
 819:
            if(!(entity != variable36)) { _fun00002_ip = 2278; continue _fun00001 }
 826:
            michal = sierra.length;
            status = 3;
            variable37 = michal - status;
            tangon = _closure1_slot10;
            zuuluu = _closure1_slot4;
            michal = {};
            oscard = config.screen;
            michal['style'] = oscard;
            oscard = entity != echoed;
            golfie = null;
            if(!oscard) { _fun00002_ip = 920; continue _fun00001 }
 867:
            verify = _closure1_slot9;
            option = _closure1_slot1;
            offset = _closure1_slot2;
            oscard = 19;
            oscard = offset[oscard];
            option = option.bind(report)(oscard);
            oscard = {};
            offset = {};
            offset['uri'] = echoed;
            oscard['source'] = offset;
            offset = config.backgroundImage;
            oscard['style'] = offset;
            golfie = verify.bind(report)(option, oscard);
 920:
            oscard = new Array(2);
            oscard[0] = golfie;
            verify = _closure1_slot9;
            option = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = 20;
            golfie = offset[golfie];
            golfie = option.bind(report)(golfie);
            option = golfie.SafeAreaPaddingView;
            golfie = {};
            offset = true;
            golfie['bottom'] = offset;
            yankee = config.container;
            offset = new Array(2);
            offset[0] = yankee;
            romeon = entity == echoed;
            yankee = null;
            if(!romeon) { _fun00002_ip = 994; continue _fun00001 }
 988:
            yankee = config.containerWithoutSplash;
 994:
            offset[1] = yankee;
            golfie['style'] = offset;
            romeon = _closure1_slot10;
            yankee = _closure1_slot4;
            offset = {};
            update = _closure1_slot9;
            backup = _closure1_slot0;
            foxtra = _closure1_slot2;
            target = 21;
            foxtra = foxtra[target];
            foxtra = backup.bind(report)(foxtra);
            sizing = foxtra.Text;
            foxtra = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xxl/extrabold'};
            backup = config.title;
            foxtra['style'] = backup;
            kiloes = entity == echoed;
            output = 'always-white';
            backup = output;
            if(!kiloes) { _fun00002_ip = 1088; continue _fun00001 }
 1082:
            backup = 'header-primary';
 1088:
            foxtra['color'] = backup;
            kiloes = _closure1_slot0;
            backup = _closure1_slot2;
            limora = 22;
            source = backup[limora];
            source = kiloes.bind(report)(source);
            equals = source.intl;
            cntext = equals.string;
            source = backup[limora];
            source = kiloes.bind(report)(source);
            source = source.t;
            source = source.PFWIYW;
            source = cntext.bind(equals)(source);
            foxtra['children'] = source;
            sizing = update.bind(report)(sizing, foxtra);
            foxtra = new Array(3);
            foxtra[0] = sizing;
            sizing = _closure1_slot9;
            backup = backup[target];
            backup = kiloes.bind(report)(backup);
            kiloes = backup.Text;
            backup = {'style': null, 'accessibilityRole': 'header', 'variant': 'text-md/medium'};
            update = config.subtitle;
            backup['style'] = update;
            echoed = entity == echoed;
            if(!echoed) { _fun00002_ip = 1224; continue _fun00001 }
 1218:
            output = 'text-muted';
 1224:
            backup['color'] = output;
            update = _closure1_slot0;
            echoed = _closure1_slot2;
            output = echoed[limora];
            output = update.bind(report)(output);
            cntext = output.intl;
            source = cntext.string;
            output = echoed[limora];
            output = update.bind(report)(output);
            output = output.t;
            output = output.og4NNj;
            output = source.bind(cntext)(output);
            backup['children'] = output;
            backup = sizing.bind(report)(kiloes, backup);
            foxtra[1] = backup;
            sizing = _closure1_slot10;
            kiloes = _closure1_slot4;
            backup = {};
            output = config.card;
            backup['style'] = output;
            source = _closure1_slot9;
            cntext = _closure1_slot1;
            equals = 23;
            output = echoed[equals];
            cntext = cntext.bind(report)(output);
            output = {};
            equals = echoed[equals];
            equals = update.bind(report)(equals);
            equals = equals.AvatarSizes;
            equals = equals.XXLARGE;
            output['size'] = equals;
            output['user'] = record;
            output['guildId'] = papara;
            papara = false;
            output['animate'] = papara;
            cntext = source.bind(report)(cntext, output);
            output = new Array(5);
            output[0] = cntext;
            echoed = echoed[target];
            echoed = update.bind(report)(echoed);
            update = echoed.Text;
            echoed = {'style': null, 'variant': 'heading-xl/semibold', 'color': 'header-primary'};
            cntext = config.username;
            echoed['style'] = cntext;
            record = record.username;
            echoed['children'] = record;
            echoed = source.bind(report)(update, echoed);
            output[1] = echoed;
            cntext = 0;
            update = variable39 > cntext;
            echoed = null;
            if(!update) { _fun00002_ip = 1577; continue _fun00001 }
 1461:
            record = _closure1_slot9;
            equals = _closure1_slot0;
            papara = _closure1_slot2;
            update = papara[target];
            update = equals.bind(report)(update);
            source = update.Text;
            update = {'style': null, 'variant': 'text-sm/normal', 'color': 'text-muted'};
            quebec = config.rolesHeader;
            update['style'] = quebec;
            quebec = papara[limora];
            quebec = equals.bind(report)(quebec);
            variable38 = quebec.intl;
            quebec = variable38.format;
            papara = papara[limora];
            papara = equals.bind(report)(papara);
            papara = papara.t;
            equals = papara.l1Jc1t;
            papara = {};
            papara['numSharedRoleMembers'] = variable39;
            papara = quebec.bind(variable38)(equals, papara);
            update['children'] = papara;
            echoed = record.bind(report)(source, update);
 1577:
            output[2] = echoed;
            source = _closure1_slot10;
            update = _closure1_slot4;
            echoed = {};
            record = config.roles;
            echoed['style'] = record;
            papara = sierra.map;
            record = function(argFoo) {
                michal = _closure2_slot6;
                entity = argFoo;
                entity = michal[entity];
                return entity;
            };
            sierra = papara.bind(sierra)(record);
            papara = sierra.filter;
            equals = _closure1_slot0;
            quebec = _closure1_slot2;
            record = 16;
            record = quebec[record];
            record = equals.bind(report)(record);
            record = record.isNotNullish;
            papara = papara.bind(sierra)(record);
            record = papara.slice;
            papara = record.bind(papara)(cntext, status);
            record = papara.map;
            sequen = function(argFoo) {
                entity = argFoo;
                report = _closure1_slot9;
                tangon = _closure1_slot4;
                zuuluu = {};
                oscard = _closure2_slot3;
                oscard = oscard.role;
                zuuluu['style'] = oscard;
                golfie = _closure1_slot1;
                oscard = _closure1_slot2;
                michal = 24;
                oscard = oscard[michal];
                michal = undefined;
                golfie = golfie.bind(michal)(oscard);
                oscard = {};
                oscard['role'] = entity;
                option = _closure2_slot5;
                option = option.id;
                oscard['guildId'] = option;
                option = true;
                oscard['disableInteraction'] = option;
                oscard = report.bind(michal)(golfie, oscard);
                zuuluu['children'] = oscard;
                entity = entity.id;
                entity = report.bind(michal)(tangon, zuuluu, entity);
                return entity;
            };
            record = record.bind(papara)(sequen);
            sequen = new Array(2);
            sequen[0] = record;
            record = null;
            if(!(variable37 > cntext)) { _fun00002_ip = 1802; continue _fun00001 }
 1692:
            status = _closure1_slot9;
            papara = _closure1_slot4;
            cntext = {};
            equals = config.roleOverflow;
            sierra = new Array(2);
            sierra[0] = equals;
            sierra[1] = whisks;
            cntext['style'] = sierra;
            whisks = _closure1_slot0;
            sierra = _closure1_slot2;
            sierra = sierra[target];
            sierra = whisks.bind(report)(sierra);
            whisks = sierra.Text;
            sierra = {'variant': 'heading-deprecated-12/semibold', 'color': 'header-primary'};
            equals = global;
            equals = equals.HermesInternal;
            quebec = equals.concat;
            equals = '+';
            equals = quebec.bind(equals)(variable37);
            sierra['children'] = equals;
            sierra = status.bind(report)(whisks, sierra);
            cntext['children'] = sierra;
            record = status.bind(report)(papara, cntext);
 1802:
            sequen[1] = record;
            echoed['children'] = sequen;
            echoed = source.bind(report)(update, echoed);
            output[3] = echoed;
            update = _closure1_slot10;
            cntext = _closure1_slot1;
            papara = _closure1_slot2;
            result = papara[result];
            result = cntext.bind(report)(result);
            echoed = result.View;
            result = {};
            sequen = config.animation;
            source = new Array(2);
            source[0] = sequen;
            source[1] = vacuum;
            result['style'] = source;
            sequen = _closure1_slot9;
            record = 25;
            source = papara[record];
            vacuum = cntext.bind(report)(source);
            source = {};
            source['guild'] = variable36;
            status = _closure1_slot0;
            record = papara[record];
            record = status.bind(report)(record);
            record = record.GuildIconSizes;
            record = record.LARGE;
            source['size'] = record;
            vacuum = sequen.bind(report)(vacuum, source);
            source = new Array(3);
            source[0] = vacuum;
            vacuum = _closure1_slot4;
            ctrled = {};
            record = config.animationText;
            ctrled['style'] = record;
            record = papara[target];
            record = status.bind(report)(record);
            sierra = record.Text;
            record = {'variant': 'text-sm/medium', 'color': 'header-primary'};
            whisks = papara[limora];
            whisks = status.bind(report)(whisks);
            quebec = whisks.intl;
            equals = quebec.format;
            limora = papara[limora];
            limora = status.bind(report)(limora);
            limora = limora.t;
            whisks = limora.FXREhY;
            limora = {};
            variable36 = variable36.name;
            limora['guildName'] = variable36;
            limora = equals.bind(quebec)(whisks, limora);
            record['children'] = limora;
            sierra = sequen.bind(report)(sierra, record);
            record = new Array(2);
            record[0] = sierra;
            target = papara[target];
            target = status.bind(report)(target);
            status = target.Text;
            target = {'variant': 'text-xs/normal', 'color': 'text-muted'};
            sierra = 26;
            sierra = papara[sierra];
            sierra = cntext.bind(report)(sierra);
            whisks = sierra.bind(report)();
            limora = whisks.format;
            sierra = 'LL';
            whisks = limora.bind(whisks)(sierra);
            sierra = global;
            sierra = sierra.HermesInternal;
            limora = sierra.concat;
            sierra = '';
            sierra = limora.bind(sierra)(whisks);
            target['children'] = sierra;
            target = sequen.bind(report)(status, target);
            record[1] = target;
            ctrled['children'] = record;
            ctrled = update.bind(report)(vacuum, ctrled);
            source[1] = ctrled;
            ctrled = 19;
            ctrled = papara[ctrled];
            vacuum = cntext.bind(report)(ctrled);
            ctrled = {};
            record = 27;
            record = papara[record];
            record = cntext.bind(report)(record);
            ctrled['source'] = record;
            config = config.wave;
            ctrled['style'] = config;
            ctrled = sequen.bind(report)(vacuum, ctrled);
            source[2] = ctrled;
            result['children'] = source;
            result = update.bind(report)(echoed, result);
            output[4] = result;
            backup['children'] = output;
            backup = sizing.bind(report)(kiloes, backup);
            foxtra[2] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 2278:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();