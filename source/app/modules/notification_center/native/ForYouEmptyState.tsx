// app/modules/notification_center/native/ForYouEmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Image;
    var _closure1_slot3 = golf;
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'maxWidth': 250, 'resizeMode': 'contain', 'marginBottom': 16};
    tango['image'] = verify;
    offset = 'center';
    verify = {'paddingHorizontal': 48, 'alignItems': 'center', 'justifyContent': 'center'};
    tango['container'] = verify;
    verify = {'fontSize': 18, 'marginTop': 16, 'marginBottom': 8};
    tango['headerText'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tango['text'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 7;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/notification_center/native/ForYouEmptyState.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) {
        entity = argFoo;
        options = entity.height;
        entity = _closure1_slot7;
        tango = undefined;
        offset = entity.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot4;
        entity = {};
        golf = offset.container;
        report = new Array(2);
        report[0] = golf;
        golf = {};
        golf['height'] = options;
        report[1] = golf;
        entity['style'] = report;
        options = _closure1_slot5;
        golf = _closure1_slot3;
        report = {};
        verify = offset.image;
        report['style'] = verify;
        yankee = _closure1_slot1;
        foxtrot = _closure1_slot2;
        verify = 4;
        verify = foxtrot[verify];
        verify = yankee.bind(tango)(verify);
        report['source'] = verify;
        golf = options.bind(tango)(golf, report);
        report = new Array(3);
        report[0] = golf;
        romeo = _closure1_slot0;
        oscar = 5;
        golf = foxtrot[oscar];
        golf = romeo.bind(tango)(golf);
        yankee = golf.Text;
        golf = {'accessibilityRole': 'header', 'color': 'header-primary', 'variant': 'heading-md/bold'};
        backup = offset.text;
        verify = new Array(2);
        verify[0] = backup;
        backup = offset.headerText;
        verify[1] = backup;
        golf['style'] = verify;
        verify = 6;
        backup = foxtrot[verify];
        backup = romeo.bind(tango)(backup);
        sizing = backup.intl;
        kilo = sizing.string;
        backup = foxtrot[verify];
        backup = romeo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.MwjTvr;
        backup = kilo.bind(sizing)(backup);
        golf['children'] = backup;
        golf = options.bind(tango)(yankee, golf);
        report[1] = golf;
        oscar = foxtrot[oscar];
        oscar = romeo.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {'color': 'text-normal', 'variant': 'text-md/medium'};
        offset = offset.text;
        oscar['style'] = offset;
        offset = foxtrot[verify];
        offset = romeo.bind(tango)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtrot[verify];
        verify = romeo.bind(tango)(verify);
        verify = verify.t;
        verify = verify.AKBgPz;
        verify = offset.bind(yankee)(verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['ForYouEmptyState'] = mike;
    return entity;
})();