// app/modules/notification_center/native/ForYouEmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'maxWidth': 250, 'resizeMode': 'contain', 'marginBottom': 16};
    tangon['image'] = verify;
    offset = 'center';
    verify = {'paddingHorizontal': 48, 'alignItems': 'center', 'justifyContent': 'center'};
    tangon['container'] = verify;
    verify = {'fontSize': 18, 'marginTop': 16, 'marginBottom': 8};
    tangon['headerText'] = verify;
    verify = {};
    verify['textAlign'] = offset;
    tangon['text'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/notification_center/native/ForYouEmptyState.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) {
        entity = argFoo;
        option = entity.height;
        entity = _closure1_slot7;
        tangon = undefined;
        offset = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot4;
        entity = {};
        golfie = offset.container;
        report = new Array(2);
        report[0] = golfie;
        golfie = {};
        golfie['height'] = option;
        report[1] = golfie;
        entity['style'] = report;
        option = _closure1_slot5;
        golfie = _closure1_slot3;
        report = {};
        verify = offset.image;
        report['style'] = verify;
        yankee = _closure1_slot1;
        foxtra = _closure1_slot2;
        verify = 4;
        verify = foxtra[verify];
        verify = yankee.bind(tangon)(verify);
        report['source'] = verify;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        romeon = _closure1_slot0;
        oscard = 5;
        golfie = foxtra[oscard];
        golfie = romeon.bind(tangon)(golfie);
        yankee = golfie.Text;
        golfie = {'accessibilityRole': 'header', 'color': 'header-primary', 'variant': 'heading-md/bold'};
        backup = offset.text;
        verify = new Array(2);
        verify[0] = backup;
        backup = offset.headerText;
        verify[1] = backup;
        golfie['style'] = verify;
        verify = 6;
        backup = foxtra[verify];
        backup = romeon.bind(tangon)(backup);
        sizing = backup.intl;
        kiloes = sizing.string;
        backup = foxtra[verify];
        backup = romeon.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.MwjTvr;
        backup = kiloes.bind(sizing)(backup);
        golfie['children'] = backup;
        golfie = option.bind(tangon)(yankee, golfie);
        report[1] = golfie;
        oscard = foxtra[oscard];
        oscard = romeon.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'color': 'text-normal', 'variant': 'text-md/medium'};
        offset = offset.text;
        oscard['style'] = offset;
        offset = foxtra[verify];
        offset = romeon.bind(tangon)(offset);
        yankee = offset.intl;
        offset = yankee.string;
        verify = foxtra[verify];
        verify = romeon.bind(tangon)(verify);
        verify = verify.t;
        verify = verify.AKBgPz;
        verify = offset.bind(yankee)(verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['ForYouEmptyState'] = michal;
    return entity;
})();