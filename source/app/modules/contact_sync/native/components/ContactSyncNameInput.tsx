// app/modules/contact_sync/native/components/ContactSyncNameInput.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    backup = 0;
    tangon = oscard[backup];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    offset = 1;
    golfie = oscard[offset];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {};
    tangon['flex'] = offset;
    golfie['flex'] = tangon;
    kiloes = 16;
    tangon = {'flex': 1, 'padding': 16, 'paddingBottom': 0};
    golfie['content'] = tangon;
    yankee = 8;
    tangon = {'marginBottom': 8, 'textAlign': 'center'};
    golfie['title'] = tangon;
    tangon = {'lineHeight': 18, 'textAlign': 'center', 'marginBottom': 16};
    golfie['subtitle'] = tangon;
    offset = {'width': '100%', 'marginTop': 8, 'marginBottom': 12, 'padding': 12};
    tangon = 12;
    romeon = 5;
    sizing = oscard[romeon];
    sizing = foxtra.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BACKGROUND_TERTIARY;
    offset['backgroundColor'] = sizing;
    sizing = oscard[romeon];
    sizing = foxtra.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.lg;
    offset['borderRadius'] = sizing;
    golfie['input'] = offset;
    offset = {};
    offset['lineHeight'] = kiloes;
    golfie['formSubtitle'] = offset;
    offset = {};
    offset['flexGrow'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['paddingTop'] = backup;
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    offset['paddingBottom'] = romeon;
    golfie['button'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    golfie['error'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/contact_sync/native/components/ContactSyncNameInput.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            sizing = entity.loading;
            verify = entity.error;
            report = entity.initialName;
            backup = entity.prefilledFromContactBook;
            tangon = undefined;
            if(!(backup === tangon)) { _fun00002_ip = 36; continue _fun00001 }
 34:
            backup = false;
 36:
            michal = entity.onNext;
            var _closure2_slot0 = michal;
            entity = entity.onRemoveName;
            var _closure2_slot1 = entity;
            var _closure2_slot2 = tangon;
            michal = _closure1_slot8;
            offset = michal.bind(tangon)();
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            report = michal.bind(zuuluu)(report);
            zuuluu = _closure1_slot3;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(report, michal);
            michal = 0;
            output = zuuluu[michal];
            _closure2_slot2 = output;
            michal = 1;
            record = zuuluu[michal];
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 6;
            michal = report[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = {};
            ctrled = true;
            michal['includeKeyboardHeightIOS'] = ctrled;
            michal = zuuluu.bind(tangon)(michal);
            romeon = michal.insets;
            golfie = null;
            option = golfie != entity;
            report = _closure1_slot0;
            entity = _closure1_slot2;
            update = 7;
            michal = entity[update];
            michal = report.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = entity[update];
            entity = report.bind(tangon)(entity);
            entity = entity.t;
            if(option) { _fun00002_ip = 221; continue _fun00001 }
 208:
            report = entity.PDTjLC;
            result = michal.bind(zuuluu)(report);
            _fun00002_ip = 232; continue _fun00001;
 221:
            entity = entity.i4jeWV;
            result = michal.bind(zuuluu)(entity);
 232:
            zuuluu = _closure1_slot7;
            michal = _closure1_slot5;
            entity = {};
            yankee = offset.content;
            report = new Array(2);
            report[0] = yankee;
            yankee = {};
            romeon = romeon.bottom;
            yankee['paddingBottom'] = romeon;
            report[1] = yankee;
            entity['style'] = report;
            report = {};
            yankee = offset.flex;
            report['style'] = yankee;
            echoed = _closure1_slot6;
            romeon = _closure1_slot0;
            yankee = _closure1_slot2;
            foxtra = 8;
            yankee = yankee[foxtra];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            source = offset.title;
            yankee['style'] = source;
            vacuum = _closure1_slot0;
            source = _closure1_slot2;
            sequen = source[update];
            sequen = vacuum.bind(tangon)(sequen);
            config = sequen.intl;
            sequen = config.string;
            source = source[update];
            source = vacuum.bind(tangon)(source);
            vacuum = source.t;
            if(option) { _fun00002_ip = 399; continue _fun00001 }
 384:
            source = vacuum.sO+NIy;
            source = sequen.bind(config)(source);
            _fun00002_ip = 412; continue _fun00001;
 399:
            vacuum = vacuum./OywGR;
            source = sequen.bind(config)(vacuum);
 412:
            yankee['children'] = source;
            romeon = echoed.bind(tangon)(romeon, yankee);
            yankee = new Array(5);
            yankee[0] = romeon;
            source = _closure1_slot6;
            echoed = _closure1_slot0;
            romeon = _closure1_slot2;
            romeon = romeon[foxtra];
            romeon = echoed.bind(tangon)(romeon);
            echoed = romeon.Text;
            romeon = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            vacuum = offset.subtitle;
            romeon['style'] = vacuum;
            sequen = _closure1_slot0;
            vacuum = _closure1_slot2;
            config = vacuum[update];
            config = sequen.bind(tangon)(config);
            cntext = config.intl;
            config = cntext.string;
            vacuum = vacuum[update];
            vacuum = sequen.bind(tangon)(vacuum);
            sequen = vacuum.t;
            if(option) { _fun00002_ip = 541; continue _fun00001 }
 526:
            vacuum = sequen.xI496O;
            vacuum = config.bind(cntext)(vacuum);
            _fun00002_ip = 554; continue _fun00001;
 541:
            sequen = sequen.xCHh/v;
            vacuum = config.bind(cntext)(sequen);
 554:
            romeon['children'] = vacuum;
            romeon = source.bind(tangon)(echoed, romeon);
            yankee[1] = romeon;
            source = _closure1_slot6;
            sequen = _closure1_slot0;
            config = _closure1_slot2;
            romeon = config[foxtra];
            romeon = sequen.bind(tangon)(romeon);
            echoed = romeon.Text;
            romeon = {'variant': 'eyebrow', 'color': 'interactive-normal'};
            vacuum = config[update];
            vacuum = sequen.bind(tangon)(vacuum);
            papara = vacuum.intl;
            cntext = papara.string;
            vacuum = config[update];
            vacuum = sequen.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.42/D2d;
            vacuum = cntext.bind(papara)(vacuum);
            romeon['children'] = vacuum;
            romeon = source.bind(tangon)(echoed, romeon);
            yankee[2] = romeon;
            echoed = _closure1_slot1;
            vacuum = 9;
            romeon = config[vacuum];
            echoed = echoed.bind(tangon)(romeon);
            romeon = {'value': null, 'onChangeText': null, 'style': null, 'autoFocus': true, 'showBorder': false, 'showTopContainer': false};
            romeon['value'] = output;
            romeon['onChangeText'] = record;
            record = offset.input;
            romeon['style'] = record;
            vacuum = config[vacuum];
            vacuum = sequen.bind(tangon)(vacuum);
            vacuum = vacuum.ClearButtonVisibility;
            vacuum = vacuum.WITH_CONTENT;
            romeon['clearButtonVisibility'] = vacuum;
            romeon['autoCorrect'] = ctrled;
            ctrled = 'name';
            romeon['autoComplete'] = ctrled;
            romeon['textContentType'] = ctrled;
            romeon = source.bind(tangon)(echoed, romeon);
            yankee[3] = romeon;
            romeon = null;
            if(!backup) { _fun00002_ip = 886; continue _fun00001 }
 782:
            echoed = _closure1_slot6;
            sequen = _closure1_slot0;
            source = _closure1_slot2;
            foxtra = source[foxtra];
            foxtra = sequen.bind(tangon)(foxtra);
            backup = foxtra.Text;
            foxtra = {'style': null, 'variant': 'text-xs/medium', 'color': 'header-secondary'};
            ctrled = offset.formSubtitle;
            foxtra['style'] = ctrled;
            ctrled = source[update];
            ctrled = sequen.bind(tangon)(ctrled);
            vacuum = ctrled.intl;
            ctrled = vacuum.string;
            source = source[update];
            source = sequen.bind(tangon)(source);
            source = source.t;
            source = source.bCQt9P;
            source = ctrled.bind(vacuum)(source);
            foxtra['children'] = source;
            romeon = echoed.bind(tangon)(backup, foxtra);
 886:
            yankee[4] = romeon;
            report['children'] = yankee;
            yankee = zuuluu.bind(tangon)(michal, report);
            report = new Array(4);
            report[0] = yankee;
            backup = _closure1_slot6;
            romeon = _closure1_slot0;
            yankee = _closure1_slot2;
            foxtra = 10;
            yankee = yankee[foxtra];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.Button;
            yankee = {};
            echoed = 'primary';
            yankee['variant'] = echoed;
            echoed = 'lg';
            if(!option) { _fun00002_ip = 959; continue _fun00001 }
 955:
            echoed = 'md';
 959:
            yankee['size'] = echoed;
            yankee['text'] = result;
            result = function() { // Original name: onPress
                zuuluu = _closure2_slot0;
                michal = _closure2_slot2;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            yankee['onPress'] = result;
            yankee['loading'] = sizing;
            sizing = '';
            sizing = sizing === output;
            yankee['disabled'] = sizing;
            yankee = backup.bind(tangon)(romeon, yankee);
            report[1] = yankee;
            golfie = null;
            if(!option) { _fun00002_ip = 1143; continue _fun00001 }
 1013:
            romeon = _closure1_slot6;
            yankee = _closure1_slot5;
            option = {};
            backup = offset.button;
            option['style'] = backup;
            echoed = _closure1_slot0;
            sizing = _closure1_slot2;
            foxtra = sizing[foxtra];
            foxtra = echoed.bind(tangon)(foxtra);
            backup = foxtra.Button;
            foxtra = {'variant': 'secondary', 'size': 'md'};
            output = sizing[update];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = sizing[update];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.91RssL;
            sizing = output.bind(result)(sizing);
            foxtra['text'] = sizing;
            kiloes = function() { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot1;
                    entity = null;
                    tangon = entity == zuuluu;
                    zuuluu = undefined;
                    entity = undefined;
                    if(tangon) { _fun00004_ip = 28; continue _fun00003 }
 20:
                    michal = _closure2_slot1;
                    entity = michal.bind(zuuluu)();
 28:
                    return entity;
                }
            };
            foxtra['onPress'] = kiloes;
            foxtra = romeon.bind(tangon)(backup, foxtra);
            option['children'] = foxtra;
            golfie = romeon.bind(tangon)(yankee, option);
 1143:
            report[2] = golfie;
            option = _closure1_slot6;
            golfie = _closure1_slot1;
            yankee = _closure1_slot2;
            oscard = 11;
            oscard = yankee[oscard];
            golfie = golfie.bind(tangon)(oscard);
            oscard = {};
            offset = offset.error;
            oscard['style'] = offset;
            oscard['error'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[3] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();