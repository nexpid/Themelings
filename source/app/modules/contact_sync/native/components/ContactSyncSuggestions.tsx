// app/modules/contact_sync/native/components/ContactSyncSuggestions.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: SuggestedFriendsSectionHeader
        entity = argFoo;
        option = entity.label;
        entity = _closure1_slot11;
        tangon = undefined;
        oscard = entity.bind(tangon)();
        zuuluu = _closure1_slot8;
        michal = _closure1_slot5;
        entity = {};
        oscard = oscard.sectionHeader;
        entity['style'] = oscard;
        golfie = _closure1_slot8;
        oscard = _closure1_slot0;
        verify = _closure1_slot2;
        report = 10;
        report = verify[report];
        report = oscard.bind(tangon)(report);
        oscard = report.Text;
        report = {'color': 'text-muted', 'variant': 'text-sm/semibold'};
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    romeon = 1;
    golfie = oscard[romeon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.SuggestedFriendSource;
    var _closure1_slot7 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.Fragment;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['flex'] = romeon;
    offset = 7;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_SECONDARY;
    verify['backgroundColor'] = foxtra;
    foxtra = 8;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    backup = foxtra.NAV_BAR_HEIGHT;
    foxtra = 32;
    foxtra = backup + foxtra;
    verify['paddingTop'] = foxtra;
    foxtra = 'center';
    verify['justifyContent'] = foxtra;
    tangon['container'] = verify;
    verify = {};
    verify['alignItems'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingTop'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_24;
    verify['paddingBottom'] = foxtra;
    tangon['header'] = verify;
    verify = {'marginBottom': 8, 'textAlign': 'center'};
    tangon['title'] = verify;
    verify = {'lineHeight': 18, 'textAlign': 'center'};
    tangon['subtitle'] = verify;
    verify = {};
    verify['flex'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['marginTop'] = romeon;
    tangon['list'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = romeon;
    tangon['divider'] = verify;
    verify = {'position': 'absolute', 'width': '100%', 'bottom': 0, 'minHeight': 136};
    tangon['linearGradient'] = verify;
    verify = {'position': 'absolute', 'width': '100%', 'bottom': 0};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['padding'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_32;
    verify['paddingBottom'] = romeon;
    tangon['redesignButton'] = verify;
    verify = {'flexGrow': 0, 'borderTopWidth': 1, 'borderTopColor': null, 'padding': 16, 'paddingBottom': 0};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    verify['borderTopColor'] = romeon;
    tangon['buttonWrapper'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_24;
    verify['paddingTop'] = romeon;
    tangon['spacer'] = verify;
    verify = {'marginBottom': null, 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['marginBottom'] = offset;
    tangon['sectionHeader'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = function(argFoo) { // Original name: SuggestionRow
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.start;
            option = entity.end;
            result = entity.suggestion;
            var _closure2_slot0 = result;
            golfie = entity.selected;
            entity = entity.onSelect;
            var _closure2_slot1 = entity;
            michal = result.reasons;
            entity = 0;
            michal = michal[entity];
            foxtra = null;
            zuuluu = foxtra == michal;
            tangon = undefined;
            entity = undefined;
            if(zuuluu) { _fun00002_ip = 71; continue _fun00001 }
 66:
            entity = michal.name;
 71:
            zuuluu = _closure1_slot0;
            oscard = _closure1_slot2;
            michal = 11;
            michal = oscard[michal];
            oscard = zuuluu.bind(tangon)(michal);
            zuuluu = oscard.getUserTag;
            michal = result.suggested_user;
            kiloes = zuuluu.bind(oscard)(michal);
            oscard = kiloes;
            if(!(foxtra != entity)) { _fun00002_ip = 132; continue _fun00001 }
 118:
            michal = '';
            oscard = kiloes;
            if(!(michal !== entity)) { _fun00002_ip = 132; continue _fun00001 }
 129:
            oscard = entity;
 132:
            yankee = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 12;
            entity = verify[entity];
            zuuluu = yankee.bind(tangon)(entity);
            michal = zuuluu.getUserAvatarSource;
            entity = result.suggested_user;
            output = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot8;
            offset = _closure1_slot0;
            entity = 13;
            entity = verify[entity];
            entity = offset.bind(tangon)(entity);
            michal = entity.TableCheckboxRow;
            entity = {};
            entity['start'] = backup;
            entity['end'] = option;
            backup = _closure1_slot8;
            sizing = 14;
            option = verify[sizing];
            yankee = yankee.bind(tangon)(option);
            option = {};
            option['source'] = output;
            sizing = verify[sizing];
            sizing = offset.bind(tangon)(sizing);
            sizing = sizing.AvatarSizes;
            sizing = sizing.REFRESH_MEDIUM_32;
            option['size'] = sizing;
            option = backup.bind(tangon)(yankee, option);
            entity['icon'] = option;
            entity['checked'] = golfie;
            entity['label'] = oscard;
            option = _closure1_slot10;
            golfie = _closure1_slot9;
            oscard = {};
            backup = _closure1_slot8;
            yankee = 10;
            verify = verify[yankee];
            verify = offset.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-xs/medium', 'color': 'text-muted'};
            verify['children'] = kiloes;
            offset = backup.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = result.mutual_friends_count;
            offset = foxtra != offset;
            if(!offset) { _fun00002_ip = 457; continue _fun00001 }
 347:
            foxtra = _closure1_slot8;
            kiloes = _closure1_slot0;
            echoed = _closure1_slot2;
            yankee = echoed[yankee];
            yankee = kiloes.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {'variant': 'text-xs/medium', 'color': 'text-muted'};
            backup = 15;
            sizing = echoed[backup];
            sizing = kiloes.bind(tangon)(sizing);
            output = sizing.intl;
            sizing = output.format;
            backup = echoed[backup];
            backup = kiloes.bind(tangon)(backup);
            backup = backup.t;
            kiloes = backup.z7y34e;
            backup = {};
            result = result.mutual_friends_count;
            backup['count'] = result;
            backup = sizing.bind(output)(kiloes, backup);
            yankee['children'] = backup;
            offset = foxtra.bind(tangon)(romeon, yankee);
 457:
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            entity['subLabel'] = oscard;
            report = function() { // Original name: onPress
                zuuluu = _closure2_slot1;
                entity = _closure2_slot0;
                entity = entity.suggested_user;
                michal = entity.id;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            entity['onPress'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot12 = tangon;
    tangon = 26;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/contact_sync/native/components/ContactSyncSuggestions.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        michal = entity.friendSuggestions;
        var _closure2_slot0 = michal;
        entity = entity.onSubmit;
        var _closure2_slot1 = entity;
        entity = _closure1_slot11;
        tangon = undefined;
        offset = entity.bind(tangon)();
        var _closure2_slot2 = offset;
        report = michal.reduce;
        zuuluu = function(argFoo, argBar) {
            entity = argFoo;
            michal = argBar;
            michal = michal.suggested_user;
            zuuluu = michal.id;
            michal = true;
            entity[zuuluu] = michal;
            return entity;
        };
        entity = {};
        zuuluu = report.bind(michal)(zuuluu, entity);
        output = _closure1_slot0;
        result = _closure1_slot2;
        entity = 16;
        entity = result[entity];
        oscard = output.bind(tangon)(entity);
        report = oscard.useToken;
        golfie = _closure1_slot1;
        source = 7;
        entity = result[source];
        entity = golfie.bind(tangon)(entity);
        entity = entity.colors;
        entity = entity.BACKGROUND_PRIMARY;
        option = report.bind(oscard)(entity);
        entity = 17;
        report = result[entity];
        oscard = output.bind(tangon)(report);
        report = oscard.hexOpacityToRgba;
        kiloes = 0;
        report = report.bind(oscard)(option, kiloes);
        yankee = new Array(2);
        yankee[0] = report;
        entity = result[entity];
        oscard = output.bind(tangon)(entity);
        report = oscard.hexOpacityToRgba;
        entity = 100;
        entity = report.bind(oscard)(option, entity);
        yankee[1] = entity;
        report = _closure1_slot4;
        entity = report.useState;
        zuuluu = entity.bind(report)(zuuluu);
        entity = _closure1_slot3;
        echoed = 2;
        oscard = entity.bind(tangon)(zuuluu, echoed);
        zuuluu = oscard[kiloes];
        var _closure2_slot3 = zuuluu;
        entity = 1;
        entity = oscard[entity];
        var _closure2_slot4 = entity;
        entity = 9;
        entity = result[entity];
        oscard = output.bind(tangon)(entity);
        entity = oscard.useFontScale;
        sizing = entity.bind(oscard)();
        entity = result[source];
        entity = golfie.bind(tangon)(entity);
        entity = entity.spacing;
        oscard = entity.PX_16;
        entity = result[source];
        entity = golfie.bind(tangon)(entity);
        entity = entity.spacing;
        entity = entity.PX_32;
        oscard = oscard + entity;
        entity = 40;
        option = oscard + entity;
        entity = global;
        backup = entity.Math;
        romeon = backup.max;
        oscard = entity.Math;
        entity = oscard.min;
        entity = entity.bind(oscard)(sizing, echoed);
        oscard = 18;
        entity = oscard * entity;
        entity = entity - oscard;
        entity = romeon.bind(backup)(entity, kiloes);
        update = option + entity;
        romeon = report.useCallback;
        option = new Array(1);
        option[0] = zuuluu;
        entity = function(argFoo) {
            tangon = argFoo;
            zuuluu = _closure2_slot4;
            michal = {};
            entity = _closure2_slot3;
            golfie = michal;
            oscard = entity;
            report = copyDataProperties(golfie, oscard);
            entity = entity[tangon];
            entity = !entity;
            michal[tangon] = entity;
            entity = undefined;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        entity = romeon.bind(report)(entity, option);
        var _closure2_slot5 = entity;
        oscard = result[oscard];
        option = golfie.bind(tangon)(oscard);
        oscard = option.keys;
        romeon = oscard.bind(option)(zuuluu);
        option = romeon.some;
        oscard = function(argFoo) {
            michal = _closure2_slot3;
            entity = argFoo;
            entity = michal[entity];
            return entity;
        };
        romeon = option.bind(romeon)(oscard);
        option = report.useMemo;
        oscard = new Array(2);
        oscard[0] = michal;
        oscard[1] = zuuluu;
        zuuluu = function() {
            entity = new Array(0);
            var _closure3_slot0 = entity;
            tangon = entity.push;
            zuuluu = {};
            report = 'header';
            zuuluu['type'] = report;
            zuuluu = tangon.bind(entity)(zuuluu);
            tangon = _closure2_slot0;
            zuuluu = tangon.forEach;
            michal = function(argFoo) {
                report = argFoo;
                zuuluu = _closure3_slot0;
                michal = zuuluu.push;
                entity = {};
                tangon = 'suggestedFriend';
                entity['type'] = tangon;
                tangon = {};
                tangon['friendSuggestion'] = report;
                oscard = _closure2_slot3;
                report = report.suggested_user;
                report = report.id;
                report = oscard[report];
                tangon['selected'] = report;
                entity['props'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        sizing = option.bind(report)(zuuluu, oscard);
        zuuluu = report.useCallback;
        oscard = michal.length;
        michal = new Array(6);
        michal[0] = oscard;
        oscard = offset.divider;
        michal[1] = oscard;
        oscard = offset.header;
        michal[2] = oscard;
        oscard = offset.subtitle;
        michal[3] = oscard;
        oscard = offset.title;
        michal[4] = oscard;
        michal[5] = entity;
        entity = function(argFoo) {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                michal = argFoo;
                entity = michal.item;
                verify = michal.index;
                zuuluu = entity.type;
                michal = 'header';
                if(!(michal !== zuuluu)) { _fun00004_ip = 246; continue _fun00003 }
 29:
                michal = entity.props;
                foxtra = michal.friendSuggestion;
                michal = foxtra.suggested_user;
                report = michal.id;
                tangon = _closure1_slot10;
                michal = _closure1_slot4;
                zuuluu = michal.Fragment;
                michal = {};
                romeon = _closure1_slot8;
                offset = _closure1_slot12;
                oscard = {};
                golfie = 1;
                golfie = golfie === verify;
                oscard['start'] = golfie;
                golfie = _closure2_slot0;
                backup = golfie.length;
                backup = verify === backup;
                oscard['end'] = backup;
                oscard['suggestion'] = foxtra;
                entity = entity.props;
                entity = entity.selected;
                oscard['selected'] = entity;
                entity = _closure2_slot5;
                oscard['onSelect'] = entity;
                entity = undefined;
                offset = romeon.bind(entity)(offset, oscard);
                oscard = new Array(2);
                oscard[0] = offset;
                golfie = golfie.length;
                verify = verify < golfie;
                golfie = null;
                if(!verify) { _fun00004_ip = 229; continue _fun00003 }
 170:
                offset = _closure1_slot8;
                verify = _closure1_slot0;
                romeon = _closure1_slot2;
                option = 19;
                option = romeon[option];
                option = verify.bind(entity)(option);
                verify = option.FormDivider;
                option = {};
                romeon = true;
                option['iconPush'] = romeon;
                yankee = _closure2_slot2;
                yankee = yankee.divider;
                option['style'] = yankee;
                golfie = offset.bind(entity)(verify, option);
 229:
                oscard[1] = golfie;
                michal['children'] = oscard;
                entity = tangon.bind(entity)(zuuluu, michal, report);
                return entity;
 246:
                tangon = _closure1_slot10;
                zuuluu = _closure1_slot9;
                michal = {};
                golfie = _closure1_slot5;
                report = {};
                kiloes = _closure2_slot2;
                entity = kiloes.header;
                report['style'] = entity;
                backup = _closure1_slot8;
                romeon = _closure1_slot0;
                foxtra = _closure1_slot2;
                offset = 10;
                option = foxtra[offset];
                entity = undefined;
                option = romeon.bind(entity)(option);
                yankee = option.Text;
                option = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
                verify = kiloes.title;
                option['style'] = verify;
                verify = 15;
                sizing = foxtra[verify];
                sizing = romeon.bind(entity)(sizing);
                result = sizing.intl;
                output = result.string;
                sizing = foxtra[verify];
                sizing = romeon.bind(entity)(sizing);
                sizing = sizing.t;
                sizing = sizing.7Fjv5+;
                sizing = output.bind(result)(sizing);
                option['children'] = sizing;
                yankee = backup.bind(entity)(yankee, option);
                option = new Array(2);
                option[0] = yankee;
                backup = _closure1_slot8;
                offset = foxtra[offset];
                offset = romeon.bind(entity)(offset);
                yankee = offset.Text;
                offset = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
                kiloes = kiloes.subtitle;
                offset['style'] = kiloes;
                kiloes = foxtra[verify];
                kiloes = romeon.bind(entity)(kiloes);
                output = kiloes.intl;
                sizing = output.string;
                kiloes = foxtra[verify];
                kiloes = romeon.bind(entity)(kiloes);
                kiloes = kiloes.t;
                kiloes = kiloes.ait1x8;
                kiloes = sizing.bind(output)(kiloes);
                offset['children'] = kiloes;
                offset = backup.bind(entity)(yankee, offset);
                option[1] = offset;
                report['children'] = option;
                golfie = tangon.bind(entity)(golfie, report);
                report = new Array(2);
                report[0] = golfie;
                option = _closure1_slot8;
                golfie = _closure1_slot13;
                oscard = {};
                offset = foxtra[verify];
                offset = romeon.bind(entity)(offset);
                yankee = offset.intl;
                offset = yankee.string;
                verify = foxtra[verify];
                verify = romeon.bind(entity)(verify);
                verify = verify.t;
                verify = verify.1uAmCw;
                verify = offset.bind(yankee)(verify);
                oscard['label'] = verify;
                oscard = option.bind(entity)(golfie, oscard);
                report[1] = oscard;
                michal['children'] = report;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            }
        };
        kiloes = zuuluu.bind(report)(entity, michal);
        entity = 20;
        entity = result[entity];
        entity = golfie.bind(tangon)(entity);
        backup = entity.bind(tangon)();
        zuuluu = _closure1_slot10;
        michal = _closure1_slot5;
        entity = {};
        oscard = offset.container;
        report = new Array(2);
        report[0] = oscard;
        oscard = offset.list;
        report[1] = oscard;
        entity['style'] = report;
        option = _closure1_slot8;
        report = 21;
        report = result[report];
        report = output.bind(tangon)(report);
        oscard = report.FlashList;
        report = {};
        echoed = {};
        source = result[source];
        source = golfie.bind(tangon)(source);
        source = source.spacing;
        source = source.PX_16;
        echoed['paddingHorizontal'] = source;
        echoed['paddingBottom'] = update;
        report['contentContainerStyle'] = echoed;
        report['data'] = sizing;
        report['renderItem'] = kiloes;
        report['estimatedItemSize'] = backup;
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(3);
        report[0] = oscard;
        option = _closure1_slot8;
        oscard = 22;
        oscard = result[oscard];
        golfie = golfie.bind(tangon)(oscard);
        oscard = {};
        backup = offset.linearGradient;
        oscard['style'] = backup;
        backup = 23;
        kiloes = result[backup];
        kiloes = output.bind(tangon)(kiloes);
        kiloes = kiloes.VerticalGradient;
        kiloes = kiloes.START;
        oscard['start'] = kiloes;
        backup = result[backup];
        backup = output.bind(tangon)(backup);
        backup = backup.VerticalGradient;
        backup = backup.END;
        oscard['end'] = backup;
        backup = 'none';
        oscard['pointerEvents'] = backup;
        oscard['colors'] = yankee;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        option = _closure1_slot8;
        golfie = _closure1_slot5;
        oscard = {};
        offset = offset.redesignButton;
        oscard['style'] = offset;
        yankee = _closure1_slot8;
        verify = 24;
        verify = result[verify];
        verify = output.bind(tangon)(verify);
        offset = verify.Button;
        verify = {'variant': 'primary', 'size': 'lg'};
        backup = 15;
        kiloes = result[backup];
        kiloes = output.bind(tangon)(kiloes);
        sizing = kiloes.intl;
        kiloes = sizing.string;
        backup = result[backup];
        backup = output.bind(tangon)(backup);
        backup = backup.t;
        backup = backup.J5/69v;
        backup = kiloes.bind(sizing)(backup);
        verify['text'] = backup;
        foxtra = function() { // Original name: onPress
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 18;
            zuuluu = zuuluu[entity];
            entity = undefined;
            oscard = tangon.bind(entity)(zuuluu);
            report = oscard.keys;
            tangon = _closure2_slot3;
            oscard = report.bind(oscard)(tangon);
            report = oscard.filter;
            tangon = function(argFoo) {
                michal = _closure2_slot3;
                entity = argFoo;
                entity = michal[entity];
                return entity;
            };
            tangon = report.bind(oscard)(tangon);
            zuuluu = _closure2_slot1;
            zuuluu = zuuluu.bind(entity)(tangon);
            zuuluu = tangon.forEach;
            michal = function(argFoo) {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 25;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.track;
                michal = _closure1_slot6;
                zuuluu = michal.FRIEND_SUGGESTION_ADDED;
                michal = {};
                golfie = argFoo;
                michal['suggested_user_id'] = golfie;
                oscard = _closure1_slot7;
                oscard = oscard.USER_SUGGESTIONS;
                michal['suggestion_source'] = oscard;
                oscard = 'Contact Sync Suggestions';
                michal['location'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        verify['onPress'] = foxtra;
        romeon = !romeon;
        verify['disabled'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();