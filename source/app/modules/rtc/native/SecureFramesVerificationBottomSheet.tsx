// app/modules/rtc/native/SecureFramesVerificationBottomSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.EPOCH_AUTHENTICATOR_CHUNK_SIZE;
    var _closure1_slot5 = golfie;
    golfie = tangon.EPOCH_AUTHENTICATOR_COLUMNS;
    var _closure1_slot6 = golfie;
    tangon = tangon.EPOCH_AUTHENTICATOR_LENGTH;
    var _closure1_slot7 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'height': 80, 'width': 80, 'borderRadius': 40, 'alignItems': 'center', 'justifyContent': 'center'};
    romeon = 'center';
    offset = 5;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_MOD_STRONG;
    verify['backgroundColor'] = foxtra;
    tangon['iconContainer'] = verify;
    verify = {'height': 48, 'width': 48};
    tangon['icon'] = verify;
    verify = {};
    foxtra = 24;
    verify['height'] = foxtra;
    tangon['share'] = verify;
    verify = {};
    foxtra = 16;
    verify['padding'] = foxtra;
    tangon['content'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    tangon['subtitle'] = verify;
    verify = {'backgroundColor': null, 'borderTopRightRadius': null, 'borderTopLeftRadius': null, 'paddingVertical': 10, 'paddingHorizontal': 16, 'justifyContent': 'space-between', 'alignItems': 'center', 'flexDirection': 'row', 'marginTop': 24};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_BASE_TERTIARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.lg;
    verify['borderTopRightRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.lg;
    verify['borderTopLeftRadius'] = romeon;
    tangon['codeHeader'] = verify;
    verify = {'backgroundColor': null, 'paddingVertical': 8, 'paddingHorizontal': 16};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.lg;
    verify['borderBottomRightRadius'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.lg;
    verify['borderBottomLeftRadius'] = offset;
    tangon['code'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 8};
    tangon['footer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rtc/native/SecureFramesVerificationBottomSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SecureFramesVerificationBottomSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            sequen = michal.title;
            vacuum = michal.subtitle;
            romeon = michal.footer;
            golfie = michal.epochAuthenticator;
            michal = michal.onShareClick;
            var _closure2_slot0 = michal;
            zuuluu = _closure1_slot10;
            tangon = undefined;
            foxtra = zuuluu.bind(tangon)();
            update = _closure1_slot0;
            source = _closure1_slot2;
            zuuluu = 6;
            zuuluu = source[zuuluu];
            oscard = update.bind(tangon)(zuuluu);
            report = oscard.useReadableSecureFramesFingerprint;
            zuuluu = {};
            zuuluu['fingerprintBase64'] = golfie;
            golfie = _closure1_slot5;
            zuuluu['chunkSize'] = golfie;
            golfie = _closure1_slot7;
            zuuluu['desiredLength'] = golfie;
            kiloes = report.bind(oscard)(zuuluu);
            var _closure2_slot1 = kiloes;
            report = _closure1_slot3;
            oscard = report.useCallback;
            zuuluu = new Array(2);
            zuuluu[0] = kiloes;
            zuuluu[1] = michal;
            michal = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot1;
                    michal = null;
                    if(!(michal != zuuluu)) { _fun00004_ip = 75; continue _fun00003 }
 13:
                    tangon = _closure2_slot1;
                    zuuluu = tangon.join;
                    michal = ' ';
                    zuuluu = zuuluu.bind(tangon)(michal);
                    report = _closure1_slot1;
                    tangon = _closure1_slot2;
                    michal = 7;
                    tangon = tangon[michal];
                    michal = undefined;
                    report = report.bind(michal)(tangon);
                    tangon = report.hideActionSheet;
                    tangon = tangon.bind(report)();
                    entity = _closure2_slot0;
                    entity = entity.bind(michal)(zuuluu);
 75:
                    entity = undefined;
                    return entity;
                }
            };
            offset = oscard.bind(report)(michal, zuuluu);
            zuuluu = report.useCallback;
            michal = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 7;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.hideActionSheet;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            entity = new Array(0);
            backup = zuuluu.bind(report)(michal, entity);
            zuuluu = _closure1_slot8;
            yankee = 8;
            entity = source[yankee];
            entity = update.bind(tangon)(entity);
            michal = entity.BottomSheet;
            entity = {};
            report = true;
            entity['startExpanded'] = report;
            report = 9;
            report = source[report];
            report = update.bind(tangon)(report);
            oscard = report.BottomSheetTitleHeader;
            report = {};
            sizing = null;
            report['title'] = sizing;
            golfie = 10;
            golfie = source[golfie];
            golfie = update.bind(tangon)(golfie);
            option = golfie.ActionSheetCloseButton;
            golfie = {};
            golfie['onPress'] = backup;
            golfie = zuuluu.bind(tangon)(option, golfie);
            report['leading'] = golfie;
            golfie = 11;
            golfie = source[golfie];
            golfie = update.bind(tangon)(golfie);
            option = golfie.PressableOpacity;
            golfie = {};
            backup = foxtra.share;
            golfie['style'] = backup;
            golfie['hitSlop'] = yankee;
            golfie['onPress'] = offset;
            offset = sizing == kiloes;
            golfie['disabled'] = offset;
            offset = 'button';
            golfie['accessibilityRole'] = offset;
            output = 12;
            offset = source[output];
            offset = update.bind(tangon)(offset);
            backup = offset.intl;
            yankee = backup.string;
            offset = source[output];
            offset = update.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.RDE0SU;
            offset = yankee.bind(backup)(offset);
            golfie['accessibilityLabel'] = offset;
            backup = 13;
            offset = source[backup];
            offset = update.bind(tangon)(offset);
            yankee = offset.Text;
            offset = {'variant': 'text-md/semibold', 'color': 'text-brand'};
            result = source[output];
            result = update.bind(tangon)(result);
            ctrled = result.intl;
            echoed = ctrled.string;
            result = source[output];
            result = update.bind(tangon)(result);
            result = result.t;
            result = result.RDE0SU;
            result = echoed.bind(ctrled)(result);
            offset['children'] = result;
            offset = zuuluu.bind(tangon)(yankee, offset);
            golfie['children'] = offset;
            golfie = zuuluu.bind(tangon)(option, golfie);
            report['trailing'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['header'] = report;
            golfie = _closure1_slot9;
            oscard = _closure1_slot4;
            report = {};
            option = foxtra.content;
            report['style'] = option;
            option = 14;
            option = source[option];
            option = update.bind(tangon)(option);
            offset = option.Stack;
            option = {'spacing': 8, 'justify': 'center', 'align': 'center', 'direction': 'vertical'};
            result = {};
            yankee = foxtra.iconContainer;
            result['style'] = yankee;
            yankee = 15;
            yankee = source[yankee];
            yankee = update.bind(tangon)(yankee);
            ctrled = yankee.LockIcon;
            echoed = {};
            yankee = foxtra.icon;
            echoed['style'] = yankee;
            yankee = _closure1_slot1;
            config = 5;
            config = source[config];
            config = yankee.bind(tangon)(config);
            config = config.colors;
            config = config.HEADER_SECONDARY;
            echoed['color'] = config;
            echoed = zuuluu.bind(tangon)(ctrled, echoed);
            result['children'] = echoed;
            echoed = zuuluu.bind(tangon)(oscard, result);
            result = new Array(3);
            result[0] = echoed;
            echoed = source[backup];
            echoed = update.bind(tangon)(echoed);
            ctrled = echoed.Text;
            echoed = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
            echoed['children'] = sequen;
            echoed = zuuluu.bind(tangon)(ctrled, echoed);
            result[1] = echoed;
            echoed = source[backup];
            echoed = update.bind(tangon)(echoed);
            ctrled = echoed.Text;
            echoed = {'style': null, 'variant': 'text-md/medium', 'color': 'header-secondary'};
            sequen = foxtra.subtitle;
            echoed['style'] = sequen;
            echoed['children'] = vacuum;
            echoed = zuuluu.bind(tangon)(ctrled, echoed);
            result[2] = echoed;
            option['children'] = result;
            offset = golfie.bind(tangon)(offset, option);
            option = new Array(3);
            option[0] = offset;
            offset = 16;
            offset = source[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            result = source[output];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = source[output];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.cgBTyM;
            output = result.bind(echoed)(output);
            offset['title'] = output;
            sizing = sizing != kiloes;
            if(!sizing) { _fun00002_ip = 836; continue _fun00001 }
 799:
            echoed = _closure1_slot8;
            result = _closure1_slot1;
            update = _closure1_slot2;
            output = 17;
            output = update[output];
            result = result.bind(tangon)(output);
            output = {};
            output['chunks'] = kiloes;
            sizing = echoed.bind(tangon)(result, output);
 836:
            offset['trailing'] = sizing;
            offset['chunks'] = kiloes;
            kiloes = _closure1_slot6;
            offset['columns'] = kiloes;
            offset = zuuluu.bind(tangon)(yankee, offset);
            option[1] = offset;
            yankee = _closure1_slot8;
            offset = _closure1_slot0;
            verify = _closure1_slot2;
            verify = verify[backup];
            verify = offset.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-xs/normal', 'color': 'text-muted'};
            foxtra = foxtra.footer;
            verify['style'] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();