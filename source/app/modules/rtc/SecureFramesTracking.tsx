// app/modules/rtc/SecureFramesTracking.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: getGuildId
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = _closure1_slot3;
            michal = zuuluu.getChannel;
            entity = argFoo;
            michal = michal.bind(zuuluu)(entity);
            entity = null;
            zuuluu = entity == michal;
            entity = undefined;
            if(zuuluu) { _fun00002_ip = 36; continue _fun00001 }
 31:
            entity = michal.guild_id;
 36:
            return entity;
        }
    };
    var _closure1_slot5 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot4 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/rtc/SecureFramesTracking.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: trackRTCPanelViewed
        entity = argFoo;
        option = entity.channelId;
        oscard = entity.selectedTab;
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.RTC_PANEL_VIEWED;
        michal = {};
        michal['channel_id'] = option;
        golfie = _closure1_slot5;
        golfie = golfie.bind(entity)(option);
        michal['guild_id'] = golfie;
        michal['selected_tab'] = oscard;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackRTCPanelViewed'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EEUserVerificationViewed
        entity = argFoo;
        offset = entity.channelId;
        verify = entity.userId;
        zuuluu = _closure1_slot1;
        option = _closure1_slot2;
        entity = 2;
        michal = option[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_USER_VERIFICATION_VIEWED;
        michal = {};
        michal['channel_id'] = offset;
        golfie = _closure1_slot5;
        golfie = golfie.bind(entity)(offset);
        michal['guild_id'] = golfie;
        golfie = _closure1_slot0;
        oscard = 3;
        oscard = option[oscard];
        option = golfie.bind(entity)(oscard);
        golfie = option.getTrackUserRelationshipProperties;
        oscard = {};
        oscard['userId'] = verify;
        yankee = golfie.bind(option)(oscard);
        romeon = michal;
        oscard = copyDataProperties(romeon, yankee);
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEUserVerificationViewed'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EEUserVerified
        entity = argFoo;
        yankee = entity.channelId;
        verify = entity.userId;
        golfie = entity.analyticsLocation;
        zuuluu = _closure1_slot1;
        option = _closure1_slot2;
        entity = 2;
        michal = option[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_USER_VERIFIED;
        michal = {};
        michal['channel_id'] = yankee;
        offset = _closure1_slot5;
        offset = offset.bind(entity)(yankee);
        michal['guild_id'] = offset;
        michal['location'] = golfie;
        golfie = _closure1_slot0;
        oscard = 3;
        oscard = option[oscard];
        option = golfie.bind(entity)(oscard);
        golfie = option.getTrackUserRelationshipProperties;
        oscard = {};
        oscard['userId'] = verify;
        romeon = golfie.bind(option)(oscard);
        foxtra = michal;
        oscard = copyDataProperties(foxtra, romeon);
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEUserVerified'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EEUserVerificationFailed
        entity = argFoo;
        romeon = entity.channelId;
        verify = entity.userId;
        yankee = entity.keyVersion;
        golfie = entity.reason;
        zuuluu = _closure1_slot1;
        option = _closure1_slot2;
        entity = 2;
        michal = option[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_USER_VERIFICATION_FAILED;
        michal = {};
        michal['channel_id'] = romeon;
        offset = _closure1_slot5;
        offset = offset.bind(entity)(romeon);
        michal['guild_id'] = offset;
        michal['failure_reason'] = golfie;
        golfie = global;
        golfie = golfie.HermesInternal;
        offset = golfie.concat;
        golfie = '';
        golfie = offset.bind(golfie)(yankee);
        michal['key_version'] = golfie;
        golfie = _closure1_slot0;
        oscard = 3;
        oscard = option[oscard];
        option = golfie.bind(entity)(oscard);
        golfie = option.getTrackUserRelationshipProperties;
        oscard = {};
        oscard['userId'] = verify;
        foxtra = golfie.bind(option)(oscard);
        backup = michal;
        oscard = copyDataProperties(backup, foxtra);
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEUserVerificationFailed'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EEUserVerificationShareClicked
        entity = argFoo;
        offset = entity.channelId;
        verify = entity.userId;
        zuuluu = _closure1_slot1;
        option = _closure1_slot2;
        entity = 2;
        michal = option[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_USER_VERIFICATION_SHARE_CLICKED;
        michal = {};
        michal['channel_id'] = offset;
        golfie = _closure1_slot5;
        golfie = golfie.bind(entity)(offset);
        michal['guild_id'] = golfie;
        golfie = _closure1_slot0;
        oscard = 3;
        oscard = option[oscard];
        option = golfie.bind(entity)(oscard);
        golfie = option.getTrackUserRelationshipProperties;
        oscard = {};
        oscard['userId'] = verify;
        yankee = golfie.bind(option)(oscard);
        romeon = michal;
        oscard = copyDataProperties(romeon, yankee);
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEUserVerificationShareClicked'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EEUserVerificationCopied
        entity = argFoo;
        offset = entity.channelId;
        verify = entity.userId;
        zuuluu = _closure1_slot1;
        option = _closure1_slot2;
        entity = 2;
        michal = option[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_USER_VERIFICATION_CODE_COPIED;
        michal = {};
        michal['channel_id'] = offset;
        golfie = _closure1_slot5;
        golfie = golfie.bind(entity)(offset);
        michal['guild_id'] = golfie;
        golfie = _closure1_slot0;
        oscard = 3;
        oscard = option[oscard];
        option = golfie.bind(entity)(oscard);
        golfie = option.getTrackUserRelationshipProperties;
        oscard = {};
        oscard['userId'] = verify;
        yankee = golfie.bind(option)(oscard);
        romeon = michal;
        oscard = copyDataProperties(romeon, yankee);
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEUserVerificationCopied'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EECallVerificationShareClicked
        entity = argFoo;
        golfie = entity.channelId;
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_CALL_VERIFICATION_SHARE_CLICKED;
        michal = {};
        michal['channel_id'] = golfie;
        oscard = _closure1_slot5;
        oscard = oscard.bind(entity)(golfie);
        michal['guild_id'] = oscard;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EECallVerificationShareClicked'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EECallVerificationCopied
        entity = argFoo;
        golfie = entity.channelId;
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_CALL_VERIFICATION_CODE_COPIED;
        michal = {};
        michal['channel_id'] = golfie;
        oscard = _closure1_slot5;
        oscard = oscard.bind(entity)(golfie);
        michal['guild_id'] = oscard;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EECallVerificationCopied'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EEStreamVerificationShareClicked
        entity = argFoo;
        golfie = entity.channelId;
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_STREAM_VERIFICATION_SHARE_CLICKED;
        michal = {};
        michal['channel_id'] = golfie;
        oscard = _closure1_slot5;
        oscard = oscard.bind(entity)(golfie);
        michal['guild_id'] = oscard;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEStreamVerificationShareClicked'] = tangon;
    tangon = function(argFoo) { // Original name: trackE2EEStreamVerificationCopied
        entity = argFoo;
        golfie = entity.channelId;
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.trackWithMetadata;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_STREAM_VERIFICATION_CODE_COPIED;
        michal = {};
        michal['channel_id'] = golfie;
        oscard = _closure1_slot5;
        oscard = oscard.bind(entity)(golfie);
        michal['guild_id'] = oscard;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEStreamVerificationCopied'] = tangon;
    tangon = function() { // Original name: trackE2EESettingsUserDelete
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 4;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.track;
        michal = _closure1_slot4;
        michal = michal.E2EE_SETTINGS_USER_DELETE;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['trackE2EESettingsUserDelete'] = tangon;
    tangon = function() { // Original name: trackE2EESettingsDeviceDelete
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 4;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.track;
        michal = _closure1_slot4;
        michal = michal.E2EE_SETTINGS_DEVICE_DELETE;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['trackE2EESettingsDeviceDelete'] = tangon;
    michal = function(argFoo) { // Original name: trackE2EEPublicKeyMismatch
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 4;
        zuuluu = zuuluu[entity];
        entity = undefined;
        report = tangon.bind(entity)(zuuluu);
        tangon = report.track;
        michal = _closure1_slot4;
        zuuluu = michal.E2EE_PUBLIC_KEY_MISMATCH;
        michal = {};
        oscard = global;
        oscard = oscard.HermesInternal;
        option = oscard.concat;
        golfie = '';
        oscard = argFoo;
        oscard = option.bind(golfie)(oscard);
        michal['key_version'] = oscard;
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    zuuluu['trackE2EEPublicKeyMismatch'] = michal;
    return entity;
})();