// app/modules/rtc/SecureFramesTracking.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: getGuildId
        _fun81205: for(var _fun81205_ip = 0; ; ) switch(_fun81205_ip) {
 0:
            zulu = _closure1_slot3;
            mike = zulu.getChannel;
            entity = argFoo;
            mike = mike.bind(zulu)(entity);
            entity = null;
            zulu = entity == mike;
            entity = undefined;
            if(zulu) { _fun81205_ip = 36; continue _fun81205 }
 31:
            entity = mike.guild_id;
 36:
            return entity;
        }
    };
    var _closure1_slot5 = entity;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = golf.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot4 = tango;
    tango = 5;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/rtc/SecureFramesTracking.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo) { // Original name: trackRTCPanelViewed
        entity = argFoo;
        options = entity.channelId;
        oscar = entity.selectedTab;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.RTC_PANEL_VIEWED;
        mike = {};
        mike['channel_id'] = options;
        golf = _closure1_slot5;
        golf = golf.bind(entity)(options);
        mike['guild_id'] = golf;
        mike['selected_tab'] = oscar;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackRTCPanelViewed'] = tango;
    tango = function(argFoo) { // Original name: trackE2EEUserVerificationViewed
        entity = argFoo;
        offset = entity.channelId;
        verify = entity.userId;
        zulu = _closure1_slot1;
        options = _closure1_slot2;
        entity = 2;
        mike = options[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_USER_VERIFICATION_VIEWED;
        mike = {};
        mike['channel_id'] = offset;
        golf = _closure1_slot5;
        golf = golf.bind(entity)(offset);
        mike['guild_id'] = golf;
        golf = _closure1_slot0;
        oscar = 3;
        oscar = options[oscar];
        options = golf.bind(entity)(oscar);
        golf = options.getTrackUserRelationshipProperties;
        oscar = {};
        oscar['userId'] = verify;
        yankee = golf.bind(options)(oscar);
        romeo = mike;
        oscar = copyDataProperties(romeo, yankee);
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEUserVerificationViewed'] = tango;
    tango = function(argFoo) { // Original name: trackE2EEUserVerified
        entity = argFoo;
        yankee = entity.channelId;
        verify = entity.userId;
        golf = entity.analyticsLocation;
        zulu = _closure1_slot1;
        options = _closure1_slot2;
        entity = 2;
        mike = options[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_USER_VERIFIED;
        mike = {};
        mike['channel_id'] = yankee;
        offset = _closure1_slot5;
        offset = offset.bind(entity)(yankee);
        mike['guild_id'] = offset;
        mike['location'] = golf;
        golf = _closure1_slot0;
        oscar = 3;
        oscar = options[oscar];
        options = golf.bind(entity)(oscar);
        golf = options.getTrackUserRelationshipProperties;
        oscar = {};
        oscar['userId'] = verify;
        romeo = golf.bind(options)(oscar);
        foxtrot = mike;
        oscar = copyDataProperties(foxtrot, romeo);
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEUserVerified'] = tango;
    tango = function(argFoo) { // Original name: trackE2EEUserVerificationFailed
        entity = argFoo;
        romeo = entity.channelId;
        verify = entity.userId;
        yankee = entity.keyVersion;
        golf = entity.reason;
        zulu = _closure1_slot1;
        options = _closure1_slot2;
        entity = 2;
        mike = options[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_USER_VERIFICATION_FAILED;
        mike = {};
        mike['channel_id'] = romeo;
        offset = _closure1_slot5;
        offset = offset.bind(entity)(romeo);
        mike['guild_id'] = offset;
        mike['failure_reason'] = golf;
        golf = global;
        golf = golf.HermesInternal;
        offset = golf.concat;
        golf = '';
        golf = offset.bind(golf)(yankee);
        mike['key_version'] = golf;
        golf = _closure1_slot0;
        oscar = 3;
        oscar = options[oscar];
        options = golf.bind(entity)(oscar);
        golf = options.getTrackUserRelationshipProperties;
        oscar = {};
        oscar['userId'] = verify;
        foxtrot = golf.bind(options)(oscar);
        backup = mike;
        oscar = copyDataProperties(backup, foxtrot);
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEUserVerificationFailed'] = tango;
    tango = function(argFoo) { // Original name: trackE2EEUserVerificationShareClicked
        entity = argFoo;
        offset = entity.channelId;
        verify = entity.userId;
        zulu = _closure1_slot1;
        options = _closure1_slot2;
        entity = 2;
        mike = options[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_USER_VERIFICATION_SHARE_CLICKED;
        mike = {};
        mike['channel_id'] = offset;
        golf = _closure1_slot5;
        golf = golf.bind(entity)(offset);
        mike['guild_id'] = golf;
        golf = _closure1_slot0;
        oscar = 3;
        oscar = options[oscar];
        options = golf.bind(entity)(oscar);
        golf = options.getTrackUserRelationshipProperties;
        oscar = {};
        oscar['userId'] = verify;
        yankee = golf.bind(options)(oscar);
        romeo = mike;
        oscar = copyDataProperties(romeo, yankee);
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEUserVerificationShareClicked'] = tango;
    tango = function(argFoo) { // Original name: trackE2EEUserVerificationCopied
        entity = argFoo;
        offset = entity.channelId;
        verify = entity.userId;
        zulu = _closure1_slot1;
        options = _closure1_slot2;
        entity = 2;
        mike = options[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_USER_VERIFICATION_CODE_COPIED;
        mike = {};
        mike['channel_id'] = offset;
        golf = _closure1_slot5;
        golf = golf.bind(entity)(offset);
        mike['guild_id'] = golf;
        golf = _closure1_slot0;
        oscar = 3;
        oscar = options[oscar];
        options = golf.bind(entity)(oscar);
        golf = options.getTrackUserRelationshipProperties;
        oscar = {};
        oscar['userId'] = verify;
        yankee = golf.bind(options)(oscar);
        romeo = mike;
        oscar = copyDataProperties(romeo, yankee);
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEUserVerificationCopied'] = tango;
    tango = function(argFoo) { // Original name: trackE2EECallVerificationShareClicked
        entity = argFoo;
        golf = entity.channelId;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_CALL_VERIFICATION_SHARE_CLICKED;
        mike = {};
        mike['channel_id'] = golf;
        oscar = _closure1_slot5;
        oscar = oscar.bind(entity)(golf);
        mike['guild_id'] = oscar;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EECallVerificationShareClicked'] = tango;
    tango = function(argFoo) { // Original name: trackE2EECallVerificationCopied
        entity = argFoo;
        golf = entity.channelId;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_CALL_VERIFICATION_CODE_COPIED;
        mike = {};
        mike['channel_id'] = golf;
        oscar = _closure1_slot5;
        oscar = oscar.bind(entity)(golf);
        mike['guild_id'] = oscar;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EECallVerificationCopied'] = tango;
    tango = function(argFoo) { // Original name: trackE2EEStreamVerificationShareClicked
        entity = argFoo;
        golf = entity.channelId;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_STREAM_VERIFICATION_SHARE_CLICKED;
        mike = {};
        mike['channel_id'] = golf;
        oscar = _closure1_slot5;
        oscar = oscar.bind(entity)(golf);
        mike['guild_id'] = oscar;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEStreamVerificationShareClicked'] = tango;
    tango = function(argFoo) { // Original name: trackE2EEStreamVerificationCopied
        entity = argFoo;
        golf = entity.channelId;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.trackWithMetadata;
        mike = _closure1_slot4;
        zulu = mike.E2EE_STREAM_VERIFICATION_CODE_COPIED;
        mike = {};
        mike['channel_id'] = golf;
        oscar = _closure1_slot5;
        oscar = oscar.bind(entity)(golf);
        mike['guild_id'] = oscar;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEStreamVerificationCopied'] = tango;
    tango = function() { // Original name: trackE2EESettingsUserDelete
        tango = _closure1_slot1;
        zulu = _closure1_slot2;
        entity = 4;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.track;
        mike = _closure1_slot4;
        mike = mike.E2EE_SETTINGS_USER_DELETE;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['trackE2EESettingsUserDelete'] = tango;
    tango = function() { // Original name: trackE2EESettingsDeviceDelete
        tango = _closure1_slot1;
        zulu = _closure1_slot2;
        entity = 4;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.track;
        mike = _closure1_slot4;
        mike = mike.E2EE_SETTINGS_DEVICE_DELETE;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['trackE2EESettingsDeviceDelete'] = tango;
    mike = function(argFoo) { // Original name: trackE2EEPublicKeyMismatch
        tango = _closure1_slot1;
        zulu = _closure1_slot2;
        entity = 4;
        zulu = zulu[entity];
        entity = undefined;
        report = tango.bind(entity)(zulu);
        tango = report.track;
        mike = _closure1_slot4;
        zulu = mike.E2EE_PUBLIC_KEY_MISMATCH;
        mike = {};
        oscar = global;
        oscar = oscar.HermesInternal;
        options = oscar.concat;
        golf = '';
        oscar = argFoo;
        oscar = options.bind(golf)(oscar);
        mike['key_version'] = oscar;
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    zulu['trackE2EEPublicKeyMismatch'] = mike;
    return entity;
})();