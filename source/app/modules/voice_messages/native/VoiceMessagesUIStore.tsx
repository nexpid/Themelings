// app/modules/voice_messages/native/VoiceMessagesUIStore.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    golfie = argBar;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = golfie;
    var _closure1_slot1 = option;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscard)(zuuluu, entity, tangon);
    oscard = 0;
    tangon = option[oscard];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    report = tangon.VoiceMessageAnimationState;
    var _closure1_slot2 = report;
    tangon = tangon.WAVEFORM_WAVE_MAX_VALUE;
    var _closure1_slot3 = tangon;
    report = {};
    report['REQUESTED'] = oscard;
    tangon = 'REQUESTED';
    report[oscard] = tangon;
    tangon = 1;
    report['STARTED'] = tangon;
    oscard = 'STARTED';
    report[tangon] = oscard;
    tangon = option[tangon];
    verify = golfie.bind(entity)(tangon);
    oscard = verify.create;
    tangon = function() {
        entity = {'voiceMessageAnimationState': null, 'recordingStatus': null, 'recordingId': null, 'currWaveHeight': null, 'showRecordingOverlay': false};
        report = _closure1_slot0;
        tangon = _closure1_slot1;
        zuuluu = 2;
        tangon = tangon[zuuluu];
        zuuluu = undefined;
        report = report.bind(zuuluu)(tangon);
        tangon = report.makeMutable;
        oscard = _closure1_slot2;
        golfie = oscard.SENDING;
        michal = new Array(2);
        michal[0] = golfie;
        oscard = oscard.SENDING;
        michal[1] = oscard;
        michal = tangon.bind(report)(michal);
        entity['voiceMessageAnimationState'] = michal;
        entity['currWaveHeight'] = zuuluu;
        michal = false;
        entity['startTimeMillis'] = zuuluu;
        tangon = new Array(0);
        entity['waveform'] = tangon;
        tangon = 0;
        entity['waveformVersion'] = tangon;
        entity['showVoiceMessagesTooltip'] = michal;
        entity['savedVoiceMessageUploadData'] = zuuluu;
        entity['isVoiceMessageButtonMounted'] = michal;
        entity['isUsingHoldGesture'] = michal;
        return entity;
    };
    tangon = oscard.bind(verify)(tangon);
    var _closure1_slot4 = tangon;
    var _closure1_slot5 = tangon;
    oscard = 5;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = 'modules/voice_messages/native/VoiceMessagesUIStore.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['VoiceMessageRecordingStatus'] = report;
    zuuluu['useVoiceMessagesUIStore'] = tangon;
    tangon = function(argFoo) { // Original name: setShowRecordingOverlay
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = _closure2_slot0;
            entity['showRecordingOverlay'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setShowRecordingOverlay'] = tangon;
    tangon = function(argFoo) { // Original name: setVoiceMessageRecordingState
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = _closure2_slot0;
            entity['recordingStatus'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setVoiceMessageRecordingState'] = tangon;
    tangon = function(argFoo) { // Original name: setVoiceMessageRecordingId
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = _closure2_slot0;
            entity['recordingId'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setVoiceMessageRecordingId'] = tangon;
    tangon = function(argFoo) { // Original name: setVoiceMessageStartTimeMillis
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = _closure2_slot0;
            entity['startTimeMillis'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setVoiceMessageStartTimeMillis'] = tangon;
    tangon = function(argFoo) { // Original name: setVoiceMessageAnimationState
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            report = _closure2_slot0;
            oscard = entity;
            tangon = copyDataProperties(oscard, report);
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setVoiceMessageAnimationState'] = tangon;
    tangon = function(argFoo) { // Original name: addVoiceMessageWave
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            golfie = argFoo;
            tangon = _closure1_slot5;
            zuuluu = tangon.getState;
            zuuluu = zuuluu.bind(tangon)();
            report = zuuluu.waveform;
            zuuluu = tangon.getState;
            zuuluu = zuuluu.bind(tangon)();
            oscard = zuuluu.waveformVersion;
            var _closure2_slot0 = oscard;
            zuuluu = tangon.getState;
            zuuluu = zuuluu.bind(tangon)();
            option = zuuluu.currWaveHeight;
            zuuluu = null;
            if(!(zuuluu != option)) { _fun00002_ip = 120; continue _fun00001 }
 70:
            tangon = option.set;
            offset = _closure1_slot0;
            verify = _closure1_slot1;
            zuuluu = 4;
            verify = verify[zuuluu];
            zuuluu = undefined;
            offset = offset.bind(zuuluu)(verify);
            verify = offset.withSpring;
            zuuluu = _closure1_slot3;
            zuuluu = golfie / zuuluu;
            zuuluu = verify.bind(offset)(zuuluu);
            zuuluu = tangon.bind(option)(zuuluu);
 120:
            tangon = report.push;
            zuuluu = new Array(2);
            zuuluu[0] = golfie;
            zuuluu[1] = oscard;
            zuuluu = tangon.bind(report)(zuuluu);
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot1;
            entity = 3;
            zuuluu = zuuluu[entity];
            entity = undefined;
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = tangon.batchUpdates;
            michal = function() {
                zuuluu = _closure1_slot4;
                michal = zuuluu.setState;
                entity = {};
                report = _closure2_slot0;
                tangon = 1;
                tangon = report + tangon;
                entity['waveformVersion'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        }
    };
    zuuluu['addVoiceMessageWave'] = tangon;
    tangon = function() { // Original name: showVoiceMessagesTooltip
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 3;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = true;
            entity['showVoiceMessagesTooltip'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['showVoiceMessagesTooltip'] = tangon;
    tangon = function() { // Original name: hideVoiceMessagesTooltip
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 3;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = false;
            entity['showVoiceMessagesTooltip'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['hideVoiceMessagesTooltip'] = tangon;
    tangon = function() { // Original name: resetVoiceMessageState
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot1;
            entity = 3;
            zuuluu = zuuluu[entity];
            entity = undefined;
            report = tangon.bind(entity)(zuuluu);
            tangon = report.batchUpdates;
            zuuluu = function() {
                tangon = _closure1_slot4;
                zuuluu = tangon.setState;
                michal = {'waveform': null, 'waveformVersion': 0, 'showRecordingOverlay': false};
                entity = new Array(0);
                michal['waveform'] = entity;
                entity = undefined;
                michal['startTimeMillis'] = entity;
                michal['savedVoiceMessageUploadData'] = entity;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            zuuluu = tangon.bind(report)(zuuluu);
            tangon = _closure1_slot5;
            zuuluu = tangon.getState;
            zuuluu = zuuluu.bind(tangon)();
            tangon = zuuluu.currWaveHeight;
            zuuluu = null;
            if(!(zuuluu != tangon)) { _fun00004_ip = 113; continue _fun00003 }
 71:
            zuuluu = tangon.set;
            report = _closure1_slot0;
            oscard = _closure1_slot1;
            michal = 4;
            michal = oscard[michal];
            oscard = report.bind(entity)(michal);
            report = oscard.withSpring;
            michal = 0;
            michal = report.bind(oscard)(michal);
            michal = zuuluu.bind(tangon)(michal);
 113:
            return entity;
        }
    };
    zuuluu['resetVoiceMessageState'] = tangon;
    tangon = function(argFoo) { // Original name: setSavedVoiceMessageUploadData
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = _closure2_slot0;
            entity['savedVoiceMessageUploadData'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setSavedVoiceMessageUploadData'] = tangon;
    tangon = function(argFoo) { // Original name: setIsVoiceMessageButtonMounted
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = _closure2_slot0;
            entity['isVoiceMessageButtonMounted'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setIsVoiceMessageButtonMounted'] = tangon;
    michal = function(argFoo) { // Original name: setIsUsingHoldGesture
        entity = argFoo;
        var _closure2_slot0 = entity;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot1;
        entity = 3;
        zuuluu = zuuluu[entity];
        entity = undefined;
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = tangon.batchUpdates;
        michal = function() {
            zuuluu = _closure1_slot4;
            michal = zuuluu.setState;
            entity = {};
            tangon = _closure2_slot0;
            entity['isUsingHoldGesture'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setIsUsingHoldGesture'] = michal;
    return entity;
})();