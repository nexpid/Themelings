// app/modules/voice_messages/native/VoiceMessagesUIStore.tsx
export default (function(argFoo, argBar, _, __, ___, argFred, argPlugh) {
    golf = argBar;
    zulu = argFred;
    options = argPlugh;
    var _closure1_slot0 = golf;
    var _closure1_slot1 = options;
    entity = global;
    oscar = entity.Object;
    report = oscar.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(oscar)(zulu, entity, tango);
    oscar = 0;
    tango = options[oscar];
    entity = undefined;
    tango = golf.bind(entity)(tango);
    report = tango.VoiceMessageAnimationState;
    var _closure1_slot2 = report;
    tango = tango.WAVEFORM_WAVE_MAX_VALUE;
    var _closure1_slot3 = tango;
    report = {};
    report['REQUESTED'] = oscar;
    tango = 'REQUESTED';
    report[oscar] = tango;
    tango = 1;
    report['STARTED'] = tango;
    oscar = 'STARTED';
    report[tango] = oscar;
    tango = options[tango];
    verify = golf.bind(entity)(tango);
    oscar = verify.create;
    tango = function() {
        entity = {'voiceMessageAnimationState': null, 'recordingStatus': null, 'recordingId': null, 'currWaveHeight': null, 'showRecordingOverlay': false};
        report = _closure1_slot0;
        tango = _closure1_slot1;
        zulu = 2;
        tango = tango[zulu];
        zulu = undefined;
        report = report.bind(zulu)(tango);
        tango = report.makeMutable;
        oscar = _closure1_slot2;
        golf = oscar.SENDING;
        mike = new Array(2);
        mike[0] = golf;
        oscar = oscar.SENDING;
        mike[1] = oscar;
        mike = tango.bind(report)(mike);
        entity['voiceMessageAnimationState'] = mike;
        entity['currWaveHeight'] = zulu;
        mike = false;
        entity['startTimeMillis'] = zulu;
        tango = new Array(0);
        entity['waveform'] = tango;
        tango = 0;
        entity['waveformVersion'] = tango;
        entity['showVoiceMessagesTooltip'] = mike;
        entity['savedVoiceMessageUploadData'] = zulu;
        entity['isVoiceMessageButtonMounted'] = mike;
        entity['isUsingHoldGesture'] = mike;
        return entity;
    };
    tango = oscar.bind(verify)(tango);
    var _closure1_slot4 = tango;
    var _closure1_slot5 = tango;
    oscar = 5;
    oscar = options[oscar];
    options = golf.bind(entity)(oscar);
    golf = options.fileFinishedImporting;
    oscar = 'modules/voice_messages/native/VoiceMessagesUIStore.tsx';
    oscar = golf.bind(options)(oscar);
    zulu['VoiceMessageRecordingStatus'] = report;
    zulu['useVoiceMessagesUIStore'] = tango;
    tango = function(argFoo) { // Original name: setShowRecordingOverlay
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = _closure2_slot0;
            entity['showRecordingOverlay'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setShowRecordingOverlay'] = tango;
    tango = function(argFoo) { // Original name: setVoiceMessageRecordingState
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = _closure2_slot0;
            entity['recordingStatus'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setVoiceMessageRecordingState'] = tango;
    tango = function(argFoo) { // Original name: setVoiceMessageRecordingId
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = _closure2_slot0;
            entity['recordingId'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setVoiceMessageRecordingId'] = tango;
    tango = function(argFoo) { // Original name: setVoiceMessageStartTimeMillis
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = _closure2_slot0;
            entity['startTimeMillis'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setVoiceMessageStartTimeMillis'] = tango;
    tango = function(argFoo) { // Original name: setVoiceMessageAnimationState
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            report = _closure2_slot0;
            oscar = entity;
            tango = copyDataProperties(oscar, report);
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setVoiceMessageAnimationState'] = tango;
    tango = function(argFoo) { // Original name: addVoiceMessageWave
        _fun100263: for(var _fun100263_ip = 0; ; ) switch(_fun100263_ip) {
 0:
            golf = argFoo;
            tango = _closure1_slot5;
            zulu = tango.getState;
            zulu = zulu.bind(tango)();
            report = zulu.waveform;
            zulu = tango.getState;
            zulu = zulu.bind(tango)();
            oscar = zulu.waveformVersion;
            var _closure2_slot0 = oscar;
            zulu = tango.getState;
            zulu = zulu.bind(tango)();
            options = zulu.currWaveHeight;
            zulu = null;
            if(!(zulu != options)) { _fun100263_ip = 120; continue _fun100263 }
 70:
            tango = options.set;
            offset = _closure1_slot0;
            verify = _closure1_slot1;
            zulu = 4;
            verify = verify[zulu];
            zulu = undefined;
            offset = offset.bind(zulu)(verify);
            verify = offset.withSpring;
            zulu = _closure1_slot3;
            zulu = golf / zulu;
            zulu = verify.bind(offset)(zulu);
            zulu = tango.bind(options)(zulu);
 120:
            tango = report.push;
            zulu = new Array(2);
            zulu[0] = golf;
            zulu[1] = oscar;
            zulu = tango.bind(report)(zulu);
            tango = _closure1_slot0;
            zulu = _closure1_slot1;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure1_slot4;
                mike = zulu.setState;
                entity = {};
                report = _closure2_slot0;
                tango = 1;
                tango = report + tango;
                entity['waveformVersion'] = tango;
                entity = mike.bind(zulu)(entity);
                entity = undefined;
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        }
    };
    zulu['addVoiceMessageWave'] = tango;
    tango = function() { // Original name: showVoiceMessagesTooltip
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 3;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = true;
            entity['showVoiceMessagesTooltip'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['showVoiceMessagesTooltip'] = tango;
    tango = function() { // Original name: hideVoiceMessagesTooltip
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 3;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = false;
            entity['showVoiceMessagesTooltip'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['hideVoiceMessagesTooltip'] = tango;
    tango = function() { // Original name: resetVoiceMessageState
        _fun100269: for(var _fun100269_ip = 0; ; ) switch(_fun100269_ip) {
 0:
            tango = _closure1_slot0;
            zulu = _closure1_slot1;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            report = tango.bind(entity)(zulu);
            tango = report.batchUpdates;
            zulu = function() {
                tango = _closure1_slot4;
                zulu = tango.setState;
                mike = {'waveform': null, 'waveformVersion': 0, 'showRecordingOverlay': false};
                entity = new Array(0);
                mike['waveform'] = entity;
                entity = undefined;
                mike['startTimeMillis'] = entity;
                mike['savedVoiceMessageUploadData'] = entity;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            zulu = tango.bind(report)(zulu);
            tango = _closure1_slot5;
            zulu = tango.getState;
            zulu = zulu.bind(tango)();
            tango = zulu.currWaveHeight;
            zulu = null;
            if(!(zulu != tango)) { _fun100269_ip = 113; continue _fun100269 }
 71:
            zulu = tango.set;
            report = _closure1_slot0;
            oscar = _closure1_slot1;
            mike = 4;
            mike = oscar[mike];
            oscar = report.bind(entity)(mike);
            report = oscar.withSpring;
            mike = 0;
            mike = report.bind(oscar)(mike);
            mike = zulu.bind(tango)(mike);
 113:
            return entity;
        }
    };
    zulu['resetVoiceMessageState'] = tango;
    tango = function(argFoo) { // Original name: setSavedVoiceMessageUploadData
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = _closure2_slot0;
            entity['savedVoiceMessageUploadData'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setSavedVoiceMessageUploadData'] = tango;
    tango = function(argFoo) { // Original name: setIsVoiceMessageButtonMounted
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = _closure2_slot0;
            entity['isVoiceMessageButtonMounted'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setIsVoiceMessageButtonMounted'] = tango;
    mike = function(argFoo) { // Original name: setIsUsingHoldGesture
        entity = argFoo;
        var _closure2_slot0 = entity;
        tango = _closure1_slot0;
        zulu = _closure1_slot1;
        entity = 3;
        zulu = zulu[entity];
        entity = undefined;
        tango = tango.bind(entity)(zulu);
        zulu = tango.batchUpdates;
        mike = function() {
            zulu = _closure1_slot4;
            mike = zulu.setState;
            entity = {};
            tango = _closure2_slot0;
            entity['isUsingHoldGesture'] = tango;
            entity = mike.bind(zulu)(entity);
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setIsUsingHoldGesture'] = mike;
    return entity;
})();