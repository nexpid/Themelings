// app/modules/parent_tools/native/FamilyCenterModalRequest.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    verify = argBar;
    kiloes = argBaz;
    zuuluu = argFre;
    offset = argPlu;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = kiloes;
    var _closure1_slot2 = offset;
    report = function(argFoo) { // Original name: FamilyCenterModalRequestConfirm
        michal = argFoo;
        option = michal.userId;
        var _closure2_slot0 = option;
        michal = michal.linkCode;
        var _closure2_slot1 = michal;
        zuuluu = _closure1_slot14;
        tangon = undefined;
        backup = zuuluu.bind(tangon)();
        var _closure2_slot2 = backup;
        echoed = _closure1_slot0;
        kiloes = _closure1_slot2;
        zuuluu = 7;
        zuuluu = kiloes[zuuluu];
        report = echoed.bind(tangon)(zuuluu);
        zuuluu = report.useNavigation;
        zuuluu = zuuluu.bind(report)();
        var _closure2_slot3 = zuuluu;
        verify = _closure1_slot3;
        golfie = verify.useCallback;
        oscard = new Array(1);
        oscard[0] = zuuluu;
        report = function() {
            zuuluu = _closure2_slot3;
            michal = zuuluu.push;
            entity = _closure1_slot13;
            entity = entity.SENT;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        verify = golfie.bind(verify)(report, oscard);
        golfie = _closure1_slot3;
        oscard = golfie.useCallback;
        report = new Array(1);
        report[0] = zuuluu;
        zuuluu = function(argFoo) {
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 8;
            zuuluu = zuuluu[entity];
            entity = undefined;
            report = tangon.bind(entity)(zuuluu);
            tangon = report.getFailureCodeForAPIError;
            zuuluu = argFoo;
            oscard = tangon.bind(report)(zuuluu);
            report = _closure2_slot3;
            tangon = report.push;
            michal = _closure1_slot13;
            zuuluu = michal.ERROR;
            michal = {};
            michal['failureCode'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        };
        golfie = oscard.bind(golfie)(zuuluu, report);
        zuuluu = 9;
        zuuluu = kiloes[zuuluu];
        oscard = echoed.bind(tangon)(zuuluu);
        report = oscard.useFamilyCenterActions;
        zuuluu = {};
        zuuluu['onSuccess'] = verify;
        zuuluu['onError'] = golfie;
        zuuluu = report.bind(oscard)(zuuluu);
        verify = zuuluu.requestLink;
        var _closure2_slot4 = verify;
        oscard = zuuluu.isRequestingLink;
        var _closure2_slot5 = oscard;
        golfie = _closure1_slot3;
        report = golfie.useCallback;
        zuuluu = new Array(3);
        zuuluu[0] = verify;
        zuuluu[1] = option;
        zuuluu[2] = michal;
        michal = function() {
            tangon = _closure2_slot4;
            zuuluu = _closure2_slot0;
            michal = _closure2_slot1;
            entity = undefined;
            michal = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        golfie = report.bind(golfie)(michal, zuuluu);
        var _closure2_slot6 = golfie;
        report = _closure1_slot3;
        zuuluu = report.useCallback;
        michal = new Array(3);
        michal[0] = golfie;
        michal[1] = oscard;
        michal[2] = backup;
        entity = function() {
            tangon = _closure1_slot12;
            zuuluu = _closure1_slot11;
            michal = {};
            option = _closure1_slot10;
            offset = _closure1_slot1;
            yankee = _closure1_slot2;
            romeon = 10;
            report = yankee[romeon];
            entity = undefined;
            golfie = offset.bind(entity)(report);
            report = {};
            verify = _closure2_slot5;
            report['disabled'] = verify;
            report['loading'] = verify;
            kiloes = _closure2_slot2;
            verify = kiloes.button;
            report['style'] = verify;
            foxtra = 6;
            verify = yankee[foxtra];
            verify = offset.bind(entity)(verify);
            verify = verify.radii;
            verify = verify.xs;
            report['cornerRadius'] = verify;
            verify = yankee[romeon];
            verify = offset.bind(entity)(verify);
            verify = verify.Sizes;
            verify = verify.MEDIUM;
            report['size'] = verify;
            backup = _closure1_slot0;
            verify = 11;
            output = yankee[verify];
            output = backup.bind(entity)(output);
            echoed = output.intl;
            result = echoed.string;
            output = 12;
            output = yankee[output];
            output = offset.bind(entity)(output);
            output = output.ISg34u;
            output = result.bind(echoed)(output);
            report['text'] = output;
            sizing = _closure2_slot6;
            report['onPress'] = sizing;
            golfie = option.bind(entity)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot10;
            oscard = yankee[romeon];
            golfie = offset.bind(entity)(oscard);
            oscard = {};
            kiloes = kiloes.button;
            oscard['style'] = kiloes;
            foxtra = yankee[foxtra];
            foxtra = offset.bind(entity)(foxtra);
            foxtra = foxtra.radii;
            foxtra = foxtra.xs;
            oscard['cornerRadius'] = foxtra;
            foxtra = yankee[romeon];
            foxtra = offset.bind(entity)(foxtra);
            foxtra = foxtra.Colors;
            foxtra = foxtra.TRANSPARENT;
            oscard['color'] = foxtra;
            romeon = yankee[romeon];
            romeon = offset.bind(entity)(romeon);
            romeon = romeon.Sizes;
            romeon = romeon.MEDIUM;
            oscard['size'] = romeon;
            romeon = yankee[verify];
            romeon = backup.bind(entity)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.string;
            verify = yankee[verify];
            verify = backup.bind(entity)(verify);
            verify = verify.t;
            verify = verify.ETE/oK;
            verify = romeon.bind(foxtra)(verify);
            oscard['text'] = verify;
            verify = 13;
            verify = yankee[verify];
            verify = offset.bind(entity)(verify);
            verify = verify.pop;
            oscard['onPress'] = verify;
            oscard = option.bind(entity)(golfie, oscard);
            report[1] = oscard;
            michal['children'] = report;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        report = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot10;
        foxtra = _closure1_slot1;
        entity = 14;
        entity = kiloes[entity];
        michal = foxtra.bind(tangon)(entity);
        entity = {};
        report = report.bind(tangon)();
        entity['footer'] = report;
        golfie = _closure1_slot12;
        oscard = _closure1_slot11;
        report = {};
        verify = _closure1_slot4;
        option = {};
        offset = backup.header;
        option['style'] = offset;
        sizing = _closure1_slot10;
        yankee = _closure1_slot5;
        offset = {};
        output = backup.art;
        offset['style'] = output;
        output = 15;
        output = kiloes[output];
        output = foxtra.bind(tangon)(output);
        offset['source'] = output;
        yankee = sizing.bind(tangon)(yankee, offset);
        offset = new Array(2);
        offset[0] = yankee;
        output = _closure1_slot10;
        yankee = 16;
        yankee = kiloes[yankee];
        yankee = echoed.bind(tangon)(yankee);
        sizing = yankee.Text;
        yankee = {};
        result = backup.headerText;
        yankee['style'] = result;
        result = 'text-lg/bold';
        yankee['variant'] = result;
        result = 11;
        result = kiloes[result];
        result = echoed.bind(tangon)(result);
        update = result.intl;
        echoed = update.string;
        result = 12;
        result = kiloes[result];
        result = foxtra.bind(tangon)(result);
        result = result.GH11eH;
        result = echoed.bind(update)(result);
        yankee['children'] = result;
        yankee = output.bind(tangon)(sizing, yankee);
        offset[1] = yankee;
        option['children'] = offset;
        verify = golfie.bind(tangon)(verify, option);
        option = new Array(2);
        option[0] = verify;
        yankee = _closure1_slot10;
        offset = _closure1_slot4;
        verify = {};
        backup = backup.body;
        verify['style'] = backup;
        backup = _closure1_slot10;
        romeon = 17;
        romeon = kiloes[romeon];
        foxtra = foxtra.bind(tangon)(romeon);
        romeon = {};
        kiloes = 'request-modal';
        romeon['source'] = kiloes;
        romeon = backup.bind(tangon)(foxtra, romeon);
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot17 = report;
    tangon = function() { // Original name: FamilyCenterModalRequestSuccess
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot15;
            tangon = undefined;
            echoed = michal.bind(tangon)();
            michal = _closure1_slot14;
            oscard = michal.bind(tangon)();
            var _closure2_slot0 = oscard;
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            michal = 18;
            michal = option[michal];
            verify = golfie.bind(tangon)(michal);
            report = verify.useStateFromStores;
            michal = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            output = report.bind(verify)(zuuluu, michal);
            michal = 19;
            zuuluu = option[michal];
            report = golfie.bind(tangon)(zuuluu);
            zuuluu = report.generateBoxShadowStyle;
            michal = option[michal];
            michal = golfie.bind(tangon)(michal);
            michal = michal.FOUR_DP_ELEVATION_SHADOW_PARAMS;
            backup = zuuluu.bind(report)(michal);
            golfie = _closure1_slot3;
            report = golfie.useCallback;
            zuuluu = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 13;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.pop;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            michal = new Array(0);
            golfie = report.bind(golfie)(zuuluu, michal);
            var _closure2_slot1 = golfie;
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = oscard;
            entity = function() {
                tangon = _closure1_slot10;
                option = _closure1_slot1;
                offset = _closure1_slot2;
                golfie = 10;
                entity = offset[golfie];
                zuuluu = undefined;
                michal = option.bind(zuuluu)(entity);
                entity = {};
                verify = _closure2_slot0;
                verify = verify.button;
                entity['style'] = verify;
                verify = 6;
                verify = offset[verify];
                verify = option.bind(zuuluu)(verify);
                verify = verify.radii;
                verify = verify.xs;
                entity['cornerRadius'] = verify;
                golfie = offset[golfie];
                golfie = option.bind(zuuluu)(golfie);
                golfie = golfie.Sizes;
                golfie = golfie.MEDIUM;
                entity['size'] = golfie;
                verify = _closure1_slot0;
                oscard = 11;
                golfie = offset[oscard];
                golfie = verify.bind(zuuluu)(golfie);
                option = golfie.intl;
                golfie = option.string;
                oscard = offset[oscard];
                oscard = verify.bind(zuuluu)(oscard);
                oscard = oscard.t;
                oscard = oscard.cpT0Cg;
                oscard = golfie.bind(option)(oscard);
                entity['text'] = oscard;
                report = _closure2_slot1;
                entity['onPress'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            report = zuuluu.bind(report)(entity, michal);
            sizing = null;
            if(!(sizing === output)) { _fun00002_ip = 215; continue _fun00001 }
 185:
            michal = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 13;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.pop;
            entity = entity.bind(michal)();
 215:
            zuuluu = _closure1_slot10;
            foxtra = _closure1_slot1;
            result = _closure1_slot2;
            entity = 14;
            entity = result[entity];
            michal = foxtra.bind(tangon)(entity);
            entity = {};
            report = report.bind(tangon)();
            entity['footer'] = report;
            golfie = _closure1_slot12;
            oscard = _closure1_slot4;
            report = {};
            option = echoed.container;
            report['style'] = option;
            yankee = _closure1_slot10;
            verify = _closure1_slot4;
            option = {};
            kiloes = echoed.ring;
            romeon = new Array(2);
            romeon[0] = kiloes;
            romeon[1] = backup;
            option['style'] = romeon;
            kiloes = _closure1_slot10;
            backup = _closure1_slot4;
            romeon = {};
            update = echoed.iconContainer;
            romeon['style'] = update;
            ctrled = _closure1_slot10;
            update = 20;
            update = result[update];
            source = foxtra.bind(tangon)(update);
            update = {};
            vacuum = 21;
            vacuum = result[vacuum];
            vacuum = foxtra.bind(tangon)(vacuum);
            update['source'] = vacuum;
            vacuum = '#FFF';
            update['color'] = vacuum;
            update = ctrled.bind(tangon)(source, update);
            romeon['children'] = update;
            romeon = kiloes.bind(tangon)(backup, romeon);
            option['children'] = romeon;
            verify = yankee.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            source = _closure1_slot10;
            kiloes = _closure1_slot0;
            verify = 16;
            yankee = result[verify];
            yankee = kiloes.bind(tangon)(yankee);
            update = yankee.Text;
            yankee = {'variant': 'heading-lg/bold', 'color': 'header-primary'};
            romeon = echoed.header;
            yankee['style'] = romeon;
            backup = 11;
            romeon = result[backup];
            romeon = kiloes.bind(tangon)(romeon);
            sequen = romeon.intl;
            vacuum = sequen.string;
            romeon = 12;
            ctrled = result[romeon];
            ctrled = foxtra.bind(tangon)(ctrled);
            ctrled = ctrled.EpwfZm;
            ctrled = vacuum.bind(sequen)(ctrled);
            yankee['children'] = ctrled;
            yankee = source.bind(tangon)(update, yankee);
            option[1] = yankee;
            yankee = _closure1_slot10;
            verify = result[verify];
            verify = kiloes.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-sm/medium', 'color': 'text-muted'};
            echoed = echoed.description;
            verify['style'] = echoed;
            backup = result[backup];
            backup = kiloes.bind(tangon)(backup);
            kiloes = backup.intl;
            backup = kiloes.format;
            romeon = result[romeon];
            romeon = foxtra.bind(tangon)(romeon);
            foxtra = romeon.dVtWIS;
            romeon = {};
            result = sizing == output;
            sizing = undefined;
            if(result) { _fun00002_ip = 602; continue _fun00001 }
 596:
            sizing = output.email;
 602:
            romeon['email'] = sizing;
            romeon = backup.bind(kiloes)(foxtra, romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot18 = tangon;
    michal = function(argFoo) { // Original name: FamilyCenterModalRequestError
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            zuuluu = michal.failureCode;
            michal = _closure1_slot16;
            tangon = undefined;
            foxtra = michal.bind(tangon)();
            michal = _closure1_slot14;
            romeon = michal.bind(tangon)();
            var _closure2_slot0 = romeon;
            backup = _closure1_slot0;
            golfie = _closure1_slot2;
            michal = 18;
            michal = golfie[michal];
            option = backup.bind(tangon)(michal);
            oscard = option.useStateFromStores;
            michal = _closure1_slot6;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            oscard = oscard.bind(option)(report, michal);
            michal = _closure1_slot1;
            report = 22;
            report = golfie[report];
            report = michal.bind(tangon)(report);
            option = report.bind(tangon)();
            report = 19;
            verify = golfie[report];
            offset = backup.bind(tangon)(verify);
            verify = offset.generateBoxShadowStyle;
            report = golfie[report];
            report = backup.bind(tangon)(report);
            report = report.FOUR_DP_ELEVATION_SHADOW_PARAMS;
            kiloes = verify.bind(offset)(report);
            backup = _closure1_slot3;
            offset = backup.useCallback;
            verify = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 13;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.pop;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            report = new Array(0);
            backup = offset.bind(backup)(verify, report);
            var _closure2_slot1 = backup;
            offset = _closure1_slot3;
            verify = offset.useCallback;
            report = new Array(2);
            report[0] = backup;
            report[1] = romeon;
            entity = function() {
                tangon = _closure1_slot10;
                option = _closure1_slot1;
                offset = _closure1_slot2;
                golfie = 10;
                entity = offset[golfie];
                zuuluu = undefined;
                michal = option.bind(zuuluu)(entity);
                entity = {};
                verify = _closure2_slot0;
                verify = verify.button;
                entity['style'] = verify;
                verify = 6;
                verify = offset[verify];
                verify = option.bind(zuuluu)(verify);
                verify = verify.radii;
                verify = verify.xs;
                entity['cornerRadius'] = verify;
                golfie = offset[golfie];
                golfie = option.bind(zuuluu)(golfie);
                golfie = golfie.Sizes;
                golfie = golfie.MEDIUM;
                entity['size'] = golfie;
                verify = _closure1_slot0;
                oscard = 11;
                golfie = offset[oscard];
                golfie = verify.bind(zuuluu)(golfie);
                option = golfie.intl;
                golfie = option.string;
                oscard = offset[oscard];
                oscard = verify.bind(zuuluu)(oscard);
                oscard = oscard.t;
                oscard = oscard.cpT0Cg;
                oscard = golfie.bind(option)(oscard);
                entity['text'] = oscard;
                report = _closure2_slot1;
                entity['onPress'] = report;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            report = verify.bind(offset)(entity, report);
            entity = 23;
            entity = golfie[entity];
            verify = michal.bind(tangon)(entity);
            michal = null;
            golfie = michal != oscard;
            entity = 'User must be logged in to see this modal.';
            entity = verify.bind(tangon)(golfie, entity);
            entity = _closure1_slot7;
            entity = entity[zuuluu];
            zuuluu = {};
            verify = michal != option;
            golfie = undefined;
            if(!verify) { _fun00004_ip = 260; continue _fun00003 }
 257:
            golfie = option;
 260:
            zuuluu['isAdult'] = golfie;
            oscard = oscard.email;
            golfie = michal != oscard;
            michal = undefined;
            if(!golfie) { _fun00004_ip = 283; continue _fun00003 }
 280:
            michal = oscard;
 283:
            zuuluu['email'] = michal;
            michal = entity.header;
            result = michal.bind(entity)(zuuluu);
            michal = entity.description;
            romeon = michal.bind(entity)(zuuluu);
            echoed = entity.icon;
            entity = _closure1_slot9;
            update = entity.CHECK;
            zuuluu = _closure1_slot10;
            michal = _closure1_slot1;
            oscard = _closure1_slot2;
            entity = 14;
            entity = oscard[entity];
            michal = michal.bind(tangon)(entity);
            entity = {};
            report = report.bind(tangon)();
            entity['footer'] = report;
            golfie = _closure1_slot12;
            oscard = _closure1_slot4;
            report = {};
            option = foxtra.container;
            report['style'] = option;
            offset = _closure1_slot10;
            verify = _closure1_slot4;
            option = {};
            sizing = foxtra.ring;
            backup = new Array(2);
            backup[0] = sizing;
            backup[1] = kiloes;
            option['style'] = backup;
            sizing = _closure1_slot10;
            kiloes = _closure1_slot4;
            backup = {};
            source = foxtra.iconContainer;
            output = new Array(2);
            output[0] = source;
            if(!(echoed !== update)) { _fun00004_ip = 445; continue _fun00003 }
 437:
            update = foxtra.negative;
            _fun00004_ip = 451; continue _fun00003;
 445:
            update = foxtra.positive;
 451:
            output[1] = update;
            backup['style'] = output;
            output = _closure1_slot9;
            output = output.CHECK;
            if(!(echoed !== output)) { _fun00004_ip = 533; continue _fun00003 }
 473:
            update = _closure1_slot10;
            ctrled = _closure1_slot1;
            vacuum = _closure1_slot2;
            output = 20;
            output = vacuum[output];
            echoed = ctrled.bind(tangon)(output);
            output = {};
            source = 24;
            source = vacuum[source];
            source = ctrled.bind(tangon)(source);
            output['source'] = source;
            source = '#FFF';
            output['color'] = source;
            output = update.bind(tangon)(echoed, output);
            _fun00004_ip = 591; continue _fun00003;
 533:
            source = _closure1_slot10;
            vacuum = _closure1_slot1;
            sequen = _closure1_slot2;
            echoed = 20;
            echoed = sequen[echoed];
            update = vacuum.bind(tangon)(echoed);
            echoed = {};
            ctrled = 21;
            ctrled = sequen[ctrled];
            ctrled = vacuum.bind(tangon)(ctrled);
            echoed['source'] = ctrled;
            ctrled = '#FFF';
            echoed['color'] = ctrled;
            output = source.bind(tangon)(update, echoed);
 591:
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            option['children'] = backup;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            output = _closure1_slot10;
            offset = _closure1_slot0;
            backup = _closure1_slot2;
            verify = 16;
            kiloes = backup[verify];
            kiloes = offset.bind(tangon)(kiloes);
            sizing = kiloes.Text;
            kiloes = {'variant': 'heading-lg/bold', 'color': 'header-primary'};
            echoed = foxtra.header;
            kiloes['style'] = echoed;
            kiloes['children'] = result;
            kiloes = output.bind(tangon)(sizing, kiloes);
            option[1] = kiloes;
            yankee = _closure1_slot10;
            verify = backup[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'text-sm/medium', 'color': 'text-muted'};
            foxtra = foxtra.description;
            verify['style'] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot19 = michal;
    oscard = global;
    romeon = oscard.Object;
    yankee = romeon.defineProperty;
    option = {};
    entity = true;
    option['value'] = entity;
    entity = '__esModule';
    entity = yankee.bind(romeon)(zuuluu, entity, option);
    entity = 0;
    yankee = offset[entity];
    option = argCor;
    entity = undefined;
    option = option.bind(entity)(yankee);
    var _closure1_slot3 = option;
    option = 1;
    option = offset[option];
    option = verify.bind(entity)(option);
    yankee = option.View;
    var _closure1_slot4 = yankee;
    option = option.Image;
    var _closure1_slot5 = option;
    option = 2;
    option = offset[option];
    option = kiloes.bind(entity)(option);
    var _closure1_slot6 = option;
    option = 3;
    option = offset[option];
    option = verify.bind(entity)(option);
    yankee = option.FAMILY_CENTER_LINK_REQUEST_ERROR_EXPERIENCES;
    var _closure1_slot7 = yankee;
    yankee = option.FamilyCenterFailureCode;
    var _closure1_slot8 = yankee;
    option = option.FamilyCenterIconType;
    var _closure1_slot9 = option;
    option = 4;
    option = offset[option];
    option = verify.bind(entity)(option);
    yankee = option.jsx;
    var _closure1_slot10 = yankee;
    yankee = option.Fragment;
    var _closure1_slot11 = yankee;
    option = option.jsxs;
    var _closure1_slot12 = option;
    yankee = oscard.Object;
    option = yankee.freeze;
    oscard = {'REQUEST': 'REQUESTS', 'SENT': 'SENT', 'ERROR': 'ERROR', 'TEEN_SCAN': 'TEEN_SCAN'};
    oscard = option.bind(yankee)(oscard);
    var _closure1_slot13 = oscard;
    option = 5;
    yankee = offset[option];
    foxtra = verify.bind(entity)(yankee);
    romeon = foxtra.createStyles;
    yankee = {};
    output = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center'};
    sizing = 'center';
    backup = 6;
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.spacing;
    result = result.PX_16;
    output['marginBottom'] = result;
    yankee['header'] = output;
    output = {};
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.spacing;
    result = result.PX_16;
    output['marginTop'] = result;
    yankee['headerText'] = output;
    output = {};
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.spacing;
    result = result.PX_24;
    output['paddingHorizontal'] = result;
    yankee['body'] = output;
    output = {};
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.spacing;
    result = result.PX_4;
    output['marginBottom'] = result;
    yankee['noticeHeader'] = output;
    output = {};
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.spacing;
    result = result.PX_4;
    output['marginBottom'] = result;
    yankee['button'] = output;
    output = {};
    echoed = {};
    result = '45deg';
    echoed['rotate'] = result;
    result = new Array(1);
    result[0] = echoed;
    output['transform'] = result;
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.colors;
    result = result.INTERACTIVE_NORMAL;
    output['tintColor'] = result;
    yankee['icon'] = output;
    output = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'flex': 1};
    yankee['spinner'] = output;
    output = {'width': 165, 'height': 119};
    yankee['art'] = output;
    yankee = romeon.bind(foxtra)(yankee);
    var _closure1_slot14 = yankee;
    yankee = offset[option];
    foxtra = verify.bind(entity)(yankee);
    romeon = foxtra.createStyles;
    yankee = {};
    output = {'display': 'flex', 'alignItems': 'center'};
    yankee['container'] = output;
    output = {};
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.spacing;
    result = result.PX_8;
    output['marginBottom'] = result;
    yankee['header'] = output;
    output = {};
    output['textAlign'] = sizing;
    yankee['description'] = output;
    output = {'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'height': 64, 'width': 64};
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.radii;
    result = result.round;
    output['borderRadius'] = result;
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.colors;
    result = result.BACKGROUND_SECONDARY;
    output['backgroundColor'] = result;
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.spacing;
    result = result.PX_24;
    output['marginBottom'] = result;
    yankee['ring'] = output;
    output = {'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'height': 48, 'width': 48};
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.radii;
    result = result.round;
    output['borderRadius'] = result;
    result = offset[backup];
    result = kiloes.bind(entity)(result);
    result = result.colors;
    result = result.STATUS_POSITIVE;
    output['backgroundColor'] = result;
    yankee['iconContainer'] = output;
    output = {'width': 24, 'height': 24};
    yankee['icon'] = output;
    yankee = romeon.bind(foxtra)(yankee);
    var _closure1_slot15 = yankee;
    option = offset[option];
    romeon = verify.bind(entity)(option);
    yankee = romeon.createStyles;
    option = {};
    foxtra = {'display': 'flex', 'alignItems': 'center'};
    option['container'] = foxtra;
    foxtra = {'marginBottom': 8, 'textAlign': 'center'};
    option['header'] = foxtra;
    foxtra = {};
    foxtra['textAlign'] = sizing;
    option['description'] = foxtra;
    foxtra = {'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'height': 64, 'width': 64, 'borderRadius': null, 'backgroundColor': null, 'marginBottom': 24};
    sizing = offset[backup];
    sizing = kiloes.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.round;
    foxtra['borderRadius'] = sizing;
    sizing = offset[backup];
    sizing = kiloes.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BACKGROUND_SECONDARY;
    foxtra['backgroundColor'] = sizing;
    option['ring'] = foxtra;
    foxtra = {'display': 'flex', 'justifyContent': 'center', 'alignItems': 'center', 'height': 48, 'width': 48};
    sizing = offset[backup];
    sizing = kiloes.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.round;
    foxtra['borderRadius'] = sizing;
    sizing = offset[backup];
    sizing = kiloes.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.STATUS_POSITIVE;
    foxtra['backgroundColor'] = sizing;
    option['iconContainer'] = foxtra;
    foxtra = {};
    sizing = offset[backup];
    sizing = kiloes.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.STATUS_POSITIVE;
    foxtra['backgroundColor'] = sizing;
    option['positive'] = foxtra;
    foxtra = {};
    backup = offset[backup];
    backup = kiloes.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.STATUS_DANGER;
    foxtra['backgroundColor'] = backup;
    option['negative'] = foxtra;
    foxtra = {'width': 24, 'height': 24};
    option['icon'] = foxtra;
    option = yankee.bind(romeon)(option);
    var _closure1_slot16 = option;
    option = 26;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'modules/parent_tools/native/FamilyCenterModalRequest.tsx';
    option = verify.bind(offset)(option);
    golfie = function(argFoo) { // Original name: FamilyCenterRequestModal
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            michal = argFoo;
            verify = michal.userId;
            var _closure2_slot0 = verify;
            offset = michal.linkCode;
            var _closure2_slot1 = offset;
            zuuluu = _closure1_slot1;
            option = _closure1_slot2;
            michal = 22;
            michal = option[michal];
            tangon = undefined;
            michal = zuuluu.bind(tangon)(michal);
            golfie = michal.bind(tangon)();
            oscard = _closure1_slot3;
            zuuluu = oscard.useMemo;
            michal = new Array(2);
            michal[0] = offset;
            michal[1] = verify;
            entity = function() {
                tangon = _closure2_slot0;
                zuuluu = _closure2_slot1;
                michal = function(argFoo, argBar) { // Original name: getScreens
                    entity = argFoo;
                    var _closure4_slot0 = entity;
                    entity = argBar;
                    var _closure4_slot1 = entity;
                    entity = {};
                    zuuluu = _closure1_slot13;
                    report = zuuluu.REQUEST;
                    zuuluu = {'fullscreen': true, 'headerShown': false};
                    oscard = function() { // Original name: render
                        tangon = _closure1_slot10;
                        zuuluu = _closure1_slot17;
                        michal = {};
                        report = _closure4_slot0;
                        michal['userId'] = report;
                        entity = _closure4_slot1;
                        michal['linkCode'] = entity;
                        entity = undefined;
                        entity = tangon.bind(entity)(zuuluu, michal);
                        return entity;
                    };
                    zuuluu['render'] = oscard;
                    entity[report] = zuuluu;
                    zuuluu = _closure1_slot13;
                    report = zuuluu.SENT;
                    zuuluu = {'fullscreen': true, 'headerShown': false};
                    oscard = function() { // Original name: render
                        tangon = _closure1_slot10;
                        zuuluu = _closure1_slot18;
                        michal = undefined;
                        entity = {};
                        entity = tangon.bind(michal)(zuuluu, entity);
                        return entity;
                    };
                    zuuluu['render'] = oscard;
                    entity[report] = zuuluu;
                    zuuluu = _closure1_slot13;
                    report = zuuluu.ERROR;
                    zuuluu = {'fullscreen': true, 'headerShown': false};
                    oscard = function(argFoo) { // Original name: render
                        entity = argFoo;
                        entity = entity.failureCode;
                        tangon = _closure1_slot10;
                        zuuluu = _closure1_slot19;
                        michal = {};
                        michal['failureCode'] = entity;
                        entity = undefined;
                        entity = tangon.bind(entity)(zuuluu, michal);
                        return entity;
                    };
                    zuuluu['render'] = oscard;
                    entity[report] = zuuluu;
                    michal = _closure1_slot13;
                    zuuluu = michal.TEEN_SCAN;
                    michal = {'fullscreen': true, 'headerShown': false};
                    tangon = function() { // Original name: render
                        tangon = _closure1_slot10;
                        zuuluu = _closure1_slot19;
                        michal = {};
                        entity = _closure1_slot8;
                        entity = entity.INELIGIBLE_FOR_FAMILY_CENTER;
                        michal['failureCode'] = entity;
                        entity = undefined;
                        entity = tangon.bind(entity)(zuuluu, michal);
                        return entity;
                    };
                    michal['render'] = tangon;
                    entity[zuuluu] = michal;
                    return entity;
                };
                entity = undefined;
                entity = michal.bind(entity)(tangon, zuuluu);
                return entity;
            };
            oscard = zuuluu.bind(oscard)(entity, michal);
            zuuluu = _closure1_slot10;
            michal = _closure1_slot0;
            entity = 25;
            entity = option[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.Navigator;
            entity = {};
            option = _closure1_slot13;
            if(golfie) { _fun00006_ip = 130; continue _fun00005 }
 122:
            golfie = option.TEEN_SCAN;
            _fun00006_ip = 136; continue _fun00005;
 130:
            golfie = option.REQUEST;
 136:
            entity['initialRouteName'] = golfie;
            entity['screens'] = oscard;
            option = _closure1_slot0;
            verify = _closure1_slot2;
            report = 11;
            oscard = verify[report];
            oscard = option.bind(tangon)(oscard);
            golfie = oscard.intl;
            oscard = golfie.string;
            report = verify[report];
            report = option.bind(tangon)(report);
            report = report.t;
            report = report.13/7kZ;
            report = oscard.bind(golfie)(report);
            entity['headerBackTitle'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = golfie;
    zuuluu['FamilyCenterModalRequestSections'] = oscard;
    zuuluu['FamilyCenterModalRequestConfirm'] = report;
    zuuluu['FamilyCenterModalRequestSuccess'] = tangon;
    zuuluu['FamilyCenterModalRequestError'] = michal;
    return entity;
})();