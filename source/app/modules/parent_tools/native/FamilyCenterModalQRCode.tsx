// app/modules/parent_tools/native/FamilyCenterModalQRCode.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.FamilyCenterAction;
    var _closure1_slot6 = golf;
    golf = tango.PLACEHOLDER_QR_CODE_URL;
    var _closure1_slot7 = golf;
    tango = tango.QR_CODE_AUTO_HIDE_TIMEOUT;
    var _closure1_slot8 = tango;
    romeo = 4;
    tango = oscar[romeo];
    tango = report.bind(entity)(tango);
    tango = tango.AnalyticEvents;
    var _closure1_slot9 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot10 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot11 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot12 = tango;
    tango = 6;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'center', 'backgroundColor': null, 'padding': 12, 'marginBottom': 24, 'marginHorizontal': 4294967280};
    foxtrot = 'center';
    offset = 7;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MENTIONED;
    verify['backgroundColor'] = backup;
    tango['noticeContainer'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'backgroundColor': null, 'marginRight': 8, 'width': 18, 'height': 18};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.STATUS_WARNING;
    verify['backgroundColor'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.round;
    verify['borderRadius'] = backup;
    tango['noticeIconCircle'] = verify;
    verify = {'width': 11, 'height': 11};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['tintColor'] = backup;
    tango['noticeIcon'] = verify;
    verify = {};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.STATUS_WARNING;
    verify['color'] = backup;
    tango['noticeText'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'textAlign': 'center', 'marginBottom': 16};
    tango['header'] = verify;
    verify = {};
    verify['marginBottom'] = romeo;
    tango['headerText'] = verify;
    verify = {};
    verify['textAlign'] = foxtrot;
    tango['description'] = verify;
    verify = {};
    verify['marginBottom'] = romeo;
    tango['button'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.STATUS_WARNING;
    verify['tintColor'] = offset;
    tango['icon'] = verify;
    verify = {'marginTop': 16, 'textAlign': 'center'};
    tango['reminder'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'center', 'alignItems': 'center'};
    tango['qrCode'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot13 = tango;
    tango = 25;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/parent_tools/native/FamilyCenterModalQRCode.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: FamilyCenterModalQRCode
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = _closure1_slot13;
            tango = undefined;
            foxtrot = mike.bind(tango)();
            var _closure2_slot0 = foxtrot;
            control = _closure1_slot1;
            output = _closure1_slot2;
            mike = 8;
            mike = output[mike];
            mike = control.bind(tango)(mike);
            zulu = mike.bind(tango)();
            report = _closure1_slot4;
            oscar = report.useState;
            mike = false;
            golf = oscar.bind(report)(mike);
            oscar = _closure1_slot3;
            mike = 2;
            oscar = oscar.bind(tango)(golf, mike);
            mike = 0;
            echo = oscar[mike];
            var _closure2_slot1 = echo;
            mike = 1;
            mike = oscar[mike];
            var _closure2_slot2 = mike;
            result = _closure1_slot0;
            oscar = 9;
            mike = output[oscar];
            golf = result.bind(tango)(mike);
            mike = golf.usePendingRequestCount;
            mike = mike.bind(golf)();
            var _closure2_slot3 = mike;
            golf = report.useRef;
            golf = golf.bind(report)(mike);
            var _closure2_slot4 = golf;
            yankee = report.useCallback;
            verify = function() {
                verify = _closure1_slot0;
                tango = _closure1_slot2;
                entity = 10;
                zulu = tango[entity];
                entity = undefined;
                oscar = verify.bind(entity)(zulu);
                report = oscar.presentFailedToast;
                zulu = 11;
                golf = tango[zulu];
                golf = verify.bind(entity)(golf);
                options = golf.intl;
                golf = options.string;
                zulu = tango[zulu];
                zulu = verify.bind(entity)(zulu);
                zulu = zulu.t;
                zulu = zulu.R0RpRU;
                zulu = golf.bind(options)(zulu);
                zulu = report.bind(oscar)(zulu);
                zulu = _closure1_slot1;
                mike = 12;
                mike = tango[mike];
                zulu = zulu.bind(entity)(mike);
                mike = zulu.pop;
                mike = mike.bind(zulu)();
                return entity;
            };
            options = new Array(0);
            romeo = yankee.bind(report)(verify, options);
            options = 13;
            options = output[options];
            yankee = result.bind(tango)(options);
            verify = yankee.useFamilyCenterActions;
            options = {};
            options['onError'] = romeo;
            options = verify.bind(yankee)(options);
            verify = options.getLinkCode;
            var _closure2_slot5 = verify;
            kilo = options.isGetLinkCodeLoading;
            var _closure2_slot6 = kilo;
            oscar = output[oscar];
            options = result.bind(tango)(oscar);
            oscar = options.useUserQRLinkUrl;
            romeo = oscar.bind(options)();
            oscar = 14;
            oscar = output[oscar];
            options = control.bind(tango)(oscar);
            oscar = !zulu;
            zulu = 'FamilyCenterQRCodeModal should only be rendered for teens.';
            zulu = options.bind(tango)(oscar, zulu);
            zulu = 15;
            zulu = output[zulu];
            oscar = control.bind(tango)(zulu);
            zulu = function() {
                mike = _closure2_slot5;
                entity = undefined;
                mike = mike.bind(entity)();
                return entity;
            };
            zulu = oscar.bind(tango)(zulu);
            oscar = report.useEffect;
            zulu = new Array(2);
            zulu[0] = golf;
            zulu[1] = mike;
            mike = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    mike = _closure2_slot3;
                    entity = _closure2_slot4;
                    entity = entity.current;
                    if(!(mike > entity)) { _fun00004_ip = 55; continue _fun00003 }
 20:
                    zulu = _closure1_slot1;
                    mike = _closure1_slot2;
                    entity = 12;
                    mike = mike[entity];
                    entity = undefined;
                    mike = zulu.bind(entity)(mike);
                    entity = mike.pop;
                    entity = entity.bind(mike)();
 55:
                    entity = undefined;
                    return entity;
                }
            };
            mike = oscar.bind(report)(mike, zulu);
            oscar = report.useCallback;
            zulu = new Array(1);
            zulu[0] = echo;
            mike = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    report = _closure2_slot2;
                    entity = undefined;
                    tango = function(argFoo) {
                        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                            zulu = _closure1_slot1;
                            mike = _closure1_slot2;
                            entity = 16;
                            mike = mike[entity];
                            entity = undefined;
                            tango = zulu.bind(entity)(mike);
                            zulu = tango.track;
                            entity = _closure1_slot9;
                            mike = entity.FAMILY_CENTER_ACTION;
                            entity = {};
                            report = _closure2_slot1;
                            oscar = _closure1_slot6;
                            if(report) { _fun00008_ip = 64; continue _fun00007 }
 56:
                            report = oscar.RevealQRCode;
                            _fun00008_ip = 70; continue _fun00007;
 64:
                            report = oscar.HideQRCode;
 70:
                            entity['action'] = report;
                            entity = zulu.bind(tango)(mike, entity);
                            entity = argFoo;
                            entity = !entity;
                            return entity;
                        }
                    };
                    tango = report.bind(entity)(tango);
                    zulu = _closure2_slot1;
                    if(zulu) { _fun00006_ip = 58; continue _fun00005 }
 30:
                    zulu = global;
                    tango = zulu.setTimeout;
                    zulu = _closure1_slot8;
                    mike = function() {
                        zulu = _closure1_slot1;
                        mike = _closure1_slot2;
                        entity = 12;
                        mike = mike[entity];
                        entity = undefined;
                        zulu = zulu.bind(entity)(mike);
                        mike = zulu.pop;
                        mike = mike.bind(zulu)();
                        return entity;
                    };
                    mike = tango.bind(entity)(mike, zulu);
 58:
                    return entity;
                }
            };
            update = oscar.bind(report)(mike, zulu);
            var _closure2_slot7 = update;
            zulu = report.useCallback;
            mike = new Array(4);
            mike[0] = kilo;
            mike[1] = echo;
            mike[2] = foxtrot;
            mike[3] = update;
            entity = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    tango = _closure1_slot12;
                    zulu = _closure1_slot11;
                    mike = {};
                    golf = _closure1_slot10;
                    verify = _closure1_slot1;
                    options = _closure1_slot2;
                    foxtrot = 17;
                    report = options[foxtrot];
                    entity = undefined;
                    oscar = verify.bind(entity)(report);
                    report = {};
                    offset = _closure2_slot6;
                    report['disabled'] = offset;
                    report['loading'] = offset;
                    offset = _closure2_slot0;
                    offset = offset.button;
                    report['style'] = offset;
                    backup = 7;
                    offset = options[backup];
                    offset = verify.bind(entity)(offset);
                    offset = offset.radii;
                    offset = offset.xs;
                    report['cornerRadius'] = offset;
                    offset = options[foxtrot];
                    offset = verify.bind(entity)(offset);
                    offset = offset.Colors;
                    offset = offset.BRAND;
                    report['color'] = offset;
                    options = options[foxtrot];
                    options = verify.bind(entity)(options);
                    options = options.Sizes;
                    options = options.MEDIUM;
                    report['size'] = options;
                    options = _closure2_slot1;
                    output = _closure1_slot0;
                    offset = _closure1_slot2;
                    verify = 11;
                    yankee = offset[verify];
                    yankee = output.bind(entity)(yankee);
                    sizing = yankee.intl;
                    yankee = sizing.string;
                    offset = offset[verify];
                    offset = output.bind(entity)(offset);
                    offset = offset.t;
                    if(options) { _fun00010_ip = 213; continue _fun00009 }
 200:
                    options = offset.10dX6e;
                    options = yankee.bind(sizing)(options);
                    _fun00010_ip = 224; continue _fun00009;
 213:
                    offset = offset.wg2xwc;
                    options = yankee.bind(sizing)(offset);
 224:
                    report['text'] = options;
                    options = _closure2_slot7;
                    report['onPress'] = options;
                    oscar = golf.bind(entity)(oscar, report);
                    report = new Array(2);
                    report[0] = oscar;
                    options = _closure1_slot10;
                    offset = _closure1_slot1;
                    yankee = _closure1_slot2;
                    oscar = yankee[foxtrot];
                    golf = offset.bind(entity)(oscar);
                    oscar = {};
                    kilo = _closure2_slot0;
                    kilo = kilo.button;
                    oscar['style'] = kilo;
                    backup = yankee[backup];
                    backup = offset.bind(entity)(backup);
                    backup = backup.radii;
                    backup = backup.xs;
                    oscar['cornerRadius'] = backup;
                    backup = yankee[foxtrot];
                    backup = offset.bind(entity)(backup);
                    backup = backup.Colors;
                    backup = backup.TRANSPARENT;
                    oscar['color'] = backup;
                    foxtrot = yankee[foxtrot];
                    foxtrot = offset.bind(entity)(foxtrot);
                    foxtrot = foxtrot.Sizes;
                    foxtrot = foxtrot.MEDIUM;
                    oscar['size'] = foxtrot;
                    backup = _closure1_slot0;
                    romeo = yankee[verify];
                    romeo = backup.bind(entity)(romeo);
                    foxtrot = romeo.intl;
                    romeo = foxtrot.string;
                    verify = yankee[verify];
                    verify = backup.bind(entity)(verify);
                    verify = verify.t;
                    verify = verify.cpT0Cg;
                    verify = romeo.bind(foxtrot)(verify);
                    oscar['text'] = verify;
                    verify = 12;
                    verify = yankee[verify];
                    verify = offset.bind(entity)(verify);
                    verify = verify.pop;
                    oscar['onPress'] = verify;
                    oscar = options.bind(entity)(golf, oscar);
                    report[1] = oscar;
                    mike['children'] = report;
                    entity = tango.bind(entity)(zulu, mike);
                    return entity;
                }
            };
            report = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot10;
            entity = 18;
            entity = output[entity];
            mike = control.bind(tango)(entity);
            entity = {};
            report = report.bind(tango)();
            entity['footer'] = report;
            golf = _closure1_slot12;
            oscar = _closure1_slot11;
            report = {};
            backup = _closure1_slot5;
            options = {};
            verify = foxtrot.noticeContainer;
            options['style'] = verify;
            verify = {};
            yankee = foxtrot.noticeIconCircle;
            verify['style'] = yankee;
            yankee = 19;
            yankee = output[yankee];
            sizing = control.bind(tango)(yankee);
            yankee = {};
            source = foxtrot.noticeIcon;
            yankee['style'] = source;
            source = 20;
            source = output[source];
            source = control.bind(tango)(source);
            yankee['source'] = source;
            yankee = zulu.bind(tango)(sizing, yankee);
            verify['children'] = yankee;
            verify = zulu.bind(tango)(backup, verify);
            yankee = new Array(2);
            yankee[0] = verify;
            verify = 21;
            sizing = output[verify];
            sizing = result.bind(tango)(sizing);
            control = sizing.Text;
            source = {};
            sizing = foxtrot.noticeText;
            source['style'] = sizing;
            sizing = 'text-sm/semibold';
            source['variant'] = sizing;
            sizing = 11;
            vacuum = output[sizing];
            vacuum = result.bind(tango)(vacuum);
            config = vacuum.intl;
            sequence = config.string;
            vacuum = output[sizing];
            vacuum = result.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.iHYMAw;
            vacuum = sequence.bind(config)(vacuum);
            source['children'] = vacuum;
            source = zulu.bind(tango)(control, source);
            yankee[1] = source;
            options['children'] = yankee;
            yankee = golf.bind(tango)(backup, options);
            options = new Array(4);
            options[0] = yankee;
            yankee = {};
            source = foxtrot.header;
            yankee['style'] = source;
            source = output[verify];
            source = result.bind(tango)(source);
            control = source.Text;
            source = {'style': null, 'variant': 'text-lg/bold', 'color': 'header-primary'};
            vacuum = foxtrot.headerText;
            source['style'] = vacuum;
            vacuum = output[sizing];
            vacuum = result.bind(tango)(vacuum);
            config = vacuum.intl;
            sequence = config.string;
            vacuum = output[sizing];
            vacuum = result.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.AVTZaG;
            vacuum = sequence.bind(config)(vacuum);
            source['children'] = vacuum;
            control = zulu.bind(tango)(control, source);
            source = new Array(2);
            source[0] = control;
            control = 22;
            control = output[control];
            control = result.bind(tango)(control);
            vacuum = control.TextWithIOSLinkWorkaround;
            control = {'style': null, 'variant': 'text-sm/normal', 'color': 'header-secondary'};
            sequence = foxtrot.description;
            control['style'] = sequence;
            sequence = output[sizing];
            sequence = result.bind(tango)(sequence);
            context = sequence.intl;
            record = context.format;
            sequence = output[sizing];
            sequence = result.bind(tango)(sequence);
            sequence = sequence.t;
            config = sequence.LyyCsL;
            sequence = {};
            papa = 'https://support.discord.com/hc/articles/14155060633623';
            sequence['link'] = papa;
            sequence = record.bind(context)(config, sequence);
            control['children'] = sequence;
            control = zulu.bind(tango)(vacuum, control);
            source[1] = control;
            yankee['children'] = source;
            yankee = golf.bind(tango)(backup, yankee);
            options[1] = yankee;
            yankee = 23;
            yankee = output[yankee];
            yankee = result.bind(tango)(yankee);
            backup = yankee.PressableOpacity;
            yankee = {};
            source = foxtrot.qrCode;
            yankee['style'] = source;
            yankee['onPress'] = update;
            update = 0.6;
            yankee['activeOpacity'] = update;
            update = 24;
            output = output[update];
            output = result.bind(tango)(output);
            result = output.QRCodeWithOverlay;
            output = {};
            source = 237;
            output['size'] = source;
            if(!echo) { _fun00002_ip = 952; continue _fun00001 }
 943:
            if(kilo) { _fun00002_ip = 952; continue _fun00001 }
 946:
            kilo = null;
            if(!(kilo == romeo)) { _fun00002_ip = 956; continue _fun00001 }
 952:
            romeo = _closure1_slot7;
 956:
            output['text'] = romeo;
            kilo = _closure1_slot0;
            romeo = _closure1_slot2;
            update = romeo[update];
            update = kilo.bind(tango)(update);
            update = update.QRCodeOverlaySizes;
            update = update.SIZE_60;
            output['overlaySize'] = update;
            echo = !echo;
            output['blur'] = echo;
            output = zulu.bind(tango)(result, output);
            yankee['children'] = output;
            yankee = zulu.bind(tango)(backup, yankee);
            options[2] = yankee;
            yankee = _closure1_slot10;
            verify = romeo[verify];
            verify = kilo.bind(tango)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-xs/semibold', 'color': 'header-secondary'};
            foxtrot = foxtrot.reminder;
            verify['style'] = foxtrot;
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            romeo = romeo[sizing];
            romeo = kilo.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.goDyoa;
            romeo = foxtrot.bind(backup)(romeo);
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[3] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();