// app/modules/parent_tools/native/FamilyCenterModalQRCode.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.FamilyCenterAction;
    var _closure1_slot6 = golfie;
    golfie = tangon.PLACEHOLDER_QR_CODE_URL;
    var _closure1_slot7 = golfie;
    tangon = tangon.QR_CODE_AUTO_HIDE_TIMEOUT;
    var _closure1_slot8 = tangon;
    romeon = 4;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot9 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot10 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.Fragment;
    var _closure1_slot11 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot12 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'center', 'backgroundColor': null, 'padding': 12, 'marginBottom': 24, 'marginHorizontal': 4294967280};
    foxtra = 'center';
    offset = 7;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MENTIONED;
    verify['backgroundColor'] = backup;
    tangon['noticeContainer'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'backgroundColor': null, 'marginRight': 8, 'width': 18, 'height': 18};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.STATUS_WARNING;
    verify['backgroundColor'] = backup;
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.round;
    verify['borderRadius'] = backup;
    tangon['noticeIconCircle'] = verify;
    verify = {'width': 11, 'height': 11};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    verify['tintColor'] = backup;
    tangon['noticeIcon'] = verify;
    verify = {};
    backup = oscard[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.STATUS_WARNING;
    verify['color'] = backup;
    tangon['noticeText'] = verify;
    verify = {'display': 'flex', 'alignItems': 'center', 'justifyContent': 'center', 'textAlign': 'center', 'marginBottom': 16};
    tangon['header'] = verify;
    verify = {};
    verify['marginBottom'] = romeon;
    tangon['headerText'] = verify;
    verify = {};
    verify['textAlign'] = foxtra;
    tangon['description'] = verify;
    verify = {};
    verify['marginBottom'] = romeon;
    tangon['button'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.STATUS_WARNING;
    verify['tintColor'] = offset;
    tangon['icon'] = verify;
    verify = {'marginTop': 16, 'textAlign': 'center'};
    tangon['reminder'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'center', 'alignItems': 'center'};
    tangon['qrCode'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot13 = tangon;
    tangon = 26;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/parent_tools/native/FamilyCenterModalQRCode.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: FamilyCenterModalQRCode
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot13;
            tangon = undefined;
            output = michal.bind(tangon)();
            var _closure2_slot0 = output;
            record = _closure1_slot1;
            result = _closure1_slot2;
            michal = 8;
            michal = result[michal];
            michal = record.bind(tangon)(michal);
            zuuluu = michal.bind(tangon)();
            report = _closure1_slot4;
            oscard = report.useState;
            michal = false;
            golfie = oscard.bind(report)(michal);
            oscard = _closure1_slot3;
            michal = 2;
            oscard = oscard.bind(tangon)(golfie, michal);
            michal = 0;
            update = oscard[michal];
            var _closure2_slot1 = update;
            michal = 1;
            michal = oscard[michal];
            var _closure2_slot2 = michal;
            echoed = _closure1_slot0;
            oscard = 9;
            michal = result[oscard];
            golfie = echoed.bind(tangon)(michal);
            michal = golfie.usePendingRequestCount;
            michal = michal.bind(golfie)();
            var _closure2_slot3 = michal;
            golfie = report.useRef;
            golfie = golfie.bind(report)(michal);
            var _closure2_slot4 = golfie;
            offset = report.useCallback;
            verify = function() {
                verify = _closure1_slot0;
                tangon = _closure1_slot2;
                entity = 10;
                zuuluu = tangon[entity];
                entity = undefined;
                oscard = verify.bind(entity)(zuuluu);
                report = oscard.presentFailedToast;
                zuuluu = 11;
                golfie = tangon[zuuluu];
                golfie = verify.bind(entity)(golfie);
                option = golfie.intl;
                golfie = option.string;
                zuuluu = tangon[zuuluu];
                zuuluu = verify.bind(entity)(zuuluu);
                zuuluu = zuuluu.t;
                zuuluu = zuuluu.R0RpRU;
                zuuluu = golfie.bind(option)(zuuluu);
                zuuluu = report.bind(oscard)(zuuluu);
                zuuluu = _closure1_slot1;
                michal = 12;
                michal = tangon[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.pop;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            option = new Array(0);
            yankee = offset.bind(report)(verify, option);
            option = 13;
            option = result[option];
            offset = echoed.bind(tangon)(option);
            verify = offset.useFamilyCenterActions;
            option = {};
            option['onError'] = yankee;
            option = verify.bind(offset)(option);
            verify = option.getLinkCode;
            var _closure2_slot5 = verify;
            backup = option.isGetLinkCodeLoading;
            var _closure2_slot6 = backup;
            oscard = result[oscard];
            option = echoed.bind(tangon)(oscard);
            oscard = option.useUserQRLinkUrl;
            romeon = oscard.bind(option)();
            oscard = 14;
            oscard = result[oscard];
            option = record.bind(tangon)(oscard);
            oscard = !zuuluu;
            zuuluu = 'FamilyCenterQRCodeModal should only be rendered for teens.';
            zuuluu = option.bind(tangon)(oscard, zuuluu);
            zuuluu = 15;
            zuuluu = result[zuuluu];
            oscard = record.bind(tangon)(zuuluu);
            zuuluu = function() {
                michal = _closure2_slot5;
                entity = undefined;
                michal = michal.bind(entity)();
                return entity;
            };
            zuuluu = oscard.bind(tangon)(zuuluu);
            oscard = report.useEffect;
            zuuluu = new Array(2);
            zuuluu[0] = golfie;
            zuuluu[1] = michal;
            michal = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot3;
                    entity = _closure2_slot4;
                    entity = entity.current;
                    if(!(michal > entity)) { _fun00004_ip = 55; continue _fun00003 }
 20:
                    zuuluu = _closure1_slot1;
                    michal = _closure1_slot2;
                    entity = 12;
                    michal = michal[entity];
                    entity = undefined;
                    michal = zuuluu.bind(entity)(michal);
                    entity = michal.pop;
                    entity = entity.bind(michal)();
 55:
                    entity = undefined;
                    return entity;
                }
            };
            michal = oscard.bind(report)(michal, zuuluu);
            oscard = report.useCallback;
            zuuluu = new Array(1);
            zuuluu[0] = update;
            michal = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    report = _closure2_slot2;
                    entity = undefined;
                    tangon = function(argFoo) {
                        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                            zuuluu = _closure1_slot1;
                            michal = _closure1_slot2;
                            entity = 16;
                            michal = michal[entity];
                            entity = undefined;
                            tangon = zuuluu.bind(entity)(michal);
                            zuuluu = tangon.track;
                            entity = _closure1_slot9;
                            michal = entity.FAMILY_CENTER_ACTION;
                            entity = {};
                            report = _closure2_slot1;
                            oscard = _closure1_slot6;
                            if(report) { _fun00008_ip = 64; continue _fun00007 }
 56:
                            report = oscard.RevealQRCode;
                            _fun00008_ip = 70; continue _fun00007;
 64:
                            report = oscard.HideQRCode;
 70:
                            entity['action'] = report;
                            entity = zuuluu.bind(tangon)(michal, entity);
                            entity = argFoo;
                            entity = !entity;
                            return entity;
                        }
                    };
                    tangon = report.bind(entity)(tangon);
                    zuuluu = _closure2_slot1;
                    if(zuuluu) { _fun00006_ip = 58; continue _fun00005 }
 30:
                    zuuluu = global;
                    tangon = zuuluu.setTimeout;
                    zuuluu = _closure1_slot8;
                    michal = function() {
                        zuuluu = _closure1_slot1;
                        michal = _closure1_slot2;
                        entity = 12;
                        michal = michal[entity];
                        entity = undefined;
                        zuuluu = zuuluu.bind(entity)(michal);
                        michal = zuuluu.pop;
                        michal = michal.bind(zuuluu)();
                        return entity;
                    };
                    michal = tangon.bind(entity)(michal, zuuluu);
 58:
                    return entity;
                }
            };
            source = oscard.bind(report)(michal, zuuluu);
            var _closure2_slot7 = source;
            zuuluu = report.useCallback;
            michal = new Array(4);
            michal[0] = backup;
            michal[1] = update;
            michal[2] = output;
            michal[3] = source;
            entity = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    tangon = _closure1_slot12;
                    zuuluu = _closure1_slot11;
                    michal = {};
                    golfie = _closure1_slot10;
                    verify = _closure1_slot1;
                    option = _closure1_slot2;
                    foxtra = 17;
                    report = option[foxtra];
                    entity = undefined;
                    oscard = verify.bind(entity)(report);
                    report = {};
                    offset = _closure2_slot6;
                    report['disabled'] = offset;
                    report['loading'] = offset;
                    offset = _closure2_slot0;
                    offset = offset.button;
                    report['style'] = offset;
                    backup = 7;
                    offset = option[backup];
                    offset = verify.bind(entity)(offset);
                    offset = offset.radii;
                    offset = offset.xs;
                    report['cornerRadius'] = offset;
                    offset = option[foxtra];
                    offset = verify.bind(entity)(offset);
                    offset = offset.Colors;
                    offset = offset.BRAND;
                    report['color'] = offset;
                    option = option[foxtra];
                    option = verify.bind(entity)(option);
                    option = option.Sizes;
                    option = option.MEDIUM;
                    report['size'] = option;
                    option = _closure2_slot1;
                    yankee = _closure1_slot0;
                    result = _closure1_slot2;
                    verify = 11;
                    offset = result[verify];
                    offset = yankee.bind(entity)(offset);
                    sizing = offset.intl;
                    yankee = sizing.string;
                    output = _closure1_slot1;
                    offset = 18;
                    offset = result[offset];
                    offset = output.bind(entity)(offset);
                    if(option) { _fun00010_ip = 217; continue _fun00009 }
 202:
                    option = offset.10dX6e;
                    option = yankee.bind(sizing)(option);
                    _fun00010_ip = 230; continue _fun00009;
 217:
                    offset = offset.wg2xwc;
                    option = yankee.bind(sizing)(offset);
 230:
                    report['text'] = option;
                    option = _closure2_slot7;
                    report['onPress'] = option;
                    oscard = golfie.bind(entity)(oscard, report);
                    report = new Array(2);
                    report[0] = oscard;
                    option = _closure1_slot10;
                    offset = _closure1_slot1;
                    yankee = _closure1_slot2;
                    oscard = yankee[foxtra];
                    golfie = offset.bind(entity)(oscard);
                    oscard = {};
                    kiloes = _closure2_slot0;
                    kiloes = kiloes.button;
                    oscard['style'] = kiloes;
                    backup = yankee[backup];
                    backup = offset.bind(entity)(backup);
                    backup = backup.radii;
                    backup = backup.xs;
                    oscard['cornerRadius'] = backup;
                    backup = yankee[foxtra];
                    backup = offset.bind(entity)(backup);
                    backup = backup.Colors;
                    backup = backup.TRANSPARENT;
                    oscard['color'] = backup;
                    foxtra = yankee[foxtra];
                    foxtra = offset.bind(entity)(foxtra);
                    foxtra = foxtra.Sizes;
                    foxtra = foxtra.MEDIUM;
                    oscard['size'] = foxtra;
                    backup = _closure1_slot0;
                    romeon = yankee[verify];
                    romeon = backup.bind(entity)(romeon);
                    foxtra = romeon.intl;
                    romeon = foxtra.string;
                    verify = yankee[verify];
                    verify = backup.bind(entity)(verify);
                    verify = verify.t;
                    verify = verify.cpT0Cg;
                    verify = romeon.bind(foxtra)(verify);
                    oscard['text'] = verify;
                    verify = 12;
                    verify = yankee[verify];
                    verify = offset.bind(entity)(verify);
                    verify = verify.pop;
                    oscard['onPress'] = verify;
                    oscard = option.bind(entity)(golfie, oscard);
                    report[1] = oscard;
                    michal['children'] = report;
                    entity = tangon.bind(entity)(zuuluu, michal);
                    return entity;
                }
            };
            report = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot10;
            entity = 19;
            entity = result[entity];
            michal = record.bind(tangon)(entity);
            entity = {};
            report = report.bind(tangon)();
            entity['footer'] = report;
            golfie = _closure1_slot12;
            oscard = _closure1_slot11;
            report = {};
            yankee = _closure1_slot5;
            option = {};
            verify = output.noticeContainer;
            option['style'] = verify;
            verify = {};
            offset = output.noticeIconCircle;
            verify['style'] = offset;
            offset = 20;
            offset = result[offset];
            foxtra = record.bind(tangon)(offset);
            offset = {};
            sizing = output.noticeIcon;
            offset['style'] = sizing;
            sizing = 21;
            sizing = result[sizing];
            sizing = record.bind(tangon)(sizing);
            offset['source'] = sizing;
            offset = zuuluu.bind(tangon)(foxtra, offset);
            verify['children'] = offset;
            verify = zuuluu.bind(tangon)(yankee, verify);
            offset = new Array(2);
            offset[0] = verify;
            verify = 22;
            foxtra = result[verify];
            foxtra = echoed.bind(tangon)(foxtra);
            vacuum = foxtra.Text;
            ctrled = {};
            foxtra = output.noticeText;
            ctrled['style'] = foxtra;
            foxtra = 'text-sm/semibold';
            ctrled['variant'] = foxtra;
            foxtra = 11;
            sizing = result[foxtra];
            sizing = echoed.bind(tangon)(sizing);
            cntext = sizing.intl;
            config = cntext.string;
            sizing = 18;
            sequen = result[sizing];
            sequen = record.bind(tangon)(sequen);
            sequen = sequen.iHYMAw;
            sequen = config.bind(cntext)(sequen);
            ctrled['children'] = sequen;
            ctrled = zuuluu.bind(tangon)(vacuum, ctrled);
            offset[1] = ctrled;
            option['children'] = offset;
            offset = golfie.bind(tangon)(yankee, option);
            option = new Array(4);
            option[0] = offset;
            offset = {};
            ctrled = output.header;
            offset['style'] = ctrled;
            ctrled = result[verify];
            ctrled = echoed.bind(tangon)(ctrled);
            vacuum = ctrled.Text;
            ctrled = {'style': null, 'variant': 'text-lg/bold', 'color': 'header-primary'};
            sequen = output.headerText;
            ctrled['style'] = sequen;
            sequen = result[foxtra];
            sequen = echoed.bind(tangon)(sequen);
            cntext = sequen.intl;
            config = cntext.string;
            sequen = result[sizing];
            sequen = record.bind(tangon)(sequen);
            sequen = sequen.AVTZaG;
            sequen = config.bind(cntext)(sequen);
            ctrled['children'] = sequen;
            vacuum = zuuluu.bind(tangon)(vacuum, ctrled);
            ctrled = new Array(2);
            ctrled[0] = vacuum;
            vacuum = 23;
            vacuum = result[vacuum];
            vacuum = echoed.bind(tangon)(vacuum);
            sequen = vacuum.TextWithIOSLinkWorkaround;
            vacuum = {'style': null, 'variant': 'text-sm/normal', 'color': 'header-secondary'};
            config = output.description;
            vacuum['style'] = config;
            config = result[foxtra];
            config = echoed.bind(tangon)(config);
            papara = config.intl;
            cntext = papara.format;
            config = result[sizing];
            config = record.bind(tangon)(config);
            record = config.LyyCsL;
            config = {};
            target = 'https://support.discord.com/hc/articles/14155060633623';
            config['link'] = target;
            config = cntext.bind(papara)(record, config);
            vacuum['children'] = config;
            vacuum = zuuluu.bind(tangon)(sequen, vacuum);
            ctrled[1] = vacuum;
            offset['children'] = ctrled;
            offset = golfie.bind(tangon)(yankee, offset);
            option[1] = offset;
            offset = 24;
            offset = result[offset];
            offset = echoed.bind(tangon)(offset);
            yankee = offset.PressableOpacity;
            offset = {};
            ctrled = output.qrCode;
            offset['style'] = ctrled;
            offset['onPress'] = source;
            source = 0.6;
            offset['activeOpacity'] = source;
            source = 25;
            result = result[source];
            result = echoed.bind(tangon)(result);
            echoed = result.QRCodeWithOverlay;
            result = {};
            ctrled = 237;
            result['size'] = ctrled;
            if(!update) { _fun00002_ip = 946; continue _fun00001 }
 937:
            if(backup) { _fun00002_ip = 946; continue _fun00001 }
 940:
            backup = null;
            if(!(backup == romeon)) { _fun00002_ip = 950; continue _fun00001 }
 946:
            romeon = _closure1_slot7;
 950:
            result['text'] = romeon;
            backup = _closure1_slot0;
            romeon = _closure1_slot2;
            source = romeon[source];
            source = backup.bind(tangon)(source);
            source = source.QRCodeOverlaySizes;
            source = source.SIZE_60;
            result['overlaySize'] = source;
            update = !update;
            result['blur'] = update;
            result = zuuluu.bind(tangon)(echoed, result);
            offset['children'] = result;
            offset = zuuluu.bind(tangon)(yankee, offset);
            option[2] = offset;
            yankee = _closure1_slot10;
            verify = romeon[verify];
            verify = backup.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-xs/semibold', 'color': 'header-secondary'};
            output = output.reminder;
            verify['style'] = output;
            foxtra = romeon[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            kiloes = _closure1_slot1;
            romeon = romeon[sizing];
            romeon = kiloes.bind(tangon)(romeon);
            romeon = romeon.goDyoa;
            romeon = foxtra.bind(backup)(romeon);
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[3] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();