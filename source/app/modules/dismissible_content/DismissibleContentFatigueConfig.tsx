// app/modules/dismissible_content/DismissibleContentFatigueConfig.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    michal = true;
    tangon['value'] = michal;
    michal = '__esModule';
    michal = golfie.bind(option)(zuuluu, michal, tangon);
    golfie = entity.Set;
    tangon = 0;
    michal = oscard[tangon];
    entity = undefined;
    michal = report.bind(entity)(michal);
    michal = michal.DismissibleContent;
    option = michal.APPLICATION_COMMAND_TOOLTIP;
    michal = new Array(89);
    michal[0] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.NOW_PLAYING_CONSENT_CARD;
    michal[1] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.GUILD_INSIGHTS_ACCESS_RATE_NEW;
    michal[2] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.FORUM_CHANNEL_UPSELL_MODAL;
    michal[3] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.FORUM_CHANNEL_HELPER_CARD;
    michal[4] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.AUTH_SESSIONS_NEW;
    michal[5] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.COMMANDS_MIGRATION_UPSELL_MODAL;
    michal[6] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.HUB_BACK_TO_SCHOOL_UPSELL;
    michal[7] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CHANNEL_BROWSER_NUX;
    michal[8] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.BLACK_FRIDAY_2022_BOGO_ANNOUNCEMENT_MODAL;
    michal[9] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.GG_ANNOUNCEMENT;
    michal[10] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.GUILD_ONBOARDING_UPSELL_MODAL;
    michal[11] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.SEASONAL_GIFTING_COACHMARK_2022;
    michal[12] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CLIENT_THEMES_SETTINGS_BADGE;
    michal[13] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CLIENT_THEMES_SPARKLE_PREVIEW;
    michal[14] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.QUEST_1_COMPLETION_TOOLTIP;
    michal[15] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.SOUNDBOARD_VOLUME_EDUCATION;
    michal[16] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.REMIXING_ENTRYPOINT_EDUCATION_UPSELLS_MOBILE;
    michal[17] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.GUEST_VOICE_INVITES_MENU_ITEM_NEW_BADGE;
    michal[18] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CUSTOM_CALL_SOUNDS_PICKER_UPSELL;
    michal[19] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CLIPS_ONBOARDING_CLIP_BUTTON_COACHMARK;
    michal[20] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CUSTOM_APP_ICONS_NEW_BADGE;
    michal[21] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.DEKSTOP_CUSTOM_APP_ICON_BADGE;
    michal[22] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.RECURRING_CONTACT_SYNC_PROMPT;
    michal[23] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.NUX_GUILD_CHANNEL_EXPLAINER;
    michal[24] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.SUPER_REACTION_TOGGLE_EDUCATION_MOBILE;
    michal[25] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.SUPER_REACTION_TOGGLE_EDUCATION_DESKTOP;
    michal[26] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.FRIEND_FINDER_CONTACTS_IN_NOTIFICATIONS;
    michal[27] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.VOICE_CALL_BG_PICKER_NEW_BADGE;
    michal[28] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TENURE_REWARD_PENDING;
    michal[29] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TENURE_REWARD_REDEEMABLE;
    michal[30] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.WHATS_NEW_TENURE_BADGE_REWARD;
    michal[31] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.ACTIVITIES_CHAT_MENU_NEW_BADGE;
    michal[32] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.ACTIVITIES_CHAT_BUTTON_NUX_V2;
    michal[33] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TENURE_REWARD_REDEEMABLE_CONFETTI;
    michal[34] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.APP_LAUNCHER_ONBOARDING_ACTIVITIES_BANNER;
    michal[35] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.APP_LAUNCHER_ONBOARDING_APPS_BANNER;
    michal[36] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.APP_LAUNCHER_ONBOARDING_BOTS_BANNER;
    michal[37] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.PREMIUM_CUSTOM_NOTIFICATION_SOUNDS_GDM_DM_BADGE;
    michal[38] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.PREMIUM_SUBSCRIPTION_APRIL_MARKETING_DECO_TOOLTIP;
    michal[39] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CHANNEL_LIST_CLAN_ADMIN_UPSELL;
    michal[40] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.GUILD_LIST_CLAN_ADMIN_UPSELL;
    michal[41] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.BRAND_REFRESH_NEW_BADGE;
    michal[42] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.BRAND_REFRESH_CLIENT_THEME_BADGE;
    michal[43] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.APP_LAUNCHER_USER_APP_BETA_NOTICE;
    michal[44] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.QUEST_HOME_FRIENDS_LIST_NEW_BADGE;
    michal[45] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.WHATS_NEW_APP_STYLES_JUNE_2024_FLIP;
    michal[46] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.WHATS_NEW_REFERRAL_PROGRAM_FLIP;
    michal[47] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.WHATS_NEW_APP_STYLES_JUNE_2024_NITRO_BADGE;
    michal[48] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.WHATS_NEW_REFERRAL_PROGRAM_NITRO_BADGE;
    michal[49] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.WHATS_NEW_SERVER_PROFILE_FLIP;
    michal[50] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.WHATS_NEW_SERVER_PROFILE_BADGE;
    michal[51] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.DESKTOP_APP_LAUNCHER_ONBOARDING;
    michal[52] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.ICYMI_ALPHA_UPSELL;
    michal[53] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.PASSWORDLESS_UPSELL;
    michal[54] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.CHANNEL_LINKED_LOBBY_EDUCATION_TOOLTIP;
    michal[55] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.REVERSE_TRIAL_NITRO_TAB_BADGE;
    michal[56] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.REVERSE_TRIAL_ENDED_UPSELL;
    michal[57] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.REVERSE_TRIAL_STREAM_POPOUT;
    michal[58] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.REVERSE_TRIAL_EMOJI_BUTTON;
    michal[59] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.REVERSE_TRIAL_EMOJI_PICKER;
    michal[60] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.NITROWEEN_ANIMATED_GIFTING_ICON;
    michal[61] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TRIAL_FOR_ALL_INITIAL_UPSELL;
    michal[62] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TRIAL_FOR_ALL_MOBILE_SETTINGS_NOTICE;
    michal[63] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.USER_PROFILE_PREMIUM_AND_SHOP_ENTRY_POINTS;
    michal[64] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.FRACTIONAL_NITRO_DURATION_LEFT_PILL;
    michal[65] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.RESTRICTED_ACCOUNTS_SETTING_NOTICE;
    michal[66] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.IGNORE_USER_NEW_BADGE;
    michal[67] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.SOUNDMOJI_BADGE;
    michal[68] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TRIAL_NUX_EMOJI_BUTTON;
    michal[69] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TRIAL_NUX_EMOJI_PICKER;
    michal[70] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.TRIAL_NUX_STREAM_COACH_MARK;
    michal[71] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.VIRTUAL_CURRENCY_ONBOARDING_ANNOUNCEMENT_MODAL;
    michal[72] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.Q1_2025_MARKETING_MOMENT_PROMO_SHEET;
    michal[73] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.VOICE_FILTER_LOOPBACK_COACHMARK;
    michal[74] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.GUILD_POWERUPS_OVERVIEW_SIDEBAR_COACHMARK;
    michal[75] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.RECENT_AVATARS_SETTINGS_PROFILE_PAGE_NEW_BADGE;
    michal[76] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.OVERLAY_OOP_SETTINGS_NUX;
    michal[77] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.OVERLAY_OOP_WELCOME_BACKGROUND_NUX;
    michal[78] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.OVERLAY_OOP_WELCOME_BACKGROUND_SWITCH_FROM_IP_NUX;
    michal[79] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.OVERLAY_OOP_WELCOME_NUX;
    michal[80] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.OVERLAY_OOP_WELCOME_SWITCH_FROM_IP_NUX;
    michal[81] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.REVERSE_TRIAL_NITRO_TAB_BADGE_V2;
    michal[82] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.Q1_2025_REVERSE_TRIAL;
    michal[83] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.Q1_2025_FOLLOW_UP_REVERSE_TRIAL_OFFER;
    michal[84] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.ACTIVITY_POPOUT_NUX_MODAL;
    michal[85] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.ACTIVITY_POPOUT_NUX_QUICK_REFOCUS_TOOLTIP;
    michal[86] = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.DismissibleContent;
    option = option.COLLECTIBLES_NAMEPLATE_SHOP_COACHMARK;
    michal[87] = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.DismissibleContent;
    tangon = tangon.RING_USER_TO_VC_NEW_BADGE;
    michal[88] = tangon;
    tangon = golfie.prototype;
    tangon = Object.create(tangon, {constructor: {value: golfie}});
    romeon = tangon;
    yankee = michal;
    michal = new romeon[golfie](yankee, offset);
    michal = michal instanceof Object ? michal : tangon;
    tangon = 1;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/dismissible_content/DismissibleContentFatigueConfig.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['CONTENT_TYPES_WITH_BYPASS_FATIGUE'] = michal;
    return entity;
})();