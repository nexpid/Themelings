// app/modules/dismissible_content/NewUserDismissibleContentRegistry.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBar;
    option = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = option;
    var _closure1_slot2 = golfie;
    michal = function(argFoo, argBar) { // Original name: isUserAccountOldEnough
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            oscard = argFoo;
            report = null;
            entity = report != oscard;
            if(!entity) { _fun00002_ip = 71; continue _fun00001 }
 12:
            golfie = _closure1_slot1;
            zuuluu = _closure1_slot2;
            michal = 5;
            zuuluu = zuuluu[michal];
            michal = undefined;
            zuuluu = golfie.bind(michal)(zuuluu);
            michal = zuuluu.age;
            zuuluu = michal.bind(zuuluu)(oscard);
            oscard = _closure1_slot5;
            michal = argBar;
            michal = oscard[michal];
            if(!(report == michal)) { _fun00002_ip = 67; continue _fun00001 }
 63:
            michal = _closure1_slot6;
 67:
            entity = zuuluu >= michal;
 71:
            return entity;
        }
    };
    var _closure1_slot7 = michal;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zuuluu, entity, report);
    offset = 0;
    report = golfie[offset];
    entity = undefined;
    report = option.bind(entity)(report);
    var _closure1_slot3 = report;
    report = 1;
    report = golfie[report];
    report = option.bind(entity)(report);
    var _closure1_slot4 = report;
    report = {};
    verify = 2;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.MJ_NEW_USER_CHAT_BAR;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.NUX_GUILD_CHANNEL_EXPLAINER;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.SEEN_LAUNCH_WELCOME;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.SEEN_OLD_DESIGN;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.REFERRAL_PROGRAM_PROGRESS_BAR_TOGGLE;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.WHATS_NEW_APP_STYLES_JUNE_2024_FLIP;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.WHATS_NEW_REFERRAL_PROGRAM_FLIP;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.WHATS_NEW_APP_STYLES_JUNE_2024_NITRO_BADGE;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.WHATS_NEW_REFERRAL_PROGRAM_NITRO_BADGE;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.WHATS_NEW_SERVER_PROFILE_FLIP;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.WHATS_NEW_SERVER_PROFILE_BADGE;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.WHATS_NEW_TENURE_BADGE_REWARD;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.FRACTIONAL_NITRO_DURATION_LEFT_PILL;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.TRIAL_NUX_EMOJI_BUTTON;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.TRIAL_NUX_EMOJI_PICKER;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.TRIAL_NUX_STREAM_COACH_MARK;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.OVERLAY_OOP_SETTINGS_NUX;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.OVERLAY_OOP_WELCOME_NUX;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.OVERLAY_OOP_WELCOME_BACKGROUND_NUX;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.OVERLAY_OOP_WELCOME_SWITCH_FROM_IP_NUX;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.OVERLAY_OOP_WELCOME_BACKGROUND_SWITCH_FROM_IP_NUX;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.Q1_2025_REVERSE_TRIAL;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.Q1_2025_FOLLOW_UP_REVERSE_TRIAL_OFFER;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.REVERSE_TRIAL_NITRO_TAB_BADGE_V2;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.PERMADECOS_NITRO_TAB_NEW_BADGE;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.PERMADECOS_NITRO_HOME_CARD_NEW_BADGE;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.Q2_2025_MARKETING_MOMENT_NITRO_TAB_BADGE_V2;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.Q2_2025_MARKETING_MOMENT_FOLLOW_UP_MODAL;
    report[yankee] = offset;
    yankee = golfie[verify];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DismissibleContent;
    yankee = yankee.Q2_2025_MARKETING_MOMENT_FIRST_IMPRESSION_MODAL;
    report[yankee] = offset;
    verify = golfie[verify];
    verify = oscard.bind(entity)(verify);
    verify = verify.DismissibleContent;
    verify = verify.BOGO_2025_ANNOUNCEMENT_MODAL;
    report[verify] = offset;
    var _closure1_slot5 = report;
    report = 3;
    report = golfie[report];
    report = option.bind(entity)(report);
    report = report.Millis;
    report = report.DAY;
    var _closure1_slot6 = report;
    report = 6;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/dismissible_content/NewUserDismissibleContentRegistry.tsx';
    report = oscard.bind(golfie)(report);
    report = function(argFoo) { // Original name: useNewUserDismissibleContent
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            tangon = argFoo;
            oscard = _closure1_slot0;
            report = _closure1_slot2;
            zuuluu = 4;
            report = report[zuuluu];
            zuuluu = undefined;
            oscard = oscard.bind(zuuluu)(report);
            report = oscard.useStateFromStoresObject;
            golfie = _closure1_slot3;
            zuuluu = new Array(2);
            zuuluu[0] = golfie;
            entity = _closure1_slot4;
            zuuluu[1] = entity;
            entity = function() {
                entity = {};
                tangon = _closure1_slot3;
                zuuluu = tangon.getId;
                zuuluu = zuuluu.bind(tangon)();
                entity['userId'] = zuuluu;
                michal = _closure1_slot4;
                michal = michal.newUserMinAgeRequiredOverridden;
                entity['newUserMinAgeRequiredOverridden'] = michal;
                return entity;
            };
            entity = report.bind(oscard)(zuuluu, entity);
            zuuluu = entity.userId;
            var _closure2_slot0 = zuuluu;
            zuuluu = entity.newUserMinAgeRequiredOverridden;
            entity = tangon;
            if(zuuluu) { _fun00004_ip = 103; continue _fun00003 }
 88:
            zuuluu = tangon.filter;
            michal = function(argFoo) {
                tangon = _closure1_slot7;
                zuuluu = _closure2_slot0;
                michal = undefined;
                entity = argFoo;
                entity = tangon.bind(michal)(zuuluu, entity);
                return entity;
            };
            entity = zuuluu.bind(tangon)(michal);
 103:
            return entity;
        }
    };
    zuuluu['useNewUserDismissibleContent'] = report;
    tangon = function(argFoo) { // Original name: disableNewUserDismissibleContent
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = _closure1_slot4;
            entity = entity.newUserMinAgeRequiredOverridden;
            entity = !entity;
            if(!entity) { _fun00006_ip = 51; continue _fun00005 }
 19:
            report = _closure1_slot7;
            zuuluu = _closure1_slot3;
            michal = zuuluu.getId;
            tangon = michal.bind(zuuluu)();
            zuuluu = undefined;
            michal = argFoo;
            michal = report.bind(zuuluu)(tangon, michal);
            entity = !michal;
 51:
            return entity;
        }
    };
    zuuluu['disableNewUserDismissibleContent'] = tangon;
    zuuluu['isUserAccountOldEnough'] = michal;
    return entity;
})();