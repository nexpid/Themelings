// app/modules/threads/native/components/redesign/ThreadListEmpty.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot4 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flex': 1, 'justifyContent': 'center', 'alignItems': 'center'};
    tangon['container'] = offset;
    offset = {};
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_MOD_SUBTLE;
    offset['backgroundColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.round;
    offset['borderRadius'] = yankee;
    yankee = 12;
    offset['padding'] = yankee;
    tangon['iconWrapper'] = offset;
    offset = {'textAlign': 'center', 'marginTop': 16, 'marginHorizontal': 16};
    tangon['title'] = offset;
    offset = {'textAlign': 'center', 'marginTop': 4, 'marginHorizontal': 16, 'marginBottom': 16};
    tangon['subtext'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot6 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            yankee = entity.onCreateThreadPress;
            entity = _closure1_slot6;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = romeon.container;
            entity['style'] = report;
            verify = _closure1_slot4;
            report = {};
            oscard = romeon.iconWrapper;
            report['style'] = oscard;
            backup = _closure1_slot1;
            offset = _closure1_slot2;
            foxtra = 5;
            oscard = offset[foxtra];
            option = backup.bind(tangon)(oscard);
            oscard = {};
            kiloes = 6;
            kiloes = offset[kiloes];
            kiloes = backup.bind(tangon)(kiloes);
            oscard['source'] = kiloes;
            foxtra = offset[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            foxtra = foxtra.Sizes;
            foxtra = foxtra.MEDIUM;
            oscard['size'] = foxtra;
            oscard = verify.bind(tangon)(option, oscard);
            report['children'] = oscard;
            oscard = verify.bind(tangon)(michal, report);
            report = new Array(4);
            report[0] = oscard;
            kiloes = _closure1_slot0;
            oscard = 7;
            option = offset[oscard];
            option = kiloes.bind(tangon)(option);
            foxtra = option.Text;
            option = {'style': null, 'accessibilityRole': 'header', 'maxFontSizeMultiplier': 2, 'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            backup = romeon.title;
            option['style'] = backup;
            backup = 8;
            sizing = offset[backup];
            sizing = kiloes.bind(tangon)(sizing);
            result = sizing.intl;
            output = result.string;
            sizing = offset[backup];
            sizing = kiloes.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.HgTQ8v;
            sizing = output.bind(result)(sizing);
            option['children'] = sizing;
            option = verify.bind(tangon)(foxtra, option);
            report[1] = option;
            oscard = offset[oscard];
            oscard = kiloes.bind(tangon)(oscard);
            option = oscard.Text;
            oscard = {'style': null, 'maxFontSizeMultiplier': 2, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            romeon = romeon.subtext;
            oscard['style'] = romeon;
            romeon = offset[backup];
            romeon = kiloes.bind(tangon)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.string;
            offset = offset[backup];
            offset = kiloes.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.jmq9GB;
            offset = romeon.bind(foxtra)(offset);
            oscard['children'] = offset;
            oscard = verify.bind(tangon)(option, oscard);
            report[2] = oscard;
            oscard = null;
            oscard = oscard != yankee;
            if(!oscard) { _fun00002_ip = 452; continue _fun00001 }
 362:
            verify = _closure1_slot4;
            foxtra = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = 9;
            golfie = offset[golfie];
            golfie = foxtra.bind(tangon)(golfie);
            option = golfie.Button;
            golfie = {};
            golfie['onPress'] = yankee;
            yankee = offset[backup];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = offset[backup];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.rBIGBA;
            offset = yankee.bind(romeon)(offset);
            golfie['text'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 452:
            report[3] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/threads/native/components/redesign/ThreadListEmpty.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();