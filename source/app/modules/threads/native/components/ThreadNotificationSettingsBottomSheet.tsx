// app/modules/threads/native/components/ThreadNotificationSettingsBottomSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.getThreadNotificationOptions;
    var _closure1_slot4 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'backgroundColor': null, 'paddingTop': 8, 'paddingBottom': 64};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    tangon['container'] = verify;
    verify = {};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    verify['borderRadius'] = romeon;
    tangon['cardBody'] = verify;
    verify = {'width': 22, 'height': 22};
    tangon['checkbox'] = verify;
    verify = {'height': 1, 'alignSelf': 'stretch', 'backgroundColor': null, 'marginLeft': 16};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = offset;
    tangon['divider'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/threads/native/components/ThreadNotificationSettingsBottomSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ThreadNotificationsBottomSheet
        entity = argFoo;
        zuuluu = entity.channel;
        var _closure2_slot0 = zuuluu;
        entity = _closure1_slot7;
        tangon = undefined;
        romeon = entity.bind(tangon)();
        var _closure2_slot1 = romeon;
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        entity = 6;
        entity = kiloes[entity];
        michal = backup.bind(tangon)(entity);
        entity = michal.useThreadNotificationSetting;
        entity = entity.bind(michal)(zuuluu);
        var _closure2_slot2 = entity;
        zuuluu = _closure1_slot6;
        entity = 7;
        entity = kiloes[entity];
        entity = backup.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        option = _closure1_slot5;
        report = 8;
        report = kiloes[report];
        report = backup.bind(tangon)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        yankee = 9;
        golfie = kiloes[yankee];
        golfie = backup.bind(tangon)(golfie);
        sizing = golfie.intl;
        foxtra = sizing.string;
        golfie = kiloes[yankee];
        golfie = backup.bind(tangon)(golfie);
        golfie = golfie.t;
        golfie = golfie.h850Sk;
        golfie = foxtra.bind(sizing)(golfie);
        report['title'] = golfie;
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = 10;
        oscard = kiloes[oscard];
        oscard = backup.bind(tangon)(oscard);
        golfie = oscard.FormCardSection;
        oscard = {};
        romeon = romeon.cardBody;
        oscard['cardStyle'] = romeon;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.h850Sk;
        yankee = romeon.bind(foxtra)(yankee);
        oscard['accessibilityLabel'] = yankee;
        yankee = 'radiogroup';
        oscard['accessibilityRole'] = yankee;
        offset = _closure1_slot4;
        yankee = offset.bind(tangon)();
        offset = yankee.map;
        verify = function(argFoo, argBar, argBaz) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                golfie = entity.setting;
                var _closure3_slot0 = golfie;
                yankee = entity.label;
                report = _closure1_slot6;
                tangon = _closure1_slot3;
                zuuluu = {};
                verify = _closure1_slot5;
                oscard = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 10;
                entity = michal[entity];
                michal = undefined;
                entity = oscard.bind(michal)(entity);
                oscard = entity.FormRadioRow;
                entity = {};
                romeon = 'right';
                entity['align'] = romeon;
                entity['label'] = yankee;
                offset = function() { // Original name: onPress
                    zuuluu = _closure1_slot1;
                    michal = _closure1_slot2;
                    entity = 11;
                    michal = michal[entity];
                    entity = undefined;
                    tangon = zuuluu.bind(entity)(michal);
                    zuuluu = tangon.setNotificationSettings;
                    michal = _closure2_slot0;
                    entity = {};
                    report = _closure3_slot0;
                    entity['flags'] = report;
                    entity = zuuluu.bind(tangon)(michal, entity);
                    return entity;
                };
                entity['onPress'] = offset;
                offset = _closure2_slot2;
                offset = offset === golfie;
                entity['selected'] = offset;
                oscard = verify.bind(michal)(oscard, entity);
                entity = new Array(2);
                entity[0] = oscard;
                oscard = argBaz;
                verify = oscard.length;
                oscard = 1;
                offset = verify - oscard;
                verify = argBar;
                oscard = null;
                if(!(verify !== offset)) { _fun00002_ip = 173; continue _fun00001 }
 143:
                offset = _closure1_slot5;
                verify = _closure1_slot3;
                option = {};
                yankee = _closure2_slot1;
                yankee = yankee.divider;
                option['style'] = yankee;
                oscard = offset.bind(michal)(verify, option);
 173:
                entity[1] = oscard;
                zuuluu['children'] = entity;
                entity = global;
                entity = entity.HermesInternal;
                oscard = entity.concat;
                entity = '';
                entity = oscard.bind(entity)(golfie);
                entity = report.bind(michal)(tangon, zuuluu, entity);
                return entity;
            }
        };
        verify = offset.bind(yankee)(verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();