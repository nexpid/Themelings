// app/modules/threads/native/components/ThreadNotificationSettingsBottomSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.getThreadNotificationOptions;
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'backgroundColor': null, 'paddingTop': 8, 'paddingBottom': 64};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeo;
    tango['container'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    verify['borderRadius'] = romeo;
    tango['cardBody'] = verify;
    verify = {'width': 22, 'height': 22};
    tango['checkbox'] = verify;
    verify = {'height': 1, 'alignSelf': 'stretch', 'backgroundColor': null, 'marginLeft': 16};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = offset;
    tango['divider'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 12;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/threads/native/components/ThreadNotificationSettingsBottomSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ThreadNotificationsBottomSheet
        entity = argFoo;
        zulu = entity.channel;
        var _closure2_slot0 = zulu;
        entity = _closure1_slot7;
        tango = undefined;
        romeo = entity.bind(tango)();
        var _closure2_slot1 = romeo;
        backup = _closure1_slot0;
        kilo = _closure1_slot2;
        entity = 6;
        entity = kilo[entity];
        mike = backup.bind(tango)(entity);
        entity = mike.useThreadNotificationSetting;
        entity = entity.bind(mike)(zulu);
        var _closure2_slot2 = entity;
        zulu = _closure1_slot6;
        entity = 7;
        entity = kilo[entity];
        entity = backup.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {};
        options = _closure1_slot5;
        report = 8;
        report = kilo[report];
        report = backup.bind(tango)(report);
        oscar = report.BottomSheetTitleHeader;
        report = {};
        yankee = 9;
        golf = kilo[yankee];
        golf = backup.bind(tango)(golf);
        sizing = golf.intl;
        foxtrot = sizing.string;
        golf = kilo[yankee];
        golf = backup.bind(tango)(golf);
        golf = golf.t;
        golf = golf.h850Sk;
        golf = foxtrot.bind(sizing)(golf);
        report['title'] = golf;
        oscar = options.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = 10;
        oscar = kilo[oscar];
        oscar = backup.bind(tango)(oscar);
        golf = oscar.FormCardSection;
        oscar = {};
        romeo = romeo.cardBody;
        oscar['cardStyle'] = romeo;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        foxtrot = romeo.intl;
        romeo = foxtrot.string;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.h850Sk;
        yankee = romeo.bind(foxtrot)(yankee);
        oscar['accessibilityLabel'] = yankee;
        yankee = 'radiogroup';
        oscar['accessibilityRole'] = yankee;
        offset = _closure1_slot4;
        yankee = offset.bind(tango)();
        offset = yankee.map;
        verify = function(argFoo, argBar, argBaz) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                entity = argFoo;
                golf = entity.setting;
                var _closure3_slot0 = golf;
                yankee = entity.label;
                report = _closure1_slot6;
                tango = _closure1_slot3;
                zulu = {};
                verify = _closure1_slot5;
                oscar = _closure1_slot0;
                mike = _closure1_slot2;
                entity = 10;
                entity = mike[entity];
                mike = undefined;
                entity = oscar.bind(mike)(entity);
                oscar = entity.FormRadioRow;
                entity = {};
                romeo = 'right';
                entity['align'] = romeo;
                entity['label'] = yankee;
                offset = function() { // Original name: onPress
                    zulu = _closure1_slot1;
                    mike = _closure1_slot2;
                    entity = 11;
                    mike = mike[entity];
                    entity = undefined;
                    tango = zulu.bind(entity)(mike);
                    zulu = tango.setNotificationSettings;
                    mike = _closure2_slot0;
                    entity = {};
                    report = _closure3_slot0;
                    entity['flags'] = report;
                    entity = zulu.bind(tango)(mike, entity);
                    return entity;
                };
                entity['onPress'] = offset;
                offset = _closure2_slot2;
                offset = offset === golf;
                entity['selected'] = offset;
                oscar = verify.bind(mike)(oscar, entity);
                entity = new Array(2);
                entity[0] = oscar;
                oscar = argBaz;
                verify = oscar.length;
                oscar = 1;
                offset = verify - oscar;
                verify = argBar;
                oscar = null;
                if(!(verify !== offset)) { _fun00002_ip = 175; continue _fun00001 }
 145:
                offset = _closure1_slot5;
                verify = _closure1_slot3;
                options = {};
                yankee = _closure2_slot1;
                yankee = yankee.divider;
                options['style'] = yankee;
                oscar = offset.bind(mike)(verify, options);
 175:
                entity[1] = oscar;
                zulu['children'] = entity;
                entity = global;
                entity = entity.HermesInternal;
                oscar = entity.concat;
                entity = '';
                entity = oscar.bind(entity)(golf);
                entity = report.bind(mike)(tango, zulu, entity);
                return entity;
            }
        };
        verify = offset.bind(yankee)(verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();