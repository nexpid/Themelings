// app/modules/feedback/native/CallSurveyRefreshExperiment.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    backup = true;
    tangon['value'] = backup;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    kiloes = {'showFormStyleSurvey': false, 'hideNeutralOption': false, 'showVibesHoneypot': false};
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    verify = report.bind(entity)(tangon);
    option = verify.createExperiment;
    golfie = {'kind': 'user', 'id': '2025-02_call_survey_refresh_native', 'label': 'Call Survey Refresh (Native)'};
    golfie['defaultConfig'] = kiloes;
    tangon = {'id': 1, 'label': 'Show form-style survey without neutral'};
    offset = {};
    echoed = offset;
    result = kiloes;
    yankee = copyDataProperties(echoed, result);
    yankee = 'showFormStyleSurvey';
    offset[yankee] = backup;
    foxtra = 'hideNeutralOption';
    offset[foxtra] = backup;
    tangon['config'] = offset;
    offset = new Array(3);
    offset[0] = tangon;
    yankee = {'id': 2, 'label': 'Show survey without neutral'};
    tangon = 2;
    romeon = {};
    echoed = romeon;
    result = kiloes;
    sizing = copyDataProperties(echoed, result);
    romeon[foxtra] = backup;
    yankee['config'] = romeon;
    offset[1] = yankee;
    yankee = {'id': 3, 'label': 'Show survey without neutral, and with vibes honeypot'};
    romeon = {};
    echoed = romeon;
    result = kiloes;
    kiloes = copyDataProperties(echoed, result);
    romeon[foxtra] = backup;
    foxtra = 'showVibesHoneypot';
    romeon[foxtra] = backup;
    yankee['config'] = romeon;
    offset[2] = yankee;
    golfie['treatments'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot2 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/feedback/native/CallSurveyRefreshExperiment.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: useCallSurveyRefreshExperiment
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.location;
            report = michal.autoTrackExposure;
            oscard = undefined;
            if(!(report === oscard)) { _fun00002_ip = 22; continue _fun00001 }
 20:
            report = true;
 22:
            tangon = _closure1_slot0;
            golfie = _closure1_slot1;
            zuuluu = 1;
            zuuluu = golfie[zuuluu];
            zuuluu = tangon.bind(oscard)(zuuluu);
            golfie = zuuluu.AVHoldoutExperimentH12025;
            oscard = golfie.useExperiment;
            tangon = {};
            tangon['location'] = entity;
            zuuluu = {};
            zuuluu['autoTrackExposure'] = report;
            zuuluu = oscard.bind(golfie)(tangon, zuuluu);
            oscard = zuuluu.isInHoldout;
            tangon = _closure1_slot2;
            zuuluu = tangon.useExperiment;
            michal = {};
            michal['location'] = entity;
            entity = {};
            entity['disable'] = oscard;
            entity['autoTrackExposure'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['useCallSurveyRefreshExperiment'] = michal;
    return entity;
})();