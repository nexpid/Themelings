// app/modules/feedback/native/FeedbackModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: FeedbackForm
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            entity = michal.result;
            var _closure2_slot0 = entity;
            zuuluu = michal.trackReport;
            var _closure2_slot1 = zuuluu;
            option = michal.titleLabel;
            update = michal.descriptionLabel;
            verify = michal.hideHelpdeskLink;
            michal = _closure1_slot9;
            tangon = undefined;
            kiloes = michal.bind(tangon)();
            vacuum = entity.reason;
            michal = _closure1_slot4;
            entity = michal.useState;
            result = '';
            zuuluu = entity.bind(michal)(result);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            output = michal[entity];
            var _closure2_slot2 = output;
            entity = 1;
            echoed = michal[entity];
            zuuluu = _closure1_slot8;
            michal = _closure1_slot6;
            entity = {};
            report = 'handled';
            entity['keyboardShouldPersistTaps'] = report;
            golfie = _closure1_slot8;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            source = 5;
            report = offset[source];
            report = yankee.bind(tangon)(report);
            oscard = report.FormSection;
            report = {};
            romeon = _closure1_slot7;
            offset = offset[source];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.FormInput;
            offset = {};
            sizing = null;
            sequen = sizing == vacuum;
            ctrled = undefined;
            if(sequen) { _fun00002_ip = 204; continue _fun00001 }
 199:
            ctrled = vacuum.label;
 204:
            offset['value'] = ctrled;
            if(!(sizing == option)) { _fun00002_ip = 269; continue _fun00001 }
 212:
            config = _closure1_slot0;
            record = _closure1_slot2;
            ctrled = 6;
            vacuum = record[ctrled];
            vacuum = config.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = record[ctrled];
            ctrled = config.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.vcqwCg;
            option = vacuum.bind(sequen)(ctrled);
 269:
            offset['title'] = option;
            option = true;
            offset['disabled'] = option;
            option = 'channel-input';
            offset = romeon.bind(tangon)(yankee, offset, option);
            option = new Array(3);
            option[0] = offset;
            vacuum = _closure1_slot7;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            romeon = offset[source];
            romeon = yankee.bind(tangon)(romeon);
            ctrled = romeon.FormDivider;
            romeon = {};
            romeon = vacuum.bind(tangon)(ctrled, romeon);
            option[1] = romeon;
            romeon = _closure1_slot7;
            offset = offset[source];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.FormInput;
            offset = {'value': null, 'title': null, 'onChange': null, 'multiline': true, 'numberOfLines': 4, 'autoCorrect': true};
            offset['value'] = output;
            if(!(sizing == update)) { _fun00002_ip = 439; continue _fun00001 }
 382:
            sequen = _closure1_slot0;
            config = _closure1_slot2;
            source = 6;
            ctrled = config[source];
            ctrled = sequen.bind(tangon)(ctrled);
            vacuum = ctrled.intl;
            ctrled = vacuum.string;
            source = config[source];
            source = sequen.bind(tangon)(source);
            source = source.t;
            source = source.h95hcn;
            update = ctrled.bind(vacuum)(source);
 439:
            offset['title'] = update;
            offset['onChange'] = echoed;
            offset = romeon.bind(tangon)(yankee, offset);
            option[2] = offset;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot5;
            oscard = {};
            offset = kiloes.bottomContainer;
            oscard['style'] = offset;
            offset = !verify;
            if(!offset) { _fun00002_ip = 659; continue _fun00001 }
 508:
            romeon = _closure1_slot7;
            update = _closure1_slot0;
            config = _closure1_slot2;
            verify = 7;
            verify = config[verify];
            verify = update.bind(tangon)(verify);
            yankee = verify.TextWithIOSLinkWorkaround;
            verify = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            echoed = kiloes.helpDeskLabel;
            verify['style'] = echoed;
            echoed = 6;
            source = config[echoed];
            source = update.bind(tangon)(source);
            ctrled = source.intl;
            source = ctrled.format;
            echoed = config[echoed];
            echoed = update.bind(tangon)(echoed);
            echoed = echoed.t;
            update = echoed.ybi2tL;
            echoed = {};
            sequen = _closure1_slot1;
            vacuum = 8;
            vacuum = config[vacuum];
            sequen = sequen.bind(tangon)(vacuum);
            vacuum = sequen.getSubmitRequestURL;
            vacuum = vacuum.bind(sequen)();
            echoed['helpdeskURL'] = vacuum;
            echoed = source.bind(ctrled)(update, echoed);
            verify['children'] = echoed;
            offset = romeon.bind(tangon)(yankee, verify);
 659:
            verify = new Array(2);
            verify[0] = offset;
            romeon = _closure1_slot7;
            yankee = _closure1_slot1;
            echoed = _closure1_slot2;
            offset = 9;
            offset = echoed[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            sizing = sizing == output;
            if(sizing) { _fun00002_ip = 704; continue _fun00001 }
 700:
            sizing = result === output;
 704:
            offset['disabled'] = sizing;
            kiloes = kiloes.submitButton;
            offset['style'] = kiloes;
            output = _closure1_slot0;
            result = _closure1_slot2;
            backup = 6;
            kiloes = result[backup];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = result[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.geKm7u;
            backup = kiloes.bind(sizing)(backup);
            offset['text'] = backup;
            foxtra = function() { // Original name: onPress
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 10;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.pop;
                michal = michal.bind(zuuluu)();
                zuuluu = _closure2_slot1;
                michal = {};
                oscard = _closure2_slot0;
                golfie = michal;
                report = copyDataProperties(golfie, oscard);
                report = _closure2_slot2;
                tangon = 'feedback';
                michal[tangon] = report;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            offset['onPress'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = function(argFoo, argBar) { // Original name: getScreens
        entity = argFoo;
        var _closure2_slot0 = entity;
        entity = {};
        michal = {};
        oscard = _closure1_slot0;
        golfie = _closure1_slot2;
        tangon = 6;
        option = golfie[tangon];
        report = undefined;
        option = oscard.bind(report)(option);
        verify = option.intl;
        option = verify.string;
        tangon = golfie[tangon];
        tangon = oscard.bind(report)(tangon);
        tangon = tangon.t;
        tangon = tangon.dBx+Cg;
        tangon = option.bind(verify)(tangon);
        michal['title'] = tangon;
        tangon = 11;
        tangon = golfie[tangon];
        oscard = oscard.bind(report)(tangon);
        report = oscard.getHeaderCloseButton;
        tangon = argBar;
        tangon = report.bind(oscard)(tangon);
        michal['headerLeft'] = tangon;
        zuuluu = function() { // Original name: render
            tangon = _closure1_slot7;
            zuuluu = _closure1_slot10;
            michal = {};
            report = _closure2_slot0;
            oscard = michal;
            entity = copyDataProperties(oscard, report);
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        michal['render'] = zuuluu;
        entity['Feedback'] = michal;
        return entity;
    };
    var _closure1_slot11 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot6 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 16;
    verify = {'lineHeight': 16, 'marginTop': 8};
    tangon['helpDeskLabel'] = verify;
    verify = {};
    verify['paddingHorizontal'] = offset;
    tangon['bottomContainer'] = verify;
    verify = {'marginTop': 24, 'marginBottom': 24};
    tangon['submitButton'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/feedback/native/FeedbackModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: FeedbackModal
        golfie = argFoo;
        option = golfie.result;
        var _closure2_slot0 = option;
        oscard = golfie.trackReport;
        var _closure2_slot1 = oscard;
        tangon = _closure1_slot4;
        zuuluu = tangon.useRef;
        michal = {};
        michal['result'] = option;
        michal['trackReport'] = oscard;
        michal = zuuluu.bind(tangon)(michal);
        var _closure2_slot2 = michal;
        tangon = _closure1_slot4;
        zuuluu = tangon.useEffect;
        michal = function() {
            michal = _closure2_slot2;
            entity = {};
            tangon = _closure2_slot0;
            entity['result'] = tangon;
            zuuluu = _closure2_slot1;
            entity['trackReport'] = zuuluu;
            michal['current'] = entity;
            entity = undefined;
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        tangon = _closure1_slot4;
        zuuluu = tangon.useCallback;
        michal = function() {
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 10;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.pop;
            michal = michal.bind(zuuluu)();
            michal = _closure2_slot2;
            michal = michal.current;
            zuuluu = michal.result;
            michal = michal.trackReport;
            michal = michal.bind(entity)(zuuluu);
            return entity;
        };
        entity = new Array(0);
        oscard = zuuluu.bind(tangon)(michal, entity);
        tangon = _closure1_slot7;
        michal = _closure1_slot0;
        zuuluu = _closure1_slot2;
        entity = 12;
        entity = zuuluu[entity];
        zuuluu = undefined;
        entity = michal.bind(zuuluu)(entity);
        michal = entity.Navigator;
        entity = {};
        option = 'Feedback';
        entity['initialRouteName'] = option;
        report = _closure1_slot11;
        report = report.bind(zuuluu)(golfie, oscard);
        entity['screens'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();