// app/modules/feedback/native/FeedbackModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: FeedbackForm
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            mike = argFoo;
            entity = mike.result;
            var _closure2_slot0 = entity;
            zulu = mike.trackReport;
            var _closure2_slot1 = zulu;
            options = mike.titleLabel;
            update = mike.descriptionLabel;
            verify = mike.hideHelpdeskLink;
            mike = _closure1_slot9;
            tango = undefined;
            kilo = mike.bind(tango)();
            vacuum = entity.reason;
            mike = _closure1_slot4;
            entity = mike.useState;
            result = '';
            zulu = entity.bind(mike)(result);
            mike = _closure1_slot3;
            entity = 2;
            mike = mike.bind(tango)(zulu, entity);
            entity = 0;
            output = mike[entity];
            var _closure2_slot2 = output;
            entity = 1;
            echo = mike[entity];
            zulu = _closure1_slot8;
            mike = _closure1_slot6;
            entity = {};
            report = 'handled';
            entity['keyboardShouldPersistTaps'] = report;
            golf = _closure1_slot8;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            source = 5;
            report = offset[source];
            report = yankee.bind(tango)(report);
            oscar = report.FormSection;
            report = {};
            romeo = _closure1_slot7;
            offset = offset[source];
            offset = yankee.bind(tango)(offset);
            yankee = offset.FormInput;
            offset = {};
            sizing = null;
            sequence = sizing == vacuum;
            control = undefined;
            if(sequence) { _fun00002_ip = 204; continue _fun00001 }
 199:
            control = vacuum.label;
 204:
            offset['value'] = control;
            if(!(sizing == options)) { _fun00002_ip = 269; continue _fun00001 }
 212:
            config = _closure1_slot0;
            record = _closure1_slot2;
            control = 6;
            vacuum = record[control];
            vacuum = config.bind(tango)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.string;
            control = record[control];
            control = config.bind(tango)(control);
            control = control.t;
            control = control.vcqwCg;
            options = vacuum.bind(sequence)(control);
 269:
            offset['title'] = options;
            options = true;
            offset['disabled'] = options;
            options = 'channel-input';
            offset = romeo.bind(tango)(yankee, offset, options);
            options = new Array(3);
            options[0] = offset;
            vacuum = _closure1_slot7;
            yankee = _closure1_slot0;
            offset = _closure1_slot2;
            romeo = offset[source];
            romeo = yankee.bind(tango)(romeo);
            control = romeo.FormDivider;
            romeo = {};
            romeo = vacuum.bind(tango)(control, romeo);
            options[1] = romeo;
            romeo = _closure1_slot7;
            offset = offset[source];
            offset = yankee.bind(tango)(offset);
            yankee = offset.FormInput;
            offset = {'value': null, 'title': null, 'onChange': null, 'multiline': true, 'numberOfLines': 4, 'autoCorrect': true};
            offset['value'] = output;
            if(!(sizing == update)) { _fun00002_ip = 435; continue _fun00001 }
 378:
            sequence = _closure1_slot0;
            config = _closure1_slot2;
            source = 6;
            control = config[source];
            control = sequence.bind(tango)(control);
            vacuum = control.intl;
            control = vacuum.string;
            source = config[source];
            source = sequence.bind(tango)(source);
            source = source.t;
            source = source.h95hcn;
            update = control.bind(vacuum)(source);
 435:
            offset['title'] = update;
            offset['onChange'] = echo;
            offset = romeo.bind(tango)(yankee, offset);
            options[2] = offset;
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot8;
            golf = _closure1_slot5;
            oscar = {};
            offset = kilo.bottomContainer;
            oscar['style'] = offset;
            offset = !verify;
            if(!offset) { _fun00002_ip = 655; continue _fun00001 }
 504:
            romeo = _closure1_slot7;
            update = _closure1_slot0;
            config = _closure1_slot2;
            verify = 7;
            verify = config[verify];
            verify = update.bind(tango)(verify);
            yankee = verify.TextWithIOSLinkWorkaround;
            verify = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            echo = kilo.helpDeskLabel;
            verify['style'] = echo;
            echo = 6;
            source = config[echo];
            source = update.bind(tango)(source);
            control = source.intl;
            source = control.format;
            echo = config[echo];
            echo = update.bind(tango)(echo);
            echo = echo.t;
            update = echo.ybi2tL;
            echo = {};
            sequence = _closure1_slot1;
            vacuum = 8;
            vacuum = config[vacuum];
            sequence = sequence.bind(tango)(vacuum);
            vacuum = sequence.getSubmitRequestURL;
            vacuum = vacuum.bind(sequence)();
            echo['helpdeskURL'] = vacuum;
            echo = source.bind(control)(update, echo);
            verify['children'] = echo;
            offset = romeo.bind(tango)(yankee, verify);
 655:
            verify = new Array(2);
            verify[0] = offset;
            romeo = _closure1_slot7;
            yankee = _closure1_slot1;
            echo = _closure1_slot2;
            offset = 9;
            offset = echo[offset];
            yankee = yankee.bind(tango)(offset);
            offset = {};
            sizing = sizing == output;
            if(sizing) { _fun00002_ip = 700; continue _fun00001 }
 696:
            sizing = result === output;
 700:
            offset['disabled'] = sizing;
            kilo = kilo.submitButton;
            offset['style'] = kilo;
            output = _closure1_slot0;
            result = _closure1_slot2;
            backup = 6;
            kilo = result[backup];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = result[backup];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            backup = backup.geKm7u;
            backup = kilo.bind(sizing)(backup);
            offset['text'] = backup;
            foxtrot = function() { // Original name: onPress
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 10;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.pop;
                mike = mike.bind(zulu)();
                zulu = _closure2_slot1;
                mike = {};
                oscar = _closure2_slot0;
                golf = mike;
                report = copyDataProperties(golf, oscar);
                report = _closure2_slot2;
                tango = 'feedback';
                mike[tango] = report;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            offset['onPress'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = function(argFoo, argBar) { // Original name: getScreens
        entity = argFoo;
        var _closure2_slot0 = entity;
        entity = {};
        mike = {};
        oscar = _closure1_slot0;
        golf = _closure1_slot2;
        tango = 6;
        options = golf[tango];
        report = undefined;
        options = oscar.bind(report)(options);
        verify = options.intl;
        options = verify.string;
        tango = golf[tango];
        tango = oscar.bind(report)(tango);
        tango = tango.t;
        tango = tango.dBx+Cg;
        tango = options.bind(verify)(tango);
        mike['title'] = tango;
        tango = 11;
        tango = golf[tango];
        oscar = oscar.bind(report)(tango);
        report = oscar.getHeaderCloseButton;
        tango = argBar;
        tango = report.bind(oscar)(tango);
        mike['headerLeft'] = tango;
        zulu = function() { // Original name: render
            tango = _closure1_slot7;
            zulu = _closure1_slot10;
            mike = {};
            report = _closure2_slot0;
            oscar = mike;
            entity = copyDataProperties(oscar, report);
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike);
            return entity;
        };
        mike['render'] = zulu;
        entity['Feedback'] = mike;
        return entity;
    };
    var _closure1_slot11 = entity;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = golf.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot5 = golf;
    tango = tango.ScrollView;
    var _closure1_slot6 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    offset = 16;
    verify = {'lineHeight': 16, 'marginTop': 8};
    tango['helpDeskLabel'] = verify;
    verify = {};
    verify['paddingHorizontal'] = offset;
    tango['bottomContainer'] = verify;
    verify = {'marginTop': 24, 'marginBottom': 24};
    tango['submitButton'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 13;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/feedback/native/FeedbackModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: FeedbackModal
        golf = argFoo;
        options = golf.result;
        var _closure2_slot0 = options;
        oscar = golf.trackReport;
        var _closure2_slot1 = oscar;
        tango = _closure1_slot4;
        zulu = tango.useRef;
        mike = {};
        mike['result'] = options;
        mike['trackReport'] = oscar;
        mike = zulu.bind(tango)(mike);
        var _closure2_slot2 = mike;
        tango = _closure1_slot4;
        zulu = tango.useEffect;
        mike = function() {
            mike = _closure2_slot2;
            entity = {};
            tango = _closure2_slot0;
            entity['result'] = tango;
            zulu = _closure2_slot1;
            entity['trackReport'] = zulu;
            mike['current'] = entity;
            entity = undefined;
            return entity;
        };
        mike = zulu.bind(tango)(mike);
        tango = _closure1_slot4;
        zulu = tango.useCallback;
        mike = function() {
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 10;
            mike = mike[entity];
            entity = undefined;
            zulu = zulu.bind(entity)(mike);
            mike = zulu.pop;
            mike = mike.bind(zulu)();
            mike = _closure2_slot2;
            mike = mike.current;
            zulu = mike.result;
            mike = mike.trackReport;
            mike = mike.bind(entity)(zulu);
            return entity;
        };
        entity = new Array(0);
        oscar = zulu.bind(tango)(mike, entity);
        tango = _closure1_slot7;
        mike = _closure1_slot0;
        zulu = _closure1_slot2;
        entity = 12;
        entity = zulu[entity];
        zulu = undefined;
        entity = mike.bind(zulu)(entity);
        mike = entity.Navigator;
        entity = {};
        options = 'Feedback';
        entity['initialRouteName'] = options;
        report = _closure1_slot11;
        report = report.bind(zulu)(golf, oscar);
        entity['screens'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();