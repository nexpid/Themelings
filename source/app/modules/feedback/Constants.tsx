// app/modules/feedback/Constants.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    golfie = {};
    entity = 'bad';
    golfie['BAD'] = entity;
    entity = 'neutral';
    golfie['NEUTRAL'] = entity;
    entity = 'good';
    golfie['GOOD'] = entity;
    oscard = {};
    entity = 'VOICE';
    oscard['VOICE'] = entity;
    entity = 'STREAM';
    oscard['STREAM'] = entity;
    entity = 'VOICE_BACKGROUND';
    oscard['VIDEO_BACKGROUND'] = entity;
    entity = 'ACTIVITY';
    oscard['ACTIVITY'] = entity;
    entity = 'IN_APP_REPORTS';
    oscard['IN_APP_REPORTS'] = entity;
    entity = 'USER_DM_MUTE';
    oscard['USER_DM_MUTE'] = entity;
    entity = 'BLOCK_USER';
    oscard['BLOCK_USER'] = entity;
    entity = 'VOICE_FILTER';
    oscard['VOICE_FILTER'] = entity;
    report = {};
    entity = 'AV';
    report['AV'] = entity;
    entity = 'SOCIAL';
    report['SOCIAL'] = entity;
    entity = oscard.VIDEO_BACKGROUND;
    option = new Array(8);
    option[0] = entity;
    entity = oscard.STREAM;
    option[1] = entity;
    entity = oscard.ACTIVITY;
    option[2] = entity;
    entity = oscard.VOICE_FILTER;
    option[3] = entity;
    entity = oscard.VOICE;
    option[4] = entity;
    entity = oscard.IN_APP_REPORTS;
    option[5] = entity;
    entity = oscard.USER_DM_MUTE;
    option[6] = entity;
    entity = oscard.BLOCK_USER;
    option[7] = entity;
    tangon = option.reduce;
    michal = function(argFoo, argBar, argBaz) {
        entity = {};
        tangon = argFoo;
        report = entity;
        michal = copyDataProperties(report, tangon);
        zuuluu = argBaz;
        michal = argBar;
        entity[michal] = zuuluu;
        return entity;
    };
    entity = {};
    tangon = tangon.bind(option)(michal, entity);
    entity = golfie.BAD;
    michal = new Array(3);
    michal[0] = entity;
    entity = golfie.NEUTRAL;
    michal[1] = entity;
    entity = golfie.GOOD;
    michal[2] = entity;
    option = argPlu;
    entity = 0;
    verify = option[entity];
    option = argBar;
    entity = undefined;
    offset = option.bind(entity)(verify);
    verify = offset.fileFinishedImporting;
    option = 'modules/feedback/Constants.tsx';
    option = verify.bind(offset)(option);
    zuuluu['FeedbackRating'] = golfie;
    golfie = 1024;
    zuuluu['FEEDBACK_FREEFORM_LENGTH'] = golfie;
    zuuluu['FeedbackType'] = oscard;
    zuuluu['FeedbackGroup'] = report;
    zuuluu['FeedbackTypePrecedence'] = tangon;
    zuuluu['DEFAULT_RATINGS'] = michal;
    return entity;
})();