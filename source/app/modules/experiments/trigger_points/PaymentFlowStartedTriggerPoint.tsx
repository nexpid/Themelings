// app/modules/experiments/trigger_points/PaymentFlowStartedTriggerPoint.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = golfie[entity];
    entity = undefined;
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.CommonTriggerPoints;
    report = 1;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.AnalyticEvents;
    var _closure1_slot2 = report;
    report = 2;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    offset = report.CommonTriggerPointConfiguration;
    report = 3;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.VanillaExperiment;
    verify = new Array(8);
    verify[0] = option;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.FiltersExperiment;
    verify[1] = option;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.EveryoneExperiment;
    verify[2] = option;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.MultipleBucketsExperiment;
    verify[3] = option;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.UnevenBucketsExperiment;
    verify[4] = report;
    report = 4;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.BrowserAutofillApplePayExperiment;
    verify[5] = report;
    report = 5;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.BrowserAutofillGooglePayExperiment;
    verify[6] = report;
    report = 6;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.BrowserAutofillExperimentGlobal;
    verify[7] = report;
    romeon = tangon.PAYMENT_FLOW_STARTED;
    tangon = {};
    report = 'payment flow started';
    tangon['location'] = report;
    report = offset.prototype;
    report = Object.create(report, {constructor: {value: offset}});
    backup = report;
    foxtra = verify;
    yankee = tangon;
    tangon = new backup[offset](foxtra, romeon, yankee, offset);
    tangon = tangon instanceof Object ? tangon : report;
    var _closure1_slot3 = tangon;
    report = 8;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/experiments/trigger_points/PaymentFlowStartedTriggerPoint.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['PaymentFlowStartedTriggerPoint'] = tangon;
    michal = function(argFoo) { // Original name: trackPaymentFlowStartedAnalyticsAndCTP
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            golfie = arguments[1];
            entity = undefined;
            if(!(golfie === entity)) { _fun00002_ip = 11; continue _fun00001 }
 9:
            golfie = {};
 11:
            tangon = _closure1_slot0;
            report = _closure1_slot1;
            zuuluu = 7;
            zuuluu = report[zuuluu];
            oscard = tangon.bind(entity)(zuuluu);
            report = oscard.track;
            zuuluu = _closure1_slot2;
            tangon = zuuluu.PAYMENT_FLOW_STARTED;
            zuuluu = argFoo;
            zuuluu = report.bind(oscard)(tangon, zuuluu, golfie);
            zuuluu = _closure1_slot3;
            michal = zuuluu.trigger;
            michal = michal.bind(zuuluu)();
            return entity;
        }
    };
    zuuluu['trackPaymentFlowStartedAnalyticsAndCTP'] = michal;
    return entity;
})();