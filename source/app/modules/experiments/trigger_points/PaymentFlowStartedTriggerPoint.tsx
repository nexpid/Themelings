// app/modules/experiments/trigger_points/PaymentFlowStartedTriggerPoint.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    oscar = argBar;
    zulu = argFred;
    golf = argPlugh;
    entity = argBaz;
    var _closure1_slot0 = entity;
    var _closure1_slot1 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = golf[entity];
    entity = undefined;
    tango = oscar.bind(entity)(tango);
    tango = tango.CommonTriggerPoints;
    report = 1;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.AnalyticEvents;
    var _closure1_slot2 = report;
    report = 2;
    report = golf[report];
    report = oscar.bind(entity)(report);
    offset = report.CommonTriggerPointConfiguration;
    report = 3;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.VanillaExperiment;
    verify = new Array(9);
    verify[0] = options;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.FiltersExperiment;
    verify[1] = options;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.EveryoneExperiment;
    verify[2] = options;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.MultipleBucketsExperiment;
    verify[3] = options;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.UnevenBucketsExperiment;
    verify[4] = report;
    report = 4;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.BrowserAutofillApplePayExperiment;
    verify[5] = report;
    report = 5;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.BrowserAutofillGooglePayExperiment;
    verify[6] = report;
    report = 6;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.BrowserAutofillExperimentGlobal;
    verify[7] = report;
    report = 7;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.NitroBasicUpsellExperiment;
    verify[8] = report;
    romeo = tango.PAYMENT_FLOW_STARTED;
    tango = {};
    report = 'payment flow started';
    tango['location'] = report;
    report = offset.prototype;
    report = Object.create(report, {constructor: {value: offset}});
    backup = report;
    foxtrot = verify;
    yankee = tango;
    tango = new backup[offset](foxtrot, romeo, yankee, offset);
    tango = tango instanceof Object ? tango : report;
    var _closure1_slot3 = tango;
    report = 9;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/experiments/trigger_points/PaymentFlowStartedTriggerPoint.tsx';
    report = oscar.bind(golf)(report);
    zulu['PaymentFlowStartedTriggerPoint'] = tango;
    mike = function(argFoo) { // Original name: trackPaymentFlowStartedAnalyticsAndCTP
        _fun66261: for(var _fun66261_ip = 0; ; ) switch(_fun66261_ip) {
 0:
            golf = arguments[1];
            entity = undefined;
            if(!(golf === entity)) { _fun66261_ip = 11; continue _fun66261 }
 9:
            golf = {};
 11:
            tango = _closure1_slot0;
            report = _closure1_slot1;
            zulu = 8;
            zulu = report[zulu];
            oscar = tango.bind(entity)(zulu);
            report = oscar.track;
            zulu = _closure1_slot2;
            tango = zulu.PAYMENT_FLOW_STARTED;
            zulu = argFoo;
            zulu = report.bind(oscar)(tango, zulu, golf);
            zulu = _closure1_slot3;
            mike = zulu.trigger;
            mike = mike.bind(zulu)();
            return entity;
        }
    };
    zulu['trackPaymentFlowStartedAnalyticsAndCTP'] = mike;
    return entity;
})();