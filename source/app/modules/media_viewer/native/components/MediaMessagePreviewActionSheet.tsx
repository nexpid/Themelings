// app/modules/media_viewer/native/components/MediaMessagePreviewActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot4 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: MediaMessagePreviewActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            michal = zuuluu.channel;
            var _closure2_slot0 = michal;
            golfie = zuuluu.message;
            var _closure2_slot1 = golfie;
            oscard = zuuluu.user;
            romeon = zuuluu.closeMediaModal;
            var _closure2_slot2 = romeon;
            tangon = undefined;
            var _closure2_slot3 = tangon;
            report = _closure1_slot0;
            option = _closure1_slot2;
            zuuluu = 2;
            zuuluu = option[zuuluu];
            zuuluu = report.bind(tangon)(zuuluu);
            report = zuuluu.DeveloperMode;
            zuuluu = report.useSetting;
            yankee = zuuluu.bind(report)();
            zuuluu = oscard.isNonUserBot;
            zuuluu = zuuluu.bind(oscard)();
            verify = !zuuluu;
            if(!verify) { _fun00002_ip = 130; continue _fun00001 }
 99:
            report = _closure1_slot0;
            option = _closure1_slot2;
            zuuluu = 3;
            zuuluu = option[zuuluu];
            report = report.bind(tangon)(zuuluu);
            zuuluu = report.canReportUser;
            verify = zuuluu.bind(report)(oscard);
 130:
            if(!verify) { _fun00002_ip = 164; continue _fun00001 }
 133:
            report = _closure1_slot0;
            oscard = _closure1_slot2;
            zuuluu = 3;
            zuuluu = oscard[zuuluu];
            report = report.bind(tangon)(zuuluu);
            zuuluu = report.canReportMessage;
            verify = zuuluu.bind(report)(golfie);
 164:
            report = _closure1_slot3;
            option = report.useCallback;
            oscard = function() {
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 4;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.hideActionSheet;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            zuuluu = new Array(0);
            oscard = option.bind(report)(oscard, zuuluu);
            _closure2_slot3 = oscard;
            option = report.useCallback;
            zuuluu = new Array(5);
            zuuluu[0] = oscard;
            zuuluu[1] = romeon;
            romeon = michal.guild_id;
            zuuluu[2] = romeon;
            michal = michal.id;
            zuuluu[3] = michal;
            michal = golfie.id;
            zuuluu[4] = michal;
            michal = function() {
                zuuluu = _closure2_slot3;
                entity = undefined;
                zuuluu = zuuluu.bind(entity)();
                zuuluu = _closure2_slot2;
                zuuluu = zuuluu.bind(entity)();
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                zuuluu = 5;
                zuuluu = report[zuuluu];
                oscard = tangon.bind(entity)(zuuluu);
                report = oscard.transitionToGuild;
                zuuluu = _closure2_slot0;
                tangon = zuuluu.guild_id;
                zuuluu = zuuluu.id;
                michal = _closure2_slot1;
                michal = michal.id;
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                return entity;
            };
            backup = option.bind(report)(michal, zuuluu);
            option = report.useCallback;
            michal = golfie.id;
            zuuluu = new Array(2);
            zuuluu[0] = michal;
            zuuluu[1] = oscard;
            michal = function() {
                zuuluu = _closure2_slot3;
                entity = undefined;
                zuuluu = zuuluu.bind(entity)();
                zuuluu = _closure1_slot0;
                tangon = _closure1_slot2;
                report = 6;
                report = tangon[report];
                oscard = zuuluu.bind(entity)(report);
                report = oscard.copy;
                michal = _closure2_slot1;
                michal = michal.id;
                michal = report.bind(oscard)(michal);
                michal = 7;
                michal = tangon[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.presentIdCopied;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            output = option.bind(report)(michal, zuuluu);
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = golfie;
            michal[1] = oscard;
            entity = function() {
                zuuluu = _closure2_slot3;
                entity = undefined;
                zuuluu = zuuluu.bind(entity)();
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                zuuluu = 8;
                zuuluu = report[zuuluu];
                report = tangon.bind(entity)(zuuluu);
                tangon = report.showReportModalForMessage;
                zuuluu = _closure2_slot1;
                michal = 'mobile_media_message_preview_action_sheet';
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            foxtra = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot4;
            source = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 9;
            entity = sizing[entity];
            entity = source.bind(tangon)(entity);
            michal = entity.ActionSheet;
            entity = {};
            golfie = _closure1_slot5;
            kiloes = 10;
            report = sizing[kiloes];
            report = source.bind(tangon)(report);
            report = report.ActionSheetRow;
            oscard = report.Group;
            report = {};
            option = sizing[kiloes];
            option = source.bind(tangon)(option);
            romeon = option.ActionSheetRow;
            option = {};
            result = sizing[kiloes];
            result = source.bind(tangon)(result);
            result = result.ActionSheetRow;
            echoed = result.Icon;
            result = {};
            ctrled = _closure1_slot1;
            update = 11;
            update = sizing[update];
            update = ctrled.bind(tangon)(update);
            result['source'] = update;
            result = zuuluu.bind(tangon)(echoed, result);
            option['icon'] = result;
            result = 12;
            echoed = sizing[result];
            echoed = source.bind(tangon)(echoed);
            update = echoed.intl;
            echoed = update.string;
            sizing = sizing[result];
            sizing = source.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.+TSRGB;
            sizing = echoed.bind(update)(sizing);
            option['label'] = sizing;
            option['onPress'] = backup;
            romeon = zuuluu.bind(tangon)(romeon, option);
            option = new Array(3);
            option[0] = romeon;
            if(!yankee) { _fun00002_ip = 666; continue _fun00001 }
 523:
            sizing = _closure1_slot4;
            ctrled = _closure1_slot0;
            echoed = _closure1_slot2;
            romeon = echoed[kiloes];
            romeon = ctrled.bind(tangon)(romeon);
            backup = romeon.ActionSheetRow;
            romeon = {};
            update = echoed[kiloes];
            update = ctrled.bind(tangon)(update);
            update = update.ActionSheetRow;
            source = update.Icon;
            update = {};
            vacuum = 13;
            vacuum = echoed[vacuum];
            vacuum = ctrled.bind(tangon)(vacuum);
            vacuum = vacuum.IdIcon;
            update['IconComponent'] = vacuum;
            update = sizing.bind(tangon)(source, update);
            romeon['icon'] = update;
            update = echoed[result];
            update = ctrled.bind(tangon)(update);
            source = update.intl;
            update = source.string;
            echoed = echoed[result];
            echoed = ctrled.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.zBoHlZ;
            echoed = update.bind(source)(echoed);
            romeon['label'] = echoed;
            romeon['onPress'] = output;
            yankee = sizing.bind(tangon)(backup, romeon);
 666:
            option[1] = yankee;
            if(!verify) { _fun00002_ip = 827; continue _fun00001 }
 676:
            romeon = _closure1_slot4;
            output = _closure1_slot0;
            backup = _closure1_slot2;
            offset = backup[kiloes];
            offset = output.bind(tangon)(offset);
            yankee = offset.ActionSheetRow;
            offset = {};
            kiloes = backup[kiloes];
            kiloes = output.bind(tangon)(kiloes);
            kiloes = kiloes.ActionSheetRow;
            sizing = kiloes.Icon;
            kiloes = {};
            echoed = 14;
            echoed = backup[echoed];
            echoed = output.bind(tangon)(echoed);
            echoed = echoed.FlagIcon;
            kiloes['IconComponent'] = echoed;
            kiloes = romeon.bind(tangon)(sizing, kiloes);
            offset['icon'] = kiloes;
            kiloes = backup[result];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = backup[result];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.+78Pfn;
            backup = kiloes.bind(sizing)(backup);
            offset['label'] = backup;
            offset['onPress'] = foxtra;
            foxtra = 'danger';
            offset['variant'] = foxtra;
            verify = romeon.bind(tangon)(yankee, offset);
 827:
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/media_viewer/native/components/MediaMessagePreviewActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();