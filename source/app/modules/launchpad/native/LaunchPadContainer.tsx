// app/modules/launchpad/native/LaunchPadContainer.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    offset = tangon.StyleSheet;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.LAUNCH_PAD_SPRING_CONFIG;
    var _closure1_slot4 = golfie;
    tangon = tangon.LaunchPadTypes;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    backup = offset.absoluteFillObject;
    kiloes = verify;
    yankee = copyDataProperties(kiloes, backup);
    romeon = 'transparent';
    yankee = 'backgroundColor';
    verify[yankee] = romeon;
    tangon['wrapper'] = verify;
    verify = {};
    backup = offset.absoluteFillObject;
    kiloes = verify;
    offset = copyDataProperties(kiloes, backup);
    yankee = 'hidden';
    offset = 'overflow';
    verify[offset] = yankee;
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = {};
    golfie = "function LaunchPadContainerTsx1(){const{interpolate,launchPadSharedState,withSpring,windowDimensions,LAUNCH_PAD_SPRING_CONFIG}=this.__closure;return{borderRadius:interpolate(launchPadSharedState.get(),[0,1],[0,16]),transform:[{scale:withSpring(interpolate(launchPadSharedState.get(),[0,1],[1,(windowDimensions.get().width-16*3)/windowDimensions.get().width]),LAUNCH_PAD_SPRING_CONFIG,'animate-always')},{translateY:withSpring(interpolate(launchPadSharedState.get(),[0,1],[0,-4]),LAUNCH_PAD_SPRING_CONFIG,'animate-always')}]};}";
    tangon['code'] = golfie;
    var _closure1_slot9 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/launchpad/native/LaunchPadContainer.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: LaunchPadContainer
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            backup = michal.children;
            michal = _closure1_slot8;
            tangon = undefined;
            source = michal.bind(tangon)();
            foxtra = _closure1_slot1;
            vacuum = _closure1_slot2;
            michal = 5;
            michal = vacuum[michal];
            michal = foxtra.bind(tangon)(michal);
            update = michal.bind(tangon)();
            michal = 6;
            michal = vacuum[michal];
            michal = foxtra.bind(tangon)(michal);
            michal = michal.bind(tangon)();
            output = michal.launchPadSharedState;
            var _closure2_slot0 = output;
            sizing = michal.launchPadPullTabState;
            result = michal.launchPadShown;
            echoed = michal.gestureState;
            kiloes = michal.updaters;
            michal = 7;
            michal = vacuum[michal];
            zuuluu = foxtra.bind(tangon)(michal);
            michal = {};
            michal['launchPadType'] = update;
            michal['launchPadSharedState'] = output;
            michal['launchPadPullTabState'] = sizing;
            michal['launchPadShown'] = result;
            michal['gestureState'] = echoed;
            michal['updaters'] = kiloes;
            michal = zuuluu.bind(tangon)(michal);
            report = michal.gesture;
            golfie = michal.gestureRef;
            michal = _closure1_slot0;
            zuuluu = 8;
            zuuluu = vacuum[zuuluu];
            option = michal.bind(tangon)(zuuluu);
            oscard = option.useICYMISearchExperienceExperiment;
            zuuluu = 'LaunchPadContainer';
            zuuluu = oscard.bind(option)(zuuluu);
            yankee = zuuluu.searchEnabled;
            zuuluu = 9;
            zuuluu = vacuum[zuuluu];
            zuuluu = foxtra.bind(tangon)(zuuluu);
            verify = zuuluu.bind(tangon)();
            var _closure2_slot1 = verify;
            offset = 10;
            zuuluu = vacuum[offset];
            oscard = michal.bind(tangon)(zuuluu);
            zuuluu = oscard.useAnimatedStyle;
            entity = function() { // Original name: l
                entity = {};
                yankee = _closure1_slot0;
                romeon = _closure1_slot2;
                tangon = 10;
                michal = romeon[tangon];
                offset = undefined;
                foxtra = yankee.bind(offset)(michal);
                option = foxtra.interpolate;
                verify = _closure2_slot0;
                zuuluu = verify.get;
                oscard = zuuluu.bind(verify)();
                report = [0, 1];
                zuuluu = [0, 16];
                zuuluu = option.bind(foxtra)(oscard, report, zuuluu);
                entity['borderRadius'] = zuuluu;
                zuuluu = {};
                report = 11;
                oscard = romeon[report];
                foxtra = yankee.bind(offset)(oscard);
                oscard = foxtra.withSpring;
                option = romeon[tangon];
                sizing = yankee.bind(offset)(option);
                kiloes = sizing.interpolate;
                option = verify.get;
                backup = option.bind(verify)();
                output = _closure2_slot1;
                michal = output.get;
                michal = michal.bind(output)();
                option = michal.width;
                michal = 48;
                option = option - michal;
                michal = output.get;
                michal = michal.bind(output)();
                michal = michal.width;
                michal = option / michal;
                option = [1];
                option[1] = michal;
                michal = [0, 1];
                michal = kiloes.bind(sizing)(backup, michal, option);
                option = _closure1_slot4;
                golfie = 'animate-always';
                michal = oscard.bind(foxtra)(michal, option, golfie);
                zuuluu['scale'] = michal;
                michal = new Array(2);
                michal[0] = zuuluu;
                zuuluu = {};
                report = romeon[report];
                oscard = yankee.bind(offset)(report);
                report = oscard.withSpring;
                tangon = romeon[tangon];
                romeon = yankee.bind(offset)(tangon);
                yankee = romeon.interpolate;
                tangon = verify.get;
                offset = tangon.bind(verify)();
                verify = [0];
                tangon = -4;
                verify[1] = tangon;
                tangon = [0, 1];
                tangon = yankee.bind(romeon)(offset, tangon, verify);
                tangon = report.bind(oscard)(tangon, option, golfie);
                zuuluu['translateY'] = tangon;
                michal[1] = zuuluu;
                entity['transform'] = michal;
                return entity;
            };
            option = {};
            ctrled = vacuum[offset];
            ctrled = michal.bind(tangon)(ctrled);
            ctrled = ctrled.interpolate;
            option['interpolate'] = ctrled;
            option['launchPadSharedState'] = output;
            ctrled = 11;
            ctrled = vacuum[ctrled];
            ctrled = michal.bind(tangon)(ctrled);
            ctrled = ctrled.withSpring;
            option['withSpring'] = ctrled;
            option['windowDimensions'] = verify;
            verify = _closure1_slot4;
            option['LAUNCH_PAD_SPRING_CONFIG'] = verify;
            entity['__closure'] = option;
            option = 16605924360298.0;
            entity['__workletHash'] = option;
            option = _closure1_slot9;
            entity['__initData'] = option;
            ctrled = zuuluu.bind(oscard)(entity);
            zuuluu = _closure1_slot6;
            entity = 12;
            entity = vacuum[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.GestureDetector;
            entity = {};
            entity['gesture'] = report;
            report = 13;
            report = vacuum[report];
            report = foxtra.bind(tangon)(report);
            oscard = report.Provider;
            report = {};
            report['value'] = golfie;
            verify = _closure1_slot7;
            option = _closure1_slot3;
            golfie = {};
            sequen = source.wrapper;
            golfie['style'] = sequen;
            offset = vacuum[offset];
            offset = foxtra.bind(tangon)(offset);
            foxtra = offset.View;
            offset = {};
            vacuum = source.container;
            source = new Array(2);
            source[0] = vacuum;
            source[1] = ctrled;
            offset['style'] = source;
            offset['children'] = backup;
            foxtra = zuuluu.bind(tangon)(foxtra, offset);
            offset = new Array(2);
            offset[0] = foxtra;
            if(yankee) { _fun00002_ip = 488; continue _fun00001 }
 472:
            yankee = _closure1_slot5;
            foxtra = yankee.DISABLED;
            yankee = undefined;
            if(!(update !== foxtra)) { _fun00002_ip = 550; continue _fun00001 }
 488:
            backup = _closure1_slot6;
            foxtra = _closure1_slot1;
            source = _closure1_slot2;
            romeon = 14;
            romeon = source[romeon];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            romeon['launchPadType'] = update;
            romeon['gestureState'] = echoed;
            romeon['launchPadShown'] = result;
            romeon['launchPadSharedState'] = output;
            romeon['launchPadPullTabState'] = sizing;
            romeon['updaters'] = kiloes;
            yankee = backup.bind(tangon)(foxtra, romeon);
 550:
            offset[1] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();