// app/modules/launchpad/native/LaunchPadContainer.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    offset = tango.StyleSheet;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.LAUNCH_PAD_SPRING_CONFIG;
    var _closure1_slot4 = golf;
    tango = tango.LaunchPadTypes;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    backup = offset.absoluteFillObject;
    kilo = verify;
    yankee = copyDataProperties(kilo, backup);
    yankee = 5;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    romeo = yankee.SCROLLBAR_THIN_TRACK;
    yankee = 'backgroundColor';
    verify[yankee] = romeo;
    tango['wrapper'] = verify;
    verify = {};
    backup = offset.absoluteFillObject;
    kilo = verify;
    offset = copyDataProperties(kilo, backup);
    yankee = 'hidden';
    offset = 'overflow';
    verify[offset] = yankee;
    tango['container'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = {};
    golf = "function LaunchPadContainerTsx1(){const{interpolate,launchPadSharedState,withSpring,windowDimensions,LAUNCH_PAD_SPRING_CONFIG}=this.__closure;return{borderRadius:interpolate(launchPadSharedState.get(),[0,1],[0,16]),transform:[{scale:withSpring(interpolate(launchPadSharedState.get(),[0,1],[1,(windowDimensions.get().width-16*3)/windowDimensions.get().width]),LAUNCH_PAD_SPRING_CONFIG,'animate-always')},{translateY:withSpring(interpolate(launchPadSharedState.get(),[0,1],[0,-4]),LAUNCH_PAD_SPRING_CONFIG,'animate-always')}]};}";
    tango['code'] = golf;
    var _closure1_slot9 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/launchpad/native/LaunchPadContainer.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: LaunchPadContainer
        _fun120820: for(var _fun120820_ip = 0; ; ) switch(_fun120820_ip) {
 0:
            mike = argFoo;
            foxtrot = mike.children;
            mike = _closure1_slot8;
            tango = undefined;
            backup = mike.bind(tango)();
            yankee = _closure1_slot1;
            control = _closure1_slot2;
            mike = 6;
            mike = control[mike];
            mike = yankee.bind(tango)(mike);
            update = mike.bind(tango)();
            mike = 7;
            mike = control[mike];
            mike = yankee.bind(tango)(mike);
            mike = mike.bind(tango)();
            output = mike.launchPadSharedState;
            var _closure2_slot0 = output;
            sizing = mike.launchPadPullTabState;
            result = mike.launchPadShown;
            echo = mike.gestureState;
            kilo = mike.updaters;
            mike = 8;
            mike = control[mike];
            zulu = yankee.bind(tango)(mike);
            mike = {};
            mike['launchPadType'] = update;
            mike['launchPadSharedState'] = output;
            mike['launchPadPullTabState'] = sizing;
            mike['launchPadShown'] = result;
            mike['gestureState'] = echo;
            mike['updaters'] = kilo;
            mike = zulu.bind(tango)(mike);
            report = mike.gesture;
            golf = mike.gestureRef;
            mike = 9;
            mike = control[mike];
            mike = yankee.bind(tango)(mike);
            verify = mike.bind(tango)();
            var _closure2_slot1 = verify;
            mike = _closure1_slot0;
            offset = 10;
            zulu = control[offset];
            oscar = mike.bind(tango)(zulu);
            zulu = oscar.useAnimatedStyle;
            entity = function() { // Original name: l
                entity = {};
                yankee = _closure1_slot0;
                romeo = _closure1_slot2;
                tango = 10;
                mike = romeo[tango];
                offset = undefined;
                foxtrot = yankee.bind(offset)(mike);
                options = foxtrot.interpolate;
                verify = _closure2_slot0;
                zulu = verify.get;
                oscar = zulu.bind(verify)();
                report = [0, 1];
                zulu = [0, 16];
                zulu = options.bind(foxtrot)(oscar, report, zulu);
                entity['borderRadius'] = zulu;
                zulu = {};
                report = 11;
                oscar = romeo[report];
                foxtrot = yankee.bind(offset)(oscar);
                oscar = foxtrot.withSpring;
                options = romeo[tango];
                sizing = yankee.bind(offset)(options);
                kilo = sizing.interpolate;
                options = verify.get;
                backup = options.bind(verify)();
                output = _closure2_slot1;
                mike = output.get;
                mike = mike.bind(output)();
                options = mike.width;
                mike = 48;
                options = options - mike;
                mike = output.get;
                mike = mike.bind(output)();
                mike = mike.width;
                mike = options / mike;
                options = [1];
                options[1] = mike;
                mike = [0, 1];
                mike = kilo.bind(sizing)(backup, mike, options);
                options = _closure1_slot4;
                golf = 'animate-always';
                mike = oscar.bind(foxtrot)(mike, options, golf);
                zulu['scale'] = mike;
                mike = new Array(2);
                mike[0] = zulu;
                zulu = {};
                report = romeo[report];
                oscar = yankee.bind(offset)(report);
                report = oscar.withSpring;
                tango = romeo[tango];
                romeo = yankee.bind(offset)(tango);
                yankee = romeo.interpolate;
                tango = verify.get;
                offset = tango.bind(verify)();
                verify = [0];
                tango = -4;
                verify[1] = tango;
                tango = [0, 1];
                tango = yankee.bind(romeo)(offset, tango, verify);
                tango = report.bind(oscar)(tango, options, golf);
                zulu['translateY'] = tango;
                mike[1] = zulu;
                entity['transform'] = mike;
                return entity;
            };
            options = {};
            source = control[offset];
            source = mike.bind(tango)(source);
            source = source.interpolate;
            options['interpolate'] = source;
            options['launchPadSharedState'] = output;
            source = 11;
            source = control[source];
            source = mike.bind(tango)(source);
            source = source.withSpring;
            options['withSpring'] = source;
            options['windowDimensions'] = verify;
            verify = _closure1_slot4;
            options['LAUNCH_PAD_SPRING_CONFIG'] = verify;
            entity['__closure'] = options;
            options = 16605924360298.0;
            entity['__workletHash'] = options;
            options = _closure1_slot9;
            entity['__initData'] = options;
            source = zulu.bind(oscar)(entity);
            zulu = _closure1_slot6;
            entity = 12;
            entity = control[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.GestureDetector;
            entity = {};
            entity['gesture'] = report;
            report = 13;
            report = control[report];
            report = yankee.bind(tango)(report);
            oscar = report.Provider;
            report = {};
            report['value'] = golf;
            verify = _closure1_slot7;
            options = _closure1_slot3;
            golf = {};
            vacuum = backup.wrapper;
            golf['style'] = vacuum;
            offset = control[offset];
            offset = yankee.bind(tango)(offset);
            yankee = offset.View;
            offset = {};
            control = backup.container;
            backup = new Array(2);
            backup[0] = control;
            backup[1] = source;
            offset['style'] = backup;
            offset['children'] = foxtrot;
            yankee = zulu.bind(tango)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = _closure1_slot5;
            foxtrot = yankee.DISABLED;
            yankee = undefined;
            if(!(update !== foxtrot)) { _fun120820_ip = 512; continue _fun120820 }
 450:
            backup = _closure1_slot6;
            foxtrot = _closure1_slot1;
            source = _closure1_slot2;
            romeo = 14;
            romeo = source[romeo];
            foxtrot = foxtrot.bind(tango)(romeo);
            romeo = {};
            romeo['launchPadType'] = update;
            romeo['gestureState'] = echo;
            romeo['launchPadShown'] = result;
            romeo['launchPadSharedState'] = output;
            romeo['launchPadPullTabState'] = sizing;
            romeo['updaters'] = kilo;
            yankee = backup.bind(tango)(foxtrot, romeo);
 512:
            offset[1] = yankee;
            golf['children'] = offset;
            golf = verify.bind(tango)(options, golf);
            report['children'] = golf;
            report = zulu.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();