// app/modules/self_remediation_feedback/Constants.tsx
export default (function(_, argBar, __, ___, ____, argFred, argPlugh) {
    golf = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = golf;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, tango);
    report = {};
    entity = 'too_many_notifications';
    report['TOO_MANY_NOTIFICATIONS'] = entity;
    entity = 'temporary_break';
    report['TEMPORARY_BREAK'] = entity;
    entity = 'annoying';
    report['ANNOYING'] = entity;
    entity = 'unsafe';
    report['UNSAFE'] = entity;
    entity = 'spam';
    report['SPAM'] = entity;
    entity = 'other';
    report['OTHER'] = entity;
    var _closure1_slot2 = report;
    tango = {};
    entity = 'confusion';
    tango['CONFUSION'] = entity;
    entity = 'does_not_achieve_wants';
    tango['DOES_NOT_ACHIEVE_WANTS'] = entity;
    entity = 'hard_to_access';
    tango['HARD_TO_ACCESS'] = entity;
    entity = 'something_else';
    tango['SOMETHING_ELSE'] = entity;
    var _closure1_slot3 = tango;
    entity = 1;
    oscar = oscar[entity];
    entity = undefined;
    options = golf.bind(entity)(oscar);
    golf = options.fileFinishedImporting;
    oscar = 'modules/self_remediation_feedback/Constants.tsx';
    oscar = golf.bind(options)(oscar);
    zulu['MuteFeedbackReasons'] = report;
    report = function() { // Original name: getMuteFeedbackOptions
        mike = {};
        tango = _closure1_slot2;
        zulu = tango.TOO_MANY_NOTIFICATIONS;
        mike['value'] = zulu;
        golf = _closure1_slot0;
        options = _closure1_slot1;
        zulu = 0;
        entity = options[zulu];
        oscar = undefined;
        entity = golf.bind(oscar)(entity);
        verify = entity.intl;
        report = verify.string;
        entity = options[zulu];
        entity = golf.bind(oscar)(entity);
        entity = entity.t;
        entity = entity.bQHhT0;
        entity = report.bind(verify)(entity);
        mike['label'] = entity;
        entity = new Array(6);
        entity[0] = mike;
        mike = {};
        report = tango.TEMPORARY_BREAK;
        mike['value'] = report;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        offset = report.intl;
        verify = offset.string;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        report = report.t;
        report = report.OuPkvL;
        report = verify.bind(offset)(report);
        mike['label'] = report;
        entity[1] = mike;
        mike = {};
        report = tango.ANNOYING;
        mike['value'] = report;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        offset = report.intl;
        verify = offset.string;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        report = report.t;
        report = report.3kmAMD;
        report = verify.bind(offset)(report);
        mike['label'] = report;
        entity[2] = mike;
        mike = {};
        report = tango.UNSAFE;
        mike['value'] = report;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        offset = report.intl;
        verify = offset.string;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        report = report.t;
        report = report.nmW7jI;
        report = verify.bind(offset)(report);
        mike['label'] = report;
        entity[3] = mike;
        mike = {};
        report = tango.SPAM;
        mike['value'] = report;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        offset = report.intl;
        verify = offset.string;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        report = report.t;
        report = report.cCPYjo;
        report = verify.bind(offset)(report);
        mike['label'] = report;
        entity[4] = mike;
        mike = {};
        tango = tango.OTHER;
        mike['value'] = tango;
        tango = options[zulu];
        tango = golf.bind(oscar)(tango);
        report = tango.intl;
        tango = report.string;
        zulu = options[zulu];
        zulu = golf.bind(oscar)(zulu);
        zulu = zulu.t;
        zulu = zulu.7ZIIJy;
        zulu = tango.bind(report)(zulu);
        mike['label'] = zulu;
        entity[5] = mike;
        return entity;
    };
    zulu['getMuteFeedbackOptions'] = report;
    zulu['BlockUserFeedbackReasons'] = tango;
    mike = function() { // Original name: getBlockUserFeedbackOptions
        mike = {};
        tango = _closure1_slot3;
        zulu = tango.CONFUSION;
        mike['value'] = zulu;
        golf = _closure1_slot0;
        options = _closure1_slot1;
        zulu = 0;
        entity = options[zulu];
        oscar = undefined;
        entity = golf.bind(oscar)(entity);
        verify = entity.intl;
        report = verify.string;
        entity = options[zulu];
        entity = golf.bind(oscar)(entity);
        entity = entity.t;
        entity = entity.64Oph4;
        entity = report.bind(verify)(entity);
        mike['label'] = entity;
        entity = new Array(4);
        entity[0] = mike;
        mike = {};
        report = tango.DOES_NOT_ACHIEVE_WANTS;
        mike['value'] = report;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        offset = report.intl;
        verify = offset.string;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        report = report.t;
        report = report.wH5R/v;
        report = verify.bind(offset)(report);
        mike['label'] = report;
        entity[1] = mike;
        mike = {};
        report = tango.HARD_TO_ACCESS;
        mike['value'] = report;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        offset = report.intl;
        verify = offset.string;
        report = options[zulu];
        report = golf.bind(oscar)(report);
        report = report.t;
        report = report.4uZBRk;
        report = verify.bind(offset)(report);
        mike['label'] = report;
        entity[2] = mike;
        mike = {};
        tango = tango.SOMETHING_ELSE;
        mike['value'] = tango;
        tango = options[zulu];
        tango = golf.bind(oscar)(tango);
        report = tango.intl;
        tango = report.string;
        zulu = options[zulu];
        zulu = golf.bind(oscar)(zulu);
        zulu = zulu.t;
        zulu = zulu.YicFbG;
        zulu = tango.bind(report)(zulu);
        mike['label'] = zulu;
        entity[3] = mike;
        return entity;
    };
    zulu['getBlockUserFeedbackOptions'] = mike;
    return entity;
})();