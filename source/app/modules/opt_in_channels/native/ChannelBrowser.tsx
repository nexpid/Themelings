// app/modules/opt_in_channels/native/ChannelBrowser.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: keyExtractor
        entity = argFoo;
        report = entity.section;
        tangon = entity.row;
        entity = global;
        entity = entity.HermesInternal;
        zuuluu = entity.concat;
        michal = '';
        entity = '-';
        entity = zuuluu.bind(michal)(report, entity, tangon);
        return entity;
    };
    var _closure1_slot20 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    kiloes = 0;
    tangon = oscard[kiloes];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    romeon = 1;
    golfie = oscard[romeon];
    tangon = argCor;
    option = tangon.bind(entity)(golfie);
    var _closure1_slot4 = option;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.TABLE_ROW_HEIGHT;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot10 = tangon;
    yankee = 8;
    tangon = oscard[yankee];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    sizing = tangon.Fonts;
    tangon = 10;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.TABLE_DIVIDER_WIDTH;
    var _closure1_slot12 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ContentDismissActionType;
    var _closure1_slot13 = tangon;
    tangon = 12;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot14 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot15 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot16 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    golfie = verify.createStyles;
    tangon = {};
    offset = {};
    offset['flex'] = romeon;
    tangon['container'] = offset;
    offset = {};
    romeon = 14;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_12;
    offset['marginTop'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['marginHorizontal'] = backup;
    tangon['header'] = offset;
    offset = {'flexDirection': 'row', 'justifyContent': 'space-between'};
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    offset['paddingBottom'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    offset['paddingTop'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.md;
    offset['borderRadius'] = backup;
    tangon['categoryContainer'] = offset;
    backup = 'center';
    offset = {'display': 'flex', 'flexDirection': 'column', 'justifyContent': 'center', 'marginRight': 8};
    tangon['channelText'] = offset;
    offset = {'alignItems': 'center', 'display': 'flex', 'flexDirection': 'row'};
    tangon['channelNameContainer'] = offset;
    offset = {'flexShrink': 0, 'marginRight': 8};
    output = oscard[romeon];
    output = foxtra.bind(entity)(output);
    output = output.colors;
    output = output.INTERACTIVE_ACTIVE;
    offset['tintColor'] = output;
    tangon['channelIcon'] = offset;
    offset = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'center', 'alignItems': 'center', 'flexShrink': 0};
    tangon['selectAllContainer'] = offset;
    offset = {};
    output = oscard[romeon];
    output = foxtra.bind(entity)(output);
    output = output.spacing;
    output = output.PX_4;
    offset['marginRight'] = output;
    result = {};
    output = 0.75;
    result['scale'] = output;
    output = new Array(1);
    output[0] = result;
    offset['transform'] = output;
    tangon['selectAllCheckbox'] = offset;
    offset = {};
    sizing = sizing.DISPLAY_EXTRABOLD;
    offset['fontFamily'] = sizing;
    tangon['newBadge'] = offset;
    offset = {};
    sizing = 'relative';
    offset['position'] = sizing;
    sizing = oscard[romeon];
    sizing = foxtra.bind(entity)(sizing);
    sizing = sizing.spacing;
    sizing = sizing.PX_16;
    offset['margin'] = sizing;
    sizing = oscard[romeon];
    sizing = foxtra.bind(entity)(sizing);
    sizing = sizing.spacing;
    sizing = sizing.PX_16;
    offset['paddingTop'] = sizing;
    offset['marginBottom'] = kiloes;
    kiloes = oscard[romeon];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.md;
    offset['borderRadius'] = kiloes;
    kiloes = oscard[romeon];
    kiloes = foxtra.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_SECONDARY_ALT;
    offset['backgroundColor'] = kiloes;
    offset['alignItems'] = backup;
    tangon['nuxCard'] = offset;
    offset = {'position': 'absolute', 'color': null, 'top': 16, 'right': 16};
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.INTERACTIVE_NORMAL;
    offset['color'] = backup;
    tangon['nuxCloseContainer'] = offset;
    offset = {'width': '100%', 'backgroundColor': null, 'alignItems': 'center', 'padding': 16};
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    offset['backgroundColor'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    offset['borderBottomLeftRadius'] = backup;
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    offset['borderBottomRightRadius'] = romeon;
    tangon['nuxHeader'] = offset;
    offset = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'marginBottom': 8};
    tangon['nuxHeaderText'] = offset;
    offset = {};
    offset['marginLeft'] = yankee;
    tangon['beta'] = offset;
    offset = {'textAlign': 'center', 'marginBottom': 4};
    tangon['nuxBody'] = offset;
    tangon = golfie.bind(verify)(tangon);
    var _closure1_slot17 = tangon;
    golfie = option.memo;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeon = entity.channel;
            var _closure2_slot0 = romeon;
            entity = entity.onChannelClick;
            var _closure2_slot1 = entity;
            entity = _closure1_slot17;
            tangon = undefined;
            output = entity.bind(tangon)();
            michal = _closure1_slot0;
            oscard = _closure1_slot2;
            entity = 17;
            entity = oscard[entity];
            option = michal.bind(tangon)(entity);
            golfie = option.useStateFromStores;
            entity = _closure1_slot11;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            entity = function() {
                tangon = _closure1_slot11;
                zuuluu = tangon.isChannelOptedIn;
                entity = _closure2_slot0;
                michal = entity.guild_id;
                entity = entity.id;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            result = golfie.bind(option)(zuuluu, entity);
            zuuluu = romeon.id;
            entity = 'null';
            offset = entity === zuuluu;
            zuuluu = _closure1_slot14;
            entity = 24;
            entity = oscard[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.PressableOpacity;
            entity = {};
            oscard = output.categoryContainer;
            entity['style'] = oscard;
            report = function() { // Original name: onPress
                report = _closure2_slot1;
                entity = _closure2_slot0;
                tangon = entity.guild_id;
                zuuluu = entity.id;
                michal = entity.id;
                entity = undefined;
                entity = report.bind(entity)(tangon, zuuluu, michal);
                return entity;
            };
            entity['onPress'] = report;
            foxtra = 'checkbox';
            report = foxtra;
            if(!offset) { _fun00002_ip = 159; continue _fun00001 }
 155:
            report = 'text';
 159:
            entity['accessibilityRole'] = report;
            report = undefined;
            if(offset) { _fun00002_ip = 178; continue _fun00001 }
 168:
            oscard = {};
            oscard['checked'] = result;
            report = oscard;
 178:
            entity['accessibilityState'] = report;
            golfie = _closure1_slot15;
            oscard = _closure1_slot16;
            report = {};
            yankee = _closure1_slot14;
            verify = _closure1_slot0;
            option = _closure1_slot2;
            backup = 28;
            option = option[backup];
            option = verify.bind(tangon)(option);
            verify = option.Text;
            option = {'lineClamp': 1, 'variant': 'text-xs/bold', 'color': 'text-muted'};
            sizing = romeon.name;
            romeon = sizing.toUpperCase;
            romeon = romeon.bind(sizing)();
            option['children'] = romeon;
            verify = yankee.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            verify = null;
            if(offset) { _fun00002_ip = 487; continue _fun00001 }
 277:
            romeon = _closure1_slot15;
            yankee = _closure1_slot5;
            offset = {};
            sizing = output.selectAllContainer;
            offset['style'] = sizing;
            offset['accessibilityRole'] = foxtra;
            foxtra = {};
            foxtra['checked'] = result;
            offset['accessibilityState'] = foxtra;
            sizing = _closure1_slot14;
            foxtra = {};
            output = output.selectAllCheckbox;
            foxtra['style'] = output;
            update = _closure1_slot0;
            source = _closure1_slot2;
            kiloes = 31;
            kiloes = source[kiloes];
            kiloes = update.bind(tangon)(kiloes);
            output = kiloes.FormCheckbox;
            kiloes = {};
            kiloes['checked'] = result;
            kiloes = sizing.bind(tangon)(output, kiloes);
            foxtra['children'] = kiloes;
            kiloes = sizing.bind(tangon)(yankee, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            backup = source[backup];
            backup = update.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {'variant': 'text-xs/semibold', 'color': 'interactive-normal'};
            output = 29;
            result = source[output];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = source[output];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.mSQwnZ;
            output = result.bind(echoed)(output);
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            verify = romeon.bind(tangon)(yankee, offset);
 487:
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot18 = tangon;
    golfie = option.memo;
    tangon = function(argFoo) {
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            result = entity.channel;
            var _closure2_slot0 = result;
            romeon = entity.guild;
            var _closure2_slot1 = romeon;
            yankee = entity.isFirst;
            offset = entity.isLast;
            golfie = entity.forceChecked;
            entity = entity.onChannelClick;
            var _closure2_slot2 = entity;
            entity = _closure1_slot17;
            report = undefined;
            record = entity.bind(report)();
            michal = _closure1_slot4;
            entity = michal.useState;
            output = 0;
            zuuluu = entity.bind(michal)(output);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(report)(zuuluu, entity);
            cntext = michal[output];
            entity = 1;
            entity = michal[entity];
            var _closure2_slot3 = entity;
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 17;
            entity = tangon[michal];
            backup = zuuluu.bind(report)(entity);
            foxtra = backup.useStateFromStores;
            entity = _closure1_slot11;
            option = new Array(1);
            option[0] = entity;
            oscard = function() {
                tangon = _closure1_slot11;
                zuuluu = tangon.isChannelOptedIn;
                entity = _closure2_slot0;
                michal = entity.guild_id;
                entity = entity.id;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            oscard = foxtra.bind(backup)(option, oscard);
            option = tangon[michal];
            sizing = zuuluu.bind(report)(option);
            kiloes = sizing.useStateFromStores;
            option = _closure1_slot7;
            backup = new Array(1);
            backup[0] = option;
            option = result.id;
            foxtra = new Array(2);
            foxtra[0] = option;
            foxtra[1] = romeon;
            option = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    tangon = _closure1_slot7;
                    zuuluu = tangon.shouldIndicateNewChannel;
                    report = _closure2_slot1;
                    michal = null;
                    report = michal == report;
                    michal = undefined;
                    if(report) { _fun00006_ip = 40; continue _fun00005 }
 31:
                    report = _closure2_slot1;
                    michal = report.id;
 40:
                    entity = _closure2_slot0;
                    entity = entity.id;
                    entity = zuuluu.bind(tangon)(michal, entity);
                    return entity;
                }
            };
            sizing = kiloes.bind(sizing)(backup, option, foxtra);
            michal = tangon[michal];
            tangon = zuuluu.bind(report)(michal);
            zuuluu = tangon.useStateFromStores;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = _closure2_slot0;
                    zuuluu = entity.parent_id;
                    entity = null;
                    entity = entity != zuuluu;
                    if(!entity) { _fun00008_ip = 56; continue _fun00007 }
 22:
                    report = _closure1_slot11;
                    tangon = report.isChannelOptedIn;
                    michal = _closure2_slot0;
                    zuuluu = michal.guild_id;
                    michal = michal.parent_id;
                    entity = tangon.bind(report)(zuuluu, michal);
 56:
                    return entity;
                }
            };
            option = zuuluu.bind(tangon)(michal, entity);
            ctrled = result.topic;
            entity = null;
            michal = entity != ctrled;
            if(!michal) { _fun00004_ip = 274; continue _fun00003 }
 265:
            zuuluu = ctrled.length;
            michal = output !== zuuluu;
 274:
            if(michal) { _fun00004_ip = 287; continue _fun00003 }
 277:
            zuuluu = result.isGuildVocal;
            michal = zuuluu.bind(result)();
 287:
            if(michal) { _fun00004_ip = 326; continue _fun00003 }
 290:
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 18;
            michal = tangon[michal];
            tangon = zuuluu.bind(report)(michal);
            zuuluu = tangon.getActiveAgoTimestamp;
            michal = result.id;
            ctrled = zuuluu.bind(tangon)(michal);
 326:
            foxtra = _closure1_slot4;
            tangon = foxtra.useCallback;
            zuuluu = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                zuuluu = _closure2_slot3;
                michal = entity.width;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = new Array(0);
            sequen = tangon.bind(foxtra)(zuuluu, michal);
            if(!(entity != romeon)) { _fun00004_ip = 1089; continue _fun00003 }
 359:
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 32;
            foxtra = tangon[michal];
            backup = zuuluu.bind(report)(foxtra);
            foxtra = backup.getChannelIconWithGuild;
            vacuum = foxtra.bind(backup)(result, romeon);
            michal = tangon[michal];
            tangon = zuuluu.bind(report)(michal);
            zuuluu = tangon.getChannelIconComponent;
            michal = {};
            backup = entity == romeon;
            foxtra = undefined;
            if(backup) { _fun00004_ip = 423; continue _fun00003 }
 417:
            foxtra = romeon.rulesChannelId;
 423:
            romeon = result.id;
            romeon = foxtra === romeon;
            michal['isRulesChannel'] = romeon;
            source = zuuluu.bind(tangon)(result, michal);
            tangon = _closure1_slot14;
            zuuluu = _closure1_slot0;
            romeon = _closure1_slot2;
            michal = 33;
            michal = romeon[michal];
            michal = zuuluu.bind(report)(michal);
            zuuluu = michal.TableCheckboxRow;
            michal = {};
            michal['start'] = yankee;
            michal['end'] = offset;
            michal['disabled'] = option;
            romeon = _closure1_slot15;
            yankee = _closure1_slot5;
            offset = {};
            foxtra = record.channelText;
            offset['style'] = foxtra;
            foxtra = {};
            backup = record.channelNameContainer;
            foxtra['style'] = backup;
            if(!(entity == source)) { _fun00004_ip = 596; continue _fun00003 }
 523:
            update = _closure1_slot14;
            papara = _closure1_slot1;
            target = _closure1_slot2;
            config = 34;
            backup = target[config];
            kiloes = papara.bind(report)(backup);
            backup = {};
            config = target[config];
            config = papara.bind(report)(config);
            config = config.Sizes;
            config = config.REFRESH_SMALL_16;
            backup['size'] = config;
            config = record.channelIcon;
            backup['style'] = config;
            backup['source'] = vacuum;
            kiloes = update.bind(report)(kiloes, backup);
            _fun00004_ip = 626; continue _fun00003;
 596:
            update = _closure1_slot14;
            backup = {};
            vacuum = record.channelIcon;
            backup['style'] = vacuum;
            vacuum = 'xs';
            backup['size'] = vacuum;
            kiloes = update.bind(report)(source, backup);
 626:
            backup = new Array(3);
            backup[0] = kiloes;
            vacuum = _closure1_slot14;
            source = _closure1_slot0;
            update = _closure1_slot2;
            kiloes = 28;
            update = update[kiloes];
            update = source.bind(report)(update);
            source = update.Text;
            update = {'lineClamp': 1, 'style': null, 'variant': 'text-md/semibold', 'color': 'interactive-active'};
            papara = undefined;
            if(!sizing) { _fun00004_ip = 699; continue _fun00003 }
 682:
            config = {};
            target = 8;
            target = cntext + target;
            config['marginRight'] = target;
            papara = config;
 699:
            config = new Array(1);
            config[0] = papara;
            update['style'] = config;
            config = result.name;
            update['children'] = config;
            update = vacuum.bind(report)(source, update);
            backup[1] = update;
            if(!sizing) { _fun00004_ip = 898; continue _fun00003 }
 738:
            vacuum = _closure1_slot14;
            source = _closure1_slot5;
            update = {};
            config = {};
            cntext = -cntext;
            config['marginLeft'] = cntext;
            update['style'] = config;
            update['onLayout'] = sequen;
            status = _closure1_slot0;
            sierra = _closure1_slot2;
            cntext = 35;
            sequen = sierra[cntext];
            sequen = status.bind(report)(sequen);
            config = sequen.TextBadge;
            sequen = {};
            cntext = sierra[cntext];
            cntext = status.bind(report)(cntext);
            cntext = cntext.BadgeColors;
            cntext = cntext.BRAND;
            sequen['color'] = cntext;
            cntext = 29;
            papara = sierra[cntext];
            papara = status.bind(report)(papara);
            target = papara.intl;
            papara = target.string;
            cntext = sierra[cntext];
            cntext = status.bind(report)(cntext);
            cntext = cntext.t;
            cntext = cntext.y2b7CA;
            cntext = papara.bind(target)(cntext);
            sequen['text'] = cntext;
            record = record.newBadge;
            sequen['textStyle'] = record;
            sequen = vacuum.bind(report)(config, sequen);
            update['children'] = sequen;
            sizing = vacuum.bind(report)(source, update);
 898:
            backup[2] = sizing;
            foxtra['children'] = backup;
            backup = romeon.bind(report)(yankee, foxtra);
            foxtra = new Array(2);
            foxtra[0] = backup;
            sizing = entity != ctrled;
            backup = null;
            if(!sizing) { _fun00004_ip = 1035; continue _fun00003 }
 929:
            sizing = ctrled.length;
            sizing = sizing > output;
            backup = null;
            if(!sizing) { _fun00004_ip = 1035; continue _fun00003 }
 943:
            output = _closure1_slot14;
            sizing = _closure1_slot0;
            source = _closure1_slot2;
            kiloes = source[kiloes];
            kiloes = sizing.bind(report)(kiloes);
            sizing = kiloes.Text;
            kiloes = {'lineClamp': 1, 'variant': 'text-xs/normal', 'color': 'text-muted'};
            update = _closure1_slot1;
            echoed = 36;
            echoed = source[echoed];
            source = update.bind(report)(echoed);
            update = source.parseTopic;
            echoed = {};
            result = result.id;
            echoed['channelId'] = result;
            result = true;
            result = update.bind(source)(ctrled, result, echoed);
            kiloes['children'] = result;
            backup = output.bind(report)(sizing, kiloes);
 1035:
            foxtra[1] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(report)(yankee, offset);
            michal['label'] = offset;
            verify = function() { // Original name: onPress
                report = _closure2_slot2;
                michal = _closure2_slot1;
                tangon = michal.id;
                entity = _closure2_slot0;
                zuuluu = entity.id;
                michal = entity.parent_id;
                entity = undefined;
                entity = report.bind(entity)(tangon, zuuluu, michal);
                return entity;
            };
            michal['onPress'] = verify;
            if(oscard) { _fun00004_ip = 1070; continue _fun00003 }
 1067:
            oscard = option;
 1070:
            if(oscard) { _fun00004_ip = 1076; continue _fun00003 }
 1073:
            oscard = golfie;
 1076:
            michal['checked'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 1089:
            return entity;
        }
    };
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot19 = tangon;
    tangon = 37;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/opt_in_channels/native/ChannelBrowser.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ChannelBrowser
        _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
            entity = argFoo;
            oscard = entity.guildId;
            var _closure2_slot0 = oscard;
            entity = _closure1_slot17;
            tangon = undefined;
            config = entity.bind(tangon)();
            report = _closure1_slot4;
            michal = report.useState;
            entity = '';
            zuuluu = michal.bind(report)(entity);
            michal = _closure1_slot3;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            limora = michal[entity];
            entity = 1;
            entity = michal[entity];
            var _closure2_slot1 = entity;
            michal = _closure1_slot1;
            foxtra = _closure1_slot2;
            entity = 15;
            entity = foxtra[entity];
            zuuluu = michal.bind(tangon)(entity);
            entity = {};
            golfie = true;
            entity['includeKeyboardHeightIOS'] = golfie;
            entity = zuuluu.bind(tangon)(entity);
            yankee = entity.insets;
            entity = 16;
            entity = foxtra[entity];
            entity = michal.bind(tangon)(entity);
            entity = entity.bind(tangon)(oscard);
            entity = entity.onChannelClick;
            var _closure2_slot2 = entity;
            golfie = _closure1_slot0;
            michal = 17;
            zuuluu = foxtra[michal];
            romeon = golfie.bind(tangon)(zuuluu);
            offset = romeon.useStateFromStores;
            zuuluu = _closure1_slot10;
            option = new Array(1);
            option[0] = zuuluu;
            zuuluu = function() {
                zuuluu = _closure1_slot10;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            option = offset.bind(romeon)(option, zuuluu);
            var _closure2_slot3 = option;
            zuuluu = foxtra[michal];
            backup = golfie.bind(tangon)(zuuluu);
            romeon = backup.useStateFromStores;
            zuuluu = _closure1_slot8;
            offset = new Array(1);
            offset[0] = zuuluu;
            zuuluu = function() {
                zuuluu = _closure1_slot8;
                michal = zuuluu.getCategories;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            backup = romeon.bind(backup)(offset, zuuluu);
            michal = foxtra[michal];
            romeon = golfie.bind(tangon)(michal);
            offset = romeon.useStateFromStores;
            michal = _closure1_slot9;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot9;
                michal = zuuluu.getChannels;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            whisks = offset.bind(romeon)(zuuluu, michal);
            michal = 18;
            zuuluu = foxtra[michal];
            offset = golfie.bind(tangon)(zuuluu);
            zuuluu = offset.useFilterCategoriesByQuery;
            variable36 = offset;
            quebec = oscard;
            equals = backup;
            romeon = variable36[zuuluu](quebec, equals, whisks, limora, sierra);
            var _closure2_slot4 = romeon;
            zuuluu = 19;
            zuuluu = foxtra[zuuluu];
            backup = golfie.bind(tangon)(zuuluu);
            offset = backup.useIsDismissibleContentDismissed;
            zuuluu = 20;
            zuuluu = foxtra[zuuluu];
            zuuluu = golfie.bind(tangon)(zuuluu);
            zuuluu = zuuluu.DismissibleContent;
            zuuluu = zuuluu.CHANNEL_BROWSER_NUX;
            backup = offset.bind(backup)(zuuluu);
            michal = foxtra[michal];
            offset = golfie.bind(tangon)(michal);
            zuuluu = offset.useChannelBrowserSections;
            michal = 64;
            michal = zuuluu.bind(offset)(oscard, romeon, michal);
            var _closure2_slot5 = michal;
            offset = report.useMemo;
            zuuluu = new Array(2);
            zuuluu[0] = romeon;
            zuuluu[1] = michal;
            michal = function() {
                entity = new Array(0);
                var _closure3_slot0 = entity;
                tangon = _closure2_slot5;
                zuuluu = tangon.forEach;
                michal = function(argFoo, argBar) {
                    _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                        yankee = argFoo;
                        offset = argBar;
                        entity = yankee.rowCount;
                        verify = 0;
                        if(!(entity > verify)) { _fun00012_ip = 217; continue _fun00011 }
 21:
                        entity = _closure2_slot4;
                        entity = entity._categories;
                        entity = entity[offset];
                        golfie = entity.channel;
                        zuuluu = _closure3_slot0;
                        michal = zuuluu.push;
                        entity = {'isSection': true, 'section': null, 'row': 4294967295, 'channel': null, 'isLast': false};
                        entity['section'] = offset;
                        entity['channel'] = golfie;
                        report = false;
                        entity = michal.bind(zuuluu)(entity);
                        entity = yankee.rowCount;
                        entity = verify < entity;
                        tangon = 1;
                        zuuluu = null;
                        verify = 0;
                        if(!entity) { _fun00012_ip = 217; continue _fun00011 }
 108:
                        foxtra = _closure3_slot0;
                        romeon = foxtra.push;
                        entity = {};
                        entity['isSection'] = report;
                        entity['section'] = offset;
                        entity['row'] = verify;
                        kiloes = _closure2_slot4;
                        backup = golfie.id;
                        backup = kiloes[backup];
                        kiloes = backup[verify];
                        sizing = zuuluu == kiloes;
                        backup = undefined;
                        if(sizing) { _fun00012_ip = 164; continue _fun00011 }
 159:
                        backup = kiloes.channel;
 164:
                        entity['channel'] = backup;
                        kiloes = _closure2_slot4;
                        backup = golfie.id;
                        backup = kiloes[backup];
                        backup = backup.length;
                        backup = backup - tangon;
                        backup = verify >= backup;
                        entity['isLast'] = backup;
                        entity = romeon.bind(foxtra)(entity);
                        verify = verify + 1;
                        entity = yankee.rowCount;
                        if(verify < entity) { _fun00012_ip = 108; continue _fun00011 }
 217:
                        entity = undefined;
                        return entity;
                    }
                };
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            offset = offset.bind(report)(michal, zuuluu);
            michal = 21;
            michal = foxtra[michal];
            zuuluu = golfie.bind(tangon)(michal);
            michal = zuuluu.hasNotSetUpChannelOptIn;
            oscard = michal.bind(zuuluu)(oscard);
            var _closure2_slot6 = oscard;
            zuuluu = report.useEffect;
            michal = function() {
                zuuluu = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 19;
                michal = golfie[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.markDismissibleContentAsDismissed;
                michal = 20;
                michal = golfie[michal];
                michal = zuuluu.bind(entity)(michal);
                michal = michal.DismissibleContent;
                zuuluu = michal.CHANNEL_BROWSER_NEW_BADGE_NUX;
                michal = {};
                oscard = _closure1_slot13;
                oscard = oscard.DISMISS;
                michal['dismissAction'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            michal = zuuluu.bind(report)(michal);
            zuuluu = report.useCallback;
            michal = new Array(3);
            michal[0] = option;
            michal[1] = oscard;
            michal[2] = entity;
            entity = function(argFoo) {
                _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
                    entity = argFoo;
                    entity = entity.item;
                    michal = entity.isSection;
                    offset = entity.row;
                    report = entity.isLast;
                    zuuluu = entity.channel;
                    entity = null;
                    tangon = entity == zuuluu;
                    if(tangon) { _fun00014_ip = 160; continue _fun00013 }
 40:
                    golfie = _closure1_slot14;
                    if(michal) { _fun00014_ip = 121; continue _fun00013 }
 50:
                    option = _closure1_slot19;
                    oscard = {};
                    oscard['channel'] = zuuluu;
                    verify = _closure2_slot3;
                    oscard['guild'] = verify;
                    verify = 0;
                    verify = verify === offset;
                    oscard['isFirst'] = verify;
                    oscard['isLast'] = report;
                    report = _closure2_slot6;
                    oscard['forceChecked'] = report;
                    michal = _closure2_slot2;
                    oscard['onChannelClick'] = michal;
                    report = zuuluu.id;
                    michal = undefined;
                    michal = golfie.bind(michal)(option, oscard, report);
                    _fun00014_ip = 157; continue _fun00013;
 121:
                    oscard = _closure1_slot18;
                    report = {};
                    report['channel'] = zuuluu;
                    tangon = _closure2_slot2;
                    report['onChannelClick'] = tangon;
                    tangon = zuuluu.id;
                    zuuluu = undefined;
                    michal = golfie.bind(zuuluu)(oscard, report, tangon);
 157:
                    entity = michal;
 160:
                    return entity;
                }
            };
            romeon = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot15;
            michal = _closure1_slot5;
            entity = {};
            report = config.container;
            entity['style'] = report;
            option = _closure1_slot14;
            report = {};
            oscard = config.header;
            report['style'] = oscard;
            oscard = 22;
            oscard = foxtra[oscard];
            oscard = golfie.bind(tangon)(oscard);
            kiloes = oscard.SearchField;
            oscard = {};
            sizing = 'md';
            oscard['size'] = sizing;
            sizing = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot1;
                michal = undefined;
                entity = argFoo;
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            oscard['onChange'] = sizing;
            oscard = option.bind(tangon)(kiloes, oscard);
            report['children'] = oscard;
            oscard = option.bind(tangon)(michal, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = 23;
            oscard = foxtra[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.FlashList;
            oscard = {};
            foxtra = null;
            if(backup) { _fun00010_ip = 1165; continue _fun00009 }
 615:
            sizing = _closure1_slot15;
            kiloes = _closure1_slot5;
            backup = {};
            output = config.nuxCard;
            backup['style'] = output;
            ctrled = _closure1_slot14;
            sequen = _closure1_slot0;
            cntext = _closure1_slot2;
            output = 24;
            output = cntext[output];
            output = sequen.bind(tangon)(output);
            result = output.PressableOpacity;
            output = {};
            echoed = function() { // Original name: onPress
                zuuluu = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 19;
                michal = golfie[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.markDismissibleContentAsDismissed;
                michal = 20;
                michal = golfie[michal];
                michal = zuuluu.bind(entity)(michal);
                michal = michal.DismissibleContent;
                zuuluu = michal.CHANNEL_BROWSER_NUX;
                michal = {};
                oscard = _closure1_slot13;
                oscard = oscard.DISMISS;
                michal['dismissAction'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            output['onPress'] = echoed;
            echoed = config.nuxCloseContainer;
            output['style'] = echoed;
            echoed = 25;
            echoed = cntext[echoed];
            echoed = sequen.bind(tangon)(echoed);
            update = echoed.CircleXIcon;
            echoed = {};
            echoed = ctrled.bind(tangon)(update, echoed);
            output['children'] = echoed;
            result = ctrled.bind(tangon)(result, output);
            output = new Array(3);
            output[0] = result;
            papara = _closure1_slot1;
            result = 26;
            result = cntext[result];
            echoed = papara.bind(tangon)(result);
            result = {};
            update = 27;
            update = cntext[update];
            update = papara.bind(tangon)(update);
            result['source'] = update;
            result = ctrled.bind(tangon)(echoed, result);
            output[1] = result;
            result = {};
            echoed = config.nuxHeader;
            result['style'] = echoed;
            echoed = {};
            update = config.nuxHeaderText;
            echoed['style'] = update;
            update = 28;
            source = cntext[update];
            source = sequen.bind(tangon)(source);
            record = source.Text;
            source = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            vacuum = 29;
            target = cntext[vacuum];
            target = sequen.bind(tangon)(target);
            sierra = target.intl;
            status = sierra.string;
            target = cntext[vacuum];
            target = sequen.bind(tangon)(target);
            target = target.t;
            target = target.utqWEB;
            target = status.bind(sierra)(target);
            source['children'] = target;
            record = ctrled.bind(tangon)(record, source);
            source = new Array(2);
            source[0] = record;
            record = 30;
            record = cntext[record];
            papara = papara.bind(tangon)(record);
            record = {};
            target = config.beta;
            record['style'] = target;
            record = ctrled.bind(tangon)(papara, record);
            source[1] = record;
            echoed['children'] = source;
            source = sizing.bind(tangon)(kiloes, echoed);
            echoed = new Array(3);
            echoed[0] = source;
            source = cntext[update];
            source = sequen.bind(tangon)(source);
            record = source.Text;
            source = {'variant': 'text-sm/normal', 'color': 'header-secondary'};
            papara = config.nuxBody;
            source['style'] = papara;
            papara = cntext[vacuum];
            papara = sequen.bind(tangon)(papara);
            status = papara.intl;
            target = status.string;
            papara = cntext[vacuum];
            papara = sequen.bind(tangon)(papara);
            papara = papara.t;
            papara = papara.+9etcH;
            papara = target.bind(status)(papara);
            source['children'] = papara;
            source = ctrled.bind(tangon)(record, source);
            echoed[1] = source;
            update = cntext[update];
            update = sequen.bind(tangon)(update);
            source = update.Text;
            update = {'variant': 'text-sm/normal', 'color': 'header-secondary'};
            config = config.nuxBody;
            update['style'] = config;
            config = cntext[vacuum];
            config = sequen.bind(tangon)(config);
            record = config.intl;
            config = record.format;
            vacuum = cntext[vacuum];
            vacuum = sequen.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            sequen = vacuum.Z0axjo;
            vacuum = {};
            vacuum = config.bind(record)(sequen, vacuum);
            update['children'] = vacuum;
            update = ctrled.bind(tangon)(source, update);
            echoed[2] = update;
            result['children'] = echoed;
            result = sizing.bind(tangon)(kiloes, result);
            output[2] = result;
            backup['children'] = output;
            foxtra = sizing.bind(tangon)(kiloes, backup);
 1165:
            oscard['ListHeaderComponent'] = foxtra;
            output = _closure1_slot0;
            foxtra = _closure1_slot2;
            backup = 29;
            kiloes = foxtra[backup];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = foxtra[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.et6wam;
            backup = kiloes.bind(sizing)(backup);
            oscard['accessibilityLabel'] = backup;
            oscard['renderItem'] = romeon;
            oscard['data'] = offset;
            romeon = _closure1_slot6;
            offset = _closure1_slot12;
            offset = romeon + offset;
            oscard['estimatedItemSize'] = offset;
            offset = {};
            kiloes = yankee.bottom;
            romeon = _closure1_slot1;
            yankee = 14;
            backup = foxtra[yankee];
            backup = romeon.bind(tangon)(backup);
            backup = backup.spacing;
            backup = backup.PX_16;
            backup = kiloes + backup;
            offset['paddingBottom'] = backup;
            yankee = foxtra[yankee];
            yankee = romeon.bind(tangon)(yankee);
            yankee = yankee.spacing;
            yankee = yankee.PX_16;
            offset['paddingHorizontal'] = yankee;
            oscard['contentContainerStyle'] = offset;
            verify = _closure1_slot20;
            oscard['keyExtractor'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();