// app/modules/opt_in_channels/native/ChannelBrowser.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: keyExtractor
        entity = argFoo;
        report = entity.section;
        tango = entity.row;
        entity = global;
        entity = entity.HermesInternal;
        zulu = entity.concat;
        mike = '';
        entity = '-';
        entity = zulu.bind(mike)(report, entity, tango);
        return entity;
    };
    var _closure1_slot20 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    kilo = 0;
    tango = oscar[kilo];
    entity = undefined;
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot3 = tango;
    romeo = 1;
    golf = oscar[romeo];
    tango = argCorge;
    options = tango.bind(entity)(golf);
    var _closure1_slot4 = options;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.TABLE_ROW_HEIGHT;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot8 = tango;
    tango = 6;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot9 = tango;
    tango = 7;
    tango = oscar[tango];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot10 = tango;
    yankee = 8;
    tango = oscar[yankee];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot11 = tango;
    tango = 9;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    sizing = tango.Fonts;
    tango = 10;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.TABLE_DIVIDER_WIDTH;
    var _closure1_slot12 = tango;
    tango = 11;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ContentDismissActionType;
    var _closure1_slot13 = tango;
    tango = 12;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot14 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot15 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot16 = tango;
    tango = 13;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    golf = verify.createStyles;
    tango = {};
    offset = {};
    offset['flex'] = romeo;
    tango['container'] = offset;
    offset = {};
    romeo = 14;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_12;
    offset['marginTop'] = backup;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['marginHorizontal'] = backup;
    tango['header'] = offset;
    offset = {'flexDirection': 'row', 'justifyContent': 'space-between'};
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_8;
    offset['paddingBottom'] = backup;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    offset['paddingTop'] = backup;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.md;
    offset['borderRadius'] = backup;
    tango['categoryContainer'] = offset;
    backup = 'center';
    offset = {'display': 'flex', 'flexDirection': 'column', 'justifyContent': 'center', 'marginRight': 8};
    tango['channelText'] = offset;
    offset = {'alignItems': 'center', 'display': 'flex', 'flexDirection': 'row'};
    tango['channelNameContainer'] = offset;
    offset = {'flexShrink': 0, 'marginRight': 8};
    output = oscar[romeo];
    output = foxtrot.bind(entity)(output);
    output = output.colors;
    output = output.INTERACTIVE_ACTIVE;
    offset['tintColor'] = output;
    tango['channelIcon'] = offset;
    offset = {'display': 'flex', 'flexDirection': 'row', 'justifyContent': 'center', 'alignItems': 'center', 'flexShrink': 0};
    tango['selectAllContainer'] = offset;
    offset = {};
    output = oscar[romeo];
    output = foxtrot.bind(entity)(output);
    output = output.spacing;
    output = output.PX_4;
    offset['marginRight'] = output;
    result = {};
    output = 0.75;
    result['scale'] = output;
    output = new Array(1);
    output[0] = result;
    offset['transform'] = output;
    tango['selectAllCheckbox'] = offset;
    offset = {};
    sizing = sizing.DISPLAY_EXTRABOLD;
    offset['fontFamily'] = sizing;
    tango['newBadge'] = offset;
    offset = {};
    sizing = 'relative';
    offset['position'] = sizing;
    sizing = oscar[romeo];
    sizing = foxtrot.bind(entity)(sizing);
    sizing = sizing.spacing;
    sizing = sizing.PX_16;
    offset['margin'] = sizing;
    sizing = oscar[romeo];
    sizing = foxtrot.bind(entity)(sizing);
    sizing = sizing.spacing;
    sizing = sizing.PX_16;
    offset['paddingTop'] = sizing;
    offset['marginBottom'] = kilo;
    kilo = oscar[romeo];
    kilo = foxtrot.bind(entity)(kilo);
    kilo = kilo.radii;
    kilo = kilo.md;
    offset['borderRadius'] = kilo;
    kilo = oscar[romeo];
    kilo = foxtrot.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.BACKGROUND_SECONDARY_ALT;
    offset['backgroundColor'] = kilo;
    offset['alignItems'] = backup;
    tango['nuxCard'] = offset;
    offset = {'position': 'absolute', 'color': null, 'top': 16, 'right': 16};
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.INTERACTIVE_NORMAL;
    offset['color'] = backup;
    tango['nuxCloseContainer'] = offset;
    offset = {'width': '100%', 'backgroundColor': null, 'alignItems': 'center', 'padding': 16};
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    offset['backgroundColor'] = backup;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    offset['borderBottomLeftRadius'] = backup;
    romeo = oscar[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.sm;
    offset['borderBottomRightRadius'] = romeo;
    tango['nuxHeader'] = offset;
    offset = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'marginBottom': 8};
    tango['nuxHeaderText'] = offset;
    offset = {};
    offset['marginLeft'] = yankee;
    tango['beta'] = offset;
    offset = {'textAlign': 'center', 'marginBottom': 4};
    tango['nuxBody'] = offset;
    tango = golf.bind(verify)(tango);
    var _closure1_slot17 = tango;
    golf = options.memo;
    tango = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeo = entity.channel;
            var _closure2_slot0 = romeo;
            entity = entity.onChannelClick;
            var _closure2_slot1 = entity;
            entity = _closure1_slot17;
            tango = undefined;
            output = entity.bind(tango)();
            mike = _closure1_slot0;
            oscar = _closure1_slot2;
            entity = 17;
            entity = oscar[entity];
            options = mike.bind(tango)(entity);
            golf = options.useStateFromStores;
            entity = _closure1_slot11;
            zulu = new Array(1);
            zulu[0] = entity;
            entity = function() {
                tango = _closure1_slot11;
                zulu = tango.isChannelOptedIn;
                entity = _closure2_slot0;
                mike = entity.guild_id;
                entity = entity.id;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            result = golf.bind(options)(zulu, entity);
            zulu = romeo.id;
            entity = 'null';
            offset = entity === zulu;
            zulu = _closure1_slot14;
            entity = 24;
            entity = oscar[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.PressableOpacity;
            entity = {};
            oscar = output.categoryContainer;
            entity['style'] = oscar;
            report = function() { // Original name: onPress
                report = _closure2_slot1;
                entity = _closure2_slot0;
                tango = entity.guild_id;
                zulu = entity.id;
                mike = entity.id;
                entity = undefined;
                entity = report.bind(entity)(tango, zulu, mike);
                return entity;
            };
            entity['onPress'] = report;
            foxtrot = 'checkbox';
            report = foxtrot;
            if(!offset) { _fun00002_ip = 159; continue _fun00001 }
 155:
            report = 'text';
 159:
            entity['accessibilityRole'] = report;
            report = undefined;
            if(offset) { _fun00002_ip = 178; continue _fun00001 }
 168:
            oscar = {};
            oscar['checked'] = result;
            report = oscar;
 178:
            entity['accessibilityState'] = report;
            golf = _closure1_slot15;
            oscar = _closure1_slot16;
            report = {};
            yankee = _closure1_slot14;
            verify = _closure1_slot0;
            options = _closure1_slot2;
            backup = 28;
            options = options[backup];
            options = verify.bind(tango)(options);
            verify = options.Text;
            options = {'lineClamp': 1, 'variant': 'text-xs/bold', 'color': 'text-muted'};
            sizing = romeo.name;
            romeo = sizing.toUpperCase;
            romeo = romeo.bind(sizing)();
            options['children'] = romeo;
            verify = yankee.bind(tango)(verify, options);
            options = new Array(2);
            options[0] = verify;
            verify = null;
            if(offset) { _fun00002_ip = 487; continue _fun00001 }
 277:
            romeo = _closure1_slot15;
            yankee = _closure1_slot5;
            offset = {};
            sizing = output.selectAllContainer;
            offset['style'] = sizing;
            offset['accessibilityRole'] = foxtrot;
            foxtrot = {};
            foxtrot['checked'] = result;
            offset['accessibilityState'] = foxtrot;
            sizing = _closure1_slot14;
            foxtrot = {};
            output = output.selectAllCheckbox;
            foxtrot['style'] = output;
            update = _closure1_slot0;
            source = _closure1_slot2;
            kilo = 31;
            kilo = source[kilo];
            kilo = update.bind(tango)(kilo);
            output = kilo.FormCheckbox;
            kilo = {};
            kilo['checked'] = result;
            kilo = sizing.bind(tango)(output, kilo);
            foxtrot['children'] = kilo;
            kilo = sizing.bind(tango)(yankee, foxtrot);
            foxtrot = new Array(2);
            foxtrot[0] = kilo;
            backup = source[backup];
            backup = update.bind(tango)(backup);
            kilo = backup.Text;
            backup = {'variant': 'text-xs/semibold', 'color': 'interactive-normal'};
            output = 29;
            result = source[output];
            result = update.bind(tango)(result);
            echo = result.intl;
            result = echo.string;
            output = source[output];
            output = update.bind(tango)(output);
            output = output.t;
            output = output.mSQwnZ;
            output = result.bind(echo)(output);
            backup['children'] = output;
            backup = sizing.bind(tango)(kilo, backup);
            foxtrot[1] = backup;
            offset['children'] = foxtrot;
            verify = romeo.bind(tango)(yankee, offset);
 487:
            options[1] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    tango = golf.bind(options)(tango);
    var _closure1_slot18 = tango;
    golf = options.memo;
    tango = function(argFoo) {
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            result = entity.channel;
            var _closure2_slot0 = result;
            romeo = entity.guild;
            var _closure2_slot1 = romeo;
            yankee = entity.isFirst;
            offset = entity.isLast;
            golf = entity.forceChecked;
            entity = entity.onChannelClick;
            var _closure2_slot2 = entity;
            entity = _closure1_slot17;
            report = undefined;
            record = entity.bind(report)();
            mike = _closure1_slot4;
            entity = mike.useState;
            output = 0;
            zulu = entity.bind(mike)(output);
            mike = _closure1_slot3;
            entity = 2;
            mike = mike.bind(report)(zulu, entity);
            context = mike[output];
            entity = 1;
            entity = mike[entity];
            var _closure2_slot3 = entity;
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            mike = 17;
            entity = tango[mike];
            backup = zulu.bind(report)(entity);
            foxtrot = backup.useStateFromStores;
            entity = _closure1_slot11;
            options = new Array(1);
            options[0] = entity;
            oscar = function() {
                tango = _closure1_slot11;
                zulu = tango.isChannelOptedIn;
                entity = _closure2_slot0;
                mike = entity.guild_id;
                entity = entity.id;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            oscar = foxtrot.bind(backup)(options, oscar);
            options = tango[mike];
            sizing = zulu.bind(report)(options);
            kilo = sizing.useStateFromStores;
            options = _closure1_slot7;
            backup = new Array(1);
            backup[0] = options;
            options = result.id;
            foxtrot = new Array(2);
            foxtrot[0] = options;
            foxtrot[1] = romeo;
            options = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    tango = _closure1_slot7;
                    zulu = tango.shouldIndicateNewChannel;
                    report = _closure2_slot1;
                    mike = null;
                    report = mike == report;
                    mike = undefined;
                    if(report) { _fun00006_ip = 40; continue _fun00005 }
 31:
                    report = _closure2_slot1;
                    mike = report.id;
 40:
                    entity = _closure2_slot0;
                    entity = entity.id;
                    entity = zulu.bind(tango)(mike, entity);
                    return entity;
                }
            };
            sizing = kilo.bind(sizing)(backup, options, foxtrot);
            mike = tango[mike];
            tango = zulu.bind(report)(mike);
            zulu = tango.useStateFromStores;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = _closure2_slot0;
                    zulu = entity.parent_id;
                    entity = null;
                    entity = entity != zulu;
                    if(!entity) { _fun00008_ip = 56; continue _fun00007 }
 22:
                    report = _closure1_slot11;
                    tango = report.isChannelOptedIn;
                    mike = _closure2_slot0;
                    zulu = mike.guild_id;
                    mike = mike.parent_id;
                    entity = tango.bind(report)(zulu, mike);
 56:
                    return entity;
                }
            };
            options = zulu.bind(tango)(mike, entity);
            control = result.topic;
            entity = null;
            mike = entity != control;
            if(!mike) { _fun00004_ip = 274; continue _fun00003 }
 265:
            zulu = control.length;
            mike = output !== zulu;
 274:
            if(mike) { _fun00004_ip = 287; continue _fun00003 }
 277:
            zulu = result.isGuildVocal;
            mike = zulu.bind(result)();
 287:
            if(mike) { _fun00004_ip = 326; continue _fun00003 }
 290:
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            mike = 18;
            mike = tango[mike];
            tango = zulu.bind(report)(mike);
            zulu = tango.getActiveAgoTimestamp;
            mike = result.id;
            control = zulu.bind(tango)(mike);
 326:
            foxtrot = _closure1_slot4;
            tango = foxtrot.useCallback;
            zulu = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                zulu = _closure2_slot3;
                mike = entity.width;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            mike = new Array(0);
            sequence = tango.bind(foxtrot)(zulu, mike);
            if(!(entity != romeo)) { _fun00004_ip = 1085; continue _fun00003 }
 359:
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            mike = 32;
            foxtrot = tango[mike];
            backup = zulu.bind(report)(foxtrot);
            foxtrot = backup.getChannelIconWithGuild;
            vacuum = foxtrot.bind(backup)(result, romeo);
            mike = tango[mike];
            tango = zulu.bind(report)(mike);
            zulu = tango.getChannelIconComponent;
            mike = {};
            backup = entity == romeo;
            foxtrot = undefined;
            if(backup) { _fun00004_ip = 423; continue _fun00003 }
 417:
            foxtrot = romeo.rulesChannelId;
 423:
            romeo = result.id;
            romeo = foxtrot === romeo;
            mike['isRulesChannel'] = romeo;
            source = zulu.bind(tango)(result, mike);
            tango = _closure1_slot14;
            zulu = _closure1_slot0;
            romeo = _closure1_slot2;
            mike = 33;
            mike = romeo[mike];
            mike = zulu.bind(report)(mike);
            zulu = mike.TableCheckboxRow;
            mike = {};
            mike['start'] = yankee;
            mike['end'] = offset;
            mike['disabled'] = options;
            romeo = _closure1_slot15;
            yankee = _closure1_slot5;
            offset = {};
            foxtrot = record.channelText;
            offset['style'] = foxtrot;
            foxtrot = {};
            backup = record.channelNameContainer;
            foxtrot['style'] = backup;
            if(!(entity == source)) { _fun00004_ip = 596; continue _fun00003 }
 523:
            update = _closure1_slot14;
            papa = _closure1_slot1;
            target = _closure1_slot2;
            config = 34;
            backup = target[config];
            kilo = papa.bind(report)(backup);
            backup = {};
            config = target[config];
            config = papa.bind(report)(config);
            config = config.Sizes;
            config = config.REFRESH_SMALL_16;
            backup['size'] = config;
            config = record.channelIcon;
            backup['style'] = config;
            backup['source'] = vacuum;
            kilo = update.bind(report)(kilo, backup);
            _fun00004_ip = 626; continue _fun00003;
 596:
            update = _closure1_slot14;
            backup = {};
            vacuum = record.channelIcon;
            backup['style'] = vacuum;
            vacuum = 'xs';
            backup['size'] = vacuum;
            kilo = update.bind(report)(source, backup);
 626:
            backup = new Array(3);
            backup[0] = kilo;
            vacuum = _closure1_slot14;
            source = _closure1_slot0;
            update = _closure1_slot2;
            kilo = 28;
            update = update[kilo];
            update = source.bind(report)(update);
            source = update.Text;
            update = {'lineClamp': 1, 'style': null, 'variant': 'text-md/semibold', 'color': 'interactive-active'};
            papa = undefined;
            if(!sizing) { _fun00004_ip = 699; continue _fun00003 }
 682:
            config = {};
            target = 8;
            target = context + target;
            config['marginRight'] = target;
            papa = config;
 699:
            config = new Array(1);
            config[0] = papa;
            update['style'] = config;
            config = result.name;
            update['children'] = config;
            update = vacuum.bind(report)(source, update);
            backup[1] = update;
            if(!sizing) { _fun00004_ip = 898; continue _fun00003 }
 738:
            vacuum = _closure1_slot14;
            source = _closure1_slot5;
            update = {};
            config = {};
            context = -context;
            config['marginLeft'] = context;
            update['style'] = config;
            update['onLayout'] = sequence;
            status = _closure1_slot0;
            sierra = _closure1_slot2;
            context = 35;
            sequence = sierra[context];
            sequence = status.bind(report)(sequence);
            config = sequence.TextBadge;
            sequence = {};
            context = sierra[context];
            context = status.bind(report)(context);
            context = context.BadgeColors;
            context = context.BRAND;
            sequence['color'] = context;
            context = 29;
            papa = sierra[context];
            papa = status.bind(report)(papa);
            target = papa.intl;
            papa = target.string;
            context = sierra[context];
            context = status.bind(report)(context);
            context = context.t;
            context = context.y2b7CA;
            context = papa.bind(target)(context);
            sequence['text'] = context;
            record = record.newBadge;
            sequence['textStyle'] = record;
            sequence = vacuum.bind(report)(config, sequence);
            update['children'] = sequence;
            sizing = vacuum.bind(report)(source, update);
 898:
            backup[2] = sizing;
            foxtrot['children'] = backup;
            backup = romeo.bind(report)(yankee, foxtrot);
            foxtrot = new Array(2);
            foxtrot[0] = backup;
            sizing = entity != control;
            backup = null;
            if(!sizing) { _fun00004_ip = 1031; continue _fun00003 }
 929:
            sizing = control.length;
            sizing = sizing > output;
            backup = null;
            if(!sizing) { _fun00004_ip = 1031; continue _fun00003 }
 943:
            output = _closure1_slot14;
            sizing = _closure1_slot0;
            source = _closure1_slot2;
            kilo = source[kilo];
            kilo = sizing.bind(report)(kilo);
            sizing = kilo.Text;
            kilo = {'lineClamp': 1, 'variant': 'text-xs/normal', 'color': 'text-muted'};
            update = _closure1_slot1;
            echo = 36;
            echo = source[echo];
            source = update.bind(report)(echo);
            update = source.parseTopic;
            echo = {};
            result = result.id;
            echo['channelId'] = result;
            result = true;
            result = update.bind(source)(control, result, echo);
            kilo['children'] = result;
            backup = output.bind(report)(sizing, kilo);
 1031:
            foxtrot[1] = backup;
            offset['children'] = foxtrot;
            offset = romeo.bind(report)(yankee, offset);
            mike['label'] = offset;
            verify = function() { // Original name: onPress
                report = _closure2_slot2;
                mike = _closure2_slot1;
                tango = mike.id;
                entity = _closure2_slot0;
                zulu = entity.id;
                mike = entity.parent_id;
                entity = undefined;
                entity = report.bind(entity)(tango, zulu, mike);
                return entity;
            };
            mike['onPress'] = verify;
            if(oscar) { _fun00004_ip = 1066; continue _fun00003 }
 1063:
            oscar = options;
 1066:
            if(oscar) { _fun00004_ip = 1072; continue _fun00003 }
 1069:
            oscar = golf;
 1072:
            mike['checked'] = oscar;
            mike = tango.bind(report)(zulu, mike);
            return mike;
 1085:
            return entity;
        }
    };
    tango = golf.bind(options)(tango);
    var _closure1_slot19 = tango;
    tango = 37;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/opt_in_channels/native/ChannelBrowser.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ChannelBrowser
        _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
            entity = argFoo;
            oscar = entity.guildId;
            var _closure2_slot0 = oscar;
            entity = _closure1_slot17;
            tango = undefined;
            context = entity.bind(tango)();
            report = _closure1_slot4;
            mike = report.useState;
            entity = '';
            zulu = mike.bind(report)(entity);
            mike = _closure1_slot3;
            entity = 2;
            mike = mike.bind(tango)(zulu, entity);
            entity = 0;
            equality = mike[entity];
            entity = 1;
            entity = mike[entity];
            var _closure2_slot1 = entity;
            mike = _closure1_slot1;
            foxtrot = _closure1_slot2;
            entity = 15;
            entity = foxtrot[entity];
            zulu = mike.bind(tango)(entity);
            entity = {};
            golf = true;
            entity['includeKeyboardHeightIOS'] = golf;
            entity = zulu.bind(tango)(entity);
            yankee = entity.insets;
            entity = 16;
            entity = foxtrot[entity];
            entity = mike.bind(tango)(entity);
            entity = entity.bind(tango)(oscar);
            entity = entity.onChannelClick;
            var _closure2_slot2 = entity;
            golf = _closure1_slot0;
            mike = 17;
            zulu = foxtrot[mike];
            romeo = golf.bind(tango)(zulu);
            offset = romeo.useStateFromStores;
            zulu = _closure1_slot10;
            options = new Array(1);
            options[0] = zulu;
            zulu = function() {
                zulu = _closure1_slot10;
                mike = zulu.getGuild;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            options = offset.bind(romeo)(options, zulu);
            var _closure2_slot3 = options;
            zulu = foxtrot[mike];
            backup = golf.bind(tango)(zulu);
            romeo = backup.useStateFromStores;
            zulu = _closure1_slot8;
            offset = new Array(1);
            offset[0] = zulu;
            zulu = function() {
                zulu = _closure1_slot8;
                mike = zulu.getCategories;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            backup = romeo.bind(backup)(offset, zulu);
            mike = foxtrot[mike];
            romeo = golf.bind(tango)(mike);
            offset = romeo.useStateFromStores;
            mike = _closure1_slot9;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                zulu = _closure1_slot9;
                mike = zulu.getChannels;
                entity = _closure2_slot0;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            quebec = offset.bind(romeo)(zulu, mike);
            mike = 18;
            zulu = foxtrot[mike];
            offset = golf.bind(tango)(zulu);
            zulu = offset.useFilterCategoriesByQuery;
            variable38 = offset;
            variable37 = oscar;
            variable36 = backup;
            romeo = variable38[zulu](variable37, variable36, quebec, equality, whiskey);
            var _closure2_slot4 = romeo;
            zulu = 19;
            zulu = foxtrot[zulu];
            backup = golf.bind(tango)(zulu);
            offset = backup.useIsDismissibleContentDismissed;
            zulu = 20;
            zulu = foxtrot[zulu];
            zulu = golf.bind(tango)(zulu);
            zulu = zulu.DismissibleContent;
            zulu = zulu.CHANNEL_BROWSER_NUX;
            sizing = offset.bind(backup)(zulu);
            mike = foxtrot[mike];
            offset = golf.bind(tango)(mike);
            zulu = offset.useChannelBrowserSections;
            mike = 64;
            mike = zulu.bind(offset)(oscar, romeo, mike);
            var _closure2_slot5 = mike;
            offset = report.useMemo;
            zulu = new Array(2);
            zulu[0] = romeo;
            zulu[1] = mike;
            mike = function() {
                entity = new Array(0);
                var _closure3_slot0 = entity;
                tango = _closure2_slot5;
                zulu = tango.forEach;
                mike = function(argFoo, argBar) {
                    _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                        yankee = argFoo;
                        offset = argBar;
                        entity = yankee.rowCount;
                        verify = 0;
                        if(!(entity > verify)) { _fun00012_ip = 217; continue _fun00011 }
 21:
                        entity = _closure2_slot4;
                        entity = entity._categories;
                        entity = entity[offset];
                        golf = entity.channel;
                        zulu = _closure3_slot0;
                        mike = zulu.push;
                        entity = {'isSection': true, 'section': null, 'row': 4294967295, 'channel': null, 'isLast': false};
                        entity['section'] = offset;
                        entity['channel'] = golf;
                        report = false;
                        entity = mike.bind(zulu)(entity);
                        entity = yankee.rowCount;
                        entity = verify < entity;
                        tango = 1;
                        zulu = null;
                        verify = 0;
                        if(!entity) { _fun00012_ip = 217; continue _fun00011 }
 108:
                        foxtrot = _closure3_slot0;
                        romeo = foxtrot.push;
                        entity = {};
                        entity['isSection'] = report;
                        entity['section'] = offset;
                        entity['row'] = verify;
                        kilo = _closure2_slot4;
                        backup = golf.id;
                        backup = kilo[backup];
                        kilo = backup[verify];
                        sizing = zulu == kilo;
                        backup = undefined;
                        if(sizing) { _fun00012_ip = 164; continue _fun00011 }
 159:
                        backup = kilo.channel;
 164:
                        entity['channel'] = backup;
                        kilo = _closure2_slot4;
                        backup = golf.id;
                        backup = kilo[backup];
                        backup = backup.length;
                        backup = backup - tango;
                        backup = verify >= backup;
                        entity['isLast'] = backup;
                        entity = romeo.bind(foxtrot)(entity);
                        verify = verify + 1;
                        entity = yankee.rowCount;
                        if(verify < entity) { _fun00012_ip = 108; continue _fun00011 }
 217:
                        entity = undefined;
                        return entity;
                    }
                };
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            offset = offset.bind(report)(mike, zulu);
            mike = 21;
            mike = foxtrot[mike];
            zulu = golf.bind(tango)(mike);
            mike = zulu.hasNotSetUpChannelOptIn;
            oscar = mike.bind(zulu)(oscar);
            var _closure2_slot6 = oscar;
            zulu = report.useEffect;
            mike = function() {
                zulu = _closure1_slot0;
                golf = _closure1_slot2;
                entity = 19;
                mike = golf[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.markDismissibleContentAsDismissed;
                mike = 20;
                mike = golf[mike];
                mike = zulu.bind(entity)(mike);
                mike = mike.DismissibleContent;
                zulu = mike.CHANNEL_BROWSER_NEW_BADGE_NUX;
                mike = {};
                oscar = _closure1_slot13;
                oscar = oscar.DISMISS;
                mike['dismissAction'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            mike = zulu.bind(report)(mike);
            zulu = report.useCallback;
            mike = new Array(3);
            mike[0] = options;
            mike[1] = oscar;
            mike[2] = entity;
            entity = function(argFoo) {
                _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
                    entity = argFoo;
                    entity = entity.item;
                    mike = entity.isSection;
                    offset = entity.row;
                    report = entity.isLast;
                    zulu = entity.channel;
                    entity = null;
                    tango = entity == zulu;
                    if(tango) { _fun00014_ip = 160; continue _fun00013 }
 40:
                    golf = _closure1_slot14;
                    if(mike) { _fun00014_ip = 121; continue _fun00013 }
 50:
                    options = _closure1_slot19;
                    oscar = {};
                    oscar['channel'] = zulu;
                    verify = _closure2_slot3;
                    oscar['guild'] = verify;
                    verify = 0;
                    verify = verify === offset;
                    oscar['isFirst'] = verify;
                    oscar['isLast'] = report;
                    report = _closure2_slot6;
                    oscar['forceChecked'] = report;
                    mike = _closure2_slot2;
                    oscar['onChannelClick'] = mike;
                    report = zulu.id;
                    mike = undefined;
                    mike = golf.bind(mike)(options, oscar, report);
                    _fun00014_ip = 157; continue _fun00013;
 121:
                    oscar = _closure1_slot18;
                    report = {};
                    report['channel'] = zulu;
                    tango = _closure2_slot2;
                    report['onChannelClick'] = tango;
                    tango = zulu.id;
                    zulu = undefined;
                    mike = golf.bind(zulu)(oscar, report, tango);
 157:
                    entity = mike;
 160:
                    return entity;
                }
            };
            romeo = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot15;
            mike = _closure1_slot5;
            entity = {};
            report = context.container;
            entity['style'] = report;
            options = _closure1_slot14;
            report = {};
            oscar = context.header;
            report['style'] = oscar;
            oscar = 22;
            oscar = foxtrot[oscar];
            oscar = golf.bind(tango)(oscar);
            backup = oscar.SearchField;
            oscar = {};
            kilo = 'md';
            oscar['size'] = kilo;
            kilo = function(argFoo) { // Original name: onChange
                zulu = _closure2_slot1;
                mike = undefined;
                entity = argFoo;
                entity = zulu.bind(mike)(entity);
                return entity;
            };
            oscar['onChange'] = kilo;
            oscar = options.bind(tango)(backup, oscar);
            report['children'] = oscar;
            oscar = options.bind(tango)(mike, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = 23;
            oscar = foxtrot[oscar];
            oscar = golf.bind(tango)(oscar);
            golf = oscar.FlashList;
            oscar = {};
            backup = _closure1_slot16;
            foxtrot = {};
            kilo = null;
            if(sizing) { _fun00010_ip = 1175; continue _fun00009 }
 621:
            result = _closure1_slot15;
            output = _closure1_slot5;
            sizing = {};
            echo = context.nuxCard;
            sizing['style'] = echo;
            sequence = _closure1_slot14;
            record = _closure1_slot0;
            target = _closure1_slot2;
            echo = 24;
            echo = target[echo];
            echo = record.bind(tango)(echo);
            update = echo.PressableOpacity;
            echo = {};
            source = function() { // Original name: onPress
                zulu = _closure1_slot0;
                golf = _closure1_slot2;
                entity = 19;
                mike = golf[entity];
                entity = undefined;
                report = zulu.bind(entity)(mike);
                tango = report.markDismissibleContentAsDismissed;
                mike = 20;
                mike = golf[mike];
                mike = zulu.bind(entity)(mike);
                mike = mike.DismissibleContent;
                zulu = mike.CHANNEL_BROWSER_NUX;
                mike = {};
                oscar = _closure1_slot13;
                oscar = oscar.DISMISS;
                mike['dismissAction'] = oscar;
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            echo['onPress'] = source;
            source = context.nuxCloseContainer;
            echo['style'] = source;
            source = 25;
            source = target[source];
            source = record.bind(tango)(source);
            control = source.CircleXIcon;
            source = {};
            source = sequence.bind(tango)(control, source);
            echo['children'] = source;
            update = sequence.bind(tango)(update, echo);
            echo = new Array(3);
            echo[0] = update;
            status = _closure1_slot1;
            update = 26;
            update = target[update];
            source = status.bind(tango)(update);
            update = {};
            control = 27;
            control = target[control];
            control = status.bind(tango)(control);
            update['source'] = control;
            update = sequence.bind(tango)(source, update);
            echo[1] = update;
            update = {};
            source = context.nuxHeader;
            update['style'] = source;
            source = {};
            control = context.nuxHeaderText;
            source['style'] = control;
            control = 28;
            vacuum = target[control];
            vacuum = record.bind(tango)(vacuum);
            papa = vacuum.Text;
            vacuum = {'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            config = 29;
            sierra = target[config];
            sierra = record.bind(tango)(sierra);
            whiskey = sierra.intl;
            lima = whiskey.string;
            sierra = target[config];
            sierra = record.bind(tango)(sierra);
            sierra = sierra.t;
            sierra = sierra.utqWEB;
            sierra = lima.bind(whiskey)(sierra);
            vacuum['children'] = sierra;
            papa = sequence.bind(tango)(papa, vacuum);
            vacuum = new Array(2);
            vacuum[0] = papa;
            papa = 30;
            papa = target[papa];
            status = status.bind(tango)(papa);
            papa = {};
            sierra = context.beta;
            papa['style'] = sierra;
            papa = sequence.bind(tango)(status, papa);
            vacuum[1] = papa;
            source['children'] = vacuum;
            vacuum = result.bind(tango)(output, source);
            source = new Array(3);
            source[0] = vacuum;
            vacuum = target[control];
            vacuum = record.bind(tango)(vacuum);
            papa = vacuum.Text;
            vacuum = {'variant': 'text-sm/normal', 'color': 'header-secondary'};
            status = context.nuxBody;
            vacuum['style'] = status;
            status = target[config];
            status = record.bind(tango)(status);
            lima = status.intl;
            sierra = lima.string;
            status = target[config];
            status = record.bind(tango)(status);
            status = status.t;
            status = status.+9etcH;
            status = sierra.bind(lima)(status);
            vacuum['children'] = status;
            vacuum = sequence.bind(tango)(papa, vacuum);
            source[1] = vacuum;
            control = target[control];
            control = record.bind(tango)(control);
            vacuum = control.Text;
            control = {'variant': 'text-sm/normal', 'color': 'header-secondary'};
            context = context.nuxBody;
            control['style'] = context;
            context = target[config];
            context = record.bind(tango)(context);
            papa = context.intl;
            context = papa.format;
            config = target[config];
            config = record.bind(tango)(config);
            config = config.t;
            record = config.Z0axjo;
            config = {};
            config = context.bind(papa)(record, config);
            control['children'] = config;
            control = sequence.bind(tango)(vacuum, control);
            source[2] = control;
            update['children'] = source;
            update = result.bind(tango)(output, update);
            echo[2] = update;
            sizing['children'] = echo;
            kilo = result.bind(tango)(output, sizing);
 1175:
            foxtrot['children'] = kilo;
            foxtrot = options.bind(tango)(backup, foxtrot);
            oscar['ListHeaderComponent'] = foxtrot;
            output = _closure1_slot0;
            foxtrot = _closure1_slot2;
            backup = 29;
            kilo = foxtrot[backup];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = foxtrot[backup];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            backup = backup.et6wam;
            backup = kilo.bind(sizing)(backup);
            oscar['accessibilityLabel'] = backup;
            oscar['renderItem'] = romeo;
            oscar['data'] = offset;
            romeo = _closure1_slot6;
            offset = _closure1_slot12;
            offset = romeo + offset;
            oscar['estimatedItemSize'] = offset;
            offset = {};
            kilo = yankee.bottom;
            romeo = _closure1_slot1;
            yankee = 14;
            backup = foxtrot[yankee];
            backup = romeo.bind(tango)(backup);
            backup = backup.spacing;
            backup = backup.PX_16;
            backup = kilo + backup;
            offset['paddingBottom'] = backup;
            yankee = foxtrot[yankee];
            yankee = romeo.bind(tango)(yankee);
            yankee = yankee.spacing;
            yankee = yankee.PX_16;
            offset['paddingHorizontal'] = yankee;
            oscar['contentContainerStyle'] = offset;
            verify = _closure1_slot20;
            oscar['keyExtractor'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();