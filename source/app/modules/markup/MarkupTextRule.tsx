// app/modules/markup/MarkupTextRule.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    michal = /^[\s\S]+?(?=[^0-9A-Za-z\s\u00c0-\uffff]|\n\n| {2,}\n|\w+:\S|[0-9]+\.|$)/;
    tangon = {};
    report = 0;
    verify = golfie[report];
    option = argBaz;
    entity = undefined;
    option = option.bind(entity)(verify);
    option = option.defaultRules;
    yankee = option.text;
    romeon = tangon;
    option = copyDataProperties(romeon, yankee);
    report = golfie[report];
    option = oscard.bind(entity)(report);
    report = option.anyScopeRegex;
    option = report.bind(option)(michal);
    report = 'match';
    tangon[report] = option;
    report = 1;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/markup/MarkupTextRule.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['textRegexp'] = michal;
    michal = function(argFoo) {
        entity = global;
        zuuluu = entity.RegExp;
        entity = entity.HermesInternal;
        report = entity.concat;
        tangon = '^[\\s\\S]+?(?=';
        michal = argFoo;
        entity = '|[^0-9A-Za-z\\s\\u00ff-\\uffff]|\\n\\n| {2,}\\n|\\w+:\\S|[0-9]+\\.|$)';
        golfie = report.bind(tangon)(michal, entity);
        michal = zuuluu.prototype;
        michal = Object.create(michal, {constructor: {value: zuuluu}});
        option = michal;
        entity = new option[zuuluu](golfie, oscard);
        entity = entity instanceof Object ? entity : michal;
        return entity;
    };
    zuuluu['textMarkupPatternWithExclusions'] = michal;
    return entity;
})();