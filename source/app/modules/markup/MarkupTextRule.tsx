// app/modules/markup/MarkupTextRule.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = require;
    var3 = exports;
    var7 = dependencyMap;
    var1 = global;
    var5 = var1.Object;
    var4 = var5.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var4.bind(var5)(var3, var1, var2);
    var2 = /^[\s\S]+?(?=[^0-9A-Za-z\s\u00c0-\uffff]|\n\n| {2,}\n|\w+:\S|[0-9]+\.|$)/;
    var4 = {};
    var5 = 0;
    var9 = var7[var5];
    var8 = metroImportDefault;
    var1 = undefined;
    var8 = var8.bind(var1)(var9);
    var8 = var8.defaultRules;
    var11 = var8.text;
    var12 = var4;
    var8 = copyDataProperties(var12, var11);
    var5 = var7[var5];
    var8 = var6.bind(var1)(var5);
    var5 = var8.anyScopeRegex;
    var8 = var5.bind(var8)(var2);
    var5 = 'match';
    var4[var5] = var8;
    var5 = 1;
    var5 = var7[var5];
    var7 = var6.bind(var1)(var5);
    var6 = var7.fileFinishedImporting;
    var5 = 'modules/markup/MarkupTextRule.tsx';
    var5 = var6.bind(var7)(var5);
    var3['default'] = var4;
    var3['textRegexp'] = var2;
    var2 = function(arg1) {
        var1 = global;
        var3 = var1.RegExp;
        var1 = var1.HermesInternal;
        var5 = var1.concat;
        var4 = '^[\\s\\S]+?(?=';
        var2 = arg1;
        var1 = '|[^0-9A-Za-z\\s\\u00ff-\\uffff]|\\n\\n| {2,}\\n|\\w+:\\S|[0-9]+\\.|$)';
        var7 = var5.bind(var4)(var2, var1);
        var2 = var3.prototype;
        var2 = Object.create(var2, {constructor: {value: var3}});
        var8 = var2;
        var1 = new var8[var3](var7, var6);
        var1 = var1 instanceof Object ? var1 : var2;
        return var1;
    };
    var3['textMarkupPatternWithExclusions'] = var2;
    return var1;
})();