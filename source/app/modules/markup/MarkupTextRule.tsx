// app/modules/markup/MarkupTextRule.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    oscar = argBar;
    zulu = argFred;
    golf = argPlugh;
    entity = global;
    report = entity.Object;
    tango = report.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(report)(zulu, entity, mike);
    mike = /^[\s\S]+?(?=[^0-9A-Za-z\s\u00c0-\uffff]|\n\n| {2,}\n|\w+:\S|[0-9]+\.|$)/;
    tango = {};
    report = 0;
    verify = golf[report];
    options = argBaz;
    entity = undefined;
    options = options.bind(entity)(verify);
    options = options.defaultRules;
    yankee = options.text;
    romeo = tango;
    options = copyDataProperties(romeo, yankee);
    report = golf[report];
    options = oscar.bind(entity)(report);
    report = options.anyScopeRegex;
    options = report.bind(options)(mike);
    report = 'match';
    tango[report] = options;
    report = 1;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/markup/MarkupTextRule.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['textRegexp'] = mike;
    mike = function(argFoo) {
        entity = global;
        zulu = entity.RegExp;
        entity = entity.HermesInternal;
        report = entity.concat;
        tango = '^[\\s\\S]+?(?=';
        mike = argFoo;
        entity = '|[^0-9A-Za-z\\s\\u00ff-\\uffff]|\\n\\n| {2,}\\n|\\w+:\\S|[0-9]+\\.|$)';
        golf = report.bind(tango)(mike, entity);
        mike = zulu.prototype;
        mike = Object.create(mike, {constructor: {value: zulu}});
        options = mike;
        entity = new options[zulu](golf, oscar);
        entity = entity instanceof Object ? entity : mike;
        return entity;
    };
    zulu['textMarkupPatternWithExclusions'] = mike;
    return entity;
})();