// app/modules/markup/MarkupTypesDefaultRules.tsx
export default (function(_, argBar, argBaz, __, ___, argFred, argPlugh) {
    report = argBar;
    options = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    mike = {};
    golf = 0;
    tango = oscar[golf];
    entity = undefined;
    tango = report.bind(entity)(tango);
    tango = tango.AST_KEY;
    offset = tango.PARAGRAPH;
    tango = 1;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.paragraph;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.STRIKETHROUGH;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.s;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.STRONG;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.strong;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.UNDERLINE;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.u;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.ITALICS;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.em;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.LINK;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.link;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.URL;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.url;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.AUTOLINK;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.autolink;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.LINE_BREAK;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.br;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.BLOCK_QUOTE;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.blockQuote;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.INLINE_CODE;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.inlineCode;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.CODE_BLOCK;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.codeBlock;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.CHANNEL_MENTION;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.channelMention;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.MENTION;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.mention;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.SOUNDBOARD;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.soundboard;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.STATIC_ROUTE_LINK;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.staticRouteLink;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.COMMAND_MENTION;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.commandMention;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.TIMESTAMP;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.timestamp;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.LIST;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.list;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.HEADING;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.heading;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.ATTACHMENT_LINK;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.attachmentLink;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.SHOP_LINK;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.shopLink;
    mike[offset] = verify;
    verify = oscar[golf];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.SUBTEXT;
    verify = oscar[tango];
    verify = options.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.subtext;
    mike[offset] = verify;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    golf = golf.AST_KEY;
    golf = golf.SILENT_PREFIX;
    tango = oscar[tango];
    tango = options.bind(entity)(tango);
    tango = tango.RULES;
    tango = tango.silentPrefix;
    mike[golf] = tango;
    tango = 2;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/markup/MarkupTypesDefaultRules.tsx';
    tango = report.bind(oscar)(tango);
    zulu['DEFAULT_RULES'] = mike;
    return entity;
})();