// app/modules/markup/MarkupTypesDefaultRules.tsx
export default (function(_, argBar, argBaz, __, ___, argFre, argPlu) {
    report = argBar;
    option = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    michal = {};
    golfie = 0;
    tangon = oscard[golfie];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AST_KEY;
    offset = tangon.PARAGRAPH;
    tangon = 1;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.paragraph;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.STRIKETHROUGH;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.s;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.STRONG;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.strong;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.UNDERLINE;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.u;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.ITALICS;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.em;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.LINK;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.link;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.URL;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.url;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.AUTOLINK;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.autolink;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.LINE_BREAK;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.br;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.BLOCK_QUOTE;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.blockQuote;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.INLINE_CODE;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.inlineCode;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.CODE_BLOCK;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.codeBlock;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.CHANNEL_MENTION;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.channelMention;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.MENTION;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.mention;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.SOUNDBOARD;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.soundboard;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.STATIC_ROUTE_LINK;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.staticRouteLink;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.COMMAND_MENTION;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.commandMention;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.TIMESTAMP;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.timestamp;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.LIST;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.list;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.HEADING;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.heading;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.ATTACHMENT_LINK;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.attachmentLink;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.SHOP_LINK;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.shopLink;
    michal[offset] = verify;
    verify = oscard[golfie];
    verify = report.bind(entity)(verify);
    verify = verify.AST_KEY;
    offset = verify.SUBTEXT;
    verify = oscard[tangon];
    verify = option.bind(entity)(verify);
    verify = verify.RULES;
    verify = verify.subtext;
    michal[offset] = verify;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.AST_KEY;
    golfie = golfie.SILENT_PREFIX;
    tangon = oscard[tangon];
    tangon = option.bind(entity)(tangon);
    tangon = tangon.RULES;
    tangon = tangon.silentPrefix;
    michal[golfie] = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/markup/MarkupTypesDefaultRules.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['DEFAULT_RULES'] = michal;
    return entity;
})();