// app/modules/markup/CustomMarkup.native.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    option = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = option;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = golfie;
    oscard = function(argFoo) { // Original name: createRules
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = arguments[1];
            zuuluu = undefined;
            if(!(tangon === zuuluu)) { _fun00002_ip = 11; continue _fun00001 }
 9:
            tangon = {};
 11:
            foxtra = _closure1_slot1;
            yankee = _closure1_slot2;
            entity = 0;
            entity = yankee[entity];
            michal = foxtra.bind(zuuluu)(entity);
            entity = argFoo;
            verify = michal.bind(zuuluu)(entity, tangon);
            entity = 1;
            entity = yankee[entity];
            michal = foxtra.bind(zuuluu)(entity);
            entity = 2;
            entity = yankee[entity];
            entity = foxtra.bind(zuuluu)(entity);
            tangon = entity.defaultRules;
            entity = new Array(3);
            entity[0] = tangon;
            entity[1] = verify;
            tangon = {};
            offset = _closure1_slot0;
            golfie = 3;
            report = yankee[golfie];
            report = offset.bind(zuuluu)(report);
            report = report.AST_KEY;
            oscard = report.LINK;
            report = {};
            romeon = 4;
            option = yankee[romeon];
            option = foxtra.bind(zuuluu)(option);
            option = option.defaultRules;
            kiloes = option.link;
            sizing = report;
            option = copyDataProperties(sizing, kiloes);
            option = yankee[golfie];
            option = offset.bind(zuuluu)(option);
            option = option.AST_KEY;
            option = option.LINK;
            option = verify[option];
            backup = option.react;
            option = 'react';
            report[option] = backup;
            tangon[oscard] = report;
            report = yankee[golfie];
            report = offset.bind(zuuluu)(report);
            report = report.AST_KEY;
            oscard = report.URL;
            report = {};
            backup = yankee[romeon];
            backup = foxtra.bind(zuuluu)(backup);
            backup = backup.defaultRules;
            kiloes = backup.url;
            sizing = report;
            backup = copyDataProperties(sizing, kiloes);
            backup = yankee[golfie];
            backup = offset.bind(zuuluu)(backup);
            backup = backup.AST_KEY;
            backup = backup.URL;
            backup = verify[backup];
            backup = backup.react;
            report[option] = backup;
            tangon[oscard] = report;
            report = yankee[golfie];
            report = offset.bind(zuuluu)(report);
            report = report.AST_KEY;
            oscard = report.AUTOLINK;
            report = {};
            backup = yankee[romeon];
            backup = foxtra.bind(zuuluu)(backup);
            backup = backup.defaultRules;
            kiloes = backup.autolink;
            sizing = report;
            backup = copyDataProperties(sizing, kiloes);
            backup = yankee[golfie];
            backup = offset.bind(zuuluu)(backup);
            backup = backup.AST_KEY;
            backup = backup.AUTOLINK;
            backup = verify[backup];
            backup = backup.react;
            report[option] = backup;
            tangon[oscard] = report;
            report = yankee[golfie];
            report = offset.bind(zuuluu)(report);
            report = report.AST_KEY;
            oscard = report.BLOCK_QUOTE;
            report = {};
            romeon = yankee[romeon];
            romeon = foxtra.bind(zuuluu)(romeon);
            romeon = romeon.defaultRules;
            kiloes = romeon.blockQuote;
            sizing = report;
            romeon = copyDataProperties(sizing, kiloes);
            golfie = yankee[golfie];
            golfie = offset.bind(zuuluu)(golfie);
            golfie = golfie.AST_KEY;
            golfie = golfie.BLOCK_QUOTE;
            golfie = verify[golfie];
            golfie = golfie.react;
            report[option] = golfie;
            tangon[oscard] = report;
            entity[2] = tangon;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        }
    };
    var _closure1_slot3 = oscard;
    report = function(argFoo, argBar, argBaz) { // Original name: createNotifCenterV2MessagePreviewRules
        tangon = _closure1_slot1;
        yankee = _closure1_slot2;
        entity = 0;
        entity = yankee[entity];
        zuuluu = undefined;
        golfie = tangon.bind(zuuluu)(entity);
        oscard = argFoo;
        michal = argBar;
        entity = argBaz;
        verify = golfie.bind(zuuluu)(oscard, michal, entity);
        entity = 1;
        entity = yankee[entity];
        michal = tangon.bind(zuuluu)(entity);
        entity = 2;
        entity = yankee[entity];
        entity = tangon.bind(zuuluu)(entity);
        tangon = entity.notifCenterV2MessagePreviewRules;
        entity = new Array(2);
        entity[0] = tangon;
        tangon = {};
        offset = _closure1_slot0;
        golfie = 3;
        report = yankee[golfie];
        report = offset.bind(zuuluu)(report);
        report = report.AST_KEY;
        oscard = report.MENTION;
        report = {};
        romeon = 5;
        option = yankee[romeon];
        option = offset.bind(zuuluu)(option);
        foxtra = option.DEFAULT_RULES;
        option = yankee[golfie];
        option = offset.bind(zuuluu)(option);
        option = option.AST_KEY;
        option = option.MENTION;
        sizing = foxtra[option];
        output = report;
        option = copyDataProperties(output, sizing);
        option = yankee[golfie];
        option = offset.bind(zuuluu)(option);
        option = option.AST_KEY;
        option = option.MENTION;
        option = verify[option];
        foxtra = option.react;
        option = 'react';
        report[option] = foxtra;
        tangon[oscard] = report;
        report = yankee[golfie];
        report = offset.bind(zuuluu)(report);
        report = report.AST_KEY;
        oscard = report.CHANNEL_MENTION;
        report = {};
        foxtra = yankee[romeon];
        foxtra = offset.bind(zuuluu)(foxtra);
        backup = foxtra.DEFAULT_RULES;
        foxtra = yankee[golfie];
        foxtra = offset.bind(zuuluu)(foxtra);
        foxtra = foxtra.AST_KEY;
        foxtra = foxtra.CHANNEL_MENTION;
        sizing = backup[foxtra];
        output = report;
        foxtra = copyDataProperties(output, sizing);
        foxtra = yankee[golfie];
        foxtra = offset.bind(zuuluu)(foxtra);
        foxtra = foxtra.AST_KEY;
        foxtra = foxtra.CHANNEL_MENTION;
        foxtra = verify[foxtra];
        foxtra = foxtra.react;
        report[option] = foxtra;
        tangon[oscard] = report;
        report = yankee[golfie];
        report = offset.bind(zuuluu)(report);
        report = report.AST_KEY;
        oscard = report.ITALICS;
        report = {};
        romeon = yankee[romeon];
        romeon = offset.bind(zuuluu)(romeon);
        foxtra = romeon.DEFAULT_RULES;
        romeon = yankee[golfie];
        romeon = offset.bind(zuuluu)(romeon);
        romeon = romeon.AST_KEY;
        romeon = romeon.ITALICS;
        sizing = foxtra[romeon];
        output = report;
        romeon = copyDataProperties(output, sizing);
        golfie = yankee[golfie];
        golfie = offset.bind(zuuluu)(golfie);
        golfie = golfie.AST_KEY;
        golfie = golfie.ITALICS;
        golfie = verify[golfie];
        golfie = golfie.react;
        report[option] = golfie;
        tangon[oscard] = report;
        entity[1] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot4 = report;
    tangon = function() { // Original name: createWidgetMessageRules
        romeon = _closure1_slot1;
        offset = _closure1_slot2;
        entity = 1;
        entity = offset[entity];
        zuuluu = undefined;
        michal = romeon.bind(zuuluu)(entity);
        entity = 2;
        entity = offset[entity];
        entity = romeon.bind(zuuluu)(entity);
        tangon = entity.lockscreenWidgetMessageRules;
        entity = new Array(2);
        entity[0] = tangon;
        tangon = {};
        verify = _closure1_slot0;
        report = 3;
        oscard = offset[report];
        oscard = verify.bind(zuuluu)(oscard);
        oscard = oscard.AST_KEY;
        yankee = oscard.MENTION;
        oscard = {};
        golfie = 5;
        golfie = offset[golfie];
        golfie = verify.bind(zuuluu)(golfie);
        option = golfie.DEFAULT_RULES;
        golfie = offset[report];
        golfie = verify.bind(zuuluu)(golfie);
        golfie = golfie.AST_KEY;
        golfie = golfie.MENTION;
        backup = option[golfie];
        kiloes = oscard;
        golfie = copyDataProperties(kiloes, backup);
        golfie = 0;
        option = offset[golfie];
        option = verify.bind(zuuluu)(option);
        foxtra = option.plainMentionRenderer;
        option = 'react';
        oscard[option] = foxtra;
        tangon[yankee] = oscard;
        report = offset[report];
        report = verify.bind(zuuluu)(report);
        report = report.AST_KEY;
        oscard = report.SPOILER;
        report = {};
        yankee = 6;
        yankee = offset[yankee];
        yankee = romeon.bind(zuuluu)(yankee);
        yankee = yankee.RULES;
        backup = yankee.spoiler;
        kiloes = report;
        yankee = copyDataProperties(kiloes, backup);
        golfie = offset[golfie];
        golfie = verify.bind(zuuluu)(golfie);
        golfie = golfie.plainSpoilerRenderer;
        report[option] = golfie;
        tangon[oscard] = report;
        entity[1] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot5 = tangon;
    entity = global;
    yankee = entity.Object;
    offset = yankee.defineProperty;
    verify = {};
    entity = true;
    verify['value'] = entity;
    entity = '__esModule';
    entity = offset.bind(yankee)(zuuluu, entity, verify);
    entity = 7;
    golfie = golfie[entity];
    entity = undefined;
    verify = option.bind(entity)(golfie);
    option = verify.fileFinishedImporting;
    golfie = 'modules/markup/CustomMarkup.native.tsx';
    golfie = option.bind(verify)(golfie);
    zuuluu['createRules'] = oscard;
    oscard = function() { // Original name: getParser
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            oscard = arguments[0];
            report = arguments[1];
            tangon = undefined;
            if(!(oscard === tangon)) { _fun00004_ip = 14; continue _fun00003 }
 12:
            oscard = {};
 14:
            if(!(report === tangon)) { _fun00004_ip = 20; continue _fun00003 }
 18:
            report = {};
 20:
            zuuluu = _closure1_slot1;
            golfie = _closure1_slot2;
            michal = 2;
            michal = golfie[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.reactParserFor;
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(oscard, report);
            entity = michal.bind(zuuluu)(entity);
            return entity;
        }
    };
    zuuluu['getParser'] = oscard;
    zuuluu['createNotifCenterV2MessagePreviewRules'] = report;
    report = function() { // Original name: getNotifCenterV2MessagePreviewParser
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            golfie = arguments[0];
            oscard = arguments[1];
            report = undefined;
            if(!(golfie === report)) { _fun00006_ip = 14; continue _fun00005 }
 12:
            golfie = {};
 14:
            if(!(oscard === report)) { _fun00006_ip = 20; continue _fun00005 }
 18:
            oscard = {};
 20:
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            michal = 2;
            michal = tangon[michal];
            zuuluu = zuuluu.bind(report)(michal);
            michal = zuuluu.reactParserFor;
            tangon = _closure1_slot4;
            entity = arguments[2];
            entity = tangon.bind(report)(golfie, oscard, entity);
            entity = michal.bind(zuuluu)(entity);
            return entity;
        }
    };
    zuuluu['getNotifCenterV2MessagePreviewParser'] = report;
    zuuluu['createWidgetMessageRules'] = tangon;
    michal = function() { // Original name: getWidgetMessageRules
        zuuluu = _closure1_slot1;
        tangon = _closure1_slot2;
        michal = 2;
        michal = tangon[michal];
        tangon = undefined;
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.reactParserFor;
        entity = _closure1_slot5;
        entity = entity.bind(tangon)();
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['getWidgetMessageRules'] = michal;
    return entity;
})();