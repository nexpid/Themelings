// app/modules/markup/CustomMarkup.native.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    options = argBar;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = options;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = golf;
    oscar = function(argFoo) { // Original name: createRules
        _fun53234: for(var _fun53234_ip = 0; ; ) switch(_fun53234_ip) {
 0:
            tango = arguments[1];
            zulu = undefined;
            if(!(tango === zulu)) { _fun53234_ip = 11; continue _fun53234 }
 9:
            tango = {};
 11:
            foxtrot = _closure1_slot1;
            yankee = _closure1_slot2;
            entity = 0;
            entity = yankee[entity];
            mike = foxtrot.bind(zulu)(entity);
            entity = argFoo;
            verify = mike.bind(zulu)(entity, tango);
            entity = 1;
            entity = yankee[entity];
            mike = foxtrot.bind(zulu)(entity);
            entity = 2;
            entity = yankee[entity];
            entity = foxtrot.bind(zulu)(entity);
            tango = entity.defaultRules;
            entity = new Array(3);
            entity[0] = tango;
            entity[1] = verify;
            tango = {};
            offset = _closure1_slot0;
            golf = 3;
            report = yankee[golf];
            report = offset.bind(zulu)(report);
            report = report.AST_KEY;
            oscar = report.LINK;
            report = {};
            romeo = 4;
            options = yankee[romeo];
            options = foxtrot.bind(zulu)(options);
            options = options.defaultRules;
            kilo = options.link;
            sizing = report;
            options = copyDataProperties(sizing, kilo);
            options = yankee[golf];
            options = offset.bind(zulu)(options);
            options = options.AST_KEY;
            options = options.LINK;
            options = verify[options];
            backup = options.react;
            options = 'react';
            report[options] = backup;
            tango[oscar] = report;
            report = yankee[golf];
            report = offset.bind(zulu)(report);
            report = report.AST_KEY;
            oscar = report.URL;
            report = {};
            backup = yankee[romeo];
            backup = foxtrot.bind(zulu)(backup);
            backup = backup.defaultRules;
            kilo = backup.url;
            sizing = report;
            backup = copyDataProperties(sizing, kilo);
            backup = yankee[golf];
            backup = offset.bind(zulu)(backup);
            backup = backup.AST_KEY;
            backup = backup.URL;
            backup = verify[backup];
            backup = backup.react;
            report[options] = backup;
            tango[oscar] = report;
            report = yankee[golf];
            report = offset.bind(zulu)(report);
            report = report.AST_KEY;
            oscar = report.AUTOLINK;
            report = {};
            backup = yankee[romeo];
            backup = foxtrot.bind(zulu)(backup);
            backup = backup.defaultRules;
            kilo = backup.autolink;
            sizing = report;
            backup = copyDataProperties(sizing, kilo);
            backup = yankee[golf];
            backup = offset.bind(zulu)(backup);
            backup = backup.AST_KEY;
            backup = backup.AUTOLINK;
            backup = verify[backup];
            backup = backup.react;
            report[options] = backup;
            tango[oscar] = report;
            report = yankee[golf];
            report = offset.bind(zulu)(report);
            report = report.AST_KEY;
            oscar = report.BLOCK_QUOTE;
            report = {};
            romeo = yankee[romeo];
            romeo = foxtrot.bind(zulu)(romeo);
            romeo = romeo.defaultRules;
            kilo = romeo.blockQuote;
            sizing = report;
            romeo = copyDataProperties(sizing, kilo);
            golf = yankee[golf];
            golf = offset.bind(zulu)(golf);
            golf = golf.AST_KEY;
            golf = golf.BLOCK_QUOTE;
            golf = verify[golf];
            golf = golf.react;
            report[options] = golf;
            tango[oscar] = report;
            entity[2] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        }
    };
    var _closure1_slot3 = oscar;
    report = function(argFoo, argBar, argBaz) { // Original name: createNotifCenterV2MessagePreviewRules
        tango = _closure1_slot1;
        yankee = _closure1_slot2;
        entity = 0;
        entity = yankee[entity];
        zulu = undefined;
        golf = tango.bind(zulu)(entity);
        oscar = argFoo;
        mike = argBar;
        entity = argBaz;
        verify = golf.bind(zulu)(oscar, mike, entity);
        entity = 1;
        entity = yankee[entity];
        mike = tango.bind(zulu)(entity);
        entity = 2;
        entity = yankee[entity];
        entity = tango.bind(zulu)(entity);
        tango = entity.notifCenterV2MessagePreviewRules;
        entity = new Array(2);
        entity[0] = tango;
        tango = {};
        offset = _closure1_slot0;
        golf = 3;
        report = yankee[golf];
        report = offset.bind(zulu)(report);
        report = report.AST_KEY;
        oscar = report.MENTION;
        report = {};
        romeo = 5;
        options = yankee[romeo];
        options = offset.bind(zulu)(options);
        foxtrot = options.DEFAULT_RULES;
        options = yankee[golf];
        options = offset.bind(zulu)(options);
        options = options.AST_KEY;
        options = options.MENTION;
        sizing = foxtrot[options];
        output = report;
        options = copyDataProperties(output, sizing);
        options = yankee[golf];
        options = offset.bind(zulu)(options);
        options = options.AST_KEY;
        options = options.MENTION;
        options = verify[options];
        foxtrot = options.react;
        options = 'react';
        report[options] = foxtrot;
        tango[oscar] = report;
        report = yankee[golf];
        report = offset.bind(zulu)(report);
        report = report.AST_KEY;
        oscar = report.CHANNEL_MENTION;
        report = {};
        foxtrot = yankee[romeo];
        foxtrot = offset.bind(zulu)(foxtrot);
        backup = foxtrot.DEFAULT_RULES;
        foxtrot = yankee[golf];
        foxtrot = offset.bind(zulu)(foxtrot);
        foxtrot = foxtrot.AST_KEY;
        foxtrot = foxtrot.CHANNEL_MENTION;
        sizing = backup[foxtrot];
        output = report;
        foxtrot = copyDataProperties(output, sizing);
        foxtrot = yankee[golf];
        foxtrot = offset.bind(zulu)(foxtrot);
        foxtrot = foxtrot.AST_KEY;
        foxtrot = foxtrot.CHANNEL_MENTION;
        foxtrot = verify[foxtrot];
        foxtrot = foxtrot.react;
        report[options] = foxtrot;
        tango[oscar] = report;
        report = yankee[golf];
        report = offset.bind(zulu)(report);
        report = report.AST_KEY;
        oscar = report.ITALICS;
        report = {};
        romeo = yankee[romeo];
        romeo = offset.bind(zulu)(romeo);
        foxtrot = romeo.DEFAULT_RULES;
        romeo = yankee[golf];
        romeo = offset.bind(zulu)(romeo);
        romeo = romeo.AST_KEY;
        romeo = romeo.ITALICS;
        sizing = foxtrot[romeo];
        output = report;
        romeo = copyDataProperties(output, sizing);
        golf = yankee[golf];
        golf = offset.bind(zulu)(golf);
        golf = golf.AST_KEY;
        golf = golf.ITALICS;
        golf = verify[golf];
        golf = golf.react;
        report[options] = golf;
        tango[oscar] = report;
        entity[1] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    var _closure1_slot4 = report;
    tango = function() { // Original name: createWidgetMessageRules
        romeo = _closure1_slot1;
        offset = _closure1_slot2;
        entity = 1;
        entity = offset[entity];
        zulu = undefined;
        mike = romeo.bind(zulu)(entity);
        entity = 2;
        entity = offset[entity];
        entity = romeo.bind(zulu)(entity);
        tango = entity.lockscreenWidgetMessageRules;
        entity = new Array(2);
        entity[0] = tango;
        tango = {};
        verify = _closure1_slot0;
        report = 3;
        oscar = offset[report];
        oscar = verify.bind(zulu)(oscar);
        oscar = oscar.AST_KEY;
        yankee = oscar.MENTION;
        oscar = {};
        golf = 5;
        golf = offset[golf];
        golf = verify.bind(zulu)(golf);
        options = golf.DEFAULT_RULES;
        golf = offset[report];
        golf = verify.bind(zulu)(golf);
        golf = golf.AST_KEY;
        golf = golf.MENTION;
        backup = options[golf];
        kilo = oscar;
        golf = copyDataProperties(kilo, backup);
        golf = 0;
        options = offset[golf];
        options = verify.bind(zulu)(options);
        foxtrot = options.plainMentionRenderer;
        options = 'react';
        oscar[options] = foxtrot;
        tango[yankee] = oscar;
        report = offset[report];
        report = verify.bind(zulu)(report);
        report = report.AST_KEY;
        oscar = report.SPOILER;
        report = {};
        yankee = 6;
        yankee = offset[yankee];
        yankee = romeo.bind(zulu)(yankee);
        yankee = yankee.RULES;
        backup = yankee.spoiler;
        kilo = report;
        yankee = copyDataProperties(kilo, backup);
        golf = offset[golf];
        golf = verify.bind(zulu)(golf);
        golf = golf.plainSpoilerRenderer;
        report[options] = golf;
        tango[oscar] = report;
        entity[1] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    var _closure1_slot5 = tango;
    entity = global;
    yankee = entity.Object;
    offset = yankee.defineProperty;
    verify = {};
    entity = true;
    verify['value'] = entity;
    entity = '__esModule';
    entity = offset.bind(yankee)(zulu, entity, verify);
    entity = 7;
    golf = golf[entity];
    entity = undefined;
    verify = options.bind(entity)(golf);
    options = verify.fileFinishedImporting;
    golf = 'modules/markup/CustomMarkup.native.tsx';
    golf = options.bind(verify)(golf);
    zulu['createRules'] = oscar;
    oscar = function() { // Original name: getParser
        _fun53237: for(var _fun53237_ip = 0; ; ) switch(_fun53237_ip) {
 0:
            oscar = arguments[0];
            report = arguments[1];
            tango = undefined;
            if(!(oscar === tango)) { _fun53237_ip = 14; continue _fun53237 }
 12:
            oscar = {};
 14:
            if(!(report === tango)) { _fun53237_ip = 20; continue _fun53237 }
 18:
            report = {};
 20:
            zulu = _closure1_slot1;
            golf = _closure1_slot2;
            mike = 2;
            mike = golf[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.reactParserFor;
            entity = _closure1_slot3;
            entity = entity.bind(tango)(oscar, report);
            entity = mike.bind(zulu)(entity);
            return entity;
        }
    };
    zulu['getParser'] = oscar;
    zulu['createNotifCenterV2MessagePreviewRules'] = report;
    report = function() { // Original name: getNotifCenterV2MessagePreviewParser
        _fun53238: for(var _fun53238_ip = 0; ; ) switch(_fun53238_ip) {
 0:
            golf = arguments[0];
            oscar = arguments[1];
            report = undefined;
            if(!(golf === report)) { _fun53238_ip = 14; continue _fun53238 }
 12:
            golf = {};
 14:
            if(!(oscar === report)) { _fun53238_ip = 20; continue _fun53238 }
 18:
            oscar = {};
 20:
            zulu = _closure1_slot1;
            tango = _closure1_slot2;
            mike = 2;
            mike = tango[mike];
            zulu = zulu.bind(report)(mike);
            mike = zulu.reactParserFor;
            tango = _closure1_slot4;
            entity = arguments[2];
            entity = tango.bind(report)(golf, oscar, entity);
            entity = mike.bind(zulu)(entity);
            return entity;
        }
    };
    zulu['getNotifCenterV2MessagePreviewParser'] = report;
    zulu['createWidgetMessageRules'] = tango;
    mike = function() { // Original name: getWidgetMessageRules
        zulu = _closure1_slot1;
        tango = _closure1_slot2;
        mike = 2;
        mike = tango[mike];
        tango = undefined;
        zulu = zulu.bind(tango)(mike);
        mike = zulu.reactParserFor;
        entity = _closure1_slot5;
        entity = entity.bind(tango)();
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['getWidgetMessageRules'] = mike;
    return entity;
})();