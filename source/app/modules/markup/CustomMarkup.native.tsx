// app/modules/markup/CustomMarkup.native.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var8 = require;
    var3 = exports;
    var7 = dependencyMap;
    var _closure1_slot0 = var8;
    var1 = metroImportDefault;
    var _closure1_slot1 = var1;
    var _closure1_slot2 = var7;
    var6 = function createRules(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var4 = arguments[1];
            var3 = undefined;
            if(!(var4 === var3)) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var4 = {};
case 2:
            var13 = _closure1_slot1;
            var11 = _closure1_slot2;
            var1 = 0;
            var1 = var11[var1];
            var2 = var13.bind(var3)(var1);
            var1 = arg1;
            var9 = var2.bind(var3)(var1, var4);
            var1 = 1;
            var1 = var11[var1];
            var2 = var13.bind(var3)(var1);
            var1 = 2;
            var1 = var11[var1];
            var1 = var13.bind(var3)(var1);
            var4 = var1.defaultRules;
            var1 = new Array(3);
            var1[0] = var4;
            var1[1] = var9;
            var4 = {};
            var10 = _closure1_slot0;
            var7 = 3;
            var5 = var11[var7];
            var5 = var10.bind(var3)(var5);
            var5 = var5.AST_KEY;
            var6 = var5.LINK;
            var5 = {};
            var12 = 4;
            var8 = var11[var12];
            var8 = var13.bind(var3)(var8);
            var8 = var8.defaultRules;
            var15 = var8.link;
            var16 = var5;
            var8 = copyDataProperties(var16, var15);
            var8 = var11[var7];
            var8 = var10.bind(var3)(var8);
            var8 = var8.AST_KEY;
            var8 = var8.LINK;
            var8 = var9[var8];
            var14 = var8.react;
            var8 = 'react';
            var5[var8] = var14;
            var4[var6] = var5;
            var5 = var11[var7];
            var5 = var10.bind(var3)(var5);
            var5 = var5.AST_KEY;
            var6 = var5.URL;
            var5 = {};
            var14 = var11[var12];
            var14 = var13.bind(var3)(var14);
            var14 = var14.defaultRules;
            var15 = var14.url;
            var16 = var5;
            var14 = copyDataProperties(var16, var15);
            var14 = var11[var7];
            var14 = var10.bind(var3)(var14);
            var14 = var14.AST_KEY;
            var14 = var14.URL;
            var14 = var9[var14];
            var14 = var14.react;
            var5[var8] = var14;
            var4[var6] = var5;
            var5 = var11[var7];
            var5 = var10.bind(var3)(var5);
            var5 = var5.AST_KEY;
            var6 = var5.AUTOLINK;
            var5 = {};
            var14 = var11[var12];
            var14 = var13.bind(var3)(var14);
            var14 = var14.defaultRules;
            var15 = var14.autolink;
            var16 = var5;
            var14 = copyDataProperties(var16, var15);
            var14 = var11[var7];
            var14 = var10.bind(var3)(var14);
            var14 = var14.AST_KEY;
            var14 = var14.AUTOLINK;
            var14 = var9[var14];
            var14 = var14.react;
            var5[var8] = var14;
            var4[var6] = var5;
            var5 = var11[var7];
            var5 = var10.bind(var3)(var5);
            var5 = var5.AST_KEY;
            var6 = var5.BLOCK_QUOTE;
            var5 = {};
            var12 = var11[var12];
            var12 = var13.bind(var3)(var12);
            var12 = var12.defaultRules;
            var15 = var12.blockQuote;
            var16 = var5;
            var12 = copyDataProperties(var16, var15);
            var7 = var11[var7];
            var7 = var10.bind(var3)(var7);
            var7 = var7.AST_KEY;
            var7 = var7.BLOCK_QUOTE;
            var7 = var9[var7];
            var7 = var7.react;
            var5[var8] = var7;
            var4[var6] = var5;
            var1[2] = var4;
            var1 = var2.bind(var3)(var1);
            return var1;
        }
    };
    var _closure1_slot3 = var6;
    var5 = function createNotifCenterV2MessagePreviewRules(arg1, arg2, arg3) {
        var4 = _closure1_slot1;
        var11 = _closure1_slot2;
        var1 = 0;
        var1 = var11[var1];
        var3 = undefined;
        var7 = var4.bind(var3)(var1);
        var6 = arg1;
        var2 = arg2;
        var1 = arg3;
        var9 = var7.bind(var3)(var6, var2, var1);
        var1 = 1;
        var1 = var11[var1];
        var2 = var4.bind(var3)(var1);
        var1 = 2;
        var1 = var11[var1];
        var1 = var4.bind(var3)(var1);
        var4 = var1.notifCenterV2MessagePreviewRules;
        var1 = new Array(2);
        var1[0] = var4;
        var4 = {};
        var10 = _closure1_slot0;
        var7 = 3;
        var5 = var11[var7];
        var5 = var10.bind(var3)(var5);
        var5 = var5.AST_KEY;
        var6 = var5.MENTION;
        var5 = {};
        var12 = 5;
        var8 = var11[var12];
        var8 = var10.bind(var3)(var8);
        var13 = var8.DEFAULT_RULES;
        var8 = var11[var7];
        var8 = var10.bind(var3)(var8);
        var8 = var8.AST_KEY;
        var8 = var8.MENTION;
        var16 = var13[var8];
        var17 = var5;
        var8 = copyDataProperties(var17, var16);
        var8 = var11[var7];
        var8 = var10.bind(var3)(var8);
        var8 = var8.AST_KEY;
        var8 = var8.MENTION;
        var8 = var9[var8];
        var13 = var8.react;
        var8 = 'react';
        var5[var8] = var13;
        var4[var6] = var5;
        var5 = var11[var7];
        var5 = var10.bind(var3)(var5);
        var5 = var5.AST_KEY;
        var6 = var5.CHANNEL_MENTION;
        var5 = {};
        var13 = var11[var12];
        var13 = var10.bind(var3)(var13);
        var14 = var13.DEFAULT_RULES;
        var13 = var11[var7];
        var13 = var10.bind(var3)(var13);
        var13 = var13.AST_KEY;
        var13 = var13.CHANNEL_MENTION;
        var16 = var14[var13];
        var17 = var5;
        var13 = copyDataProperties(var17, var16);
        var13 = var11[var7];
        var13 = var10.bind(var3)(var13);
        var13 = var13.AST_KEY;
        var13 = var13.CHANNEL_MENTION;
        var13 = var9[var13];
        var13 = var13.react;
        var5[var8] = var13;
        var4[var6] = var5;
        var5 = var11[var7];
        var5 = var10.bind(var3)(var5);
        var5 = var5.AST_KEY;
        var6 = var5.ITALICS;
        var5 = {};
        var12 = var11[var12];
        var12 = var10.bind(var3)(var12);
        var13 = var12.DEFAULT_RULES;
        var12 = var11[var7];
        var12 = var10.bind(var3)(var12);
        var12 = var12.AST_KEY;
        var12 = var12.ITALICS;
        var16 = var13[var12];
        var17 = var5;
        var12 = copyDataProperties(var17, var16);
        var7 = var11[var7];
        var7 = var10.bind(var3)(var7);
        var7 = var7.AST_KEY;
        var7 = var7.ITALICS;
        var7 = var9[var7];
        var7 = var7.react;
        var5[var8] = var7;
        var4[var6] = var5;
        var1[1] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var _closure1_slot4 = var5;
    var4 = function createWidgetMessageRules() {
        var12 = _closure1_slot1;
        var10 = _closure1_slot2;
        var1 = 1;
        var1 = var10[var1];
        var3 = undefined;
        var2 = var12.bind(var3)(var1);
        var1 = 2;
        var1 = var10[var1];
        var1 = var12.bind(var3)(var1);
        var4 = var1.lockscreenWidgetMessageRules;
        var1 = new Array(2);
        var1[0] = var4;
        var4 = {};
        var9 = _closure1_slot0;
        var5 = 3;
        var6 = var10[var5];
        var6 = var9.bind(var3)(var6);
        var6 = var6.AST_KEY;
        var11 = var6.MENTION;
        var6 = {};
        var7 = 5;
        var7 = var10[var7];
        var7 = var9.bind(var3)(var7);
        var8 = var7.DEFAULT_RULES;
        var7 = var10[var5];
        var7 = var9.bind(var3)(var7);
        var7 = var7.AST_KEY;
        var7 = var7.MENTION;
        var14 = var8[var7];
        var15 = var6;
        var7 = copyDataProperties(var15, var14);
        var7 = 0;
        var8 = var10[var7];
        var8 = var9.bind(var3)(var8);
        var13 = var8.plainMentionRenderer;
        var8 = 'react';
        var6[var8] = var13;
        var4[var11] = var6;
        var5 = var10[var5];
        var5 = var9.bind(var3)(var5);
        var5 = var5.AST_KEY;
        var6 = var5.SPOILER;
        var5 = {};
        var11 = 6;
        var11 = var10[var11];
        var11 = var12.bind(var3)(var11);
        var11 = var11.RULES;
        var14 = var11.spoiler;
        var15 = var5;
        var11 = copyDataProperties(var15, var14);
        var7 = var10[var7];
        var7 = var9.bind(var3)(var7);
        var7 = var7.plainSpoilerRenderer;
        var5[var8] = var7;
        var4[var6] = var5;
        var1[1] = var4;
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var _closure1_slot5 = var4;
    var1 = global;
    var11 = var1.Object;
    var10 = var11.defineProperty;
    var9 = {};
    var1 = true;
    var9['value'] = var1;
    var1 = '__esModule';
    var1 = var10.bind(var11)(var3, var1, var9);
    var1 = 7;
    var7 = var7[var1];
    var1 = undefined;
    var9 = var8.bind(var1)(var7);
    var8 = var9.fileFinishedImporting;
    var7 = 'modules/markup/CustomMarkup.native.tsx';
    var7 = var8.bind(var9)(var7);
    var3['createRules'] = var6;
    var6 = function getParser() {
        _fun0002: for(var _fun0002_ip = 0; ; ) switch(_fun0002_ip) {
case 0:
            var6 = arguments[0];
            var5 = arguments[1];
            var4 = undefined;
            if(!(var6 === var4)) { _fun0002_ip = 4; continue _fun0002 }
case 5:
            var6 = {};
case 4:
            if(!(var5 === var4)) { _fun0002_ip = 6; continue _fun0002 }
case 7:
            var5 = {};
case 6:
            var3 = _closure1_slot1;
            var7 = _closure1_slot2;
            var2 = 2;
            var2 = var7[var2];
            var3 = var3.bind(var4)(var2);
            var2 = var3.reactParserFor;
            var1 = _closure1_slot3;
            var1 = var1.bind(var4)(var6, var5);
            var1 = var2.bind(var3)(var1);
            return var1;
        }
    };
    var3['getParser'] = var6;
    var3['createNotifCenterV2MessagePreviewRules'] = var5;
    var5 = function getNotifCenterV2MessagePreviewParser() {
        _fun0003: for(var _fun0003_ip = 0; ; ) switch(_fun0003_ip) {
case 0:
            var7 = arguments[0];
            var6 = arguments[1];
            var5 = undefined;
            if(!(var7 === var5)) { _fun0003_ip = 4; continue _fun0003 }
case 5:
            var7 = {};
case 4:
            if(!(var6 === var5)) { _fun0003_ip = 6; continue _fun0003 }
case 7:
            var6 = {};
case 6:
            var3 = _closure1_slot1;
            var4 = _closure1_slot2;
            var2 = 2;
            var2 = var4[var2];
            var3 = var3.bind(var5)(var2);
            var2 = var3.reactParserFor;
            var4 = _closure1_slot4;
            var1 = arguments[2];
            var1 = var4.bind(var5)(var7, var6, var1);
            var1 = var2.bind(var3)(var1);
            return var1;
        }
    };
    var3['getNotifCenterV2MessagePreviewParser'] = var5;
    var3['createWidgetMessageRules'] = var4;
    var2 = function getWidgetMessageRules() {
        var3 = _closure1_slot1;
        var4 = _closure1_slot2;
        var2 = 2;
        var2 = var4[var2];
        var4 = undefined;
        var3 = var3.bind(var4)(var2);
        var2 = var3.reactParserFor;
        var1 = _closure1_slot5;
        var1 = var1.bind(var4)();
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var3['getWidgetMessageRules'] = var2;
    return var1;
})();