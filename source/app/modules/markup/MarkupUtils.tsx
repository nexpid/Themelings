// app/modules/markup/MarkupUtils.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    update = argBaz;
    oscar = argCorge;
    zulu = argFred;
    report = argPlugh;
    var _closure1_slot0 = update;
    var _closure1_slot1 = oscar;
    var _closure1_slot2 = report;
    source = function(argFoo, argBar) { // Original name: combineAndInjectMentionRule
        tango = argFoo;
        entity = tango.mention;
        mike = _closure1_slot0;
        zulu = _closure1_slot2;
        entity = 0;
        entity = zulu[entity];
        zulu = undefined;
        mike = mike.bind(zulu)(entity);
        entity = new Array(2);
        entity[0] = tango;
        options = argBar;
        report = 1;
        verify = entity;
        golf = report;
        tango = arraySpread(verify, options, golf);
        oscar = {};
        entity[tango] = oscar;
        tango = tango + report;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    entity = global;
    golf = entity.Object;
    tango = golf.defineProperty;
    mike = {};
    offset = true;
    mike['value'] = offset;
    entity = '__esModule';
    entity = tango.bind(golf)(zulu, entity, mike);
    result = {'enableBuildOverrides': false, 'enableEmojiClick': true};
    kilo = false;
    mike = 1;
    tango = report[mike];
    entity = undefined;
    tango = update.bind(entity)(tango);
    golf = tango.RULES;
    echo = 2;
    tango = report[echo];
    verify = update.bind(entity)(tango);
    tango = {};
    tango['enableBuildOverrides'] = offset;
    verify = verify.bind(entity)(tango);
    tango = new Array(1);
    tango[0] = verify;
    foxtrot = source.bind(entity)(golf, tango);
    tango = 3;
    golf = report[tango];
    offset = update.bind(entity)(golf);
    verify = offset.omit;
    golf = report[mike];
    golf = update.bind(entity)(golf);
    yankee = golf.RULES;
    golf = report[echo];
    golf = update.bind(entity)(golf);
    romeo = golf.bind(entity)(result);
    golf = new Array(1);
    golf[0] = romeo;
    golf = source.bind(entity)(yankee, golf);
    equality = 'paragraph';
    whiskey = 'newline';
    backup = verify.bind(offset)(golf, equality, whiskey);
    golf = report[mike];
    golf = update.bind(entity)(golf);
    verify = golf.CHANNEL_TOPIC_RULES;
    golf = report[echo];
    offset = update.bind(entity)(golf);
    golf = {};
    variable47 = golf;
    variable46 = result;
    yankee = copyDataProperties(variable47, variable46);
    romeo = 'bottom';
    yankee = 'emojiTooltipPosition';
    golf[yankee] = romeo;
    offset = offset.bind(entity)(golf);
    golf = new Array(2);
    golf[0] = offset;
    offset = {};
    yankee = {};
    romeo = report[mike];
    romeo = update.bind(entity)(romeo);
    romeo = romeo.RULES;
    romeo = romeo.text;
    romeo = romeo.react;
    yankee['react'] = romeo;
    offset['codeBlock'] = yankee;
    golf[1] = offset;
    romeo = source.bind(entity)(verify, golf);
    var _closure1_slot3 = romeo;
    golf = report[mike];
    golf = update.bind(entity)(golf);
    verify = golf.VOICE_CHANNEL_STATUS_RULES;
    golf = report[echo];
    offset = update.bind(entity)(golf);
    golf = {};
    variable47 = golf;
    variable46 = result;
    yankee = copyDataProperties(variable47, variable46);
    yankee = 'enableEmojiClick';
    golf[yankee] = kilo;
    offset = offset.bind(entity)(golf);
    golf = new Array(1);
    golf[0] = offset;
    output = source.bind(entity)(verify, golf);
    golf = report[mike];
    golf = update.bind(entity)(golf);
    verify = golf.EMBED_TITLE_RULES;
    golf = report[echo];
    golf = update.bind(entity)(golf);
    offset = golf.bind(entity)(result);
    golf = new Array(1);
    golf[0] = offset;
    yankee = source.bind(entity)(verify, golf);
    golf = report[mike];
    golf = update.bind(entity)(golf);
    verify = golf.INLINE_REPLY_RULES;
    golf = report[echo];
    golf = update.bind(entity)(golf);
    offset = golf.bind(entity)(result);
    golf = new Array(1);
    golf[0] = offset;
    offset = source.bind(entity)(verify, golf);
    golf = report[mike];
    golf = update.bind(entity)(golf);
    verify = golf.GUILD_VERIFICATION_FORM_RULES;
    golf = report[echo];
    golf = update.bind(entity)(golf);
    kilo = golf.bind(entity)(result);
    golf = new Array(1);
    golf[0] = kilo;
    sizing = source.bind(entity)(verify, golf);
    golf = report[mike];
    golf = update.bind(entity)(golf);
    verify = golf.GUILD_EVENT_RULES;
    golf = report[echo];
    golf = update.bind(entity)(golf);
    kilo = golf.bind(entity)(result);
    golf = new Array(1);
    golf[0] = kilo;
    kilo = source.bind(entity)(verify, golf);
    golf = report[mike];
    golf = update.bind(entity)(golf);
    verify = golf.AUTO_MODERATION_SYSTEM_MESSAGE_RULES;
    golf = report[echo];
    golf = update.bind(entity)(golf);
    control = golf.bind(entity)(result);
    golf = new Array(1);
    golf[0] = control;
    golf = source.bind(entity)(verify, golf);
    tango = report[tango];
    lima = update.bind(entity)(tango);
    sierra = lima.omit;
    tango = report[mike];
    tango = update.bind(entity)(tango);
    verify = tango.RULES;
    tango = report[echo];
    tango = update.bind(entity)(tango);
    control = tango.bind(entity)(result);
    tango = new Array(1);
    tango[0] = control;
    variable47 = source.bind(entity)(verify, tango);
    variable44 = 'strong';
    variable43 = 'codeBlock';
    variable42 = 'inlineCode';
    variable41 = 'u';
    variable40 = 'link';
    variable39 = 'url';
    variable38 = 'autolink';
    variable37 = 'list';
    variable36 = 'heading';
    quebec = 'subtext';
    variable48 = lima;
    variable46 = equality;
    variable45 = whiskey;
    verify = variable48[sierra](variable47, variable46, variable45, variable44, variable43, variable42, variable41, variable40, variable39, variable38, variable37, variable36, quebec, equality);
    tango = {};
    mike = report[mike];
    mike = update.bind(entity)(mike);
    mike = mike.RULES;
    mike = mike.text;
    tango['text'] = mike;
    mike = {};
    mike['combineAndInjectMentionRule'] = source;
    echo = report[echo];
    echo = update.bind(entity)(echo);
    mike['createReactRules'] = echo;
    mike['defaultReactRuleOptions'] = result;
    mike['defaultRules'] = foxtrot;
    mike['guildEventRules'] = kilo;
    mike['notifCenterV2MessagePreviewRules'] = verify;
    mike['lockscreenWidgetMessageRules'] = tango;
    tango = 4;
    verify = report[tango];
    verify = oscar.bind(entity)(verify);
    verify = verify.astParserFor;
    mike['astParserFor'] = verify;
    verify = report[tango];
    verify = oscar.bind(entity)(verify);
    verify = verify.reactParserFor;
    mike['reactParserFor'] = verify;
    verify = report[tango];
    result = oscar.bind(entity)(verify);
    verify = result.reactParserFor;
    verify = verify.bind(result)(foxtrot);
    mike['parse'] = verify;
    options = function(argFoo, argBar, argBaz, argCorge) { // Original name: parseTopic
        zulu = _closure1_slot1;
        tango = _closure1_slot2;
        mike = 4;
        mike = tango[mike];
        oscar = undefined;
        zulu = zulu.bind(oscar)(mike);
        mike = zulu.reactParserFor;
        entity = _closure1_slot3;
        report = mike.bind(zulu)(entity);
        tango = {};
        entity = true;
        tango['allowLinks'] = entity;
        verify = argBaz;
        offset = tango;
        entity = copyDataProperties(offset, verify);
        offset = argFoo;
        verify = argBar;
        golf = argCorge;
        yankee = undefined;
        options = tango;
        entity = yankee[report](offset, verify, options, golf, oscar);
        return entity;
    };
    mike['parseTopic'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.reactParserFor;
    options = options.bind(verify)(output);
    mike['parseVoiceChannelStatus'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.reactParserFor;
    options = options.bind(verify)(yankee);
    mike['parseEmbedTitle'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.reactParserFor;
    options = options.bind(verify)(offset);
    mike['parseInlineReply'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.reactParserFor;
    options = options.bind(verify)(sizing);
    mike['parseGuildVerificationFormRule'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.reactParserFor;
    options = options.bind(verify)(kilo);
    mike['parseGuildEventDescription'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.reactParserFor;
    options = options.bind(verify)(golf);
    mike['parseAutoModerationSystemMessage'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.reactParserFor;
    options = options.bind(verify)(backup);
    mike['parseForumPostGuidelines'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.astParserFor;
    options = options.bind(verify)(foxtrot);
    mike['parseToAST'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.astParserFor;
    options = options.bind(verify)(romeo);
    mike['parseTopicToAST'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.astParserFor;
    options = options.bind(verify)(yankee);
    mike['parseEmbedTitleToAST'] = options;
    options = report[tango];
    verify = oscar.bind(entity)(options);
    options = verify.astParserFor;
    options = options.bind(verify)(offset);
    mike['parseInlineReplyToAST'] = options;
    tango = report[tango];
    oscar = oscar.bind(entity)(tango);
    tango = oscar.astParserFor;
    tango = tango.bind(oscar)(golf);
    mike['parseAutoModerationSystemMessageToAST'] = tango;
    tango = 5;
    report = report[tango];
    tango = argBar;
    oscar = tango.bind(entity)(report);
    report = oscar.fileFinishedImporting;
    tango = 'modules/markup/MarkupUtils.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();