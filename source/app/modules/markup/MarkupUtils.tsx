// app/modules/markup/MarkupUtils.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    update = argBaz;
    oscard = argCor;
    zuuluu = argFre;
    report = argPlu;
    var _closure1_slot0 = update;
    var _closure1_slot1 = oscard;
    var _closure1_slot2 = report;
    source = function(argFoo, argBar) { // Original name: combineAndInjectMentionRule
        tangon = argFoo;
        entity = tangon.mention;
        michal = _closure1_slot0;
        zuuluu = _closure1_slot2;
        entity = 0;
        entity = zuuluu[entity];
        zuuluu = undefined;
        michal = michal.bind(zuuluu)(entity);
        entity = new Array(2);
        entity[0] = tangon;
        option = argBar;
        report = 1;
        verify = entity;
        golfie = report;
        tangon = arraySpread(verify, option, golfie);
        oscard = {};
        entity[tangon] = oscard;
        tangon = tangon + report;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    entity = global;
    golfie = entity.Object;
    tangon = golfie.defineProperty;
    michal = {};
    offset = true;
    michal['value'] = offset;
    entity = '__esModule';
    entity = tangon.bind(golfie)(zuuluu, entity, michal);
    result = {'enableBuildOverrides': false, 'enableEmojiClick': true};
    kiloes = false;
    michal = 1;
    tangon = report[michal];
    entity = undefined;
    tangon = update.bind(entity)(tangon);
    golfie = tangon.RULES;
    echoed = 2;
    tangon = report[echoed];
    verify = update.bind(entity)(tangon);
    tangon = {};
    tangon['enableBuildOverrides'] = offset;
    verify = verify.bind(entity)(tangon);
    tangon = new Array(1);
    tangon[0] = verify;
    foxtra = source.bind(entity)(golfie, tangon);
    tangon = 3;
    golfie = report[tangon];
    offset = update.bind(entity)(golfie);
    verify = offset.omit;
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    yankee = golfie.RULES;
    golfie = report[echoed];
    golfie = update.bind(entity)(golfie);
    romeon = golfie.bind(entity)(result);
    golfie = new Array(1);
    golfie[0] = romeon;
    golfie = source.bind(entity)(yankee, golfie);
    equals = 'paragraph';
    whisks = 'newline';
    backup = verify.bind(offset)(golfie, equals, whisks);
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    verify = golfie.CHANNEL_TOPIC_RULES;
    golfie = report[echoed];
    offset = update.bind(entity)(golfie);
    golfie = {};
    variable47 = golfie;
    variable46 = result;
    yankee = copyDataProperties(variable47, variable46);
    romeon = 'bottom';
    yankee = 'emojiTooltipPosition';
    golfie[yankee] = romeon;
    offset = offset.bind(entity)(golfie);
    golfie = new Array(2);
    golfie[0] = offset;
    offset = {};
    yankee = {};
    romeon = report[michal];
    romeon = update.bind(entity)(romeon);
    romeon = romeon.RULES;
    romeon = romeon.text;
    romeon = romeon.react;
    yankee['react'] = romeon;
    offset['codeBlock'] = yankee;
    golfie[1] = offset;
    romeon = source.bind(entity)(verify, golfie);
    var _closure1_slot3 = romeon;
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    verify = golfie.VOICE_CHANNEL_STATUS_RULES;
    golfie = report[echoed];
    offset = update.bind(entity)(golfie);
    golfie = {};
    variable47 = golfie;
    variable46 = result;
    yankee = copyDataProperties(variable47, variable46);
    yankee = 'enableEmojiClick';
    golfie[yankee] = kiloes;
    offset = offset.bind(entity)(golfie);
    golfie = new Array(1);
    golfie[0] = offset;
    output = source.bind(entity)(verify, golfie);
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    verify = golfie.EMBED_TITLE_RULES;
    golfie = report[echoed];
    golfie = update.bind(entity)(golfie);
    offset = golfie.bind(entity)(result);
    golfie = new Array(1);
    golfie[0] = offset;
    yankee = source.bind(entity)(verify, golfie);
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    verify = golfie.INLINE_REPLY_RULES;
    golfie = report[echoed];
    golfie = update.bind(entity)(golfie);
    offset = golfie.bind(entity)(result);
    golfie = new Array(1);
    golfie[0] = offset;
    offset = source.bind(entity)(verify, golfie);
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    verify = golfie.GUILD_VERIFICATION_FORM_RULES;
    golfie = report[echoed];
    golfie = update.bind(entity)(golfie);
    kiloes = golfie.bind(entity)(result);
    golfie = new Array(1);
    golfie[0] = kiloes;
    sizing = source.bind(entity)(verify, golfie);
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    verify = golfie.GUILD_EVENT_RULES;
    golfie = report[echoed];
    golfie = update.bind(entity)(golfie);
    kiloes = golfie.bind(entity)(result);
    golfie = new Array(1);
    golfie[0] = kiloes;
    kiloes = source.bind(entity)(verify, golfie);
    golfie = report[michal];
    golfie = update.bind(entity)(golfie);
    verify = golfie.AUTO_MODERATION_SYSTEM_MESSAGE_RULES;
    golfie = report[echoed];
    golfie = update.bind(entity)(golfie);
    ctrled = golfie.bind(entity)(result);
    golfie = new Array(1);
    golfie[0] = ctrled;
    golfie = source.bind(entity)(verify, golfie);
    tangon = report[tangon];
    limora = update.bind(entity)(tangon);
    sierra = limora.omit;
    tangon = report[michal];
    tangon = update.bind(entity)(tangon);
    verify = tangon.RULES;
    tangon = report[echoed];
    tangon = update.bind(entity)(tangon);
    ctrled = tangon.bind(entity)(result);
    tangon = new Array(1);
    tangon[0] = ctrled;
    variable47 = source.bind(entity)(verify, tangon);
    variable44 = 'strong';
    variable43 = 'codeBlock';
    variable42 = 'inlineCode';
    variable41 = 'u';
    variable40 = 'link';
    variable39 = 'url';
    variable38 = 'autolink';
    variable37 = 'list';
    variable36 = 'heading';
    quebec = 'subtext';
    variable48 = limora;
    variable46 = equals;
    variable45 = whisks;
    verify = variable48[sierra](variable47, variable46, variable45, variable44, variable43, variable42, variable41, variable40, variable39, variable38, variable37, variable36, quebec, equals);
    tangon = {};
    michal = report[michal];
    michal = update.bind(entity)(michal);
    michal = michal.RULES;
    michal = michal.text;
    tangon['text'] = michal;
    michal = {};
    michal['combineAndInjectMentionRule'] = source;
    echoed = report[echoed];
    echoed = update.bind(entity)(echoed);
    michal['createReactRules'] = echoed;
    michal['defaultReactRuleOptions'] = result;
    michal['defaultRules'] = foxtra;
    michal['guildEventRules'] = kiloes;
    michal['notifCenterV2MessagePreviewRules'] = verify;
    michal['lockscreenWidgetMessageRules'] = tangon;
    tangon = 4;
    verify = report[tangon];
    verify = oscard.bind(entity)(verify);
    verify = verify.astParserFor;
    michal['astParserFor'] = verify;
    verify = report[tangon];
    verify = oscard.bind(entity)(verify);
    verify = verify.reactParserFor;
    michal['reactParserFor'] = verify;
    verify = report[tangon];
    result = oscard.bind(entity)(verify);
    verify = result.reactParserFor;
    verify = verify.bind(result)(foxtra);
    michal['parse'] = verify;
    option = function(argFoo, argBar, argBaz, argCor) { // Original name: parseTopic
        zuuluu = _closure1_slot1;
        tangon = _closure1_slot2;
        michal = 4;
        michal = tangon[michal];
        oscard = undefined;
        zuuluu = zuuluu.bind(oscard)(michal);
        michal = zuuluu.reactParserFor;
        entity = _closure1_slot3;
        report = michal.bind(zuuluu)(entity);
        tangon = {};
        entity = true;
        tangon['allowLinks'] = entity;
        verify = argBaz;
        offset = tangon;
        entity = copyDataProperties(offset, verify);
        offset = argFoo;
        verify = argBar;
        golfie = argCor;
        yankee = undefined;
        option = tangon;
        entity = yankee[report](offset, verify, option, golfie, oscard);
        return entity;
    };
    michal['parseTopic'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.reactParserFor;
    option = option.bind(verify)(output);
    michal['parseVoiceChannelStatus'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.reactParserFor;
    option = option.bind(verify)(yankee);
    michal['parseEmbedTitle'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.reactParserFor;
    option = option.bind(verify)(offset);
    michal['parseInlineReply'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.reactParserFor;
    option = option.bind(verify)(sizing);
    michal['parseGuildVerificationFormRule'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.reactParserFor;
    option = option.bind(verify)(kiloes);
    michal['parseGuildEventDescription'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.reactParserFor;
    option = option.bind(verify)(golfie);
    michal['parseAutoModerationSystemMessage'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.reactParserFor;
    option = option.bind(verify)(backup);
    michal['parseForumPostGuidelines'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.astParserFor;
    option = option.bind(verify)(foxtra);
    michal['parseToAST'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.astParserFor;
    option = option.bind(verify)(romeon);
    michal['parseTopicToAST'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.astParserFor;
    option = option.bind(verify)(yankee);
    michal['parseEmbedTitleToAST'] = option;
    option = report[tangon];
    verify = oscard.bind(entity)(option);
    option = verify.astParserFor;
    option = option.bind(verify)(offset);
    michal['parseInlineReplyToAST'] = option;
    tangon = report[tangon];
    oscard = oscard.bind(entity)(tangon);
    tangon = oscard.astParserFor;
    tangon = tangon.bind(oscard)(golfie);
    michal['parseAutoModerationSystemMessageToAST'] = tangon;
    tangon = 5;
    report = report[tangon];
    tangon = argBar;
    oscard = tangon.bind(entity)(report);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/markup/MarkupUtils.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();