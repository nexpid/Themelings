// app/modules/group_dm/native/GroupDMAvatar.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    options = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = options;
    var _closure1_slot2 = golf;
    mike = function(argFoo) { // Original name: FacepileGroupDMAvatar
        _fun79802: for(var _fun79802_ip = 0; ; ) switch(_fun79802_ip) {
 0:
            mike = argFoo;
            result = mike.style;
            report = mike.size;
            offset = mike.animate;
            yankee = mike.users;
            romeo = mike.sources;
            foxtrot = mike.pileSizeOverride;
            output = mike.status;
            golf = mike.accessible;
            oscar = mike.accessibilityLabel;
            tango = undefined;
            var _closure2_slot1 = tango;
            mike = _closure1_slot11;
            backup = mike.bind(tango)();
            options = _closure1_slot0;
            zulu = _closure1_slot2;
            mike = 7;
            zulu = zulu[mike];
            zulu = options.bind(tango)(zulu);
            zulu = zulu.AVATAR_SIZE_MAP;
            update = zulu[report];
            var _closure2_slot0 = update;
            kilo = _closure1_slot3;
            verify = kilo.useMemo;
            options = new Array(1);
            options[0] = update;
            zulu = function() {
                entity = {};
                mike = _closure2_slot0;
                entity['width'] = mike;
                entity['height'] = mike;
                return entity;
            };
            echo = verify.bind(kilo)(zulu, options);
            verify = null;
            if(!(verify == foxtrot)) { _fun79802_ip = 150; continue _fun79802 }
 142:
            zulu = _closure1_slot10;
            foxtrot = zulu[report];
 150:
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            mike = report[mike];
            mike = zulu.bind(tango)(mike);
            mike = mike.AVATAR_SIZE_MAP;
            kilo = mike[foxtrot];
            _closure2_slot1 = kilo;
            options = _closure1_slot3;
            zulu = options.useMemo;
            mike = new Array(2);
            mike[0] = update;
            mike[1] = kilo;
            entity = function() {
                entity = _closure2_slot1;
                offset = 2;
                golf = entity / offset;
                entity = _closure1_slot9;
                options = golf + entity;
                mike = offset * options;
                entity = global;
                verify = entity.Math;
                report = verify.sqrt;
                yankee = entity.Math;
                zulu = yankee.pow;
                zulu = zulu.bind(yankee)(options, offset);
                zulu = offset * zulu;
                zulu = report.bind(verify)(zulu);
                report = _closure2_slot0;
                golf = report - golf;
                report = _closure2_slot1;
                report = golf - report;
                verify = entity.Math;
                golf = verify.sqrt;
                yankee = entity.Math;
                entity = yankee.pow;
                entity = entity.bind(yankee)(report, offset);
                entity = offset * entity;
                entity = golf.bind(verify)(entity);
                golf = -zulu;
                zulu = options - zulu;
                zulu = golf - zulu;
                zulu = zulu - entity;
                entity = entity - report;
                report = zulu + entity;
                entity = {};
                zulu = {};
                options = _closure1_slot0;
                golf = _closure1_slot2;
                oscar = 8;
                golf = golf[oscar];
                oscar = undefined;
                oscar = options.bind(oscar)(golf);
                oscar = oscar.CutoutShape;
                oscar = oscar.Circle;
                zulu['shape'] = oscar;
                oscar = _closure2_slot1;
                oscar = oscar - mike;
                oscar = oscar - report;
                zulu['x'] = oscar;
                tango = _closure2_slot1;
                tango = tango - mike;
                tango = tango - report;
                zulu['y'] = tango;
                zulu['size'] = mike;
                mike = new Array(1);
                mike[0] = zulu;
                entity['nativeCutouts'] = mike;
                return entity;
            };
            options = zulu.bind(options)(entity, mike);
            zulu = _closure1_slot8;
            mike = _closure1_slot4;
            entity = {};
            kilo = new Array(2);
            kilo[0] = echo;
            kilo[1] = result;
            entity['style'] = kilo;
            entity['accessible'] = golf;
            entity['accessibilityLabel'] = oscar;
            kilo = true;
            entity['accessibilityElementsHidden'] = kilo;
            oscar = 'no-hide-descendants';
            entity['importantForAccessibility'] = oscar;
            golf = _closure1_slot7;
            oscar = _closure1_slot1;
            result = 5;
            report = report[result];
            oscar = oscar.bind(tango)(report);
            report = {};
            echo = backup.firstFace;
            report['style'] = echo;
            report['size'] = foxtrot;
            report['guildId'] = tango;
            report['cutout'] = options;
            report['animate'] = offset;
            if(!(verify != yankee)) { _fun79802_ip = 336; continue _fun79802 }
 322:
            options = {};
            echo = 0;
            echo = yankee[echo];
            options['user'] = echo;
            _fun79802_ip = 351; continue _fun79802;
 336:
            echo = {};
            update = 0;
            update = romeo[update];
            echo['source'] = update;
            options = echo;
 351:
            control = report;
            source = options;
            options = copyDataProperties(control, source);
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot7;
            golf = _closure1_slot1;
            oscar = _closure1_slot2;
            oscar = oscar[result];
            golf = golf.bind(tango)(oscar);
            oscar = {};
            oscar['status'] = output;
            sizing = _closure1_slot6;
            sizing = sizing.REFRESH_MEDIUM_10;
            oscar['statusSizeOverride'] = sizing;
            oscar['autoStatusCutout'] = kilo;
            backup = backup.secondFace;
            oscar['style'] = backup;
            oscar['size'] = foxtrot;
            oscar['guildId'] = tango;
            oscar['animate'] = offset;
            if(!(verify != yankee)) { _fun79802_ip = 464; continue _fun79802 }
 449:
            verify = {};
            offset = 1;
            offset = yankee[offset];
            verify['user'] = offset;
            _fun79802_ip = 480; continue _fun79802;
 464:
            offset = {};
            yankee = 1;
            yankee = romeo[yankee];
            offset['source'] = yankee;
            verify = offset;
 480:
            control = oscar;
            source = verify;
            verify = copyDataProperties(control, source);
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot12 = mike;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zulu, entity, report);
    entity = 0;
    verify = golf[entity];
    report = argCorge;
    entity = undefined;
    report = report.bind(entity)(verify);
    var _closure1_slot3 = report;
    report = 1;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.View;
    var _closure1_slot4 = report;
    report = 2;
    report = golf[report];
    report = options.bind(entity)(report);
    var _closure1_slot5 = report;
    report = 3;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.StatusSizes;
    var _closure1_slot6 = options;
    options = 4;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.jsx;
    var _closure1_slot7 = verify;
    options = golf[options];
    options = oscar.bind(entity)(options);
    options = options.jsxs;
    var _closure1_slot8 = options;
    var _closure1_slot9 = report;
    report = {};
    options = 5;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    offset = verify.LARGE_48;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.SMALL;
    report[offset] = verify;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    offset = verify.XLARGE;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.NORMAL;
    report[offset] = verify;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    offset = verify.XXLARGE;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.LARGE;
    report[offset] = verify;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    offset = verify.PROFILE;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.XXLARGE;
    report[offset] = verify;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    offset = verify.REFRESH_MEDIUM_32;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.XSMALL_20;
    report[offset] = verify;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    offset = verify.XSMALL;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.SIZE_16;
    report[offset] = verify;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    offset = verify.SIZE_16;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.XXSMALL_10;
    report[offset] = verify;
    verify = golf[options];
    verify = oscar.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.NORMAL;
    options = golf[options];
    options = oscar.bind(entity)(options);
    options = options.AvatarSizes;
    options = options.XSMALL;
    report[verify] = options;
    var _closure1_slot10 = report;
    report = 6;
    report = golf[report];
    verify = oscar.bind(entity)(report);
    options = verify.createStyles;
    report = {};
    offset = {'position': 'absolute', 'top': 0, 'left': 0};
    report['firstFace'] = offset;
    offset = {'position': 'absolute', 'bottom': 0, 'right': 0};
    report['secondFace'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot11 = report;
    report = 11;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/group_dm/native/GroupDMAvatar.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: GroupDMAvatar
        _fun79805: for(var _fun79805_ip = 0; ; ) switch(_fun79805_ip) {
 0:
            mike = argFoo;
            yankee = mike.style;
            verify = mike.channel;
            var _closure2_slot0 = verify;
            offset = mike.size;
            options = mike.animate;
            foxtrot = mike.pileSizeOverride;
            romeo = mike.status;
            golf = mike.accessible;
            oscar = mike.accessibilityLabel;
            tango = _closure1_slot0;
            report = _closure1_slot2;
            zulu = 9;
            zulu = report[zulu];
            report = undefined;
            backup = tango.bind(report)(zulu);
            tango = backup.useStateFromStoresArray;
            kilo = _closure1_slot5;
            zulu = new Array(1);
            zulu[0] = kilo;
            entity = function() {
                entity = _closure2_slot0;
                zulu = entity.recipients;
                mike = zulu.map;
                entity = function(argFoo) {
                    zulu = _closure1_slot5;
                    mike = zulu.getUser;
                    entity = argFoo;
                    entity = mike.bind(zulu)(entity);
                    return entity;
                };
                zulu = mike.bind(zulu)(entity);
                mike = zulu.filter;
                report = _closure1_slot0;
                tango = _closure1_slot2;
                entity = 10;
                tango = tango[entity];
                entity = undefined;
                entity = report.bind(entity)(tango);
                entity = entity.isNotNullish;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            kilo = tango.bind(backup)(zulu, entity);
            zulu = verify.icon;
            entity = null;
            if(!(entity == zulu)) { _fun79805_ip = 299; continue _fun79805 }
 122:
            entity = verify.recipients;
            entity = entity.length;
            backup = 0;
            if(!(backup !== entity)) { _fun79805_ip = 299; continue _fun79805 }
 142:
            entity = kilo.length;
            if(!(backup !== entity)) { _fun79805_ip = 299; continue _fun79805 }
 154:
            zulu = kilo.length;
            entity = 1;
            if(!(entity !== zulu)) { _fun79805_ip = 220; continue _fun79805 }
 166:
            tango = _closure1_slot7;
            zulu = _closure1_slot12;
            entity = {};
            entity['status'] = romeo;
            entity['style'] = yankee;
            entity['size'] = offset;
            entity['animate'] = options;
            entity['users'] = kilo;
            entity['pileSizeOverride'] = foxtrot;
            entity['accessible'] = golf;
            entity['accessibilityLabel'] = oscar;
            entity = tango.bind(report)(zulu, entity);
            _fun79805_ip = 297; continue _fun79805;
 220:
            foxtrot = _closure1_slot7;
            tango = _closure1_slot1;
            sizing = _closure1_slot2;
            zulu = 5;
            zulu = sizing[zulu];
            tango = tango.bind(report)(zulu);
            zulu = {};
            sizing = true;
            zulu['autoStatusCutout'] = sizing;
            zulu['status'] = romeo;
            zulu['style'] = yankee;
            zulu['size'] = offset;
            backup = kilo[backup];
            zulu['user'] = backup;
            zulu['guildId'] = report;
            zulu['animate'] = options;
            zulu['accessible'] = golf;
            zulu['accessibilityLabel'] = oscar;
            entity = foxtrot.bind(report)(tango, zulu);
 297:
            _fun79805_ip = 368; continue _fun79805;
 299:
            tango = _closure1_slot7;
            zulu = _closure1_slot1;
            foxtrot = _closure1_slot2;
            mike = 5;
            mike = foxtrot[mike];
            zulu = zulu.bind(report)(mike);
            mike = {};
            foxtrot = true;
            mike['autoStatusCutout'] = foxtrot;
            mike['status'] = romeo;
            mike['style'] = yankee;
            mike['size'] = offset;
            mike['channel'] = verify;
            mike['animate'] = options;
            mike['accessible'] = golf;
            mike['accessibilityLabel'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 368:
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['FacepileGroupDMAvatar'] = mike;
    return entity;
})();