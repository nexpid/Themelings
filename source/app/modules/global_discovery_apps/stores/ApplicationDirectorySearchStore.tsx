// app/modules/global_discovery_apps/stores/ApplicationDirectorySearchStore.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBar;
    option = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = golfie;
    entity = function(argFoo, argBar, argBaz) { // Original name: _callSuper
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = argFoo;
            oscard = argBaz;
            michal = _closure1_slot5;
            zuuluu = undefined;
            entity = argBar;
            verify = michal.bind(zuuluu)(entity);
            michal = _closure1_slot4;
            entity = _closure1_slot11;
            entity = entity.bind(zuuluu)();
            if(entity) { _fun00002_ip = 51; continue _fun00001 }
 38:
            entity = verify.apply;
            entity = entity.bind(verify)(tangon, oscard);
            _fun00002_ip = 92; continue _fun00001;
 51:
            golfie = global;
            option = golfie.Reflect;
            golfie = option.construct;
            if(oscard) { _fun00002_ip = 71; continue _fun00001 }
 67:
            oscard = new Array(0);
 71:
            report = _closure1_slot5;
            report = report.bind(zuuluu)(tangon);
            report = report.constructor;
            entity = golfie.bind(option)(verify, oscard, report);
 92:
            entity = michal.bind(zuuluu)(tangon, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = function() { // Original name: _isNativeReflectConstruct
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
 2: // try_start_0
            michal = global;
            zuuluu = michal.Boolean;
            zuuluu = zuuluu.prototype;
            tangon = zuuluu.valueOf;
            zuuluu = tangon.call;
            option = michal.Reflect;
            golfie = option.construct;
            oscard = michal.Boolean;
            report = new Array(0);
            michal = function() {
                entity = undefined;
                return entity;
            };
            michal = golfie.bind(option)(oscard, report, michal);
            michal = zuuluu.bind(tangon)(michal);
            michal = !michal;
            var _closure2_slot0 = michal;
 70: // try_end0
            _fun00004_ip = 74; continue _fun00003;
 72: // catch_target0
            CatchBlockStart(arg_register=1);
 74:
            michal = function() { // Original name: _isNativeReflectConstruct
                entity = _closure2_slot0;
                entity = !entity;
                entity = !entity;
                return entity;
            };
            _closure1_slot11 = michal;
            entity = undefined;
            entity = michal.bind(entity)();
            return entity;
        }
    };
    var _closure1_slot11 = entity;
    entity = function(argFoo) { // Original name: getCacheKey
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            vacuum = entity.query;
            ctrled = entity.guildId;
            source = entity.page;
            update = entity.pageSize;
            echoed = entity.categoryId;
            result = entity.integrationType;
            output = entity.minUserInstallCommandCount;
            sizing = entity.excludeAppsWithCustomInstallUrl;
            kiloes = entity.excludeNonEmbeddedApps;
            backup = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
            foxtra = entity.source;
            zuuluu = undefined;
            if(!(foxtra === zuuluu)) { _fun00006_ip = 108; continue _fun00005 }
 73:
            michal = _closure1_slot0;
            tangon = _closure1_slot1;
            entity = 5;
            entity = tangon[entity];
            entity = michal.bind(zuuluu)(entity);
            entity = entity.SearchAppsRequestSource;
            foxtra = entity.APP_DIRECTORY;
 108:
            entity = global;
            entity = entity.HermesInternal;
            romeon = entity.concat;
            variable45 = "query:'";
            variable43 = "' guildId:";
            variable41 = ' page:';
            variable39 = ' pageSize:';
            variable37 = ' categoryId:';
            quebec = ' integrationType:';
            whisks = ' minUserInstallCommandCount:';
            sierra = ' excludeAppsWithCustomInstallUrl:';
            target = ' excludeNonEmbeddedApps:';
            cntext = ' excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand:';
            config = ' source:';
            variable44 = vacuum;
            variable42 = ctrled;
            variable40 = source;
            variable38 = update;
            variable36 = echoed;
            equals = result;
            limora = output;
            status = sizing;
            papara = kiloes;
            record = backup;
            sequen = foxtra;
            entity = variable45[romeon](variable44, variable43, variable42, variable41, variable40, variable39, variable38, variable37, variable36, quebec, equals, whisks, limora, sierra, status, target, papara, cntext, record, config, sequen, vacuum);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = global;
    verify = entity.Object;
    tangon = verify.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(verify)(zuuluu, entity, michal);
    yankee = 0;
    michal = golfie[yankee];
    entity = undefined;
    michal = option.bind(entity)(michal);
    var _closure1_slot2 = michal;
    offset = 1;
    michal = golfie[offset];
    michal = option.bind(entity)(michal);
    var _closure1_slot3 = michal;
    verify = 2;
    michal = golfie[verify];
    michal = option.bind(entity)(michal);
    var _closure1_slot4 = michal;
    michal = 3;
    michal = golfie[michal];
    michal = option.bind(entity)(michal);
    var _closure1_slot5 = michal;
    michal = 4;
    michal = golfie[michal];
    michal = option.bind(entity)(michal);
    var _closure1_slot6 = michal;
    michal = {};
    michal['FETCHING'] = yankee;
    tangon = 'FETCHING';
    michal[yankee] = tangon;
    michal['FETCHED'] = offset;
    tangon = 'FETCHED';
    michal[offset] = tangon;
    michal['ERROR'] = verify;
    tangon = 'ERROR';
    michal[verify] = tangon;
    var _closure1_slot7 = michal;
    tangon = 6;
    tangon = golfie[tangon];
    offset = option.bind(entity)(tangon);
    tangon = {};
    verify = 20;
    tangon['max'] = verify;
    verify = offset.prototype;
    verify = Object.create(verify, {constructor: {value: offset}});
    kiloes = verify;
    backup = tangon;
    tangon = new kiloes[offset](backup, foxtra);
    tangon = tangon instanceof Object ? tangon : verify;
    var _closure1_slot8 = tangon;
    tangon = {};
    var _closure1_slot9 = tangon;
    tangon = 7;
    tangon = golfie[tangon];
    tangon = option.bind(entity)(tangon);
    verify = tangon.Store;
    tangon = function(argFoo) {
        tangon = function() { // Original name: ApplicationDirectorySearchStore
            report = this;
            tangon = undefined;
            entity = undefined;
            oscard = _closure1_slot2;
            zuuluu = _closure2_slot0;
            oscard = oscard.bind(tangon)(report, zuuluu);
            michal = _closure1_slot10;
            entity = arguments;
            entity = michal.bind(tangon)(report, zuuluu, entity);
            return entity;
        };
        var _closure2_slot0 = tangon;
        report = _closure1_slot6;
        zuuluu = undefined;
        michal = argFoo;
        michal = report.bind(zuuluu)(tangon, michal);
        michal = _closure1_slot3;
        report = {};
        entity = 'getSearchResults';
        report['key'] = entity;
        entity = function(argFoo) { // Original name: value
            entity = argFoo;
            backup = entity.query;
            foxtra = entity.guildId;
            romeon = entity.page;
            yankee = entity.pageSize;
            offset = entity.categoryId;
            verify = entity.integrationType;
            option = entity.minUserInstallCommandCount;
            golfie = entity.excludeAppsWithCustomInstallUrl;
            oscard = entity.excludeNonEmbeddedApps;
            report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
            michal = entity.source;
            tangon = _closure1_slot12;
            zuuluu = {};
            zuuluu['query'] = backup;
            zuuluu['guildId'] = foxtra;
            zuuluu['page'] = romeon;
            zuuluu['pageSize'] = yankee;
            zuuluu['categoryId'] = offset;
            zuuluu['integrationType'] = verify;
            zuuluu['minUserInstallCommandCount'] = option;
            zuuluu['excludeAppsWithCustomInstallUrl'] = golfie;
            zuuluu['excludeNonEmbeddedApps'] = oscard;
            zuuluu['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
            zuuluu['source'] = michal;
            michal = undefined;
            zuuluu = tangon.bind(michal)(zuuluu);
            michal = _closure1_slot8;
            entity = michal.get;
            entity = entity.bind(michal)(zuuluu);
            return entity;
        };
        report['value'] = entity;
        entity = new Array(2);
        entity[0] = report;
        report = {};
        golfie = 'getFetchState';
        report['key'] = golfie;
        oscard = function(argFoo) { // Original name: value
            entity = argFoo;
            backup = entity.query;
            foxtra = entity.guildId;
            romeon = entity.page;
            yankee = entity.pageSize;
            offset = entity.categoryId;
            verify = entity.integrationType;
            option = entity.minUserInstallCommandCount;
            golfie = entity.excludeAppsWithCustomInstallUrl;
            oscard = entity.excludeNonEmbeddedApps;
            report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
            michal = entity.source;
            tangon = _closure1_slot12;
            zuuluu = {};
            zuuluu['query'] = backup;
            zuuluu['guildId'] = foxtra;
            zuuluu['page'] = romeon;
            zuuluu['pageSize'] = yankee;
            zuuluu['categoryId'] = offset;
            zuuluu['integrationType'] = verify;
            zuuluu['minUserInstallCommandCount'] = option;
            zuuluu['excludeAppsWithCustomInstallUrl'] = golfie;
            zuuluu['excludeNonEmbeddedApps'] = oscard;
            zuuluu['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
            zuuluu['source'] = michal;
            michal = undefined;
            michal = tangon.bind(michal)(zuuluu);
            entity = _closure1_slot9;
            entity = entity[michal];
            return entity;
        };
        report['value'] = oscard;
        entity[1] = report;
        entity = michal.bind(zuuluu)(tangon, entity);
        return entity;
    };
    verify = tangon.bind(entity)(verify);
    tangon = 'ApplicationDirectorySearchStore';
    verify['displayName'] = tangon;
    tangon = 8;
    tangon = golfie[tangon];
    backup = option.bind(entity)(tangon);
    tangon = {};
    offset = function(argFoo) { // Original name: handleSearchFetch
        entity = argFoo;
        backup = entity.query;
        foxtra = entity.guildId;
        romeon = entity.page;
        yankee = entity.pageSize;
        offset = entity.categoryId;
        verify = entity.integrationType;
        option = entity.minUserInstallCommandCount;
        golfie = entity.excludeAppsWithCustomInstallUrl;
        oscard = entity.excludeNonEmbeddedApps;
        report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
        entity = entity.source;
        tangon = _closure1_slot12;
        michal = {};
        michal['query'] = backup;
        michal['guildId'] = foxtra;
        michal['page'] = romeon;
        michal['pageSize'] = yankee;
        michal['categoryId'] = offset;
        michal['integrationType'] = verify;
        michal['minUserInstallCommandCount'] = option;
        michal['excludeAppsWithCustomInstallUrl'] = golfie;
        michal['excludeNonEmbeddedApps'] = oscard;
        michal['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
        michal['source'] = entity;
        entity = undefined;
        report = tangon.bind(entity)(michal);
        michal = {};
        kiloes = _closure1_slot9;
        sizing = michal;
        tangon = copyDataProperties(sizing, kiloes);
        tangon = _closure1_slot7;
        tangon = tangon.FETCHING;
        michal[report] = tangon;
        _closure1_slot9 = michal;
        return entity;
    };
    tangon['APPLICATION_DIRECTORY_FETCH_SEARCH'] = offset;
    offset = function(argFoo) { // Original name: handleSearchFetchSuccess
        entity = argFoo;
        kiloes = entity.query;
        backup = entity.guildId;
        foxtra = entity.page;
        romeon = entity.pageSize;
        yankee = entity.categoryId;
        sizing = entity.result;
        offset = entity.integrationType;
        verify = entity.minUserInstallCommandCount;
        option = entity.excludeAppsWithCustomInstallUrl;
        oscard = entity.excludeNonEmbeddedApps;
        report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
        entity = entity.source;
        tangon = _closure1_slot12;
        michal = {};
        michal['query'] = kiloes;
        michal['guildId'] = backup;
        michal['page'] = foxtra;
        michal['pageSize'] = romeon;
        michal['categoryId'] = yankee;
        michal['integrationType'] = offset;
        michal['minUserInstallCommandCount'] = verify;
        michal['excludeAppsWithCustomInstallUrl'] = option;
        michal['excludeNonEmbeddedApps'] = oscard;
        michal['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
        michal['source'] = entity;
        entity = undefined;
        report = tangon.bind(entity)(michal);
        oscard = _closure1_slot8;
        tangon = oscard.set;
        michal = {};
        option = global;
        verify = option.Date;
        option = verify.now;
        option = option.bind(verify)();
        michal['lastFetchTimeMs'] = option;
        output = michal;
        golfie = copyDataProperties(output, sizing);
        michal = tangon.bind(oscard)(report, michal);
        michal = {};
        sizing = _closure1_slot9;
        output = michal;
        tangon = copyDataProperties(output, sizing);
        tangon = _closure1_slot7;
        tangon = tangon.FETCHED;
        michal[report] = tangon;
        _closure1_slot9 = michal;
        return entity;
    };
    tangon['APPLICATION_DIRECTORY_FETCH_SEARCH_SUCCESS'] = offset;
    report = function(argFoo) { // Original name: handleSearchFetchFailure
        entity = argFoo;
        backup = entity.query;
        foxtra = entity.guildId;
        romeon = entity.page;
        yankee = entity.pageSize;
        offset = entity.categoryId;
        verify = entity.integrationType;
        option = entity.minUserInstallCommandCount;
        golfie = entity.excludeAppsWithCustomInstallUrl;
        oscard = entity.excludeNonEmbeddedApps;
        report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
        entity = entity.source;
        tangon = _closure1_slot12;
        michal = {};
        michal['query'] = backup;
        michal['guildId'] = foxtra;
        michal['page'] = romeon;
        michal['pageSize'] = yankee;
        michal['categoryId'] = offset;
        michal['integrationType'] = verify;
        michal['minUserInstallCommandCount'] = option;
        michal['excludeAppsWithCustomInstallUrl'] = golfie;
        michal['excludeNonEmbeddedApps'] = oscard;
        michal['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
        michal['source'] = entity;
        entity = undefined;
        report = tangon.bind(entity)(michal);
        michal = {};
        kiloes = _closure1_slot9;
        sizing = michal;
        tangon = copyDataProperties(sizing, kiloes);
        tangon = _closure1_slot7;
        tangon = tangon.ERROR;
        michal[report] = tangon;
        _closure1_slot9 = michal;
        return entity;
    };
    tangon['APPLICATION_DIRECTORY_FETCH_SEARCH_FAILURE'] = report;
    report = verify.prototype;
    report = Object.create(report, {constructor: {value: verify}});
    kiloes = report;
    foxtra = tangon;
    tangon = new kiloes[verify](backup, foxtra, romeon);
    tangon = tangon instanceof Object ? tangon : report;
    report = 9;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/global_discovery_apps/stores/ApplicationDirectorySearchStore.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    zuuluu['FetchState'] = michal;
    return entity;
})();