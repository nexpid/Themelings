// app/modules/user_settings/native/IgnoredUsersList.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ScrollView;
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    verify['marginTop'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['paddingHorizontal'] = romeo;
    tango['list'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_12;
    verify['marginTop'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['marginBottom'] = offset;
    tango['sectionLabelStyle'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = function(argFoo) { // Original name: IgnoredUsersList
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            echo = entity.userIds;
            entity = _closure1_slot7;
            report = undefined;
            romeo = entity.bind(report)();
            tango = _closure1_slot1;
            golf = _closure1_slot2;
            entity = 6;
            mike = golf[entity];
            zulu = tango.bind(report)(mike);
            mike = 7;
            mike = golf[mike];
            mike = tango.bind(report)(mike);
            mike = mike.IGNORED_USERS;
            mike = zulu.bind(report)(mike);
            tango = mike.analyticsLocations;
            zulu = echo.length;
            mike = 0;
            if(!(mike !== zulu)) { _fun00002_ip = 420; continue _fun00001 }
 85:
            zulu = _closure1_slot5;
            output = _closure1_slot0;
            result = _closure1_slot2;
            entity = result[entity];
            entity = output.bind(report)(entity);
            mike = entity.AnalyticsLocationProvider;
            entity = {};
            entity['value'] = tango;
            tango = 11;
            tango = result[tango];
            tango = output.bind(report)(tango);
            golf = tango.SafeAreaPaddingView;
            tango = {};
            kilo = true;
            tango['bottom'] = kilo;
            options = romeo.list;
            tango['style'] = options;
            offset = _closure1_slot6;
            verify = _closure1_slot3;
            options = {};
            yankee = 12;
            yankee = result[yankee];
            yankee = output.bind(report)(yankee);
            foxtrot = yankee.Text;
            yankee = {'style': null, 'variant': 'text-sm/semibold', 'color': 'header-secondary'};
            romeo = romeo.sectionLabelStyle;
            yankee['style'] = romeo;
            romeo = 10;
            backup = result[romeo];
            backup = output.bind(report)(backup);
            source = backup.intl;
            update = source.formatToPlainString;
            backup = result[romeo];
            backup = output.bind(report)(backup);
            backup = backup.t;
            sizing = backup.iNKUhY;
            backup = {};
            control = echo.length;
            backup['numberOfIgnoredUsers'] = control;
            backup = update.bind(source)(sizing, backup);
            yankee['children'] = backup;
            foxtrot = zulu.bind(report)(foxtrot, yankee);
            yankee = new Array(2);
            yankee[0] = foxtrot;
            foxtrot = 13;
            foxtrot = result[foxtrot];
            foxtrot = output.bind(report)(foxtrot);
            backup = foxtrot.TableRowGroup;
            foxtrot = {};
            foxtrot['hasIcons'] = kilo;
            sizing = echo.map;
            kilo = function(argFoo) {
                report = argFoo;
                tango = _closure1_slot5;
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 14;
                entity = zulu[entity];
                zulu = undefined;
                mike = mike.bind(zulu)(entity);
                entity = {};
                entity['userId'] = report;
                entity = tango.bind(zulu)(mike, entity, report);
                return entity;
            };
            kilo = sizing.bind(echo)(kilo);
            foxtrot['children'] = kilo;
            kilo = result[romeo];
            kilo = output.bind(report)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            romeo = result[romeo];
            romeo = output.bind(report)(romeo);
            romeo = romeo.t;
            romeo = romeo.93ZDWF;
            romeo = kilo.bind(sizing)(romeo);
            romeo = zulu.bind(report)(backup, foxtrot, romeo);
            yankee[1] = romeo;
            options['children'] = yankee;
            options = offset.bind(report)(verify, options);
            tango['children'] = options;
            tango = zulu.bind(report)(golf, tango);
            entity['children'] = tango;
            entity = zulu.bind(report)(mike, entity);
            _fun00002_ip = 530; continue _fun00001;
 420:
            tango = _closure1_slot5;
            zulu = _closure1_slot1;
            offset = _closure1_slot2;
            mike = 8;
            mike = offset[mike];
            zulu = zulu.bind(report)(mike);
            mike = {};
            verify = _closure1_slot0;
            oscar = 9;
            oscar = offset[oscar];
            oscar = verify.bind(report)(oscar);
            oscar = oscar.Blocked;
            mike['Illustration'] = oscar;
            oscar = 10;
            golf = offset[oscar];
            golf = verify.bind(report)(golf);
            options = golf.intl;
            golf = options.string;
            oscar = offset[oscar];
            oscar = verify.bind(report)(oscar);
            oscar = oscar.t;
            oscar = oscar.PYrWFR;
            oscar = golf.bind(options)(oscar);
            mike['body'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 530:
            return entity;
        }
    };
    var _closure1_slot8 = tango;
    tango = 16;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/IgnoredUsersList.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: ConnectedIgnoredUsersList
        zulu = _closure1_slot0;
        tango = _closure1_slot2;
        mike = 15;
        mike = tango[mike];
        tango = undefined;
        oscar = zulu.bind(tango)(mike);
        report = oscar.useStateFromStoresArray;
        mike = _closure1_slot4;
        zulu = new Array(1);
        zulu[0] = mike;
        mike = function() {
            mike = _closure1_slot4;
            entity = mike.getIgnoredIDs;
            entity = entity.bind(mike)();
            return entity;
        };
        report = report.bind(oscar)(zulu, mike);
        zulu = _closure1_slot5;
        mike = _closure1_slot8;
        entity = {};
        entity['userIds'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();