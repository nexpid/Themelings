// app/modules/user_settings/native/voice/redesign/NewUserSettingsVoiceOutputOptions.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    offset = 4;
    tangon = oscard[offset];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MediaEngineContextTypes;
    var _closure1_slot8 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot10 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['marginTop'] = offset;
    tangon['slider'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/voice/redesign/NewUserSettingsVoiceOutputOptions.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: NewUserSettingsVoiceOutputOptions
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot11;
            tangon = undefined;
            output = entity.bind(tangon)();
            echoed = _closure1_slot0;
            result = _closure1_slot2;
            michal = 8;
            entity = result[michal];
            golfie = echoed.bind(tangon)(entity);
            oscard = golfie.useStateFromStores;
            entity = _closure1_slot7;
            report = new Array(1);
            report[0] = entity;
            zuuluu = function() {
                michal = _closure1_slot7;
                entity = michal.getOutputVolume;
                entity = entity.bind(michal)();
                return entity;
            };
            source = oscard.bind(golfie)(report, zuuluu);
            zuuluu = result[michal];
            golfie = echoed.bind(tangon)(zuuluu);
            oscard = golfie.useStateFromStores;
            zuuluu = _closure1_slot5;
            report = new Array(2);
            report[0] = zuuluu;
            zuuluu = _closure1_slot6;
            report[1] = zuuluu;
            zuuluu = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure1_slot5;
                    entity = michal.getLastActiveStream;
                    michal = entity.bind(michal)();
                    report = null;
                    tangon = report != michal;
                    entity = null;
                    if(!tangon) { _fun00004_ip = 57; continue _fun00003 }
 28:
                    tangon = michal.ownerId;
                    oscard = _closure1_slot6;
                    zuuluu = oscard.getId;
                    zuuluu = zuuluu.bind(oscard)();
                    entity = null;
                    if(!(tangon !== zuuluu)) { _fun00004_ip = 57; continue _fun00003 }
 54:
                    entity = michal;
 57:
                    return entity;
                }
            };
            option = oscard.bind(golfie)(report, zuuluu);
            var _closure2_slot0 = option;
            michal = result[michal];
            report = echoed.bind(tangon)(michal);
            zuuluu = report.useStateFromStores;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    michal = _closure2_slot0;
                    entity = null;
                    michal = entity != michal;
                    entity = 0;
                    if(!michal) { _fun00006_ip = 57; continue _fun00005 }
 18:
                    report = _closure1_slot7;
                    tangon = report.getLocalVolume;
                    zuuluu = _closure2_slot0;
                    zuuluu = zuuluu.ownerId;
                    michal = _closure1_slot8;
                    michal = michal.STREAM;
                    entity = tangon.bind(report)(zuuluu, michal);
 57:
                    return entity;
                }
            };
            kiloes = zuuluu.bind(report)(michal, entity);
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(1);
            michal[0] = option;
            entity = function(argFoo) {
                report = _closure1_slot1;
                oscard = _closure1_slot2;
                entity = 9;
                zuuluu = oscard[entity];
                entity = undefined;
                option = report.bind(entity)(zuuluu);
                zuuluu = _closure2_slot0;
                tangon = null;
                golfie = tangon != zuuluu;
                tangon = 'Can not set stream volume without active stream';
                tangon = option.bind(entity)(golfie, tangon);
                tangon = 10;
                tangon = oscard[tangon];
                oscard = report.bind(entity)(tangon);
                report = oscard.setLocalVolume;
                tangon = zuuluu.ownerId;
                michal = _closure1_slot8;
                zuuluu = michal.STREAM;
                michal = argFoo;
                michal = report.bind(oscard)(tangon, michal, zuuluu);
                return entity;
            };
            backup = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot10;
            entity = 11;
            entity = result[entity];
            entity = echoed.bind(tangon)(entity);
            michal = entity.NewUserSettingsTableRowGroup;
            entity = {};
            offset = 12;
            report = result[offset];
            report = echoed.bind(tangon)(report);
            golfie = report.intl;
            oscard = golfie.string;
            report = result[offset];
            report = echoed.bind(tangon)(report);
            report = report.t;
            report = report.UXxPGB;
            report = oscard.bind(golfie)(report);
            entity['title'] = report;
            verify = _closure1_slot9;
            golfie = 13;
            report = result[golfie];
            report = echoed.bind(tangon)(report);
            oscard = report.TableRow;
            report = {};
            yankee = result[offset];
            yankee = echoed.bind(tangon)(yankee);
            sizing = yankee.intl;
            romeon = sizing.string;
            yankee = result[offset];
            yankee = echoed.bind(tangon)(yankee);
            yankee = yankee.t;
            yankee = yankee.xPHVBg;
            yankee = romeon.bind(sizing)(yankee);
            report['label'] = yankee;
            romeon = _closure1_slot4;
            yankee = {};
            sizing = output.slider;
            yankee['style'] = sizing;
            echoed = _closure1_slot1;
            sizing = 14;
            result = result[sizing];
            echoed = echoed.bind(tangon)(result);
            result = {};
            ctrled = output.slider;
            result['style'] = ctrled;
            result['value'] = source;
            update = function(argFoo) { // Original name: onValueChange
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 10;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.setOutputVolume;
                entity = argFoo;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            result['onValueChange'] = update;
            result = verify.bind(tangon)(echoed, result);
            yankee['children'] = result;
            yankee = verify.bind(tangon)(romeon, yankee);
            report['subLabel'] = yankee;
            oscard = verify.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = null;
            oscard = oscard != option;
            if(!oscard) { _fun00002_ip = 579; continue _fun00001 }
 435:
            verify = _closure1_slot9;
            echoed = _closure1_slot0;
            romeon = _closure1_slot2;
            golfie = romeon[golfie];
            golfie = echoed.bind(tangon)(golfie);
            option = golfie.TableRow;
            golfie = {};
            yankee = romeon[offset];
            yankee = echoed.bind(tangon)(yankee);
            result = yankee.intl;
            yankee = result.string;
            offset = romeon[offset];
            offset = echoed.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.pEAl4e;
            offset = yankee.bind(result)(offset);
            golfie['label'] = offset;
            yankee = _closure1_slot4;
            offset = {};
            output = output.slider;
            offset['style'] = output;
            foxtra = _closure1_slot1;
            romeon = romeon[sizing];
            foxtra = foxtra.bind(tangon)(romeon);
            romeon = {};
            romeon['value'] = kiloes;
            romeon['onValueChange'] = backup;
            romeon = verify.bind(tangon)(foxtra, romeon);
            offset['children'] = romeon;
            offset = verify.bind(tangon)(yankee, offset);
            golfie['subLabel'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 579:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();