// app/modules/user_settings/native/voice/UserSettingsVoiceProcessing.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    verify = argBar;
    option = argBaz;
    zuuluu = argFre;
    offset = argPlu;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = option;
    var _closure1_slot2 = offset;
    oscard = function(argFoo) { // Original name: handleAutomaticGainControlChange
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 4;
        zuuluu = zuuluu[entity];
        entity = undefined;
        report = tangon.bind(entity)(zuuluu);
        tangon = report.setAutomaticGainControl;
        zuuluu = {};
        oscard = _closure1_slot4;
        oscard = oscard.USER_SETTINGS;
        zuuluu['page'] = oscard;
        michal = _closure1_slot5;
        michal = michal.SETTINGS_VOICE_AND_VIDEO;
        zuuluu['section'] = michal;
        michal = argFoo;
        michal = tangon.bind(report)(michal, zuuluu);
        return entity;
    };
    var _closure1_slot11 = oscard;
    report = function(argFoo) { // Original name: handleEchoCancellationChange
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 4;
        zuuluu = zuuluu[entity];
        entity = undefined;
        report = tangon.bind(entity)(zuuluu);
        tangon = report.setEchoCancellation;
        zuuluu = {};
        oscard = _closure1_slot4;
        oscard = oscard.USER_SETTINGS;
        zuuluu['page'] = oscard;
        michal = _closure1_slot5;
        michal = michal.SETTINGS_VOICE_AND_VIDEO;
        zuuluu['section'] = michal;
        michal = argFoo;
        michal = tangon.bind(report)(michal, zuuluu);
        return entity;
    };
    var _closure1_slot12 = report;
    tangon = function(argFoo) { // Original name: handleNoiseSuppressionChange
        oscard = argFoo;
        entity = _closure1_slot10;
        option = entity.KRISP;
        entity = _closure1_slot10;
        michal = entity.STANDARD;
        tangon = _closure1_slot1;
        report = _closure1_slot2;
        zuuluu = 4;
        verify = report[zuuluu];
        entity = undefined;
        yankee = tangon.bind(entity)(verify);
        offset = yankee.setNoiseCancellation;
        verify = {};
        romeon = _closure1_slot4;
        romeon = romeon.USER_SETTINGS;
        verify['page'] = romeon;
        romeon = _closure1_slot5;
        romeon = romeon.SETTINGS_VOICE_AND_VIDEO;
        verify['section'] = romeon;
        option = oscard === option;
        option = offset.bind(yankee)(option, verify);
        zuuluu = report[zuuluu];
        report = tangon.bind(entity)(zuuluu);
        tangon = report.setNoiseSuppression;
        zuuluu = {};
        option = _closure1_slot4;
        option = option.USER_SETTINGS;
        zuuluu['page'] = option;
        golfie = _closure1_slot5;
        golfie = golfie.SETTINGS_VOICE_AND_VIDEO;
        zuuluu['section'] = golfie;
        michal = oscard === michal;
        michal = tangon.bind(report)(michal, zuuluu);
        return entity;
    };
    var _closure1_slot13 = tangon;
    entity = function(argFoo) { // Original name: NoiseSuppressionOption
        entity = argFoo;
        michal = entity.option;
        var _closure2_slot0 = michal;
        yankee = entity.label;
        oscard = entity.selected;
        entity = _closure1_slot9;
        tangon = undefined;
        romeon = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        golfie = _closure1_slot0;
        verify = _closure1_slot2;
        report = 6;
        entity = verify[report];
        entity = golfie.bind(tangon)(entity);
        michal = entity.FormRow;
        entity = {};
        romeon = romeon.option;
        entity['style'] = romeon;
        entity['label'] = yankee;
        offset = function() { // Original name: onPress
            zuuluu = _closure1_slot13;
            michal = _closure2_slot0;
            entity = undefined;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        entity['onPress'] = offset;
        option = _closure1_slot6;
        report = verify[report];
        report = golfie.bind(tangon)(report);
        report = report.FormRow;
        golfie = report.Checkmark;
        report = {};
        report['selected'] = oscard;
        report = option.bind(tangon)(golfie, report);
        entity['trailing'] = report;
        report = 'radio';
        entity['accessibilityRole'] = report;
        report = {};
        report['selected'] = oscard;
        entity['accessibilityState'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function() { // Original name: VoiceProcessingOptions
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 7;
            entity = zuuluu[entity];
            report = undefined;
            oscard = michal.bind(report)(entity);
            zuuluu = oscard.useStateFromStoresObject;
            entity = _closure1_slot3;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = {};
                tangon = _closure1_slot3;
                zuuluu = tangon.getNoiseSuppression;
                zuuluu = zuuluu.bind(tangon)();
                entity['noiseSuppression'] = zuuluu;
                tangon = _closure1_slot3;
                zuuluu = tangon.getNoiseCancellation;
                zuuluu = zuuluu.bind(tangon)();
                entity['noiseCancellation'] = zuuluu;
                zuuluu = _closure1_slot3;
                michal = zuuluu.isNoiseCancellationSupported;
                michal = michal.bind(zuuluu)();
                entity['noiseCancellationSupported'] = michal;
                return entity;
            };
            michal = zuuluu.bind(oscard)(michal, entity);
            entity = michal.noiseCancellationSupported;
            romeon = michal.noiseCancellation;
            foxtra = michal.noiseSuppression;
            if(entity) { _fun00002_ip = 241; continue _fun00001 }
 82:
            zuuluu = _closure1_slot6;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            entity = 6;
            entity = yankee[entity];
            entity = offset.bind(report)(entity);
            michal = entity.FormSwitchRow;
            entity = {};
            oscard = 8;
            option = yankee[oscard];
            option = offset.bind(report)(option);
            backup = option.intl;
            verify = backup.string;
            option = yankee[oscard];
            option = offset.bind(report)(option);
            option = option.t;
            option = option.t8QhiY;
            option = verify.bind(backup)(option);
            entity['label'] = option;
            option = yankee[oscard];
            option = offset.bind(report)(option);
            verify = option.intl;
            option = verify.string;
            oscard = yankee[oscard];
            oscard = offset.bind(report)(oscard);
            oscard = oscard.t;
            oscard = oscard.najZCQ;
            oscard = option.bind(verify)(oscard);
            entity['subLabel'] = oscard;
            entity['value'] = foxtra;
            tangon = function(argFoo) { // Original name: onValueChange
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot13;
                    entity = _closure1_slot10;
                    michal = argFoo;
                    if(michal) { _fun00004_ip = 25; continue _fun00003 }
 17:
                    michal = entity.NONE;
                    _fun00004_ip = 31; continue _fun00003;
 25:
                    michal = entity.STANDARD;
 31:
                    entity = undefined;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                }
            };
            entity['onValueChange'] = tangon;
            entity = zuuluu.bind(report)(michal, entity);
            _fun00002_ip = 743; continue _fun00001;
 241:
            tangon = _closure1_slot8;
            zuuluu = _closure1_slot7;
            michal = {};
            offset = _closure1_slot6;
            output = _closure1_slot0;
            result = _closure1_slot2;
            option = 6;
            oscard = result[option];
            oscard = output.bind(report)(oscard);
            verify = oscard.FormRow;
            oscard = {};
            backup = 8;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            sizing = yankee.intl;
            kiloes = sizing.string;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.t8QhiY;
            yankee = kiloes.bind(sizing)(yankee);
            oscard['label'] = yankee;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            sizing = yankee.intl;
            kiloes = sizing.string;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.najZCQ;
            yankee = kiloes.bind(sizing)(yankee);
            oscard['subLabel'] = yankee;
            verify = offset.bind(report)(verify, oscard);
            oscard = new Array(6);
            oscard[0] = verify;
            offset = _closure1_slot6;
            yankee = _closure1_slot14;
            verify = {};
            kiloes = _closure1_slot10;
            kiloes = kiloes.KRISP;
            verify['option'] = kiloes;
            kiloes = result[backup];
            kiloes = output.bind(report)(kiloes);
            echoed = kiloes.intl;
            sizing = echoed.string;
            kiloes = result[backup];
            kiloes = output.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.rdoNzs;
            kiloes = sizing.bind(echoed)(kiloes);
            verify['label'] = kiloes;
            verify['selected'] = romeon;
            verify = offset.bind(report)(yankee, verify);
            oscard[1] = verify;
            offset = _closure1_slot6;
            verify = {};
            kiloes = _closure1_slot10;
            kiloes = kiloes.STANDARD;
            verify['option'] = kiloes;
            kiloes = result[backup];
            kiloes = output.bind(report)(kiloes);
            echoed = kiloes.intl;
            sizing = echoed.string;
            kiloes = result[backup];
            kiloes = output.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.qXeYHx;
            kiloes = sizing.bind(echoed)(kiloes);
            verify['label'] = kiloes;
            verify['selected'] = foxtra;
            verify = offset.bind(report)(yankee, verify);
            oscard[2] = verify;
            offset = _closure1_slot6;
            verify = {};
            kiloes = _closure1_slot10;
            kiloes = kiloes.NONE;
            verify['option'] = kiloes;
            kiloes = result[backup];
            kiloes = output.bind(report)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = result[backup];
            backup = output.bind(report)(backup);
            backup = backup.t;
            backup = backup.wkYAl5;
            backup = kiloes.bind(sizing)(backup);
            verify['label'] = backup;
            romeon = !romeon;
            if(!romeon) { _fun00002_ip = 647; continue _fun00001 }
 644:
            romeon = !foxtra;
 647:
            verify['selected'] = romeon;
            verify = offset.bind(report)(yankee, verify);
            oscard[3] = verify;
            yankee = _closure1_slot6;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            option = offset[option];
            option = verify.bind(report)(option);
            verify = option.FormRow;
            option = {};
            option = yankee.bind(report)(verify, option);
            oscard[4] = option;
            verify = _closure1_slot6;
            option = _closure1_slot1;
            golfie = 9;
            golfie = offset[golfie];
            option = option.bind(report)(golfie);
            golfie = {};
            golfie = verify.bind(report)(option, golfie);
            oscard[5] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 743:
            return entity;
        }
    };
    var _closure1_slot15 = entity;
    entity = global;
    romeon = entity.Object;
    yankee = romeon.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = yankee.bind(romeon)(zuuluu, entity, michal);
    entity = 0;
    yankee = offset[entity];
    michal = argCor;
    entity = undefined;
    michal = michal.bind(entity)(yankee);
    michal = 1;
    michal = offset[michal];
    michal = option.bind(entity)(michal);
    var _closure1_slot3 = michal;
    michal = 2;
    michal = offset[michal];
    michal = verify.bind(entity)(michal);
    option = michal.AnalyticsPages;
    var _closure1_slot4 = option;
    michal = michal.AnalyticsSections;
    var _closure1_slot5 = michal;
    michal = 3;
    option = offset[michal];
    option = verify.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot6 = option;
    option = offset[michal];
    option = verify.bind(entity)(option);
    option = option.Fragment;
    var _closure1_slot7 = option;
    michal = offset[michal];
    michal = verify.bind(entity)(michal);
    michal = michal.jsxs;
    var _closure1_slot8 = michal;
    michal = 5;
    michal = offset[michal];
    yankee = verify.bind(entity)(michal);
    option = yankee.createStyles;
    michal = {};
    romeon = {};
    foxtra = 16;
    romeon['marginLeft'] = foxtra;
    michal['option'] = romeon;
    michal = option.bind(yankee)(michal);
    var _closure1_slot9 = michal;
    michal = {};
    option = 'NONE';
    michal['NONE'] = option;
    option = 'STANDARD';
    michal['STANDARD'] = option;
    option = 'KRISP';
    michal['KRISP'] = option;
    var _closure1_slot10 = michal;
    option = 10;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'modules/user_settings/native/voice/UserSettingsVoiceProcessing.tsx';
    option = verify.bind(offset)(option);
    golfie = function() { // Original name: UserSettingsVoiceProcessing
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            romeon = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 7;
            entity = verify[entity];
            tangon = undefined;
            report = romeon.bind(tangon)(entity);
            zuuluu = report.useStateFromStoresObject;
            entity = _closure1_slot3;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = {};
                tangon = _closure1_slot3;
                zuuluu = tangon.getEchoCancellation;
                zuuluu = zuuluu.bind(tangon)();
                entity['echoCancellation'] = zuuluu;
                tangon = _closure1_slot3;
                zuuluu = tangon.isAdvancedVoiceActivitySupported;
                zuuluu = zuuluu.bind(tangon)();
                entity['advancedVoiceActivitySupported'] = zuuluu;
                tangon = _closure1_slot3;
                zuuluu = tangon.getAutomaticGainControl;
                zuuluu = zuuluu.bind(tangon)();
                entity['automaticGainControl'] = zuuluu;
                tangon = _closure1_slot3;
                zuuluu = tangon.getMode;
                zuuluu = zuuluu.bind(tangon)();
                entity['inputMode'] = zuuluu;
                zuuluu = _closure1_slot3;
                michal = zuuluu.getModeOptions;
                michal = michal.bind(zuuluu)();
                michal = michal.vadUseKrisp;
                entity['vadUseKrisp'] = michal;
                return entity;
            };
            entity = zuuluu.bind(report)(michal, entity);
            result = entity.echoCancellation;
            oscard = entity.advancedVoiceActivitySupported;
            output = entity.automaticGainControl;
            michal = entity.inputMode;
            var _closure2_slot0 = michal;
            yankee = entity.vadUseKrisp;
            zuuluu = _closure1_slot8;
            golfie = 6;
            entity = verify[golfie];
            entity = romeon.bind(tangon)(entity);
            michal = entity.FormSection;
            entity = {};
            sizing = 8;
            report = verify[sizing];
            report = romeon.bind(tangon)(report);
            backup = report.intl;
            foxtra = backup.string;
            report = verify[sizing];
            report = romeon.bind(tangon)(report);
            report = report.t;
            report = report.6I6GUl;
            report = foxtra.bind(backup)(report);
            entity['title'] = report;
            backup = _closure1_slot6;
            report = verify[golfie];
            report = romeon.bind(tangon)(report);
            foxtra = report.FormDivider;
            report = {};
            foxtra = backup.bind(tangon)(foxtra, report);
            report = new Array(8);
            report[0] = foxtra;
            kiloes = _closure1_slot6;
            foxtra = verify[golfie];
            foxtra = romeon.bind(tangon)(foxtra);
            backup = foxtra.FormSwitchRow;
            foxtra = {};
            echoed = verify[sizing];
            echoed = romeon.bind(tangon)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = verify[sizing];
            echoed = romeon.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.iWTwu7;
            echoed = update.bind(source)(echoed);
            foxtra['label'] = echoed;
            foxtra['value'] = result;
            result = _closure1_slot12;
            foxtra['onValueChange'] = result;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            report[1] = foxtra;
            kiloes = _closure1_slot6;
            foxtra = verify[golfie];
            foxtra = romeon.bind(tangon)(foxtra);
            backup = foxtra.FormDivider;
            foxtra = {};
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            report[2] = foxtra;
            kiloes = _closure1_slot6;
            backup = _closure1_slot15;
            foxtra = {};
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            report[3] = foxtra;
            kiloes = _closure1_slot6;
            foxtra = verify[golfie];
            foxtra = romeon.bind(tangon)(foxtra);
            backup = foxtra.FormDivider;
            foxtra = {};
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            report[4] = foxtra;
            kiloes = _closure1_slot6;
            foxtra = verify[golfie];
            foxtra = romeon.bind(tangon)(foxtra);
            backup = foxtra.FormSwitchRow;
            foxtra = {};
            result = verify[sizing];
            result = romeon.bind(tangon)(result);
            update = result.intl;
            echoed = update.string;
            result = verify[sizing];
            result = romeon.bind(tangon)(result);
            result = result.t;
            result = result.cUMdHx;
            result = echoed.bind(update)(result);
            foxtra['label'] = result;
            result = verify[sizing];
            result = romeon.bind(tangon)(result);
            update = result.intl;
            echoed = update.string;
            result = verify[sizing];
            result = romeon.bind(tangon)(result);
            result = result.t;
            result = result.6EjbvL;
            result = echoed.bind(update)(result);
            foxtra['subLabel'] = result;
            foxtra['value'] = output;
            output = _closure1_slot11;
            foxtra['onValueChange'] = output;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            report[5] = foxtra;
            foxtra = _closure1_slot6;
            verify = verify[golfie];
            verify = romeon.bind(tangon)(verify);
            romeon = verify.FormDivider;
            verify = {};
            verify = foxtra.bind(tangon)(romeon, verify);
            report[6] = verify;
            if(!oscard) { _fun00006_ip = 702; continue _fun00005 }
 554:
            verify = _closure1_slot6;
            kiloes = _closure1_slot0;
            romeon = _closure1_slot2;
            golfie = romeon[golfie];
            golfie = kiloes.bind(tangon)(golfie);
            option = golfie.FormSwitchRow;
            golfie = {};
            foxtra = romeon[sizing];
            foxtra = kiloes.bind(tangon)(foxtra);
            output = foxtra.intl;
            backup = output.string;
            foxtra = romeon[sizing];
            foxtra = kiloes.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.BbESsr;
            foxtra = backup.bind(output)(foxtra);
            golfie['label'] = foxtra;
            foxtra = romeon[sizing];
            foxtra = kiloes.bind(tangon)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            romeon = romeon[sizing];
            romeon = kiloes.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.LoOB1N;
            romeon = foxtra.bind(backup)(romeon);
            golfie['subLabel'] = romeon;
            golfie['value'] = yankee;
            offset = function(argFoo) { // Original name: onValueChange
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 4;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setMode;
                michal = _closure2_slot0;
                entity = {};
                report = argFoo;
                entity['vadUseKrisp'] = report;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            golfie['onValueChange'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 702:
            report[7] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = golfie;
    zuuluu['handleAutomaticGainControlChange'] = oscard;
    zuuluu['handleEchoCancellationChange'] = report;
    zuuluu['handleNoiseSuppressionChange'] = tangon;
    zuuluu['NoiseSuppressionOpt'] = michal;
    return entity;
})();