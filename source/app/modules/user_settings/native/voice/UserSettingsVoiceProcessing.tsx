// app/modules/user_settings/native/voice/UserSettingsVoiceProcessing.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    verify = argBar;
    options = argBaz;
    zulu = argFred;
    offset = argPlugh;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = options;
    var _closure1_slot2 = offset;
    oscar = function(argFoo) { // Original name: handleAutomaticGainControlChange
        tango = _closure1_slot1;
        zulu = _closure1_slot2;
        entity = 4;
        zulu = zulu[entity];
        entity = undefined;
        report = tango.bind(entity)(zulu);
        tango = report.setAutomaticGainControl;
        zulu = {};
        oscar = _closure1_slot4;
        oscar = oscar.USER_SETTINGS;
        zulu['page'] = oscar;
        mike = _closure1_slot5;
        mike = mike.SETTINGS_VOICE_AND_VIDEO;
        zulu['section'] = mike;
        mike = argFoo;
        mike = tango.bind(report)(mike, zulu);
        return entity;
    };
    var _closure1_slot11 = oscar;
    report = function(argFoo) { // Original name: handleEchoCancellationChange
        tango = _closure1_slot1;
        zulu = _closure1_slot2;
        entity = 4;
        zulu = zulu[entity];
        entity = undefined;
        report = tango.bind(entity)(zulu);
        tango = report.setEchoCancellation;
        zulu = {};
        oscar = _closure1_slot4;
        oscar = oscar.USER_SETTINGS;
        zulu['page'] = oscar;
        mike = _closure1_slot5;
        mike = mike.SETTINGS_VOICE_AND_VIDEO;
        zulu['section'] = mike;
        mike = argFoo;
        mike = tango.bind(report)(mike, zulu);
        return entity;
    };
    var _closure1_slot12 = report;
    tango = function(argFoo) { // Original name: handleNoiseSuppressionChange
        oscar = argFoo;
        entity = _closure1_slot10;
        options = entity.KRISP;
        entity = _closure1_slot10;
        mike = entity.STANDARD;
        tango = _closure1_slot1;
        report = _closure1_slot2;
        zulu = 4;
        verify = report[zulu];
        entity = undefined;
        yankee = tango.bind(entity)(verify);
        offset = yankee.setNoiseCancellation;
        verify = {};
        romeo = _closure1_slot4;
        romeo = romeo.USER_SETTINGS;
        verify['page'] = romeo;
        romeo = _closure1_slot5;
        romeo = romeo.SETTINGS_VOICE_AND_VIDEO;
        verify['section'] = romeo;
        options = oscar === options;
        options = offset.bind(yankee)(options, verify);
        zulu = report[zulu];
        report = tango.bind(entity)(zulu);
        tango = report.setNoiseSuppression;
        zulu = {};
        options = _closure1_slot4;
        options = options.USER_SETTINGS;
        zulu['page'] = options;
        golf = _closure1_slot5;
        golf = golf.SETTINGS_VOICE_AND_VIDEO;
        zulu['section'] = golf;
        mike = oscar === mike;
        mike = tango.bind(report)(mike, zulu);
        return entity;
    };
    var _closure1_slot13 = tango;
    entity = function(argFoo) { // Original name: NoiseSuppressionOption
        entity = argFoo;
        mike = entity.option;
        var _closure2_slot0 = mike;
        yankee = entity.label;
        oscar = entity.selected;
        entity = _closure1_slot9;
        tango = undefined;
        romeo = entity.bind(tango)();
        zulu = _closure1_slot6;
        golf = _closure1_slot0;
        verify = _closure1_slot2;
        report = 6;
        entity = verify[report];
        entity = golf.bind(tango)(entity);
        mike = entity.FormRow;
        entity = {};
        romeo = romeo.option;
        entity['style'] = romeo;
        entity['label'] = yankee;
        offset = function() { // Original name: onPress
            zulu = _closure1_slot13;
            mike = _closure2_slot0;
            entity = undefined;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        entity['onPress'] = offset;
        options = _closure1_slot6;
        report = verify[report];
        report = golf.bind(tango)(report);
        report = report.FormRow;
        golf = report.Checkmark;
        report = {};
        report['selected'] = oscar;
        report = options.bind(tango)(golf, report);
        entity['trailing'] = report;
        report = 'radio';
        entity['accessibilityRole'] = report;
        report = {};
        report['selected'] = oscar;
        entity['accessibilityState'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function() { // Original name: VoiceProcessingOptions
        _fun97102: for(var _fun97102_ip = 0; ; ) switch(_fun97102_ip) {
 0:
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 7;
            entity = zulu[entity];
            report = undefined;
            oscar = mike.bind(report)(entity);
            zulu = oscar.useStateFromStoresObject;
            entity = _closure1_slot3;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = {};
                tango = _closure1_slot3;
                zulu = tango.getNoiseSuppression;
                zulu = zulu.bind(tango)();
                entity['noiseSuppression'] = zulu;
                tango = _closure1_slot3;
                zulu = tango.getNoiseCancellation;
                zulu = zulu.bind(tango)();
                entity['noiseCancellation'] = zulu;
                zulu = _closure1_slot3;
                mike = zulu.isNoiseCancellationSupported;
                mike = mike.bind(zulu)();
                entity['noiseCancellationSupported'] = mike;
                return entity;
            };
            mike = zulu.bind(oscar)(mike, entity);
            entity = mike.noiseCancellationSupported;
            romeo = mike.noiseCancellation;
            foxtrot = mike.noiseSuppression;
            if(entity) { _fun97102_ip = 241; continue _fun97102 }
 82:
            zulu = _closure1_slot6;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            entity = 6;
            entity = yankee[entity];
            entity = offset.bind(report)(entity);
            mike = entity.FormSwitchRow;
            entity = {};
            oscar = 8;
            options = yankee[oscar];
            options = offset.bind(report)(options);
            backup = options.intl;
            verify = backup.string;
            options = yankee[oscar];
            options = offset.bind(report)(options);
            options = options.t;
            options = options.t8QhiY;
            options = verify.bind(backup)(options);
            entity['label'] = options;
            options = yankee[oscar];
            options = offset.bind(report)(options);
            verify = options.intl;
            options = verify.string;
            oscar = yankee[oscar];
            oscar = offset.bind(report)(oscar);
            oscar = oscar.t;
            oscar = oscar.najZCQ;
            oscar = options.bind(verify)(oscar);
            entity['subLabel'] = oscar;
            entity['value'] = foxtrot;
            tango = function(argFoo) { // Original name: onValueChange
                _fun97104: for(var _fun97104_ip = 0; ; ) switch(_fun97104_ip) {
 0:
                    zulu = _closure1_slot13;
                    entity = _closure1_slot10;
                    mike = argFoo;
                    if(mike) { _fun97104_ip = 25; continue _fun97104 }
 17:
                    mike = entity.NONE;
                    _fun97104_ip = 31; continue _fun97104;
 25:
                    mike = entity.STANDARD;
 31:
                    entity = undefined;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                }
            };
            entity['onValueChange'] = tango;
            entity = zulu.bind(report)(mike, entity);
            _fun97102_ip = 743; continue _fun97102;
 241:
            tango = _closure1_slot8;
            zulu = _closure1_slot7;
            mike = {};
            offset = _closure1_slot6;
            output = _closure1_slot0;
            result = _closure1_slot2;
            options = 6;
            oscar = result[options];
            oscar = output.bind(report)(oscar);
            verify = oscar.FormRow;
            oscar = {};
            backup = 8;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            sizing = yankee.intl;
            kilo = sizing.string;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.t8QhiY;
            yankee = kilo.bind(sizing)(yankee);
            oscar['label'] = yankee;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            sizing = yankee.intl;
            kilo = sizing.string;
            yankee = result[backup];
            yankee = output.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.najZCQ;
            yankee = kilo.bind(sizing)(yankee);
            oscar['subLabel'] = yankee;
            verify = offset.bind(report)(verify, oscar);
            oscar = new Array(6);
            oscar[0] = verify;
            offset = _closure1_slot6;
            yankee = _closure1_slot14;
            verify = {};
            kilo = _closure1_slot10;
            kilo = kilo.KRISP;
            verify['option'] = kilo;
            kilo = result[backup];
            kilo = output.bind(report)(kilo);
            echo = kilo.intl;
            sizing = echo.string;
            kilo = result[backup];
            kilo = output.bind(report)(kilo);
            kilo = kilo.t;
            kilo = kilo.rdoNzs;
            kilo = sizing.bind(echo)(kilo);
            verify['label'] = kilo;
            verify['selected'] = romeo;
            verify = offset.bind(report)(yankee, verify);
            oscar[1] = verify;
            offset = _closure1_slot6;
            verify = {};
            kilo = _closure1_slot10;
            kilo = kilo.STANDARD;
            verify['option'] = kilo;
            kilo = result[backup];
            kilo = output.bind(report)(kilo);
            echo = kilo.intl;
            sizing = echo.string;
            kilo = result[backup];
            kilo = output.bind(report)(kilo);
            kilo = kilo.t;
            kilo = kilo.qXeYHx;
            kilo = sizing.bind(echo)(kilo);
            verify['label'] = kilo;
            verify['selected'] = foxtrot;
            verify = offset.bind(report)(yankee, verify);
            oscar[2] = verify;
            offset = _closure1_slot6;
            verify = {};
            kilo = _closure1_slot10;
            kilo = kilo.NONE;
            verify['option'] = kilo;
            kilo = result[backup];
            kilo = output.bind(report)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = result[backup];
            backup = output.bind(report)(backup);
            backup = backup.t;
            backup = backup.wkYAl5;
            backup = kilo.bind(sizing)(backup);
            verify['label'] = backup;
            romeo = !romeo;
            if(!romeo) { _fun97102_ip = 647; continue _fun97102 }
 644:
            romeo = !foxtrot;
 647:
            verify['selected'] = romeo;
            verify = offset.bind(report)(yankee, verify);
            oscar[3] = verify;
            yankee = _closure1_slot6;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            options = offset[options];
            options = verify.bind(report)(options);
            verify = options.FormRow;
            options = {};
            options = yankee.bind(report)(verify, options);
            oscar[4] = options;
            verify = _closure1_slot6;
            options = _closure1_slot1;
            golf = 9;
            golf = offset[golf];
            options = options.bind(report)(golf);
            golf = {};
            golf = verify.bind(report)(options, golf);
            oscar[5] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 743:
            return entity;
        }
    };
    var _closure1_slot15 = entity;
    entity = global;
    romeo = entity.Object;
    yankee = romeo.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = yankee.bind(romeo)(zulu, entity, mike);
    entity = 0;
    yankee = offset[entity];
    mike = argCorge;
    entity = undefined;
    mike = mike.bind(entity)(yankee);
    mike = 1;
    mike = offset[mike];
    mike = options.bind(entity)(mike);
    var _closure1_slot3 = mike;
    mike = 2;
    mike = offset[mike];
    mike = verify.bind(entity)(mike);
    options = mike.AnalyticsPages;
    var _closure1_slot4 = options;
    mike = mike.AnalyticsSections;
    var _closure1_slot5 = mike;
    mike = 3;
    options = offset[mike];
    options = verify.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot6 = options;
    options = offset[mike];
    options = verify.bind(entity)(options);
    options = options.Fragment;
    var _closure1_slot7 = options;
    mike = offset[mike];
    mike = verify.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot8 = mike;
    mike = 5;
    mike = offset[mike];
    yankee = verify.bind(entity)(mike);
    options = yankee.createStyles;
    mike = {};
    romeo = {};
    foxtrot = 16;
    romeo['marginLeft'] = foxtrot;
    mike['option'] = romeo;
    mike = options.bind(yankee)(mike);
    var _closure1_slot9 = mike;
    mike = {};
    options = 'NONE';
    mike['NONE'] = options;
    options = 'STANDARD';
    mike['STANDARD'] = options;
    options = 'KRISP';
    mike['KRISP'] = options;
    var _closure1_slot10 = mike;
    options = 10;
    options = offset[options];
    offset = verify.bind(entity)(options);
    verify = offset.fileFinishedImporting;
    options = 'modules/user_settings/native/voice/UserSettingsVoiceProcessing.tsx';
    options = verify.bind(offset)(options);
    golf = function() { // Original name: UserSettingsVoiceProcessing
        _fun97105: for(var _fun97105_ip = 0; ; ) switch(_fun97105_ip) {
 0:
            romeo = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 7;
            entity = verify[entity];
            tango = undefined;
            report = romeo.bind(tango)(entity);
            zulu = report.useStateFromStoresObject;
            entity = _closure1_slot3;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = {};
                tango = _closure1_slot3;
                zulu = tango.getEchoCancellation;
                zulu = zulu.bind(tango)();
                entity['echoCancellation'] = zulu;
                tango = _closure1_slot3;
                zulu = tango.isAdvancedVoiceActivitySupported;
                zulu = zulu.bind(tango)();
                entity['advancedVoiceActivitySupported'] = zulu;
                tango = _closure1_slot3;
                zulu = tango.getAutomaticGainControl;
                zulu = zulu.bind(tango)();
                entity['automaticGainControl'] = zulu;
                tango = _closure1_slot3;
                zulu = tango.getMode;
                zulu = zulu.bind(tango)();
                entity['inputMode'] = zulu;
                zulu = _closure1_slot3;
                mike = zulu.getModeOptions;
                mike = mike.bind(zulu)();
                mike = mike.vadUseKrisp;
                entity['vadUseKrisp'] = mike;
                return entity;
            };
            entity = zulu.bind(report)(mike, entity);
            result = entity.echoCancellation;
            oscar = entity.advancedVoiceActivitySupported;
            output = entity.automaticGainControl;
            mike = entity.inputMode;
            var _closure2_slot0 = mike;
            yankee = entity.vadUseKrisp;
            zulu = _closure1_slot8;
            golf = 6;
            entity = verify[golf];
            entity = romeo.bind(tango)(entity);
            mike = entity.FormSection;
            entity = {};
            sizing = 8;
            report = verify[sizing];
            report = romeo.bind(tango)(report);
            backup = report.intl;
            foxtrot = backup.string;
            report = verify[sizing];
            report = romeo.bind(tango)(report);
            report = report.t;
            report = report.6I6GUl;
            report = foxtrot.bind(backup)(report);
            entity['title'] = report;
            backup = _closure1_slot6;
            report = verify[golf];
            report = romeo.bind(tango)(report);
            foxtrot = report.FormDivider;
            report = {};
            foxtrot = backup.bind(tango)(foxtrot, report);
            report = new Array(8);
            report[0] = foxtrot;
            kilo = _closure1_slot6;
            foxtrot = verify[golf];
            foxtrot = romeo.bind(tango)(foxtrot);
            backup = foxtrot.FormSwitchRow;
            foxtrot = {};
            echo = verify[sizing];
            echo = romeo.bind(tango)(echo);
            source = echo.intl;
            update = source.string;
            echo = verify[sizing];
            echo = romeo.bind(tango)(echo);
            echo = echo.t;
            echo = echo.iWTwu7;
            echo = update.bind(source)(echo);
            foxtrot['label'] = echo;
            foxtrot['value'] = result;
            result = _closure1_slot12;
            foxtrot['onValueChange'] = result;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            report[1] = foxtrot;
            kilo = _closure1_slot6;
            foxtrot = verify[golf];
            foxtrot = romeo.bind(tango)(foxtrot);
            backup = foxtrot.FormDivider;
            foxtrot = {};
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            report[2] = foxtrot;
            kilo = _closure1_slot6;
            backup = _closure1_slot15;
            foxtrot = {};
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            report[3] = foxtrot;
            kilo = _closure1_slot6;
            foxtrot = verify[golf];
            foxtrot = romeo.bind(tango)(foxtrot);
            backup = foxtrot.FormDivider;
            foxtrot = {};
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            report[4] = foxtrot;
            kilo = _closure1_slot6;
            foxtrot = verify[golf];
            foxtrot = romeo.bind(tango)(foxtrot);
            backup = foxtrot.FormSwitchRow;
            foxtrot = {};
            result = verify[sizing];
            result = romeo.bind(tango)(result);
            update = result.intl;
            echo = update.string;
            result = verify[sizing];
            result = romeo.bind(tango)(result);
            result = result.t;
            result = result.cUMdHx;
            result = echo.bind(update)(result);
            foxtrot['label'] = result;
            result = verify[sizing];
            result = romeo.bind(tango)(result);
            update = result.intl;
            echo = update.string;
            result = verify[sizing];
            result = romeo.bind(tango)(result);
            result = result.t;
            result = result.6EjbvL;
            result = echo.bind(update)(result);
            foxtrot['subLabel'] = result;
            foxtrot['value'] = output;
            output = _closure1_slot11;
            foxtrot['onValueChange'] = output;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            report[5] = foxtrot;
            foxtrot = _closure1_slot6;
            verify = verify[golf];
            verify = romeo.bind(tango)(verify);
            romeo = verify.FormDivider;
            verify = {};
            verify = foxtrot.bind(tango)(romeo, verify);
            report[6] = verify;
            if(!oscar) { _fun97105_ip = 702; continue _fun97105 }
 554:
            verify = _closure1_slot6;
            kilo = _closure1_slot0;
            romeo = _closure1_slot2;
            golf = romeo[golf];
            golf = kilo.bind(tango)(golf);
            options = golf.FormSwitchRow;
            golf = {};
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            output = foxtrot.intl;
            backup = output.string;
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.BbESsr;
            foxtrot = backup.bind(output)(foxtrot);
            golf['label'] = foxtrot;
            foxtrot = romeo[sizing];
            foxtrot = kilo.bind(tango)(foxtrot);
            backup = foxtrot.intl;
            foxtrot = backup.string;
            romeo = romeo[sizing];
            romeo = kilo.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.LoOB1N;
            romeo = foxtrot.bind(backup)(romeo);
            golf['subLabel'] = romeo;
            golf['value'] = yankee;
            offset = function(argFoo) { // Original name: onValueChange
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 4;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setMode;
                mike = _closure2_slot0;
                entity = {};
                report = argFoo;
                entity['vadUseKrisp'] = report;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            golf['onValueChange'] = offset;
            oscar = verify.bind(tango)(options, golf);
 702:
            report[7] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = golf;
    zulu['handleAutomaticGainControlChange'] = oscar;
    zulu['handleEchoCancellationChange'] = report;
    zulu['handleNoiseSuppressionChange'] = tango;
    zulu['NoiseSuppressionOpt'] = mike;
    return entity;
})();