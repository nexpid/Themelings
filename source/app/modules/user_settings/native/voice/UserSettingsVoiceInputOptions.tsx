// app/modules/user_settings/native/voice/UserSettingsVoiceInputOptions.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    options = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = options;
    var _closure1_slot2 = golf;
    mike = function() { // Original name: handleInputModePress
        yankee = _closure1_slot0;
        romeo = _closure1_slot2;
        entity = 7;
        mike = romeo[entity];
        entity = undefined;
        tango = yankee.bind(entity)(mike);
        zulu = tango.showSimpleActionSheet;
        mike = {};
        report = 'InputMode';
        mike['key'] = report;
        report = {};
        options = 8;
        oscar = romeo[options];
        oscar = yankee.bind(entity)(oscar);
        offset = oscar.intl;
        verify = offset.string;
        oscar = romeo[options];
        oscar = yankee.bind(entity)(oscar);
        oscar = oscar.t;
        oscar = oscar.pS+K2N;
        oscar = verify.bind(offset)(oscar);
        report['title'] = oscar;
        mike['header'] = report;
        oscar = {};
        report = romeo[options];
        report = yankee.bind(entity)(report);
        offset = report.intl;
        verify = offset.string;
        report = romeo[options];
        report = yankee.bind(entity)(report);
        report = report.t;
        report = report.Q8gkVF;
        report = verify.bind(offset)(report);
        oscar['label'] = report;
        report = function() { // Original name: onPress
            tango = _closure1_slot1;
            zulu = _closure1_slot2;
            entity = 9;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.setMode;
            mike = _closure1_slot5;
            mike = mike.PUSH_TO_TALK;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        oscar['onPress'] = report;
        report = new Array(2);
        report[0] = oscar;
        oscar = {};
        verify = romeo[options];
        verify = yankee.bind(entity)(verify);
        offset = verify.intl;
        verify = offset.string;
        options = romeo[options];
        options = yankee.bind(entity)(options);
        options = options.t;
        options = options.cHCEOD;
        options = verify.bind(offset)(options);
        oscar['label'] = options;
        golf = function() { // Original name: onPress
            tango = _closure1_slot1;
            zulu = _closure1_slot2;
            entity = 9;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.setMode;
            mike = _closure1_slot5;
            mike = mike.VOICE_ACTIVITY;
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        oscar['onPress'] = golf;
        report[1] = oscar;
        mike['options'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    var _closure1_slot11 = mike;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zulu, entity, report);
    entity = 0;
    verify = golf[entity];
    report = argCorge;
    entity = undefined;
    report = report.bind(entity)(verify);
    report = 1;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.View;
    var _closure1_slot3 = report;
    report = 2;
    report = golf[report];
    report = options.bind(entity)(report);
    var _closure1_slot4 = report;
    report = 3;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.InputModes;
    var _closure1_slot5 = report;
    yankee = 4;
    report = golf[yankee];
    report = oscar.bind(entity)(report);
    report = report.TitleStyleType;
    var _closure1_slot6 = report;
    report = 5;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot7 = options;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.Fragment;
    var _closure1_slot8 = options;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.jsxs;
    var _closure1_slot9 = report;
    report = 6;
    report = golf[report];
    verify = oscar.bind(entity)(report);
    options = verify.createStyles;
    report = {};
    offset = {};
    romeo = 'right';
    offset['textAlign'] = romeo;
    report['value'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    report['slider'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot10 = report;
    report = 14;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/user_settings/native/voice/UserSettingsVoiceInputOptions.tsx';
    report = oscar.bind(golf)(report);
    tango = function() { // Original name: UserSettingsVoiceInputOptions
        _fun97021: for(var _fun97021_ip = 0; ; ) switch(_fun97021_ip) {
 0:
            entity = _closure1_slot10;
            tango = undefined;
            output = entity.bind(tango)();
            offset = _closure1_slot0;
            romeo = _closure1_slot2;
            entity = 10;
            entity = romeo[entity];
            report = offset.bind(tango)(entity);
            zulu = report.useStateFromStoresObject;
            entity = _closure1_slot4;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = {};
                zulu = _closure1_slot4;
                mike = zulu.getMode;
                mike = mike.bind(zulu)();
                entity['inputMode'] = mike;
                mike = zulu.getModeOptions;
                mike = mike.bind(zulu)();
                mike = mike.threshold;
                entity['vadThreshold'] = mike;
                mike = zulu.getModeOptions;
                mike = mike.bind(zulu)();
                mike = mike.autoThreshold;
                entity['vadAutoThreshold'] = mike;
                return entity;
            };
            entity = zulu.bind(report)(mike, entity);
            options = entity.inputMode;
            var _closure2_slot0 = options;
            echo = entity.vadThreshold;
            update = entity.vadAutoThreshold;
            zulu = _closure1_slot9;
            yankee = 11;
            entity = romeo[yankee];
            entity = offset.bind(tango)(entity);
            mike = entity.FormSection;
            entity = {};
            report = _closure1_slot6;
            report = report.ANDROID_NO_BORDER;
            entity['titleStyleType'] = report;
            backup = 8;
            report = romeo[backup];
            report = offset.bind(tango)(report);
            golf = report.intl;
            oscar = golf.string;
            report = romeo[backup];
            report = offset.bind(tango)(report);
            report = report.t;
            report = report.LKCupK;
            report = oscar.bind(golf)(report);
            entity['title'] = report;
            golf = _closure1_slot7;
            report = romeo[yankee];
            report = offset.bind(tango)(report);
            oscar = report.FormRow;
            report = {};
            verify = romeo[backup];
            verify = offset.bind(tango)(verify);
            kilo = verify.intl;
            foxtrot = kilo.string;
            verify = romeo[backup];
            verify = offset.bind(tango)(verify);
            verify = verify.t;
            verify = verify.pS+K2N;
            verify = foxtrot.bind(kilo)(verify);
            report['label'] = verify;
            verify = 12;
            verify = romeo[verify];
            verify = offset.bind(tango)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-md/medium', 'color': 'text-muted'};
            romeo = output.value;
            verify['style'] = romeo;
            romeo = _closure1_slot5;
            romeo = romeo.PUSH_TO_TALK;
            if(!(options !== romeo)) { _fun97021_ip = 357; continue _fun97021 }
 303:
            source = _closure1_slot0;
            romeo = _closure1_slot2;
            foxtrot = romeo[backup];
            foxtrot = source.bind(tango)(foxtrot);
            kilo = foxtrot.intl;
            foxtrot = kilo.string;
            romeo = romeo[backup];
            romeo = source.bind(tango)(romeo);
            romeo = romeo.t;
            romeo = romeo.cHCEOD;
            romeo = foxtrot.bind(kilo)(romeo);
            _fun97021_ip = 409; continue _fun97021;
 357:
            control = _closure1_slot0;
            foxtrot = _closure1_slot2;
            kilo = foxtrot[backup];
            kilo = control.bind(tango)(kilo);
            source = kilo.intl;
            kilo = source.string;
            foxtrot = foxtrot[backup];
            foxtrot = control.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.Q8gkVF;
            romeo = kilo.bind(source)(foxtrot);
 409:
            verify['children'] = romeo;
            verify = golf.bind(tango)(offset, verify);
            report['trailing'] = verify;
            verify = _closure1_slot11;
            report['onPress'] = verify;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = _closure1_slot5;
            golf = oscar.PUSH_TO_TALK;
            oscar = null;
            if(!(options !== golf)) { _fun97021_ip = 798; continue _fun97021 }
 465:
            verify = _closure1_slot9;
            options = _closure1_slot8;
            golf = {};
            foxtrot = _closure1_slot7;
            vacuum = _closure1_slot0;
            source = _closure1_slot2;
            offset = source[yankee];
            offset = vacuum.bind(tango)(offset);
            romeo = offset.FormDivider;
            offset = {};
            romeo = foxtrot.bind(tango)(romeo, offset);
            offset = new Array(4);
            offset[0] = romeo;
            romeo = source[yankee];
            romeo = vacuum.bind(tango)(romeo);
            kilo = romeo.FormSwitchRow;
            romeo = {};
            control = source[backup];
            control = vacuum.bind(tango)(control);
            config = control.intl;
            sequence = config.string;
            control = source[backup];
            control = vacuum.bind(tango)(control);
            control = control.t;
            control = control.Z4oaNz;
            control = sequence.bind(config)(control);
            romeo['label'] = control;
            romeo['value'] = update;
            control = function(argFoo) { // Original name: onValueChange
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 9;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setMode;
                mike = _closure2_slot0;
                entity = {};
                report = argFoo;
                entity['autoThreshold'] = report;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            romeo['onValueChange'] = control;
            romeo = foxtrot.bind(tango)(kilo, romeo);
            offset[1] = romeo;
            romeo = source[yankee];
            romeo = vacuum.bind(tango)(romeo);
            kilo = romeo.FormDivider;
            romeo = {};
            romeo = foxtrot.bind(tango)(kilo, romeo);
            offset[2] = romeo;
            yankee = source[yankee];
            yankee = vacuum.bind(tango)(yankee);
            romeo = yankee.FormRow;
            yankee = {};
            kilo = source[backup];
            kilo = vacuum.bind(tango)(kilo);
            control = kilo.intl;
            kilo = control.string;
            backup = source[backup];
            backup = vacuum.bind(tango)(backup);
            backup = backup.t;
            backup = backup.o+2oMD;
            backup = kilo.bind(control)(backup);
            yankee['label'] = backup;
            kilo = _closure1_slot3;
            backup = {};
            output = output.slider;
            backup['style'] = output;
            output = _closure1_slot1;
            sizing = 13;
            sizing = source[sizing];
            output = output.bind(tango)(sizing);
            sizing = {};
            sizing['auto'] = update;
            sizing['threshold'] = echo;
            result = function(argFoo) { // Original name: onThresholdChange
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 9;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.setMode;
                mike = _closure2_slot0;
                entity = {};
                report = argFoo;
                entity['threshold'] = report;
                entity = zulu.bind(tango)(mike, entity);
                return entity;
            };
            sizing['onThresholdChange'] = result;
            sizing = foxtrot.bind(tango)(output, sizing);
            backup['children'] = sizing;
            backup = foxtrot.bind(tango)(kilo, backup);
            yankee['subLabel'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[3] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 798:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['handleInputModePress'] = mike;
    return entity;
})();