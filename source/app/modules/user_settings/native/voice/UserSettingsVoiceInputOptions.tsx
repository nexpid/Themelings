// app/modules/user_settings/native/voice/UserSettingsVoiceInputOptions.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    option = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = option;
    var _closure1_slot2 = golfie;
    michal = function() { // Original name: handleInputModePress
        yankee = _closure1_slot0;
        romeon = _closure1_slot2;
        entity = 7;
        michal = romeon[entity];
        entity = undefined;
        tangon = yankee.bind(entity)(michal);
        zuuluu = tangon.showSimpleActionSheet;
        michal = {};
        report = 'InputMode';
        michal['key'] = report;
        report = {};
        option = 8;
        oscard = romeon[option];
        oscard = yankee.bind(entity)(oscard);
        offset = oscard.intl;
        verify = offset.string;
        oscard = romeon[option];
        oscard = yankee.bind(entity)(oscard);
        oscard = oscard.t;
        oscard = oscard.pS+K2N;
        oscard = verify.bind(offset)(oscard);
        report['title'] = oscard;
        michal['header'] = report;
        oscard = {};
        report = romeon[option];
        report = yankee.bind(entity)(report);
        offset = report.intl;
        verify = offset.string;
        report = romeon[option];
        report = yankee.bind(entity)(report);
        report = report.t;
        report = report.Q8gkVF;
        report = verify.bind(offset)(report);
        oscard['label'] = report;
        report = function() { // Original name: onPress
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 9;
            zuuluu = zuuluu[entity];
            entity = undefined;
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = tangon.setMode;
            michal = _closure1_slot5;
            michal = michal.PUSH_TO_TALK;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        oscard['onPress'] = report;
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        verify = romeon[option];
        verify = yankee.bind(entity)(verify);
        offset = verify.intl;
        verify = offset.string;
        option = romeon[option];
        option = yankee.bind(entity)(option);
        option = option.t;
        option = option.cHCEOD;
        option = verify.bind(offset)(option);
        oscard['label'] = option;
        golfie = function() { // Original name: onPress
            tangon = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 9;
            zuuluu = zuuluu[entity];
            entity = undefined;
            tangon = tangon.bind(entity)(zuuluu);
            zuuluu = tangon.setMode;
            michal = _closure1_slot5;
            michal = michal.VOICE_ACTIVITY;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        oscard['onPress'] = golfie;
        report[1] = oscard;
        michal['options'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    var _closure1_slot11 = michal;
    entity = global;
    offset = entity.Object;
    verify = offset.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = verify.bind(offset)(zuuluu, entity, report);
    entity = 0;
    verify = golfie[entity];
    report = argCor;
    entity = undefined;
    report = report.bind(entity)(verify);
    report = 1;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.View;
    var _closure1_slot3 = report;
    report = 2;
    report = golfie[report];
    report = option.bind(entity)(report);
    var _closure1_slot4 = report;
    report = 3;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.InputModes;
    var _closure1_slot5 = report;
    yankee = 4;
    report = golfie[yankee];
    report = oscard.bind(entity)(report);
    report = report.TitleStyleType;
    var _closure1_slot6 = report;
    report = 5;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    option = report.jsx;
    var _closure1_slot7 = option;
    option = report.Fragment;
    var _closure1_slot8 = option;
    report = report.jsxs;
    var _closure1_slot9 = report;
    report = 6;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    offset = {};
    romeon = 'right';
    offset['textAlign'] = romeon;
    report['value'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    report['slider'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot10 = report;
    report = 14;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/user_settings/native/voice/UserSettingsVoiceInputOptions.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function() { // Original name: UserSettingsVoiceInputOptions
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot10;
            tangon = undefined;
            output = entity.bind(tangon)();
            offset = _closure1_slot0;
            romeon = _closure1_slot2;
            entity = 10;
            entity = romeon[entity];
            report = offset.bind(tangon)(entity);
            zuuluu = report.useStateFromStoresObject;
            entity = _closure1_slot4;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = {};
                zuuluu = _closure1_slot4;
                michal = zuuluu.getMode;
                michal = michal.bind(zuuluu)();
                entity['inputMode'] = michal;
                michal = zuuluu.getModeOptions;
                michal = michal.bind(zuuluu)();
                michal = michal.threshold;
                entity['vadThreshold'] = michal;
                michal = zuuluu.getModeOptions;
                michal = michal.bind(zuuluu)();
                michal = michal.autoThreshold;
                entity['vadAutoThreshold'] = michal;
                return entity;
            };
            entity = zuuluu.bind(report)(michal, entity);
            option = entity.inputMode;
            var _closure2_slot0 = option;
            echoed = entity.vadThreshold;
            update = entity.vadAutoThreshold;
            zuuluu = _closure1_slot9;
            yankee = 11;
            entity = romeon[yankee];
            entity = offset.bind(tangon)(entity);
            michal = entity.FormSection;
            entity = {};
            report = _closure1_slot6;
            report = report.ANDROID_NO_BORDER;
            entity['titleStyleType'] = report;
            backup = 8;
            report = romeon[backup];
            report = offset.bind(tangon)(report);
            golfie = report.intl;
            oscard = golfie.string;
            report = romeon[backup];
            report = offset.bind(tangon)(report);
            report = report.t;
            report = report.LKCupK;
            report = oscard.bind(golfie)(report);
            entity['title'] = report;
            golfie = _closure1_slot7;
            report = romeon[yankee];
            report = offset.bind(tangon)(report);
            oscard = report.FormRow;
            report = {};
            verify = romeon[backup];
            verify = offset.bind(tangon)(verify);
            kiloes = verify.intl;
            foxtra = kiloes.string;
            verify = romeon[backup];
            verify = offset.bind(tangon)(verify);
            verify = verify.t;
            verify = verify.pS+K2N;
            verify = foxtra.bind(kiloes)(verify);
            report['label'] = verify;
            verify = 12;
            verify = romeon[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-md/medium', 'color': 'text-muted'};
            romeon = output.value;
            verify['style'] = romeon;
            romeon = _closure1_slot5;
            romeon = romeon.PUSH_TO_TALK;
            if(!(option !== romeon)) { _fun00002_ip = 357; continue _fun00001 }
 303:
            source = _closure1_slot0;
            romeon = _closure1_slot2;
            foxtra = romeon[backup];
            foxtra = source.bind(tangon)(foxtra);
            kiloes = foxtra.intl;
            foxtra = kiloes.string;
            romeon = romeon[backup];
            romeon = source.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.cHCEOD;
            romeon = foxtra.bind(kiloes)(romeon);
            _fun00002_ip = 409; continue _fun00001;
 357:
            ctrled = _closure1_slot0;
            foxtra = _closure1_slot2;
            kiloes = foxtra[backup];
            kiloes = ctrled.bind(tangon)(kiloes);
            source = kiloes.intl;
            kiloes = source.string;
            foxtra = foxtra[backup];
            foxtra = ctrled.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.Q8gkVF;
            romeon = kiloes.bind(source)(foxtra);
 409:
            verify['children'] = romeon;
            verify = golfie.bind(tangon)(offset, verify);
            report['trailing'] = verify;
            verify = _closure1_slot11;
            report['onPress'] = verify;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = _closure1_slot5;
            golfie = oscard.PUSH_TO_TALK;
            oscard = null;
            if(!(option !== golfie)) { _fun00002_ip = 798; continue _fun00001 }
 465:
            verify = _closure1_slot9;
            option = _closure1_slot8;
            golfie = {};
            foxtra = _closure1_slot7;
            vacuum = _closure1_slot0;
            source = _closure1_slot2;
            offset = source[yankee];
            offset = vacuum.bind(tangon)(offset);
            romeon = offset.FormDivider;
            offset = {};
            romeon = foxtra.bind(tangon)(romeon, offset);
            offset = new Array(4);
            offset[0] = romeon;
            romeon = source[yankee];
            romeon = vacuum.bind(tangon)(romeon);
            kiloes = romeon.FormSwitchRow;
            romeon = {};
            ctrled = source[backup];
            ctrled = vacuum.bind(tangon)(ctrled);
            config = ctrled.intl;
            sequen = config.string;
            ctrled = source[backup];
            ctrled = vacuum.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.Z4oaNz;
            ctrled = sequen.bind(config)(ctrled);
            romeon['label'] = ctrled;
            romeon['value'] = update;
            ctrled = function(argFoo) { // Original name: onValueChange
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 9;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setMode;
                michal = _closure2_slot0;
                entity = {};
                report = argFoo;
                entity['autoThreshold'] = report;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            romeon['onValueChange'] = ctrled;
            romeon = foxtra.bind(tangon)(kiloes, romeon);
            offset[1] = romeon;
            romeon = source[yankee];
            romeon = vacuum.bind(tangon)(romeon);
            kiloes = romeon.FormDivider;
            romeon = {};
            romeon = foxtra.bind(tangon)(kiloes, romeon);
            offset[2] = romeon;
            yankee = source[yankee];
            yankee = vacuum.bind(tangon)(yankee);
            romeon = yankee.FormRow;
            yankee = {};
            kiloes = source[backup];
            kiloes = vacuum.bind(tangon)(kiloes);
            ctrled = kiloes.intl;
            kiloes = ctrled.string;
            backup = source[backup];
            backup = vacuum.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.o+2oMD;
            backup = kiloes.bind(ctrled)(backup);
            yankee['label'] = backup;
            kiloes = _closure1_slot3;
            backup = {};
            output = output.slider;
            backup['style'] = output;
            output = _closure1_slot1;
            sizing = 13;
            sizing = source[sizing];
            output = output.bind(tangon)(sizing);
            sizing = {};
            sizing['auto'] = update;
            sizing['threshold'] = echoed;
            result = function(argFoo) { // Original name: onThresholdChange
                zuuluu = _closure1_slot1;
                michal = _closure1_slot2;
                entity = 9;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.setMode;
                michal = _closure2_slot0;
                entity = {};
                report = argFoo;
                entity['threshold'] = report;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            sizing['onThresholdChange'] = result;
            sizing = foxtra.bind(tangon)(output, sizing);
            backup['children'] = sizing;
            backup = foxtra.bind(tangon)(kiloes, backup);
            yankee['subLabel'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[3] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 798:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['handleInputModePress'] = michal;
    return entity;
})();