// app/modules/user_settings/native/design_system/UserSettingsDesignSystemTableRow.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: MyTableRow
        tangon = _closure1_slot12;
        oscard = _closure1_slot0;
        offset = _closure1_slot2;
        report = 7;
        entity = offset[report];
        zuuluu = undefined;
        entity = oscard.bind(zuuluu)(entity);
        michal = entity.TableRow;
        entity = {};
        golfie = 'Notifications';
        entity['label'] = golfie;
        golfie = _closure1_slot10;
        entity['onPress'] = golfie;
        golfie = _closure1_slot12;
        report = offset[report];
        report = oscard.bind(zuuluu)(report);
        report = report.TableRow;
        oscard = report.Icon;
        report = {};
        verify = _closure1_slot1;
        option = 8;
        option = offset[option];
        option = verify.bind(zuuluu)(option);
        report['source'] = option;
        report = golfie.bind(zuuluu)(oscard, report);
        entity['icon'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    option = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot5 = option;
    option = tangon.Image;
    var _closure1_slot6 = option;
    tangon = tangon.ScrollView;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.NOOP;
    var _closure1_slot10 = golfie;
    tangon = tangon.StatusTypes;
    var _closure1_slot11 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot12 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    tangon = 27;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemTableRow.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemTableRow
        update = _closure1_slot0;
        sequen = _closure1_slot2;
        michal = 9;
        michal = sequen[michal];
        tangon = undefined;
        oscard = update.bind(tangon)(michal);
        report = oscard.useStateFromStores;
        michal = _closure1_slot9;
        zuuluu = new Array(1);
        zuuluu[0] = michal;
        michal = function() {
            michal = _closure1_slot9;
            entity = michal.getCurrentUser;
            entity = entity.bind(michal)();
            return entity;
        };
        variable36 = report.bind(oscard)(zuuluu, michal);
        zuuluu = _closure1_slot8;
        michal = zuuluu.getGuildId;
        quebec = michal.bind(zuuluu)();
        vacuum = _closure1_slot1;
        michal = 10;
        michal = sequen[michal];
        michal = vacuum.bind(tangon)(michal);
        offset = michal.bind(tangon)();
        report = _closure1_slot4;
        michal = report.useState;
        option = false;
        michal = michal.bind(report)(option);
        golfie = _closure1_slot3;
        oscard = 2;
        michal = golfie.bind(tangon)(michal, oscard);
        zuuluu = 0;
        sierra = michal[zuuluu];
        variable39 = 1;
        michal = michal[variable39];
        var _closure2_slot0 = michal;
        michal = report.useState;
        michal = michal.bind(report)(option);
        michal = golfie.bind(tangon)(michal, oscard);
        cntext = michal[zuuluu];
        michal = michal[variable39];
        var _closure2_slot1 = michal;
        oscard = report.useCallback;
        zuuluu = function(argFoo) {
            zuuluu = _closure2_slot0;
            entity = undefined;
            michal = argFoo;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        michal = new Array(0);
        status = oscard.bind(report)(zuuluu, michal);
        zuuluu = report.useCallback;
        michal = function(argFoo) {
            zuuluu = _closure2_slot1;
            entity = undefined;
            michal = argFoo;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        entity = new Array(0);
        record = zuuluu.bind(report)(michal, entity);
        zuuluu = _closure1_slot12;
        michal = _closure1_slot7;
        entity = {};
        golfie = _closure1_slot13;
        verify = 11;
        report = sequen[verify];
        report = update.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        papara = 24;
        report['spacing'] = papara;
        option = {};
        yankee = offset.top;
        option['paddingTop'] = yankee;
        offset = offset.bottom;
        option['paddingBottom'] = offset;
        romeon = 12;
        option['paddingHorizontal'] = romeon;
        report['style'] = option;
        option = sequen[romeon];
        option = update.bind(tangon)(option);
        offset = option.TableRowGroup;
        option = {};
        backup = _closure1_slot12;
        echoed = 7;
        yankee = sequen[echoed];
        yankee = update.bind(tangon)(yankee);
        foxtra = yankee.TableRow;
        yankee = {};
        kiloes = _closure1_slot10;
        yankee['onPress'] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        kiloes = kiloes.TableRow;
        sizing = kiloes.Icon;
        kiloes = {};
        ctrled = 8;
        source = sequen[ctrled];
        source = vacuum.bind(tangon)(source);
        kiloes['source'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        yankee['icon'] = kiloes;
        kiloes = 'Boost your Server';
        yankee['label'] = kiloes;
        kiloes = 'Unlock perks for the entire community';
        yankee['subLabel'] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        kiloes = kiloes.TableRow;
        sizing = kiloes.Arrow;
        kiloes = {};
        kiloes = output.bind(tangon)(sizing, kiloes);
        yankee['trailing'] = kiloes;
        yankee = backup.bind(tangon)(foxtra, yankee);
        foxtra = new Array(7);
        foxtra[0] = yankee;
        kiloes = _closure1_slot12;
        backup = _closure1_slot14;
        yankee = {};
        yankee = kiloes.bind(tangon)(backup, yankee);
        foxtra[1] = yankee;
        kiloes = _closure1_slot12;
        yankee = sequen[echoed];
        yankee = update.bind(tangon)(yankee);
        backup = yankee.TableRow;
        yankee = {};
        source = _closure1_slot12;
        sizing = sequen[echoed];
        sizing = update.bind(tangon)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        config = sequen[ctrled];
        config = vacuum.bind(tangon)(config);
        sizing['source'] = config;
        target = 'blurple';
        sizing['variant'] = target;
        sizing = source.bind(tangon)(output, sizing);
        yankee['icon'] = sizing;
        sizing = 'Add a Friend';
        yankee['label'] = sizing;
        yankee = kiloes.bind(tangon)(backup, yankee);
        foxtra[2] = yankee;
        kiloes = _closure1_slot12;
        yankee = sequen[echoed];
        yankee = update.bind(tangon)(yankee);
        backup = yankee.TableRow;
        yankee = {'icon': null, 'label': 'A really long label that takes up all of the space and then some', 'subLabel': 'A really long sublabel that takes up all of the space and then some'};
        source = _closure1_slot12;
        sizing = sequen[echoed];
        sizing = update.bind(tangon)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        config = sequen[ctrled];
        config = vacuum.bind(tangon)(config);
        sizing['source'] = config;
        config = 'boosting-pink';
        sizing['variant'] = config;
        sizing = source.bind(tangon)(output, sizing);
        yankee['icon'] = sizing;
        yankee = kiloes.bind(tangon)(backup, yankee);
        foxtra[3] = yankee;
        kiloes = _closure1_slot12;
        yankee = sequen[echoed];
        yankee = update.bind(tangon)(yankee);
        backup = yankee.TableRow;
        yankee = {'icon': null, 'label': 'A really long label, but next to an arrow, that takes up all of the space and then some', 'subLabel': 'A really long sublabel, but next to an arrow, that takes up all of the space and then some'};
        source = _closure1_slot12;
        sizing = sequen[echoed];
        sizing = update.bind(tangon)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        limora = sequen[ctrled];
        limora = vacuum.bind(tangon)(limora);
        sizing['source'] = limora;
        sizing['variant'] = config;
        sizing = source.bind(tangon)(output, sizing);
        yankee['icon'] = sizing;
        source = _closure1_slot12;
        sizing = sequen[echoed];
        sizing = update.bind(tangon)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Arrow;
        sizing = {};
        sizing = source.bind(tangon)(output, sizing);
        yankee['trailing'] = sizing;
        yankee = kiloes.bind(tangon)(backup, yankee);
        foxtra[4] = yankee;
        sizing = _closure1_slot12;
        yankee = sequen[echoed];
        yankee = update.bind(tangon)(yankee);
        kiloes = yankee.TableRow;
        backup = {};
        source = _closure1_slot12;
        yankee = sequen[echoed];
        yankee = update.bind(tangon)(yankee);
        yankee = yankee.TableRow;
        output = yankee.Icon;
        yankee = {};
        limora = sequen[ctrled];
        limora = vacuum.bind(tangon)(limora);
        yankee['source'] = limora;
        yankee['variant'] = config;
        yankee = source.bind(tangon)(output, yankee);
        backup['icon'] = yankee;
        limora = _closure1_slot12;
        yankee = 13;
        output = sequen[yankee];
        output = update.bind(tangon)(output);
        source = output.Text;
        output = {'variant': 'text-md/medium', 'lineClamp': 1, 'children': 'Custom node for label - A really long label that takes up all of the space and then some'};
        output = limora.bind(tangon)(source, output);
        backup['label'] = output;
        source = _closure1_slot5;
        output = {};
        limora = {'flexDirection': 'row', 'alignItems': 'center'};
        output['style'] = limora;
        equals = _closure1_slot12;
        whisks = _closure1_slot6;
        limora = {};
        variable37 = {'flexShrink': 0, 'height': 24, 'width': 24, 'marginEnd': 8};
        limora['style'] = variable37;
        variable37 = {};
        variable38 = 14;
        variable38 = sequen[variable38];
        variable41 = vacuum.bind(tangon)(variable38);
        variable40 = variable41.getEmojiURL;
        variable38 = {'id': '801497159479722084', 'animated': false, 'size': 24};
        variable38 = variable40.bind(variable41)(variable38);
        variable37['uri'] = variable38;
        limora['source'] = variable37;
        variable37 = 'contain';
        limora['resizeMode'] = variable37;
        whisks = equals.bind(tangon)(whisks, limora);
        limora = new Array(2);
        limora[0] = whisks;
        variable37 = _closure1_slot12;
        whisks = sequen[yankee];
        whisks = update.bind(tangon)(whisks);
        equals = whisks.Text;
        whisks = {'variant': 'text-md/medium', 'lineClamp': 1, 'color': 'text-muted', 'style': null, 'children': 'Custom node for subLabel - A really long sublabel that takes up all of the space and then some'};
        variable38 = {};
        variable38['flexShrink'] = variable39;
        whisks['style'] = variable38;
        whisks = variable37.bind(tangon)(equals, whisks);
        limora[1] = whisks;
        output['children'] = limora;
        output = golfie.bind(tangon)(source, output);
        backup['subLabel'] = output;
        backup = sizing.bind(tangon)(kiloes, backup);
        foxtra[5] = backup;
        sizing = _closure1_slot12;
        backup = sequen[echoed];
        backup = update.bind(tangon)(backup);
        kiloes = backup.TableRow;
        backup = {'icon': null, 'label': 'A disabled row', 'subLabel': 'you cant do anything with this', 'disabled': true};
        limora = _closure1_slot12;
        output = sequen[echoed];
        output = update.bind(tangon)(output);
        output = output.TableRow;
        source = output.Icon;
        output = {};
        whisks = sequen[ctrled];
        whisks = vacuum.bind(tangon)(whisks);
        output['source'] = whisks;
        output = limora.bind(tangon)(source, output);
        backup['icon'] = output;
        source = true;
        backup = sizing.bind(tangon)(kiloes, backup);
        foxtra[6] = backup;
        option['children'] = foxtra;
        offset = golfie.bind(tangon)(offset, option);
        option = new Array(7);
        option[0] = offset;
        offset = sequen[romeon];
        offset = update.bind(tangon)(offset);
        foxtra = offset.TableRowGroup;
        offset = {};
        backup = 'Table Row Section';
        offset['title'] = backup;
        sizing = _closure1_slot12;
        backup = sequen[echoed];
        backup = update.bind(tangon)(backup);
        kiloes = backup.TableRow;
        backup = {};
        output = variable36.globalName;
        backup['label'] = output;
        output = variable36.username;
        backup['subLabel'] = output;
        whisks = _closure1_slot12;
        equals = 15;
        output = sequen[equals];
        limora = vacuum.bind(tangon)(output);
        output = {};
        output['user'] = variable36;
        output['guildId'] = quebec;
        quebec = _closure1_slot11;
        quebec = quebec.ONLINE;
        output['status'] = quebec;
        equals = sequen[equals];
        equals = update.bind(tangon)(equals);
        equals = equals.AvatarSizes;
        equals = equals.REFRESH_MEDIUM_32;
        output['size'] = equals;
        output = whisks.bind(tangon)(limora, output);
        backup['icon'] = output;
        kiloes = sizing.bind(tangon)(kiloes, backup);
        backup = new Array(11);
        backup[0] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {};
        equals = _closure1_slot12;
        limora = sequen[echoed];
        limora = update.bind(tangon)(limora);
        limora = limora.TableRow;
        whisks = limora.Icon;
        limora = {};
        quebec = sequen[ctrled];
        quebec = vacuum.bind(tangon)(quebec);
        limora['source'] = quebec;
        limora = equals.bind(tangon)(whisks, limora);
        kiloes['icon'] = limora;
        limora = 'Language';
        kiloes['label'] = limora;
        equals = _closure1_slot12;
        limora = sequen[echoed];
        limora = update.bind(tangon)(limora);
        limora = limora.TableRow;
        whisks = limora.TrailingText;
        limora = {};
        quebec = 'English (US)';
        limora['text'] = quebec;
        limora = equals.bind(tangon)(whisks, limora);
        kiloes['trailing'] = limora;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[1] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {};
        equals = _closure1_slot12;
        limora = sequen[echoed];
        limora = update.bind(tangon)(limora);
        limora = limora.TableRow;
        whisks = limora.Icon;
        limora = {};
        quebec = sequen[ctrled];
        quebec = vacuum.bind(tangon)(quebec);
        limora['source'] = quebec;
        limora = equals.bind(tangon)(whisks, limora);
        kiloes['icon'] = limora;
        limora = 'Display Name';
        kiloes['label'] = limora;
        variable36 = _closure1_slot12;
        whisks = sequen[echoed];
        whisks = update.bind(tangon)(whisks);
        whisks = whisks.TableRow;
        equals = whisks.TrailingText;
        whisks = {};
        quebec = 'thisisareallylongusernamewhichshouldtruncate';
        whisks['text'] = quebec;
        whisks = variable36.bind(tangon)(equals, whisks);
        kiloes['trailing'] = whisks;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[2] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {};
        variable36 = _closure1_slot12;
        whisks = sequen[echoed];
        whisks = update.bind(tangon)(whisks);
        whisks = whisks.TableRow;
        equals = whisks.Icon;
        whisks = {};
        variable37 = sequen[ctrled];
        variable37 = vacuum.bind(tangon)(variable37);
        whisks['source'] = variable37;
        whisks = variable36.bind(tangon)(equals, whisks);
        kiloes['icon'] = whisks;
        kiloes['label'] = limora;
        equals = _closure1_slot12;
        limora = sequen[echoed];
        limora = update.bind(tangon)(limora);
        limora = limora.TableRow;
        whisks = limora.TrailingText;
        limora = {};
        limora['text'] = quebec;
        limora = equals.bind(tangon)(whisks, limora);
        kiloes['trailing'] = limora;
        kiloes['arrow'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[3] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {};
        whisks = _closure1_slot12;
        source = sequen[echoed];
        source = update.bind(tangon)(source);
        source = source.TableRow;
        limora = source.Icon;
        source = {};
        equals = sequen[ctrled];
        equals = vacuum.bind(tangon)(equals);
        source['source'] = equals;
        source = whisks.bind(tangon)(limora, source);
        kiloes['icon'] = source;
        source = 'Display Name That Is Very Long And Maybe Wrap';
        kiloes['label'] = source;
        equals = _closure1_slot12;
        limora = sequen[echoed];
        limora = update.bind(tangon)(limora);
        limora = limora.TableRow;
        whisks = limora.TrailingText;
        limora = {};
        limora['text'] = quebec;
        limora = equals.bind(tangon)(whisks, limora);
        kiloes['trailing'] = limora;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[4] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {};
        equals = _closure1_slot12;
        limora = sequen[echoed];
        limora = update.bind(tangon)(limora);
        limora = limora.TableRow;
        whisks = limora.Icon;
        limora = {};
        quebec = sequen[ctrled];
        quebec = vacuum.bind(tangon)(quebec);
        limora['source'] = quebec;
        limora = equals.bind(tangon)(whisks, limora);
        kiloes['icon'] = limora;
        kiloes['label'] = source;
        whisks = _closure1_slot12;
        source = sequen[echoed];
        source = update.bind(tangon)(source);
        source = source.TableRow;
        limora = source.TrailingText;
        source = {};
        equals = '100';
        source['text'] = equals;
        source = whisks.bind(tangon)(limora, source);
        kiloes['trailing'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[5] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {'icon': null, 'label': 'Language', 'subLabel': 'English (US)'};
        whisks = _closure1_slot12;
        source = sequen[echoed];
        source = update.bind(tangon)(source);
        source = source.TableRow;
        limora = source.Icon;
        source = {};
        equals = sequen[ctrled];
        equals = vacuum.bind(tangon)(equals);
        source['source'] = equals;
        source = whisks.bind(tangon)(limora, source);
        kiloes['icon'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[6] = kiloes;
        source = _closure1_slot12;
        kiloes = 16;
        sizing = sequen[kiloes];
        sizing = update.bind(tangon)(sizing);
        output = sizing.TableSwitchRow;
        sizing = {'icon': null, 'label': 'A really long label that has a switch next to it', 'subLabel': 'Show more information in less space'};
        equals = _closure1_slot12;
        limora = sequen[echoed];
        limora = update.bind(tangon)(limora);
        limora = limora.TableRow;
        whisks = limora.Icon;
        limora = {};
        quebec = sequen[ctrled];
        quebec = vacuum.bind(tangon)(quebec);
        limora['source'] = quebec;
        limora['variant'] = target;
        limora = equals.bind(tangon)(whisks, limora);
        sizing['icon'] = limora;
        sizing['value'] = sierra;
        sizing['onValueChange'] = status;
        sizing = source.bind(tangon)(output, sizing);
        backup[7] = sizing;
        output = _closure1_slot12;
        kiloes = sequen[kiloes];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableSwitchRow;
        kiloes = {'icon': null, 'label': 'Text & Images', 'subLabel': 'Automatically play GIFs when possible', 'value': true, 'onValueChange': null, 'disabled': true};
        sierra = _closure1_slot12;
        source = sequen[echoed];
        source = update.bind(tangon)(source);
        source = source.TableRow;
        status = source.Icon;
        source = {};
        limora = sequen[ctrled];
        limora = vacuum.bind(tangon)(limora);
        source['source'] = limora;
        source['variant'] = config;
        source = sierra.bind(tangon)(status, source);
        kiloes['icon'] = source;
        source = _closure1_slot10;
        kiloes['onValueChange'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[8] = kiloes;
        source = _closure1_slot12;
        kiloes = 17;
        sizing = sequen[kiloes];
        sizing = update.bind(tangon)(sizing);
        output = sizing.TableCheckboxRow;
        sizing = {'icon': null, 'label': 'A checkbox row', 'subLabel': 'This can be checked or unchecked'};
        limora = _closure1_slot12;
        status = sequen[echoed];
        status = update.bind(tangon)(status);
        status = status.TableRow;
        sierra = status.Icon;
        status = {};
        whisks = sequen[ctrled];
        whisks = vacuum.bind(tangon)(whisks);
        status['source'] = whisks;
        status['variant'] = target;
        status = limora.bind(tangon)(sierra, status);
        sizing['icon'] = status;
        sizing['checked'] = cntext;
        sizing['onPress'] = record;
        sizing = source.bind(tangon)(output, sizing);
        backup[9] = sizing;
        output = _closure1_slot12;
        kiloes = sequen[kiloes];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableCheckboxRow;
        kiloes = {'icon': null, 'label': 'A really long label that has a checkbox next to it', 'subLabel': 'Show more information in less space', 'checked': true, 'disabled': true};
        cntext = _closure1_slot12;
        source = sequen[echoed];
        source = update.bind(tangon)(source);
        source = source.TableRow;
        record = source.Icon;
        source = {};
        status = sequen[ctrled];
        status = vacuum.bind(tangon)(status);
        source['source'] = status;
        source['variant'] = target;
        source = cntext.bind(tangon)(record, source);
        kiloes['icon'] = source;
        source = _closure1_slot10;
        kiloes['onPress'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[10] = kiloes;
        offset['children'] = backup;
        offset = golfie.bind(tangon)(foxtra, offset);
        option[1] = offset;
        offset = sequen[romeon];
        offset = update.bind(tangon)(offset);
        foxtra = offset.TableRowGroup;
        offset = {'title': 'Draggable Table Rows', 'description': 'Table rows can optionally show a drag handle. Note that this does not actually make them draggable, you need to implement that yourself.', 'hasIcons': false};
        sizing = _closure1_slot12;
        backup = sequen[echoed];
        backup = update.bind(tangon)(backup);
        kiloes = backup.TableRow;
        backup = {'draggable': true, 'onPress': null, 'icon': null, 'label': 'Boost your Server', 'subLabel': 'Unlock perks for the entire community'};
        output = _closure1_slot10;
        backup['onPress'] = output;
        record = _closure1_slot12;
        output = sequen[echoed];
        output = update.bind(tangon)(output);
        output = output.TableRow;
        source = output.Icon;
        output = {};
        cntext = sequen[ctrled];
        cntext = vacuum.bind(tangon)(cntext);
        output['source'] = cntext;
        output = record.bind(tangon)(source, output);
        backup['icon'] = output;
        record = _closure1_slot12;
        output = sequen[echoed];
        output = update.bind(tangon)(output);
        output = output.TableRow;
        source = output.Arrow;
        output = {};
        output = record.bind(tangon)(source, output);
        backup['trailing'] = output;
        kiloes = sizing.bind(tangon)(kiloes, backup);
        backup = new Array(2);
        backup[0] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {'draggable': true, 'onPress': null, 'icon': null, 'label': 'Boost your Server', 'subLabel': 'Unlock perks for the entire community'};
        source = _closure1_slot10;
        kiloes['onPress'] = source;
        cntext = _closure1_slot12;
        source = sequen[echoed];
        source = update.bind(tangon)(source);
        source = source.TableRow;
        record = source.Icon;
        source = {};
        target = sequen[ctrled];
        target = vacuum.bind(tangon)(target);
        source['source'] = target;
        source = cntext.bind(tangon)(record, source);
        kiloes['icon'] = source;
        cntext = _closure1_slot12;
        source = sequen[echoed];
        source = update.bind(tangon)(source);
        source = source.TableRow;
        record = source.Arrow;
        source = {};
        source = cntext.bind(tangon)(record, source);
        kiloes['trailing'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[1] = kiloes;
        offset['children'] = backup;
        offset = golfie.bind(tangon)(foxtra, offset);
        option[2] = offset;
        offset = sequen[romeon];
        offset = update.bind(tangon)(offset);
        foxtra = offset.TableRowGroup;
        offset = {};
        backup = 'No Icons';
        offset['title'] = backup;
        sizing = _closure1_slot12;
        backup = sequen[echoed];
        backup = update.bind(tangon)(backup);
        kiloes = backup.TableRow;
        backup = {'label': 'First Item', 'subLabel': 'Here is an item'};
        output = _closure1_slot10;
        backup['onPress'] = output;
        kiloes = sizing.bind(tangon)(kiloes, backup);
        backup = new Array(3);
        backup[0] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {'label': 'Second Item', 'subLabel': 'Here is another item'};
        source = _closure1_slot10;
        kiloes['onPress'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[1] = kiloes;
        output = _closure1_slot12;
        kiloes = sequen[echoed];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRow;
        kiloes = {'label': 'Third Item', 'subLabel': 'Here is yet another item'};
        source = _closure1_slot10;
        kiloes['onPress'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[2] = kiloes;
        offset['children'] = backup;
        offset = golfie.bind(tangon)(foxtra, offset);
        option[3] = offset;
        offset = 18;
        foxtra = sequen[offset];
        foxtra = update.bind(tangon)(foxtra);
        backup = foxtra.TableRadioGroup;
        foxtra = {'title': 'Radio Group', 'hasIcons': false, 'defaultValue': 'option1'};
        kiloes = _closure1_slot10;
        foxtra['onChange'] = kiloes;
        source = _closure1_slot12;
        kiloes = 19;
        sizing = sequen[kiloes];
        sizing = update.bind(tangon)(sizing);
        output = sizing.TableRadioRow;
        sizing = {'label': 'First Item', 'subLabel': 'Here is an item', 'value': 'option1'};
        output = source.bind(tangon)(output, sizing);
        sizing = new Array(4);
        sizing[0] = output;
        record = _closure1_slot12;
        output = sequen[kiloes];
        output = update.bind(tangon)(output);
        source = output.TableRadioRow;
        output = {'label': 'Second Item', 'subLabel': 'Here is another item', 'value': 'option2'};
        output = record.bind(tangon)(source, output);
        sizing[1] = output;
        record = _closure1_slot12;
        output = sequen[kiloes];
        output = update.bind(tangon)(output);
        source = output.TableRadioRow;
        output = {'label': 'Third Item', 'subLabel': 'Here is yet another item', 'value': 'option3'};
        output = record.bind(tangon)(source, output);
        sizing[2] = output;
        record = _closure1_slot12;
        output = sequen[kiloes];
        output = update.bind(tangon)(output);
        source = output.TableRadioRow;
        output = {'label': 'Disabled Item', 'subLabel': 'This should not be selectable', 'value': 'option4', 'disabled': true};
        output = record.bind(tangon)(source, output);
        sizing[3] = output;
        foxtra['children'] = sizing;
        foxtra = golfie.bind(tangon)(backup, foxtra);
        option[4] = foxtra;
        offset = sequen[offset];
        offset = update.bind(tangon)(offset);
        foxtra = offset.TableRadioGroup;
        offset = {'title': 'Online Status', 'hasIcons': true, 'defaultValue': 'option1'};
        backup = _closure1_slot10;
        offset['onChange'] = backup;
        output = _closure1_slot12;
        backup = sequen[kiloes];
        backup = update.bind(tangon)(backup);
        sizing = backup.TableRadioRow;
        backup = {'icon': null, 'label': 'Online', 'value': 'option1'};
        target = _closure1_slot12;
        source = 20;
        record = sequen[source];
        record = update.bind(tangon)(record);
        cntext = record.TableRowIcon;
        record = {};
        status = 'status-online';
        record['variant'] = status;
        status = 21;
        status = sequen[status];
        status = vacuum.bind(tangon)(status);
        record['source'] = status;
        record = target.bind(tangon)(cntext, record);
        backup['icon'] = record;
        sizing = output.bind(tangon)(sizing, backup);
        backup = new Array(4);
        backup[0] = sizing;
        record = _closure1_slot12;
        sizing = sequen[kiloes];
        sizing = update.bind(tangon)(sizing);
        output = sizing.TableRadioRow;
        sizing = {'icon': null, 'label': 'Idle', 'value': 'option2'};
        status = _closure1_slot12;
        cntext = sequen[source];
        cntext = update.bind(tangon)(cntext);
        target = cntext.TableRowIcon;
        cntext = {};
        sierra = 'status-idle';
        cntext['variant'] = sierra;
        sierra = 22;
        sierra = sequen[sierra];
        sierra = vacuum.bind(tangon)(sierra);
        cntext['source'] = sierra;
        cntext = status.bind(tangon)(target, cntext);
        sizing['icon'] = cntext;
        sizing = record.bind(tangon)(output, sizing);
        backup[1] = sizing;
        record = _closure1_slot12;
        sizing = sequen[kiloes];
        sizing = update.bind(tangon)(sizing);
        output = sizing.TableRadioRow;
        sizing = {'icon': null, 'label': 'Do Not Disturb', 'value': 'option3'};
        status = _closure1_slot12;
        cntext = sequen[source];
        cntext = update.bind(tangon)(cntext);
        target = cntext.TableRowIcon;
        cntext = {};
        sierra = 'status-dnd';
        cntext['variant'] = sierra;
        sierra = 23;
        sierra = sequen[sierra];
        sierra = vacuum.bind(tangon)(sierra);
        cntext['source'] = sierra;
        cntext = status.bind(tangon)(target, cntext);
        sizing['icon'] = cntext;
        sizing = record.bind(tangon)(output, sizing);
        backup[2] = sizing;
        output = _closure1_slot12;
        kiloes = sequen[kiloes];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.TableRadioRow;
        kiloes = {'icon': null, 'label': 'Invisible', 'value': 'option4'};
        cntext = _closure1_slot12;
        source = sequen[source];
        source = update.bind(tangon)(source);
        record = source.TableRowIcon;
        source = {};
        target = 'status-offline';
        source['variant'] = target;
        papara = sequen[papara];
        papara = vacuum.bind(tangon)(papara);
        source['source'] = papara;
        source = cntext.bind(tangon)(record, source);
        kiloes['icon'] = source;
        kiloes = output.bind(tangon)(sizing, kiloes);
        backup[3] = kiloes;
        offset['children'] = backup;
        offset = golfie.bind(tangon)(foxtra, offset);
        option[5] = offset;
        verify = sequen[verify];
        verify = update.bind(tangon)(verify);
        offset = verify.Stack;
        verify = {};
        verify['spacing'] = romeon;
        foxtra = _closure1_slot12;
        yankee = sequen[yankee];
        yankee = update.bind(tangon)(yankee);
        romeon = yankee.Text;
        yankee = {'variant': 'heading-sm/semibold', 'children': 'Row buttons'};
        romeon = foxtra.bind(tangon)(romeon, yankee);
        yankee = new Array(4);
        yankee[0] = romeon;
        backup = _closure1_slot12;
        kiloes = 25;
        romeon = sequen[kiloes];
        romeon = update.bind(tangon)(romeon);
        foxtra = romeon.RowButton;
        romeon = {};
        source = _closure1_slot12;
        sizing = sequen[echoed];
        sizing = update.bind(tangon)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        record = sequen[ctrled];
        record = vacuum.bind(tangon)(record);
        sizing['source'] = record;
        sizing['variant'] = config;
        sizing = source.bind(tangon)(output, sizing);
        romeon['icon'] = sizing;
        sizing = 'Boost your server';
        romeon['label'] = sizing;
        sizing = _closure1_slot10;
        romeon['onPress'] = sizing;
        romeon = backup.bind(tangon)(foxtra, romeon);
        yankee[1] = romeon;
        backup = _closure1_slot12;
        romeon = sequen[kiloes];
        romeon = update.bind(tangon)(romeon);
        foxtra = romeon.RowButton;
        romeon = {'label': 'Disabled row button', 'onPress': null, 'disabled': true, 'arrow': false};
        sizing = _closure1_slot10;
        romeon['onPress'] = sizing;
        romeon = backup.bind(tangon)(foxtra, romeon);
        yankee[2] = romeon;
        backup = _closure1_slot12;
        romeon = 26;
        romeon = sequen[romeon];
        foxtra = vacuum.bind(tangon)(romeon);
        romeon = {};
        sizing = {};
        sizing['padding'] = ctrled;
        romeon['style'] = sizing;
        sizing = {'x': 0, 'y': 0};
        romeon['start'] = sizing;
        sizing = {'x': 1, 'y': 0};
        romeon['end'] = sizing;
        sizing = ['red', 'orange', 'yellow', 'green', 'teal', 'blue', 'purple'];
        romeon['colors'] = sizing;
        output = _closure1_slot12;
        kiloes = sequen[kiloes];
        kiloes = update.bind(tangon)(kiloes);
        sizing = kiloes.RowButton;
        kiloes = {'icon': null, 'experimental_withBlurBackground': true, 'label': 'Row Button'};
        source = _closure1_slot12;
        echoed = sequen[echoed];
        echoed = update.bind(tangon)(echoed);
        echoed = echoed.TableRow;
        update = echoed.Icon;
        echoed = {};
        ctrled = sequen[ctrled];
        ctrled = vacuum.bind(tangon)(ctrled);
        echoed['source'] = ctrled;
        ctrled = 'translucent';
        echoed['variant'] = ctrled;
        echoed = source.bind(tangon)(update, echoed);
        kiloes['icon'] = echoed;
        result = _closure1_slot10;
        kiloes['onPress'] = result;
        kiloes = output.bind(tangon)(sizing, kiloes);
        romeon['children'] = kiloes;
        romeon = backup.bind(tangon)(foxtra, romeon);
        yankee[3] = romeon;
        verify['children'] = yankee;
        verify = golfie.bind(tangon)(offset, verify);
        option[6] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();