// app/modules/user_settings/native/design_system/UserSettingsDesignSystemTableRow.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = function() { // Original name: MyTableRow
        tango = _closure1_slot12;
        oscar = _closure1_slot0;
        offset = _closure1_slot2;
        report = 7;
        entity = offset[report];
        zulu = undefined;
        entity = oscar.bind(zulu)(entity);
        mike = entity.TableRow;
        entity = {};
        golf = 'Notifications';
        entity['label'] = golf;
        golf = _closure1_slot10;
        entity['onPress'] = golf;
        golf = _closure1_slot12;
        report = offset[report];
        report = oscar.bind(zulu)(report);
        report = report.TableRow;
        oscar = report.Icon;
        report = {};
        verify = _closure1_slot1;
        options = 8;
        options = offset[options];
        options = verify.bind(zulu)(options);
        report['source'] = options;
        report = golf.bind(zulu)(oscar, report);
        entity['icon'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = golf.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    options = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(options);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.View;
    var _closure1_slot5 = options;
    options = tango.Image;
    var _closure1_slot6 = options;
    tango = tango.ScrollView;
    var _closure1_slot7 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.NOOP;
    var _closure1_slot10 = golf;
    tango = tango.StatusTypes;
    var _closure1_slot11 = tango;
    tango = 6;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot12 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot13 = tango;
    tango = 27;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemTableRow.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemTableRow
        update = _closure1_slot0;
        sequence = _closure1_slot2;
        mike = 9;
        mike = sequence[mike];
        tango = undefined;
        oscar = update.bind(tango)(mike);
        report = oscar.useStateFromStores;
        mike = _closure1_slot9;
        zulu = new Array(1);
        zulu[0] = mike;
        mike = function() {
            mike = _closure1_slot9;
            entity = mike.getCurrentUser;
            entity = entity.bind(mike)();
            return entity;
        };
        variable36 = report.bind(oscar)(zulu, mike);
        zulu = _closure1_slot8;
        mike = zulu.getGuildId;
        quebec = mike.bind(zulu)();
        vacuum = _closure1_slot1;
        mike = 10;
        mike = sequence[mike];
        mike = vacuum.bind(tango)(mike);
        offset = mike.bind(tango)();
        report = _closure1_slot4;
        mike = report.useState;
        options = false;
        mike = mike.bind(report)(options);
        golf = _closure1_slot3;
        oscar = 2;
        mike = golf.bind(tango)(mike, oscar);
        zulu = 0;
        sierra = mike[zulu];
        variable39 = 1;
        mike = mike[variable39];
        var _closure2_slot0 = mike;
        mike = report.useState;
        mike = mike.bind(report)(options);
        mike = golf.bind(tango)(mike, oscar);
        context = mike[zulu];
        mike = mike[variable39];
        var _closure2_slot1 = mike;
        oscar = report.useCallback;
        zulu = function(argFoo) {
            zulu = _closure2_slot0;
            entity = undefined;
            mike = argFoo;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        mike = new Array(0);
        status = oscar.bind(report)(zulu, mike);
        zulu = report.useCallback;
        mike = function(argFoo) {
            zulu = _closure2_slot1;
            entity = undefined;
            mike = argFoo;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        entity = new Array(0);
        record = zulu.bind(report)(mike, entity);
        zulu = _closure1_slot12;
        mike = _closure1_slot7;
        entity = {};
        golf = _closure1_slot13;
        verify = 11;
        report = sequence[verify];
        report = update.bind(tango)(report);
        oscar = report.Stack;
        report = {};
        papa = 24;
        report['spacing'] = papa;
        options = {};
        yankee = offset.top;
        options['paddingTop'] = yankee;
        offset = offset.bottom;
        options['paddingBottom'] = offset;
        romeo = 12;
        options['paddingHorizontal'] = romeo;
        report['style'] = options;
        options = sequence[romeo];
        options = update.bind(tango)(options);
        offset = options.TableRowGroup;
        options = {};
        backup = _closure1_slot12;
        echo = 7;
        yankee = sequence[echo];
        yankee = update.bind(tango)(yankee);
        foxtrot = yankee.TableRow;
        yankee = {};
        kilo = _closure1_slot10;
        yankee['onPress'] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        kilo = kilo.TableRow;
        sizing = kilo.Icon;
        kilo = {};
        control = 8;
        source = sequence[control];
        source = vacuum.bind(tango)(source);
        kilo['source'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        yankee['icon'] = kilo;
        kilo = 'Boost your Server';
        yankee['label'] = kilo;
        kilo = 'Unlock perks for the entire community';
        yankee['subLabel'] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        kilo = kilo.TableRow;
        sizing = kilo.Arrow;
        kilo = {};
        kilo = output.bind(tango)(sizing, kilo);
        yankee['trailing'] = kilo;
        yankee = backup.bind(tango)(foxtrot, yankee);
        foxtrot = new Array(7);
        foxtrot[0] = yankee;
        kilo = _closure1_slot12;
        backup = _closure1_slot14;
        yankee = {};
        yankee = kilo.bind(tango)(backup, yankee);
        foxtrot[1] = yankee;
        kilo = _closure1_slot12;
        yankee = sequence[echo];
        yankee = update.bind(tango)(yankee);
        backup = yankee.TableRow;
        yankee = {};
        source = _closure1_slot12;
        sizing = sequence[echo];
        sizing = update.bind(tango)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        config = sequence[control];
        config = vacuum.bind(tango)(config);
        sizing['source'] = config;
        target = 'blurple';
        sizing['variant'] = target;
        sizing = source.bind(tango)(output, sizing);
        yankee['icon'] = sizing;
        sizing = 'Add a Friend';
        yankee['label'] = sizing;
        yankee = kilo.bind(tango)(backup, yankee);
        foxtrot[2] = yankee;
        kilo = _closure1_slot12;
        yankee = sequence[echo];
        yankee = update.bind(tango)(yankee);
        backup = yankee.TableRow;
        yankee = {'icon': null, 'label': 'A really long label that takes up all of the space and then some', 'subLabel': 'A really long sublabel that takes up all of the space and then some'};
        source = _closure1_slot12;
        sizing = sequence[echo];
        sizing = update.bind(tango)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        config = sequence[control];
        config = vacuum.bind(tango)(config);
        sizing['source'] = config;
        config = 'boosting-pink';
        sizing['variant'] = config;
        sizing = source.bind(tango)(output, sizing);
        yankee['icon'] = sizing;
        yankee = kilo.bind(tango)(backup, yankee);
        foxtrot[3] = yankee;
        kilo = _closure1_slot12;
        yankee = sequence[echo];
        yankee = update.bind(tango)(yankee);
        backup = yankee.TableRow;
        yankee = {'icon': null, 'label': 'A really long label, but next to an arrow, that takes up all of the space and then some', 'subLabel': 'A really long sublabel, but next to an arrow, that takes up all of the space and then some'};
        source = _closure1_slot12;
        sizing = sequence[echo];
        sizing = update.bind(tango)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        lima = sequence[control];
        lima = vacuum.bind(tango)(lima);
        sizing['source'] = lima;
        sizing['variant'] = config;
        sizing = source.bind(tango)(output, sizing);
        yankee['icon'] = sizing;
        source = _closure1_slot12;
        sizing = sequence[echo];
        sizing = update.bind(tango)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Arrow;
        sizing = {};
        sizing = source.bind(tango)(output, sizing);
        yankee['trailing'] = sizing;
        yankee = kilo.bind(tango)(backup, yankee);
        foxtrot[4] = yankee;
        sizing = _closure1_slot12;
        yankee = sequence[echo];
        yankee = update.bind(tango)(yankee);
        kilo = yankee.TableRow;
        backup = {};
        source = _closure1_slot12;
        yankee = sequence[echo];
        yankee = update.bind(tango)(yankee);
        yankee = yankee.TableRow;
        output = yankee.Icon;
        yankee = {};
        lima = sequence[control];
        lima = vacuum.bind(tango)(lima);
        yankee['source'] = lima;
        yankee['variant'] = config;
        yankee = source.bind(tango)(output, yankee);
        backup['icon'] = yankee;
        lima = _closure1_slot12;
        yankee = 13;
        output = sequence[yankee];
        output = update.bind(tango)(output);
        source = output.Text;
        output = {'variant': 'text-md/medium', 'lineClamp': 1, 'children': 'Custom node for label - A really long label that takes up all of the space and then some'};
        output = lima.bind(tango)(source, output);
        backup['label'] = output;
        source = _closure1_slot5;
        output = {};
        lima = {'flexDirection': 'row', 'alignItems': 'center'};
        output['style'] = lima;
        equality = _closure1_slot12;
        whiskey = _closure1_slot6;
        lima = {};
        variable37 = {'flexShrink': 0, 'height': 24, 'width': 24, 'marginEnd': 8};
        lima['style'] = variable37;
        variable37 = {};
        variable38 = 14;
        variable38 = sequence[variable38];
        variable41 = vacuum.bind(tango)(variable38);
        variable40 = variable41.getEmojiURL;
        variable38 = {'id': '801497159479722084', 'animated': false, 'size': 24};
        variable38 = variable40.bind(variable41)(variable38);
        variable37['uri'] = variable38;
        lima['source'] = variable37;
        variable37 = 'contain';
        lima['resizeMode'] = variable37;
        whiskey = equality.bind(tango)(whiskey, lima);
        lima = new Array(2);
        lima[0] = whiskey;
        variable37 = _closure1_slot12;
        whiskey = sequence[yankee];
        whiskey = update.bind(tango)(whiskey);
        equality = whiskey.Text;
        whiskey = {'variant': 'text-md/medium', 'lineClamp': 1, 'color': 'text-muted', 'style': null, 'children': 'Custom node for subLabel - A really long sublabel that takes up all of the space and then some'};
        variable38 = {};
        variable38['flexShrink'] = variable39;
        whiskey['style'] = variable38;
        whiskey = variable37.bind(tango)(equality, whiskey);
        lima[1] = whiskey;
        output['children'] = lima;
        output = golf.bind(tango)(source, output);
        backup['subLabel'] = output;
        backup = sizing.bind(tango)(kilo, backup);
        foxtrot[5] = backup;
        sizing = _closure1_slot12;
        backup = sequence[echo];
        backup = update.bind(tango)(backup);
        kilo = backup.TableRow;
        backup = {'icon': null, 'label': 'A disabled row', 'subLabel': 'you cant do anything with this', 'disabled': true};
        lima = _closure1_slot12;
        output = sequence[echo];
        output = update.bind(tango)(output);
        output = output.TableRow;
        source = output.Icon;
        output = {};
        whiskey = sequence[control];
        whiskey = vacuum.bind(tango)(whiskey);
        output['source'] = whiskey;
        output = lima.bind(tango)(source, output);
        backup['icon'] = output;
        source = true;
        backup = sizing.bind(tango)(kilo, backup);
        foxtrot[6] = backup;
        options['children'] = foxtrot;
        offset = golf.bind(tango)(offset, options);
        options = new Array(7);
        options[0] = offset;
        offset = sequence[romeo];
        offset = update.bind(tango)(offset);
        foxtrot = offset.TableRowGroup;
        offset = {};
        backup = 'Table Row Section';
        offset['title'] = backup;
        sizing = _closure1_slot12;
        backup = sequence[echo];
        backup = update.bind(tango)(backup);
        kilo = backup.TableRow;
        backup = {};
        output = variable36.globalName;
        backup['label'] = output;
        output = variable36.username;
        backup['subLabel'] = output;
        whiskey = _closure1_slot12;
        equality = 15;
        output = sequence[equality];
        lima = vacuum.bind(tango)(output);
        output = {};
        output['user'] = variable36;
        output['guildId'] = quebec;
        quebec = _closure1_slot11;
        quebec = quebec.ONLINE;
        output['status'] = quebec;
        equality = sequence[equality];
        equality = update.bind(tango)(equality);
        equality = equality.AvatarSizes;
        equality = equality.REFRESH_MEDIUM_32;
        output['size'] = equality;
        output = whiskey.bind(tango)(lima, output);
        backup['icon'] = output;
        kilo = sizing.bind(tango)(kilo, backup);
        backup = new Array(11);
        backup[0] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {};
        equality = _closure1_slot12;
        lima = sequence[echo];
        lima = update.bind(tango)(lima);
        lima = lima.TableRow;
        whiskey = lima.Icon;
        lima = {};
        quebec = sequence[control];
        quebec = vacuum.bind(tango)(quebec);
        lima['source'] = quebec;
        lima = equality.bind(tango)(whiskey, lima);
        kilo['icon'] = lima;
        lima = 'Language';
        kilo['label'] = lima;
        equality = _closure1_slot12;
        lima = sequence[echo];
        lima = update.bind(tango)(lima);
        lima = lima.TableRow;
        whiskey = lima.TrailingText;
        lima = {};
        quebec = 'English (US)';
        lima['text'] = quebec;
        lima = equality.bind(tango)(whiskey, lima);
        kilo['trailing'] = lima;
        kilo = output.bind(tango)(sizing, kilo);
        backup[1] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {};
        equality = _closure1_slot12;
        lima = sequence[echo];
        lima = update.bind(tango)(lima);
        lima = lima.TableRow;
        whiskey = lima.Icon;
        lima = {};
        quebec = sequence[control];
        quebec = vacuum.bind(tango)(quebec);
        lima['source'] = quebec;
        lima = equality.bind(tango)(whiskey, lima);
        kilo['icon'] = lima;
        lima = 'Display Name';
        kilo['label'] = lima;
        variable36 = _closure1_slot12;
        whiskey = sequence[echo];
        whiskey = update.bind(tango)(whiskey);
        whiskey = whiskey.TableRow;
        equality = whiskey.TrailingText;
        whiskey = {};
        quebec = 'thisisareallylongusernamewhichshouldtruncate';
        whiskey['text'] = quebec;
        whiskey = variable36.bind(tango)(equality, whiskey);
        kilo['trailing'] = whiskey;
        kilo = output.bind(tango)(sizing, kilo);
        backup[2] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {};
        variable36 = _closure1_slot12;
        whiskey = sequence[echo];
        whiskey = update.bind(tango)(whiskey);
        whiskey = whiskey.TableRow;
        equality = whiskey.Icon;
        whiskey = {};
        variable37 = sequence[control];
        variable37 = vacuum.bind(tango)(variable37);
        whiskey['source'] = variable37;
        whiskey = variable36.bind(tango)(equality, whiskey);
        kilo['icon'] = whiskey;
        kilo['label'] = lima;
        equality = _closure1_slot12;
        lima = sequence[echo];
        lima = update.bind(tango)(lima);
        lima = lima.TableRow;
        whiskey = lima.TrailingText;
        lima = {};
        lima['text'] = quebec;
        lima = equality.bind(tango)(whiskey, lima);
        kilo['trailing'] = lima;
        kilo['arrow'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[3] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {};
        whiskey = _closure1_slot12;
        source = sequence[echo];
        source = update.bind(tango)(source);
        source = source.TableRow;
        lima = source.Icon;
        source = {};
        equality = sequence[control];
        equality = vacuum.bind(tango)(equality);
        source['source'] = equality;
        source = whiskey.bind(tango)(lima, source);
        kilo['icon'] = source;
        source = 'Display Name That Is Very Long And Maybe Wrap';
        kilo['label'] = source;
        equality = _closure1_slot12;
        lima = sequence[echo];
        lima = update.bind(tango)(lima);
        lima = lima.TableRow;
        whiskey = lima.TrailingText;
        lima = {};
        lima['text'] = quebec;
        lima = equality.bind(tango)(whiskey, lima);
        kilo['trailing'] = lima;
        kilo = output.bind(tango)(sizing, kilo);
        backup[4] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {};
        equality = _closure1_slot12;
        lima = sequence[echo];
        lima = update.bind(tango)(lima);
        lima = lima.TableRow;
        whiskey = lima.Icon;
        lima = {};
        quebec = sequence[control];
        quebec = vacuum.bind(tango)(quebec);
        lima['source'] = quebec;
        lima = equality.bind(tango)(whiskey, lima);
        kilo['icon'] = lima;
        kilo['label'] = source;
        whiskey = _closure1_slot12;
        source = sequence[echo];
        source = update.bind(tango)(source);
        source = source.TableRow;
        lima = source.TrailingText;
        source = {};
        equality = '100';
        source['text'] = equality;
        source = whiskey.bind(tango)(lima, source);
        kilo['trailing'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[5] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {'icon': null, 'label': 'Language', 'subLabel': 'English (US)'};
        whiskey = _closure1_slot12;
        source = sequence[echo];
        source = update.bind(tango)(source);
        source = source.TableRow;
        lima = source.Icon;
        source = {};
        equality = sequence[control];
        equality = vacuum.bind(tango)(equality);
        source['source'] = equality;
        source = whiskey.bind(tango)(lima, source);
        kilo['icon'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[6] = kilo;
        source = _closure1_slot12;
        kilo = 16;
        sizing = sequence[kilo];
        sizing = update.bind(tango)(sizing);
        output = sizing.TableSwitchRow;
        sizing = {'icon': null, 'label': 'A really long label that has a switch next to it', 'subLabel': 'Show more information in less space'};
        equality = _closure1_slot12;
        lima = sequence[echo];
        lima = update.bind(tango)(lima);
        lima = lima.TableRow;
        whiskey = lima.Icon;
        lima = {};
        quebec = sequence[control];
        quebec = vacuum.bind(tango)(quebec);
        lima['source'] = quebec;
        lima['variant'] = target;
        lima = equality.bind(tango)(whiskey, lima);
        sizing['icon'] = lima;
        sizing['value'] = sierra;
        sizing['onValueChange'] = status;
        sizing = source.bind(tango)(output, sizing);
        backup[7] = sizing;
        output = _closure1_slot12;
        kilo = sequence[kilo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableSwitchRow;
        kilo = {'icon': null, 'label': 'Text & Images', 'subLabel': 'Automatically play GIFs when possible', 'value': true, 'onValueChange': null, 'disabled': true};
        sierra = _closure1_slot12;
        source = sequence[echo];
        source = update.bind(tango)(source);
        source = source.TableRow;
        status = source.Icon;
        source = {};
        lima = sequence[control];
        lima = vacuum.bind(tango)(lima);
        source['source'] = lima;
        source['variant'] = config;
        source = sierra.bind(tango)(status, source);
        kilo['icon'] = source;
        source = _closure1_slot10;
        kilo['onValueChange'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[8] = kilo;
        source = _closure1_slot12;
        kilo = 17;
        sizing = sequence[kilo];
        sizing = update.bind(tango)(sizing);
        output = sizing.TableCheckboxRow;
        sizing = {'icon': null, 'label': 'A checkbox row', 'subLabel': 'This can be checked or unchecked'};
        lima = _closure1_slot12;
        status = sequence[echo];
        status = update.bind(tango)(status);
        status = status.TableRow;
        sierra = status.Icon;
        status = {};
        whiskey = sequence[control];
        whiskey = vacuum.bind(tango)(whiskey);
        status['source'] = whiskey;
        status['variant'] = target;
        status = lima.bind(tango)(sierra, status);
        sizing['icon'] = status;
        sizing['checked'] = context;
        sizing['onPress'] = record;
        sizing = source.bind(tango)(output, sizing);
        backup[9] = sizing;
        output = _closure1_slot12;
        kilo = sequence[kilo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableCheckboxRow;
        kilo = {'icon': null, 'label': 'A really long label that has a checkbox next to it', 'subLabel': 'Show more information in less space', 'checked': true, 'disabled': true};
        context = _closure1_slot12;
        source = sequence[echo];
        source = update.bind(tango)(source);
        source = source.TableRow;
        record = source.Icon;
        source = {};
        status = sequence[control];
        status = vacuum.bind(tango)(status);
        source['source'] = status;
        source['variant'] = target;
        source = context.bind(tango)(record, source);
        kilo['icon'] = source;
        source = _closure1_slot10;
        kilo['onPress'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[10] = kilo;
        offset['children'] = backup;
        offset = golf.bind(tango)(foxtrot, offset);
        options[1] = offset;
        offset = sequence[romeo];
        offset = update.bind(tango)(offset);
        foxtrot = offset.TableRowGroup;
        offset = {'title': 'Draggable Table Rows', 'description': 'Table rows can optionally show a drag handle. Note that this does not actually make them draggable, you need to implement that yourself.', 'hasIcons': false};
        sizing = _closure1_slot12;
        backup = sequence[echo];
        backup = update.bind(tango)(backup);
        kilo = backup.TableRow;
        backup = {'draggable': true, 'onPress': null, 'icon': null, 'label': 'Boost your Server', 'subLabel': 'Unlock perks for the entire community'};
        output = _closure1_slot10;
        backup['onPress'] = output;
        record = _closure1_slot12;
        output = sequence[echo];
        output = update.bind(tango)(output);
        output = output.TableRow;
        source = output.Icon;
        output = {};
        context = sequence[control];
        context = vacuum.bind(tango)(context);
        output['source'] = context;
        output = record.bind(tango)(source, output);
        backup['icon'] = output;
        record = _closure1_slot12;
        output = sequence[echo];
        output = update.bind(tango)(output);
        output = output.TableRow;
        source = output.Arrow;
        output = {};
        output = record.bind(tango)(source, output);
        backup['trailing'] = output;
        kilo = sizing.bind(tango)(kilo, backup);
        backup = new Array(2);
        backup[0] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {'draggable': true, 'onPress': null, 'icon': null, 'label': 'Boost your Server', 'subLabel': 'Unlock perks for the entire community'};
        source = _closure1_slot10;
        kilo['onPress'] = source;
        context = _closure1_slot12;
        source = sequence[echo];
        source = update.bind(tango)(source);
        source = source.TableRow;
        record = source.Icon;
        source = {};
        target = sequence[control];
        target = vacuum.bind(tango)(target);
        source['source'] = target;
        source = context.bind(tango)(record, source);
        kilo['icon'] = source;
        context = _closure1_slot12;
        source = sequence[echo];
        source = update.bind(tango)(source);
        source = source.TableRow;
        record = source.Arrow;
        source = {};
        source = context.bind(tango)(record, source);
        kilo['trailing'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[1] = kilo;
        offset['children'] = backup;
        offset = golf.bind(tango)(foxtrot, offset);
        options[2] = offset;
        offset = sequence[romeo];
        offset = update.bind(tango)(offset);
        foxtrot = offset.TableRowGroup;
        offset = {};
        backup = 'No Icons';
        offset['title'] = backup;
        sizing = _closure1_slot12;
        backup = sequence[echo];
        backup = update.bind(tango)(backup);
        kilo = backup.TableRow;
        backup = {'label': 'First Item', 'subLabel': 'Here is an item'};
        output = _closure1_slot10;
        backup['onPress'] = output;
        kilo = sizing.bind(tango)(kilo, backup);
        backup = new Array(3);
        backup[0] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {'label': 'Second Item', 'subLabel': 'Here is another item'};
        source = _closure1_slot10;
        kilo['onPress'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[1] = kilo;
        output = _closure1_slot12;
        kilo = sequence[echo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRow;
        kilo = {'label': 'Third Item', 'subLabel': 'Here is yet another item'};
        source = _closure1_slot10;
        kilo['onPress'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[2] = kilo;
        offset['children'] = backup;
        offset = golf.bind(tango)(foxtrot, offset);
        options[3] = offset;
        offset = 18;
        foxtrot = sequence[offset];
        foxtrot = update.bind(tango)(foxtrot);
        backup = foxtrot.TableRadioGroup;
        foxtrot = {'title': 'Radio Group', 'hasIcons': false, 'value': 'option1'};
        kilo = _closure1_slot10;
        foxtrot['onChange'] = kilo;
        source = _closure1_slot12;
        kilo = 19;
        sizing = sequence[kilo];
        sizing = update.bind(tango)(sizing);
        output = sizing.TableRadioRow;
        sizing = {'label': 'First Item', 'subLabel': 'Here is an item', 'value': 'option1'};
        output = source.bind(tango)(output, sizing);
        sizing = new Array(4);
        sizing[0] = output;
        record = _closure1_slot12;
        output = sequence[kilo];
        output = update.bind(tango)(output);
        source = output.TableRadioRow;
        output = {'label': 'Second Item', 'subLabel': 'Here is another item', 'value': 'option2'};
        output = record.bind(tango)(source, output);
        sizing[1] = output;
        record = _closure1_slot12;
        output = sequence[kilo];
        output = update.bind(tango)(output);
        source = output.TableRadioRow;
        output = {'label': 'Third Item', 'subLabel': 'Here is yet another item', 'value': 'option3'};
        output = record.bind(tango)(source, output);
        sizing[2] = output;
        record = _closure1_slot12;
        output = sequence[kilo];
        output = update.bind(tango)(output);
        source = output.TableRadioRow;
        output = {'label': 'Disabled Item', 'subLabel': 'This should not be selectable', 'value': 'option4', 'disabled': true};
        output = record.bind(tango)(source, output);
        sizing[3] = output;
        foxtrot['children'] = sizing;
        foxtrot = golf.bind(tango)(backup, foxtrot);
        options[4] = foxtrot;
        offset = sequence[offset];
        offset = update.bind(tango)(offset);
        foxtrot = offset.TableRadioGroup;
        offset = {'title': 'Online Status', 'hasIcons': true, 'value': 'option1'};
        backup = _closure1_slot10;
        offset['onChange'] = backup;
        output = _closure1_slot12;
        backup = sequence[kilo];
        backup = update.bind(tango)(backup);
        sizing = backup.TableRadioRow;
        backup = {'icon': null, 'label': 'Online', 'value': 'option1'};
        target = _closure1_slot12;
        source = 20;
        record = sequence[source];
        record = update.bind(tango)(record);
        context = record.TableRowIcon;
        record = {};
        status = 'status-online';
        record['variant'] = status;
        status = 21;
        status = sequence[status];
        status = vacuum.bind(tango)(status);
        record['source'] = status;
        record = target.bind(tango)(context, record);
        backup['icon'] = record;
        sizing = output.bind(tango)(sizing, backup);
        backup = new Array(4);
        backup[0] = sizing;
        record = _closure1_slot12;
        sizing = sequence[kilo];
        sizing = update.bind(tango)(sizing);
        output = sizing.TableRadioRow;
        sizing = {'icon': null, 'label': 'Idle', 'value': 'option2'};
        status = _closure1_slot12;
        context = sequence[source];
        context = update.bind(tango)(context);
        target = context.TableRowIcon;
        context = {};
        sierra = 'status-idle';
        context['variant'] = sierra;
        sierra = 22;
        sierra = sequence[sierra];
        sierra = vacuum.bind(tango)(sierra);
        context['source'] = sierra;
        context = status.bind(tango)(target, context);
        sizing['icon'] = context;
        sizing = record.bind(tango)(output, sizing);
        backup[1] = sizing;
        record = _closure1_slot12;
        sizing = sequence[kilo];
        sizing = update.bind(tango)(sizing);
        output = sizing.TableRadioRow;
        sizing = {'icon': null, 'label': 'Do Not Disturb', 'value': 'option3'};
        status = _closure1_slot12;
        context = sequence[source];
        context = update.bind(tango)(context);
        target = context.TableRowIcon;
        context = {};
        sierra = 'status-dnd';
        context['variant'] = sierra;
        sierra = 23;
        sierra = sequence[sierra];
        sierra = vacuum.bind(tango)(sierra);
        context['source'] = sierra;
        context = status.bind(tango)(target, context);
        sizing['icon'] = context;
        sizing = record.bind(tango)(output, sizing);
        backup[2] = sizing;
        output = _closure1_slot12;
        kilo = sequence[kilo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.TableRadioRow;
        kilo = {'icon': null, 'label': 'Invisible', 'value': 'option4'};
        context = _closure1_slot12;
        source = sequence[source];
        source = update.bind(tango)(source);
        record = source.TableRowIcon;
        source = {};
        target = 'status-offline';
        source['variant'] = target;
        papa = sequence[papa];
        papa = vacuum.bind(tango)(papa);
        source['source'] = papa;
        source = context.bind(tango)(record, source);
        kilo['icon'] = source;
        kilo = output.bind(tango)(sizing, kilo);
        backup[3] = kilo;
        offset['children'] = backup;
        offset = golf.bind(tango)(foxtrot, offset);
        options[5] = offset;
        verify = sequence[verify];
        verify = update.bind(tango)(verify);
        offset = verify.Stack;
        verify = {};
        verify['spacing'] = romeo;
        foxtrot = _closure1_slot12;
        yankee = sequence[yankee];
        yankee = update.bind(tango)(yankee);
        romeo = yankee.Text;
        yankee = {'variant': 'heading-sm/semibold', 'children': 'Row buttons'};
        romeo = foxtrot.bind(tango)(romeo, yankee);
        yankee = new Array(4);
        yankee[0] = romeo;
        backup = _closure1_slot12;
        kilo = 25;
        romeo = sequence[kilo];
        romeo = update.bind(tango)(romeo);
        foxtrot = romeo.RowButton;
        romeo = {};
        source = _closure1_slot12;
        sizing = sequence[echo];
        sizing = update.bind(tango)(sizing);
        sizing = sizing.TableRow;
        output = sizing.Icon;
        sizing = {};
        record = sequence[control];
        record = vacuum.bind(tango)(record);
        sizing['source'] = record;
        sizing['variant'] = config;
        sizing = source.bind(tango)(output, sizing);
        romeo['icon'] = sizing;
        sizing = 'Boost your server';
        romeo['label'] = sizing;
        sizing = _closure1_slot10;
        romeo['onPress'] = sizing;
        romeo = backup.bind(tango)(foxtrot, romeo);
        yankee[1] = romeo;
        backup = _closure1_slot12;
        romeo = sequence[kilo];
        romeo = update.bind(tango)(romeo);
        foxtrot = romeo.RowButton;
        romeo = {'label': 'Disabled row button', 'onPress': null, 'disabled': true, 'arrow': false};
        sizing = _closure1_slot10;
        romeo['onPress'] = sizing;
        romeo = backup.bind(tango)(foxtrot, romeo);
        yankee[2] = romeo;
        backup = _closure1_slot12;
        romeo = 26;
        romeo = sequence[romeo];
        foxtrot = vacuum.bind(tango)(romeo);
        romeo = {};
        sizing = {};
        sizing['padding'] = control;
        romeo['style'] = sizing;
        sizing = {'x': 0, 'y': 0};
        romeo['start'] = sizing;
        sizing = {'x': 1, 'y': 0};
        romeo['end'] = sizing;
        sizing = ['red', 'orange', 'yellow', 'green', 'teal', 'blue', 'purple'];
        romeo['colors'] = sizing;
        output = _closure1_slot12;
        kilo = sequence[kilo];
        kilo = update.bind(tango)(kilo);
        sizing = kilo.RowButton;
        kilo = {'icon': null, 'experimental_withBlurBackground': true, 'label': 'Row Button'};
        source = _closure1_slot12;
        echo = sequence[echo];
        echo = update.bind(tango)(echo);
        echo = echo.TableRow;
        update = echo.Icon;
        echo = {};
        control = sequence[control];
        control = vacuum.bind(tango)(control);
        echo['source'] = control;
        control = 'translucent';
        echo['variant'] = control;
        echo = source.bind(tango)(update, echo);
        kilo['icon'] = echo;
        result = _closure1_slot10;
        kilo['onPress'] = result;
        kilo = output.bind(tango)(sizing, kilo);
        romeo['children'] = kilo;
        romeo = backup.bind(tango)(foxtrot, romeo);
        yankee[3] = romeo;
        verify['children'] = yankee;
        verify = golf.bind(tango)(offset, verify);
        options[6] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();