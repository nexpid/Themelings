// app/modules/user_settings/native/design_system/UserSettingsDesignSystemBackdrop.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = function(argFoo) { // Original name: BackdropCard
        entity = argFoo;
        foxtra = entity.buttonLabel;
        result = entity.title;
        output = entity.description;
        michal = entity.blur;
        var _closure2_slot0 = michal;
        michal = entity.setShowBackdrop;
        var _closure2_slot1 = michal;
        entity = entity.setBlurAmount;
        var _closure2_slot2 = entity;
        tangon = _closure1_slot5;
        offset = _closure1_slot0;
        backup = _closure1_slot1;
        entity = 5;
        entity = backup[entity];
        zuuluu = undefined;
        entity = offset.bind(zuuluu)(entity);
        michal = entity.Card;
        entity = {};
        golfie = _closure1_slot6;
        report = 6;
        report = backup[report];
        report = offset.bind(zuuluu)(report);
        oscard = report.Stack;
        report = {};
        option = 12;
        report['spacing'] = option;
        sizing = _closure1_slot5;
        yankee = 7;
        option = backup[yankee];
        option = offset.bind(zuuluu)(option);
        kiloes = option.Text;
        option = {};
        echoed = 'heading-lg/bold';
        option['variant'] = echoed;
        option['children'] = result;
        kiloes = sizing.bind(zuuluu)(kiloes, option);
        option = new Array(3);
        option[0] = kiloes;
        sizing = _closure1_slot5;
        yankee = backup[yankee];
        yankee = offset.bind(zuuluu)(yankee);
        kiloes = yankee.Text;
        yankee = {'variant': 'text-md/normal', 'color': 'text-secondary'};
        yankee['children'] = output;
        yankee = sizing.bind(zuuluu)(kiloes, yankee);
        option[1] = yankee;
        yankee = _closure1_slot5;
        verify = 8;
        verify = backup[verify];
        verify = offset.bind(zuuluu)(verify);
        offset = verify.Button;
        verify = {};
        verify['text'] = foxtra;
        romeon = function() { // Original name: onPress
            tangon = _closure2_slot2;
            zuuluu = _closure2_slot0;
            entity = undefined;
            zuuluu = tangon.bind(entity)(zuuluu);
            zuuluu = _closure2_slot1;
            michal = true;
            michal = zuuluu.bind(entity)(michal);
            return entity;
        };
        verify['onPress'] = romeon;
        verify = yankee.bind(zuuluu)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = golfie.bind(zuuluu)(oscard, report);
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argBaz;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    offset = tangon.StyleSheet;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 16;
    verify['padding'] = yankee;
    tangon['container'] = verify;
    verify = {};
    backup = offset.absoluteFillObject;
    kiloes = verify;
    offset = copyDataProperties(kiloes, backup);
    romeon = 'stretch';
    offset = 'alignItems';
    verify[offset] = romeon;
    romeon = 'center';
    offset = 'justifyContent';
    verify[offset] = romeon;
    offset = 'padding';
    verify[offset] = yankee;
    tangon['backdropContent'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = {};
    golfie = "function UserSettingsDesignSystemBackdropTsx1(){const{withSpring,showBackdrop,SUBTLE_SPRING}=this.__closure;return{opacity:withSpring(showBackdrop?1:0,SUBTLE_SPRING,'animate-always')};}";
    tangon['code'] = golfie;
    var _closure1_slot8 = tangon;
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemBackdrop.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemBackdrop
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            foxtra = function() { // Original name: handleClose
                zuuluu = _closure2_slot1;
                entity = undefined;
                michal = false;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = _closure1_slot7;
            tangon = undefined;
            backup = michal.bind(tangon)();
            offset = _closure1_slot3;
            zuuluu = offset.useState;
            michal = false;
            michal = zuuluu.bind(offset)(michal);
            option = _closure1_slot2;
            golfie = 2;
            michal = option.bind(tangon)(michal, golfie);
            report = 0;
            oscard = michal[report];
            var _closure2_slot0 = oscard;
            zuuluu = 1;
            result = michal[zuuluu];
            var _closure2_slot1 = result;
            verify = offset.useState;
            michal = 'none';
            michal = verify.bind(offset)(michal);
            michal = option.bind(tangon)(michal, golfie);
            source = michal[report];
            sizing = michal[zuuluu];
            golfie = _closure1_slot0;
            verify = _closure1_slot1;
            michal = 9;
            michal = verify[michal];
            zuuluu = golfie.bind(tangon)(michal);
            michal = zuuluu.useAnimatedStyle;
            entity = function() { // Original name: n
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = {};
                    tangon = _closure1_slot0;
                    report = _closure1_slot1;
                    zuuluu = 10;
                    zuuluu = report[zuuluu];
                    golfie = undefined;
                    oscard = tangon.bind(golfie)(zuuluu);
                    report = oscard.withSpring;
                    zuuluu = _closure2_slot0;
                    tangon = 0;
                    if(!zuuluu) { _fun00004_ip = 47; continue _fun00003 }
 44:
                    tangon = 1;
 47:
                    zuuluu = _closure1_slot0;
                    option = _closure1_slot1;
                    michal = 11;
                    michal = option[michal];
                    michal = zuuluu.bind(golfie)(michal);
                    zuuluu = michal.SUBTLE_SPRING;
                    michal = 'animate-always';
                    michal = report.bind(oscard)(tangon, zuuluu, michal);
                    entity['opacity'] = michal;
                    return entity;
                }
            };
            report = {};
            option = 10;
            option = verify[option];
            option = golfie.bind(tangon)(option);
            option = option.withSpring;
            report['withSpring'] = option;
            report['showBackdrop'] = oscard;
            option = 11;
            option = verify[option];
            option = golfie.bind(tangon)(option);
            option = option.SUBTLE_SPRING;
            report['SUBTLE_SPRING'] = option;
            entity['__closure'] = report;
            report = 1929832617927.0;
            entity['__workletHash'] = report;
            report = _closure1_slot8;
            entity['__initData'] = report;
            kiloes = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot6;
            michal = _closure1_slot4;
            entity = {};
            report = backup.container;
            entity['style'] = report;
            option = _closure1_slot6;
            report = 6;
            report = verify[report];
            report = golfie.bind(tangon)(report);
            golfie = report.Stack;
            report = {};
            verify = 24;
            report['spacing'] = verify;
            offset = _closure1_slot5;
            romeon = _closure1_slot9;
            verify = {'title': 'Backdrop', 'description': 'A backdrop is an overlay that appears behind a component to provide separation between the component and the rest of the interface. By default it is a semi-transparent overlay.', 'buttonLabel': 'Show Backdrop', 'blur': 'none'};
            verify['setShowBackdrop'] = result;
            verify['setBlurAmount'] = sizing;
            offset = offset.bind(tangon)(romeon, verify);
            verify = new Array(3);
            verify[0] = offset;
            yankee = _closure1_slot5;
            offset = {'title': 'Subtle Blur', 'description': "Backdrop also supports blur. You can use a subtle blur for a lite-touch obfuscation, like for Context Menus that help create seperation but don't completly lift you out of the context", 'buttonLabel': 'Show Subtle Blur Backdrop', 'blur': 'subtle'};
            offset['setShowBackdrop'] = result;
            offset['setBlurAmount'] = sizing;
            offset = yankee.bind(tangon)(romeon, offset);
            verify[1] = offset;
            yankee = _closure1_slot5;
            offset = {'title': 'Strong Blur', 'description': 'You can use a strong blur for places where you want to completly lift the user out of the context, like for modals', 'buttonLabel': 'Show Strong Blur Backdrop', 'blur': 'strong'};
            offset['setShowBackdrop'] = result;
            offset['setBlurAmount'] = sizing;
            offset = yankee.bind(tangon)(romeon, offset);
            verify[2] = offset;
            report['children'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            if(!oscard) { _fun00002_ip = 652; continue _fun00001 }
 417:
            verify = _closure1_slot6;
            result = _closure1_slot0;
            update = _closure1_slot1;
            golfie = 12;
            golfie = update[golfie];
            golfie = result.bind(tangon)(golfie);
            option = golfie.Dialog;
            golfie = {};
            golfie['onDismiss'] = foxtra;
            romeon = _closure1_slot5;
            offset = 13;
            offset = update[offset];
            offset = result.bind(tangon)(offset);
            yankee = offset.Backdrop;
            offset = {};
            offset['style'] = kiloes;
            offset['blur'] = source;
            offset['onDismiss'] = foxtra;
            yankee = romeon.bind(tangon)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            foxtra = _closure1_slot5;
            romeon = _closure1_slot4;
            yankee = {};
            backup = backup.backdropContent;
            yankee['style'] = backup;
            backup = 'box-none';
            yankee['pointerEvents'] = backup;
            sizing = _closure1_slot5;
            backup = 5;
            backup = update[backup];
            backup = result.bind(tangon)(backup);
            kiloes = backup.Card;
            backup = {};
            echoed = _closure1_slot6;
            output = 7;
            output = update[output];
            output = result.bind(tangon)(output);
            result = output.Text;
            output = {};
            update = 'text-md/normal';
            output['variant'] = update;
            update = ['blur style: '];
            update[1] = source;
            output['children'] = update;
            output = echoed.bind(tangon)(result, output);
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 652:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();