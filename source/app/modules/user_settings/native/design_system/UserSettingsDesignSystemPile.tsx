// app/modules/user_settings/native/design_system/UserSettingsDesignSystemPile.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: SampleCard
        _fun99393: for(var _fun99393_ip = 0; ; ) switch(_fun99393_ip) {
 0:
            entity = argFoo;
            yankee = entity.title;
            options = entity.noScroll;
            verify = entity.children;
            entity = _closure1_slot7;
            tango = undefined;
            report = entity.bind(tango)();
            zulu = _closure1_slot5;
            oscar = _closure1_slot0;
            romeo = _closure1_slot2;
            entity = 6;
            entity = romeo[entity];
            entity = oscar.bind(tango)(entity);
            mike = entity.Stack;
            entity = {};
            offset = 16;
            entity['spacing'] = offset;
            entity['children'] = verify;
            offset = zulu.bind(tango)(mike, entity);
            zulu = _closure1_slot6;
            entity = 7;
            entity = romeo[entity];
            entity = oscar.bind(tango)(entity);
            mike = entity.Card;
            entity = {};
            report = report.card;
            entity['style'] = report;
            verify = _closure1_slot5;
            report = 8;
            report = romeo[report];
            report = oscar.bind(tango)(report);
            oscar = report.Text;
            report = {};
            romeo = 'text-lg/bold';
            report['variant'] = romeo;
            report['children'] = yankee;
            oscar = verify.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            oscar = offset;
            if(options) { _fun99393_ip = 199; continue _fun99393 }
 172:
            verify = _closure1_slot5;
            options = _closure1_slot4;
            golf = {};
            yankee = true;
            golf['horizontal'] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 199:
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    tango = tango.ScrollView;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    golf = {};
    yankee = 12;
    tango = 16;
    offset = {'flexDirection': 'column', 'gap': 12, 'padding': 16};
    golf['container'] = offset;
    offset = {};
    offset['gap'] = yankee;
    golf['card'] = offset;
    golf = options.bind(verify)(golf);
    var _closure1_slot7 = golf;
    options = 4;
    golf = oscar[options];
    golf = report.bind(entity)(golf);
    golf = golf.AvatarSizes;
    verify = golf.XSMALL;
    golf = new Array(5);
    golf[0] = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.REFRESH_MEDIUM_32;
    golf[1] = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.NORMAL;
    golf[2] = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.AvatarSizes;
    verify = verify.LARGE_48;
    golf[3] = verify;
    options = oscar[options];
    options = report.bind(entity)(options);
    options = options.AvatarSizes;
    options = options.XLARGE;
    golf[4] = options;
    var _closure1_slot8 = golf;
    options = 5;
    golf = oscar[options];
    golf = report.bind(entity)(golf);
    golf = golf.GuildIconSizes;
    verify = golf.XSMALL;
    golf = new Array(5);
    golf[0] = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.GuildIconSizes;
    verify = verify.SMALL_32;
    golf[1] = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.GuildIconSizes;
    verify = verify.NORMAL;
    golf[2] = verify;
    verify = oscar[options];
    verify = report.bind(entity)(verify);
    verify = verify.GuildIconSizes;
    verify = verify.LARGE;
    golf[3] = verify;
    options = oscar[options];
    options = report.bind(entity)(options);
    options = options.GuildIconSizes;
    options = options.XLARGE;
    golf[4] = options;
    var _closure1_slot9 = golf;
    golf = ['Clyde', 'Phibi', 'Cap'];
    var _closure1_slot10 = golf;
    golf = ['test', 'cats', 'Evil Marcus', 'robot overlords', 'not a bug', 'O M G'];
    var _closure1_slot11 = golf;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemPile.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemPile
        entity = _closure1_slot7;
        tango = undefined;
        options = entity.bind(tango)();
        zulu = _closure1_slot5;
        mike = _closure1_slot4;
        entity = {};
        golf = _closure1_slot6;
        oscar = _closure1_slot3;
        report = {};
        options = options.container;
        report['style'] = options;
        verify = _closure1_slot5;
        yankee = _closure1_slot12;
        options = {};
        offset = 'Avatar Pile';
        options['title'] = offset;
        sizing = _closure1_slot8;
        backup = sizing.map;
        offset = function(argFoo) {
            report = argFoo;
            var _closure3_slot0 = report;
            tango = _closure1_slot6;
            romeo = _closure1_slot0;
            foxtrot = _closure1_slot2;
            entity = 6;
            entity = foxtrot[entity];
            zulu = undefined;
            entity = romeo.bind(zulu)(entity);
            mike = entity.Stack;
            entity = {};
            options = _closure1_slot5;
            oscar = 8;
            oscar = foxtrot[oscar];
            oscar = romeo.bind(zulu)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'text-md/medium', 'color': 'text-secondary'};
            oscar['children'] = report;
            golf = options.bind(zulu)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            verify = _closure1_slot5;
            golf = 9;
            golf = foxtrot[golf];
            golf = romeo.bind(zulu)(golf);
            options = golf.AvatarPile;
            golf = {};
            golf['size'] = report;
            yankee = _closure1_slot10;
            golf['names'] = yankee;
            yankee = 10;
            backup = foxtrot[yankee];
            backup = romeo.bind(zulu)(backup);
            backup = backup.DEFAULT_AVATARS;
            backup = backup.length;
            golf['totalCount'] = backup;
            yankee = foxtrot[yankee];
            yankee = romeo.bind(zulu)(yankee);
            romeo = yankee.DEFAULT_AVATARS;
            yankee = romeo.map;
            offset = function(argFoo, argBar) {
                report = _closure1_slot5;
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 4;
                entity = zulu[entity];
                tango = undefined;
                zulu = mike.bind(tango)(entity);
                mike = {};
                entity = argFoo;
                mike['source'] = entity;
                entity = _closure3_slot0;
                mike['size'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            offset = yankee.bind(romeo)(offset);
            golf['children'] = offset;
            golf = verify.bind(zulu)(options, golf);
            oscar[1] = golf;
            entity['children'] = oscar;
            entity = tango.bind(zulu)(mike, entity, report);
            return entity;
        };
        offset = backup.bind(sizing)(offset);
        options['children'] = offset;
        verify = verify.bind(tango)(yankee, options);
        options = new Array(6);
        options[0] = verify;
        offset = _closure1_slot5;
        verify = {};
        backup = 'Avatar Pile (with overflow)';
        verify['title'] = backup;
        kilo = sizing.map;
        backup = function(argFoo) {
            report = argFoo;
            var _closure3_slot0 = report;
            tango = _closure1_slot6;
            romeo = _closure1_slot0;
            foxtrot = _closure1_slot2;
            entity = 6;
            entity = foxtrot[entity];
            zulu = undefined;
            entity = romeo.bind(zulu)(entity);
            mike = entity.Stack;
            entity = {};
            options = _closure1_slot5;
            oscar = 8;
            oscar = foxtrot[oscar];
            oscar = romeo.bind(zulu)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'text-md/medium', 'color': 'text-secondary'};
            oscar['children'] = report;
            golf = options.bind(zulu)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            verify = _closure1_slot5;
            golf = 9;
            golf = foxtrot[golf];
            golf = romeo.bind(zulu)(golf);
            options = golf.AvatarPile;
            golf = {};
            golf['size'] = report;
            yankee = _closure1_slot10;
            golf['names'] = yankee;
            yankee = 9500;
            golf['totalCount'] = yankee;
            yankee = 10;
            yankee = foxtrot[yankee];
            yankee = romeo.bind(zulu)(yankee);
            romeo = yankee.DEFAULT_AVATARS;
            yankee = romeo.map;
            offset = function(argFoo, argBar) {
                report = _closure1_slot5;
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 4;
                entity = zulu[entity];
                tango = undefined;
                zulu = mike.bind(tango)(entity);
                mike = {};
                entity = argFoo;
                mike['source'] = entity;
                entity = _closure3_slot0;
                mike['size'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            offset = yankee.bind(romeo)(offset);
            golf['children'] = offset;
            golf = verify.bind(zulu)(options, golf);
            oscar[1] = golf;
            entity['children'] = oscar;
            entity = tango.bind(zulu)(mike, entity, report);
            return entity;
        };
        backup = kilo.bind(sizing)(backup);
        verify['children'] = backup;
        verify = offset.bind(tango)(yankee, verify);
        options[1] = verify;
        offset = _closure1_slot5;
        verify = {};
        backup = 'Avatar Duo Pile';
        verify['title'] = backup;
        kilo = sizing.map;
        backup = function(argFoo) {
            report = argFoo;
            var _closure3_slot0 = report;
            tango = _closure1_slot6;
            romeo = _closure1_slot0;
            kilo = _closure1_slot2;
            entity = 6;
            entity = kilo[entity];
            zulu = undefined;
            entity = romeo.bind(zulu)(entity);
            mike = entity.Stack;
            entity = {};
            options = _closure1_slot5;
            oscar = 8;
            oscar = kilo[oscar];
            oscar = romeo.bind(zulu)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'text-md/medium', 'color': 'text-secondary'};
            oscar['children'] = report;
            golf = options.bind(zulu)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            verify = _closure1_slot5;
            golf = 11;
            golf = kilo[golf];
            golf = romeo.bind(zulu)(golf);
            options = golf.AvatarDuoPile;
            golf = {};
            golf['size'] = report;
            sizing = _closure1_slot10;
            yankee = sizing.slice;
            backup = 0;
            foxtrot = 2;
            yankee = yankee.bind(sizing)(backup, foxtrot);
            golf['names'] = yankee;
            yankee = 10;
            yankee = kilo[yankee];
            yankee = romeo.bind(zulu)(yankee);
            romeo = yankee.DEFAULT_AVATARS;
            yankee = romeo.slice;
            romeo = yankee.bind(romeo)(backup, foxtrot);
            yankee = romeo.map;
            offset = function(argFoo, argBar) {
                report = _closure1_slot5;
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 4;
                entity = zulu[entity];
                tango = undefined;
                zulu = mike.bind(tango)(entity);
                mike = {};
                entity = argFoo;
                mike['source'] = entity;
                entity = _closure3_slot0;
                mike['size'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            offset = yankee.bind(romeo)(offset);
            golf['children'] = offset;
            golf = verify.bind(zulu)(options, golf);
            oscar[1] = golf;
            entity['children'] = oscar;
            entity = tango.bind(zulu)(mike, entity, report);
            return entity;
        };
        backup = kilo.bind(sizing)(backup);
        verify['children'] = backup;
        verify = offset.bind(tango)(yankee, verify);
        options[2] = verify;
        offset = _closure1_slot5;
        verify = {};
        backup = 'Avatar Duo Pile (different sizes)';
        verify['title'] = backup;
        kilo = sizing.map;
        backup = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot6;
            kilo = _closure1_slot0;
            sizing = _closure1_slot2;
            entity = 6;
            entity = sizing[entity];
            zulu = undefined;
            entity = kilo.bind(zulu)(entity);
            mike = entity.Stack;
            entity = {};
            options = _closure1_slot5;
            oscar = 8;
            oscar = sizing[oscar];
            oscar = kilo.bind(zulu)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'text-md/medium', 'color': 'text-secondary'};
            oscar['children'] = report;
            golf = options.bind(zulu)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            verify = _closure1_slot6;
            golf = 11;
            golf = sizing[golf];
            golf = kilo.bind(zulu)(golf);
            options = golf.AvatarDuoPile;
            golf = {};
            offset = new Array(2);
            offset[0] = report;
            backup = 4;
            romeo = sizing[backup];
            romeo = kilo.bind(zulu)(romeo);
            romeo = romeo.AvatarSizes;
            romeo = romeo.NORMAL;
            offset[1] = romeo;
            golf['size'] = offset;
            foxtrot = _closure1_slot10;
            romeo = foxtrot.slice;
            update = 0;
            offset = 2;
            offset = romeo.bind(foxtrot)(update, offset);
            golf['names'] = offset;
            result = _closure1_slot5;
            romeo = _closure1_slot1;
            offset = sizing[backup];
            foxtrot = romeo.bind(zulu)(offset);
            offset = {};
            output = 10;
            echo = sizing[output];
            echo = kilo.bind(zulu)(echo);
            echo = echo.DEFAULT_AVATARS;
            echo = echo[update];
            offset['source'] = echo;
            offset['size'] = report;
            foxtrot = result.bind(zulu)(foxtrot, offset);
            offset = new Array(2);
            offset[0] = foxtrot;
            foxtrot = _closure1_slot5;
            yankee = sizing[backup];
            romeo = romeo.bind(zulu)(yankee);
            yankee = {};
            output = sizing[output];
            output = kilo.bind(zulu)(output);
            result = output.DEFAULT_AVATARS;
            output = 1;
            output = result[output];
            yankee['source'] = output;
            backup = sizing[backup];
            backup = kilo.bind(zulu)(backup);
            backup = backup.AvatarSizes;
            backup = backup.NORMAL;
            yankee['size'] = backup;
            yankee = foxtrot.bind(zulu)(romeo, yankee);
            offset[1] = yankee;
            golf['children'] = offset;
            golf = verify.bind(zulu)(options, golf);
            oscar[1] = golf;
            entity['children'] = oscar;
            entity = tango.bind(zulu)(mike, entity, report);
            return entity;
        };
        backup = kilo.bind(sizing)(backup);
        verify['children'] = backup;
        verify = offset.bind(tango)(yankee, verify);
        options[3] = verify;
        offset = _closure1_slot5;
        verify = {};
        backup = 'Guild Icon Pile (with overflow)';
        verify['title'] = backup;
        sizing = _closure1_slot9;
        kilo = sizing.map;
        backup = function(argFoo) {
            report = argFoo;
            var _closure3_slot0 = report;
            tango = _closure1_slot6;
            options = _closure1_slot0;
            romeo = _closure1_slot2;
            entity = 6;
            entity = romeo[entity];
            zulu = undefined;
            entity = options.bind(zulu)(entity);
            mike = entity.Stack;
            entity = {};
            verify = _closure1_slot5;
            oscar = 8;
            oscar = romeo[oscar];
            oscar = options.bind(zulu)(oscar);
            golf = oscar.Text;
            oscar = {'variant': 'text-md/medium', 'color': 'text-secondary'};
            foxtrot = report.toLowerCase;
            foxtrot = foxtrot.bind(report)();
            oscar['children'] = foxtrot;
            golf = verify.bind(zulu)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            verify = _closure1_slot5;
            golf = 12;
            golf = romeo[golf];
            golf = options.bind(zulu)(golf);
            options = golf.GuildIconPile;
            golf = {};
            golf['size'] = report;
            romeo = _closure1_slot11;
            golf['names'] = romeo;
            yankee = 128;
            golf['totalCount'] = yankee;
            yankee = romeo.map;
            offset = function(argFoo, argBar) {
                report = _closure1_slot5;
                mike = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 5;
                entity = zulu[entity];
                tango = undefined;
                zulu = mike.bind(tango)(entity);
                mike = {};
                entity = argFoo;
                mike['value'] = entity;
                entity = _closure3_slot0;
                mike['size'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            offset = yankee.bind(romeo)(offset);
            golf['children'] = offset;
            golf = verify.bind(zulu)(options, golf);
            oscar[1] = golf;
            entity['children'] = oscar;
            entity = tango.bind(zulu)(mike, entity, report);
            return entity;
        };
        backup = kilo.bind(sizing)(backup);
        verify['children'] = backup;
        verify = offset.bind(tango)(yankee, verify);
        options[4] = verify;
        offset = _closure1_slot6;
        verify = {'title': 'Weird Piles', 'noScroll': true};
        kilo = _closure1_slot6;
        backup = _closure1_slot0;
        sizing = _closure1_slot2;
        romeo = 8;
        romeo = sizing[romeo];
        romeo = backup.bind(tango)(romeo);
        backup = romeo.Text;
        romeo = {'variant': 'text-md/medium', 'color': 'text-secondary'};
        sizing = ['These examples explore the edge cases of the underlying ', '<Pile>', " component and aren't recommended uses."];
        romeo['children'] = sizing;
        backup = kilo.bind(tango)(backup, romeo);
        romeo = new Array(2);
        romeo[0] = backup;
        kilo = new Array(7);
        backup = [1, 1];
        kilo[0] = backup;
        backup = [0.5, 0.5];
        kilo[1] = backup;
        backup = [null, 0.5];
        kilo[2] = backup;
        backup = [0.5, null];
        kilo[3] = backup;
        backup = [0, 0.5];
        kilo[4] = backup;
        backup = [0.5, 0];
        kilo[5] = backup;
        backup = [0, 0];
        kilo[6] = backup;
        backup = kilo.map;
        foxtrot = function(argFoo) {
            _fun99404: for(var _fun99404_ip = 0; ; ) switch(_fun99404_ip) {
 0:
                zulu = argFoo;
                entity = zulu[Symbol.iterator];
                zulu = entity().next;
                tango = zulu().value;
                mike = entity;
                report = undefined;
                mike = mike === report;
                verify = undefined;
                if(mike) { _fun99404_ip = 29; continue _fun99404 }
 26:
                verify = tango;
 29:
                options = undefined;
                if(mike) { _fun99404_ip = 59; continue _fun99404 }
 34:
                tango = zulu().value;
                zulu = entity;
                zulu = zulu === report;
                options = undefined;
                mike = zulu;
                if(zulu) { _fun99404_ip = 59; continue _fun99404 }
 53:
                options = tango;
                mike = zulu;
 59:
                if(mike) { _fun99404_ip = 65; continue _fun99404 }
 62:
                entity.return();
 65:
                tango = _closure1_slot6;
                oscar = _closure1_slot0;
                offset = _closure1_slot2;
                entity = 6;
                entity = offset[entity];
                entity = oscar.bind(report)(entity);
                zulu = entity.Stack;
                mike = {};
                golf = _closure1_slot6;
                entity = 8;
                entity = offset[entity];
                entity = oscar.bind(report)(entity);
                oscar = entity.Text;
                entity = {'variant': 'text-md/medium', 'color': 'text-secondary'};
                backup = null;
                offset = backup != verify;
                romeo = 'null';
                kilo = romeo;
                if(!offset) { _fun99404_ip = 154; continue _fun99404 }
 151:
                kilo = verify;
 154:
                offset = ['depthX='];
                offset[1] = kilo;
                kilo = ', depthY=';
                offset[2] = kilo;
                backup = backup != options;
                if(!backup) { _fun99404_ip = 188; continue _fun99404 }
 185:
                romeo = options;
 188:
                offset[3] = romeo;
                entity['children'] = offset;
                oscar = golf.bind(report)(oscar, entity);
                entity = new Array(3);
                entity[0] = oscar;
                echo = _closure1_slot5;
                sizing = _closure1_slot0;
                output = _closure1_slot2;
                oscar = 13;
                golf = output[oscar];
                golf = sizing.bind(report)(golf);
                offset = golf.Pile;
                golf = {};
                result = 14;
                romeo = output[result];
                source = sizing.bind(report)(romeo);
                kilo = source.getListSummaryLabel;
                backup = _closure1_slot10;
                update = 10;
                romeo = output[update];
                romeo = sizing.bind(report)(romeo);
                romeo = romeo.DEFAULT_AVATARS;
                romeo = romeo.length;
                romeo = kilo.bind(source)(backup, romeo);
                golf['aria-label'] = romeo;
                kilo = 15;
                romeo = output[kilo];
                romeo = sizing.bind(report)(romeo);
                romeo = romeo.CutoutShape;
                romeo = romeo.Circle;
                golf['shape'] = romeo;
                backup = 48;
                golf['size'] = backup;
                romeo = 2;
                golf['gap'] = romeo;
                golf['depthX'] = verify;
                golf['depthY'] = options;
                update = output[update];
                update = sizing.bind(report)(update);
                control = update.DEFAULT_AVATARS;
                source = control.map;
                update = function(argFoo, argBar) {
                    report = _closure1_slot5;
                    zulu = _closure1_slot1;
                    golf = _closure1_slot2;
                    entity = 4;
                    mike = golf[entity];
                    tango = undefined;
                    zulu = zulu.bind(tango)(mike);
                    mike = {};
                    options = argFoo;
                    mike['source'] = options;
                    oscar = _closure1_slot0;
                    entity = golf[entity];
                    entity = oscar.bind(tango)(entity);
                    entity = entity.AvatarSizes;
                    entity = entity.LARGE_48;
                    mike['size'] = entity;
                    entity = argBar;
                    entity = report.bind(tango)(zulu, mike, entity);
                    return entity;
                };
                update = source.bind(control)(update);
                golf['children'] = update;
                golf = echo.bind(report)(offset, golf);
                entity[1] = golf;
                offset = _closure1_slot5;
                oscar = output[oscar];
                oscar = sizing.bind(report)(oscar);
                golf = oscar.Pile;
                oscar = {};
                result = output[result];
                update = sizing.bind(report)(result);
                echo = update.getListSummaryLabel;
                foxtrot = _closure1_slot11;
                result = foxtrot.length;
                result = echo.bind(update)(foxtrot, result);
                oscar['aria-label'] = result;
                kilo = output[kilo];
                kilo = sizing.bind(report)(kilo);
                kilo = kilo.CutoutShape;
                kilo = kilo.RoundedRect;
                oscar['shape'] = kilo;
                oscar['size'] = backup;
                oscar['gap'] = romeo;
                oscar['depthX'] = verify;
                oscar['depthY'] = options;
                romeo = foxtrot.map;
                yankee = function(argFoo, argBar) {
                    report = _closure1_slot5;
                    zulu = _closure1_slot1;
                    golf = _closure1_slot2;
                    entity = 5;
                    mike = golf[entity];
                    tango = undefined;
                    zulu = zulu.bind(tango)(mike);
                    mike = {};
                    options = argFoo;
                    mike['value'] = options;
                    oscar = _closure1_slot0;
                    entity = golf[entity];
                    entity = oscar.bind(tango)(entity);
                    entity = entity.GuildIconSizes;
                    entity = entity.LARGE;
                    mike['size'] = entity;
                    entity = argBar;
                    entity = report.bind(tango)(zulu, mike, entity);
                    return entity;
                };
                yankee = romeo.bind(foxtrot)(yankee);
                oscar['children'] = yankee;
                oscar = offset.bind(report)(golf, oscar);
                entity[2] = oscar;
                mike['children'] = entity;
                entity = global;
                entity = entity.HermesInternal;
                golf = entity.concat;
                oscar = '';
                entity = ',';
                entity = golf.bind(oscar)(verify, entity, options);
                entity = tango.bind(report)(zulu, mike, entity);
                return entity;
            }
        };
        foxtrot = backup.bind(kilo)(foxtrot);
        romeo[1] = foxtrot;
        verify['children'] = romeo;
        verify = offset.bind(tango)(yankee, verify);
        options[5] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();