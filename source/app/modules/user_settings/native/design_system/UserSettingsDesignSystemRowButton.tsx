// app/modules/user_settings/native/design_system/UserSettingsDesignSystemRowButton.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemRowButton.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemRowButton
        tangon = _closure1_slot6;
        zuuluu = _closure1_slot4;
        michal = {};
        option = _closure1_slot5;
        foxtra = _closure1_slot0;
        output = _closure1_slot2;
        entity = 3;
        report = output[entity];
        entity = undefined;
        report = foxtra.bind(entity)(report);
        oscard = report.FormSection;
        report = {};
        verify = 'Row Buttons';
        report['title'] = verify;
        verify = 4;
        offset = output[verify];
        offset = foxtra.bind(entity)(offset);
        yankee = offset.Stack;
        offset = {};
        romeon = {};
        sizing = _closure1_slot1;
        kiloes = 5;
        kiloes = output[kiloes];
        kiloes = sizing.bind(entity)(kiloes);
        kiloes = kiloes.spacing;
        kiloes = kiloes.PX_16;
        romeon['padding'] = kiloes;
        offset['style'] = romeon;
        kiloes = 6;
        romeon = output[kiloes];
        romeon = foxtra.bind(entity)(romeon);
        result = romeon.Text;
        romeon = {'variant': 'text-sm/normal', 'children': 'Row Button Row Buttons are full-width, high-emphasis buttons that are used as primary CTAs in a page.'};
        result = option.bind(entity)(result, romeon);
        romeon = new Array(2);
        romeon[0] = result;
        kiloes = output[kiloes];
        kiloes = foxtra.bind(entity)(kiloes);
        result = kiloes.Text;
        kiloes = {'variant': 'text-sm/normal', 'children': 'Only stack up to 2 Row Buttons in a row to to prevent decision fatigue.'};
        kiloes = option.bind(entity)(result, kiloes);
        romeon[1] = kiloes;
        offset['children'] = romeon;
        offset = tangon.bind(entity)(yankee, offset);
        report['description'] = offset;
        golfie = _closure1_slot3;
        offset = {};
        offset = option.bind(entity)(golfie, offset);
        report['children'] = offset;
        oscard = option.bind(entity)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        offset = {};
        yankee = 16;
        offset['padding'] = yankee;
        oscard['style'] = offset;
        verify = output[verify];
        verify = foxtra.bind(entity)(verify);
        offset = verify.Stack;
        verify = {};
        romeon = 7;
        yankee = output[romeon];
        yankee = foxtra.bind(entity)(yankee);
        result = yankee.RowButton;
        yankee = {'variant': 'primary', 'icon': null, 'label': 'Primary Row Button'};
        kiloes = 8;
        echoed = output[kiloes];
        echoed = sizing.bind(entity)(echoed);
        yankee['icon'] = echoed;
        echoed = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        yankee['onPress'] = echoed;
        result = option.bind(entity)(result, yankee);
        yankee = new Array(7);
        yankee[0] = result;
        result = output[romeon];
        result = foxtra.bind(entity)(result);
        echoed = result.RowButton;
        result = {'variant': 'primary', 'icon': null, 'label': 'Primary Row Button', 'subLabel': 'I am a high emphasis button with a subLabel'};
        update = output[kiloes];
        update = sizing.bind(entity)(update);
        result['icon'] = update;
        update = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        result['onPress'] = update;
        result = option.bind(entity)(echoed, result);
        yankee[1] = result;
        result = output[romeon];
        result = foxtra.bind(entity)(result);
        echoed = result.RowButton;
        result = {'variant': 'secondary', 'icon': null, 'label': 'Secondary Row Button'};
        update = output[kiloes];
        update = sizing.bind(entity)(update);
        result['icon'] = update;
        update = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        result['onPress'] = update;
        result = option.bind(entity)(echoed, result);
        yankee[2] = result;
        result = output[romeon];
        result = foxtra.bind(entity)(result);
        echoed = result.RowButton;
        result = {'icon': null, 'label': 'Secondary Row Button', 'subLabel': 'I am a high emphasis button with a subLabel'};
        update = output[kiloes];
        update = sizing.bind(entity)(update);
        result['icon'] = update;
        update = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        result['onPress'] = update;
        result = option.bind(entity)(echoed, result);
        yankee[3] = result;
        result = output[romeon];
        result = foxtra.bind(entity)(result);
        echoed = result.RowButton;
        result = {'icon': null, 'label': 'Secondary Row Button', 'subLabel': 'I am a high-emphasis button with more text. You can fit quite a lot of text in a row button. The text will continue to wrap'};
        update = output[kiloes];
        update = sizing.bind(entity)(update);
        result['icon'] = update;
        update = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        result['onPress'] = update;
        result = option.bind(entity)(echoed, result);
        yankee[4] = result;
        result = output[romeon];
        result = foxtra.bind(entity)(result);
        echoed = result.RowButton;
        result = {'icon': null, 'label': 'Row Button', 'subLabel': 'With a custom RowButton.Icon'};
        update = output[romeon];
        update = foxtra.bind(entity)(update);
        update = update.RowButton;
        source = update.Icon;
        update = {};
        ctrled = output[kiloes];
        ctrled = sizing.bind(entity)(ctrled);
        update['source'] = ctrled;
        ctrled = 'boosting-pink';
        update['variant'] = ctrled;
        update = option.bind(entity)(source, update);
        result['icon'] = update;
        update = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        result['onPress'] = update;
        result = option.bind(entity)(echoed, result);
        yankee[5] = result;
        romeon = output[romeon];
        romeon = foxtra.bind(entity)(romeon);
        foxtra = romeon.RowButton;
        romeon = {'icon': null, 'label': 'Row Button', 'subLabel': 'I am disabled', 'onPress': null, 'disabled': true};
        kiloes = output[kiloes];
        kiloes = sizing.bind(entity)(kiloes);
        romeon['icon'] = kiloes;
        backup = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        romeon['onPress'] = backup;
        romeon = option.bind(entity)(foxtra, romeon);
        yankee[6] = romeon;
        verify['children'] = yankee;
        verify = tangon.bind(entity)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(entity)(golfie, oscard);
        report[1] = oscard;
        michal['children'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();