// app/modules/user_settings/native/design_system/UserSettingsDesignSystemButtonActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = new Array(3);
    golf = {'label': 'Small', 'value': 'sm'};
    tango[0] = golf;
    golf = {'label': 'Medium', 'value': 'md'};
    tango[1] = golf;
    golf = {'label': 'Large', 'value': 'lg'};
    tango[2] = golf;
    var _closure1_slot6 = tango;
    tango = new Array(2);
    golf = {'value': 6, 'label': '6'};
    tango[0] = golf;
    golf = {'value': 8, 'label': '8'};
    tango[1] = golf;
    var _closure1_slot7 = tango;
    tango = 7;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemButtonActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemButtonActionSheet
        mike = _closure1_slot1;
        kilo = _closure1_slot2;
        entity = 2;
        entity = kilo[entity];
        tango = undefined;
        entity = mike.bind(tango)(entity);
        result = entity.bind(tango)();
        var _closure2_slot0 = result;
        report = _closure1_slot3;
        zulu = report.useCallback;
        mike = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 2;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.setState;
                entity = {};
                tango = _closure3_slot0;
                entity['buttonSize'] = tango;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        var _closure2_slot1 = entity;
        zulu = report.useCallback;
        mike = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 2;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.setState;
                entity = {};
                tango = _closure3_slot0;
                entity['buttonScale'] = tango;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        var _closure2_slot2 = entity;
        zulu = report.useCallback;
        mike = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 2;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.setState;
                entity = {};
                tango = _closure3_slot0;
                entity['showDisabled'] = tango;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        var _closure2_slot3 = entity;
        zulu = report.useCallback;
        mike = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 2;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.setState;
                entity = {};
                tango = _closure3_slot0;
                entity['showIcon'] = tango;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        var _closure2_slot4 = entity;
        zulu = report.useCallback;
        mike = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 2;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.setState;
                entity = {};
                tango = _closure3_slot0;
                entity['iconPosition'] = tango;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        var _closure2_slot5 = entity;
        zulu = report.useCallback;
        mike = function(argFoo) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 3;
            zulu = zulu[entity];
            entity = undefined;
            tango = tango.bind(entity)(zulu);
            zulu = tango.batchUpdates;
            mike = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 2;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.setState;
                entity = {};
                tango = _closure3_slot0;
                entity['enableLoadingState'] = tango;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = zulu.bind(tango)(mike);
            return entity;
        };
        entity = new Array(0);
        entity = zulu.bind(report)(mike, entity);
        var _closure2_slot6 = entity;
        zulu = _closure1_slot5;
        foxtrot = _closure1_slot0;
        entity = 4;
        entity = kilo[entity];
        entity = foxtrot.bind(tango)(entity);
        mike = entity.BottomSheet;
        entity = {};
        backup = _closure1_slot4;
        report = 5;
        report = kilo[report];
        report = foxtrot.bind(tango)(report);
        oscar = report.BottomSheetTitleHeader;
        report = {};
        golf = 'Button Settings';
        report['title'] = golf;
        oscar = backup.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        yankee = 6;
        oscar = kilo[yankee];
        oscar = foxtrot.bind(tango)(oscar);
        golf = oscar.Form;
        oscar = {};
        options = kilo[yankee];
        options = foxtrot.bind(tango)(options);
        verify = options.FormSection;
        options = {'title': 'Button Size', 'accessibilityRole': 'radiogroup'};
        echo = _closure1_slot6;
        sizing = echo.map;
        offset = function(argFoo) {
            entity = argFoo;
            foxtrot = entity.label;
            report = entity.value;
            var _closure3_slot0 = report;
            tango = _closure1_slot5;
            mike = _closure1_slot3;
            zulu = mike.Fragment;
            mike = {};
            verify = _closure1_slot4;
            options = _closure1_slot0;
            offset = _closure1_slot2;
            golf = 6;
            oscar = offset[golf];
            entity = undefined;
            oscar = options.bind(entity)(oscar);
            yankee = oscar.FormRadioRow;
            oscar = {};
            backup = 'right';
            oscar['align'] = backup;
            backup = _closure2_slot0;
            backup = backup.buttonSize;
            backup = backup === report;
            oscar['selected'] = backup;
            oscar['label'] = foxtrot;
            romeo = function() { // Original name: onPress
                zulu = _closure2_slot1;
                mike = _closure3_slot0;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            oscar['onPress'] = romeo;
            romeo = {};
            foxtrot = true;
            romeo['selected'] = foxtrot;
            oscar['accessibilityState'] = romeo;
            romeo = 'radio';
            oscar['accessibilityRole'] = romeo;
            yankee = verify.bind(entity)(yankee, oscar);
            oscar = new Array(2);
            oscar[0] = yankee;
            golf = offset[golf];
            golf = options.bind(entity)(golf);
            options = golf.FormDivider;
            golf = {};
            golf = verify.bind(entity)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        offset = sizing.bind(echo)(offset);
        options['children'] = offset;
        verify = backup.bind(tango)(verify, options);
        options = new Array(6);
        options[0] = verify;
        verify = kilo[yankee];
        verify = foxtrot.bind(tango)(verify);
        offset = verify.FormSection;
        verify = {'title': 'Button Scale', 'accessibilityRole': 'radiogroup'};
        sizing = kilo[yankee];
        sizing = foxtrot.bind(tango)(sizing);
        echo = sizing.FormHint;
        sizing = {};
        update = 'The amount in pixels that the button width will scale when pressed';
        sizing['children'] = update;
        echo = backup.bind(tango)(echo, sizing);
        sizing = new Array(2);
        sizing[0] = echo;
        update = _closure1_slot7;
        echo = update.map;
        output = function(argFoo) {
            entity = argFoo;
            foxtrot = entity.label;
            report = entity.value;
            var _closure3_slot0 = report;
            tango = _closure1_slot5;
            mike = _closure1_slot3;
            zulu = mike.Fragment;
            mike = {};
            verify = _closure1_slot4;
            options = _closure1_slot0;
            offset = _closure1_slot2;
            golf = 6;
            oscar = offset[golf];
            entity = undefined;
            oscar = options.bind(entity)(oscar);
            yankee = oscar.FormRadioRow;
            oscar = {};
            backup = 'right';
            oscar['align'] = backup;
            backup = _closure2_slot0;
            backup = backup.buttonScale;
            backup = backup === report;
            oscar['selected'] = backup;
            oscar['label'] = foxtrot;
            romeo = function() { // Original name: onPress
                zulu = _closure2_slot2;
                mike = _closure3_slot0;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            oscar['onPress'] = romeo;
            romeo = {};
            foxtrot = true;
            romeo['selected'] = foxtrot;
            oscar['accessibilityState'] = romeo;
            romeo = 'radio';
            oscar['accessibilityRole'] = romeo;
            yankee = verify.bind(entity)(yankee, oscar);
            oscar = new Array(2);
            oscar[0] = yankee;
            golf = offset[golf];
            golf = options.bind(entity)(golf);
            options = golf.FormDivider;
            golf = {};
            golf = verify.bind(entity)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        output = echo.bind(update)(output);
        sizing[1] = output;
        verify['children'] = sizing;
        verify = zulu.bind(tango)(offset, verify);
        options[1] = verify;
        verify = kilo[yankee];
        verify = foxtrot.bind(tango)(verify);
        offset = verify.FormSection;
        verify = {};
        sizing = kilo[yankee];
        sizing = foxtrot.bind(tango)(sizing);
        output = sizing.FormSwitchRow;
        sizing = {};
        echo = 'Disabled';
        sizing['label'] = echo;
        echo = result.showDisabled;
        sizing['value'] = echo;
        echo = function(argFoo) { // Original name: onValueChange
            zulu = _closure2_slot3;
            mike = undefined;
            entity = argFoo;
            entity = zulu.bind(mike)(entity);
            return entity;
        };
        sizing['onValueChange'] = echo;
        sizing = backup.bind(tango)(output, sizing);
        verify['children'] = sizing;
        verify = backup.bind(tango)(offset, verify);
        options[2] = verify;
        verify = kilo[yankee];
        verify = foxtrot.bind(tango)(verify);
        offset = verify.FormSection;
        verify = {};
        sizing = kilo[yankee];
        sizing = foxtrot.bind(tango)(sizing);
        output = sizing.FormSwitchRow;
        sizing = {};
        echo = 'Show Icons';
        sizing['label'] = echo;
        result = result.showIcon;
        sizing['value'] = result;
        result = function(argFoo) { // Original name: onValueChange
            zulu = _closure2_slot4;
            mike = undefined;
            entity = argFoo;
            entity = zulu.bind(mike)(entity);
            return entity;
        };
        sizing['onValueChange'] = result;
        sizing = backup.bind(tango)(output, sizing);
        verify['children'] = sizing;
        verify = backup.bind(tango)(offset, verify);
        options[3] = verify;
        verify = kilo[yankee];
        verify = foxtrot.bind(tango)(verify);
        offset = verify.FormSection;
        verify = {'title': 'Icon Position', 'accessibilityRole': 'radiogroup'};
        sizing = kilo[yankee];
        sizing = foxtrot.bind(tango)(sizing);
        output = sizing.FormHint;
        sizing = {};
        result = 'Whether to show the example icon on the left (default) or right.';
        sizing['children'] = result;
        output = backup.bind(tango)(output, sizing);
        sizing = new Array(2);
        sizing[0] = output;
        echo = ['start', 'end'];
        result = echo.map;
        output = function(argFoo) {
            report = argFoo;
            var _closure3_slot0 = report;
            tango = _closure1_slot5;
            mike = _closure1_slot3;
            zulu = mike.Fragment;
            mike = {};
            verify = _closure1_slot4;
            options = _closure1_slot0;
            offset = _closure1_slot2;
            golf = 6;
            oscar = offset[golf];
            entity = undefined;
            oscar = options.bind(entity)(oscar);
            yankee = oscar.FormRadioRow;
            oscar = {};
            foxtrot = 'right';
            oscar['align'] = foxtrot;
            foxtrot = _closure2_slot0;
            backup = foxtrot.iconPosition;
            backup = backup === report;
            oscar['selected'] = backup;
            oscar['label'] = report;
            romeo = function() { // Original name: onPress
                zulu = _closure2_slot5;
                mike = _closure3_slot0;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            oscar['onPress'] = romeo;
            romeo = {};
            foxtrot = foxtrot.iconPosition;
            foxtrot = foxtrot === report;
            romeo['selected'] = foxtrot;
            oscar['accessibilityState'] = romeo;
            romeo = 'radio';
            oscar['accessibilityRole'] = romeo;
            yankee = verify.bind(entity)(yankee, oscar);
            oscar = new Array(2);
            oscar[0] = yankee;
            golf = offset[golf];
            golf = options.bind(entity)(golf);
            options = golf.FormDivider;
            golf = {};
            golf = verify.bind(entity)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        output = result.bind(echo)(output);
        sizing[1] = output;
        verify['children'] = sizing;
        verify = zulu.bind(tango)(offset, verify);
        options[4] = verify;
        verify = kilo[yankee];
        verify = foxtrot.bind(tango)(verify);
        offset = verify.FormSection;
        verify = {'title': 'Loading state', 'accessibilityRole': 'radiogroup'};
        yankee = kilo[yankee];
        yankee = foxtrot.bind(tango)(yankee);
        foxtrot = yankee.FormHint;
        yankee = {};
        kilo = 'Whether or not to show a loading state when a button is pressed';
        yankee['children'] = kilo;
        foxtrot = backup.bind(tango)(foxtrot, yankee);
        yankee = new Array(2);
        yankee[0] = foxtrot;
        backup = new Array(2);
        foxtrot = true;
        backup[0] = foxtrot;
        foxtrot = false;
        backup[1] = foxtrot;
        foxtrot = backup.map;
        romeo = function(argFoo) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                foxtrot = argFoo;
                var _closure3_slot0 = foxtrot;
                report = _closure1_slot5;
                entity = _closure1_slot3;
                tango = entity.Fragment;
                zulu = {};
                verify = _closure1_slot4;
                oscar = _closure1_slot0;
                entity = _closure1_slot2;
                offset = 6;
                entity = entity[offset];
                mike = undefined;
                entity = oscar.bind(mike)(entity);
                options = entity.FormRadioRow;
                entity = {};
                oscar = 'right';
                entity['align'] = oscar;
                oscar = _closure2_slot0;
                oscar = oscar.enableLoadingState;
                oscar = oscar === foxtrot;
                entity['selected'] = oscar;
                oscar = true;
                oscar = oscar === foxtrot;
                backup = 'Disabled';
                if(!oscar) { _fun00002_ip = 109; continue _fun00001 }
 105:
                backup = 'Enabled';
 109:
                entity['label'] = backup;
                yankee = function() { // Original name: onPress
                    zulu = _closure2_slot6;
                    mike = _closure3_slot0;
                    entity = undefined;
                    entity = zulu.bind(entity)(mike);
                    return entity;
                };
                entity['onPress'] = yankee;
                yankee = {};
                romeo = _closure2_slot0;
                romeo = romeo.enableLoadingState;
                romeo = romeo === foxtrot;
                yankee['selected'] = romeo;
                entity['accessibilityState'] = yankee;
                yankee = 'radio';
                entity['accessibilityRole'] = yankee;
                options = verify.bind(mike)(options, entity);
                entity = new Array(2);
                entity[0] = options;
                verify = _closure1_slot4;
                options = _closure1_slot0;
                golf = _closure1_slot2;
                golf = golf[offset];
                golf = options.bind(mike)(golf);
                options = golf.FormDivider;
                golf = {};
                golf = verify.bind(mike)(options, golf);
                entity[1] = golf;
                zulu['children'] = entity;
                entity = 'disabled';
                if(!oscar) { _fun00002_ip = 226; continue _fun00001 }
 222:
                entity = 'enabled';
 226:
                entity = report.bind(mike)(tango, zulu, entity);
                return entity;
            }
        };
        romeo = foxtrot.bind(backup)(romeo);
        yankee[1] = romeo;
        verify['children'] = yankee;
        verify = zulu.bind(tango)(offset, verify);
        options[5] = verify;
        oscar['children'] = options;
        oscar = zulu.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();