// app/modules/user_settings/native/design_system/UserSettingsDesignSystemTextInput.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: Sample
        entity = argFoo;
        options = entity.children;
        entity = _closure1_slot8;
        tango = undefined;
        golf = entity.bind(tango)();
        zulu = _closure1_slot6;
        oscar = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 6;
        entity = verify[entity];
        entity = oscar.bind(tango)(entity);
        mike = entity.Card;
        entity = {};
        offset = 'low';
        entity['shadow'] = offset;
        golf = golf.sample;
        entity['style'] = golf;
        golf = _closure1_slot6;
        report = 7;
        report = verify[report];
        report = oscar.bind(tango)(report);
        oscar = report.Stack;
        report = {};
        verify = 24;
        report['spacing'] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = function(argFoo) { // Original name: InputUsername
        _fun99271: for(var _fun99271_ip = 0; ; ) switch(_fun99271_ip) {
 0:
            golf = argFoo;
            offset = golf.defaultValue;
            zulu = _closure1_slot4;
            mike = zulu.useState;
            entity = null;
            tango = entity != offset;
            options = 'default';
            entity = options;
            if(!tango) { _fun99271_ip = 63; continue _fun99271 }
 39:
            verify = offset.includes;
            tango = ' ';
            tango = verify.bind(offset)(tango);
            entity = options;
            if(!tango) { _fun99271_ip = 63; continue _fun99271 }
 59:
            entity = 'error';
 63:
            zulu = mike.bind(zulu)(entity);
            mike = _closure1_slot3;
            tango = undefined;
            entity = 2;
            mike = mike.bind(tango)(zulu, entity);
            entity = 0;
            verify = mike[entity];
            entity = 1;
            entity = mike[entity];
            var _closure2_slot0 = entity;
            zulu = _closure1_slot6;
            mike = _closure1_slot0;
            options = _closure1_slot2;
            entity = 8;
            entity = options[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.TextInput;
            entity = {};
            romeo = entity;
            yankee = golf;
            golf = copyDataProperties(romeo, yankee);
            golf = 'status';
            entity[golf] = verify;
            golf = 'error';
            options = undefined;
            if(!(golf === verify)) { _fun99271_ip = 167; continue _fun99271 }
 161:
            options = "Username can't contain spaces";
 167:
            golf = 'errorMessage';
            entity[golf] = options;
            options = 'Username';
            golf = 'label';
            entity[golf] = options;
            golf = _closure1_slot0;
            options = _closure1_slot2;
            oscar = 9;
            oscar = options[oscar];
            oscar = golf.bind(tango)(oscar);
            golf = oscar.AtIcon;
            oscar = 'leadingIcon';
            entity[oscar] = golf;
            oscar = function(argFoo) { // Original name: onChange
                _fun99272: for(var _fun99272_ip = 0; ; ) switch(_fun99272_ip) {
 0:
                    tango = argFoo;
                    zulu = _closure2_slot0;
                    mike = tango.includes;
                    entity = ' ';
                    entity = mike.bind(tango)(entity);
                    mike = 'default';
                    if(!entity) { _fun99272_ip = 35; continue _fun99272 }
 31:
                    mike = 'error';
 35:
                    entity = undefined;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                }
            };
            report = 'onChange';
            entity[report] = oscar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = function(argFoo) { // Original name: GhostInputUsername
        _fun99273: for(var _fun99273_ip = 0; ; ) switch(_fun99273_ip) {
 0:
            oscar = argFoo;
            offset = oscar.defaultValue;
            tango = _closure1_slot4;
            zulu = tango.useState;
            mike = null;
            golf = mike != offset;
            options = 'default';
            mike = options;
            if(!golf) { _fun99273_ip = 63; continue _fun99273 }
 39:
            verify = offset.includes;
            golf = ' ';
            golf = verify.bind(offset)(golf);
            mike = options;
            if(!golf) { _fun99273_ip = 63; continue _fun99273 }
 59:
            mike = 'error';
 63:
            golf = zulu.bind(tango)(mike);
            zulu = _closure1_slot3;
            tango = undefined;
            mike = 2;
            zulu = zulu.bind(tango)(golf, mike);
            mike = 0;
            options = zulu[mike];
            mike = 1;
            mike = zulu[mike];
            var _closure2_slot0 = mike;
            zulu = _closure1_slot6;
            mike = _closure1_slot0;
            golf = _closure1_slot2;
            entity = 10;
            entity = golf[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.GhostInput;
            entity = {};
            romeo = entity;
            yankee = oscar;
            oscar = copyDataProperties(romeo, yankee);
            oscar = 'status';
            entity[oscar] = options;
            oscar = 'error';
            golf = undefined;
            if(!(oscar === options)) { _fun99273_ip = 167; continue _fun99273 }
 161:
            golf = "Username can't contain spaces";
 167:
            oscar = 'errorMessage';
            entity[oscar] = golf;
            oscar = function(argFoo) { // Original name: onChange
                _fun99274: for(var _fun99274_ip = 0; ; ) switch(_fun99274_ip) {
 0:
                    tango = argFoo;
                    zulu = _closure2_slot0;
                    mike = tango.includes;
                    entity = ' ';
                    entity = mike.bind(tango)(entity);
                    mike = 'default';
                    if(!entity) { _fun99274_ip = 35; continue _fun99274 }
 31:
                    mike = 'error';
 35:
                    entity = undefined;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                }
            };
            report = 'onChange';
            entity[report] = oscar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot11 = entity;
    entity = function() { // Original name: GhostInputActionSheet
        tango = _closure1_slot7;
        golf = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 11;
        entity = verify[entity];
        zulu = undefined;
        entity = golf.bind(zulu)(entity);
        mike = entity.BottomSheet;
        entity = {};
        options = _closure1_slot6;
        offset = 12;
        report = verify[offset];
        report = golf.bind(zulu)(report);
        oscar = report.BottomSheetTitleHeader;
        report = {};
        yankee = 'Ghost Input - Centered';
        report['title'] = yankee;
        oscar = options.bind(zulu)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        options = _closure1_slot6;
        oscar = 7;
        oscar = verify[oscar];
        oscar = golf.bind(zulu)(oscar);
        golf = oscar.Stack;
        oscar = {};
        verify = {};
        verify['padding'] = offset;
        oscar['style'] = verify;
        yankee = _closure1_slot6;
        offset = _closure1_slot9;
        verify = {};
        foxtrot = _closure1_slot11;
        romeo = {'placeholder': '@wumpus', 'description': 'You can use up to 16 alpha-numeric characters'};
        romeo = yankee.bind(zulu)(foxtrot, romeo);
        verify['children'] = romeo;
        verify = yankee.bind(zulu)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(zulu)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    var _closure1_slot12 = entity;
    entity = function() { // Original name: GhostInputActionSheetLeftAligned
        tango = _closure1_slot7;
        golf = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 11;
        entity = verify[entity];
        zulu = undefined;
        entity = golf.bind(zulu)(entity);
        mike = entity.BottomSheet;
        entity = {};
        options = _closure1_slot6;
        offset = 12;
        report = verify[offset];
        report = golf.bind(zulu)(report);
        oscar = report.BottomSheetTitleHeader;
        report = {};
        yankee = 'Ghost Input - Left Aligned';
        report['title'] = yankee;
        oscar = options.bind(zulu)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        options = _closure1_slot6;
        oscar = 7;
        oscar = verify[oscar];
        oscar = golf.bind(zulu)(oscar);
        golf = oscar.Stack;
        oscar = {};
        verify = {};
        verify['padding'] = offset;
        oscar['style'] = verify;
        yankee = _closure1_slot6;
        offset = _closure1_slot9;
        verify = {};
        foxtrot = _closure1_slot11;
        romeo = {'placeholder': '@wumpus', 'description': 'You can use up to 16 alpha-numeric characters', 'isCentered': false, 'size': 'md'};
        romeo = yankee.bind(zulu)(foxtrot, romeo);
        verify['children'] = romeo;
        verify = yankee.bind(zulu)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(zulu)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = function() { // Original name: CustomAttachmentExample
        _fun99277: for(var _fun99277_ip = 0; ; ) switch(_fun99277_ip) {
 0:
            zulu = _closure1_slot4;
            mike = zulu.useState;
            entity = 'default';
            mike = mike.bind(zulu)(entity);
            entity = _closure1_slot3;
            tango = undefined;
            options = 2;
            entity = entity.bind(tango)(mike, options);
            zulu = 0;
            offset = entity[zulu];
            mike = 1;
            entity = entity[mike];
            var _closure2_slot0 = entity;
            verify = _closure1_slot4;
            golf = verify.useState;
            entity = '';
            golf = golf.bind(verify)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tango)(golf, options);
            golf = entity[zulu];
            entity = entity[mike];
            var _closure2_slot1 = entity;
            zulu = _closure1_slot6;
            mike = _closure1_slot0;
            options = _closure1_slot2;
            entity = 8;
            entity = options[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.TextInput;
            entity = {};
            entity['status'] = offset;
            verify = 'error';
            options = undefined;
            if(!(verify === offset)) { _fun99277_ip = 147; continue _fun99277 }
 141:
            options = "Username can't contain spaces";
 147:
            entity['errorMessage'] = options;
            options = 'Pressable Attachment';
            entity['label'] = options;
            entity['value'] = golf;
            golf = {};
            options = function() { // Original name: onPress
                zulu = _closure2_slot1;
                mike = undefined;
                entity = 'You pressed the icon';
                entity = zulu.bind(mike)(entity);
                return entity;
            };
            golf['onPress'] = options;
            options = 'Press';
            golf['accessibilityLabel'] = options;
            entity['trailingPressableProps'] = golf;
            golf = _closure1_slot0;
            options = _closure1_slot2;
            oscar = 9;
            oscar = options[oscar];
            oscar = golf.bind(tango)(oscar);
            oscar = oscar.AtIcon;
            entity['trailingIcon'] = oscar;
            report = function(argFoo) { // Original name: onChange
                _fun99279: for(var _fun99279_ip = 0; ; ) switch(_fun99279_ip) {
 0:
                    report = argFoo;
                    zulu = _closure2_slot1;
                    entity = undefined;
                    zulu = zulu.bind(entity)(report);
                    zulu = _closure2_slot0;
                    tango = report.includes;
                    mike = ' ';
                    tango = tango.bind(report)(mike);
                    mike = 'default';
                    if(!tango) { _fun99279_ip = 46; continue _fun99279 }
 42:
                    mike = 'error';
 46:
                    mike = zulu.bind(entity)(mike);
                    return entity;
                }
            };
            entity['onChange'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tango['container'] = verify;
    verify = {};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xl;
    verify['borderRadius'] = offset;
    tango['sample'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 24;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemTextInput.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemTextInput
        entity = _closure1_slot8;
        tango = undefined;
        options = entity.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot5;
        entity = {};
        golf = _closure1_slot7;
        offset = _closure1_slot0;
        romeo = _closure1_slot2;
        report = 7;
        report = romeo[report];
        report = offset.bind(tango)(report);
        oscar = report.Stack;
        report = {};
        verify = 24;
        report['spacing'] = verify;
        options = options.container;
        report['style'] = options;
        verify = _closure1_slot7;
        kilo = _closure1_slot9;
        options = {};
        sizing = _closure1_slot6;
        output = 8;
        foxtrot = romeo[output];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.TextInput;
        foxtrot = {'label': 'Input Label', 'placeholder': 'Placeholder text', 'description': 'Descriptions give context for the input.', 'errorMessage': 'Error messages communicate invalid states.'};
        backup = sizing.bind(tango)(backup, foxtrot);
        foxtrot = new Array(3);
        foxtrot[0] = backup;
        update = _closure1_slot6;
        sizing = 13;
        backup = romeo[sizing];
        backup = offset.bind(tango)(backup);
        echo = backup.TextArea;
        backup = {'label': 'Text Area', 'maxLength': 100, 'placeholder': 'Multiline inputs use TextArea'};
        backup = update.bind(tango)(echo, backup);
        foxtrot[1] = backup;
        update = _closure1_slot6;
        backup = romeo[output];
        backup = offset.bind(tango)(backup);
        echo = backup.TextInput;
        backup = {'label': 'Password', 'secureTextEntry': true, 'placeholder': 'Password', 'isClearable': true};
        backup = update.bind(tango)(echo, backup);
        foxtrot[2] = backup;
        options['children'] = foxtrot;
        verify = verify.bind(tango)(kilo, options);
        options = new Array(40);
        options[0] = verify;
        echo = _closure1_slot6;
        verify = 14;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Sizing'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[1] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'All inputs except TextArea accept a size prop, either sm, md, or lg. By default, inputs will use the large variant.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[2] = foxtrot;
        backup = _closure1_slot7;
        foxtrot = {};
        source = _closure1_slot6;
        echo = romeo[output];
        echo = offset.bind(tango)(echo);
        update = echo.TextInput;
        echo = {'label': 'Small', 'size': 'sm'};
        update = source.bind(tango)(update, echo);
        echo = new Array(3);
        echo[0] = update;
        control = _closure1_slot6;
        update = romeo[output];
        update = offset.bind(tango)(update);
        source = update.TextInput;
        update = {'label': 'Medium', 'size': 'md'};
        update = control.bind(tango)(source, update);
        echo[1] = update;
        control = _closure1_slot6;
        update = romeo[output];
        update = offset.bind(tango)(update);
        source = update.TextInput;
        update = {};
        vacuum = 'Large (default)';
        update['label'] = vacuum;
        update = control.bind(tango)(source, update);
        echo[2] = update;
        foxtrot['children'] = echo;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[3] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Attachments'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[4] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'Inputs can have either text and icon attachments, either on the leading or trailing edge. If both text and icon are given for a single side, the icon will take precedence.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[5] = foxtrot;
        backup = _closure1_slot7;
        foxtrot = {};
        source = _closure1_slot6;
        echo = romeo[output];
        echo = offset.bind(tango)(echo);
        update = echo.TextInput;
        echo = {};
        control = 'Leading icon';
        echo['label'] = control;
        vacuum = 15;
        control = romeo[vacuum];
        control = offset.bind(tango)(control);
        control = control.TextIcon;
        echo['leadingIcon'] = control;
        update = source.bind(tango)(update, echo);
        echo = new Array(4);
        echo[0] = update;
        control = _closure1_slot6;
        update = romeo[output];
        update = offset.bind(tango)(update);
        source = update.TextInput;
        update = {};
        sequence = 'Trailing icon';
        update['label'] = sequence;
        vacuum = romeo[vacuum];
        vacuum = offset.bind(tango)(vacuum);
        vacuum = vacuum.TextIcon;
        update['trailingIcon'] = vacuum;
        update = control.bind(tango)(source, update);
        echo[1] = update;
        control = _closure1_slot6;
        update = romeo[output];
        update = offset.bind(tango)(update);
        source = update.TextInput;
        update = {'label': 'Leading text', 'leadingText': 'To:'};
        update = control.bind(tango)(source, update);
        echo[2] = update;
        control = _closure1_slot6;
        update = romeo[output];
        update = offset.bind(tango)(update);
        source = update.TextInput;
        update = {'label': 'Combination', 'leadingText': 'To:'};
        vacuum = 9;
        vacuum = romeo[vacuum];
        vacuum = offset.bind(tango)(vacuum);
        vacuum = vacuum.AtIcon;
        update['trailingIcon'] = vacuum;
        update = control.bind(tango)(source, update);
        echo[3] = update;
        foxtrot['children'] = echo;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[6] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'Text attachments should be kept as short as possible to preserve space for the user to see their input value while editing.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[7] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Pressable Attachments'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[8] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'Inputs do not allow custom nodes to be passed as leading or trailing attachments, but they can be made interactive by passing `*PressableProps` respectively. If given, the attachment will be wrapped by a Pressable and have the props passed to it.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[9] = foxtrot;
        backup = _closure1_slot6;
        foxtrot = {};
        update = _closure1_slot14;
        echo = {};
        echo = backup.bind(tango)(update, echo);
        foxtrot['children'] = echo;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[10] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'Note that the props do not allow for changing the styling of the pressable. Styling is instead handled by the Input itself.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[11] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Rounding'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[12] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'All inputs except TextArea can use the isRound prop to fully round out the sides. Round variants should only be used when adjacent to another round element, like an IconButton.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[13] = foxtrot;
        backup = _closure1_slot6;
        foxtrot = {};
        source = _closure1_slot7;
        echo = 16;
        echo = romeo[echo];
        echo = offset.bind(tango)(echo);
        update = echo.Input;
        echo = {};
        sequence = _closure1_slot6;
        control = 17;
        control = romeo[control];
        control = offset.bind(tango)(control);
        vacuum = control.SearchField;
        control = {'size': 'md', 'isRound': true};
        vacuum = sequence.bind(tango)(vacuum, control);
        control = new Array(2);
        control[0] = vacuum;
        config = _closure1_slot6;
        vacuum = 18;
        vacuum = romeo[vacuum];
        vacuum = offset.bind(tango)(vacuum);
        sequence = vacuum.IconButton;
        vacuum = {};
        context = _closure1_slot1;
        record = 19;
        record = romeo[record];
        record = context.bind(tango)(record);
        vacuum['icon'] = record;
        record = 'Settings';
        vacuum['accessibilityLabel'] = record;
        record = function() { // Original name: onPress
            entity = null;
            return entity;
        };
        vacuum['onPress'] = record;
        record = 'tertiary';
        vacuum['variant'] = record;
        vacuum = config.bind(tango)(sequence, vacuum);
        control[1] = vacuum;
        echo['children'] = control;
        echo = source.bind(tango)(update, echo);
        foxtrot['children'] = echo;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[14] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Error States'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[15] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'The status prop communicates the overall state of the input. Setting status to "error" will render a red ring around the input. Note that errorMessage will always be displayed regardless of status.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[16] = foxtrot;
        backup = _closure1_slot7;
        foxtrot = {};
        source = _closure1_slot6;
        update = _closure1_slot10;
        echo = {};
        control = 'a space';
        echo['defaultValue'] = control;
        update = source.bind(tango)(update, echo);
        echo = new Array(2);
        echo[0] = update;
        control = _closure1_slot6;
        update = romeo[sizing];
        update = offset.bind(tango)(update);
        source = update.TextArea;
        update = {'label': 'About me', 'maxLength': 100, 'placeholder': 'Long form text use TextArea', 'errorMessage': 'This is an example of a multiline error message to showcase the icon alignment to this text'};
        update = control.bind(tango)(source, update);
        echo[1] = update;
        foxtrot['children'] = echo;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[17] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Clearable'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[18] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'Inputs can use the isClearable prop to let users immediately empty the input value with a button. The button is automatically rendered when the input contains a non-empty value. When pressed, the onClear callback is called, as well as the onChange with the new empty value.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[19] = foxtrot;
        backup = _closure1_slot6;
        foxtrot = {};
        echo = 20;
        echo = romeo[echo];
        echo = offset.bind(tango)(echo);
        update = echo.TextField;
        echo = {'defaultValue': 'Clear this text', 'isClearable': true};
        echo = backup.bind(tango)(update, echo);
        foxtrot['children'] = echo;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[20] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'Certain input types automatically control the isClearable prop. For example, SearchInput is always clearable. Most inputs will also replace any trailing attachment with the clear button when it is present.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[21] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Disableable'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[22] = foxtrot;
        echo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'The isDisabled prop prevents users from interacting with an input in any way. The input container will be visually dimmed.'};
        foxtrot = echo.bind(tango)(backup, foxtrot);
        options[23] = foxtrot;
        backup = _closure1_slot6;
        foxtrot = {};
        output = romeo[output];
        output = offset.bind(tango)(output);
        echo = output.TextInput;
        output = {'defaultValue': "Can't edit this value", 'isDisabled': true};
        output = backup.bind(tango)(echo, output);
        foxtrot['children'] = output;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[24] = foxtrot;
        output = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'The isDisabled prop prevents users from interacting with an input in any way. The input container will be visually dimmed.'};
        foxtrot = output.bind(tango)(backup, foxtrot);
        options[25] = foxtrot;
        output = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Max Length'};
        foxtrot = output.bind(tango)(backup, foxtrot);
        options[26] = foxtrot;
        output = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': "Inputs can specify a maxLength prop to limit how long the user's input value can be. For TextAreas, setting a maxLength will also render an indicator in the bottom corner of how much of that length the current value takes up."};
        foxtrot = output.bind(tango)(backup, foxtrot);
        options[27] = foxtrot;
        backup = _closure1_slot6;
        foxtrot = {};
        sizing = romeo[sizing];
        sizing = offset.bind(tango)(sizing);
        output = sizing.TextArea;
        sizing = {'label': 'Limited length', 'maxLength': 124};
        sizing = backup.bind(tango)(output, sizing);
        foxtrot['children'] = sizing;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[28] = foxtrot;
        sizing = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'Exceeding the maxLength will prevent the user from inputting any more text for the value until it has been shortened under the maximum length.'};
        foxtrot = sizing.bind(tango)(backup, foxtrot);
        options[29] = foxtrot;
        sizing = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Ghost Inputs'};
        foxtrot = sizing.bind(tango)(backup, foxtrot);
        options[30] = foxtrot;
        sizing = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'GhostInput is a minimal version of TextInput with no container shape. These should be used sparingly, only in cases where a single input is the primary focus of the surrounding area.'};
        foxtrot = sizing.bind(tango)(backup, foxtrot);
        options[31] = foxtrot;
        backup = _closure1_slot6;
        foxtrot = {};
        sizing = 21;
        output = romeo[sizing];
        output = offset.bind(tango)(output);
        echo = output.Button;
        output = {};
        update = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 22;
            mike = mike[entity];
            entity = undefined;
            report = zulu.bind(entity)(mike);
            tango = report.openLazy;
            zulu = function() {
                entity = global;
                zulu = entity.Promise;
                mike = zulu.resolve;
                entity = _closure1_slot12;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = 'ghost-input-sheet';
            mike = tango.bind(report)(zulu, mike);
            return entity;
        };
        output['onPress'] = update;
        update = 'Show example';
        output['text'] = update;
        output = backup.bind(tango)(echo, output);
        foxtrot['children'] = output;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[32] = foxtrot;
        output = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'GhostInputs can also appear left-aligned by setting `isCentered` to false.'};
        foxtrot = output.bind(tango)(backup, foxtrot);
        options[33] = foxtrot;
        backup = _closure1_slot6;
        foxtrot = {};
        sizing = romeo[sizing];
        sizing = offset.bind(tango)(sizing);
        output = sizing.Button;
        sizing = {};
        result = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 22;
            mike = mike[entity];
            entity = undefined;
            report = zulu.bind(entity)(mike);
            tango = report.openLazy;
            zulu = function() {
                entity = global;
                zulu = entity.Promise;
                mike = zulu.resolve;
                entity = _closure1_slot13;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = 'ghost-input-sheet-left';
            mike = tango.bind(report)(zulu, mike);
            return entity;
        };
        sizing['onPress'] = result;
        result = 'Show left-aligned example';
        sizing['text'] = result;
        sizing = backup.bind(tango)(output, sizing);
        foxtrot['children'] = sizing;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[34] = foxtrot;
        sizing = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Split Text Input'};
        foxtrot = sizing.bind(tango)(backup, foxtrot);
        options[35] = foxtrot;
        sizing = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'text-md/normal', 'children': 'SplitTextInput is a special TextInput extension that is primarily used for inputs that require selecting a prefix value.'};
        foxtrot = sizing.bind(tango)(backup, foxtrot);
        options[36] = foxtrot;
        backup = _closure1_slot7;
        foxtrot = {};
        echo = _closure1_slot6;
        output = 23;
        sizing = romeo[output];
        sizing = offset.bind(tango)(sizing);
        result = sizing.SplitTextInput;
        sizing = {'label': 'Small', 'size': 'sm', 'placeholder': 'Placeholder', 'leadingText': 'Click'};
        update = {};
        source = 'Foo';
        update['accessibilityLabel'] = source;
        sizing['leadingPressableProps'] = update;
        result = echo.bind(tango)(result, sizing);
        sizing = new Array(3);
        sizing[0] = result;
        update = _closure1_slot6;
        result = romeo[output];
        result = offset.bind(tango)(result);
        echo = result.SplitTextInput;
        result = {'label': 'Medium', 'size': 'md', 'placeholder': 'Placeholder', 'leadingText': 'Me'};
        control = {};
        control['accessibilityLabel'] = source;
        result['leadingPressableProps'] = control;
        result = update.bind(tango)(echo, result);
        sizing[1] = result;
        echo = _closure1_slot6;
        output = romeo[output];
        output = offset.bind(tango)(output);
        result = output.SplitTextInput;
        output = {'label': 'Large', 'size': 'lg', 'placeholder': 'Placeholder', 'leadingText': 'Here'};
        update = {};
        update['accessibilityLabel'] = source;
        output['leadingPressableProps'] = update;
        output = echo.bind(tango)(result, output);
        sizing[2] = output;
        foxtrot['children'] = sizing;
        foxtrot = backup.bind(tango)(kilo, foxtrot);
        options[37] = foxtrot;
        kilo = _closure1_slot6;
        foxtrot = romeo[verify];
        foxtrot = offset.bind(tango)(foxtrot);
        backup = foxtrot.Text;
        foxtrot = {'variant': 'heading-lg/bold', 'children': 'Data Types'};
        foxtrot = kilo.bind(tango)(backup, foxtrot);
        options[38] = foxtrot;
        yankee = _closure1_slot6;
        verify = romeo[verify];
        verify = offset.bind(tango)(verify);
        offset = verify.Text;
        verify = {'variant': 'text-md/normal', 'children': 'Many special input types will have their own components. All inputs use a similar interface and support roughly the same set of props for styling and functionality. Examples will be added as these different types get implemented.'};
        verify = yankee.bind(tango)(offset, verify);
        options[39] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();