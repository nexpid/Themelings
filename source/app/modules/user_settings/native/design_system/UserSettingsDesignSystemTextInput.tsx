// app/modules/user_settings/native/design_system/UserSettingsDesignSystemTextInput.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: Sample
        entity = argFoo;
        option = entity.children;
        entity = _closure1_slot8;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        oscard = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 6;
        entity = verify[entity];
        entity = oscard.bind(tangon)(entity);
        michal = entity.Card;
        entity = {};
        offset = 'low';
        entity['shadow'] = offset;
        golfie = golfie.sample;
        entity['style'] = golfie;
        golfie = _closure1_slot6;
        report = 7;
        report = verify[report];
        report = oscard.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        verify = 24;
        report['spacing'] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = function(argFoo) { // Original name: InputUsername
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            golfie = argFoo;
            offset = golfie.defaultValue;
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            entity = null;
            tangon = entity != offset;
            option = 'default';
            entity = option;
            if(!tangon) { _fun00002_ip = 63; continue _fun00001 }
 39:
            verify = offset.includes;
            tangon = ' ';
            tangon = verify.bind(offset)(tangon);
            entity = option;
            if(!tangon) { _fun00002_ip = 63; continue _fun00001 }
 59:
            entity = 'error';
 63:
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot3;
            tangon = undefined;
            entity = 2;
            michal = michal.bind(tangon)(zuuluu, entity);
            entity = 0;
            verify = michal[entity];
            entity = 1;
            entity = michal[entity];
            var _closure2_slot0 = entity;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot0;
            option = _closure1_slot2;
            entity = 8;
            entity = option[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.TextInput;
            entity = {};
            romeon = entity;
            yankee = golfie;
            golfie = copyDataProperties(romeon, yankee);
            golfie = 'status';
            entity[golfie] = verify;
            golfie = 'error';
            option = undefined;
            if(!(golfie === verify)) { _fun00002_ip = 167; continue _fun00001 }
 161:
            option = "Username can't contain spaces";
 167:
            golfie = 'errorMessage';
            entity[golfie] = option;
            option = 'Username';
            golfie = 'label';
            entity[golfie] = option;
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            oscard = 9;
            oscard = option[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.AtIcon;
            oscard = 'leadingIcon';
            entity[oscard] = golfie;
            oscard = function(argFoo) { // Original name: onChange
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    tangon = argFoo;
                    zuuluu = _closure2_slot0;
                    michal = tangon.includes;
                    entity = ' ';
                    entity = michal.bind(tangon)(entity);
                    michal = 'default';
                    if(!entity) { _fun00004_ip = 35; continue _fun00003 }
 31:
                    michal = 'error';
 35:
                    entity = undefined;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                }
            };
            report = 'onChange';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = function(argFoo) { // Original name: GhostInputUsername
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            oscard = argFoo;
            offset = oscard.defaultValue;
            tangon = _closure1_slot4;
            zuuluu = tangon.useState;
            michal = null;
            golfie = michal != offset;
            option = 'default';
            michal = option;
            if(!golfie) { _fun00006_ip = 63; continue _fun00005 }
 39:
            verify = offset.includes;
            golfie = ' ';
            golfie = verify.bind(offset)(golfie);
            michal = option;
            if(!golfie) { _fun00006_ip = 63; continue _fun00005 }
 59:
            michal = 'error';
 63:
            golfie = zuuluu.bind(tangon)(michal);
            zuuluu = _closure1_slot3;
            tangon = undefined;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(golfie, michal);
            michal = 0;
            option = zuuluu[michal];
            michal = 1;
            michal = zuuluu[michal];
            var _closure2_slot0 = michal;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 10;
            entity = golfie[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.GhostInput;
            entity = {};
            romeon = entity;
            yankee = oscard;
            oscard = copyDataProperties(romeon, yankee);
            oscard = 'status';
            entity[oscard] = option;
            oscard = 'error';
            golfie = undefined;
            if(!(oscard === option)) { _fun00006_ip = 167; continue _fun00005 }
 161:
            golfie = "Username can't contain spaces";
 167:
            oscard = 'errorMessage';
            entity[oscard] = golfie;
            oscard = function(argFoo) { // Original name: onChange
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    tangon = argFoo;
                    zuuluu = _closure2_slot0;
                    michal = tangon.includes;
                    entity = ' ';
                    entity = michal.bind(tangon)(entity);
                    michal = 'default';
                    if(!entity) { _fun00008_ip = 35; continue _fun00007 }
 31:
                    michal = 'error';
 35:
                    entity = undefined;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                }
            };
            report = 'onChange';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot11 = entity;
    entity = function() { // Original name: GhostInputActionSheet
        tangon = _closure1_slot7;
        golfie = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 11;
        entity = verify[entity];
        zuuluu = undefined;
        entity = golfie.bind(zuuluu)(entity);
        michal = entity.BottomSheet;
        entity = {};
        option = _closure1_slot6;
        offset = 12;
        report = verify[offset];
        report = golfie.bind(zuuluu)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        yankee = 'Ghost Input - Centered';
        report['title'] = yankee;
        oscard = option.bind(zuuluu)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        option = _closure1_slot6;
        oscard = 7;
        oscard = verify[oscard];
        oscard = golfie.bind(zuuluu)(oscard);
        golfie = oscard.Stack;
        oscard = {};
        verify = {};
        verify['padding'] = offset;
        oscard['style'] = verify;
        yankee = _closure1_slot6;
        offset = _closure1_slot9;
        verify = {};
        foxtra = _closure1_slot11;
        romeon = {'placeholder': '@wumpus', 'description': 'You can use up to 16 alpha-numeric characters'};
        romeon = yankee.bind(zuuluu)(foxtra, romeon);
        verify['children'] = romeon;
        verify = yankee.bind(zuuluu)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(zuuluu)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot12 = entity;
    entity = function() { // Original name: GhostInputActionSheetLeftAligned
        tangon = _closure1_slot7;
        golfie = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 11;
        entity = verify[entity];
        zuuluu = undefined;
        entity = golfie.bind(zuuluu)(entity);
        michal = entity.BottomSheet;
        entity = {};
        option = _closure1_slot6;
        offset = 12;
        report = verify[offset];
        report = golfie.bind(zuuluu)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        yankee = 'Ghost Input - Left Aligned';
        report['title'] = yankee;
        oscard = option.bind(zuuluu)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        option = _closure1_slot6;
        oscard = 7;
        oscard = verify[oscard];
        oscard = golfie.bind(zuuluu)(oscard);
        golfie = oscard.Stack;
        oscard = {};
        verify = {};
        verify['padding'] = offset;
        oscard['style'] = verify;
        yankee = _closure1_slot6;
        offset = _closure1_slot9;
        verify = {};
        foxtra = _closure1_slot11;
        romeon = {'placeholder': '@wumpus', 'description': 'You can use up to 16 alpha-numeric characters', 'isCentered': false, 'size': 'md'};
        romeon = yankee.bind(zuuluu)(foxtra, romeon);
        verify['children'] = romeon;
        verify = yankee.bind(zuuluu)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(zuuluu)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = function() { // Original name: CustomAttachmentExample
        _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            entity = 'default';
            michal = michal.bind(zuuluu)(entity);
            entity = _closure1_slot3;
            tangon = undefined;
            option = 2;
            entity = entity.bind(tangon)(michal, option);
            zuuluu = 0;
            offset = entity[zuuluu];
            michal = 1;
            entity = entity[michal];
            var _closure2_slot0 = entity;
            verify = _closure1_slot4;
            golfie = verify.useState;
            entity = '';
            golfie = golfie.bind(verify)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(golfie, option);
            golfie = entity[zuuluu];
            entity = entity[michal];
            var _closure2_slot1 = entity;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot0;
            option = _closure1_slot2;
            entity = 8;
            entity = option[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.TextInput;
            entity = {};
            entity['status'] = offset;
            verify = 'error';
            option = undefined;
            if(!(verify === offset)) { _fun00010_ip = 147; continue _fun00009 }
 141:
            option = "Username can't contain spaces";
 147:
            entity['errorMessage'] = option;
            option = 'Pressable Attachment';
            entity['label'] = option;
            entity['value'] = golfie;
            golfie = {};
            option = function() { // Original name: onPress
                zuuluu = _closure2_slot1;
                michal = undefined;
                entity = 'You pressed the icon';
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            golfie['onPress'] = option;
            option = 'Press';
            golfie['accessibilityLabel'] = option;
            entity['trailingPressableProps'] = golfie;
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            oscard = 9;
            oscard = option[oscard];
            oscard = golfie.bind(tangon)(oscard);
            oscard = oscard.AtIcon;
            entity['trailingIcon'] = oscard;
            report = function(argFoo) { // Original name: onChange
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    report = argFoo;
                    zuuluu = _closure2_slot1;
                    entity = undefined;
                    zuuluu = zuuluu.bind(entity)(report);
                    zuuluu = _closure2_slot0;
                    tangon = report.includes;
                    michal = ' ';
                    tangon = tangon.bind(report)(michal);
                    michal = 'default';
                    if(!tangon) { _fun00012_ip = 46; continue _fun00011 }
 42:
                    michal = 'error';
 46:
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                }
            };
            entity['onChange'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot14 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tangon['container'] = verify;
    verify = {};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xl;
    verify['borderRadius'] = offset;
    tangon['sample'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 24;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemTextInput.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemTextInput
        entity = _closure1_slot8;
        tangon = undefined;
        option = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot5;
        entity = {};
        golfie = _closure1_slot7;
        offset = _closure1_slot0;
        romeon = _closure1_slot2;
        report = 7;
        report = romeon[report];
        report = offset.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        verify = 24;
        report['spacing'] = verify;
        option = option.container;
        report['style'] = option;
        verify = _closure1_slot7;
        kiloes = _closure1_slot9;
        option = {};
        sizing = _closure1_slot6;
        output = 8;
        foxtra = romeon[output];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.TextInput;
        foxtra = {'label': 'Input Label', 'placeholder': 'Placeholder text', 'description': 'Descriptions give context for the input.', 'errorMessage': 'Error messages communicate invalid states.'};
        backup = sizing.bind(tangon)(backup, foxtra);
        foxtra = new Array(4);
        foxtra[0] = backup;
        update = _closure1_slot6;
        sizing = 13;
        backup = romeon[sizing];
        backup = offset.bind(tangon)(backup);
        echoed = backup.TextArea;
        backup = {'label': 'Text Area', 'maxLength': 100, 'placeholder': 'Multiline inputs use TextArea'};
        backup = update.bind(tangon)(echoed, backup);
        foxtra[1] = backup;
        update = _closure1_slot6;
        backup = romeon[output];
        backup = offset.bind(tangon)(backup);
        echoed = backup.TextInput;
        backup = {'label': 'Password', 'secureTextEntry': true, 'placeholder': 'Password', 'isClearable': true};
        backup = update.bind(tangon)(echoed, backup);
        foxtra[2] = backup;
        update = _closure1_slot6;
        backup = romeon[output];
        backup = offset.bind(tangon)(backup);
        echoed = backup.TextInput;
        backup = {'label': 'Required Field', 'placeholder': 'Placeholder', 'description': 'Required inputs are indicated with an asterisk.', 'required': true};
        backup = update.bind(tangon)(echoed, backup);
        foxtra[3] = backup;
        option['children'] = foxtra;
        verify = verify.bind(tangon)(kiloes, option);
        option = new Array(40);
        option[0] = verify;
        echoed = _closure1_slot6;
        verify = 14;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Sizing'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[1] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'All inputs except TextArea accept a size prop, either sm, md, or lg. By default, inputs will use the large variant.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[2] = foxtra;
        backup = _closure1_slot7;
        foxtra = {};
        source = _closure1_slot6;
        echoed = romeon[output];
        echoed = offset.bind(tangon)(echoed);
        update = echoed.TextInput;
        echoed = {'label': 'Small', 'size': 'sm'};
        update = source.bind(tangon)(update, echoed);
        echoed = new Array(3);
        echoed[0] = update;
        ctrled = _closure1_slot6;
        update = romeon[output];
        update = offset.bind(tangon)(update);
        source = update.TextInput;
        update = {'label': 'Medium', 'size': 'md'};
        update = ctrled.bind(tangon)(source, update);
        echoed[1] = update;
        ctrled = _closure1_slot6;
        update = romeon[output];
        update = offset.bind(tangon)(update);
        source = update.TextInput;
        update = {};
        vacuum = 'Large (default)';
        update['label'] = vacuum;
        update = ctrled.bind(tangon)(source, update);
        echoed[2] = update;
        foxtra['children'] = echoed;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[3] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Attachments'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[4] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'Inputs can have either text and icon attachments, either on the leading or trailing edge. If both text and icon are given for a single side, the icon will take precedence.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[5] = foxtra;
        backup = _closure1_slot7;
        foxtra = {};
        source = _closure1_slot6;
        echoed = romeon[output];
        echoed = offset.bind(tangon)(echoed);
        update = echoed.TextInput;
        echoed = {};
        ctrled = 'Leading icon';
        echoed['label'] = ctrled;
        vacuum = 15;
        ctrled = romeon[vacuum];
        ctrled = offset.bind(tangon)(ctrled);
        ctrled = ctrled.TextIcon;
        echoed['leadingIcon'] = ctrled;
        update = source.bind(tangon)(update, echoed);
        echoed = new Array(4);
        echoed[0] = update;
        ctrled = _closure1_slot6;
        update = romeon[output];
        update = offset.bind(tangon)(update);
        source = update.TextInput;
        update = {};
        sequen = 'Trailing icon';
        update['label'] = sequen;
        vacuum = romeon[vacuum];
        vacuum = offset.bind(tangon)(vacuum);
        vacuum = vacuum.TextIcon;
        update['trailingIcon'] = vacuum;
        update = ctrled.bind(tangon)(source, update);
        echoed[1] = update;
        ctrled = _closure1_slot6;
        update = romeon[output];
        update = offset.bind(tangon)(update);
        source = update.TextInput;
        update = {'label': 'Leading text', 'leadingText': 'To:'};
        update = ctrled.bind(tangon)(source, update);
        echoed[2] = update;
        ctrled = _closure1_slot6;
        update = romeon[output];
        update = offset.bind(tangon)(update);
        source = update.TextInput;
        update = {'label': 'Combination', 'leadingText': 'To:'};
        vacuum = 9;
        vacuum = romeon[vacuum];
        vacuum = offset.bind(tangon)(vacuum);
        vacuum = vacuum.AtIcon;
        update['trailingIcon'] = vacuum;
        update = ctrled.bind(tangon)(source, update);
        echoed[3] = update;
        foxtra['children'] = echoed;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[6] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'Text attachments should be kept as short as possible to preserve space for the user to see their input value while editing.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[7] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Pressable Attachments'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[8] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'Inputs do not allow custom nodes to be passed as leading or trailing attachments, but they can be made interactive by passing `*PressableProps` respectively. If given, the attachment will be wrapped by a Pressable and have the props passed to it.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[9] = foxtra;
        backup = _closure1_slot6;
        foxtra = {};
        update = _closure1_slot14;
        echoed = {};
        echoed = backup.bind(tangon)(update, echoed);
        foxtra['children'] = echoed;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[10] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'Note that the props do not allow for changing the styling of the pressable. Styling is instead handled by the Input itself.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[11] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Rounding'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[12] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'All inputs except TextArea can use the isRound prop to fully round out the sides. Round variants should only be used when adjacent to another round element, like an IconButton.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[13] = foxtra;
        backup = _closure1_slot6;
        foxtra = {};
        source = _closure1_slot7;
        echoed = 16;
        echoed = romeon[echoed];
        echoed = offset.bind(tangon)(echoed);
        update = echoed.Input;
        echoed = {};
        sequen = _closure1_slot6;
        ctrled = 17;
        ctrled = romeon[ctrled];
        ctrled = offset.bind(tangon)(ctrled);
        vacuum = ctrled.SearchField;
        ctrled = {'size': 'md', 'isRound': true};
        vacuum = sequen.bind(tangon)(vacuum, ctrled);
        ctrled = new Array(2);
        ctrled[0] = vacuum;
        config = _closure1_slot6;
        vacuum = 18;
        vacuum = romeon[vacuum];
        vacuum = offset.bind(tangon)(vacuum);
        sequen = vacuum.IconButton;
        vacuum = {};
        cntext = _closure1_slot1;
        record = 19;
        record = romeon[record];
        record = cntext.bind(tangon)(record);
        vacuum['icon'] = record;
        record = 'Settings';
        vacuum['accessibilityLabel'] = record;
        record = function() { // Original name: onPress
            entity = null;
            return entity;
        };
        vacuum['onPress'] = record;
        record = 'tertiary';
        vacuum['variant'] = record;
        vacuum = config.bind(tangon)(sequen, vacuum);
        ctrled[1] = vacuum;
        echoed['children'] = ctrled;
        echoed = source.bind(tangon)(update, echoed);
        foxtra['children'] = echoed;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[14] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Error States'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[15] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'The status prop communicates the overall state of the input. Setting status to "error" will render a red ring around the input. Note that errorMessage will always be displayed regardless of status.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[16] = foxtra;
        backup = _closure1_slot7;
        foxtra = {};
        source = _closure1_slot6;
        update = _closure1_slot10;
        echoed = {};
        ctrled = 'a space';
        echoed['defaultValue'] = ctrled;
        update = source.bind(tangon)(update, echoed);
        echoed = new Array(2);
        echoed[0] = update;
        ctrled = _closure1_slot6;
        update = romeon[sizing];
        update = offset.bind(tangon)(update);
        source = update.TextArea;
        update = {'label': 'About me', 'maxLength': 100, 'placeholder': 'Long form text use TextArea', 'errorMessage': 'This is an example of a multiline error message to showcase the icon alignment to this text'};
        update = ctrled.bind(tangon)(source, update);
        echoed[1] = update;
        foxtra['children'] = echoed;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[17] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Clearable'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[18] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'Inputs can use the isClearable prop to let users immediately empty the input value with a button. The button is automatically rendered when the input contains a non-empty value. When pressed, the onClear callback is called, as well as the onChange with the new empty value.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[19] = foxtra;
        backup = _closure1_slot6;
        foxtra = {};
        echoed = 20;
        echoed = romeon[echoed];
        echoed = offset.bind(tangon)(echoed);
        update = echoed.TextField;
        echoed = {'defaultValue': 'Clear this text', 'isClearable': true};
        echoed = backup.bind(tangon)(update, echoed);
        foxtra['children'] = echoed;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[20] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'Certain input types automatically control the isClearable prop. For example, SearchInput is always clearable. Most inputs will also replace any trailing attachment with the clear button when it is present.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[21] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Disableable'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[22] = foxtra;
        echoed = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'The isDisabled prop prevents users from interacting with an input in any way. The input container will be visually dimmed.'};
        foxtra = echoed.bind(tangon)(backup, foxtra);
        option[23] = foxtra;
        backup = _closure1_slot6;
        foxtra = {};
        output = romeon[output];
        output = offset.bind(tangon)(output);
        echoed = output.TextInput;
        output = {'defaultValue': "Can't edit this value", 'isDisabled': true};
        output = backup.bind(tangon)(echoed, output);
        foxtra['children'] = output;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[24] = foxtra;
        output = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'The isDisabled prop prevents users from interacting with an input in any way. The input container will be visually dimmed.'};
        foxtra = output.bind(tangon)(backup, foxtra);
        option[25] = foxtra;
        output = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Max Length'};
        foxtra = output.bind(tangon)(backup, foxtra);
        option[26] = foxtra;
        output = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': "Inputs can specify a maxLength prop to limit how long the user's input value can be. For TextAreas, setting a maxLength will also render an indicator in the bottom corner of how much of that length the current value takes up."};
        foxtra = output.bind(tangon)(backup, foxtra);
        option[27] = foxtra;
        backup = _closure1_slot6;
        foxtra = {};
        sizing = romeon[sizing];
        sizing = offset.bind(tangon)(sizing);
        output = sizing.TextArea;
        sizing = {'label': 'Limited length', 'maxLength': 124};
        sizing = backup.bind(tangon)(output, sizing);
        foxtra['children'] = sizing;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[28] = foxtra;
        sizing = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'Exceeding the maxLength will prevent the user from inputting any more text for the value until it has been shortened under the maximum length.'};
        foxtra = sizing.bind(tangon)(backup, foxtra);
        option[29] = foxtra;
        sizing = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Ghost Inputs'};
        foxtra = sizing.bind(tangon)(backup, foxtra);
        option[30] = foxtra;
        sizing = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'GhostInput is a minimal version of TextInput with no container shape. These should be used sparingly, only in cases where a single input is the primary focus of the surrounding area.'};
        foxtra = sizing.bind(tangon)(backup, foxtra);
        option[31] = foxtra;
        backup = _closure1_slot6;
        foxtra = {};
        sizing = 21;
        output = romeon[sizing];
        output = offset.bind(tangon)(output);
        echoed = output.Button;
        output = {};
        update = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 22;
            michal = michal[entity];
            entity = undefined;
            report = zuuluu.bind(entity)(michal);
            tangon = report.openLazy;
            zuuluu = function() {
                entity = global;
                zuuluu = entity.Promise;
                michal = zuuluu.resolve;
                entity = _closure1_slot12;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            michal = 'ghost-input-sheet';
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        };
        output['onPress'] = update;
        update = 'Show example';
        output['text'] = update;
        output = backup.bind(tangon)(echoed, output);
        foxtra['children'] = output;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[32] = foxtra;
        output = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'GhostInputs can also appear left-aligned by setting `isCentered` to false.'};
        foxtra = output.bind(tangon)(backup, foxtra);
        option[33] = foxtra;
        backup = _closure1_slot6;
        foxtra = {};
        sizing = romeon[sizing];
        sizing = offset.bind(tangon)(sizing);
        output = sizing.Button;
        sizing = {};
        result = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 22;
            michal = michal[entity];
            entity = undefined;
            report = zuuluu.bind(entity)(michal);
            tangon = report.openLazy;
            zuuluu = function() {
                entity = global;
                zuuluu = entity.Promise;
                michal = zuuluu.resolve;
                entity = _closure1_slot13;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            michal = 'ghost-input-sheet-left';
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        };
        sizing['onPress'] = result;
        result = 'Show left-aligned example';
        sizing['text'] = result;
        sizing = backup.bind(tangon)(output, sizing);
        foxtra['children'] = sizing;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[34] = foxtra;
        sizing = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Split Text Input'};
        foxtra = sizing.bind(tangon)(backup, foxtra);
        option[35] = foxtra;
        sizing = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'text-md/normal', 'children': 'SplitTextInput is a special TextInput extension that is primarily used for inputs that require selecting a prefix value.'};
        foxtra = sizing.bind(tangon)(backup, foxtra);
        option[36] = foxtra;
        backup = _closure1_slot7;
        foxtra = {};
        echoed = _closure1_slot6;
        output = 23;
        sizing = romeon[output];
        sizing = offset.bind(tangon)(sizing);
        result = sizing.SplitTextInput;
        sizing = {'label': 'Small', 'size': 'sm', 'placeholder': 'Placeholder', 'leadingText': 'Click'};
        update = {};
        source = 'Foo';
        update['accessibilityLabel'] = source;
        sizing['leadingPressableProps'] = update;
        result = echoed.bind(tangon)(result, sizing);
        sizing = new Array(3);
        sizing[0] = result;
        update = _closure1_slot6;
        result = romeon[output];
        result = offset.bind(tangon)(result);
        echoed = result.SplitTextInput;
        result = {'label': 'Medium', 'size': 'md', 'placeholder': 'Placeholder', 'leadingText': 'Me'};
        ctrled = {};
        ctrled['accessibilityLabel'] = source;
        result['leadingPressableProps'] = ctrled;
        result = update.bind(tangon)(echoed, result);
        sizing[1] = result;
        echoed = _closure1_slot6;
        output = romeon[output];
        output = offset.bind(tangon)(output);
        result = output.SplitTextInput;
        output = {'label': 'Large', 'size': 'lg', 'placeholder': 'Placeholder', 'leadingText': 'Here'};
        update = {};
        update['accessibilityLabel'] = source;
        output['leadingPressableProps'] = update;
        output = echoed.bind(tangon)(result, output);
        sizing[2] = output;
        foxtra['children'] = sizing;
        foxtra = backup.bind(tangon)(kiloes, foxtra);
        option[37] = foxtra;
        kiloes = _closure1_slot6;
        foxtra = romeon[verify];
        foxtra = offset.bind(tangon)(foxtra);
        backup = foxtra.Text;
        foxtra = {'variant': 'heading-lg/bold', 'children': 'Data Types'};
        foxtra = kiloes.bind(tangon)(backup, foxtra);
        option[38] = foxtra;
        yankee = _closure1_slot6;
        verify = romeon[verify];
        verify = offset.bind(tangon)(verify);
        offset = verify.Text;
        verify = {'variant': 'text-md/normal', 'children': 'Many special input types will have their own components. All inputs use a similar interface and support roughly the same set of props for styling and functionality. Examples will be added as these different types get implemented.'};
        verify = yankee.bind(tangon)(offset, verify);
        option[39] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();