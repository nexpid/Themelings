// app/modules/user_settings/native/design_system/UserSettingsDesignSystemTextInput.tsx
export default (function(native1, native2, native3, native4, native5, native6, native7) {
    var5 = native2;
    var11 = native3;
    var3 = native6;
    var6 = native7;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var11;
    var _closure1_slot2 = var6;
    var1 = function Sample(arg1) {
        var1 = arg1;
        var8 = var1.children;
        var1 = _closure1_slot8;
        var4 = undefined;
        var7 = var1.bind(var4)();
        var3 = _closure1_slot6;
        var6 = _closure1_slot0;
        var9 = _closure1_slot2;
        var1 = 6;
        var1 = var9[var1];
        var1 = var6.bind(var4)(var1);
        var2 = var1.Card;
        var1 = {};
        var10 = 'low';
        var1['shadow'] = var10;
        var7 = var7.sample;
        var1['style'] = var7;
        var7 = _closure1_slot6;
        var5 = 7;
        var5 = var9[var5];
        var5 = var6.bind(var4)(var5);
        var6 = var5.Stack;
        var5 = {};
        var9 = 24;
        var5['spacing'] = var9;
        var5['children'] = var8;
        var5 = var7.bind(var4)(var6, var5);
        var1['children'] = var5;
        var1 = var3.bind(var4)(var2, var1);
        return var1;
    };
    var _closure1_slot9 = var1;
    var1 = function InputUsername(arg1) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var7 = arg1;
            var10 = var7.defaultValue;
            var3 = _closure1_slot4;
            var2 = var3.useState;
            var1 = null;
            var4 = var1 != var10;
            var8 = 'default';
            var1 = var8;
            if(!var4) { _fun0001_ip = 63; continue _fun0001 }
 39:
            var9 = var10.includes;
            var4 = ' ';
            var4 = var9.bind(var10)(var4);
            var1 = var8;
            if(!var4) { _fun0001_ip = 63; continue _fun0001 }
 59:
            var1 = 'error';
 63:
            var3 = var2.bind(var3)(var1);
            var2 = _closure1_slot3;
            var4 = undefined;
            var1 = 2;
            var2 = var2.bind(var4)(var3, var1);
            var1 = 0;
            var9 = var2[var1];
            var1 = 1;
            var1 = var2[var1];
            var _closure2_slot0 = var1;
            var3 = _closure1_slot6;
            var2 = _closure1_slot0;
            var8 = _closure1_slot2;
            var1 = 8;
            var1 = var8[var1];
            var1 = var2.bind(var4)(var1);
            var2 = var1.TextInput;
            var1 = {};
            var12 = var1;
            var11 = var7;
            var7 = copyDataProperties(var12, var11);
            var7 = 'status';
            var1[var7] = var9;
            var7 = 'error';
            var8 = undefined;
            if(!(var7 === var9)) { _fun0001_ip = 167; continue _fun0001 }
 161:
            var8 = "Username can't contain spaces";
 167:
            var7 = 'errorMessage';
            var1[var7] = var8;
            var8 = 'Username';
            var7 = 'label';
            var1[var7] = var8;
            var7 = _closure1_slot0;
            var8 = _closure1_slot2;
            var6 = 9;
            var6 = var8[var6];
            var6 = var7.bind(var4)(var6);
            var7 = var6.AtIcon;
            var6 = 'leadingIcon';
            var1[var6] = var7;
            var6 = function onChange(arg1) {
                _fun0002: for(var _fun0002_ip = 0; ; ) switch(_fun0002_ip) {
 0:
                    var4 = arg1;
                    var3 = _closure2_slot0;
                    var2 = var4.includes;
                    var1 = ' ';
                    var1 = var2.bind(var4)(var1);
                    var2 = 'default';
                    if(!var1) { _fun0002_ip = 35; continue _fun0002 }
 31:
                    var2 = 'error';
 35:
                    var1 = undefined;
                    var2 = var3.bind(var1)(var2);
                    return var1;
                }
            };
            var5 = 'onChange';
            var1[var5] = var6;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        }
    };
    var _closure1_slot10 = var1;
    var1 = function GhostInputUsername(arg1) {
        _fun0003: for(var _fun0003_ip = 0; ; ) switch(_fun0003_ip) {
 0:
            var6 = arg1;
            var10 = var6.defaultValue;
            var4 = _closure1_slot4;
            var3 = var4.useState;
            var2 = null;
            var7 = var2 != var10;
            var8 = 'default';
            var2 = var8;
            if(!var7) { _fun0003_ip = 63; continue _fun0003 }
 39:
            var9 = var10.includes;
            var7 = ' ';
            var7 = var9.bind(var10)(var7);
            var2 = var8;
            if(!var7) { _fun0003_ip = 63; continue _fun0003 }
 59:
            var2 = 'error';
 63:
            var7 = var3.bind(var4)(var2);
            var3 = _closure1_slot3;
            var4 = undefined;
            var2 = 2;
            var3 = var3.bind(var4)(var7, var2);
            var2 = 0;
            var8 = var3[var2];
            var2 = 1;
            var2 = var3[var2];
            var _closure2_slot0 = var2;
            var3 = _closure1_slot6;
            var2 = _closure1_slot0;
            var7 = _closure1_slot2;
            var1 = 10;
            var1 = var7[var1];
            var1 = var2.bind(var4)(var1);
            var2 = var1.GhostInput;
            var1 = {};
            var12 = var1;
            var11 = var6;
            var6 = copyDataProperties(var12, var11);
            var6 = 'status';
            var1[var6] = var8;
            var6 = 'error';
            var7 = undefined;
            if(!(var6 === var8)) { _fun0003_ip = 167; continue _fun0003 }
 161:
            var7 = "Username can't contain spaces";
 167:
            var6 = 'errorMessage';
            var1[var6] = var7;
            var6 = function onChange(arg1) {
                _fun0004: for(var _fun0004_ip = 0; ; ) switch(_fun0004_ip) {
 0:
                    var4 = arg1;
                    var3 = _closure2_slot0;
                    var2 = var4.includes;
                    var1 = ' ';
                    var1 = var2.bind(var4)(var1);
                    var2 = 'default';
                    if(!var1) { _fun0004_ip = 35; continue _fun0004 }
 31:
                    var2 = 'error';
 35:
                    var1 = undefined;
                    var2 = var3.bind(var1)(var2);
                    return var1;
                }
            };
            var5 = 'onChange';
            var1[var5] = var6;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        }
    };
    var _closure1_slot11 = var1;
    var1 = function GhostInputActionSheet() {
        var4 = _closure1_slot7;
        var7 = _closure1_slot0;
        var9 = _closure1_slot2;
        var1 = 11;
        var1 = var9[var1];
        var3 = undefined;
        var1 = var7.bind(var3)(var1);
        var2 = var1.BottomSheet;
        var1 = {};
        var8 = _closure1_slot6;
        var10 = 12;
        var5 = var9[var10];
        var5 = var7.bind(var3)(var5);
        var6 = var5.BottomSheetTitleHeader;
        var5 = {};
        var11 = 'Ghost Input - Centered';
        var5['title'] = var11;
        var6 = var8.bind(var3)(var6, var5);
        var5 = new Array(2);
        var5[0] = var6;
        var8 = _closure1_slot6;
        var6 = 7;
        var6 = var9[var6];
        var6 = var7.bind(var3)(var6);
        var7 = var6.Stack;
        var6 = {};
        var9 = {};
        var9['padding'] = var10;
        var6['style'] = var9;
        var11 = _closure1_slot6;
        var10 = _closure1_slot9;
        var9 = {};
        var13 = _closure1_slot11;
        var12 = {'placeholder': '@wumpus', 'description': 'You can use up to 16 alpha-numeric characters'};
        var12 = var11.bind(var3)(var13, var12);
        var9['children'] = var12;
        var9 = var11.bind(var3)(var10, var9);
        var6['children'] = var9;
        var6 = var8.bind(var3)(var7, var6);
        var5[1] = var6;
        var1['children'] = var5;
        var1 = var4.bind(var3)(var2, var1);
        return var1;
    };
    var _closure1_slot12 = var1;
    var1 = function GhostInputActionSheetLeftAligned() {
        var4 = _closure1_slot7;
        var7 = _closure1_slot0;
        var9 = _closure1_slot2;
        var1 = 11;
        var1 = var9[var1];
        var3 = undefined;
        var1 = var7.bind(var3)(var1);
        var2 = var1.BottomSheet;
        var1 = {};
        var8 = _closure1_slot6;
        var10 = 12;
        var5 = var9[var10];
        var5 = var7.bind(var3)(var5);
        var6 = var5.BottomSheetTitleHeader;
        var5 = {};
        var11 = 'Ghost Input - Left Aligned';
        var5['title'] = var11;
        var6 = var8.bind(var3)(var6, var5);
        var5 = new Array(2);
        var5[0] = var6;
        var8 = _closure1_slot6;
        var6 = 7;
        var6 = var9[var6];
        var6 = var7.bind(var3)(var6);
        var7 = var6.Stack;
        var6 = {};
        var9 = {};
        var9['padding'] = var10;
        var6['style'] = var9;
        var11 = _closure1_slot6;
        var10 = _closure1_slot9;
        var9 = {};
        var13 = _closure1_slot11;
        var12 = {'placeholder': '@wumpus', 'description': 'You can use up to 16 alpha-numeric characters', 'isCentered': false, 'size': 'md'};
        var12 = var11.bind(var3)(var13, var12);
        var9['children'] = var12;
        var9 = var11.bind(var3)(var10, var9);
        var6['children'] = var9;
        var6 = var8.bind(var3)(var7, var6);
        var5[1] = var6;
        var1['children'] = var5;
        var1 = var4.bind(var3)(var2, var1);
        return var1;
    };
    var _closure1_slot13 = var1;
    var1 = function CustomAttachmentExample() {
        _fun0005: for(var _fun0005_ip = 0; ; ) switch(_fun0005_ip) {
 0:
            var3 = _closure1_slot4;
            var2 = var3.useState;
            var1 = 'default';
            var2 = var2.bind(var3)(var1);
            var1 = _closure1_slot3;
            var4 = undefined;
            var8 = 2;
            var1 = var1.bind(var4)(var2, var8);
            var3 = 0;
            var10 = var1[var3];
            var2 = 1;
            var1 = var1[var2];
            var _closure2_slot0 = var1;
            var9 = _closure1_slot4;
            var7 = var9.useState;
            var1 = '';
            var7 = var7.bind(var9)(var1);
            var1 = _closure1_slot3;
            var1 = var1.bind(var4)(var7, var8);
            var7 = var1[var3];
            var1 = var1[var2];
            var _closure2_slot1 = var1;
            var3 = _closure1_slot6;
            var2 = _closure1_slot0;
            var8 = _closure1_slot2;
            var1 = 8;
            var1 = var8[var1];
            var1 = var2.bind(var4)(var1);
            var2 = var1.TextInput;
            var1 = {};
            var1['status'] = var10;
            var9 = 'error';
            var8 = undefined;
            if(!(var9 === var10)) { _fun0005_ip = 147; continue _fun0005 }
 141:
            var8 = "Username can't contain spaces";
 147:
            var1['errorMessage'] = var8;
            var8 = 'Pressable Attachment';
            var1['label'] = var8;
            var1['value'] = var7;
            var7 = {};
            var8 = function onPress() {
                var3 = _closure2_slot1;
                var2 = undefined;
                var1 = 'You pressed the icon';
                var1 = var3.bind(var2)(var1);
                return var1;
            };
            var7['onPress'] = var8;
            var8 = 'Press';
            var7['accessibilityLabel'] = var8;
            var1['trailingPressableProps'] = var7;
            var7 = _closure1_slot0;
            var8 = _closure1_slot2;
            var6 = 9;
            var6 = var8[var6];
            var6 = var7.bind(var4)(var6);
            var6 = var6.AtIcon;
            var1['trailingIcon'] = var6;
            var5 = function onChange(arg1) {
                _fun0006: for(var _fun0006_ip = 0; ; ) switch(_fun0006_ip) {
 0:
                    var5 = arg1;
                    var3 = _closure2_slot1;
                    var1 = undefined;
                    var3 = var3.bind(var1)(var5);
                    var3 = _closure2_slot0;
                    var4 = var5.includes;
                    var2 = ' ';
                    var4 = var4.bind(var5)(var2);
                    var2 = 'default';
                    if(!var4) { _fun0006_ip = 46; continue _fun0006 }
 42:
                    var2 = 'error';
 46:
                    var2 = var3.bind(var1)(var2);
                    return var1;
                }
            };
            var1['onChange'] = var5;
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        }
    };
    var _closure1_slot14 = var1;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var11.bind(var1)(var4);
    var _closure1_slot3 = var4;
    var4 = 1;
    var7 = var6[var4];
    var4 = native4;
    var4 = var4.bind(var1)(var7);
    var _closure1_slot4 = var4;
    var4 = 2;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var4 = var4.ScrollView;
    var _closure1_slot5 = var4;
    var4 = 3;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var7 = var4.jsx;
    var _closure1_slot6 = var7;
    var4 = var4.jsxs;
    var _closure1_slot7 = var4;
    var4 = 4;
    var4 = var6[var4];
    var8 = var5.bind(var1)(var4);
    var7 = var8.createStyles;
    var4 = {};
    var9 = {};
    var10 = 16;
    var9['padding'] = var10;
    var4['container'] = var9;
    var9 = {};
    var10 = 5;
    var12 = var6[var10];
    var12 = var11.bind(var1)(var12);
    var12 = var12.colors;
    var12 = var12.BACKGROUND_PRIMARY;
    var9['backgroundColor'] = var12;
    var10 = var6[var10];
    var10 = var11.bind(var1)(var10);
    var10 = var10.radii;
    var10 = var10.xl;
    var9['borderRadius'] = var10;
    var4['sample'] = var9;
    var4 = var7.bind(var8)(var4);
    var _closure1_slot8 = var4;
    var4 = 24;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/user_settings/native/design_system/UserSettingsDesignSystemTextInput.tsx';
    var4 = var5.bind(var6)(var4);
    var2 = function UserSettingsDesignSystemTextInput() {
        var1 = _closure1_slot8;
        var4 = undefined;
        var8 = var1.bind(var4)();
        var3 = _closure1_slot6;
        var2 = _closure1_slot5;
        var1 = {};
        var7 = _closure1_slot7;
        var10 = _closure1_slot0;
        var12 = _closure1_slot2;
        var5 = 7;
        var5 = var12[var5];
        var5 = var10.bind(var4)(var5);
        var6 = var5.Stack;
        var5 = {};
        var9 = 24;
        var5['spacing'] = var9;
        var8 = var8.container;
        var5['style'] = var8;
        var9 = _closure1_slot7;
        var15 = _closure1_slot9;
        var8 = {};
        var16 = _closure1_slot6;
        var17 = 8;
        var13 = var12[var17];
        var13 = var10.bind(var4)(var13);
        var14 = var13.TextInput;
        var13 = {'label': 'Input Label', 'placeholder': 'Placeholder text', 'description': 'Descriptions give context for the input.', 'errorMessage': 'Error messages communicate invalid states.'};
        var14 = var16.bind(var4)(var14, var13);
        var13 = new Array(4);
        var13[0] = var14;
        var20 = _closure1_slot6;
        var16 = 13;
        var14 = var12[var16];
        var14 = var10.bind(var4)(var14);
        var19 = var14.TextArea;
        var14 = {'label': 'Text Area', 'maxLength': 100, 'placeholder': 'Multiline inputs use TextArea'};
        var14 = var20.bind(var4)(var19, var14);
        var13[1] = var14;
        var20 = _closure1_slot6;
        var14 = var12[var17];
        var14 = var10.bind(var4)(var14);
        var19 = var14.TextInput;
        var14 = {'label': 'Password', 'secureTextEntry': true, 'placeholder': 'Password', 'isClearable': true};
        var14 = var20.bind(var4)(var19, var14);
        var13[2] = var14;
        var20 = _closure1_slot6;
        var14 = var12[var17];
        var14 = var10.bind(var4)(var14);
        var19 = var14.TextInput;
        var14 = {'label': 'Required Field', 'placeholder': 'Placeholder', 'description': 'Required inputs are indicated with an asterisk.', 'required': true};
        var14 = var20.bind(var4)(var19, var14);
        var13[3] = var14;
        var8['children'] = var13;
        var9 = var9.bind(var4)(var15, var8);
        var8 = new Array(40);
        var8[0] = var9;
        var19 = _closure1_slot6;
        var9 = 14;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Sizing'};
        var13 = var19.bind(var4)(var14, var13);
        var8[1] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'All inputs except TextArea accept a size prop, either sm, md, or lg. By default, inputs will use the large variant.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[2] = var13;
        var14 = _closure1_slot7;
        var13 = {};
        var21 = _closure1_slot6;
        var19 = var12[var17];
        var19 = var10.bind(var4)(var19);
        var20 = var19.TextInput;
        var19 = {'label': 'Small', 'size': 'sm'};
        var20 = var21.bind(var4)(var20, var19);
        var19 = new Array(3);
        var19[0] = var20;
        var22 = _closure1_slot6;
        var20 = var12[var17];
        var20 = var10.bind(var4)(var20);
        var21 = var20.TextInput;
        var20 = {'label': 'Medium', 'size': 'md'};
        var20 = var22.bind(var4)(var21, var20);
        var19[1] = var20;
        var22 = _closure1_slot6;
        var20 = var12[var17];
        var20 = var10.bind(var4)(var20);
        var21 = var20.TextInput;
        var20 = {};
        var23 = 'Large (default)';
        var20['label'] = var23;
        var20 = var22.bind(var4)(var21, var20);
        var19[2] = var20;
        var13['children'] = var19;
        var13 = var14.bind(var4)(var15, var13);
        var8[3] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Attachments'};
        var13 = var19.bind(var4)(var14, var13);
        var8[4] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'Inputs can have either text and icon attachments, either on the leading or trailing edge. If both text and icon are given for a single side, the icon will take precedence.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[5] = var13;
        var14 = _closure1_slot7;
        var13 = {};
        var21 = _closure1_slot6;
        var19 = var12[var17];
        var19 = var10.bind(var4)(var19);
        var20 = var19.TextInput;
        var19 = {};
        var22 = 'Leading icon';
        var19['label'] = var22;
        var23 = 15;
        var22 = var12[var23];
        var22 = var10.bind(var4)(var22);
        var22 = var22.TextIcon;
        var19['leadingIcon'] = var22;
        var20 = var21.bind(var4)(var20, var19);
        var19 = new Array(4);
        var19[0] = var20;
        var22 = _closure1_slot6;
        var20 = var12[var17];
        var20 = var10.bind(var4)(var20);
        var21 = var20.TextInput;
        var20 = {};
        var24 = 'Trailing icon';
        var20['label'] = var24;
        var23 = var12[var23];
        var23 = var10.bind(var4)(var23);
        var23 = var23.TextIcon;
        var20['trailingIcon'] = var23;
        var20 = var22.bind(var4)(var21, var20);
        var19[1] = var20;
        var22 = _closure1_slot6;
        var20 = var12[var17];
        var20 = var10.bind(var4)(var20);
        var21 = var20.TextInput;
        var20 = {'label': 'Leading text', 'leadingText': 'To:'};
        var20 = var22.bind(var4)(var21, var20);
        var19[2] = var20;
        var22 = _closure1_slot6;
        var20 = var12[var17];
        var20 = var10.bind(var4)(var20);
        var21 = var20.TextInput;
        var20 = {'label': 'Combination', 'leadingText': 'To:'};
        var23 = 9;
        var23 = var12[var23];
        var23 = var10.bind(var4)(var23);
        var23 = var23.AtIcon;
        var20['trailingIcon'] = var23;
        var20 = var22.bind(var4)(var21, var20);
        var19[3] = var20;
        var13['children'] = var19;
        var13 = var14.bind(var4)(var15, var13);
        var8[6] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'Text attachments should be kept as short as possible to preserve space for the user to see their input value while editing.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[7] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Pressable Attachments'};
        var13 = var19.bind(var4)(var14, var13);
        var8[8] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'Inputs do not allow custom nodes to be passed as leading or trailing attachments, but they can be made interactive by passing `*PressableProps` respectively. If given, the attachment will be wrapped by a Pressable and have the props passed to it.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[9] = var13;
        var14 = _closure1_slot6;
        var13 = {};
        var20 = _closure1_slot14;
        var19 = {};
        var19 = var14.bind(var4)(var20, var19);
        var13['children'] = var19;
        var13 = var14.bind(var4)(var15, var13);
        var8[10] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'Note that the props do not allow for changing the styling of the pressable. Styling is instead handled by the Input itself.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[11] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Rounding'};
        var13 = var19.bind(var4)(var14, var13);
        var8[12] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'All inputs except TextArea can use the isRound prop to fully round out the sides. Round variants should only be used when adjacent to another round element, like an IconButton.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[13] = var13;
        var14 = _closure1_slot6;
        var13 = {};
        var21 = _closure1_slot7;
        var19 = 16;
        var19 = var12[var19];
        var19 = var10.bind(var4)(var19);
        var20 = var19.Input;
        var19 = {};
        var24 = _closure1_slot6;
        var22 = 17;
        var22 = var12[var22];
        var22 = var10.bind(var4)(var22);
        var23 = var22.SearchField;
        var22 = {'size': 'md', 'isRound': true};
        var23 = var24.bind(var4)(var23, var22);
        var22 = new Array(2);
        var22[0] = var23;
        var25 = _closure1_slot6;
        var23 = 18;
        var23 = var12[var23];
        var23 = var10.bind(var4)(var23);
        var24 = var23.IconButton;
        var23 = {};
        var27 = _closure1_slot1;
        var26 = 19;
        var26 = var12[var26];
        var26 = var27.bind(var4)(var26);
        var23['icon'] = var26;
        var26 = 'Settings';
        var23['accessibilityLabel'] = var26;
        var26 = function onPress() {
            var1 = null;
            return var1;
        };
        var23['onPress'] = var26;
        var26 = 'tertiary';
        var23['variant'] = var26;
        var23 = var25.bind(var4)(var24, var23);
        var22[1] = var23;
        var19['children'] = var22;
        var19 = var21.bind(var4)(var20, var19);
        var13['children'] = var19;
        var13 = var14.bind(var4)(var15, var13);
        var8[14] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Error States'};
        var13 = var19.bind(var4)(var14, var13);
        var8[15] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'The status prop communicates the overall state of the input. Setting status to "error" will render a red ring around the input. Note that errorMessage will always be displayed regardless of status.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[16] = var13;
        var14 = _closure1_slot7;
        var13 = {};
        var21 = _closure1_slot6;
        var20 = _closure1_slot10;
        var19 = {};
        var22 = 'a space';
        var19['defaultValue'] = var22;
        var20 = var21.bind(var4)(var20, var19);
        var19 = new Array(2);
        var19[0] = var20;
        var22 = _closure1_slot6;
        var20 = var12[var16];
        var20 = var10.bind(var4)(var20);
        var21 = var20.TextArea;
        var20 = {'label': 'About me', 'maxLength': 100, 'placeholder': 'Long form text use TextArea', 'errorMessage': 'This is an example of a multiline error message to showcase the icon alignment to this text'};
        var20 = var22.bind(var4)(var21, var20);
        var19[1] = var20;
        var13['children'] = var19;
        var13 = var14.bind(var4)(var15, var13);
        var8[17] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Clearable'};
        var13 = var19.bind(var4)(var14, var13);
        var8[18] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'Inputs can use the isClearable prop to let users immediately empty the input value with a button. The button is automatically rendered when the input contains a non-empty value. When pressed, the onClear callback is called, as well as the onChange with the new empty value.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[19] = var13;
        var14 = _closure1_slot6;
        var13 = {};
        var19 = 20;
        var19 = var12[var19];
        var19 = var10.bind(var4)(var19);
        var20 = var19.TextField;
        var19 = {'defaultValue': 'Clear this text', 'isClearable': true};
        var19 = var14.bind(var4)(var20, var19);
        var13['children'] = var19;
        var13 = var14.bind(var4)(var15, var13);
        var8[20] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'Certain input types automatically control the isClearable prop. For example, SearchInput is always clearable. Most inputs will also replace any trailing attachment with the clear button when it is present.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[21] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Disableable'};
        var13 = var19.bind(var4)(var14, var13);
        var8[22] = var13;
        var19 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'The isDisabled prop prevents users from interacting with an input in any way. The input container will be visually dimmed.'};
        var13 = var19.bind(var4)(var14, var13);
        var8[23] = var13;
        var14 = _closure1_slot6;
        var13 = {};
        var17 = var12[var17];
        var17 = var10.bind(var4)(var17);
        var19 = var17.TextInput;
        var17 = {'defaultValue': "Can't edit this value", 'isDisabled': true};
        var17 = var14.bind(var4)(var19, var17);
        var13['children'] = var17;
        var13 = var14.bind(var4)(var15, var13);
        var8[24] = var13;
        var17 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'The isDisabled prop prevents users from interacting with an input in any way. The input container will be visually dimmed.'};
        var13 = var17.bind(var4)(var14, var13);
        var8[25] = var13;
        var17 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Max Length'};
        var13 = var17.bind(var4)(var14, var13);
        var8[26] = var13;
        var17 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': "Inputs can specify a maxLength prop to limit how long the user's input value can be. For TextAreas, setting a maxLength will also render an indicator in the bottom corner of how much of that length the current value takes up."};
        var13 = var17.bind(var4)(var14, var13);
        var8[27] = var13;
        var14 = _closure1_slot6;
        var13 = {};
        var16 = var12[var16];
        var16 = var10.bind(var4)(var16);
        var17 = var16.TextArea;
        var16 = {'label': 'Limited length', 'maxLength': 124};
        var16 = var14.bind(var4)(var17, var16);
        var13['children'] = var16;
        var13 = var14.bind(var4)(var15, var13);
        var8[28] = var13;
        var16 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'Exceeding the maxLength will prevent the user from inputting any more text for the value until it has been shortened under the maximum length.'};
        var13 = var16.bind(var4)(var14, var13);
        var8[29] = var13;
        var16 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Ghost Inputs'};
        var13 = var16.bind(var4)(var14, var13);
        var8[30] = var13;
        var16 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'GhostInput is a minimal version of TextInput with no container shape. These should be used sparingly, only in cases where a single input is the primary focus of the surrounding area.'};
        var13 = var16.bind(var4)(var14, var13);
        var8[31] = var13;
        var14 = _closure1_slot6;
        var13 = {};
        var16 = 21;
        var17 = var12[var16];
        var17 = var10.bind(var4)(var17);
        var19 = var17.Button;
        var17 = {};
        var20 = function onPress() {
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 22;
            var2 = var2[var1];
            var1 = undefined;
            var5 = var3.bind(var1)(var2);
            var4 = var5.openLazy;
            var3 = function() {
                var1 = global;
                var3 = var1.Promise;
                var2 = var3.resolve;
                var1 = _closure1_slot12;
                var1 = var2.bind(var3)(var1);
                return var1;
            };
            var2 = 'ghost-input-sheet';
            var2 = var4.bind(var5)(var3, var2);
            return var1;
        };
        var17['onPress'] = var20;
        var20 = 'Show example';
        var17['text'] = var20;
        var17 = var14.bind(var4)(var19, var17);
        var13['children'] = var17;
        var13 = var14.bind(var4)(var15, var13);
        var8[32] = var13;
        var17 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'GhostInputs can also appear left-aligned by setting `isCentered` to false.'};
        var13 = var17.bind(var4)(var14, var13);
        var8[33] = var13;
        var14 = _closure1_slot6;
        var13 = {};
        var16 = var12[var16];
        var16 = var10.bind(var4)(var16);
        var17 = var16.Button;
        var16 = {};
        var18 = function onPress() {
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 22;
            var2 = var2[var1];
            var1 = undefined;
            var5 = var3.bind(var1)(var2);
            var4 = var5.openLazy;
            var3 = function() {
                var1 = global;
                var3 = var1.Promise;
                var2 = var3.resolve;
                var1 = _closure1_slot13;
                var1 = var2.bind(var3)(var1);
                return var1;
            };
            var2 = 'ghost-input-sheet-left';
            var2 = var4.bind(var5)(var3, var2);
            return var1;
        };
        var16['onPress'] = var18;
        var18 = 'Show left-aligned example';
        var16['text'] = var18;
        var16 = var14.bind(var4)(var17, var16);
        var13['children'] = var16;
        var13 = var14.bind(var4)(var15, var13);
        var8[34] = var13;
        var16 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Split Text Input'};
        var13 = var16.bind(var4)(var14, var13);
        var8[35] = var13;
        var16 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'text-md/normal', 'children': 'SplitTextInput is a special TextInput extension that is primarily used for inputs that require selecting a prefix value.'};
        var13 = var16.bind(var4)(var14, var13);
        var8[36] = var13;
        var14 = _closure1_slot7;
        var13 = {};
        var19 = _closure1_slot6;
        var17 = 23;
        var16 = var12[var17];
        var16 = var10.bind(var4)(var16);
        var18 = var16.SplitTextInput;
        var16 = {'label': 'Small', 'size': 'sm', 'placeholder': 'Placeholder', 'leadingText': 'Click'};
        var20 = {};
        var21 = 'Foo';
        var20['accessibilityLabel'] = var21;
        var16['leadingPressableProps'] = var20;
        var18 = var19.bind(var4)(var18, var16);
        var16 = new Array(3);
        var16[0] = var18;
        var20 = _closure1_slot6;
        var18 = var12[var17];
        var18 = var10.bind(var4)(var18);
        var19 = var18.SplitTextInput;
        var18 = {'label': 'Medium', 'size': 'md', 'placeholder': 'Placeholder', 'leadingText': 'Me'};
        var22 = {};
        var22['accessibilityLabel'] = var21;
        var18['leadingPressableProps'] = var22;
        var18 = var20.bind(var4)(var19, var18);
        var16[1] = var18;
        var19 = _closure1_slot6;
        var17 = var12[var17];
        var17 = var10.bind(var4)(var17);
        var18 = var17.SplitTextInput;
        var17 = {'label': 'Large', 'size': 'lg', 'placeholder': 'Placeholder', 'leadingText': 'Here'};
        var20 = {};
        var20['accessibilityLabel'] = var21;
        var17['leadingPressableProps'] = var20;
        var17 = var19.bind(var4)(var18, var17);
        var16[2] = var17;
        var13['children'] = var16;
        var13 = var14.bind(var4)(var15, var13);
        var8[37] = var13;
        var15 = _closure1_slot6;
        var13 = var12[var9];
        var13 = var10.bind(var4)(var13);
        var14 = var13.Text;
        var13 = {'variant': 'heading-lg/bold', 'children': 'Data Types'};
        var13 = var15.bind(var4)(var14, var13);
        var8[38] = var13;
        var11 = _closure1_slot6;
        var9 = var12[var9];
        var9 = var10.bind(var4)(var9);
        var10 = var9.Text;
        var9 = {'variant': 'text-md/normal', 'children': 'Many special input types will have their own components. All inputs use a similar interface and support roughly the same set of props for styling and functionality. Examples will be added as these different types get implemented.'};
        var9 = var11.bind(var4)(var10, var9);
        var8[39] = var9;
        var5['children'] = var8;
        var5 = var7.bind(var4)(var6, var5);
        var1['children'] = var5;
        var1 = var3.bind(var4)(var2, var1);
        return var1;
    };
    var3['default'] = var2;
    return var1;
})();