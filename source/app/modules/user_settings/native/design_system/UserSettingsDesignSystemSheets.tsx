// app/modules/user_settings/native/design_system/UserSettingsDesignSystemSheets.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = function() { // Original name: DemoActionSheet
        _fun99413: for(var _fun99413_ip = 0; ; ) switch(_fun99413_ip) {
 0:
            mike = _closure1_slot4;
            entity = mike.useState;
            golf = false;
            mike = entity.bind(mike)(golf);
            entity = _closure1_slot3;
            tango = undefined;
            oscar = 2;
            entity = entity.bind(tango)(mike, oscar);
            zulu = 0;
            result = entity[zulu];
            mike = 1;
            vacuum = entity[mike];
            report = _closure1_slot4;
            entity = report.useState;
            report = entity.bind(report)(golf);
            entity = _closure1_slot3;
            entity = entity.bind(tango)(report, oscar);
            sequence = entity[zulu];
            control = entity[mike];
            options = _closure1_slot4;
            report = options.useState;
            entity = 'Header title';
            report = report.bind(options)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tango)(report, oscar);
            context = entity[zulu];
            record = entity[mike];
            options = _closure1_slot4;
            report = options.useState;
            entity = 'Header subtitle';
            report = report.bind(options)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tango)(report, oscar);
            config = entity[zulu];
            source = entity[mike];
            report = _closure1_slot4;
            entity = report.useState;
            report = entity.bind(report)(golf);
            entity = _closure1_slot3;
            entity = entity.bind(tango)(report, oscar);
            output = entity[zulu];
            sizing = entity[mike];
            zulu = _closure1_slot7;
            oscar = _closure1_slot0;
            options = _closure1_slot2;
            entity = 8;
            entity = options[entity];
            entity = oscar.bind(tango)(entity);
            mike = entity.ActionSheet;
            entity = {};
            golf = _closure1_slot7;
            report = 9;
            report = options[report];
            report = oscar.bind(tango)(report);
            oscar = report.BottomSheetTitleHeader;
            report = {};
            report['title'] = context;
            report['subtitle'] = config;
            options = result;
            if(!options) { _fun99413_ip = 279; continue _fun99413 }
 258:
            yankee = _closure1_slot7;
            offset = _closure1_slot10;
            verify = {};
            verify['showLongLabel'] = output;
            options = yankee.bind(tango)(offset, verify);
 279:
            report['trailing'] = options;
            options = sequence;
            if(!options) { _fun99413_ip = 336; continue _fun99413 }
 290:
            yankee = _closure1_slot7;
            offset = _closure1_slot0;
            romeo = _closure1_slot2;
            verify = 10;
            verify = romeo[verify];
            verify = offset.bind(tango)(verify);
            offset = verify.ActionSheetCloseButton;
            verify = {};
            romeo = _closure1_slot6;
            verify['onPress'] = romeo;
            options = yankee.bind(tango)(offset, verify);
 336:
            report['leading'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['header'] = report;
            golf = _closure1_slot8;
            backup = _closure1_slot0;
            echo = _closure1_slot2;
            options = 11;
            report = echo[options];
            report = backup.bind(tango)(report);
            oscar = report.Stack;
            report = {};
            verify = 24;
            report['spacing'] = verify;
            offset = _closure1_slot8;
            options = echo[options];
            options = backup.bind(tango)(options);
            verify = options.Stack;
            options = {};
            update = _closure1_slot7;
            romeo = 12;
            yankee = echo[romeo];
            yankee = backup.bind(tango)(yankee);
            foxtrot = yankee.TextInput;
            yankee = {};
            yankee['value'] = context;
            yankee['onChange'] = record;
            record = 'Title';
            yankee['label'] = record;
            foxtrot = update.bind(tango)(foxtrot, yankee);
            yankee = new Array(2);
            yankee[0] = foxtrot;
            update = _closure1_slot7;
            romeo = echo[romeo];
            romeo = backup.bind(tango)(romeo);
            foxtrot = romeo.TextInput;
            romeo = {};
            romeo['value'] = config;
            romeo['onChange'] = source;
            source = 'Subtitle';
            romeo['label'] = source;
            source = 100;
            romeo['maxLength'] = source;
            romeo = update.bind(tango)(foxtrot, romeo);
            yankee[1] = romeo;
            options['children'] = yankee;
            verify = offset.bind(tango)(verify, options);
            options = new Array(2);
            options[0] = verify;
            yankee = _closure1_slot8;
            foxtrot = 13;
            verify = echo[foxtrot];
            verify = backup.bind(tango)(verify);
            verify = verify.ActionSheetRow;
            offset = verify.Group;
            verify = {};
            source = _closure1_slot7;
            romeo = echo[foxtrot];
            romeo = backup.bind(tango)(romeo);
            update = romeo.ActionSheetSwitchRow;
            romeo = {};
            romeo['value'] = sequence;
            romeo['onValueChange'] = control;
            control = 'Show Leading';
            romeo['label'] = control;
            update = source.bind(tango)(update, romeo);
            romeo = new Array(3);
            romeo[0] = update;
            control = _closure1_slot7;
            update = echo[foxtrot];
            update = backup.bind(tango)(update);
            source = update.ActionSheetSwitchRow;
            update = {};
            update['value'] = result;
            update['onValueChange'] = vacuum;
            vacuum = 'Show Trailing';
            update['label'] = vacuum;
            update = control.bind(tango)(source, update);
            romeo[1] = update;
            kilo = _closure1_slot7;
            foxtrot = echo[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            backup = foxtrot.ActionSheetSwitchRow;
            foxtrot = {};
            result = !result;
            foxtrot['disabled'] = result;
            foxtrot['value'] = output;
            foxtrot['onValueChange'] = sizing;
            sizing = 'Show Long Label';
            foxtrot['label'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            romeo[2] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[1] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = function() { // Original name: DemoPromoSheet
        tango = _closure1_slot7;
        yankee = _closure1_slot0;
        romeo = _closure1_slot2;
        entity = 15;
        entity = romeo[entity];
        zulu = undefined;
        entity = yankee.bind(zulu)(entity);
        mike = entity.PromoSheet;
        entity = {'illustration': null, 'title': "Here's a Promo Sheet", 'description': "You can use this to promote new features, products, or anything else you'd like!"};
        options = _closure1_slot7;
        golf = _closure1_slot1;
        oscar = 16;
        oscar = romeo[oscar];
        golf = golf.bind(zulu)(oscar);
        oscar = {};
        oscar = options.bind(zulu)(golf, oscar);
        entity['illustration'] = oscar;
        golf = _closure1_slot7;
        report = 17;
        report = romeo[report];
        report = yankee.bind(zulu)(report);
        oscar = report.Button;
        report = {};
        options = 'lg';
        report['size'] = options;
        options = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 14;
            mike = mike[entity];
            entity = undefined;
            zulu = zulu.bind(entity)(mike);
            mike = zulu.hideActionSheet;
            entity = 'promo-sheet-demo';
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        report['onPress'] = options;
        options = 18;
        verify = romeo[options];
        verify = yankee.bind(zulu)(verify);
        offset = verify.intl;
        verify = offset.string;
        options = romeo[options];
        options = yankee.bind(zulu)(options);
        options = options.t;
        options = options.BddRzc;
        options = verify.bind(offset)(options);
        report['text'] = options;
        report = golf.bind(zulu)(oscar, report);
        entity['actions'] = report;
        entity = tango.bind(zulu)(mike, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = golf.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.NOOP;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'padding': 16, 'alignItems': 'center'};
    tango['container'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = function(argFoo) { // Original name: SelectAction
        _fun99416: for(var _fun99416_ip = 0; ; ) switch(_fun99416_ip) {
 0:
            entity = argFoo;
            verify = entity.showLongLabel;
            tango = _closure1_slot7;
            oscar = _closure1_slot0;
            options = _closure1_slot2;
            entity = 6;
            entity = options[entity];
            zulu = undefined;
            entity = oscar.bind(zulu)(entity);
            mike = entity.PressableOpacity;
            entity = {};
            golf = 'button';
            entity['accessibilityRole'] = golf;
            golf = _closure1_slot6;
            entity['onPress'] = golf;
            golf = _closure1_slot7;
            report = 7;
            report = options[report];
            report = oscar.bind(zulu)(report);
            oscar = report.Text;
            report = {'variant': 'text-md/medium', 'color': 'text-brand'};
            options = 'Label';
            if(!verify) { _fun99416_ip = 110; continue _fun99416 }
 104:
            options = 'LongLabelLong';
 110:
            report['children'] = options;
            report = golf.bind(zulu)(oscar, report);
            entity['children'] = report;
            entity = tango.bind(zulu)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot10 = tango;
    tango = function() { // Original name: showDemoPromoSheet
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 14;
        mike = mike[entity];
        entity = undefined;
        report = zulu.bind(entity)(mike);
        tango = report.openLazy;
        zulu = function() {
            entity = global;
            zulu = entity.Promise;
            mike = zulu.resolve;
            entity = _closure1_slot13;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        mike = 'promo-sheet-demo';
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    var _closure1_slot11 = tango;
    tango = 20;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemSheets.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemSheets
        entity = _closure1_slot9;
        tango = undefined;
        report = entity.bind(tango)();
        zulu = _closure1_slot7;
        mike = _closure1_slot5;
        entity = {};
        report = report.container;
        entity['contentContainerStyle'] = report;
        golf = _closure1_slot8;
        output = _closure1_slot0;
        update = _closure1_slot2;
        romeo = 11;
        report = update[romeo];
        report = output.bind(tango)(report);
        oscar = report.Stack;
        report = {};
        yankee = _closure1_slot7;
        verify = 19;
        options = update[verify];
        options = output.bind(tango)(options);
        offset = options.Card;
        options = {};
        kilo = _closure1_slot8;
        foxtrot = update[romeo];
        foxtrot = output.bind(tango)(foxtrot);
        backup = foxtrot.Stack;
        foxtrot = {};
        control = _closure1_slot7;
        result = 7;
        sizing = update[result];
        sizing = output.bind(tango)(sizing);
        source = sizing.Text;
        sizing = {'variant': 'text-lg/bold', 'children': 'Action Sheet with Title Header'};
        sizing = control.bind(tango)(source, sizing);
        source = new Array(3);
        source[0] = sizing;
        vacuum = _closure1_slot7;
        sizing = update[result];
        sizing = output.bind(tango)(sizing);
        control = sizing.Text;
        sizing = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'An action sheet with a centered title and subtitle, with optional leading and Trailing elements.'};
        sizing = vacuum.bind(tango)(control, sizing);
        source[1] = sizing;
        sequence = _closure1_slot7;
        sizing = 17;
        control = update[sizing];
        control = output.bind(tango)(control);
        vacuum = control.Button;
        control = {};
        config = function() { // Original name: onPress
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 14;
            mike = mike[entity];
            entity = undefined;
            report = zulu.bind(entity)(mike);
            tango = report.openLazy;
            zulu = function() {
                entity = global;
                zulu = entity.Promise;
                mike = zulu.resolve;
                entity = _closure1_slot12;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            mike = 'demo-sheet';
            mike = tango.bind(report)(zulu, mike);
            return entity;
        };
        control['onPress'] = config;
        config = 'Show Action Sheet';
        control['text'] = config;
        control = sequence.bind(tango)(vacuum, control);
        source[2] = control;
        foxtrot['children'] = source;
        foxtrot = kilo.bind(tango)(backup, foxtrot);
        options['children'] = foxtrot;
        offset = yankee.bind(tango)(offset, options);
        options = new Array(2);
        options[0] = offset;
        yankee = _closure1_slot7;
        verify = update[verify];
        verify = output.bind(tango)(verify);
        offset = verify.Card;
        verify = {};
        backup = _closure1_slot8;
        romeo = update[romeo];
        romeo = output.bind(tango)(romeo);
        foxtrot = romeo.Stack;
        romeo = {};
        control = _closure1_slot7;
        kilo = update[result];
        kilo = output.bind(tango)(kilo);
        source = kilo.Text;
        kilo = {'variant': 'text-lg/bold', 'children': 'Promo Sheet'};
        source = control.bind(tango)(source, kilo);
        kilo = new Array(3);
        kilo[0] = source;
        control = _closure1_slot7;
        result = update[result];
        result = output.bind(tango)(result);
        source = result.Text;
        result = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'A sheet with an illustration, title, description, and actions.'};
        result = control.bind(tango)(source, result);
        kilo[1] = result;
        result = _closure1_slot7;
        sizing = update[sizing];
        sizing = output.bind(tango)(sizing);
        output = sizing.Button;
        sizing = {};
        echo = _closure1_slot11;
        sizing['onPress'] = echo;
        echo = 'Show Promo Sheet';
        sizing['text'] = echo;
        sizing = result.bind(tango)(output, sizing);
        kilo[2] = sizing;
        romeo['children'] = kilo;
        romeo = backup.bind(tango)(foxtrot, romeo);
        verify['children'] = romeo;
        verify = yankee.bind(tango)(offset, verify);
        options[1] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();