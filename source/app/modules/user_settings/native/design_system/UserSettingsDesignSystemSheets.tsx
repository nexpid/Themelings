// app/modules/user_settings/native/design_system/UserSettingsDesignSystemSheets.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: DemoActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot4;
            entity = michal.useState;
            golfie = false;
            michal = entity.bind(michal)(golfie);
            entity = _closure1_slot3;
            tangon = undefined;
            oscard = 2;
            entity = entity.bind(tangon)(michal, oscard);
            zuuluu = 0;
            result = entity[zuuluu];
            michal = 1;
            vacuum = entity[michal];
            report = _closure1_slot4;
            entity = report.useState;
            report = entity.bind(report)(golfie);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, oscard);
            sequen = entity[zuuluu];
            ctrled = entity[michal];
            option = _closure1_slot4;
            report = option.useState;
            entity = 'Header title';
            report = report.bind(option)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, oscard);
            cntext = entity[zuuluu];
            record = entity[michal];
            option = _closure1_slot4;
            report = option.useState;
            entity = 'Header subtitle';
            report = report.bind(option)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, oscard);
            config = entity[zuuluu];
            source = entity[michal];
            report = _closure1_slot4;
            entity = report.useState;
            report = entity.bind(report)(golfie);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, oscard);
            output = entity[zuuluu];
            sizing = entity[michal];
            zuuluu = _closure1_slot7;
            oscard = _closure1_slot0;
            option = _closure1_slot2;
            entity = 8;
            entity = option[entity];
            entity = oscard.bind(tangon)(entity);
            michal = entity.ActionSheet;
            entity = {};
            golfie = _closure1_slot7;
            report = 9;
            report = option[report];
            report = oscard.bind(tangon)(report);
            oscard = report.BottomSheetTitleHeader;
            report = {};
            report['title'] = cntext;
            report['subtitle'] = config;
            option = result;
            if(!option) { _fun00002_ip = 279; continue _fun00001 }
 258:
            yankee = _closure1_slot7;
            offset = _closure1_slot10;
            verify = {};
            verify['showLongLabel'] = output;
            option = yankee.bind(tangon)(offset, verify);
 279:
            report['trailing'] = option;
            option = sequen;
            if(!option) { _fun00002_ip = 336; continue _fun00001 }
 290:
            yankee = _closure1_slot7;
            offset = _closure1_slot0;
            romeon = _closure1_slot2;
            verify = 10;
            verify = romeon[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.ActionSheetCloseButton;
            verify = {};
            romeon = _closure1_slot6;
            verify['onPress'] = romeon;
            option = yankee.bind(tangon)(offset, verify);
 336:
            report['leading'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['header'] = report;
            golfie = _closure1_slot8;
            backup = _closure1_slot0;
            echoed = _closure1_slot2;
            option = 11;
            report = echoed[option];
            report = backup.bind(tangon)(report);
            oscard = report.Stack;
            report = {};
            verify = 24;
            report['spacing'] = verify;
            offset = _closure1_slot8;
            option = echoed[option];
            option = backup.bind(tangon)(option);
            verify = option.Stack;
            option = {};
            update = _closure1_slot7;
            romeon = 12;
            yankee = echoed[romeon];
            yankee = backup.bind(tangon)(yankee);
            foxtra = yankee.TextInput;
            yankee = {};
            yankee['value'] = cntext;
            yankee['onChange'] = record;
            record = 'Title';
            yankee['label'] = record;
            foxtra = update.bind(tangon)(foxtra, yankee);
            yankee = new Array(2);
            yankee[0] = foxtra;
            update = _closure1_slot7;
            romeon = echoed[romeon];
            romeon = backup.bind(tangon)(romeon);
            foxtra = romeon.TextInput;
            romeon = {};
            romeon['value'] = config;
            romeon['onChange'] = source;
            source = 'Subtitle';
            romeon['label'] = source;
            source = 100;
            romeon['maxLength'] = source;
            romeon = update.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            option['children'] = yankee;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            yankee = _closure1_slot8;
            foxtra = 13;
            verify = echoed[foxtra];
            verify = backup.bind(tangon)(verify);
            verify = verify.ActionSheetRow;
            offset = verify.Group;
            verify = {};
            source = _closure1_slot7;
            romeon = echoed[foxtra];
            romeon = backup.bind(tangon)(romeon);
            update = romeon.ActionSheetSwitchRow;
            romeon = {};
            romeon['value'] = sequen;
            romeon['onValueChange'] = ctrled;
            ctrled = 'Show Leading';
            romeon['label'] = ctrled;
            update = source.bind(tangon)(update, romeon);
            romeon = new Array(3);
            romeon[0] = update;
            ctrled = _closure1_slot7;
            update = echoed[foxtra];
            update = backup.bind(tangon)(update);
            source = update.ActionSheetSwitchRow;
            update = {};
            update['value'] = result;
            update['onValueChange'] = vacuum;
            vacuum = 'Show Trailing';
            update['label'] = vacuum;
            update = ctrled.bind(tangon)(source, update);
            romeon[1] = update;
            kiloes = _closure1_slot7;
            foxtra = echoed[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.ActionSheetSwitchRow;
            foxtra = {};
            result = !result;
            foxtra['disabled'] = result;
            foxtra['value'] = output;
            foxtra['onValueChange'] = sizing;
            sizing = 'Show Long Label';
            foxtra['label'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[2] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = function() { // Original name: DemoPromoSheet
        tangon = _closure1_slot7;
        yankee = _closure1_slot0;
        romeon = _closure1_slot2;
        entity = 15;
        entity = romeon[entity];
        zuuluu = undefined;
        entity = yankee.bind(zuuluu)(entity);
        michal = entity.PromoSheet;
        entity = {'illustration': null, 'title': "Here's a Promo Sheet", 'description': "You can use this to promote new features, products, or anything else you'd like!"};
        option = _closure1_slot7;
        golfie = _closure1_slot1;
        oscard = 16;
        oscard = romeon[oscard];
        golfie = golfie.bind(zuuluu)(oscard);
        oscard = {};
        oscard = option.bind(zuuluu)(golfie, oscard);
        entity['illustration'] = oscard;
        golfie = _closure1_slot7;
        report = 17;
        report = romeon[report];
        report = yankee.bind(zuuluu)(report);
        oscard = report.Button;
        report = {};
        option = 'lg';
        report['size'] = option;
        option = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 14;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.hideActionSheet;
            entity = 'promo-sheet-demo';
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        report['onPress'] = option;
        option = 18;
        verify = romeon[option];
        verify = yankee.bind(zuuluu)(verify);
        offset = verify.intl;
        verify = offset.string;
        option = romeon[option];
        option = yankee.bind(zuuluu)(option);
        option = option.t;
        option = option.BddRzc;
        option = verify.bind(offset)(option);
        report['text'] = option;
        report = golfie.bind(zuuluu)(oscard, report);
        entity['actions'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.NOOP;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'padding': 16, 'alignItems': 'center'};
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = function(argFoo) { // Original name: SelectAction
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            verify = entity.showLongLabel;
            tangon = _closure1_slot7;
            oscard = _closure1_slot0;
            option = _closure1_slot2;
            entity = 6;
            entity = option[entity];
            zuuluu = undefined;
            entity = oscard.bind(zuuluu)(entity);
            michal = entity.PressableOpacity;
            entity = {};
            golfie = 'button';
            entity['accessibilityRole'] = golfie;
            golfie = _closure1_slot6;
            entity['onPress'] = golfie;
            golfie = _closure1_slot7;
            report = 7;
            report = option[report];
            report = oscard.bind(zuuluu)(report);
            oscard = report.Text;
            report = {'variant': 'text-md/medium', 'color': 'text-brand'};
            option = 'Label';
            if(!verify) { _fun00004_ip = 110; continue _fun00003 }
 104:
            option = 'LongLabelLong';
 110:
            report['children'] = option;
            report = golfie.bind(zuuluu)(oscard, report);
            entity['children'] = report;
            entity = tangon.bind(zuuluu)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot10 = tangon;
    tangon = function() { // Original name: showDemoPromoSheet
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 14;
        michal = michal[entity];
        entity = undefined;
        report = zuuluu.bind(entity)(michal);
        tangon = report.openLazy;
        zuuluu = function() {
            entity = global;
            zuuluu = entity.Promise;
            michal = zuuluu.resolve;
            entity = _closure1_slot13;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        michal = 'promo-sheet-demo';
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    var _closure1_slot11 = tangon;
    tangon = 20;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemSheets.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemSheets
        entity = _closure1_slot9;
        tangon = undefined;
        report = entity.bind(tangon)();
        zuuluu = _closure1_slot7;
        michal = _closure1_slot5;
        entity = {};
        report = report.container;
        entity['contentContainerStyle'] = report;
        golfie = _closure1_slot8;
        output = _closure1_slot0;
        update = _closure1_slot2;
        romeon = 11;
        report = update[romeon];
        report = output.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        yankee = _closure1_slot7;
        verify = 19;
        option = update[verify];
        option = output.bind(tangon)(option);
        offset = option.Card;
        option = {};
        kiloes = _closure1_slot8;
        foxtra = update[romeon];
        foxtra = output.bind(tangon)(foxtra);
        backup = foxtra.Stack;
        foxtra = {};
        ctrled = _closure1_slot7;
        result = 7;
        sizing = update[result];
        sizing = output.bind(tangon)(sizing);
        source = sizing.Text;
        sizing = {'variant': 'text-lg/bold', 'children': 'Action Sheet with Title Header'};
        sizing = ctrled.bind(tangon)(source, sizing);
        source = new Array(3);
        source[0] = sizing;
        vacuum = _closure1_slot7;
        sizing = update[result];
        sizing = output.bind(tangon)(sizing);
        ctrled = sizing.Text;
        sizing = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'An action sheet with a centered title and subtitle, with optional leading and Trailing elements.'};
        sizing = vacuum.bind(tangon)(ctrled, sizing);
        source[1] = sizing;
        sequen = _closure1_slot7;
        sizing = 17;
        ctrled = update[sizing];
        ctrled = output.bind(tangon)(ctrled);
        vacuum = ctrled.Button;
        ctrled = {};
        config = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 14;
            michal = michal[entity];
            entity = undefined;
            report = zuuluu.bind(entity)(michal);
            tangon = report.openLazy;
            zuuluu = function() {
                entity = global;
                zuuluu = entity.Promise;
                michal = zuuluu.resolve;
                entity = _closure1_slot12;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            michal = 'demo-sheet';
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        };
        ctrled['onPress'] = config;
        config = 'Show Action Sheet';
        ctrled['text'] = config;
        ctrled = sequen.bind(tangon)(vacuum, ctrled);
        source[2] = ctrled;
        foxtra['children'] = source;
        foxtra = kiloes.bind(tangon)(backup, foxtra);
        option['children'] = foxtra;
        offset = yankee.bind(tangon)(offset, option);
        option = new Array(2);
        option[0] = offset;
        yankee = _closure1_slot7;
        verify = update[verify];
        verify = output.bind(tangon)(verify);
        offset = verify.Card;
        verify = {};
        backup = _closure1_slot8;
        romeon = update[romeon];
        romeon = output.bind(tangon)(romeon);
        foxtra = romeon.Stack;
        romeon = {};
        ctrled = _closure1_slot7;
        kiloes = update[result];
        kiloes = output.bind(tangon)(kiloes);
        source = kiloes.Text;
        kiloes = {'variant': 'text-lg/bold', 'children': 'Promo Sheet'};
        source = ctrled.bind(tangon)(source, kiloes);
        kiloes = new Array(3);
        kiloes[0] = source;
        ctrled = _closure1_slot7;
        result = update[result];
        result = output.bind(tangon)(result);
        source = result.Text;
        result = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'A sheet with an illustration, title, description, and actions.'};
        result = ctrled.bind(tangon)(source, result);
        kiloes[1] = result;
        result = _closure1_slot7;
        sizing = update[sizing];
        sizing = output.bind(tangon)(sizing);
        output = sizing.Button;
        sizing = {};
        echoed = _closure1_slot11;
        sizing['onPress'] = echoed;
        echoed = 'Show Promo Sheet';
        sizing['text'] = echoed;
        sizing = result.bind(tangon)(output, sizing);
        kiloes[2] = sizing;
        romeon['children'] = kiloes;
        romeon = backup.bind(tangon)(foxtra, romeon);
        verify['children'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();