// app/modules/user_settings/native/design_system/UserSettingsDesignSystemFormPrimitives.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = function() { // Original name: Radio
        tangon = _closure1_slot8;
        zuuluu = _closure1_slot9;
        michal = {};
        option = _closure1_slot7;
        yankee = _closure1_slot0;
        foxtra = _closure1_slot1;
        oscard = 7;
        report = foxtra[oscard];
        entity = undefined;
        report = yankee.bind(entity)(report);
        golfie = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Radio'};
        golfie = option.bind(entity)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        option = _closure1_slot7;
        oscard = foxtra[oscard];
        oscard = yankee.bind(entity)(oscard);
        golfie = oscard.Text;
        oscard = {'variant': 'text-md/normal', 'children': 'Select a single option from a short list of multiple options'};
        oscard = option.bind(entity)(golfie, oscard);
        report[1] = oscard;
        option = _closure1_slot8;
        oscard = 8;
        oscard = foxtra[oscard];
        oscard = yankee.bind(entity)(oscard);
        golfie = oscard.TableRadioGroup;
        oscard = {'title': 'Role Colors', 'hasIcons': false, 'value': 'color-in-names'};
        verify = _closure1_slot6;
        oscard['onChange'] = verify;
        kiloes = _closure1_slot7;
        offset = 9;
        verify = foxtra[offset];
        verify = yankee.bind(entity)(verify);
        backup = verify.TableRadioRow;
        verify = {'label': 'Show role colors in names', 'value': 'color-in-names'};
        backup = kiloes.bind(entity)(backup, verify);
        verify = new Array(4);
        verify[0] = backup;
        sizing = _closure1_slot7;
        backup = foxtra[offset];
        backup = yankee.bind(entity)(backup);
        kiloes = backup.TableRadioRow;
        backup = {'label': 'Show role colors next to names', 'value': 'color-next-to-names'};
        backup = sizing.bind(entity)(kiloes, backup);
        verify[1] = backup;
        sizing = _closure1_slot7;
        backup = foxtra[offset];
        backup = yankee.bind(entity)(backup);
        kiloes = backup.TableRadioRow;
        backup = {'label': "Don't show role colors", 'value': 'no-color'};
        backup = sizing.bind(entity)(kiloes, backup);
        verify[2] = backup;
        romeon = _closure1_slot7;
        offset = foxtra[offset];
        offset = yankee.bind(entity)(offset);
        yankee = offset.TableRadioRow;
        offset = {'label': 'Disabled Item', 'subLabel': 'This should not be selectable', 'value': 'option4', 'disabled': true};
        offset = romeon.bind(entity)(yankee, offset);
        verify[3] = offset;
        oscard['children'] = verify;
        oscard = option.bind(entity)(golfie, oscard);
        report[2] = oscard;
        michal['children'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    var _closure1_slot12 = entity;
    entity = function() { // Original name: Switch
        entity = _closure1_slot11;
        tangon = undefined;
        update = entity.bind(tangon)();
        entity = _closure1_slot11;
        michal = false;
        sizing = entity.bind(tangon)(michal);
        entity = _closure1_slot11;
        result = entity.bind(tangon)();
        entity = _closure1_slot11;
        output = entity.bind(tangon)(michal);
        zuuluu = _closure1_slot8;
        michal = _closure1_slot9;
        entity = {};
        option = _closure1_slot7;
        yankee = _closure1_slot0;
        backup = _closure1_slot1;
        oscard = 7;
        report = backup[oscard];
        report = yankee.bind(tangon)(report);
        golfie = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Switch'};
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(4);
        report[0] = golfie;
        option = _closure1_slot7;
        oscard = backup[oscard];
        oscard = yankee.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {'variant': 'text-md/normal', 'children': 'Toggle the state of a single setting on or off, immediately'};
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        verify = _closure1_slot7;
        oscard = 10;
        golfie = backup[oscard];
        golfie = yankee.bind(tangon)(golfie);
        option = golfie.TableRowGroup;
        golfie = {};
        offset = 'Emoji';
        golfie['title'] = offset;
        echoed = _closure1_slot7;
        offset = 11;
        romeon = backup[offset];
        romeon = yankee.bind(tangon)(romeon);
        kiloes = romeon.TableSwitchRow;
        romeon = {'label': 'Show emoji reactions on messages', 'subLabel': 'Show more information in less space'};
        ctrled = romeon;
        source = update;
        update = copyDataProperties(ctrled, source);
        romeon = echoed.bind(tangon)(kiloes, romeon);
        golfie['children'] = romeon;
        golfie = verify.bind(tangon)(option, golfie);
        report[2] = golfie;
        option = _closure1_slot8;
        oscard = backup[oscard];
        oscard = yankee.bind(tangon)(oscard);
        golfie = oscard.TableRowGroup;
        oscard = {};
        verify = 'Display images, videos, and lolcats';
        oscard['title'] = verify;
        kiloes = _closure1_slot7;
        verify = backup[offset];
        verify = yankee.bind(tangon)(verify);
        romeon = verify.TableSwitchRow;
        verify = {};
        echoed = 'When posted as links to chat';
        verify['label'] = echoed;
        ctrled = verify;
        source = sizing;
        sizing = copyDataProperties(ctrled, source);
        romeon = kiloes.bind(tangon)(romeon, verify);
        verify = new Array(4);
        verify[0] = romeon;
        sizing = _closure1_slot7;
        romeon = backup[offset];
        romeon = yankee.bind(tangon)(romeon);
        kiloes = romeon.TableSwitchRow;
        romeon = {};
        echoed = 'When uploaded directly to Discord';
        romeon['label'] = echoed;
        ctrled = romeon;
        source = result;
        result = copyDataProperties(ctrled, source);
        romeon = sizing.bind(tangon)(kiloes, romeon);
        verify[1] = romeon;
        sizing = _closure1_slot7;
        romeon = backup[offset];
        romeon = yankee.bind(tangon)(romeon);
        kiloes = romeon.TableSwitchRow;
        romeon = {};
        result = 'With image descriptions';
        romeon['label'] = result;
        ctrled = romeon;
        source = output;
        output = copyDataProperties(ctrled, source);
        romeon = sizing.bind(tangon)(kiloes, romeon);
        verify[2] = romeon;
        romeon = _closure1_slot7;
        offset = backup[offset];
        offset = yankee.bind(tangon)(offset);
        yankee = offset.TableSwitchRow;
        offset = {'label': 'Disabled switch item', 'subLabel': 'This should not be switchable', 'disabled': true, 'value': false};
        foxtra = _closure1_slot6;
        offset['onValueChange'] = foxtra;
        offset = romeon.bind(tangon)(yankee, offset);
        verify[3] = offset;
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[3] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = function(argFoo) { // Original name: InlineCheckbox
        entity = argFoo;
        verify = entity.label;
        entity = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                oscard = undefined;
                report = undefined;
                if(!(report === report)) { _fun00002_ip = 12; continue _fun00001 }
 10:
                report = true;
 12:
                var _closure3_slot0 = oscard;
                tangon = _closure1_slot3;
                entity = tangon.useState;
                report = entity.bind(tangon)(report);
                tangon = _closure1_slot2;
                entity = 2;
                report = tangon.bind(oscard)(report, entity);
                entity = 0;
                tangon = report[entity];
                entity = 1;
                entity = report[entity];
                _closure3_slot0 = entity;
                entity = {};
                entity['checked'] = tangon;
                report = _closure1_slot3;
                tangon = report.useCallback;
                zuuluu = function(argFoo) {
                    zuuluu = _closure3_slot0;
                    entity = undefined;
                    michal = argFoo;
                    michal = zuuluu.bind(entity)(michal);
                    return entity;
                };
                michal = new Array(0);
                michal = tangon.bind(report)(zuuluu, michal);
                entity['onPress'] = michal;
                return entity;
            }
        };
        tangon = undefined;
        entity = entity.bind(tangon)();
        romeon = entity.checked;
        var _closure2_slot0 = romeon;
        entity = entity.onPress;
        var _closure2_slot1 = entity;
        zuuluu = _closure1_slot8;
        michal = _closure1_slot4;
        entity = {};
        golfie = 'checkbox';
        entity['accessibilityRole'] = golfie;
        entity['accessibilityLabel'] = verify;
        golfie = {};
        golfie['selected'] = romeon;
        entity['accessibilityState'] = golfie;
        report = function() { // Original name: onPress
            zuuluu = _closure2_slot1;
            entity = _closure2_slot0;
            michal = !entity;
            entity = undefined;
            entity = zuuluu.bind(entity)(michal);
            return entity;
        };
        entity['onPress'] = report;
        report = {'flexDirection': 'row', 'alignItems': 'center', 'gap': 8};
        entity['style'] = report;
        yankee = _closure1_slot7;
        golfie = _closure1_slot0;
        offset = _closure1_slot1;
        report = 12;
        report = offset[report];
        report = golfie.bind(tangon)(report);
        option = report.FormCheckbox;
        report = {};
        report['checked'] = romeon;
        option = yankee.bind(tangon)(option, report);
        report = new Array(2);
        report[0] = option;
        option = _closure1_slot7;
        oscard = 7;
        oscard = offset[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.Text;
        oscard = {};
        offset = 'text-md/normal';
        oscard['variant'] = offset;
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function() { // Original name: InlineCheckboxDemo
        tangon = _closure1_slot8;
        zuuluu = _closure1_slot9;
        michal = {};
        option = _closure1_slot7;
        golfie = _closure1_slot0;
        report = _closure1_slot1;
        entity = 7;
        report = report[entity];
        entity = undefined;
        report = golfie.bind(entity)(report);
        golfie = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Inline Checkbox'};
        golfie = option.bind(entity)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        option = _closure1_slot7;
        golfie = _closure1_slot14;
        oscard = {};
        verify = 'Trust google.com links from now on';
        oscard['label'] = verify;
        oscard = option.bind(entity)(golfie, oscard);
        report[1] = oscard;
        michal['children'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = function() { // Original name: Checkbox
        tangon = _closure1_slot8;
        zuuluu = _closure1_slot9;
        michal = {};
        option = _closure1_slot7;
        yankee = _closure1_slot0;
        backup = _closure1_slot1;
        oscard = 7;
        report = backup[oscard];
        entity = undefined;
        report = yankee.bind(entity)(report);
        golfie = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Checkbox'};
        golfie = option.bind(entity)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        option = _closure1_slot7;
        oscard = backup[oscard];
        oscard = yankee.bind(entity)(oscard);
        golfie = oscard.Text;
        oscard = {'variant': 'text-md/normal', 'children': 'Select one or more options from a short list of options'};
        oscard = option.bind(entity)(golfie, oscard);
        report[1] = oscard;
        option = _closure1_slot8;
        oscard = 10;
        oscard = backup[oscard];
        oscard = yankee.bind(entity)(oscard);
        golfie = oscard.TableRowGroup;
        oscard = {};
        verify = 'Who can send you a friend request?';
        oscard['title'] = verify;
        kiloes = _closure1_slot7;
        offset = 13;
        verify = backup[offset];
        verify = yankee.bind(entity)(verify);
        romeon = verify.TableCheckboxRow;
        verify = {'label': 'Everyone', 'subLabel': 'Anyone can send you a friend request', 'checked': false};
        sizing = _closure1_slot6;
        verify['onPress'] = sizing;
        romeon = kiloes.bind(entity)(romeon, verify);
        verify = new Array(3);
        verify[0] = romeon;
        sizing = _closure1_slot7;
        romeon = backup[offset];
        romeon = yankee.bind(entity)(romeon);
        kiloes = romeon.TableCheckboxRow;
        romeon = {'label': 'Friends of Friends', 'subLabel': 'Anyone who is friends with your friends can send you a friend request', 'checked': true};
        output = _closure1_slot6;
        romeon['onPress'] = output;
        romeon = sizing.bind(entity)(kiloes, romeon);
        verify[1] = romeon;
        romeon = _closure1_slot7;
        offset = backup[offset];
        offset = yankee.bind(entity)(offset);
        yankee = offset.TableCheckboxRow;
        offset = {'label': 'Server Members', 'subLabel': 'Anyone who is in a server with you can send you a friend request', 'checked': true};
        foxtra = _closure1_slot6;
        offset['onPress'] = foxtra;
        offset = romeon.bind(entity)(yankee, offset);
        verify[2] = offset;
        oscard['children'] = verify;
        oscard = option.bind(entity)(golfie, oscard);
        report[2] = oscard;
        michal['children'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    var _closure1_slot16 = entity;
    entity = function() { // Original name: SliderDemo
        tangon = _closure1_slot8;
        zuuluu = _closure1_slot9;
        michal = {};
        golfie = _closure1_slot7;
        backup = _closure1_slot0;
        sizing = _closure1_slot1;
        entity = 7;
        report = sizing[entity];
        entity = undefined;
        report = backup.bind(entity)(report);
        oscard = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Slider'};
        oscard = golfie.bind(entity)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        option = _closure1_slot7;
        oscard = 14;
        oscard = sizing[oscard];
        oscard = backup.bind(entity)(oscard);
        golfie = oscard.TableRow;
        oscard = {'start': true, 'end': true, 'label': 'Volume'};
        yankee = _closure1_slot7;
        verify = 15;
        verify = sizing[verify];
        verify = backup.bind(entity)(verify);
        offset = verify.Slider;
        verify = {};
        output = _closure1_slot7;
        foxtra = 16;
        foxtra = sizing[foxtra];
        foxtra = backup.bind(entity)(foxtra);
        kiloes = foxtra.VoiceXIcon;
        foxtra = {};
        foxtra = output.bind(entity)(kiloes, foxtra);
        verify['startIcon'] = foxtra;
        kiloes = _closure1_slot7;
        foxtra = 17;
        foxtra = sizing[foxtra];
        foxtra = backup.bind(entity)(foxtra);
        backup = foxtra.VoiceNormalIcon;
        foxtra = {};
        foxtra = kiloes.bind(entity)(backup, foxtra);
        verify['endIcon'] = foxtra;
        romeon = _closure1_slot6;
        verify['onValueChange'] = romeon;
        verify = yankee.bind(entity)(offset, verify);
        oscard['subLabel'] = verify;
        oscard = option.bind(entity)(golfie, oscard);
        report[1] = oscard;
        michal['children'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    var _closure1_slot17 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Pressable;
    var _closure1_slot4 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.NOOP;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot8 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'padding': 16, 'paddingBottom': 32};
    tangon['container'] = verify;
    verify = {};
    offset = 6;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xl;
    verify['borderRadius'] = offset;
    tangon['sample'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = function() { // Original name: useSwitchState
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            report = arguments[0];
            oscard = undefined;
            if(!(report === oscard)) { _fun00004_ip = 13; continue _fun00003 }
 11:
            report = true;
 13:
            var _closure2_slot0 = oscard;
            tangon = _closure1_slot3;
            zuuluu = tangon.useState;
            report = zuuluu.bind(tangon)(report);
            tangon = _closure1_slot2;
            zuuluu = 2;
            report = tangon.bind(oscard)(report, zuuluu);
            zuuluu = 0;
            zuuluu = report[zuuluu];
            tangon = 1;
            tangon = report[tangon];
            _closure2_slot0 = tangon;
            report = _closure1_slot3;
            tangon = report.useCallback;
            michal = function(argFoo) {
                zuuluu = _closure2_slot0;
                entity = undefined;
                michal = argFoo;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            entity = new Array(0);
            michal = tangon.bind(report)(michal, entity);
            entity = {};
            entity['value'] = zuuluu;
            entity['onValueChange'] = michal;
            return entity;
        }
    };
    var _closure1_slot11 = tangon;
    tangon = 19;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemFormPrimitives.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemFormPrimitives
        entity = _closure1_slot10;
        tangon = undefined;
        option = entity.bind(tangon)();
        zuuluu = _closure1_slot7;
        michal = _closure1_slot5;
        entity = {};
        golfie = _closure1_slot8;
        oscard = _closure1_slot0;
        offset = _closure1_slot1;
        report = 18;
        report = offset[report];
        report = oscard.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        offset = 24;
        report['spacing'] = offset;
        option = option.container;
        report['style'] = option;
        yankee = _closure1_slot7;
        offset = _closure1_slot12;
        option = {};
        offset = yankee.bind(tangon)(offset, option);
        option = new Array(5);
        option[0] = offset;
        romeon = _closure1_slot7;
        yankee = _closure1_slot13;
        offset = {};
        offset = romeon.bind(tangon)(yankee, offset);
        option[1] = offset;
        romeon = _closure1_slot7;
        yankee = _closure1_slot16;
        offset = {};
        offset = romeon.bind(tangon)(yankee, offset);
        option[2] = offset;
        romeon = _closure1_slot7;
        yankee = _closure1_slot15;
        offset = {};
        offset = romeon.bind(tangon)(yankee, offset);
        option[3] = offset;
        yankee = _closure1_slot7;
        offset = _closure1_slot17;
        verify = {};
        verify = yankee.bind(tangon)(offset, verify);
        option[4] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();