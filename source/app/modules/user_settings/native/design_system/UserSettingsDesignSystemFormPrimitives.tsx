// app/modules/user_settings/native/design_system/UserSettingsDesignSystemFormPrimitives.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = function() { // Original name: Radio
        tango = _closure1_slot8;
        zulu = _closure1_slot9;
        mike = {};
        options = _closure1_slot7;
        yankee = _closure1_slot0;
        foxtrot = _closure1_slot1;
        oscar = 7;
        report = foxtrot[oscar];
        entity = undefined;
        report = yankee.bind(entity)(report);
        golf = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Radio'};
        golf = options.bind(entity)(golf, report);
        report = new Array(3);
        report[0] = golf;
        options = _closure1_slot7;
        oscar = foxtrot[oscar];
        oscar = yankee.bind(entity)(oscar);
        golf = oscar.Text;
        oscar = {'variant': 'text-md/normal', 'children': 'Select a single option from a short list of multiple options'};
        oscar = options.bind(entity)(golf, oscar);
        report[1] = oscar;
        options = _closure1_slot8;
        oscar = 8;
        oscar = foxtrot[oscar];
        oscar = yankee.bind(entity)(oscar);
        golf = oscar.TableRadioGroup;
        oscar = {'title': 'Role Colors', 'hasIcons': false, 'value': 'color-in-names'};
        verify = _closure1_slot6;
        oscar['onChange'] = verify;
        kilo = _closure1_slot7;
        offset = 9;
        verify = foxtrot[offset];
        verify = yankee.bind(entity)(verify);
        backup = verify.TableRadioRow;
        verify = {'label': 'Show role colors in names', 'value': 'color-in-names'};
        backup = kilo.bind(entity)(backup, verify);
        verify = new Array(4);
        verify[0] = backup;
        sizing = _closure1_slot7;
        backup = foxtrot[offset];
        backup = yankee.bind(entity)(backup);
        kilo = backup.TableRadioRow;
        backup = {'label': 'Show role colors next to names', 'value': 'color-next-to-names'};
        backup = sizing.bind(entity)(kilo, backup);
        verify[1] = backup;
        sizing = _closure1_slot7;
        backup = foxtrot[offset];
        backup = yankee.bind(entity)(backup);
        kilo = backup.TableRadioRow;
        backup = {'label': "Don't show role colors", 'value': 'no-color'};
        backup = sizing.bind(entity)(kilo, backup);
        verify[2] = backup;
        romeo = _closure1_slot7;
        offset = foxtrot[offset];
        offset = yankee.bind(entity)(offset);
        yankee = offset.TableRadioRow;
        offset = {'label': 'Disabled Item', 'subLabel': 'This should not be selectable', 'value': 'option4', 'disabled': true};
        offset = romeo.bind(entity)(yankee, offset);
        verify[3] = offset;
        oscar['children'] = verify;
        oscar = options.bind(entity)(golf, oscar);
        report[2] = oscar;
        mike['children'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    var _closure1_slot13 = entity;
    entity = function() { // Original name: Switch
        entity = _closure1_slot11;
        tango = undefined;
        update = entity.bind(tango)();
        entity = _closure1_slot11;
        mike = false;
        sizing = entity.bind(tango)(mike);
        entity = _closure1_slot11;
        result = entity.bind(tango)();
        entity = _closure1_slot11;
        output = entity.bind(tango)(mike);
        zulu = _closure1_slot8;
        mike = _closure1_slot9;
        entity = {};
        options = _closure1_slot7;
        yankee = _closure1_slot0;
        backup = _closure1_slot1;
        oscar = 7;
        report = backup[oscar];
        report = yankee.bind(tango)(report);
        golf = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Switch'};
        golf = options.bind(tango)(golf, report);
        report = new Array(4);
        report[0] = golf;
        options = _closure1_slot7;
        oscar = backup[oscar];
        oscar = yankee.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {'variant': 'text-md/normal', 'children': 'Toggle the state of a single setting on or off, immediately'};
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        verify = _closure1_slot7;
        oscar = 10;
        golf = backup[oscar];
        golf = yankee.bind(tango)(golf);
        options = golf.TableRowGroup;
        golf = {};
        offset = 'Emoji';
        golf['title'] = offset;
        echo = _closure1_slot7;
        offset = 11;
        romeo = backup[offset];
        romeo = yankee.bind(tango)(romeo);
        kilo = romeo.TableSwitchRow;
        romeo = {'label': 'Show emoji reactions on messages', 'subLabel': 'Show more information in less space'};
        control = romeo;
        source = update;
        update = copyDataProperties(control, source);
        romeo = echo.bind(tango)(kilo, romeo);
        golf['children'] = romeo;
        golf = verify.bind(tango)(options, golf);
        report[2] = golf;
        options = _closure1_slot8;
        oscar = backup[oscar];
        oscar = yankee.bind(tango)(oscar);
        golf = oscar.TableRowGroup;
        oscar = {};
        verify = 'Display images, videos, and lolcats';
        oscar['title'] = verify;
        kilo = _closure1_slot7;
        verify = backup[offset];
        verify = yankee.bind(tango)(verify);
        romeo = verify.TableSwitchRow;
        verify = {};
        echo = 'When posted as links to chat';
        verify['label'] = echo;
        control = verify;
        source = sizing;
        sizing = copyDataProperties(control, source);
        romeo = kilo.bind(tango)(romeo, verify);
        verify = new Array(4);
        verify[0] = romeo;
        sizing = _closure1_slot7;
        romeo = backup[offset];
        romeo = yankee.bind(tango)(romeo);
        kilo = romeo.TableSwitchRow;
        romeo = {};
        echo = 'When uploaded directly to Discord';
        romeo['label'] = echo;
        control = romeo;
        source = result;
        result = copyDataProperties(control, source);
        romeo = sizing.bind(tango)(kilo, romeo);
        verify[1] = romeo;
        sizing = _closure1_slot7;
        romeo = backup[offset];
        romeo = yankee.bind(tango)(romeo);
        kilo = romeo.TableSwitchRow;
        romeo = {};
        result = 'With image descriptions';
        romeo['label'] = result;
        control = romeo;
        source = output;
        output = copyDataProperties(control, source);
        romeo = sizing.bind(tango)(kilo, romeo);
        verify[2] = romeo;
        romeo = _closure1_slot7;
        offset = backup[offset];
        offset = yankee.bind(tango)(offset);
        yankee = offset.TableSwitchRow;
        offset = {'label': 'Disabled switch item', 'subLabel': 'This should not be switchable', 'disabled': true, 'value': false};
        foxtrot = _closure1_slot6;
        offset['onValueChange'] = foxtrot;
        offset = romeo.bind(tango)(yankee, offset);
        verify[3] = offset;
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[3] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function(argFoo) { // Original name: InlineCheckbox
        entity = argFoo;
        verify = entity.label;
        entity = _closure1_slot12;
        tango = undefined;
        entity = entity.bind(tango)();
        romeo = entity.checked;
        var _closure2_slot0 = romeo;
        entity = entity.onPress;
        var _closure2_slot1 = entity;
        zulu = _closure1_slot8;
        mike = _closure1_slot4;
        entity = {};
        golf = 'checkbox';
        entity['accessibilityRole'] = golf;
        entity['accessibilityLabel'] = verify;
        golf = {};
        golf['selected'] = romeo;
        entity['accessibilityState'] = golf;
        report = function() { // Original name: onPress
            zulu = _closure2_slot1;
            entity = _closure2_slot0;
            mike = !entity;
            entity = undefined;
            entity = zulu.bind(entity)(mike);
            return entity;
        };
        entity['onPress'] = report;
        report = {'flexDirection': 'row', 'alignItems': 'center', 'gap': 8};
        entity['style'] = report;
        yankee = _closure1_slot7;
        golf = _closure1_slot0;
        offset = _closure1_slot1;
        report = 12;
        report = offset[report];
        report = golf.bind(tango)(report);
        options = report.FormCheckbox;
        report = {};
        report['checked'] = romeo;
        options = yankee.bind(tango)(options, report);
        report = new Array(2);
        report[0] = options;
        options = _closure1_slot7;
        oscar = 7;
        oscar = offset[oscar];
        oscar = golf.bind(tango)(oscar);
        golf = oscar.Text;
        oscar = {};
        offset = 'text-md/normal';
        oscar['variant'] = offset;
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = function() { // Original name: InlineCheckboxDemo
        tango = _closure1_slot8;
        zulu = _closure1_slot9;
        mike = {};
        options = _closure1_slot7;
        golf = _closure1_slot0;
        report = _closure1_slot1;
        entity = 7;
        report = report[entity];
        entity = undefined;
        report = golf.bind(entity)(report);
        golf = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Inline Checkbox'};
        golf = options.bind(entity)(golf, report);
        report = new Array(2);
        report[0] = golf;
        options = _closure1_slot7;
        golf = _closure1_slot15;
        oscar = {};
        verify = 'Trust google.com links from now on';
        oscar['label'] = verify;
        oscar = options.bind(entity)(golf, oscar);
        report[1] = oscar;
        mike['children'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    var _closure1_slot16 = entity;
    entity = function() { // Original name: Checkbox
        tango = _closure1_slot8;
        zulu = _closure1_slot9;
        mike = {};
        options = _closure1_slot7;
        yankee = _closure1_slot0;
        backup = _closure1_slot1;
        oscar = 7;
        report = backup[oscar];
        entity = undefined;
        report = yankee.bind(entity)(report);
        golf = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Checkbox'};
        golf = options.bind(entity)(golf, report);
        report = new Array(3);
        report[0] = golf;
        options = _closure1_slot7;
        oscar = backup[oscar];
        oscar = yankee.bind(entity)(oscar);
        golf = oscar.Text;
        oscar = {'variant': 'text-md/normal', 'children': 'Select one or more options from a short list of options'};
        oscar = options.bind(entity)(golf, oscar);
        report[1] = oscar;
        options = _closure1_slot8;
        oscar = 10;
        oscar = backup[oscar];
        oscar = yankee.bind(entity)(oscar);
        golf = oscar.TableRowGroup;
        oscar = {};
        verify = 'Who can send you a friend request?';
        oscar['title'] = verify;
        kilo = _closure1_slot7;
        offset = 13;
        verify = backup[offset];
        verify = yankee.bind(entity)(verify);
        romeo = verify.TableCheckboxRow;
        verify = {'label': 'Everyone', 'subLabel': 'Anyone can send you a friend request', 'checked': false};
        sizing = _closure1_slot6;
        verify['onPress'] = sizing;
        romeo = kilo.bind(entity)(romeo, verify);
        verify = new Array(3);
        verify[0] = romeo;
        sizing = _closure1_slot7;
        romeo = backup[offset];
        romeo = yankee.bind(entity)(romeo);
        kilo = romeo.TableCheckboxRow;
        romeo = {'label': 'Friends of Friends', 'subLabel': 'Anyone who is friends with your friends can send you a friend request', 'checked': true};
        output = _closure1_slot6;
        romeo['onPress'] = output;
        romeo = sizing.bind(entity)(kilo, romeo);
        verify[1] = romeo;
        romeo = _closure1_slot7;
        offset = backup[offset];
        offset = yankee.bind(entity)(offset);
        yankee = offset.TableCheckboxRow;
        offset = {'label': 'Server Members', 'subLabel': 'Anyone who is in a server with you can send you a friend request', 'checked': true};
        foxtrot = _closure1_slot6;
        offset['onPress'] = foxtrot;
        offset = romeo.bind(entity)(yankee, offset);
        verify[2] = offset;
        oscar['children'] = verify;
        oscar = options.bind(entity)(golf, oscar);
        report[2] = oscar;
        mike['children'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    var _closure1_slot17 = entity;
    entity = function() { // Original name: SliderDemo
        tango = _closure1_slot8;
        zulu = _closure1_slot9;
        mike = {};
        golf = _closure1_slot7;
        backup = _closure1_slot0;
        sizing = _closure1_slot1;
        entity = 7;
        report = sizing[entity];
        entity = undefined;
        report = backup.bind(entity)(report);
        oscar = report.Text;
        report = {'variant': 'heading-lg/bold', 'children': 'Slider'};
        oscar = golf.bind(entity)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        options = _closure1_slot7;
        oscar = 14;
        oscar = sizing[oscar];
        oscar = backup.bind(entity)(oscar);
        golf = oscar.TableRow;
        oscar = {'start': true, 'end': true, 'label': 'Volume'};
        yankee = _closure1_slot7;
        verify = 15;
        verify = sizing[verify];
        verify = backup.bind(entity)(verify);
        offset = verify.Slider;
        verify = {};
        output = _closure1_slot7;
        foxtrot = 16;
        foxtrot = sizing[foxtrot];
        foxtrot = backup.bind(entity)(foxtrot);
        kilo = foxtrot.VoiceXIcon;
        foxtrot = {};
        foxtrot = output.bind(entity)(kilo, foxtrot);
        verify['startIcon'] = foxtrot;
        kilo = _closure1_slot7;
        foxtrot = 17;
        foxtrot = sizing[foxtrot];
        foxtrot = backup.bind(entity)(foxtrot);
        backup = foxtrot.VoiceNormalIcon;
        foxtrot = {};
        foxtrot = kilo.bind(entity)(backup, foxtrot);
        verify['endIcon'] = foxtrot;
        romeo = _closure1_slot6;
        verify['onValueChange'] = romeo;
        verify = yankee.bind(entity)(offset, verify);
        oscar['subLabel'] = verify;
        oscar = options.bind(entity)(golf, oscar);
        report[1] = oscar;
        mike['children'] = report;
        entity = tango.bind(entity)(zulu, mike);
        return entity;
    };
    var _closure1_slot18 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot2 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Pressable;
    var _closure1_slot4 = golf;
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.NOOP;
    var _closure1_slot6 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'padding': 16, 'paddingBottom': 32};
    tango['container'] = verify;
    verify = {};
    offset = 6;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xl;
    verify['borderRadius'] = offset;
    tango['sample'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot10 = tango;
    tango = function() { // Original name: useSwitchState
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tango = arguments[0];
            oscar = undefined;
            if(!(tango === oscar)) { _fun00002_ip = 13; continue _fun00001 }
 11:
            tango = true;
 13:
            var _closure2_slot0 = oscar;
            report = _closure1_slot3;
            zulu = report.useState;
            tango = zulu.bind(report)(tango);
            zulu = _closure1_slot2;
            mike = 2;
            tango = zulu.bind(oscar)(tango, mike);
            mike = 0;
            zulu = tango[mike];
            mike = 1;
            mike = tango[mike];
            _closure2_slot0 = mike;
            tango = report.useCallback;
            mike = function(argFoo) {
                zulu = _closure2_slot0;
                entity = undefined;
                mike = argFoo;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            entity = new Array(0);
            mike = tango.bind(report)(mike, entity);
            entity = {};
            entity['value'] = zulu;
            entity['onValueChange'] = mike;
            return entity;
        }
    };
    var _closure1_slot11 = tango;
    tango = function() { // Original name: useCheckboxState
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            tango = arguments[0];
            oscar = undefined;
            if(!(tango === oscar)) { _fun00004_ip = 13; continue _fun00003 }
 11:
            tango = true;
 13:
            var _closure2_slot0 = oscar;
            report = _closure1_slot3;
            zulu = report.useState;
            tango = zulu.bind(report)(tango);
            zulu = _closure1_slot2;
            entity = 2;
            tango = zulu.bind(oscar)(tango, entity);
            entity = 0;
            zulu = tango[entity];
            entity = 1;
            entity = tango[entity];
            _closure2_slot0 = entity;
            entity = {};
            entity['checked'] = zulu;
            tango = report.useCallback;
            zulu = function(argFoo) {
                zulu = _closure2_slot0;
                entity = undefined;
                mike = argFoo;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            mike = new Array(0);
            mike = tango.bind(report)(zulu, mike);
            entity['onPress'] = mike;
            return entity;
        }
    };
    var _closure1_slot12 = tango;
    tango = 19;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemFormPrimitives.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemFormPrimitives
        entity = _closure1_slot10;
        tango = undefined;
        options = entity.bind(tango)();
        zulu = _closure1_slot7;
        mike = _closure1_slot5;
        entity = {};
        golf = _closure1_slot8;
        oscar = _closure1_slot0;
        offset = _closure1_slot1;
        report = 18;
        report = offset[report];
        report = oscar.bind(tango)(report);
        oscar = report.Stack;
        report = {};
        offset = 24;
        report['spacing'] = offset;
        options = options.container;
        report['style'] = options;
        yankee = _closure1_slot7;
        offset = _closure1_slot13;
        options = {};
        offset = yankee.bind(tango)(offset, options);
        options = new Array(5);
        options[0] = offset;
        romeo = _closure1_slot7;
        yankee = _closure1_slot14;
        offset = {};
        offset = romeo.bind(tango)(yankee, offset);
        options[1] = offset;
        romeo = _closure1_slot7;
        yankee = _closure1_slot17;
        offset = {};
        offset = romeo.bind(tango)(yankee, offset);
        options[2] = offset;
        romeo = _closure1_slot7;
        yankee = _closure1_slot16;
        offset = {};
        offset = romeo.bind(tango)(yankee, offset);
        options[3] = offset;
        yankee = _closure1_slot7;
        offset = _closure1_slot18;
        verify = {};
        verify = yankee.bind(tango)(offset, verify);
        options[4] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();