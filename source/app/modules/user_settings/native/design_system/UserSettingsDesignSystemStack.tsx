// app/modules/user_settings/native/design_system/UserSettingsDesignSystemStack.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = function() { // Original name: StackBlock
        michal = _closure1_slot6;
        tangon = undefined;
        report = michal.bind(tangon)();
        zuuluu = _closure1_slot4;
        michal = _closure1_slot2;
        entity = {};
        report = report.block;
        entity['style'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot7 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    offset = 1;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot2 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'padding': 16, 'flex': 1, 'alignItems': 'center'};
    tangon['container'] = verify;
    verify = {};
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.lg;
    verify['borderRadius'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_MOD_STRONG;
    verify['backgroundColor'] = yankee;
    yankee = 80;
    verify['height'] = yankee;
    verify['flex'] = offset;
    tangon['block'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemStack.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemStack
        entity = _closure1_slot6;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        zuuluu = _closure1_slot4;
        michal = _closure1_slot3;
        entity = {};
        oscard = _closure1_slot2;
        report = {};
        golfie = golfie.container;
        report['style'] = golfie;
        verify = _closure1_slot5;
        result = _closure1_slot0;
        echoed = _closure1_slot1;
        output = 5;
        golfie = echoed[output];
        golfie = result.bind(tangon)(golfie);
        option = golfie.Stack;
        golfie = {};
        offset = 16;
        golfie['spacing'] = offset;
        foxtra = _closure1_slot4;
        yankee = 6;
        offset = echoed[yankee];
        offset = result.bind(tangon)(offset);
        romeon = offset.Card;
        offset = {};
        backup = echoed[output];
        backup = result.bind(tangon)(backup);
        kiloes = backup.Stack;
        backup = {};
        vacuum = _closure1_slot4;
        source = 7;
        sizing = echoed[source];
        sizing = result.bind(tangon)(sizing);
        ctrled = sizing.Text;
        sizing = {'variant': 'text-lg/bold', 'children': 'Basic Example'};
        ctrled = vacuum.bind(tangon)(ctrled, sizing);
        sizing = new Array(3);
        sizing[0] = ctrled;
        sequen = _closure1_slot4;
        ctrled = echoed[source];
        ctrled = result.bind(tangon)(ctrled);
        vacuum = ctrled.Text;
        ctrled = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'By default, stacks are vertical and have a spacing of 8.'};
        ctrled = sequen.bind(tangon)(vacuum, ctrled);
        sizing[1] = ctrled;
        ctrled = echoed[output];
        ctrled = result.bind(tangon)(ctrled);
        sequen = ctrled.Stack;
        vacuum = {};
        record = _closure1_slot4;
        ctrled = _closure1_slot7;
        config = {};
        record = record.bind(tangon)(ctrled, config);
        config = new Array(2);
        config[0] = record;
        cntext = _closure1_slot4;
        record = {};
        record = cntext.bind(tangon)(ctrled, record);
        config[1] = record;
        vacuum['children'] = config;
        vacuum = verify.bind(tangon)(sequen, vacuum);
        sizing[2] = vacuum;
        backup['children'] = sizing;
        backup = verify.bind(tangon)(kiloes, backup);
        offset['children'] = backup;
        romeon = foxtra.bind(tangon)(romeon, offset);
        offset = new Array(3);
        offset[0] = romeon;
        backup = _closure1_slot4;
        romeon = echoed[yankee];
        romeon = result.bind(tangon)(romeon);
        foxtra = romeon.Card;
        romeon = {};
        kiloes = echoed[output];
        kiloes = result.bind(tangon)(kiloes);
        sizing = kiloes.Stack;
        kiloes = {};
        config = _closure1_slot4;
        vacuum = echoed[source];
        vacuum = result.bind(tangon)(vacuum);
        sequen = vacuum.Text;
        vacuum = {'variant': 'text-lg/bold', 'children': 'Spacing'};
        sequen = config.bind(tangon)(sequen, vacuum);
        vacuum = new Array(3);
        vacuum[0] = sequen;
        record = _closure1_slot4;
        sequen = echoed[source];
        sequen = result.bind(tangon)(sequen);
        config = sequen.Text;
        sequen = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'You can control the spacing with the spacing prop. The spacing prop uses our 4px-based spacing scale. By default, stacks are vertical and have a spacing of 8.'};
        sequen = record.bind(tangon)(config, sequen);
        vacuum[1] = sequen;
        sequen = echoed[output];
        sequen = result.bind(tangon)(sequen);
        config = sequen.Stack;
        sequen = {};
        record = 24;
        sequen['spacing'] = record;
        cntext = _closure1_slot4;
        record = {};
        cntext = cntext.bind(tangon)(ctrled, record);
        record = new Array(2);
        record[0] = cntext;
        papara = _closure1_slot4;
        cntext = {};
        cntext = papara.bind(tangon)(ctrled, cntext);
        record[1] = cntext;
        sequen['children'] = record;
        sequen = verify.bind(tangon)(config, sequen);
        vacuum[2] = sequen;
        kiloes['children'] = vacuum;
        kiloes = verify.bind(tangon)(sizing, kiloes);
        romeon['children'] = kiloes;
        romeon = backup.bind(tangon)(foxtra, romeon);
        offset[1] = romeon;
        foxtra = _closure1_slot4;
        yankee = echoed[yankee];
        yankee = result.bind(tangon)(yankee);
        romeon = yankee.Card;
        yankee = {};
        backup = echoed[output];
        backup = result.bind(tangon)(backup);
        kiloes = backup.Stack;
        backup = {};
        sequen = _closure1_slot4;
        sizing = echoed[source];
        sizing = result.bind(tangon)(sizing);
        vacuum = sizing.Text;
        sizing = {'variant': 'text-lg/bold', 'children': 'Horizontal'};
        vacuum = sequen.bind(tangon)(vacuum, sizing);
        sizing = new Array(3);
        sizing[0] = vacuum;
        sequen = _closure1_slot4;
        source = echoed[source];
        source = result.bind(tangon)(source);
        vacuum = source.Text;
        source = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'You can control the direction with the direction prop. The direction prop can be either horizontal or vertical.'};
        source = sequen.bind(tangon)(vacuum, source);
        sizing[1] = source;
        output = echoed[output];
        output = result.bind(tangon)(output);
        result = output.Stack;
        output = {};
        echoed = 'horizontal';
        output['direction'] = echoed;
        source = _closure1_slot4;
        echoed = {};
        source = source.bind(tangon)(ctrled, echoed);
        echoed = new Array(2);
        echoed[0] = source;
        source = _closure1_slot4;
        update = {};
        update = source.bind(tangon)(ctrled, update);
        echoed[1] = update;
        output['children'] = echoed;
        output = verify.bind(tangon)(result, output);
        sizing[2] = output;
        backup['children'] = sizing;
        backup = verify.bind(tangon)(kiloes, backup);
        yankee['children'] = backup;
        yankee = foxtra.bind(tangon)(romeon, yankee);
        offset[2] = yankee;
        golfie['children'] = offset;
        golfie = verify.bind(tangon)(option, golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();