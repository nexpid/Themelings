// app/modules/user_settings/native/design_system/UserSettingsDesignSystemStack.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = function() { // Original name: StackBlock
        mike = _closure1_slot6;
        tango = undefined;
        report = mike.bind(tango)();
        zulu = _closure1_slot4;
        mike = _closure1_slot2;
        entity = {};
        report = report.block;
        entity['style'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot7 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    offset = 1;
    tango = oscar[offset];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot2 = golf;
    tango = tango.ScrollView;
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'padding': 16, 'flex': 1, 'alignItems': 'center'};
    tango['container'] = verify;
    verify = {};
    yankee = 4;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.lg;
    verify['borderRadius'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_MOD_STRONG;
    verify['backgroundColor'] = yankee;
    yankee = 80;
    verify['height'] = yankee;
    verify['flex'] = offset;
    tango['block'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 8;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemStack.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemStack
        entity = _closure1_slot6;
        tango = undefined;
        golf = entity.bind(tango)();
        zulu = _closure1_slot4;
        mike = _closure1_slot3;
        entity = {};
        oscar = _closure1_slot2;
        report = {};
        golf = golf.container;
        report['style'] = golf;
        verify = _closure1_slot5;
        result = _closure1_slot0;
        echo = _closure1_slot1;
        output = 5;
        golf = echo[output];
        golf = result.bind(tango)(golf);
        options = golf.Stack;
        golf = {};
        offset = 16;
        golf['spacing'] = offset;
        foxtrot = _closure1_slot4;
        yankee = 6;
        offset = echo[yankee];
        offset = result.bind(tango)(offset);
        romeo = offset.Card;
        offset = {};
        backup = echo[output];
        backup = result.bind(tango)(backup);
        kilo = backup.Stack;
        backup = {};
        vacuum = _closure1_slot4;
        source = 7;
        sizing = echo[source];
        sizing = result.bind(tango)(sizing);
        control = sizing.Text;
        sizing = {'variant': 'text-lg/bold', 'children': 'Basic Example'};
        control = vacuum.bind(tango)(control, sizing);
        sizing = new Array(3);
        sizing[0] = control;
        sequence = _closure1_slot4;
        control = echo[source];
        control = result.bind(tango)(control);
        vacuum = control.Text;
        control = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'By default, stacks are vertical and have a spacing of 8.'};
        control = sequence.bind(tango)(vacuum, control);
        sizing[1] = control;
        control = echo[output];
        control = result.bind(tango)(control);
        sequence = control.Stack;
        vacuum = {};
        record = _closure1_slot4;
        control = _closure1_slot7;
        config = {};
        record = record.bind(tango)(control, config);
        config = new Array(2);
        config[0] = record;
        context = _closure1_slot4;
        record = {};
        record = context.bind(tango)(control, record);
        config[1] = record;
        vacuum['children'] = config;
        vacuum = verify.bind(tango)(sequence, vacuum);
        sizing[2] = vacuum;
        backup['children'] = sizing;
        backup = verify.bind(tango)(kilo, backup);
        offset['children'] = backup;
        romeo = foxtrot.bind(tango)(romeo, offset);
        offset = new Array(3);
        offset[0] = romeo;
        backup = _closure1_slot4;
        romeo = echo[yankee];
        romeo = result.bind(tango)(romeo);
        foxtrot = romeo.Card;
        romeo = {};
        kilo = echo[output];
        kilo = result.bind(tango)(kilo);
        sizing = kilo.Stack;
        kilo = {};
        config = _closure1_slot4;
        vacuum = echo[source];
        vacuum = result.bind(tango)(vacuum);
        sequence = vacuum.Text;
        vacuum = {'variant': 'text-lg/bold', 'children': 'Spacing'};
        sequence = config.bind(tango)(sequence, vacuum);
        vacuum = new Array(3);
        vacuum[0] = sequence;
        record = _closure1_slot4;
        sequence = echo[source];
        sequence = result.bind(tango)(sequence);
        config = sequence.Text;
        sequence = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'You can control the spacing with the spacing prop. The spacing prop uses our 4px-based spacing scale. By default, stacks are vertical and have a spacing of 8.'};
        sequence = record.bind(tango)(config, sequence);
        vacuum[1] = sequence;
        sequence = echo[output];
        sequence = result.bind(tango)(sequence);
        config = sequence.Stack;
        sequence = {};
        record = 24;
        sequence['spacing'] = record;
        context = _closure1_slot4;
        record = {};
        context = context.bind(tango)(control, record);
        record = new Array(2);
        record[0] = context;
        papa = _closure1_slot4;
        context = {};
        context = papa.bind(tango)(control, context);
        record[1] = context;
        sequence['children'] = record;
        sequence = verify.bind(tango)(config, sequence);
        vacuum[2] = sequence;
        kilo['children'] = vacuum;
        kilo = verify.bind(tango)(sizing, kilo);
        romeo['children'] = kilo;
        romeo = backup.bind(tango)(foxtrot, romeo);
        offset[1] = romeo;
        foxtrot = _closure1_slot4;
        yankee = echo[yankee];
        yankee = result.bind(tango)(yankee);
        romeo = yankee.Card;
        yankee = {};
        backup = echo[output];
        backup = result.bind(tango)(backup);
        kilo = backup.Stack;
        backup = {};
        sequence = _closure1_slot4;
        sizing = echo[source];
        sizing = result.bind(tango)(sizing);
        vacuum = sizing.Text;
        sizing = {'variant': 'text-lg/bold', 'children': 'Horizontal'};
        vacuum = sequence.bind(tango)(vacuum, sizing);
        sizing = new Array(3);
        sizing[0] = vacuum;
        sequence = _closure1_slot4;
        source = echo[source];
        source = result.bind(tango)(source);
        vacuum = source.Text;
        source = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'You can control the direction with the direction prop. The direction prop can be either horizontal or vertical.'};
        source = sequence.bind(tango)(vacuum, source);
        sizing[1] = source;
        output = echo[output];
        output = result.bind(tango)(output);
        result = output.Stack;
        output = {};
        echo = 'horizontal';
        output['direction'] = echo;
        source = _closure1_slot4;
        echo = {};
        source = source.bind(tango)(control, echo);
        echo = new Array(2);
        echo[0] = source;
        source = _closure1_slot4;
        update = {};
        update = source.bind(tango)(control, update);
        echo[1] = update;
        output['children'] = echo;
        output = verify.bind(tango)(result, output);
        sizing[2] = output;
        backup['children'] = sizing;
        backup = verify.bind(tango)(kilo, backup);
        yankee['children'] = backup;
        yankee = foxtrot.bind(tango)(romeo, yankee);
        offset[2] = yankee;
        golf['children'] = offset;
        golf = verify.bind(tango)(options, golf);
        report['children'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();