// app/modules/user_settings/native/design_system/UserSettingsDesignSystemContextMenu.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = function(argFoo) { // Original name: contextMenuItems
        report = argFoo;
        var _closure2_slot0 = report;
        oscard = _closure1_slot0;
        golfie = _closure1_slot1;
        zuuluu = 13;
        option = golfie[zuuluu];
        tangon = undefined;
        offset = oscard.bind(tangon)(option);
        verify = offset.shuffle;
        option = _closure1_slot8;
        option = verify.bind(offset)(option);
        var _closure2_slot1 = option;
        zuuluu = golfie[zuuluu];
        tangon = oscard.bind(tangon)(zuuluu);
        zuuluu = tangon.shuffle;
        michal = _closure1_slot7;
        michal = zuuluu.bind(tangon)(michal);
        var _closure2_slot2 = michal;
        michal = global;
        tangon = michal.Array;
        zuuluu = tangon.from;
        michal = {};
        michal['length'] = report;
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.map;
        entity = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                tangon = argBar;
                entity = {};
                report = _closure2_slot1;
                zuuluu = report.length;
                zuuluu = tangon % zuuluu;
                zuuluu = report[zuuluu];
                entity['label'] = zuuluu;
                zuuluu = undefined;
                entity['IconComponent'] = zuuluu;
                report = _closure2_slot2;
                zuuluu = report.length;
                zuuluu = tangon % zuuluu;
                zuuluu = report[zuuluu];
                entity['iconSource'] = zuuluu;
                zuuluu = _closure2_slot0;
                michal = 1;
                zuuluu = zuuluu - michal;
                michal = 'default';
                if(!(tangon === zuuluu)) { _fun00002_ip = 83; continue _fun00001 }
 77:
                michal = 'destructive';
 83:
                entity['variant'] = michal;
                michal = function() { // Original name: action
                    entity = undefined;
                    return entity;
                };
                entity['action'] = michal;
                return entity;
            }
        };
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot10 = entity;
    entity = function(argFoo) { // Original name: DemoContextMenu
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = argFoo;
            entity = michal.label;
            var _closure2_slot0 = entity;
            verify = michal.align;
            yankee = michal.triggerOnLongPress;
            tangon = undefined;
            if(!(yankee === tangon)) { _fun00004_ip = 34; continue _fun00003 }
 32:
            yankee = false;
 34:
            offset = michal.count;
            if(!(offset === tangon)) { _fun00004_ip = 46; continue _fun00003 }
 43:
            offset = 3;
 46:
            var _closure2_slot1 = offset;
            entity = michal.sections;
            if(!(entity === tangon)) { _fun00004_ip = 63; continue _fun00003 }
 60:
            entity = 1;
 63:
            var _closure2_slot2 = entity;
            golfie = michal.alignButton;
            if(!(golfie === tangon)) { _fun00004_ip = 83; continue _fun00003 }
 77:
            golfie = 'flex-start';
 83:
            oscard = _closure1_slot2;
            zuuluu = oscard.useMemo;
            michal = new Array(2);
            michal[0] = offset;
            michal[1] = entity;
            entity = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    michal = _closure2_slot2;
                    entity = 1;
                    if(!(!(michal > entity))) { _fun00006_ip = 34; continue _fun00005 }
 14:
                    zuuluu = _closure1_slot10;
                    michal = _closure2_slot1;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
                    _fun00006_ip = 81; continue _fun00005;
 34:
                    michal = global;
                    tangon = michal.Array;
                    zuuluu = tangon.from;
                    michal = {};
                    report = _closure2_slot2;
                    michal['length'] = report;
                    tangon = zuuluu.bind(tangon)(michal);
                    zuuluu = tangon.map;
                    michal = function() {
                        zuuluu = _closure1_slot10;
                        michal = _closure2_slot1;
                        entity = undefined;
                        entity = zuuluu.bind(entity)(michal);
                        return entity;
                    };
                    entity = zuuluu.bind(tangon)(michal);
 81:
                    return entity;
                }
            };
            offset = zuuluu.bind(oscard)(entity, michal);
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            oscard = {};
            oscard['alignSelf'] = golfie;
            entity['style'] = oscard;
            golfie = _closure1_slot5;
            oscard = _closure1_slot0;
            romeon = _closure1_slot1;
            report = 14;
            report = romeon[report];
            report = oscard.bind(tangon)(report);
            oscard = report.ContextMenu;
            report = {};
            report['triggerOnLongPress'] = yankee;
            report['items'] = offset;
            report['align'] = verify;
            verify = 'Sample title';
            report['title'] = verify;
            option = function(argFoo) { // Original name: children
                tangon = _closure1_slot5;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot1;
                entity = 15;
                entity = zuuluu[entity];
                zuuluu = undefined;
                entity = michal.bind(zuuluu)(entity);
                michal = entity.Button;
                entity = {};
                golfie = argFoo;
                option = entity;
                report = copyDataProperties(option, golfie);
                oscard = _closure2_slot0;
                report = 'text';
                entity[report] = oscard;
                oscard = 'primary';
                report = 'variant';
                entity[report] = oscard;
                entity = tangon.bind(zuuluu)(michal, entity);
                return entity;
            };
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot11 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    golfie = yankee.bind(entity)(tangon);
    tangon = new Array(8);
    tangon[0] = golfie;
    golfie = 4;
    golfie = oscard[golfie];
    golfie = yankee.bind(entity)(golfie);
    tangon[1] = golfie;
    golfie = 5;
    golfie = oscard[golfie];
    golfie = yankee.bind(entity)(golfie);
    tangon[2] = golfie;
    golfie = 6;
    golfie = oscard[golfie];
    golfie = yankee.bind(entity)(golfie);
    tangon[3] = golfie;
    golfie = 7;
    golfie = oscard[golfie];
    golfie = yankee.bind(entity)(golfie);
    tangon[4] = golfie;
    golfie = 8;
    golfie = oscard[golfie];
    golfie = yankee.bind(entity)(golfie);
    tangon[5] = golfie;
    golfie = 9;
    golfie = oscard[golfie];
    golfie = yankee.bind(entity)(golfie);
    tangon[6] = golfie;
    golfie = 10;
    golfie = oscard[golfie];
    golfie = yankee.bind(entity)(golfie);
    tangon[7] = golfie;
    var _closure1_slot7 = tangon;
    tangon = ['Launch Probe!', 'Activate Laser', 'Teleport Widget', 'Engage Hyperdrive', 'Deploy Robots', 'Initiate Time Warp', 'Beam Up Snacks', 'Hack Database', 'Trigger Cosmic Boom', 'Unleash Space Vortex', 'Activate Cloaking Device'];
    var _closure1_slot8 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 12;
    verify = {'flexDirection': 'column', 'gap': 12, 'padding': 16};
    tangon['container'] = verify;
    verify = {};
    verify['gap'] = offset;
    tangon['card'] = verify;
    verify = {'height': 1, 'backgroundColor': null, 'marginVertical': 12};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.DIVIDER_SUBTLE;
    verify['backgroundColor'] = offset;
    tangon['divider'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemContextMenu.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemAlertModal
        entity = _closure1_slot9;
        tangon = undefined;
        yankee = entity.bind(tangon)();
        zuuluu = _closure1_slot5;
        michal = _closure1_slot4;
        entity = {};
        golfie = _closure1_slot6;
        oscard = _closure1_slot3;
        report = {};
        option = yankee.container;
        report['style'] = option;
        kiloes = _closure1_slot0;
        output = _closure1_slot1;
        verify = 16;
        option = output[verify];
        option = kiloes.bind(tangon)(option);
        offset = option.Card;
        option = {};
        foxtra = yankee.card;
        option['style'] = foxtra;
        result = _closure1_slot5;
        foxtra = 17;
        backup = output[foxtra];
        backup = kiloes.bind(tangon)(backup);
        sizing = backup.Text;
        backup = {'variant': 'text-lg/bold', 'children': 'Basic Example'};
        backup = result.bind(tangon)(sizing, backup);
        sizing = new Array(3);
        sizing[0] = backup;
        echoed = _closure1_slot5;
        backup = output[foxtra];
        backup = kiloes.bind(tangon)(backup);
        result = backup.Text;
        backup = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'You press the button to open the menu and then select an action, or tap and pan down in a single gesture.'};
        backup = echoed.bind(tangon)(result, backup);
        sizing[1] = backup;
        echoed = _closure1_slot5;
        backup = _closure1_slot11;
        result = {};
        update = 'Open Menu';
        result['label'] = update;
        result = echoed.bind(tangon)(backup, result);
        sizing[2] = result;
        option['children'] = sizing;
        offset = golfie.bind(tangon)(offset, option);
        option = new Array(6);
        option[0] = offset;
        offset = output[verify];
        offset = kiloes.bind(tangon)(offset);
        sizing = offset.Card;
        offset = {};
        result = yankee.card;
        offset['style'] = result;
        update = _closure1_slot5;
        result = output[foxtra];
        result = kiloes.bind(tangon)(result);
        echoed = result.Text;
        result = {'variant': 'text-lg/bold', 'children': 'Long Press'};
        echoed = update.bind(tangon)(echoed, result);
        result = new Array(3);
        result[0] = echoed;
        source = _closure1_slot5;
        echoed = output[foxtra];
        echoed = kiloes.bind(tangon)(echoed);
        update = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'You can also have the menu open on long press instead.'};
        echoed = source.bind(tangon)(update, echoed);
        result[1] = echoed;
        update = _closure1_slot5;
        echoed = {'triggerOnLongPress': true, 'label': 'Long Press to Open'};
        echoed = update.bind(tangon)(backup, echoed);
        result[2] = echoed;
        offset['children'] = result;
        offset = golfie.bind(tangon)(sizing, offset);
        option[1] = offset;
        offset = output[verify];
        offset = kiloes.bind(tangon)(offset);
        sizing = offset.Card;
        offset = {};
        result = yankee.card;
        offset['style'] = result;
        update = _closure1_slot5;
        result = output[foxtra];
        result = kiloes.bind(tangon)(result);
        echoed = result.Text;
        result = {'variant': 'text-lg/bold', 'children': 'Sections'};
        echoed = update.bind(tangon)(echoed, result);
        result = new Array(3);
        result[0] = echoed;
        source = _closure1_slot5;
        echoed = output[foxtra];
        echoed = kiloes.bind(tangon)(echoed);
        update = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'You can pass an array of arrays of items to create sections in the menu.'};
        echoed = source.bind(tangon)(update, echoed);
        result[1] = echoed;
        update = _closure1_slot5;
        echoed = {'label': 'Open Sectioned Menu', 'sections': 3, 'count': 2};
        echoed = update.bind(tangon)(backup, echoed);
        result[2] = echoed;
        offset['children'] = result;
        offset = golfie.bind(tangon)(sizing, offset);
        option[2] = offset;
        offset = output[verify];
        offset = kiloes.bind(tangon)(offset);
        sizing = offset.Card;
        offset = {};
        result = yankee.card;
        offset['style'] = result;
        update = _closure1_slot5;
        result = output[foxtra];
        result = kiloes.bind(tangon)(result);
        echoed = result.Text;
        result = {'variant': 'text-lg/bold', 'children': 'Automatic Alignment'};
        echoed = update.bind(tangon)(echoed, result);
        result = new Array(6);
        result[0] = echoed;
        source = _closure1_slot5;
        echoed = output[foxtra];
        echoed = kiloes.bind(tangon)(echoed);
        update = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': "The menu will automatically align itself so that it doesn't overflow offscreen horizontally."};
        echoed = source.bind(tangon)(update, echoed);
        result[1] = echoed;
        update = _closure1_slot5;
        echoed = {'alignButton': 'flex-end', 'label': 'Open Right-Aligned Menu'};
        echoed = update.bind(tangon)(backup, echoed);
        result[2] = echoed;
        source = _closure1_slot5;
        update = _closure1_slot3;
        echoed = {};
        ctrled = yankee.divider;
        echoed['style'] = ctrled;
        echoed = source.bind(tangon)(update, echoed);
        result[3] = echoed;
        source = _closure1_slot5;
        echoed = output[foxtra];
        echoed = kiloes.bind(tangon)(echoed);
        update = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': "It will also position itself vertically, so that it doesn't overflow offscreen vertically."};
        echoed = source.bind(tangon)(update, echoed);
        result[4] = echoed;
        update = _closure1_slot5;
        echoed = {'count': 8, 'label': 'Open Tall Menu'};
        echoed = update.bind(tangon)(backup, echoed);
        result[5] = echoed;
        offset['children'] = result;
        offset = golfie.bind(tangon)(sizing, offset);
        option[3] = offset;
        offset = output[verify];
        offset = kiloes.bind(tangon)(offset);
        sizing = offset.Card;
        offset = {};
        result = yankee.card;
        offset['style'] = result;
        update = _closure1_slot5;
        result = output[foxtra];
        result = kiloes.bind(tangon)(result);
        echoed = result.Text;
        result = {'variant': 'text-lg/bold', 'children': 'Intentional Alignment'};
        echoed = update.bind(tangon)(echoed, result);
        result = new Array(11);
        result[0] = echoed;
        source = _closure1_slot5;
        echoed = output[foxtra];
        echoed = kiloes.bind(tangon)(echoed);
        update = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'Menus can take an align prop to intentionally align the menu, instead of using the automatic menu positioning.'};
        echoed = source.bind(tangon)(update, echoed);
        result[1] = echoed;
        source = _closure1_slot5;
        echoed = output[foxtra];
        echoed = kiloes.bind(tangon)(echoed);
        update = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'The align prop can be set to above, below, left, or right of the menu trigger. How the menu positions relative to the start or end of the trigger is then automatically determined based on the available space.'};
        echoed = source.bind(tangon)(update, echoed);
        result[2] = echoed;
        source = _closure1_slot5;
        update = _closure1_slot3;
        echoed = {};
        ctrled = yankee.divider;
        echoed['style'] = ctrled;
        echoed = source.bind(tangon)(update, echoed);
        result[3] = echoed;
        update = _closure1_slot5;
        echoed = {'count': 3, 'align': 'right', 'label': 'Open Right'};
        echoed = update.bind(tangon)(backup, echoed);
        result[4] = echoed;
        source = _closure1_slot5;
        update = _closure1_slot3;
        echoed = {};
        ctrled = yankee.divider;
        echoed['style'] = ctrled;
        echoed = source.bind(tangon)(update, echoed);
        result[5] = echoed;
        update = _closure1_slot5;
        echoed = {'count': 3, 'alignButton': 'flex-end', 'align': 'left', 'label': 'Open Left'};
        echoed = update.bind(tangon)(backup, echoed);
        result[6] = echoed;
        source = _closure1_slot5;
        update = _closure1_slot3;
        echoed = {};
        ctrled = yankee.divider;
        echoed['style'] = ctrled;
        echoed = source.bind(tangon)(update, echoed);
        result[7] = echoed;
        update = _closure1_slot5;
        echoed = {'count': 3, 'align': 'below', 'label': 'Always Open Below'};
        echoed = update.bind(tangon)(backup, echoed);
        result[8] = echoed;
        source = _closure1_slot5;
        update = _closure1_slot3;
        echoed = {};
        ctrled = yankee.divider;
        echoed['style'] = ctrled;
        echoed = source.bind(tangon)(update, echoed);
        result[9] = echoed;
        update = _closure1_slot5;
        echoed = {'count': 3, 'alignButton': 'flex-end', 'align': 'above', 'label': 'Always Open Above'};
        echoed = update.bind(tangon)(backup, echoed);
        result[10] = echoed;
        offset['children'] = result;
        offset = golfie.bind(tangon)(sizing, offset);
        option[4] = offset;
        verify = output[verify];
        verify = kiloes.bind(tangon)(verify);
        offset = verify.Card;
        verify = {};
        yankee = yankee.card;
        verify['style'] = yankee;
        result = _closure1_slot5;
        yankee = output[foxtra];
        yankee = kiloes.bind(tangon)(yankee);
        sizing = yankee.Text;
        yankee = {'variant': 'text-lg/bold', 'children': 'Overflow Scrolling'};
        sizing = result.bind(tangon)(sizing, yankee);
        yankee = new Array(3);
        yankee[0] = sizing;
        sizing = _closure1_slot5;
        foxtra = output[foxtra];
        foxtra = kiloes.bind(tangon)(foxtra);
        kiloes = foxtra.Text;
        foxtra = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'Menus should not typically have enough items to require scrolling, but with font scaling and smaller devices its possible. In this case, the menu will allow the user to scroll.'};
        foxtra = sizing.bind(tangon)(kiloes, foxtra);
        yankee[1] = foxtra;
        foxtra = _closure1_slot5;
        romeon = {'count': 30, 'label': 'Open Really Tall Menu'};
        romeon = foxtra.bind(tangon)(backup, romeon);
        yankee[2] = romeon;
        verify['children'] = yankee;
        verify = golfie.bind(tangon)(offset, verify);
        option[5] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();