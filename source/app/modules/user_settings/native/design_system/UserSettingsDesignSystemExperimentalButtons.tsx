// app/modules/user_settings/native/design_system/UserSettingsDesignSystemExperimentalButtons.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    tango = tango.ScrollView;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemExperimentalButtons.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemExperimentalButtons
        golf = _closure1_slot0;
        foxtrot = _closure1_slot2;
        oscar = 3;
        entity = foxtrot[oscar];
        tango = undefined;
        mike = golf.bind(tango)(entity);
        entity = mike.useCollapsibleFloatingActionButtonState;
        verify = entity.bind(mike)();
        entity = foxtrot[oscar];
        mike = golf.bind(tango)(entity);
        entity = mike.useCollapsibleFloatingActionButtonScroll;
        yankee = entity.bind(mike)(verify);
        zulu = _closure1_slot7;
        mike = _closure1_slot3;
        entity = {};
        options = _closure1_slot5;
        backup = _closure1_slot4;
        report = {};
        report['onScroll'] = yankee;
        kilo = {};
        echo = 4;
        yankee = foxtrot[echo];
        yankee = golf.bind(tango)(yankee);
        sizing = yankee.FormSection;
        yankee = {};
        output = 'Header Button';
        yankee['title'] = output;
        source = _closure1_slot6;
        output = {};
        vacuum = 5;
        result = foxtrot[vacuum];
        result = golf.bind(tango)(result);
        update = result.Text;
        result = {'variant': 'text-sm/normal', 'style': null, 'children': "A specialized version of the 'secondary-overlay' Button which functions as both a Header and a button."};
        control = {};
        romeo = _closure1_slot1;
        context = 6;
        sequence = foxtrot[context];
        sequence = romeo.bind(tango)(sequence);
        sequence = sequence.spacing;
        sequence = sequence.PX_16;
        control['padding'] = sequence;
        record = 0;
        control['paddingTop'] = record;
        result['style'] = control;
        result = options.bind(tango)(update, result);
        output['children'] = result;
        output = options.bind(tango)(source, output);
        yankee['description'] = output;
        output = foxtrot[echo];
        output = golf.bind(tango)(output);
        result = output.FormRow;
        output = {};
        update = {};
        control = {};
        sequence = 'center';
        control['alignItems'] = sequence;
        update['style'] = control;
        control = foxtrot[oscar];
        control = golf.bind(tango)(control);
        sequence = control.HeaderButton;
        control = {'onPress': null, 'text': 'Channel Name', 'icon': null, 'iconPosition': 'end', 'accessibilityHint': 'double-tap for more options', 'iconOpticalOffsetMargin': 4294967290};
        config = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        control['onPress'] = config;
        config = 7;
        config = foxtrot[config];
        config = romeo.bind(tango)(config);
        control['icon'] = config;
        control = options.bind(tango)(sequence, control);
        update['children'] = control;
        update = options.bind(tango)(mike, update);
        output['label'] = update;
        update = {};
        control = foxtrot[context];
        control = romeo.bind(tango)(control);
        control = control.unsafe_rawColors;
        control = control.BG_GRADIENT_CHROMA_GLOW_1;
        update['backgroundColor'] = control;
        control = foxtrot[context];
        control = romeo.bind(tango)(control);
        control = control.spacing;
        control = control.PX_48;
        update['paddingVertical'] = control;
        output['style'] = update;
        output = options.bind(tango)(result, output);
        yankee['children'] = output;
        yankee = options.bind(tango)(sizing, yankee);
        sizing = new Array(7);
        sizing[0] = yankee;
        yankee = foxtrot[echo];
        yankee = golf.bind(tango)(yankee);
        output = yankee.FormSection;
        yankee = {};
        result = 'Input Button';
        yankee['title'] = result;
        result = {};
        update = foxtrot[vacuum];
        update = golf.bind(tango)(update);
        control = update.Text;
        update = {'variant': 'text-sm/normal', 'style': null, 'children': 'A specialized button which looks like a text field, but functions as a button.'};
        sequence = {};
        config = foxtrot[context];
        config = romeo.bind(tango)(config);
        config = config.spacing;
        config = config.PX_16;
        sequence['padding'] = config;
        sequence['paddingTop'] = record;
        update['style'] = sequence;
        update = options.bind(tango)(control, update);
        result['children'] = update;
        result = options.bind(tango)(source, result);
        yankee['description'] = result;
        result = foxtrot[echo];
        result = golf.bind(tango)(result);
        update = result.FormRow;
        result = {};
        control = foxtrot[oscar];
        control = golf.bind(tango)(control);
        sequence = control.InputButton;
        control = {'onPress': null, 'size': 'lg', 'text': 'Search', 'icon': null, 'isRound': true};
        config = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        control['onPress'] = config;
        config = 8;
        config = foxtrot[config];
        config = romeo.bind(tango)(config);
        control['icon'] = config;
        control = options.bind(tango)(sequence, control);
        result['label'] = control;
        update = options.bind(tango)(update, result);
        result = new Array(2);
        result[0] = update;
        update = foxtrot[echo];
        update = golf.bind(tango)(update);
        control = update.FormRow;
        update = {};
        sequence = foxtrot[oscar];
        sequence = golf.bind(tango)(sequence);
        config = sequence.InputButton;
        sequence = {'onPress': null, 'size': 'lg', 'text': 'http://discord.com/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx', 'icon': null, 'iconPosition': 'end', 'accessibilityLabel': 'Copy, http://discord.com/xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx'};
        papa = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        sequence['onPress'] = papa;
        papa = 9;
        papa = foxtrot[papa];
        papa = romeo.bind(tango)(papa);
        sequence['icon'] = papa;
        sequence = options.bind(tango)(config, sequence);
        update['label'] = sequence;
        update = options.bind(tango)(control, update);
        result[1] = update;
        yankee['children'] = result;
        yankee = zulu.bind(tango)(output, yankee);
        sizing[1] = yankee;
        yankee = foxtrot[echo];
        yankee = golf.bind(tango)(yankee);
        output = yankee.FormSection;
        yankee = {};
        result = 'Twin Buttons';
        yankee['title'] = result;
        result = {};
        update = foxtrot[vacuum];
        update = golf.bind(tango)(update);
        control = update.Text;
        update = {'variant': 'text-sm/normal', 'style': null, 'children': 'TwinButtons is a specialized layout component, which renders two text buttons horizontally next to each other.'};
        sequence = {};
        config = foxtrot[context];
        config = romeo.bind(tango)(config);
        config = config.spacing;
        config = config.PX_16;
        sequence['padding'] = config;
        sequence['paddingTop'] = record;
        update['style'] = sequence;
        control = options.bind(tango)(control, update);
        update = new Array(2);
        update[0] = control;
        control = foxtrot[vacuum];
        control = golf.bind(tango)(control);
        sequence = control.Text;
        control = {'variant': 'text-sm/normal', 'style': null, 'children': 'A horizontal layout for text buttons is often problematic, since internationalization and font size settings can easily render these buttons unreadable. But TwinButtons will force the two buttons to stack vertically under certain conditions to avoid these issues.'};
        config = {};
        papa = foxtrot[context];
        papa = romeo.bind(tango)(papa);
        papa = papa.spacing;
        papa = papa.PX_16;
        config['padding'] = papa;
        config['paddingTop'] = record;
        control['style'] = config;
        control = options.bind(tango)(sequence, control);
        update[1] = control;
        result['children'] = update;
        result = zulu.bind(tango)(source, result);
        yankee['description'] = result;
        result = foxtrot[echo];
        result = golf.bind(tango)(result);
        update = result.FormRow;
        result = {};
        control = foxtrot[oscar];
        control = golf.bind(tango)(control);
        sequence = control.TwinButtons;
        control = {};
        papa = 10;
        config = foxtrot[papa];
        config = golf.bind(tango)(config);
        target = config.Button;
        config = {};
        status = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        config['onPress'] = status;
        status = 'Add Status';
        config['text'] = status;
        target = options.bind(tango)(target, config);
        config = new Array(2);
        config[0] = target;
        papa = foxtrot[papa];
        papa = golf.bind(tango)(papa);
        target = papa.Button;
        papa = {};
        status = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        papa['onPress'] = status;
        status = 'Edit Profile';
        papa['text'] = status;
        papa = options.bind(tango)(target, papa);
        config[1] = papa;
        control['children'] = config;
        control = zulu.bind(tango)(sequence, control);
        result['label'] = control;
        result = options.bind(tango)(update, result);
        yankee['children'] = result;
        yankee = options.bind(tango)(output, yankee);
        sizing[2] = yankee;
        yankee = foxtrot[echo];
        yankee = golf.bind(tango)(yankee);
        result = yankee.FormSection;
        output = {};
        yankee = 'PressableScale';
        output['title'] = yankee;
        yankee = {};
        update = foxtrot[vacuum];
        update = golf.bind(tango)(update);
        control = update.Text;
        update = {'variant': 'text-sm/normal', 'style': null, 'children': 'If no button in our catelog of components is compatible with a particular design, then PressableScale can fill some gaps. It will apply the same onPress animation to a custom button.'};
        sequence = {};
        config = foxtrot[context];
        config = romeo.bind(tango)(config);
        config = config.spacing;
        config = config.PX_16;
        sequence['padding'] = config;
        sequence['paddingTop'] = record;
        update['style'] = sequence;
        update = options.bind(tango)(control, update);
        yankee['children'] = update;
        yankee = options.bind(tango)(source, yankee);
        output['description'] = yankee;
        yankee = foxtrot[echo];
        yankee = golf.bind(tango)(yankee);
        control = yankee.FormRow;
        update = {};
        yankee = foxtrot[oscar];
        yankee = golf.bind(tango)(yankee);
        config = yankee.PressableScale;
        sequence = {};
        yankee = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        sequence['onPress'] = yankee;
        papa = {};
        yankee = 12;
        target = {'borderColor': 'pink', 'borderWidth': 1, 'borderRadius': 8, 'padding': 12};
        papa['style'] = target;
        target = foxtrot[vacuum];
        target = golf.bind(tango)(target);
        status = target.Text;
        target = {'variant': 'text-md/semibold', 'children': 'This is a custom button'};
        target = options.bind(tango)(status, target);
        papa['children'] = target;
        papa = options.bind(tango)(mike, papa);
        sequence['children'] = papa;
        sequence = options.bind(tango)(config, sequence);
        update['label'] = sequence;
        update = options.bind(tango)(control, update);
        output['children'] = update;
        output = options.bind(tango)(result, output);
        sizing[3] = output;
        output = foxtrot[echo];
        output = golf.bind(tango)(output);
        result = output.FormSection;
        output = {};
        update = 'Experimental Blur Background Row Button';
        output['title'] = update;
        update = {};
        control = foxtrot[vacuum];
        control = golf.bind(tango)(control);
        sequence = control.Text;
        control = {'variant': 'text-sm/normal', 'style': null, 'children': 'Row Button Row Buttons are full-width, high-emphasis buttons that are used as primary CTAs in a page.'};
        config = {};
        papa = foxtrot[context];
        papa = romeo.bind(tango)(papa);
        papa = papa.spacing;
        papa = papa.PX_16;
        config['padding'] = papa;
        config['paddingTop'] = record;
        control['style'] = config;
        control = options.bind(tango)(sequence, control);
        update['children'] = control;
        update = options.bind(tango)(source, update);
        output['description'] = update;
        update = {};
        update = options.bind(tango)(mike, update);
        output['children'] = update;
        output = options.bind(tango)(result, output);
        sizing[4] = output;
        output = 11;
        output = foxtrot[output];
        output = golf.bind(tango)(output);
        result = output.ThemeContextProvider;
        output = {};
        update = 'darker';
        output['theme'] = update;
        yankee = foxtrot[yankee];
        control = romeo.bind(tango)(yankee);
        update = {};
        yankee = {};
        sequence = 16;
        yankee['padding'] = sequence;
        update['style'] = yankee;
        yankee = {'x': 0, 'y': 0};
        update['start'] = yankee;
        yankee = {'x': 1, 'y': 0};
        update['end'] = yankee;
        yankee = ['red', 'orange', 'yellow', 'green', 'teal', 'blue', 'purple'];
        update['colors'] = yankee;
        yankee = 13;
        yankee = foxtrot[yankee];
        yankee = golf.bind(tango)(yankee);
        config = yankee.RowButton;
        sequence = {'icon': null, 'label': 'Row Button', 'subLabel': 'With a blur background', 'experimental_withBlurBackground': true};
        yankee = 14;
        papa = foxtrot[yankee];
        papa = romeo.bind(tango)(papa);
        sequence['icon'] = papa;
        papa = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        sequence['onPress'] = papa;
        sequence = options.bind(tango)(config, sequence);
        update['children'] = sequence;
        update = options.bind(tango)(control, update);
        output['children'] = update;
        output = options.bind(tango)(result, output);
        sizing[5] = output;
        output = foxtrot[echo];
        output = golf.bind(tango)(output);
        result = output.FormSection;
        output = {};
        update = 'Collapsible Floating Action Button';
        output['title'] = update;
        update = {};
        control = foxtrot[vacuum];
        control = golf.bind(tango)(control);
        sequence = control.Text;
        control = {'variant': 'text-sm/normal', 'style': null, 'children': 'A variation of the FloatingActionButton which will display some text until the user scrolls.'};
        config = {};
        papa = foxtrot[context];
        papa = romeo.bind(tango)(papa);
        papa = papa.spacing;
        papa = papa.PX_16;
        config['padding'] = papa;
        config['paddingTop'] = record;
        control['style'] = config;
        sequence = options.bind(tango)(sequence, control);
        control = new Array(2);
        control[0] = sequence;
        vacuum = foxtrot[vacuum];
        vacuum = golf.bind(tango)(vacuum);
        sequence = vacuum.Text;
        vacuum = {'variant': 'text-sm/normal', 'style': null, 'children': 'We currently recommend the use of the FloatingActionButton over the CollapsibleFloatingActionButton, as a singular icon button without animation is more compact, understandable, and predictable.'};
        config = {};
        context = foxtrot[context];
        context = romeo.bind(tango)(context);
        context = context.spacing;
        context = context.PX_16;
        config['padding'] = context;
        config['paddingTop'] = record;
        vacuum['style'] = config;
        vacuum = options.bind(tango)(sequence, vacuum);
        control[1] = vacuum;
        update['children'] = control;
        update = zulu.bind(tango)(source, update);
        output['description'] = update;
        echo = foxtrot[echo];
        echo = golf.bind(tango)(echo);
        update = echo.FormRow;
        echo = {};
        source = {};
        control = {};
        vacuum = 48;
        control['padding'] = vacuum;
        source['style'] = control;
        source = options.bind(tango)(mike, source);
        echo['label'] = source;
        echo = options.bind(tango)(update, echo);
        output['children'] = echo;
        output = options.bind(tango)(result, output);
        sizing[6] = output;
        kilo['children'] = sizing;
        kilo = zulu.bind(tango)(mike, kilo);
        report['children'] = kilo;
        backup = options.bind(tango)(backup, report);
        report = new Array(2);
        report[0] = backup;
        oscar = foxtrot[oscar];
        oscar = golf.bind(tango)(oscar);
        golf = oscar.CollapsibleFloatingActionButton;
        oscar = {};
        yankee = foxtrot[yankee];
        yankee = romeo.bind(tango)(yankee);
        oscar['icon'] = yankee;
        offset = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        oscar['onPress'] = offset;
        offset = 32;
        oscar['positionBottom'] = offset;
        offset = 'Floating Action Button';
        oscar['text'] = offset;
        oscar['state'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();