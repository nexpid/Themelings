// app/modules/user_settings/native/design_system/UserSettingsDesignSystemButtonGroup.tsx
export default (function(_, argBar, argBaz, argCorge, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    tango = tango.ScrollView;
    var _closure1_slot4 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot5 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'padding': 16, 'paddingBottom': 64};
    tango['container'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemButtonGroup.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemButtonGroup
        entity = _closure1_slot7;
        tango = undefined;
        golf = entity.bind(tango)();
        zulu = _closure1_slot5;
        mike = _closure1_slot4;
        entity = {};
        oscar = _closure1_slot3;
        report = {};
        golf = golf.container;
        report['style'] = golf;
        verify = _closure1_slot6;
        sizing = _closure1_slot0;
        output = _closure1_slot2;
        romeo = 4;
        golf = output[romeo];
        golf = sizing.bind(tango)(golf);
        options = golf.Stack;
        golf = {};
        offset = 24;
        golf['spacing'] = offset;
        offset = {};
        yankee = output[romeo];
        yankee = sizing.bind(tango)(yankee);
        foxtrot = yankee.Stack;
        yankee = {};
        kilo = 5;
        backup = output[kilo];
        backup = sizing.bind(tango)(backup);
        result = backup.Text;
        backup = {'variant': 'text-lg/bold', 'children': 'Text Button Example'};
        result = zulu.bind(tango)(result, backup);
        backup = new Array(3);
        backup[0] = result;
        result = output[kilo];
        result = sizing.bind(tango)(result);
        echo = result.Text;
        result = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'By default, stacks buttons vertically. This is best for buttons with text.'};
        result = zulu.bind(tango)(echo, result);
        backup[1] = result;
        result = 6;
        echo = output[result];
        echo = sizing.bind(tango)(echo);
        source = echo.ButtonGroup;
        echo = {};
        update = 7;
        control = output[update];
        control = sizing.bind(tango)(control);
        config = control.Button;
        control = {'text': 'Agree', 'variant': 'primary'};
        record = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        control['onPress'] = record;
        config = zulu.bind(tango)(config, control);
        control = new Array(2);
        control[0] = config;
        config = output[update];
        config = sizing.bind(tango)(config);
        record = config.Button;
        config = {'text': 'Cancel', 'variant': 'secondary'};
        context = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        config['onPress'] = context;
        config = zulu.bind(tango)(record, config);
        control[1] = config;
        echo['children'] = control;
        echo = verify.bind(tango)(source, echo);
        backup[2] = echo;
        yankee['children'] = backup;
        yankee = verify.bind(tango)(foxtrot, yankee);
        offset['children'] = yankee;
        yankee = zulu.bind(tango)(oscar, offset);
        offset = new Array(3);
        offset[0] = yankee;
        yankee = {};
        foxtrot = output[romeo];
        foxtrot = sizing.bind(tango)(foxtrot);
        backup = foxtrot.Stack;
        foxtrot = {};
        echo = output[kilo];
        echo = sizing.bind(tango)(echo);
        source = echo.Text;
        echo = {'variant': 'text-lg/bold', 'children': 'IconButton Example'};
        source = zulu.bind(tango)(source, echo);
        echo = new Array(3);
        echo[0] = source;
        source = output[kilo];
        source = sizing.bind(tango)(source);
        control = source.Text;
        source = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'For IconButtons, a horizontal layout is recommended'};
        source = zulu.bind(tango)(control, source);
        echo[1] = source;
        source = output[result];
        source = sizing.bind(tango)(source);
        context = source.ButtonGroup;
        record = {};
        control = 'horizontal';
        record['direction'] = control;
        source = 8;
        config = output[source];
        config = sizing.bind(tango)(config);
        target = config.IconButton;
        papa = {'accessibilityLabel': 'Settings', 'variant': 'secondary'};
        config = _closure1_slot1;
        sequence = 9;
        status = output[sequence];
        status = config.bind(tango)(status);
        papa['icon'] = status;
        status = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        papa['onPress'] = status;
        target = zulu.bind(tango)(target, papa);
        papa = new Array(2);
        papa[0] = target;
        target = output[source];
        target = sizing.bind(tango)(target);
        status = target.IconButton;
        target = {'accessibilityLabel': 'Settings', 'variant': 'secondary'};
        sierra = output[sequence];
        sierra = config.bind(tango)(sierra);
        target['icon'] = sierra;
        sierra = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        target['onPress'] = sierra;
        target = zulu.bind(tango)(status, target);
        papa[1] = target;
        record['children'] = papa;
        record = verify.bind(tango)(context, record);
        echo[2] = record;
        foxtrot['children'] = echo;
        foxtrot = verify.bind(tango)(backup, foxtrot);
        yankee['children'] = foxtrot;
        yankee = zulu.bind(tango)(oscar, yankee);
        offset[1] = yankee;
        yankee = {};
        romeo = output[romeo];
        romeo = sizing.bind(tango)(romeo);
        foxtrot = romeo.Stack;
        romeo = {};
        backup = output[kilo];
        backup = sizing.bind(tango)(backup);
        echo = backup.Text;
        backup = {'variant': 'text-lg/bold', 'children': 'Mixed Buttons Example'};
        echo = zulu.bind(tango)(echo, backup);
        backup = new Array(6);
        backup[0] = echo;
        echo = output[kilo];
        echo = sizing.bind(tango)(echo);
        record = echo.Text;
        echo = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'A single text button can be used in a ButtonGroup with smaller IconButtons, using the horizontal layout.'};
        echo = zulu.bind(tango)(record, echo);
        backup[1] = echo;
        echo = output[kilo];
        echo = sizing.bind(tango)(echo);
        record = echo.Text;
        echo = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'The Button with text must have the grow prop.'};
        echo = zulu.bind(tango)(record, echo);
        backup[2] = echo;
        result = output[result];
        result = sizing.bind(tango)(result);
        echo = result.ButtonGroup;
        result = {};
        result['direction'] = control;
        update = output[update];
        update = sizing.bind(tango)(update);
        control = update.Button;
        update = {'text': 'Search', 'variant': 'secondary', 'grow': true};
        record = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        update['onPress'] = record;
        control = zulu.bind(tango)(control, update);
        update = new Array(2);
        update[0] = control;
        source = output[source];
        source = sizing.bind(tango)(source);
        control = source.IconButton;
        source = {'accessibilityLabel': 'Cancel', 'variant': 'secondary'};
        sequence = output[sequence];
        sequence = config.bind(tango)(sequence);
        source['icon'] = sequence;
        vacuum = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        source['onPress'] = vacuum;
        source = zulu.bind(tango)(control, source);
        update[1] = source;
        result['children'] = update;
        result = verify.bind(tango)(echo, result);
        backup[3] = result;
        result = output[kilo];
        result = sizing.bind(tango)(result);
        echo = result.Text;
        result = {'variant': 'text-sm/medium', 'color': 'text-danger', 'children': 'More than one text button should not be put in a horizontal group.'};
        result = zulu.bind(tango)(echo, result);
        backup[4] = result;
        kilo = output[kilo];
        kilo = sizing.bind(tango)(kilo);
        sizing = kilo.Text;
        kilo = {'variant': 'text-sm/medium', 'color': 'text-secondary', 'children': 'This does not flex well with internationalization and enlarged font size settings. Use TwinButtons instead when there are specifically two text Buttons.'};
        kilo = zulu.bind(tango)(sizing, kilo);
        backup[5] = kilo;
        romeo['children'] = backup;
        romeo = verify.bind(tango)(foxtrot, romeo);
        yankee['children'] = romeo;
        yankee = zulu.bind(tango)(oscar, yankee);
        offset[2] = yankee;
        golf['children'] = offset;
        golf = verify.bind(tango)(options, golf);
        report['children'] = golf;
        report = zulu.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();