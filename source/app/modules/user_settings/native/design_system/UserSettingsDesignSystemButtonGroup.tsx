// app/modules/user_settings/native/design_system/UserSettingsDesignSystemButtonGroup.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot5 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'padding': 16, 'paddingBottom': 64};
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemButtonGroup.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemButtonGroup
        entity = _closure1_slot7;
        tangon = undefined;
        golfie = entity.bind(tangon)();
        zuuluu = _closure1_slot5;
        michal = _closure1_slot4;
        entity = {};
        oscard = _closure1_slot3;
        report = {};
        golfie = golfie.container;
        report['style'] = golfie;
        verify = _closure1_slot6;
        sizing = _closure1_slot0;
        output = _closure1_slot2;
        romeon = 4;
        golfie = output[romeon];
        golfie = sizing.bind(tangon)(golfie);
        option = golfie.Stack;
        golfie = {};
        offset = 24;
        golfie['spacing'] = offset;
        offset = {};
        yankee = output[romeon];
        yankee = sizing.bind(tangon)(yankee);
        foxtra = yankee.Stack;
        yankee = {};
        kiloes = 5;
        backup = output[kiloes];
        backup = sizing.bind(tangon)(backup);
        result = backup.Text;
        backup = {'variant': 'text-lg/bold', 'children': 'Text Button Example'};
        result = zuuluu.bind(tangon)(result, backup);
        backup = new Array(3);
        backup[0] = result;
        result = output[kiloes];
        result = sizing.bind(tangon)(result);
        echoed = result.Text;
        result = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'By default, stacks buttons vertically. This is best for buttons with text.'};
        result = zuuluu.bind(tangon)(echoed, result);
        backup[1] = result;
        result = 6;
        echoed = output[result];
        echoed = sizing.bind(tangon)(echoed);
        source = echoed.ButtonGroup;
        echoed = {};
        update = 7;
        ctrled = output[update];
        ctrled = sizing.bind(tangon)(ctrled);
        config = ctrled.Button;
        ctrled = {'text': 'Agree', 'variant': 'primary'};
        record = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        ctrled['onPress'] = record;
        config = zuuluu.bind(tangon)(config, ctrled);
        ctrled = new Array(2);
        ctrled[0] = config;
        config = output[update];
        config = sizing.bind(tangon)(config);
        record = config.Button;
        config = {'text': 'Cancel', 'variant': 'secondary'};
        cntext = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        config['onPress'] = cntext;
        config = zuuluu.bind(tangon)(record, config);
        ctrled[1] = config;
        echoed['children'] = ctrled;
        echoed = verify.bind(tangon)(source, echoed);
        backup[2] = echoed;
        yankee['children'] = backup;
        yankee = verify.bind(tangon)(foxtra, yankee);
        offset['children'] = yankee;
        yankee = zuuluu.bind(tangon)(oscard, offset);
        offset = new Array(3);
        offset[0] = yankee;
        yankee = {};
        foxtra = output[romeon];
        foxtra = sizing.bind(tangon)(foxtra);
        backup = foxtra.Stack;
        foxtra = {};
        echoed = output[kiloes];
        echoed = sizing.bind(tangon)(echoed);
        source = echoed.Text;
        echoed = {'variant': 'text-lg/bold', 'children': 'IconButton Example'};
        source = zuuluu.bind(tangon)(source, echoed);
        echoed = new Array(3);
        echoed[0] = source;
        source = output[kiloes];
        source = sizing.bind(tangon)(source);
        ctrled = source.Text;
        source = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'For IconButtons, a horizontal layout is recommended'};
        source = zuuluu.bind(tangon)(ctrled, source);
        echoed[1] = source;
        source = output[result];
        source = sizing.bind(tangon)(source);
        cntext = source.ButtonGroup;
        record = {};
        ctrled = 'horizontal';
        record['direction'] = ctrled;
        source = 8;
        config = output[source];
        config = sizing.bind(tangon)(config);
        target = config.IconButton;
        papara = {'accessibilityLabel': 'Settings', 'variant': 'secondary'};
        config = _closure1_slot1;
        sequen = 9;
        status = output[sequen];
        status = config.bind(tangon)(status);
        papara['icon'] = status;
        status = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        papara['onPress'] = status;
        target = zuuluu.bind(tangon)(target, papara);
        papara = new Array(2);
        papara[0] = target;
        target = output[source];
        target = sizing.bind(tangon)(target);
        status = target.IconButton;
        target = {'accessibilityLabel': 'Settings', 'variant': 'secondary'};
        sierra = output[sequen];
        sierra = config.bind(tangon)(sierra);
        target['icon'] = sierra;
        sierra = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        target['onPress'] = sierra;
        target = zuuluu.bind(tangon)(status, target);
        papara[1] = target;
        record['children'] = papara;
        record = verify.bind(tangon)(cntext, record);
        echoed[2] = record;
        foxtra['children'] = echoed;
        foxtra = verify.bind(tangon)(backup, foxtra);
        yankee['children'] = foxtra;
        yankee = zuuluu.bind(tangon)(oscard, yankee);
        offset[1] = yankee;
        yankee = {};
        romeon = output[romeon];
        romeon = sizing.bind(tangon)(romeon);
        foxtra = romeon.Stack;
        romeon = {};
        backup = output[kiloes];
        backup = sizing.bind(tangon)(backup);
        echoed = backup.Text;
        backup = {'variant': 'text-lg/bold', 'children': 'Mixed Buttons Example'};
        echoed = zuuluu.bind(tangon)(echoed, backup);
        backup = new Array(6);
        backup[0] = echoed;
        echoed = output[kiloes];
        echoed = sizing.bind(tangon)(echoed);
        record = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'A single text button can be used in a ButtonGroup with smaller IconButtons, using the horizontal layout.'};
        echoed = zuuluu.bind(tangon)(record, echoed);
        backup[1] = echoed;
        echoed = output[kiloes];
        echoed = sizing.bind(tangon)(echoed);
        record = echoed.Text;
        echoed = {'variant': 'text-md/medium', 'color': 'text-secondary', 'children': 'The Button with text must have the grow prop.'};
        echoed = zuuluu.bind(tangon)(record, echoed);
        backup[2] = echoed;
        result = output[result];
        result = sizing.bind(tangon)(result);
        echoed = result.ButtonGroup;
        result = {};
        result['direction'] = ctrled;
        update = output[update];
        update = sizing.bind(tangon)(update);
        ctrled = update.Button;
        update = {'text': 'Search', 'variant': 'secondary', 'grow': true};
        record = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        update['onPress'] = record;
        ctrled = zuuluu.bind(tangon)(ctrled, update);
        update = new Array(2);
        update[0] = ctrled;
        source = output[source];
        source = sizing.bind(tangon)(source);
        ctrled = source.IconButton;
        source = {'accessibilityLabel': 'Cancel', 'variant': 'secondary'};
        sequen = output[sequen];
        sequen = config.bind(tangon)(sequen);
        source['icon'] = sequen;
        vacuum = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        source['onPress'] = vacuum;
        source = zuuluu.bind(tangon)(ctrled, source);
        update[1] = source;
        result['children'] = update;
        result = verify.bind(tangon)(echoed, result);
        backup[3] = result;
        result = output[kiloes];
        result = sizing.bind(tangon)(result);
        echoed = result.Text;
        result = {'variant': 'text-sm/medium', 'color': 'text-danger', 'children': 'More than one text button should not be put in a horizontal group.'};
        result = zuuluu.bind(tangon)(echoed, result);
        backup[4] = result;
        kiloes = output[kiloes];
        kiloes = sizing.bind(tangon)(kiloes);
        sizing = kiloes.Text;
        kiloes = {'variant': 'text-sm/medium', 'color': 'text-secondary', 'children': 'This does not flex well with internationalization and enlarged font size settings. Use TwinButtons instead when there are specifically two text Buttons.'};
        kiloes = zuuluu.bind(tangon)(sizing, kiloes);
        backup[5] = kiloes;
        romeon['children'] = backup;
        romeon = verify.bind(tangon)(foxtra, romeon);
        yankee['children'] = romeon;
        yankee = zuuluu.bind(tangon)(oscard, yankee);
        offset[2] = yankee;
        golfie['children'] = offset;
        golfie = verify.bind(tangon)(option, golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();