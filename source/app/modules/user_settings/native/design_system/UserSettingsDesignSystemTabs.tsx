// app/modules/user_settings/native/design_system/UserSettingsDesignSystemTabs.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot5 = golf;
    tango = tango.ScrollView;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.ThemeColor;
    var _closure1_slot7 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot8 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot9 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'margin': 16, 'flex': 1, 'alignItems': 'center'};
    tango['container'] = verify;
    verify = {'backgroundColor': null, 'borderWidth': 2, 'borderColor': null, 'flex': 1, 'alignItems': 'center', 'justifyContent': 'center', 'height': 400};
    offset = 6;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BG_BASE_TERTIARY;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BORDER_STRONG;
    verify['borderColor'] = offset;
    tango['item'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot10 = tango;
    tango = 17;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemTabs.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemTabs
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            oscar = _closure1_slot4;
            entity = oscar.useState;
            report = 0;
            entity = entity.bind(oscar)(report);
            mike = _closure1_slot3;
            tango = undefined;
            target = 2;
            entity = mike.bind(tango)(entity, target);
            verify = entity[report];
            golf = 1;
            entity = entity[golf];
            var _closure2_slot0 = entity;
            zulu = oscar.useState;
            entity = 3;
            entity = zulu.bind(oscar)(entity);
            entity = mike.bind(tango)(entity, target);
            papa = entity[report];
            var _closure2_slot1 = papa;
            entity = entity[golf];
            var _closure2_slot2 = entity;
            zulu = oscar.useState;
            entity = true;
            entity = zulu.bind(oscar)(entity);
            entity = mike.bind(tango)(entity, target);
            config = entity[report];
            control = entity[golf];
            entity = oscar.useState;
            zulu = false;
            entity = entity.bind(oscar)(zulu);
            entity = mike.bind(tango)(entity, target);
            sequence = entity[report];
            vacuum = entity[golf];
            entity = oscar.useState;
            entity = entity.bind(oscar)(zulu);
            entity = mike.bind(tango)(entity, target);
            echo = entity[report];
            result = entity[golf];
            entity = _closure1_slot10;
            options = entity.bind(tango)();
            entity = function(argFoo, argBar) { // Original name: useTabItems
                golf = argFoo;
                report = argBar;
                var _closure3_slot0 = golf;
                var _closure3_slot1 = report;
                tango = _closure1_slot10;
                zulu = undefined;
                oscar = tango.bind(zulu)();
                var _closure3_slot2 = oscar;
                tango = _closure1_slot4;
                zulu = tango.useMemo;
                mike = new Array(3);
                mike[0] = golf;
                oscar = oscar.item;
                mike[1] = oscar;
                mike[2] = report;
                entity = function() {
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        entity = new Array(0);
                        mike = _closure3_slot0;
                        romeo = 0;
                        mike = romeo < mike;
                        yankee = 1;
                        offset = global;
                        verify = 'item-';
                        golf = 7;
                        oscar = undefined;
                        report = 'heading-xxl/bold';
                        tango = 100;
                        zulu = 'Item ';
                        if(!mike) { _fun00004_ip = 279; continue _fun00003 }
 57:
                        backup = entity.push;
                        mike = {};
                        sizing = romeo + yankee;
                        kilo = offset.HermesInternal;
                        kilo = kilo.concat;
                        kilo = kilo.bind(zulu)(sizing);
                        mike['label'] = kilo;
                        sizing = _closure3_slot1;
                        kilo = undefined;
                        if(!sizing) { _fun00004_ip = 134; continue _fun00003 }
 97:
                        result = offset.Math;
                        output = result.floor;
                        echo = offset.Math;
                        sizing = echo.random;
                        sizing = sizing.bind(echo)();
                        sizing = tango * sizing;
                        kilo = output.bind(result)(sizing);
 134:
                        mike['count'] = kilo;
                        sizing = romeo + yankee;
                        kilo = offset.HermesInternal;
                        kilo = kilo.concat;
                        kilo = kilo.bind(verify)(sizing);
                        mike['id'] = kilo;
                        output = _closure1_slot9;
                        sizing = _closure1_slot5;
                        kilo = {};
                        result = _closure3_slot2;
                        result = result.item;
                        kilo['style'] = result;
                        update = _closure1_slot8;
                        echo = _closure1_slot0;
                        result = _closure1_slot2;
                        result = result[golf];
                        result = echo.bind(oscar)(result);
                        echo = result.Text;
                        result = {};
                        result['variant'] = report;
                        control = romeo + yankee;
                        source = ['Item '];
                        source[1] = control;
                        result['children'] = source;
                        result = update.bind(oscar)(echo, result);
                        kilo['children'] = result;
                        kilo = output.bind(oscar)(sizing, kilo);
                        mike['page'] = kilo;
                        mike = backup.bind(entity)(mike);
                        romeo = romeo + 1;
                        mike = _closure3_slot0;
                        if(romeo < mike) { _fun00004_ip = 57; continue _fun00003 }
 279:
                        return entity;
                    }
                };
                entity = zulu.bind(tango)(entity, mike);
                return entity;
            };
            offset = entity.bind(tango)(papa, sequence);
            backup = _closure1_slot0;
            sizing = _closure1_slot2;
            status = 10;
            entity = sizing[status];
            zulu = backup.bind(tango)(entity);
            mike = zulu.useSegmentedControlState;
            entity = {};
            entity['items'] = offset;
            entity['pageWidth'] = verify;
            entity['defaultIndex'] = golf;
            kilo = mike.bind(zulu)(entity);
            zulu = oscar.useCallback;
            mike = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                zulu = entity.width;
                mike = _closure2_slot0;
                entity = undefined;
                mike = mike.bind(entity)(zulu);
                return entity;
            };
            entity = new Array(0);
            golf = zulu.bind(oscar)(mike, entity);
            entity = 8;
            entity = sizing[entity];
            zulu = backup.bind(tango)(entity);
            mike = zulu.useThemedColorValue;
            entity = _closure1_slot7;
            entity = entity.BACKGROUND_PRIMARY;
            entity = mike.bind(zulu)(entity);
            zulu = entity.hex;
            source = new Array(2);
            source[0] = zulu;
            entity = 9;
            entity = sizing[entity];
            mike = backup.bind(tango)(entity);
            entity = mike.hexWithOpacity;
            entity = entity.bind(mike)(zulu, report);
            source[1] = entity;
            zulu = _closure1_slot9;
            mike = _closure1_slot6;
            entity = {};
            oscar = _closure1_slot5;
            report = {};
            options = options.container;
            report['style'] = options;
            report['onLayout'] = golf;
            verify = _closure1_slot8;
            romeo = 11;
            golf = sizing[romeo];
            golf = backup.bind(tango)(golf);
            options = golf.Stack;
            golf = {};
            offset = 24;
            golf['spacing'] = offset;
            offset = {};
            foxtrot = 12;
            foxtrot = sizing[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            backup = foxtrot.Tabs;
            foxtrot = {};
            foxtrot['state'] = kilo;
            foxtrot['grow'] = config;
            backup = zulu.bind(tango)(backup, foxtrot);
            foxtrot = new Array(2);
            foxtrot[0] = backup;
            backup = echo;
            if(!backup) { _fun00002_ip = 479; continue _fun00001 }
 439:
            update = _closure1_slot9;
            output = _closure1_slot1;
            record = _closure1_slot2;
            sizing = 13;
            sizing = record[sizing];
            output = output.bind(tango)(sizing);
            sizing = {};
            sizing['state'] = kilo;
            sizing['colors'] = source;
            backup = update.bind(tango)(output, sizing);
 479:
            foxtrot[1] = backup;
            offset['children'] = foxtrot;
            foxtrot = verify.bind(tango)(oscar, offset);
            offset = new Array(4);
            offset[0] = foxtrot;
            output = _closure1_slot9;
            sizing = _closure1_slot0;
            update = _closure1_slot2;
            foxtrot = 14;
            foxtrot = update[foxtrot];
            foxtrot = sizing.bind(tango)(foxtrot);
            backup = foxtrot.SegmentedControlPages;
            foxtrot = {};
            foxtrot['state'] = kilo;
            foxtrot = output.bind(tango)(backup, foxtrot);
            offset[1] = foxtrot;
            foxtrot = _closure1_slot8;
            romeo = update[romeo];
            romeo = sizing.bind(tango)(romeo);
            backup = romeo.Stack;
            romeo = {'spacing': 8, 'direction': 'horizontal'};
            source = 15;
            kilo = update[source];
            kilo = sizing.bind(tango)(kilo);
            record = kilo.Button;
            kilo = {'text': 'Add Tab', 'variant': 'active', 'size': 'sm'};
            status = papa >= status;
            kilo['disabled'] = status;
            status = function() { // Original name: onPress
                zulu = _closure2_slot2;
                mike = _closure2_slot1;
                entity = 1;
                mike = mike + entity;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            kilo['onPress'] = status;
            record = output.bind(tango)(record, kilo);
            kilo = new Array(2);
            kilo[0] = record;
            source = update[source];
            source = sizing.bind(tango)(source);
            record = source.Button;
            source = {'text': 'Remove Tab', 'variant': 'destructive', 'size': 'sm'};
            papa = target === papa;
            source['disabled'] = papa;
            context = function() { // Original name: onPress
                zulu = _closure2_slot2;
                mike = _closure2_slot1;
                entity = 1;
                mike = mike - entity;
                entity = undefined;
                entity = zulu.bind(entity)(mike);
                return entity;
            };
            source['onPress'] = context;
            source = output.bind(tango)(record, source);
            kilo[1] = source;
            romeo['children'] = kilo;
            romeo = foxtrot.bind(tango)(backup, romeo);
            offset[2] = romeo;
            romeo = _closure1_slot5;
            yankee = {};
            kilo = 16;
            backup = update[kilo];
            backup = sizing.bind(tango)(backup);
            source = backup.TableSwitchRow;
            backup = {'start': true, 'label': 'Enable Grow'};
            backup['value'] = config;
            backup['onValueChange'] = control;
            source = output.bind(tango)(source, backup);
            backup = new Array(3);
            backup[0] = source;
            source = update[kilo];
            source = sizing.bind(tango)(source);
            control = source.TableSwitchRow;
            source = {};
            config = 'Enable Counts';
            source['label'] = config;
            source['value'] = sequence;
            source['onValueChange'] = vacuum;
            source = output.bind(tango)(control, source);
            backup[1] = source;
            kilo = update[kilo];
            kilo = sizing.bind(tango)(kilo);
            sizing = kilo.TableSwitchRow;
            kilo = {'end': true, 'label': 'Enable Overflow Gradient'};
            kilo['value'] = echo;
            kilo['onValueChange'] = result;
            kilo = output.bind(tango)(sizing, kilo);
            backup[2] = kilo;
            yankee['children'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[3] = yankee;
            golf['children'] = offset;
            golf = verify.bind(tango)(options, golf);
            report['children'] = golf;
            report = zulu.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();