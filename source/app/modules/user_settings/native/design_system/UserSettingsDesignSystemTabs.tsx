// app/modules/user_settings/native/design_system/UserSettingsDesignSystemTabs.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsxs;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsx;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = 16;
    offset = {'margin': 16, 'flex': 1, 'alignItems': 'center'};
    golfie['container'] = offset;
    offset = {'backgroundColor': null, 'borderWidth': 2, 'borderColor': null, 'flex': 1, 'alignItems': 'center', 'justifyContent': 'center', 'height': 400};
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BASE_TERTIARY;
    offset['backgroundColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_STRONG;
    offset['borderColor'] = yankee;
    golfie['item'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot9 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/design_system/UserSettingsDesignSystemTabs.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: UserSettingsDesignSystemTabs
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            oscard = _closure1_slot4;
            entity = oscard.useState;
            report = 0;
            entity = entity.bind(oscard)(report);
            michal = _closure1_slot3;
            tangon = undefined;
            target = 2;
            entity = michal.bind(tangon)(entity, target);
            verify = entity[report];
            golfie = 1;
            entity = entity[golfie];
            var _closure2_slot0 = entity;
            zuuluu = oscard.useState;
            entity = 3;
            entity = zuuluu.bind(oscard)(entity);
            entity = michal.bind(tangon)(entity, target);
            papara = entity[report];
            var _closure2_slot1 = papara;
            entity = entity[golfie];
            var _closure2_slot2 = entity;
            zuuluu = oscard.useState;
            entity = true;
            entity = zuuluu.bind(oscard)(entity);
            entity = michal.bind(tangon)(entity, target);
            config = entity[report];
            ctrled = entity[golfie];
            entity = oscard.useState;
            zuuluu = false;
            entity = entity.bind(oscard)(zuuluu);
            entity = michal.bind(tangon)(entity, target);
            sequen = entity[report];
            vacuum = entity[golfie];
            entity = oscard.useState;
            entity = entity.bind(oscard)(zuuluu);
            entity = michal.bind(tangon)(entity, target);
            echoed = entity[report];
            result = entity[golfie];
            entity = _closure1_slot9;
            option = entity.bind(tangon)();
            entity = function(argFoo, argBar) { // Original name: useTabItems
                golfie = argFoo;
                report = argBar;
                var _closure3_slot0 = golfie;
                var _closure3_slot1 = report;
                tangon = _closure1_slot9;
                zuuluu = undefined;
                oscard = tangon.bind(zuuluu)();
                var _closure3_slot2 = oscard;
                tangon = _closure1_slot4;
                zuuluu = tangon.useMemo;
                michal = new Array(3);
                michal[0] = golfie;
                oscard = oscard.item;
                michal[1] = oscard;
                michal[2] = report;
                entity = function() {
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        entity = new Array(0);
                        michal = _closure3_slot0;
                        romeon = 0;
                        michal = romeon < michal;
                        yankee = 1;
                        offset = global;
                        verify = 'item-';
                        golfie = 6;
                        oscard = undefined;
                        report = 'heading-xxl/bold';
                        tangon = 100;
                        zuuluu = 'Item ';
                        if(!michal) { _fun00004_ip = 279; continue _fun00003 }
 57:
                        backup = entity.push;
                        michal = {};
                        sizing = romeon + yankee;
                        kiloes = offset.HermesInternal;
                        kiloes = kiloes.concat;
                        kiloes = kiloes.bind(zuuluu)(sizing);
                        michal['label'] = kiloes;
                        sizing = _closure3_slot1;
                        kiloes = undefined;
                        if(!sizing) { _fun00004_ip = 134; continue _fun00003 }
 97:
                        result = offset.Math;
                        output = result.floor;
                        echoed = offset.Math;
                        sizing = echoed.random;
                        sizing = sizing.bind(echoed)();
                        sizing = tangon * sizing;
                        kiloes = output.bind(result)(sizing);
 134:
                        michal['count'] = kiloes;
                        sizing = romeon + yankee;
                        kiloes = offset.HermesInternal;
                        kiloes = kiloes.concat;
                        kiloes = kiloes.bind(verify)(sizing);
                        michal['id'] = kiloes;
                        output = _closure1_slot8;
                        sizing = _closure1_slot5;
                        kiloes = {};
                        result = _closure3_slot2;
                        result = result.item;
                        kiloes['style'] = result;
                        update = _closure1_slot7;
                        echoed = _closure1_slot0;
                        result = _closure1_slot2;
                        result = result[golfie];
                        result = echoed.bind(oscard)(result);
                        echoed = result.Text;
                        result = {};
                        result['variant'] = report;
                        ctrled = romeon + yankee;
                        source = ['Item '];
                        source[1] = ctrled;
                        result['children'] = source;
                        result = update.bind(oscard)(echoed, result);
                        kiloes['children'] = result;
                        kiloes = output.bind(oscard)(sizing, kiloes);
                        michal['page'] = kiloes;
                        michal = backup.bind(entity)(michal);
                        romeon = romeon + 1;
                        michal = _closure3_slot0;
                        if(romeon < michal) { _fun00004_ip = 57; continue _fun00003 }
 279:
                        return entity;
                    }
                };
                entity = zuuluu.bind(tangon)(entity, michal);
                return entity;
            };
            offset = entity.bind(tangon)(papara, sequen);
            foxtra = _closure1_slot0;
            kiloes = _closure1_slot2;
            entity = 9;
            entity = kiloes[entity];
            zuuluu = foxtra.bind(tangon)(entity);
            michal = zuuluu.useSegmentedControlState;
            entity = {};
            entity['items'] = offset;
            entity['pageWidth'] = verify;
            entity['defaultIndex'] = golfie;
            backup = michal.bind(zuuluu)(entity);
            zuuluu = oscard.useCallback;
            michal = function(argFoo) {
                entity = argFoo;
                entity = entity.nativeEvent;
                entity = entity.layout;
                zuuluu = entity.width;
                michal = _closure2_slot0;
                entity = undefined;
                michal = michal.bind(entity)(zuuluu);
                return entity;
            };
            entity = new Array(0);
            golfie = zuuluu.bind(oscard)(michal, entity);
            entity = 7;
            entity = kiloes[entity];
            zuuluu = foxtra.bind(tangon)(entity);
            michal = zuuluu.useToken;
            oscard = _closure1_slot1;
            entity = 5;
            entity = kiloes[entity];
            entity = oscard.bind(tangon)(entity);
            entity = entity.colors;
            entity = entity.BACKGROUND_PRIMARY;
            zuuluu = michal.bind(zuuluu)(entity);
            update = new Array(2);
            update[0] = zuuluu;
            entity = 8;
            entity = kiloes[entity];
            michal = foxtra.bind(tangon)(entity);
            entity = michal.hexWithOpacity;
            entity = entity.bind(michal)(zuuluu, report);
            update[1] = entity;
            zuuluu = _closure1_slot8;
            michal = _closure1_slot6;
            entity = {};
            oscard = _closure1_slot5;
            report = {};
            option = option.container;
            report['style'] = option;
            report['onLayout'] = golfie;
            verify = _closure1_slot7;
            status = 10;
            golfie = kiloes[status];
            golfie = foxtra.bind(tangon)(golfie);
            option = golfie.Stack;
            golfie = {};
            offset = 24;
            golfie['spacing'] = offset;
            offset = {};
            romeon = 11;
            romeon = kiloes[romeon];
            romeon = foxtra.bind(tangon)(romeon);
            foxtra = romeon.Tabs;
            romeon = {};
            romeon['state'] = backup;
            romeon['grow'] = config;
            foxtra = zuuluu.bind(tangon)(foxtra, romeon);
            romeon = new Array(2);
            romeon[0] = foxtra;
            foxtra = echoed;
            if(!foxtra) { _fun00002_ip = 491; continue _fun00001 }
 451:
            output = _closure1_slot8;
            sizing = _closure1_slot1;
            source = _closure1_slot2;
            kiloes = 12;
            kiloes = source[kiloes];
            sizing = sizing.bind(tangon)(kiloes);
            kiloes = {};
            kiloes['state'] = backup;
            kiloes['colors'] = update;
            foxtra = output.bind(tangon)(sizing, kiloes);
 491:
            romeon[1] = foxtra;
            offset['children'] = romeon;
            romeon = verify.bind(tangon)(oscard, offset);
            offset = new Array(4);
            offset[0] = romeon;
            output = _closure1_slot8;
            sizing = _closure1_slot0;
            update = _closure1_slot2;
            romeon = 13;
            romeon = update[romeon];
            romeon = sizing.bind(tangon)(romeon);
            foxtra = romeon.SegmentedControlPages;
            romeon = {};
            romeon['state'] = backup;
            romeon = output.bind(tangon)(foxtra, romeon);
            offset[1] = romeon;
            foxtra = _closure1_slot7;
            romeon = update[status];
            romeon = sizing.bind(tangon)(romeon);
            backup = romeon.Stack;
            romeon = {'spacing': 8, 'direction': 'horizontal'};
            source = 14;
            kiloes = update[source];
            kiloes = sizing.bind(tangon)(kiloes);
            record = kiloes.Button;
            kiloes = {'text': 'Add Tab', 'variant': 'active', 'size': 'sm'};
            status = papara >= status;
            kiloes['disabled'] = status;
            status = function() { // Original name: onPress
                zuuluu = _closure2_slot2;
                michal = _closure2_slot1;
                entity = 1;
                michal = michal + entity;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            kiloes['onPress'] = status;
            record = output.bind(tangon)(record, kiloes);
            kiloes = new Array(2);
            kiloes[0] = record;
            source = update[source];
            source = sizing.bind(tangon)(source);
            record = source.Button;
            source = {'text': 'Remove Tab', 'variant': 'destructive', 'size': 'sm'};
            papara = target === papara;
            source['disabled'] = papara;
            cntext = function() { // Original name: onPress
                zuuluu = _closure2_slot2;
                michal = _closure2_slot1;
                entity = 1;
                michal = michal - entity;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            source['onPress'] = cntext;
            source = output.bind(tangon)(record, source);
            kiloes[1] = source;
            romeon['children'] = kiloes;
            romeon = foxtra.bind(tangon)(backup, romeon);
            offset[2] = romeon;
            romeon = _closure1_slot5;
            yankee = {};
            kiloes = 15;
            backup = update[kiloes];
            backup = sizing.bind(tangon)(backup);
            source = backup.TableSwitchRow;
            backup = {'start': true, 'label': 'Enable Grow'};
            backup['value'] = config;
            backup['onValueChange'] = ctrled;
            source = output.bind(tangon)(source, backup);
            backup = new Array(3);
            backup[0] = source;
            source = update[kiloes];
            source = sizing.bind(tangon)(source);
            ctrled = source.TableSwitchRow;
            source = {};
            config = 'Enable Counts';
            source['label'] = config;
            source['value'] = sequen;
            source['onValueChange'] = vacuum;
            source = output.bind(tangon)(ctrled, source);
            backup[1] = source;
            kiloes = update[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.TableSwitchRow;
            kiloes = {'end': true, 'label': 'Enable Overflow Gradient'};
            kiloes['value'] = echoed;
            kiloes['onValueChange'] = result;
            kiloes = output.bind(tangon)(sizing, kiloes);
            backup[2] = kiloes;
            yankee['children'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[3] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();