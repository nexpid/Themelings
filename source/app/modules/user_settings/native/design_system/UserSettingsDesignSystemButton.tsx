// app/modules/user_settings/native/design_system/UserSettingsDesignSystemButton.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: ExampleButton
        _fun99100: for(var _fun99100_ip = 0; ; ) switch(_fun99100_ip) {
 0:
            mike = argFoo;
            foxtrot = mike.variant;
            romeo = mike.text;
            yankee = mike.grow;
            zulu = _closure1_slot1;
            result = _closure1_slot2;
            mike = 5;
            mike = result[mike];
            tango = undefined;
            mike = zulu.bind(tango)(mike);
            zulu = mike.bind(tango)();
            report = zulu.buttonScale;
            golf = zulu.buttonSize;
            mike = zulu.enableLoadingState;
            var _closure2_slot0 = mike;
            oscar = zulu.iconPosition;
            verify = zulu.showIcon;
            output = zulu.showDisabled;
            backup = _closure1_slot4;
            zulu = backup.useRef;
            offset = null;
            zulu = zulu.bind(backup)(offset);
            var _closure2_slot1 = zulu;
            kilo = _closure1_slot4;
            backup = kilo.useState;
            zulu = false;
            kilo = backup.bind(kilo)(zulu);
            backup = _closure1_slot3;
            zulu = 2;
            kilo = backup.bind(tango)(kilo, zulu);
            zulu = 0;
            backup = kilo[zulu];
            zulu = 1;
            zulu = kilo[zulu];
            var _closure2_slot2 = zulu;
            sizing = _closure1_slot4;
            kilo = sizing.useCallback;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                _fun99101: for(var _fun99101_ip = 0; ; ) switch(_fun99101_ip) {
 0:
                    mike = _closure2_slot0;
                    if(!mike) { _fun99101_ip = 101; continue _fun99101 }
 10:
                    mike = _closure2_slot1;
                    zulu = mike.current;
                    mike = null;
                    if(!(mike != zulu)) { _fun99101_ip = 49; continue _fun99101 }
 25:
                    mike = global;
                    tango = mike.clearTimeout;
                    mike = _closure2_slot1;
                    zulu = mike.current;
                    mike = undefined;
                    mike = tango.bind(mike)(zulu);
 49:
                    zulu = _closure2_slot2;
                    report = undefined;
                    mike = true;
                    mike = zulu.bind(report)(mike);
                    mike = _closure2_slot1;
                    entity = global;
                    tango = entity.setTimeout;
                    zulu = function() {
                        zulu = _closure2_slot2;
                        entity = undefined;
                        mike = false;
                        mike = zulu.bind(entity)(mike);
                        return entity;
                    };
                    entity = 5000;
                    entity = tango.bind(report)(zulu, entity);
                    mike['current'] = entity;
 101:
                    entity = undefined;
                    return entity;
                }
            };
            sizing = kilo.bind(sizing)(mike, zulu);
            kilo = _closure1_slot4;
            zulu = kilo.useCallback;
            mike = function() {
                tango = _closure2_slot2;
                entity = undefined;
                zulu = true;
                zulu = tango.bind(entity)(zulu);
                zulu = _closure2_slot1;
                mike = global;
                report = mike.setTimeout;
                tango = function() {
                    zulu = _closure2_slot2;
                    entity = undefined;
                    mike = false;
                    mike = zulu.bind(entity)(mike);
                    return entity;
                };
                mike = 5000;
                mike = report.bind(entity)(tango, mike);
                zulu['current'] = mike;
                return entity;
            };
            entity = new Array(0);
            kilo = zulu.bind(kilo)(mike, entity);
            zulu = _closure1_slot9;
            mike = _closure1_slot0;
            entity = 6;
            entity = result[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.Button;
            entity = {};
            entity['disabled'] = output;
            entity['onPress'] = sizing;
            entity['onLongPress'] = kilo;
            entity['loading'] = backup;
            entity['variant'] = foxtrot;
            if(!(offset != romeo)) { _fun99100_ip = 269; continue _fun99100 }
 266:
            foxtrot = romeo;
 269:
            backup = offset != foxtrot;
            romeo = '';
            if(!backup) { _fun99100_ip = 283; continue _fun99100 }
 280:
            romeo = foxtrot;
 283:
            entity['text'] = romeo;
            offset = offset != yankee;
            if(!offset) { _fun99100_ip = 297; continue _fun99100 }
 294:
            offset = yankee;
 297:
            entity['grow'] = offset;
            entity['size'] = golf;
            golf = undefined;
            if(!verify) { _fun99100_ip = 331; continue _fun99100 }
 311:
            verify = _closure1_slot1;
            offset = _closure1_slot2;
            options = 7;
            options = offset[options];
            golf = verify.bind(tango)(options);
 331:
            entity['icon'] = golf;
            entity['iconPosition'] = oscar;
            entity['scaleAmountInPx'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot17 = entity;
    entity = function(argFoo) { // Original name: ExampleIconButton
        _fun99105: for(var _fun99105_ip = 0; ; ) switch(_fun99105_ip) {
 0:
            entity = argFoo;
            golf = entity.variant;
            yankee = entity.showLabel;
            tango = undefined;
            if(!(yankee === tango)) { _fun99105_ip = 24; continue _fun99105 }
 22:
            yankee = false;
 24:
            var _closure2_slot0 = tango;
            var _closure2_slot1 = tango;
            var _closure2_slot2 = tango;
            var _closure2_slot3 = tango;
            mike = _closure1_slot1;
            foxtrot = _closure1_slot2;
            entity = 5;
            entity = foxtrot[entity];
            entity = mike.bind(tango)(entity);
            zulu = entity.bind(tango)();
            entity = zulu.buttonSize;
            mike = zulu.enableLoadingState;
            _closure2_slot0 = mike;
            romeo = zulu.showDisabled;
            report = _closure1_slot4;
            zulu = report.useRef;
            verify = null;
            zulu = zulu.bind(report)(verify);
            _closure2_slot1 = zulu;
            options = _closure1_slot4;
            report = options.useState;
            zulu = false;
            options = report.bind(options)(zulu);
            report = _closure1_slot3;
            zulu = 2;
            report = report.bind(tango)(options, zulu);
            zulu = 0;
            options = report[zulu];
            zulu = 1;
            zulu = report[zulu];
            _closure2_slot2 = zulu;
            backup = _closure1_slot4;
            report = backup.useCallback;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                _fun99106: for(var _fun99106_ip = 0; ; ) switch(_fun99106_ip) {
 0:
                    mike = _closure2_slot0;
                    if(!mike) { _fun99106_ip = 101; continue _fun99106 }
 10:
                    mike = _closure2_slot1;
                    zulu = mike.current;
                    mike = null;
                    if(!(mike != zulu)) { _fun99106_ip = 49; continue _fun99106 }
 25:
                    mike = global;
                    tango = mike.clearTimeout;
                    mike = _closure2_slot1;
                    zulu = mike.current;
                    mike = undefined;
                    mike = tango.bind(mike)(zulu);
 49:
                    zulu = _closure2_slot2;
                    report = undefined;
                    mike = true;
                    mike = zulu.bind(report)(mike);
                    mike = _closure2_slot1;
                    entity = global;
                    tango = entity.setTimeout;
                    zulu = function() {
                        zulu = _closure2_slot2;
                        entity = undefined;
                        mike = false;
                        mike = zulu.bind(entity)(mike);
                        return entity;
                    };
                    entity = 5000;
                    entity = tango.bind(report)(zulu, entity);
                    mike['current'] = entity;
 101:
                    entity = undefined;
                    return entity;
                }
            };
            mike = report.bind(backup)(mike, zulu);
            _closure2_slot3 = mike;
            zulu = _closure1_slot9;
            report = _closure1_slot0;
            mike = 8;
            mike = foxtrot[mike];
            mike = report.bind(tango)(mike);
            mike = mike.IconButton;
            report = {};
            report['disabled'] = romeo;
            if(yankee) { _fun99105_ip = 295; continue _fun99105 }
 224:
            yankee = function() { // Original name: onPress
                mike = _closure2_slot3;
                entity = undefined;
                entity = mike.bind(entity)();
                return entity;
            };
            report['onPress'] = yankee;
            romeo = verify != golf;
            yankee = '';
            if(!romeo) { _fun99105_ip = 249; continue _fun99105 }
 246:
            yankee = golf;
 249:
            report['accessibilityLabel'] = yankee;
            report['loading'] = options;
            report['variant'] = golf;
            report['size'] = entity;
            yankee = _closure1_slot1;
            romeo = _closure1_slot2;
            entity = 9;
            entity = romeo[entity];
            entity = yankee.bind(tango)(entity);
            report['icon'] = entity;
            entity = report;
            _fun99105_ip = 367; continue _fun99105;
 295:
            offset = function() { // Original name: onPress
                mike = _closure2_slot3;
                entity = undefined;
                entity = mike.bind(entity)();
                return entity;
            };
            report['onPress'] = offset;
            offset = verify != golf;
            verify = '';
            if(!offset) { _fun99105_ip = 320; continue _fun99105 }
 317:
            verify = golf;
 320:
            report['label'] = verify;
            verify = true;
            report['grow'] = verify;
            report['loading'] = options;
            report['variant'] = golf;
            golf = _closure1_slot1;
            options = _closure1_slot2;
            oscar = 9;
            oscar = options[oscar];
            oscar = golf.bind(tango)(oscar);
            report['icon'] = oscar;
            entity = report;
 367:
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot18 = entity;
    entity = function(argFoo) { // Original name: ExampleImageButton
        _fun99110: for(var _fun99110_ip = 0; ; ) switch(_fun99110_ip) {
 0:
            entity = argFoo;
            oscar = entity.image;
            options = entity.label;
            offset = entity.showLabel;
            tango = undefined;
            if(!(offset === tango)) { _fun99110_ip = 30; continue _fun99110 }
 28:
            offset = false;
 30:
            var _closure2_slot0 = tango;
            var _closure2_slot1 = tango;
            var _closure2_slot2 = tango;
            var _closure2_slot3 = tango;
            zulu = _closure1_slot1;
            romeo = _closure1_slot2;
            entity = 5;
            entity = romeo[entity];
            entity = zulu.bind(tango)(entity);
            report = entity.bind(tango)();
            entity = report.buttonSize;
            zulu = report.enableLoadingState;
            _closure2_slot0 = zulu;
            yankee = report.showDisabled;
            foxtrot = _closure1_slot4;
            golf = foxtrot.useRef;
            report = null;
            report = golf.bind(foxtrot)(report);
            _closure2_slot1 = report;
            foxtrot = _closure1_slot4;
            golf = foxtrot.useState;
            report = false;
            foxtrot = golf.bind(foxtrot)(report);
            golf = _closure1_slot3;
            report = 2;
            foxtrot = golf.bind(tango)(foxtrot, report);
            report = 0;
            golf = foxtrot[report];
            report = 1;
            report = foxtrot[report];
            _closure2_slot2 = report;
            backup = _closure1_slot4;
            foxtrot = backup.useCallback;
            report = new Array(1);
            report[0] = zulu;
            zulu = function() {
                _fun99111: for(var _fun99111_ip = 0; ; ) switch(_fun99111_ip) {
 0:
                    mike = _closure2_slot0;
                    if(!mike) { _fun99111_ip = 101; continue _fun99111 }
 10:
                    mike = _closure2_slot1;
                    zulu = mike.current;
                    mike = null;
                    if(!(mike != zulu)) { _fun99111_ip = 49; continue _fun99111 }
 25:
                    mike = global;
                    tango = mike.clearTimeout;
                    mike = _closure2_slot1;
                    zulu = mike.current;
                    mike = undefined;
                    mike = tango.bind(mike)(zulu);
 49:
                    zulu = _closure2_slot2;
                    report = undefined;
                    mike = true;
                    mike = zulu.bind(report)(mike);
                    mike = _closure2_slot1;
                    entity = global;
                    tango = entity.setTimeout;
                    zulu = function() {
                        zulu = _closure2_slot2;
                        entity = undefined;
                        mike = false;
                        mike = zulu.bind(entity)(mike);
                        return entity;
                    };
                    entity = 5000;
                    entity = tango.bind(report)(zulu, entity);
                    mike['current'] = entity;
 101:
                    entity = undefined;
                    return entity;
                }
            };
            zulu = foxtrot.bind(backup)(zulu, report);
            _closure2_slot3 = zulu;
            zulu = _closure1_slot9;
            report = _closure1_slot0;
            mike = 10;
            mike = romeo[mike];
            mike = report.bind(tango)(mike);
            mike = mike.ImageButton;
            report = {};
            report['disabled'] = yankee;
            if(offset) { _fun99110_ip = 264; continue _fun99110 }
 230:
            offset = function() { // Original name: onPress
                mike = _closure2_slot3;
                entity = undefined;
                entity = mike.bind(entity)();
                return entity;
            };
            report['onPress'] = offset;
            report['accessibilityLabel'] = options;
            report['loading'] = golf;
            report['size'] = entity;
            report['image'] = oscar;
            entity = report;
            _fun99110_ip = 299; continue _fun99110;
 264:
            verify = function() { // Original name: onPress
                mike = _closure2_slot3;
                entity = undefined;
                entity = mike.bind(entity)();
                return entity;
            };
            report['onPress'] = verify;
            report['label'] = options;
            options = true;
            report['grow'] = options;
            report['loading'] = golf;
            report['image'] = oscar;
            entity = report;
 299:
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot19 = entity;
    entity = function() { // Original name: ExampleToggleButton
        tango = _closure1_slot4;
        zulu = tango.useState;
        mike = false;
        oscar = zulu.bind(tango)(mike);
        zulu = _closure1_slot3;
        tango = undefined;
        mike = 2;
        zulu = zulu.bind(tango)(oscar, mike);
        mike = 0;
        verify = zulu[mike];
        var _closure2_slot0 = verify;
        mike = 1;
        mike = zulu[mike];
        var _closure2_slot1 = mike;
        mike = _closure1_slot0;
        golf = _closure1_slot2;
        zulu = 11;
        zulu = golf[zulu];
        options = mike.bind(tango)(zulu);
        oscar = options.useToggleButtonProps;
        zulu = {};
        offset = {};
        yankee = 'Unfollow';
        offset['text'] = yankee;
        romeo = _closure1_slot1;
        yankee = 12;
        yankee = golf[yankee];
        yankee = romeo.bind(tango)(yankee);
        offset['icon'] = yankee;
        zulu['on'] = offset;
        offset = {};
        yankee = 'Follow';
        offset['text'] = yankee;
        yankee = 13;
        yankee = golf[yankee];
        yankee = romeo.bind(tango)(yankee);
        offset['icon'] = yankee;
        zulu['off'] = offset;
        foxtrot = oscar.bind(options)(zulu, verify);
        zulu = _closure1_slot9;
        entity = 6;
        entity = golf[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.Button;
        entity = {};
        backup = entity;
        oscar = copyDataProperties(backup, foxtrot);
        oscar = function() { // Original name: onPress
            zulu = _closure2_slot1;
            entity = _closure2_slot0;
            mike = !entity;
            entity = undefined;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        report = 'onPress';
        entity[report] = oscar;
        oscar = 'secondary';
        report = 'variant';
        entity[report] = oscar;
        oscar = 'md';
        report = 'size';
        entity[report] = oscar;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot20 = entity;
    entity = function() { // Original name: ExampleIconToggleButton
        tango = _closure1_slot4;
        zulu = tango.useState;
        mike = false;
        oscar = zulu.bind(tango)(mike);
        zulu = _closure1_slot3;
        tango = undefined;
        mike = 2;
        zulu = zulu.bind(tango)(oscar, mike);
        mike = 0;
        verify = zulu[mike];
        var _closure2_slot0 = verify;
        mike = 1;
        mike = zulu[mike];
        var _closure2_slot1 = mike;
        mike = _closure1_slot0;
        golf = _closure1_slot2;
        zulu = 11;
        zulu = golf[zulu];
        options = mike.bind(tango)(zulu);
        oscar = options.useToggleIconButtonProps;
        zulu = {};
        offset = {'variant': 'destructive', 'accessibilityLabel': 'Mute'};
        romeo = _closure1_slot1;
        yankee = 14;
        foxtrot = golf[yankee];
        foxtrot = romeo.bind(tango)(foxtrot);
        offset['icon'] = foxtrot;
        zulu['on'] = offset;
        offset = {'variant': 'secondary', 'accessibilityLabel': 'Mute'};
        yankee = golf[yankee];
        yankee = romeo.bind(tango)(yankee);
        offset['icon'] = yankee;
        zulu['off'] = offset;
        backup = oscar.bind(options)(zulu, verify);
        zulu = _closure1_slot9;
        entity = 8;
        entity = golf[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.IconButton;
        entity = {};
        kilo = entity;
        oscar = copyDataProperties(kilo, backup);
        oscar = function() { // Original name: onPress
            zulu = _closure2_slot1;
            entity = _closure2_slot0;
            mike = !entity;
            entity = undefined;
            mike = zulu.bind(entity)(mike);
            return entity;
        };
        report = 'onPress';
        entity[report] = oscar;
        oscar = 'md';
        report = 'size';
        entity[report] = oscar;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot21 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot5 = golf;
    tango = tango.ScrollView;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.LIGHT_BACKGROUND_GRADIENT_PRESETS;
    var _closure1_slot7 = golf;
    tango = tango.DARK_BACKGROUND_GRADIENT_PRESETS;
    var _closure1_slot8 = tango;
    tango = 4;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot9 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot11 = tango;
    tango = ['primary', 'secondary', 'tertiary'];
    var _closure1_slot12 = tango;
    tango = ['primary-overlay', 'secondary-overlay'];
    var _closure1_slot13 = tango;
    tango = ['destructive', 'active'];
    var _closure1_slot14 = tango;
    tango = ['experimental_premium-primary', 'experimental_premium-secondary'];
    var _closure1_slot15 = tango;
    tango = 15;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    offset = 16;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['paddingHorizontal'] = romeo;
    tango['container'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_16;
    verify['paddingHorizontal'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    verify['paddingVertical'] = romeo;
    tango['buttonContainer'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.unsafe_rawColors;
    romeo = romeo.BG_GRADIENT_CHROMA_GLOW_1;
    verify['backgroundColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_48;
    verify['paddingVertical'] = offset;
    tango['overlayButtonContainer'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot16 = tango;
    tango = 39;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/design_system/UserSettingsDesignSystemButton.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: UserSettingsDesignSystemButton
        entity = _closure1_slot16;
        tango = undefined;
        verify = entity.bind(tango)();
        var _closure2_slot0 = verify;
        golf = _closure1_slot0;
        backup = _closure1_slot2;
        entity = 17;
        entity = backup[entity];
        mike = golf.bind(tango)(entity);
        entity = mike.useNavigation;
        zulu = entity.bind(mike)();
        options = _closure1_slot4;
        report = options.useCallback;
        mike = function() {
            report = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 18;
            tango = mike[entity];
            entity = undefined;
            report = report.bind(entity)(tango);
            tango = report.openLazy;
            oscar = _closure1_slot0;
            zulu = 20;
            zulu = mike[zulu];
            oscar = oscar.bind(entity)(zulu);
            zulu = 19;
            zulu = mike[zulu];
            mike = mike.paths;
            zulu = oscar.bind(entity)(zulu, mike);
            mike = 'UserSettingsDesignSystemButtonActionSheet';
            mike = tango.bind(report)(zulu, mike);
            return entity;
        };
        entity = new Array(0);
        entity = report.bind(options)(mike, entity);
        var _closure2_slot1 = entity;
        mike = zulu.setOptions;
        entity = {};
        report = function() { // Original name: headerRight
            tango = _closure1_slot9;
            mike = _closure1_slot0;
            golf = _closure1_slot2;
            entity = 8;
            entity = golf[entity];
            zulu = undefined;
            entity = mike.bind(zulu)(entity);
            mike = entity.IconButton;
            entity = {'onPress': null, 'icon': null, 'size': 'sm', 'variant': 'secondary', 'accessibilityLabel': 'Settings'};
            oscar = _closure2_slot1;
            entity['onPress'] = oscar;
            oscar = _closure1_slot1;
            report = 9;
            report = golf[report];
            report = oscar.bind(zulu)(report);
            entity['icon'] = report;
            entity = tango.bind(zulu)(mike, entity);
            return entity;
        };
        entity['headerRight'] = report;
        entity = mike.bind(zulu)(entity);
        zulu = _closure1_slot10;
        mike = _closure1_slot11;
        entity = {};
        kilo = _closure1_slot9;
        options = _closure1_slot6;
        report = {};
        source = 21;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        output = offset.Stack;
        sizing = {};
        update = 24;
        sizing['spacing'] = update;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        echo = _closure1_slot9;
        foxtrot = backup[source];
        foxtrot = golf.bind(tango)(foxtrot);
        result = foxtrot.Stack;
        foxtrot = {};
        control = verify.container;
        foxtrot['style'] = control;
        sequence = _closure1_slot9;
        config = 22;
        control = backup[config];
        control = golf.bind(tango)(control);
        vacuum = control.Text;
        control = {'variant': 'heading-lg/bold', 'children': 'Hierarchical buttons'};
        control = sequence.bind(tango)(vacuum, control);
        foxtrot['children'] = control;
        result = echo.bind(tango)(result, foxtrot);
        foxtrot = new Array(2);
        foxtrot[0] = result;
        echo = _closure1_slot9;
        sequence = _closure1_slot5;
        result = {};
        variable36 = _closure1_slot12;
        vacuum = variable36.map;
        control = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot5;
            mike = {};
            oscar = _closure2_slot0;
            oscar = oscar.buttonContainer;
            mike['style'] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot17;
            oscar = {};
            oscar['variant'] = report;
            entity = undefined;
            oscar = options.bind(entity)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        control = vacuum.bind(variable36)(control);
        result['children'] = control;
        result = echo.bind(tango)(sequence, result);
        foxtrot[1] = result;
        offset['children'] = foxtrot;
        offset = zulu.bind(tango)(romeo, offset);
        result = new Array(19);
        result[0] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        control = _closure1_slot9;
        foxtrot = backup[source];
        foxtrot = golf.bind(tango)(foxtrot);
        echo = foxtrot.Stack;
        foxtrot = {};
        vacuum = verify.container;
        foxtrot['style'] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'heading-lg/bold', 'children': 'Sentiment buttons'};
        vacuum = context.bind(tango)(record, vacuum);
        foxtrot['children'] = vacuum;
        echo = control.bind(tango)(echo, foxtrot);
        foxtrot = new Array(2);
        foxtrot[0] = echo;
        control = _closure1_slot9;
        echo = {};
        variable37 = _closure1_slot14;
        record = variable37.map;
        vacuum = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot5;
            mike = {};
            oscar = _closure2_slot0;
            oscar = oscar.buttonContainer;
            mike['style'] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot17;
            oscar = {};
            oscar['variant'] = report;
            entity = undefined;
            oscar = options.bind(entity)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        vacuum = record.bind(variable37)(vacuum);
        echo['children'] = vacuum;
        echo = control.bind(tango)(sequence, echo);
        foxtrot[1] = echo;
        offset['children'] = foxtrot;
        offset = zulu.bind(tango)(romeo, offset);
        result[1] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        control = _closure1_slot9;
        foxtrot = backup[source];
        foxtrot = golf.bind(tango)(foxtrot);
        echo = foxtrot.Stack;
        foxtrot = {};
        vacuum = verify.container;
        foxtrot['style'] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'heading-lg/bold', 'children': 'Experimental premium buttons'};
        vacuum = context.bind(tango)(record, vacuum);
        foxtrot['children'] = vacuum;
        echo = control.bind(tango)(echo, foxtrot);
        foxtrot = new Array(2);
        foxtrot[0] = echo;
        control = _closure1_slot9;
        echo = {};
        context = _closure1_slot15;
        record = context.map;
        vacuum = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot5;
            mike = {};
            oscar = _closure2_slot0;
            oscar = oscar.buttonContainer;
            mike['style'] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot17;
            oscar = {};
            oscar['variant'] = report;
            entity = undefined;
            oscar = options.bind(entity)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        vacuum = record.bind(context)(vacuum);
        echo['children'] = vacuum;
        echo = control.bind(tango)(sequence, echo);
        foxtrot[1] = echo;
        offset['children'] = foxtrot;
        offset = zulu.bind(tango)(romeo, offset);
        result[2] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        foxtrot = backup[source];
        foxtrot = golf.bind(tango)(foxtrot);
        echo = foxtrot.Stack;
        foxtrot = {};
        control = verify.container;
        foxtrot['style'] = control;
        record = _closure1_slot9;
        control = backup[config];
        control = golf.bind(tango)(control);
        vacuum = control.Text;
        control = {'variant': 'heading-lg/bold', 'children': 'Overlay buttons'};
        vacuum = record.bind(tango)(vacuum, control);
        control = new Array(2);
        control[0] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'text-sm/normal', 'children': 'Overlay buttons are meant to be used overlayed on top of an image or background color. They do not change colors with the theme.'};
        vacuum = context.bind(tango)(record, vacuum);
        control[1] = vacuum;
        foxtrot['children'] = control;
        echo = zulu.bind(tango)(echo, foxtrot);
        foxtrot = new Array(2);
        foxtrot[0] = echo;
        control = _closure1_slot9;
        echo = {};
        papa = _closure1_slot13;
        record = papa.map;
        vacuum = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot5;
            mike = {};
            golf = _closure2_slot0;
            options = golf.buttonContainer;
            oscar = new Array(2);
            oscar[0] = options;
            golf = golf.overlayButtonContainer;
            oscar[1] = golf;
            mike['style'] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot17;
            oscar = {};
            oscar['variant'] = report;
            entity = undefined;
            oscar = options.bind(entity)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        vacuum = record.bind(papa)(vacuum);
        echo['children'] = vacuum;
        echo = control.bind(tango)(sequence, echo);
        foxtrot[1] = echo;
        offset['children'] = foxtrot;
        offset = zulu.bind(tango)(romeo, offset);
        result[3] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        foxtrot = backup[source];
        foxtrot = golf.bind(tango)(foxtrot);
        echo = foxtrot.Stack;
        foxtrot = {};
        control = verify.container;
        foxtrot['style'] = control;
        record = _closure1_slot9;
        control = backup[config];
        control = golf.bind(tango)(control);
        vacuum = control.Text;
        control = {'variant': 'heading-lg/bold', 'children': 'Custom color icons'};
        vacuum = record.bind(tango)(vacuum, control);
        control = new Array(2);
        control[0] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'text-sm/normal', 'children': 'If a button needs to have an icon which has its own custom color, then create your own Button.Icon to pass as the icon prop.'};
        vacuum = context.bind(tango)(record, vacuum);
        control[1] = vacuum;
        foxtrot['children'] = control;
        foxtrot = zulu.bind(tango)(echo, foxtrot);
        echo = new Array(2);
        echo[0] = foxtrot;
        control = {};
        record = _closure1_slot9;
        vacuum = {};
        foxtrot = verify.buttonContainer;
        vacuum['style'] = foxtrot;
        lima = _closure1_slot9;
        target = 6;
        foxtrot = backup[target];
        foxtrot = golf.bind(tango)(foxtrot);
        sierra = foxtrot.Button;
        context = {'onPress': null, 'variant': 'secondary', 'text': 'Button with a custom color icon', 'size': 'md'};
        foxtrot = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        context['onPress'] = foxtrot;
        status = 'secondary';
        variable38 = _closure1_slot9;
        foxtrot = backup[target];
        foxtrot = golf.bind(tango)(foxtrot);
        foxtrot = foxtrot.Button;
        quebec = foxtrot.Icon;
        whiskey = {};
        foxtrot = _closure1_slot1;
        equality = 23;
        variable39 = backup[equality];
        variable39 = foxtrot.bind(tango)(variable39);
        whiskey['source'] = variable39;
        whiskey = variable38.bind(tango)(quebec, whiskey);
        context['icon'] = whiskey;
        context = lima.bind(tango)(sierra, context);
        vacuum['children'] = context;
        record = record.bind(tango)(sequence, vacuum);
        vacuum = new Array(2);
        vacuum[0] = record;
        context = _closure1_slot9;
        record = {};
        sierra = verify.buttonContainer;
        record['style'] = sierra;
        whiskey = _closure1_slot9;
        sierra = backup[target];
        sierra = golf.bind(tango)(sierra);
        lima = sierra.Button;
        sierra = {'onPress': null, 'variant': 'secondary', 'text': 'Button with a entity variant icon', 'size': 'md'};
        quebec = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        sierra['onPress'] = quebec;
        variable39 = _closure1_slot9;
        quebec = backup[target];
        quebec = golf.bind(tango)(quebec);
        quebec = quebec.Button;
        variable38 = quebec.Icon;
        quebec = {};
        variable40 = 'entity';
        quebec['variant'] = variable40;
        variable40 = backup[update];
        variable40 = foxtrot.bind(tango)(variable40);
        quebec['source'] = variable40;
        quebec = variable39.bind(tango)(variable38, quebec);
        sierra['icon'] = quebec;
        sierra = whiskey.bind(tango)(lima, sierra);
        record['children'] = sierra;
        record = context.bind(tango)(sequence, record);
        vacuum[1] = record;
        control['children'] = vacuum;
        control = zulu.bind(tango)(sequence, control);
        echo[1] = control;
        offset['children'] = echo;
        offset = zulu.bind(tango)(romeo, offset);
        result[4] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        vacuum = _closure1_slot9;
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        control = echo.Stack;
        echo = {};
        record = verify.container;
        echo['style'] = record;
        sierra = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'heading-lg/bold', 'children': 'Buttons with various text lengths'};
        record = sierra.bind(tango)(context, record);
        echo['children'] = record;
        control = vacuum.bind(tango)(control, echo);
        echo = new Array(2);
        echo[0] = control;
        control = {};
        record = _closure1_slot9;
        vacuum = {};
        context = verify.buttonContainer;
        vacuum['style'] = context;
        lima = _closure1_slot9;
        context = backup[target];
        context = golf.bind(tango)(context);
        sierra = context.Button;
        context = {'onPress': null, 'variant': 'secondary', 'text': 'Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur', 'size': 'md'};
        whiskey = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        context['onPress'] = whiskey;
        whiskey = backup[equality];
        whiskey = foxtrot.bind(tango)(whiskey);
        context['icon'] = whiskey;
        context = lima.bind(tango)(sierra, context);
        vacuum['children'] = context;
        record = record.bind(tango)(sequence, vacuum);
        vacuum = new Array(4);
        vacuum[0] = record;
        context = _closure1_slot9;
        record = {};
        sierra = verify.buttonContainer;
        record['style'] = sierra;
        whiskey = _closure1_slot9;
        sierra = backup[target];
        sierra = golf.bind(tango)(sierra);
        lima = sierra.Button;
        sierra = {'onPress': null, 'variant': 'secondary', 'text': 'Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur', 'size': 'md', 'icon': null, 'iconPosition': 'end'};
        quebec = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        sierra['onPress'] = quebec;
        equality = backup[equality];
        equality = foxtrot.bind(tango)(equality);
        sierra['icon'] = equality;
        sierra = whiskey.bind(tango)(lima, sierra);
        record['children'] = sierra;
        record = context.bind(tango)(sequence, record);
        vacuum[1] = record;
        context = _closure1_slot9;
        record = {};
        sierra = verify.buttonContainer;
        record['style'] = sierra;
        whiskey = _closure1_slot9;
        sierra = backup[target];
        sierra = golf.bind(tango)(sierra);
        lima = sierra.Button;
        sierra = {'onPress': null, 'variant': 'secondary', 'text': 'Neque porro quisquam est qui dolorem ipsum quia dolor sit amet, consectetur', 'size': 'md'};
        equality = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        sierra['onPress'] = equality;
        sierra = whiskey.bind(tango)(lima, sierra);
        record['children'] = sierra;
        record = context.bind(tango)(sequence, record);
        vacuum[2] = record;
        context = _closure1_slot9;
        record = {};
        sierra = verify.buttonContainer;
        record['style'] = sierra;
        lima = _closure1_slot9;
        target = backup[target];
        target = golf.bind(tango)(target);
        sierra = target.Button;
        target = {'onPress': null, 'variant': 'secondary', 'text': 'A', 'size': 'md'};
        whiskey = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        target['onPress'] = whiskey;
        target = lima.bind(tango)(sierra, target);
        record['children'] = target;
        record = context.bind(tango)(sequence, record);
        vacuum[3] = record;
        control['children'] = vacuum;
        control = zulu.bind(tango)(sequence, control);
        echo[1] = control;
        offset['children'] = echo;
        offset = zulu.bind(tango)(romeo, offset);
        result[5] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        control = echo.Stack;
        echo = {};
        vacuum = verify.container;
        echo['style'] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'heading-lg/bold', 'children': 'Toggling button states'};
        record = context.bind(tango)(record, vacuum);
        vacuum = new Array(3);
        vacuum[0] = record;
        target = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': 'Use the useToggleButtonProps hook or the useToggleIconButtonProps hook to toggle a button between two states.'};
        record = target.bind(tango)(context, record);
        vacuum[1] = record;
        target = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': 'This hook changes the button presentation and adds some important accessibility attributes for a toggle button.'};
        record = target.bind(tango)(context, record);
        vacuum[2] = record;
        echo['children'] = vacuum;
        control = zulu.bind(tango)(control, echo);
        echo = new Array(2);
        echo[0] = control;
        control = {};
        record = _closure1_slot9;
        vacuum = {};
        context = verify.buttonContainer;
        vacuum['style'] = context;
        sierra = _closure1_slot9;
        target = _closure1_slot20;
        context = {};
        context = sierra.bind(tango)(target, context);
        vacuum['children'] = context;
        record = record.bind(tango)(sequence, vacuum);
        vacuum = new Array(2);
        vacuum[0] = record;
        context = _closure1_slot9;
        record = {};
        target = verify.buttonContainer;
        record['style'] = target;
        lima = _closure1_slot9;
        sierra = _closure1_slot21;
        target = {};
        target = lima.bind(tango)(sierra, target);
        record['children'] = target;
        record = context.bind(tango)(sequence, record);
        vacuum[1] = record;
        control['children'] = vacuum;
        control = zulu.bind(tango)(sequence, control);
        echo[1] = control;
        offset['children'] = echo;
        offset = zulu.bind(tango)(romeo, offset);
        result[6] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        control = echo.Stack;
        echo = {};
        vacuum = verify.container;
        echo['style'] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'heading-lg/bold', 'children': 'Hierarchical icon buttons'};
        record = context.bind(tango)(record, vacuum);
        vacuum = new Array(3);
        vacuum[0] = record;
        target = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': 'While the primary variants of IconButton are supported, these should be used very rarely.'};
        record = target.bind(tango)(context, record);
        vacuum[1] = record;
        target = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': 'An icon button usually has a secondary function and should use the secondary variants.'};
        record = target.bind(tango)(context, record);
        vacuum[2] = record;
        echo['children'] = vacuum;
        control = zulu.bind(tango)(control, echo);
        echo = new Array(2);
        echo[0] = control;
        vacuum = _closure1_slot9;
        control = {};
        context = variable36.map;
        record = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot5;
            mike = {};
            oscar = _closure2_slot0;
            oscar = oscar.buttonContainer;
            mike['style'] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot18;
            oscar = {};
            oscar['variant'] = report;
            entity = undefined;
            oscar = options.bind(entity)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        record = context.bind(variable36)(record);
        control['children'] = record;
        control = vacuum.bind(tango)(sequence, control);
        echo[1] = control;
        offset['children'] = echo;
        offset = zulu.bind(tango)(romeo, offset);
        result[7] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        vacuum = _closure1_slot9;
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        control = echo.Stack;
        echo = {};
        record = verify.container;
        echo['style'] = record;
        target = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'heading-lg/bold', 'children': 'Sentiment icon buttons'};
        record = target.bind(tango)(context, record);
        echo['children'] = record;
        control = vacuum.bind(tango)(control, echo);
        echo = new Array(2);
        echo[0] = control;
        vacuum = _closure1_slot9;
        control = {};
        context = variable37.map;
        record = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot5;
            mike = {};
            oscar = _closure2_slot0;
            oscar = oscar.buttonContainer;
            mike['style'] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot18;
            oscar = {};
            oscar['variant'] = report;
            entity = undefined;
            oscar = options.bind(entity)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        record = context.bind(variable37)(record);
        control['children'] = record;
        control = vacuum.bind(tango)(sequence, control);
        echo[1] = control;
        offset['children'] = echo;
        offset = zulu.bind(tango)(romeo, offset);
        result[8] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        vacuum = _closure1_slot9;
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        control = echo.Stack;
        echo = {};
        record = verify.container;
        echo['style'] = record;
        target = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'heading-lg/bold', 'children': 'Overlay icon buttons'};
        record = target.bind(tango)(context, record);
        echo['children'] = record;
        control = vacuum.bind(tango)(control, echo);
        echo = new Array(2);
        echo[0] = control;
        vacuum = _closure1_slot9;
        control = {};
        context = papa.map;
        record = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot5;
            mike = {};
            golf = _closure2_slot0;
            options = golf.buttonContainer;
            oscar = new Array(2);
            oscar[0] = options;
            golf = golf.overlayButtonContainer;
            oscar[1] = golf;
            mike['style'] = oscar;
            options = _closure1_slot9;
            golf = _closure1_slot18;
            oscar = {};
            oscar['variant'] = report;
            entity = undefined;
            oscar = options.bind(entity)(golf, oscar);
            mike['children'] = oscar;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        record = context.bind(papa)(record);
        control['children'] = record;
        control = vacuum.bind(tango)(sequence, control);
        echo[1] = control;
        offset['children'] = echo;
        offset = zulu.bind(tango)(romeo, offset);
        result[9] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        romeo = offset.Stack;
        offset = {};
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        control = echo.Stack;
        echo = {};
        vacuum = verify.container;
        echo['style'] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'heading-lg/bold', 'children': 'Image buttons'};
        record = context.bind(tango)(record, vacuum);
        vacuum = new Array(2);
        vacuum[0] = record;
        papa = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': 'Image buttons are rereserved for more branded buttons, like social media sharing buttons.'};
        record = papa.bind(tango)(context, record);
        vacuum[1] = record;
        echo['children'] = vacuum;
        control = zulu.bind(tango)(control, echo);
        echo = new Array(2);
        echo[0] = control;
        control = {};
        record = _closure1_slot9;
        vacuum = {};
        papa = verify.buttonContainer;
        context = new Array(1);
        context[0] = papa;
        vacuum['style'] = context;
        papa = _closure1_slot9;
        equality = _closure1_slot19;
        context = {};
        whiskey = 25;
        target = backup[whiskey];
        target = foxtrot.bind(tango)(target);
        context['image'] = target;
        target = 'Telegram';
        context['label'] = target;
        context = papa.bind(tango)(equality, context);
        vacuum['children'] = context;
        record = record.bind(tango)(sequence, vacuum);
        vacuum = new Array(3);
        vacuum[0] = record;
        context = _closure1_slot9;
        record = {};
        target = verify.buttonContainer;
        papa = new Array(1);
        papa[0] = target;
        record['style'] = papa;
        target = _closure1_slot9;
        papa = {};
        variable39 = 26;
        sierra = backup[variable39];
        sierra = foxtrot.bind(tango)(sierra);
        papa['image'] = sierra;
        sierra = 'WhatsApp';
        papa['label'] = sierra;
        papa = target.bind(tango)(equality, papa);
        record['children'] = papa;
        record = context.bind(tango)(sequence, record);
        vacuum[1] = record;
        context = _closure1_slot9;
        record = {};
        target = verify.buttonContainer;
        papa = new Array(1);
        papa[0] = target;
        record['style'] = papa;
        target = _closure1_slot9;
        papa = {};
        quebec = 27;
        sierra = backup[quebec];
        sierra = foxtrot.bind(tango)(sierra);
        papa['image'] = sierra;
        sierra = 'Twitter';
        papa['label'] = sierra;
        papa = target.bind(tango)(equality, papa);
        record['children'] = papa;
        record = context.bind(tango)(sequence, record);
        vacuum[2] = record;
        control['children'] = vacuum;
        control = zulu.bind(tango)(sequence, control);
        echo[1] = control;
        offset['children'] = echo;
        offset = zulu.bind(tango)(romeo, offset);
        result[10] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        echo = offset.Stack;
        offset = {};
        offset['spacing'] = update;
        romeo = backup[source];
        romeo = golf.bind(tango)(romeo);
        control = romeo.Stack;
        romeo = {};
        vacuum = verify.container;
        romeo['style'] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'heading-lg/bold', 'children': 'IconButton with a label'};
        record = context.bind(tango)(record, vacuum);
        vacuum = new Array(3);
        vacuum[0] = record;
        papa = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': "Icon buttons with a label require a different combination of props and will only appear in the 'lg' size."};
        record = papa.bind(tango)(context, record);
        vacuum[1] = record;
        papa = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': 'It is highly recommended that a list of these buttons appear wrapped in a ScrollView, so that they will horizontally scroll when there are many buttons, when the text is longer through internationalization, or the text is larger through OS font size settings.'};
        record = papa.bind(tango)(context, record);
        vacuum[2] = record;
        romeo['children'] = vacuum;
        romeo = zulu.bind(tango)(control, romeo);
        control = new Array(3);
        control[0] = romeo;
        vacuum = _closure1_slot9;
        romeo = {};
        variable38 = true;
        romeo['horizontal'] = variable38;
        record = {};
        target = '100%';
        record['minWidth'] = target;
        romeo['contentContainerStyle'] = record;
        sierra = _closure1_slot9;
        record = backup[source];
        record = golf.bind(tango)(record);
        papa = record.Stack;
        context = {'direction': 'horizontal', 'justify': 'center'};
        record = 'horizontal';
        lima = verify.buttonContainer;
        context['style'] = lima;
        variable40 = variable36.map;
        lima = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot18;
            mike = {};
            mike['variant'] = report;
            entity = true;
            mike['showLabel'] = entity;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        lima = variable40.bind(variable36)(lima);
        context['children'] = lima;
        context = sierra.bind(tango)(papa, context);
        romeo['children'] = context;
        romeo = vacuum.bind(tango)(options, romeo);
        control[1] = romeo;
        context = _closure1_slot9;
        vacuum = {};
        vacuum['horizontal'] = variable38;
        romeo = {};
        romeo['minWidth'] = target;
        vacuum['contentContainerStyle'] = romeo;
        romeo = backup[source];
        romeo = golf.bind(tango)(romeo);
        sierra = romeo.Stack;
        papa = {'direction': 'horizontal', 'justify': 'center'};
        romeo = verify.buttonContainer;
        papa['style'] = romeo;
        variable42 = _closure1_slot9;
        variable40 = 8;
        romeo = backup[variable40];
        romeo = golf.bind(tango)(romeo);
        variable41 = romeo.IconButton;
        lima = {'variant': 'secondary', 'icon': null, 'label': 'Supercalifragilisticexpialidocious', 'grow': true};
        romeo = 9;
        variable43 = backup[romeo];
        variable43 = foxtrot.bind(tango)(variable43);
        lima['icon'] = variable43;
        variable43 = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        lima['onPress'] = variable43;
        variable41 = variable42.bind(tango)(variable41, lima);
        lima = new Array(3);
        lima[0] = variable41;
        variable43 = _closure1_slot9;
        variable41 = backup[variable40];
        variable41 = golf.bind(tango)(variable41);
        variable42 = variable41.IconButton;
        variable41 = {'variant': 'secondary', 'icon': null, 'label': 'Supercalifragilisticexpialidocious', 'grow': true};
        variable44 = backup[romeo];
        variable44 = foxtrot.bind(tango)(variable44);
        variable41['icon'] = variable44;
        variable44 = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        variable41['onPress'] = variable44;
        variable41 = variable43.bind(tango)(variable42, variable41);
        lima[1] = variable41;
        variable42 = _closure1_slot9;
        variable40 = backup[variable40];
        variable40 = golf.bind(tango)(variable40);
        variable41 = variable40.IconButton;
        variable40 = {'variant': 'secondary', 'icon': null, 'label': 'Supercalifragilisticexpialidocious', 'grow': true};
        variable43 = backup[romeo];
        variable43 = foxtrot.bind(tango)(variable43);
        variable40['icon'] = variable43;
        variable43 = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        variable40['onPress'] = variable43;
        variable40 = variable42.bind(tango)(variable41, variable40);
        lima[2] = variable40;
        papa['children'] = lima;
        papa = zulu.bind(tango)(sierra, papa);
        vacuum['children'] = papa;
        vacuum = context.bind(tango)(options, vacuum);
        control[2] = vacuum;
        offset['children'] = control;
        offset = zulu.bind(tango)(echo, offset);
        result[11] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        echo = offset.Stack;
        offset = {};
        offset['spacing'] = update;
        context = _closure1_slot9;
        control = backup[source];
        control = golf.bind(tango)(control);
        vacuum = control.Stack;
        control = {};
        papa = verify.container;
        control['style'] = papa;
        lima = _closure1_slot9;
        papa = backup[config];
        papa = golf.bind(tango)(papa);
        sierra = papa.Text;
        papa = {'variant': 'heading-lg/bold', 'children': 'ImageButton with a label'};
        papa = lima.bind(tango)(sierra, papa);
        control['children'] = papa;
        vacuum = context.bind(tango)(vacuum, control);
        control = new Array(3);
        control[0] = vacuum;
        context = _closure1_slot9;
        vacuum = {};
        vacuum['horizontal'] = variable38;
        papa = {};
        papa['minWidth'] = target;
        vacuum['contentContainerStyle'] = papa;
        papa = backup[source];
        papa = golf.bind(tango)(papa);
        sierra = papa.Stack;
        papa = {'direction': 'horizontal', 'justify': 'center'};
        lima = verify.buttonContainer;
        papa['style'] = lima;
        variable40 = _closure1_slot9;
        lima = {'image': null, 'label': 'Label', 'showLabel': true};
        variable41 = 28;
        variable41 = backup[variable41];
        variable41 = foxtrot.bind(tango)(variable41);
        lima['image'] = variable41;
        variable40 = variable40.bind(tango)(equality, lima);
        lima = new Array(3);
        lima[0] = variable40;
        variable41 = _closure1_slot9;
        variable40 = {'image': null, 'label': 'Label', 'showLabel': true};
        variable42 = backup[update];
        variable42 = foxtrot.bind(tango)(variable42);
        variable40['image'] = variable42;
        variable40 = variable41.bind(tango)(equality, variable40);
        lima[1] = variable40;
        variable41 = _closure1_slot9;
        variable40 = {'image': null, 'label': 'Label', 'showLabel': true};
        variable42 = 29;
        variable42 = backup[variable42];
        variable42 = foxtrot.bind(tango)(variable42);
        variable40['image'] = variable42;
        variable40 = variable41.bind(tango)(equality, variable40);
        lima[2] = variable40;
        papa['children'] = lima;
        papa = zulu.bind(tango)(sierra, papa);
        vacuum['children'] = papa;
        vacuum = context.bind(tango)(options, vacuum);
        control[1] = vacuum;
        context = _closure1_slot9;
        vacuum = {};
        vacuum['horizontal'] = variable38;
        papa = {};
        papa['minWidth'] = target;
        vacuum['contentContainerStyle'] = papa;
        papa = backup[source];
        papa = golf.bind(tango)(papa);
        target = papa.Stack;
        papa = {'direction': 'horizontal', 'justify': 'center'};
        sierra = verify.buttonContainer;
        papa['style'] = sierra;
        lima = _closure1_slot9;
        sierra = {'image': null, 'label': 'Supercalifragilisticexpialidocious', 'showLabel': true};
        whiskey = backup[whiskey];
        whiskey = foxtrot.bind(tango)(whiskey);
        sierra['image'] = whiskey;
        lima = lima.bind(tango)(equality, sierra);
        sierra = new Array(3);
        sierra[0] = lima;
        whiskey = _closure1_slot9;
        lima = {'image': null, 'label': 'Supercalifragilisticexpialidocious', 'showLabel': true};
        variable39 = backup[variable39];
        variable39 = foxtrot.bind(tango)(variable39);
        lima['image'] = variable39;
        lima = whiskey.bind(tango)(equality, lima);
        sierra[1] = lima;
        whiskey = _closure1_slot9;
        lima = {'image': null, 'label': 'Supercalifragilisticexpialidocious', 'showLabel': true};
        quebec = backup[quebec];
        quebec = foxtrot.bind(tango)(quebec);
        lima['image'] = quebec;
        lima = whiskey.bind(tango)(equality, lima);
        sierra[2] = lima;
        papa['children'] = sierra;
        papa = zulu.bind(tango)(target, papa);
        vacuum['children'] = papa;
        vacuum = context.bind(tango)(options, vacuum);
        control[2] = vacuum;
        offset['children'] = control;
        offset = zulu.bind(tango)(echo, offset);
        result[12] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        echo = offset.Stack;
        offset = {};
        offset['spacing'] = update;
        vacuum = _closure1_slot9;
        update = backup[source];
        update = golf.bind(tango)(update);
        control = update.Stack;
        update = {};
        context = verify.container;
        update['style'] = context;
        target = _closure1_slot9;
        context = backup[config];
        context = golf.bind(tango)(context);
        papa = context.Text;
        context = {'variant': 'heading-lg/bold', 'children': 'Mixing buttons'};
        context = target.bind(tango)(papa, context);
        update['children'] = context;
        control = vacuum.bind(tango)(control, update);
        update = new Array(2);
        update[0] = control;
        control = 30;
        control = backup[control];
        control = golf.bind(tango)(control);
        vacuum = control.ButtonGroup;
        control = {};
        control['direction'] = record;
        record = verify.container;
        control['style'] = record;
        papa = _closure1_slot9;
        context = _closure1_slot17;
        record = {'variant': 'secondary', 'text': 'Search', 'grow': true};
        context = papa.bind(tango)(context, record);
        record = new Array(2);
        record[0] = context;
        target = _closure1_slot9;
        papa = _closure1_slot18;
        context = {};
        context['variant'] = status;
        context = target.bind(tango)(papa, context);
        record[1] = context;
        control['children'] = record;
        control = zulu.bind(tango)(vacuum, control);
        update[1] = control;
        offset['children'] = update;
        offset = zulu.bind(tango)(echo, offset);
        result[13] = offset;
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        update = offset.Stack;
        echo = {};
        offset = backup[source];
        offset = golf.bind(tango)(offset);
        control = offset.Stack;
        offset = {};
        vacuum = verify.container;
        offset['style'] = vacuum;
        context = _closure1_slot9;
        vacuum = backup[config];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.Text;
        vacuum = {'variant': 'heading-lg/bold', 'children': 'Light Profile Themes'};
        record = context.bind(tango)(record, vacuum);
        vacuum = new Array(2);
        vacuum[0] = record;
        papa = _closure1_slot9;
        record = backup[config];
        record = golf.bind(tango)(record);
        context = record.Text;
        record = {'variant': 'text-sm/normal', 'children': 'All buttons as they appear on a light profile theme'};
        record = papa.bind(tango)(context, record);
        vacuum[1] = record;
        offset['children'] = vacuum;
        offset = zulu.bind(tango)(control, offset);
        control = new Array(2);
        control[0] = offset;
        papa = _closure1_slot9;
        vacuum = 31;
        offset = backup[vacuum];
        offset = golf.bind(tango)(offset);
        context = offset.ThemeContextProvider;
        record = {};
        offset = 'light';
        record['theme'] = offset;
        offset = 32;
        target = backup[offset];
        sierra = golf.bind(tango)(target);
        status = sierra.hex2int;
        target = '#ffae70';
        target = status.bind(sierra)(target);
        record['primaryColor'] = target;
        target = backup[offset];
        status = golf.bind(tango)(target);
        target = status.hex2int;
        whiskey = '#cc2300';
        target = target.bind(status)(whiskey);
        record['secondaryColor'] = target;
        variable39 = _closure1_slot9;
        target = 33;
        status = backup[target];
        sierra = foxtrot.bind(tango)(status);
        status = {};
        lima = {};
        equality = 16;
        lima['padding'] = equality;
        status['style'] = lima;
        quebec = 0;
        lima = {'x': 0, 'y': 0};
        status['start'] = lima;
        lima = {'x': 0, 'y': 1};
        status['end'] = lima;
        lima = ['#ffae70', '#cc2300'];
        status['colors'] = lima;
        variable42 = _closure1_slot9;
        lima = 34;
        variable40 = backup[lima];
        variable40 = golf.bind(tango)(variable40);
        variable41 = variable40.Card;
        variable40 = {};
        variable43 = backup[source];
        variable43 = golf.bind(tango)(variable43);
        variable44 = variable43.Stack;
        variable43 = {};
        variable43['spacing'] = equality;
        variable46 = variable36.map;
        variable45 = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        variable46 = variable46.bind(variable36)(variable45);
        variable45 = new Array(2);
        variable45[0] = variable46;
        variable47 = variable37.map;
        variable46 = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        variable46 = variable47.bind(variable37)(variable46);
        variable45[1] = variable46;
        variable43['children'] = variable45;
        variable43 = zulu.bind(tango)(variable44, variable43);
        variable40['children'] = variable43;
        variable40 = variable42.bind(tango)(variable41, variable40);
        status['children'] = variable40;
        status = variable39.bind(tango)(sierra, status);
        record['children'] = status;
        record = papa.bind(tango)(context, record);
        control[1] = record;
        echo['children'] = control;
        echo = zulu.bind(tango)(update, echo);
        result[14] = echo;
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        update = echo.Stack;
        echo = {};
        control = backup[source];
        control = golf.bind(tango)(control);
        record = control.Stack;
        control = {};
        context = verify.container;
        control['style'] = context;
        status = _closure1_slot9;
        context = backup[config];
        context = golf.bind(tango)(context);
        papa = context.Text;
        context = {'variant': 'heading-lg/bold', 'children': 'Dark Profile Themes'};
        papa = status.bind(tango)(papa, context);
        context = new Array(2);
        context[0] = papa;
        sierra = _closure1_slot9;
        papa = backup[config];
        papa = golf.bind(tango)(papa);
        status = papa.Text;
        papa = {'variant': 'text-sm/normal', 'children': 'All buttons as they appear on a dark profile theme'};
        papa = sierra.bind(tango)(status, papa);
        context[1] = papa;
        control['children'] = context;
        record = zulu.bind(tango)(record, control);
        control = new Array(2);
        control[0] = record;
        papa = _closure1_slot9;
        record = backup[vacuum];
        record = golf.bind(tango)(record);
        context = record.ThemeContextProvider;
        record = {};
        status = 'dark';
        record['theme'] = status;
        status = backup[offset];
        variable39 = golf.bind(tango)(status);
        sierra = variable39.hex2int;
        status = '#490000';
        status = sierra.bind(variable39)(status);
        record['primaryColor'] = status;
        status = backup[offset];
        sierra = golf.bind(tango)(status);
        status = sierra.hex2int;
        status = status.bind(sierra)(whiskey);
        record['secondaryColor'] = status;
        sierra = _closure1_slot9;
        target = backup[target];
        status = foxtrot.bind(tango)(target);
        target = {};
        whiskey = {};
        whiskey['padding'] = equality;
        target['style'] = whiskey;
        whiskey = {'x': 0, 'y': 0};
        target['start'] = whiskey;
        whiskey = {'x': 0, 'y': 1};
        target['end'] = whiskey;
        whiskey = ['#490000', '#cc2300'];
        target['colors'] = whiskey;
        variable39 = _closure1_slot9;
        lima = backup[lima];
        lima = golf.bind(tango)(lima);
        whiskey = lima.Card;
        lima = {};
        variable40 = backup[source];
        variable40 = golf.bind(tango)(variable40);
        variable41 = variable40.Stack;
        variable40 = {};
        variable40['spacing'] = equality;
        variable43 = variable36.map;
        variable42 = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        variable43 = variable43.bind(variable36)(variable42);
        variable42 = new Array(2);
        variable42[0] = variable43;
        variable44 = variable37.map;
        variable43 = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        variable43 = variable44.bind(variable37)(variable43);
        variable42[1] = variable43;
        variable40['children'] = variable42;
        variable40 = zulu.bind(tango)(variable41, variable40);
        lima['children'] = variable40;
        lima = variable39.bind(tango)(whiskey, lima);
        target['children'] = lima;
        target = sierra.bind(tango)(status, target);
        record['children'] = target;
        record = papa.bind(tango)(context, record);
        control[1] = record;
        echo['children'] = control;
        echo = zulu.bind(tango)(update, echo);
        result[15] = echo;
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        update = echo.Stack;
        echo = {};
        control = backup[source];
        control = golf.bind(tango)(control);
        record = control.Stack;
        control = {};
        context = verify.container;
        control['style'] = context;
        target = _closure1_slot9;
        context = backup[config];
        context = golf.bind(tango)(context);
        papa = context.Text;
        context = {'variant': 'heading-lg/bold', 'children': 'Light Client Theme'};
        papa = target.bind(tango)(papa, context);
        context = new Array(2);
        context[0] = papa;
        status = _closure1_slot9;
        papa = backup[config];
        papa = golf.bind(tango)(papa);
        target = papa.Text;
        papa = {'variant': 'text-sm/normal', 'children': 'All buttons as they appear on a light client theme'};
        papa = status.bind(tango)(target, papa);
        context[1] = papa;
        control['children'] = context;
        record = zulu.bind(tango)(record, control);
        control = new Array(2);
        control[0] = record;
        status = _closure1_slot9;
        record = backup[vacuum];
        record = golf.bind(tango)(record);
        context = record.ThemeContextProvider;
        record = {};
        variable40 = _closure1_slot7;
        papa = variable40[quebec];
        papa = papa.theme;
        record['theme'] = papa;
        papa = variable40[quebec];
        record['gradient'] = papa;
        papa = 35;
        target = backup[papa];
        lima = golf.bind(tango)(target);
        sierra = lima.setThemeFlag;
        target = backup[papa];
        target = golf.bind(tango)(target);
        target = target.ThemeContextFlags;
        target = target.MOBILE_LIGHT_GRADIENT_THEME_ENABLED;
        target = sierra.bind(lima)(quebec, target);
        record['flags'] = target;
        sierra = {};
        target = {'position': 'relative', 'padding': 16};
        sierra['style'] = target;
        variable39 = _closure1_slot9;
        target = 36;
        lima = backup[target];
        lima = golf.bind(tango)(lima);
        whiskey = lima.Gradient;
        lima = {};
        lima['absolute'] = variable38;
        variable40 = variable40[quebec];
        lima['gradient'] = variable40;
        whiskey = variable39.bind(tango)(whiskey, lima);
        lima = new Array(2);
        lima[0] = whiskey;
        variable41 = _closure1_slot9;
        variable40 = {};
        variable42 = {'backgroundColor': null, 'padding': 16, 'borderRadius': 16};
        whiskey = 37;
        variable39 = backup[whiskey];
        variable45 = golf.bind(tango)(variable39);
        variable44 = variable45.setColorOpacity;
        variable43 = 'white';
        variable39 = 0.7;
        variable43 = variable44.bind(variable45)(variable43, variable39);
        variable42['backgroundColor'] = variable43;
        variable40['style'] = variable42;
        variable42 = backup[source];
        variable42 = golf.bind(tango)(variable42);
        variable43 = variable42.Stack;
        variable42 = {};
        variable42['spacing'] = equality;
        variable45 = variable36.map;
        variable44 = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        variable45 = variable45.bind(variable36)(variable44);
        variable44 = new Array(2);
        variable44[0] = variable45;
        variable46 = variable37.map;
        variable45 = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        variable45 = variable46.bind(variable37)(variable45);
        variable44[1] = variable45;
        variable42['children'] = variable44;
        variable42 = zulu.bind(tango)(variable43, variable42);
        variable40['children'] = variable42;
        variable40 = variable41.bind(tango)(sequence, variable40);
        lima[1] = variable40;
        sierra['children'] = lima;
        sierra = zulu.bind(tango)(sequence, sierra);
        record['children'] = sierra;
        record = status.bind(tango)(context, record);
        control[1] = record;
        echo['children'] = control;
        echo = zulu.bind(tango)(update, echo);
        result[16] = echo;
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        update = echo.Stack;
        echo = {};
        control = backup[source];
        control = golf.bind(tango)(control);
        record = control.Stack;
        control = {};
        context = verify.container;
        control['style'] = context;
        sierra = _closure1_slot9;
        context = backup[config];
        context = golf.bind(tango)(context);
        status = context.Text;
        context = {'variant': 'heading-lg/bold', 'children': 'Dark Client Theme'};
        status = sierra.bind(tango)(status, context);
        context = new Array(2);
        context[0] = status;
        lima = _closure1_slot9;
        status = backup[config];
        status = golf.bind(tango)(status);
        sierra = status.Text;
        status = {'variant': 'text-sm/normal', 'children': 'All buttons as they appear on a dark client theme'};
        status = lima.bind(tango)(sierra, status);
        context[1] = status;
        control['children'] = context;
        record = zulu.bind(tango)(record, control);
        control = new Array(2);
        control[0] = record;
        context = _closure1_slot9;
        vacuum = backup[vacuum];
        vacuum = golf.bind(tango)(vacuum);
        record = vacuum.ThemeContextProvider;
        vacuum = {};
        lima = _closure1_slot8;
        status = lima[quebec];
        status = status.theme;
        vacuum['theme'] = status;
        status = lima[quebec];
        vacuum['gradient'] = status;
        status = backup[papa];
        sierra = golf.bind(tango)(status);
        status = sierra.setThemeFlag;
        papa = backup[papa];
        papa = golf.bind(tango)(papa);
        papa = papa.ThemeContextFlags;
        papa = papa.MOBILE_DARK_GRADIENT_THEME_ENABLED;
        papa = status.bind(sierra)(quebec, papa);
        vacuum['flags'] = papa;
        papa = {};
        status = {'position': 'relative', 'padding': 16};
        papa['style'] = status;
        sierra = _closure1_slot9;
        target = backup[target];
        target = golf.bind(tango)(target);
        status = target.Gradient;
        target = {};
        target['absolute'] = variable38;
        lima = lima[quebec];
        target['gradient'] = lima;
        status = sierra.bind(tango)(status, target);
        target = new Array(2);
        target[0] = status;
        sierra = _closure1_slot9;
        status = {};
        lima = {'backgroundColor': null, 'padding': 16, 'borderRadius': 16};
        whiskey = backup[whiskey];
        variable38 = golf.bind(tango)(whiskey);
        quebec = variable38.setColorOpacity;
        whiskey = 'black';
        whiskey = quebec.bind(variable38)(whiskey, variable39);
        lima['backgroundColor'] = whiskey;
        status['style'] = lima;
        lima = backup[source];
        lima = golf.bind(tango)(lima);
        whiskey = lima.Stack;
        lima = {};
        lima['spacing'] = equality;
        quebec = variable36.map;
        equality = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        quebec = quebec.bind(variable36)(equality);
        equality = new Array(2);
        equality[0] = quebec;
        variable36 = variable37.map;
        quebec = function(argFoo) {
            report = argFoo;
            tango = _closure1_slot9;
            zulu = _closure1_slot17;
            mike = {};
            mike['variant'] = report;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        quebec = variable36.bind(variable37)(quebec);
        equality[1] = quebec;
        lima['children'] = equality;
        lima = zulu.bind(tango)(whiskey, lima);
        status['children'] = lima;
        status = sierra.bind(tango)(sequence, status);
        target[1] = status;
        papa['children'] = target;
        papa = zulu.bind(tango)(sequence, papa);
        vacuum['children'] = papa;
        vacuum = context.bind(tango)(record, vacuum);
        control[1] = vacuum;
        echo['children'] = control;
        echo = zulu.bind(tango)(update, echo);
        result[17] = echo;
        echo = backup[source];
        echo = golf.bind(tango)(echo);
        update = echo.Stack;
        echo = {};
        source = backup[source];
        source = golf.bind(tango)(source);
        control = source.Stack;
        source = {};
        verify = verify.container;
        source['style'] = verify;
        context = _closure1_slot9;
        verify = backup[config];
        verify = golf.bind(tango)(verify);
        record = verify.Text;
        verify = 'Floating Action Button';
        vacuum = {'variant': 'heading-lg/bold', 'children': 'Floating Action Button'};
        record = context.bind(tango)(record, vacuum);
        vacuum = new Array(2);
        vacuum[0] = record;
        context = _closure1_slot9;
        config = backup[config];
        config = golf.bind(tango)(config);
        record = config.Text;
        config = {'variant': 'text-sm/normal', 'children': 'An ever-present icon button, giving the most important call to action in a compact way.'};
        config = context.bind(tango)(record, config);
        vacuum[1] = config;
        source['children'] = vacuum;
        control = zulu.bind(tango)(control, source);
        source = new Array(2);
        source[0] = control;
        vacuum = _closure1_slot9;
        control = {};
        config = {};
        record = 48;
        config['padding'] = record;
        control['style'] = config;
        control = vacuum.bind(tango)(sequence, control);
        source[1] = control;
        echo['children'] = source;
        echo = zulu.bind(tango)(update, echo);
        result[18] = echo;
        sizing['children'] = result;
        sizing = zulu.bind(tango)(output, sizing);
        report['children'] = sizing;
        options = kilo.bind(tango)(options, report);
        report = new Array(2);
        report[0] = options;
        options = _closure1_slot9;
        oscar = 38;
        oscar = backup[oscar];
        oscar = golf.bind(tango)(oscar);
        golf = oscar.FloatingActionButton;
        oscar = {};
        romeo = backup[romeo];
        romeo = foxtrot.bind(tango)(romeo);
        oscar['icon'] = romeo;
        yankee = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        oscar['onPress'] = yankee;
        oscar['positionBottom'] = offset;
        oscar['accessibilityLabel'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();