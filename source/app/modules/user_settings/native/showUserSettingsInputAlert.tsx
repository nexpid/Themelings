// app/modules/user_settings/native/showUserSettingsInputAlert.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot3 = tango;
    tango = 7;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/showUserSettingsInputAlert.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: showUserSettingsInputAlert
        zulu = argFoo;
        entity = zulu.onSubmit;
        var _closure2_slot0 = entity;
        entity = zulu.onSuccess;
        var _closure2_slot1 = entity;
        entity = zulu.onError;
        var _closure2_slot2 = entity;
        mike = {'onSubmit': 0, 'onSuccess': 0, 'onError': 0};
        golf = null;
        options = mike;
        entity = silentSetPrototypeOf(options, golf);
        options = {};
        golf = zulu;
        oscar = mike;
        entity = copyDataProperties(options, golf, oscar);
        var _closure2_slot3 = entity;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 2;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.openLazy;
        mike = {};
        report = function() { // Original name: importer
            zulu = _closure1_slot0;
            entity = _closure1_slot2;
            mike = 4;
            mike = entity[mike];
            tango = undefined;
            zulu = zulu.bind(tango)(mike);
            mike = 3;
            mike = entity[mike];
            entity = entity.paths;
            zulu = zulu.bind(tango)(mike, entity);
            mike = zulu.then;
            entity = function(argFoo) {
                mike = argFoo;
                mike = mike.default;
                var _closure4_slot0 = mike;
                entity = function(argFoo) {
                    _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                        tango = _closure1_slot3;
                        zulu = _closure4_slot0;
                        mike = {};
                        backup = argFoo;
                        kilo = mike;
                        entity = copyDataProperties(kilo, backup);
                        golf = _closure2_slot3;
                        kilo = mike;
                        backup = golf;
                        entity = copyDataProperties(kilo, backup);
                        yankee = _closure1_slot0;
                        romeo = _closure1_slot2;
                        options = 5;
                        verify = romeo[options];
                        entity = undefined;
                        verify = yankee.bind(entity)(verify);
                        foxtrot = verify.intl;
                        offset = foxtrot.string;
                        verify = romeo[options];
                        verify = yankee.bind(entity)(verify);
                        verify = verify.t;
                        verify = verify.ETE/oK;
                        offset = offset.bind(foxtrot)(verify);
                        verify = 'cancelText';
                        mike[verify] = offset;
                        verify = romeo[options];
                        verify = yankee.bind(entity)(verify);
                        offset = verify.intl;
                        verify = offset.string;
                        options = romeo[options];
                        options = yankee.bind(entity)(options);
                        options = options.t;
                        options = options.BddRzc;
                        verify = verify.bind(offset)(options);
                        options = 'confirmText';
                        mike[options] = verify;
                        options = golf.confirmColor;
                        golf = null;
                        if(!(golf == options)) { _fun00002_ip = 208; continue _fun00001 }
 174:
                        golf = _closure1_slot1;
                        options = _closure1_slot2;
                        oscar = 6;
                        oscar = options[oscar];
                        oscar = golf.bind(entity)(oscar);
                        oscar = oscar.Colors;
                        golf = oscar.RED;
                        _fun00002_ip = 218; continue _fun00001;
 208:
                        oscar = _closure2_slot3;
                        golf = oscar.confirmColor;
 218:
                        oscar = 'confirmColor';
                        mike[oscar] = golf;
                        golf = _closure2_slot0;
                        oscar = 'onSubmit';
                        mike[oscar] = golf;
                        golf = _closure2_slot1;
                        oscar = 'onSuccess';
                        mike[oscar] = golf;
                        oscar = _closure2_slot2;
                        report = 'onError';
                        mike[report] = oscar;
                        entity = tango.bind(entity)(zulu, mike);
                        return entity;
                    }
                };
                return entity;
            };
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        mike['importer'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();