// app/modules/user_settings/native/InfoBox.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, mike);
    entity = 0;
    report = golf[entity];
    mike = argCorge;
    entity = undefined;
    mike = mike.bind(entity)(report);
    yankee = 1;
    mike = golf[yankee];
    mike = oscar.bind(entity)(mike);
    report = mike.View;
    var _closure1_slot3 = report;
    mike = mike.Image;
    var _closure1_slot4 = mike;
    mike = 2;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot5 = report;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot6 = mike;
    mike = 3;
    mike = golf[mike];
    verify = oscar.bind(entity)(mike);
    options = verify.createStyles;
    mike = {};
    offset = {'borderRadius': null, 'padding': 8, 'borderStyle': 'solid', 'borderWidth': 1, 'borderColor': null, 'backgroundColor': null, 'flexDirection': 'row', 'alignItems': 'center'};
    romeo = 4;
    report = golf[romeo];
    report = foxtrot.bind(entity)(report);
    report = report.radii;
    report = report.xs;
    offset['borderRadius'] = report;
    report = 8;
    backup = golf[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.TEXT_LINK;
    offset['borderColor'] = backup;
    backup = golf[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.INFO_BOX_BACKGROUND;
    offset['backgroundColor'] = backup;
    mike['infoBox'] = offset;
    offset = {};
    backup = golf[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.INFO_WARNING_FOREGROUND;
    offset['borderColor'] = backup;
    backup = golf[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.INFO_WARNING_BACKGROUND;
    offset['backgroundColor'] = backup;
    mike['infoBoxWarning'] = offset;
    offset = {};
    backup = golf[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.TEXT_LINK;
    offset['tintColor'] = backup;
    offset['marginRight'] = report;
    mike['infoIcon'] = offset;
    offset = {};
    romeo = golf[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.INFO_WARNING_FOREGROUND;
    offset['tintColor'] = romeo;
    mike['infoIconWarning'] = offset;
    offset = {};
    offset['flex'] = yankee;
    mike['infoText'] = offset;
    mike = options.bind(verify)(mike);
    var _closure1_slot7 = mike;
    mike = {};
    options = 'info';
    mike['INFO'] = options;
    options = 'warning';
    mike['WARNING'] = options;
    var _closure1_slot8 = mike;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/user_settings/native/InfoBox.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: InfoBox
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            verify = entity.children;
            options = entity.style;
            foxtrot = entity.look;
            tango = undefined;
            if(!(foxtrot === tango)) { _fun00002_ip = 38; continue _fun00001 }
 25:
            entity = _closure1_slot8;
            foxtrot = entity.INFO;
 38:
            entity = _closure1_slot7;
            offset = entity.bind(tango)();
            golf = {};
            entity = _closure1_slot8;
            zulu = entity.INFO;
            report = offset.infoBox;
            mike = new Array(1);
            mike[0] = report;
            golf[zulu] = mike;
            zulu = entity.WARNING;
            report = offset.infoBox;
            mike = new Array(2);
            mike[0] = report;
            report = offset.infoBoxWarning;
            mike[1] = report;
            golf[zulu] = mike;
            backup = {};
            zulu = entity.INFO;
            report = offset.infoIcon;
            mike = new Array(1);
            mike[0] = report;
            backup[zulu] = mike;
            zulu = entity.WARNING;
            report = offset.infoIcon;
            mike = new Array(2);
            mike[0] = report;
            report = offset.infoIconWarning;
            mike[1] = report;
            backup[zulu] = mike;
            romeo = {};
            report = entity.INFO;
            zulu = _closure1_slot1;
            yankee = _closure1_slot2;
            mike = 5;
            mike = yankee[mike];
            mike = zulu.bind(tango)(mike);
            romeo[report] = mike;
            mike = entity.WARNING;
            entity = 6;
            entity = yankee[entity];
            entity = zulu.bind(tango)(entity);
            romeo[mike] = entity;
            zulu = _closure1_slot6;
            mike = _closure1_slot3;
            entity = {};
            report = new Array(1);
            report[0] = options;
            sizing = golf[foxtrot];
            kilo = 1;
            output = report;
            golf = arraySpread(output, sizing, kilo);
            entity['style'] = report;
            options = _closure1_slot5;
            golf = _closure1_slot4;
            report = {};
            backup = backup[foxtrot];
            report['style'] = backup;
            romeo = romeo[foxtrot];
            report['source'] = romeo;
            golf = options.bind(tango)(golf, report);
            report = new Array(2);
            report[0] = golf;
            golf = _closure1_slot0;
            oscar = 7;
            oscar = yankee[oscar];
            oscar = golf.bind(tango)(oscar);
            golf = oscar.Text;
            oscar = {};
            offset = offset.infoText;
            oscar['style'] = offset;
            offset = 'text-sm/semibold';
            oscar['variant'] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['InfoBoxLooks'] = mike;
    return entity;
})();