// app/modules/user_settings/native/mfa_modal_flow/TwoFASetupScan.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot2 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'flex': 1, 'alignItems': 'center', 'justifyContent': 'center'};
    tango['container'] = verify;
    verify = {'fontSize': 16, 'textAlign': 'center'};
    tango['totpFormLabel'] = verify;
    verify = {};
    offset = 4;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_BRAND;
    verify['color'] = offset;
    tango['copy'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 13;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/mfa_modal_flow/TwoFASetupScan.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: TwoFASetupScan
        _fun94543: for(var _fun94543_ip = 0; ; ) switch(_fun94543_ip) {
 0:
            mike = argFoo;
            source = mike.totpSecret;
            var _closure2_slot0 = source;
            mike = _closure1_slot6;
            tango = undefined;
            kilo = mike.bind(tango)();
            report = _closure1_slot3;
            zulu = report.useState;
            mike = false;
            oscar = zulu.bind(report)(mike);
            zulu = _closure1_slot2;
            mike = 2;
            zulu = zulu.bind(tango)(oscar, mike);
            mike = 0;
            foxtrot = zulu[mike];
            mike = 1;
            mike = zulu[mike];
            var _closure2_slot1 = mike;
            zulu = report.useCallback;
            mike = new Array(1);
            mike[0] = source;
            entity = function() {
                tango = _closure2_slot1;
                entity = undefined;
                zulu = true;
                zulu = tango.bind(entity)(zulu);
                tango = _closure1_slot0;
                report = _closure1_slot1;
                zulu = 5;
                zulu = report[zulu];
                tango = tango.bind(entity)(zulu);
                zulu = tango.copy;
                golf = _closure2_slot0;
                oscar = golf.replace;
                report = /[^a-zA-Z0-9]/g;
                mike = '';
                mike = oscar.bind(golf)(report, mike);
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            output = zulu.bind(report)(entity, mike);
            romeo = _closure1_slot0;
            sizing = _closure1_slot1;
            entity = 6;
            entity = sizing[entity];
            mike = romeo.bind(tango)(entity);
            entity = mike.useTwoFASetupStyles;
            update = entity.bind(mike)();
            zulu = _closure1_slot4;
            entity = 7;
            entity = sizing[entity];
            entity = romeo.bind(tango)(entity);
            mike = entity.TwoFASetupModalScreen;
            entity = {};
            golf = _closure1_slot5;
            report = 8;
            report = sizing[report];
            report = romeo.bind(tango)(report);
            oscar = report.SafeAreaPaddingView;
            report = {};
            options = true;
            report['bottom'] = options;
            options = kilo.container;
            report['style'] = options;
            yankee = 9;
            options = sizing[yankee];
            options = romeo.bind(tango)(options);
            verify = options.LegacyText;
            options = {};
            result = update.modalHeader;
            offset = new Array(2);
            offset[0] = result;
            result = update.text;
            offset[1] = result;
            options['style'] = offset;
            result = 10;
            offset = sizing[result];
            offset = romeo.bind(tango)(offset);
            control = offset.intl;
            echo = control.string;
            offset = sizing[result];
            offset = romeo.bind(tango)(offset);
            offset = offset.t;
            offset = offset.hg/+aW;
            offset = echo.bind(control)(offset);
            options['children'] = offset;
            verify = zulu.bind(tango)(verify, options);
            options = new Array(4);
            options[0] = verify;
            verify = sizing[yankee];
            verify = romeo.bind(tango)(verify);
            offset = verify.LegacyText;
            verify = {};
            control = update.modalBody;
            echo = new Array(2);
            echo[0] = control;
            update = update.text;
            echo[1] = update;
            verify['style'] = echo;
            echo = sizing[result];
            echo = romeo.bind(tango)(echo);
            control = echo.intl;
            update = control.string;
            echo = sizing[result];
            echo = romeo.bind(tango)(echo);
            echo = echo.t;
            echo = echo.UQR+Q0;
            echo = update.bind(control)(echo);
            verify['children'] = echo;
            verify = zulu.bind(tango)(offset, verify);
            options[1] = verify;
            echo = 11;
            verify = sizing[echo];
            verify = romeo.bind(tango)(verify);
            offset = verify.FormRow;
            verify = {};
            echo = sizing[echo];
            echo = romeo.bind(tango)(echo);
            echo = echo.FormRow;
            update = echo.Label;
            echo = {};
            control = kilo.totpFormLabel;
            echo['style'] = control;
            echo['text'] = source;
            echo = zulu.bind(tango)(update, echo);
            verify['label'] = echo;
            verify = zulu.bind(tango)(offset, verify);
            options[2] = verify;
            verify = 12;
            verify = sizing[verify];
            verify = romeo.bind(tango)(verify);
            offset = verify.PressableOpacity;
            verify = {};
            echo = 'button';
            verify['accessibilityRole'] = echo;
            verify['onPress'] = output;
            yankee = sizing[yankee];
            yankee = romeo.bind(tango)(yankee);
            romeo = yankee.LegacyText;
            yankee = {};
            kilo = kilo.copy;
            yankee['style'] = kilo;
            output = _closure1_slot0;
            backup = _closure1_slot1;
            kilo = backup[result];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = backup[result];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            if(foxtrot) { _fun94543_ip = 600; continue _fun94543 }
 587:
            foxtrot = backup.OpuAlJ;
            foxtrot = kilo.bind(sizing)(foxtrot);
            _fun94543_ip = 611; continue _fun94543;
 600:
            backup = backup.mGZ66O;
            foxtrot = kilo.bind(sizing)(backup);
 611:
            yankee['children'] = foxtrot;
            yankee = zulu.bind(tango)(romeo, yankee);
            verify['children'] = yankee;
            verify = zulu.bind(tango)(offset, verify);
            options[3] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();