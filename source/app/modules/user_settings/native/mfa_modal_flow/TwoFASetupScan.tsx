// app/modules/user_settings/native/mfa_modal_flow/TwoFASetupScan.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'flex': 1, 'alignItems': 'center', 'justifyContent': 'center'};
    tangon['container'] = verify;
    verify = {'fontSize': 16, 'textAlign': 'center'};
    tangon['totpFormLabel'] = verify;
    verify = {};
    offset = 4;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_BRAND;
    verify['color'] = offset;
    tangon['copy'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/mfa_modal_flow/TwoFASetupScan.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: TwoFASetupScan
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            source = michal.totpSecret;
            var _closure2_slot0 = source;
            michal = _closure1_slot6;
            tangon = undefined;
            kiloes = michal.bind(tangon)();
            report = _closure1_slot3;
            zuuluu = report.useState;
            michal = false;
            oscard = zuuluu.bind(report)(michal);
            zuuluu = _closure1_slot2;
            michal = 2;
            zuuluu = zuuluu.bind(tangon)(oscard, michal);
            michal = 0;
            foxtra = zuuluu[michal];
            michal = 1;
            michal = zuuluu[michal];
            var _closure2_slot1 = michal;
            zuuluu = report.useCallback;
            michal = new Array(1);
            michal[0] = source;
            entity = function() {
                tangon = _closure2_slot1;
                entity = undefined;
                zuuluu = true;
                zuuluu = tangon.bind(entity)(zuuluu);
                tangon = _closure1_slot0;
                report = _closure1_slot1;
                zuuluu = 5;
                zuuluu = report[zuuluu];
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = tangon.copy;
                golfie = _closure2_slot0;
                oscard = golfie.replace;
                report = /[^a-zA-Z0-9]/g;
                michal = '';
                michal = oscard.bind(golfie)(report, michal);
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            };
            output = zuuluu.bind(report)(entity, michal);
            romeon = _closure1_slot0;
            sizing = _closure1_slot1;
            entity = 6;
            entity = sizing[entity];
            michal = romeon.bind(tangon)(entity);
            entity = michal.useTwoFASetupStyles;
            update = entity.bind(michal)();
            zuuluu = _closure1_slot4;
            entity = 7;
            entity = sizing[entity];
            entity = romeon.bind(tangon)(entity);
            michal = entity.TwoFASetupModalScreen;
            entity = {};
            golfie = _closure1_slot5;
            report = 8;
            report = sizing[report];
            report = romeon.bind(tangon)(report);
            oscard = report.SafeAreaPaddingView;
            report = {};
            option = true;
            report['bottom'] = option;
            option = kiloes.container;
            report['style'] = option;
            yankee = 9;
            option = sizing[yankee];
            option = romeon.bind(tangon)(option);
            verify = option.LegacyText;
            option = {};
            result = update.modalHeader;
            offset = new Array(2);
            offset[0] = result;
            result = update.text;
            offset[1] = result;
            option['style'] = offset;
            result = 10;
            offset = sizing[result];
            offset = romeon.bind(tangon)(offset);
            ctrled = offset.intl;
            echoed = ctrled.string;
            offset = sizing[result];
            offset = romeon.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.hg/+aW;
            offset = echoed.bind(ctrled)(offset);
            option['children'] = offset;
            verify = zuuluu.bind(tangon)(verify, option);
            option = new Array(4);
            option[0] = verify;
            verify = sizing[yankee];
            verify = romeon.bind(tangon)(verify);
            offset = verify.LegacyText;
            verify = {};
            ctrled = update.modalBody;
            echoed = new Array(2);
            echoed[0] = ctrled;
            update = update.text;
            echoed[1] = update;
            verify['style'] = echoed;
            echoed = sizing[result];
            echoed = romeon.bind(tangon)(echoed);
            ctrled = echoed.intl;
            update = ctrled.string;
            echoed = sizing[result];
            echoed = romeon.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.UQR+Q0;
            echoed = update.bind(ctrled)(echoed);
            verify['children'] = echoed;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[1] = verify;
            echoed = 11;
            verify = sizing[echoed];
            verify = romeon.bind(tangon)(verify);
            offset = verify.FormRow;
            verify = {};
            echoed = sizing[echoed];
            echoed = romeon.bind(tangon)(echoed);
            echoed = echoed.FormRow;
            update = echoed.Label;
            echoed = {};
            ctrled = kiloes.totpFormLabel;
            echoed['style'] = ctrled;
            echoed['text'] = source;
            echoed = zuuluu.bind(tangon)(update, echoed);
            verify['label'] = echoed;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[2] = verify;
            verify = 12;
            verify = sizing[verify];
            verify = romeon.bind(tangon)(verify);
            offset = verify.PressableOpacity;
            verify = {};
            echoed = 'button';
            verify['accessibilityRole'] = echoed;
            verify['onPress'] = output;
            yankee = sizing[yankee];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.LegacyText;
            yankee = {};
            kiloes = kiloes.copy;
            yankee['style'] = kiloes;
            output = _closure1_slot0;
            backup = _closure1_slot1;
            kiloes = backup[result];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = backup[result];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            if(foxtra) { _fun00002_ip = 604; continue _fun00001 }
 591:
            foxtra = backup.OpuAlJ;
            foxtra = kiloes.bind(sizing)(foxtra);
            _fun00002_ip = 615; continue _fun00001;
 604:
            backup = backup.mGZ66O;
            foxtra = kiloes.bind(sizing)(backup);
 615:
            yankee['children'] = foxtra;
            yankee = zuuluu.bind(tangon)(romeon, yankee);
            verify['children'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[3] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();