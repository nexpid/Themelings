// app/modules/user_settings/native/mfa_modal_flow/TwoFASetupModalHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot0 = tangon;
    tangon = 2;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot1 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot2 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'flex': 1, 'alignItems': 'center', 'justifyContent': 'space-between', 'flexDirection': 'row'};
    tangon['pageMarkerContainer'] = offset;
    offset = {'width': 14, 'height': 14, 'borderRadius': 7, 'borderWidth': 1};
    yankee = 4;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_MOD_STRONG;
    offset['backgroundColor'] = foxtra;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BORDER_SUBTLE;
    offset['borderColor'] = foxtra;
    tangon['circleIcon'] = offset;
    offset = {'position': 'absolute', 'left': 0, 'right': 0, 'top': '50%', 'bottom': '50%', 'height': 1};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.DIVIDER_STRONG;
    offset['backgroundColor'] = foxtra;
    tangon['horizontalLine'] = offset;
    offset = {};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_BRAND;
    offset['backgroundColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    offset['borderColor'] = yankee;
    tangon['filledCircle'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot3 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        michal = argFoo;
        yankee = michal.numMarkers;
        michal = michal.currentPage;
        var _closure2_slot0 = michal;
        michal = _closure1_slot3;
        tangon = undefined;
        option = michal.bind(tangon)();
        var _closure2_slot1 = option;
        michal = global;
        michal = michal.Array;
        zuuluu = michal.bind(tangon)(yankee);
        michal = zuuluu.fill;
        zuuluu = michal.bind(zuuluu)(tangon);
        michal = zuuluu.map;
        entity = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                report = _closure1_slot1;
                tangon = _closure1_slot0;
                zuuluu = {};
                entity = _closure2_slot1;
                michal = entity.circleIcon;
                entity = new Array(2);
                entity[0] = michal;
                oscard = _closure2_slot0;
                michal = argBar;
                michal = michal + 1;
                oscard = oscard === michal;
                if(!oscard) { _fun00002_ip = 61; continue _fun00001 }
 51:
                golfie = _closure2_slot1;
                oscard = golfie.filledCircle;
 61:
                entity[1] = oscard;
                zuuluu['style'] = entity;
                entity = undefined;
                entity = report.bind(entity)(tangon, zuuluu, michal);
                return entity;
            }
        };
        oscard = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot2;
        michal = _closure1_slot0;
        entity = {};
        verify = option.pageMarkerContainer;
        golfie = new Array(2);
        golfie[0] = verify;
        verify = {};
        offset = 20;
        offset = offset * yankee;
        verify['width'] = offset;
        golfie[1] = verify;
        entity['style'] = golfie;
        golfie = _closure1_slot1;
        report = {};
        option = option.horizontalLine;
        report['style'] = option;
        golfie = golfie.bind(tangon)(michal, report);
        report = new Array(2);
        report[0] = golfie;
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 5;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/mfa_modal_flow/TwoFASetupModalHeader.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['PageMarker'] = michal;
    return entity;
})();