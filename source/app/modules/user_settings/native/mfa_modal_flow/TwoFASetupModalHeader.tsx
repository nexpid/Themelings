// app/modules/user_settings/native/mfa_modal_flow/TwoFASetupModalHeader.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot0 = tango;
    tango = 2;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot1 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot2 = tango;
    tango = 3;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'flex': 1, 'alignItems': 'center', 'justifyContent': 'space-between', 'flexDirection': 'row'};
    tango['pageMarkerContainer'] = offset;
    offset = {'width': 14, 'height': 14, 'borderRadius': 7, 'borderWidth': 1};
    yankee = 4;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_MOD_STRONG;
    offset['backgroundColor'] = foxtrot;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BORDER_SUBTLE;
    offset['borderColor'] = foxtrot;
    tango['circleIcon'] = offset;
    offset = {'position': 'absolute', 'left': 0, 'right': 0, 'top': '50%', 'bottom': '50%', 'height': 1};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.DIVIDER_STRONG;
    offset['backgroundColor'] = foxtrot;
    tango['horizontalLine'] = offset;
    offset = {};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.TEXT_BRAND;
    offset['backgroundColor'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    offset['borderColor'] = yankee;
    tango['filledCircle'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot3 = tango;
    tango = golf.memo;
    mike = function(argFoo) {
        mike = argFoo;
        yankee = mike.numMarkers;
        mike = mike.currentPage;
        var _closure2_slot0 = mike;
        mike = _closure1_slot3;
        tango = undefined;
        options = mike.bind(tango)();
        var _closure2_slot1 = options;
        mike = global;
        mike = mike.Array;
        zulu = mike.bind(tango)(yankee);
        mike = zulu.fill;
        zulu = mike.bind(zulu)(tango);
        mike = zulu.map;
        entity = function(argFoo, argBar) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                report = _closure1_slot1;
                tango = _closure1_slot0;
                zulu = {};
                entity = _closure2_slot1;
                mike = entity.circleIcon;
                entity = new Array(2);
                entity[0] = mike;
                oscar = _closure2_slot0;
                mike = argBar;
                mike = mike + 1;
                oscar = oscar === mike;
                if(!oscar) { _fun00002_ip = 61; continue _fun00001 }
 51:
                golf = _closure2_slot1;
                oscar = golf.filledCircle;
 61:
                entity[1] = oscar;
                zulu['style'] = entity;
                entity = undefined;
                entity = report.bind(entity)(tango, zulu, mike);
                return entity;
            }
        };
        oscar = mike.bind(zulu)(entity);
        zulu = _closure1_slot2;
        mike = _closure1_slot0;
        entity = {};
        verify = options.pageMarkerContainer;
        golf = new Array(2);
        golf[0] = verify;
        verify = {};
        offset = 20;
        offset = offset * yankee;
        verify['width'] = offset;
        golf[1] = verify;
        entity['style'] = golf;
        golf = _closure1_slot1;
        report = {};
        options = options.horizontalLine;
        report['style'] = options;
        golf = golf.bind(tango)(mike, report);
        report = new Array(2);
        report[0] = golf;
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = tango.bind(golf)(mike);
    tango = 5;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/mfa_modal_flow/TwoFASetupModalHeader.tsx';
    tango = report.bind(oscar)(tango);
    zulu['PageMarker'] = mike;
    return entity;
})();