// app/modules/user_settings/native/components/PaymentFlowTest.android.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: TestView
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot9;
            tangon = undefined;
            ctrled = entity.bind(tangon)();
            zuuluu = _closure1_slot4;
            michal = zuuluu.useState;
            entity = '1341506443580276736';
            michal = michal.bind(zuuluu)(entity);
            entity = _closure1_slot3;
            oscard = 2;
            entity = entity.bind(tangon)(michal, oscard);
            zuuluu = 0;
            backup = entity[zuuluu];
            var _closure2_slot0 = backup;
            michal = 1;
            entity = entity[michal];
            var _closure2_slot1 = entity;
            report = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 7;
            entity = golfie[entity];
            option = report.bind(tangon)(entity);
            golfie = option.useStateFromStores;
            entity = _closure1_slot6;
            report = new Array(1);
            report[0] = entity;
            entity = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            option = golfie.bind(option)(report, entity);
            golfie = _closure1_slot4;
            report = golfie.useState;
            sizing = null;
            verify = sizing == option;
            entity = undefined;
            if(verify) { _fun00002_ip = 144; continue _fun00001 }
 139:
            entity = option.id;
 144:
            report = report.bind(golfie)(entity);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, oscard);
            kiloes = entity[zuuluu];
            var _closure2_slot2 = kiloes;
            sequen = entity[michal];
            report = _closure1_slot4;
            entity = report.useState;
            report = entity.bind(report)(tangon);
            entity = _closure1_slot3;
            entity = entity.bind(tangon)(report, oscard);
            source = entity[zuuluu];
            var _closure2_slot3 = source;
            update = entity[michal];
            zuuluu = _closure1_slot8;
            yankee = _closure1_slot0;
            output = _closure1_slot2;
            entity = 8;
            entity = output[entity];
            entity = yankee.bind(tangon)(entity);
            michal = entity.Stack;
            entity = {};
            report = 16;
            entity['spacing'] = report;
            report = ctrled.container;
            entity['style'] = report;
            golfie = _closure1_slot7;
            verify = 9;
            report = output[verify];
            report = yankee.bind(tangon)(report);
            oscard = report.Text;
            report = {'variant': 'text-lg/bold', 'children': 'Android Payment Flow Test'};
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot8;
            oscard = 10;
            oscard = output[oscard];
            oscard = yankee.bind(tangon)(oscard);
            golfie = oscard.Card;
            oscard = {};
            result = _closure1_slot7;
            verify = output[verify];
            verify = yankee.bind(tangon)(verify);
            romeon = verify.Text;
            verify = {'style': null, 'variant': 'text-md/bold', 'children': 'Gift Purchase SKU'};
            echoed = ctrled.title;
            verify['style'] = echoed;
            romeon = result.bind(tangon)(romeon, verify);
            verify = new Array(5);
            verify[0] = romeon;
            vacuum = _closure1_slot7;
            romeon = 11;
            result = output[romeon];
            result = yankee.bind(tangon)(result);
            echoed = result.TextInput;
            result = {'containerStyle': null, 'label': 'SKU ID', 'value': null, 'placeholder': 'Default: 1341506443580276736 (Anime Shy)', 'onChange': null, 'isClearable': true};
            config = ctrled.textInput;
            result['containerStyle'] = config;
            result['value'] = backup;
            config = function(argFoo) { // Original name: onChange
                zuuluu = _closure2_slot1;
                michal = undefined;
                entity = argFoo;
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            result['onChange'] = config;
            result = vacuum.bind(tangon)(echoed, result);
            verify[1] = result;
            vacuum = _closure1_slot7;
            result = output[romeon];
            result = yankee.bind(tangon)(result);
            echoed = result.TextInput;
            result = {'containerStyle': null, 'label': 'Gift Recipient ID', 'value': null, 'placeholder': 'Recipient User ID', 'onChange': null, 'isClearable': true};
            config = ctrled.textInput;
            result['containerStyle'] = config;
            result['value'] = kiloes;
            result['onChange'] = sequen;
            result = vacuum.bind(tangon)(echoed, result);
            verify[2] = result;
            echoed = _closure1_slot7;
            romeon = output[romeon];
            romeon = yankee.bind(tangon)(romeon);
            result = romeon.TextInput;
            romeon = {'containerStyle': null, 'label': 'Gift Message (Optional)', 'value': null, 'placeholder': "Here's a gift for you!", 'onChange': null, 'isClearable': true};
            ctrled = ctrled.textInput;
            romeon['containerStyle'] = ctrled;
            romeon['value'] = source;
            romeon['onChange'] = update;
            romeon = echoed.bind(tangon)(result, romeon);
            verify[3] = romeon;
            romeon = _closure1_slot7;
            offset = 12;
            offset = output[offset];
            offset = yankee.bind(tangon)(offset);
            yankee = offset.Button;
            offset = {};
            backup = sizing === backup;
            if(backup) { _fun00002_ip = 631; continue _fun00001 }
 627:
            backup = sizing === kiloes;
 631:
            offset['disabled'] = backup;
            backup = 'Send Gift';
            offset['text'] = backup;
            foxtra = function() { // Original name: onPress
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot0;
                    tangon = null;
                    michal = tangon != michal;
                    if(!michal) { _fun00004_ip = 24; continue _fun00003 }
 16:
                    zuuluu = _closure2_slot2;
                    michal = tangon != zuuluu;
 24:
                    if(!michal) { _fun00004_ip = 81; continue _fun00003 }
 27:
                    zuuluu = _closure1_slot10;
                    michal = {};
                    tangon = _closure2_slot0;
                    michal['selectedSkuId'] = tangon;
                    tangon = 'giftSku';
                    michal['requestType'] = tangon;
                    tangon = _closure2_slot2;
                    michal['giftRecipientId'] = tangon;
                    entity = _closure2_slot3;
                    michal['giftMessage'] = entity;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
 81:
                    entity = undefined;
                    return entity;
                }
            };
            offset['onPress'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[4] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot11 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot4 = golfie;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot7 = option;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    yankee = 5;
    tangon = oscard[yankee];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    romeon = 6;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_PRIMARY;
    offset['backgroundColor'] = backup;
    tangon['wrap'] = offset;
    offset = {};
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    offset['padding'] = romeon;
    tangon['container'] = offset;
    offset = {};
    offset['height'] = yankee;
    tangon['divider'] = offset;
    offset = {};
    yankee = 'row';
    offset['flexDirection'] = yankee;
    tangon['buttonContainer'] = offset;
    offset = {'flex': 1, 'justifyContent': 'space-around'};
    tangon['button'] = offset;
    offset = {'marginRight': 5, 'marginVertical': 5};
    tangon['clearButton'] = offset;
    offset = {};
    yankee = '60%';
    offset['width'] = yankee;
    tangon['submitButton'] = offset;
    offset = {};
    yankee = 12;
    offset['width'] = yankee;
    tangon['spacer'] = offset;
    offset = {};
    yankee = 16;
    offset['marginBottom'] = yankee;
    tangon['textInput'] = offset;
    offset = {};
    yankee = 8;
    offset['marginBottom'] = yankee;
    tangon['title'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot9 = tangon;
    tangon = function(argFoo) { // Original name: openRequestActionSheet
        report = _closure1_slot1;
        michal = _closure1_slot2;
        tangon = 13;
        oscard = michal[tangon];
        entity = undefined;
        golfie = report.bind(entity)(oscard);
        oscard = golfie.hideActionSheet;
        oscard = oscard.bind(golfie)();
        tangon = michal[tangon];
        oscard = report.bind(entity)(tangon);
        report = oscard.openLazy;
        tangon = _closure1_slot0;
        zuuluu = 15;
        zuuluu = michal[zuuluu];
        tangon = tangon.bind(entity)(zuuluu);
        zuuluu = 14;
        zuuluu = michal[zuuluu];
        michal = michal.paths;
        tangon = tangon.bind(entity)(zuuluu, michal);
        zuuluu = 'SimpleRequestOTPActionSheet';
        michal = argFoo;
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    var _closure1_slot10 = tangon;
    tangon = golfie.memo;
    michal = function() { // Original name: PaymentFlowTest
        entity = _closure1_slot9;
        tangon = undefined;
        verify = entity.bind(tangon)();
        michal = _closure1_slot1;
        report = _closure1_slot2;
        entity = 16;
        entity = report[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        zuuluu = true;
        entity['includeKeyboardHeightIOS'] = zuuluu;
        entity = michal.bind(tangon)(entity);
        offset = entity.insets;
        zuuluu = _closure1_slot7;
        michal = _closure1_slot0;
        entity = 17;
        entity = report[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.NativePaymentContextProvider;
        entity = {};
        report = new Array(0);
        entity['skuIDs'] = report;
        report = null;
        entity['activeSubscription'] = report;
        golfie = _closure1_slot7;
        oscard = _closure1_slot5;
        report = {};
        verify = verify.wrap;
        report['style'] = verify;
        verify = {};
        yankee = offset.bottom;
        verify['paddingBottom'] = yankee;
        yankee = offset.top;
        verify['paddingTop'] = yankee;
        yankee = offset.left;
        verify['paddingLeft'] = yankee;
        offset = offset.right;
        verify['paddingRight'] = offset;
        report['contentContainerStyle'] = verify;
        offset = _closure1_slot7;
        verify = _closure1_slot11;
        option = {};
        option = offset.bind(tangon)(verify, option);
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/components/PaymentFlowTest.android.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();