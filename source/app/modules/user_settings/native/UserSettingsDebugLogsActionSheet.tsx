// app/modules/user_settings/native/UserSettingsDebugLogsActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: UserSettingsDebugLogsFiltersActionSheet
        entity = argFoo;
        romeon = entity.sortOrder;
        yankee = entity.onSortOrderChanged;
        sizing = entity.onRefresh;
        tangon = _closure1_slot4;
        result = _closure1_slot0;
        verify = _closure1_slot2;
        entity = 2;
        entity = verify[entity];
        zuuluu = undefined;
        entity = result.bind(zuuluu)(entity);
        michal = entity.ActionSheet;
        entity = {};
        option = _closure1_slot3;
        report = 3;
        report = verify[report];
        report = result.bind(zuuluu)(report);
        golfie = report.BottomSheetTitleHeader;
        report = {};
        kiloes = 4;
        offset = verify[kiloes];
        offset = result.bind(zuuluu)(offset);
        backup = offset.intl;
        foxtra = backup.string;
        offset = verify[kiloes];
        offset = result.bind(zuuluu)(offset);
        offset = offset.t;
        offset = offset.+B9e19;
        offset = foxtra.bind(backup)(offset);
        report['title'] = offset;
        report = option.bind(zuuluu)(golfie, report);
        entity['header'] = report;
        option = _closure1_slot3;
        report = 5;
        report = verify[report];
        report = result.bind(zuuluu)(report);
        golfie = report.TableRowGroup;
        report = {};
        backup = _closure1_slot3;
        offset = 6;
        offset = verify[offset];
        offset = result.bind(zuuluu)(offset);
        foxtra = offset.TableRow;
        offset = {};
        output = verify[kiloes];
        output = result.bind(zuuluu)(output);
        update = output.intl;
        echoed = update.string;
        output = verify[kiloes];
        output = result.bind(zuuluu)(output);
        output = output.t;
        output = output.wzzjk5;
        output = echoed.bind(update)(output);
        offset['label'] = output;
        offset['onPress'] = sizing;
        offset = backup.bind(zuuluu)(foxtra, offset);
        report['children'] = offset;
        golfie = option.bind(zuuluu)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        offset = _closure1_slot4;
        golfie = 7;
        golfie = verify[golfie];
        golfie = result.bind(zuuluu)(golfie);
        option = golfie.TableRadioGroup;
        golfie = {};
        foxtra = verify[kiloes];
        foxtra = result.bind(zuuluu)(foxtra);
        sizing = foxtra.intl;
        backup = sizing.string;
        foxtra = verify[kiloes];
        foxtra = result.bind(zuuluu)(foxtra);
        foxtra = foxtra.t;
        foxtra = foxtra.gePre3;
        foxtra = backup.bind(sizing)(foxtra);
        golfie['title'] = foxtra;
        golfie['defaultValue'] = romeon;
        golfie['onChange'] = yankee;
        backup = _closure1_slot3;
        romeon = 8;
        yankee = verify[romeon];
        yankee = result.bind(zuuluu)(yankee);
        foxtra = yankee.TableRadioRow;
        yankee = {};
        sizing = verify[kiloes];
        sizing = result.bind(zuuluu)(sizing);
        echoed = sizing.intl;
        output = echoed.string;
        sizing = verify[kiloes];
        sizing = result.bind(zuuluu)(sizing);
        sizing = sizing.t;
        sizing = sizing.eoXe0t;
        sizing = output.bind(echoed)(sizing);
        yankee['label'] = sizing;
        sizing = 'newest';
        yankee['value'] = sizing;
        foxtra = backup.bind(zuuluu)(foxtra, yankee);
        yankee = new Array(2);
        yankee[0] = foxtra;
        backup = _closure1_slot3;
        romeon = verify[romeon];
        romeon = result.bind(zuuluu)(romeon);
        foxtra = romeon.TableRadioRow;
        romeon = {};
        sizing = verify[kiloes];
        sizing = result.bind(zuuluu)(sizing);
        output = sizing.intl;
        sizing = output.string;
        kiloes = verify[kiloes];
        kiloes = result.bind(zuuluu)(kiloes);
        kiloes = kiloes.t;
        kiloes = kiloes.mmeWUF;
        kiloes = sizing.bind(output)(kiloes);
        romeon['label'] = kiloes;
        kiloes = 'oldest';
        romeon['value'] = kiloes;
        romeon = backup.bind(zuuluu)(foxtra, romeon);
        yankee[1] = romeon;
        golfie['children'] = yankee;
        golfie = offset.bind(zuuluu)(option, golfie);
        report[1] = golfie;
        option = _closure1_slot3;
        golfie = _closure1_slot1;
        oscard = 9;
        oscard = verify[oscard];
        golfie = golfie.bind(zuuluu)(oscard);
        oscard = {};
        verify = 0;
        oscard['size'] = verify;
        oscard = option.bind(zuuluu)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = tangon.bind(zuuluu)(michal, entity);
        return entity;
    };
    var _closure1_slot5 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot3 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot4 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/UserSettingsDebugLogsActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: openUserSettingsDebugLogsFiltersActionSheet
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 10;
        michal = michal[entity];
        entity = undefined;
        oscard = zuuluu.bind(entity)(michal);
        report = oscard.openLazy;
        michal = global;
        tangon = michal.Promise;
        zuuluu = tangon.resolve;
        michal = {};
        golfie = _closure1_slot5;
        michal['default'] = golfie;
        tangon = zuuluu.bind(tangon)(michal);
        zuuluu = 'UserSettingsDebugLogsFiltersActionSheet';
        michal = argFoo;
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    zuuluu['openUserSettingsDebugLogsFiltersActionSheet'] = michal;
    return entity;
})();