// app/modules/user_settings/native/UserSettingsAuthedAppDeleteWarningModal.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    tango = 0;
    golf = oscar[tango];
    entity = undefined;
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot3 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.Fragment;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 6;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/UserSettingsAuthedAppDeleteWarningModal.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: UserSettingsAuthedAppDeleteWarningModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.application;
            options = entity.onDelete;
            mike = _closure1_slot1;
            entity = _closure1_slot2;
            foxtrot = 1;
            entity = entity[foxtrot];
            tango = undefined;
            entity = mike.bind(tango)(entity);
            mike = entity.bind(tango)(offset);
            zulu = _closure1_slot0;
            entity = _closure1_slot2;
            kilo = 2;
            oscar = entity[kilo];
            oscar = zulu.bind(tango)(oscar);
            golf = oscar.intl;
            if(mike) { _fun00002_ip = 104; continue _fun00001 }
 72:
            verify = golf.string;
            oscar = entity[kilo];
            oscar = zulu.bind(tango)(oscar);
            oscar = oscar.t;
            oscar = oscar.DT39Aw;
            yankee = verify.bind(golf)(oscar);
            _fun00002_ip = 149; continue _fun00001;
 104:
            oscar = golf.formatToPlainString;
            entity = entity[kilo];
            entity = zulu.bind(tango)(entity);
            entity = entity.t;
            zulu = entity.paC+UV;
            entity = {};
            verify = offset.name;
            entity['applicationName'] = verify;
            yankee = oscar.bind(golf)(zulu, entity);
 149:
            golf = _closure1_slot0;
            entity = _closure1_slot2;
            zulu = entity[kilo];
            zulu = golf.bind(tango)(zulu);
            oscar = zulu.intl;
            zulu = oscar.formatToPlainString;
            entity = entity[kilo];
            entity = golf.bind(tango)(entity);
            entity = entity.t;
            if(mike) { _fun00002_ip = 221; continue _fun00001 }
 193:
            golf = entity.QWGvxM;
            mike = {};
            verify = offset.name;
            mike['applicationName'] = verify;
            golf = zulu.bind(oscar)(golf, mike);
            _fun00002_ip = 247; continue _fun00001;
 221:
            mike = entity.inM1Ym;
            entity = {};
            verify = offset.name;
            entity['applicationName'] = verify;
            golf = zulu.bind(oscar)(mike, entity);
 247:
            zulu = _closure1_slot5;
            mike = _closure1_slot4;
            entity = {};
            verify = _closure1_slot1;
            romeo = _closure1_slot2;
            oscar = 3;
            oscar = romeo[oscar];
            verify = verify.bind(tango)(oscar);
            oscar = offset.id;
            verify = verify.bind(tango)(oscar);
            if(!verify) { _fun00002_ip = 389; continue _fun00001 }
 290:
            backup = _closure1_slot3;
            romeo = _closure1_slot1;
            sizing = _closure1_slot2;
            oscar = 4;
            oscar = sizing[oscar];
            romeo = romeo.bind(tango)(oscar);
            oscar = {};
            output = _closure1_slot0;
            result = sizing[kilo];
            result = output.bind(tango)(result);
            echo = result.intl;
            result = echo.format;
            sizing = sizing[kilo];
            sizing = output.bind(tango)(sizing);
            sizing = sizing.t;
            output = sizing.KRnERk;
            sizing = {};
            update = offset.name;
            sizing['applicationName'] = update;
            sizing = result.bind(echo)(output, sizing);
            oscar['children'] = sizing;
            verify = backup.bind(tango)(romeo, oscar);
 389:
            oscar = new Array(2);
            oscar[0] = verify;
            romeo = _closure1_slot1;
            verify = _closure1_slot2;
            verify = verify[foxtrot];
            verify = romeo.bind(tango)(verify);
            verify = verify.bind(tango)(offset);
            if(!verify) { _fun00002_ip = 534; continue _fun00001 }
 422:
            foxtrot = _closure1_slot3;
            romeo = _closure1_slot1;
            backup = _closure1_slot2;
            sizing = 4;
            offset = backup[sizing];
            romeo = romeo.bind(tango)(offset);
            offset = {};
            result = _closure1_slot0;
            sizing = backup[sizing];
            sizing = result.bind(tango)(sizing);
            sizing = sizing.InfoBoxLooks;
            sizing = sizing.WARNING;
            offset['look'] = sizing;
            sizing = backup[kilo];
            sizing = result.bind(tango)(sizing);
            output = sizing.intl;
            sizing = output.string;
            backup = backup[kilo];
            backup = result.bind(tango)(backup);
            backup = backup.t;
            backup = backup.LY35Z2;
            backup = sizing.bind(output)(backup);
            offset['children'] = backup;
            verify = foxtrot.bind(tango)(romeo, offset);
 534:
            oscar[1] = verify;
            entity['children'] = oscar;
            oscar = zulu.bind(tango)(mike, entity);
            zulu = _closure1_slot3;
            backup = _closure1_slot0;
            verify = _closure1_slot2;
            offset = 5;
            entity = verify[offset];
            entity = backup.bind(tango)(entity);
            mike = entity.AlertModal;
            entity = {};
            entity['title'] = yankee;
            entity['content'] = golf;
            entity['extraContent'] = oscar;
            golf = _closure1_slot5;
            oscar = _closure1_slot4;
            report = {};
            yankee = verify[offset];
            yankee = backup.bind(tango)(yankee);
            romeo = yankee.AlertActionButton;
            yankee = {};
            foxtrot = 'destructive';
            yankee['variant'] = foxtrot;
            foxtrot = verify[kilo];
            foxtrot = backup.bind(tango)(foxtrot);
            output = foxtrot.intl;
            sizing = output.string;
            foxtrot = verify[kilo];
            foxtrot = backup.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.xUqheH;
            foxtrot = sizing.bind(output)(foxtrot);
            yankee['text'] = foxtrot;
            yankee['onPress'] = options;
            options = 'confirm';
            yankee = zulu.bind(tango)(romeo, yankee, options);
            options = new Array(2);
            options[0] = yankee;
            offset = verify[offset];
            offset = backup.bind(tango)(offset);
            yankee = offset.AlertActionButton;
            offset = {};
            romeo = 'secondary';
            offset['variant'] = romeo;
            romeo = verify[kilo];
            romeo = backup.bind(tango)(romeo);
            foxtrot = romeo.intl;
            romeo = foxtrot.string;
            verify = verify[kilo];
            verify = backup.bind(tango)(verify);
            verify = verify.t;
            verify = verify.ETE/oK;
            verify = romeo.bind(foxtrot)(verify);
            offset['text'] = verify;
            verify = 'cancel';
            verify = zulu.bind(tango)(yankee, offset, verify);
            options[1] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['actions'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();