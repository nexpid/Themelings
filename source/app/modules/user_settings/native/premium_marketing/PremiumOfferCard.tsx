// app/modules/user_settings/native/premium_marketing/PremiumOfferCard.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.PremiumTypes;
    var _closure1_slot7 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'dipslay': 'flex', 'flexDirection': 'column', 'justifyContent': 'flex-start'};
    offset = 7;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['padding'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.lg;
    verify['borderRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_24;
    verify['marginBottom'] = romeon;
    tangon['card'] = verify;
    verify = {'alignSelf': 'center', 'marginBottom': null, 'width': 319, 'height': 146};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_24;
    verify['marginBottom'] = romeon;
    tangon['image'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['marginVertical'] = offset;
    offset = 'uppercase';
    verify['textTransform'] = offset;
    tangon['countdown'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 23;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/premium_marketing/PremiumOfferCard.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            oscard = entity.style;
            entity = _closure1_slot10;
            report = undefined;
            output = entity.bind(report)();
            golfie = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 8;
            michal = zuuluu[entity];
            verify = golfie.bind(report)(michal);
            option = verify.useStateFromStores;
            michal = _closure1_slot6;
            tangon = new Array(1);
            tangon[0] = michal;
            michal = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            tangon = option.bind(verify)(tangon, michal);
            michal = _closure1_slot1;
            option = 9;
            option = zuuluu[option];
            option = michal.bind(report)(option);
            option = option.bind(report)();
            option = option.analyticsLocations;
            var _closure2_slot0 = option;
            entity = zuuluu[entity];
            verify = golfie.bind(report)(entity);
            option = verify.useStateFromStores;
            entity = _closure1_slot5;
            golfie = new Array(1);
            golfie[0] = entity;
            entity = function() {
                entity = _closure1_slot5;
                entity = entity.useReducedMotion;
                return entity;
            };
            sizing = option.bind(verify)(golfie, entity);
            entity = 10;
            entity = zuuluu[entity];
            zuuluu = michal.bind(report)(entity);
            michal = zuuluu.isPremiumExactly;
            entity = _closure1_slot7;
            entity = entity.TIER_1;
            foxtra = michal.bind(zuuluu)(tangon, entity);
            tangon = _closure1_slot3;
            zuuluu = tangon.useMemo;
            michal = function() {
                entity = global;
                zuuluu = entity.Date;
                tangon = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 11;
                michal = michal[entity];
                entity = undefined;
                entity = tangon.bind(entity)(michal);
                report = entity.Q1_2025_MARKETING_END_DATE;
                michal = zuuluu.prototype;
                michal = Object.create(michal, {constructor: {value: zuuluu}});
                oscard = michal;
                entity = new oscard[zuuluu](report, tangon);
                entity = entity instanceof Object ? entity : michal;
                return entity;
            };
            entity = new Array(0);
            update = zuuluu.bind(tangon)(michal, entity);
            entity = update.getTime;
            michal = entity.bind(update)();
            entity = global;
            zuuluu = entity.Date;
            entity = zuuluu.now;
            entity = entity.bind(zuuluu)();
            michal = michal < entity;
            entity = null;
            if(michal) { _fun00002_ip = 995; continue _fun00001 }
 241:
            tangon = _closure1_slot8;
            zuuluu = _closure1_slot4;
            michal = {};
            michal['style'] = oscard;
            golfie = _closure1_slot9;
            oscard = {};
            verify = output.card;
            option = new Array(1);
            option[0] = verify;
            oscard['style'] = option;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            option = 12;
            option = offset[option];
            verify = verify.bind(report)(option);
            option = verify.isAndroid;
            option = option.bind(verify)();
            if(!option) { _fun00002_ip = 374; continue _fun00001 }
 311:
            if(sizing) { _fun00002_ip = 374; continue _fun00001 }
 314:
            offset = _closure1_slot8;
            kiloes = _closure1_slot1;
            result = _closure1_slot2;
            option = 13;
            option = result[option];
            verify = kiloes.bind(report)(option);
            option = {};
            yankee = 14;
            yankee = result[yankee];
            yankee = kiloes.bind(report)(yankee);
            option['url'] = yankee;
            yankee = output.image;
            option['style'] = yankee;
            verify = offset.bind(report)(verify, option);
            _fun00002_ip = 454; continue _fun00001;
 374:
            yankee = _closure1_slot8;
            result = _closure1_slot1;
            offset = _closure1_slot2;
            option = 15;
            option = offset[option];
            offset = result.bind(report)(option);
            option = {};
            kiloes = {};
            source = _closure1_slot2;
            if(sizing) { _fun00002_ip = 418; continue _fun00001 }
 409:
            sizing = 14;
            sizing = source[sizing];
            _fun00002_ip = 425; continue _fun00001;
 418:
            echoed = 16;
            sizing = source[echoed];
 425:
            sizing = result.bind(report)(sizing);
            kiloes['uri'] = sizing;
            option['source'] = kiloes;
            kiloes = output.image;
            option['style'] = kiloes;
            verify = yankee.bind(report)(offset, option);
 454:
            option = new Array(5);
            option[0] = verify;
            yankee = _closure1_slot8;
            offset = _closure1_slot0;
            kiloes = _closure1_slot2;
            verify = 17;
            sizing = kiloes[verify];
            sizing = offset.bind(report)(sizing);
            result = sizing.Text;
            sizing = {'color': 'header-primary', 'variant': 'heading-xl/bold'};
            echoed = 18;
            source = kiloes[echoed];
            source = offset.bind(report)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = kiloes[echoed];
            source = offset.bind(report)(source);
            source = source.t;
            source = source.QziR6+;
            source = ctrled.bind(vacuum)(source);
            sizing['children'] = source;
            sizing = yankee.bind(report)(result, sizing);
            option[1] = sizing;
            verify = kiloes[verify];
            verify = offset.bind(report)(verify);
            sizing = verify.Text;
            verify = {'color': 'header-primary', 'variant': 'text-sm/bold'};
            output = output.countdown;
            verify['style'] = output;
            result = _closure1_slot1;
            output = 19;
            output = kiloes[output];
            result = result.bind(report)(output);
            output = {};
            output['endDate'] = update;
            output = yankee.bind(report)(result, output);
            verify['children'] = output;
            verify = yankee.bind(report)(sizing, verify);
            option[2] = verify;
            verify = 20;
            verify = kiloes[verify];
            verify = offset.bind(report)(verify);
            offset = verify.TextWithIOSLinkWorkaround;
            verify = {'color': 'header-primary', 'variant': 'text-sm/medium'};
            source = _closure1_slot0;
            ctrled = _closure1_slot2;
            kiloes = ctrled[echoed];
            kiloes = source.bind(report)(kiloes);
            result = kiloes.intl;
            output = result.format;
            kiloes = ctrled[echoed];
            kiloes = source.bind(report)(kiloes);
            kiloes = kiloes.t;
            if(foxtra) { _fun00002_ip = 762; continue _fun00001 }
 723:
            sizing = kiloes.DVBfMD;
            foxtra = {};
            update = 11;
            update = ctrled[update];
            update = source.bind(report)(update);
            update = update.Q1_2025_MARKETING_SUPPORT_URL;
            foxtra['termsLink'] = update;
            foxtra = output.bind(result)(sizing, foxtra);
            _fun00002_ip = 799; continue _fun00001;
 762:
            sizing = kiloes.KCvBj4;
            kiloes = {};
            update = 11;
            update = ctrled[update];
            update = source.bind(report)(update);
            update = update.Q1_2025_MARKETING_SUPPORT_URL;
            kiloes['termsLink'] = update;
            foxtra = output.bind(result)(sizing, kiloes);
 799:
            verify['children'] = foxtra;
            verify = yankee.bind(report)(offset, verify);
            option[3] = verify;
            yankee = _closure1_slot8;
            offset = _closure1_slot4;
            verify = {};
            foxtra = {};
            output = _closure1_slot1;
            kiloes = _closure1_slot2;
            sizing = 7;
            sizing = kiloes[sizing];
            sizing = output.bind(report)(sizing);
            sizing = sizing.spacing;
            sizing = sizing.PX_24;
            foxtra['marginTop'] = sizing;
            verify['style'] = foxtra;
            result = _closure1_slot0;
            romeon = 21;
            romeon = kiloes[romeon];
            romeon = result.bind(report)(romeon);
            foxtra = romeon.Button;
            romeon = {};
            sizing = kiloes[echoed];
            sizing = result.bind(report)(sizing);
            output = sizing.intl;
            sizing = output.string;
            kiloes = kiloes[echoed];
            kiloes = result.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.Ic9qLC;
            kiloes = sizing.bind(output)(kiloes);
            romeon['text'] = kiloes;
            kiloes = 'primary';
            romeon['variant'] = kiloes;
            backup = function() { // Original name: onPress
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 22;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.openPaymentModal;
                entity = {};
                tangon = _closure2_slot0;
                entity['analyticsLocations'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            romeon['onPress'] = backup;
            romeon = yankee.bind(report)(foxtra, romeon);
            verify['children'] = romeon;
            verify = yankee.bind(report)(offset, verify);
            option[4] = verify;
            oscard['children'] = option;
            oscard = golfie.bind(report)(zuuluu, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 995:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();