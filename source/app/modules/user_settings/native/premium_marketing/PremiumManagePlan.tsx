// app/modules/user_settings/native/premium_marketing/PremiumManagePlan.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    backup = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = backup;
    var _closure1_slot2 = golfie;
    entity = function() { // Original name: ManagePlanHeader
        entity = _closure1_slot23;
        tangon = undefined;
        verify = entity.bind(tangon)();
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        entity = 14;
        entity = kiloes[entity];
        michal = backup.bind(tangon)(entity);
        entity = michal.useNavigation;
        entity = entity.bind(michal)();
        var _closure2_slot0 = entity;
        zuuluu = _closure1_slot21;
        michal = _closure1_slot7;
        entity = {};
        report = verify.headerContainer;
        entity['style'] = report;
        option = _closure1_slot20;
        report = 15;
        report = kiloes[report];
        report = backup.bind(tangon)(report);
        golfie = report.PressableOpacity;
        report = {};
        yankee = verify.backButtonWrapper;
        report['style'] = yankee;
        offset = function() { // Original name: onPress
            michal = _closure2_slot0;
            entity = michal.pop;
            entity = entity.bind(michal)();
            return entity;
        };
        report['onPress'] = offset;
        romeon = _closure1_slot20;
        offset = 16;
        offset = kiloes[offset];
        offset = backup.bind(tangon)(offset);
        yankee = offset.ArrowLargeLeftIcon;
        offset = {};
        foxtra = 'md';
        offset['size'] = foxtra;
        offset = romeon.bind(tangon)(yankee, offset);
        report['children'] = offset;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        offset = _closure1_slot20;
        golfie = 17;
        golfie = kiloes[golfie];
        golfie = backup.bind(tangon)(golfie);
        option = golfie.Text;
        golfie = {};
        yankee = 'redesign/heading-18/bold';
        golfie['variant'] = yankee;
        yankee = 18;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.1bX7T0;
        yankee = romeon.bind(foxtra)(yankee);
        golfie['children'] = yankee;
        golfie = offset.bind(tangon)(option, golfie);
        report[1] = golfie;
        option = _closure1_slot20;
        golfie = _closure1_slot7;
        oscard = {};
        verify = verify.backButtonWrapper;
        oscard['style'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot25 = entity;
    entity = function(argFoo) { // Original name: SubscriptionAndBillingInfo
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            source = entity.subscription;
            var _closure2_slot0 = source;
            michal = entity.fractionalPremiumInfo;
            report = undefined;
            var _closure2_slot2 = report;
            entity = _closure1_slot24;
            backup = entity.bind(report)();
            verify = _closure1_slot1;
            tangon = _closure1_slot2;
            entity = 21;
            entity = tangon[entity];
            entity = verify.bind(report)(entity);
            entity = entity.bind(report)();
            option = entity.analyticsLocations;
            var _closure2_slot1 = option;
            zuuluu = _closure1_slot0;
            entity = 22;
            entity = tangon[entity];
            golfie = zuuluu.bind(report)(entity);
            oscard = golfie.useSubscriptionInvoicePreview;
            entity = {'subscriptionId': null, 'renewal': true, 'applyEntitlements': true};
            offset = source.id;
            entity['subscriptionId'] = offset;
            offset = true;
            entity['analyticsLocations'] = option;
            option = 23;
            option = tangon[option];
            option = verify.bind(report)(option);
            option = option.PREMIUM_SUBSCRIPTION_DETAILS;
            entity['analyticsLocation'] = option;
            golfie = oscard.bind(golfie)(entity);
            oscard = _closure1_slot3;
            entity = 1;
            oscard = oscard.bind(report)(golfie, entity);
            entity = 0;
            record = oscard[entity];
            entity = 24;
            oscard = tangon[entity];
            verify = zuuluu.bind(report)(oscard);
            option = verify.useStateFromStores;
            oscard = _closure1_slot12;
            golfie = new Array(1);
            golfie[0] = oscard;
            oscard = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot0;
                    michal = michal.isOnPlatformMatchingExternalPaymentGateway;
                    zuuluu = null;
                    if(michal) { _fun00004_ip = 20; continue _fun00003 }
 18:
                    return zuuluu;
 20:
                    michal = _closure2_slot0;
                    michal = michal.paymentGatewayPlanId;
                    if(!(zuuluu != michal)) { _fun00004_ip = 82; continue _fun00003 }
 34:
                    michal = _closure2_slot0;
                    zuuluu = michal.paymentGatewayPlanId;
                    michal = '';
                    if(!(michal !== zuuluu)) { _fun00004_ip = 82; continue _fun00003 }
 52:
                    zuuluu = _closure1_slot12;
                    michal = zuuluu.getProduct;
                    entity = _closure2_slot0;
                    entity = entity.paymentGatewayPlanId;
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
 82:
                    entity = global;
                    zuuluu = entity.Error;
                    entity = zuuluu.prototype;
                    michal = Object.create(entity, {constructor: {value: zuuluu}});
                    tangon = 'Subscription missing plan ID';
                    report = michal;
                    entity = new report[zuuluu](tangon, zuuluu);
                    entity = entity instanceof Object ? entity : michal;
                    throw entity;
                }
            };
            yankee = option.bind(verify)(golfie, oscard);
            entity = tangon[entity];
            oscard = zuuluu.bind(report)(entity);
            tangon = oscard.useStateFromStores;
            entity = _closure1_slot10;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            entity = function() {
                michal = _closure1_slot10;
                entity = michal.getPremiumTypeSubscription;
                entity = entity.bind(michal)();
                return entity;
            };
            zuuluu = tangon.bind(oscard)(zuuluu, entity);
            entity = null;
            romeon = entity !== zuuluu;
            if(!romeon) { _fun00002_ip = 269; continue _fun00001 }
 263:
            romeon = zuuluu.hasActiveTrial;
 269:
            tangon = _closure1_slot0;
            golfie = _closure1_slot2;
            zuuluu = 14;
            zuuluu = golfie[zuuluu];
            oscard = tangon.bind(report)(zuuluu);
            zuuluu = oscard.useNavigation;
            zuuluu = zuuluu.bind(oscard)();
            _closure2_slot2 = zuuluu;
            zuuluu = 25;
            zuuluu = golfie[zuuluu];
            oscard = tangon.bind(report)(zuuluu);
            zuuluu = oscard.useThemeContext;
            zuuluu = zuuluu.bind(oscard)();
            oscard = zuuluu.theme;
            zuuluu = 26;
            zuuluu = golfie[zuuluu];
            tangon = tangon.bind(report)(zuuluu);
            zuuluu = tangon.isThemeLight;
            cntext = zuuluu.bind(tangon)(oscard);
            if(!(entity != record)) { _fun00002_ip = 3486; continue _fun00001 }
 360:
            oscard = _closure1_slot1;
            zuuluu = _closure1_slot2;
            sequen = 27;
            tangon = zuuluu[sequen];
            golfie = oscard.bind(report)(tangon);
            tangon = golfie.getPlanIdFromInvoice;
            option = tangon.bind(golfie)(source, record);
            tangon = zuuluu[sequen];
            golfie = oscard.bind(report)(tangon);
            tangon = golfie.getStatusFromInvoice;
            tangon = tangon.bind(golfie)(source, record);
            golfie = _closure1_slot19;
            verify = golfie[option];
            golfie = 28;
            golfie = zuuluu[golfie];
            kiloes = oscard.bind(report)(golfie);
            foxtra = entity != verify;
            golfie = 'missing subscription planInfo';
            golfie = kiloes.bind(report)(foxtra, golfie);
            zuuluu = zuuluu[sequen];
            golfie = oscard.bind(report)(zuuluu);
            oscard = golfie.getPlanDescription;
            zuuluu = {};
            zuuluu['subscription'] = source;
            zuuluu['planId'] = option;
            foxtra = entity != yankee;
            option = null;
            if(!foxtra) { _fun00002_ip = 536; continue _fun00001 }
 485:
            kiloes = _closure1_slot0;
            output = _closure1_slot2;
            foxtra = 29;
            foxtra = output[foxtra];
            output = kiloes.bind(report)(foxtra);
            kiloes = output.formatRate;
            foxtra = yankee.priceString;
            yankee = verify.interval;
            verify = verify.intervalCount;
            option = kiloes.bind(output)(foxtra, yankee, verify);
 536:
            zuuluu['price'] = option;
            zuuluu['includePremiumGuilds'] = offset;
            result = oscard.bind(golfie)(zuuluu);
            oscard = _closure1_slot0;
            golfie = _closure1_slot2;
            zuuluu = 30;
            zuuluu = golfie[zuuluu];
            oscard = oscard.bind(report)(zuuluu);
            zuuluu = oscard.getExternalManagementMessage;
            echoed = zuuluu.bind(oscard)(source);
            zuuluu = _closure1_slot14;
            zuuluu = zuuluu.CANCELED;
            if(!(tangon !== zuuluu)) { _fun00002_ip = 2536; continue _fun00001 }
 599:
            zuuluu = _closure1_slot14;
            zuuluu = zuuluu.PAUSE_PENDING;
            if(!(tangon !== zuuluu)) { _fun00002_ip = 2536; continue _fun00001 }
 616:
            zuuluu = _closure1_slot14;
            zuuluu = zuuluu.PAST_DUE;
            if(!(tangon !== zuuluu)) { _fun00002_ip = 2536; continue _fun00001 }
 633:
            zuuluu = source.renewalMutations;
            if(!(entity == zuuluu)) { _fun00002_ip = 1682; continue _fun00001 }
 646:
            oscard = _closure1_slot21;
            tangon = _closure1_slot7;
            zuuluu = {};
            golfie = backup.container;
            zuuluu['style'] = golfie;
            verify = _closure1_slot21;
            option = _closure1_slot7;
            golfie = {};
            yankee = backup.pillAndCardContainer;
            golfie['style'] = yankee;
            if(!romeon) { _fun00002_ip = 761; continue _fun00001 }
 688:
            kiloes = _closure1_slot20;
            foxtra = _closure1_slot7;
            yankee = {};
            output = backup.pillPosition;
            yankee['style'] = output;
            vacuum = _closure1_slot20;
            update = _closure1_slot0;
            config = _closure1_slot2;
            output = 41;
            output = config[output];
            output = update.bind(report)(output);
            update = output.PremiumReferralTrialPill;
            output = {};
            output['hideLeftSparkle'] = offset;
            output = vacuum.bind(report)(update, output);
            yankee['children'] = output;
            romeon = kiloes.bind(report)(foxtra, yankee);
 761:
            yankee = new Array(2);
            yankee[0] = romeon;
            kiloes = _closure1_slot20;
            foxtra = _closure1_slot1;
            target = _closure1_slot2;
            romeon = 40;
            romeon = target[romeon];
            foxtra = foxtra.bind(report)(romeon);
            romeon = {};
            output = _closure1_slot18;
            output = output.TIER_2;
            romeon['premiumType'] = output;
            update = michal.fractionalState;
            output = _closure1_slot16;
            output = output.NONE;
            output = update !== output;
            romeon['forFractionalPremium'] = output;
            romeon['hideButton'] = offset;
            romeon = kiloes.bind(report)(foxtra, romeon);
            yankee[1] = romeon;
            golfie['children'] = yankee;
            option = verify.bind(report)(option, golfie);
            golfie = new Array(2);
            golfie[0] = option;
            yankee = _closure1_slot21;
            verify = _closure1_slot7;
            option = {};
            romeon = backup.extraInfoContainer;
            option['style'] = romeon;
            kiloes = _closure1_slot20;
            config = _closure1_slot0;
            vacuum = 17;
            romeon = target[vacuum];
            romeon = config.bind(report)(romeon);
            foxtra = romeon.Text;
            romeon = {'variant': 'eyebrow', 'color': 'header-secondary'};
            sierra = 18;
            output = target[sierra];
            output = config.bind(report)(output);
            papara = output.intl;
            update = papara.string;
            output = target[sierra];
            output = config.bind(report)(output);
            output = output.t;
            output = output.YCrcPD;
            output = update.bind(papara)(output);
            romeon['children'] = output;
            foxtra = kiloes.bind(report)(foxtra, romeon);
            romeon = new Array(4);
            romeon[0] = foxtra;
            output = _closure1_slot21;
            kiloes = _closure1_slot7;
            foxtra = {};
            update = backup.extraInfoTextContainer;
            foxtra['style'] = update;
            papara = _closure1_slot20;
            update = 42;
            update = target[update];
            update = config.bind(report)(update);
            config = update.TextWithIOSLinkWorkaround;
            update = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            if(!(entity == echoed)) { _fun00002_ip = 1137; continue _fun00001 }
 1052:
            status = _closure1_slot0;
            target = _closure1_slot2;
            limora = target[sierra];
            limora = status.bind(report)(limora);
            whisks = limora.intl;
            limora = whisks.format;
            target = target[sierra];
            target = status.bind(report)(target);
            target = target.t;
            status = target.fvk30t;
            target = {};
            equals = function() { // Original name: onSwitchPlans
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 37;
                michal = michal[entity];
                entity = undefined;
                report = zuuluu.bind(entity)(michal);
                tangon = report.handleManageSubscription;
                zuuluu = _closure2_slot0;
                michal = _closure2_slot2;
                entity = _closure2_slot1;
                entity = tangon.bind(report)(zuuluu, michal, entity);
                return entity;
            };
            target['onSwitchPlans'] = equals;
            equals = function() { // Original name: onCancel
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 37;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.onCancelClick;
                michal = _closure2_slot0;
                entity = _closure2_slot1;
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            target['onCancel'] = equals;
            target = limora.bind(whisks)(status, target);
            _fun00002_ip = 1189; continue _fun00001;
 1137:
            equals = _closure1_slot0;
            status = _closure1_slot2;
            limora = status[sierra];
            limora = equals.bind(report)(limora);
            whisks = limora.intl;
            limora = whisks.string;
            status = status[sierra];
            status = equals.bind(report)(status);
            status = status.t;
            status = status.MTG+3N;
            target = limora.bind(whisks)(status);
 1189:
            update['children'] = target;
            config = papara.bind(report)(config, update);
            update = new Array(3);
            update[0] = config;
            target = _closure1_slot20;
            papara = _closure1_slot0;
            status = _closure1_slot2;
            config = 38;
            config = status[config];
            config = papara.bind(report)(config);
            papara = config.GoogleManagementLink;
            config = {};
            config['subscription'] = source;
            config = target.bind(report)(papara, config);
            update[1] = config;
            config = entity != echoed;
            if(!config) { _fun00002_ip = 1311; continue _fun00001 }
 1261:
            status = _closure1_slot20;
            target = _closure1_slot0;
            papara = _closure1_slot2;
            papara = papara[vacuum];
            papara = target.bind(report)(papara);
            target = papara.Text;
            papara = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            papara['children'] = echoed;
            config = status.bind(report)(target, papara);
 1311:
            update[2] = config;
            foxtra['children'] = update;
            foxtra = output.bind(report)(kiloes, foxtra);
            romeon[1] = foxtra;
            output = _closure1_slot20;
            status = _closure1_slot0;
            target = _closure1_slot2;
            foxtra = target[vacuum];
            foxtra = status.bind(report)(foxtra);
            kiloes = foxtra.Text;
            foxtra = {'variant': 'eyebrow', 'color': 'header-secondary'};
            update = target[sierra];
            update = status.bind(report)(update);
            papara = update.intl;
            config = papara.string;
            update = target[sierra];
            update = status.bind(report)(update);
            update = update.t;
            update = update.Sb6wIy;
            update = config.bind(papara)(update);
            foxtra['children'] = update;
            foxtra = output.bind(report)(kiloes, foxtra);
            romeon[2] = foxtra;
            output = _closure1_slot21;
            kiloes = _closure1_slot7;
            foxtra = {};
            config = backup.extraInfoTextContainer;
            update = new Array(2);
            update[0] = config;
            config = {};
            papara = 4;
            config['gap'] = papara;
            update[1] = config;
            foxtra['style'] = update;
            papara = _closure1_slot20;
            update = target[vacuum];
            update = status.bind(report)(update);
            config = update.Text;
            update = {'variant': 'text-md/semibold', 'color': 'text-normal'};
            limora = target[sierra];
            limora = status.bind(report)(limora);
            whisks = limora.intl;
            limora = whisks.string;
            sierra = target[sierra];
            sierra = status.bind(report)(sierra);
            sierra = sierra.t;
            sierra = sierra.KXQjfX;
            sierra = limora.bind(whisks)(sierra);
            update['children'] = sierra;
            config = papara.bind(report)(config, update);
            update = new Array(2);
            update[0] = config;
            papara = _closure1_slot20;
            vacuum = target[vacuum];
            vacuum = status.bind(report)(vacuum);
            config = vacuum.Text;
            vacuum = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            target = target[sequen];
            sierra = status.bind(report)(target);
            status = sierra.getBillingInformationString;
            variable36 = false;
            variable39 = sierra;
            variable38 = source;
            variable37 = record;
            quebec = michal;
            target = variable39[status](variable38, variable37, variable36, quebec, equals);
            vacuum['children'] = target;
            vacuum = papara.bind(report)(config, vacuum);
            update[1] = vacuum;
            foxtra['children'] = update;
            foxtra = output.bind(report)(kiloes, foxtra);
            romeon[3] = foxtra;
            option['children'] = romeon;
            option = yankee.bind(report)(verify, option);
            golfie[1] = option;
            zuuluu['children'] = golfie;
            zuuluu = oscard.bind(report)(tangon, zuuluu);
            return zuuluu;
 1682:
            zuuluu = global;
            oscard = zuuluu.Date;
            variable38 = source.currentPeriodEnd;
            tangon = oscard.prototype;
            tangon = Object.create(tangon, {constructor: {value: oscard}});
            variable39 = tangon;
            zuuluu = new variable39[oscard](variable38, variable37);
            oscard = zuuluu instanceof Object ? zuuluu : tangon;
            zuuluu = source.isPurchasedExternally;
            target = oscard;
            if(zuuluu) { _fun00002_ip = 1763; continue _fun00001 }
 1728:
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot2;
            zuuluu = zuuluu[sequen];
            tangon = tangon.bind(report)(zuuluu);
            zuuluu = tangon.extendDateWithUnconsumedFractionalPremium;
            michal = michal.unactivatedUnits;
            target = zuuluu.bind(tangon)(oscard, michal);
 1763:
            tangon = _closure1_slot21;
            zuuluu = _closure1_slot7;
            michal = {};
            oscard = backup.container;
            michal['style'] = oscard;
            option = _closure1_slot21;
            golfie = _closure1_slot7;
            oscard = {};
            verify = backup.mutationWarningContainer;
            oscard['style'] = verify;
            romeon = _closure1_slot20;
            output = _closure1_slot0;
            kiloes = _closure1_slot2;
            verify = 39;
            verify = kiloes[verify];
            verify = output.bind(report)(verify);
            yankee = verify.AnnouncementsWarningIcon;
            verify = {};
            foxtra = 'md';
            verify['size'] = foxtra;
            yankee = romeon.bind(report)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            foxtra = _closure1_slot20;
            papara = 17;
            yankee = kiloes[papara];
            yankee = output.bind(report)(yankee);
            romeon = yankee.Text;
            yankee = {'style': null, 'variant': 'heading-sm/medium', 'color': 'text-normal'};
            update = backup.mutationText;
            yankee['style'] = update;
            vacuum = 18;
            update = kiloes[vacuum];
            update = output.bind(report)(update);
            config = update.intl;
            update = config.format;
            kiloes = kiloes[vacuum];
            kiloes = output.bind(report)(kiloes);
            kiloes = kiloes.t;
            output = kiloes.ar1cPj;
            kiloes = {};
            status = source.hasExternalPlanChange;
            if(status) { _fun00002_ip = 1998; continue _fun00001 }
 1956:
            sierra = _closure1_slot1;
            status = _closure1_slot2;
            status = status[sequen];
            limora = sierra.bind(report)(status);
            sierra = limora.getDisplayName;
            status = source.renewalMutations;
            status = status.planId;
            status = sierra.bind(limora)(status);
            _fun00002_ip = 2032; continue _fun00001;
 1998:
            limora = _closure1_slot0;
            sierra = _closure1_slot2;
            sierra = sierra[sequen];
            whisks = limora.bind(report)(sierra);
            limora = whisks.getExternalPlanDisplayName;
            sierra = source.renewalMutations;
            status = limora.bind(whisks)(sierra);
 2032:
            kiloes['planName'] = status;
            kiloes['date'] = target;
            kiloes = update.bind(config)(output, kiloes);
            yankee['children'] = kiloes;
            yankee = foxtra.bind(report)(romeon, yankee);
            verify[1] = yankee;
            oscard['children'] = verify;
            golfie = option.bind(report)(golfie, oscard);
            oscard = new Array(3);
            oscard[0] = golfie;
            verify = _closure1_slot20;
            option = _closure1_slot1;
            config = _closure1_slot2;
            golfie = 40;
            golfie = config[golfie];
            option = option.bind(report)(golfie);
            golfie = {};
            yankee = _closure1_slot18;
            yankee = yankee.TIER_2;
            golfie['premiumType'] = yankee;
            golfie['hideButton'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            verify = _closure1_slot21;
            option = _closure1_slot7;
            golfie = {};
            offset = backup.extraInfoContainer;
            golfie['style'] = offset;
            romeon = _closure1_slot20;
            target = _closure1_slot0;
            offset = config[papara];
            offset = target.bind(report)(offset);
            yankee = offset.Text;
            offset = {'variant': 'eyebrow', 'color': 'header-secondary'};
            foxtra = config[vacuum];
            foxtra = target.bind(report)(foxtra);
            output = foxtra.intl;
            kiloes = output.string;
            foxtra = config[vacuum];
            foxtra = target.bind(report)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.YCrcPD;
            foxtra = kiloes.bind(output)(foxtra);
            offset['children'] = foxtra;
            yankee = romeon.bind(report)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            foxtra = _closure1_slot21;
            romeon = _closure1_slot7;
            yankee = {};
            kiloes = backup.extraInfoTextContainer;
            yankee['style'] = kiloes;
            update = _closure1_slot20;
            kiloes = config[papara];
            kiloes = target.bind(report)(kiloes);
            output = kiloes.Text;
            kiloes = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            status = config[vacuum];
            status = target.bind(report)(status);
            sierra = status.intl;
            status = sierra.string;
            vacuum = config[vacuum];
            vacuum = target.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.MTG+3N;
            vacuum = status.bind(sierra)(vacuum);
            kiloes['children'] = vacuum;
            output = update.bind(report)(output, kiloes);
            kiloes = new Array(3);
            kiloes[0] = output;
            vacuum = _closure1_slot20;
            output = config[papara];
            output = target.bind(report)(output);
            update = output.Text;
            output = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            config = config[sequen];
            target = target.bind(report)(config);
            config = target.getBillingInformationString;
            config = config.bind(target)(source, record);
            output['children'] = config;
            output = vacuum.bind(report)(update, output);
            kiloes[1] = output;
            output = entity != echoed;
            if(!output) { _fun00002_ip = 2492; continue _fun00001 }
 2442:
            config = _closure1_slot20;
            vacuum = _closure1_slot0;
            update = _closure1_slot2;
            update = update[papara];
            update = vacuum.bind(report)(update);
            vacuum = update.Text;
            update = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            update['children'] = echoed;
            output = config.bind(report)(vacuum, update);
 2492:
            kiloes[2] = output;
            yankee['children'] = kiloes;
            yankee = foxtra.bind(report)(romeon, yankee);
            offset[1] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[2] = golfie;
            michal['children'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 2536:
            tangon = _closure1_slot21;
            zuuluu = _closure1_slot7;
            michal = {};
            oscard = backup.container;
            michal['style'] = oscard;
            option = _closure1_slot21;
            golfie = _closure1_slot7;
            oscard = {};
            verify = backup.errorHeader;
            oscard['style'] = verify;
            yankee = _closure1_slot21;
            offset = _closure1_slot6;
            verify = {};
            foxtra = _closure1_slot1;
            output = _closure1_slot2;
            if(cntext) { _fun00002_ip = 2605; continue _fun00001 }
 2596:
            romeon = 32;
            romeon = output[romeon];
            _fun00002_ip = 2612; continue _fun00001;
 2605:
            kiloes = 31;
            romeon = output[kiloes];
 2612:
            romeon = foxtra.bind(report)(romeon);
            verify['source'] = romeon;
            romeon = backup.headerBackground;
            verify['style'] = romeon;
            kiloes = _closure1_slot21;
            foxtra = _closure1_slot7;
            romeon = {};
            output = backup.logoContainer;
            romeon['style'] = output;
            vacuum = _closure1_slot20;
            update = _closure1_slot5;
            output = {};
            papara = _closure1_slot1;
            target = _closure1_slot2;
            config = 33;
            config = target[config];
            config = papara.bind(report)(config);
            output['source'] = config;
            config = backup.wumpusImg;
            output['style'] = config;
            update = vacuum.bind(report)(update, output);
            output = new Array(2);
            output[0] = update;
            config = _closure1_slot20;
            vacuum = _closure1_slot5;
            update = {};
            status = _closure1_slot2;
            if(cntext) { _fun00002_ip = 2735; continue _fun00001 }
 2726:
            cntext = 35;
            cntext = status[cntext];
            _fun00002_ip = 2742; continue _fun00001;
 2735:
            target = 34;
            cntext = status[target];
 2742:
            cntext = papara.bind(report)(cntext);
            update['source'] = cntext;
            cntext = backup.logoStyle;
            update['style'] = cntext;
            update = config.bind(report)(vacuum, update);
            output[1] = update;
            romeon['children'] = output;
            foxtra = kiloes.bind(report)(foxtra, romeon);
            romeon = new Array(2);
            romeon[0] = foxtra;
            output = _closure1_slot20;
            kiloes = _closure1_slot0;
            foxtra = _closure1_slot2;
            update = 17;
            foxtra = foxtra[update];
            foxtra = kiloes.bind(report)(foxtra);
            kiloes = foxtra.Text;
            foxtra = {'variant': 'heading-sm/medium', 'color': 'text-normal'};
            foxtra['children'] = result;
            foxtra = output.bind(report)(kiloes, foxtra);
            romeon[1] = foxtra;
            verify['children'] = romeon;
            offset = yankee.bind(report)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = source.isOnPlatformMatchingExternalPaymentGateway;
            if(!offset) { _fun00002_ip = 3018; continue _fun00001 }
 2876:
            foxtra = _closure1_slot20;
            romeon = _closure1_slot7;
            yankee = {};
            kiloes = backup.errorHeaderPrimaryButton;
            yankee['style'] = kiloes;
            result = _closure1_slot20;
            papara = _closure1_slot0;
            target = _closure1_slot2;
            kiloes = 36;
            kiloes = target[kiloes];
            kiloes = papara.bind(report)(kiloes);
            output = kiloes.Button;
            kiloes = {'size': 'sm', 'variant': 'secondary'};
            vacuum = 18;
            config = target[vacuum];
            config = papara.bind(report)(config);
            cntext = config.intl;
            config = cntext.string;
            vacuum = target[vacuum];
            vacuum = papara.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.lTCb0d;
            vacuum = config.bind(cntext)(vacuum);
            kiloes['text'] = vacuum;
            ctrled = function() { // Original name: onPress
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 37;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.onResubscribeClick;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            kiloes['onPress'] = ctrled;
            kiloes = result.bind(report)(output, kiloes);
            yankee['children'] = kiloes;
            offset = foxtra.bind(report)(romeon, yankee);
 3018:
            verify[1] = offset;
            oscard['children'] = verify;
            golfie = option.bind(report)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            verify = _closure1_slot21;
            option = _closure1_slot7;
            golfie = {};
            offset = backup.extraInfoContainer;
            golfie['style'] = offset;
            romeon = _closure1_slot20;
            output = _closure1_slot0;
            ctrled = _closure1_slot2;
            offset = ctrled[update];
            offset = output.bind(report)(offset);
            yankee = offset.Text;
            offset = {'variant': 'eyebrow', 'color': 'header-secondary'};
            vacuum = 18;
            foxtra = ctrled[vacuum];
            foxtra = output.bind(report)(foxtra);
            result = foxtra.intl;
            kiloes = result.string;
            foxtra = ctrled[vacuum];
            foxtra = output.bind(report)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.YCrcPD;
            foxtra = kiloes.bind(result)(foxtra);
            offset['children'] = foxtra;
            yankee = romeon.bind(report)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            foxtra = _closure1_slot21;
            romeon = _closure1_slot7;
            yankee = {};
            backup = backup.extraInfoTextContainer;
            yankee['style'] = backup;
            result = _closure1_slot20;
            backup = ctrled[update];
            backup = output.bind(report)(backup);
            kiloes = backup.Text;
            backup = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            config = ctrled[vacuum];
            config = output.bind(report)(config);
            cntext = config.intl;
            config = cntext.string;
            vacuum = ctrled[vacuum];
            vacuum = output.bind(report)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.MTG+3N;
            vacuum = config.bind(cntext)(vacuum);
            backup['children'] = vacuum;
            kiloes = result.bind(report)(kiloes, backup);
            backup = new Array(4);
            backup[0] = kiloes;
            vacuum = _closure1_slot20;
            kiloes = ctrled[update];
            kiloes = output.bind(report)(kiloes);
            result = kiloes.Text;
            kiloes = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            sequen = ctrled[sequen];
            config = output.bind(report)(sequen);
            sequen = config.getBillingInformationString;
            sequen = sequen.bind(config)(source, record);
            kiloes['children'] = sequen;
            kiloes = vacuum.bind(report)(result, kiloes);
            backup[1] = kiloes;
            result = _closure1_slot20;
            kiloes = 38;
            kiloes = ctrled[kiloes];
            kiloes = output.bind(report)(kiloes);
            output = kiloes.GoogleManagementLink;
            kiloes = {};
            kiloes['subscription'] = source;
            kiloes = result.bind(report)(output, kiloes);
            backup[2] = kiloes;
            kiloes = entity != echoed;
            if(!kiloes) { _fun00002_ip = 3442; continue _fun00001 }
 3392:
            result = _closure1_slot20;
            output = _closure1_slot0;
            sizing = _closure1_slot2;
            sizing = sizing[update];
            sizing = output.bind(report)(sizing);
            output = sizing.Text;
            sizing = {'variant': 'text-sm/medium', 'color': 'text-normal'};
            sizing['children'] = echoed;
            kiloes = result.bind(report)(output, sizing);
 3442:
            backup[3] = kiloes;
            yankee['children'] = backup;
            yankee = foxtra.bind(report)(romeon, yankee);
            offset[1] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            michal = tangon.bind(report)(zuuluu, michal);
            return michal;
 3486:
            return entity;
        }
    };
    var _closure1_slot26 = entity;
    entity = function(argFoo) { // Original name: FractionalPremiumCredits
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            source = entity.fractionalPremiumInfo;
            oscard = entity.showPremiumFeaturesCard;
            sierra = entity.durationText;
            ctrled = entity.hasUnactivatedUnits;
            papara = entity.unactivatedHoursString;
            variable40 = entity.activationDate;
            entity = _closure1_slot24;
            tangon = undefined;
            target = entity.bind(tangon)();
            zuuluu = _closure1_slot21;
            michal = _closure1_slot7;
            entity = {};
            report = target.container;
            entity['style'] = report;
            if(!oscard) { _fun00006_ip = 134; continue _fun00005 }
 74:
            option = _closure1_slot20;
            golfie = _closure1_slot1;
            verify = _closure1_slot2;
            report = 40;
            report = verify[report];
            golfie = golfie.bind(tangon)(report);
            report = {'premiumType': null, 'forFractionalPremium': true, 'hideButton': true};
            verify = _closure1_slot18;
            verify = verify.TIER_2;
            report['premiumType'] = verify;
            oscard = option.bind(tangon)(golfie, report);
 134:
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot21;
            golfie = _closure1_slot7;
            oscard = {};
            verify = target.extraInfoContainer;
            oscard['style'] = verify;
            yankee = _closure1_slot20;
            whisks = _closure1_slot0;
            record = _closure1_slot2;
            status = 17;
            verify = record[status];
            verify = whisks.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'variant': 'eyebrow', 'color': 'header-secondary'};
            variable41 = 18;
            romeon = record[variable41];
            romeon = whisks.bind(tangon)(romeon);
            backup = romeon.intl;
            foxtra = backup.string;
            romeon = record[variable41];
            romeon = whisks.bind(tangon)(romeon);
            romeon = romeon.t;
            romeon = romeon.Obre8v;
            romeon = foxtra.bind(backup)(romeon);
            verify['children'] = romeon;
            offset = yankee.bind(tangon)(offset, verify);
            verify = new Array(3);
            verify[0] = offset;
            romeon = _closure1_slot20;
            offset = 42;
            offset = record[offset];
            offset = whisks.bind(tangon)(offset);
            yankee = offset.TextWithIOSLinkWorkaround;
            offset = {'variant': 'text-md/semibold', 'color': 'text-normal'};
            quebec = 'text-md/semibold';
            foxtra = record[variable41];
            foxtra = whisks.bind(tangon)(foxtra);
            sizing = foxtra.intl;
            kiloes = sizing.format;
            foxtra = record[variable41];
            foxtra = whisks.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            backup = foxtra.AYGoBg;
            foxtra = {};
            variable39 = _closure1_slot1;
            output = 43;
            output = record[output];
            echoed = variable39.bind(tangon)(output);
            result = echoed.getArticleURL;
            output = _closure1_slot13;
            output = output.FRACTIONAL_PREMIUM_ABOUT;
            output = result.bind(echoed)(output);
            foxtra['helpCenterLink'] = output;
            foxtra = kiloes.bind(sizing)(backup, foxtra);
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            romeon = _closure1_slot21;
            yankee = _closure1_slot7;
            offset = {};
            output = 44;
            foxtra = record[output];
            foxtra = whisks.bind(tangon)(foxtra);
            backup = foxtra.Card;
            foxtra = {'style': null, 'start': true, 'end': false, 'variant': 'primary'};
            kiloes = target.fpRowStart;
            foxtra['style'] = kiloes;
            result = _closure1_slot20;
            sizing = _closure1_slot7;
            kiloes = {};
            echoed = target.fpRowIcon;
            kiloes['style'] = echoed;
            vacuum = _closure1_slot20;
            echoed = 45;
            echoed = record[echoed];
            update = variable39.bind(tangon)(echoed);
            echoed = {};
            sequen = {};
            cntext = 6;
            sequen['padding'] = cntext;
            variable38 = 13;
            cntext = record[variable38];
            cntext = variable39.bind(tangon)(cntext);
            cntext = cntext.radii;
            cntext = cntext.sm;
            sequen['borderRadius'] = cntext;
            echoed['style'] = sequen;
            sequen = {'x': 0, 'y': 0};
            echoed['start'] = sequen;
            sequen = {'x': 0, 'y': 1};
            echoed['end'] = sequen;
            sequen = record[variable38];
            sequen = variable39.bind(tangon)(sequen);
            sequen = sequen.unsafe_rawColors;
            cntext = sequen.GUILD_BOOSTING_BLUE;
            sequen = new Array(2);
            sequen[0] = cntext;
            cntext = record[variable38];
            cntext = variable39.bind(tangon)(cntext);
            cntext = cntext.unsafe_rawColors;
            cntext = cntext.GUILD_BOOSTING_PURPLE;
            sequen[1] = cntext;
            echoed['colors'] = sequen;
            limora = _closure1_slot20;
            cntext = _closure1_slot7;
            sequen = {};
            variable37 = 46;
            equals = record[variable37];
            variable36 = variable39.bind(tangon)(equals);
            equals = {};
            variable38 = record[variable38];
            variable38 = variable39.bind(tangon)(variable38);
            variable38 = variable38.unsafe_rawColors;
            variable38 = variable38.WHITE;
            equals['color'] = variable38;
            variable38 = 47;
            variable38 = record[variable38];
            variable38 = variable39.bind(tangon)(variable38);
            equals['source'] = variable38;
            variable37 = record[variable37];
            variable37 = whisks.bind(tangon)(variable37);
            variable37 = variable37.IconSizes;
            variable37 = variable37.LARGE;
            equals['size'] = variable37;
            equals = limora.bind(tangon)(variable36, equals);
            sequen['children'] = equals;
            sequen = limora.bind(tangon)(cntext, sequen);
            echoed['children'] = sequen;
            echoed = vacuum.bind(tangon)(update, echoed);
            kiloes['children'] = echoed;
            sizing = result.bind(tangon)(sizing, kiloes);
            kiloes = new Array(2);
            kiloes[0] = sizing;
            echoed = _closure1_slot21;
            result = _closure1_slot7;
            sizing = {};
            update = target.fpRowContent;
            sizing['style'] = update;
            sequen = _closure1_slot20;
            update = record[status];
            update = whisks.bind(tangon)(update);
            vacuum = update.Text;
            update = {};
            cntext = 'text-sm/semibold';
            update['variant'] = cntext;
            cntext = target.fpUnitsTitle;
            update['style'] = cntext;
            cntext = record[variable41];
            cntext = whisks.bind(tangon)(cntext);
            limora = cntext.intl;
            cntext = limora.string;
            record = record[variable41];
            record = whisks.bind(tangon)(record);
            record = record.t;
            record = record.DFMPWV;
            record = cntext.bind(limora)(record);
            update['children'] = record;
            vacuum = sequen.bind(tangon)(vacuum, update);
            update = new Array(2);
            update[0] = vacuum;
            if(!ctrled) { _fun00006_ip = 911; continue _fun00005 }
 891:
            sequen = source.fractionalState;
            vacuum = _closure1_slot16;
            vacuum = vacuum.NONE;
            if(!(sequen !== vacuum)) { _fun00006_ip = 1015; continue _fun00005 }
 911:
            record = _closure1_slot20;
            equals = _closure1_slot0;
            cntext = _closure1_slot2;
            vacuum = cntext[status];
            vacuum = equals.bind(tangon)(vacuum);
            sequen = vacuum.Text;
            vacuum = {};
            limora = 'text-sm/medium';
            vacuum['variant'] = limora;
            limora = target.fpUnitsStatusText;
            vacuum['style'] = limora;
            limora = cntext[variable41];
            limora = equals.bind(tangon)(limora);
            whisks = limora.intl;
            limora = whisks.string;
            cntext = cntext[variable41];
            cntext = equals.bind(tangon)(cntext);
            cntext = cntext.t;
            cntext = cntext.B66Z+f;
            cntext = limora.bind(whisks)(cntext);
            vacuum['children'] = cntext;
            vacuum = record.bind(tangon)(sequen, vacuum);
            _fun00006_ip = 1061; continue _fun00005;
 1015:
            cntext = _closure1_slot20;
            record = _closure1_slot0;
            sequen = _closure1_slot2;
            sequen = sequen[status];
            sequen = record.bind(tangon)(sequen);
            record = sequen.Text;
            sequen = {};
            limora = 'text-sm/medium';
            sequen['variant'] = limora;
            sequen['children'] = papara;
            vacuum = cntext.bind(tangon)(record, sequen);
 1061:
            update[1] = vacuum;
            sizing['children'] = update;
            sizing = echoed.bind(tangon)(result, sizing);
            kiloes[1] = sizing;
            foxtra['children'] = kiloes;
            backup = romeon.bind(tangon)(backup, foxtra);
            foxtra = new Array(3);
            foxtra[0] = backup;
            sizing = _closure1_slot20;
            kiloes = _closure1_slot7;
            backup = {};
            result = target.dividerContainer;
            backup['style'] = result;
            update = _closure1_slot20;
            echoed = _closure1_slot7;
            result = {};
            vacuum = target.divider;
            result['style'] = vacuum;
            result = update.bind(tangon)(echoed, result);
            backup['children'] = result;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            sizing = _closure1_slot20;
            kiloes = _closure1_slot0;
            backup = _closure1_slot2;
            backup = backup[output];
            backup = kiloes.bind(tangon)(backup);
            kiloes = backup.Card;
            backup = {'start': false, 'end': true, 'style': null, 'variant': 'secondary'};
            output = target.fpRowEnd;
            backup['style'] = output;
            echoed = _closure1_slot21;
            result = _closure1_slot7;
            output = {};
            update = target.fpRowContent;
            output['style'] = update;
            if(!ctrled) { _fun00006_ip = 1253; continue _fun00005 }
 1233:
            vacuum = source.fractionalState;
            update = _closure1_slot16;
            update = update.NONE;
            if(!(vacuum !== update)) { _fun00006_ip = 1356; continue _fun00005 }
 1253:
            sequen = _closure1_slot20;
            whisks = _closure1_slot0;
            record = _closure1_slot2;
            update = record[status];
            update = whisks.bind(tangon)(update);
            vacuum = update.Text;
            update = {};
            update['variant'] = quebec;
            cntext = target.fpTimeRemaining;
            update['style'] = cntext;
            cntext = record[variable41];
            cntext = whisks.bind(tangon)(cntext);
            limora = cntext.intl;
            cntext = limora.string;
            record = record[variable41];
            record = whisks.bind(tangon)(record);
            record = record.t;
            record = record.3G0CTE;
            record = cntext.bind(limora)(record);
            update['children'] = record;
            vacuum = sequen.bind(tangon)(vacuum, update);
            _fun00006_ip = 1589; continue _fun00005;
 1356:
            record = _closure1_slot21;
            sequen = _closure1_slot7;
            update = {};
            whisks = _closure1_slot20;
            variable37 = _closure1_slot0;
            equals = _closure1_slot2;
            cntext = equals[status];
            cntext = variable37.bind(tangon)(cntext);
            limora = cntext.Text;
            cntext = {};
            cntext['variant'] = quebec;
            quebec = equals[variable41];
            quebec = variable37.bind(tangon)(quebec);
            variable36 = quebec.intl;
            quebec = variable36.string;
            equals = equals[variable41];
            equals = variable37.bind(tangon)(equals);
            equals = equals.t;
            equals = equals.hT6i//;
            equals = quebec.bind(variable36)(equals);
            cntext['children'] = equals;
            limora = whisks.bind(tangon)(limora, cntext);
            cntext = new Array(2);
            cntext[0] = limora;
            limora = tangon !== variable40;
            if(!limora) { _fun00006_ip = 1575; continue _fun00005 }
 1469:
            quebec = _closure1_slot20;
            variable37 = _closure1_slot0;
            variable36 = _closure1_slot2;
            whisks = variable36[status];
            whisks = variable37.bind(tangon)(whisks);
            equals = whisks.Text;
            whisks = {'variant': 'text-xs/medium', 'color': 'text-secondary'};
            variable38 = variable36[variable41];
            variable38 = variable37.bind(tangon)(variable38);
            variable39 = variable38.intl;
            variable38 = variable39.format;
            variable36 = variable36[variable41];
            variable36 = variable37.bind(tangon)(variable36);
            variable36 = variable36.t;
            variable37 = variable36.0Vwb/v;
            variable36 = {};
            variable36['activateDate'] = variable40;
            variable36 = variable38.bind(variable39)(variable37, variable36);
            whisks['children'] = variable36;
            limora = quebec.bind(tangon)(equals, whisks);
 1575:
            cntext[1] = limora;
            update['children'] = cntext;
            vacuum = record.bind(tangon)(sequen, update);
 1589:
            update = new Array(2);
            update[0] = vacuum;
            if(!ctrled) { _fun00006_ip = 1620; continue _fun00005 }
 1600:
            ctrled = source.fractionalState;
            source = _closure1_slot16;
            source = source.NONE;
            if(!(ctrled !== source)) { _fun00006_ip = 1708; continue _fun00005 }
 1620:
            vacuum = _closure1_slot20;
            ctrled = _closure1_slot7;
            source = {};
            sequen = target.fpTimeRemainingPill;
            source['style'] = sequen;
            cntext = _closure1_slot20;
            record = _closure1_slot0;
            sequen = _closure1_slot2;
            sequen = sequen[status];
            sequen = record.bind(tangon)(sequen);
            record = sequen.Text;
            sequen = {};
            limora = 'text-sm/medium';
            sequen['variant'] = limora;
            limora = target.fpTimeRemainingText;
            sequen['style'] = limora;
            sequen['children'] = sierra;
            sequen = cntext.bind(tangon)(record, sequen);
            source['children'] = sequen;
            source = vacuum.bind(tangon)(ctrled, source);
            _fun00006_ip = 1794; continue _fun00005;
 1708:
            sequen = _closure1_slot20;
            vacuum = _closure1_slot7;
            ctrled = {};
            record = target.fpUnactivatedHoursPill;
            ctrled['style'] = record;
            cntext = _closure1_slot20;
            record = _closure1_slot0;
            config = _closure1_slot2;
            config = config[status];
            config = record.bind(tangon)(config);
            record = config.Text;
            config = {};
            status = 'text-sm/medium';
            config['variant'] = status;
            target = target.fpTimeRemainingText;
            config['style'] = target;
            config['children'] = papara;
            config = cntext.bind(tangon)(record, config);
            ctrled['children'] = config;
            source = sequen.bind(tangon)(vacuum, ctrled);
 1794:
            update[1] = source;
            output['children'] = update;
            output = echoed.bind(tangon)(result, output);
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[2] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot27 = entity;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    michal = golfie[entity];
    entity = undefined;
    michal = backup.bind(entity)(michal);
    var _closure1_slot3 = michal;
    source = 1;
    report = golfie[source];
    michal = argCor;
    michal = michal.bind(entity)(report);
    var _closure1_slot4 = michal;
    michal = 2;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.Image;
    var _closure1_slot5 = report;
    report = michal.ImageBackground;
    var _closure1_slot6 = report;
    report = michal.View;
    var _closure1_slot7 = report;
    michal = michal.ScrollView;
    var _closure1_slot8 = michal;
    michal = 3;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    result = michal.TABLE_ROW_HEIGHT;
    update = 4;
    michal = golfie[update];
    michal = backup.bind(entity)(michal);
    var _closure1_slot9 = michal;
    michal = 5;
    michal = golfie[michal];
    michal = backup.bind(entity)(michal);
    var _closure1_slot10 = michal;
    michal = 6;
    michal = golfie[michal];
    michal = backup.bind(entity)(michal);
    var _closure1_slot11 = michal;
    michal = 7;
    michal = golfie[michal];
    michal = backup.bind(entity)(michal);
    var _closure1_slot12 = michal;
    echoed = 8;
    michal = golfie[echoed];
    michal = oscard.bind(entity)(michal);
    report = michal.HelpdeskArticles;
    var _closure1_slot13 = report;
    report = michal.SubscriptionStatusTypes;
    var _closure1_slot14 = report;
    michal = michal.UserSettingsSections;
    var _closure1_slot15 = michal;
    michal = 9;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    romeon = michal.TABLE_DIVIDER_WIDTH;
    kiloes = michal.TABLE_ROW_PADDING;
    michal = 10;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.FractionalPremiumStates;
    var _closure1_slot16 = report;
    report = michal.PREMIUM_SUBSCRIPTION_APPLICATION;
    var _closure1_slot17 = report;
    report = michal.PremiumTypes;
    var _closure1_slot18 = report;
    michal = michal.SubscriptionPlanInfo;
    var _closure1_slot19 = michal;
    michal = 11;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.jsx;
    var _closure1_slot20 = report;
    michal = michal.jsxs;
    var _closure1_slot21 = michal;
    report = 12;
    michal = golfie[report];
    offset = oscard.bind(entity)(michal);
    verify = offset.createStyles;
    option = {};
    michal = {};
    foxtra = 13;
    yankee = golfie[foxtra];
    yankee = backup.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BG_BASE_PRIMARY;
    michal['backgroundColor'] = yankee;
    yankee = '100%';
    michal['height'] = yankee;
    option['background'] = michal;
    michal = {'display': 'flex', 'paddingHorizontal': 12};
    option['container'] = michal;
    michal = 24;
    yankee = {'marginTop': 24, 'display': 'flex', 'gap': 12};
    option['contentContainer'] = yankee;
    yankee = {'position': 'absolute', 'zIndex': 5, 'top': 0, 'left': 0, 'right': 0};
    option['topBlur'] = yankee;
    yankee = {};
    ctrled = 16;
    yankee['paddingHorizontal'] = ctrled;
    option['accountCredit'] = yankee;
    yankee = {};
    sizing = golfie[foxtra];
    sizing = backup.bind(entity)(sizing);
    sizing = sizing.radii;
    sizing = sizing.sm;
    yankee['borderRadius'] = sizing;
    sizing = golfie[foxtra];
    sizing = backup.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BG_SURFACE_RAISED;
    yankee['backgroundColor'] = sizing;
    option['accountCreditList'] = yankee;
    yankee = {};
    yankee['paddingTop'] = ctrled;
    option['featuresTable'] = yankee;
    yankee = 20;
    sizing = {'marginTop': 20, 'width': '100%'};
    option['subscriptionHeader'] = sizing;
    sizing = {'marginTop': 20, 'width': '100%'};
    option['billingInfo'] = sizing;
    option = verify.bind(offset)(option);
    var _closure1_slot22 = option;
    option = golfie[report];
    offset = oscard.bind(entity)(option);
    verify = offset.createStyles;
    option = {};
    output = 'row';
    sizing = 'center';
    vacuum = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'paddingHorizontal': 16, 'paddingVertical': 8, 'justifyContent': 'space-between'};
    option['headerContainer'] = vacuum;
    vacuum = {'width': 24, 'height': 24, 'borderRadius': null, 'alignItems': 'center', 'justifyContent': 'center'};
    sequen = golfie[foxtra];
    sequen = backup.bind(entity)(sequen);
    sequen = sequen.radii;
    sequen = sequen.lg;
    vacuum['borderRadius'] = sequen;
    option['backButtonWrapper'] = vacuum;
    option = verify.bind(offset)(option);
    var _closure1_slot23 = option;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    offset = {'display': 'flex', 'flexDirection': 'column', 'gap': 12};
    report['container'] = offset;
    offset = {};
    vacuum = golfie[foxtra];
    vacuum = backup.bind(entity)(vacuum);
    vacuum = vacuum.colors;
    vacuum = vacuum.BG_SURFACE_OVERLAY_TMP;
    offset['backgroundColor'] = vacuum;
    vacuum = golfie[foxtra];
    vacuum = backup.bind(entity)(vacuum);
    vacuum = vacuum.radii;
    vacuum = vacuum.lg;
    offset['borderRadius'] = vacuum;
    vacuum = 'hidden';
    offset['overflow'] = vacuum;
    report['errorHeader'] = offset;
    offset = {};
    offset['padding'] = ctrled;
    report['headerBackground'] = offset;
    offset = {'flexDirection': 'row', 'alignItems': 'center', 'marginBottom': 12};
    report['logoContainer'] = offset;
    offset = {'marginRight': 10, 'height': 36, 'width': 51};
    report['wumpusImg'] = offset;
    offset = {'height': 32, 'width': 78};
    report['logoStyle'] = offset;
    offset = {'marginBottom': 16, 'marginHorizontal': 16};
    report['errorHeaderPrimaryButton'] = offset;
    offset = {'paddingTop': 16, 'paddingHorizontal': 16, 'display': 'flex', 'gap': 8};
    report['extraInfoContainer'] = offset;
    offset = {'padding': 16, 'borderRadius': null, 'backgroundColor': null, 'display': 'flex', 'gap': 18};
    ctrled = golfie[foxtra];
    ctrled = backup.bind(entity)(ctrled);
    ctrled = ctrled.radii;
    ctrled = ctrled.sm;
    offset['borderRadius'] = ctrled;
    ctrled = golfie[foxtra];
    ctrled = backup.bind(entity)(ctrled);
    ctrled = ctrled.colors;
    ctrled = ctrled.BG_SURFACE_RAISED;
    offset['backgroundColor'] = ctrled;
    report['extraInfoTextContainer'] = offset;
    offset = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'flex-start', 'gap': 8, 'padding': 16};
    ctrled = golfie[foxtra];
    ctrled = backup.bind(entity)(ctrled);
    ctrled = ctrled.radii;
    ctrled = ctrled.lg;
    offset['borderRadius'] = ctrled;
    ctrled = golfie[foxtra];
    ctrled = backup.bind(entity)(ctrled);
    ctrled = ctrled.colors;
    ctrled = ctrled.BG_SURFACE_RAISED;
    offset['backgroundColor'] = ctrled;
    report['mutationWarningContainer'] = offset;
    offset = {};
    offset['flex'] = source;
    report['mutationText'] = offset;
    offset = {};
    source = golfie[foxtra];
    source = backup.bind(entity)(source);
    source = source.colors;
    source = source.TEXT_BRAND;
    offset['color'] = source;
    report['fpTimeRemaining'] = offset;
    offset = {};
    source = golfie[foxtra];
    source = backup.bind(entity)(source);
    source = source.radii;
    source = source.lg;
    offset['borderRadius'] = source;
    source = golfie[foxtra];
    source = backup.bind(entity)(source);
    source = source.colors;
    source = source.REDESIGN_BUTTON_PRIMARY_PRESSED_BACKGROUND;
    offset['backgroundColor'] = source;
    offset['paddingVertical'] = update;
    offset['paddingHorizontal'] = echoed;
    report['fpTimeRemainingPill'] = offset;
    offset = {};
    source = golfie[foxtra];
    source = backup.bind(entity)(source);
    source = source.radii;
    source = source.lg;
    offset['borderRadius'] = source;
    source = golfie[foxtra];
    source = backup.bind(entity)(source);
    source = source.colors;
    source = source.ACTIVITY_CARD_ICON_OVERLAY;
    offset['backgroundColor'] = source;
    offset['paddingVertical'] = update;
    offset['paddingHorizontal'] = echoed;
    report['fpUnactivatedHoursPill'] = offset;
    offset = {};
    echoed = golfie[foxtra];
    echoed = backup.bind(entity)(echoed);
    echoed = echoed.colors;
    echoed = echoed.WHITE;
    offset['color'] = echoed;
    report['fpTimeRemainingText'] = offset;
    offset = {};
    echoed = golfie[foxtra];
    echoed = backup.bind(entity)(echoed);
    echoed = echoed.colors;
    echoed = echoed.HEADER_PRIMARY;
    offset['color'] = echoed;
    report['fpUnitsTitle'] = offset;
    offset = {'color': null, 'marginStart': 18, 'flexShrink': 1};
    echoed = golfie[foxtra];
    echoed = backup.bind(entity)(echoed);
    echoed = echoed.colors;
    echoed = echoed.TEXT_BRAND;
    offset['color'] = echoed;
    report['fpUnitsStatusText'] = offset;
    offset = {};
    offset['padding'] = kiloes;
    offset['minHeight'] = result;
    offset['flexDirection'] = output;
    offset['alignItems'] = sizing;
    sizing = golfie[foxtra];
    sizing = backup.bind(entity)(sizing);
    sizing = sizing.colors;
    sizing = sizing.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = sizing;
    report['fpRowStart'] = offset;
    offset = {};
    offset['marginEnd'] = kiloes;
    report['fpRowIcon'] = offset;
    offset = {'flexShrink': 1, 'flexGrow': 1, 'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between'};
    report['fpRowContent'] = offset;
    offset = {};
    foxtra = golfie[foxtra];
    foxtra = backup.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_TERTIARY;
    offset['backgroundColor'] = foxtra;
    report['fpRowEnd'] = offset;
    offset = {};
    foxtra = 19;
    foxtra = golfie[foxtra];
    foxtra = oscard.bind(entity)(foxtra);
    foxtra = foxtra.CARD_PRIMARY_BG;
    offset['backgroundColor'] = foxtra;
    offset['height'] = romeon;
    report['dividerContainer'] = offset;
    offset = {};
    offset['height'] = romeon;
    yankee = golfie[yankee];
    yankee = oscard.bind(entity)(yankee);
    yankee = yankee.DIVIDER_BACKGROUND;
    offset['backgroundColor'] = yankee;
    report['divider'] = offset;
    offset = {};
    yankee = 'relative';
    offset['position'] = yankee;
    report['pillAndCardContainer'] = offset;
    offset = {'position': 'absolute', 'top': 4294967278, 'left': 5, 'zIndex': 99};
    report['pillPosition'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot24 = report;
    report = 59;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/user_settings/native/premium_marketing/PremiumManagePlan.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function() { // Original name: PremiumManagePlan
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = _closure1_slot22;
            tangon = undefined;
            echoed = entity.bind(tangon)();
            offset = _closure1_slot1;
            golfie = _closure1_slot2;
            entity = 48;
            entity = golfie[entity];
            entity = offset.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            vacuum = entity.top;
            foxtra = entity.bottom;
            oscard = _closure1_slot0;
            entity = 14;
            entity = golfie[entity];
            michal = oscard.bind(tangon)(entity);
            entity = michal.useNavigation;
            entity = entity.bind(michal)();
            var _closure2_slot0 = entity;
            report = _closure1_slot4;
            zuuluu = report.useLayoutEffect;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure2_slot0;
                michal = zuuluu.setOptions;
                entity = {};
                tangon = false;
                entity['headerShown'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            entity = zuuluu.bind(report)(entity, michal);
            report = 24;
            entity = golfie[report];
            option = oscard.bind(tangon)(entity);
            zuuluu = option.useStateFromStores;
            entity = _closure1_slot9;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure1_slot9;
                entity = michal.isLoadedForPremiumSKUs;
                entity = entity.bind(michal)();
                return entity;
            };
            michal = zuuluu.bind(option)(michal, entity);
            entity = golfie[report];
            verify = oscard.bind(tangon)(entity);
            option = verify.useStateFromStoresArray;
            entity = _closure1_slot10;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot10;
                entity = zuuluu.getPremiumTypeSubscription;
                zuuluu = entity.bind(zuuluu)();
                entity = new Array(2);
                entity[0] = zuuluu;
                zuuluu = _closure1_slot10;
                michal = zuuluu.hasFetchedSubscriptions;
                michal = michal.bind(zuuluu)();
                entity[1] = michal;
                return entity;
            };
            option = option.bind(verify)(zuuluu, entity);
            zuuluu = _closure1_slot3;
            entity = 2;
            zuuluu = zuuluu.bind(tangon)(option, entity);
            verify = 0;
            ctrled = zuuluu[verify];
            entity = 1;
            entity = zuuluu[entity];
            zuuluu = 49;
            zuuluu = golfie[zuuluu];
            option = offset.bind(tangon)(zuuluu);
            zuuluu = {};
            yankee = true;
            zuuluu['forceFetch'] = yankee;
            result = option.bind(tangon)(zuuluu);
            zuuluu = 50;
            zuuluu = golfie[zuuluu];
            option = oscard.bind(tangon)(zuuluu);
            zuuluu = option.useIsInReverseTrial;
            sizing = zuuluu.bind(option)();
            zuuluu = 51;
            option = golfie[zuuluu];
            offset = offset.bind(tangon)(option);
            option = result.endsAt;
            zuuluu = golfie[zuuluu];
            zuuluu = oscard.bind(tangon)(zuuluu);
            zuuluu = zuuluu.CountDownMessageTypes;
            zuuluu = zuuluu.SHORT_TIME;
            sequen = offset.bind(tangon)(option, zuuluu);
            zuuluu = 27;
            zuuluu = golfie[zuuluu];
            oscard = oscard.bind(tangon)(zuuluu);
            zuuluu = oscard.getUnactivatedFractionalPremiumDurationString;
            record = zuuluu.bind(oscard)(result);
            zuuluu = record.length;
            cntext = zuuluu > verify;
            zuuluu = null;
            config = undefined;
            if(!(zuuluu !== ctrled)) { _fun00008_ip = 368; continue _fun00007 }
 351:
            oscard = ctrled.isPurchasedExternally;
            config = undefined;
            if(oscard) { _fun00008_ip = 368; continue _fun00007 }
 362:
            config = ctrled.currentPeriodEnd;
 368:
            golfie = result.fractionalState;
            oscard = _closure1_slot16;
            oscard = oscard.NONE;
            kiloes = golfie !== oscard;
            if(!kiloes) { _fun00008_ip = 418; continue _fun00007 }
 391:
            oscard = sizing;
            if(!sizing) { _fun00008_ip = 415; continue _fun00007 }
 397:
            golfie = result.unactivatedUnits;
            golfie = golfie.length;
            golfie = golfie > verify;
            oscard = !golfie;
 415:
            kiloes = !oscard;
 418:
            if(kiloes) { _fun00008_ip = 424; continue _fun00007 }
 421:
            kiloes = cntext;
 424:
            oscard = _closure1_slot0;
            golfie = _closure1_slot2;
            option = 25;
            option = golfie[option];
            offset = oscard.bind(tangon)(option);
            option = offset.useThemeContext;
            option = option.bind(offset)();
            option = option.theme;
            backup = _closure1_slot4;
            yankee = backup.useRef;
            offset = false;
            offset = yankee.bind(backup)(offset);
            var _closure2_slot1 = offset;
            romeon = backup.useCallback;
            yankee = function(argFoo) {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 52;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.trackIfScrolledToBottom;
                entity = {};
                tangon = argFoo;
                tangon = tangon.nativeEvent;
                entity['nativeEvent'] = tangon;
                tangon = 'your_nitro_plan';
                entity['trackedType'] = tangon;
                tangon = _closure2_slot1;
                entity['hasTrackedScrolledToBottom'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            offset = new Array(0);
            offset = romeon.bind(backup)(yankee, offset);
            report = golfie[report];
            backup = oscard.bind(tangon)(report);
            romeon = backup.useStateFromStores;
            report = _closure1_slot11;
            yankee = new Array(1);
            yankee[0] = report;
            report = 53;
            report = golfie[report];
            report = oscard.bind(tangon)(report);
            sierra = report.areSetsEqual;
            whisks = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    zuuluu = _closure1_slot11;
                    michal = zuuluu.getForApplication;
                    entity = _closure1_slot17;
                    entity = michal.bind(zuuluu)(entity);
                    michal = null;
                    if(!(michal == entity)) { _fun00010_ip = 56; continue _fun00009 }
 28:
                    michal = global;
                    michal = michal.Set;
                    zuuluu = michal.prototype;
                    zuuluu = Object.create(zuuluu, {constructor: {value: michal}});
                    report = zuuluu;
                    michal = new report[michal](tangon);
                    entity = michal instanceof Object ? michal : zuuluu;
 56:
                    return entity;
                }
            };
            limora = new Array(0);
            quebec = backup;
            equals = yankee;
            source = quebec[romeon](equals, whisks, limora, sierra, status);
            update = zuuluu != ctrled;
            if(!update) { _fun00008_ip = 582; continue _fun00007 }
 573:
            report = ctrled.isBoostOnly;
            update = !report;
 582:
            if(!update) { _fun00008_ip = 588; continue _fun00007 }
 585:
            update = michal;
 588:
            if(!update) { _fun00008_ip = 594; continue _fun00007 }
 591:
            update = entity;
 594:
            backup = zuuluu != ctrled;
            if(!backup) { _fun00008_ip = 607; continue _fun00007 }
 601:
            backup = ctrled.isBoostOnly;
 607:
            if(!backup) { _fun00008_ip = 613; continue _fun00007 }
 610:
            backup = michal;
 613:
            if(!backup) { _fun00008_ip = 619; continue _fun00007 }
 616:
            backup = entity;
 619:
            zuuluu = _closure1_slot21;
            michal = _closure1_slot7;
            entity = {};
            report = echoed.background;
            entity['style'] = report;
            golfie = _closure1_slot20;
            oscard = _closure1_slot1;
            yankee = _closure1_slot2;
            report = 54;
            report = yankee[report];
            oscard = oscard.bind(tangon)(report);
            report = {};
            yankee = 0.2;
            report['blurAmount'] = yankee;
            romeon = echoed.topBlur;
            yankee = new Array(2);
            yankee[0] = romeon;
            romeon = {};
            romeon['height'] = vacuum;
            yankee[1] = romeon;
            report['style'] = yankee;
            report['blurTheme'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot21;
            golfie = _closure1_slot8;
            oscard = {};
            romeon = echoed.container;
            yankee = new Array(2);
            yankee[0] = romeon;
            romeon = {};
            romeon['paddingTop'] = vacuum;
            romeon['paddingBottom'] = foxtra;
            yankee[1] = romeon;
            oscard['contentContainerStyle'] = yankee;
            oscard['onScrollEndDrag'] = offset;
            oscard['onMomentumScrollEnd'] = offset;
            oscard['scrollEventThrottle'] = verify;
            yankee = _closure1_slot20;
            offset = _closure1_slot25;
            verify = {};
            offset = yankee.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            romeon = _closure1_slot21;
            yankee = _closure1_slot7;
            offset = {};
            foxtra = echoed.contentContainer;
            offset['style'] = foxtra;
            if(!update) { _fun00008_ip = 859; continue _fun00007 }
 833:
            target = _closure1_slot20;
            vacuum = _closure1_slot26;
            foxtra = {};
            foxtra['subscription'] = ctrled;
            foxtra['fractionalPremiumInfo'] = result;
            update = target.bind(tangon)(vacuum, foxtra);
 859:
            foxtra = new Array(6);
            foxtra[0] = update;
            if(!sizing) { _fun00008_ip = 930; continue _fun00007 }
 870:
            target = _closure1_slot20;
            vacuum = _closure1_slot1;
            status = _closure1_slot2;
            update = 40;
            update = status[update];
            vacuum = vacuum.bind(tangon)(update);
            update = {'premiumType': null, 'forFractionalPremium': true, 'hideButton': true};
            status = _closure1_slot18;
            status = status.TIER_2;
            update['premiumType'] = status;
            sizing = target.bind(tangon)(vacuum, update);
 930:
            foxtra[1] = sizing;
            if(!kiloes) { _fun00008_ip = 1003; continue _fun00007 }
 937:
            vacuum = _closure1_slot20;
            update = _closure1_slot27;
            sizing = {};
            sizing['fractionalPremiumInfo'] = result;
            status = result.fractionalState;
            target = _closure1_slot16;
            target = target.FP_ONLY;
            target = status === target;
            sizing['showPremiumFeaturesCard'] = target;
            sizing['hasUnactivatedUnits'] = cntext;
            sizing['unactivatedHoursString'] = record;
            sizing['activationDate'] = config;
            sizing['durationText'] = sequen;
            kiloes = vacuum.bind(tangon)(update, sizing);
 1003:
            foxtra[2] = kiloes;
            if(!backup) { _fun00008_ip = 1143; continue _fun00007 }
 1013:
            update = _closure1_slot21;
            sizing = _closure1_slot7;
            kiloes = {};
            record = _closure1_slot20;
            config = _closure1_slot1;
            cntext = _closure1_slot2;
            vacuum = 37;
            vacuum = cntext[vacuum];
            sequen = config.bind(tangon)(vacuum);
            vacuum = {};
            target = echoed.subscriptionHeader;
            vacuum['style'] = target;
            papara = function() { // Original name: onClickManagePremiumGuild
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    zuuluu = _closure2_slot0;
                    entity = zuuluu.getState;
                    entity = entity.bind(zuuluu)();
                    tangon = entity.routes;
                    zuuluu = tangon.find;
                    entity = function(argFoo) {
                        entity = argFoo;
                        michal = entity.name;
                        entity = _closure1_slot15;
                        entity = entity.GUILD_BOOSTING;
                        entity = michal === entity;
                        return entity;
                    };
                    tangon = zuuluu.bind(tangon)(entity);
                    oscard = _closure1_slot1;
                    golfie = _closure1_slot2;
                    entity = 55;
                    report = golfie[entity];
                    entity = undefined;
                    verify = oscard.bind(entity)(report);
                    oscard = verify.setSection;
                    option = _closure1_slot15;
                    report = option.GUILD_BOOSTING;
                    report = oscard.bind(verify)(report);
                    oscard = _closure1_slot0;
                    report = 56;
                    report = golfie[report];
                    golfie = oscard.bind(entity)(report);
                    oscard = golfie.trackPaneViewed;
                    report = {};
                    option = option.GUILD_BOOSTING;
                    report['destinationPane'] = option;
                    report = oscard.bind(golfie)(report);
                    report = null;
                    if(!(report == tangon)) { _fun00012_ip = 160; continue _fun00011 }
 134:
                    oscard = _closure2_slot0;
                    report = oscard.push;
                    zuuluu = _closure1_slot15;
                    zuuluu = zuuluu.GUILD_BOOSTING;
                    zuuluu = report.bind(oscard)(zuuluu);
                    _fun00012_ip = 175; continue _fun00011;
 160:
                    zuuluu = _closure2_slot0;
                    michal = zuuluu.navigate;
                    michal = michal.bind(zuuluu)(tangon);
 175:
                    return entity;
                }
            };
            vacuum['onClickManagePremiumGuild'] = papara;
            vacuum['subscription'] = ctrled;
            sequen = record.bind(tangon)(sequen, vacuum);
            vacuum = new Array(2);
            vacuum[0] = sequen;
            record = _closure1_slot20;
            sequen = 38;
            sequen = cntext[sequen];
            config = config.bind(tangon)(sequen);
            sequen = {};
            cntext = echoed.billingInfo;
            sequen['style'] = cntext;
            sequen['subscription'] = ctrled;
            sequen = record.bind(tangon)(config, sequen);
            vacuum[1] = sequen;
            kiloes['children'] = vacuum;
            backup = update.bind(tangon)(sizing, kiloes);
 1143:
            foxtra[3] = backup;
            update = _closure1_slot20;
            kiloes = _closure1_slot1;
            vacuum = _closure1_slot2;
            backup = 57;
            backup = vacuum[backup];
            sizing = kiloes.bind(tangon)(backup);
            backup = {};
            sequen = echoed.accountCredit;
            backup['style'] = sequen;
            sequen = echoed.accountCreditList;
            backup['creditListContainerStyle'] = sequen;
            backup['currentSubscription'] = ctrled;
            backup['entitlements'] = source;
            backup = update.bind(tangon)(sizing, backup);
            foxtra[4] = backup;
            sizing = _closure1_slot20;
            backup = 58;
            backup = vacuum[backup];
            kiloes = kiloes.bind(tangon)(backup);
            backup = {};
            echoed = echoed.featuresTable;
            backup['style'] = echoed;
            echoed = 'nitro_home';
            backup['variant'] = echoed;
            ctrled = _closure1_slot0;
            echoed = 18;
            update = vacuum[echoed];
            update = ctrled.bind(tangon)(update);
            source = update.intl;
            update = source.string;
            echoed = vacuum[echoed];
            echoed = ctrled.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.QXx2go;
            echoed = update.bind(source)(echoed);
            backup['titleOverride'] = echoed;
            result = result.fractionalState;
            output = _closure1_slot16;
            output = output.FP_ONLY;
            output = result === output;
            backup['isFractionalOnly'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[5] = backup;
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['BACK_BUTTON_SIZE'] = michal;
    return entity;
})();