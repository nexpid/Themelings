// app/modules/user_settings/native/two_way_link/crunchyroll/CrunchyrollLinkDiscordConsent.tsx
export default (function(argFoo, argBar, _, argCor, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.CRUNCHYROLL_CLIENT_ID;
    var _closure1_slot3 = golfie;
    tangon = tangon.CRUNCHYROLL_CLIENT_SCOPES;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.CrunchyrollLinkModalScenes;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.PlatformTypes;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot7 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/two_way_link/crunchyroll/CrunchyrollLinkDiscordConsent.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: CrunchyrollLinkDiscordConsent
        michal = argFoo;
        verify = michal.callbackCode;
        option = michal.callbackState;
        michal = _closure1_slot0;
        offset = _closure1_slot1;
        zuuluu = 5;
        zuuluu = offset[zuuluu];
        tangon = undefined;
        report = michal.bind(tangon)(zuuluu);
        zuuluu = report.useNavigation;
        romeon = zuuluu.bind(report)();
        var _closure2_slot0 = romeon;
        yankee = _closure1_slot2;
        oscard = yankee.useCallback;
        report = new Array(1);
        report[0] = romeon;
        zuuluu = function() {
            zuuluu = _closure2_slot0;
            michal = zuuluu.push;
            entity = _closure1_slot5;
            entity = entity.SUCCESS;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        oscard = oscard.bind(yankee)(zuuluu, report);
        report = yankee.useCallback;
        zuuluu = new Array(1);
        zuuluu[0] = romeon;
        entity = function() {
            zuuluu = _closure2_slot0;
            michal = zuuluu.push;
            entity = _closure1_slot5;
            entity = entity.ERROR;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        report = report.bind(yankee)(entity, zuuluu);
        zuuluu = _closure1_slot7;
        entity = 6;
        entity = offset[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.TwoWayLinkDiscordConsent;
        entity = {};
        offset = _closure1_slot6;
        offset = offset.CRUNCHYROLL;
        entity['platformType'] = offset;
        entity['callbackCode'] = verify;
        entity['callbackState'] = option;
        option = _closure1_slot3;
        entity['clientId'] = option;
        golfie = _closure1_slot4;
        entity['scopes'] = golfie;
        entity['onNext'] = oscard;
        entity['onError'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();