// app/modules/user_settings/native/two_way_link/xbox/XboxLinkDiscordConsent.tsx
export default (function(argFoo, argBar, _, argCor, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.XboxLinkModalScenes;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.PlatformTypes;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.XBOX_CLIENT_SCOPES;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot6 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/two_way_link/xbox/XboxLinkDiscordConsent.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: XboxLinkDiscordConsent
        michal = argFoo;
        yankee = michal.callbackCode;
        option = michal.callbackState;
        verify = _closure1_slot0;
        offset = _closure1_slot1;
        michal = 5;
        michal = offset[michal];
        tangon = undefined;
        zuuluu = verify.bind(tangon)(michal);
        michal = zuuluu.useNavigation;
        romeon = michal.bind(zuuluu)();
        var _closure2_slot0 = romeon;
        report = _closure1_slot2;
        oscard = report.useCallback;
        zuuluu = new Array(1);
        zuuluu[0] = romeon;
        michal = function() {
            zuuluu = _closure2_slot0;
            michal = zuuluu.push;
            entity = _closure1_slot3;
            entity = entity.SUCCESS;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        oscard = oscard.bind(report)(michal, zuuluu);
        zuuluu = report.useCallback;
        michal = new Array(1);
        michal[0] = romeon;
        entity = function() {
            zuuluu = _closure2_slot0;
            michal = zuuluu.push;
            entity = _closure1_slot3;
            entity = entity.ERROR;
            entity = michal.bind(zuuluu)(entity);
            entity = undefined;
            return entity;
        };
        report = zuuluu.bind(report)(entity, michal);
        zuuluu = _closure1_slot6;
        entity = 6;
        entity = offset[entity];
        entity = verify.bind(tangon)(entity);
        michal = entity.TwoWayLinkDiscordConsent;
        entity = {};
        romeon = _closure1_slot4;
        romeon = romeon.XBOX;
        entity['platformType'] = romeon;
        entity['callbackCode'] = yankee;
        entity['callbackState'] = option;
        option = 7;
        option = offset[option];
        option = verify.bind(tangon)(option);
        option = option.ConsoleOAuthApplications;
        option = option.XBOX_APPLICATION_ID;
        entity['clientId'] = option;
        golfie = _closure1_slot5;
        entity['scopes'] = golfie;
        entity['onNext'] = oscard;
        entity['onError'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();