// app/modules/user_settings/native/two_way_link/playstation/PlayStationLinkSuccess.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.Image;
    var _closure1_slot4 = golf;
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 2;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'width': 124, 'height': 160, 'marginBottom': 24};
    tango['image'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/user_settings/native/two_way_link/playstation/PlayStationLinkSuccess.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: PlayStationLinkSuccess
        entity = argFoo;
        yankee = entity.onClose;
        entity = _closure1_slot8;
        tango = undefined;
        offset = entity.bind(tango)();
        kilo = _closure1_slot0;
        sizing = _closure1_slot2;
        entity = 4;
        entity = sizing[entity];
        mike = kilo.bind(tango)(entity);
        entity = mike.useTwoWayLinkStyles;
        foxtrot = entity.bind(mike)();
        report = _closure1_slot3;
        zulu = report.useMemo;
        mike = function() {
            entity = {};
            tango = _closure1_slot1;
            zulu = _closure1_slot2;
            mike = 5;
            zulu = zulu[mike];
            mike = undefined;
            mike = tango.bind(mike)(zulu);
            entity['uri'] = mike;
            return entity;
        };
        entity = new Array(0);
        romeo = zulu.bind(report)(mike, entity);
        zulu = _closure1_slot7;
        mike = _closure1_slot5;
        entity = {};
        report = foxtrot.container;
        entity['style'] = report;
        report = {};
        oscar = foxtrot.content;
        report['style'] = oscar;
        options = _closure1_slot6;
        golf = _closure1_slot4;
        oscar = {};
        oscar['source'] = romeo;
        offset = offset.image;
        oscar['style'] = offset;
        golf = options.bind(tango)(golf, oscar);
        oscar = new Array(3);
        oscar[0] = golf;
        golf = 6;
        offset = sizing[golf];
        offset = kilo.bind(tango)(offset);
        backup = offset.Text;
        offset = {'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
        romeo = foxtrot.title;
        offset['style'] = romeo;
        romeo = 7;
        output = sizing[romeo];
        output = kilo.bind(tango)(output);
        echo = output.intl;
        result = echo.string;
        output = sizing[romeo];
        output = kilo.bind(tango)(output);
        output = output.t;
        output = output.e6SOl5;
        output = result.bind(echo)(output);
        offset['children'] = output;
        offset = options.bind(tango)(backup, offset);
        oscar[1] = offset;
        golf = sizing[golf];
        golf = kilo.bind(tango)(golf);
        offset = golf.Text;
        golf = {'variant': 'text-md/normal', 'color': 'header-secondary'};
        backup = foxtrot.body;
        golf['style'] = backup;
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        result = backup.intl;
        output = result.string;
        backup = sizing[romeo];
        backup = kilo.bind(tango)(backup);
        backup = backup.t;
        backup = backup.QjAZAQ;
        backup = output.bind(result)(backup);
        golf['children'] = backup;
        golf = options.bind(tango)(offset, golf);
        oscar[2] = golf;
        report['children'] = oscar;
        oscar = zulu.bind(tango)(mike, report);
        report = new Array(2);
        report[0] = oscar;
        oscar = 8;
        oscar = sizing[oscar];
        oscar = kilo.bind(tango)(oscar);
        golf = oscar.SafeAreaPaddingView;
        oscar = {};
        offset = true;
        oscar['bottom'] = offset;
        offset = foxtrot.footerContainer;
        oscar['style'] = offset;
        output = _closure1_slot1;
        backup = 9;
        verify = sizing[backup];
        offset = output.bind(tango)(verify);
        verify = {};
        result = sizing[backup];
        result = output.bind(tango)(result);
        result = result.Sizes;
        result = result.MEDIUM;
        verify['size'] = result;
        backup = sizing[backup];
        backup = output.bind(tango)(backup);
        backup = backup.Colors;
        backup = backup.BRAND;
        verify['color'] = backup;
        foxtrot = foxtrot.footerButton;
        verify['style'] = foxtrot;
        foxtrot = sizing[romeo];
        foxtrot = kilo.bind(tango)(foxtrot);
        backup = foxtrot.intl;
        foxtrot = backup.string;
        romeo = sizing[romeo];
        romeo = kilo.bind(tango)(romeo);
        romeo = romeo.t;
        romeo = romeo.i4jeWV;
        romeo = foxtrot.bind(backup)(romeo);
        verify['text'] = romeo;
        verify['onPress'] = yankee;
        verify = options.bind(tango)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['PlayStationLinkSuccess'] = mike;
    return entity;
})();