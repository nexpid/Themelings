// app/modules/user_settings/native/two_way_link/TwoWayLinkError.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'width': 254, 'height': 127, 'marginBottom': 32};
    tangon['image'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 11;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/user_settings/native/two_way_link/TwoWayLinkError.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: TwoWayLinkError
        entity = argFoo;
        backup = entity.onClose;
        foxtra = entity.title;
        offset = entity.body;
        sizing = entity.onRetry;
        entity = _closure1_slot7;
        tangon = undefined;
        verify = entity.bind(tangon)();
        result = _closure1_slot0;
        echoed = _closure1_slot2;
        entity = 4;
        entity = echoed[entity];
        michal = result.bind(tangon)(entity);
        entity = michal.useTwoWayLinkStyles;
        yankee = entity.bind(michal)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot4;
        entity = {};
        report = yankee.container;
        entity['style'] = report;
        report = {};
        oscard = yankee.content;
        report['style'] = oscard;
        option = _closure1_slot5;
        golfie = _closure1_slot3;
        oscard = {};
        kiloes = _closure1_slot1;
        romeon = 5;
        romeon = echoed[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        oscard['source'] = romeon;
        verify = verify.image;
        oscard['style'] = verify;
        golfie = option.bind(tangon)(golfie, oscard);
        oscard = new Array(3);
        oscard[0] = golfie;
        golfie = 6;
        verify = echoed[golfie];
        verify = result.bind(tangon)(verify);
        romeon = verify.Text;
        verify = {'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
        kiloes = yankee.title;
        verify['style'] = kiloes;
        verify['children'] = foxtra;
        verify = option.bind(tangon)(romeon, verify);
        oscard[1] = verify;
        golfie = echoed[golfie];
        golfie = result.bind(tangon)(golfie);
        verify = golfie.Text;
        golfie = {'variant': 'text-md/normal', 'color': 'header-secondary'};
        romeon = yankee.body;
        golfie['style'] = romeon;
        golfie['children'] = offset;
        golfie = option.bind(tangon)(verify, golfie);
        oscard[2] = golfie;
        report['children'] = oscard;
        oscard = zuuluu.bind(tangon)(michal, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = 7;
        oscard = echoed[oscard];
        oscard = result.bind(tangon)(oscard);
        golfie = oscard.SafeAreaPaddingView;
        oscard = {};
        verify = true;
        oscard['bottom'] = verify;
        verify = yankee.footerContainer;
        oscard['style'] = verify;
        verify = 8;
        verify = echoed[verify];
        verify = result.bind(tangon)(verify);
        offset = verify.Stack;
        verify = {'spacing': 8, 'direction': 'vertical'};
        yankee = yankee.footerButton;
        verify['style'] = yankee;
        romeon = 9;
        yankee = echoed[romeon];
        yankee = result.bind(tangon)(yankee);
        foxtra = yankee.Button;
        yankee = {'size': 'lg', 'variant': 'primary'};
        kiloes = 10;
        output = echoed[kiloes];
        output = result.bind(tangon)(output);
        source = output.intl;
        update = source.string;
        output = echoed[kiloes];
        output = result.bind(tangon)(output);
        output = output.t;
        output = output.5911LS;
        output = update.bind(source)(output);
        yankee['text'] = output;
        yankee['onPress'] = sizing;
        foxtra = option.bind(tangon)(foxtra, yankee);
        yankee = new Array(2);
        yankee[0] = foxtra;
        romeon = echoed[romeon];
        romeon = result.bind(tangon)(romeon);
        foxtra = romeon.Button;
        romeon = {'size': 'lg', 'variant': 'secondary'};
        sizing = echoed[kiloes];
        sizing = result.bind(tangon)(sizing);
        output = sizing.intl;
        sizing = output.string;
        kiloes = echoed[kiloes];
        kiloes = result.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        kiloes = kiloes.ETE/oK;
        kiloes = sizing.bind(output)(kiloes);
        romeon['text'] = kiloes;
        romeon['onPress'] = backup;
        romeon = option.bind(tangon)(foxtra, romeon);
        yankee[1] = romeon;
        verify['children'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['TwoWayLinkError'] = michal;
    return entity;
})();