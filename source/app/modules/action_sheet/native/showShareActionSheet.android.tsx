// app/modules/action_sheet/native/showShareActionSheet.android.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = report.bind(entity)(tangon);
    option = tangon.NativeEventEmitter;
    tangon = tangon.NativeModules;
    var _closure1_slot2 = tangon;
    romeon = tangon.ShareManager;
    golfie = option.prototype;
    golfie = Object.create(golfie, {constructor: {value: option}});
    foxtra = golfie;
    tangon = new foxtra[option](romeon, yankee);
    verify = tangon instanceof Object ? tangon : golfie;
    option = verify.addListener;
    golfie = 'share-broadcast-receiver-app-clicked';
    tangon = function(argFoo) {
        entity = argFoo;
        report = entity.app;
        tangon = entity.location;
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.trackAppClickInNativeShareSheet;
        michal = michal.bind(zuuluu)(report, tangon);
        return entity;
    };
    tangon = option.bind(verify)(golfie, tangon);
    tangon = 2;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/action_sheet/native/showShareActionSheet.android.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo, argBar) { // Original name: showShareActionSheet
        entity = argFoo;
        michal = _closure1_slot2;
        oscard = michal.ShareManager;
        report = oscard.share;
        offset = entity.message;
        verify = entity.url;
        option = entity.subject;
        golfie = argBar;
        yankee = oscard;
        entity = yankee[report](offset, verify, option, golfie, oscard);
        entity = undefined;
        return entity;
    };
    zuuluu['showShareActionSheet'] = michal;
    return entity;
})();