// app/modules/panels/native/PanelsConfig.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    verify = argBar;
    zuuluu = argFre;
    offset = argPlu;
    michal = global;
    oscard = michal.Object;
    report = oscard.defineProperty;
    tangon = {};
    michal = true;
    tangon['value'] = michal;
    michal = '__esModule';
    michal = report.bind(oscard)(zuuluu, michal, tangon);
    michal = {};
    tangon = 'function isTimingConfig_PanelsConfigTsx1(obj){return obj!=null&&obj.duration!=null;}';
    michal['code'] = tangon;
    var _closure1_slot0 = michal;
    michal = function() {
        entity = function(argFoo) { // Original name: isTimingConfig
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                michal = argFoo;
                zuuluu = null;
                entity = zuuluu != michal;
                if(!entity) { _fun00002_ip = 21; continue _fun00001 }
 12:
                michal = michal.duration;
                entity = zuuluu != michal;
 21:
                return entity;
            }
        };
        michal = {};
        entity['__closure'] = michal;
        michal = 14033676769786.0;
        entity['__workletHash'] = michal;
        michal = _closure1_slot0;
        entity['__initData'] = michal;
        return entity;
    };
    entity = undefined;
    golfie = michal.bind(entity)();
    tangon = {'mass': 1, 'stiffness': 250, 'overshootClamping': true, 'restSpeedThreshold': 0.001, 'restDisplacementThreshold': 0.001};
    option = 1;
    oscard = 250;
    yankee = {};
    michal = 30;
    yankee['damping'] = michal;
    update = yankee;
    echoed = tangon;
    michal = copyDataProperties(update, echoed);
    michal = {};
    report = 20;
    michal['damping'] = report;
    update = michal;
    echoed = tangon;
    tangon = copyDataProperties(update, echoed);
    backup = {};
    backup['duration'] = oscard;
    sizing = 0;
    tangon = offset[sizing];
    tangon = verify.bind(entity)(tangon);
    tangon = tangon.STANDARD_EASING;
    backup['easing'] = tangon;
    foxtra = {};
    report = 200;
    foxtra['duration'] = report;
    tangon = offset[sizing];
    tangon = verify.bind(entity)(tangon);
    tangon = tangon.STANDARD_EASING;
    foxtra['easing'] = tangon;
    tangon = {};
    tangon['swipeSidePanelOpen'] = yankee;
    tangon['swipeSidePanelClose'] = michal;
    tangon['nonSwipeSidePanelOpen'] = backup;
    tangon['nonSwipeSidePanelClose'] = foxtra;
    romeon = 8;
    tangon['touchSlopForPanGesture'] = romeon;
    yankee = 240;
    tangon['minFlingVelocityX'] = yankee;
    michal = {};
    kiloes = {};
    kiloes['duration'] = oscard;
    output = offset[sizing];
    output = verify.bind(entity)(output);
    output = output.DECELERATED_EASING;
    kiloes['easing'] = output;
    michal['swipeSidePanelOpen'] = kiloes;
    kiloes = {};
    kiloes['duration'] = report;
    sizing = offset[sizing];
    sizing = verify.bind(entity)(sizing);
    sizing = sizing.DECELERATED_EASING;
    kiloes['easing'] = sizing;
    michal['swipeSidePanelClose'] = kiloes;
    michal['nonSwipeSidePanelOpen'] = backup;
    michal['nonSwipeSidePanelClose'] = foxtra;
    michal['touchSlopForPanGesture'] = romeon;
    michal['minFlingVelocityX'] = yankee;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'modules/panels/native/PanelsConfig.tsx';
    option = verify.bind(offset)(option);
    zuuluu['isTimingConfig'] = golfie;
    zuuluu['SIDE_PANEL_OPEN_DURATION_MS'] = oscard;
    zuuluu['SIDE_PANEL_CLOSE_DURATION_MS'] = report;
    zuuluu['DEFAULT_PANELS_ANIMATION_CONFIG'] = tangon;
    zuuluu['ANDROID_PANELS_ANIMATION_CONFIG'] = michal;
    return entity;
})();