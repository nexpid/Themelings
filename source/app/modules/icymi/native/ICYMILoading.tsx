// app/modules/icymi/native/ICYMILoading.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo, argBar, argBaz) { // Original name: placeholderRowWidth
        michal = argBar;
        entity = global;
        report = entity.Math;
        tangon = report.sin;
        zuuluu = argFoo;
        tangon = tangon.bind(report)(zuuluu);
        zuuluu = 100;
        zuuluu = zuuluu * tangon;
        tangon = entity.Math;
        entity = tangon.floor;
        entity = entity.bind(tangon)(zuuluu);
        zuuluu = zuuluu - entity;
        entity = argBaz;
        entity = entity - michal;
        entity = zuuluu * entity;
        entity = entity + michal;
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = function() { // Original name: ICYMILoadingItem
        entity = _closure1_slot8;
        tangon = undefined;
        kiloes = entity.bind(tangon)();
        yankee = _closure1_slot1;
        verify = _closure1_slot2;
        entity = 6;
        entity = verify[entity];
        michal = yankee.bind(tangon)(entity);
        entity = {'visible': true, 'animated': true};
        backup = michal.bind(tangon)(entity);
        report = _closure1_slot3;
        zuuluu = report.useMemo;
        michal = function() {
            entity = {};
            michal = global;
            oscard = michal.Math;
            tangon = oscard.floor;
            report = michal.Math;
            zuuluu = report.random;
            zuuluu = zuuluu.bind(report)();
            report = 10;
            zuuluu = report * zuuluu;
            zuuluu = tangon.bind(oscard)(zuuluu);
            entity['avatarTitle'] = zuuluu;
            oscard = michal.Math;
            tangon = oscard.floor;
            golfie = michal.Math;
            zuuluu = golfie.random;
            zuuluu = zuuluu.bind(golfie)();
            zuuluu = report * zuuluu;
            zuuluu = tangon.bind(oscard)(zuuluu);
            entity['title'] = zuuluu;
            tangon = michal.Math;
            zuuluu = tangon.floor;
            oscard = michal.Math;
            michal = oscard.random;
            michal = michal.bind(oscard)();
            michal = report * michal;
            michal = zuuluu.bind(tangon)(michal);
            entity['subtitle'] = michal;
            return entity;
        };
        entity = new Array(0);
        entity = zuuluu.bind(report)(michal, entity);
        ctrled = entity.avatarTitle;
        record = entity.title;
        config = entity.subtitle;
        zuuluu = _closure1_slot6;
        michal = _closure1_slot7;
        entity = {};
        golfie = _closure1_slot4;
        report = {};
        option = kiloes.container;
        report['style'] = option;
        foxtra = _closure1_slot6;
        romeon = _closure1_slot4;
        option = {};
        offset = kiloes.avatarRow;
        option['style'] = offset;
        result = _closure1_slot5;
        offset = 7;
        sizing = verify[offset];
        sizing = yankee.bind(tangon)(sizing);
        output = sizing.View;
        sizing = {};
        update = kiloes.backgroundColor;
        echoed = new Array(3);
        echoed[0] = update;
        update = kiloes.avatar;
        echoed[1] = update;
        echoed[2] = backup;
        sizing['style'] = echoed;
        output = result.bind(tangon)(output, sizing);
        sizing = new Array(2);
        sizing[0] = output;
        update = _closure1_slot5;
        output = verify[offset];
        output = yankee.bind(tangon)(output);
        result = output.View;
        output = {};
        echoed = kiloes.backgroundColor;
        vacuum = new Array(4);
        vacuum[0] = echoed;
        echoed = kiloes.avatarTitle;
        vacuum[1] = echoed;
        vacuum[2] = backup;
        cntext = {};
        sequen = _closure1_slot9;
        source = 30;
        echoed = 60;
        target = sequen.bind(tangon)(ctrled, source, echoed);
        echoed = global;
        source = echoed.HermesInternal;
        papara = source.concat;
        ctrled = '';
        source = '%';
        papara = papara.bind(ctrled)(target, source);
        cntext['width'] = papara;
        vacuum[3] = cntext;
        output['style'] = vacuum;
        output = update.bind(tangon)(result, output);
        sizing[1] = output;
        option['children'] = sizing;
        romeon = foxtra.bind(tangon)(romeon, option);
        option = new Array(4);
        option[0] = romeon;
        sizing = _closure1_slot5;
        romeon = verify[offset];
        romeon = yankee.bind(tangon)(romeon);
        foxtra = romeon.View;
        romeon = {};
        result = kiloes.backgroundColor;
        output = new Array(4);
        output[0] = result;
        result = kiloes.title;
        output[1] = result;
        output[2] = backup;
        result = {};
        vacuum = 75;
        update = 100;
        cntext = sequen.bind(tangon)(record, vacuum, update);
        record = echoed.HermesInternal;
        record = record.concat;
        record = record.bind(ctrled)(cntext, source);
        result['width'] = record;
        output[3] = result;
        romeon['style'] = output;
        romeon = sizing.bind(tangon)(foxtra, romeon);
        option[1] = romeon;
        sizing = _closure1_slot5;
        romeon = verify[offset];
        romeon = yankee.bind(tangon)(romeon);
        foxtra = romeon.View;
        romeon = {};
        result = kiloes.backgroundColor;
        output = new Array(4);
        output[0] = result;
        result = kiloes.subtitle;
        output[1] = result;
        output[2] = backup;
        result = {};
        update = sequen.bind(tangon)(config, vacuum, update);
        echoed = echoed.HermesInternal;
        echoed = echoed.concat;
        echoed = echoed.bind(ctrled)(update, source);
        result['width'] = echoed;
        output[3] = result;
        romeon['style'] = output;
        romeon = sizing.bind(tangon)(foxtra, romeon);
        option[2] = romeon;
        romeon = _closure1_slot5;
        offset = verify[offset];
        offset = yankee.bind(tangon)(offset);
        yankee = offset.View;
        offset = {};
        sizing = kiloes.backgroundColor;
        foxtra = new Array(3);
        foxtra[0] = sizing;
        kiloes = kiloes.image;
        foxtra[1] = kiloes;
        foxtra[2] = backup;
        offset['style'] = foxtra;
        offset = romeon.bind(tangon)(yankee, offset);
        option[3] = offset;
        report['children'] = option;
        golfie = zuuluu.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        option = _closure1_slot5;
        golfie = _closure1_slot0;
        oscard = 8;
        oscard = verify[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.Separator;
        oscard = {};
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot10 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    backup = tangon.ICYMI_MARGIN;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot6 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 5;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_MOD_SUBTLE;
    verify['backgroundColor'] = foxtra;
    tangon['backgroundColor'] = verify;
    verify = {};
    verify['padding'] = backup;
    tangon['container'] = verify;
    verify = {'flexDirection': 'row', 'alignItems': 'center'};
    verify['marginBottom'] = backup;
    tangon['avatarRow'] = verify;
    verify = {'width': 40, 'height': 40};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.md;
    verify['borderRadius'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['marginRight'] = foxtra;
    tangon['avatar'] = verify;
    foxtra = 10;
    verify = {'height': 18, 'borderRadius': 10, 'flexShrink': 1};
    tangon['avatarTitle'] = verify;
    verify = {};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    verify['height'] = kiloes;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_12;
    verify['marginBottom'] = kiloes;
    verify['borderRadius'] = foxtra;
    verify['flexShrink'] = romeon;
    tangon['title'] = verify;
    verify = {};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.spacing;
    kiloes = kiloes.PX_16;
    verify['height'] = kiloes;
    verify['marginBottom'] = backup;
    verify['borderRadius'] = foxtra;
    verify['flexShrink'] = romeon;
    tangon['subtitle'] = verify;
    verify = {'width': '100%', 'height': 240};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.lg;
    verify['borderRadius'] = offset;
    tangon['image'] = verify;
    verify = {};
    tangon['separator'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/icymi/native/ICYMILoading.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: ICYMILoading
        tangon = _closure1_slot6;
        zuuluu = _closure1_slot7;
        michal = {};
        golfie = _closure1_slot5;
        option = _closure1_slot10;
        entity = undefined;
        report = {};
        golfie = golfie.bind(entity)(option, report);
        report = new Array(2);
        report[0] = golfie;
        golfie = _closure1_slot5;
        oscard = {};
        oscard = golfie.bind(entity)(option, oscard);
        report[1] = oscard;
        michal['children'] = report;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    zuuluu['ICYMILoading'] = michal;
    return entity;
})();