// app/modules/application_commands/native/ApplicationSectionHeader.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    entity = 0;
    report = golfie[entity];
    michal = argCor;
    entity = undefined;
    michal = michal.bind(entity)(report);
    michal = 1;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    michal = michal.View;
    var _closure1_slot3 = michal;
    michal = 2;
    michal = golfie[michal];
    michal = oscard.bind(entity)(michal);
    report = michal.jsx;
    var _closure1_slot4 = report;
    michal = michal.jsxs;
    var _closure1_slot5 = michal;
    michal = 3;
    michal = golfie[michal];
    verify = oscard.bind(entity)(michal);
    option = verify.createStyles;
    report = {};
    offset = {'flexDirection': 'row', 'alignItems': 'center', 'height': 32, 'backgroundColor': null, 'paddingHorizontal': 16};
    michal = 32;
    yankee = 4;
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = foxtra;
    report['applicationHeaderWrapper'] = offset;
    offset = {'width': 16, 'height': 16, 'borderRadius': null, 'marginRight': 8};
    yankee = golfie[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.sm;
    offset['borderRadius'] = yankee;
    report['applicationIcon'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot6 = report;
    report = 9;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/application_commands/native/ApplicationSectionHeader.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            verify = entity.section;
            entity = _closure1_slot6;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            golfie = _closure1_slot0;
            foxtra = _closure1_slot2;
            entity = 5;
            entity = foxtra[entity];
            michal = golfie.bind(tangon)(entity);
            entity = michal.getApplicationCommandsIconSource;
            yankee = entity.bind(michal)(verify);
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            report = romeon.applicationHeaderWrapper;
            entity['style'] = report;
            report = 6;
            option = foxtra[report];
            option = golfie.bind(tangon)(option);
            offset = option.intl;
            option = offset.formatToPlainString;
            report = foxtra[report];
            report = golfie.bind(tangon)(report);
            report = report.t;
            golfie = report.Ocw/sL;
            report = {};
            foxtra = verify.name;
            report['applicationName'] = foxtra;
            report = option.bind(offset)(golfie, report);
            entity['accessibilityLabel'] = report;
            report = null;
            golfie = report != yankee;
            if(!golfie) { _fun00002_ip = 193; continue _fun00001 }
 147:
            offset = _closure1_slot4;
            option = _closure1_slot1;
            foxtra = _closure1_slot2;
            report = 7;
            report = foxtra[report];
            option = option.bind(tangon)(report);
            report = {};
            romeon = romeon.applicationIcon;
            report['style'] = romeon;
            report['source'] = yankee;
            golfie = offset.bind(tangon)(option, report);
 193:
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot4;
            golfie = _closure1_slot0;
            offset = _closure1_slot2;
            oscard = 8;
            oscard = offset[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'eyebrow', 'color': 'interactive-normal'};
            verify = verify.name;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['APPLICATION_SECTION_HEADER_HEIGHT'] = michal;
    return entity;
})();