// app/modules/application_directory/stores/ApplicationDirectorySearchStore.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    oscar = argBar;
    options = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = golf;
    entity = function(argFoo, argBar, argBaz) { // Original name: _callSuper
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tango = argFoo;
            oscar = argBaz;
            mike = _closure1_slot5;
            zulu = undefined;
            entity = argBar;
            verify = mike.bind(zulu)(entity);
            mike = _closure1_slot4;
            entity = _closure1_slot11;
            entity = entity.bind(zulu)();
            if(entity) { _fun00002_ip = 51; continue _fun00001 }
 38:
            entity = verify.apply;
            entity = entity.bind(verify)(tango, oscar);
            _fun00002_ip = 92; continue _fun00001;
 51:
            golf = global;
            options = golf.Reflect;
            golf = options.construct;
            if(oscar) { _fun00002_ip = 71; continue _fun00001 }
 67:
            oscar = new Array(0);
 71:
            report = _closure1_slot5;
            report = report.bind(zulu)(tango);
            report = report.constructor;
            entity = golf.bind(options)(verify, oscar, report);
 92:
            entity = mike.bind(zulu)(tango, entity);
            return entity;
        }
    };
    var _closure1_slot10 = entity;
    entity = function() { // Original name: _isNativeReflectConstruct
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
 2: // try_start_0
            mike = global;
            zulu = mike.Boolean;
            zulu = zulu.prototype;
            tango = zulu.valueOf;
            zulu = tango.call;
            options = mike.Reflect;
            golf = options.construct;
            oscar = mike.Boolean;
            report = new Array(0);
            mike = function() {
                entity = undefined;
                return entity;
            };
            mike = golf.bind(options)(oscar, report, mike);
            mike = zulu.bind(tango)(mike);
            mike = !mike;
            var _closure2_slot0 = mike;
 72: // try_end0
            _fun00004_ip = 76; continue _fun00003;
 74: // catch_target0
            CatchBlockStart(arg_register=1);
 76:
            mike = function() { // Original name: _isNativeReflectConstruct
                entity = _closure2_slot0;
                entity = !entity;
                entity = !entity;
                return entity;
            };
            _closure1_slot11 = mike;
            entity = undefined;
            entity = mike.bind(entity)();
            return entity;
        }
    };
    var _closure1_slot11 = entity;
    entity = function(argFoo) { // Original name: getCacheKey
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            vacuum = entity.query;
            control = entity.guildId;
            source = entity.page;
            update = entity.pageSize;
            echo = entity.categoryId;
            result = entity.integrationType;
            output = entity.minUserInstallCommandCount;
            sizing = entity.excludeAppsWithCustomInstallUrl;
            kilo = entity.excludeNonEmbeddedApps;
            backup = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
            foxtrot = entity.source;
            zulu = undefined;
            if(!(foxtrot === zulu)) { _fun00006_ip = 107; continue _fun00005 }
 72:
            mike = _closure1_slot0;
            tango = _closure1_slot1;
            entity = 5;
            entity = tango[entity];
            entity = mike.bind(zulu)(entity);
            entity = entity.SearchAppsRequestSource;
            foxtrot = entity.APP_DIRECTORY;
 107:
            entity = global;
            entity = entity.HermesInternal;
            romeo = entity.concat;
            variable45 = "query:'";
            variable43 = "' guildId:";
            variable41 = ' page:';
            variable39 = ' pageSize:';
            variable37 = ' categoryId:';
            quebec = ' integrationType:';
            whiskey = ' minUserInstallCommandCount:';
            sierra = ' excludeAppsWithCustomInstallUrl:';
            target = ' excludeNonEmbeddedApps:';
            context = ' excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand:';
            config = ' source:';
            variable44 = vacuum;
            variable42 = control;
            variable40 = source;
            variable38 = update;
            variable36 = echo;
            equality = result;
            lima = output;
            status = sizing;
            papa = kilo;
            record = backup;
            sequence = foxtrot;
            entity = variable45[romeo](variable44, variable43, variable42, variable41, variable40, variable39, variable38, variable37, variable36, quebec, equality, whiskey, lima, sierra, status, target, papa, context, record, config, sequence, vacuum);
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = global;
    verify = entity.Object;
    tango = verify.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = tango.bind(verify)(zulu, entity, mike);
    yankee = 0;
    mike = golf[yankee];
    entity = undefined;
    mike = options.bind(entity)(mike);
    var _closure1_slot2 = mike;
    offset = 1;
    mike = golf[offset];
    mike = options.bind(entity)(mike);
    var _closure1_slot3 = mike;
    verify = 2;
    mike = golf[verify];
    mike = options.bind(entity)(mike);
    var _closure1_slot4 = mike;
    mike = 3;
    mike = golf[mike];
    mike = options.bind(entity)(mike);
    var _closure1_slot5 = mike;
    mike = 4;
    mike = golf[mike];
    mike = options.bind(entity)(mike);
    var _closure1_slot6 = mike;
    mike = {};
    mike['FETCHING'] = yankee;
    tango = 'FETCHING';
    mike[yankee] = tango;
    mike['FETCHED'] = offset;
    tango = 'FETCHED';
    mike[offset] = tango;
    mike['ERROR'] = verify;
    tango = 'ERROR';
    mike[verify] = tango;
    var _closure1_slot7 = mike;
    tango = 6;
    tango = golf[tango];
    offset = options.bind(entity)(tango);
    tango = {};
    verify = 20;
    tango['max'] = verify;
    verify = offset.prototype;
    verify = Object.create(verify, {constructor: {value: offset}});
    kilo = verify;
    backup = tango;
    tango = new kilo[offset](backup, foxtrot);
    tango = tango instanceof Object ? tango : verify;
    var _closure1_slot8 = tango;
    tango = {};
    var _closure1_slot9 = tango;
    tango = 7;
    tango = golf[tango];
    tango = options.bind(entity)(tango);
    verify = tango.Store;
    tango = function(argFoo) {
        tango = function() { // Original name: ApplicationDirectorySearchStore
            report = this;
            tango = undefined;
            entity = undefined;
            oscar = _closure1_slot2;
            zulu = _closure2_slot0;
            oscar = oscar.bind(tango)(report, zulu);
            mike = _closure1_slot10;
            entity = arguments;
            entity = mike.bind(tango)(report, zulu, entity);
            return entity;
        };
        var _closure2_slot0 = tango;
        report = _closure1_slot6;
        zulu = undefined;
        mike = argFoo;
        mike = report.bind(zulu)(tango, mike);
        mike = _closure1_slot3;
        report = {};
        entity = 'getSearchResults';
        report['key'] = entity;
        entity = function(argFoo) { // Original name: value
            entity = argFoo;
            backup = entity.query;
            foxtrot = entity.guildId;
            romeo = entity.page;
            yankee = entity.pageSize;
            offset = entity.categoryId;
            verify = entity.integrationType;
            options = entity.minUserInstallCommandCount;
            golf = entity.excludeAppsWithCustomInstallUrl;
            oscar = entity.excludeNonEmbeddedApps;
            report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
            mike = entity.source;
            tango = _closure1_slot12;
            zulu = {};
            zulu['query'] = backup;
            zulu['guildId'] = foxtrot;
            zulu['page'] = romeo;
            zulu['pageSize'] = yankee;
            zulu['categoryId'] = offset;
            zulu['integrationType'] = verify;
            zulu['minUserInstallCommandCount'] = options;
            zulu['excludeAppsWithCustomInstallUrl'] = golf;
            zulu['excludeNonEmbeddedApps'] = oscar;
            zulu['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
            zulu['source'] = mike;
            mike = undefined;
            zulu = tango.bind(mike)(zulu);
            mike = _closure1_slot8;
            entity = mike.get;
            entity = entity.bind(mike)(zulu);
            return entity;
        };
        report['value'] = entity;
        entity = new Array(2);
        entity[0] = report;
        report = {};
        golf = 'getFetchState';
        report['key'] = golf;
        oscar = function(argFoo) { // Original name: value
            entity = argFoo;
            backup = entity.query;
            foxtrot = entity.guildId;
            romeo = entity.page;
            yankee = entity.pageSize;
            offset = entity.categoryId;
            verify = entity.integrationType;
            options = entity.minUserInstallCommandCount;
            golf = entity.excludeAppsWithCustomInstallUrl;
            oscar = entity.excludeNonEmbeddedApps;
            report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
            mike = entity.source;
            tango = _closure1_slot12;
            zulu = {};
            zulu['query'] = backup;
            zulu['guildId'] = foxtrot;
            zulu['page'] = romeo;
            zulu['pageSize'] = yankee;
            zulu['categoryId'] = offset;
            zulu['integrationType'] = verify;
            zulu['minUserInstallCommandCount'] = options;
            zulu['excludeAppsWithCustomInstallUrl'] = golf;
            zulu['excludeNonEmbeddedApps'] = oscar;
            zulu['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
            zulu['source'] = mike;
            mike = undefined;
            mike = tango.bind(mike)(zulu);
            entity = _closure1_slot9;
            entity = entity[mike];
            return entity;
        };
        report['value'] = oscar;
        entity[1] = report;
        entity = mike.bind(zulu)(tango, entity);
        return entity;
    };
    verify = tango.bind(entity)(verify);
    tango = 'ApplicationDirectorySearchStore';
    verify['displayName'] = tango;
    tango = 8;
    tango = golf[tango];
    backup = options.bind(entity)(tango);
    tango = {};
    offset = function(argFoo) { // Original name: handleSearchFetch
        entity = argFoo;
        backup = entity.query;
        foxtrot = entity.guildId;
        romeo = entity.page;
        yankee = entity.pageSize;
        offset = entity.categoryId;
        verify = entity.integrationType;
        options = entity.minUserInstallCommandCount;
        golf = entity.excludeAppsWithCustomInstallUrl;
        oscar = entity.excludeNonEmbeddedApps;
        report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
        entity = entity.source;
        tango = _closure1_slot12;
        mike = {};
        mike['query'] = backup;
        mike['guildId'] = foxtrot;
        mike['page'] = romeo;
        mike['pageSize'] = yankee;
        mike['categoryId'] = offset;
        mike['integrationType'] = verify;
        mike['minUserInstallCommandCount'] = options;
        mike['excludeAppsWithCustomInstallUrl'] = golf;
        mike['excludeNonEmbeddedApps'] = oscar;
        mike['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
        mike['source'] = entity;
        entity = undefined;
        report = tango.bind(entity)(mike);
        mike = {};
        kilo = _closure1_slot9;
        sizing = mike;
        tango = copyDataProperties(sizing, kilo);
        tango = _closure1_slot7;
        tango = tango.FETCHING;
        mike[report] = tango;
        _closure1_slot9 = mike;
        return entity;
    };
    tango['APPLICATION_DIRECTORY_FETCH_SEARCH'] = offset;
    offset = function(argFoo) { // Original name: handleSearchFetchSuccess
        entity = argFoo;
        kilo = entity.query;
        backup = entity.guildId;
        foxtrot = entity.page;
        romeo = entity.pageSize;
        yankee = entity.categoryId;
        sizing = entity.result;
        offset = entity.integrationType;
        verify = entity.minUserInstallCommandCount;
        options = entity.excludeAppsWithCustomInstallUrl;
        oscar = entity.excludeNonEmbeddedApps;
        report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
        entity = entity.source;
        tango = _closure1_slot12;
        mike = {};
        mike['query'] = kilo;
        mike['guildId'] = backup;
        mike['page'] = foxtrot;
        mike['pageSize'] = romeo;
        mike['categoryId'] = yankee;
        mike['integrationType'] = offset;
        mike['minUserInstallCommandCount'] = verify;
        mike['excludeAppsWithCustomInstallUrl'] = options;
        mike['excludeNonEmbeddedApps'] = oscar;
        mike['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
        mike['source'] = entity;
        entity = undefined;
        report = tango.bind(entity)(mike);
        oscar = _closure1_slot8;
        tango = oscar.set;
        mike = {};
        options = global;
        verify = options.Date;
        options = verify.now;
        options = options.bind(verify)();
        mike['lastFetchTimeMs'] = options;
        output = mike;
        golf = copyDataProperties(output, sizing);
        mike = tango.bind(oscar)(report, mike);
        mike = {};
        sizing = _closure1_slot9;
        output = mike;
        tango = copyDataProperties(output, sizing);
        tango = _closure1_slot7;
        tango = tango.FETCHED;
        mike[report] = tango;
        _closure1_slot9 = mike;
        return entity;
    };
    tango['APPLICATION_DIRECTORY_FETCH_SEARCH_SUCCESS'] = offset;
    report = function(argFoo) { // Original name: handleSearchFetchFailure
        entity = argFoo;
        backup = entity.query;
        foxtrot = entity.guildId;
        romeo = entity.page;
        yankee = entity.pageSize;
        offset = entity.categoryId;
        verify = entity.integrationType;
        options = entity.minUserInstallCommandCount;
        golf = entity.excludeAppsWithCustomInstallUrl;
        oscar = entity.excludeNonEmbeddedApps;
        report = entity.excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand;
        entity = entity.source;
        tango = _closure1_slot12;
        mike = {};
        mike['query'] = backup;
        mike['guildId'] = foxtrot;
        mike['page'] = romeo;
        mike['pageSize'] = yankee;
        mike['categoryId'] = offset;
        mike['integrationType'] = verify;
        mike['minUserInstallCommandCount'] = options;
        mike['excludeAppsWithCustomInstallUrl'] = golf;
        mike['excludeNonEmbeddedApps'] = oscar;
        mike['excludeEmbeddedAppsWithoutPrimaryEntryPointAppCommand'] = report;
        mike['source'] = entity;
        entity = undefined;
        report = tango.bind(entity)(mike);
        mike = {};
        kilo = _closure1_slot9;
        sizing = mike;
        tango = copyDataProperties(sizing, kilo);
        tango = _closure1_slot7;
        tango = tango.ERROR;
        mike[report] = tango;
        _closure1_slot9 = mike;
        return entity;
    };
    tango['APPLICATION_DIRECTORY_FETCH_SEARCH_FAILURE'] = report;
    report = verify.prototype;
    report = Object.create(report, {constructor: {value: verify}});
    kilo = report;
    foxtrot = tango;
    tango = new kilo[verify](backup, foxtrot, romeo);
    tango = tango instanceof Object ? tango : report;
    report = 9;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/application_directory/stores/ApplicationDirectorySearchStore.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    zulu['FetchState'] = mike;
    return entity;
})();