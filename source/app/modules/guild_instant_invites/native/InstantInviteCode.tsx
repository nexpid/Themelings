// app/modules/guild_instant_invites/native/InstantInviteCode.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    michal = function(argFoo) { // Original name: InstantInviteDetails
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.invite;
            entity = _closure1_slot8;
            tangon = undefined;
            foxtra = entity.bind(tangon)();
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 7;
            entity = zuuluu[entity];
            zuuluu = michal.bind(tangon)(entity);
            michal = zuuluu.getSimpleChannelIconComponent;
            entity = backup.channel;
            romeon = michal.bind(zuuluu)(entity);
            entity = null;
            if(!(entity == romeon)) { _fun00002_ip = 90; continue _fun00001 }
 64:
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 8;
            entity = zuuluu[entity];
            entity = michal.bind(tangon)(entity);
            romeon = entity.TextIcon;
 90:
            zuuluu = _closure1_slot7;
            update = _closure1_slot0;
            kiloes = _closure1_slot2;
            oscard = 9;
            entity = kiloes[oscard];
            entity = update.bind(tangon)(entity);
            michal = entity.Stack;
            entity = {};
            option = _closure1_slot7;
            report = kiloes[oscard];
            report = update.bind(tangon)(report);
            golfie = report.Stack;
            report = {'direction': 'horizontal', 'align': 'center'};
            yankee = _closure1_slot6;
            verify = {'color': 'icon-secondary', 'size': 'xs'};
            yankee = yankee.bind(tangon)(romeon, verify);
            verify = new Array(2);
            verify[0] = yankee;
            output = _closure1_slot6;
            yankee = 10;
            romeon = kiloes[yankee];
            romeon = update.bind(tangon)(romeon);
            sizing = romeon.Text;
            romeon = {'variant': 'text-md/semibold', 'color': 'text-secondary', 'style': null, 'lineClamp': 1};
            result = foxtra.channel;
            romeon['style'] = result;
            result = 11;
            result = kiloes[result];
            sequen = update.bind(tangon)(result);
            vacuum = sequen.computeChannelName;
            papara = backup.channel;
            cntext = _closure1_slot5;
            record = _closure1_slot4;
            config = false;
            target = sequen;
            result = target[vacuum](papara, cntext, record, config, sequen);
            romeon['children'] = result;
            romeon = output.bind(tangon)(sizing, romeon);
            verify[1] = romeon;
            report['children'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot7;
            oscard = kiloes[oscard];
            oscard = update.bind(tangon)(oscard);
            golfie = oscard.Stack;
            oscard = {'direction': 'horizontal', 'align': 'center'};
            sizing = _closure1_slot6;
            verify = 12;
            verify = kiloes[verify];
            verify = update.bind(tangon)(verify);
            romeon = verify.ClockIcon;
            verify = {'size': 'xs', 'color': 'icon-secondary'};
            romeon = sizing.bind(tangon)(romeon, verify);
            verify = new Array(3);
            verify[0] = romeon;
            sizing = _closure1_slot6;
            yankee = kiloes[yankee];
            yankee = update.bind(tangon)(yankee);
            romeon = yankee.Text;
            yankee = {'variant': 'text-md/semibold', 'color': 'text-secondary'};
            output = 13;
            result = kiloes[output];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = kiloes[output];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.aTABY2;
            output = result.bind(echoed)(output);
            yankee['children'] = output;
            yankee = sizing.bind(tangon)(romeon, yankee);
            verify[1] = yankee;
            romeon = _closure1_slot6;
            yankee = _closure1_slot1;
            offset = 14;
            offset = kiloes[offset];
            yankee = yankee.bind(tangon)(offset);
            offset = {};
            foxtra = foxtra.time;
            offset['style'] = foxtra;
            foxtra = backup.getExpiresAt;
            foxtra = foxtra.bind(backup)();
            offset['deadline'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot9 = michal;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, report);
    foxtra = 0;
    option = golfie[foxtra];
    report = argCor;
    entity = undefined;
    report = report.bind(entity)(option);
    backup = 1;
    report = golfie[backup];
    report = oscard.bind(entity)(report);
    report = report.View;
    var _closure1_slot3 = report;
    report = 2;
    report = golfie[report];
    report = romeon.bind(entity)(report);
    var _closure1_slot4 = report;
    report = 3;
    report = golfie[report];
    report = romeon.bind(entity)(report);
    var _closure1_slot5 = report;
    report = 4;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    option = report.jsx;
    var _closure1_slot6 = option;
    report = report.jsxs;
    var _closure1_slot7 = report;
    report = 5;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    yankee = 8;
    offset = {'flexDirection': 'row', 'gap': 8, 'alignItems': 'center'};
    report['inviteDetails'] = offset;
    offset = {};
    offset['marginRight'] = yankee;
    yankee = 6;
    kiloes = golfie[yankee];
    kiloes = romeon.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.HEADER_PRIMARY;
    offset['color'] = kiloes;
    report['code'] = offset;
    offset = {};
    offset['flex'] = backup;
    report['flex'] = offset;
    offset = {};
    offset['flex'] = foxtra;
    report['channel'] = offset;
    offset = {};
    yankee = golfie[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_POSITIVE;
    offset['color'] = yankee;
    report['time'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot8 = report;
    report = 15;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/guild_instant_invites/native/InstantInviteCode.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: InstantInviteCode
        entity = argFoo;
        romeon = entity.invite;
        entity = _closure1_slot8;
        tangon = undefined;
        report = entity.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot3;
        entity = {};
        report = report.flex;
        entity['style'] = report;
        golfie = _closure1_slot7;
        offset = _closure1_slot0;
        foxtra = _closure1_slot2;
        report = 9;
        report = foxtra[report];
        report = offset.bind(tangon)(report);
        oscard = report.Stack;
        report = {};
        yankee = _closure1_slot6;
        option = 10;
        option = foxtra[option];
        option = offset.bind(tangon)(option);
        offset = option.Text;
        option = {'variant': 'text-lg/bold', 'tabularNumbers': true};
        foxtra = romeon.code;
        option['children'] = foxtra;
        offset = yankee.bind(tangon)(offset, option);
        option = new Array(2);
        option[0] = offset;
        yankee = _closure1_slot6;
        offset = _closure1_slot9;
        verify = {};
        verify['invite'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        option[1] = verify;
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = tangon;
    zuuluu['InstantInviteDetails'] = michal;
    return entity;
})();