// app/modules/guild_instant_invites/native/InstantInviteCode.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    romeo = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    mike = function(argFoo) { // Original name: InstantInviteDetails
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.invite;
            entity = _closure1_slot8;
            tango = undefined;
            foxtrot = entity.bind(tango)();
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 7;
            entity = zulu[entity];
            zulu = mike.bind(tango)(entity);
            mike = zulu.getSimpleChannelIconComponent;
            entity = backup.channel;
            romeo = mike.bind(zulu)(entity);
            entity = null;
            if(!(entity == romeo)) { _fun00002_ip = 90; continue _fun00001 }
 64:
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 8;
            entity = zulu[entity];
            entity = mike.bind(tango)(entity);
            romeo = entity.TextIcon;
 90:
            zulu = _closure1_slot7;
            update = _closure1_slot0;
            kilo = _closure1_slot2;
            oscar = 9;
            entity = kilo[oscar];
            entity = update.bind(tango)(entity);
            mike = entity.Stack;
            entity = {};
            options = _closure1_slot7;
            report = kilo[oscar];
            report = update.bind(tango)(report);
            golf = report.Stack;
            report = {'direction': 'horizontal', 'align': 'center'};
            yankee = _closure1_slot6;
            verify = {'color': 'icon-secondary', 'size': 'xs'};
            yankee = yankee.bind(tango)(romeo, verify);
            verify = new Array(2);
            verify[0] = yankee;
            output = _closure1_slot6;
            yankee = 10;
            romeo = kilo[yankee];
            romeo = update.bind(tango)(romeo);
            sizing = romeo.Text;
            romeo = {'variant': 'text-md/semibold', 'color': 'text-secondary', 'style': null, 'lineClamp': 1};
            result = foxtrot.channel;
            romeo['style'] = result;
            result = 11;
            result = kilo[result];
            sequence = update.bind(tango)(result);
            vacuum = sequence.computeChannelName;
            papa = backup.channel;
            context = _closure1_slot5;
            record = _closure1_slot4;
            config = false;
            target = sequence;
            result = target[vacuum](papa, context, record, config, sequence);
            romeo['children'] = result;
            romeo = output.bind(tango)(sizing, romeo);
            verify[1] = romeo;
            report['children'] = verify;
            golf = options.bind(tango)(golf, report);
            report = new Array(2);
            report[0] = golf;
            options = _closure1_slot7;
            oscar = kilo[oscar];
            oscar = update.bind(tango)(oscar);
            golf = oscar.Stack;
            oscar = {'direction': 'horizontal', 'align': 'center'};
            sizing = _closure1_slot6;
            verify = 12;
            verify = kilo[verify];
            verify = update.bind(tango)(verify);
            romeo = verify.ClockIcon;
            verify = {'size': 'xs', 'color': 'icon-secondary'};
            romeo = sizing.bind(tango)(romeo, verify);
            verify = new Array(3);
            verify[0] = romeo;
            sizing = _closure1_slot6;
            yankee = kilo[yankee];
            yankee = update.bind(tango)(yankee);
            romeo = yankee.Text;
            yankee = {'variant': 'text-md/semibold', 'color': 'text-secondary'};
            output = 13;
            result = kilo[output];
            result = update.bind(tango)(result);
            echo = result.intl;
            result = echo.string;
            output = kilo[output];
            output = update.bind(tango)(output);
            output = output.t;
            output = output.aTABY2;
            output = result.bind(echo)(output);
            yankee['children'] = output;
            yankee = sizing.bind(tango)(romeo, yankee);
            verify[1] = yankee;
            romeo = _closure1_slot6;
            yankee = _closure1_slot1;
            offset = 14;
            offset = kilo[offset];
            yankee = yankee.bind(tango)(offset);
            offset = {};
            foxtrot = foxtrot.time;
            offset['style'] = foxtrot;
            foxtrot = backup.getExpiresAt;
            foxtrot = foxtrot.bind(backup)();
            offset['deadline'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[2] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot9 = mike;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, report);
    foxtrot = 0;
    options = golf[foxtrot];
    report = argCorge;
    entity = undefined;
    report = report.bind(entity)(options);
    backup = 1;
    report = golf[backup];
    report = oscar.bind(entity)(report);
    report = report.View;
    var _closure1_slot3 = report;
    report = 2;
    report = golf[report];
    report = romeo.bind(entity)(report);
    var _closure1_slot4 = report;
    report = 3;
    report = golf[report];
    report = romeo.bind(entity)(report);
    var _closure1_slot5 = report;
    report = 4;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot6 = options;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.jsxs;
    var _closure1_slot7 = report;
    report = 5;
    report = golf[report];
    verify = oscar.bind(entity)(report);
    options = verify.createStyles;
    report = {};
    yankee = 8;
    offset = {'flexDirection': 'row', 'gap': 8, 'alignItems': 'center'};
    report['inviteDetails'] = offset;
    offset = {};
    offset['marginRight'] = yankee;
    yankee = 6;
    kilo = golf[yankee];
    kilo = romeo.bind(entity)(kilo);
    kilo = kilo.colors;
    kilo = kilo.HEADER_PRIMARY;
    offset['color'] = kilo;
    report['code'] = offset;
    offset = {};
    offset['flex'] = backup;
    report['flex'] = offset;
    offset = {};
    offset['flex'] = foxtrot;
    report['channel'] = offset;
    offset = {};
    yankee = golf[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.TEXT_POSITIVE;
    offset['color'] = yankee;
    report['time'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot8 = report;
    report = 15;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/guild_instant_invites/native/InstantInviteCode.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: InstantInviteCode
        entity = argFoo;
        romeo = entity.invite;
        entity = _closure1_slot8;
        tango = undefined;
        report = entity.bind(tango)();
        zulu = _closure1_slot6;
        mike = _closure1_slot3;
        entity = {};
        report = report.flex;
        entity['style'] = report;
        golf = _closure1_slot7;
        offset = _closure1_slot0;
        foxtrot = _closure1_slot2;
        report = 9;
        report = foxtrot[report];
        report = offset.bind(tango)(report);
        oscar = report.Stack;
        report = {};
        yankee = _closure1_slot6;
        options = 10;
        options = foxtrot[options];
        options = offset.bind(tango)(options);
        offset = options.Text;
        options = {'variant': 'text-lg/bold', 'tabularNumbers': true};
        foxtrot = romeo.code;
        options['children'] = foxtrot;
        offset = yankee.bind(tango)(offset, options);
        options = new Array(2);
        options[0] = offset;
        yankee = _closure1_slot6;
        offset = _closure1_slot9;
        verify = {};
        verify['invite'] = romeo;
        verify = yankee.bind(tango)(offset, verify);
        options[1] = verify;
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = tango;
    zulu['InstantInviteDetails'] = mike;
    return entity;
})();