// app/modules/instant_invite/native/components/InstantInviteEmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    foxtra = 4;
    tangon = oscard[foxtra];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    tangon['container'] = verify;
    verify = {'padding': 0, 'marginBottom': 16};
    tangon['emptyStateContainer'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['emptyStateArt'] = verify;
    verify = {};
    verify['marginBottom'] = foxtra;
    tangon['emptyStateTitle'] = verify;
    verify = {'maxWidth': '100%', 'flexDirection': 'row', 'marginBottom': 8, 'gap': 8};
    tangon['linkContainer'] = verify;
    verify = {};
    verify['flexShrink'] = romeon;
    tangon['inviteInput'] = verify;
    verify = {};
    verify['marginBottom'] = offset;
    tangon['expireCaption'] = verify;
    verify = {'width': 48, 'height': 48, 'justifyContent': 'center', 'alignItems': 'center'};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['settingsButton'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/instant_invite/native/components/InstantInviteEmptyState.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            foxtra = entity.link;
            offset = entity.onCopy;
            verify = entity.onShare;
            output = entity.onPressSettings;
            entity = _closure1_slot7;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            source = _closure1_slot0;
            result = _closure1_slot2;
            entity = 6;
            entity = result[entity];
            report = source.bind(tangon)(entity);
            zuuluu = report.useStateFromStores;
            entity = _closure1_slot4;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure1_slot4;
                entity = michal.getInviteSettings;
                entity = entity.bind(michal)();
                return entity;
            };
            entity = zuuluu.bind(report)(michal, entity);
            var _closure2_slot0 = entity;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot3;
            entity = {};
            report = romeon.container;
            entity['style'] = report;
            sizing = _closure1_slot5;
            kiloes = _closure1_slot1;
            report = 7;
            report = result[report];
            oscard = kiloes.bind(tangon)(report);
            report = {};
            golfie = romeon.emptyStateContainer;
            report['containerStyle'] = golfie;
            golfie = romeon.emptyStateArt;
            report['imageStyle'] = golfie;
            golfie = romeon.emptyStateTitle;
            report['titleStyle'] = golfie;
            golfie = 8;
            golfie = result[golfie];
            golfie = kiloes.bind(tangon)(golfie);
            report['source'] = golfie;
            backup = 9;
            golfie = result[backup];
            golfie = source.bind(tangon)(golfie);
            update = golfie.intl;
            echoed = update.string;
            golfie = result[backup];
            golfie = source.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.tQc0l5;
            golfie = echoed.bind(update)(golfie);
            report['title'] = golfie;
            golfie = result[backup];
            golfie = source.bind(tangon)(golfie);
            update = golfie.intl;
            echoed = update.string;
            golfie = result[backup];
            golfie = source.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.DXgdcH;
            golfie = echoed.bind(update)(golfie);
            report['body'] = golfie;
            oscard = sizing.bind(tangon)(oscard, report);
            report = new Array(4);
            report[0] = oscard;
            oscard = {};
            golfie = romeon.linkContainer;
            oscard['style'] = golfie;
            golfie = 10;
            golfie = result[golfie];
            kiloes = kiloes.bind(tangon)(golfie);
            golfie = {'accessibilityRole': 'button', 'onPress': null, 'editable': false, 'value': null, 'style': null, 'forceAccessibleContainer': true};
            result = 'button';
            golfie['onPress'] = offset;
            offset = null;
            echoed = offset != foxtra;
            offset = '';
            if(!echoed) { _fun00002_ip = 367; continue _fun00001 }
 364:
            offset = foxtra;
 367:
            golfie['value'] = offset;
            offset = romeon.inviteInput;
            golfie['style'] = offset;
            foxtra = _closure1_slot0;
            offset = _closure1_slot2;
            echoed = 11;
            echoed = offset[echoed];
            echoed = foxtra.bind(tangon)(echoed);
            echoed = echoed.ClearButtonVisibility;
            echoed = echoed.NEVER;
            golfie['clearButtonVisibility'] = echoed;
            kiloes = sizing.bind(tangon)(kiloes, golfie);
            golfie = new Array(2);
            golfie[0] = kiloes;
            option = _closure1_slot5;
            kiloes = 12;
            kiloes = offset[kiloes];
            kiloes = foxtra.bind(tangon)(kiloes);
            sizing = kiloes.PressableOpacity;
            kiloes = {};
            echoed = offset[backup];
            echoed = foxtra.bind(tangon)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = offset[backup];
            echoed = foxtra.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.3D5yo6;
            echoed = update.bind(source)(echoed);
            kiloes['accessibilityLabel'] = echoed;
            kiloes['accessibilityRole'] = result;
            kiloes['onPress'] = output;
            output = romeon.settingsButton;
            kiloes['style'] = output;
            output = 13;
            output = offset[output];
            output = foxtra.bind(tangon)(output);
            result = output.SettingsIcon;
            output = {};
            output = option.bind(tangon)(result, output);
            kiloes['children'] = output;
            kiloes = option.bind(tangon)(sizing, kiloes);
            golfie[1] = kiloes;
            oscard['children'] = golfie;
            oscard = zuuluu.bind(tangon)(michal, oscard);
            report[1] = oscard;
            oscard = 14;
            oscard = offset[oscard];
            oscard = foxtra.bind(tangon)(oscard);
            golfie = oscard.Text;
            oscard = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            romeon = romeon.expireCaption;
            oscard['style'] = romeon;
            yankee = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = _closure2_slot0;
                    entity = null;
                    if(!(entity != michal)) { _fun00004_ip = 275; continue _fun00003 }
 18:
                    golfie = _closure1_slot1;
                    tangon = _closure1_slot2;
                    offset = 15;
                    oscard = tangon[offset];
                    tangon = undefined;
                    oscard = golfie.bind(tangon)(oscard);
                    option = oscard.getMaxAgeOptions;
                    golfie = option.find;
                    oscard = function(argFoo) {
                        entity = argFoo;
                        michal = entity.value;
                        entity = _closure2_slot0;
                        entity = entity.maxAge;
                        entity = michal === entity;
                        return entity;
                    };
                    option = golfie.bind(option)(oscard);
                    verify = entity != option;
                    oscard = '';
                    golfie = oscard;
                    if(!verify) { _fun00004_ip = 87; continue _fun00003 }
 81:
                    golfie = option.descriptiveLabel;
 87:
                    verify = _closure1_slot1;
                    option = _closure1_slot2;
                    option = option[offset];
                    option = verify.bind(tangon)(option);
                    verify = option.getMaxUsesOptions;
                    option = verify.find;
                    report = function(argFoo) {
                        entity = argFoo;
                        michal = entity.value;
                        entity = _closure2_slot0;
                        entity = entity.maxUses;
                        entity = michal === entity;
                        return entity;
                    };
                    report = option.bind(verify)(report);
                    option = entity != report;
                    if(!option) { _fun00004_ip = 141; continue _fun00003 }
 135:
                    oscard = report.descriptiveLabel;
 141:
                    zuuluu = _closure2_slot0;
                    report = zuuluu.maxAge;
                    zuuluu = 0;
                    if(!(zuuluu !== report)) { _fun00004_ip = 192; continue _fun00003 }
 157:
                    report = _closure1_slot0;
                    option = _closure1_slot2;
                    zuuluu = 9;
                    zuuluu = option[zuuluu];
                    zuuluu = report.bind(tangon)(zuuluu);
                    zuuluu = zuuluu.t;
                    report = zuuluu.dqPWMD;
                    _fun00004_ip = 225; continue _fun00003;
 192:
                    option = _closure1_slot0;
                    verify = _closure1_slot2;
                    zuuluu = 9;
                    zuuluu = verify[zuuluu];
                    zuuluu = option.bind(tangon)(zuuluu);
                    zuuluu = zuuluu.t;
                    report = zuuluu.99ISmp;
 225:
                    zuuluu = _closure1_slot0;
                    option = _closure1_slot2;
                    michal = 9;
                    michal = option[michal];
                    michal = zuuluu.bind(tangon)(michal);
                    tangon = michal.intl;
                    zuuluu = tangon.format;
                    michal = {};
                    michal['maxAge'] = golfie;
                    michal['maxUses'] = oscard;
                    michal = zuuluu.bind(tangon)(report, michal);
                    return michal;
 275:
                    return entity;
                }
            };
            yankee = yankee.bind(tangon)();
            oscard['children'] = yankee;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            oscard = 16;
            oscard = offset[oscard];
            oscard = foxtra.bind(tangon)(oscard);
            golfie = oscard.Button;
            oscard = {};
            yankee = offset[backup];
            yankee = foxtra.bind(tangon)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = offset[backup];
            offset = foxtra.bind(tangon)(offset);
            offset = offset.t;
            offset = offset.Ej3B3d;
            offset = yankee.bind(romeon)(offset);
            oscard['text'] = offset;
            oscard['onPress'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[3] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();