// app/modules/collectibles/native/AvatarDecorationProductPreview.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot5 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {'position': 'relative', 'paddingBottom': 38};
    golfie['container'] = tangon;
    tangon = {'position': 'absolute', 'bottom': 0, 'right': 0, 'borderRadius': null, 'backgroundColor': null, 'borderWidth': 1};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.sm;
    tangon['borderRadius'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    tangon['backgroundColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    tangon['borderColor'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.shadows;
    kiloes = romeon.SHADOW_HIGH;
    sizing = tangon;
    romeon = copyDataProperties(sizing, kiloes);
    foxtra = '70%';
    romeon = 'width';
    tangon[romeon] = foxtra;
    foxtra = 12;
    romeon = 'padding';
    tangon[romeon] = foxtra;
    golfie['chat'] = tangon;
    tangon = {'flexDirection': 'row', 'gap': 10};
    golfie['messageRow'] = tangon;
    tangon = {};
    romeon = 'column';
    tangon['flexDirection'] = romeon;
    golfie['messageColumn'] = tangon;
    tangon = {'height': 17, 'flexDirection': 'row', 'alignItems': 'flex-end'};
    golfie['messageHeader'] = tangon;
    tangon = {};
    romeon = '95%';
    tangon['width'] = romeon;
    golfie['messagePreview'] = tangon;
    tangon = {'flexDirection': 'row', 'alignItems': 'center', 'justifyContent': 'space-between', 'backgroundColor': null, 'borderRadius': null, 'marginTop': 13, 'height': 32, 'paddingHorizontal': 7};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.REDESIGN_CHAT_INPUT_BACKGROUND;
    tangon['backgroundColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.sm;
    tangon['borderRadius'] = offset;
    golfie['chatInput'] = tangon;
    tangon = 20;
    offset = {'height': 20, 'width': 20};
    golfie['chatIcon'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot7 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/collectibles/native/AvatarDecorationProductPreview.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot7;
            tangon = undefined;
            kiloes = michal.bind(tangon)();
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            michal = 6;
            michal = report[michal];
            oscard = zuuluu.bind(tangon)(michal);
            michal = oscard.useCurrentUser;
            update = michal.bind(oscard)();
            michal = 7;
            michal = report[michal];
            golfie = zuuluu.bind(tangon)(michal);
            oscard = golfie.useStateFromStores;
            michal = _closure1_slot4;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot4;
                entity = michal.getPendingAvatarDecoration;
                entity = entity.bind(michal)();
                return entity;
            };
            foxtra = oscard.bind(golfie)(zuuluu, michal);
            zuuluu = _closure1_slot1;
            michal = 8;
            michal = report[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            verify = null;
            report = verify == foxtra;
            michal = undefined;
            if(report) { _fun00002_ip = 120; continue _fun00001 }
 114:
            michal = foxtra.skuId;
 120:
            michal = zuuluu.bind(tangon)(michal);
            offset = michal.product;
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 9;
            michal = report[michal];
            michal = zuuluu.bind(tangon)(michal);
            entity = function() {
                zuuluu = _closure1_slot0;
                michal = _closure1_slot2;
                entity = 10;
                michal = michal[entity];
                entity = undefined;
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.calendarFormat;
                entity = global;
                entity = entity.Date;
                tangon = entity.prototype;
                tangon = Object.create(tangon, {constructor: {value: entity}});
                oscard = tangon;
                entity = new oscard[entity](report);
                entity = entity instanceof Object ? entity : tangon;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            vacuum = michal.bind(tangon)(entity);
            zuuluu = _closure1_slot6;
            michal = _closure1_slot3;
            entity = {};
            oscard = kiloes.container;
            entity['style'] = oscard;
            oscard = 'box-none';
            entity['pointerEvents'] = oscard;
            oscard = _closure1_slot0;
            source = 11;
            golfie = report[source];
            golfie = oscard.bind(tangon)(golfie);
            option = golfie.intl;
            golfie = option.formatToPlainString;
            report = report[source];
            report = oscard.bind(tangon)(report);
            report = report.t;
            oscard = report.hORo2d;
            report = {};
            yankee = verify == offset;
            verify = undefined;
            if(yankee) { _fun00002_ip = 257; continue _fun00001 }
 252:
            verify = offset.name;
 257:
            report['avatarDecoration'] = verify;
            report = golfie.bind(option)(oscard, report);
            entity['accessibilityLabel'] = report;
            report = 'image';
            entity['accessibilityRole'] = report;
            backup = _closure1_slot5;
            output = _closure1_slot1;
            result = _closure1_slot2;
            report = 12;
            report = result[report];
            oscard = output.bind(tangon)(report);
            report = {};
            report['user'] = update;
            golfie = true;
            report['compact'] = golfie;
            golfie = {'width': '85%', 'height': '65%'};
            report['style'] = golfie;
            oscard = backup.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot6;
            golfie = _closure1_slot3;
            oscard = {};
            verify = kiloes.chat;
            oscard['style'] = verify;
            verify = {};
            offset = kiloes.messageRow;
            verify['style'] = offset;
            offset = 13;
            offset = result[offset];
            yankee = output.bind(tangon)(offset);
            offset = {};
            offset['user'] = update;
            offset['pendingAvatarDecoration'] = foxtra;
            romeon = _closure1_slot0;
            foxtra = 14;
            foxtra = result[foxtra];
            foxtra = romeon.bind(tangon)(foxtra);
            foxtra = foxtra.AvatarSizes;
            foxtra = foxtra.NORMAL;
            offset['size'] = foxtra;
            yankee = backup.bind(tangon)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = {};
            foxtra = kiloes.messageColumn;
            yankee['style'] = foxtra;
            foxtra = {};
            sizing = kiloes.messageHeader;
            foxtra['style'] = sizing;
            sizing = 15;
            sizing = result[sizing];
            echoed = output.bind(tangon)(sizing);
            sizing = {'user': null, 'textVariant': 'heading-sm/extrabold', 'hideSubname': true};
            sizing['user'] = update;
            echoed = backup.bind(tangon)(echoed, sizing);
            sizing = new Array(2);
            sizing[0] = echoed;
            echoed = 16;
            update = result[echoed];
            update = romeon.bind(tangon)(update);
            ctrled = update.Text;
            update = {'variant': 'text-xxs/normal', 'color': 'text-normal'};
            update['children'] = vacuum;
            update = backup.bind(tangon)(ctrled, update);
            sizing[1] = update;
            foxtra['children'] = sizing;
            sizing = option.bind(tangon)(golfie, foxtra);
            foxtra = new Array(2);
            foxtra[0] = sizing;
            sizing = {};
            update = kiloes.messagePreview;
            sizing['style'] = update;
            echoed = result[echoed];
            echoed = romeon.bind(tangon)(echoed);
            update = echoed.Text;
            echoed = {'variant': 'text-sm/normal', 'color': 'text-normal', 'lineClamp': 2};
            ctrled = result[source];
            ctrled = romeon.bind(tangon)(ctrled);
            vacuum = ctrled.intl;
            ctrled = vacuum.string;
            source = result[source];
            source = romeon.bind(tangon)(source);
            source = source.t;
            source = source.d5YwKy;
            source = ctrled.bind(vacuum)(source);
            echoed['children'] = source;
            echoed = backup.bind(tangon)(update, echoed);
            sizing['children'] = echoed;
            sizing = backup.bind(tangon)(golfie, sizing);
            foxtra[1] = sizing;
            yankee['children'] = foxtra;
            yankee = option.bind(tangon)(golfie, yankee);
            offset[1] = yankee;
            verify['children'] = offset;
            offset = option.bind(tangon)(golfie, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            yankee = kiloes.chatInput;
            offset['style'] = yankee;
            yankee = 17;
            yankee = result[yankee];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.CirclePlusIcon;
            yankee = {};
            foxtra = 5;
            foxtra = result[foxtra];
            foxtra = output.bind(tangon)(foxtra);
            foxtra = foxtra.colors;
            foxtra = foxtra.INTERACTIVE_NORMAL;
            yankee['color'] = foxtra;
            foxtra = kiloes.chatIcon;
            yankee['style'] = foxtra;
            romeon = backup.bind(tangon)(romeon, yankee);
            yankee = new Array(2);
            yankee[0] = romeon;
            romeon = 18;
            romeon = result[romeon];
            foxtra = output.bind(tangon)(romeon);
            romeon = {};
            sizing = 19;
            sizing = result[sizing];
            sizing = output.bind(tangon)(sizing);
            romeon['source'] = sizing;
            kiloes = kiloes.chatIcon;
            romeon['style'] = kiloes;
            romeon = backup.bind(tangon)(foxtra, romeon);
            yankee[1] = romeon;
            offset['children'] = yankee;
            offset = option.bind(tangon)(golfie, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();