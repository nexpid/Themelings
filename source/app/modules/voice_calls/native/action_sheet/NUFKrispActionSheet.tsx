// app/modules/voice_calls/native/action_sheet/NUFKrispActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    options = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.View;
    var _closure1_slot4 = options;
    tango = tango.Image;
    var _closure1_slot5 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.HelpdeskArticles;
    var _closure1_slot8 = golf;
    tango = tango.AnalyticsSections;
    var _closure1_slot9 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot10 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot11 = tango;
    tango = 6;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    offset = 16;
    verify = {'alignItems': 'center', 'padding': 16};
    tango['container'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 16, 'marginBottom': 8};
    tango['title'] = verify;
    verify = {'lineHeight': 18, 'textAlign': 'center'};
    tango['description'] = verify;
    verify = {'marginTop': 16, 'marginBottom': 16, 'flexDirection': 'row', 'alignItems': 'center'};
    tango['logoContainer'] = verify;
    verify = {};
    verify['marginLeft'] = offset;
    tango['link'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot12 = tango;
    tango = 20;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/voice_calls/native/action_sheet/NUFKrispActionSheet.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            oscar = entity.callback;
            var _closure2_slot0 = oscar;
            entity = _closure1_slot12;
            tango = undefined;
            output = entity.bind(tango)();
            zulu = _closure1_slot0;
            golf = _closure1_slot2;
            entity = 7;
            mike = golf[entity];
            verify = zulu.bind(tango)(mike);
            options = verify.useStateFromStores;
            mike = _closure1_slot7;
            report = new Array(1);
            report[0] = mike;
            mike = function() {
                entity = _closure1_slot7;
                entity = entity.theme;
                return entity;
            };
            report = options.bind(verify)(report, mike);
            entity = golf[entity];
            verify = zulu.bind(tango)(entity);
            options = verify.useStateFromStores;
            entity = _closure1_slot6;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                mike = _closure1_slot6;
                entity = mike.getKey;
                entity = entity.bind(mike)();
                return entity;
            };
            entity = options.bind(verify)(mike, entity);
            var _closure2_slot1 = entity;
            verify = _closure1_slot3;
            options = verify.useRef;
            mike = false;
            mike = options.bind(verify)(mike);
            var _closure2_slot2 = mike;
            mike = 8;
            mike = golf[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.isThemeLight;
            mike = mike.bind(zulu)(report);
            zulu = _closure1_slot1;
            report = _closure1_slot2;
            if(mike) { _fun00002_ip = 189; continue _fun00001 }
 175:
            mike = 10;
            mike = report[mike];
            sizing = zulu.bind(tango)(mike);
            _fun00002_ip = 201; continue _fun00001;
 189:
            mike = 9;
            mike = report[mike];
            sizing = zulu.bind(tango)(mike);
 201:
            report = _closure1_slot3;
            zulu = report.useEffect;
            mike = new Array(2);
            mike[0] = oscar;
            mike[1] = entity;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zulu = _closure2_slot1;
                    mike = 'NUF_KRISP_ACTIONSHEET';
                    mike = zulu === mike;
                    if(mike) { _fun00004_ip = 29; continue _fun00003 }
 20:
                    zulu = _closure2_slot2;
                    mike = zulu.current;
 29:
                    if(mike) { _fun00004_ip = 54; continue _fun00003 }
 32:
                    zulu = _closure2_slot0;
                    mike = undefined;
                    mike = zulu.bind(mike)();
                    mike = _closure2_slot2;
                    entity = true;
                    mike['current'] = entity;
 54:
                    entity = undefined;
                    return entity;
                }
            };
            entity = zulu.bind(report)(entity, mike);
            zulu = _closure1_slot10;
            result = _closure1_slot0;
            backup = _closure1_slot2;
            entity = 11;
            entity = backup[entity];
            entity = result.bind(tango)(entity);
            mike = entity.ActionSheet;
            entity = {};
            report = true;
            entity['startExpanded'] = report;
            golf = _closure1_slot11;
            oscar = _closure1_slot4;
            report = {};
            options = output.container;
            report['style'] = options;
            romeo = _closure1_slot5;
            options = {};
            foxtrot = _closure1_slot1;
            verify = 12;
            verify = backup[verify];
            verify = foxtrot.bind(tango)(verify);
            options['source'] = verify;
            verify = zulu.bind(tango)(romeo, options);
            options = new Array(5);
            options[0] = verify;
            verify = 13;
            offset = backup[verify];
            offset = result.bind(tango)(offset);
            echo = offset.Text;
            offset = {'style': null, 'maxFontSizeMultiplier': 2, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            kilo = output.title;
            offset['style'] = kilo;
            kilo = 14;
            update = backup[kilo];
            update = result.bind(tango)(update);
            vacuum = update.intl;
            source = vacuum.string;
            update = backup[kilo];
            update = result.bind(tango)(update);
            update = update.t;
            update = update.5iqgHR;
            update = source.bind(vacuum)(update);
            offset['children'] = update;
            offset = zulu.bind(tango)(echo, offset);
            options[1] = offset;
            verify = backup[verify];
            verify = result.bind(tango)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            echo = output.description;
            verify['style'] = echo;
            echo = backup[kilo];
            echo = result.bind(tango)(echo);
            source = echo.intl;
            update = source.string;
            echo = backup[kilo];
            echo = result.bind(tango)(echo);
            echo = echo.t;
            echo = echo.ChUi9v;
            echo = update.bind(source)(echo);
            verify['children'] = echo;
            verify = zulu.bind(tango)(offset, verify);
            options[2] = verify;
            verify = {};
            offset = output.logoContainer;
            verify['style'] = offset;
            offset = {};
            offset['source'] = sizing;
            romeo = zulu.bind(tango)(romeo, offset);
            offset = new Array(2);
            offset[0] = romeo;
            romeo = 15;
            romeo = backup[romeo];
            romeo = result.bind(tango)(romeo);
            sizing = romeo.TextWithIOSLinkWorkaround;
            romeo = {'style': null, 'variant': 'text-sm/medium', 'color': 'text-link'};
            output = output.link;
            romeo['style'] = output;
            output = backup[kilo];
            output = result.bind(tango)(output);
            source = output.intl;
            update = source.format;
            output = backup[kilo];
            output = result.bind(tango)(output);
            output = output.t;
            echo = output.BPDKoK;
            output = {};
            vacuum = 16;
            vacuum = backup[vacuum];
            sequence = foxtrot.bind(tango)(vacuum);
            vacuum = sequence.getArticleURL;
            control = _closure1_slot8;
            control = control.NOISE_SUPPRESSION;
            control = vacuum.bind(sequence)(control);
            output['helpdeskArticle'] = control;
            output = update.bind(source)(echo, output);
            romeo['children'] = output;
            romeo = zulu.bind(tango)(sizing, romeo);
            offset[1] = romeo;
            verify['children'] = offset;
            verify = golf.bind(tango)(oscar, verify);
            options[3] = verify;
            romeo = 17;
            verify = backup[romeo];
            offset = foxtrot.bind(tango)(verify);
            verify = {};
            sizing = backup[kilo];
            sizing = result.bind(tango)(sizing);
            output = sizing.intl;
            sizing = output.string;
            kilo = backup[kilo];
            kilo = result.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.daih+f;
            kilo = sizing.bind(output)(kilo);
            verify['text'] = kilo;
            kilo = backup[romeo];
            kilo = foxtrot.bind(tango)(kilo);
            kilo = kilo.Sizes;
            kilo = kilo.MEDIUM;
            verify['size'] = kilo;
            romeo = backup[romeo];
            romeo = foxtrot.bind(tango)(romeo);
            romeo = romeo.Colors;
            romeo = romeo.BRAND;
            verify['color'] = romeo;
            yankee = function() { // Original name: onPress
                tango = _closure1_slot1;
                report = _closure1_slot2;
                entity = 18;
                zulu = report[entity];
                entity = undefined;
                golf = tango.bind(entity)(zulu);
                oscar = golf.setNoiseCancellation;
                zulu = {};
                tango = _closure1_slot9;
                tango = tango.NOISE_CANCELLATION_POPOUT;
                zulu['section'] = tango;
                tango = true;
                zulu = oscar.bind(golf)(tango, zulu);
                zulu = _closure1_slot0;
                mike = 19;
                mike = report[mike];
                zulu = zulu.bind(entity)(mike);
                mike = zulu.presentNoiseCancellation;
                mike = mike.bind(zulu)(tango);
                mike = _closure2_slot0;
                mike = mike.bind(entity)();
                return entity;
            };
            verify['onPress'] = yankee;
            verify = zulu.bind(tango)(offset, verify);
            options[4] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    mike = 'NUF_KRISP_ACTIONSHEET';
    zulu['NUF_KRISP_ACTIONSHEET_KEY'] = mike;
    return entity;
})();