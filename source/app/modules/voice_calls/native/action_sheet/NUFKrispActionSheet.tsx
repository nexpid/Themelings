// app/modules/voice_calls/native/action_sheet/NUFKrispActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    tangon = tangon.Image;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.HelpdeskArticles;
    var _closure1_slot8 = golfie;
    tangon = tangon.AnalyticsSections;
    var _closure1_slot9 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 16;
    verify = {'alignItems': 'center', 'padding': 16};
    tangon['container'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 16, 'marginBottom': 8};
    tangon['title'] = verify;
    verify = {'lineHeight': 18, 'textAlign': 'center'};
    tangon['description'] = verify;
    verify = {'marginTop': 16, 'marginBottom': 16, 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['logoContainer'] = verify;
    verify = {};
    verify['marginLeft'] = offset;
    tangon['link'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 20;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/voice_calls/native/action_sheet/NUFKrispActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            oscard = entity.callback;
            var _closure2_slot0 = oscard;
            entity = _closure1_slot12;
            tangon = undefined;
            output = entity.bind(tangon)();
            zuuluu = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 7;
            michal = golfie[entity];
            verify = zuuluu.bind(tangon)(michal);
            option = verify.useStateFromStores;
            michal = _closure1_slot7;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                entity = _closure1_slot7;
                entity = entity.theme;
                return entity;
            };
            report = option.bind(verify)(report, michal);
            entity = golfie[entity];
            verify = zuuluu.bind(tangon)(entity);
            option = verify.useStateFromStores;
            entity = _closure1_slot6;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                michal = _closure1_slot6;
                entity = michal.getKey;
                entity = entity.bind(michal)();
                return entity;
            };
            entity = option.bind(verify)(michal, entity);
            var _closure2_slot1 = entity;
            verify = _closure1_slot3;
            option = verify.useRef;
            michal = false;
            michal = option.bind(verify)(michal);
            var _closure2_slot2 = michal;
            michal = 8;
            michal = golfie[michal];
            zuuluu = zuuluu.bind(tangon)(michal);
            michal = zuuluu.isThemeLight;
            michal = michal.bind(zuuluu)(report);
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            if(michal) { _fun00002_ip = 189; continue _fun00001 }
 175:
            michal = 10;
            michal = report[michal];
            sizing = zuuluu.bind(tangon)(michal);
            _fun00002_ip = 201; continue _fun00001;
 189:
            michal = 9;
            michal = report[michal];
            sizing = zuuluu.bind(tangon)(michal);
 201:
            report = _closure1_slot3;
            zuuluu = report.useEffect;
            michal = new Array(2);
            michal[0] = oscard;
            michal[1] = entity;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot1;
                    michal = 'NUF_KRISP_ACTIONSHEET';
                    michal = zuuluu === michal;
                    if(michal) { _fun00004_ip = 29; continue _fun00003 }
 20:
                    zuuluu = _closure2_slot2;
                    michal = zuuluu.current;
 29:
                    if(michal) { _fun00004_ip = 54; continue _fun00003 }
 32:
                    zuuluu = _closure2_slot0;
                    michal = undefined;
                    michal = zuuluu.bind(michal)();
                    michal = _closure2_slot2;
                    entity = true;
                    michal['current'] = entity;
 54:
                    entity = undefined;
                    return entity;
                }
            };
            entity = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot10;
            result = _closure1_slot0;
            backup = _closure1_slot2;
            entity = 11;
            entity = backup[entity];
            entity = result.bind(tangon)(entity);
            michal = entity.ActionSheet;
            entity = {};
            report = true;
            entity['startExpanded'] = report;
            golfie = _closure1_slot11;
            oscard = _closure1_slot4;
            report = {};
            option = output.container;
            report['style'] = option;
            romeon = _closure1_slot5;
            option = {};
            foxtra = _closure1_slot1;
            verify = 12;
            verify = backup[verify];
            verify = foxtra.bind(tangon)(verify);
            option['source'] = verify;
            verify = zuuluu.bind(tangon)(romeon, option);
            option = new Array(5);
            option[0] = verify;
            verify = 13;
            offset = backup[verify];
            offset = result.bind(tangon)(offset);
            echoed = offset.Text;
            offset = {'style': null, 'maxFontSizeMultiplier': 2, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            kiloes = output.title;
            offset['style'] = kiloes;
            kiloes = 14;
            update = backup[kiloes];
            update = result.bind(tangon)(update);
            vacuum = update.intl;
            source = vacuum.string;
            update = backup[kiloes];
            update = result.bind(tangon)(update);
            update = update.t;
            update = update.5iqgHR;
            update = source.bind(vacuum)(update);
            offset['children'] = update;
            offset = zuuluu.bind(tangon)(echoed, offset);
            option[1] = offset;
            verify = backup[verify];
            verify = result.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            echoed = output.description;
            verify['style'] = echoed;
            echoed = backup[kiloes];
            echoed = result.bind(tangon)(echoed);
            source = echoed.intl;
            update = source.string;
            echoed = backup[kiloes];
            echoed = result.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.ChUi9v;
            echoed = update.bind(source)(echoed);
            verify['children'] = echoed;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[2] = verify;
            verify = {};
            offset = output.logoContainer;
            verify['style'] = offset;
            offset = {};
            offset['source'] = sizing;
            romeon = zuuluu.bind(tangon)(romeon, offset);
            offset = new Array(2);
            offset[0] = romeon;
            romeon = 15;
            romeon = backup[romeon];
            romeon = result.bind(tangon)(romeon);
            sizing = romeon.TextWithIOSLinkWorkaround;
            romeon = {'style': null, 'variant': 'text-sm/medium', 'color': 'text-link'};
            output = output.link;
            romeon['style'] = output;
            output = backup[kiloes];
            output = result.bind(tangon)(output);
            source = output.intl;
            update = source.format;
            output = backup[kiloes];
            output = result.bind(tangon)(output);
            output = output.t;
            echoed = output.BPDKoK;
            output = {};
            vacuum = 16;
            vacuum = backup[vacuum];
            sequen = foxtra.bind(tangon)(vacuum);
            vacuum = sequen.getArticleURL;
            ctrled = _closure1_slot8;
            ctrled = ctrled.NOISE_SUPPRESSION;
            ctrled = vacuum.bind(sequen)(ctrled);
            output['helpdeskArticle'] = ctrled;
            output = update.bind(source)(echoed, output);
            romeon['children'] = output;
            romeon = zuuluu.bind(tangon)(sizing, romeon);
            offset[1] = romeon;
            verify['children'] = offset;
            verify = golfie.bind(tangon)(oscard, verify);
            option[3] = verify;
            romeon = 17;
            verify = backup[romeon];
            offset = foxtra.bind(tangon)(verify);
            verify = {};
            sizing = backup[kiloes];
            sizing = result.bind(tangon)(sizing);
            output = sizing.intl;
            sizing = output.string;
            kiloes = backup[kiloes];
            kiloes = result.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.daih+f;
            kiloes = sizing.bind(output)(kiloes);
            verify['text'] = kiloes;
            kiloes = backup[romeon];
            kiloes = foxtra.bind(tangon)(kiloes);
            kiloes = kiloes.Sizes;
            kiloes = kiloes.MEDIUM;
            verify['size'] = kiloes;
            romeon = backup[romeon];
            romeon = foxtra.bind(tangon)(romeon);
            romeon = romeon.Colors;
            romeon = romeon.BRAND;
            verify['color'] = romeon;
            yankee = function() { // Original name: onPress
                tangon = _closure1_slot1;
                report = _closure1_slot2;
                entity = 18;
                zuuluu = report[entity];
                entity = undefined;
                golfie = tangon.bind(entity)(zuuluu);
                oscard = golfie.setNoiseCancellation;
                zuuluu = {};
                tangon = _closure1_slot9;
                tangon = tangon.NOISE_CANCELLATION_POPOUT;
                zuuluu['section'] = tangon;
                tangon = true;
                zuuluu = oscard.bind(golfie)(tangon, zuuluu);
                zuuluu = _closure1_slot0;
                michal = 19;
                michal = report[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.presentNoiseCancellation;
                michal = michal.bind(zuuluu)(tangon);
                michal = _closure2_slot0;
                michal = michal.bind(entity)();
                return entity;
            };
            verify['onPress'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            option[4] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    michal = 'NUF_KRISP_ACTIONSHEET';
    zuuluu['NUF_KRISP_ACTIONSHEET_KEY'] = michal;
    return entity;
})();