// app/modules/voice_calls/native/action_sheet/VoiceEmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    sizing = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = sizing;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    foxtra = tangon.Fonts;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {};
    offset = 'center';
    tangon['justifyContent'] = offset;
    golfie['container'] = tangon;
    tangon = 12;
    kiloes = 16;
    offset = {'paddingHorizontal': 12, 'paddingTop': 16};
    golfie['button'] = offset;
    offset = {};
    backup = 5;
    yankee = oscard[backup];
    echoed = sizing.bind(entity)(yankee);
    result = foxtra.DISPLAY_EXTRABOLD;
    yankee = 6;
    romeon = oscard[yankee];
    romeon = sizing.bind(entity)(romeon);
    romeon = romeon.colors;
    output = romeon.HEADER_PRIMARY;
    romeon = 18;
    source = echoed.bind(entity)(result, output, romeon);
    ctrled = offset;
    romeon = copyDataProperties(ctrled, source);
    output = 'none';
    romeon = 'textTransform';
    offset[romeon] = output;
    output = 24;
    romeon = 'lineHeight';
    offset[romeon] = output;
    golfie['emptyTitle'] = offset;
    offset = {};
    backup = oscard[backup];
    backup = sizing.bind(entity)(backup);
    foxtra = foxtra.PRIMARY_MEDIUM;
    yankee = oscard[yankee];
    yankee = sizing.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.HEADER_SECONDARY;
    source = backup.bind(entity)(foxtra, yankee, kiloes);
    ctrled = offset;
    yankee = copyDataProperties(ctrled, source);
    yankee = 20;
    offset[romeon] = yankee;
    romeon = '600';
    yankee = 'fontWeight';
    offset[yankee] = romeon;
    golfie['emptyBody'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot6 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/voice_calls/native/action_sheet/VoiceEmptyState.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        entity = argFoo;
        offset = entity.channel;
        entity = _closure1_slot6;
        tangon = undefined;
        verify = entity.bind(tangon)();
        golfie = _closure1_slot1;
        yankee = _closure1_slot2;
        entity = 7;
        entity = yankee[entity];
        entity = golfie.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        romeon = entity.bottom;
        zuuluu = _closure1_slot5;
        michal = _closure1_slot3;
        entity = {};
        option = verify.container;
        oscard = new Array(2);
        oscard[0] = option;
        option = {};
        option['paddingBottom'] = romeon;
        oscard[1] = option;
        entity['style'] = oscard;
        option = _closure1_slot4;
        kiloes = _closure1_slot0;
        report = 8;
        report = yankee[report];
        report = kiloes.bind(tangon)(report);
        oscard = report.ThemedEmptyState;
        report = {};
        romeon = 9;
        foxtra = yankee[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        sizing = foxtra.intl;
        backup = sizing.string;
        foxtra = yankee[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        foxtra = foxtra.t;
        foxtra = foxtra./HABZm;
        foxtra = backup.bind(sizing)(foxtra);
        report['title'] = foxtra;
        foxtra = yankee[romeon];
        foxtra = kiloes.bind(tangon)(foxtra);
        backup = foxtra.intl;
        foxtra = backup.string;
        romeon = yankee[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        romeon = romeon.t;
        romeon = romeon.5Jy2FR;
        romeon = foxtra.bind(backup)(romeon);
        report['body'] = romeon;
        romeon = 10;
        foxtra = yankee[romeon];
        foxtra = golfie.bind(tangon)(foxtra);
        report['lightSource'] = foxtra;
        romeon = yankee[romeon];
        romeon = golfie.bind(tangon)(romeon);
        report['darkSource'] = romeon;
        romeon = verify.emptyTitle;
        report['titleStyle'] = romeon;
        romeon = verify.emptyBody;
        report['bodyStyle'] = romeon;
        romeon = {'marginBottom': 16, 'marginTop': 20};
        report['imageStyle'] = romeon;
        oscard = option.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = 11;
        oscard = yankee[oscard];
        golfie = golfie.bind(tangon)(oscard);
        oscard = {};
        oscard['channel'] = offset;
        verify = verify.button;
        oscard['style'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();