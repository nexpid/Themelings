// app/modules/voice_calls/native/action_sheet/VoiceActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    offset = 1;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    option = tangon.StyleSheet;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    golfie = option.create;
    tangon = {};
    verify = {};
    verify['flex'] = offset;
    tangon['container'] = verify;
    verify = {};
    foxtra = option.absoluteFillObject;
    backup = verify;
    offset = copyDataProperties(backup, foxtra);
    yankee = 'hidden';
    offset = 'overflow';
    verify[offset] = yankee;
    tangon['visualEffectView'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 17;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/voice_calls/native/action_sheet/VoiceActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            yankee = entity.channel;
            var _closure2_slot0 = yankee;
            report = _closure1_slot1;
            option = _closure1_slot2;
            golfie = 4;
            michal = option[golfie];
            tangon = undefined;
            oscard = report.bind(tangon)(michal);
            michal = 5;
            michal = option[michal];
            michal = report.bind(tangon)(michal);
            michal = michal.VOICE_ACTION_SHEET;
            michal = oscard.bind(tangon)(michal);
            oscard = michal.analyticsLocations;
            verify = _closure1_slot0;
            michal = 6;
            michal = option[michal];
            romeon = verify.bind(tangon)(michal);
            offset = romeon.useStateFromStores;
            michal = _closure1_slot5;
            verify = new Array(1);
            verify[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot5;
                michal = zuuluu.countVoiceStatesForChannel;
                entity = _closure2_slot0;
                entity = entity.id;
                michal = michal.bind(zuuluu)(entity);
                entity = 0;
                entity = entity === michal;
                return entity;
            };
            michal = offset.bind(romeon)(verify, michal);
            romeon = _closure1_slot3;
            offset = romeon.useEffect;
            verify = new Array(1);
            verify[0] = yankee;
            zuuluu = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot0;
                    golfie = _closure1_slot2;
                    entity = 7;
                    entity = golfie[entity];
                    tangon = undefined;
                    oscard = zuuluu.bind(tangon)(entity);
                    report = oscard.isModalOpen;
                    entity = 8;
                    entity = golfie[entity];
                    option = zuuluu.bind(tangon)(entity);
                    golfie = option.getVoiceChannelKey;
                    zuuluu = _closure2_slot0;
                    zuuluu = zuuluu.id;
                    zuuluu = golfie.bind(option)(zuuluu);
                    zuuluu = report.bind(oscard)(zuuluu);
                    if(zuuluu) { _fun00004_ip = 109; continue _fun00003 }
 74:
                    zuuluu = _closure1_slot1;
                    report = _closure1_slot2;
                    michal = 9;
                    michal = report[michal];
                    zuuluu = zuuluu.bind(tangon)(michal);
                    michal = zuuluu.initialize;
                    entity = _closure2_slot0;
                    entity = michal.bind(zuuluu)(entity);
 109:
                    entity = function() {
                        zuuluu = _closure1_slot1;
                        michal = _closure1_slot2;
                        entity = 9;
                        michal = michal[entity];
                        entity = undefined;
                        zuuluu = zuuluu.bind(entity)(michal);
                        michal = zuuluu.terminate;
                        michal = michal.bind(zuuluu)();
                        return entity;
                    };
                    return entity;
                }
            };
            zuuluu = offset.bind(romeon)(zuuluu, verify);
            zuuluu = 10;
            zuuluu = option[zuuluu];
            report = report.bind(tangon)(zuuluu);
            zuuluu = report.requiresVoiceChannelsOnboard;
            zuuluu = zuuluu.bind(report)();
            if(zuuluu) { _fun00002_ip = 450; continue _fun00001 }
 168:
            if(michal) { _fun00002_ip = 338; continue _fun00001 }
 174:
            report = _closure1_slot6;
            zuuluu = _closure1_slot0;
            kiloes = _closure1_slot2;
            michal = 11;
            michal = kiloes[michal];
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = michal.ActionSheet;
            michal = {'scrollable': true, 'startExpanded': true};
            offset = _closure1_slot7;
            verify = _closure1_slot4;
            option = {};
            sizing = _closure1_slot8;
            romeon = sizing.container;
            option['style'] = romeon;
            backup = _closure1_slot1;
            romeon = 15;
            romeon = kiloes[romeon];
            foxtra = backup.bind(tangon)(romeon);
            romeon = {};
            output = 'dark';
            romeon['blurTheme'] = output;
            sizing = sizing.visualEffectView;
            romeon['style'] = sizing;
            foxtra = report.bind(tangon)(foxtra, romeon);
            romeon = new Array(2);
            romeon[0] = foxtra;
            foxtra = 16;
            foxtra = kiloes[foxtra];
            backup = backup.bind(tangon)(foxtra);
            foxtra = {};
            foxtra['channel'] = yankee;
            foxtra = report.bind(tangon)(backup, foxtra);
            romeon[1] = foxtra;
            option['children'] = romeon;
            option = offset.bind(tangon)(verify, option);
            michal['children'] = option;
            report = report.bind(tangon)(zuuluu, michal);
            _fun00002_ip = 448; continue _fun00001;
 338:
            option = _closure1_slot7;
            zuuluu = _closure1_slot0;
            backup = _closure1_slot2;
            michal = 11;
            michal = backup[michal];
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = michal.ActionSheet;
            michal = {};
            foxtra = _closure1_slot6;
            romeon = _closure1_slot1;
            verify = 13;
            verify = backup[verify];
            offset = romeon.bind(tangon)(verify);
            verify = {};
            verify['channel'] = yankee;
            offset = foxtra.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = 14;
            offset = backup[offset];
            romeon = romeon.bind(tangon)(offset);
            offset = {};
            offset['channel'] = yankee;
            offset = foxtra.bind(tangon)(romeon, offset);
            verify[1] = offset;
            michal['children'] = verify;
            report = option.bind(tangon)(zuuluu, michal);
 448:
            _fun00002_ip = 520; continue _fun00001;
 450:
            option = _closure1_slot6;
            zuuluu = _closure1_slot0;
            romeon = _closure1_slot2;
            michal = 11;
            michal = romeon[michal];
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = michal.ActionSheet;
            michal = {};
            offset = _closure1_slot1;
            verify = 12;
            verify = romeon[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            verify['channel'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            michal['children'] = verify;
            report = option.bind(tangon)(zuuluu, michal);
 520:
            zuuluu = _closure1_slot6;
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            entity = entity[golfie];
            entity = michal.bind(tangon)(entity);
            michal = entity.AnalyticsLocationProvider;
            entity = {};
            entity['value'] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();