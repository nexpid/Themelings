// app/modules/voice_calls/getVoiceFeedbackReasons.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    golfie = argPlu;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, michal);
    michal = {};
    entity = "I couldn't hear audio at all";
    michal['COULD_NOT_HEAR_AUDIO'] = entity;
    entity = 'Nobody could hear me';
    michal['NOBODY_COULD_HEAR_ME'] = entity;
    entity = 'Audio had echos or feedback';
    michal['AUDIO_ECHOS'] = entity;
    entity = 'Audio was robotic or distorted';
    michal['AUDIO_ROBOTIC'] = entity;
    entity = 'Audio cut in and out';
    michal['AUDIO_CUT'] = entity;
    entity = 'Volume was too low or high';
    michal['BAD_VOLUME'] = entity;
    entity = 'Background noise was too loud';
    michal['BACKGROUND_NOISE'] = entity;
    entity = 'Issues with speakerphone';
    michal['SPEAKERPHONE'] = entity;
    entity = 'Issues with headset/bluetooth';
    michal['HEADSET'] = entity;
    entity = 'People were toxic or inappropriate';
    michal['VIBES_OFF'] = entity;
    entity = 'Other';
    michal['OTHER'] = entity;
    var _closure1_slot0 = michal;
    verify = {};
    report = 0;
    option = golfie[report];
    entity = undefined;
    option = oscard.bind(entity)(option);
    yankee = option.intl;
    offset = yankee.string;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.t;
    option = option.UqD/9f;
    option = offset.bind(yankee)(option);
    verify['label'] = option;
    option = 2;
    verify['code'] = option;
    option = michal.COULD_NOT_HEAR_AUDIO;
    verify['value'] = option;
    option = new Array(11);
    option[0] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.DVEGuL;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 3;
    verify['code'] = offset;
    offset = michal.NOBODY_COULD_HEAR_ME;
    verify['value'] = offset;
    option[1] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.2nWcBw;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 4;
    verify['code'] = offset;
    offset = michal.AUDIO_ECHOS;
    verify['value'] = offset;
    option[2] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.K3E4Dw;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 5;
    verify['code'] = offset;
    offset = michal.AUDIO_ROBOTIC;
    verify['value'] = offset;
    option[3] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.Dpm2U1;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 6;
    verify['code'] = offset;
    offset = michal.AUDIO_CUT;
    verify['value'] = offset;
    option[4] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.kuGsi4;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 7;
    verify['code'] = offset;
    offset = michal.BAD_VOLUME;
    verify['value'] = offset;
    option[5] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.PkiFCQ;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 8;
    verify['code'] = offset;
    offset = michal.BACKGROUND_NOISE;
    verify['value'] = offset;
    option[6] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.hvIDwc;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 9;
    verify['code'] = offset;
    offset = michal.SPEAKERPHONE;
    verify['value'] = offset;
    option[7] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.+gUm1t;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 10;
    verify['code'] = offset;
    offset = michal.HEADSET;
    verify['value'] = offset;
    option[8] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    romeon = offset.intl;
    yankee = romeon.string;
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    offset = offset.t;
    offset = offset.++JLLy;
    offset = yankee.bind(romeon)(offset);
    verify['label'] = offset;
    offset = 11;
    verify['code'] = offset;
    offset = michal.VIBES_OFF;
    verify['value'] = offset;
    option[9] = verify;
    verify = {};
    offset = golfie[report];
    offset = oscard.bind(entity)(offset);
    yankee = offset.intl;
    offset = yankee.string;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.t;
    report = report.emlT9/;
    report = offset.bind(yankee)(report);
    verify['label'] = report;
    report = 1;
    verify['code'] = report;
    offset = michal.OTHER;
    verify['value'] = offset;
    option[10] = verify;
    var _closure1_slot1 = option;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/voice_calls/getVoiceFeedbackReasons.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: getVoiceFeedbackReasons
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            zuuluu = michal.isMobile;
            michal = michal.showVibesHoneypot;
            tangon = global;
            tangon = tangon.Set;
            report = tangon.prototype;
            report = Object.create(report, {constructor: {value: tangon}});
            golfie = report;
            tangon = new golfie[tangon](oscard);
            tangon = tangon instanceof Object ? tangon : report;
            var _closure2_slot0 = tangon;
            if(zuuluu) { _fun00002_ip = 75; continue _fun00001 }
 52:
            report = tangon.add;
            zuuluu = _closure1_slot0;
            zuuluu = zuuluu.SPEAKERPHONE;
            zuuluu = report.bind(tangon)(zuuluu);
 75:
            if(michal) { _fun00002_ip = 101; continue _fun00001 }
 78:
            zuuluu = tangon.add;
            michal = _closure1_slot0;
            michal = michal.VIBES_OFF;
            michal = zuuluu.bind(tangon)(michal);
 101:
            zuuluu = _closure1_slot1;
            michal = zuuluu.filter;
            entity = function(argFoo) {
                zuuluu = _closure2_slot0;
                michal = zuuluu.has;
                entity = argFoo;
                entity = entity.value;
                entity = michal.bind(zuuluu)(entity);
                entity = !entity;
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['VoiceFeedbackReasonOption'] = michal;
    return entity;
})();