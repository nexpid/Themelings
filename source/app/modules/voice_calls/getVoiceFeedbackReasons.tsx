// app/modules/voice_calls/getVoiceFeedbackReasons.tsx
export default (function(argFoo, argBar, _, __, ___, argFre, argPlu) {
    oscard = argBar;
    zuuluu = argFre;
    report = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = report;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, michal);
    michal = {};
    entity = "I couldn't hear audio at all";
    michal['COULD_NOT_HEAR_AUDIO'] = entity;
    entity = 'Nobody could hear me';
    michal['NOBODY_COULD_HEAR_ME'] = entity;
    entity = 'Audio had echos or feedback';
    michal['AUDIO_ECHOS'] = entity;
    entity = 'Audio was robotic or distorted';
    michal['AUDIO_ROBOTIC'] = entity;
    entity = 'Audio cut in and out';
    michal['AUDIO_CUT'] = entity;
    entity = 'Volume was too low or high';
    michal['BAD_VOLUME'] = entity;
    entity = 'Background noise was too loud';
    michal['BACKGROUND_NOISE'] = entity;
    entity = 'Issues with speakerphone';
    michal['SPEAKERPHONE'] = entity;
    entity = 'Issues with headset/bluetooth';
    michal['HEADSET'] = entity;
    entity = 'People were toxic or inappropriate';
    michal['VIBES_OFF'] = entity;
    entity = 'Other';
    michal['OTHER'] = entity;
    var _closure1_slot2 = michal;
    entity = 1;
    report = report[entity];
    entity = undefined;
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/voice_calls/getVoiceFeedbackReasons.tsx';
    report = oscard.bind(golfie)(report);
    tangon = function(argFoo) { // Original name: getVoiceFeedbackReasons
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            oscard = michal.isMobile;
            tangon = michal.showVibesHoneypot;
            report = {};
            romeon = _closure1_slot0;
            foxtra = _closure1_slot1;
            option = 0;
            zuuluu = foxtra[option];
            yankee = undefined;
            zuuluu = romeon.bind(yankee)(zuuluu);
            verify = zuuluu.intl;
            golfie = verify.string;
            zuuluu = foxtra[option];
            zuuluu = romeon.bind(yankee)(zuuluu);
            zuuluu = zuuluu.t;
            zuuluu = zuuluu.UqD/9f;
            zuuluu = golfie.bind(verify)(zuuluu);
            report['label'] = zuuluu;
            zuuluu = 2;
            report['code'] = zuuluu;
            golfie = _closure1_slot2;
            zuuluu = golfie.COULD_NOT_HEAR_AUDIO;
            report['value'] = zuuluu;
            zuuluu = new Array(11);
            zuuluu[0] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.DVEGuL;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 3;
            report['code'] = verify;
            verify = golfie.NOBODY_COULD_HEAR_ME;
            report['value'] = verify;
            zuuluu[1] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.2nWcBw;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 4;
            report['code'] = verify;
            verify = golfie.AUDIO_ECHOS;
            report['value'] = verify;
            zuuluu[2] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.K3E4Dw;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 5;
            report['code'] = verify;
            verify = golfie.AUDIO_ROBOTIC;
            report['value'] = verify;
            zuuluu[3] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.Dpm2U1;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 6;
            report['code'] = verify;
            verify = golfie.AUDIO_CUT;
            report['value'] = verify;
            zuuluu[4] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.kuGsi4;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 7;
            report['code'] = verify;
            verify = golfie.BAD_VOLUME;
            report['value'] = verify;
            zuuluu[5] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.PkiFCQ;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 8;
            report['code'] = verify;
            verify = golfie.BACKGROUND_NOISE;
            report['value'] = verify;
            zuuluu[6] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.hvIDwc;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 9;
            report['code'] = verify;
            verify = golfie.SPEAKERPHONE;
            report['value'] = verify;
            zuuluu[7] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.+gUm1t;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 10;
            report['code'] = verify;
            verify = golfie.HEADSET;
            report['value'] = verify;
            zuuluu[8] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            backup = verify.intl;
            offset = backup.string;
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            verify = verify.t;
            verify = verify.++JLLy;
            verify = offset.bind(backup)(verify);
            report['label'] = verify;
            verify = 11;
            report['code'] = verify;
            verify = golfie.VIBES_OFF;
            report['value'] = verify;
            zuuluu[9] = report;
            report = {};
            verify = foxtra[option];
            verify = romeon.bind(yankee)(verify);
            offset = verify.intl;
            verify = offset.string;
            option = foxtra[option];
            option = romeon.bind(yankee)(option);
            option = option.t;
            option = option.emlT9/;
            option = verify.bind(offset)(option);
            report['label'] = option;
            option = 1;
            report['code'] = option;
            golfie = golfie.OTHER;
            report['value'] = golfie;
            zuuluu[10] = report;
            report = global;
            report = report.Set;
            golfie = report.prototype;
            golfie = Object.create(golfie, {constructor: {value: report}});
            sizing = golfie;
            report = new sizing[report](kiloes);
            report = report instanceof Object ? report : golfie;
            var _closure2_slot0 = report;
            if(oscard) { _fun00002_ip = 894; continue _fun00001 }
 874:
            golfie = report.add;
            oscard = _closure1_slot2;
            oscard = oscard.SPEAKERPHONE;
            oscard = golfie.bind(report)(oscard);
 894:
            if(tangon) { _fun00002_ip = 917; continue _fun00001 }
 897:
            tangon = report.add;
            michal = _closure1_slot2;
            michal = michal.VIBES_OFF;
            michal = tangon.bind(report)(michal);
 917:
            michal = zuuluu.filter;
            entity = function(argFoo) {
                zuuluu = _closure2_slot0;
                michal = zuuluu.has;
                entity = argFoo;
                entity = entity.value;
                entity = michal.bind(zuuluu)(entity);
                entity = !entity;
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
            return entity;
        }
    };
    zuuluu['default'] = tangon;
    zuuluu['VoiceFeedbackReasonOption'] = michal;
    return entity;
})();