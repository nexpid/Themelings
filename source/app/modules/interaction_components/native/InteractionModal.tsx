// app/modules/interaction_components/native/InteractionModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = golf;
    tango = function(argFoo) { // Original name: InteractionModal
        _fun123815: for(var _fun123815_ip = 0; ; ) switch(_fun123815_ip) {
 0:
            backup = argFoo;
            entity = _closure1_slot9;
            tango = undefined;
            foxtrot = entity.bind(tango)();
            papa = backup.title;
            target = _closure1_slot0;
            record = _closure1_slot2;
            entity = 7;
            entity = record[entity];
            zulu = target.bind(tango)(entity);
            mike = zulu.useModalState;
            entity = _closure1_slot10;
            entity = mike.bind(zulu)(backup, entity);
            output = entity.components;
            config = entity.applicationIconURL;
            sierra = entity.applicationName;
            source = entity.submissionState;
            context = entity.error;
            sizing = entity.onSubmit;
            sequence = _closure1_slot1;
            entity = 8;
            entity = record[entity];
            mike = sequence.bind(tango)(entity);
            entity = {};
            zulu = true;
            entity['includeKeyboardHeightIOS'] = zulu;
            entity = mike.bind(tango)(entity);
            yankee = entity.insets;
            zulu = _closure1_slot6;
            mike = _closure1_slot8;
            entity = {};
            report = {};
            options = _closure1_slot7;
            golf = _closure1_slot4;
            oscar = {};
            verify = foxtrot.modal;
            oscar['style'] = verify;
            offset = foxtrot.modalContent;
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            romeo = yankee.top;
            offset['paddingTop'] = romeo;
            romeo = yankee.bottom;
            yankee = foxtrot.modalContent;
            yankee = yankee.padding;
            yankee = romeo + yankee;
            offset['paddingBottom'] = yankee;
            verify[1] = offset;
            oscar['contentContainerStyle'] = verify;
            yankee = _closure1_slot7;
            offset = _closure1_slot3;
            verify = {};
            romeo = foxtrot.header;
            verify['style'] = romeo;
            result = _closure1_slot6;
            echo = 9;
            romeo = record[echo];
            kilo = sequence.bind(tango)(romeo);
            romeo = {};
            control = foxtrot.icon;
            romeo['style'] = control;
            control = 10;
            control = record[control];
            vacuum = sequence.bind(tango)(control);
            control = vacuum.makeSource;
            control = control.bind(vacuum)(config);
            romeo['source'] = control;
            echo = record[echo];
            echo = target.bind(tango)(echo);
            echo = echo.AvatarSizes;
            echo = echo.SMALL;
            romeo['size'] = echo;
            kilo = result.bind(tango)(kilo, romeo);
            romeo = new Array(3);
            romeo[0] = kilo;
            echo = _closure1_slot6;
            result = _closure1_slot3;
            kilo = {};
            control = foxtrot.titleView;
            kilo['style'] = control;
            config = _closure1_slot6;
            control = 11;
            control = record[control];
            control = target.bind(tango)(control);
            vacuum = control.Text;
            control = {'variant': 'heading-xl/semibold', 'color': 'header-primary'};
            control['children'] = papa;
            control = config.bind(tango)(vacuum, control);
            kilo['children'] = control;
            kilo = echo.bind(tango)(result, kilo);
            romeo[1] = kilo;
            echo = _closure1_slot6;
            kilo = 12;
            kilo = record[kilo];
            kilo = target.bind(tango)(kilo);
            result = kilo.PressableOpacity;
            kilo = {};
            control = 'button';
            kilo['accessibilityRole'] = control;
            control = 13;
            vacuum = record[control];
            vacuum = target.bind(tango)(vacuum);
            papa = vacuum.intl;
            config = papa.string;
            vacuum = record[control];
            vacuum = target.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.cpT0Cg;
            vacuum = config.bind(papa)(vacuum);
            kilo['accessibilityLabel'] = vacuum;
            vacuum = _closure1_slot10;
            kilo['onPress'] = vacuum;
            vacuum = foxtrot.closeButton;
            kilo['style'] = vacuum;
            config = _closure1_slot6;
            vacuum = 14;
            vacuum = record[vacuum];
            sequence = sequence.bind(tango)(vacuum);
            vacuum = {};
            record = foxtrot.closeIcon;
            record = record.color;
            vacuum['color'] = record;
            vacuum = config.bind(tango)(sequence, vacuum);
            kilo['children'] = vacuum;
            kilo = echo.bind(tango)(result, kilo);
            romeo[2] = kilo;
            verify['children'] = romeo;
            offset = yankee.bind(tango)(offset, verify);
            verify = new Array(4);
            verify[0] = offset;
            romeo = _closure1_slot7;
            yankee = _closure1_slot3;
            offset = {};
            echo = null;
            kilo = echo != context;
            result = null;
            if(!kilo) { _fun123815_ip = 709; continue _fun123815 }
 604:
            kilo = '';
            result = null;
            if(!(kilo !== context)) { _fun123815_ip = 709; continue _fun123815 }
 614:
            vacuum = _closure1_slot6;
            echo = _closure1_slot3;
            kilo = {};
            sequence = foxtrot.error;
            kilo['style'] = sequence;
            record = _closure1_slot6;
            config = _closure1_slot1;
            status = _closure1_slot2;
            papa = 15;
            sequence = status[papa];
            config = config.bind(tango)(sequence);
            sequence = {};
            target = _closure1_slot0;
            papa = status[papa];
            papa = target.bind(tango)(papa);
            papa = papa.HelpMessageTypes;
            papa = papa.ERROR;
            sequence['messageType'] = papa;
            sequence['children'] = context;
            sequence = record.bind(tango)(config, sequence);
            kilo['children'] = sequence;
            result = vacuum.bind(tango)(echo, kilo);
 709:
            kilo = new Array(2);
            kilo[0] = result;
            record = _closure1_slot6;
            result = _closure1_slot1;
            echo = _closure1_slot2;
            context = 15;
            vacuum = echo[context];
            sequence = result.bind(tango)(vacuum);
            vacuum = {};
            config = _closure1_slot0;
            context = echo[context];
            context = config.bind(tango)(context);
            context = context.HelpMessageTypes;
            context = context.WARNING;
            vacuum['messageType'] = context;
            context = echo[control];
            context = config.bind(tango)(context);
            status = context.intl;
            target = status.format;
            context = echo[control];
            context = config.bind(tango)(context);
            context = context.t;
            papa = context.dSTy//;
            context = {};
            context['applicationName'] = sierra;
            context = target.bind(status)(papa, context);
            vacuum['children'] = context;
            vacuum = record.bind(tango)(sequence, vacuum);
            kilo[1] = vacuum;
            offset['children'] = kilo;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            romeo = _closure1_slot6;
            offset = 16;
            offset = echo[offset];
            offset = config.bind(tango)(offset);
            yankee = offset.ComponentStateContextProvider;
            offset = {};
            offset['modal'] = backup;
            backup = 17;
            backup = echo[backup];
            kilo = config.bind(tango)(backup);
            backup = kilo.renderComponents;
            backup = backup.bind(kilo)(output);
            offset['children'] = backup;
            offset = romeo.bind(tango)(yankee, offset);
            verify[2] = offset;
            romeo = _closure1_slot6;
            yankee = _closure1_slot3;
            offset = {};
            foxtrot = foxtrot.footer;
            offset['style'] = foxtrot;
            kilo = _closure1_slot6;
            output = 18;
            foxtrot = echo[output];
            backup = result.bind(tango)(foxtrot);
            foxtrot = {};
            vacuum = echo[control];
            vacuum = config.bind(tango)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.string;
            control = echo[control];
            control = config.bind(tango)(control);
            control = control.t;
            control = control.geKm7u;
            control = vacuum.bind(sequence)(control);
            foxtrot['text'] = control;
            update = _closure1_slot5;
            update = update.IN_FLIGHT;
            update = source === update;
            foxtrot['loading'] = update;
            update = echo[output];
            update = result.bind(tango)(update);
            update = update.Colors;
            update = update.BRAND;
            foxtrot['color'] = update;
            output = echo[output];
            output = result.bind(tango)(output);
            output = output.Sizes;
            output = output.MEDIUM;
            foxtrot['size'] = output;
            foxtrot['onPress'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            offset['children'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[3] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report['children'] = oscar;
            report = zulu.bind(tango)(mike, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot11 = tango;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, report);
    entity = 0;
    options = golf[entity];
    report = argCorge;
    entity = undefined;
    report = report.bind(entity)(options);
    backup = 1;
    report = golf[backup];
    report = oscar.bind(entity)(report);
    options = report.View;
    var _closure1_slot3 = options;
    report = report.ScrollView;
    var _closure1_slot4 = report;
    report = 2;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.InteractionModalState;
    var _closure1_slot5 = report;
    report = 3;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot6 = options;
    options = golf[report];
    options = oscar.bind(entity)(options);
    options = options.jsxs;
    var _closure1_slot7 = options;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.Fragment;
    var _closure1_slot8 = report;
    report = 4;
    report = golf[report];
    verify = oscar.bind(entity)(report);
    options = verify.createStyles;
    report = {};
    offset = {};
    romeo = 5;
    yankee = golf[romeo];
    yankee = foxtrot.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = yankee;
    offset['flex'] = backup;
    report['modal'] = offset;
    yankee = 16;
    offset = {'flexGrow': 1, 'padding': 16};
    report['modalContent'] = offset;
    offset = {'flexDirection': 'row', 'marginBottom': 16};
    report['header'] = offset;
    offset = {};
    offset['flex'] = backup;
    report['titleView'] = offset;
    offset = {};
    backup = 8;
    offset['marginRight'] = backup;
    report['icon'] = offset;
    offset = {};
    backup = 'auto';
    offset['marginTop'] = backup;
    report['footer'] = offset;
    offset = {};
    offset['marginLeft'] = backup;
    report['closeButton'] = offset;
    offset = {};
    romeo = golf[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.TEXT_MUTED;
    offset['color'] = romeo;
    report['closeIcon'] = offset;
    offset = {};
    offset['marginBottom'] = yankee;
    report['error'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot9 = report;
    report = function() { // Original name: onClose
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 6;
        mike = mike[entity];
        entity = undefined;
        zulu = zulu.bind(entity)(mike);
        mike = zulu.popWithKey;
        entity = 'interaction_modal';
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    var _closure1_slot10 = report;
    report = 19;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'modules/interaction_components/native/InteractionModal.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    mike = function(argFoo) { // Original name: openInteractionModal
        tango = _closure1_slot1;
        zulu = _closure1_slot2;
        entity = 6;
        zulu = zulu[entity];
        entity = undefined;
        oscar = tango.bind(entity)(zulu);
        report = oscar.push;
        tango = _closure1_slot11;
        zulu = argFoo;
        mike = 'interaction_modal';
        mike = report.bind(oscar)(tango, zulu, mike);
        return entity;
    };
    zulu['openInteractionModal'] = mike;
    return entity;
})();