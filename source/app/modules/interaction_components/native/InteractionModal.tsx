// app/modules/interaction_components/native/InteractionModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = golfie;
    tangon = function(argFoo) { // Original name: InteractionModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            backup = argFoo;
            entity = _closure1_slot9;
            tangon = undefined;
            foxtra = entity.bind(tangon)();
            papara = backup.title;
            target = _closure1_slot0;
            record = _closure1_slot2;
            entity = 7;
            entity = record[entity];
            zuuluu = target.bind(tangon)(entity);
            michal = zuuluu.useModalState;
            entity = _closure1_slot10;
            entity = michal.bind(zuuluu)(backup, entity);
            output = entity.components;
            config = entity.applicationIconURL;
            sierra = entity.applicationName;
            source = entity.submissionState;
            cntext = entity.error;
            sizing = entity.onSubmit;
            sequen = _closure1_slot1;
            entity = 8;
            entity = record[entity];
            michal = sequen.bind(tangon)(entity);
            entity = {};
            zuuluu = true;
            entity['includeKeyboardHeightIOS'] = zuuluu;
            entity = michal.bind(tangon)(entity);
            yankee = entity.insets;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot8;
            entity = {};
            report = {};
            option = _closure1_slot7;
            golfie = _closure1_slot4;
            oscard = {};
            verify = foxtra.modal;
            oscard['style'] = verify;
            offset = foxtra.modalContent;
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            romeon = yankee.top;
            offset['paddingTop'] = romeon;
            romeon = yankee.bottom;
            yankee = foxtra.modalContent;
            yankee = yankee.padding;
            yankee = romeon + yankee;
            offset['paddingBottom'] = yankee;
            verify[1] = offset;
            oscard['contentContainerStyle'] = verify;
            yankee = _closure1_slot7;
            offset = _closure1_slot3;
            verify = {};
            romeon = foxtra.header;
            verify['style'] = romeon;
            result = _closure1_slot6;
            echoed = 9;
            romeon = record[echoed];
            kiloes = sequen.bind(tangon)(romeon);
            romeon = {};
            ctrled = foxtra.icon;
            romeon['style'] = ctrled;
            ctrled = 10;
            ctrled = record[ctrled];
            vacuum = sequen.bind(tangon)(ctrled);
            ctrled = vacuum.makeSource;
            ctrled = ctrled.bind(vacuum)(config);
            romeon['source'] = ctrled;
            echoed = record[echoed];
            echoed = target.bind(tangon)(echoed);
            echoed = echoed.AvatarSizes;
            echoed = echoed.SMALL;
            romeon['size'] = echoed;
            kiloes = result.bind(tangon)(kiloes, romeon);
            romeon = new Array(3);
            romeon[0] = kiloes;
            echoed = _closure1_slot6;
            result = _closure1_slot3;
            kiloes = {};
            ctrled = foxtra.titleView;
            kiloes['style'] = ctrled;
            config = _closure1_slot6;
            ctrled = 11;
            ctrled = record[ctrled];
            ctrled = target.bind(tangon)(ctrled);
            vacuum = ctrled.Text;
            ctrled = {'variant': 'heading-xl/semibold', 'color': 'header-primary'};
            ctrled['children'] = papara;
            ctrled = config.bind(tangon)(vacuum, ctrled);
            kiloes['children'] = ctrled;
            kiloes = echoed.bind(tangon)(result, kiloes);
            romeon[1] = kiloes;
            echoed = _closure1_slot6;
            kiloes = 12;
            kiloes = record[kiloes];
            kiloes = target.bind(tangon)(kiloes);
            result = kiloes.PressableOpacity;
            kiloes = {};
            ctrled = 'button';
            kiloes['accessibilityRole'] = ctrled;
            ctrled = 13;
            vacuum = record[ctrled];
            vacuum = target.bind(tangon)(vacuum);
            papara = vacuum.intl;
            config = papara.string;
            vacuum = record[ctrled];
            vacuum = target.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.cpT0Cg;
            vacuum = config.bind(papara)(vacuum);
            kiloes['accessibilityLabel'] = vacuum;
            vacuum = _closure1_slot10;
            kiloes['onPress'] = vacuum;
            vacuum = foxtra.closeButton;
            kiloes['style'] = vacuum;
            config = _closure1_slot6;
            vacuum = 14;
            vacuum = record[vacuum];
            sequen = sequen.bind(tangon)(vacuum);
            vacuum = {};
            record = foxtra.closeIcon;
            record = record.color;
            vacuum['color'] = record;
            vacuum = config.bind(tangon)(sequen, vacuum);
            kiloes['children'] = vacuum;
            kiloes = echoed.bind(tangon)(result, kiloes);
            romeon[2] = kiloes;
            verify['children'] = romeon;
            offset = yankee.bind(tangon)(offset, verify);
            verify = new Array(4);
            verify[0] = offset;
            romeon = _closure1_slot7;
            yankee = _closure1_slot3;
            offset = {};
            echoed = null;
            kiloes = echoed != cntext;
            result = null;
            if(!kiloes) { _fun00002_ip = 709; continue _fun00001 }
 604:
            kiloes = '';
            result = null;
            if(!(kiloes !== cntext)) { _fun00002_ip = 709; continue _fun00001 }
 614:
            vacuum = _closure1_slot6;
            echoed = _closure1_slot3;
            kiloes = {};
            sequen = foxtra.error;
            kiloes['style'] = sequen;
            record = _closure1_slot6;
            config = _closure1_slot1;
            status = _closure1_slot2;
            papara = 15;
            sequen = status[papara];
            config = config.bind(tangon)(sequen);
            sequen = {};
            target = _closure1_slot0;
            papara = status[papara];
            papara = target.bind(tangon)(papara);
            papara = papara.HelpMessageTypes;
            papara = papara.ERROR;
            sequen['messageType'] = papara;
            sequen['children'] = cntext;
            sequen = record.bind(tangon)(config, sequen);
            kiloes['children'] = sequen;
            result = vacuum.bind(tangon)(echoed, kiloes);
 709:
            kiloes = new Array(2);
            kiloes[0] = result;
            record = _closure1_slot6;
            result = _closure1_slot1;
            echoed = _closure1_slot2;
            cntext = 15;
            vacuum = echoed[cntext];
            sequen = result.bind(tangon)(vacuum);
            vacuum = {};
            config = _closure1_slot0;
            cntext = echoed[cntext];
            cntext = config.bind(tangon)(cntext);
            cntext = cntext.HelpMessageTypes;
            cntext = cntext.WARNING;
            vacuum['messageType'] = cntext;
            cntext = echoed[ctrled];
            cntext = config.bind(tangon)(cntext);
            status = cntext.intl;
            target = status.format;
            cntext = echoed[ctrled];
            cntext = config.bind(tangon)(cntext);
            cntext = cntext.t;
            papara = cntext.dSTy//;
            cntext = {};
            cntext['applicationName'] = sierra;
            cntext = target.bind(status)(papara, cntext);
            vacuum['children'] = cntext;
            vacuum = record.bind(tangon)(sequen, vacuum);
            kiloes[1] = vacuum;
            offset['children'] = kiloes;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            romeon = _closure1_slot6;
            offset = 16;
            offset = echoed[offset];
            offset = config.bind(tangon)(offset);
            yankee = offset.ComponentStateContextProvider;
            offset = {};
            offset['modal'] = backup;
            backup = 17;
            backup = echoed[backup];
            kiloes = config.bind(tangon)(backup);
            backup = kiloes.renderComponents;
            backup = backup.bind(kiloes)(output);
            offset['children'] = backup;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            romeon = _closure1_slot6;
            yankee = _closure1_slot3;
            offset = {};
            foxtra = foxtra.footer;
            offset['style'] = foxtra;
            kiloes = _closure1_slot6;
            output = 18;
            foxtra = echoed[output];
            backup = result.bind(tangon)(foxtra);
            foxtra = {};
            vacuum = echoed[ctrled];
            vacuum = config.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            ctrled = echoed[ctrled];
            ctrled = config.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.geKm7u;
            ctrled = vacuum.bind(sequen)(ctrled);
            foxtra['text'] = ctrled;
            update = _closure1_slot5;
            update = update.IN_FLIGHT;
            update = source === update;
            foxtra['loading'] = update;
            update = echoed[output];
            update = result.bind(tangon)(update);
            update = update.Colors;
            update = update.BRAND;
            foxtra['color'] = update;
            output = echoed[output];
            output = result.bind(tangon)(output);
            output = output.Sizes;
            output = output.MEDIUM;
            foxtra['size'] = output;
            foxtra['onPress'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[3] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report['children'] = oscard;
            report = zuuluu.bind(tangon)(michal, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot11 = tangon;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, report);
    entity = 0;
    option = golfie[entity];
    report = argCor;
    entity = undefined;
    report = report.bind(entity)(option);
    backup = 1;
    report = golfie[backup];
    report = oscard.bind(entity)(report);
    option = report.View;
    var _closure1_slot3 = option;
    report = report.ScrollView;
    var _closure1_slot4 = report;
    report = 2;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.InteractionModalState;
    var _closure1_slot5 = report;
    report = 3;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot6 = option;
    option = golfie[report];
    option = oscard.bind(entity)(option);
    option = option.jsxs;
    var _closure1_slot7 = option;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.Fragment;
    var _closure1_slot8 = report;
    report = 4;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    offset = {};
    romeon = 5;
    yankee = golfie[romeon];
    yankee = foxtra.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_SECONDARY;
    offset['backgroundColor'] = yankee;
    offset['flex'] = backup;
    report['modal'] = offset;
    yankee = 16;
    offset = {'flexGrow': 1, 'padding': 16};
    report['modalContent'] = offset;
    offset = {'flexDirection': 'row', 'marginBottom': 16};
    report['header'] = offset;
    offset = {};
    offset['flex'] = backup;
    report['titleView'] = offset;
    offset = {};
    backup = 8;
    offset['marginRight'] = backup;
    report['icon'] = offset;
    offset = {};
    backup = 'auto';
    offset['marginTop'] = backup;
    report['footer'] = offset;
    offset = {};
    offset['marginLeft'] = backup;
    report['closeButton'] = offset;
    offset = {};
    romeon = golfie[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.TEXT_MUTED;
    offset['color'] = romeon;
    report['closeIcon'] = offset;
    offset = {};
    offset['marginBottom'] = yankee;
    report['error'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot9 = report;
    report = function() { // Original name: onClose
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 6;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.popWithKey;
        entity = 'interaction_modal';
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot10 = report;
    report = 19;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/interaction_components/native/InteractionModal.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: openInteractionModal
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 6;
        zuuluu = zuuluu[entity];
        entity = undefined;
        oscard = tangon.bind(entity)(zuuluu);
        report = oscard.push;
        tangon = _closure1_slot11;
        zuuluu = argFoo;
        michal = 'interaction_modal';
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    zuuluu['openInteractionModal'] = michal;
    return entity;
})();