// app/modules/interaction_components/native/InteractionModal.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    tangon = function(argFoo) { // Original name: InteractionModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            backup = argFoo;
            entity = _closure1_slot8;
            tangon = undefined;
            foxtra = entity.bind(tangon)();
            sequen = backup.title;
            echoed = _closure1_slot0;
            ctrled = _closure1_slot2;
            entity = 7;
            entity = ctrled[entity];
            zuuluu = echoed.bind(tangon)(entity);
            michal = zuuluu.useModalState;
            entity = _closure1_slot9;
            entity = michal.bind(zuuluu)(backup, entity);
            update = entity.components;
            vacuum = entity.applicationIconURL;
            target = entity.applicationName;
            result = entity.submissionState;
            record = entity.error;
            sizing = entity.onSubmit;
            source = _closure1_slot1;
            entity = 8;
            entity = ctrled[entity];
            michal = source.bind(tangon)(entity);
            entity = {};
            zuuluu = true;
            entity['includeKeyboardHeightIOS'] = zuuluu;
            entity = michal.bind(tangon)(entity);
            yankee = entity.insets;
            zuuluu = _closure1_slot7;
            michal = _closure1_slot3;
            entity = {};
            oscard = foxtra.modal;
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            golfie = yankee.top;
            oscard['paddingTop'] = golfie;
            report[1] = oscard;
            entity['style'] = report;
            golfie = _closure1_slot7;
            oscard = _closure1_slot3;
            report = {};
            option = foxtra.header;
            report['style'] = option;
            offset = _closure1_slot6;
            romeon = 9;
            option = ctrled[romeon];
            verify = source.bind(tangon)(option);
            option = {};
            kiloes = foxtra.icon;
            option['style'] = kiloes;
            kiloes = 10;
            kiloes = ctrled[kiloes];
            source = source.bind(tangon)(kiloes);
            kiloes = source.makeSource;
            kiloes = kiloes.bind(source)(vacuum);
            option['source'] = kiloes;
            romeon = ctrled[romeon];
            romeon = echoed.bind(tangon)(romeon);
            romeon = romeon.AvatarSizes;
            romeon = romeon.SMALL;
            option['size'] = romeon;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            romeon = _closure1_slot6;
            offset = _closure1_slot3;
            verify = {};
            kiloes = foxtra.titleView;
            verify['style'] = kiloes;
            vacuum = _closure1_slot6;
            kiloes = 11;
            kiloes = ctrled[kiloes];
            kiloes = echoed.bind(tangon)(kiloes);
            source = kiloes.Text;
            kiloes = {'variant': 'heading-xl/semibold', 'color': 'header-primary'};
            kiloes['children'] = sequen;
            kiloes = vacuum.bind(tangon)(source, kiloes);
            verify['children'] = kiloes;
            verify = romeon.bind(tangon)(offset, verify);
            option[1] = verify;
            romeon = _closure1_slot6;
            verify = 12;
            verify = ctrled[verify];
            verify = echoed.bind(tangon)(verify);
            offset = verify.PressableOpacity;
            verify = {};
            kiloes = 'button';
            verify['accessibilityRole'] = kiloes;
            vacuum = 13;
            kiloes = ctrled[vacuum];
            kiloes = echoed.bind(tangon)(kiloes);
            sequen = kiloes.intl;
            source = sequen.string;
            kiloes = ctrled[vacuum];
            kiloes = echoed.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.cpT0Cg;
            kiloes = source.bind(sequen)(kiloes);
            verify['accessibilityLabel'] = kiloes;
            kiloes = _closure1_slot9;
            verify['onPress'] = kiloes;
            kiloes = foxtra.closeButton;
            verify['style'] = kiloes;
            source = _closure1_slot6;
            kiloes = 14;
            kiloes = ctrled[kiloes];
            kiloes = echoed.bind(tangon)(kiloes);
            echoed = kiloes.XSmallIcon;
            kiloes = {};
            ctrled = foxtra.closeIcon;
            ctrled = ctrled.color;
            kiloes['color'] = ctrled;
            kiloes = source.bind(tangon)(echoed, kiloes);
            verify['children'] = kiloes;
            verify = romeon.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot7;
            golfie = _closure1_slot4;
            oscard = {};
            offset = foxtra.modalContent;
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            yankee = yankee.bottom;
            offset['paddingBottom'] = yankee;
            verify[1] = offset;
            oscard['contentContainerStyle'] = verify;
            yankee = _closure1_slot7;
            offset = _closure1_slot3;
            verify = {};
            echoed = null;
            romeon = echoed != record;
            kiloes = null;
            if(!romeon) { _fun00002_ip = 712; continue _fun00001 }
 607:
            romeon = '';
            kiloes = null;
            if(!(romeon !== record)) { _fun00002_ip = 712; continue _fun00001 }
 617:
            source = _closure1_slot6;
            echoed = _closure1_slot3;
            romeon = {};
            ctrled = foxtra.error;
            romeon['style'] = ctrled;
            config = _closure1_slot6;
            sequen = _closure1_slot1;
            status = _closure1_slot2;
            cntext = 15;
            ctrled = status[cntext];
            sequen = sequen.bind(tangon)(ctrled);
            ctrled = {};
            papara = _closure1_slot0;
            cntext = status[cntext];
            cntext = papara.bind(tangon)(cntext);
            cntext = cntext.HelpMessageTypes;
            cntext = cntext.ERROR;
            ctrled['messageType'] = cntext;
            ctrled['children'] = record;
            ctrled = config.bind(tangon)(sequen, ctrled);
            romeon['children'] = ctrled;
            kiloes = source.bind(tangon)(echoed, romeon);
 712:
            romeon = new Array(2);
            romeon[0] = kiloes;
            sequen = _closure1_slot6;
            source = _closure1_slot1;
            echoed = _closure1_slot2;
            config = 15;
            kiloes = echoed[config];
            source = source.bind(tangon)(kiloes);
            kiloes = {};
            ctrled = _closure1_slot0;
            config = echoed[config];
            config = ctrled.bind(tangon)(config);
            config = config.HelpMessageTypes;
            config = config.WARNING;
            kiloes['messageType'] = config;
            config = echoed[vacuum];
            config = ctrled.bind(tangon)(config);
            papara = config.intl;
            cntext = papara.format;
            config = echoed[vacuum];
            config = ctrled.bind(tangon)(config);
            config = config.t;
            record = config.dSTy//;
            config = {};
            config['applicationName'] = target;
            config = cntext.bind(papara)(record, config);
            kiloes['children'] = config;
            kiloes = sequen.bind(tangon)(source, kiloes);
            romeon[1] = kiloes;
            verify['children'] = romeon;
            offset = yankee.bind(tangon)(offset, verify);
            verify = new Array(3);
            verify[0] = offset;
            romeon = _closure1_slot6;
            offset = 16;
            offset = echoed[offset];
            offset = ctrled.bind(tangon)(offset);
            yankee = offset.ComponentStateContextProvider;
            offset = {};
            offset['modal'] = backup;
            backup = 17;
            backup = echoed[backup];
            kiloes = ctrled.bind(tangon)(backup);
            backup = kiloes.renderComponents;
            backup = backup.bind(kiloes)(update);
            offset['children'] = backup;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            romeon = _closure1_slot6;
            yankee = _closure1_slot3;
            offset = {};
            foxtra = foxtra.footer;
            offset['style'] = foxtra;
            kiloes = _closure1_slot6;
            foxtra = 18;
            foxtra = echoed[foxtra];
            foxtra = ctrled.bind(tangon)(foxtra);
            backup = foxtra.Button;
            foxtra = {};
            update = echoed[vacuum];
            update = ctrled.bind(tangon)(update);
            source = update.intl;
            update = source.string;
            echoed = echoed[vacuum];
            echoed = ctrled.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.geKm7u;
            echoed = update.bind(source)(echoed);
            foxtra['text'] = echoed;
            output = _closure1_slot5;
            output = output.IN_FLIGHT;
            output = result === output;
            foxtra['loading'] = output;
            output = 'lg';
            foxtra['size'] = output;
            foxtra['onPress'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            offset['children'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot10 = tangon;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, report);
    entity = 0;
    option = golfie[entity];
    report = argCor;
    entity = undefined;
    report = report.bind(entity)(option);
    foxtra = 1;
    report = golfie[foxtra];
    report = oscard.bind(entity)(report);
    option = report.View;
    var _closure1_slot3 = option;
    report = report.ScrollView;
    var _closure1_slot4 = report;
    report = 2;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.InteractionModalState;
    var _closure1_slot5 = report;
    report = 3;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    option = report.jsx;
    var _closure1_slot6 = option;
    report = report.jsxs;
    var _closure1_slot7 = report;
    report = 4;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    offset = {};
    yankee = 5;
    backup = golfie[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BG_BASE_PRIMARY;
    offset['backgroundColor'] = backup;
    offset['flex'] = foxtra;
    report['modal'] = offset;
    offset = {};
    offset['flexGrow'] = foxtra;
    backup = golfie[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['paddingHorizontal'] = backup;
    backup = golfie[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['gap'] = backup;
    report['modalContent'] = offset;
    offset = {};
    backup = 'row';
    offset['flexDirection'] = backup;
    backup = golfie[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['marginBottom'] = backup;
    backup = golfie[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['paddingHorizontal'] = backup;
    report['header'] = offset;
    offset = {};
    offset['flex'] = foxtra;
    report['titleView'] = offset;
    offset = {};
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    offset['marginRight'] = foxtra;
    report['icon'] = offset;
    offset = {};
    foxtra = 'auto';
    offset['marginTop'] = foxtra;
    backup = golfie[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_16;
    offset['marginBottom'] = backup;
    report['footer'] = offset;
    offset = {};
    offset['marginLeft'] = foxtra;
    report['closeButton'] = offset;
    offset = {};
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_MUTED;
    offset['color'] = foxtra;
    report['closeIcon'] = offset;
    offset = {};
    yankee = golfie[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['marginBottom'] = yankee;
    report['error'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot8 = report;
    report = function() { // Original name: onClose
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 6;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.popWithKey;
        entity = 'interaction_modal';
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    var _closure1_slot9 = report;
    report = 19;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'modules/interaction_components/native/InteractionModal.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: openInteractionModal
        tangon = _closure1_slot1;
        zuuluu = _closure1_slot2;
        entity = 6;
        zuuluu = zuuluu[entity];
        entity = undefined;
        oscard = tangon.bind(entity)(zuuluu);
        report = oscard.push;
        tangon = _closure1_slot10;
        zuuluu = argFoo;
        michal = 'interaction_modal';
        michal = report.bind(oscard)(tangon, zuuluu, michal);
        return entity;
    };
    zuuluu['openInteractionModal'] = michal;
    return entity;
})();