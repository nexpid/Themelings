// app/modules/app_icons/native/AppIconsCoachmark.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    romeon = 0;
    golfie = oscard[romeon];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot4 = golfie;
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.ContentDismissActionType;
    var _closure1_slot7 = tangon;
    tangon = 4;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 6;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['padding'] = foxtra;
    verify['paddingBottom'] = romeon;
    tangon['container'] = verify;
    verify = {};
    romeon = 'center';
    verify['alignItems'] = romeon;
    tangon['info'] = verify;
    foxtra = 20;
    verify = {'alignSelf': 'center', 'marginBottom': 20};
    tangon['image'] = verify;
    verify = {};
    romeon = 8;
    verify['marginRight'] = romeon;
    tangon['nitroWheel'] = verify;
    verify = {'display': 'flex', 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['titleContainer'] = verify;
    verify = {'marginTop': 8, 'textAlign': 'center'};
    tangon['subtitle'] = verify;
    verify = {};
    verify['marginTop'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['gap'] = foxtra;
    tangon['footer'] = verify;
    verify = {};
    verify['marginBottom'] = romeon;
    tangon['button'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.TEXT_MUTED;
    verify['color'] = offset;
    tangon['cancelButtonText'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/app_icons/native/AppIconsCoachmark.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AppIconsCoachmarkActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.markAsDismissed;
            var _closure2_slot0 = entity;
            michal = _closure1_slot10;
            tangon = undefined;
            offset = michal.bind(tangon)();
            yankee = _closure1_slot0;
            sizing = _closure1_slot2;
            michal = 7;
            michal = sizing[michal];
            oscard = yankee.bind(tangon)(michal);
            report = oscard.useStateFromStores;
            michal = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            report = report.bind(oscard)(zuuluu, michal);
            source = _closure1_slot1;
            michal = 8;
            michal = sizing[michal];
            zuuluu = source.bind(tangon)(michal);
            michal = zuuluu.isPremium;
            backup = michal.bind(zuuluu)(report);
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    tangon = _closure1_slot1;
                    zuuluu = _closure1_slot2;
                    entity = 9;
                    zuuluu = zuuluu[entity];
                    entity = undefined;
                    tangon = tangon.bind(entity)(zuuluu);
                    zuuluu = tangon.hideActionSheet;
                    zuuluu = zuuluu.bind(tangon)();
                    report = _closure2_slot0;
                    tangon = null;
                    if(!(tangon != report)) { _fun00004_ip = 67; continue _fun00003 }
 48:
                    zuuluu = _closure2_slot0;
                    michal = _closure1_slot7;
                    michal = michal.DISMISS;
                    michal = zuuluu.bind(entity)(michal);
 67:
                    return entity;
                }
            };
            foxtra = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot9;
            entity = 10;
            entity = sizing[entity];
            entity = yankee.bind(tangon)(entity);
            michal = entity.BottomSheet;
            entity = {};
            report = function() { // Original name: onDismiss
                zuuluu = _closure2_slot0;
                entity = _closure1_slot7;
                michal = entity.DISMISS;
                entity = undefined;
                entity = zuuluu.bind(entity)(michal);
                return entity;
            };
            entity['onDismiss'] = report;
            report = offset.container;
            entity['contentStyles'] = report;
            oscard = _closure1_slot5;
            report = {};
            golfie = offset.info;
            report['style'] = golfie;
            romeon = _closure1_slot8;
            option = _closure1_slot4;
            golfie = {};
            output = 11;
            output = sizing[output];
            output = source.bind(tangon)(output);
            golfie['source'] = output;
            output = offset.image;
            golfie['style'] = output;
            option = romeon.bind(tangon)(option, golfie);
            golfie = new Array(3);
            golfie[0] = option;
            output = {};
            option = offset.titleContainer;
            output['style'] = option;
            echoed = 12;
            option = sizing[echoed];
            result = source.bind(tangon)(option);
            option = {};
            update = 13;
            update = sizing[update];
            update = source.bind(tangon)(update);
            option['source'] = update;
            echoed = sizing[echoed];
            echoed = yankee.bind(tangon)(echoed);
            echoed = echoed.IconSizes;
            echoed = echoed.MEDIUM;
            option['size'] = echoed;
            echoed = offset.nitroWheel;
            option['style'] = echoed;
            echoed = true;
            option['disableColor'] = echoed;
            option = romeon.bind(tangon)(result, option);
            echoed = new Array(2);
            echoed[0] = option;
            option = 14;
            result = sizing[option];
            result = yankee.bind(tangon)(result);
            source = result.Text;
            update = {'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            result = 15;
            ctrled = sizing[result];
            ctrled = yankee.bind(tangon)(ctrled);
            sequen = ctrled.intl;
            vacuum = sequen.string;
            ctrled = sizing[result];
            ctrled = yankee.bind(tangon)(ctrled);
            ctrled = ctrled.t;
            ctrled = ctrled.EfA4Cg;
            ctrled = vacuum.bind(sequen)(ctrled);
            update['children'] = ctrled;
            update = romeon.bind(tangon)(source, update);
            echoed[1] = update;
            output['children'] = echoed;
            output = zuuluu.bind(tangon)(oscard, output);
            golfie[1] = output;
            option = sizing[option];
            option = yankee.bind(tangon)(option);
            yankee = option.Text;
            option = {'variant': 'text-md/normal', 'color': 'text-normal'};
            sizing = offset.subtitle;
            option['style'] = sizing;
            update = _closure1_slot0;
            sizing = _closure1_slot2;
            output = sizing[result];
            output = update.bind(tangon)(output);
            echoed = output.intl;
            output = echoed.string;
            sizing = sizing[result];
            sizing = update.bind(tangon)(sizing);
            sizing = sizing.t;
            if(backup) { _fun00002_ip = 550; continue _fun00001 }
 535:
            backup = sizing.D0XzaW;
            backup = output.bind(echoed)(backup);
            _fun00002_ip = 563; continue _fun00001;
 550:
            sizing = sizing.IgchKC;
            backup = output.bind(echoed)(sizing);
 563:
            option['children'] = backup;
            option = romeon.bind(tangon)(yankee, option);
            golfie[2] = option;
            report['children'] = golfie;
            oscard = zuuluu.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot9;
            golfie = _closure1_slot5;
            oscard = {};
            offset = offset.footer;
            oscard['style'] = offset;
            romeon = _closure1_slot8;
            output = _closure1_slot0;
            backup = _closure1_slot2;
            offset = 16;
            verify = backup[offset];
            verify = output.bind(tangon)(verify);
            yankee = verify.Button;
            verify = {};
            sizing = backup[result];
            sizing = output.bind(tangon)(sizing);
            update = sizing.intl;
            echoed = update.string;
            sizing = backup[result];
            sizing = output.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.Pt547O;
            sizing = echoed.bind(update)(sizing);
            verify['text'] = sizing;
            kiloes = function() { // Original name: onPress
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    tangon = _closure1_slot1;
                    zuuluu = _closure1_slot2;
                    entity = 9;
                    zuuluu = zuuluu[entity];
                    entity = undefined;
                    tangon = tangon.bind(entity)(zuuluu);
                    zuuluu = tangon.hideActionSheet;
                    zuuluu = zuuluu.bind(tangon)();
                    report = _closure2_slot0;
                    tangon = null;
                    if(!(tangon != report)) { _fun00006_ip = 67; continue _fun00005 }
 48:
                    tangon = _closure2_slot0;
                    zuuluu = _closure1_slot7;
                    zuuluu = zuuluu.PRIMARY;
                    zuuluu = tangon.bind(entity)(zuuluu);
 67:
                    zuuluu = _closure1_slot0;
                    tangon = _closure1_slot2;
                    michal = 17;
                    michal = tangon[michal];
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.navigateToAppIconSettings;
                    michal = michal.bind(zuuluu)();
                    return entity;
                }
            };
            verify['onPress'] = kiloes;
            yankee = romeon.bind(tangon)(yankee, verify);
            verify = new Array(2);
            verify[0] = yankee;
            offset = backup[offset];
            offset = output.bind(tangon)(offset);
            yankee = offset.Button;
            offset = {};
            kiloes = 'secondary';
            offset['variant'] = kiloes;
            kiloes = backup[result];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = backup[result];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.iSrIIS;
            backup = kiloes.bind(sizing)(backup);
            offset['text'] = backup;
            offset['onPress'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();