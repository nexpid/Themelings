// app/modules/age_assurance/native/AgeVerificationIntroScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    golfie = tangon.ScrollView;
    var _closure1_slot4 = golfie;
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AGE_VERIFICATION_GET_STARTED_STEPS;
    var _closure1_slot6 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot8 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot9 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 5;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_MOBILE_PRIMARY;
    verify['backgroundColor'] = foxtra;
    foxtra = 'transparent';
    verify['shadowColor'] = foxtra;
    tangon['headerStyle'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingHorizontal'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['gap'] = foxtra;
    verify['flex'] = romeon;
    tangon['getStartedContainer'] = verify;
    verify = {'width': 73, 'height': 85};
    tangon['getStartedSafetyShieldIcon'] = verify;
    verify = {};
    romeon = 'center';
    verify['alignItems'] = romeon;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['gap'] = foxtra;
    tangon['getStartedHeaderContainer'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    tangon['getStartedHeaderText'] = verify;
    verify = {};
    verify['alignItems'] = romeon;
    tangon['getStartedRequestTextContainer'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingHorizontal'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_48;
    verify['paddingTop'] = foxtra;
    tangon['getStartedFooterContainer'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['marginBottom'] = romeon;
    tangon['getStartedRequestText'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['gap'] = offset;
    tangon['getStartedFooterButtonsContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/age_assurance/native/AgeVerificationIntroScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: GetStartedScreen
        entity = _closure1_slot10;
        tangon = undefined;
        offset = entity.bind(tangon)();
        output = _closure1_slot1;
        echoed = _closure1_slot2;
        entity = 6;
        entity = echoed[entity];
        entity = output.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        romeon = entity.bottom;
        zuuluu = _closure1_slot8;
        michal = _closure1_slot9;
        entity = {};
        foxtra = _closure1_slot7;
        oscard = _closure1_slot4;
        report = {};
        golfie = _closure1_slot5;
        option = {};
        verify = offset.getStartedContainer;
        option['style'] = verify;
        yankee = {};
        verify = offset.getStartedHeaderContainer;
        yankee['style'] = verify;
        kiloes = _closure1_slot3;
        verify = {};
        sizing = offset.getStartedSafetyShieldIcon;
        verify['style'] = sizing;
        sizing = 7;
        sizing = echoed[sizing];
        sizing = output.bind(tangon)(sizing);
        verify['source'] = sizing;
        sizing = 'contain';
        verify['resizeMode'] = sizing;
        verify = foxtra.bind(tangon)(kiloes, verify);
        sizing = new Array(3);
        sizing[0] = verify;
        result = _closure1_slot0;
        verify = 8;
        kiloes = echoed[verify];
        kiloes = result.bind(tangon)(kiloes);
        source = kiloes.Text;
        output = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
        kiloes = offset.getStartedHeaderText;
        output['style'] = kiloes;
        kiloes = 9;
        ctrled = echoed[kiloes];
        ctrled = result.bind(tangon)(ctrled);
        sequen = ctrled.intl;
        vacuum = sequen.string;
        ctrled = echoed[kiloes];
        ctrled = result.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        ctrled = ctrled.JHNunp;
        ctrled = vacuum.bind(sequen)(ctrled);
        output['children'] = ctrled;
        output = foxtra.bind(tangon)(source, output);
        sizing[1] = output;
        output = echoed[verify];
        output = result.bind(tangon)(output);
        source = output.Text;
        output = {'variant': 'heading-md/medium', 'color': 'text-normal'};
        ctrled = offset.getStartedHeaderText;
        output['style'] = ctrled;
        ctrled = echoed[kiloes];
        ctrled = result.bind(tangon)(ctrled);
        sequen = ctrled.intl;
        vacuum = sequen.string;
        ctrled = echoed[kiloes];
        ctrled = result.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        ctrled = ctrled.+BLIGh;
        ctrled = vacuum.bind(sequen)(ctrled);
        output['children'] = ctrled;
        output = foxtra.bind(tangon)(source, output);
        sizing[2] = output;
        yankee['children'] = sizing;
        sizing = zuuluu.bind(tangon)(golfie, yankee);
        yankee = new Array(2);
        yankee[0] = sizing;
        sizing = 10;
        sizing = echoed[sizing];
        sizing = result.bind(tangon)(sizing);
        output = sizing.TableRowGroup;
        sizing = {};
        ctrled = _closure1_slot6;
        source = ctrled.map;
        update = function(argFoo, argBar) {
            entity = argFoo;
            report = argBar;
            romeon = entity.title;
            option = entity.description;
            tangon = _closure1_slot7;
            michal = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 11;
            entity = verify[entity];
            zuuluu = undefined;
            michal = michal.bind(zuuluu)(entity);
            entity = {};
            golfie = 1;
            golfie = report + golfie;
            entity['index'] = golfie;
            golfie = _closure1_slot0;
            oscard = 8;
            offset = verify[oscard];
            offset = golfie.bind(zuuluu)(offset);
            yankee = offset.Text;
            offset = {'variant': 'text-md/medium', 'color': 'header-primary'};
            offset['children'] = romeon;
            offset = tangon.bind(zuuluu)(yankee, offset);
            entity['tip'] = offset;
            oscard = verify[oscard];
            oscard = golfie.bind(zuuluu)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'text-xs/medium', 'color': 'text-secondary'};
            oscard['children'] = option;
            oscard = tangon.bind(zuuluu)(golfie, oscard);
            entity['description'] = oscard;
            entity = tangon.bind(zuuluu)(michal, entity, report);
            return entity;
        };
        update = source.bind(ctrled)(update);
        sizing['children'] = update;
        sizing = foxtra.bind(tangon)(output, sizing);
        yankee[1] = sizing;
        option['children'] = yankee;
        option = zuuluu.bind(tangon)(golfie, option);
        report['children'] = option;
        oscard = foxtra.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        yankee = offset.getStartedFooterContainer;
        option = new Array(2);
        option[0] = yankee;
        yankee = {};
        yankee['paddingBottom'] = romeon;
        option[1] = yankee;
        oscard['style'] = option;
        option = {};
        yankee = offset.getStartedRequestTextContainer;
        option['style'] = yankee;
        verify = echoed[verify];
        verify = result.bind(tangon)(verify);
        yankee = verify.Text;
        verify = {'variant': 'text-xs/medium', 'color': 'text-muted'};
        romeon = offset.getStartedRequestText;
        verify['style'] = romeon;
        romeon = echoed[kiloes];
        romeon = result.bind(tangon)(romeon);
        update = romeon.intl;
        output = update.format;
        romeon = echoed[kiloes];
        romeon = result.bind(tangon)(romeon);
        romeon = romeon.t;
        sizing = romeon.5HcUPj;
        romeon = {};
        source = function() { // Original name: onRequest
            entity = undefined;
            return entity;
        };
        romeon['onRequest'] = source;
        romeon = output.bind(update)(sizing, romeon);
        verify['children'] = romeon;
        verify = foxtra.bind(tangon)(yankee, verify);
        option['children'] = verify;
        verify = foxtra.bind(tangon)(golfie, option);
        option = new Array(2);
        option[0] = verify;
        verify = {};
        offset = offset.getStartedFooterButtonsContainer;
        verify['style'] = offset;
        yankee = 12;
        offset = echoed[yankee];
        offset = result.bind(tangon)(offset);
        romeon = offset.Button;
        offset = {'variant': 'primary', 'size': 'lg'};
        sizing = echoed[kiloes];
        sizing = result.bind(tangon)(sizing);
        update = sizing.intl;
        output = update.string;
        sizing = echoed[kiloes];
        sizing = result.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.Vk6xpK;
        sizing = output.bind(update)(sizing);
        offset['text'] = sizing;
        sizing = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        offset['onPress'] = sizing;
        romeon = foxtra.bind(tangon)(romeon, offset);
        offset = new Array(2);
        offset[0] = romeon;
        yankee = echoed[yankee];
        yankee = result.bind(tangon)(yankee);
        romeon = yankee.Button;
        yankee = {'variant': 'secondary', 'size': 'lg'};
        sizing = echoed[kiloes];
        sizing = result.bind(tangon)(sizing);
        output = sizing.intl;
        sizing = output.string;
        kiloes = echoed[kiloes];
        kiloes = result.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        kiloes = kiloes.aA6q//;
        kiloes = sizing.bind(output)(kiloes);
        yankee['text'] = kiloes;
        backup = function() { // Original name: onPress
            entity = undefined;
            return entity;
        };
        yankee['onPress'] = backup;
        yankee = foxtra.bind(tangon)(romeon, yankee);
        offset[1] = yankee;
        verify['children'] = offset;
        verify = zuuluu.bind(tangon)(golfie, verify);
        option[1] = verify;
        oscard['children'] = option;
        oscard = zuuluu.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();