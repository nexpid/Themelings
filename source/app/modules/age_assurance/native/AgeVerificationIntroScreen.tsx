// app/modules/age_assurance/native/AgeVerificationIntroScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.Image;
    var _closure1_slot3 = golfie;
    golfie = tangon.ScrollView;
    var _closure1_slot4 = golfie;
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.getAgeVerificationGetStartedSteps;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.HelpdeskArticles;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.SafetyHubLinks;
    var _closure1_slot8 = tangon;
    tangon = 5;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsxs;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot11 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 7;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_MOBILE_PRIMARY;
    verify['backgroundColor'] = foxtra;
    foxtra = 'transparent';
    verify['shadowColor'] = foxtra;
    tangon['headerStyle'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingHorizontal'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['gap'] = foxtra;
    verify['flex'] = romeon;
    tangon['getStartedContainer'] = verify;
    verify = {'width': 73, 'height': 85};
    tangon['getStartedSafetyShieldIcon'] = verify;
    verify = {};
    romeon = 'center';
    verify['alignItems'] = romeon;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['gap'] = foxtra;
    tangon['getStartedHeaderContainer'] = verify;
    verify = {};
    verify['alignItems'] = romeon;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    foxtra = -foxtra;
    verify['marginTop'] = foxtra;
    tangon['ageGroupLearnMoreContainer'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    tangon['getStartedHeaderText'] = verify;
    verify = {};
    verify['alignItems'] = romeon;
    tangon['getStartedRequestTextContainer'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingHorizontal'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_48;
    verify['paddingTop'] = foxtra;
    tangon['getStartedFooterContainer'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_16;
    verify['marginBottom'] = romeon;
    tangon['getStartedRequestText'] = verify;
    verify = {};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_8;
    verify['gap'] = offset;
    tangon['getStartedFooterButtonsContainer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 19;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/age_assurance/native/AgeVerificationIntroScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: GetStartedScreen
        entity = argFoo;
        ctrled = entity.modalSessionId;
        var _closure2_slot0 = ctrled;
        entity = _closure1_slot12;
        tangon = undefined;
        yankee = entity.bind(tangon)();
        sizing = _closure1_slot1;
        output = _closure1_slot2;
        entity = 8;
        entity = output[entity];
        entity = sizing.bind(tangon)(entity);
        entity = entity.bind(tangon)();
        result = entity.bottom;
        zuuluu = _closure1_slot10;
        michal = _closure1_slot11;
        entity = {};
        offset = _closure1_slot9;
        oscard = _closure1_slot4;
        report = {};
        golfie = _closure1_slot5;
        option = {};
        verify = yankee.getStartedContainer;
        option['style'] = verify;
        romeon = {};
        verify = yankee.getStartedHeaderContainer;
        romeon['style'] = verify;
        backup = _closure1_slot3;
        verify = {};
        kiloes = yankee.getStartedSafetyShieldIcon;
        verify['style'] = kiloes;
        kiloes = 9;
        kiloes = output[kiloes];
        kiloes = sizing.bind(tangon)(kiloes);
        verify['source'] = kiloes;
        kiloes = 'contain';
        verify['resizeMode'] = kiloes;
        verify = offset.bind(tangon)(backup, verify);
        echoed = new Array(3);
        echoed[0] = verify;
        backup = _closure1_slot0;
        verify = 10;
        kiloes = output[verify];
        kiloes = backup.bind(tangon)(kiloes);
        vacuum = kiloes.Text;
        update = {'variant': 'heading-xl/bold', 'color': 'header-primary'};
        kiloes = yankee.getStartedHeaderText;
        update['style'] = kiloes;
        kiloes = 11;
        sequen = output[kiloes];
        sequen = backup.bind(tangon)(sequen);
        record = sequen.intl;
        config = record.string;
        sequen = output[kiloes];
        sequen = backup.bind(tangon)(sequen);
        sequen = sequen.t;
        sequen = sequen.FQ+YOD;
        sequen = config.bind(record)(sequen);
        update['children'] = sequen;
        update = offset.bind(tangon)(vacuum, update);
        echoed[1] = update;
        update = output[verify];
        update = backup.bind(tangon)(update);
        vacuum = update.Text;
        update = {'variant': 'heading-md/medium', 'color': 'text-normal'};
        sequen = yankee.getStartedHeaderText;
        update['style'] = sequen;
        sequen = output[kiloes];
        sequen = backup.bind(tangon)(sequen);
        record = sequen.intl;
        config = record.string;
        sequen = output[kiloes];
        sequen = backup.bind(tangon)(sequen);
        sequen = sequen.t;
        sequen = sequen.Cc41tb;
        sequen = config.bind(record)(sequen);
        update['children'] = sequen;
        update = offset.bind(tangon)(vacuum, update);
        echoed[2] = update;
        romeon['children'] = echoed;
        echoed = zuuluu.bind(tangon)(golfie, romeon);
        romeon = new Array(3);
        romeon[0] = echoed;
        echoed = 12;
        echoed = output[echoed];
        echoed = backup.bind(tangon)(echoed);
        update = echoed.TableRowGroup;
        echoed = {};
        source = _closure1_slot6;
        vacuum = source.bind(tangon)(ctrled);
        ctrled = vacuum.map;
        source = function(argFoo, argBar) {
            entity = argFoo;
            report = argBar;
            romeon = entity.title;
            option = entity.description;
            tangon = _closure1_slot9;
            michal = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 13;
            entity = verify[entity];
            zuuluu = undefined;
            michal = michal.bind(zuuluu)(entity);
            entity = {};
            golfie = 1;
            golfie = report + golfie;
            entity['index'] = golfie;
            golfie = _closure1_slot0;
            oscard = 10;
            offset = verify[oscard];
            offset = golfie.bind(zuuluu)(offset);
            yankee = offset.Text;
            offset = {'variant': 'text-md/medium', 'color': 'header-primary'};
            offset['children'] = romeon;
            offset = tangon.bind(zuuluu)(yankee, offset);
            entity['tip'] = offset;
            oscard = verify[oscard];
            oscard = golfie.bind(zuuluu)(oscard);
            golfie = oscard.Text;
            oscard = {'variant': 'text-xs/medium', 'color': 'text-secondary'};
            oscard['children'] = option;
            oscard = tangon.bind(zuuluu)(golfie, oscard);
            entity['description'] = oscard;
            entity = tangon.bind(zuuluu)(michal, entity, report);
            return entity;
        };
        source = ctrled.bind(vacuum)(source);
        echoed['children'] = source;
        echoed = offset.bind(tangon)(update, echoed);
        romeon[1] = echoed;
        echoed = {};
        update = yankee.ageGroupLearnMoreContainer;
        echoed['style'] = update;
        update = output[verify];
        update = backup.bind(tangon)(update);
        source = update.Text;
        update = {'variant': 'text-xs/medium', 'color': 'text-muted'};
        ctrled = output[kiloes];
        ctrled = backup.bind(tangon)(ctrled);
        config = ctrled.intl;
        sequen = config.format;
        ctrled = output[kiloes];
        ctrled = backup.bind(tangon)(ctrled);
        ctrled = ctrled.t;
        vacuum = ctrled.RV75dn;
        ctrled = {};
        record = function() { // Original name: handleOnHelpUrlHook
            oscard = _closure1_slot1;
            option = _closure1_slot2;
            entity = 14;
            zuuluu = option[entity];
            entity = undefined;
            report = oscard.bind(entity)(zuuluu);
            tangon = report.openUrl;
            zuuluu = 15;
            zuuluu = option[zuuluu];
            golfie = oscard.bind(entity)(zuuluu);
            oscard = golfie.getArticleURL;
            zuuluu = _closure1_slot7;
            zuuluu = zuuluu.TIGGER_PAWTECT_UK_AND_AUS_ONLY_LEARN_MORE;
            zuuluu = oscard.bind(golfie)(zuuluu);
            zuuluu = tangon.bind(report)(zuuluu);
            golfie = _closure1_slot0;
            michal = 16;
            zuuluu = option[michal];
            oscard = golfie.bind(entity)(zuuluu);
            report = oscard.trackAgeVerificationModalClicked;
            tangon = _closure2_slot0;
            zuuluu = option[michal];
            zuuluu = golfie.bind(entity)(zuuluu);
            zuuluu = zuuluu.AgeVerificationModalVersion;
            zuuluu = zuuluu.PRIMARY;
            michal = option[michal];
            michal = golfie.bind(entity)(michal);
            michal = michal.AgeVerificationModalCta;
            michal = michal.LEARN_MORE;
            michal = report.bind(oscard)(tangon, zuuluu, michal);
            return entity;
        };
        ctrled['handleOnHelpUrlHook'] = record;
        ctrled = sequen.bind(config)(vacuum, ctrled);
        update['children'] = ctrled;
        update = offset.bind(tangon)(source, update);
        echoed['children'] = update;
        echoed = offset.bind(tangon)(golfie, echoed);
        romeon[2] = echoed;
        option['children'] = romeon;
        option = zuuluu.bind(tangon)(golfie, option);
        report['children'] = option;
        oscard = offset.bind(tangon)(oscard, report);
        report = new Array(2);
        report[0] = oscard;
        oscard = {};
        romeon = yankee.getStartedFooterContainer;
        option = new Array(2);
        option[0] = romeon;
        romeon = {};
        romeon['paddingBottom'] = result;
        option[1] = romeon;
        oscard['style'] = option;
        option = {};
        romeon = yankee.getStartedRequestTextContainer;
        option['style'] = romeon;
        verify = output[verify];
        verify = backup.bind(tangon)(verify);
        romeon = verify.Text;
        verify = {'variant': 'text-xs/medium', 'color': 'text-muted'};
        result = yankee.getStartedRequestText;
        verify['style'] = result;
        result = output[kiloes];
        result = backup.bind(tangon)(result);
        source = result.intl;
        update = source.format;
        result = output[kiloes];
        result = backup.bind(tangon)(result);
        result = result.t;
        echoed = result.TYfgw8;
        result = {};
        ctrled = function() { // Original name: handleOnRequestHook
            tangon = _closure1_slot1;
            option = _closure1_slot2;
            entity = 14;
            zuuluu = option[entity];
            entity = undefined;
            report = tangon.bind(entity)(zuuluu);
            tangon = report.openUrl;
            zuuluu = _closure1_slot8;
            zuuluu = zuuluu.APPEALS_LINK;
            zuuluu = tangon.bind(report)(zuuluu);
            golfie = _closure1_slot0;
            michal = 16;
            zuuluu = option[michal];
            oscard = golfie.bind(entity)(zuuluu);
            report = oscard.trackAgeVerificationModalClicked;
            tangon = _closure2_slot0;
            zuuluu = option[michal];
            zuuluu = golfie.bind(entity)(zuuluu);
            zuuluu = zuuluu.AgeVerificationModalVersion;
            zuuluu = zuuluu.PRIMARY;
            michal = option[michal];
            michal = golfie.bind(entity)(michal);
            michal = michal.AgeVerificationModalCta;
            michal = michal.MANUAL_REVIEW_REQUEST;
            michal = report.bind(oscard)(tangon, zuuluu, michal);
            return entity;
        };
        result['handleOnRequestHook'] = ctrled;
        result = update.bind(source)(echoed, result);
        verify['children'] = result;
        verify = offset.bind(tangon)(romeon, verify);
        option['children'] = verify;
        verify = offset.bind(tangon)(golfie, option);
        option = new Array(2);
        option[0] = verify;
        verify = {};
        yankee = yankee.getStartedFooterButtonsContainer;
        verify['style'] = yankee;
        yankee = 17;
        yankee = output[yankee];
        yankee = backup.bind(tangon)(yankee);
        romeon = yankee.Button;
        yankee = {'variant': 'primary', 'size': 'lg'};
        result = output[kiloes];
        result = backup.bind(tangon)(result);
        echoed = result.intl;
        result = echoed.string;
        kiloes = output[kiloes];
        kiloes = backup.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        kiloes = kiloes.VLbVho;
        kiloes = result.bind(echoed)(kiloes);
        yankee['text'] = kiloes;
        foxtra = function() { // Original name: onPress
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            michal = 16;
            zuuluu = option[michal];
            entity = undefined;
            oscard = golfie.bind(entity)(zuuluu);
            report = oscard.trackAgeVerificationModalClicked;
            tangon = _closure2_slot0;
            zuuluu = option[michal];
            zuuluu = golfie.bind(entity)(zuuluu);
            zuuluu = zuuluu.AgeVerificationModalVersion;
            zuuluu = zuuluu.PRIMARY;
            michal = option[michal];
            michal = golfie.bind(entity)(michal);
            michal = michal.AgeVerificationModalCta;
            michal = michal.GET_STARTED;
            michal = report.bind(oscard)(tangon, zuuluu, michal);
            return entity;
        };
        yankee['onPress'] = foxtra;
        foxtra = 18;
        foxtra = output[foxtra];
        foxtra = backup.bind(tangon)(foxtra);
        backup = foxtra.LinkExternalSmallIcon;
        foxtra = {};
        kiloes = 7;
        kiloes = output[kiloes];
        kiloes = sizing.bind(tangon)(kiloes);
        kiloes = kiloes.colors;
        kiloes = kiloes.WHITE;
        foxtra['color'] = kiloes;
        foxtra = offset.bind(tangon)(backup, foxtra);
        yankee['icon'] = foxtra;
        foxtra = 'end';
        yankee['iconPosition'] = foxtra;
        yankee = offset.bind(tangon)(romeon, yankee);
        verify['children'] = yankee;
        verify = offset.bind(tangon)(golfie, verify);
        option[1] = verify;
        oscard['children'] = option;
        oscard = zuuluu.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();