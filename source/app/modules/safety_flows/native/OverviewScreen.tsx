// app/modules/safety_flows/native/OverviewScreen.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot4 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'margin': 'auto', 'overflow': 'visible', 'justifyContent': 'center', 'textAlign': 'center', 'alignItems': 'center'};
    tangon['content'] = verify;
    verify = {'textAlign': 'center', 'textTransform': 'uppercase', 'lineHeight': 50};
    tangon['title'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 19;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/safety_flows/native/OverviewScreen.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: OverviewScreen
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot6;
            tangon = undefined;
            kiloes = entity.bind(tangon)();
            backup = _closure1_slot0;
            ctrled = _closure1_slot2;
            entity = 3;
            entity = ctrled[entity];
            michal = backup.bind(tangon)(entity);
            entity = michal.useSafetyFlowTask;
            entity = entity.bind(michal)();
            sizing = entity.task;
            var _closure2_slot0 = sizing;
            entity = 4;
            entity = ctrled[entity];
            michal = backup.bind(tangon)(entity);
            entity = michal.useNavigation;
            entity = entity.bind(michal)();
            var _closure2_slot1 = entity;
            report = _closure1_slot3;
            zuuluu = report.useCallback;
            michal = new Array(2);
            michal[0] = sizing;
            michal[1] = entity;
            entity = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure1_slot0;
                    michal = _closure1_slot2;
                    entity = 5;
                    michal = michal[entity];
                    entity = undefined;
                    report = zuuluu.bind(entity)(michal);
                    tangon = report.getScreensForTaskType;
                    zuuluu = _closure2_slot0;
                    zuuluu = zuuluu.task_type;
                    report = tangon.bind(report)(zuuluu);
                    oscard = null;
                    zuuluu = oscard != report;
                    if(!zuuluu) { _fun00004_ip = 69; continue _fun00003 }
 58:
                    golfie = report.length;
                    tangon = 0;
                    zuuluu = golfie > tangon;
 69:
                    if(!zuuluu) { _fun00004_ip = 82; continue _fun00003 }
 72:
                    tangon = 0;
                    tangon = report[tangon];
                    zuuluu = oscard != tangon;
 82:
                    if(!zuuluu) { _fun00004_ip = 105; continue _fun00003 }
 85:
                    tangon = _closure2_slot1;
                    zuuluu = tangon.push;
                    michal = 0;
                    michal = report[michal];
                    michal = zuuluu.bind(tangon)(michal);
 105:
                    return entity;
                }
            };
            foxtra = zuuluu.bind(report)(entity, michal);
            zuuluu = _closure1_slot5;
            entity = 6;
            entity = ctrled[entity];
            entity = backup.bind(tangon)(entity);
            michal = entity.ModalScreen;
            entity = {};
            option = _closure1_slot4;
            report = 7;
            report = ctrled[report];
            report = backup.bind(tangon)(report);
            golfie = report.ModalContent;
            report = {};
            echoed = 8;
            verify = ctrled[echoed];
            verify = backup.bind(tangon)(verify);
            offset = verify.Stack;
            verify = {};
            vacuum = _closure1_slot1;
            romeon = 9;
            yankee = ctrled[romeon];
            yankee = vacuum.bind(tangon)(yankee);
            yankee = yankee.spacing;
            yankee = yankee.PX_16;
            verify['spacing'] = yankee;
            yankee = kiloes.content;
            verify['style'] = yankee;
            output = 10;
            yankee = ctrled[output];
            yankee = backup.bind(tangon)(yankee);
            update = yankee.Text;
            yankee = {};
            result = 'display-lg';
            yankee['variant'] = result;
            kiloes = kiloes.title;
            yankee['style'] = kiloes;
            kiloes = 11;
            result = ctrled[kiloes];
            result = backup.bind(tangon)(result);
            record = result.intl;
            config = record.string;
            result = 12;
            sequen = ctrled[result];
            sequen = vacuum.bind(tangon)(sequen);
            sequen = sequen.RRamMD;
            sequen = config.bind(record)(sequen);
            yankee['children'] = sequen;
            update = option.bind(tangon)(update, yankee);
            yankee = new Array(3);
            yankee[0] = update;
            update = ctrled[output];
            update = backup.bind(tangon)(update);
            sequen = update.Text;
            update = {'variant': 'text-md/medium', 'color': 'text-primary'};
            config = ctrled[kiloes];
            config = backup.bind(tangon)(config);
            cntext = config.intl;
            record = cntext.string;
            config = ctrled[result];
            config = vacuum.bind(tangon)(config);
            config = config.I2Ctk5;
            config = record.bind(cntext)(config);
            update['children'] = config;
            update = option.bind(tangon)(sequen, update);
            yankee[1] = update;
            echoed = ctrled[echoed];
            echoed = backup.bind(tangon)(echoed);
            update = echoed.Stack;
            echoed = {};
            romeon = ctrled[romeon];
            romeon = vacuum.bind(tangon)(romeon);
            romeon = romeon.spacing;
            romeon = romeon.PX_8;
            echoed['spacing'] = romeon;
            romeon = 13;
            romeon = ctrled[romeon];
            romeon = backup.bind(tangon)(romeon);
            backup = romeon.TableRowGroup;
            romeon = {};
            vacuum = sizing.flow_context;
            ctrled = null;
            sequen = ctrled == vacuum;
            sizing = undefined;
            if(sequen) { _fun00002_ip = 518; continue _fun00001 }
 486:
            vacuum = vacuum.tasks;
            ctrled = ctrled == vacuum;
            sizing = undefined;
            if(ctrled) { _fun00002_ip = 518; continue _fun00001 }
 501:
            ctrled = vacuum.map;
            source = function(argFoo, argBar) {
                entity = argFoo;
                report = _closure1_slot4;
                zuuluu = _closure1_slot1;
                option = _closure1_slot2;
                michal = 14;
                michal = option[michal];
                tangon = undefined;
                zuuluu = zuuluu.bind(tangon)(michal);
                michal = {};
                golfie = _closure1_slot0;
                oscard = 15;
                oscard = option[oscard];
                oscard = golfie.bind(tangon)(oscard);
                golfie = oscard.TASK_TYPE_TO_TITLE;
                oscard = entity.task_type;
                oscard = golfie[oscard];
                michal['tip'] = oscard;
                golfie = argBar;
                oscard = 1;
                oscard = golfie + oscard;
                michal['index'] = oscard;
                entity = entity.task_type;
                entity = report.bind(tangon)(zuuluu, michal, entity);
                return entity;
            };
            sizing = ctrled.bind(vacuum)(source);
 518:
            romeon['children'] = sizing;
            romeon = option.bind(tangon)(backup, romeon);
            source = new Array(2);
            source[0] = romeon;
            romeon = _closure1_slot4;
            sizing = _closure1_slot0;
            backup = _closure1_slot2;
            output = backup[output];
            output = sizing.bind(tangon)(output);
            vacuum = output.Text;
            ctrled = {'variant': 'text-xs/medium', 'color': 'text-muted'};
            output = backup[kiloes];
            output = sizing.bind(tangon)(output);
            record = output.intl;
            config = record.string;
            output = _closure1_slot1;
            sequen = backup[result];
            sequen = output.bind(tangon)(sequen);
            sequen = sequen.0TnUrK;
            sequen = config.bind(record)(sequen);
            ctrled['children'] = sequen;
            ctrled = romeon.bind(tangon)(vacuum, ctrled);
            source[1] = ctrled;
            echoed['children'] = source;
            echoed = zuuluu.bind(tangon)(update, echoed);
            yankee[2] = echoed;
            verify['children'] = yankee;
            verify = zuuluu.bind(tangon)(offset, verify);
            report['children'] = verify;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            option = _closure1_slot5;
            oscard = 16;
            oscard = backup[oscard];
            oscard = sizing.bind(tangon)(oscard);
            golfie = oscard.ModalFooter;
            oscard = {};
            verify = 17;
            verify = backup[verify];
            offset = output.bind(tangon)(verify);
            verify = {};
            offset = romeon.bind(tangon)(offset, verify);
            verify = new Array(2);
            verify[0] = offset;
            offset = 18;
            offset = backup[offset];
            offset = sizing.bind(tangon)(offset);
            yankee = offset.ModalActionButton;
            offset = {};
            echoed = 'primary';
            offset['variant'] = echoed;
            kiloes = backup[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = backup[result];
            backup = output.bind(tangon)(backup);
            backup = backup.Ks6opq;
            backup = kiloes.bind(sizing)(backup);
            offset['text'] = backup;
            offset['onPress'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[1] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();