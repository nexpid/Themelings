// app/modules/screen/native/useIsWindowLarge.tsx
export default (function(_, argBar, argBaz, __, ___, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    tango = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = tango;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    oscar = {};
    entity = true;
    oscar['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, oscar);
    entity = 1;
    tango = tango[entity];
    entity = undefined;
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/screen/native/useIsWindowLarge.tsx';
    tango = report.bind(oscar)(tango);
    tango = function() { // Original name: useIsWindowLarge
        oscar = _closure1_slot1;
        report = _closure1_slot2;
        entity = 0;
        mike = report[entity];
        tango = undefined;
        mike = oscar.bind(tango)(mike);
        mike = mike.bind(tango)();
        zulu = _closure1_slot0;
        entity = report[entity];
        entity = zulu.bind(tango)(entity);
        entity = entity.WindowSizeClassifier;
        entity = entity.LARGE;
        entity = mike >= entity;
        return entity;
    };
    zulu['default'] = tango;
    mike = function() { // Original name: getIsWindowLarge
        tango = _closure1_slot0;
        report = _closure1_slot2;
        entity = 0;
        mike = report[entity];
        zulu = undefined;
        oscar = tango.bind(zulu)(mike);
        mike = oscar.getWindowSizeClassifier;
        mike = mike.bind(oscar)();
        entity = report[entity];
        entity = tango.bind(zulu)(entity);
        entity = entity.WindowSizeClassifier;
        entity = entity.LARGE;
        entity = mike >= entity;
        return entity;
    };
    zulu['getIsWindowLarge'] = mike;
    return entity;
})();