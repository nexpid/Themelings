// app/modules/app_database/util/Lru.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = metroImportDefault;
    var3 = exports;
    var5 = dependencyMap;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var4 = var5[var1];
    var1 = undefined;
    var4 = var6.bind(var1)(var4);
    var _closure1_slot0 = var4;
    var4 = 1;
    var4 = var5[var4];
    var4 = var6.bind(var1)(var4);
    var _closure1_slot1 = var4;
    var2 = function() {
        var4 = _closure1_slot1;
        var3 = function Lru(arg1) {
            var3 = this;
            var4 = _closure1_slot0;
            var2 = _closure2_slot0;
            var1 = undefined;
            var2 = var4.bind(var1)(var3, var2);
            var2 = global;
            var2 = var2.Map;
            var4 = var2.prototype;
            var4 = Object.create(var4, {constructor: {value: var2}});
            var7 = var4;
            var2 = new var7[var2](var6);
            var2 = var2 instanceof Object ? var2 : var4;
            var3['items'] = var2;
            var2 = arg1;
            var3['limit'] = var2;
            return var1;
        };
        var _closure2_slot0 = var3;
        var1 = {};
        var2 = 'length';
        var1['key'] = var2;
        var2 = function get() {
            var1 = this;
            var1 = var1.items;
            var1 = var1.size;
            return var1;
        };
        var1['get'] = var2;
        var2 = new Array(13);
        var2[0] = var1;
        var1 = {};
        var6 = 'capacity';
        var1['key'] = var6;
        var6 = function get() {
            var1 = this;
            var1 = var1.limit;
            return var1;
        };
        var1['get'] = var6;
        var2[1] = var1;
        var1 = {};
        var6 = global;
        var6 = var6.Symbol;
        var6 = var6.iterator;
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var2 = var1.items;
            var1 = var2.entries;
            var1 = var1.bind(var2)();
            return var1;
        };
        var1['value'] = var6;
        var2[2] = var1;
        var1 = {};
        var6 = 'entries';
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var2 = var1.items;
            var1 = var2.entries;
            var1 = var1.bind(var2)();
            return var1;
        };
        var1['value'] = var6;
        var2[3] = var1;
        var1 = {};
        var6 = 'keys';
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var2 = var1.items;
            var1 = var2.keys;
            var1 = var1.bind(var2)();
            return var1;
        };
        var1['value'] = var6;
        var2[4] = var1;
        var1 = {};
        var6 = 'values';
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var2 = var1.items;
            var1 = var2.values;
            var1 = var1.bind(var2)();
            return var1;
        };
        var1['value'] = var6;
        var2[5] = var1;
        var1 = {};
        var6 = 'ordered';
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var2 = var1.items;
            var1 = var2.values;
            var5 = var1.bind(var2)();
            var2 = new Array(0);
            var4 = 0;
            var6 = var2;
            var1 = arraySpread(var6, var5, var4);
            var1 = var2.reverse;
            var1 = var1.bind(var2)();
            return var1;
        };
        var1['value'] = var6;
        var2[6] = var1;
        var1 = {};
        var6 = 'clear';
        var1['key'] = var6;
        var6 = function value() {
            var1 = this;
            var2 = var1.items;
            var1 = var2.clear;
            var1 = var1.bind(var2)();
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[7] = var1;
        var1 = {};
        var6 = 'has';
        var1['key'] = var6;
        var6 = function value(arg1) {
            var1 = this;
            var3 = var1.items;
            var2 = var3.has;
            var1 = arg1;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var1['value'] = var6;
        var2[8] = var1;
        var1 = {};
        var6 = 'get';
        var1['key'] = var6;
        var6 = function value(arg1) {
            var1 = this;
            var3 = var1.items;
            var2 = var3.get;
            var1 = arg1;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var1['value'] = var6;
        var2[9] = var1;
        var1 = {};
        var6 = 'put';
        var1['key'] = var6;
        var6 = function value(arg1, arg2) {
            _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
                var5 = arg1;
                var1 = this;
                var3 = var1.items;
                var2 = var3.delete;
                var2 = var2.bind(var3)(var5);
                var4 = var1.items;
                var3 = var4.set;
                var2 = arg2;
                var2 = var3.bind(var4)(var5, var2);
                var2 = var1.items;
                var3 = var2.size;
                var2 = var1.limit;
                if(!(!(var3 > var2))) { _fun0001_ip = 2; continue _fun0001 }
case 3:
                var2 = undefined;
                return var2;
case 2:
                var2 = var1.oldestKey;
                var3 = var2.bind(var1)();
                var4 = var1.items;
                var2 = var4.get;
                var2 = var2.bind(var4)(var3);
                var4 = var1.items;
                var1 = var4.delete;
                var1 = var1.bind(var4)(var3);
                var1 = new Array(2);
                var1[0] = var3;
                var1[1] = var2;
                return var1;
            }
        };
        var1['value'] = var6;
        var2[10] = var1;
        var1 = {};
        var6 = 'delete';
        var1['key'] = var6;
        var6 = function value(arg1) {
            var1 = this;
            var3 = var1.items;
            var2 = var3.delete;
            var1 = arg1;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var1['value'] = var6;
        var2[11] = var1;
        var1 = {};
        var6 = 'oldestKey';
        var1['key'] = var6;
        var5 = function value() {
            var1 = this;
            var2 = var1.items;
            var1 = var2.keys;
            var2 = var1.bind(var2)();
            var1 = var2.next;
            var1 = var1.bind(var2)();
            var1 = var1.value;
            return var1;
        };
        var1['value'] = var5;
        var2[12] = var1;
        var1 = undefined;
        var1 = var4.bind(var1)(var3, var2);
        return var1;
    };
    var2 = var2.bind(var1)();
    var4 = 2;
    var5 = var5[var4];
    var4 = require;
    var6 = var4.bind(var1)(var5);
    var5 = var6.fileFinishedImporting;
    var4 = 'modules/app_database/util/Lru.tsx';
    var4 = var5.bind(var6)(var4);
    var3['Lru'] = var2;
    return var1;
})();