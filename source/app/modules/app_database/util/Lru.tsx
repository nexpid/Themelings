// app/modules/app_database/util/Lru.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBaz;
    zuuluu = argFre;
    report = argPlu;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = report[entity];
    entity = undefined;
    tangon = oscard.bind(entity)(tangon);
    var _closure1_slot0 = tangon;
    tangon = 1;
    tangon = report[tangon];
    tangon = oscard.bind(entity)(tangon);
    var _closure1_slot1 = tangon;
    michal = function() {
        tangon = _closure1_slot1;
        zuuluu = function(argFoo) { // Original name: Lru
            zuuluu = this;
            tangon = _closure1_slot0;
            michal = _closure2_slot0;
            entity = undefined;
            michal = tangon.bind(entity)(zuuluu, michal);
            michal = global;
            michal = michal.Map;
            tangon = michal.prototype;
            tangon = Object.create(tangon, {constructor: {value: michal}});
            golfie = tangon;
            michal = new golfie[michal](oscard);
            michal = michal instanceof Object ? michal : tangon;
            zuuluu['items'] = michal;
            michal = argFoo;
            zuuluu['limit'] = michal;
            return entity;
        };
        var _closure2_slot0 = zuuluu;
        entity = {};
        michal = 'length';
        entity['key'] = michal;
        michal = function() { // Original name: get
            entity = this;
            entity = entity.items;
            entity = entity.size;
            return entity;
        };
        entity['get'] = michal;
        michal = new Array(13);
        michal[0] = entity;
        entity = {};
        oscard = 'capacity';
        entity['key'] = oscard;
        oscard = function() { // Original name: get
            entity = this;
            entity = entity.limit;
            return entity;
        };
        entity['get'] = oscard;
        michal[1] = entity;
        entity = {};
        oscard = global;
        oscard = oscard.Symbol;
        oscard = oscard.iterator;
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = this;
            michal = entity.items;
            entity = michal.entries;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        michal[2] = entity;
        entity = {};
        oscard = 'entries';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = this;
            michal = entity.items;
            entity = michal.entries;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        michal[3] = entity;
        entity = {};
        oscard = 'keys';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = this;
            michal = entity.items;
            entity = michal.keys;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        michal[4] = entity;
        entity = {};
        oscard = 'values';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = this;
            michal = entity.items;
            entity = michal.values;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        michal[5] = entity;
        entity = {};
        oscard = 'ordered';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = this;
            michal = entity.items;
            entity = michal.values;
            report = entity.bind(michal)();
            michal = new Array(0);
            tangon = 0;
            oscard = michal;
            entity = arraySpread(oscard, report, tangon);
            entity = michal.reverse;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        michal[6] = entity;
        entity = {};
        oscard = 'clear';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            entity = this;
            michal = entity.items;
            entity = michal.clear;
            entity = entity.bind(michal)();
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        michal[7] = entity;
        entity = {};
        oscard = 'has';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            entity = this;
            zuuluu = entity.items;
            michal = zuuluu.has;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        entity['value'] = oscard;
        michal[8] = entity;
        entity = {};
        oscard = 'get';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            entity = this;
            zuuluu = entity.items;
            michal = zuuluu.get;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        entity['value'] = oscard;
        michal[9] = entity;
        entity = {};
        oscard = 'put';
        entity['key'] = oscard;
        oscard = function(argFoo, argBar) { // Original name: value
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                report = argFoo;
                entity = this;
                zuuluu = entity.items;
                michal = zuuluu.delete;
                michal = michal.bind(zuuluu)(report);
                tangon = entity.items;
                zuuluu = tangon.set;
                michal = argBar;
                michal = zuuluu.bind(tangon)(report, michal);
                michal = entity.items;
                zuuluu = michal.size;
                michal = entity.limit;
                if(!(!(zuuluu > michal))) { _fun00002_ip = 67; continue _fun00001 }
 63:
                michal = undefined;
                return michal;
 67:
                michal = entity.oldestKey;
                zuuluu = michal.bind(entity)();
                tangon = entity.items;
                michal = tangon.get;
                michal = michal.bind(tangon)(zuuluu);
                tangon = entity.items;
                entity = tangon.delete;
                entity = entity.bind(tangon)(zuuluu);
                entity = new Array(2);
                entity[0] = zuuluu;
                entity[1] = michal;
                return entity;
            }
        };
        entity['value'] = oscard;
        michal[10] = entity;
        entity = {};
        oscard = 'delete';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            entity = this;
            zuuluu = entity.items;
            michal = zuuluu.delete;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        entity['value'] = oscard;
        michal[11] = entity;
        entity = {};
        oscard = 'oldestKey';
        entity['key'] = oscard;
        report = function() { // Original name: value
            entity = this;
            michal = entity.items;
            entity = michal.keys;
            michal = entity.bind(michal)();
            entity = michal.next;
            entity = entity.bind(michal)();
            entity = entity.value;
            return entity;
        };
        entity['value'] = report;
        michal[12] = entity;
        entity = undefined;
        entity = tangon.bind(entity)(zuuluu, michal);
        return entity;
    };
    michal = michal.bind(entity)();
    tangon = 2;
    report = report[tangon];
    tangon = argBar;
    oscard = tangon.bind(entity)(report);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/app_database/util/Lru.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['Lru'] = michal;
    return entity;
})();