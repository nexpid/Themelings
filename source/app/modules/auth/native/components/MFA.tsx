// app/modules/auth/native/components/MFA.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: handleFinish
        entity = argFoo;
        tango = entity.mfaType;
        oscar = entity.data;
        report = entity.ticket;
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 3;
        mike = mike[entity];
        entity = undefined;
        zulu = zulu.bind(entity)(mike);
        mike = zulu.loginMFAv2;
        entity = {};
        entity['code'] = oscar;
        entity['ticket'] = report;
        entity['mfaType'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    var _closure1_slot5 = entity;
    entity = function(argFoo, argBar) { // Original name: statesAreEqual
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 4;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.isEqual;
        mike = argFoo;
        entity = argBar;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot6 = entity;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    options = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    tango = 1;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = 8;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/auth/native/components/MFA.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: ConnectedMFA
        mike = _closure1_slot0;
        options = _closure1_slot2;
        entity = 5;
        entity = options[entity];
        tango = undefined;
        zulu = mike.bind(tango)(entity);
        entity = zulu.useNavigation;
        entity = entity.bind(zulu)();
        var _closure2_slot0 = entity;
        entity = 6;
        entity = options[entity];
        yankee = mike.bind(tango)(entity);
        offset = yankee.useStateFromStores;
        entity = _closure1_slot3;
        verify = new Array(1);
        verify[0] = entity;
        romeo = _closure1_slot6;
        backup = function() {
            entity = {};
            zulu = _closure1_slot3;
            mike = zulu.getMFATicket;
            mike = mike.bind(zulu)();
            entity['ticket'] = mike;
            mike = zulu.getMFAMethods;
            mike = mike.bind(zulu)();
            entity['methods'] = mike;
            return entity;
        };
        foxtrot = new Array(0);
        sizing = yankee;
        kilo = verify;
        golf = sizing[offset](kilo, backup, foxtrot, romeo, yankee);
        zulu = _closure1_slot4;
        entity = 7;
        entity = options[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.MFAModal;
        entity = {};
        entity['mfaChallenge'] = golf;
        oscar = _closure1_slot5;
        entity['finish'] = oscar;
        report = function() { // Original name: handleOnClose
            mike = _closure2_slot0;
            entity = mike.goBack;
            entity = entity.bind(mike)();
            entity = undefined;
            return entity;
        };
        entity['handleOnClose'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();