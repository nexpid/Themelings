// app/modules/auth/native/components/Welcome.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: InviteCard
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            mike = entity.invite;
            golf = entity.style;
            entity = _closure1_slot24;
            tango = undefined;
            backup = entity.bind(tango)();
            entity = mike.guild;
            verify = mike.inviter;
            zulu = mike.channel;
            report = mike.state;
            mike = _closure1_slot18;
            mike = mike.RESOLVED;
            if(!(report === mike)) { _fun00002_ip = 680; continue _fun00001 }
 65:
            mike = null;
            if(!(mike == entity)) { _fun00002_ip = 412; continue _fun00001 }
 74:
            if(!(mike == zulu)) { _fun00002_ip = 241; continue _fun00001 }
 81:
            if(!(mike != verify)) { _fun00002_ip = 239; continue _fun00001 }
 88:
            oscar = _closure1_slot21;
            options = _closure1_slot1;
            offset = _closure1_slot2;
            zulu = 18;
            zulu = offset[zulu];
            report = options.bind(tango)(zulu);
            zulu = {};
            yankee = _closure1_slot12;
            foxtrot = yankee.prototype;
            foxtrot = Object.create(foxtrot, {constructor: {value: yankee}});
            control = foxtrot;
            source = verify;
            yankee = new control[yankee](source, update);
            yankee = yankee instanceof Object ? yankee : foxtrot;
            zulu['user'] = yankee;
            zulu['guildId'] = tango;
            oscar = oscar.bind(tango)(report, zulu);
            foxtrot = _closure1_slot0;
            zulu = 16;
            report = offset[zulu];
            report = foxtrot.bind(tango)(report);
            yankee = report.intl;
            report = yankee.string;
            zulu = offset[zulu];
            zulu = foxtrot.bind(tango)(zulu);
            zulu = zulu.t;
            zulu = zulu.+ITYkZ;
            result = report.bind(yankee)(zulu);
            zulu = 19;
            zulu = offset[zulu];
            offset = options.bind(tango)(zulu);
            options = offset.getFormattedName;
            zulu = true;
            foxtrot = options.bind(offset)(verify, zulu);
            _fun00002_ip = 504; continue _fun00001;
 239:
            return mike;
 241:
            options = _closure1_slot1;
            offset = _closure1_slot2;
            zulu = 17;
            zulu = offset[zulu];
            report = options.bind(tango)(zulu);
            zulu = mike != verify;
            mike = 'Null inviter';
            mike = report.bind(tango)(zulu, mike);
            report = _closure1_slot21;
            mike = 18;
            mike = offset[mike];
            zulu = options.bind(tango)(mike);
            mike = {};
            yankee = _closure1_slot12;
            kilo = yankee.prototype;
            kilo = Object.create(kilo, {constructor: {value: yankee}});
            control = kilo;
            source = verify;
            yankee = new control[yankee](source, update);
            yankee = yankee instanceof Object ? yankee : kilo;
            mike['user'] = yankee;
            mike['guildId'] = tango;
            oscar = report.bind(tango)(zulu, mike);
            kilo = _closure1_slot0;
            mike = 16;
            zulu = offset[mike];
            zulu = kilo.bind(tango)(zulu);
            yankee = zulu.intl;
            zulu = yankee.string;
            mike = offset[mike];
            mike = kilo.bind(tango)(mike);
            mike = mike.t;
            mike = mike.OsdY8P;
            result = zulu.bind(yankee)(mike);
            mike = 19;
            mike = offset[mike];
            options = options.bind(tango)(mike);
            mike = options.getFormattedName;
            foxtrot = mike.bind(options)(verify);
            _fun00002_ip = 504; continue _fun00001;
 412:
            report = _closure1_slot21;
            zulu = _closure1_slot1;
            offset = _closure1_slot2;
            mike = 15;
            mike = offset[mike];
            zulu = zulu.bind(tango)(mike);
            mike = {};
            mike['guild'] = entity;
            oscar = report.bind(tango)(zulu, mike);
            verify = _closure1_slot0;
            mike = 16;
            report = offset[mike];
            report = verify.bind(tango)(report);
            options = report.intl;
            report = options.string;
            mike = offset[mike];
            mike = verify.bind(tango)(mike);
            mike = mike.t;
            mike = mike.3rE1Pz;
            result = report.bind(options)(mike);
            foxtrot = entity.name;
 504:
            zulu = _closure1_slot22;
            mike = _closure1_slot4;
            entity = {};
            options = backup.container;
            report = new Array(2);
            report[0] = options;
            report[1] = golf;
            entity['style'] = report;
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot22;
            golf = _closure1_slot4;
            oscar = {};
            verify = backup.text;
            oscar['style'] = verify;
            output = _closure1_slot21;
            yankee = _closure1_slot1;
            kilo = _closure1_slot2;
            offset = 20;
            verify = kilo[offset];
            sizing = yankee.bind(tango)(verify);
            verify = {};
            echo = backup.inviteText;
            verify['style'] = echo;
            verify['children'] = result;
            sizing = output.bind(tango)(sizing, verify);
            verify = new Array(2);
            verify[0] = sizing;
            romeo = _closure1_slot21;
            offset = kilo[offset];
            yankee = yankee.bind(tango)(offset);
            offset = {};
            backup = backup.name;
            offset['style'] = backup;
            offset['children'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
 680:
            entity = null;
            return entity;
        }
    };
    var _closure1_slot25 = entity;
    entity = function(argFoo) { // Original name: GuildTemplateCard
        entity = argFoo;
        foxtrot = entity.guildTemplate;
        oscar = entity.style;
        entity = _closure1_slot24;
        tango = undefined;
        backup = entity.bind(tango)();
        zulu = _closure1_slot22;
        mike = _closure1_slot4;
        entity = {};
        golf = backup.container;
        report = new Array(2);
        report[0] = golf;
        report[1] = oscar;
        entity['style'] = report;
        golf = _closure1_slot21;
        oscar = _closure1_slot5;
        report = {};
        yankee = _closure1_slot1;
        kilo = _closure1_slot2;
        options = 21;
        options = kilo[options];
        options = yankee.bind(tango)(options);
        report['source'] = options;
        oscar = golf.bind(tango)(oscar, report);
        report = new Array(2);
        report[0] = oscar;
        options = _closure1_slot22;
        golf = _closure1_slot4;
        oscar = {};
        verify = backup.text;
        oscar['style'] = verify;
        output = _closure1_slot21;
        offset = 20;
        verify = kilo[offset];
        sizing = yankee.bind(tango)(verify);
        verify = {};
        result = backup.inviteText;
        verify['style'] = result;
        source = _closure1_slot0;
        result = 16;
        echo = kilo[result];
        echo = source.bind(tango)(echo);
        update = echo.intl;
        echo = update.string;
        result = kilo[result];
        result = source.bind(tango)(result);
        result = result.t;
        result = result.QzUORU;
        result = echo.bind(update)(result);
        verify['children'] = result;
        sizing = output.bind(tango)(sizing, verify);
        verify = new Array(2);
        verify[0] = sizing;
        romeo = _closure1_slot21;
        offset = kilo[offset];
        yankee = yankee.bind(tango)(offset);
        offset = {};
        backup = backup.name;
        offset['style'] = backup;
        foxtrot = foxtrot.name;
        offset['children'] = foxtrot;
        offset = romeo.bind(tango)(yankee, offset);
        verify[1] = offset;
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot26 = entity;
    entity = function(argFoo) { // Original name: Centerpiece
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            source = entity.invite;
            output = entity.guildTemplate;
            entity = _closure1_slot23;
            tango = undefined;
            sequence = entity.bind(tango)();
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 22;
            entity = zulu[entity];
            yankee = mike.bind(tango)(entity);
            foxtrot = null;
            result = foxtrot != source;
            kilo = foxtrot != output;
            if(!kilo) { _fun00004_ip = 80; continue _fun00003 }
 61:
            mike = output.state;
            entity = _closure1_slot19;
            entity = entity.RESOLVED;
            kilo = mike === entity;
 80:
            zulu = _closure1_slot21;
            mike = _closure1_slot4;
            entity = {};
            oscar = sequence.centerpieceContainer;
            report = new Array(1);
            report[0] = oscar;
            entity['style'] = report;
            golf = _closure1_slot22;
            oscar = _closure1_slot7;
            report = {};
            options = false;
            report['alwaysBounceVertical'] = options;
            options = sequence.scrollViewContainer;
            report['contentContainerStyle'] = options;
            offset = _closure1_slot21;
            verify = _closure1_slot5;
            options = {};
            romeo = sequence.logo;
            options['style'] = romeo;
            options['source'] = yankee;
            verify = offset.bind(tango)(verify, options);
            options = new Array(2);
            options[0] = verify;
            yankee = _closure1_slot22;
            offset = _closure1_slot4;
            verify = {};
            vacuum = _closure1_slot21;
            echo = _closure1_slot0;
            control = _closure1_slot2;
            sizing = 23;
            romeo = control[sizing];
            romeo = echo.bind(tango)(romeo);
            update = romeo.Text;
            romeo = {'style': null, 'adjustsFontSizeToFit': true, 'lineClamp': 2, 'variant': 'display-md', 'color': 'always-white', 'maxFontSizeMultiplier': 1};
            config = sequence.header;
            romeo['style'] = config;
            record = 16;
            config = control[record];
            config = echo.bind(tango)(config);
            papa = config.intl;
            context = papa.string;
            config = control[record];
            config = echo.bind(tango)(config);
            config = config.t;
            config = config.3S2xmp;
            config = context.bind(papa)(config);
            romeo['children'] = config;
            update = vacuum.bind(tango)(update, romeo);
            romeo = new Array(4);
            romeo[0] = update;
            update = _closure1_slot21;
            sizing = control[sizing];
            sizing = echo.bind(tango)(sizing);
            echo = sizing.Text;
            sizing = {'variant': 'text-md/medium', 'color': 'always-white', 'style': null, 'maxFontSizeMultiplier': 3};
            vacuum = sequence.subHeader;
            control = new Array(2);
            control[0] = vacuum;
            if(result) { _fun00004_ip = 357; continue _fun00003 }
 352:
            vacuum = null;
            if(!kilo) { _fun00004_ip = 363; continue _fun00003 }
 357:
            vacuum = sequence.subHeaderWithInvite;
 363:
            control[1] = vacuum;
            sizing['style'] = control;
            config = _closure1_slot0;
            control = _closure1_slot2;
            vacuum = control[record];
            vacuum = config.bind(tango)(vacuum);
            sequence = vacuum.intl;
            vacuum = sequence.string;
            control = control[record];
            control = config.bind(tango)(control);
            control = control.t;
            control = control.Gtctho;
            control = vacuum.bind(sequence)(control);
            sizing['children'] = control;
            sizing = update.bind(tango)(echo, sizing);
            romeo[1] = sizing;
            sizing = null;
            if(!result) { _fun00004_ip = 467; continue _fun00003 }
 446:
            update = _closure1_slot21;
            echo = _closure1_slot25;
            result = {};
            result['invite'] = source;
            sizing = update.bind(tango)(echo, result);
 467:
            romeo[2] = sizing;
            foxtrot = null;
            if(!kilo) { _fun00004_ip = 497; continue _fun00003 }
 476:
            sizing = _closure1_slot21;
            kilo = _closure1_slot26;
            backup = {};
            backup['guildTemplate'] = output;
            foxtrot = sizing.bind(tango)(kilo, backup);
 497:
            romeo[3] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[1] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot27 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot4 = golf;
    golf = tango.Image;
    var _closure1_slot5 = golf;
    golf = tango.ImageBackground;
    var _closure1_slot6 = golf;
    tango = tango.ScrollView;
    var _closure1_slot7 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot8 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot9 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot10 = tango;
    tango = 5;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot11 = tango;
    tango = 6;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot12 = tango;
    tango = 7;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot13 = tango;
    tango = 8;
    tango = oscar[tango];
    tango = yankee.bind(entity)(tango);
    var _closure1_slot14 = tango;
    tango = 9;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    foxtrot = tango.Fonts;
    golf = tango.AnalyticEvents;
    var _closure1_slot15 = golf;
    golf = tango.StorageKeys;
    var _closure1_slot16 = golf;
    golf = tango.AuthStates;
    var _closure1_slot17 = golf;
    tango = tango.InviteStates;
    var _closure1_slot18 = tango;
    tango = 10;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.GuildTemplateStates;
    var _closure1_slot19 = tango;
    tango = 11;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.InviteTypes;
    var _closure1_slot20 = tango;
    tango = 12;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot21 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot22 = tango;
    tango = 13;
    golf = oscar[tango];
    verify = report.bind(entity)(golf);
    options = verify.createStyles;
    golf = {};
    romeo = 16;
    offset = {'height': '100%', 'flex': 1, 'padding': 16};
    golf['container'] = offset;
    offset = {'flex': 0, 'width': 93, 'height': 70, 'tintColor': 'white', 'alignSelf': 'center', 'marginBottom': 24};
    golf['logo'] = offset;
    offset = {'flexShrink': 0, 'flexGrow': 1, 'justifyContent': 'center'};
    golf['scrollViewContainer'] = offset;
    offset = {'textAlign': 'center', 'marginBottom': 8, 'textTransform': 'uppercase'};
    golf['header'] = offset;
    offset = {'fontSize': 18, 'textAlign': 'center', 'alignSelf': 'center', 'maxWidth': 300, 'marginBottom': 24, 'marginHorizontal': 16};
    golf['subHeader'] = offset;
    offset = {};
    offset['marginBottom'] = romeo;
    golf['subHeaderWithInvite'] = offset;
    offset = {'position': 'absolute', 'bottom': 0, 'top': 0, 'left': 0, 'right': 0, 'resizeMode': 'cover'};
    golf['background'] = offset;
    offset = {'flexGrow': 1, 'flexShrink': 1, 'justifyContent': 'center'};
    golf['centerpieceContainer'] = offset;
    offset = {};
    backup = 28;
    offset['paddingHorizontal'] = backup;
    golf['buttonContainer'] = offset;
    golf = options.bind(verify)(golf);
    var _closure1_slot23 = golf;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'backgroundColor': null, 'padding': 16, 'flexDirection': 'row'};
    offset = 14;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_TERTIARY;
    verify['backgroundColor'] = backup;
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderRadius'] = backup;
    tango['container'] = verify;
    verify = {};
    verify['marginLeft'] = romeo;
    tango['text'] = verify;
    verify = {};
    backup = oscar[offset];
    backup = yankee.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    verify['color'] = backup;
    foxtrot = foxtrot.PRIMARY_SEMIBOLD;
    verify['fontFamily'] = foxtrot;
    verify['fontSize'] = romeo;
    romeo = 20;
    verify['lineHeight'] = romeo;
    tango['name'] = verify;
    verify = {'color': null, 'fontSize': 14, 'lineHeight': 18};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.HEADER_SECONDARY;
    verify['color'] = offset;
    tango['inviteText'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot24 = tango;
    tango = 40;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/auth/native/components/Welcome.tsx';
    tango = report.bind(oscar)(tango);
    mike = function() { // Original name: Welcome
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            mike = _closure1_slot23;
            tango = undefined;
            foxtrot = mike.bind(tango)();
            report = _closure1_slot0;
            options = _closure1_slot2;
            mike = 24;
            mike = options[mike];
            zulu = report.bind(tango)(mike);
            mike = zulu.useNavigation;
            mike = mike.bind(zulu)();
            var _closure2_slot0 = mike;
            oscar = _closure1_slot1;
            mike = 25;
            mike = options[mike];
            mike = oscar.bind(tango)(mike);
            mike = mike.bind(tango)();
            output = mike.top;
            yankee = mike.bottom;
            mike = 26;
            zulu = options[mike];
            offset = report.bind(tango)(zulu);
            verify = offset.useStateFromStores;
            zulu = _closure1_slot14;
            golf = new Array(1);
            golf[0] = zulu;
            zulu = function() {
                mike = _closure1_slot14;
                entity = mike.getDisplayedInviteCode;
                entity = entity.bind(mike)();
                return entity;
            };
            zulu = verify.bind(offset)(golf, zulu);
            var _closure2_slot1 = zulu;
            zulu = options[mike];
            offset = report.bind(tango)(zulu);
            verify = offset.useStateFromStores;
            zulu = _closure1_slot13;
            golf = new Array(1);
            golf[0] = zulu;
            zulu = function() {
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    zulu = _closure2_slot1;
                    entity = null;
                    zulu = entity != zulu;
                    if(!zulu) { _fun00008_ip = 38; continue _fun00007 }
 16:
                    tango = _closure1_slot13;
                    zulu = tango.getInvite;
                    mike = _closure2_slot1;
                    entity = zulu.bind(tango)(mike);
 38:
                    return entity;
                }
            };
            kilo = verify.bind(offset)(golf, zulu);
            var _closure2_slot2 = kilo;
            zulu = options[mike];
            offset = report.bind(tango)(zulu);
            verify = offset.useStateFromStores;
            zulu = _closure1_slot10;
            golf = new Array(1);
            golf[0] = zulu;
            zulu = function() {
                zulu = _closure1_slot10;
                entity = zulu.getDisplayedGuildTemplateCode;
                mike = entity.bind(zulu)();
                entity = zulu.getGuildTemplate;
                entity = entity.bind(zulu)(mike);
                return entity;
            };
            backup = verify.bind(offset)(golf, zulu);
            zulu = options[mike];
            offset = report.bind(tango)(zulu);
            verify = offset.useStateFromStores;
            zulu = _closure1_slot8;
            golf = new Array(1);
            golf[0] = zulu;
            zulu = function() {
                mike = _closure1_slot8;
                entity = mike.isUnderageAnonymous;
                entity = entity.bind(mike)();
                return entity;
            };
            zulu = verify.bind(offset)(golf, zulu);
            var _closure2_slot3 = zulu;
            mike = options[mike];
            verify = report.bind(tango)(mike);
            golf = verify.useStateFromStores;
            mike = _closure1_slot11;
            zulu = new Array(1);
            zulu[0] = mike;
            mike = function() {
                mike = _closure1_slot11;
                entity = mike.getHasLoggedInAccounts;
                entity = entity.bind(mike)();
                return entity;
            };
            mike = golf.bind(verify)(zulu, mike);
            zulu = 27;
            zulu = options[zulu];
            report = report.bind(tango)(zulu);
            zulu = report.useMultiAccountMobile;
            zulu = zulu.bind(report)();
            report = 28;
            report = options[report];
            golf = oscar.bind(tango)(report);
            report = function() {
                _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                    zulu = _closure1_slot0;
                    tango = _closure1_slot2;
                    mike = 29;
                    report = tango[mike];
                    entity = undefined;
                    oscar = zulu.bind(entity)(report);
                    report = oscar.trackAppUIViewed;
                    report = report.bind(oscar)();
                    mike = tango[mike];
                    zulu = zulu.bind(entity)(mike);
                    mike = zulu.trackAppLaunchCompleted;
                    mike = mike.bind(zulu)();
                    mike = _closure2_slot2;
                    options = null;
                    mike = options != mike;
                    oscar = null;
                    if(!mike) { _fun00010_ip = 107; continue _fun00009 }
 72:
                    mike = _closure2_slot2;
                    mike = mike.type;
                    mike = options != mike;
                    oscar = null;
                    if(!mike) { _fun00010_ip = 107; continue _fun00009 }
 90:
                    zulu = _closure1_slot20;
                    mike = _closure2_slot2;
                    mike = mike.type;
                    oscar = zulu[mike];
 107:
                    zulu = _closure1_slot1;
                    romeo = _closure1_slot2;
                    mike = 30;
                    mike = romeo[mike];
                    report = zulu.bind(entity)(mike);
                    tango = report.track;
                    mike = _closure1_slot15;
                    zulu = mike.APP_LANDING_VIEWED;
                    mike = {};
                    yankee = _closure1_slot0;
                    offset = 31;
                    offset = romeo[offset];
                    offset = yankee.bind(entity)(offset);
                    yankee = offset.Storage;
                    offset = yankee.get;
                    verify = _closure1_slot16;
                    verify = verify.LOGOUT_TIMESTAMP_KEY;
                    verify = offset.bind(yankee)(verify);
                    mike['last_logout_ts'] = verify;
                    mike['invite_type'] = oscar;
                    oscar = _closure2_slot2;
                    verify = options == oscar;
                    oscar = undefined;
                    if(verify) { _fun00010_ip = 234; continue _fun00009 }
 211:
                    verify = _closure2_slot2;
                    verify = verify.guild;
                    offset = options == verify;
                    oscar = undefined;
                    if(offset) { _fun00010_ip = 234; continue _fun00009 }
 229:
                    oscar = verify.id;
 234:
                    mike['guild_id'] = oscar;
                    oscar = _closure2_slot2;
                    verify = options == oscar;
                    oscar = undefined;
                    if(verify) { _fun00010_ip = 274; continue _fun00009 }
 251:
                    verify = _closure2_slot2;
                    verify = verify.channel;
                    offset = options == verify;
                    oscar = undefined;
                    if(offset) { _fun00010_ip = 274; continue _fun00009 }
 269:
                    oscar = verify.id;
 274:
                    mike['channel_id'] = oscar;
                    oscar = _closure2_slot2;
                    options = options == oscar;
                    oscar = undefined;
                    if(options) { _fun00010_ip = 300; continue _fun00009 }
 291:
                    golf = _closure2_slot2;
                    oscar = golf.code;
 300:
                    mike['invite_code'] = oscar;
                    mike = tango.bind(report)(zulu, mike);
                    return entity;
                }
            };
            report = golf.bind(tango)(report);
            golf = _closure1_slot3;
            offset = golf.useEffect;
            verify = function() {
                zulu = _closure1_slot1;
                mike = _closure1_slot2;
                entity = 32;
                mike = mike[entity];
                entity = undefined;
                zulu = zulu.bind(entity)(mike);
                mike = zulu.getLocationMetadata;
                mike = mike.bind(zulu)();
                return entity;
            };
            report = new Array(0);
            report = offset.bind(golf)(verify, report);
            report = 33;
            report = options[report];
            oscar = oscar.bind(tango)(report);
            report = _closure1_slot9;
            report = report.hasLoadedExperiments;
            report = oscar.bind(tango)(report);
            oscar = golf.useEffect;
            report = function() {
                entity = undefined;
                return entity;
            };
            report = oscar.bind(golf)(report);
            oscar = golf.useEffect;
            report = function() {
                entity = undefined;
                return entity;
            };
            report = oscar.bind(golf)(report);
            if(!zulu) { _fun00006_ip = 431; continue _fun00005 }
 425:
            if(mike) { _fun00006_ip = 923; continue _fun00005 }
 431:
            vacuum = _closure1_slot0;
            sequence = _closure1_slot2;
            mike = 35;
            mike = sequence[mike];
            romeo = vacuum.bind(tango)(mike);
            report = _closure1_slot21;
            mike = 36;
            mike = sequence[mike];
            mike = vacuum.bind(tango)(mike);
            zulu = mike.ThemeContextProvider;
            mike = {};
            oscar = 'darker';
            mike['theme'] = oscar;
            options = _closure1_slot22;
            golf = _closure1_slot4;
            oscar = {};
            offset = foxtrot.container;
            verify = new Array(2);
            verify[0] = offset;
            offset = {};
            sizing = 37;
            sizing = sequence[sizing];
            sizing = vacuum.bind(tango)(sizing);
            sizing = sizing.NAV_BAR_HEIGHT;
            sizing = output + sizing;
            offset['paddingTop'] = sizing;
            offset['paddingBottom'] = yankee;
            verify[1] = offset;
            oscar['style'] = verify;
            yankee = _closure1_slot21;
            offset = _closure1_slot6;
            verify = {};
            sizing = foxtrot.background;
            verify['style'] = sizing;
            verify['source'] = romeo;
            offset = yankee.bind(tango)(offset, verify);
            verify = new Array(3);
            verify[0] = offset;
            romeo = _closure1_slot21;
            yankee = _closure1_slot27;
            offset = {};
            offset['invite'] = kilo;
            offset['guildTemplate'] = backup;
            offset = romeo.bind(tango)(yankee, offset);
            verify[1] = offset;
            romeo = _closure1_slot21;
            yankee = _closure1_slot4;
            offset = {};
            foxtrot = foxtrot.buttonContainer;
            offset['style'] = foxtrot;
            kilo = _closure1_slot22;
            foxtrot = 38;
            foxtrot = sequence[foxtrot];
            foxtrot = vacuum.bind(tango)(foxtrot);
            backup = foxtrot.ButtonGroup;
            foxtrot = {};
            echo = _closure1_slot21;
            output = 39;
            sizing = sequence[output];
            sizing = vacuum.bind(tango)(sizing);
            result = sizing.Button;
            sizing = {'size': 'lg', 'variant': 'primary-overlay'};
            update = function() { // Original name: handlePressRegister
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    report = _closure2_slot3;
                    tango = _closure2_slot0;
                    zulu = tango.push;
                    entity = _closure1_slot17;
                    if(report) { _fun00012_ip = 81; continue _fun00011 }
 26:
                    report = entity.REGISTER_IDENTITY;
                    report = zulu.bind(tango)(report);
                    golf = _closure1_slot1;
                    oscar = _closure1_slot2;
                    report = 30;
                    oscar = oscar[report];
                    report = undefined;
                    oscar = golf.bind(report)(oscar);
                    report = oscar.track;
                    mike = _closure1_slot15;
                    mike = mike.REGISTER_VIEWED;
                    mike = report.bind(oscar)(mike);
                    _fun00012_ip = 102; continue _fun00011;
 81:
                    mike = entity.AGE_GATE_UNDERAGE;
                    entity = {};
                    report = true;
                    entity['fromRegister'] = report;
                    entity = zulu.bind(tango)(mike, entity);
 102:
                    entity = undefined;
                    return entity;
                }
            };
            sizing['onPress'] = update;
            update = 16;
            control = sequence[update];
            control = vacuum.bind(tango)(control);
            record = control.intl;
            config = record.string;
            control = sequence[update];
            control = vacuum.bind(tango)(control);
            control = control.t;
            control = control.pV8xeX;
            control = config.bind(record)(control);
            sizing['text'] = control;
            result = echo.bind(tango)(result, sizing);
            sizing = new Array(2);
            sizing[0] = result;
            echo = _closure1_slot21;
            output = sequence[output];
            output = vacuum.bind(tango)(output);
            result = output.Button;
            output = {'size': 'lg', 'variant': 'experimental_welcome-secondary'};
            source = function() { // Original name: handlePressLogin
                tango = _closure2_slot0;
                zulu = tango.push;
                entity = _closure1_slot17;
                entity = entity.LOGIN;
                entity = zulu.bind(tango)(entity);
                tango = _closure1_slot1;
                zulu = _closure1_slot2;
                entity = 30;
                zulu = zulu[entity];
                entity = undefined;
                tango = tango.bind(entity)(zulu);
                zulu = tango.track;
                mike = _closure1_slot15;
                mike = mike.LOGIN_VIEWED;
                mike = zulu.bind(tango)(mike);
                return entity;
            };
            output['onPress'] = source;
            source = sequence[update];
            source = vacuum.bind(tango)(source);
            control = source.intl;
            source = control.string;
            update = sequence[update];
            update = vacuum.bind(tango)(update);
            update = update.t;
            update = update.dKhVQE;
            update = source.bind(control)(update);
            output['text'] = update;
            output = echo.bind(tango)(result, output);
            sizing[1] = output;
            foxtrot['children'] = sizing;
            foxtrot = kilo.bind(tango)(backup, foxtrot);
            offset['children'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[2] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            mike['children'] = oscar;
            mike = report.bind(tango)(zulu, mike);
            return mike;
 923:
            zulu = _closure1_slot21;
            mike = _closure1_slot1;
            report = _closure1_slot2;
            entity = 34;
            entity = report[entity];
            mike = mike.bind(tango)(entity);
            entity = {};
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();