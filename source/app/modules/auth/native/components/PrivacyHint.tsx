// app/modules/auth/native/components/PrivacyHint.tsx
export default (function(argFoo, argBar, _, argCor, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot2 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.MarketingURLs;
    var _closure1_slot3 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'paddingHorizontal': 0, 'flex': 1};
    tangon['hint'] = verify;
    verify = {};
    offset = 33;
    verify['width'] = offset;
    tangon['radio'] = verify;
    verify = {'marginTop': 8, 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['consentForm'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/auth/native/components/PrivacyHint.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: PrivacyHint
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            result = michal.consent;
            entity = michal.consentRequired;
            romeon = michal.onToggleConsent;
            michal = _closure1_slot6;
            report = undefined;
            foxtra = michal.bind(report)();
            if(entity) { _fun00002_ip = 185; continue _fun00001 }
 40:
            zuuluu = _closure1_slot4;
            oscard = _closure1_slot0;
            verify = _closure1_slot1;
            entity = 5;
            entity = verify[entity];
            entity = oscard.bind(report)(entity);
            michal = entity.TextWithIOSLinkWorkaround;
            entity = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            tangon = foxtra.hint;
            entity['style'] = tangon;
            tangon = 6;
            golfie = verify[tangon];
            golfie = oscard.bind(report)(golfie);
            option = golfie.intl;
            golfie = option.format;
            tangon = verify[tangon];
            tangon = oscard.bind(report)(tangon);
            tangon = tangon.t;
            oscard = tangon.F+0zT0;
            tangon = {};
            verify = _closure1_slot3;
            offset = verify.TERMS;
            tangon['termsURL'] = offset;
            verify = verify.PRIVACY;
            tangon['privacyURL'] = verify;
            tangon = golfie.bind(option)(oscard, tangon);
            entity['children'] = tangon;
            entity = zuuluu.bind(report)(michal, entity);
            _fun00002_ip = 553; continue _fun00001;
 185:
            tangon = _closure1_slot5;
            zuuluu = _closure1_slot2;
            michal = {};
            oscard = foxtra.consentForm;
            michal['style'] = oscard;
            verify = _closure1_slot4;
            yankee = _closure1_slot0;
            kiloes = _closure1_slot1;
            oscard = 7;
            oscard = kiloes[oscard];
            oscard = yankee.bind(report)(oscard);
            golfie = oscard.TouchableWithoutFeedback;
            oscard = {};
            option = {};
            option['checked'] = result;
            oscard['accessibilityState'] = option;
            option = 'checkbox';
            oscard['accessibilityRole'] = option;
            offset = 6;
            option = kiloes[offset];
            option = yankee.bind(report)(option);
            output = option.intl;
            sizing = output.string;
            option = kiloes[offset];
            option = yankee.bind(report)(option);
            option = option.t;
            option = option.Y7Kgvb;
            option = sizing.bind(output)(option);
            oscard['accessibilityLabel'] = option;
            oscard['onPress'] = romeon;
            option = {'top': 11, 'bottom': 11, 'left': 11};
            oscard['hitSlop'] = option;
            option = {};
            sizing = foxtra.radio;
            option['style'] = sizing;
            sizing = 8;
            sizing = kiloes[sizing];
            sizing = yankee.bind(report)(sizing);
            sizing = sizing.FormRow;
            output = sizing.Radio;
            sizing = {};
            sizing['selected'] = result;
            sizing = verify.bind(report)(output, sizing);
            option['children'] = sizing;
            option = verify.bind(report)(zuuluu, option);
            oscard['children'] = option;
            golfie = verify.bind(report)(golfie, oscard);
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = 5;
            golfie = kiloes[golfie];
            golfie = yankee.bind(report)(golfie);
            option = golfie.TextWithIOSLinkWorkaround;
            golfie = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            foxtra = foxtra.hint;
            golfie['style'] = foxtra;
            golfie['onPress'] = romeon;
            romeon = kiloes[offset];
            romeon = yankee.bind(report)(romeon);
            foxtra = romeon.intl;
            romeon = foxtra.format;
            offset = kiloes[offset];
            offset = yankee.bind(report)(offset);
            offset = offset.t;
            yankee = offset.qMDAPz;
            offset = {};
            backup = _closure1_slot3;
            kiloes = backup.TERMS;
            offset['termsURL'] = kiloes;
            backup = backup.PRIVACY;
            offset['privacyURL'] = backup;
            offset = romeon.bind(foxtra)(yankee, offset);
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[1] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 553:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();