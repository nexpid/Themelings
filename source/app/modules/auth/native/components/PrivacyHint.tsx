// app/modules/auth/native/components/PrivacyHint.tsx
export default (function(argFoo, argBar, _, argCorge, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot2 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.MarketingURLs;
    var _closure1_slot3 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot4 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'paddingHorizontal': 0, 'flex': 1};
    tango['hint'] = verify;
    verify = {};
    offset = 33;
    verify['width'] = offset;
    tango['radio'] = verify;
    verify = {'marginTop': 8, 'flexDirection': 'row', 'alignItems': 'center'};
    tango['consentForm'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'modules/auth/native/components/PrivacyHint.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: PrivacyHint
        _fun111850: for(var _fun111850_ip = 0; ; ) switch(_fun111850_ip) {
 0:
            mike = argFoo;
            result = mike.consent;
            entity = mike.consentRequired;
            romeo = mike.onToggleConsent;
            mike = _closure1_slot6;
            report = undefined;
            foxtrot = mike.bind(report)();
            if(entity) { _fun111850_ip = 187; continue _fun111850 }
 40:
            zulu = _closure1_slot4;
            oscar = _closure1_slot0;
            verify = _closure1_slot1;
            entity = 5;
            entity = verify[entity];
            entity = oscar.bind(report)(entity);
            mike = entity.TextWithIOSLinkWorkaround;
            entity = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            tango = foxtrot.hint;
            entity['style'] = tango;
            tango = 6;
            golf = verify[tango];
            golf = oscar.bind(report)(golf);
            options = golf.intl;
            golf = options.format;
            tango = verify[tango];
            tango = oscar.bind(report)(tango);
            tango = tango.t;
            oscar = tango.F+0zT0;
            tango = {};
            verify = _closure1_slot3;
            offset = verify.TERMS;
            tango['termsURL'] = offset;
            verify = verify.PRIVACY;
            tango['privacyURL'] = verify;
            tango = golf.bind(options)(oscar, tango);
            entity['children'] = tango;
            entity = zulu.bind(report)(mike, entity);
            _fun111850_ip = 555; continue _fun111850;
 187:
            tango = _closure1_slot5;
            zulu = _closure1_slot2;
            mike = {};
            oscar = foxtrot.consentForm;
            mike['style'] = oscar;
            verify = _closure1_slot4;
            yankee = _closure1_slot0;
            kilo = _closure1_slot1;
            oscar = 7;
            oscar = kilo[oscar];
            oscar = yankee.bind(report)(oscar);
            golf = oscar.TouchableWithoutFeedback;
            oscar = {};
            options = {};
            options['checked'] = result;
            oscar['accessibilityState'] = options;
            options = 'checkbox';
            oscar['accessibilityRole'] = options;
            offset = 6;
            options = kilo[offset];
            options = yankee.bind(report)(options);
            output = options.intl;
            sizing = output.string;
            options = kilo[offset];
            options = yankee.bind(report)(options);
            options = options.t;
            options = options.Y7Kgvb;
            options = sizing.bind(output)(options);
            oscar['accessibilityLabel'] = options;
            oscar['onPress'] = romeo;
            options = {'top': 11, 'bottom': 11, 'left': 11};
            oscar['hitSlop'] = options;
            options = {};
            sizing = foxtrot.radio;
            options['style'] = sizing;
            sizing = 8;
            sizing = kilo[sizing];
            sizing = yankee.bind(report)(sizing);
            sizing = sizing.FormRow;
            output = sizing.Radio;
            sizing = {};
            sizing['selected'] = result;
            sizing = verify.bind(report)(output, sizing);
            options['children'] = sizing;
            options = verify.bind(report)(zulu, options);
            oscar['children'] = options;
            golf = verify.bind(report)(golf, oscar);
            oscar = new Array(2);
            oscar[0] = golf;
            golf = 5;
            golf = kilo[golf];
            golf = yankee.bind(report)(golf);
            options = golf.TextWithIOSLinkWorkaround;
            golf = {'style': null, 'variant': 'text-xs/medium', 'color': 'text-muted'};
            foxtrot = foxtrot.hint;
            golf['style'] = foxtrot;
            golf['onPress'] = romeo;
            romeo = kilo[offset];
            romeo = yankee.bind(report)(romeo);
            foxtrot = romeo.intl;
            romeo = foxtrot.format;
            offset = kilo[offset];
            offset = yankee.bind(report)(offset);
            offset = offset.t;
            yankee = offset.qMDAPz;
            offset = {};
            backup = _closure1_slot3;
            kilo = backup.TERMS;
            offset['termsURL'] = kilo;
            backup = backup.PRIVACY;
            offset['privacyURL'] = backup;
            offset = romeo.bind(foxtrot)(yankee, offset);
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[1] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 555:
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();