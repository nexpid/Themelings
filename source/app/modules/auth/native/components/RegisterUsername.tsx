// app/modules/auth/native/components/RegisterUsername.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    yankee = 1;
    tangon = oscard[yankee];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    offset = 4;
    tangon = oscard[offset];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.updateRegistrationOptions;
    var _closure1_slot9 = golfie;
    tangon = tangon.useRegistrationUIStore;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.RegisterTransitionSteps;
    var _closure1_slot11 = golfie;
    tangon = tangon.RegistrationTransitionActionTypes;
    var _closure1_slot12 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot13 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot14 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    verify['flex'] = yankee;
    tangon['page'] = verify;
    verify = {};
    romeon = 24;
    verify['marginTop'] = romeon;
    tangon['container'] = verify;
    verify = {};
    verify['flexGrow'] = yankee;
    tangon['scrollContainer'] = verify;
    verify = {'marginTop': 16, 'marginBottom': 16};
    tangon['button'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['errors'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot15 = tangon;
    tangon = {};
    golfie = 9;
    option = oscard[golfie];
    option = report.bind(entity)(option);
    verify = option.LinearTransition;
    option = verify.easing;
    offset = oscard[golfie];
    offset = report.bind(entity)(offset);
    yankee = offset.Easing;
    offset = yankee.inOut;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.Easing;
    golfie = golfie.quad;
    golfie = offset.bind(yankee)(golfie);
    verify = option.bind(verify)(golfie);
    option = verify.duration;
    golfie = 300;
    golfie = option.bind(verify)(golfie);
    tangon['layout'] = golfie;
    var _closure1_slot16 = tangon;
    tangon = 27;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/auth/native/components/RegisterUsername.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: RegisterUsername
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            sizing = _closure1_slot1;
            kiloes = _closure1_slot2;
            michal = 10;
            michal = kiloes[michal];
            tangon = undefined;
            zuuluu = sizing.bind(tangon)(michal);
            michal = {};
            report = 'RegisterUsername';
            michal['location'] = report;
            michal = zuuluu.bind(tangon)(michal);
            oscard = michal.streamlineErrorsCTAsEnabled;
            vacuum = michal.showFieldErrorsEnabled;
            michal = _closure1_slot15;
            record = michal.bind(tangon)();
            report = _closure1_slot3;
            zuuluu = report.useContext;
            backup = _closure1_slot0;
            michal = 11;
            michal = kiloes[michal];
            michal = backup.bind(tangon)(michal);
            michal = michal.TrackRegistrationContext;
            option = zuuluu.bind(report)(michal);
            var _closure2_slot0 = option;
            zuuluu = _closure1_slot10;
            michal = function(argFoo) {
                entity = argFoo;
                entity = entity.submitting;
                return entity;
            };
            romeon = zuuluu.bind(tangon)(michal);
            michal = function(argFoo) {
                entity = argFoo;
                entity = entity.errors;
                return entity;
            };
            config = zuuluu.bind(tangon)(michal);
            michal = function(argFoo) {
                entity = argFoo;
                entity = entity.registrationOptions;
                return entity;
            };
            result = zuuluu.bind(tangon)(michal);
            var _closure2_slot1 = result;
            zuuluu = 12;
            michal = kiloes[zuuluu];
            yankee = backup.bind(tangon)(michal);
            offset = yankee.useStateFromStores;
            michal = _closure1_slot8;
            verify = new Array(1);
            verify[0] = michal;
            michal = function() {
                michal = _closure1_slot8;
                entity = michal.getDisplayedInviteCode;
                entity = entity.bind(michal)();
                return entity;
            };
            michal = offset.bind(yankee)(verify, michal);
            var _closure2_slot2 = michal;
            michal = kiloes[zuuluu];
            yankee = backup.bind(tangon)(michal);
            offset = yankee.useStateFromStores;
            michal = _closure1_slot7;
            verify = new Array(1);
            verify[0] = michal;
            michal = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot2;
                    entity = null;
                    zuuluu = entity != zuuluu;
                    if(!zuuluu) { _fun00004_ip = 38; continue _fun00003 }
 16:
                    tangon = _closure1_slot7;
                    zuuluu = tangon.getInvite;
                    michal = _closure2_slot2;
                    entity = zuuluu.bind(tangon)(michal);
 38:
                    return entity;
                }
            };
            offset = offset.bind(yankee)(verify, michal);
            var _closure2_slot3 = offset;
            michal = 13;
            michal = kiloes[michal];
            foxtra = backup.bind(tangon)(michal);
            yankee = foxtra.useUsernameRegistrationStep;
            michal = 14;
            verify = kiloes[michal];
            verify = backup.bind(tangon)(verify);
            verify = verify.AuthStates;
            verify = verify.REGISTER_USERNAME;
            yankee = yankee.bind(foxtra)(verify, vacuum);
            papara = yankee.usernameStatus;
            verify = yankee.transitionToNextStepOrSubmit;
            var _closure2_slot4 = verify;
            status = yankee.username;
            var _closure2_slot5 = status;
            target = yankee.setUsername;
            yankee = yankee.preventSubmitUsername;
            output = report.useMemo;
            foxtra = new Array(3);
            foxtra[0] = result;
            foxtra[1] = status;
            foxtra[2] = offset;
            offset = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = {};
                    report = _closure2_slot1;
                    oscard = entity;
                    zuuluu = copyDataProperties(oscard, report);
                    tangon = _closure2_slot5;
                    zuuluu = 'username';
                    entity[zuuluu] = tangon;
                    tangon = _closure2_slot3;
                    zuuluu = null;
                    tangon = zuuluu == tangon;
                    zuuluu = undefined;
                    if(tangon) { _fun00006_ip = 53; continue _fun00005 }
 44:
                    michal = _closure2_slot3;
                    zuuluu = michal.code;
 53:
                    michal = 'invite';
                    entity[michal] = zuuluu;
                    return entity;
                }
            };
            foxtra = output.bind(report)(offset, foxtra);
            var _closure2_slot6 = foxtra;
            zuuluu = kiloes[zuuluu];
            result = backup.bind(tangon)(zuuluu);
            output = result.useStateFromStores;
            zuuluu = _closure1_slot6;
            offset = new Array(1);
            offset[0] = zuuluu;
            zuuluu = function() {
                michal = _closure1_slot6;
                entity = michal.getAuthenticationConsentRequired;
                entity = entity.bind(michal)();
                return entity;
            };
            echoed = output.bind(result)(offset, zuuluu);
            zuuluu = 15;
            zuuluu = kiloes[zuuluu];
            output = backup.bind(tangon)(zuuluu);
            offset = output.hasAllRegistrationFieldsCompleted;
            zuuluu = {};
            result = true;
            result = result === echoed;
            zuuluu['isConsentRequired'] = result;
            offset = offset.bind(output)(foxtra, zuuluu);
            var _closure2_slot7 = offset;
            zuuluu = 16;
            zuuluu = kiloes[zuuluu];
            output = sizing.bind(tangon)(zuuluu);
            zuuluu = 17;
            zuuluu = kiloes[zuuluu];
            echoed = backup.bind(tangon)(zuuluu);
            result = echoed.getPreviousRegistrationTransitionStep;
            zuuluu = kiloes[michal];
            zuuluu = backup.bind(tangon)(zuuluu);
            zuuluu = zuuluu.AuthStates;
            zuuluu = zuuluu.REGISTER_USERNAME;
            zuuluu = result.bind(echoed)(zuuluu);
            zuuluu = output.bind(tangon)(zuuluu);
            zuuluu = 18;
            zuuluu = kiloes[zuuluu];
            zuuluu = sizing.bind(tangon)(zuuluu);
            michal = kiloes[michal];
            michal = backup.bind(tangon)(michal);
            michal = michal.AuthStates;
            michal = michal.REGISTER_USERNAME;
            michal = zuuluu.bind(tangon)(michal);
            backup = report.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = option;
            michal = function() {
                zuuluu = _closure2_slot0;
                michal = {};
                tangon = _closure1_slot11;
                tangon = tangon.USERNAME;
                michal['step'] = tangon;
                entity = _closure1_slot12;
                entity = entity.VIEWED;
                michal['actionType'] = entity;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = backup.bind(report)(michal, zuuluu);
            zuuluu = report.useCallback;
            michal = new Array(4);
            michal[0] = foxtra;
            michal[1] = verify;
            michal[2] = option;
            michal[3] = offset;
            entity = function() {
                report = _closure2_slot0;
                tangon = {};
                entity = _closure1_slot11;
                entity = entity.USERNAME;
                tangon['step'] = entity;
                entity = _closure1_slot12;
                entity = entity.SUBMITTED;
                tangon['actionType'] = entity;
                entity = undefined;
                tangon = report.bind(entity)(tangon);
                tangon = _closure1_slot9;
                zuuluu = _closure2_slot6;
                zuuluu = tangon.bind(entity)(zuuluu);
                zuuluu = _closure2_slot4;
                michal = _closure2_slot7;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            foxtra = zuuluu.bind(report)(entity, michal);
            report = _closure1_slot0;
            entity = _closure1_slot2;
            result = 19;
            michal = entity[result];
            michal = report.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = entity[result];
            entity = report.bind(tangon)(entity);
            entity = entity.t;
            if(offset) { _fun00002_ip = 662; continue _fun00001 }
 649:
            report = entity.PDTjLC;
            cntext = michal.bind(zuuluu)(report);
            _fun00002_ip = 673; continue _fun00001;
 662:
            entity = entity.825cFx;
            cntext = michal.bind(zuuluu)(entity);
 673:
            zuuluu = _closure1_slot14;
            option = _closure1_slot1;
            backup = _closure1_slot2;
            entity = 20;
            entity = backup[entity];
            michal = option.bind(tangon)(entity);
            entity = {};
            report = record.page;
            entity['style'] = report;
            verify = _closure1_slot13;
            report = 21;
            report = backup[report];
            option = option.bind(tangon)(report);
            report = {};
            output = _closure1_slot0;
            kiloes = backup[result];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = backup[result];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.JumOYm;
            backup = kiloes.bind(sizing)(backup);
            report['headerText'] = backup;
            kiloes = _closure1_slot5;
            backup = {};
            sizing = record.scrollContainer;
            backup['contentContainerStyle'] = sizing;
            sizing = 'handled';
            backup['keyboardShouldPersistTaps'] = sizing;
            output = _closure1_slot4;
            sizing = {};
            result = record.container;
            sizing['style'] = result;
            sequen = null;
            echoed = null;
            if(!oscard) { _fun00002_ip = 900; continue _fun00001 }
 830:
            result = config.message;
            result = sequen != result;
            echoed = null;
            if(!result) { _fun00002_ip = 900; continue _fun00001 }
 844:
            update = config.message;
            result = '';
            echoed = null;
            if(!(result !== update)) { _fun00002_ip = 900; continue _fun00001 }
 859:
            source = _closure1_slot13;
            update = _closure1_slot1;
            ctrled = _closure1_slot2;
            result = 22;
            result = ctrled[result];
            update = update.bind(tangon)(result);
            result = {};
            ctrled = config.message;
            result['children'] = ctrled;
            echoed = source.bind(tangon)(update, result);
 900:
            result = new Array(2);
            result[0] = echoed;
            ctrled = _closure1_slot13;
            source = _closure1_slot0;
            update = _closure1_slot2;
            echoed = 23;
            echoed = update[echoed];
            echoed = source.bind(tangon)(echoed);
            source = echoed.RegisterUsernameInput;
            echoed = {};
            echoed['username'] = status;
            echoed['setUsername'] = target;
            echoed['usernameStatus'] = papara;
            echoed['streamlineErrorsCTAsEnabled'] = oscard;
            echoed['showFieldErrorsEnabled'] = vacuum;
            echoed = ctrled.bind(tangon)(source, echoed);
            result[1] = echoed;
            sizing['children'] = result;
            output = zuuluu.bind(tangon)(output, sizing);
            sizing = new Array(2);
            sizing[0] = output;
            echoed = _closure1_slot14;
            result = _closure1_slot1;
            output = 9;
            output = update[output];
            output = result.bind(tangon)(output);
            result = output.View;
            output = {};
            update = record.button;
            output['style'] = update;
            sierra = _closure1_slot16;
            limora = output;
            update = copyDataProperties(limora, sierra);
            update = !oscard;
            if(!update) { _fun00002_ip = 1109; continue _fun00001 }
 1046:
            vacuum = _closure1_slot13;
            ctrled = _closure1_slot0;
            papara = _closure1_slot2;
            source = 24;
            source = papara[source];
            source = ctrled.bind(tangon)(source);
            ctrled = source.Button;
            source = {};
            papara = 'lg';
            source['size'] = papara;
            source['loading'] = romeon;
            source['text'] = cntext;
            source['onPress'] = foxtra;
            source['disabled'] = yankee;
            update = vacuum.bind(tangon)(ctrled, source);
 1109:
            source = new Array(2);
            source[0] = update;
            update = null;
            if(oscard) { _fun00002_ip = 1202; continue _fun00001 }
 1122:
            ctrled = config.message;
            ctrled = sequen == ctrled;
            update = null;
            if(ctrled) { _fun00002_ip = 1202; continue _fun00001 }
 1136:
            vacuum = config.message;
            ctrled = '';
            update = null;
            if(!(ctrled !== vacuum)) { _fun00002_ip = 1202; continue _fun00001 }
 1151:
            sequen = _closure1_slot13;
            vacuum = _closure1_slot1;
            cntext = _closure1_slot2;
            ctrled = 25;
            ctrled = cntext[ctrled];
            vacuum = vacuum.bind(tangon)(ctrled);
            ctrled = {};
            record = record.errors;
            ctrled['style'] = record;
            config = config.message;
            ctrled['children'] = config;
            update = sequen.bind(tangon)(vacuum, ctrled);
 1202:
            source[1] = update;
            update = 'children';
            output[update] = source;
            output = echoed.bind(tangon)(result, output);
            sizing[1] = output;
            backup['children'] = sizing;
            backup = zuuluu.bind(tangon)(kiloes, backup);
            report['children'] = backup;
            option = verify.bind(tangon)(option, report);
            report = new Array(2);
            report[0] = option;
            if(!oscard) { _fun00002_ip = 1306; continue _fun00001 }
 1256:
            verify = _closure1_slot13;
            option = _closure1_slot1;
            backup = _closure1_slot2;
            golfie = 26;
            golfie = backup[golfie];
            option = option.bind(tangon)(golfie);
            golfie = {};
            golfie['onPress'] = foxtra;
            golfie['loading'] = romeon;
            golfie['disabled'] = yankee;
            golfie['finalPage'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 1306:
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['RegisterUsername'] = michal;
    return entity;
})();