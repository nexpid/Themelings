// app/modules/auth/native/components/RegisterUsername.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    yankee = 4;
    tangon = oscard[yankee];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot8 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.updateRegistrationOptions;
    var _closure1_slot9 = golfie;
    tangon = tangon.useRegistrationUIStore;
    var _closure1_slot10 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.RegisterTransitionSteps;
    var _closure1_slot11 = golfie;
    tangon = tangon.RegistrationTransitionActionTypes;
    var _closure1_slot12 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot13 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot14 = tangon;
    tangon = 8;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    golfie = {};
    tangon = {};
    tangon['flex'] = romeon;
    golfie['page'] = tangon;
    offset = {};
    tangon = 24;
    offset['marginTop'] = tangon;
    golfie['container'] = offset;
    offset = {};
    offset['flexGrow'] = romeon;
    golfie['scrollContainer'] = offset;
    offset = {'marginTop': 16, 'marginBottom': 16};
    golfie['button'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    golfie['errors'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot15 = golfie;
    golfie = {};
    option = 9;
    verify = oscard[option];
    verify = report.bind(entity)(verify);
    offset = verify.LinearTransition;
    verify = offset.easing;
    yankee = oscard[option];
    yankee = report.bind(entity)(yankee);
    romeon = yankee.Easing;
    yankee = romeon.inOut;
    option = oscard[option];
    option = report.bind(entity)(option);
    option = option.Easing;
    option = option.quad;
    option = yankee.bind(romeon)(option);
    offset = verify.bind(offset)(option);
    verify = offset.duration;
    option = 300;
    option = verify.bind(offset)(option);
    golfie['layout'] = option;
    var _closure1_slot16 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/auth/native/components/RegisterUsername.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: RegisterUsername
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = _closure1_slot15;
            tangon = undefined;
            echoed = michal.bind(tangon)();
            oscard = _closure1_slot3;
            zuuluu = oscard.useContext;
            offset = _closure1_slot0;
            yankee = _closure1_slot2;
            michal = 10;
            michal = yankee[michal];
            michal = offset.bind(tangon)(michal);
            michal = michal.TrackRegistrationContext;
            golfie = zuuluu.bind(oscard)(michal);
            var _closure2_slot0 = golfie;
            zuuluu = _closure1_slot10;
            michal = function(argFoo) {
                entity = argFoo;
                entity = entity.submitting;
                return entity;
            };
            source = zuuluu.bind(tangon)(michal);
            michal = function(argFoo) {
                entity = argFoo;
                entity = entity.errors;
                return entity;
            };
            result = zuuluu.bind(tangon)(michal);
            michal = function(argFoo) {
                entity = argFoo;
                entity = entity.registrationOptions;
                return entity;
            };
            foxtra = zuuluu.bind(tangon)(michal);
            var _closure2_slot1 = foxtra;
            zuuluu = 11;
            michal = yankee[zuuluu];
            verify = offset.bind(tangon)(michal);
            option = verify.useStateFromStores;
            michal = _closure1_slot8;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                michal = _closure1_slot8;
                entity = michal.getDisplayedInviteCode;
                entity = entity.bind(michal)();
                return entity;
            };
            michal = option.bind(verify)(report, michal);
            var _closure2_slot2 = michal;
            michal = yankee[zuuluu];
            verify = offset.bind(tangon)(michal);
            option = verify.useStateFromStores;
            michal = _closure1_slot7;
            report = new Array(1);
            report[0] = michal;
            michal = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = _closure2_slot2;
                    entity = null;
                    zuuluu = entity != zuuluu;
                    if(!zuuluu) { _fun00004_ip = 38; continue _fun00003 }
 16:
                    tangon = _closure1_slot7;
                    zuuluu = tangon.getInvite;
                    michal = _closure2_slot2;
                    entity = zuuluu.bind(tangon)(michal);
 38:
                    return entity;
                }
            };
            report = option.bind(verify)(report, michal);
            var _closure2_slot3 = report;
            michal = 12;
            michal = yankee[michal];
            romeon = offset.bind(tangon)(michal);
            verify = romeon.useUsernameRegistrationStep;
            michal = 13;
            option = yankee[michal];
            option = offset.bind(tangon)(option);
            option = option.AuthStates;
            option = option.REGISTER_USERNAME;
            verify = verify.bind(romeon)(option);
            sequen = verify.usernameStatus;
            option = verify.transitionToNextStepOrSubmit;
            var _closure2_slot4 = option;
            record = verify.username;
            var _closure2_slot5 = record;
            config = verify.setUsername;
            sizing = verify.preventSubmitUsername;
            romeon = oscard.useMemo;
            verify = new Array(3);
            verify[0] = foxtra;
            verify[1] = record;
            verify[2] = report;
            report = function() {
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = {};
                    report = _closure2_slot1;
                    oscard = entity;
                    zuuluu = copyDataProperties(oscard, report);
                    tangon = _closure2_slot5;
                    zuuluu = 'username';
                    entity[zuuluu] = tangon;
                    tangon = _closure2_slot3;
                    zuuluu = null;
                    tangon = zuuluu == tangon;
                    zuuluu = undefined;
                    if(tangon) { _fun00006_ip = 53; continue _fun00005 }
 44:
                    michal = _closure2_slot3;
                    zuuluu = michal.code;
 53:
                    michal = 'invite';
                    entity[michal] = zuuluu;
                    return entity;
                }
            };
            verify = romeon.bind(oscard)(report, verify);
            var _closure2_slot6 = verify;
            zuuluu = yankee[zuuluu];
            foxtra = offset.bind(tangon)(zuuluu);
            romeon = foxtra.useStateFromStores;
            zuuluu = _closure1_slot6;
            report = new Array(1);
            report[0] = zuuluu;
            zuuluu = function() {
                michal = _closure1_slot6;
                entity = michal.getAuthenticationConsentRequired;
                entity = entity.bind(michal)();
                return entity;
            };
            backup = romeon.bind(foxtra)(report, zuuluu);
            zuuluu = 14;
            zuuluu = yankee[zuuluu];
            romeon = offset.bind(tangon)(zuuluu);
            report = romeon.hasAllRegistrationFieldsCompleted;
            zuuluu = {};
            foxtra = true;
            foxtra = foxtra === backup;
            zuuluu['isConsentRequired'] = foxtra;
            report = report.bind(romeon)(verify, zuuluu);
            var _closure2_slot7 = report;
            romeon = _closure1_slot1;
            zuuluu = 15;
            zuuluu = yankee[zuuluu];
            foxtra = romeon.bind(tangon)(zuuluu);
            zuuluu = 16;
            zuuluu = yankee[zuuluu];
            output = offset.bind(tangon)(zuuluu);
            backup = output.getPreviousRegistrationTransitionStep;
            zuuluu = yankee[michal];
            zuuluu = offset.bind(tangon)(zuuluu);
            zuuluu = zuuluu.AuthStates;
            zuuluu = zuuluu.REGISTER_USERNAME;
            zuuluu = backup.bind(output)(zuuluu);
            zuuluu = foxtra.bind(tangon)(zuuluu);
            zuuluu = 17;
            zuuluu = yankee[zuuluu];
            zuuluu = romeon.bind(tangon)(zuuluu);
            michal = yankee[michal];
            michal = offset.bind(tangon)(michal);
            michal = michal.AuthStates;
            michal = michal.REGISTER_USERNAME;
            michal = zuuluu.bind(tangon)(michal);
            offset = oscard.useEffect;
            zuuluu = new Array(1);
            zuuluu[0] = golfie;
            michal = function() {
                zuuluu = _closure2_slot0;
                michal = {};
                tangon = _closure1_slot11;
                tangon = tangon.USERNAME;
                michal['step'] = tangon;
                entity = _closure1_slot12;
                entity = entity.VIEWED;
                michal['actionType'] = entity;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = offset.bind(oscard)(michal, zuuluu);
            zuuluu = oscard.useCallback;
            michal = new Array(4);
            michal[0] = verify;
            michal[1] = option;
            michal[2] = golfie;
            michal[3] = report;
            entity = function() {
                report = _closure2_slot0;
                tangon = {};
                entity = _closure1_slot11;
                entity = entity.USERNAME;
                tangon['step'] = entity;
                entity = _closure1_slot12;
                entity = entity.SUBMITTED;
                tangon['actionType'] = entity;
                entity = undefined;
                tangon = report.bind(entity)(tangon);
                tangon = _closure1_slot9;
                zuuluu = _closure2_slot6;
                zuuluu = tangon.bind(entity)(zuuluu);
                zuuluu = _closure2_slot4;
                michal = _closure2_slot7;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            output = zuuluu.bind(oscard)(entity, michal);
            oscard = _closure1_slot0;
            entity = _closure1_slot2;
            golfie = 18;
            michal = entity[golfie];
            michal = oscard.bind(tangon)(michal);
            zuuluu = michal.intl;
            michal = zuuluu.string;
            entity = entity[golfie];
            entity = oscard.bind(tangon)(entity);
            entity = entity.t;
            if(report) { _fun00002_ip = 622; continue _fun00001 }
 609:
            report = entity.PDTjLC;
            update = michal.bind(zuuluu)(report);
            _fun00002_ip = 633; continue _fun00001;
 622:
            entity = entity.825cFx;
            update = michal.bind(zuuluu)(entity);
 633:
            zuuluu = _closure1_slot13;
            romeon = _closure1_slot1;
            ctrled = _closure1_slot2;
            entity = 19;
            entity = ctrled[entity];
            michal = romeon.bind(tangon)(entity);
            entity = {};
            report = echoed.page;
            entity['style'] = report;
            report = 20;
            report = ctrled[report];
            oscard = romeon.bind(tangon)(report);
            report = {};
            backup = _closure1_slot0;
            option = ctrled[golfie];
            option = backup.bind(tangon)(option);
            verify = option.intl;
            option = verify.string;
            golfie = ctrled[golfie];
            golfie = backup.bind(tangon)(golfie);
            golfie = golfie.t;
            golfie = golfie.JumOYm;
            golfie = option.bind(verify)(golfie);
            report['headerText'] = golfie;
            verify = _closure1_slot14;
            option = _closure1_slot5;
            golfie = {};
            offset = echoed.scrollContainer;
            golfie['contentContainerStyle'] = offset;
            offset = 'handled';
            golfie['keyboardShouldPersistTaps'] = offset;
            yankee = _closure1_slot4;
            offset = {};
            foxtra = echoed.container;
            offset['style'] = foxtra;
            foxtra = 21;
            foxtra = ctrled[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            vacuum = foxtra.RegisterUsernameInput;
            foxtra = {};
            foxtra['username'] = record;
            foxtra['setUsername'] = config;
            foxtra['usernameStatus'] = sequen;
            foxtra = zuuluu.bind(tangon)(vacuum, foxtra);
            offset['children'] = foxtra;
            yankee = zuuluu.bind(tangon)(yankee, offset);
            offset = new Array(2);
            offset[0] = yankee;
            yankee = 9;
            yankee = ctrled[yankee];
            yankee = romeon.bind(tangon)(yankee);
            romeon = yankee.View;
            yankee = {};
            foxtra = echoed.button;
            yankee['style'] = foxtra;
            cntext = _closure1_slot16;
            papara = yankee;
            foxtra = copyDataProperties(papara, cntext);
            foxtra = 22;
            foxtra = ctrled[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            backup = foxtra.Button;
            foxtra = {};
            ctrled = 'lg';
            foxtra['size'] = ctrled;
            foxtra['loading'] = source;
            foxtra['text'] = update;
            foxtra['onPress'] = output;
            foxtra['disabled'] = sizing;
            foxtra = zuuluu.bind(tangon)(backup, foxtra);
            backup = new Array(2);
            backup[0] = foxtra;
            foxtra = result.message;
            update = null;
            sizing = update != foxtra;
            foxtra = null;
            if(!sizing) { _fun00002_ip = 1022; continue _fun00001 }
 956:
            output = result.message;
            sizing = '';
            foxtra = null;
            if(!(sizing !== output)) { _fun00002_ip = 1022; continue _fun00001 }
 971:
            output = _closure1_slot13;
            sizing = _closure1_slot1;
            update = _closure1_slot2;
            kiloes = 23;
            kiloes = update[kiloes];
            sizing = sizing.bind(tangon)(kiloes);
            kiloes = {};
            echoed = echoed.errors;
            kiloes['style'] = echoed;
            result = result.message;
            kiloes['children'] = result;
            foxtra = output.bind(tangon)(sizing, kiloes);
 1022:
            backup[1] = foxtra;
            foxtra = 'children';
            yankee[foxtra] = backup;
            yankee = verify.bind(tangon)(romeon, yankee);
            offset[1] = yankee;
            golfie['children'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['RegisterUsername'] = michal;
    return entity;
})();