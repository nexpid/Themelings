// app/modules/dm_settings_upsell/native/DmSettingsUpsellActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot4 = golfie;
    tangon = tangon.Image;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot7 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_12;
    verify['paddingVertical'] = romeon;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    verify['gap'] = romeon;
    tangon['container'] = verify;
    romeon = 'center';
    verify = {'alignSelf': 'center', 'width': 73, 'height': 86};
    tangon['headerImage'] = verify;
    verify = {'textAlign': 'center', 'alignSelf': 'center', 'width': 250};
    tangon['title'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    tangon['body'] = verify;
    verify = {};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_16;
    verify['paddingVertical'] = foxtra;
    tangon['guildContainer'] = verify;
    verify = {'marginTop': null, 'flexDirection': 'row', 'alignItems': 'center'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    verify['marginTop'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['gap'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_12;
    verify['padding'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_SURFACE_RAISED;
    verify['backgroundColor'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.md;
    verify['borderRadius'] = foxtra;
    tangon['guildInfo'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.spacing;
    offset = offset.PX_16;
    verify['paddingHorizontal'] = offset;
    tangon['footer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'modules/dm_settings_upsell/native/DmSettingsUpsellActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: DmSettingsUpsellActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            entity = entity.guildId;
            var _closure2_slot0 = entity;
            michal = _closure1_slot9;
            report = undefined;
            backup = michal.bind(report)();
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 6;
            michal = tangon[michal];
            oscard = zuuluu.bind(report)(michal);
            tangon = oscard.useStateFromStores;
            michal = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                zuuluu = _closure1_slot6;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            source = tangon.bind(oscard)(zuuluu, michal);
            var _closure2_slot1 = source;
            tangon = _closure1_slot3;
            zuuluu = tangon.useEffect;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 7;
                michal = golfie[entity];
                entity = undefined;
                zuuluu = oscard.bind(entity)(michal);
                michal = zuuluu.acknowledgeDmSettingsUpsell;
                report = _closure2_slot0;
                michal = michal.bind(zuuluu)(report);
                michal = 8;
                zuuluu = golfie[michal];
                tangon = oscard.bind(entity)(zuuluu);
                zuuluu = tangon.trackEvent;
                michal = golfie[michal];
                michal = oscard.bind(entity)(michal);
                michal = michal.DmUpsellActionTypes;
                michal = michal.MODAL_VIEWED;
                michal = zuuluu.bind(tangon)(michal, report);
                return entity;
            };
            entity = zuuluu.bind(tangon)(entity, michal);
            entity = null;
            michal = entity == source;
            if(michal) { _fun00002_ip = 1026; continue _fun00001 }
 123:
            tangon = _closure1_slot7;
            foxtra = _closure1_slot0;
            output = _closure1_slot2;
            michal = 9;
            michal = output[michal];
            michal = foxtra.bind(report)(michal);
            zuuluu = michal.ActionSheet;
            michal = {};
            oscard = true;
            michal['startExpanded'] = oscard;
            option = _closure1_slot8;
            golfie = _closure1_slot4;
            oscard = {};
            verify = backup.container;
            oscard['style'] = verify;
            offset = _closure1_slot5;
            verify = {};
            update = _closure1_slot1;
            yankee = 10;
            yankee = output[yankee];
            yankee = update.bind(report)(yankee);
            verify['source'] = yankee;
            yankee = backup.headerImage;
            verify['style'] = yankee;
            offset = tangon.bind(report)(offset, verify);
            verify = new Array(7);
            verify[0] = offset;
            echoed = 11;
            offset = output[echoed];
            offset = foxtra.bind(report)(offset);
            yankee = offset.Text;
            offset = {'variant': 'heading-lg/bold', 'color': 'header-primary'};
            romeon = backup.title;
            offset['style'] = romeon;
            romeon = 12;
            kiloes = output[romeon];
            kiloes = foxtra.bind(report)(kiloes);
            ctrled = kiloes.intl;
            result = ctrled.string;
            kiloes = output[romeon];
            kiloes = foxtra.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.w2BvnJ;
            kiloes = result.bind(ctrled)(kiloes);
            offset['children'] = kiloes;
            offset = tangon.bind(report)(yankee, offset);
            verify[1] = offset;
            offset = output[echoed];
            offset = foxtra.bind(report)(offset);
            yankee = offset.Text;
            offset = {'variant': 'text-md/normal', 'color': 'header-secondary'};
            kiloes = backup.body;
            offset['style'] = kiloes;
            kiloes = output[romeon];
            kiloes = foxtra.bind(report)(kiloes);
            vacuum = kiloes.intl;
            ctrled = vacuum.format;
            kiloes = output[romeon];
            kiloes = foxtra.bind(report)(kiloes);
            kiloes = kiloes.t;
            result = kiloes.Depjkp;
            kiloes = {};
            sequen = source.name;
            kiloes['guild_name'] = sequen;
            kiloes = ctrled.bind(vacuum)(result, kiloes);
            offset['children'] = kiloes;
            offset = tangon.bind(report)(yankee, offset);
            verify[2] = offset;
            offset = {};
            yankee = backup.guildContainer;
            offset['style'] = yankee;
            yankee = output[echoed];
            yankee = foxtra.bind(report)(yankee);
            kiloes = yankee.Text;
            yankee = {'variant': 'eyebrow', 'color': 'header-secondary'};
            result = output[romeon];
            result = foxtra.bind(report)(result);
            vacuum = result.intl;
            ctrled = vacuum.string;
            result = output[romeon];
            result = foxtra.bind(report)(result);
            result = result.t;
            result = result.KPB2i4;
            result = ctrled.bind(vacuum)(result);
            yankee['children'] = result;
            kiloes = tangon.bind(report)(kiloes, yankee);
            yankee = new Array(2);
            yankee[0] = kiloes;
            kiloes = {};
            result = backup.guildInfo;
            kiloes['style'] = result;
            ctrled = 13;
            result = output[ctrled];
            update = update.bind(report)(result);
            result = {};
            result['guild'] = source;
            ctrled = output[ctrled];
            ctrled = foxtra.bind(report)(ctrled);
            ctrled = ctrled.GuildIconSizes;
            ctrled = ctrled.SMALL_32;
            result['size'] = ctrled;
            update = tangon.bind(report)(update, result);
            result = new Array(2);
            result[0] = update;
            echoed = output[echoed];
            echoed = foxtra.bind(report)(echoed);
            update = echoed.Text;
            echoed = {'variant': 'text-md/semibold', 'color': 'header-primary'};
            source = source.name;
            echoed['children'] = source;
            echoed = tangon.bind(report)(update, echoed);
            result[1] = echoed;
            kiloes['children'] = result;
            kiloes = option.bind(report)(golfie, kiloes);
            yankee[1] = kiloes;
            offset['children'] = yankee;
            offset = option.bind(report)(golfie, offset);
            verify[3] = offset;
            offset = 14;
            yankee = output[offset];
            yankee = foxtra.bind(report)(yankee);
            kiloes = yankee.Button;
            yankee = {};
            result = 'lg';
            yankee['size'] = result;
            result = function() { // Original name: onPress
                oscard = _closure1_slot0;
                golfie = _closure1_slot2;
                entity = 15;
                zuuluu = golfie[entity];
                entity = undefined;
                tangon = oscard.bind(entity)(zuuluu);
                zuuluu = tangon.getSanitizedRestrictedGuilds;
                offset = zuuluu.bind(tangon)();
                zuuluu = offset.add;
                report = _closure2_slot0;
                zuuluu = zuuluu.bind(offset)(report);
                zuuluu = 16;
                zuuluu = golfie[zuuluu];
                zuuluu = oscard.bind(entity)(zuuluu);
                option = zuuluu.RestrictedGuildIds;
                tangon = option.updateSetting;
                zuuluu = global;
                verify = zuuluu.Array;
                zuuluu = verify.from;
                zuuluu = zuuluu.bind(verify)(offset);
                option = tangon.bind(option)(zuuluu);
                tangon = option.then;
                zuuluu = function() {
                    golfie = _closure1_slot1;
                    verify = _closure1_slot2;
                    entity = 17;
                    michal = verify[entity];
                    entity = undefined;
                    tangon = golfie.bind(entity)(michal);
                    zuuluu = tangon.open;
                    michal = {};
                    oscard = 'DM_SETTINGS_UPSELL_SUCCESS_TOAST';
                    michal['key'] = oscard;
                    oscard = 18;
                    oscard = verify[oscard];
                    oscard = golfie.bind(entity)(oscard);
                    michal['icon'] = oscard;
                    option = _closure1_slot0;
                    report = 12;
                    oscard = verify[report];
                    oscard = option.bind(entity)(oscard);
                    golfie = oscard.intl;
                    oscard = golfie.string;
                    report = verify[report];
                    report = option.bind(entity)(report);
                    report = report.t;
                    report = report.rlYD1d;
                    report = oscard.bind(golfie)(report);
                    michal['content'] = report;
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                };
                zuuluu = tangon.bind(option)(zuuluu);
                zuuluu = _closure1_slot1;
                michal = 19;
                michal = golfie[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.hideActionSheet;
                michal = michal.bind(zuuluu)();
                michal = 8;
                zuuluu = golfie[michal];
                tangon = oscard.bind(entity)(zuuluu);
                zuuluu = tangon.trackEvent;
                michal = golfie[michal];
                michal = oscard.bind(entity)(michal);
                michal = michal.DmUpsellActionTypes;
                michal = michal.MODAL_DISABLED_DMS;
                michal = zuuluu.bind(tangon)(michal, report);
                return entity;
            };
            yankee['onPress'] = result;
            result = output[romeon];
            result = foxtra.bind(report)(result);
            update = result.intl;
            echoed = update.string;
            result = output[romeon];
            result = foxtra.bind(report)(result);
            result = result.t;
            result = result.TD7iU1;
            result = echoed.bind(update)(result);
            yankee['text'] = result;
            yankee = tangon.bind(report)(kiloes, yankee);
            verify[4] = yankee;
            offset = output[offset];
            offset = foxtra.bind(report)(offset);
            yankee = offset.Button;
            offset = {'size': 'lg', 'variant': 'secondary'};
            kiloes = function() { // Original name: onPress
                tangon = _closure1_slot1;
                oscard = _closure1_slot2;
                entity = 19;
                zuuluu = oscard[entity];
                entity = undefined;
                tangon = tangon.bind(entity)(zuuluu);
                zuuluu = tangon.hideActionSheet;
                zuuluu = zuuluu.bind(tangon)();
                zuuluu = _closure1_slot0;
                michal = 8;
                tangon = oscard[michal];
                report = zuuluu.bind(entity)(tangon);
                tangon = report.trackEvent;
                michal = oscard[michal];
                michal = zuuluu.bind(entity)(michal);
                michal = michal.DmUpsellActionTypes;
                zuuluu = michal.MODAL_DISMISSED;
                michal = _closure2_slot0;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            offset['onPress'] = kiloes;
            kiloes = output[romeon];
            kiloes = foxtra.bind(report)(kiloes);
            echoed = kiloes.intl;
            result = echoed.string;
            kiloes = output[romeon];
            kiloes = foxtra.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.PsWbcn;
            kiloes = result.bind(echoed)(kiloes);
            offset['text'] = kiloes;
            offset = tangon.bind(report)(yankee, offset);
            verify[5] = offset;
            offset = 20;
            offset = output[offset];
            offset = foxtra.bind(report)(offset);
            yankee = offset.TextWithIOSLinkWorkaround;
            offset = {};
            kiloes = 'text-xs/normal';
            offset['variant'] = kiloes;
            backup = backup.footer;
            offset['style'] = backup;
            backup = output[romeon];
            backup = foxtra.bind(report)(backup);
            kiloes = backup.intl;
            backup = kiloes.format;
            romeon = output[romeon];
            romeon = foxtra.bind(report)(romeon);
            romeon = romeon.t;
            foxtra = romeon.IzZxXV;
            romeon = {};
            sizing = function() { // Original name: onClick
                tangon = _closure1_slot1;
                golfie = _closure1_slot2;
                entity = 19;
                michal = golfie[entity];
                entity = undefined;
                report = tangon.bind(entity)(michal);
                michal = report.hideActionSheet;
                michal = michal.bind(report)();
                michal = 21;
                michal = golfie[michal];
                report = tangon.bind(entity)(michal);
                tangon = _closure2_slot1;
                tangon = report.bind(entity)(tangon);
                oscard = _closure1_slot0;
                zuuluu = 8;
                tangon = golfie[zuuluu];
                report = oscard.bind(entity)(tangon);
                tangon = report.trackEvent;
                zuuluu = golfie[zuuluu];
                zuuluu = oscard.bind(entity)(zuuluu);
                zuuluu = zuuluu.DmUpsellActionTypes;
                zuuluu = zuuluu.MODAL_GUILD_SETTINGS_CLICKED;
                michal = _closure2_slot0;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            romeon['onClick'] = sizing;
            romeon = backup.bind(kiloes)(foxtra, romeon);
            offset['children'] = romeon;
            offset = tangon.bind(report)(yankee, offset);
            verify[6] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1026:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();