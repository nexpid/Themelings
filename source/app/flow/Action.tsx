// app/flow/Action.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    report = {};
    entity = 'UNSET';
    report['UNSET'] = entity;
    entity = 'IN_PROCESS_V2';
    report['IN_PROCESS_V2'] = entity;
    entity = 'OUT_OF_PROCESS_V3';
    report['OUT_OF_PROCESS_V3'] = entity;
    entity = 'OUT_OF_PROCESS_V3_LIMITED_INTERACTION';
    report['OUT_OF_PROCESS_V3_LIMITED_INTERACTION'] = entity;
    tangon = {};
    oscard = 0;
    tangon['Disabled'] = oscard;
    entity = 'Disabled';
    tangon[oscard] = entity;
    michal = 1;
    tangon['Hook'] = michal;
    entity = 'Hook';
    tangon[michal] = entity;
    michal = 2;
    tangon['OutOfProcess'] = michal;
    entity = 'OutOfProcess';
    tangon[michal] = entity;
    michal = 3;
    tangon['OutOfProcessLimitedInteraction'] = michal;
    entity = 'OutOfProcessLimitedInteraction';
    tangon[michal] = entity;
    michal = {};
    entity = 'initializing';
    michal['INITIALIZING'] = entity;
    entity = 'overlay_disabled';
    michal['OVERLAY_DISABLED'] = entity;
    entity = 'waiting_for_screen_type_resolution';
    michal['WAITING_FOR_SCREEN_TYPE_RESOLUTION'] = entity;
    entity = 'waiting_for_module_tracking';
    michal['WAITING_FOR_MODULE_TRACKING'] = entity;
    entity = 'waiting_for_overlay_open';
    michal['WAITING_FOR_OVERLAY_OPEN'] = entity;
    entity = 'overlay_rendering';
    michal['OVERLAY_RENDERING'] = entity;
    entity = 'overlay_crashed';
    michal['OVERLAY_CRASHED'] = entity;
    entity = 'overlay_crashed_disabled';
    michal['OVERLAY_CRASHED_DISABLED'] = entity;
    entity = argPlu;
    golfie = entity[oscard];
    oscard = argBar;
    entity = undefined;
    option = oscard.bind(entity)(golfie);
    golfie = option.fileFinishedImporting;
    oscard = 'flow/Action.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['OverlayForcedRenderMode'] = report;
    zuuluu['OverlayMethod'] = tangon;
    zuuluu['OverlayState'] = michal;
    return entity;
})();