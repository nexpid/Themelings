// app/flow/Client.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    report = {};
    entity = 'ANIMATED';
    report['ANIMATED'] = entity;
    entity = 'INSTANT';
    report['INSTANT'] = entity;
    tangon = {};
    oscard = 0;
    tangon['UNKNOWN'] = oscard;
    entity = 'UNKNOWN';
    tangon[oscard] = entity;
    yankee = 1;
    tangon['WINDOWED'] = yankee;
    entity = 'WINDOWED';
    tangon[yankee] = entity;
    offset = 2;
    tangon['MAXIMIZED'] = offset;
    entity = 'MAXIMIZED';
    tangon[offset] = entity;
    verify = 3;
    tangon['BORDERLESS_FULLSCREEN'] = verify;
    entity = 'BORDERLESS_FULLSCREEN';
    tangon[verify] = entity;
    option = 4;
    tangon['FULLSCREEN'] = option;
    entity = 'FULLSCREEN';
    tangon[option] = entity;
    golfie = 5;
    tangon['MINIMIZED'] = golfie;
    entity = 'MINIMIZED';
    tangon[golfie] = entity;
    michal = {};
    romeon = -1;
    michal['QUNS_UNKNOWN'] = romeon;
    entity = 'QUNS_UNKNOWN';
    michal[romeon] = entity;
    michal['QUNS_NOT_PRESENT'] = yankee;
    entity = 'QUNS_NOT_PRESENT';
    michal[yankee] = entity;
    michal['QUNS_BUSY'] = offset;
    entity = 'QUNS_BUSY';
    michal[offset] = entity;
    michal['QUNS_RUNNING_D3D_FULL_SCREEN'] = verify;
    entity = 'QUNS_RUNNING_D3D_FULL_SCREEN';
    michal[verify] = entity;
    michal['QUNS_PRESENTATION_MODE'] = option;
    entity = 'QUNS_PRESENTATION_MODE';
    michal[option] = entity;
    michal['QUNS_ACCEPTS_NOTIFICATIONS'] = golfie;
    entity = 'QUNS_ACCEPTS_NOTIFICATIONS';
    michal[golfie] = entity;
    golfie = 6;
    michal['QUNS_QUIET_TIME'] = golfie;
    entity = 'QUNS_QUIET_TIME';
    michal[golfie] = entity;
    golfie = 7;
    michal['QUNS_APP'] = golfie;
    entity = 'QUNS_APP';
    michal[golfie] = entity;
    entity = argPlu;
    golfie = entity[oscard];
    oscard = argBar;
    entity = undefined;
    option = oscard.bind(entity)(golfie);
    golfie = option.fileFinishedImporting;
    oscard = 'flow/Client.tsx';
    oscard = golfie.bind(option)(oscard);
    zuuluu['JumpTypes'] = report;
    zuuluu['RunningProcessFullscreenType'] = tangon;
    zuuluu['QueryUserNotificationState'] = michal;
    michal = {'compatibilityHook': false, 'warn': false, 'enabled': false, 'enabledOOP': false, 'allowHook': true, 'supportsOutOfProcessOverlay': false};
    zuuluu['DEFAULT_OVERLAY_OPTIONS'] = michal;
    return entity;
})();