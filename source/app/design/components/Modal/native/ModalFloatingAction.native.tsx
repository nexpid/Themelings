// app/design/components/Modal/native/ModalFloatingAction.native.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.StyleSheet;
    var _closure1_slot4 = golfie;
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'position': 'absolute', 'bottom': 0, 'width': '100%', 'paddingHorizontal': 16};
    tangon['floating'] = verify;
    verify = {};
    offset = 96;
    verify['height'] = offset;
    tangon['spacer'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = {};
    golfie = 'function ModalFloatingActionNativeTsx1(){const{interpolate,sharedValue,floatingBackgroundColor,useReducedMotion}=this.__closure;return{opacity:interpolate(sharedValue.get(),[0,1],[0,1]),borderBottomColor:floatingBackgroundColor,borderBottomWidth:16,transform:[{translateY:interpolate(sharedValue.get(),[useReducedMotion?0.999999:0,1],[32,0])}]};}';
    tangon['code'] = golfie;
    var _closure1_slot9 = tangon;
    tangon = 12;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'design/components/Modal/native/ModalFloatingAction.native.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: ModalFloatingAction
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = argFoo;
            golfie = tangon.isVisible;
            var _closure2_slot0 = golfie;
            romeon = tangon.floatingBackgroundColor;
            var _closure2_slot1 = romeon;
            entity = null;
            michal = Object.create(entity);
            backup = 0;
            michal['isVisible'] = backup;
            michal['floatingBackgroundColor'] = backup;
            ctrled = {};
            source = tangon;
            update = michal;
            verify = copyDataProperties(ctrled, source, update);
            tangon = undefined;
            var _closure2_slot2 = tangon;
            var _closure2_slot3 = tangon;
            entity = _closure1_slot8;
            option = entity.bind(tangon)();
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            report = 4;
            entity = entity[report];
            offset = michal.bind(tangon)(entity);
            michal = offset.useSharedValue;
            entity = 0;
            if(!golfie) { _fun00002_ip = 108; continue _fun00001 }
 105:
            entity = 1;
 108:
            output = michal.bind(offset)(entity);
            _closure2_slot2 = output;
            result = _closure1_slot3;
            offset = result.useContext;
            echoed = _closure1_slot0;
            entity = _closure1_slot2;
            michal = 5;
            michal = entity[michal];
            michal = echoed.bind(tangon)(michal);
            michal = michal.AccessibilityPreferencesContext;
            michal = offset.bind(result)(michal);
            michal = michal.reducedMotion;
            sizing = michal.enabled;
            _closure2_slot3 = sizing;
            michal = _closure1_slot1;
            offset = 6;
            offset = entity[offset];
            offset = michal.bind(tangon)(offset);
            offset = offset.bind(tangon)();
            kiloes = result.useEffect;
            foxtra = new Array(2);
            foxtra[0] = golfie;
            foxtra[1] = output;
            yankee = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    tangon = _closure2_slot2;
                    zuuluu = tangon.set;
                    golfie = _closure1_slot0;
                    oscard = _closure1_slot2;
                    entity = 7;
                    oscard = oscard[entity];
                    entity = undefined;
                    option = golfie.bind(entity)(oscard);
                    golfie = option.withSpring;
                    report = _closure2_slot0;
                    oscard = 0;
                    if(!report) { _fun00004_ip = 54; continue _fun00003 }
 51:
                    oscard = 1;
 54:
                    report = _closure1_slot0;
                    verify = _closure1_slot2;
                    michal = 8;
                    michal = verify[michal];
                    michal = report.bind(entity)(michal);
                    report = michal.SUBTLE_SPRING;
                    michal = 'animate-always';
                    michal = golfie.bind(option)(oscard, report, michal);
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                }
            };
            yankee = kiloes.bind(result)(yankee, foxtra);
            yankee = entity[report];
            foxtra = echoed.bind(tangon)(yankee);
            yankee = foxtra.useAnimatedStyle;
            zuuluu = function() { // Original name: y
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    entity = {};
                    oscard = _closure1_slot0;
                    golfie = _closure1_slot2;
                    tangon = 4;
                    michal = golfie[tangon];
                    report = undefined;
                    yankee = oscard.bind(report)(michal);
                    offset = yankee.interpolate;
                    option = _closure2_slot2;
                    zuuluu = option.get;
                    verify = zuuluu.bind(option)();
                    option = [0, 1];
                    zuuluu = [0, 1];
                    zuuluu = offset.bind(yankee)(verify, option, zuuluu);
                    entity['opacity'] = zuuluu;
                    zuuluu = _closure2_slot1;
                    entity['borderBottomColor'] = zuuluu;
                    zuuluu = 16;
                    entity['borderBottomWidth'] = zuuluu;
                    zuuluu = {};
                    tangon = golfie[tangon];
                    golfie = oscard.bind(report)(tangon);
                    oscard = golfie.interpolate;
                    report = _closure2_slot2;
                    tangon = report.get;
                    report = tangon.bind(report)();
                    tangon = _closure2_slot3;
                    michal = 0;
                    if(!tangon) { _fun00006_ip = 146; continue _fun00005 }
 136:
                    michal = 0.999999;
 146:
                    tangon = new Array(2);
                    tangon[0] = michal;
                    michal = 1;
                    tangon[1] = michal;
                    michal = [32, 0];
                    michal = oscard.bind(golfie)(report, tangon, michal);
                    zuuluu['translateY'] = michal;
                    michal = new Array(1);
                    michal[0] = zuuluu;
                    entity['transform'] = michal;
                    return entity;
                }
            };
            kiloes = {};
            result = entity[report];
            result = echoed.bind(tangon)(result);
            result = result.interpolate;
            kiloes['interpolate'] = result;
            kiloes['sharedValue'] = output;
            kiloes['floatingBackgroundColor'] = romeon;
            kiloes['useReducedMotion'] = sizing;
            zuuluu['__closure'] = kiloes;
            kiloes = 1679390676673.0;
            zuuluu['__workletHash'] = kiloes;
            kiloes = _closure1_slot9;
            zuuluu['__initData'] = kiloes;
            yankee = yankee.bind(foxtra)(zuuluu);
            zuuluu = _closure1_slot7;
            entity = entity[report];
            entity = michal.bind(tangon)(entity);
            michal = entity.View;
            entity = {};
            report = new Array(3);
            report[0] = yankee;
            option = option.floating;
            report[1] = option;
            option = {};
            offset = offset.bottom;
            option['paddingBottom'] = offset;
            report[2] = option;
            entity['style'] = report;
            report = 'none';
            if(!golfie) { _fun00002_ip = 384; continue _fun00001 }
 380:
            report = 'auto';
 384:
            entity['pointerEvents'] = report;
            option = _closure1_slot6;
            foxtra = _closure1_slot1;
            offset = _closure1_slot2;
            report = 9;
            report = offset[report];
            golfie = foxtra.bind(tangon)(report);
            report = {};
            yankee = 10;
            yankee = offset[yankee];
            yankee = foxtra.bind(tangon)(yankee);
            foxtra = yankee.bind(tangon)(romeon);
            yankee = foxtra.alpha;
            foxtra = yankee.bind(foxtra)(backup);
            yankee = foxtra.hex;
            foxtra = yankee.bind(foxtra)();
            yankee = new Array(2);
            yankee[0] = foxtra;
            yankee[1] = romeon;
            report['colors'] = yankee;
            yankee = [0, 0.5];
            report['locations'] = yankee;
            yankee = _closure1_slot4;
            yankee = yankee.absoluteFill;
            report['style'] = yankee;
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = golfie;
            golfie = _closure1_slot0;
            oscard = 11;
            oscard = offset[oscard];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.ModalActionButton;
            oscard = {};
            ctrled = oscard;
            source = verify;
            verify = copyDataProperties(ctrled, source);
            offset = 'primary';
            verify = 'variant';
            oscard[verify] = offset;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['ModalFloatingAction'] = tangon;
    michal = function() { // Original name: ModalFloatingActionSpacer
        michal = _closure1_slot8;
        tangon = undefined;
        report = michal.bind(tangon)();
        zuuluu = _closure1_slot6;
        michal = _closure1_slot5;
        entity = {};
        report = report.spacer;
        entity['style'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['ModalFloatingActionSpacer'] = michal;
    return entity;
})();