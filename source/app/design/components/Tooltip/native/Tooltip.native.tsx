// app/design/components/Tooltip/native/Tooltip.native.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Pressable;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = {'mass': 1, 'overshootClamping': true, 'damping': 27, 'stiffness': 300};
    var _closure1_slot8 = tangon;
    offset = 4;
    tangon = oscard[offset];
    tangon = yankee.bind(entity)(tangon);
    tangon = tangon.unsafe_rawColors;
    tangon = tangon.BRAND_500;
    var _closure1_slot9 = tangon;
    tangon = oscard[offset];
    tangon = yankee.bind(entity)(tangon);
    tangon = tangon.unsafe_rawColors;
    tangon = tangon.BRAND_560;
    var _closure1_slot10 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    romeon = 'center';
    verify = {'position': 'absolute', 'alignItems': 'center'};
    tangon['container'] = verify;
    verify = {'paddingHorizontal': null, 'paddingVertical': null, 'borderRadius': null, 'maxWidth': 150, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_8;
    verify['paddingHorizontal'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.spacing;
    foxtra = foxtra.PX_4;
    verify['paddingVertical'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    verify['borderRadius'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BRAND;
    verify['backgroundColor'] = foxtra;
    tangon['textContainer'] = verify;
    verify = {};
    verify['textAlign'] = romeon;
    tangon['text'] = verify;
    verify = {'width': 0, 'height': 0, 'borderStyle': 'solid', 'borderLeftColor': 'transparent', 'borderRightColor': 'transparent'};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BG_BRAND;
    verify['borderTopColor'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_BRAND;
    verify['borderBottomColor'] = offset;
    tangon['arrow'] = verify;
    verify = {'borderLeftWidth': 6, 'borderRightWidth': 6, 'borderTopWidth': 6};
    tangon['bottomArrow'] = verify;
    verify = {'borderLeftWidth': 6, 'borderRightWidth': 6, 'borderBottomWidth': 6};
    tangon['topArrow'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot11 = tangon;
    tangon = {};
    golfie = "function TooltipNativeTsx1(){const{withSpring,interpolateColor,pressed,BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED,ON_PRESS_SPRING}=this.__closure;return{backgroundColor:withSpring(interpolateColor(pressed.get(),[0,1],[BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED]),ON_PRESS_SPRING,'animate-always')};}";
    tangon['code'] = golfie;
    var _closure1_slot12 = tangon;
    tangon = {};
    golfie = "function TooltipNativeTsx2(){const{withSpring,interpolateColor,pressed,BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED,ON_PRESS_SPRING}=this.__closure;return{borderTopColor:withSpring(interpolateColor(pressed.get(),[0,1],[BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED]),ON_PRESS_SPRING,'animate-always'),borderBottomColor:withSpring(interpolateColor(pressed.get(),[0,1],[BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED]),ON_PRESS_SPRING,'animate-always')};}";
    tangon['code'] = golfie;
    var _closure1_slot13 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'design/components/Tooltip/native/Tooltip.native.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: Tooltip
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            limora = entity.targetMeasurements;
            zuuluu = entity.surfaceMeasurements;
            output = entity.label;
            option = entity.position;
            ctrled = entity.onPress;
            entity = _closure1_slot11;
            tangon = undefined;
            romeon = entity.bind(tangon)();
            papara = _closure1_slot0;
            cntext = _closure1_slot2;
            offset = 6;
            entity = cntext[offset];
            michal = papara.bind(tangon)(entity);
            entity = michal.useSharedValue;
            kiloes = 0;
            record = entity.bind(michal)(kiloes);
            var _closure2_slot0 = record;
            michal = _closure1_slot4;
            oscard = michal.useCallback;
            report = new Array(1);
            report[0] = record;
            entity = function() {
                zuuluu = _closure2_slot0;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            oscard = oscard.bind(michal)(entity, report);
            yankee = michal.useCallback;
            report = new Array(1);
            report[0] = record;
            entity = function() {
                zuuluu = _closure2_slot0;
                michal = zuuluu.set;
                entity = 0;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            report = yankee.bind(michal)(entity, report);
            entity = michal.useState;
            update = null;
            yankee = entity.bind(michal)(update);
            michal = _closure1_slot3;
            entity = 2;
            entity = michal.bind(tangon)(yankee, entity);
            echoed = entity[kiloes];
            result = 1;
            entity = entity[result];
            var _closure2_slot1 = entity;
            michal = _closure1_slot1;
            entity = 7;
            entity = cntext[entity];
            michal = michal.bind(tangon)(entity);
            status = 4;
            quebec = undefined;
            equals = echoed;
            whisks = zuuluu;
            sierra = option;
            entity = quebec[michal](equals, whisks, limora, sierra, status, target);
            foxtra = entity.adjustmentX;
            verify = entity.tooltipX;
            backup = entity.tooltipY;
            entity = cntext[offset];
            zuuluu = papara.bind(tangon)(entity);
            michal = zuuluu.useAnimatedStyle;
            entity = function() { // Original name: N
                entity = {};
                golfie = _closure1_slot0;
                option = _closure1_slot2;
                zuuluu = 8;
                zuuluu = option[zuuluu];
                tangon = undefined;
                oscard = golfie.bind(tangon)(zuuluu);
                report = oscard.withSpring;
                zuuluu = 6;
                zuuluu = option[zuuluu];
                verify = golfie.bind(tangon)(zuuluu);
                option = verify.interpolateColor;
                tangon = _closure2_slot0;
                zuuluu = tangon.get;
                golfie = zuuluu.bind(tangon)();
                zuuluu = _closure1_slot9;
                tangon = new Array(2);
                tangon[0] = zuuluu;
                zuuluu = _closure1_slot10;
                tangon[1] = zuuluu;
                zuuluu = [0, 1];
                tangon = option.bind(verify)(golfie, zuuluu, tangon);
                zuuluu = _closure1_slot8;
                michal = 'animate-always';
                michal = report.bind(oscard)(tangon, zuuluu, michal);
                entity['backgroundColor'] = michal;
                return entity;
            };
            yankee = {};
            target = 8;
            sizing = cntext[target];
            sizing = papara.bind(tangon)(sizing);
            sizing = sizing.withSpring;
            yankee['withSpring'] = sizing;
            sizing = cntext[offset];
            sizing = papara.bind(tangon)(sizing);
            sizing = sizing.interpolateColor;
            yankee['interpolateColor'] = sizing;
            yankee['pressed'] = record;
            config = _closure1_slot9;
            yankee['BACKGROUND_COLOR'] = config;
            sequen = _closure1_slot10;
            yankee['BACKGROUND_COLOR_PRESSED'] = sequen;
            vacuum = _closure1_slot8;
            yankee['ON_PRESS_SPRING'] = vacuum;
            entity['__closure'] = yankee;
            yankee = 11581405332425.0;
            entity['__workletHash'] = yankee;
            yankee = _closure1_slot12;
            entity['__initData'] = yankee;
            sizing = michal.bind(zuuluu)(entity);
            entity = cntext[offset];
            zuuluu = papara.bind(tangon)(entity);
            michal = zuuluu.useAnimatedStyle;
            entity = function() { // Original name: P
                entity = {};
                offset = _closure1_slot0;
                romeon = _closure1_slot2;
                zuuluu = 8;
                michal = romeon[zuuluu];
                verify = undefined;
                backup = offset.bind(verify)(michal);
                foxtra = backup.withSpring;
                golfie = 6;
                michal = romeon[golfie];
                output = offset.bind(verify)(michal);
                sizing = output.interpolateColor;
                option = _closure2_slot0;
                michal = option.get;
                kiloes = michal.bind(option)();
                yankee = _closure1_slot9;
                oscard = new Array(2);
                oscard[0] = yankee;
                michal = _closure1_slot10;
                oscard[1] = michal;
                tangon = [0, 1];
                tangon = sizing.bind(output)(kiloes, tangon, oscard);
                oscard = _closure1_slot8;
                report = 'animate-always';
                tangon = foxtra.bind(backup)(tangon, oscard, report);
                entity['borderTopColor'] = tangon;
                zuuluu = romeon[zuuluu];
                tangon = offset.bind(verify)(zuuluu);
                zuuluu = tangon.withSpring;
                golfie = romeon[golfie];
                offset = offset.bind(verify)(golfie);
                verify = offset.interpolateColor;
                golfie = option.get;
                option = golfie.bind(option)();
                golfie = new Array(2);
                golfie[0] = yankee;
                golfie[1] = michal;
                michal = [0, 1];
                michal = verify.bind(offset)(option, michal, golfie);
                michal = zuuluu.bind(tangon)(michal, oscard, report);
                entity['borderBottomColor'] = michal;
                return entity;
            };
            yankee = {};
            target = cntext[target];
            target = papara.bind(tangon)(target);
            target = target.withSpring;
            yankee['withSpring'] = target;
            cntext = cntext[offset];
            cntext = papara.bind(tangon)(cntext);
            cntext = cntext.interpolateColor;
            yankee['interpolateColor'] = cntext;
            yankee['pressed'] = record;
            yankee['BACKGROUND_COLOR'] = config;
            yankee['BACKGROUND_COLOR_PRESSED'] = sequen;
            yankee['ON_PRESS_SPRING'] = vacuum;
            entity['__closure'] = yankee;
            yankee = 10186236993493.0;
            entity['__workletHash'] = yankee;
            yankee = _closure1_slot13;
            entity['__initData'] = yankee;
            yankee = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot7;
            michal = _closure1_slot5;
            entity = {};
            vacuum = update == ctrled;
            entity['disabled'] = vacuum;
            entity['onPress'] = ctrled;
            source = function(argFoo) { // Original name: onLayout
                entity = argFoo;
                entity = entity.nativeEvent;
                zuuluu = _closure2_slot1;
                michal = {};
                tangon = entity.layout;
                tangon = tangon.width;
                michal['width'] = tangon;
                entity = entity.layout;
                entity = entity.height;
                michal['height'] = entity;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            entity['onLayout'] = source;
            entity['onPressIn'] = oscard;
            entity['onPressOut'] = report;
            entity['accessibilityLabel'] = output;
            report = 'button';
            entity['accessibilityRole'] = report;
            oscard = romeon.container;
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            echoed = update != echoed;
            if(!echoed) { _fun00002_ip = 553; continue _fun00001 }
 550:
            kiloes = result;
 553:
            oscard['opacity'] = kiloes;
            oscard['top'] = backup;
            oscard['left'] = verify;
            report[1] = oscard;
            entity['style'] = report;
            report = 'bottom';
            oscard = report === option;
            if(!oscard) { _fun00002_ip = 663; continue _fun00001 }
 584:
            backup = _closure1_slot6;
            verify = _closure1_slot1;
            report = _closure1_slot2;
            report = report[offset];
            report = verify.bind(tangon)(report);
            verify = report.View;
            report = {};
            result = romeon.arrow;
            kiloes = new Array(4);
            kiloes[0] = result;
            result = romeon.topArrow;
            kiloes[1] = result;
            result = {};
            echoed = -foxtra;
            result['left'] = echoed;
            kiloes[2] = result;
            kiloes[3] = yankee;
            report['style'] = kiloes;
            oscard = backup.bind(tangon)(verify, report);
 663:
            report = new Array(3);
            report[0] = oscard;
            backup = _closure1_slot6;
            verify = _closure1_slot1;
            result = _closure1_slot2;
            oscard = result[offset];
            oscard = verify.bind(tangon)(oscard);
            verify = oscard.View;
            oscard = {};
            echoed = romeon.textContainer;
            kiloes = new Array(2);
            kiloes[0] = echoed;
            kiloes[1] = sizing;
            oscard['style'] = kiloes;
            sizing = _closure1_slot0;
            kiloes = 9;
            kiloes = result[kiloes];
            kiloes = sizing.bind(tangon)(kiloes);
            sizing = kiloes.Text;
            kiloes = {'style': null, 'variant': 'text-xs/bold', 'color': 'always-white'};
            result = romeon.text;
            kiloes['style'] = result;
            kiloes['children'] = output;
            kiloes = backup.bind(tangon)(sizing, kiloes);
            oscard['children'] = kiloes;
            oscard = backup.bind(tangon)(verify, oscard);
            report[1] = oscard;
            oscard = 'top';
            oscard = oscard === option;
            if(!oscard) { _fun00002_ip = 881; continue _fun00001 }
 802:
            verify = _closure1_slot6;
            option = _closure1_slot1;
            golfie = _closure1_slot2;
            golfie = golfie[offset];
            golfie = option.bind(tangon)(golfie);
            option = golfie.View;
            golfie = {};
            backup = romeon.arrow;
            offset = new Array(4);
            offset[0] = backup;
            romeon = romeon.bottomArrow;
            offset[1] = romeon;
            romeon = {};
            foxtra = -foxtra;
            romeon['left'] = foxtra;
            offset[2] = romeon;
            offset[3] = yankee;
            golfie['style'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 881:
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['Tooltip'] = michal;
    return entity;
})();