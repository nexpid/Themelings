// app/design/components/Tooltip/native/Tooltip.native.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Pressable;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = {'mass': 1, 'overshootClamping': true, 'damping': 27, 'stiffness': 300};
    var _closure1_slot8 = tango;
    offset = 4;
    tango = oscar[offset];
    tango = yankee.bind(entity)(tango);
    tango = tango.unsafe_rawColors;
    tango = tango.BRAND_500;
    var _closure1_slot9 = tango;
    tango = oscar[offset];
    tango = yankee.bind(entity)(tango);
    tango = tango.unsafe_rawColors;
    tango = tango.BRAND_560;
    var _closure1_slot10 = tango;
    tango = 5;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    romeo = 'center';
    verify = {'position': 'absolute', 'alignItems': 'center'};
    tango['container'] = verify;
    verify = {'paddingHorizontal': null, 'paddingVertical': null, 'borderRadius': null, 'maxWidth': 150, 'alignItems': 'center', 'justifyContent': 'center'};
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_8;
    verify['paddingHorizontal'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.spacing;
    foxtrot = foxtrot.PX_4;
    verify['paddingVertical'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.radii;
    foxtrot = foxtrot.sm;
    verify['borderRadius'] = foxtrot;
    foxtrot = oscar[offset];
    foxtrot = yankee.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_BRAND;
    verify['backgroundColor'] = foxtrot;
    tango['textContainer'] = verify;
    verify = {};
    verify['textAlign'] = romeo;
    tango['text'] = verify;
    verify = {'width': 0, 'height': 0, 'borderStyle': 'solid', 'borderLeftColor': 'transparent', 'borderRightColor': 'transparent'};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BG_BRAND;
    verify['borderTopColor'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BG_BRAND;
    verify['borderBottomColor'] = offset;
    tango['arrow'] = verify;
    verify = {'borderLeftWidth': 6, 'borderRightWidth': 6, 'borderTopWidth': 6};
    tango['bottomArrow'] = verify;
    verify = {'borderLeftWidth': 6, 'borderRightWidth': 6, 'borderBottomWidth': 6};
    tango['topArrow'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot11 = tango;
    tango = {};
    golf = "function TooltipNativeTsx1(){const{withSpring,interpolateColor,pressed,BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED,ON_PRESS_SPRING}=this.__closure;return{backgroundColor:withSpring(interpolateColor(pressed.get(),[0,1],[BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED]),ON_PRESS_SPRING,'animate-always')};}";
    tango['code'] = golf;
    var _closure1_slot12 = tango;
    tango = {};
    golf = "function TooltipNativeTsx2(){const{withSpring,interpolateColor,pressed,BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED,ON_PRESS_SPRING}=this.__closure;return{borderTopColor:withSpring(interpolateColor(pressed.get(),[0,1],[BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED]),ON_PRESS_SPRING,'animate-always'),borderBottomColor:withSpring(interpolateColor(pressed.get(),[0,1],[BACKGROUND_COLOR,BACKGROUND_COLOR_PRESSED]),ON_PRESS_SPRING,'animate-always')};}";
    tango['code'] = golf;
    var _closure1_slot13 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'design/components/Tooltip/native/Tooltip.native.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: Tooltip
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            lima = entity.targetMeasurements;
            zulu = entity.surfaceMeasurements;
            output = entity.label;
            options = entity.position;
            control = entity.onPress;
            entity = _closure1_slot11;
            tango = undefined;
            romeo = entity.bind(tango)();
            papa = _closure1_slot0;
            context = _closure1_slot2;
            offset = 6;
            entity = context[offset];
            mike = papa.bind(tango)(entity);
            entity = mike.useSharedValue;
            kilo = 0;
            record = entity.bind(mike)(kilo);
            var _closure2_slot0 = record;
            mike = _closure1_slot4;
            oscar = mike.useCallback;
            report = new Array(1);
            report[0] = record;
            entity = function() {
                zulu = _closure2_slot0;
                mike = zulu.set;
                entity = 1;
                entity = mike.bind(zulu)(entity);
                entity = undefined;
                return entity;
            };
            oscar = oscar.bind(mike)(entity, report);
            yankee = mike.useCallback;
            report = new Array(1);
            report[0] = record;
            entity = function() {
                zulu = _closure2_slot0;
                mike = zulu.set;
                entity = 0;
                entity = mike.bind(zulu)(entity);
                entity = undefined;
                return entity;
            };
            report = yankee.bind(mike)(entity, report);
            entity = mike.useState;
            update = null;
            yankee = entity.bind(mike)(update);
            mike = _closure1_slot3;
            entity = 2;
            entity = mike.bind(tango)(yankee, entity);
            echo = entity[kilo];
            result = 1;
            entity = entity[result];
            var _closure2_slot1 = entity;
            mike = _closure1_slot1;
            entity = 7;
            entity = context[entity];
            mike = mike.bind(tango)(entity);
            status = 4;
            quebec = undefined;
            equality = echo;
            whiskey = zulu;
            sierra = options;
            entity = quebec[mike](equality, whiskey, lima, sierra, status, target);
            foxtrot = entity.adjustmentX;
            verify = entity.tooltipX;
            backup = entity.tooltipY;
            entity = context[offset];
            zulu = papa.bind(tango)(entity);
            mike = zulu.useAnimatedStyle;
            entity = function() { // Original name: N
                entity = {};
                golf = _closure1_slot0;
                options = _closure1_slot2;
                zulu = 8;
                zulu = options[zulu];
                tango = undefined;
                oscar = golf.bind(tango)(zulu);
                report = oscar.withSpring;
                zulu = 6;
                zulu = options[zulu];
                verify = golf.bind(tango)(zulu);
                options = verify.interpolateColor;
                tango = _closure2_slot0;
                zulu = tango.get;
                golf = zulu.bind(tango)();
                zulu = _closure1_slot9;
                tango = new Array(2);
                tango[0] = zulu;
                zulu = _closure1_slot10;
                tango[1] = zulu;
                zulu = [0, 1];
                tango = options.bind(verify)(golf, zulu, tango);
                zulu = _closure1_slot8;
                mike = 'animate-always';
                mike = report.bind(oscar)(tango, zulu, mike);
                entity['backgroundColor'] = mike;
                return entity;
            };
            yankee = {};
            target = 8;
            sizing = context[target];
            sizing = papa.bind(tango)(sizing);
            sizing = sizing.withSpring;
            yankee['withSpring'] = sizing;
            sizing = context[offset];
            sizing = papa.bind(tango)(sizing);
            sizing = sizing.interpolateColor;
            yankee['interpolateColor'] = sizing;
            yankee['pressed'] = record;
            config = _closure1_slot9;
            yankee['BACKGROUND_COLOR'] = config;
            sequence = _closure1_slot10;
            yankee['BACKGROUND_COLOR_PRESSED'] = sequence;
            vacuum = _closure1_slot8;
            yankee['ON_PRESS_SPRING'] = vacuum;
            entity['__closure'] = yankee;
            yankee = 11581405332425.0;
            entity['__workletHash'] = yankee;
            yankee = _closure1_slot12;
            entity['__initData'] = yankee;
            sizing = mike.bind(zulu)(entity);
            entity = context[offset];
            zulu = papa.bind(tango)(entity);
            mike = zulu.useAnimatedStyle;
            entity = function() { // Original name: P
                entity = {};
                offset = _closure1_slot0;
                romeo = _closure1_slot2;
                zulu = 8;
                mike = romeo[zulu];
                verify = undefined;
                backup = offset.bind(verify)(mike);
                foxtrot = backup.withSpring;
                golf = 6;
                mike = romeo[golf];
                output = offset.bind(verify)(mike);
                sizing = output.interpolateColor;
                options = _closure2_slot0;
                mike = options.get;
                kilo = mike.bind(options)();
                yankee = _closure1_slot9;
                oscar = new Array(2);
                oscar[0] = yankee;
                mike = _closure1_slot10;
                oscar[1] = mike;
                tango = [0, 1];
                tango = sizing.bind(output)(kilo, tango, oscar);
                oscar = _closure1_slot8;
                report = 'animate-always';
                tango = foxtrot.bind(backup)(tango, oscar, report);
                entity['borderTopColor'] = tango;
                zulu = romeo[zulu];
                tango = offset.bind(verify)(zulu);
                zulu = tango.withSpring;
                golf = romeo[golf];
                offset = offset.bind(verify)(golf);
                verify = offset.interpolateColor;
                golf = options.get;
                options = golf.bind(options)();
                golf = new Array(2);
                golf[0] = yankee;
                golf[1] = mike;
                mike = [0, 1];
                mike = verify.bind(offset)(options, mike, golf);
                mike = zulu.bind(tango)(mike, oscar, report);
                entity['borderBottomColor'] = mike;
                return entity;
            };
            yankee = {};
            target = context[target];
            target = papa.bind(tango)(target);
            target = target.withSpring;
            yankee['withSpring'] = target;
            context = context[offset];
            context = papa.bind(tango)(context);
            context = context.interpolateColor;
            yankee['interpolateColor'] = context;
            yankee['pressed'] = record;
            yankee['BACKGROUND_COLOR'] = config;
            yankee['BACKGROUND_COLOR_PRESSED'] = sequence;
            yankee['ON_PRESS_SPRING'] = vacuum;
            entity['__closure'] = yankee;
            yankee = 10186236993493.0;
            entity['__workletHash'] = yankee;
            yankee = _closure1_slot13;
            entity['__initData'] = yankee;
            yankee = mike.bind(zulu)(entity);
            zulu = _closure1_slot7;
            mike = _closure1_slot5;
            entity = {};
            vacuum = update == control;
            entity['disabled'] = vacuum;
            entity['onPress'] = control;
            source = function(argFoo) { // Original name: onLayout
                entity = argFoo;
                entity = entity.nativeEvent;
                zulu = _closure2_slot1;
                mike = {};
                tango = entity.layout;
                tango = tango.width;
                mike['width'] = tango;
                entity = entity.layout;
                entity = entity.height;
                mike['height'] = entity;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            entity['onLayout'] = source;
            entity['onPressIn'] = oscar;
            entity['onPressOut'] = report;
            entity['accessibilityLabel'] = output;
            report = 'button';
            entity['accessibilityRole'] = report;
            oscar = romeo.container;
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            echo = update != echo;
            if(!echo) { _fun00002_ip = 553; continue _fun00001 }
 550:
            kilo = result;
 553:
            oscar['opacity'] = kilo;
            oscar['top'] = backup;
            oscar['left'] = verify;
            report[1] = oscar;
            entity['style'] = report;
            report = 'bottom';
            oscar = report === options;
            if(!oscar) { _fun00002_ip = 663; continue _fun00001 }
 584:
            backup = _closure1_slot6;
            verify = _closure1_slot1;
            report = _closure1_slot2;
            report = report[offset];
            report = verify.bind(tango)(report);
            verify = report.View;
            report = {};
            result = romeo.arrow;
            kilo = new Array(4);
            kilo[0] = result;
            result = romeo.topArrow;
            kilo[1] = result;
            result = {};
            echo = -foxtrot;
            result['left'] = echo;
            kilo[2] = result;
            kilo[3] = yankee;
            report['style'] = kilo;
            oscar = backup.bind(tango)(verify, report);
 663:
            report = new Array(3);
            report[0] = oscar;
            backup = _closure1_slot6;
            verify = _closure1_slot1;
            result = _closure1_slot2;
            oscar = result[offset];
            oscar = verify.bind(tango)(oscar);
            verify = oscar.View;
            oscar = {};
            echo = romeo.textContainer;
            kilo = new Array(2);
            kilo[0] = echo;
            kilo[1] = sizing;
            oscar['style'] = kilo;
            sizing = _closure1_slot0;
            kilo = 9;
            kilo = result[kilo];
            kilo = sizing.bind(tango)(kilo);
            sizing = kilo.Text;
            kilo = {'style': null, 'variant': 'text-xs/bold', 'color': 'always-white'};
            result = romeo.text;
            kilo['style'] = result;
            kilo['children'] = output;
            kilo = backup.bind(tango)(sizing, kilo);
            oscar['children'] = kilo;
            oscar = backup.bind(tango)(verify, oscar);
            report[1] = oscar;
            oscar = 'top';
            oscar = oscar === options;
            if(!oscar) { _fun00002_ip = 877; continue _fun00001 }
 798:
            verify = _closure1_slot6;
            options = _closure1_slot1;
            golf = _closure1_slot2;
            golf = golf[offset];
            golf = options.bind(tango)(golf);
            options = golf.View;
            golf = {};
            backup = romeo.arrow;
            offset = new Array(4);
            offset[0] = backup;
            romeo = romeo.bottomArrow;
            offset[1] = romeo;
            romeo = {};
            foxtrot = -foxtrot;
            romeo['left'] = foxtrot;
            offset[2] = romeo;
            offset[3] = yankee;
            golf['style'] = offset;
            oscar = verify.bind(tango)(options, golf);
 877:
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['Tooltip'] = mike;
    return entity;
})();