// app/design/components/experimental/Button/native/PressableScale.native.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    options = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = ['style'];
    var _closure1_slot2 = entity;
    entity = global;
    verify = entity.Object;
    golf = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(verify)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = options.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    golf = tango.bind(entity)(golf);
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    verify = tango.Pressable;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    tango = 4;
    tango = oscar[tango];
    options = options.bind(entity)(tango);
    tango = options.createAnimatedComponent;
    tango = tango.bind(options)(verify);
    var _closure1_slot5 = tango;
    tango = golf.forwardRef;
    mike = function(argFoo, argBar) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zulu = argFoo;
            report = zulu.style;
            yankee = zulu.scaleAmountInPx;
            tango = undefined;
            if(!(yankee === tango)) { _fun00002_ip = 23; continue _fun00001 }
 20:
            yankee = 8;
 23:
            offset = zulu.onLayout;
            kilo = zulu.onPressIn;
            backup = zulu.onPressOut;
            mike = {'style': 0, 'scaleAmountInPx': 0, 'onLayout': 0, 'onPressIn': 0, 'onPressOut': 0};
            output = null;
            result = mike;
            entity = silentSetPrototypeOf(result, output);
            foxtrot = 0;
            result = {};
            output = zulu;
            sizing = mike;
            oscar = copyDataProperties(result, output, sizing);
            zulu = _closure1_slot0;
            romeo = _closure1_slot1;
            mike = 4;
            mike = romeo[mike];
            golf = zulu.bind(tango)(mike);
            mike = golf.useSharedValue;
            golf = mike.bind(golf)(foxtrot);
            mike = 5;
            mike = romeo[mike];
            zulu = zulu.bind(tango)(mike);
            mike = zulu.useButtonPressAnimationProps;
            echo = zulu;
            result = golf;
            output = yankee;
            sizing = offset;
            options = echo[mike](result, output, sizing, kilo, backup, foxtrot);
            golf = options.style;
            zulu = _closure1_slot3;
            mike = _closure1_slot2;
            output = zulu.bind(tango)(options, mike);
            zulu = _closure1_slot4;
            mike = _closure1_slot5;
            entity = {};
            result = entity;
            options = copyDataProperties(result, output);
            result = entity;
            output = oscar;
            oscar = copyDataProperties(result, output);
            options = argBar;
            oscar = 'ref';
            entity[oscar] = options;
            options = 'button';
            oscar = 'accessibilityRole';
            entity[oscar] = options;
            oscar = new Array(2);
            oscar[0] = golf;
            oscar[1] = report;
            report = 'style';
            entity[report] = oscar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    mike = tango.bind(golf)(mike);
    tango = 6;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'design/components/experimental/Button/native/PressableScale.native.tsx';
    tango = report.bind(oscar)(tango);
    zulu['PressableScale'] = mike;
    return entity;
})();