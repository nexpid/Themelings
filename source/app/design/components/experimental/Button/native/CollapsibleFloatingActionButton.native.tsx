// app/design/components/experimental/Button/native/CollapsibleFloatingActionButton.native.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: CollapsableButton
        report = argFoo;
        entity = report.state;
        golf = report.style;
        mike = null;
        tango = Object.create(mike);
        mike = 0;
        tango['state'] = mike;
        tango['style'] = mike;
        sizing = {};
        kilo = report;
        backup = tango;
        kilo = copyDataProperties(sizing, kilo, backup);
        options = entity.collapseText;
        var _closure2_slot0 = options;
        mike = _closure1_slot0;
        verify = _closure1_slot2;
        romeo = 4;
        oscar = verify[romeo];
        tango = undefined;
        offset = mike.bind(tango)(oscar);
        oscar = offset.useAnimatedStyle;
        zulu = function() { // Original name: T
            entity = {};
            options = _closure1_slot0;
            verify = _closure1_slot2;
            zulu = 2;
            report = verify[zulu];
            tango = undefined;
            report = options.bind(tango)(report);
            report = report.FAB_BUTTON_SIZE;
            entity['minWidth'] = report;
            zulu = verify[zulu];
            zulu = options.bind(tango)(zulu);
            zulu = zulu.FAB_BUTTON_SIZE;
            entity['minHeight'] = zulu;
            zulu = 5;
            zulu = verify[zulu];
            golf = options.bind(tango)(zulu);
            oscar = golf.withSpring;
            zulu = 4;
            zulu = verify[zulu];
            romeo = options.bind(tango)(zulu);
            yankee = romeo.interpolate;
            report = _closure2_slot0;
            zulu = report.get;
            offset = zulu.bind(report)();
            zulu = _closure1_slot5;
            report = new Array(2);
            report[0] = zulu;
            zulu = _closure1_slot6;
            report[1] = zulu;
            zulu = [0, 1];
            report = yankee.bind(romeo)(offset, zulu, report);
            zulu = 6;
            zulu = verify[zulu];
            zulu = options.bind(tango)(zulu);
            tango = zulu.SUBTLE_SPRING;
            zulu = 'animate-always';
            zulu = oscar.bind(golf)(report, tango, zulu);
            entity['paddingHorizontal'] = zulu;
            mike = _closure1_slot6;
            entity['paddingVertical'] = mike;
            return entity;
        };
        yankee = {};
        foxtrot = 2;
        foxtrot = verify[foxtrot];
        foxtrot = mike.bind(tango)(foxtrot);
        foxtrot = foxtrot.FAB_BUTTON_SIZE;
        yankee['FAB_BUTTON_SIZE'] = foxtrot;
        foxtrot = 5;
        foxtrot = verify[foxtrot];
        foxtrot = mike.bind(tango)(foxtrot);
        foxtrot = foxtrot.withSpring;
        yankee['withSpring'] = foxtrot;
        romeo = verify[romeo];
        romeo = mike.bind(tango)(romeo);
        romeo = romeo.interpolate;
        yankee['interpolate'] = romeo;
        yankee['collapseText'] = options;
        romeo = _closure1_slot5;
        yankee['FAB_PADDING_HORIZONTAL'] = romeo;
        romeo = _closure1_slot6;
        yankee['FAB_PADDING_VERTICAL'] = romeo;
        romeo = 6;
        romeo = verify[romeo];
        romeo = mike.bind(tango)(romeo);
        romeo = romeo.SUBTLE_SPRING;
        yankee['SUBTLE_SPRING'] = romeo;
        zulu['__closure'] = yankee;
        yankee = 5958377845220.0;
        zulu['__workletHash'] = yankee;
        yankee = _closure1_slot8;
        zulu['__initData'] = yankee;
        oscar = oscar.bind(offset)(zulu);
        zulu = _closure1_slot4;
        entity = 7;
        entity = verify[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.BaseTextButton;
        entity = {};
        sizing = entity;
        report = copyDataProperties(sizing, kilo);
        verify = 'lg';
        report = 'size';
        entity[report] = verify;
        verify = 'primary';
        report = 'variant';
        entity[report] = verify;
        verify = 'text-md/semibold';
        report = 'textVariant';
        entity[report] = verify;
        report = 'collapseText';
        entity[report] = options;
        report = 'style';
        entity[report] = golf;
        report = 'pillStyle';
        entity[report] = oscar;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot4 = tango;
    yankee = 20;
    var _closure1_slot5 = yankee;
    tango = 2;
    golf = oscar[tango];
    verify = report.bind(entity)(golf);
    options = verify.getButtonPadding;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.FAB_BUTTON_SIZE;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.FAB_BUTTON_ICON_SIZE;
    offset = options.bind(verify)(golf, tango);
    var _closure1_slot6 = offset;
    tango = 3;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    verify['paddingHorizontal'] = yankee;
    verify['paddingVertical'] = offset;
    tango['textButtonPill'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = {};
    golf = "function CollapsibleFloatingActionButtonNativeTsx1(){const{FAB_BUTTON_SIZE,withSpring,interpolate,collapseText,FAB_PADDING_HORIZONTAL,FAB_PADDING_VERTICAL,SUBTLE_SPRING}=this.__closure;return{minWidth:FAB_BUTTON_SIZE,minHeight:FAB_BUTTON_SIZE,paddingHorizontal:withSpring(interpolate(collapseText.get(),[0,1],[FAB_PADDING_HORIZONTAL,FAB_PADDING_VERTICAL]),SUBTLE_SPRING,'animate-always'),paddingVertical:FAB_PADDING_VERTICAL};}";
    tango['code'] = golf;
    var _closure1_slot8 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'design/components/experimental/Button/native/CollapsibleFloatingActionButton.native.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: CollapsibleFloatingActionButton
        _fun76257: for(var _fun76257_ip = 0; ; ) switch(_fun76257_ip) {
 0:
            tango = argFoo;
            backup = tango.icon;
            romeo = tango.positionBottom;
            verify = tango.text;
            offset = tango.state;
            zulu = {'icon': 0, 'positionBottom': 0, 'text': 0, 'state': 0};
            entity = null;
            update = zulu;
            echo = null;
            mike = silentSetPrototypeOf(update, echo);
            update = {};
            echo = tango;
            result = zulu;
            oscar = copyDataProperties(update, echo, result);
            zulu = _closure1_slot7;
            report = undefined;
            yankee = zulu.bind(report)();
            tango = _closure1_slot0;
            golf = _closure1_slot2;
            zulu = 8;
            zulu = golf[zulu];
            tango = tango.bind(report)(zulu);
            zulu = tango.useStyles;
            tango = zulu.bind(tango)();
            golf = _closure1_slot3;
            zulu = golf.isValidElement;
            zulu = zulu.bind(golf)(backup);
            golf = backup;
            if(!zulu) { _fun76257_ip = 174; continue _fun76257 }
 121:
            foxtrot = _closure1_slot3;
            options = foxtrot.cloneElement;
            zulu = {};
            sizing = _closure1_slot1;
            output = _closure1_slot2;
            kilo = 9;
            kilo = output[kilo];
            kilo = sizing.bind(report)(kilo);
            kilo = kilo.colors;
            kilo = kilo.WHITE;
            zulu['color'] = kilo;
            golf = options.bind(foxtrot)(backup, zulu);
 174:
            options = entity != romeo;
            zulu = undefined;
            if(!options) { _fun76257_ip = 192; continue _fun76257 }
 183:
            options = {};
            options['bottom'] = romeo;
            zulu = options;
 192:
            tango = tango.button;
            options = new Array(2);
            options[0] = tango;
            options[1] = zulu;
            if(!(entity == offset)) { _fun76257_ip = 348; continue _fun76257 }
 217:
            tango = _closure1_slot4;
            zulu = _closure1_slot0;
            romeo = _closure1_slot2;
            entity = 7;
            entity = romeo[entity];
            entity = zulu.bind(report)(entity);
            zulu = entity.BaseTextButton;
            entity = {};
            update = entity;
            echo = oscar;
            romeo = copyDataProperties(update, echo);
            romeo = 'text';
            entity[romeo] = verify;
            foxtrot = 'lg';
            romeo = 'size';
            entity[romeo] = foxtrot;
            foxtrot = 'primary';
            romeo = 'variant';
            entity[romeo] = foxtrot;
            foxtrot = 'text-md/semibold';
            romeo = 'textVariant';
            entity[romeo] = foxtrot;
            romeo = 'icon';
            entity[romeo] = golf;
            romeo = 'style';
            entity[romeo] = options;
            romeo = yankee.textButtonPill;
            yankee = 'pillStyle';
            entity[yankee] = romeo;
            entity = tango.bind(report)(zulu, entity);
            _fun76257_ip = 410; continue _fun76257;
 348:
            tango = _closure1_slot4;
            zulu = _closure1_slot9;
            mike = {};
            update = mike;
            echo = oscar;
            oscar = copyDataProperties(update, echo);
            oscar = 'state';
            mike[oscar] = offset;
            oscar = 'text';
            mike[oscar] = verify;
            oscar = 'style';
            mike[oscar] = options;
            oscar = 'icon';
            mike[oscar] = golf;
            entity = tango.bind(report)(zulu, mike);
 410:
            return entity;
        }
    };
    zulu['CollapsibleFloatingActionButton'] = mike;
    return entity;
})();