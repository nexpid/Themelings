// app/design/components/experimental/Button/native/CollapsibleFloatingActionButton.native.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: CollapsableButton
        report = argFoo;
        entity = report.state;
        golfie = report.style;
        michal = null;
        tangon = Object.create(michal);
        michal = 0;
        tangon['state'] = michal;
        tangon['style'] = michal;
        sizing = {};
        kiloes = report;
        backup = tangon;
        kiloes = copyDataProperties(sizing, kiloes, backup);
        option = entity.collapseText;
        var _closure2_slot0 = option;
        michal = _closure1_slot0;
        verify = _closure1_slot2;
        romeon = 4;
        oscard = verify[romeon];
        tangon = undefined;
        offset = michal.bind(tangon)(oscard);
        oscard = offset.useAnimatedStyle;
        zuuluu = function() { // Original name: B
            entity = {};
            option = _closure1_slot0;
            verify = _closure1_slot2;
            zuuluu = 2;
            report = verify[zuuluu];
            tangon = undefined;
            report = option.bind(tangon)(report);
            report = report.FAB_BUTTON_SIZE;
            entity['minWidth'] = report;
            zuuluu = verify[zuuluu];
            zuuluu = option.bind(tangon)(zuuluu);
            zuuluu = zuuluu.FAB_BUTTON_SIZE;
            entity['minHeight'] = zuuluu;
            zuuluu = 5;
            zuuluu = verify[zuuluu];
            golfie = option.bind(tangon)(zuuluu);
            oscard = golfie.withSpring;
            zuuluu = 4;
            zuuluu = verify[zuuluu];
            romeon = option.bind(tangon)(zuuluu);
            yankee = romeon.interpolate;
            report = _closure2_slot0;
            zuuluu = report.get;
            offset = zuuluu.bind(report)();
            zuuluu = _closure1_slot5;
            report = [20];
            report[1] = zuuluu;
            zuuluu = [0, 1];
            report = yankee.bind(romeon)(offset, zuuluu, report);
            zuuluu = 6;
            zuuluu = verify[zuuluu];
            zuuluu = option.bind(tangon)(zuuluu);
            tangon = zuuluu.SUBTLE_SPRING;
            zuuluu = 'animate-always';
            zuuluu = oscard.bind(golfie)(report, tangon, zuuluu);
            entity['paddingHorizontal'] = zuuluu;
            michal = _closure1_slot5;
            entity['paddingVertical'] = michal;
            return entity;
        };
        yankee = {};
        foxtra = 2;
        foxtra = verify[foxtra];
        foxtra = michal.bind(tangon)(foxtra);
        foxtra = foxtra.FAB_BUTTON_SIZE;
        yankee['FAB_BUTTON_SIZE'] = foxtra;
        foxtra = 5;
        foxtra = verify[foxtra];
        foxtra = michal.bind(tangon)(foxtra);
        foxtra = foxtra.withSpring;
        yankee['withSpring'] = foxtra;
        romeon = verify[romeon];
        romeon = michal.bind(tangon)(romeon);
        romeon = romeon.interpolate;
        yankee['interpolate'] = romeon;
        yankee['collapseText'] = option;
        romeon = 20;
        yankee['FAB_PADDING_HORIZONTAL'] = romeon;
        romeon = _closure1_slot5;
        yankee['FAB_PADDING_VERTICAL'] = romeon;
        romeon = 6;
        romeon = verify[romeon];
        romeon = michal.bind(tangon)(romeon);
        romeon = romeon.SUBTLE_SPRING;
        yankee['SUBTLE_SPRING'] = romeon;
        zuuluu['__closure'] = yankee;
        yankee = 5958377845220.0;
        zuuluu['__workletHash'] = yankee;
        yankee = _closure1_slot7;
        zuuluu['__initData'] = yankee;
        oscard = oscard.bind(offset)(zuuluu);
        zuuluu = _closure1_slot4;
        entity = 7;
        entity = verify[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.BaseTextButton;
        entity = {};
        sizing = entity;
        report = copyDataProperties(sizing, kiloes);
        verify = 'lg';
        report = 'size';
        entity[report] = verify;
        verify = 'primary';
        report = 'variant';
        entity[report] = verify;
        verify = 'text-md/semibold';
        report = 'textVariant';
        entity[report] = verify;
        report = 'collapseText';
        entity[report] = option;
        report = 'style';
        entity[report] = golfie;
        report = 'pillStyle';
        entity[report] = oscard;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot8 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    verify = report.bind(entity)(golfie);
    option = verify.getButtonPadding;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.FAB_BUTTON_SIZE;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.FAB_BUTTON_ICON_SIZE;
    offset = option.bind(verify)(golfie, tangon);
    var _closure1_slot5 = offset;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 20;
    verify['paddingHorizontal'] = yankee;
    verify['paddingVertical'] = offset;
    tangon['textButtonPill'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = {};
    golfie = "function CollapsibleFloatingActionButtonNativeTsx1(){const{FAB_BUTTON_SIZE,withSpring,interpolate,collapseText,FAB_PADDING_HORIZONTAL,FAB_PADDING_VERTICAL,SUBTLE_SPRING}=this.__closure;return{minWidth:FAB_BUTTON_SIZE,minHeight:FAB_BUTTON_SIZE,paddingHorizontal:withSpring(interpolate(collapseText.get(),[0,1],[FAB_PADDING_HORIZONTAL,FAB_PADDING_VERTICAL]),SUBTLE_SPRING,'animate-always'),paddingVertical:FAB_PADDING_VERTICAL};}";
    tangon['code'] = golfie;
    var _closure1_slot7 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'design/components/experimental/Button/native/CollapsibleFloatingActionButton.native.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: CollapsibleFloatingActionButton
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = argFoo;
            backup = tangon.icon;
            romeon = tangon.positionBottom;
            verify = tangon.text;
            offset = tangon.state;
            zuuluu = {'icon': 0, 'positionBottom': 0, 'text': 0, 'state': 0};
            entity = null;
            update = zuuluu;
            echoed = null;
            michal = silentSetPrototypeOf(update, echoed);
            update = {};
            echoed = tangon;
            result = zuuluu;
            oscard = copyDataProperties(update, echoed, result);
            zuuluu = _closure1_slot6;
            report = undefined;
            yankee = zuuluu.bind(report)();
            tangon = _closure1_slot0;
            golfie = _closure1_slot2;
            zuuluu = 8;
            zuuluu = golfie[zuuluu];
            tangon = tangon.bind(report)(zuuluu);
            zuuluu = tangon.useStyles;
            tangon = zuuluu.bind(tangon)();
            golfie = _closure1_slot3;
            zuuluu = golfie.isValidElement;
            zuuluu = zuuluu.bind(golfie)(backup);
            golfie = backup;
            if(!zuuluu) { _fun00002_ip = 174; continue _fun00001 }
 121:
            foxtra = _closure1_slot3;
            option = foxtra.cloneElement;
            zuuluu = {};
            sizing = _closure1_slot1;
            output = _closure1_slot2;
            kiloes = 9;
            kiloes = output[kiloes];
            kiloes = sizing.bind(report)(kiloes);
            kiloes = kiloes.colors;
            kiloes = kiloes.WHITE;
            zuuluu['color'] = kiloes;
            golfie = option.bind(foxtra)(backup, zuuluu);
 174:
            option = entity != romeon;
            zuuluu = undefined;
            if(!option) { _fun00002_ip = 192; continue _fun00001 }
 183:
            option = {};
            option['bottom'] = romeon;
            zuuluu = option;
 192:
            tangon = tangon.button;
            option = new Array(2);
            option[0] = tangon;
            option[1] = zuuluu;
            if(!(entity == offset)) { _fun00002_ip = 348; continue _fun00001 }
 217:
            tangon = _closure1_slot4;
            zuuluu = _closure1_slot0;
            romeon = _closure1_slot2;
            entity = 7;
            entity = romeon[entity];
            entity = zuuluu.bind(report)(entity);
            zuuluu = entity.BaseTextButton;
            entity = {};
            update = entity;
            echoed = oscard;
            romeon = copyDataProperties(update, echoed);
            romeon = 'text';
            entity[romeon] = verify;
            foxtra = 'lg';
            romeon = 'size';
            entity[romeon] = foxtra;
            foxtra = 'primary';
            romeon = 'variant';
            entity[romeon] = foxtra;
            foxtra = 'text-md/semibold';
            romeon = 'textVariant';
            entity[romeon] = foxtra;
            romeon = 'icon';
            entity[romeon] = golfie;
            romeon = 'style';
            entity[romeon] = option;
            romeon = yankee.textButtonPill;
            yankee = 'pillStyle';
            entity[yankee] = romeon;
            entity = tangon.bind(report)(zuuluu, entity);
            _fun00002_ip = 410; continue _fun00001;
 348:
            tangon = _closure1_slot4;
            zuuluu = _closure1_slot8;
            michal = {};
            update = michal;
            echoed = oscard;
            oscard = copyDataProperties(update, echoed);
            oscard = 'state';
            michal[oscard] = offset;
            oscard = 'text';
            michal[oscard] = verify;
            oscard = 'style';
            michal[oscard] = option;
            oscard = 'icon';
            michal[oscard] = golfie;
            entity = tangon.bind(report)(zuuluu, michal);
 410:
            return entity;
        }
    };
    zuuluu['CollapsibleFloatingActionButton'] = michal;
    return entity;
})();