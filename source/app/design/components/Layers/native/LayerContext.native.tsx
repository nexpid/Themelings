// app/design/components/Layers/native/LayerContext.native.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var4 = var6[var1];
    var1 = undefined;
    var4 = var5.bind(var1)(var4);
    var _closure1_slot0 = var4;
    var4 = 1;
    var4 = var6[var4];
    var4 = var5.bind(var1)(var4);
    var _closure1_slot1 = var4;
    var4 = 2;
    var5 = var6[var4];
    var4 = metroImportAll;
    var7 = var4.bind(var1)(var5);
    var2 = function() {
        var4 = _closure1_slot1;
        var3 = function LayerContextManager() {
            var3 = this;
            var4 = _closure1_slot0;
            var2 = _closure2_slot0;
            var1 = undefined;
            var2 = var4.bind(var1)(var3, var2);
            var2 = {};
            var4 = null;
            var2['current'] = var4;
            var3['surfaceRef'] = var2;
            var2 = new Array(0);
            var3['items'] = var2;
            var2 = function() {
                var1 = null;
                return var1;
            };
            var3['invalidate'] = var2;
            return var1;
        };
        var _closure2_slot0 = var3;
        var1 = {};
        var2 = 'add';
        var1['key'] = var2;
        var2 = function value(arg1, arg2) {
            var5 = arg1;
            var2 = this;
            var _closure3_slot0 = var5;
            var4 = var2.items;
            var3 = var4.filter;
            var1 = function(arg1) {
                var1 = arg1;
                var2 = var1.key;
                var1 = _closure3_slot0;
                var1 = var2 !== var1;
                return var1;
            };
            var1 = var3.bind(var4)(var1);
            var2['items'] = var1;
            var4 = var2.items;
            var3 = var4.push;
            var1 = {};
            var1['key'] = var5;
            var5 = arg2;
            var1['component'] = var5;
            var1 = var3.bind(var4)(var1);
            var1 = var2.invalidate;
            var1 = var1.bind(var2)();
            var1 = undefined;
            return var1;
        };
        var1['value'] = var2;
        var2 = new Array(3);
        var2[0] = var1;
        var1 = {};
        var6 = 'remove';
        var1['key'] = var6;
        var6 = function value(arg1) {
            var2 = this;
            var3 = arg1;
            var _closure3_slot0 = var3;
            var4 = var2.items;
            var3 = var4.filter;
            var1 = function(arg1) {
                var1 = arg1;
                var2 = var1.key;
                var1 = _closure3_slot0;
                var1 = var2 !== var1;
                return var1;
            };
            var1 = var3.bind(var4)(var1);
            var2['items'] = var1;
            var1 = var2.invalidate;
            var1 = var1.bind(var2)();
            var1 = undefined;
            return var1;
        };
        var1['value'] = var6;
        var2[1] = var1;
        var1 = {};
        var6 = 'setSurfaceRef';
        var1['key'] = var6;
        var5 = function value(arg1) {
            var1 = this;
            var2 = var1.surfaceRef;
            var1 = arg1;
            var2['current'] = var1;
            var1 = undefined;
            return var1;
        };
        var1['value'] = var5;
        var2[2] = var1;
        var1 = undefined;
        var1 = var4.bind(var1)(var3, var2);
        return var1;
    };
    var4 = var2.bind(var1)();
    var2 = var4.prototype;
    var5 = Object.create(var2, {constructor: {value: var4}});
    var12 = var5;
    var2 = new var12[var4](var11);
    var5 = var2 instanceof Object ? var2 : var5;
    var2 = var7.createContext;
    var2 = var2.bind(var7)(var5);
    var5 = 3;
    var6 = var6[var5];
    var5 = require;
    var7 = var5.bind(var1)(var6);
    var6 = var7.fileFinishedImporting;
    var5 = 'design/components/Layers/native/LayerContext.native.tsx';
    var5 = var6.bind(var7)(var5);
    var3['LayerContextManager'] = var4;
    var3['LayerContext'] = var2;
    return var1;
})();