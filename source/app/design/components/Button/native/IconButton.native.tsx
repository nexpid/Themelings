// app/design/components/Button/native/IconButton.native.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot3 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = {};
            michal = {};
            report = _closure1_slot1;
            oscard = _closure1_slot2;
            zuuluu = 3;
            golfie = oscard[zuuluu];
            tangon = undefined;
            golfie = report.bind(tangon)(golfie);
            golfie = golfie.spacing;
            golfie = golfie.PX_4;
            michal['paddingBottom'] = golfie;
            zuuluu = oscard[zuuluu];
            zuuluu = report.bind(tangon)(zuuluu);
            zuuluu = zuuluu.spacing;
            zuuluu = zuuluu.PX_8;
            michal['gap'] = zuuluu;
            zuuluu = 'center';
            michal['alignItems'] = zuuluu;
            michal['alignSelf'] = zuuluu;
            report = argFoo;
            tangon = 0;
            if(!report) { _fun00002_ip = 94; continue _fun00001 }
 91:
            tangon = 1;
 94:
            michal['flexGrow'] = tangon;
            entity['labelPressable'] = michal;
            michal = {};
            michal['textAlign'] = zuuluu;
            entity['label'] = michal;
            return entity;
        }
    };
    tangon = option.bind(verify)(tangon);
    var _closure1_slot5 = tangon;
    tangon = golfie.forwardRef;
    michal = function(argFoo, argBar) {
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            report = argFoo;
            output = argBar;
            offset = report.label;
            zuuluu = report.grow;
            golfie = report.accessibilityLabel;
            yankee = report.maxFontSizeMultiplier;
            tangon = {'label': 0, 'grow': 0, 'accessibilityLabel': 0, 'maxFontSizeMultiplier': 0};
            entity = null;
            update = tangon;
            echoed = null;
            michal = silentSetPrototypeOf(update, echoed);
            update = {};
            echoed = report;
            result = tangon;
            backup = copyDataProperties(update, echoed, result);
            michal = _closure1_slot5;
            report = undefined;
            romeon = michal.bind(report)(zuuluu);
            if(!(entity == offset)) { _fun00004_ip = 154; continue _fun00003 }
 79:
            zuuluu = _closure1_slot3;
            michal = _closure1_slot0;
            tangon = _closure1_slot2;
            entity = 5;
            entity = tangon[entity];
            entity = michal.bind(report)(entity);
            michal = entity.BaseIconButton;
            entity = {};
            entity['ref'] = output;
            update = entity;
            echoed = backup;
            tangon = copyDataProperties(update, echoed);
            tangon = 'accessibilityLabel';
            entity[tangon] = golfie;
            tangon = 'maxFontSizeMultiplier';
            entity[tangon] = yankee;
            entity = zuuluu.bind(report)(michal, entity);
            _fun00004_ip = 396; continue _fun00003;
 154:
            tangon = _closure1_slot4;
            option = _closure1_slot0;
            foxtra = _closure1_slot2;
            michal = 4;
            michal = foxtra[michal];
            michal = option.bind(report)(michal);
            zuuluu = michal.BaseButton;
            michal = {};
            verify = romeon.labelPressable;
            michal['style'] = verify;
            update = michal;
            echoed = backup;
            verify = copyDataProperties(update, echoed);
            sizing = 'none';
            verify = 'variant';
            michal[verify] = sizing;
            kiloes = 'accessibilityLabel';
            michal[kiloes] = golfie;
            verify = _closure1_slot3;
            oscard = 5;
            oscard = foxtra[oscard];
            oscard = option.bind(report)(oscard);
            golfie = oscard.BaseIconButton;
            oscard = {};
            oscard['ref'] = output;
            update = oscard;
            echoed = backup;
            backup = copyDataProperties(update, echoed);
            backup = 'accessibilityRole';
            oscard[backup] = sizing;
            backup = '';
            oscard[kiloes] = backup;
            kiloes = 'lg';
            backup = 'size';
            oscard[backup] = kiloes;
            backup = 'maxFontSizeMultiplier';
            oscard[backup] = yankee;
            oscard = verify.bind(report)(golfie, oscard);
            golfie = new Array(2);
            golfie[0] = oscard;
            oscard = 6;
            oscard = foxtra[oscard];
            oscard = option.bind(report)(oscard);
            option = oscard.Text;
            oscard = {'style': null, 'variant': 'text-xs/medium', 'color': 'interactive-normal'};
            romeon = romeon.label;
            oscard['style'] = romeon;
            oscard['maxFontSizeMultiplier'] = yankee;
            oscard['children'] = offset;
            oscard = verify.bind(report)(option, oscard);
            golfie[1] = oscard;
            oscard = 'children';
            michal[oscard] = golfie;
            entity = tangon.bind(report)(zuuluu, michal);
 396:
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'design/components/Button/native/IconButton.native.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['IconButton'] = michal;
    return entity;
})();