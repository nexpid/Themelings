// app/design/components/TableRow/native/TableCheckboxRow.native.tsx
export default (function(argFoo, argBar, _, argCor, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Platform;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot3 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'design/components/TableRow/native/TableCheckboxRow.native.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: TableCheckboxRow
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            report = argFoo;
            option = report.checked;
            var _closure2_slot0 = option;
            sizing = report.label;
            kiloes = report.subLabel;
            romeon = report.disabled;
            tangon = undefined;
            if(!(romeon === tangon)) { _fun00002_ip = 39; continue _fun00001 }
 37:
            romeon = false;
 39:
            result = report.onPress;
            var _closure2_slot1 = result;
            offset = report.accessibilityHint;
            zuuluu = {'checked': 0, 'label': 0, 'subLabel': 0, 'disabled': 0, 'onPress': 0, 'accessibilityHint': 0};
            yankee = null;
            source = zuuluu;
            update = null;
            michal = silentSetPrototypeOf(source, update);
            golfie = 0;
            source = {};
            update = report;
            echoed = zuuluu;
            foxtra = copyDataProperties(source, update, echoed);
            var _closure2_slot2 = tangon;
            michal = _closure1_slot0;
            output = _closure1_slot1;
            zuuluu = 3;
            zuuluu = output[zuuluu];
            oscard = michal.bind(tangon)(zuuluu);
            zuuluu = oscard.useSharedValue;
            backup = zuuluu.bind(oscard)(golfie);
            _closure2_slot2 = backup;
            golfie = _closure1_slot2;
            verify = golfie.useCallback;
            oscard = new Array(1);
            oscard[0] = backup;
            zuuluu = function() {
                zuuluu = _closure2_slot2;
                michal = zuuluu.set;
                entity = 1;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            verify = verify.bind(golfie)(zuuluu, oscard);
            oscard = golfie.useCallback;
            zuuluu = new Array(3);
            zuuluu[0] = result;
            zuuluu[1] = backup;
            zuuluu[2] = option;
            entity = function() {
                tangon = _closure2_slot2;
                zuuluu = tangon.set;
                michal = 0;
                michal = zuuluu.bind(tangon)(michal);
                zuuluu = _closure2_slot1;
                entity = _closure2_slot0;
                michal = !entity;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            golfie = oscard.bind(golfie)(entity, zuuluu);
            entity = 4;
            zuuluu = output[entity];
            oscard = michal.bind(tangon)(zuuluu);
            zuuluu = oscard.getNodeText;
            backup = zuuluu.bind(oscard)(sizing);
            entity = output[entity];
            zuuluu = michal.bind(tangon)(entity);
            entity = zuuluu.getNodeText;
            oscard = entity.bind(zuuluu)(kiloes);
            zuuluu = _closure1_slot3;
            entity = 5;
            entity = output[entity];
            entity = michal.bind(tangon)(entity);
            michal = entity.TableRow;
            entity = {};
            source = entity;
            update = foxtra;
            foxtra = copyDataProperties(source, update);
            output = false;
            foxtra = 'arrow';
            entity[foxtra] = output;
            foxtra = 'label';
            entity[foxtra] = sizing;
            foxtra = 'subLabel';
            entity[foxtra] = kiloes;
            foxtra = 'disabled';
            entity[foxtra] = romeon;
            foxtra = {};
            foxtra['disabled'] = romeon;
            foxtra['checked'] = option;
            romeon = 'accessibilityState';
            entity[romeon] = foxtra;
            foxtra = true;
            romeon = 'accessible';
            entity[romeon] = foxtra;
            foxtra = 'checkbox';
            romeon = 'accessibilityRole';
            entity[romeon] = foxtra;
            yankee = yankee != oscard;
            foxtra = '';
            romeon = foxtra;
            if(!yankee) { _fun00002_ip = 370; continue _fun00001 }
 367:
            romeon = oscard;
 370:
            oscard = global;
            oscard = oscard.HermesInternal;
            yankee = oscard.concat;
            oscard = ', ';
            yankee = yankee.bind(foxtra)(backup, oscard, romeon);
            oscard = 'accessibilityLabel';
            entity[oscard] = yankee;
            oscard = 'accessibilityHint';
            entity[oscard] = offset;
            oscard = 'onPressIn';
            entity[oscard] = verify;
            oscard = 'onPress';
            entity[oscard] = golfie;
            golfie = _closure1_slot3;
            oscard = _closure1_slot0;
            verify = _closure1_slot1;
            report = 6;
            report = verify[report];
            report = oscard.bind(tangon)(report);
            oscard = report.FormCheckbox;
            report = {};
            report['checked'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = 'trailing';
            entity[report] = oscard;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['TableCheckboxRow'] = michal;
    return entity;
})();