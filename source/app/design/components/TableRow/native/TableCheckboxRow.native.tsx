// app/design/components/TableRow/native/TableCheckboxRow.native.tsx
export default (function(argFoo, argBar, _, argCorge, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    var _closure1_slot2 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot3 = tango;
    tango = 6;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'design/components/TableRow/native/TableCheckboxRow.native.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: TableCheckboxRow
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            report = argFoo;
            options = report.checked;
            var _closure2_slot0 = options;
            sizing = report.label;
            kilo = report.subLabel;
            romeo = report.disabled;
            tango = undefined;
            if(!(romeo === tango)) { _fun00002_ip = 39; continue _fun00001 }
 37:
            romeo = false;
 39:
            result = report.onPress;
            var _closure2_slot1 = result;
            offset = report.accessibilityHint;
            zulu = {'checked': 0, 'label': 0, 'subLabel': 0, 'disabled': 0, 'onPress': 0, 'accessibilityHint': 0};
            yankee = null;
            source = zulu;
            update = null;
            mike = silentSetPrototypeOf(source, update);
            golf = 0;
            source = {};
            update = report;
            echo = zulu;
            foxtrot = copyDataProperties(source, update, echo);
            var _closure2_slot2 = tango;
            mike = _closure1_slot0;
            output = _closure1_slot1;
            zulu = 2;
            zulu = output[zulu];
            oscar = mike.bind(tango)(zulu);
            zulu = oscar.useSharedValue;
            backup = zulu.bind(oscar)(golf);
            _closure2_slot2 = backup;
            golf = _closure1_slot2;
            verify = golf.useCallback;
            oscar = new Array(1);
            oscar[0] = backup;
            zulu = function() {
                zulu = _closure2_slot2;
                mike = zulu.set;
                entity = 1;
                entity = mike.bind(zulu)(entity);
                entity = undefined;
                return entity;
            };
            verify = verify.bind(golf)(zulu, oscar);
            oscar = golf.useCallback;
            zulu = new Array(3);
            zulu[0] = result;
            zulu[1] = backup;
            zulu[2] = options;
            entity = function() {
                tango = _closure2_slot2;
                zulu = tango.set;
                mike = 0;
                mike = zulu.bind(tango)(mike);
                zulu = _closure2_slot1;
                entity = _closure2_slot0;
                mike = !entity;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            golf = oscar.bind(golf)(entity, zulu);
            entity = 3;
            zulu = output[entity];
            oscar = mike.bind(tango)(zulu);
            zulu = oscar.getNodeText;
            backup = zulu.bind(oscar)(sizing);
            entity = output[entity];
            zulu = mike.bind(tango)(entity);
            entity = zulu.getNodeText;
            oscar = entity.bind(zulu)(kilo);
            zulu = _closure1_slot3;
            entity = 4;
            entity = output[entity];
            entity = mike.bind(tango)(entity);
            mike = entity.TableRow;
            entity = {};
            source = entity;
            update = foxtrot;
            foxtrot = copyDataProperties(source, update);
            output = false;
            foxtrot = 'arrow';
            entity[foxtrot] = output;
            foxtrot = 'label';
            entity[foxtrot] = sizing;
            foxtrot = 'subLabel';
            entity[foxtrot] = kilo;
            foxtrot = 'disabled';
            entity[foxtrot] = romeo;
            foxtrot = {};
            foxtrot['disabled'] = romeo;
            foxtrot['checked'] = options;
            romeo = 'accessibilityState';
            entity[romeo] = foxtrot;
            foxtrot = true;
            romeo = 'accessible';
            entity[romeo] = foxtrot;
            foxtrot = 'checkbox';
            romeo = 'accessibilityRole';
            entity[romeo] = foxtrot;
            yankee = yankee != oscar;
            foxtrot = '';
            romeo = foxtrot;
            if(!yankee) { _fun00002_ip = 370; continue _fun00001 }
 367:
            romeo = oscar;
 370:
            oscar = global;
            oscar = oscar.HermesInternal;
            yankee = oscar.concat;
            oscar = ', ';
            yankee = yankee.bind(foxtrot)(backup, oscar, romeo);
            oscar = 'accessibilityLabel';
            entity[oscar] = yankee;
            oscar = 'accessibilityHint';
            entity[oscar] = offset;
            oscar = 'onPressIn';
            entity[oscar] = verify;
            oscar = 'onPress';
            entity[oscar] = golf;
            golf = _closure1_slot3;
            oscar = _closure1_slot0;
            verify = _closure1_slot1;
            report = 5;
            report = verify[report];
            report = oscar.bind(tango)(report);
            oscar = report.FormCheckbox;
            report = {};
            report['checked'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = 'trailing';
            entity[report] = oscar;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['TableCheckboxRow'] = mike;
    return entity;
})();