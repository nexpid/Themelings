// app/components_native/chat_sidebar/ChatSidebarMembersRow.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    option = tangon.Animated;
    var _closure1_slot5 = option;
    offset = tangon.Easing;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.jsx;
    var _closure1_slot7 = option;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    yankee = {'paddingHorizontal': 16, 'flexDirection': 'row', 'alignItems': 'center'};
    tangon['row'] = yankee;
    yankee = {'flex': 1, 'marginHorizontal': 16};
    tangon['rowInner'] = yankee;
    yankee = {'alignItems': 'center', 'flexDirection': 'row'};
    tangon['rowHeaderWrapper'] = yankee;
    yankee = {'width': 32, 'height': 32, 'borderRadius': null, 'overflow': 'hidden'};
    romeon = 5;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.lg;
    yankee['borderRadius'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_MODIFIER_ACCENT;
    yankee['backgroundColor'] = backup;
    tangon['placeholderAvatar'] = yankee;
    yankee = {};
    backup = 20;
    yankee['height'] = backup;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    yankee['borderRadius'] = backup;
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_MODIFIER_ACCENT;
    yankee['backgroundColor'] = romeon;
    tangon['placeholderText'] = yankee;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot9 = tangon;
    tangon = function(argFoo) { // Original name: placeholderRowWidth
        entity = global;
        tangon = entity.Math;
        zuuluu = tangon.sin;
        michal = argFoo;
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = 10000;
        michal = michal * zuuluu;
        zuuluu = entity.Math;
        entity = zuuluu.floor;
        entity = entity.bind(zuuluu)(michal);
        entity = michal - entity;
        michal = 40;
        entity = michal * entity;
        entity = entity + michal;
        return entity;
    };
    var _closure1_slot10 = tangon;
    tangon = {'duration': 1300, 'easing': null, 'useNativeDriver': true, 'isInteraction': false};
    verify = offset.inOut;
    option = offset.ease;
    option = verify.bind(offset)(option);
    tangon['easing'] = option;
    var _closure1_slot11 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            backup = entity.row;
            offset = entity.shouldAnimate;
            tangon = undefined;
            if(!(offset === tangon)) { _fun00002_ip = 25; continue _fun00001 }
 23:
            offset = true;
 25:
            oscard = entity.style;
            var _closure2_slot0 = tangon;
            var _closure2_slot1 = tangon;
            entity = _closure1_slot9;
            yankee = entity.bind(tangon)();
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            entity = 6;
            entity = report[entity];
            zuuluu = zuuluu.bind(tangon)(entity);
            entity = function() {
                entity = _closure1_slot5;
                zuuluu = entity.Value;
                entity = zuuluu.prototype;
                michal = Object.create(entity, {constructor: {value: zuuluu}});
                tangon = 1;
                report = michal;
                entity = new report[zuuluu](tangon, zuuluu);
                entity = entity instanceof Object ? entity : michal;
                return entity;
            };
            golfie = zuuluu.bind(tangon)(entity);
            zuuluu = _closure1_slot0;
            entity = 7;
            entity = report[entity];
            option = zuuluu.bind(tangon)(entity);
            report = option.useStateFromStores;
            entity = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = entity;
            entity = function() {
                entity = _closure1_slot6;
                entity = entity.useReducedMotion;
                return entity;
            };
            entity = report.bind(option)(zuuluu, entity);
            if(!offset) { _fun00002_ip = 129; continue _fun00001 }
 126:
            offset = !entity;
 129:
            _closure2_slot0 = offset;
            entity = _closure1_slot5;
            report = entity.loop;
            option = entity.sequence;
            verify = entity.timing;
            zuuluu = {};
            romeon = 0.3;
            zuuluu['toValue'] = romeon;
            kiloes = _closure1_slot11;
            result = zuuluu;
            output = kiloes;
            romeon = copyDataProperties(result, output);
            verify = verify.bind(entity)(golfie, zuuluu);
            zuuluu = new Array(2);
            zuuluu[0] = verify;
            romeon = entity.timing;
            verify = {};
            sizing = 1;
            verify['toValue'] = sizing;
            result = verify;
            output = kiloes;
            kiloes = copyDataProperties(result, output);
            verify = romeon.bind(entity)(golfie, verify);
            zuuluu[1] = verify;
            zuuluu = option.bind(entity)(zuuluu);
            verify = report.bind(entity)(zuuluu);
            _closure2_slot1 = verify;
            option = _closure1_slot3;
            report = option.useEffect;
            zuuluu = new Array(2);
            zuuluu[0] = offset;
            zuuluu[1] = verify;
            michal = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = _closure2_slot0;
                    michal = _closure2_slot1;
                    if(entity) { _fun00004_ip = 26; continue _fun00003 }
 14:
                    entity = michal.stop;
                    entity = entity.bind(michal)();
                    _fun00004_ip = 35; continue _fun00003;
 26:
                    entity = michal.start;
                    entity = entity.bind(michal)();
 35:
                    entity = undefined;
                    return entity;
                }
            };
            michal = report.bind(option)(michal, zuuluu);
            zuuluu = _closure1_slot8;
            michal = entity.View;
            entity = {};
            option = yankee.row;
            report = new Array(3);
            report[0] = option;
            report[1] = oscard;
            oscard = {};
            oscard['opacity'] = golfie;
            report[2] = oscard;
            entity['style'] = report;
            option = _closure1_slot7;
            golfie = _closure1_slot4;
            report = {};
            oscard = yankee.placeholderAvatar;
            report['style'] = oscard;
            oscard = option.bind(tangon)(golfie, report);
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            verify = yankee.rowInner;
            oscard['style'] = verify;
            verify = {};
            offset = yankee.rowHeaderWrapper;
            verify['style'] = offset;
            offset = {};
            romeon = yankee.placeholderText;
            yankee = new Array(2);
            yankee[0] = romeon;
            romeon = {};
            foxtra = _closure1_slot10;
            sizing = foxtra.bind(tangon)(backup);
            foxtra = global;
            foxtra = foxtra.HermesInternal;
            kiloes = foxtra.concat;
            backup = '';
            foxtra = '%';
            foxtra = kiloes.bind(backup)(sizing, foxtra);
            romeon['width'] = foxtra;
            yankee[1] = romeon;
            offset['style'] = yankee;
            offset = option.bind(tangon)(golfie, offset);
            verify['children'] = offset;
            verify = option.bind(tangon)(golfie, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'components_native/chat_sidebar/ChatSidebarMembersRow.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['PlaceholderRow'] = michal;
    return entity;
})();