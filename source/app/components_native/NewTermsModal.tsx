// app/components_native/NewTermsModal.tsx
export default (function(_, argBar, argBaz, argCor, __, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: handleTouch
        michal = _closure1_slot7;
        entity = michal.dismiss;
        entity = entity.bind(michal)();
        entity = undefined;
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = function() { // Original name: handleMoreActions
        verify = _closure1_slot0;
        offset = _closure1_slot2;
        entity = 9;
        michal = offset[entity];
        entity = undefined;
        tangon = verify.bind(entity)(michal);
        zuuluu = tangon.showSimpleActionSheet;
        michal = {};
        report = 'NewTermsModalMore';
        michal['key'] = report;
        oscard = {};
        report = 10;
        golfie = offset[report];
        golfie = verify.bind(entity)(golfie);
        option = golfie.intl;
        golfie = option.string;
        report = offset[report];
        report = verify.bind(entity)(report);
        report = report.t;
        report = report.2jxGen;
        report = golfie.bind(option)(report);
        oscard['label'] = report;
        report = true;
        oscard['isDestructive'] = report;
        report = function() { // Original name: onPress
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 11;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.logout;
            entity = 'new_terms_modal';
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        oscard['onPress'] = report;
        report = new Array(1);
        report[0] = oscard;
        michal['options'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    var _closure1_slot16 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot6 = golfie;
    golfie = tangon.Keyboard;
    var _closure1_slot7 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.MarketingURLs;
    var _closure1_slot10 = golfie;
    tangon = tangon.UserRequiredActions;
    var _closure1_slot11 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot12 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot13 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'paddingHorizontal': 16, 'flexGrow': 1, 'display': 'flex', 'alignContent': 'center', 'justifyContent': 'center'};
    tangon['contentContainer'] = verify;
    verify = {};
    offset = 8;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = romeon;
    tangon['container'] = verify;
    verify = {};
    romeon = 24;
    verify['marginTop'] = romeon;
    tangon['button'] = verify;
    verify = {'marginTop': 24, 'marginBottom': 24};
    tangon['description'] = verify;
    verify = {};
    verify['marginTop'] = romeon;
    tangon['agreementDescription'] = verify;
    verify = {'position': 'absolute', 'top': 0, 'right': 0};
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.INTERACTIVE_NORMAL;
    verify['tintColor'] = offset;
    tangon['navbarRight'] = verify;
    verify = {'height': 120, 'resizeMode': 'contain', 'alignSelf': 'center'};
    tangon['headerImage'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot14 = tangon;
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'components_native/NewTermsModal.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: NewTermsModal
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = _closure1_slot14;
            report = undefined;
            romeon = entity.bind(report)();
            zuuluu = _closure1_slot1;
            golfie = _closure1_slot2;
            entity = 12;
            entity = golfie[entity];
            entity = zuuluu.bind(report)(entity);
            entity = entity.bind(report)();
            option = entity.bottom;
            verify = entity.top;
            offset = _closure1_slot5;
            tangon = offset.useMemo;
            michal = function() {
                michal = _closure1_slot9;
                entity = michal.getAction;
                entity = entity.bind(michal)();
                return entity;
            };
            entity = new Array(0);
            michal = tangon.bind(offset)(michal, entity);
            var _closure2_slot0 = michal;
            tangon = offset.useState;
            entity = false;
            oscard = tangon.bind(offset)(entity);
            tangon = _closure1_slot4;
            entity = 2;
            tangon = tangon.bind(report)(oscard, entity);
            entity = 0;
            result = tangon[entity];
            entity = 1;
            entity = tangon[entity];
            var _closure2_slot1 = entity;
            oscard = offset.useCallback;
            tangon = _closure1_slot3;
            entity = function* () {
                entity = function* () { // Original name: ?anon_0_
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        StartGenerator();
                        ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                        if(michal) { _fun00004_ip = 81; continue _fun00003 }
 7:
                        report = _closure2_slot1;
                        zuuluu = undefined;
                        michal = true;
                        michal = report.bind(zuuluu)(michal);
                        report = _closure1_slot0;
                        oscard = _closure1_slot2;
                        michal = 13;
                        michal = oscard[michal];
                        report = report.bind(zuuluu)(michal);
                        michal = report.acceptAgreements;
                        michal = michal.bind(report)();
                        SaveGenerator(address=60);
 58:
                        return michal;
 60:
                        ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                        if(report) { _fun00004_ip = 78; continue _fun00003 }
 66:
                        tangon = _closure2_slot1;
                        tangon = tangon.bind(zuuluu)(michal);
                        return zuuluu;
 78:
                        return michal;
 81:
                        return entity;
                    }
                };
                return entity;
            };
            tangon = tangon.bind(report)(entity);
            entity = new Array(0);
            entity = oscard.bind(offset)(tangon, entity);
            var _closure2_slot2 = entity;
            entity = 14;
            entity = golfie[entity];
            oscard = zuuluu.bind(report)(entity);
            tangon = {};
            zuuluu = _closure1_slot0;
            entity = 15;
            offset = golfie[entity];
            offset = zuuluu.bind(report)(offset);
            offset = offset.ImpressionTypes;
            offset = offset.VIEW;
            tangon['type'] = offset;
            entity = golfie[entity];
            entity = zuuluu.bind(report)(entity);
            entity = entity.ImpressionNames;
            entity = entity.USER_AGREEMENTS;
            tangon['name'] = entity;
            entity = {};
            entity['required_action'] = michal;
            tangon['properties'] = entity;
            zuuluu = {};
            entity = new Array(0);
            entity = oscard.bind(report)(tangon, zuuluu, entity);
            entity = null;
            michal = entity == michal;
            if(michal) { _fun00002_ip = 1275; continue _fun00001 }
 264:
            tangon = _closure1_slot13;
            zuuluu = _closure1_slot8;
            michal = {};
            golfie = romeon.container;
            oscard = new Array(2);
            oscard[0] = golfie;
            golfie = {};
            golfie['paddingTop'] = verify;
            golfie['paddingBottom'] = option;
            oscard[1] = golfie;
            michal['style'] = oscard;
            oscard = romeon.contentContainer;
            michal['contentContainerStyle'] = oscard;
            oscard = _closure1_slot15;
            michal['onTouchStart'] = oscard;
            verify = _closure1_slot12;
            foxtra = _closure1_slot0;
            backup = _closure1_slot2;
            golfie = 16;
            oscard = backup[golfie];
            oscard = foxtra.bind(report)(oscard);
            option = oscard.Text;
            oscard = {'maxFontSizeMultiplier': 2, 'variant': 'heading-xxl/bold'};
            offset = 10;
            kiloes = backup[offset];
            kiloes = foxtra.bind(report)(kiloes);
            echoed = kiloes.intl;
            sizing = echoed.string;
            kiloes = backup[offset];
            kiloes = foxtra.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.7glvXl;
            kiloes = sizing.bind(echoed)(kiloes);
            oscard['children'] = kiloes;
            option = verify.bind(report)(option, oscard);
            oscard = new Array(9);
            oscard[0] = option;
            option = 17;
            kiloes = backup[option];
            kiloes = foxtra.bind(report)(kiloes);
            echoed = kiloes.TextWithIOSLinkWorkaround;
            sizing = {};
            kiloes = 'text-md/normal';
            sizing['variant'] = kiloes;
            update = romeon.description;
            sizing['style'] = update;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            vacuum = update.intl;
            ctrled = vacuum.format;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            update = update.t;
            source = update.zHolhY;
            update = {};
            update = ctrled.bind(vacuum)(source, update);
            sizing['children'] = update;
            sizing = verify.bind(report)(echoed, sizing);
            oscard[1] = sizing;
            sizing = backup[option];
            sizing = foxtra.bind(report)(sizing);
            echoed = sizing.TextWithIOSLinkWorkaround;
            sizing = {};
            sizing['variant'] = kiloes;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            sequen = update.intl;
            ctrled = sequen.format;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            update = update.t;
            source = update.iw0hFh;
            update = {};
            vacuum = _closure1_slot10;
            config = vacuum.TERMS;
            update['url'] = config;
            update = ctrled.bind(sequen)(source, update);
            sizing['children'] = update;
            sizing = verify.bind(report)(echoed, sizing);
            oscard[2] = sizing;
            sizing = backup[option];
            sizing = foxtra.bind(report)(sizing);
            echoed = sizing.TextWithIOSLinkWorkaround;
            sizing = {};
            sizing['variant'] = kiloes;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            sequen = update.intl;
            ctrled = sequen.format;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            update = update.t;
            source = update.36klnJ;
            update = {};
            config = vacuum.PAID_TERMS;
            update['url'] = config;
            update = ctrled.bind(sequen)(source, update);
            sizing['children'] = update;
            sizing = verify.bind(report)(echoed, sizing);
            oscard[3] = sizing;
            sizing = backup[option];
            sizing = foxtra.bind(report)(sizing);
            echoed = sizing.TextWithIOSLinkWorkaround;
            sizing = {};
            sizing['variant'] = kiloes;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            sequen = update.intl;
            ctrled = sequen.format;
            update = backup[offset];
            update = foxtra.bind(report)(update);
            update = update.t;
            source = update.TquFBA;
            update = {};
            config = vacuum.PRIVACY;
            update['url'] = config;
            update = ctrled.bind(sequen)(source, update);
            sizing['children'] = update;
            sizing = verify.bind(report)(echoed, sizing);
            oscard[4] = sizing;
            option = backup[option];
            option = foxtra.bind(report)(option);
            sizing = option.TextWithIOSLinkWorkaround;
            option = {};
            option['variant'] = kiloes;
            echoed = backup[offset];
            echoed = foxtra.bind(report)(echoed);
            ctrled = echoed.intl;
            source = ctrled.format;
            echoed = backup[offset];
            echoed = foxtra.bind(report)(echoed);
            echoed = echoed.t;
            update = echoed.ia96TU;
            echoed = {};
            vacuum = vacuum.GUIDELINES;
            echoed['url'] = vacuum;
            echoed = source.bind(ctrled)(update, echoed);
            option['children'] = echoed;
            option = verify.bind(report)(sizing, option);
            oscard[5] = option;
            golfie = backup[golfie];
            golfie = foxtra.bind(report)(golfie);
            option = golfie.Text;
            golfie = {};
            golfie['variant'] = kiloes;
            kiloes = romeon.agreementDescription;
            golfie['style'] = kiloes;
            kiloes = backup[offset];
            kiloes = foxtra.bind(report)(kiloes);
            echoed = kiloes.intl;
            sizing = echoed.string;
            kiloes = backup[offset];
            kiloes = foxtra.bind(report)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.+USXQE;
            kiloes = sizing.bind(echoed)(kiloes);
            golfie['children'] = kiloes;
            golfie = verify.bind(report)(option, golfie);
            oscard[6] = golfie;
            option = _closure1_slot6;
            golfie = {};
            kiloes = romeon.button;
            golfie['style'] = kiloes;
            kiloes = 18;
            kiloes = backup[kiloes];
            kiloes = foxtra.bind(report)(kiloes);
            sizing = kiloes.Button;
            kiloes = {};
            kiloes['loading'] = result;
            output = function() { // Original name: onPress
                _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                    zuuluu = _closure2_slot0;
                    michal = _closure1_slot11;
                    michal = michal.AGREEMENTS;
                    if(!(zuuluu === michal)) { _fun00006_ip = 34; continue _fun00005 }
 24:
                    michal = _closure2_slot2;
                    entity = undefined;
                    entity = michal.bind(entity)();
 34:
                    entity = undefined;
                    return entity;
                }
            };
            kiloes['onPress'] = output;
            output = backup[offset];
            output = foxtra.bind(report)(output);
            echoed = output.intl;
            result = echoed.string;
            output = backup[offset];
            output = foxtra.bind(report)(output);
            output = output.t;
            output = output.+TBKLy;
            output = result.bind(echoed)(output);
            kiloes['text'] = output;
            kiloes = verify.bind(report)(sizing, kiloes);
            golfie['children'] = kiloes;
            golfie = verify.bind(report)(option, golfie);
            oscard[7] = golfie;
            sizing = _closure1_slot1;
            golfie = 19;
            golfie = backup[golfie];
            option = sizing.bind(report)(golfie);
            golfie = {};
            kiloes = romeon.navbarRight;
            golfie['style'] = kiloes;
            kiloes = 20;
            kiloes = backup[kiloes];
            kiloes = sizing.bind(report)(kiloes);
            golfie['source'] = kiloes;
            romeon = romeon.navbarRight;
            romeon = romeon.tintColor;
            golfie['color'] = romeon;
            yankee = _closure1_slot16;
            golfie['onPress'] = yankee;
            yankee = 'button';
            golfie['accessibilityRole'] = yankee;
            yankee = backup[offset];
            yankee = foxtra.bind(report)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = backup[offset];
            offset = foxtra.bind(report)(offset);
            offset = offset.t;
            offset = offset.UKOtz8;
            offset = yankee.bind(romeon)(offset);
            golfie['accessibilityLabel'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[8] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1275:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();