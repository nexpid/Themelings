// app/components_native/reactions/BurstReactionFirstSendActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: onDismiss
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 5;
        michal = michal[entity];
        entity = undefined;
        zuuluu = zuuluu.bind(entity)(michal);
        michal = zuuluu.hideActionSheet;
        michal = michal.bind(zuuluu)();
        return entity;
    };
    var _closure1_slot7 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    romeon = 1;
    tangon = oscard[romeon];
    tangon = report.bind(entity)(tangon);
    offset = tangon.StyleSheet;
    tangon = tangon.View;
    var _closure1_slot3 = tangon;
    tangon = 2;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot4 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'paddingTop': 24, 'paddingBottom': 24, 'paddingLeft': 12, 'paddingRight': 12};
    tangon['container'] = verify;
    verify = {};
    backup = offset.absoluteFillObject;
    kiloes = verify;
    offset = copyDataProperties(kiloes, backup);
    offset = 'flex';
    verify[offset] = romeon;
    romeon = 'center';
    offset = 'alignItems';
    verify[offset] = romeon;
    offset = 'justifyContent';
    verify[offset] = romeon;
    romeon = -120;
    offset = 'top';
    verify[offset] = romeon;
    tangon['fill'] = verify;
    verify = {'tintColor': null, 'width': 37.5, 'height': 37.5};
    offset = 4;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.HEADER_SECONDARY;
    verify['tintColor'] = offset;
    tangon['nitroWheel'] = verify;
    verify = {'flexDirection': 'row', 'flexShrink': 1, 'alignItems': 'center', 'alignSelf': 'center', 'textAlign': 'center'};
    tangon['textContainer'] = verify;
    verify = {'paddingTop': 8, 'paddingBottom': 18};
    tangon['body'] = verify;
    verify = {};
    offset = 16;
    verify['paddingHorizontal'] = offset;
    tangon['content'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 19;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'components_native/reactions/BurstReactionFirstSendActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: BurstReactionFirstSendActionSheet
        entity = argFoo;
        yankee = entity.emoji;
        backup = entity.channelId;
        offset = entity.messageId;
        entity = _closure1_slot6;
        tangon = undefined;
        sizing = entity.bind(tangon)();
        zuuluu = _closure1_slot4;
        result = _closure1_slot0;
        foxtra = _closure1_slot2;
        entity = 6;
        entity = foxtra[entity];
        entity = result.bind(tangon)(entity);
        michal = entity.BottomSheet;
        entity = {};
        oscard = 7;
        oscard = foxtra[oscard];
        oscard = result.bind(tangon)(oscard);
        oscard = oscard.BACKDROP_OPACITY;
        entity['backdropOpacity'] = oscard;
        oscard = sizing.content;
        entity['contentStyles'] = oscard;
        golfie = _closure1_slot3;
        oscard = {};
        option = sizing.fill;
        oscard['style'] = option;
        romeon = _closure1_slot1;
        option = 8;
        option = foxtra[option];
        verify = romeon.bind(tangon)(option);
        option = {};
        option['channelId'] = backup;
        option['emoji'] = yankee;
        option['messageId'] = offset;
        offset = 9;
        offset = foxtra[offset];
        offset = result.bind(tangon)(offset);
        offset = offset.ReactionTypes;
        offset = offset.BURST;
        option['reactionType'] = offset;
        option = zuuluu.bind(tangon)(verify, option);
        oscard['children'] = option;
        oscard = zuuluu.bind(tangon)(golfie, oscard);
        entity['backdropChildren'] = oscard;
        backup = _closure1_slot7;
        entity['onDismiss'] = backup;
        oscard = _closure1_slot5;
        report = {};
        option = sizing.container;
        report['style'] = option;
        option = {};
        verify = sizing.textContainer;
        option['style'] = verify;
        verify = 10;
        verify = foxtra[verify];
        offset = romeon.bind(tangon)(verify);
        verify = {};
        yankee = sizing.nitroWheel;
        verify['style'] = yankee;
        offset = zuuluu.bind(tangon)(offset, verify);
        verify = new Array(2);
        verify[0] = offset;
        offset = 11;
        yankee = foxtra[offset];
        yankee = result.bind(tangon)(yankee);
        output = yankee.Text;
        yankee = {};
        kiloes = 'heading-xl/bold';
        yankee['variant'] = kiloes;
        kiloes = 12;
        echoed = foxtra[kiloes];
        echoed = result.bind(tangon)(echoed);
        source = echoed.intl;
        update = source.string;
        echoed = foxtra[kiloes];
        echoed = result.bind(tangon)(echoed);
        echoed = echoed.t;
        echoed = echoed.NX7HIy;
        echoed = update.bind(source)(echoed);
        yankee['children'] = echoed;
        yankee = zuuluu.bind(tangon)(output, yankee);
        verify[1] = yankee;
        option['children'] = verify;
        verify = oscard.bind(tangon)(golfie, option);
        option = new Array(3);
        option[0] = verify;
        verify = {};
        yankee = sizing.body;
        verify['style'] = yankee;
        offset = foxtra[offset];
        offset = result.bind(tangon)(offset);
        yankee = offset.Text;
        offset = {};
        sizing = sizing.textContainer;
        offset['style'] = sizing;
        sizing = 'text-md/normal';
        offset['variant'] = sizing;
        sizing = foxtra[kiloes];
        sizing = result.bind(tangon)(sizing);
        echoed = sizing.intl;
        output = echoed.string;
        sizing = foxtra[kiloes];
        sizing = result.bind(tangon)(sizing);
        sizing = sizing.t;
        sizing = sizing.2Yp7dH;
        sizing = output.bind(echoed)(sizing);
        offset['children'] = sizing;
        offset = zuuluu.bind(tangon)(yankee, offset);
        verify['children'] = offset;
        verify = zuuluu.bind(tangon)(golfie, verify);
        option[1] = verify;
        yankee = 13;
        verify = foxtra[yankee];
        offset = romeon.bind(tangon)(verify);
        verify = {};
        sizing = foxtra[kiloes];
        sizing = result.bind(tangon)(sizing);
        output = sizing.intl;
        sizing = output.string;
        kiloes = foxtra[kiloes];
        kiloes = result.bind(tangon)(kiloes);
        kiloes = kiloes.t;
        kiloes = kiloes.+IrDzM;
        kiloes = sizing.bind(output)(kiloes);
        verify['text'] = kiloes;
        verify['onPress'] = backup;
        yankee = foxtra[yankee];
        yankee = romeon.bind(tangon)(yankee);
        yankee = yankee.Colors;
        yankee = yankee.BRAND;
        verify['color'] = yankee;
        verify = zuuluu.bind(tangon)(offset, verify);
        option[2] = verify;
        report['children'] = option;
        report = oscard.bind(tangon)(golfie, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: openBurstReactionFirstSendActionSheet
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            golfie = entity.channelId;
            oscard = entity.messageId;
            report = entity.emoji;
            verify = _closure1_slot1;
            zuuluu = _closure1_slot2;
            tangon = 5;
            option = zuuluu[tangon];
            entity = undefined;
            verify = verify.bind(entity)(option);
            option = verify.hideActionSheet;
            option = option.bind(verify)();
            romeon = _closure1_slot0;
            offset = 14;
            option = zuuluu[offset];
            yankee = romeon.bind(entity)(option);
            option = yankee.isDismissibleContentDismissed;
            verify = 15;
            zuuluu = zuuluu[verify];
            zuuluu = romeon.bind(entity)(zuuluu);
            zuuluu = zuuluu.DismissibleContent;
            zuuluu = zuuluu.SUPER_REACTIONS_FIRST_SENT;
            zuuluu = option.bind(yankee)(zuuluu);
            if(zuuluu) { _fun00002_ip = 239; continue _fun00001 }
 111:
            option = _closure1_slot0;
            zuuluu = _closure1_slot2;
            offset = zuuluu[offset];
            yankee = option.bind(entity)(offset);
            offset = yankee.markDismissibleContentAsDismissed;
            verify = zuuluu[verify];
            verify = option.bind(entity)(verify);
            verify = verify.DismissibleContent;
            verify = verify.SUPER_REACTIONS_FIRST_SENT;
            verify = offset.bind(yankee)(verify);
            verify = _closure1_slot1;
            tangon = zuuluu[tangon];
            offset = verify.bind(entity)(tangon);
            verify = offset.openLazy;
            tangon = 17;
            tangon = zuuluu[tangon];
            option = option.bind(entity)(tangon);
            tangon = 16;
            tangon = zuuluu[tangon];
            zuuluu = zuuluu.paths;
            option = option.bind(entity)(tangon, zuuluu);
            tangon = {};
            tangon['channelId'] = golfie;
            tangon['messageId'] = oscard;
            tangon['emoji'] = report;
            zuuluu = 'BurstReactionFirstSendActionSheet';
            zuuluu = verify.bind(offset)(option, zuuluu, tangon);
            _fun00002_ip = 294; continue _fun00001;
 239:
            zuuluu = _closure1_slot1;
            tangon = _closure1_slot2;
            michal = 18;
            michal = tangon[michal];
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.dispatch;
            michal = {};
            option = 'BURST_REACTION_EFFECT_SEND';
            michal['type'] = option;
            michal['channelId'] = golfie;
            michal['messageId'] = oscard;
            michal['emoji'] = report;
            michal = zuuluu.bind(tangon)(michal);
 294:
            return entity;
        }
    };
    zuuluu['openBurstReactionFirstSendActionSheet'] = michal;
    return entity;
})();