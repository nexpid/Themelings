// app/components_native/premium/GuildBoostingUpsell.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    romeo = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, mike);
    entity = 0;
    report = golf[entity];
    mike = argCorge;
    entity = undefined;
    mike = mike.bind(entity)(report);
    mike = 1;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    yankee = mike.StyleSheet;
    report = mike.View;
    var _closure1_slot3 = report;
    mike = mike.Image;
    var _closure1_slot4 = mike;
    foxtrot = 2;
    mike = golf[foxtrot];
    mike = romeo.bind(entity)(mike);
    var _closure1_slot5 = mike;
    mike = 3;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.FractionalPremiumStates;
    var _closure1_slot6 = mike;
    mike = 4;
    report = golf[mike];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot7 = report;
    mike = golf[mike];
    mike = oscar.bind(entity)(mike);
    mike = mike.jsxs;
    var _closure1_slot8 = mike;
    mike = 5;
    mike = golf[mike];
    options = oscar.bind(entity)(mike);
    report = options.createStyles;
    mike = {};
    kilo = 16;
    offset = 32;
    verify = {'paddingHorizontal': 16, 'paddingVertical': 32};
    mike['root'] = verify;
    verify = {};
    verify['marginTop'] = kilo;
    mike['title'] = verify;
    verify = {};
    verify['marginTop'] = kilo;
    mike['features'] = verify;
    backup = 'center';
    verify = {'lineHeight': 20, 'marginTop': 8, 'textAlign': 'center'};
    mike['cardText'] = verify;
    verify = {};
    verify['marginTop'] = kilo;
    mike['guildList'] = verify;
    kilo = '100%';
    verify = {'resizeMode': 'contain', 'width': '100%', 'height': 34, 'maxWidth': 320, 'marginTop': 16};
    mike['logoPremiumGuild'] = verify;
    verify = {};
    verify['width'] = kilo;
    mike['shortWidthLogoPremiumGuild'] = verify;
    verify = {'width': 95, 'height': 65};
    mike['imgPremiumGuild'] = verify;
    verify = {'width': 178, 'height': 112, 'marginTop': 32};
    mike['imgNoGuilds'] = verify;
    verify = {};
    verify['alignItems'] = backup;
    mike['header'] = verify;
    verify = {'marginTop': 32, 'paddingTop': 16};
    yankee = yankee.hairlineWidth;
    yankee = foxtrot * yankee;
    verify['borderTopWidth'] = yankee;
    yankee = 6;
    yankee = golf[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_MODIFIER_ACCENT;
    verify['borderTopColor'] = yankee;
    mike['upsell'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    mike['subscriptionUpsell'] = verify;
    mike = report.bind(options)(mike);
    var _closure1_slot9 = mike;
    mike = function() { // Original name: FEATURES_PREMIUM_GUILD_USER
        mike = {};
        golf = _closure1_slot1;
        oscar = _closure1_slot2;
        zulu = 7;
        zulu = oscar[zulu];
        report = undefined;
        zulu = golf.bind(report)(zulu);
        mike['icon'] = zulu;
        tango = _closure1_slot0;
        options = 8;
        entity = oscar[options];
        entity = tango.bind(report)(entity);
        verify = entity.intl;
        zulu = verify.string;
        entity = oscar[options];
        entity = tango.bind(report)(entity);
        entity = entity.t;
        entity = entity.GS+bLy;
        entity = zulu.bind(verify)(entity);
        mike['label'] = entity;
        entity = 9;
        entity = oscar[entity];
        entity = tango.bind(report)(entity);
        entity = entity.BoostTier2Icon;
        mike['IconComponent'] = entity;
        zulu = 6;
        entity = oscar[zulu];
        entity = golf.bind(report)(entity);
        entity = entity.unsafe_rawColors;
        entity = entity.GUILD_BOOSTING_PINK;
        mike['color'] = entity;
        entity = new Array(3);
        entity[0] = mike;
        mike = {};
        verify = 10;
        verify = oscar[verify];
        verify = golf.bind(report)(verify);
        mike['icon'] = verify;
        verify = oscar[options];
        verify = tango.bind(report)(verify);
        yankee = verify.intl;
        offset = yankee.string;
        verify = oscar[options];
        verify = tango.bind(report)(verify);
        verify = verify.t;
        verify = verify.a7LWeH;
        verify = offset.bind(yankee)(verify);
        mike['label'] = verify;
        verify = function(argFoo) { // Original name: IconComponent
            tango = _closure1_slot7;
            mike = _closure1_slot0;
            golf = _closure1_slot2;
            entity = 11;
            entity = golf[entity];
            zulu = undefined;
            entity = mike.bind(zulu)(entity);
            mike = entity.BoostTier3Icon;
            entity = {};
            options = argFoo;
            verify = entity;
            oscar = copyDataProperties(verify, options);
            oscar = _closure1_slot1;
            report = 6;
            report = golf[report];
            report = oscar.bind(zulu)(report);
            report = report.unsafe_rawColors;
            oscar = report.GUILD_BOOSTING_PINK;
            report = 'color';
            entity[report] = oscar;
            entity = tango.bind(zulu)(mike, entity);
            return entity;
        };
        mike['IconComponent'] = verify;
        entity[1] = mike;
        mike = {};
        verify = 12;
        verify = oscar[verify];
        verify = golf.bind(report)(verify);
        mike['icon'] = verify;
        verify = oscar[options];
        verify = tango.bind(report)(verify);
        offset = verify.intl;
        verify = offset.string;
        options = oscar[options];
        options = tango.bind(report)(options);
        options = options.t;
        options = options.E76jz8;
        options = verify.bind(offset)(options);
        mike['label'] = options;
        zulu = oscar[zulu];
        zulu = golf.bind(report)(zulu);
        zulu = zulu.unsafe_rawColors;
        zulu = zulu.YELLOW_300;
        mike['color'] = zulu;
        zulu = 13;
        zulu = oscar[zulu];
        zulu = tango.bind(report)(zulu);
        zulu = zulu.ShieldUserIcon;
        mike['IconComponent'] = zulu;
        entity[2] = mike;
        return entity;
    };
    var _closure1_slot10 = mike;
    report = 37;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'components_native/premium/GuildBoostingUpsell.tsx';
    report = oscar.bind(golf)(report);
    tango = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            sizing = entity.onLearnMorePremium;
            echo = entity.fractionalState;
            result = entity.isInReverseTrial;
            mike = entity.hasAvailableSlots;
            entity = _closure1_slot9;
            report = undefined;
            kilo = entity.bind(report)();
            zulu = _closure1_slot0;
            tango = _closure1_slot2;
            entity = 24;
            entity = tango[entity];
            options = zulu.bind(report)(entity);
            golf = options.useStateFromStores;
            entity = _closure1_slot5;
            oscar = new Array(1);
            oscar[0] = entity;
            entity = function() {
                mike = _closure1_slot5;
                entity = mike.getFlattenedGuildIds;
                entity = entity.bind(mike)();
                mike = entity.length;
                entity = 0;
                entity = mike > entity;
                return entity;
            };
            output = golf.bind(options)(oscar, entity);
            entity = 25;
            entity = tango[entity];
            oscar = zulu.bind(report)(entity);
            entity = oscar.useSubscriptionPlansLoaded;
            foxtrot = entity.bind(oscar)();
            entity = 26;
            entity = tango[entity];
            zulu = zulu.bind(report)(entity);
            entity = zulu.useGuildSubscriptionNoGuildsSource;
            vacuum = entity.bind(zulu)();
            zulu = _closure1_slot1;
            entity = 27;
            entity = tango[entity];
            entity = zulu.bind(report)(entity);
            update = entity.bind(report)();
            entity = _closure1_slot6;
            entity = entity.NONE;
            if(!(echo !== entity)) { _fun00002_ip = 181; continue _fun00001 }
 170:
            if(result) { _fun00002_ip = 181; continue _fun00001 }
 173:
            entity = null;
            if(!mike) { _fun00002_ip = 2122; continue _fun00001 }
 181:
            tango = _closure1_slot8;
            zulu = _closure1_slot3;
            mike = {};
            oscar = kilo.root;
            mike['style'] = oscar;
            oscar = {};
            golf = kilo.header;
            oscar['style'] = golf;
            offset = _closure1_slot7;
            verify = _closure1_slot4;
            golf = {};
            options = kilo.imgPremiumGuild;
            golf['style'] = options;
            yankee = _closure1_slot1;
            source = _closure1_slot2;
            options = 28;
            options = source[options];
            options = yankee.bind(report)(options);
            golf['source'] = options;
            options = offset.bind(report)(verify, golf);
            golf = new Array(4);
            golf[0] = options;
            options = {};
            yankee = kilo.logoPremiumGuild;
            options['style'] = yankee;
            backup = _closure1_slot0;
            yankee = 29;
            yankee = source[yankee];
            backup = backup.bind(report)(yankee);
            yankee = backup.isThemeDark;
            yankee = yankee.bind(backup)(update);
            update = _closure1_slot1;
            source = _closure1_slot2;
            if(yankee) { _fun00002_ip = 334; continue _fun00001 }
 320:
            yankee = 31;
            yankee = source[yankee];
            yankee = update.bind(report)(yankee);
            _fun00002_ip = 346; continue _fun00001;
 334:
            backup = 30;
            backup = source[backup];
            yankee = update.bind(report)(backup);
 346:
            options['source'] = yankee;
            options = offset.bind(report)(verify, options);
            golf[1] = options;
            verify = _closure1_slot7;
            config = _closure1_slot0;
            source = _closure1_slot2;
            control = 32;
            options = source[control];
            options = config.bind(report)(options);
            offset = options.Text;
            options = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            yankee = kilo.title;
            options['style'] = yankee;
            record = 8;
            yankee = source[record];
            yankee = config.bind(report)(yankee);
            update = yankee.intl;
            backup = update.string;
            yankee = source[record];
            yankee = config.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.hw6WTU;
            yankee = backup.bind(update)(yankee);
            options['children'] = yankee;
            options = verify.bind(report)(offset, options);
            golf[2] = options;
            options = source[control];
            options = config.bind(report)(options);
            offset = options.Text;
            options = {};
            yankee = kilo.cardText;
            options['style'] = yankee;
            context = 'text-md/medium';
            options['variant'] = context;
            yankee = source[record];
            yankee = config.bind(report)(yankee);
            update = yankee.intl;
            backup = update.string;
            yankee = source[record];
            yankee = config.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee.K5jBdH;
            yankee = backup.bind(update)(yankee);
            options['children'] = yankee;
            options = verify.bind(report)(offset, options);
            golf[3] = options;
            oscar['children'] = golf;
            golf = tango.bind(report)(zulu, oscar);
            oscar = new Array(6);
            oscar[0] = golf;
            golf = source[control];
            golf = config.bind(report)(golf);
            options = golf.Text;
            golf = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            offset = kilo.title;
            golf['style'] = offset;
            offset = source[record];
            offset = config.bind(report)(offset);
            backup = offset.intl;
            yankee = backup.string;
            offset = source[record];
            offset = config.bind(report)(offset);
            offset = offset.t;
            offset = offset.RvfRTE;
            offset = yankee.bind(backup)(offset);
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[1] = golf;
            update = _closure1_slot1;
            golf = 33;
            options = source[golf];
            offset = update.bind(report)(options);
            options = {};
            yankee = kilo.features;
            options['style'] = yankee;
            yankee = _closure1_slot10;
            yankee = yankee.bind(report)();
            options['features'] = yankee;
            options = verify.bind(report)(offset, options);
            oscar[2] = options;
            options = source[control];
            options = config.bind(report)(options);
            offset = options.Text;
            options = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/semibold', 'color': 'header-primary'};
            yankee = kilo.title;
            options['style'] = yankee;
            yankee = source[record];
            yankee = config.bind(report)(yankee);
            sequence = yankee.intl;
            backup = sequence.string;
            yankee = source[record];
            yankee = config.bind(report)(yankee);
            yankee = yankee.t;
            yankee = yankee./pVhjY;
            yankee = backup.bind(sequence)(yankee);
            options['children'] = yankee;
            options = verify.bind(report)(offset, options);
            oscar[3] = options;
            golf = source[golf];
            options = update.bind(report)(golf);
            golf = {};
            offset = kilo.features;
            golf['style'] = offset;
            yankee = {};
            offset = 14;
            offset = source[offset];
            offset = update.bind(report)(offset);
            yankee['icon'] = offset;
            offset = source[record];
            offset = config.bind(report)(offset);
            sequence = offset.intl;
            backup = sequence.string;
            offset = source[record];
            offset = config.bind(report)(offset);
            offset = offset.t;
            offset = offset.Ts7BVF;
            offset = backup.bind(sequence)(offset);
            yankee['label'] = offset;
            offset = 15;
            offset = source[offset];
            offset = config.bind(report)(offset);
            offset = offset.ReactionIcon;
            yankee['IconComponent'] = offset;
            backup = 6;
            offset = source[backup];
            offset = update.bind(report)(offset);
            offset = offset.unsafe_rawColors;
            offset = offset.PREMIUM_PERK_YELLOW;
            yankee['color'] = offset;
            offset = new Array(5);
            offset[0] = yankee;
            yankee = {};
            sequence = 16;
            sequence = source[sequence];
            sequence = update.bind(report)(sequence);
            yankee['icon'] = sequence;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            target = sequence.intl;
            papa = target.string;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            sequence = sequence.t;
            sequence = sequence.QcJbt7;
            sequence = papa.bind(target)(sequence);
            yankee['label'] = sequence;
            sequence = 17;
            sequence = source[sequence];
            sequence = config.bind(report)(sequence);
            sequence = sequence.StickerIcon;
            yankee['IconComponent'] = sequence;
            sequence = source[backup];
            sequence = update.bind(report)(sequence);
            sequence = sequence.unsafe_rawColors;
            sequence = sequence.PREMIUM_PERK_PURPLE;
            yankee['color'] = sequence;
            offset[1] = yankee;
            yankee = {};
            sequence = 18;
            sequence = source[sequence];
            sequence = update.bind(report)(sequence);
            yankee['icon'] = sequence;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            target = sequence.intl;
            papa = target.string;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            sequence = sequence.t;
            sequence = sequence.rFNkf3;
            sequence = papa.bind(target)(sequence);
            yankee['label'] = sequence;
            sequence = '#4173da';
            yankee['color'] = sequence;
            sequence = 19;
            sequence = source[sequence];
            sequence = config.bind(report)(sequence);
            sequence = sequence.HeadphonesIcon;
            yankee['IconComponent'] = sequence;
            offset[2] = yankee;
            yankee = {};
            sequence = 20;
            sequence = source[sequence];
            sequence = update.bind(report)(sequence);
            yankee['icon'] = sequence;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            target = sequence.intl;
            papa = target.string;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            sequence = sequence.t;
            sequence = sequence.BpjjS0;
            sequence = papa.bind(target)(sequence);
            yankee['label'] = sequence;
            sequence = 21;
            sequence = source[sequence];
            sequence = config.bind(report)(sequence);
            sequence = sequence.UploadIcon;
            yankee['IconComponent'] = sequence;
            sequence = source[backup];
            sequence = update.bind(report)(sequence);
            sequence = sequence.unsafe_rawColors;
            sequence = sequence.GUILD_BOOSTING_PINK;
            yankee['color'] = sequence;
            offset[3] = yankee;
            yankee = {};
            sequence = 22;
            sequence = source[sequence];
            sequence = update.bind(report)(sequence);
            yankee['icon'] = sequence;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            target = sequence.intl;
            papa = target.string;
            sequence = source[record];
            sequence = config.bind(report)(sequence);
            sequence = sequence.t;
            sequence = sequence.9g5LgY;
            sequence = papa.bind(target)(sequence);
            yankee['label'] = sequence;
            sequence = 23;
            sequence = source[sequence];
            sequence = config.bind(report)(sequence);
            sequence = sequence.StarIcon;
            yankee['IconComponent'] = sequence;
            backup = source[backup];
            backup = update.bind(report)(backup);
            backup = backup.unsafe_rawColors;
            backup = backup.PREMIUM_PERK_GOLD;
            yankee['color'] = backup;
            offset[4] = yankee;
            golf['features'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[4] = golf;
            verify = _closure1_slot8;
            options = _closure1_slot3;
            golf = {};
            offset = kilo.upsell;
            golf['style'] = offset;
            backup = null;
            if(!foxtrot) { _fun00002_ip = 1505; continue _fun00001 }
 1457:
            offset = _closure1_slot6;
            offset = offset.NONE;
            backup = null;
            if(!(echo === offset)) { _fun00002_ip = 1505; continue _fun00001 }
 1473:
            update = _closure1_slot7;
            echo = _closure1_slot1;
            source = _closure1_slot2;
            offset = 34;
            offset = source[offset];
            echo = echo.bind(report)(offset);
            offset = {};
            backup = update.bind(report)(echo, offset);
 1505:
            offset = new Array(3);
            offset[0] = backup;
            backup = null;
            if(result) { _fun00002_ip = 2038; continue _fun00001 }
 1521:
            echo = _closure1_slot8;
            result = _closure1_slot3;
            update = {};
            sequence = _closure1_slot7;
            if(output) { _fun00002_ip = 1785; continue _fun00001 }
 1541:
            source = _closure1_slot4;
            output = {};
            config = kilo.imgNoGuilds;
            output['style'] = config;
            output['source'] = vacuum;
            source = sequence.bind(report)(source, output);
            output = new Array(3);
            output[0] = source;
            status = _closure1_slot0;
            config = _closure1_slot2;
            source = config[control];
            source = status.bind(report)(source);
            vacuum = source.Text;
            source = {};
            target = kilo.cardText;
            papa = new Array(1);
            papa[0] = target;
            source['style'] = papa;
            papa = 'text-md/bold';
            source['variant'] = papa;
            papa = config[record];
            papa = status.bind(report)(papa);
            sierra = papa.intl;
            target = sierra.string;
            papa = config[record];
            papa = status.bind(report)(papa);
            papa = papa.t;
            papa = papa.FHm4bW;
            papa = target.bind(sierra)(papa);
            source['children'] = papa;
            source = sequence.bind(report)(vacuum, source);
            output[1] = source;
            source = config[control];
            source = status.bind(report)(source);
            vacuum = source.Text;
            source = {};
            papa = kilo.cardText;
            source['style'] = papa;
            source['variant'] = context;
            papa = config[record];
            papa = status.bind(report)(papa);
            target = papa.intl;
            papa = target.string;
            config = config[record];
            config = status.bind(report)(config);
            config = config.t;
            config = config.PSLiio;
            config = papa.bind(target)(config);
            source['children'] = config;
            source = sequence.bind(report)(vacuum, source);
            output[2] = source;
            update['children'] = output;
            output = update;
            _fun00002_ip = 2032; continue _fun00001;
 1785:
            target = _closure1_slot0;
            config = _closure1_slot2;
            source = config[control];
            source = target.bind(report)(source);
            vacuum = source.Text;
            source = {};
            papa = kilo.cardText;
            source['style'] = papa;
            source['variant'] = context;
            context = config[record];
            context = target.bind(report)(context);
            status = context.intl;
            papa = status.string;
            context = config[record];
            context = target.bind(report)(context);
            context = context.t;
            context = context.WRzob2;
            context = papa.bind(status)(context);
            source['children'] = context;
            vacuum = sequence.bind(report)(vacuum, source);
            source = new Array(3);
            source[0] = vacuum;
            control = config[control];
            control = target.bind(report)(control);
            vacuum = control.Text;
            control = {};
            papa = kilo.cardText;
            context = new Array(1);
            context[0] = papa;
            control['style'] = context;
            context = 'text-md/bold';
            control['variant'] = context;
            context = config[record];
            context = target.bind(report)(context);
            papa = context.intl;
            context = papa.string;
            record = config[record];
            record = target.bind(report)(record);
            record = record.t;
            record = record.j4bXcn;
            record = context.bind(papa)(record);
            control['children'] = record;
            control = sequence.bind(report)(vacuum, control);
            source[1] = control;
            vacuum = _closure1_slot1;
            control = 35;
            control = config[control];
            vacuum = vacuum.bind(report)(control);
            control = {};
            config = kilo.guildList;
            control['style'] = config;
            control = sequence.bind(report)(vacuum, control);
            source[2] = control;
            update['children'] = source;
            output = update;
 2032:
            backup = echo.bind(report)(result, output);
 2038:
            offset[1] = backup;
            yankee = null;
            if(!foxtrot) { _fun00002_ip = 2094; continue _fun00001 }
 2047:
            backup = _closure1_slot7;
            foxtrot = _closure1_slot1;
            output = _closure1_slot2;
            romeo = 36;
            romeo = output[romeo];
            foxtrot = foxtrot.bind(report)(romeo);
            romeo = {};
            romeo['onLearnMorePremium'] = sizing;
            kilo = kilo.subscriptionUpsell;
            romeo['style'] = kilo;
            yankee = backup.bind(report)(foxtrot, romeo);
 2094:
            offset[2] = yankee;
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[5] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 2122:
            return entity;
        }
    };
    zulu['default'] = tango;
    zulu['FEATURES_PREMIUM_GUILD_USER'] = mike;
    return entity;
})();