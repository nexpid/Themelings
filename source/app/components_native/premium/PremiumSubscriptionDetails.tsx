// app/components_native/premium/PremiumSubscriptionDetails.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    verify = argBar;
    echoed = argBaz;
    zuuluu = argFre;
    offset = argPlu;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = echoed;
    var _closure1_slot2 = offset;
    entity = function(argFoo, argBar) { // Original name: getHeaderBackground
        michal = _closure1_slot19;
        entity = argFoo;
        michal = michal[entity];
        entity = argBar;
        entity = michal[entity];
        return entity;
    };
    var _closure1_slot25 = entity;
    entity = function(argFoo, argBar) { // Original name: getPremiumImage
        michal = _closure1_slot20;
        entity = argFoo;
        michal = michal[entity];
        entity = argBar;
        entity = michal[entity];
        return entity;
    };
    var _closure1_slot26 = entity;
    entity = function(argFoo, argBar) { // Original name: getPremiumImageStyle
        michal = _closure1_slot21;
        entity = argFoo;
        michal = michal[entity];
        entity = argBar;
        entity = michal[entity];
        return entity;
    };
    var _closure1_slot27 = entity;
    entity = function(argFoo, argBar) { // Original name: getLogo
        michal = _closure1_slot22;
        entity = argFoo;
        michal = michal[entity];
        entity = argBar;
        entity = michal[entity];
        return entity;
    };
    var _closure1_slot28 = entity;
    entity = function(argFoo) { // Original name: getLogoStyle
        michal = _closure1_slot23;
        entity = argFoo;
        entity = michal[entity];
        return entity;
    };
    var _closure1_slot29 = entity;
    entity = function(argFoo) { // Original name: getPlanDescriptionStyle
        michal = _closure1_slot24;
        entity = argFoo;
        entity = michal[entity];
        return entity;
    };
    var _closure1_slot30 = entity;
    entity = function(argFoo, argBar, argBaz) { // Original name: handleCancelSubscription
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = 43;
            tangon = offset[golfie];
            entity = undefined;
            oscard = verify.bind(entity)(tangon);
            report = oscard.trackPremiumSubscriptionCancellationFlowStep;
            tangon = {};
            tangon['subscription'] = zuuluu;
            option = argBar;
            tangon['analyticsLocations'] = option;
            option = argBaz;
            tangon['fromStep'] = option;
            option = offset[golfie];
            option = verify.bind(entity)(option);
            option = option.STEP_ANALYTICS_NAMES;
            golfie = offset[golfie];
            golfie = verify.bind(entity)(golfie);
            golfie = golfie.CancellationFlowSteps;
            golfie = golfie.MOBILE_SUBSCRIPTION_MANAGE;
            golfie = option[golfie];
            tangon['toStep'] = golfie;
            tangon = report.bind(oscard)(tangon);
            tangon = null;
            if(!(tangon != zuuluu)) { _fun00002_ip = 122; continue _fun00001 }
 113:
            report = zuuluu.isPurchasedViaApple;
            if(report) { _fun00002_ip = 197; continue _fun00001 }
 122:
            tangon = tangon != zuuluu;
            if(!tangon) { _fun00002_ip = 135; continue _fun00001 }
 129:
            tangon = zuuluu.isPurchasedViaGoogle;
 135:
            if(!tangon) { _fun00002_ip = 216; continue _fun00001 }
 138:
            report = _closure1_slot6;
            tangon = report.openURL;
            golfie = _closure1_slot0;
            option = _closure1_slot2;
            oscard = 10;
            oscard = option[oscard];
            option = golfie.bind(entity)(oscard);
            golfie = option.getExternalSubscriptionMethodUrl;
            oscard = zuuluu.paymentGateway;
            zuuluu = 'SUBSCRIPTION_MANAGEMENT';
            zuuluu = golfie.bind(option)(oscard, zuuluu);
            zuuluu = tangon.bind(report)(zuuluu);
            _fun00002_ip = 216; continue _fun00001;
 197:
            tangon = _closure1_slot6;
            zuuluu = tangon.openURL;
            michal = _closure1_slot12;
            michal = zuuluu.bind(tangon)(michal);
 216:
            return entity;
        }
    };
    var _closure1_slot31 = entity;
    oscard = function(argFoo, argBar) { // Original name: onCancelClick
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            report = argFoo;
            tangon = argBar;
            var _closure2_slot0 = report;
            var _closure2_slot1 = tangon;
            oscard = _closure1_slot0;
            option = _closure1_slot2;
            entity = 43;
            entity = option[entity];
            michal = undefined;
            oscard = oscard.bind(michal)(entity);
            entity = oscard.trackPremiumSubscriptionCancellationStarted;
            entity = entity.bind(oscard)(report, tangon);
            oscard = _closure1_slot1;
            entity = 10;
            entity = option[entity];
            oscard = oscard.bind(michal)(entity);
            entity = oscard.isBoostOnlySubscription;
            entity = entity.bind(oscard)(report);
            if(entity) { _fun00004_ip = 161; continue _fun00003 }
 83:
            oscard = _closure1_slot1;
            offset = _closure1_slot2;
            entity = 44;
            entity = offset[entity];
            oscard = oscard.bind(michal)(entity);
            entity = {};
            entity['subscription'] = report;
            verify = _closure1_slot0;
            option = 45;
            option = offset[option];
            option = verify.bind(michal)(option);
            option = option.WhatYouLoseMode;
            option = option.CANCEL;
            entity['mode'] = option;
            golfie = function(argFoo) { // Original name: onContinue
                report = _closure1_slot31;
                tangon = _closure2_slot0;
                zuuluu = _closure2_slot1;
                entity = undefined;
                michal = argFoo;
                michal = report.bind(entity)(tangon, zuuluu, michal);
                return entity;
            };
            entity['onContinue'] = golfie;
            entity = oscard.bind(michal)(entity);
            _fun00004_ip = 173; continue _fun00003;
 161:
            zuuluu = _closure1_slot31;
            zuuluu = zuuluu.bind(michal)(report, tangon);
            entity = undefined;
 173:
            return entity;
        }
    };
    var _closure1_slot32 = oscard;
    report = function(argFoo, argBar, argBaz) { // Original name: handleManageSubscription
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            zuuluu = entity.status;
            michal = _closure1_slot13;
            michal = michal.ACCOUNT_HOLD;
            if(!(zuuluu !== michal)) { _fun00006_ip = 114; continue _fun00005 }
 25:
            report = _closure1_slot0;
            zuuluu = _closure1_slot2;
            michal = 46;
            zuuluu = zuuluu[michal];
            michal = undefined;
            report = report.bind(michal)(zuuluu);
            zuuluu = report.launchPremiumPlanSelect;
            michal = {};
            oscard = argBar;
            michal['navigation'] = oscard;
            oscard = {};
            golfie = _closure1_slot10;
            golfie = golfie.USER_SETTINGS;
            oscard['page'] = golfie;
            golfie = _closure1_slot11;
            golfie = golfie.SETTINGS_PREMIUM;
            oscard['section'] = golfie;
            michal['analyticsLocation'] = oscard;
            oscard = argBaz;
            michal['analyticsLocations'] = oscard;
            michal = zuuluu.bind(report)(michal);
            _fun00006_ip = 173; continue _fun00005;
 114:
            zuuluu = _closure1_slot6;
            michal = zuuluu.openURL;
            oscard = _closure1_slot0;
            report = _closure1_slot2;
            tangon = 10;
            report = report[tangon];
            tangon = undefined;
            oscard = oscard.bind(tangon)(report);
            report = oscard.getExternalSubscriptionMethodUrl;
            tangon = entity.paymentGateway;
            entity = 'PAYMENT_SOURCE_MANAGEMENT';
            entity = report.bind(oscard)(tangon, entity);
            entity = michal.bind(zuuluu)(entity);
 173:
            entity = undefined;
            return entity;
        }
    };
    var _closure1_slot33 = report;
    tangon = function(argFoo) { // Original name: onResubscribeClick
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            michal = entity.isPurchasedViaApple;
            if(michal) { _fun00008_ip = 85; continue _fun00007 }
 12:
            michal = entity.isPurchasedViaGoogle;
            if(!michal) { _fun00008_ip = 107; continue _fun00007 }
 21:
            zuuluu = _closure1_slot6;
            michal = zuuluu.openURL;
            oscard = _closure1_slot0;
            report = _closure1_slot2;
            tangon = 10;
            report = report[tangon];
            tangon = undefined;
            oscard = oscard.bind(tangon)(report);
            report = oscard.getExternalSubscriptionMethodUrl;
            tangon = entity.paymentGateway;
            entity = 'SUBSCRIPTION_MANAGEMENT';
            entity = report.bind(oscard)(tangon, entity);
            entity = michal.bind(zuuluu)(entity);
            _fun00008_ip = 107; continue _fun00007;
 85:
            zuuluu = _closure1_slot6;
            michal = zuuluu.openURL;
            entity = _closure1_slot12;
            entity = michal.bind(zuuluu)(entity);
 107:
            entity = undefined;
            return entity;
        }
    };
    var _closure1_slot34 = tangon;
    michal = function(argFoo) { // Original name: PremiumSubscriptionHeader
        _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
            entity = argFoo;
            update = entity.subscription;
            var _closure2_slot0 = update;
            option = entity.renewalInvoicePreview;
            config = entity.onClickManagePremiumGuild;
            oscard = entity.style;
            entity = _closure1_slot17;
            tangon = undefined;
            result = entity.bind(tangon)();
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            zuuluu = 47;
            zuuluu = entity[zuuluu];
            report = michal.bind(tangon)(zuuluu);
            zuuluu = report.useNavigation;
            zuuluu = zuuluu.bind(report)();
            var _closure2_slot1 = zuuluu;
            zuuluu = 48;
            report = entity[zuuluu];
            offset = michal.bind(tangon)(report);
            verify = offset.useStateFromStores;
            report = _closure1_slot8;
            golfie = new Array(1);
            golfie[0] = report;
            report = function() {
                zuuluu = _closure1_slot8;
                entity = zuuluu.getCurrentUser;
                entity = entity.bind(zuuluu)();
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                michal = 49;
                michal = tangon[michal];
                report = undefined;
                tangon = zuuluu.bind(report)(michal);
                michal = null;
                zuuluu = michal != entity;
                michal = 'PremiumSubscriptionHeader: currentUser cannot be undefined';
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            verify = verify.bind(offset)(golfie, report);
            zuuluu = entity[zuuluu];
            offset = michal.bind(tangon)(zuuluu);
            golfie = offset.useStateFromStores;
            zuuluu = _closure1_slot9;
            report = new Array(1);
            report[0] = zuuluu;
            zuuluu = function() {
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    michal = _closure2_slot0;
                    michal = michal.isOnPlatformMatchingExternalPaymentGateway;
                    zuuluu = null;
                    if(michal) { _fun00012_ip = 20; continue _fun00011 }
 18:
                    return zuuluu;
 20:
                    michal = _closure2_slot0;
                    michal = michal.paymentGatewayPlanId;
                    if(!(zuuluu != michal)) { _fun00012_ip = 82; continue _fun00011 }
 34:
                    michal = _closure2_slot0;
                    zuuluu = michal.paymentGatewayPlanId;
                    michal = '';
                    if(!(michal !== zuuluu)) { _fun00012_ip = 82; continue _fun00011 }
 52:
                    zuuluu = _closure1_slot9;
                    michal = zuuluu.getProduct;
                    entity = _closure2_slot0;
                    entity = entity.paymentGatewayPlanId;
                    entity = michal.bind(zuuluu)(entity);
                    return entity;
 82:
                    entity = global;
                    zuuluu = entity.Error;
                    entity = zuuluu.prototype;
                    michal = Object.create(entity, {constructor: {value: zuuluu}});
                    tangon = 'Subscription missing plan ID';
                    report = michal;
                    entity = new report[zuuluu](tangon, zuuluu);
                    entity = entity instanceof Object ? entity : michal;
                    throw entity;
                }
            };
            offset = golfie.bind(offset)(report, zuuluu);
            report = _closure1_slot1;
            source = 10;
            zuuluu = entity[source];
            golfie = report.bind(tangon)(zuuluu);
            zuuluu = golfie.getPlanIdFromInvoice;
            romeon = zuuluu.bind(golfie)(update, option);
            zuuluu = entity[source];
            golfie = michal.bind(tangon)(zuuluu);
            zuuluu = golfie.getPremiumBranding;
            cntext = zuuluu.bind(golfie)(update);
            zuuluu = 50;
            zuuluu = entity[zuuluu];
            zuuluu = report.bind(tangon)(zuuluu);
            zuuluu = zuuluu.bind(tangon)();
            zuuluu = zuuluu.analyticsLocations;
            var _closure2_slot2 = zuuluu;
            entity = entity[source];
            entity = michal.bind(tangon)(entity);
            entity = entity.Branding;
            entity = entity.PREMIUM_GUILD;
            if(!(cntext !== entity)) { _fun00010_ip = 433; continue _fun00009 }
 262:
            zuuluu = _closure1_slot1;
            entity = _closure1_slot2;
            michal = entity[source];
            report = zuuluu.bind(tangon)(michal);
            michal = report.getStatusFromInvoice;
            michal = michal.bind(report)(update, option);
            report = _closure1_slot14;
            yankee = report[romeon];
            report = 49;
            report = entity[report];
            kiloes = zuuluu.bind(tangon)(report);
            golfie = null;
            foxtra = golfie != yankee;
            report = 'missing subscription planInfo';
            report = kiloes.bind(tangon)(foxtra, report);
            entity = entity[source];
            report = zuuluu.bind(tangon)(entity);
            zuuluu = report.getPlanDescription;
            entity = {};
            entity['subscription'] = update;
            entity['planId'] = romeon;
            romeon = golfie != offset;
            if(!romeon) { _fun00010_ip = 414; continue _fun00009 }
 363:
            foxtra = _closure1_slot0;
            kiloes = _closure1_slot2;
            romeon = 51;
            romeon = kiloes[romeon];
            sizing = foxtra.bind(tangon)(romeon);
            kiloes = sizing.formatRate;
            foxtra = offset.priceString;
            romeon = yankee.interval;
            yankee = yankee.intervalCount;
            golfie = kiloes.bind(sizing)(foxtra, romeon, yankee);
 414:
            entity['price'] = golfie;
            golfie = true;
            entity['includePremiumGuilds'] = golfie;
            foxtra = zuuluu.bind(report)(entity);
            _fun00010_ip = 522; continue _fun00009;
 433:
            report = _closure1_slot0;
            entity = _closure1_slot2;
            zuuluu = entity[source];
            golfie = report.bind(tangon)(zuuluu);
            zuuluu = golfie.getCoercedPremiumGuildSubscriptionStatus;
            zuuluu = zuuluu.bind(golfie)(update);
            entity = entity[source];
            golfie = report.bind(tangon)(entity);
            report = golfie.getPremiumGuildHeaderDescription;
            entity = {};
            entity['subscription'] = update;
            entity['user'] = verify;
            verify = null;
            yankee = verify == offset;
            verify = undefined;
            if(yankee) { _fun00010_ip = 504; continue _fun00009 }
 498:
            verify = offset.priceString;
 504:
            entity['price'] = verify;
            entity['renewalInvoicePreview'] = option;
            foxtra = report.bind(golfie)(entity);
            michal = zuuluu;
 522:
            entity = _closure1_slot13;
            entity = entity.CANCELED;
            romeon = michal === entity;
            entity = _closure1_slot13;
            entity = entity.ACTIVE;
            if(!(michal !== entity)) { _fun00010_ip = 573; continue _fun00009 }
 550:
            entity = _closure1_slot18;
            if(romeon) { _fun00010_ip = 565; continue _fun00009 }
 557:
            ctrled = entity.ERROR;
            _fun00010_ip = 571; continue _fun00009;
 565:
            ctrled = entity.RESUB;
 571:
            _fun00010_ip = 583; continue _fun00009;
 573:
            entity = _closure1_slot18;
            ctrled = entity.ACTIVE;
 583:
            entity = romeon;
            if(entity) { _fun00010_ip = 598; continue _fun00009 }
 589:
            michal = update.isOnPlatformMatchingExternalPaymentGateway;
            entity = !michal;
 598:
            echoed = !entity;
            if(entity) { _fun00010_ip = 654; continue _fun00009 }
 604:
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 52;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = michal.isAndroid;
            entity = entity.bind(michal)();
            entity = !entity;
            if(entity) { _fun00010_ip = 651; continue _fun00009 }
 639:
            zuuluu = update.renewalMutations;
            michal = null;
            entity = michal == zuuluu;
 651:
            echoed = entity;
 654:
            kiloes = !romeon;
            if(romeon) { _fun00010_ip = 666; continue _fun00009 }
 660:
            kiloes = update.isOnPlatformMatchingExternalPaymentGateway;
 666:
            zuuluu = _closure1_slot15;
            michal = _closure1_slot7;
            entity = {};
            golfie = result.container;
            report = new Array(2);
            report[0] = golfie;
            report[1] = oscard;
            entity['style'] = report;
            golfie = _closure1_slot16;
            oscard = _closure1_slot5;
            report = {};
            option = _closure1_slot25;
            option = option.bind(tangon)(cntext, ctrled);
            report['source'] = option;
            option = result.header;
            report['style'] = option;
            offset = _closure1_slot16;
            verify = _closure1_slot7;
            option = {};
            yankee = result.logoContainer;
            option['style'] = yankee;
            vacuum = _closure1_slot15;
            sizing = _closure1_slot4;
            yankee = {};
            sequen = _closure1_slot26;
            sequen = sequen.bind(tangon)(cntext, ctrled);
            yankee['source'] = sequen;
            sequen = _closure1_slot27;
            record = sequen.bind(tangon)(cntext, ctrled);
            sequen = new Array(2);
            sequen[0] = record;
            record = result.wumpusImg;
            sequen[1] = record;
            yankee['style'] = sequen;
            sizing = vacuum.bind(tangon)(sizing, yankee);
            yankee = new Array(2);
            yankee[0] = sizing;
            sequen = _closure1_slot15;
            vacuum = _closure1_slot4;
            sizing = {};
            record = _closure1_slot28;
            record = record.bind(tangon)(cntext, ctrled);
            sizing['source'] = record;
            record = _closure1_slot29;
            record = record.bind(tangon)(cntext);
            sizing['style'] = record;
            sizing = sequen.bind(tangon)(vacuum, sizing);
            yankee[1] = sizing;
            option['children'] = yankee;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(3);
            option[0] = verify;
            yankee = _closure1_slot15;
            offset = _closure1_slot0;
            sizing = _closure1_slot2;
            verify = 53;
            verify = sizing[verify];
            verify = offset.bind(tangon)(verify);
            offset = verify.LegacyText;
            verify = {};
            sizing = _closure1_slot30;
            sizing = sizing.bind(tangon)(ctrled);
            verify['style'] = sizing;
            verify['children'] = foxtra;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            yankee = _closure1_slot16;
            offset = _closure1_slot7;
            verify = {};
            foxtra = result.buttonContainer;
            verify['style'] = foxtra;
            foxtra = null;
            sizing = null;
            if(!romeon) { _fun00010_ip = 1144; continue _fun00009 }
 974:
            romeon = foxtra != update;
            sizing = null;
            if(!romeon) { _fun00010_ip = 1144; continue _fun00009 }
 986:
            romeon = update.isOnPlatformMatchingExternalPaymentGateway;
            sizing = null;
            if(!romeon) { _fun00010_ip = 1144; continue _fun00009 }
 1000:
            vacuum = _closure1_slot15;
            record = _closure1_slot1;
            target = _closure1_slot2;
            sequen = 54;
            romeon = target[sequen];
            ctrled = record.bind(tangon)(romeon);
            romeon = {};
            cntext = result.button;
            romeon['style'] = cntext;
            cntext = function() { // Original name: onPress
                zuuluu = _closure1_slot34;
                michal = _closure2_slot0;
                entity = undefined;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            romeon['onPress'] = cntext;
            sequen = target[sequen];
            sequen = record.bind(tangon)(sequen);
            sequen = sequen.Colors;
            sequen = sequen.PRIMARY;
            romeon['color'] = sequen;
            papara = _closure1_slot0;
            sequen = 55;
            record = target[sequen];
            record = papara.bind(tangon)(record);
            cntext = record.intl;
            record = cntext.string;
            sequen = target[sequen];
            sequen = papara.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.lTCb0d;
            sequen = record.bind(cntext)(sequen);
            romeon['text'] = sequen;
            sequen = result.buttonText;
            romeon['textStyle'] = sequen;
            sizing = vacuum.bind(tangon)(ctrled, romeon);
 1144:
            romeon = new Array(4);
            romeon[0] = sizing;
            sizing = null;
            if(!echoed) { _fun00010_ip = 1421; continue _fun00009 }
 1160:
            vacuum = _closure1_slot15;
            record = _closure1_slot1;
            sequen = _closure1_slot2;
            cntext = 54;
            echoed = sequen[cntext];
            ctrled = record.bind(tangon)(echoed);
            echoed = {};
            papara = function() { // Original name: onPress
                report = _closure1_slot33;
                tangon = _closure2_slot0;
                zuuluu = _closure2_slot1;
                michal = _closure2_slot2;
                entity = undefined;
                michal = report.bind(entity)(tangon, zuuluu, michal);
                return entity;
            };
            echoed['onPress'] = papara;
            sequen = sequen[cntext];
            sequen = record.bind(tangon)(sequen);
            sequen = sequen.Colors;
            sequen = sequen.PRIMARY;
            echoed['color'] = sequen;
            record = update.status;
            sequen = _closure1_slot13;
            sequen = sequen.ACCOUNT_HOLD;
            if(!(record !== sequen)) { _fun00010_ip = 1300; continue _fun00009 }
 1241:
            target = _closure1_slot0;
            status = _closure1_slot2;
            sequen = 55;
            record = status[sequen];
            record = target.bind(tangon)(record);
            papara = record.intl;
            record = papara.string;
            sequen = status[sequen];
            sequen = target.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.gmVtgI;
            sequen = record.bind(papara)(sequen);
            _fun00010_ip = 1357; continue _fun00009;
 1300:
            status = _closure1_slot0;
            sierra = _closure1_slot2;
            record = 55;
            papara = sierra[record];
            papara = status.bind(tangon)(papara);
            target = papara.intl;
            papara = target.string;
            record = sierra[record];
            record = status.bind(tangon)(record);
            record = record.t;
            record = record.SgX7RU;
            sequen = papara.bind(target)(record);
 1357:
            echoed['text'] = sequen;
            sequen = result.button;
            echoed['style'] = sequen;
            record = _closure1_slot1;
            sequen = _closure1_slot2;
            sequen = sequen[cntext];
            sequen = record.bind(tangon)(sequen);
            sequen = sequen.Sizes;
            sequen = sequen.XSMALL;
            echoed['size'] = sequen;
            sequen = result.buttonText;
            echoed['textStyle'] = sequen;
            sizing = vacuum.bind(tangon)(ctrled, echoed);
 1421:
            romeon[1] = sizing;
            echoed = _closure1_slot0;
            sizing = _closure1_slot2;
            sizing = sizing[source];
            echoed = echoed.bind(tangon)(sizing);
            sizing = echoed.subscriptionHasPremiumGuildPlan;
            echoed = sizing.bind(echoed)(update);
            sizing = null;
            if(!echoed) { _fun00010_ip = 1637; continue _fun00009 }
 1461:
            echoed = foxtra != config;
            sizing = null;
            if(!echoed) { _fun00010_ip = 1637; continue _fun00009 }
 1473:
            source = _closure1_slot15;
            vacuum = _closure1_slot1;
            sequen = _closure1_slot2;
            ctrled = 54;
            echoed = sequen[ctrled];
            update = vacuum.bind(tangon)(echoed);
            echoed = {};
            echoed['onPress'] = config;
            config = sequen[ctrled];
            config = vacuum.bind(tangon)(config);
            config = config.Colors;
            config = config.PRIMARY;
            echoed['color'] = config;
            papara = _closure1_slot0;
            config = 55;
            record = sequen[config];
            record = papara.bind(tangon)(record);
            cntext = record.intl;
            record = cntext.string;
            config = sequen[config];
            config = papara.bind(tangon)(config);
            config = config.t;
            config = config.gIVkjo;
            config = record.bind(cntext)(config);
            echoed['text'] = config;
            config = result.button;
            echoed['style'] = config;
            ctrled = sequen[ctrled];
            ctrled = vacuum.bind(tangon)(ctrled);
            ctrled = ctrled.Sizes;
            ctrled = ctrled.XSMALL;
            echoed['size'] = ctrled;
            ctrled = result.buttonText;
            echoed['textStyle'] = ctrled;
            sizing = source.bind(tangon)(update, echoed);
 1637:
            romeon[2] = sizing;
            foxtra = null;
            if(!kiloes) { _fun00010_ip = 1767; continue _fun00009 }
 1646:
            sizing = _closure1_slot15;
            update = _closure1_slot0;
            source = _closure1_slot2;
            backup = 56;
            backup = source[backup];
            backup = update.bind(tangon)(backup);
            kiloes = backup.Text;
            backup = {'accessibilityRole': 'link', 'style': null, 'onPress': null, 'variant': 'text-sm/medium', 'color': 'always-white'};
            result = result.cancelLink;
            backup['style'] = result;
            output = function() { // Original name: onPress
                tangon = _closure1_slot32;
                zuuluu = _closure2_slot0;
                michal = _closure2_slot2;
                entity = undefined;
                entity = tangon.bind(entity)(zuuluu, michal);
                return entity;
            };
            backup['onPress'] = output;
            output = 55;
            result = source[output];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = source[output];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.ETE/oK;
            output = result.bind(echoed)(output);
            backup['children'] = output;
            foxtra = sizing.bind(tangon)(kiloes, backup);
 1767:
            romeon[3] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot35 = michal;
    entity = global;
    romeon = entity.Object;
    yankee = romeon.defineProperty;
    option = {};
    entity = true;
    option['value'] = entity;
    entity = '__esModule';
    entity = yankee.bind(romeon)(zuuluu, entity, option);
    entity = 0;
    option = offset[entity];
    entity = undefined;
    option = echoed.bind(entity)(option);
    var _closure1_slot3 = option;
    option = 1;
    yankee = offset[option];
    option = argCor;
    option = option.bind(entity)(yankee);
    option = 2;
    option = offset[option];
    option = verify.bind(entity)(option);
    yankee = option.Image;
    var _closure1_slot4 = yankee;
    yankee = option.ImageBackground;
    var _closure1_slot5 = yankee;
    yankee = option.Linking;
    var _closure1_slot6 = yankee;
    option = option.View;
    var _closure1_slot7 = option;
    option = 3;
    option = offset[option];
    option = echoed.bind(entity)(option);
    var _closure1_slot8 = option;
    option = 4;
    option = offset[option];
    option = echoed.bind(entity)(option);
    var _closure1_slot9 = option;
    option = 5;
    option = offset[option];
    option = verify.bind(entity)(option);
    yankee = option.AnalyticsPages;
    var _closure1_slot10 = yankee;
    yankee = option.AnalyticsSections;
    var _closure1_slot11 = yankee;
    yankee = option.MANAGE_SUBSCRIPTION_LINK;
    var _closure1_slot12 = yankee;
    yankee = option.SubscriptionStatusTypes;
    var _closure1_slot13 = yankee;
    config = option.USER_SETTINGS_CONTAINER_HORIZONTAL_PADDING;
    option = 6;
    option = offset[option];
    option = verify.bind(entity)(option);
    option = option.SubscriptionPlanInfo;
    var _closure1_slot14 = option;
    option = 7;
    yankee = offset[option];
    yankee = verify.bind(entity)(yankee);
    yankee = yankee.jsx;
    var _closure1_slot15 = yankee;
    option = offset[option];
    option = verify.bind(entity)(option);
    option = option.jsxs;
    var _closure1_slot16 = option;
    foxtra = {};
    output = 37;
    option = {'height': 37, 'width': 49};
    foxtra['imageTier2'] = option;
    update = 35;
    option = {'height': 35, 'width': 49};
    foxtra['imageTier1'] = option;
    vacuum = 29;
    option = {'height': 35, 'width': 29};
    foxtra['imageTier0'] = option;
    option = {'height': 35, 'width': 49};
    foxtra['imageBundle'] = option;
    result = 36;
    option = {'height': 36, 'width': 51};
    foxtra['imagePremiumNonActive'] = option;
    option = {'width': 51, 'height': 36};
    foxtra['imagePremiumGuild'] = option;
    option = {'width': 51, 'height': 36};
    foxtra['imagePremiumGuildNonActive'] = option;
    source = 33;
    option = {'height': 33, 'width': 205};
    foxtra['logoPremiumBundle'] = option;
    ctrled = 32;
    option = {'height': 32, 'width': 59};
    foxtra['logoPremiumTier0'] = option;
    cntext = 16;
    option = {'height': 16, 'width': 156};
    foxtra['logoPremiumTier1'] = option;
    option = {'height': 32, 'width': 78};
    foxtra['logoPremiumTier2'] = option;
    sequen = 17;
    option = {'height': 17, 'width': 184};
    foxtra['logoPremiumGuild'] = option;
    yankee = {};
    option = {'fontSize': 14, 'marginTop': 10};
    papara = 14;
    backup = 10;
    record = 8;
    romeon = offset[record];
    romeon = echoed.bind(entity)(romeon);
    romeon = romeon.unsafe_rawColors;
    romeon = romeon.WHITE_500;
    option['color'] = romeon;
    yankee['price'] = option;
    option = {'fontSize': 14, 'marginTop': 10};
    romeon = offset[record];
    romeon = echoed.bind(entity)(romeon);
    romeon = romeon.unsafe_rawColors;
    romeon = romeon.BLACK_500;
    option['color'] = romeon;
    yankee['priceDark'] = option;
    option = 9;
    option = offset[option];
    kiloes = verify.bind(entity)(option);
    romeon = kiloes.createStyles;
    option = {};
    sizing = {};
    sizing['paddingHorizontal'] = config;
    option['title'] = sizing;
    sizing = {};
    sizing['padding'] = cntext;
    option['header'] = sizing;
    sizing = {};
    sizing['marginRight'] = backup;
    option['wumpusImg'] = sizing;
    sizing = {'flexDirection': 'row', 'alignItems': 'center'};
    option['logoContainer'] = sizing;
    sizing = {'marginTop': 8, 'overflow': 'hidden'};
    target = offset[record];
    target = echoed.bind(entity)(target);
    target = target.colors;
    target = target.BACKGROUND_TERTIARY;
    sizing['backgroundColor'] = target;
    option['container'] = sizing;
    sizing = {'marginTop': 8, 'flexDirection': 'row'};
    option['buttonContainer'] = sizing;
    sizing = {'alignSelf': 'flex-start', 'flexGrow': 0, 'flexShrink': 0, 'paddingHorizontal': 16, 'marginRight': 8};
    target = offset[record];
    target = echoed.bind(entity)(target);
    target = target.colors;
    target = target.WHITE;
    sizing['backgroundColor'] = target;
    option['button'] = sizing;
    sizing = {};
    target = offset[record];
    target = echoed.bind(entity)(target);
    target = target.colors;
    target = target.REDESIGN_BUTTON_PRIMARY_BACKGROUND;
    sizing['color'] = target;
    option['buttonText'] = sizing;
    sizing = {'alignSelf': 'flex-start', 'flexGrow': 0, 'flexShrink': 0, 'marginLeft': 16, 'marginTop': 2};
    option['cancelLink'] = sizing;
    sizing = {};
    sizing['marginTop'] = record;
    sizing['paddingHorizontal'] = config;
    option['desktopSubtext'] = sizing;
    option = romeon.bind(kiloes)(option);
    var _closure1_slot17 = option;
    romeon = {};
    option = 'active';
    romeon['ACTIVE'] = option;
    option = 'resub';
    romeon['RESUB'] = option;
    option = 'error';
    romeon['ERROR'] = option;
    var _closure1_slot18 = romeon;
    option = {};
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.BUNDLE;
    kiloes = {};
    record = romeon.ACTIVE;
    config = 11;
    config = offset[config];
    config = echoed.bind(entity)(config);
    kiloes[record] = config;
    target = romeon.ERROR;
    record = 12;
    config = offset[record];
    config = echoed.bind(entity)(config);
    kiloes[target] = config;
    status = romeon.RESUB;
    config = 13;
    target = offset[config];
    target = echoed.bind(entity)(target);
    kiloes[status] = target;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_0;
    kiloes = {};
    target = romeon.ACTIVE;
    papara = offset[papara];
    papara = echoed.bind(entity)(papara);
    kiloes[target] = papara;
    target = romeon.ERROR;
    papara = offset[record];
    papara = echoed.bind(entity)(papara);
    kiloes[target] = papara;
    target = romeon.RESUB;
    papara = offset[config];
    papara = echoed.bind(entity)(papara);
    kiloes[target] = papara;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_1;
    kiloes = {};
    target = romeon.ACTIVE;
    papara = 15;
    papara = offset[papara];
    papara = echoed.bind(entity)(papara);
    kiloes[target] = papara;
    target = romeon.ERROR;
    papara = offset[record];
    papara = echoed.bind(entity)(papara);
    kiloes[target] = papara;
    target = romeon.RESUB;
    papara = offset[config];
    papara = echoed.bind(entity)(papara);
    kiloes[target] = papara;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_2;
    kiloes = {};
    papara = romeon.ACTIVE;
    cntext = offset[cntext];
    cntext = echoed.bind(entity)(cntext);
    kiloes[papara] = cntext;
    cntext = romeon.ERROR;
    record = offset[record];
    record = echoed.bind(entity)(record);
    kiloes[cntext] = record;
    record = romeon.RESUB;
    config = offset[config];
    config = echoed.bind(entity)(config);
    kiloes[record] = config;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.PREMIUM_GUILD;
    kiloes = {};
    config = romeon.ACTIVE;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    config = romeon.ERROR;
    sequen = 18;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    config = romeon.RESUB;
    sequen = 19;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    option[sizing] = kiloes;
    var _closure1_slot19 = option;
    option = {};
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.BUNDLE;
    kiloes = {};
    record = romeon.ACTIVE;
    sequen = 20;
    config = offset[sequen];
    config = echoed.bind(entity)(config);
    kiloes[record] = config;
    record = romeon.ERROR;
    config = offset[sequen];
    config = echoed.bind(entity)(config);
    kiloes[record] = config;
    config = romeon.RESUB;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_0;
    kiloes = {};
    config = romeon.ACTIVE;
    sequen = 21;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    config = romeon.ERROR;
    sequen = 22;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    config = romeon.RESUB;
    sequen = 23;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_1;
    kiloes = {};
    config = romeon.ACTIVE;
    sequen = 24;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    config = romeon.ERROR;
    sequen = 25;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    config = romeon.RESUB;
    sequen = 26;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_2;
    kiloes = {};
    config = romeon.ACTIVE;
    sequen = 27;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    config = romeon.ERROR;
    sequen = 28;
    sequen = offset[sequen];
    sequen = echoed.bind(entity)(sequen);
    kiloes[config] = sequen;
    sequen = romeon.RESUB;
    vacuum = offset[vacuum];
    vacuum = echoed.bind(entity)(vacuum);
    kiloes[sequen] = vacuum;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.PREMIUM_GUILD;
    kiloes = {};
    sequen = romeon.ACTIVE;
    vacuum = 30;
    vacuum = offset[vacuum];
    vacuum = echoed.bind(entity)(vacuum);
    kiloes[sequen] = vacuum;
    sequen = romeon.ERROR;
    vacuum = 31;
    vacuum = offset[vacuum];
    vacuum = echoed.bind(entity)(vacuum);
    kiloes[sequen] = vacuum;
    vacuum = romeon.RESUB;
    ctrled = offset[ctrled];
    ctrled = echoed.bind(entity)(ctrled);
    kiloes[vacuum] = ctrled;
    option[sizing] = kiloes;
    var _closure1_slot20 = option;
    option = {};
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.BUNDLE;
    kiloes = {};
    vacuum = romeon.ACTIVE;
    ctrled = foxtra.imageBundle;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.ERROR;
    ctrled = foxtra.imageBundle;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.RESUB;
    ctrled = foxtra.imageBundle;
    kiloes[vacuum] = ctrled;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_0;
    kiloes = {};
    vacuum = romeon.ACTIVE;
    ctrled = foxtra.imageTier0;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.ERROR;
    ctrled = foxtra.imagePremiumNonActive;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.RESUB;
    ctrled = foxtra.imagePremiumNonActive;
    kiloes[vacuum] = ctrled;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_1;
    kiloes = {};
    vacuum = romeon.ACTIVE;
    ctrled = foxtra.imageTier1;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.ERROR;
    ctrled = foxtra.imagePremiumNonActive;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.RESUB;
    ctrled = foxtra.imagePremiumNonActive;
    kiloes[vacuum] = ctrled;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_2;
    kiloes = {};
    vacuum = romeon.ACTIVE;
    ctrled = foxtra.imageTier2;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.ERROR;
    ctrled = foxtra.imagePremiumNonActive;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.RESUB;
    ctrled = foxtra.imagePremiumNonActive;
    kiloes[vacuum] = ctrled;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.PREMIUM_GUILD;
    kiloes = {};
    vacuum = romeon.ACTIVE;
    ctrled = foxtra.imagePremiumGuild;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.ERROR;
    ctrled = foxtra.imagePremiumGuildNonActive;
    kiloes[vacuum] = ctrled;
    vacuum = romeon.RESUB;
    ctrled = foxtra.imagePremiumGuildNonActive;
    kiloes[vacuum] = ctrled;
    option[sizing] = kiloes;
    var _closure1_slot21 = option;
    option = {};
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.BUNDLE;
    kiloes = {};
    vacuum = romeon.ACTIVE;
    ctrled = offset[source];
    ctrled = echoed.bind(entity)(ctrled);
    kiloes[vacuum] = ctrled;
    ctrled = romeon.ERROR;
    source = offset[source];
    source = echoed.bind(entity)(source);
    kiloes[ctrled] = source;
    ctrled = romeon.RESUB;
    source = 34;
    source = offset[source];
    source = echoed.bind(entity)(source);
    kiloes[ctrled] = source;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_0;
    kiloes = {};
    ctrled = romeon.ACTIVE;
    source = offset[update];
    source = echoed.bind(entity)(source);
    kiloes[ctrled] = source;
    source = romeon.ERROR;
    update = offset[update];
    update = echoed.bind(entity)(update);
    kiloes[source] = update;
    update = romeon.RESUB;
    result = offset[result];
    result = echoed.bind(entity)(result);
    kiloes[update] = result;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_1;
    kiloes = {};
    update = romeon.ACTIVE;
    result = offset[output];
    result = echoed.bind(entity)(result);
    kiloes[update] = result;
    result = romeon.ERROR;
    output = offset[output];
    output = echoed.bind(entity)(output);
    kiloes[result] = output;
    result = romeon.RESUB;
    output = 38;
    output = offset[output];
    output = echoed.bind(entity)(output);
    kiloes[result] = output;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_2;
    kiloes = {};
    update = romeon.ACTIVE;
    output = 39;
    result = offset[output];
    result = echoed.bind(entity)(result);
    kiloes[update] = result;
    result = romeon.ERROR;
    output = offset[output];
    output = echoed.bind(entity)(output);
    kiloes[result] = output;
    result = romeon.RESUB;
    output = 40;
    output = offset[output];
    output = echoed.bind(entity)(output);
    kiloes[result] = output;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.PREMIUM_GUILD;
    kiloes = {};
    update = romeon.ACTIVE;
    output = 41;
    result = offset[output];
    result = echoed.bind(entity)(result);
    kiloes[update] = result;
    result = romeon.ERROR;
    output = offset[output];
    output = echoed.bind(entity)(output);
    kiloes[result] = output;
    result = romeon.RESUB;
    output = 42;
    output = offset[output];
    output = echoed.bind(entity)(output);
    kiloes[result] = output;
    option[sizing] = kiloes;
    var _closure1_slot22 = option;
    option = {};
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.BUNDLE;
    kiloes = foxtra.logoPremiumBundle;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_0;
    kiloes = foxtra.logoPremiumTier0;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_1;
    kiloes = foxtra.logoPremiumTier1;
    option[sizing] = kiloes;
    kiloes = offset[backup];
    kiloes = verify.bind(entity)(kiloes);
    kiloes = kiloes.Branding;
    sizing = kiloes.TIER_2;
    kiloes = foxtra.logoPremiumTier2;
    option[sizing] = kiloes;
    backup = offset[backup];
    backup = verify.bind(entity)(backup);
    backup = backup.Branding;
    backup = backup.PREMIUM_GUILD;
    foxtra = foxtra.logoPremiumGuild;
    option[backup] = foxtra;
    var _closure1_slot23 = option;
    option = {};
    backup = romeon.ACTIVE;
    foxtra = yankee.price;
    option[backup] = foxtra;
    backup = romeon.ERROR;
    foxtra = yankee.price;
    option[backup] = foxtra;
    romeon = romeon.RESUB;
    yankee = yankee.priceDark;
    option[romeon] = yankee;
    var _closure1_slot24 = option;
    option = 61;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'components_native/premium/PremiumSubscriptionDetails.tsx';
    option = verify.bind(offset)(option);
    golfie = function(argFoo) { // Original name: PremiumSubscriptionDetails
        _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
            entity = argFoo;
            oscard = entity.style;
            foxtra = entity.onClickManagePremiumGuild;
            sizing = entity.subscription;
            entity = _closure1_slot17;
            report = undefined;
            yankee = entity.bind(report)();
            golfie = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 50;
            entity = verify[entity];
            entity = golfie.bind(report)(entity);
            entity = entity.bind(report)();
            tangon = entity.analyticsLocations;
            michal = _closure1_slot0;
            entity = 57;
            entity = verify[entity];
            zuuluu = michal.bind(report)(entity);
            michal = zuuluu.useSubscriptionInvoicePreview;
            entity = {};
            offset = sizing.id;
            entity['subscriptionId'] = offset;
            offset = true;
            entity['renewal'] = offset;
            entity['analyticsLocations'] = tangon;
            tangon = 58;
            tangon = verify[tangon];
            tangon = golfie.bind(report)(tangon);
            tangon = tangon.PREMIUM_SUBSCRIPTION_DETAILS;
            entity['analyticsLocation'] = tangon;
            zuuluu = michal.bind(zuuluu)(entity);
            michal = _closure1_slot3;
            entity = 1;
            michal = michal.bind(report)(zuuluu, entity);
            entity = 0;
            kiloes = michal[entity];
            offset = null;
            michal = offset == kiloes;
            entity = null;
            if(michal) { _fun00014_ip = 602; continue _fun00013 }
 170:
            tangon = _closure1_slot16;
            zuuluu = _closure1_slot7;
            michal = {};
            michal['style'] = oscard;
            romeon = _closure1_slot15;
            update = _closure1_slot0;
            output = _closure1_slot2;
            golfie = 56;
            oscard = output[golfie];
            oscard = update.bind(report)(oscard);
            verify = oscard.Text;
            oscard = {'style': null, 'accessibilityRole': 'header', 'variant': 'eyebrow', 'color': 'header-secondary'};
            backup = yankee.title;
            oscard['style'] = backup;
            backup = 55;
            result = output[backup];
            result = update.bind(report)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[backup];
            output = update.bind(report)(output);
            output = output.t;
            output = output.ITurwc;
            output = result.bind(echoed)(output);
            oscard['children'] = output;
            verify = romeon.bind(report)(verify, oscard);
            oscard = new Array(5);
            oscard[0] = verify;
            verify = sizing.renewalMutations;
            verify = offset != verify;
            if(!verify) { _fun00014_ip = 335; continue _fun00013 }
 316:
            romeon = sizing.status;
            offset = _closure1_slot13;
            offset = offset.CANCELED;
            verify = romeon !== offset;
 335:
            if(!verify) { _fun00014_ip = 386; continue _fun00013 }
 338:
            output = _closure1_slot15;
            romeon = _closure1_slot1;
            result = _closure1_slot2;
            offset = 59;
            offset = result[offset];
            romeon = romeon.bind(report)(offset);
            offset = {};
            offset['subscription'] = sizing;
            result = sizing.renewalMutations;
            offset['renewalMutations'] = result;
            verify = output.bind(report)(romeon, offset);
 386:
            oscard[1] = verify;
            offset = sizing.status;
            verify = _closure1_slot13;
            verify = verify.ACCOUNT_HOLD;
            verify = offset === verify;
            if(!verify) { _fun00014_ip = 449; continue _fun00013 }
 412:
            output = _closure1_slot15;
            romeon = _closure1_slot1;
            result = _closure1_slot2;
            offset = 60;
            offset = result[offset];
            romeon = romeon.bind(report)(offset);
            offset = {};
            offset['subscription'] = sizing;
            verify = output.bind(report)(romeon, offset);
 449:
            oscard[2] = verify;
            romeon = _closure1_slot15;
            offset = _closure1_slot35;
            verify = {};
            verify['subscription'] = sizing;
            verify['renewalInvoicePreview'] = kiloes;
            verify['onClickManagePremiumGuild'] = foxtra;
            verify = romeon.bind(report)(offset, verify);
            oscard[3] = verify;
            verify = _closure1_slot15;
            foxtra = _closure1_slot0;
            offset = _closure1_slot2;
            golfie = offset[golfie];
            golfie = foxtra.bind(report)(golfie);
            option = golfie.Text;
            golfie = {};
            yankee = yankee.desktopSubtext;
            golfie['style'] = yankee;
            yankee = 'text-sm/medium';
            golfie['variant'] = yankee;
            yankee = offset[backup];
            yankee = foxtra.bind(report)(yankee);
            romeon = yankee.intl;
            yankee = romeon.string;
            offset = offset[backup];
            offset = foxtra.bind(report)(offset);
            offset = offset.t;
            offset = offset.MTG+3N;
            offset = yankee.bind(romeon)(offset);
            golfie['children'] = offset;
            golfie = verify.bind(report)(option, golfie);
            oscard[4] = golfie;
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 602:
            return entity;
        }
    };
    zuuluu['default'] = golfie;
    zuuluu['onCancelClick'] = oscard;
    zuuluu['handleManageSubscription'] = report;
    zuuluu['onResubscribeClick'] = tangon;
    zuuluu['PremiumSubscriptionHeader'] = michal;
    return entity;
})();