// app/components_native/premium/PremiumSubscriptionDetails.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    verify = argBar;
    echo = argBaz;
    zulu = argFred;
    offset = argPlugh;
    var _closure1_slot0 = verify;
    var _closure1_slot1 = echo;
    var _closure1_slot2 = offset;
    entity = function(argFoo, argBar) { // Original name: getHeaderBackground
        mike = _closure1_slot19;
        entity = argFoo;
        mike = mike[entity];
        entity = argBar;
        entity = mike[entity];
        return entity;
    };
    var _closure1_slot25 = entity;
    entity = function(argFoo, argBar) { // Original name: getPremiumImage
        mike = _closure1_slot20;
        entity = argFoo;
        mike = mike[entity];
        entity = argBar;
        entity = mike[entity];
        return entity;
    };
    var _closure1_slot26 = entity;
    entity = function(argFoo, argBar) { // Original name: getPremiumImageStyle
        mike = _closure1_slot21;
        entity = argFoo;
        mike = mike[entity];
        entity = argBar;
        entity = mike[entity];
        return entity;
    };
    var _closure1_slot27 = entity;
    entity = function(argFoo, argBar) { // Original name: getLogo
        mike = _closure1_slot22;
        entity = argFoo;
        mike = mike[entity];
        entity = argBar;
        entity = mike[entity];
        return entity;
    };
    var _closure1_slot28 = entity;
    entity = function(argFoo) { // Original name: getLogoStyle
        mike = _closure1_slot23;
        entity = argFoo;
        entity = mike[entity];
        return entity;
    };
    var _closure1_slot29 = entity;
    entity = function(argFoo) { // Original name: getPlanDescriptionStyle
        mike = _closure1_slot24;
        entity = argFoo;
        entity = mike[entity];
        return entity;
    };
    var _closure1_slot30 = entity;
    entity = function(argFoo, argBar, argBaz) { // Original name: handleCancelSubscription
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zulu = argFoo;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            golf = 43;
            tango = offset[golf];
            entity = undefined;
            oscar = verify.bind(entity)(tango);
            report = oscar.trackPremiumSubscriptionCancellationFlowStep;
            tango = {};
            tango['subscription'] = zulu;
            options = argBar;
            tango['analyticsLocations'] = options;
            options = argBaz;
            tango['fromStep'] = options;
            options = offset[golf];
            options = verify.bind(entity)(options);
            options = options.STEP_ANALYTICS_NAMES;
            golf = offset[golf];
            golf = verify.bind(entity)(golf);
            golf = golf.CancellationFlowSteps;
            golf = golf.MOBILE_SUBSCRIPTION_MANAGE;
            golf = options[golf];
            tango['toStep'] = golf;
            tango = report.bind(oscar)(tango);
            tango = null;
            if(!(tango != zulu)) { _fun00002_ip = 122; continue _fun00001 }
 113:
            report = zulu.isPurchasedViaApple;
            if(report) { _fun00002_ip = 197; continue _fun00001 }
 122:
            tango = tango != zulu;
            if(!tango) { _fun00002_ip = 135; continue _fun00001 }
 129:
            tango = zulu.isPurchasedViaGoogle;
 135:
            if(!tango) { _fun00002_ip = 216; continue _fun00001 }
 138:
            report = _closure1_slot6;
            tango = report.openURL;
            golf = _closure1_slot0;
            options = _closure1_slot2;
            oscar = 10;
            oscar = options[oscar];
            options = golf.bind(entity)(oscar);
            golf = options.getExternalSubscriptionMethodUrl;
            oscar = zulu.paymentGateway;
            zulu = 'SUBSCRIPTION_MANAGEMENT';
            zulu = golf.bind(options)(oscar, zulu);
            zulu = tango.bind(report)(zulu);
            _fun00002_ip = 216; continue _fun00001;
 197:
            tango = _closure1_slot6;
            zulu = tango.openURL;
            mike = _closure1_slot12;
            mike = zulu.bind(tango)(mike);
 216:
            return entity;
        }
    };
    var _closure1_slot31 = entity;
    oscar = function(argFoo, argBar) { // Original name: onCancelClick
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            report = argFoo;
            tango = argBar;
            var _closure2_slot0 = report;
            var _closure2_slot1 = tango;
            oscar = _closure1_slot0;
            options = _closure1_slot2;
            entity = 43;
            entity = options[entity];
            mike = undefined;
            oscar = oscar.bind(mike)(entity);
            entity = oscar.trackPremiumSubscriptionCancellationStarted;
            entity = entity.bind(oscar)(report, tango);
            oscar = _closure1_slot1;
            entity = 10;
            entity = options[entity];
            oscar = oscar.bind(mike)(entity);
            entity = oscar.isBoostOnlySubscription;
            entity = entity.bind(oscar)(report);
            if(entity) { _fun00004_ip = 161; continue _fun00003 }
 83:
            oscar = _closure1_slot1;
            offset = _closure1_slot2;
            entity = 44;
            entity = offset[entity];
            oscar = oscar.bind(mike)(entity);
            entity = {};
            entity['subscription'] = report;
            verify = _closure1_slot0;
            options = 45;
            options = offset[options];
            options = verify.bind(mike)(options);
            options = options.WhatYouLoseMode;
            options = options.CANCEL;
            entity['mode'] = options;
            golf = function(argFoo) { // Original name: onContinue
                report = _closure1_slot31;
                tango = _closure2_slot0;
                zulu = _closure2_slot1;
                entity = undefined;
                mike = argFoo;
                mike = report.bind(entity)(tango, zulu, mike);
                return entity;
            };
            entity['onContinue'] = golf;
            entity = oscar.bind(mike)(entity);
            _fun00004_ip = 173; continue _fun00003;
 161:
            zulu = _closure1_slot31;
            zulu = zulu.bind(mike)(report, tango);
            entity = undefined;
 173:
            return entity;
        }
    };
    var _closure1_slot32 = oscar;
    report = function(argFoo, argBar, argBaz) { // Original name: handleManageSubscription
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            entity = argFoo;
            zulu = entity.status;
            mike = _closure1_slot13;
            mike = mike.ACCOUNT_HOLD;
            if(!(zulu !== mike)) { _fun00006_ip = 114; continue _fun00005 }
 25:
            report = _closure1_slot0;
            zulu = _closure1_slot2;
            mike = 46;
            zulu = zulu[mike];
            mike = undefined;
            report = report.bind(mike)(zulu);
            zulu = report.launchPremiumPlanSelect;
            mike = {};
            oscar = argBar;
            mike['navigation'] = oscar;
            oscar = {};
            golf = _closure1_slot10;
            golf = golf.USER_SETTINGS;
            oscar['page'] = golf;
            golf = _closure1_slot11;
            golf = golf.SETTINGS_PREMIUM;
            oscar['section'] = golf;
            mike['analyticsLocation'] = oscar;
            oscar = argBaz;
            mike['analyticsLocations'] = oscar;
            mike = zulu.bind(report)(mike);
            _fun00006_ip = 173; continue _fun00005;
 114:
            zulu = _closure1_slot6;
            mike = zulu.openURL;
            oscar = _closure1_slot0;
            report = _closure1_slot2;
            tango = 10;
            report = report[tango];
            tango = undefined;
            oscar = oscar.bind(tango)(report);
            report = oscar.getExternalSubscriptionMethodUrl;
            tango = entity.paymentGateway;
            entity = 'PAYMENT_SOURCE_MANAGEMENT';
            entity = report.bind(oscar)(tango, entity);
            entity = mike.bind(zulu)(entity);
 173:
            entity = undefined;
            return entity;
        }
    };
    var _closure1_slot33 = report;
    tango = function(argFoo) { // Original name: onResubscribeClick
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            mike = entity.isPurchasedViaApple;
            if(mike) { _fun00008_ip = 85; continue _fun00007 }
 12:
            mike = entity.isPurchasedViaGoogle;
            if(!mike) { _fun00008_ip = 107; continue _fun00007 }
 21:
            zulu = _closure1_slot6;
            mike = zulu.openURL;
            oscar = _closure1_slot0;
            report = _closure1_slot2;
            tango = 10;
            report = report[tango];
            tango = undefined;
            oscar = oscar.bind(tango)(report);
            report = oscar.getExternalSubscriptionMethodUrl;
            tango = entity.paymentGateway;
            entity = 'SUBSCRIPTION_MANAGEMENT';
            entity = report.bind(oscar)(tango, entity);
            entity = mike.bind(zulu)(entity);
            _fun00008_ip = 107; continue _fun00007;
 85:
            zulu = _closure1_slot6;
            mike = zulu.openURL;
            entity = _closure1_slot12;
            entity = mike.bind(zulu)(entity);
 107:
            entity = undefined;
            return entity;
        }
    };
    var _closure1_slot34 = tango;
    mike = function(argFoo) { // Original name: PremiumSubscriptionHeader
        _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
            entity = argFoo;
            update = entity.subscription;
            var _closure2_slot0 = update;
            options = entity.renewalInvoicePreview;
            config = entity.onClickManagePremiumGuild;
            oscar = entity.style;
            entity = _closure1_slot17;
            tango = undefined;
            result = entity.bind(tango)();
            mike = _closure1_slot0;
            entity = _closure1_slot2;
            zulu = 47;
            zulu = entity[zulu];
            report = mike.bind(tango)(zulu);
            zulu = report.useNavigation;
            zulu = zulu.bind(report)();
            var _closure2_slot1 = zulu;
            zulu = 48;
            report = entity[zulu];
            offset = mike.bind(tango)(report);
            verify = offset.useStateFromStores;
            report = _closure1_slot8;
            golf = new Array(1);
            golf[0] = report;
            report = function() {
                zulu = _closure1_slot8;
                entity = zulu.getCurrentUser;
                entity = entity.bind(zulu)();
                zulu = _closure1_slot1;
                tango = _closure1_slot2;
                mike = 49;
                mike = tango[mike];
                report = undefined;
                tango = zulu.bind(report)(mike);
                mike = null;
                zulu = mike != entity;
                mike = 'PremiumSubscriptionHeader: currentUser cannot be undefined';
                mike = tango.bind(report)(zulu, mike);
                return entity;
            };
            verify = verify.bind(offset)(golf, report);
            zulu = entity[zulu];
            offset = mike.bind(tango)(zulu);
            golf = offset.useStateFromStores;
            zulu = _closure1_slot9;
            report = new Array(1);
            report[0] = zulu;
            zulu = function() {
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    mike = _closure2_slot0;
                    mike = mike.isOnPlatformMatchingExternalPaymentGateway;
                    zulu = null;
                    if(mike) { _fun00012_ip = 20; continue _fun00011 }
 18:
                    return zulu;
 20:
                    mike = _closure2_slot0;
                    mike = mike.paymentGatewayPlanId;
                    if(!(zulu != mike)) { _fun00012_ip = 82; continue _fun00011 }
 34:
                    mike = _closure2_slot0;
                    zulu = mike.paymentGatewayPlanId;
                    mike = '';
                    if(!(mike !== zulu)) { _fun00012_ip = 82; continue _fun00011 }
 52:
                    zulu = _closure1_slot9;
                    mike = zulu.getProduct;
                    entity = _closure2_slot0;
                    entity = entity.paymentGatewayPlanId;
                    entity = mike.bind(zulu)(entity);
                    return entity;
 82:
                    entity = global;
                    zulu = entity.Error;
                    entity = zulu.prototype;
                    mike = Object.create(entity, {constructor: {value: zulu}});
                    tango = 'Subscription missing plan ID';
                    report = mike;
                    entity = new report[zulu](tango, zulu);
                    entity = entity instanceof Object ? entity : mike;
                    throw entity;
                }
            };
            offset = golf.bind(offset)(report, zulu);
            report = _closure1_slot1;
            source = 10;
            zulu = entity[source];
            golf = report.bind(tango)(zulu);
            zulu = golf.getPlanIdFromInvoice;
            romeo = zulu.bind(golf)(update, options);
            zulu = entity[source];
            golf = mike.bind(tango)(zulu);
            zulu = golf.getPremiumBranding;
            context = zulu.bind(golf)(update);
            zulu = 50;
            zulu = entity[zulu];
            zulu = report.bind(tango)(zulu);
            zulu = zulu.bind(tango)();
            zulu = zulu.analyticsLocations;
            var _closure2_slot2 = zulu;
            entity = entity[source];
            entity = mike.bind(tango)(entity);
            entity = entity.Branding;
            entity = entity.PREMIUM_GUILD;
            if(!(context !== entity)) { _fun00010_ip = 433; continue _fun00009 }
 262:
            zulu = _closure1_slot1;
            entity = _closure1_slot2;
            mike = entity[source];
            report = zulu.bind(tango)(mike);
            mike = report.getStatusFromInvoice;
            mike = mike.bind(report)(update, options);
            report = _closure1_slot14;
            yankee = report[romeo];
            report = 49;
            report = entity[report];
            kilo = zulu.bind(tango)(report);
            golf = null;
            foxtrot = golf != yankee;
            report = 'missing subscription planInfo';
            report = kilo.bind(tango)(foxtrot, report);
            entity = entity[source];
            report = zulu.bind(tango)(entity);
            zulu = report.getPlanDescription;
            entity = {};
            entity['subscription'] = update;
            entity['planId'] = romeo;
            romeo = golf != offset;
            if(!romeo) { _fun00010_ip = 414; continue _fun00009 }
 363:
            foxtrot = _closure1_slot0;
            kilo = _closure1_slot2;
            romeo = 51;
            romeo = kilo[romeo];
            sizing = foxtrot.bind(tango)(romeo);
            kilo = sizing.formatRate;
            foxtrot = offset.priceString;
            romeo = yankee.interval;
            yankee = yankee.intervalCount;
            golf = kilo.bind(sizing)(foxtrot, romeo, yankee);
 414:
            entity['price'] = golf;
            golf = true;
            entity['includePremiumGuilds'] = golf;
            foxtrot = zulu.bind(report)(entity);
            _fun00010_ip = 522; continue _fun00009;
 433:
            report = _closure1_slot0;
            entity = _closure1_slot2;
            zulu = entity[source];
            golf = report.bind(tango)(zulu);
            zulu = golf.getCoercedPremiumGuildSubscriptionStatus;
            zulu = zulu.bind(golf)(update);
            entity = entity[source];
            golf = report.bind(tango)(entity);
            report = golf.getPremiumGuildHeaderDescription;
            entity = {};
            entity['subscription'] = update;
            entity['user'] = verify;
            verify = null;
            yankee = verify == offset;
            verify = undefined;
            if(yankee) { _fun00010_ip = 504; continue _fun00009 }
 498:
            verify = offset.priceString;
 504:
            entity['price'] = verify;
            entity['renewalInvoicePreview'] = options;
            foxtrot = report.bind(golf)(entity);
            mike = zulu;
 522:
            entity = _closure1_slot13;
            entity = entity.CANCELED;
            romeo = mike === entity;
            entity = _closure1_slot13;
            entity = entity.ACTIVE;
            if(!(mike !== entity)) { _fun00010_ip = 573; continue _fun00009 }
 550:
            entity = _closure1_slot18;
            if(romeo) { _fun00010_ip = 565; continue _fun00009 }
 557:
            control = entity.ERROR;
            _fun00010_ip = 571; continue _fun00009;
 565:
            control = entity.RESUB;
 571:
            _fun00010_ip = 583; continue _fun00009;
 573:
            entity = _closure1_slot18;
            control = entity.ACTIVE;
 583:
            entity = romeo;
            if(entity) { _fun00010_ip = 598; continue _fun00009 }
 589:
            mike = update.isOnPlatformMatchingExternalPaymentGateway;
            entity = !mike;
 598:
            echo = !entity;
            if(entity) { _fun00010_ip = 654; continue _fun00009 }
 604:
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 52;
            entity = zulu[entity];
            mike = mike.bind(tango)(entity);
            entity = mike.isAndroid;
            entity = entity.bind(mike)();
            entity = !entity;
            if(entity) { _fun00010_ip = 651; continue _fun00009 }
 639:
            zulu = update.renewalMutations;
            mike = null;
            entity = mike == zulu;
 651:
            echo = entity;
 654:
            kilo = !romeo;
            if(romeo) { _fun00010_ip = 666; continue _fun00009 }
 660:
            kilo = update.isOnPlatformMatchingExternalPaymentGateway;
 666:
            zulu = _closure1_slot15;
            mike = _closure1_slot7;
            entity = {};
            golf = result.container;
            report = new Array(2);
            report[0] = golf;
            report[1] = oscar;
            entity['style'] = report;
            golf = _closure1_slot16;
            oscar = _closure1_slot5;
            report = {};
            options = _closure1_slot25;
            options = options.bind(tango)(context, control);
            report['source'] = options;
            options = result.header;
            report['style'] = options;
            offset = _closure1_slot16;
            verify = _closure1_slot7;
            options = {};
            yankee = result.logoContainer;
            options['style'] = yankee;
            vacuum = _closure1_slot15;
            sizing = _closure1_slot4;
            yankee = {};
            sequence = _closure1_slot26;
            sequence = sequence.bind(tango)(context, control);
            yankee['source'] = sequence;
            sequence = _closure1_slot27;
            record = sequence.bind(tango)(context, control);
            sequence = new Array(2);
            sequence[0] = record;
            record = result.wumpusImg;
            sequence[1] = record;
            yankee['style'] = sequence;
            sizing = vacuum.bind(tango)(sizing, yankee);
            yankee = new Array(2);
            yankee[0] = sizing;
            sequence = _closure1_slot15;
            vacuum = _closure1_slot4;
            sizing = {};
            record = _closure1_slot28;
            record = record.bind(tango)(context, control);
            sizing['source'] = record;
            record = _closure1_slot29;
            record = record.bind(tango)(context);
            sizing['style'] = record;
            sizing = sequence.bind(tango)(vacuum, sizing);
            yankee[1] = sizing;
            options['children'] = yankee;
            verify = offset.bind(tango)(verify, options);
            options = new Array(3);
            options[0] = verify;
            yankee = _closure1_slot15;
            offset = _closure1_slot0;
            sizing = _closure1_slot2;
            verify = 53;
            verify = sizing[verify];
            verify = offset.bind(tango)(verify);
            offset = verify.LegacyText;
            verify = {};
            sizing = _closure1_slot30;
            sizing = sizing.bind(tango)(control);
            verify['style'] = sizing;
            verify['children'] = foxtrot;
            verify = yankee.bind(tango)(offset, verify);
            options[1] = verify;
            yankee = _closure1_slot16;
            offset = _closure1_slot7;
            verify = {};
            foxtrot = result.buttonContainer;
            verify['style'] = foxtrot;
            foxtrot = null;
            sizing = null;
            if(!romeo) { _fun00010_ip = 1144; continue _fun00009 }
 974:
            romeo = foxtrot != update;
            sizing = null;
            if(!romeo) { _fun00010_ip = 1144; continue _fun00009 }
 986:
            romeo = update.isOnPlatformMatchingExternalPaymentGateway;
            sizing = null;
            if(!romeo) { _fun00010_ip = 1144; continue _fun00009 }
 1000:
            vacuum = _closure1_slot15;
            record = _closure1_slot1;
            target = _closure1_slot2;
            sequence = 54;
            romeo = target[sequence];
            control = record.bind(tango)(romeo);
            romeo = {};
            context = result.button;
            romeo['style'] = context;
            context = function() { // Original name: onPress
                zulu = _closure1_slot34;
                mike = _closure2_slot0;
                entity = undefined;
                mike = zulu.bind(entity)(mike);
                return entity;
            };
            romeo['onPress'] = context;
            sequence = target[sequence];
            sequence = record.bind(tango)(sequence);
            sequence = sequence.Colors;
            sequence = sequence.PRIMARY;
            romeo['color'] = sequence;
            papa = _closure1_slot0;
            sequence = 55;
            record = target[sequence];
            record = papa.bind(tango)(record);
            context = record.intl;
            record = context.string;
            sequence = target[sequence];
            sequence = papa.bind(tango)(sequence);
            sequence = sequence.t;
            sequence = sequence.lTCb0d;
            sequence = record.bind(context)(sequence);
            romeo['text'] = sequence;
            sequence = result.buttonText;
            romeo['textStyle'] = sequence;
            sizing = vacuum.bind(tango)(control, romeo);
 1144:
            romeo = new Array(4);
            romeo[0] = sizing;
            sizing = null;
            if(!echo) { _fun00010_ip = 1421; continue _fun00009 }
 1160:
            vacuum = _closure1_slot15;
            record = _closure1_slot1;
            sequence = _closure1_slot2;
            context = 54;
            echo = sequence[context];
            control = record.bind(tango)(echo);
            echo = {};
            papa = function() { // Original name: onPress
                report = _closure1_slot33;
                tango = _closure2_slot0;
                zulu = _closure2_slot1;
                mike = _closure2_slot2;
                entity = undefined;
                mike = report.bind(entity)(tango, zulu, mike);
                return entity;
            };
            echo['onPress'] = papa;
            sequence = sequence[context];
            sequence = record.bind(tango)(sequence);
            sequence = sequence.Colors;
            sequence = sequence.PRIMARY;
            echo['color'] = sequence;
            record = update.status;
            sequence = _closure1_slot13;
            sequence = sequence.ACCOUNT_HOLD;
            if(!(record !== sequence)) { _fun00010_ip = 1300; continue _fun00009 }
 1241:
            target = _closure1_slot0;
            status = _closure1_slot2;
            sequence = 55;
            record = status[sequence];
            record = target.bind(tango)(record);
            papa = record.intl;
            record = papa.string;
            sequence = status[sequence];
            sequence = target.bind(tango)(sequence);
            sequence = sequence.t;
            sequence = sequence.gmVtgI;
            sequence = record.bind(papa)(sequence);
            _fun00010_ip = 1357; continue _fun00009;
 1300:
            status = _closure1_slot0;
            sierra = _closure1_slot2;
            record = 55;
            papa = sierra[record];
            papa = status.bind(tango)(papa);
            target = papa.intl;
            papa = target.string;
            record = sierra[record];
            record = status.bind(tango)(record);
            record = record.t;
            record = record.SgX7RU;
            sequence = papa.bind(target)(record);
 1357:
            echo['text'] = sequence;
            sequence = result.button;
            echo['style'] = sequence;
            record = _closure1_slot1;
            sequence = _closure1_slot2;
            sequence = sequence[context];
            sequence = record.bind(tango)(sequence);
            sequence = sequence.Sizes;
            sequence = sequence.XSMALL;
            echo['size'] = sequence;
            sequence = result.buttonText;
            echo['textStyle'] = sequence;
            sizing = vacuum.bind(tango)(control, echo);
 1421:
            romeo[1] = sizing;
            echo = _closure1_slot0;
            sizing = _closure1_slot2;
            sizing = sizing[source];
            echo = echo.bind(tango)(sizing);
            sizing = echo.subscriptionHasPremiumGuildPlan;
            echo = sizing.bind(echo)(update);
            sizing = null;
            if(!echo) { _fun00010_ip = 1637; continue _fun00009 }
 1461:
            echo = foxtrot != config;
            sizing = null;
            if(!echo) { _fun00010_ip = 1637; continue _fun00009 }
 1473:
            source = _closure1_slot15;
            vacuum = _closure1_slot1;
            sequence = _closure1_slot2;
            control = 54;
            echo = sequence[control];
            update = vacuum.bind(tango)(echo);
            echo = {};
            echo['onPress'] = config;
            config = sequence[control];
            config = vacuum.bind(tango)(config);
            config = config.Colors;
            config = config.PRIMARY;
            echo['color'] = config;
            papa = _closure1_slot0;
            config = 55;
            record = sequence[config];
            record = papa.bind(tango)(record);
            context = record.intl;
            record = context.string;
            config = sequence[config];
            config = papa.bind(tango)(config);
            config = config.t;
            config = config.gIVkjo;
            config = record.bind(context)(config);
            echo['text'] = config;
            config = result.button;
            echo['style'] = config;
            control = sequence[control];
            control = vacuum.bind(tango)(control);
            control = control.Sizes;
            control = control.XSMALL;
            echo['size'] = control;
            control = result.buttonText;
            echo['textStyle'] = control;
            sizing = source.bind(tango)(update, echo);
 1637:
            romeo[2] = sizing;
            foxtrot = null;
            if(!kilo) { _fun00010_ip = 1767; continue _fun00009 }
 1646:
            sizing = _closure1_slot15;
            update = _closure1_slot0;
            source = _closure1_slot2;
            backup = 56;
            backup = source[backup];
            backup = update.bind(tango)(backup);
            kilo = backup.Text;
            backup = {'accessibilityRole': 'link', 'style': null, 'onPress': null, 'variant': 'text-sm/medium', 'color': 'always-white'};
            result = result.cancelLink;
            backup['style'] = result;
            output = function() { // Original name: onPress
                tango = _closure1_slot32;
                zulu = _closure2_slot0;
                mike = _closure2_slot2;
                entity = undefined;
                entity = tango.bind(entity)(zulu, mike);
                return entity;
            };
            backup['onPress'] = output;
            output = 55;
            result = source[output];
            result = update.bind(tango)(result);
            echo = result.intl;
            result = echo.string;
            output = source[output];
            output = update.bind(tango)(output);
            output = output.t;
            output = output.ETE/oK;
            output = result.bind(echo)(output);
            backup['children'] = output;
            foxtrot = sizing.bind(tango)(kilo, backup);
 1767:
            romeo[3] = foxtrot;
            verify['children'] = romeo;
            verify = yankee.bind(tango)(offset, verify);
            options[2] = verify;
            report['children'] = options;
            report = golf.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot35 = mike;
    entity = global;
    romeo = entity.Object;
    yankee = romeo.defineProperty;
    options = {};
    entity = true;
    options['value'] = entity;
    entity = '__esModule';
    entity = yankee.bind(romeo)(zulu, entity, options);
    entity = 0;
    options = offset[entity];
    entity = undefined;
    options = echo.bind(entity)(options);
    var _closure1_slot3 = options;
    options = 1;
    yankee = offset[options];
    options = argCorge;
    options = options.bind(entity)(yankee);
    options = 2;
    options = offset[options];
    options = verify.bind(entity)(options);
    yankee = options.Image;
    var _closure1_slot4 = yankee;
    yankee = options.ImageBackground;
    var _closure1_slot5 = yankee;
    yankee = options.Linking;
    var _closure1_slot6 = yankee;
    options = options.View;
    var _closure1_slot7 = options;
    options = 3;
    options = offset[options];
    options = echo.bind(entity)(options);
    var _closure1_slot8 = options;
    options = 4;
    options = offset[options];
    options = echo.bind(entity)(options);
    var _closure1_slot9 = options;
    options = 5;
    options = offset[options];
    options = verify.bind(entity)(options);
    yankee = options.AnalyticsPages;
    var _closure1_slot10 = yankee;
    yankee = options.AnalyticsSections;
    var _closure1_slot11 = yankee;
    yankee = options.MANAGE_SUBSCRIPTION_LINK;
    var _closure1_slot12 = yankee;
    yankee = options.SubscriptionStatusTypes;
    var _closure1_slot13 = yankee;
    config = options.USER_SETTINGS_CONTAINER_HORIZONTAL_PADDING;
    options = 6;
    options = offset[options];
    options = verify.bind(entity)(options);
    options = options.SubscriptionPlanInfo;
    var _closure1_slot14 = options;
    options = 7;
    yankee = offset[options];
    yankee = verify.bind(entity)(yankee);
    yankee = yankee.jsx;
    var _closure1_slot15 = yankee;
    options = offset[options];
    options = verify.bind(entity)(options);
    options = options.jsxs;
    var _closure1_slot16 = options;
    foxtrot = {};
    output = 37;
    options = {'height': 37, 'width': 49};
    foxtrot['imageTier2'] = options;
    update = 35;
    options = {'height': 35, 'width': 49};
    foxtrot['imageTier1'] = options;
    vacuum = 29;
    options = {'height': 35, 'width': 29};
    foxtrot['imageTier0'] = options;
    options = {'height': 35, 'width': 49};
    foxtrot['imageBundle'] = options;
    result = 36;
    options = {'height': 36, 'width': 51};
    foxtrot['imagePremiumNonActive'] = options;
    options = {'width': 51, 'height': 36};
    foxtrot['imagePremiumGuild'] = options;
    options = {'width': 51, 'height': 36};
    foxtrot['imagePremiumGuildNonActive'] = options;
    source = 33;
    options = {'height': 33, 'width': 205};
    foxtrot['logoPremiumBundle'] = options;
    control = 32;
    options = {'height': 32, 'width': 59};
    foxtrot['logoPremiumTier0'] = options;
    context = 16;
    options = {'height': 16, 'width': 156};
    foxtrot['logoPremiumTier1'] = options;
    options = {'height': 32, 'width': 78};
    foxtrot['logoPremiumTier2'] = options;
    sequence = 17;
    options = {'height': 17, 'width': 184};
    foxtrot['logoPremiumGuild'] = options;
    yankee = {};
    options = {'fontSize': 14, 'marginTop': 10};
    papa = 14;
    backup = 10;
    record = 8;
    romeo = offset[record];
    romeo = echo.bind(entity)(romeo);
    romeo = romeo.unsafe_rawColors;
    romeo = romeo.WHITE_500;
    options['color'] = romeo;
    yankee['price'] = options;
    options = {'fontSize': 14, 'marginTop': 10};
    romeo = offset[record];
    romeo = echo.bind(entity)(romeo);
    romeo = romeo.unsafe_rawColors;
    romeo = romeo.BLACK_500;
    options['color'] = romeo;
    yankee['priceDark'] = options;
    options = 9;
    options = offset[options];
    kilo = verify.bind(entity)(options);
    romeo = kilo.createStyles;
    options = {};
    sizing = {};
    sizing['paddingHorizontal'] = config;
    options['title'] = sizing;
    sizing = {};
    sizing['padding'] = context;
    options['header'] = sizing;
    sizing = {};
    sizing['marginRight'] = backup;
    options['wumpusImg'] = sizing;
    sizing = {'flexDirection': 'row', 'alignItems': 'center'};
    options['logoContainer'] = sizing;
    sizing = {'marginTop': 8, 'overflow': 'hidden'};
    target = offset[record];
    target = echo.bind(entity)(target);
    target = target.colors;
    target = target.BACKGROUND_TERTIARY;
    sizing['backgroundColor'] = target;
    options['container'] = sizing;
    sizing = {'marginTop': 8, 'flexDirection': 'row'};
    options['buttonContainer'] = sizing;
    sizing = {'alignSelf': 'flex-start', 'flexGrow': 0, 'flexShrink': 0, 'paddingHorizontal': 16, 'marginRight': 8};
    target = offset[record];
    target = echo.bind(entity)(target);
    target = target.colors;
    target = target.WHITE;
    sizing['backgroundColor'] = target;
    options['button'] = sizing;
    sizing = {};
    target = offset[record];
    target = echo.bind(entity)(target);
    target = target.colors;
    target = target.REDESIGN_BUTTON_PRIMARY_BACKGROUND;
    sizing['color'] = target;
    options['buttonText'] = sizing;
    sizing = {'alignSelf': 'flex-start', 'flexGrow': 0, 'flexShrink': 0, 'marginLeft': 16, 'marginTop': 2};
    options['cancelLink'] = sizing;
    sizing = {};
    sizing['marginTop'] = record;
    sizing['paddingHorizontal'] = config;
    options['desktopSubtext'] = sizing;
    options = romeo.bind(kilo)(options);
    var _closure1_slot17 = options;
    romeo = {};
    options = 'active';
    romeo['ACTIVE'] = options;
    options = 'resub';
    romeo['RESUB'] = options;
    options = 'error';
    romeo['ERROR'] = options;
    var _closure1_slot18 = romeo;
    options = {};
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.BUNDLE;
    kilo = {};
    record = romeo.ACTIVE;
    config = 11;
    config = offset[config];
    config = echo.bind(entity)(config);
    kilo[record] = config;
    target = romeo.ERROR;
    record = 12;
    config = offset[record];
    config = echo.bind(entity)(config);
    kilo[target] = config;
    status = romeo.RESUB;
    config = 13;
    target = offset[config];
    target = echo.bind(entity)(target);
    kilo[status] = target;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_0;
    kilo = {};
    target = romeo.ACTIVE;
    papa = offset[papa];
    papa = echo.bind(entity)(papa);
    kilo[target] = papa;
    target = romeo.ERROR;
    papa = offset[record];
    papa = echo.bind(entity)(papa);
    kilo[target] = papa;
    target = romeo.RESUB;
    papa = offset[config];
    papa = echo.bind(entity)(papa);
    kilo[target] = papa;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_1;
    kilo = {};
    target = romeo.ACTIVE;
    papa = 15;
    papa = offset[papa];
    papa = echo.bind(entity)(papa);
    kilo[target] = papa;
    target = romeo.ERROR;
    papa = offset[record];
    papa = echo.bind(entity)(papa);
    kilo[target] = papa;
    target = romeo.RESUB;
    papa = offset[config];
    papa = echo.bind(entity)(papa);
    kilo[target] = papa;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_2;
    kilo = {};
    papa = romeo.ACTIVE;
    context = offset[context];
    context = echo.bind(entity)(context);
    kilo[papa] = context;
    context = romeo.ERROR;
    record = offset[record];
    record = echo.bind(entity)(record);
    kilo[context] = record;
    record = romeo.RESUB;
    config = offset[config];
    config = echo.bind(entity)(config);
    kilo[record] = config;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.PREMIUM_GUILD;
    kilo = {};
    config = romeo.ACTIVE;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    config = romeo.ERROR;
    sequence = 18;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    config = romeo.RESUB;
    sequence = 19;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    options[sizing] = kilo;
    var _closure1_slot19 = options;
    options = {};
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.BUNDLE;
    kilo = {};
    record = romeo.ACTIVE;
    sequence = 20;
    config = offset[sequence];
    config = echo.bind(entity)(config);
    kilo[record] = config;
    record = romeo.ERROR;
    config = offset[sequence];
    config = echo.bind(entity)(config);
    kilo[record] = config;
    config = romeo.RESUB;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_0;
    kilo = {};
    config = romeo.ACTIVE;
    sequence = 21;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    config = romeo.ERROR;
    sequence = 22;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    config = romeo.RESUB;
    sequence = 23;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_1;
    kilo = {};
    config = romeo.ACTIVE;
    sequence = 24;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    config = romeo.ERROR;
    sequence = 25;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    config = romeo.RESUB;
    sequence = 26;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_2;
    kilo = {};
    config = romeo.ACTIVE;
    sequence = 27;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    config = romeo.ERROR;
    sequence = 28;
    sequence = offset[sequence];
    sequence = echo.bind(entity)(sequence);
    kilo[config] = sequence;
    sequence = romeo.RESUB;
    vacuum = offset[vacuum];
    vacuum = echo.bind(entity)(vacuum);
    kilo[sequence] = vacuum;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.PREMIUM_GUILD;
    kilo = {};
    sequence = romeo.ACTIVE;
    vacuum = 30;
    vacuum = offset[vacuum];
    vacuum = echo.bind(entity)(vacuum);
    kilo[sequence] = vacuum;
    sequence = romeo.ERROR;
    vacuum = 31;
    vacuum = offset[vacuum];
    vacuum = echo.bind(entity)(vacuum);
    kilo[sequence] = vacuum;
    vacuum = romeo.RESUB;
    control = offset[control];
    control = echo.bind(entity)(control);
    kilo[vacuum] = control;
    options[sizing] = kilo;
    var _closure1_slot20 = options;
    options = {};
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.BUNDLE;
    kilo = {};
    vacuum = romeo.ACTIVE;
    control = foxtrot.imageBundle;
    kilo[vacuum] = control;
    vacuum = romeo.ERROR;
    control = foxtrot.imageBundle;
    kilo[vacuum] = control;
    vacuum = romeo.RESUB;
    control = foxtrot.imageBundle;
    kilo[vacuum] = control;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_0;
    kilo = {};
    vacuum = romeo.ACTIVE;
    control = foxtrot.imageTier0;
    kilo[vacuum] = control;
    vacuum = romeo.ERROR;
    control = foxtrot.imagePremiumNonActive;
    kilo[vacuum] = control;
    vacuum = romeo.RESUB;
    control = foxtrot.imagePremiumNonActive;
    kilo[vacuum] = control;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_1;
    kilo = {};
    vacuum = romeo.ACTIVE;
    control = foxtrot.imageTier1;
    kilo[vacuum] = control;
    vacuum = romeo.ERROR;
    control = foxtrot.imagePremiumNonActive;
    kilo[vacuum] = control;
    vacuum = romeo.RESUB;
    control = foxtrot.imagePremiumNonActive;
    kilo[vacuum] = control;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_2;
    kilo = {};
    vacuum = romeo.ACTIVE;
    control = foxtrot.imageTier2;
    kilo[vacuum] = control;
    vacuum = romeo.ERROR;
    control = foxtrot.imagePremiumNonActive;
    kilo[vacuum] = control;
    vacuum = romeo.RESUB;
    control = foxtrot.imagePremiumNonActive;
    kilo[vacuum] = control;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.PREMIUM_GUILD;
    kilo = {};
    vacuum = romeo.ACTIVE;
    control = foxtrot.imagePremiumGuild;
    kilo[vacuum] = control;
    vacuum = romeo.ERROR;
    control = foxtrot.imagePremiumGuildNonActive;
    kilo[vacuum] = control;
    vacuum = romeo.RESUB;
    control = foxtrot.imagePremiumGuildNonActive;
    kilo[vacuum] = control;
    options[sizing] = kilo;
    var _closure1_slot21 = options;
    options = {};
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.BUNDLE;
    kilo = {};
    vacuum = romeo.ACTIVE;
    control = offset[source];
    control = echo.bind(entity)(control);
    kilo[vacuum] = control;
    control = romeo.ERROR;
    source = offset[source];
    source = echo.bind(entity)(source);
    kilo[control] = source;
    control = romeo.RESUB;
    source = 34;
    source = offset[source];
    source = echo.bind(entity)(source);
    kilo[control] = source;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_0;
    kilo = {};
    control = romeo.ACTIVE;
    source = offset[update];
    source = echo.bind(entity)(source);
    kilo[control] = source;
    source = romeo.ERROR;
    update = offset[update];
    update = echo.bind(entity)(update);
    kilo[source] = update;
    update = romeo.RESUB;
    result = offset[result];
    result = echo.bind(entity)(result);
    kilo[update] = result;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_1;
    kilo = {};
    update = romeo.ACTIVE;
    result = offset[output];
    result = echo.bind(entity)(result);
    kilo[update] = result;
    result = romeo.ERROR;
    output = offset[output];
    output = echo.bind(entity)(output);
    kilo[result] = output;
    result = romeo.RESUB;
    output = 38;
    output = offset[output];
    output = echo.bind(entity)(output);
    kilo[result] = output;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_2;
    kilo = {};
    update = romeo.ACTIVE;
    output = 39;
    result = offset[output];
    result = echo.bind(entity)(result);
    kilo[update] = result;
    result = romeo.ERROR;
    output = offset[output];
    output = echo.bind(entity)(output);
    kilo[result] = output;
    result = romeo.RESUB;
    output = 40;
    output = offset[output];
    output = echo.bind(entity)(output);
    kilo[result] = output;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.PREMIUM_GUILD;
    kilo = {};
    update = romeo.ACTIVE;
    output = 41;
    result = offset[output];
    result = echo.bind(entity)(result);
    kilo[update] = result;
    result = romeo.ERROR;
    output = offset[output];
    output = echo.bind(entity)(output);
    kilo[result] = output;
    result = romeo.RESUB;
    output = 42;
    output = offset[output];
    output = echo.bind(entity)(output);
    kilo[result] = output;
    options[sizing] = kilo;
    var _closure1_slot22 = options;
    options = {};
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.BUNDLE;
    kilo = foxtrot.logoPremiumBundle;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_0;
    kilo = foxtrot.logoPremiumTier0;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_1;
    kilo = foxtrot.logoPremiumTier1;
    options[sizing] = kilo;
    kilo = offset[backup];
    kilo = verify.bind(entity)(kilo);
    kilo = kilo.Branding;
    sizing = kilo.TIER_2;
    kilo = foxtrot.logoPremiumTier2;
    options[sizing] = kilo;
    backup = offset[backup];
    backup = verify.bind(entity)(backup);
    backup = backup.Branding;
    backup = backup.PREMIUM_GUILD;
    foxtrot = foxtrot.logoPremiumGuild;
    options[backup] = foxtrot;
    var _closure1_slot23 = options;
    options = {};
    backup = romeo.ACTIVE;
    foxtrot = yankee.price;
    options[backup] = foxtrot;
    backup = romeo.ERROR;
    foxtrot = yankee.price;
    options[backup] = foxtrot;
    romeo = romeo.RESUB;
    yankee = yankee.priceDark;
    options[romeo] = yankee;
    var _closure1_slot24 = options;
    options = 61;
    options = offset[options];
    offset = verify.bind(entity)(options);
    verify = offset.fileFinishedImporting;
    options = 'components_native/premium/PremiumSubscriptionDetails.tsx';
    options = verify.bind(offset)(options);
    golf = function(argFoo) { // Original name: PremiumSubscriptionDetails
        _fun00013: for(var _fun00014_ip = 0; ; ) switch(_fun00014_ip) {
 0:
            entity = argFoo;
            oscar = entity.style;
            foxtrot = entity.onClickManagePremiumGuild;
            sizing = entity.subscription;
            entity = _closure1_slot17;
            report = undefined;
            yankee = entity.bind(report)();
            golf = _closure1_slot1;
            verify = _closure1_slot2;
            entity = 50;
            entity = verify[entity];
            entity = golf.bind(report)(entity);
            entity = entity.bind(report)();
            tango = entity.analyticsLocations;
            mike = _closure1_slot0;
            entity = 57;
            entity = verify[entity];
            zulu = mike.bind(report)(entity);
            mike = zulu.useSubscriptionInvoicePreview;
            entity = {};
            offset = sizing.id;
            entity['subscriptionId'] = offset;
            offset = true;
            entity['renewal'] = offset;
            entity['analyticsLocations'] = tango;
            tango = 58;
            tango = verify[tango];
            tango = golf.bind(report)(tango);
            tango = tango.PREMIUM_SUBSCRIPTION_DETAILS;
            entity['analyticsLocation'] = tango;
            zulu = mike.bind(zulu)(entity);
            mike = _closure1_slot3;
            entity = 1;
            mike = mike.bind(report)(zulu, entity);
            entity = 0;
            kilo = mike[entity];
            offset = null;
            mike = offset == kilo;
            entity = null;
            if(mike) { _fun00014_ip = 602; continue _fun00013 }
 170:
            tango = _closure1_slot16;
            zulu = _closure1_slot7;
            mike = {};
            mike['style'] = oscar;
            romeo = _closure1_slot15;
            update = _closure1_slot0;
            output = _closure1_slot2;
            golf = 56;
            oscar = output[golf];
            oscar = update.bind(report)(oscar);
            verify = oscar.Text;
            oscar = {'style': null, 'accessibilityRole': 'header', 'variant': 'eyebrow', 'color': 'header-secondary'};
            backup = yankee.title;
            oscar['style'] = backup;
            backup = 55;
            result = output[backup];
            result = update.bind(report)(result);
            echo = result.intl;
            result = echo.string;
            output = output[backup];
            output = update.bind(report)(output);
            output = output.t;
            output = output.ITurwc;
            output = result.bind(echo)(output);
            oscar['children'] = output;
            verify = romeo.bind(report)(verify, oscar);
            oscar = new Array(5);
            oscar[0] = verify;
            verify = sizing.renewalMutations;
            verify = offset != verify;
            if(!verify) { _fun00014_ip = 335; continue _fun00013 }
 316:
            romeo = sizing.status;
            offset = _closure1_slot13;
            offset = offset.CANCELED;
            verify = romeo !== offset;
 335:
            if(!verify) { _fun00014_ip = 386; continue _fun00013 }
 338:
            output = _closure1_slot15;
            romeo = _closure1_slot1;
            result = _closure1_slot2;
            offset = 59;
            offset = result[offset];
            romeo = romeo.bind(report)(offset);
            offset = {};
            offset['subscription'] = sizing;
            result = sizing.renewalMutations;
            offset['renewalMutations'] = result;
            verify = output.bind(report)(romeo, offset);
 386:
            oscar[1] = verify;
            offset = sizing.status;
            verify = _closure1_slot13;
            verify = verify.ACCOUNT_HOLD;
            verify = offset === verify;
            if(!verify) { _fun00014_ip = 449; continue _fun00013 }
 412:
            output = _closure1_slot15;
            romeo = _closure1_slot1;
            result = _closure1_slot2;
            offset = 60;
            offset = result[offset];
            romeo = romeo.bind(report)(offset);
            offset = {};
            offset['subscription'] = sizing;
            verify = output.bind(report)(romeo, offset);
 449:
            oscar[2] = verify;
            romeo = _closure1_slot15;
            offset = _closure1_slot35;
            verify = {};
            verify['subscription'] = sizing;
            verify['renewalInvoicePreview'] = kilo;
            verify['onClickManagePremiumGuild'] = foxtrot;
            verify = romeo.bind(report)(offset, verify);
            oscar[3] = verify;
            verify = _closure1_slot15;
            foxtrot = _closure1_slot0;
            offset = _closure1_slot2;
            golf = offset[golf];
            golf = foxtrot.bind(report)(golf);
            options = golf.Text;
            golf = {};
            yankee = yankee.desktopSubtext;
            golf['style'] = yankee;
            yankee = 'text-sm/medium';
            golf['variant'] = yankee;
            yankee = offset[backup];
            yankee = foxtrot.bind(report)(yankee);
            romeo = yankee.intl;
            yankee = romeo.string;
            offset = offset[backup];
            offset = foxtrot.bind(report)(offset);
            offset = offset.t;
            offset = offset.MTG+3N;
            offset = yankee.bind(romeo)(offset);
            golf['children'] = offset;
            golf = verify.bind(report)(options, golf);
            oscar[4] = golf;
            mike['children'] = oscar;
            entity = tango.bind(report)(zulu, mike);
 602:
            return entity;
        }
    };
    zulu['default'] = golf;
    zulu['onCancelClick'] = oscar;
    zulu['handleManageSubscription'] = report;
    zulu['onResubscribeClick'] = tango;
    zulu['PremiumSubscriptionHeader'] = mike;
    return entity;
})();