// app/components_native/premium/PremiumSubscriptionUpsell.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    golfie = tangon.Image;
    var _closure1_slot4 = golfie;
    foxtra = tangon.StyleSheet;
    kiloes = 2;
    tangon = oscard[kiloes];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    backup = tangon.Fonts;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.NUM_FREE_GUILD_BOOSTS_WITH_PREMIUM;
    var _closure1_slot7 = golfie;
    tangon = tangon.GUILD_BOOST_COST_FOR_PREMIUM_USER_DISCOUNT_PERCENT;
    var _closure1_slot8 = tangon;
    tangon = 6;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.jsx;
    var _closure1_slot9 = golfie;
    golfie = oscard[tangon];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.Fragment;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsxs;
    var _closure1_slot11 = tangon;
    tangon = 7;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 'center';
    verify['textAlign'] = offset;
    tangon['title'] = verify;
    romeon = 20;
    offset = 8;
    verify = {'lineHeight': 20, 'marginTop': 8, 'textAlign': 'center'};
    tangon['subtitle'] = verify;
    verify = {};
    sizing = 32;
    verify['paddingTop'] = sizing;
    foxtra = foxtra.hairlineWidth;
    foxtra = kiloes * foxtra;
    verify['borderTopWidth'] = foxtra;
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_MODIFIER_ACCENT;
    verify['borderTopColor'] = foxtra;
    tangon['upsell'] = verify;
    verify = {'borderRadius': null, 'padding': 16, 'alignItems': 'center'};
    foxtra = oscard[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xs;
    verify['borderRadius'] = foxtra;
    foxtra = 16;
    tangon['upsellCard'] = verify;
    verify = {'borderRadius': null, 'padding': 16, 'marginTop': 12, 'alignSelf': 'stretch'};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.radii;
    kiloes = kiloes.sm;
    verify['borderRadius'] = kiloes;
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.colors;
    kiloes = kiloes.BACKGROUND_MODIFIER_ACCENT;
    verify['backgroundColor'] = kiloes;
    tangon['upsellFeatures'] = verify;
    verify = {'alignSelf': 'center', 'height': 10, 'width': 54};
    tangon['upsellFeatureSubLogo'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['upsellFeatureList'] = verify;
    verify = {};
    verify['marginTop'] = foxtra;
    tangon['upsellButton'] = verify;
    verify = {'alignSelf': 'center', 'height': 20, 'marginTop': 6, 'width': 84};
    tangon['upsellFeatureLogoTier2'] = verify;
    verify = {};
    kiloes = oscard[offset];
    kiloes = yankee.bind(entity)(kiloes);
    kiloes = kiloes.unsafe_rawColors;
    kiloes = kiloes.WHITE_500;
    verify['color'] = kiloes;
    backup = backup.PRIMARY_SEMIBOLD;
    verify['fontFamily'] = backup;
    verify['fontSize'] = foxtra;
    verify['lineHeight'] = romeon;
    tangon['upsellLabel'] = verify;
    verify = {'paddingVertical': 0, 'marginTop': 8};
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.unsafe_rawColors;
    romeon = romeon.WHITE_500;
    verify['color'] = romeon;
    tangon['upsellRow'] = verify;
    verify = {};
    romeon = 9;
    romeon = oscard[romeon];
    foxtra = report.bind(entity)(romeon);
    romeon = foxtra.hexWithOpacity;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    yankee = offset.WHITE_500;
    offset = 0.5;
    offset = romeon.bind(foxtra)(yankee, offset);
    verify['color'] = offset;
    tangon['upsellLabelMuted'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot12 = tangon;
    tangon = 22;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'components_native/premium/PremiumSubscriptionUpsell.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            kiloes = entity.onLearnMorePremium;
            golfie = entity.style;
            entity = _closure1_slot12;
            report = undefined;
            foxtra = entity.bind(report)();
            zuuluu = _closure1_slot0;
            entity = _closure1_slot2;
            michal = 13;
            michal = entity[michal];
            oscard = zuuluu.bind(report)(michal);
            tangon = oscard.useStateFromStores;
            michal = _closure1_slot6;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                michal = _closure1_slot6;
                entity = michal.getCurrentUser;
                entity = entity.bind(michal)();
                return entity;
            };
            yankee = tangon.bind(oscard)(zuuluu, michal);
            michal = _closure1_slot1;
            romeon = 14;
            entity = entity[romeon];
            michal = michal.bind(report)(entity);
            entity = michal.canUsePremiumGuildMemberProfile;
            michal = entity.bind(michal)(yankee);
            entity = null;
            if(michal) { _fun00002_ip = 1261; continue _fun00001 }
 114:
            tangon = _closure1_slot9;
            zuuluu = _closure1_slot3;
            michal = {};
            option = foxtra.upsell;
            oscard = new Array(2);
            oscard[0] = option;
            oscard[1] = golfie;
            michal['style'] = oscard;
            option = _closure1_slot11;
            offset = _closure1_slot1;
            verify = _closure1_slot2;
            oscard = 15;
            oscard = verify[oscard];
            golfie = offset.bind(report)(oscard);
            oscard = {};
            backup = foxtra.upsellCard;
            oscard['style'] = backup;
            sizing = _closure1_slot0;
            backup = 16;
            output = verify[backup];
            output = sizing.bind(report)(output);
            output = output.HorizontalGradient;
            output = output.START;
            oscard['start'] = output;
            output = verify[backup];
            output = sizing.bind(report)(output);
            output = output.HorizontalGradient;
            output = output.END;
            oscard['end'] = output;
            backup = verify[backup];
            backup = sizing.bind(report)(backup);
            backup = backup.Gradients;
            backup = backup.PREMIUM_GUILD;
            oscard['colors'] = backup;
            verify = verify[romeon];
            offset = offset.bind(report)(verify);
            verify = offset.isPremium;
            verify = verify.bind(offset)(yankee);
            if(verify) { _fun00002_ip = 405; continue _fun00001 }
 287:
            yankee = _closure1_slot9;
            output = _closure1_slot0;
            result = _closure1_slot2;
            verify = 17;
            verify = result[verify];
            verify = output.bind(report)(verify);
            offset = verify.Text;
            verify = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/semibold', 'color': 'always-white'};
            romeon = foxtra.title;
            verify['style'] = romeon;
            romeon = 11;
            backup = result[romeon];
            backup = output.bind(report)(backup);
            sizing = backup.intl;
            backup = sizing.string;
            romeon = result[romeon];
            romeon = output.bind(report)(romeon);
            romeon = romeon.t;
            romeon = romeon.qUl+Ky;
            romeon = backup.bind(sizing)(romeon);
            verify['children'] = romeon;
            offset = yankee.bind(report)(offset, verify);
            _fun00002_ip = 658; continue _fun00001;
 405:
            romeon = _closure1_slot11;
            yankee = _closure1_slot10;
            verify = {};
            result = _closure1_slot9;
            update = _closure1_slot0;
            vacuum = _closure1_slot2;
            sizing = 17;
            backup = vacuum[sizing];
            backup = update.bind(report)(backup);
            output = backup.Text;
            backup = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-lg/semibold', 'color': 'always-white'};
            echoed = foxtra.title;
            backup['style'] = echoed;
            echoed = 11;
            source = vacuum[echoed];
            source = update.bind(report)(source);
            sequen = source.intl;
            ctrled = sequen.string;
            source = vacuum[echoed];
            source = update.bind(report)(source);
            source = source.t;
            source = source.YYfHl5;
            source = ctrled.bind(sequen)(source);
            backup['children'] = source;
            output = result.bind(report)(output, backup);
            backup = new Array(2);
            backup[0] = output;
            sizing = vacuum[sizing];
            sizing = update.bind(report)(sizing);
            output = sizing.Text;
            sizing = {'style': null, 'variant': 'text-md/semibold', 'color': 'always-white'};
            source = foxtra.subtitle;
            sizing['style'] = source;
            source = vacuum[echoed];
            source = update.bind(report)(source);
            ctrled = source.intl;
            source = ctrled.format;
            echoed = vacuum[echoed];
            echoed = update.bind(report)(echoed);
            echoed = echoed.t;
            update = echoed.Af0zER;
            echoed = {};
            vacuum = _closure1_slot7;
            echoed['numFreeGuildSubscriptions'] = vacuum;
            echoed = source.bind(ctrled)(update, echoed);
            sizing['children'] = echoed;
            sizing = result.bind(report)(output, sizing);
            backup[1] = sizing;
            verify['children'] = backup;
            offset = romeon.bind(report)(yankee, verify);
 658:
            verify = new Array(3);
            verify[0] = offset;
            backup = _closure1_slot11;
            romeon = _closure1_slot3;
            offset = {};
            yankee = foxtra.upsellFeatures;
            offset['style'] = yankee;
            yankee = _closure1_slot9;
            result = _closure1_slot4;
            sizing = {};
            output = foxtra.upsellFeatureSubLogo;
            sizing['style'] = output;
            config = _closure1_slot1;
            update = _closure1_slot2;
            output = 18;
            output = update[output];
            output = config.bind(report)(output);
            sizing['source'] = output;
            sizing = yankee.bind(report)(result, sizing);
            output = new Array(3);
            output[0] = sizing;
            sizing = {};
            echoed = foxtra.upsellFeatureLogoTier2;
            sizing['style'] = echoed;
            echoed = 19;
            echoed = update[echoed];
            echoed = config.bind(report)(echoed);
            sizing['source'] = echoed;
            sizing = yankee.bind(report)(result, sizing);
            output[1] = sizing;
            sizing = 20;
            sizing = update[sizing];
            source = config.bind(report)(sizing);
            result = {};
            sizing = foxtra.upsellFeatureList;
            result['style'] = sizing;
            vacuum = {};
            record = 10;
            sizing = update[record];
            sizing = config.bind(report)(sizing);
            vacuum['icon'] = sizing;
            echoed = _closure1_slot0;
            sizing = 11;
            ctrled = update[sizing];
            ctrled = echoed.bind(report)(ctrled);
            papara = ctrled.intl;
            cntext = papara.formatToPlainString;
            ctrled = update[sizing];
            ctrled = echoed.bind(report)(ctrled);
            ctrled = ctrled.t;
            sequen = ctrled.P3aEj4;
            ctrled = {};
            target = 12;
            target = update[target];
            whisks = echoed.bind(report)(target);
            limora = whisks.formatPercent;
            target = _closure1_slot5;
            sierra = target.locale;
            equals = _closure1_slot8;
            target = 100;
            target = equals / target;
            target = limora.bind(whisks)(sierra, target);
            ctrled['discountPercentage'] = target;
            ctrled = cntext.bind(papara)(sequen, ctrled);
            vacuum['label'] = ctrled;
            sequen = 8;
            ctrled = update[sequen];
            ctrled = config.bind(report)(ctrled);
            ctrled = ctrled.unsafe_rawColors;
            ctrled = ctrled.WHITE_500;
            vacuum['color'] = ctrled;
            ctrled = new Array(2);
            ctrled[0] = vacuum;
            vacuum = {};
            record = update[record];
            record = config.bind(report)(record);
            vacuum['icon'] = record;
            record = update[sizing];
            record = echoed.bind(report)(record);
            target = record.intl;
            papara = target.formatToPlainString;
            record = update[sizing];
            record = echoed.bind(report)(record);
            record = record.t;
            cntext = record.NtlzbW;
            record = {};
            status = _closure1_slot7;
            record['numFreeGuildSubscriptions'] = status;
            record = papara.bind(target)(cntext, record);
            vacuum['label'] = record;
            sequen = update[sequen];
            sequen = config.bind(report)(sequen);
            sequen = sequen.unsafe_rawColors;
            sequen = sequen.WHITE_500;
            vacuum['color'] = sequen;
            ctrled[1] = vacuum;
            result['features'] = ctrled;
            ctrled = foxtra.upsellLabel;
            result['labelStyle'] = ctrled;
            ctrled = foxtra.upsellRow;
            result['rowStyle'] = ctrled;
            result = yankee.bind(report)(source, result);
            output[2] = result;
            offset['children'] = output;
            offset = backup.bind(report)(romeon, offset);
            verify[1] = offset;
            offset = {};
            foxtra = foxtra.upsellButton;
            offset['style'] = foxtra;
            foxtra = 21;
            foxtra = update[foxtra];
            foxtra = echoed.bind(report)(foxtra);
            backup = foxtra.Button;
            foxtra = {};
            output = 'experimental_premium-secondary';
            foxtra['variant'] = output;
            output = update[sizing];
            output = echoed.bind(report)(output);
            result = output.intl;
            output = result.string;
            sizing = update[sizing];
            sizing = echoed.bind(report)(sizing);
            sizing = sizing.t;
            sizing = sizing.fJOECg;
            sizing = output.bind(result)(sizing);
            foxtra['text'] = sizing;
            foxtra['onPress'] = kiloes;
            foxtra = yankee.bind(report)(backup, foxtra);
            offset['children'] = foxtra;
            offset = yankee.bind(report)(romeon, offset);
            verify[2] = offset;
            oscard['children'] = verify;
            oscard = option.bind(report)(golfie, oscard);
            michal['children'] = oscard;
            entity = tangon.bind(report)(zuuluu, michal);
 1261:
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();