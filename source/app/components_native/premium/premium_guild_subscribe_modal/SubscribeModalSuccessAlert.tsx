// app/components_native/premium/premium_guild_subscribe_modal/SubscribeModalSuccessAlert.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot5 = golfie;
    tangon = tangon.Image;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = romeon.bind(entity)(tangon);
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot8 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    offset = 24;
    verify = {'paddingHorizontal': 24, 'paddingBottom': 16, 'paddingTop': 4, 'alignItems': 'stretch'};
    tangon['wrapper'] = verify;
    verify = {'width': 'auto', 'height': 112, 'alignSelf': 'center'};
    tangon['animation'] = verify;
    verify = {'lineHeight': 18, 'textAlign': 'center'};
    tangon['text'] = verify;
    verify = {'padding': 2, 'borderRadius': null, 'marginTop': 8};
    yankee = 6;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.xs;
    verify['borderRadius'] = foxtra;
    tangon['activated'] = verify;
    verify = {'backgroundColor': null, 'paddingVertical': 12, 'paddingHorizontal': 20, 'alignItems': 'center'};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BACKGROUND_PRIMARY;
    verify['backgroundColor'] = yankee;
    tangon['activatedBackground'] = verify;
    verify = {};
    yankee = 220;
    verify['width'] = yankee;
    tangon['activatedImage'] = verify;
    verify = {};
    verify['marginTop'] = offset;
    tangon['successInfo'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot10 = tangon;
    golfie = {};
    tangon = 'entry';
    golfie['ENTRY'] = tangon;
    tangon = 'idle';
    golfie['IDLE'] = tangon;
    tangon = {};
    verify = golfie.ENTRY;
    option = {'BEG': 0, 'END': 180};
    tangon[verify] = option;
    verify = golfie.IDLE;
    option = {'BEG': 180, 'END': 360};
    tangon[verify] = option;
    var _closure1_slot11 = tangon;
    tangon = function(argFoo) { // Original name: PremiumPaymentGuildAnimation
        entity = argFoo;
        offset = entity.nextScene;
        verify = entity.onSceneComplete;
        option = entity.loop;
        entity = _closure1_slot10;
        tangon = undefined;
        oscard = entity.bind(tangon)();
        zuuluu = _closure1_slot8;
        michal = _closure1_slot1;
        golfie = _closure1_slot2;
        entity = 7;
        entity = golfie[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        entity['nextScene'] = offset;
        entity['onSceneComplete'] = verify;
        entity['loop'] = option;
        option = _closure1_slot11;
        entity['sceneSegments'] = option;
        oscard = oscard.animation;
        entity['style'] = oscard;
        oscard = _closure1_slot0;
        report = 8;
        report = golfie[report];
        report = oscard.bind(tangon)(report);
        entity['source'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot12 = tangon;
    tangon['Scenes'] = golfie;
    tangon = 21;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'components_native/premium/premium_guild_subscribe_modal/SubscribeModalSuccessAlert.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SubscribeModalSuccessAlert
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            michal = entity.guildId;
            var _closure2_slot0 = michal;
            vacuum = entity.previousGuildSubscriptionSlot;
            entity = _closure1_slot10;
            tangon = undefined;
            echoed = entity.bind(tangon)();
            sizing = _closure1_slot0;
            result = _closure1_slot2;
            entity = 9;
            entity = result[entity];
            report = sizing.bind(tangon)(entity);
            zuuluu = report.useStateFromStores;
            entity = _closure1_slot7;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                zuuluu = _closure1_slot7;
                michal = zuuluu.getGuild;
                entity = _closure2_slot0;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            source = zuuluu.bind(report)(michal, entity);
            verify = _closure1_slot4;
            michal = verify.useState;
            oscard = _closure1_slot12;
            entity = oscard.Scenes;
            entity = entity.ENTRY;
            entity = michal.bind(verify)(entity);
            report = _closure1_slot3;
            zuuluu = 2;
            entity = report.bind(tangon)(entity, zuuluu);
            michal = 0;
            yankee = entity[michal];
            update = 1;
            entity = entity[update];
            var _closure2_slot1 = entity;
            option = verify.useState;
            entity = false;
            entity = option.bind(verify)(entity);
            entity = report.bind(tangon)(entity, zuuluu);
            option = entity[michal];
            entity = entity[update];
            var _closure2_slot2 = entity;
            verify = _closure1_slot1;
            entity = 10;
            entity = result[entity];
            entity = verify.bind(tangon)(entity);
            output = entity.bind(tangon)();
            zuuluu = _closure1_slot9;
            entity = 11;
            entity = result[entity];
            michal = verify.bind(tangon)(entity);
            entity = {};
            report = echoed.wrapper;
            entity['style'] = report;
            ctrled = 12;
            report = result[ctrled];
            report = sizing.bind(tangon)(report);
            romeon = report.intl;
            offset = romeon.string;
            report = result[ctrled];
            report = sizing.bind(tangon)(report);
            report = report.t;
            report = report.YKxJCA;
            report = offset.bind(romeon)(report);
            entity['confirmText'] = report;
            report = function() { // Original name: onConfirm
                report = _closure1_slot1;
                tangon = _closure1_slot2;
                entity = 13;
                zuuluu = tangon[entity];
                entity = undefined;
                report = report.bind(entity)(zuuluu);
                zuuluu = report.close;
                zuuluu = zuuluu.bind(report)();
                zuuluu = _closure1_slot0;
                michal = 14;
                michal = tangon[michal];
                zuuluu = zuuluu.bind(entity)(michal);
                michal = zuuluu.closeApplyBoostModal;
                michal = michal.bind(zuuluu)();
                return entity;
            };
            entity['onConfirm'] = report;
            offset = _closure1_slot8;
            report = {};
            report['nextScene'] = yankee;
            report['loop'] = option;
            golfie = function(argFoo) { // Original name: onSceneComplete
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    zuuluu = argFoo;
                    michal = _closure1_slot12;
                    michal = michal.Scenes;
                    michal = michal.ENTRY;
                    if(!(michal !== zuuluu)) { _fun00004_ip = 68; continue _fun00003 }
 26:
                    michal = _closure1_slot12;
                    michal = michal.Scenes;
                    michal = michal.IDLE;
                    if(!(michal !== zuuluu)) { _fun00004_ip = 50; continue _fun00003 }
 46:
                    michal = undefined;
                    return michal;
 50:
                    tangon = _closure2_slot2;
                    zuuluu = undefined;
                    michal = true;
                    michal = tangon.bind(zuuluu)(michal);
                    return michal;
 68:
                    zuuluu = _closure2_slot1;
                    entity = _closure1_slot12;
                    entity = entity.Scenes;
                    michal = entity.IDLE;
                    entity = undefined;
                    entity = zuuluu.bind(entity)(michal);
                    return entity;
                }
            };
            report['onSceneComplete'] = golfie;
            oscard = offset.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            golfie = _closure1_slot5;
            oscard = {};
            option = 15;
            option = result[option];
            verify = verify.bind(tangon)(option);
            option = {};
            yankee = echoed.activated;
            option['style'] = yankee;
            yankee = 16;
            romeon = result[yankee];
            romeon = sizing.bind(tangon)(romeon);
            romeon = romeon.HorizontalGradient;
            romeon = romeon.START;
            option['start'] = romeon;
            romeon = result[yankee];
            romeon = sizing.bind(tangon)(romeon);
            romeon = romeon.HorizontalGradient;
            romeon = romeon.END;
            option['end'] = romeon;
            yankee = result[yankee];
            yankee = sizing.bind(tangon)(yankee);
            yankee = yankee.Gradients;
            yankee = yankee.PREMIUM_GUILD;
            option['colors'] = yankee;
            yankee = {};
            romeon = echoed.activatedBackground;
            yankee['style'] = romeon;
            foxtra = _closure1_slot6;
            romeon = {};
            kiloes = echoed.activatedImage;
            romeon['style'] = kiloes;
            kiloes = 17;
            kiloes = result[kiloes];
            sizing = sizing.bind(tangon)(kiloes);
            kiloes = sizing.isThemeLight;
            kiloes = kiloes.bind(sizing)(output);
            output = _closure1_slot1;
            result = _closure1_slot2;
            if(kiloes) { _fun00002_ip = 513; continue _fun00001 }
 499:
            kiloes = 19;
            kiloes = result[kiloes];
            kiloes = output.bind(tangon)(kiloes);
            _fun00002_ip = 525; continue _fun00001;
 513:
            sizing = 18;
            sizing = result[sizing];
            kiloes = output.bind(tangon)(sizing);
 525:
            romeon['source'] = kiloes;
            romeon = offset.bind(tangon)(foxtra, romeon);
            yankee['children'] = romeon;
            yankee = offset.bind(tangon)(golfie, yankee);
            option['children'] = yankee;
            verify = offset.bind(tangon)(verify, option);
            option = new Array(2);
            option[0] = verify;
            yankee = _closure1_slot9;
            offset = _closure1_slot5;
            verify = {};
            romeon = echoed.successInfo;
            verify['style'] = romeon;
            sizing = _closure1_slot8;
            kiloes = _closure1_slot0;
            romeon = _closure1_slot2;
            foxtra = 20;
            romeon = romeon[foxtra];
            romeon = kiloes.bind(tangon)(romeon);
            kiloes = romeon.Text;
            romeon = {};
            output = echoed.text;
            romeon['style'] = output;
            result = 'text-sm/medium';
            romeon['variant'] = result;
            output = null;
            if(!(output == vacuum)) { _fun00002_ip = 693; continue _fun00001 }
 637:
            config = _closure1_slot0;
            output = _closure1_slot2;
            vacuum = output[ctrled];
            vacuum = config.bind(tangon)(vacuum);
            sequen = vacuum.intl;
            vacuum = sequen.string;
            output = output[ctrled];
            output = config.bind(tangon)(output);
            output = output.t;
            output = output.d81BkZ;
            output = vacuum.bind(sequen)(output);
            _fun00002_ip = 747; continue _fun00001;
 693:
            record = _closure1_slot0;
            vacuum = _closure1_slot2;
            sequen = vacuum[ctrled];
            sequen = record.bind(tangon)(sequen);
            config = sequen.intl;
            sequen = config.string;
            vacuum = vacuum[ctrled];
            vacuum = record.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.RMmWY2;
            output = sequen.bind(config)(vacuum);
 747:
            romeon['children'] = output;
            kiloes = sizing.bind(tangon)(kiloes, romeon);
            romeon = new Array(2);
            romeon[0] = kiloes;
            kiloes = _closure1_slot8;
            output = _closure1_slot0;
            sizing = _closure1_slot2;
            foxtra = sizing[foxtra];
            foxtra = output.bind(tangon)(foxtra);
            backup = foxtra.Text;
            foxtra = {};
            echoed = echoed.text;
            foxtra['style'] = echoed;
            foxtra['variant'] = result;
            result = sizing[ctrled];
            result = output.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.format;
            sizing = sizing[ctrled];
            sizing = output.bind(tangon)(sizing);
            sizing = sizing.t;
            output = sizing.r0IGsL;
            sizing = {};
            source = source.name;
            sizing['guildName'] = source;
            sizing['guildSubscriptionQuantity'] = update;
            sizing = result.bind(echoed)(output, sizing);
            foxtra['children'] = sizing;
            foxtra = kiloes.bind(tangon)(backup, foxtra);
            romeon[1] = foxtra;
            verify['children'] = romeon;
            verify = yankee.bind(tangon)(offset, verify);
            option[1] = verify;
            oscard['children'] = option;
            oscard = zuuluu.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();