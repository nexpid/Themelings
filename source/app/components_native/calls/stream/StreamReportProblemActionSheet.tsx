// app/components_native/calls/stream/StreamReportProblemActionSheet.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.AnalyticEvents;
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    offset = 16;
    verify['padding'] = offset;
    offset = 5;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = offset;
    tangon['container'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 18;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'components_native/calls/stream/StreamReportProblemActionSheet.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: ReportProblem
        entity = argFoo;
        zuuluu = entity.stream;
        var _closure2_slot0 = zuuluu;
        entity = entity.analyticsData;
        var _closure2_slot1 = entity;
        zuuluu = _closure1_slot6;
        tangon = undefined;
        golfie = zuuluu.bind(tangon)();
        report = _closure1_slot1;
        offset = _closure1_slot2;
        zuuluu = 6;
        zuuluu = offset[zuuluu];
        oscard = report.bind(tangon)(zuuluu);
        zuuluu = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                entity = 7;
                zuuluu = report[entity];
                entity = undefined;
                golfie = tangon.bind(entity)(zuuluu);
                tangon = golfie.getStreamerApplication;
                oscard = _closure2_slot0;
                zuuluu = _closure1_slot3;
                golfie = tangon.bind(golfie)(oscard, zuuluu);
                tangon = _closure1_slot1;
                zuuluu = 8;
                zuuluu = report[zuuluu];
                report = tangon.bind(entity)(zuuluu);
                tangon = report.track;
                michal = _closure1_slot4;
                zuuluu = michal.OPEN_POPOUT;
                michal = {};
                option = 'Stream Issue Sheet';
                michal['type'] = option;
                oscard = oscard.ownerId;
                michal['other_user_id'] = oscard;
                oscard = null;
                verify = oscard != golfie;
                option = null;
                if(!verify) { _fun00002_ip = 118; continue _fun00001 }
 113:
                option = golfie.id;
 118:
                michal['application_id'] = option;
                verify = oscard != golfie;
                option = null;
                if(!verify) { _fun00002_ip = 137; continue _fun00001 }
 132:
                option = golfie.name;
 137:
                michal['application_name'] = option;
                option = oscard != golfie;
                oscard = null;
                if(!option) { _fun00002_ip = 156; continue _fun00001 }
 151:
                oscard = golfie.id;
 156:
                michal['game_id'] = oscard;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            }
        };
        zuuluu = oscard.bind(tangon)(zuuluu);
        zuuluu = 12;
        zuuluu = offset[zuuluu];
        report = report.bind(tangon)(zuuluu);
        zuuluu = false;
        report = report.bind(tangon)(zuuluu, zuuluu);
        zuuluu = report.map;
        michal = function(argFoo, argBar) {
            michal = argFoo;
            zuuluu = michal.value;
            var _closure3_slot0 = zuuluu;
            oscard = michal.label;
            report = _closure1_slot5;
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 13;
            michal = tangon[michal];
            tangon = undefined;
            michal = zuuluu.bind(tangon)(michal);
            zuuluu = michal.ActionSheetRow;
            michal = {};
            michal['label'] = oscard;
            oscard = true;
            michal['arrow'] = oscard;
            entity = function() { // Original name: onPress
                michal = _closure3_slot0;
                report = _closure1_slot1;
                tangon = _closure1_slot2;
                entity = 9;
                entity = tangon[entity];
                zuuluu = undefined;
                oscard = report.bind(zuuluu)(entity);
                entity = {};
                entity['problem'] = michal;
                yankee = _closure2_slot0;
                entity['stream'] = yankee;
                michal = '';
                entity['feedback'] = michal;
                michal = _closure1_slot0;
                verify = 7;
                verify = tangon[verify];
                offset = michal.bind(zuuluu)(verify);
                verify = offset.getStreamerApplication;
                option = _closure1_slot3;
                option = verify.bind(offset)(yankee, option);
                entity['streamApplication'] = option;
                golfie = _closure2_slot1;
                entity['analyticsData'] = golfie;
                golfie = 'Stream';
                entity['location'] = golfie;
                entity = oscard.bind(zuuluu)(entity);
                entity = 10;
                entity = tangon[entity];
                report = report.bind(zuuluu)(entity);
                entity = report.hideActionSheet;
                entity = entity.bind(report)();
                entity = 11;
                entity = tangon[entity];
                michal = michal.bind(zuuluu)(entity);
                entity = michal.presentFeedbackSent;
                entity = entity.bind(michal)();
                entity = undefined;
                return entity;
            };
            michal['onPress'] = entity;
            entity = argBar;
            entity = report.bind(tangon)(zuuluu, michal, entity);
            return entity;
        };
        verify = zuuluu.bind(report)(michal);
        zuuluu = _closure1_slot5;
        option = _closure1_slot0;
        entity = 14;
        entity = offset[entity];
        entity = option.bind(tangon)(entity);
        michal = entity.ActionSheet;
        entity = {};
        report = true;
        entity['scrollable'] = report;
        report = 15;
        report = offset[report];
        report = option.bind(tangon)(report);
        oscard = report.BottomSheetTitleHeader;
        report = {};
        yankee = 16;
        romeon = offset[yankee];
        romeon = option.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = offset[yankee];
        yankee = option.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.XuqqwM;
        yankee = romeon.bind(foxtra)(yankee);
        report['title'] = yankee;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['header'] = report;
        report = 17;
        report = offset[report];
        report = option.bind(tangon)(report);
        oscard = report.BottomSheetScrollView;
        report = {};
        golfie = golfie.container;
        report['style'] = golfie;
        golfie = 13;
        golfie = offset[golfie];
        golfie = option.bind(tangon)(golfie);
        golfie = golfie.ActionSheetRow;
        option = golfie.Group;
        golfie = {};
        golfie['children'] = verify;
        golfie = zuuluu.bind(tangon)(option, golfie);
        report['children'] = golfie;
        report = zuuluu.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();