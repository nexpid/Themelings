// app/components_native/common/ActionButton.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsx;
    var _closure1_slot5 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'tintColor': null, 'backgroundColor': null, 'borderRadius': null, 'alignItems': 'center', 'justifyContent': 'center', 'width': 32, 'height': 32};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.INTERACTIVE_NORMAL;
    verify['tintColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = romeo;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.lg;
    verify['borderRadius'] = romeo;
    tango['actionButtonContainer'] = verify;
    verify = {};
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.colors;
    romeo = romeo.BUTTON_POSITIVE_BACKGROUND;
    verify['backgroundColor'] = romeo;
    tango['actionButtonContainerPositive'] = verify;
    verify = {};
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.WHITE;
    verify['tintColor'] = offset;
    tango['actionButtonIconPositive'] = verify;
    verify = {};
    tango['actionButtonIconNeutral'] = verify;
    verify = {};
    tango['actionButtonContainerNeutral'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot6 = tango;
    tango = 8;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'components_native/common/ActionButton.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: ActionButton
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            foxtrot = argFoo;
            entity = _closure1_slot6;
            tango = undefined;
            golf = entity.bind(tango)();
            offset = foxtrot.IconComponent;
            mike = foxtrot.type;
            entity = 'neutral';
            if(!(entity !== mike)) { _fun00002_ip = 63; continue _fun00001 }
 37:
            entity = golf.actionButtonIconPositive;
            zulu = new Array(2);
            zulu[0] = entity;
            entity = golf.actionButtonContainerPositive;
            zulu[1] = entity;
            _fun00002_ip = 90; continue _fun00001;
 63:
            mike = golf.actionButtonIconNeutral;
            entity = new Array(2);
            entity[0] = mike;
            mike = golf.actionButtonContainerNeutral;
            entity[1] = mike;
            zulu = entity;
 90:
            mike = _closure1_slot3;
            entity = 2;
            mike = mike.bind(tango)(zulu, entity);
            entity = 0;
            yankee = mike[entity];
            entity = 1;
            verify = mike[entity];
            zulu = _closure1_slot5;
            mike = _closure1_slot4;
            entity = {};
            report = foxtrot.styles;
            entity['style'] = report;
            oscar = _closure1_slot0;
            romeo = _closure1_slot2;
            report = 6;
            report = romeo[report];
            report = oscar.bind(tango)(report);
            oscar = report.PressableOpacity;
            report = {'onPress': null, 'accessibilityElementsHidden': true, 'importantForAccessibility': 'no-hide-descendants'};
            romeo = foxtrot.onPress;
            report['onPress'] = romeo;
            romeo = golf.actionButtonContainer;
            golf = new Array(3);
            golf[0] = romeo;
            golf[1] = verify;
            verify = foxtrot.containerStyles;
            golf[2] = verify;
            report['style'] = golf;
            golf = null;
            if(!(golf == offset)) { _fun00002_ip = 304; continue _fun00001 }
 225:
            romeo = _closure1_slot5;
            kilo = _closure1_slot1;
            sizing = _closure1_slot2;
            backup = 7;
            golf = sizing[backup];
            verify = kilo.bind(tango)(golf);
            golf = {};
            backup = sizing[backup];
            backup = kilo.bind(tango)(backup);
            backup = backup.Sizes;
            backup = backup.SMALL;
            golf['size'] = backup;
            backup = false;
            golf['disableColor'] = backup;
            foxtrot = foxtrot.source;
            golf['source'] = foxtrot;
            golf['style'] = yankee;
            golf = romeo.bind(tango)(verify, golf);
            _fun00002_ip = 328; continue _fun00001;
 304:
            verify = _closure1_slot5;
            options = {};
            romeo = 'sm';
            options['size'] = romeo;
            options['style'] = yankee;
            golf = verify.bind(tango)(offset, options);
 328:
            report['children'] = golf;
            report = zulu.bind(tango)(oscar, report);
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();