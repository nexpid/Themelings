// app/intl/preloader.tsx
export default (function(_, argBar, argBaz, __, ___, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = oscard;
    entity = function() { // Original name: _preloadAllIntlMessageFiles
        report = undefined;
        entity = undefined;
        tangon = _closure1_slot2;
        zuuluu = function* () {
            entity = function* () { // Original name: ?anon_0_
                _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                    StartGenerator();
                    ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                    if(michal) { _fun00002_ip = 421; continue _fun00001 }
 10:
                    michal = global;
                    tangon = michal.Promise;
                    zuuluu = tangon.all;
                    verify = _closure1_slot0;
                    report = _closure1_slot1;
                    golfie = 2;
                    michal = report[golfie];
                    option = undefined;
                    offset = verify.bind(option)(michal);
                    michal = 1;
                    oscard = report[michal];
                    michal = report.paths;
                    oscard = offset.bind(option)(oscard, michal);
                    michal = new Array(12);
                    michal[0] = oscard;
                    oscard = report[golfie];
                    yankee = verify.bind(option)(oscard);
                    oscard = 3;
                    offset = report[oscard];
                    oscard = report.paths;
                    oscard = yankee.bind(option)(offset, oscard);
                    michal[1] = oscard;
                    oscard = report[golfie];
                    yankee = verify.bind(option)(oscard);
                    oscard = 4;
                    offset = report[oscard];
                    oscard = report.paths;
                    oscard = yankee.bind(option)(offset, oscard);
                    michal[2] = oscard;
                    oscard = report[golfie];
                    yankee = verify.bind(option)(oscard);
                    oscard = 5;
                    offset = report[oscard];
                    oscard = report.paths;
                    oscard = yankee.bind(option)(offset, oscard);
                    michal[3] = oscard;
                    oscard = report[golfie];
                    yankee = verify.bind(option)(oscard);
                    oscard = 6;
                    offset = report[oscard];
                    oscard = report.paths;
                    oscard = yankee.bind(option)(offset, oscard);
                    michal[4] = oscard;
                    oscard = report[golfie];
                    yankee = verify.bind(option)(oscard);
                    oscard = 7;
                    offset = report[oscard];
                    oscard = report.paths;
                    oscard = yankee.bind(option)(offset, oscard);
                    michal[5] = oscard;
                    oscard = report[golfie];
                    yankee = verify.bind(option)(oscard);
                    oscard = 8;
                    offset = report[oscard];
                    oscard = report.paths;
                    oscard = yankee.bind(option)(offset, oscard);
                    michal[6] = oscard;
                    oscard = report[golfie];
                    romeon = verify.bind(option)(oscard);
                    oscard = 9;
                    yankee = report[oscard];
                    offset = report.paths;
                    offset = romeon.bind(option)(yankee, offset);
                    michal[7] = offset;
                    offset = report[golfie];
                    romeon = verify.bind(option)(offset);
                    offset = 10;
                    yankee = report[offset];
                    offset = report.paths;
                    offset = romeon.bind(option)(yankee, offset);
                    michal[8] = offset;
                    offset = report[golfie];
                    romeon = verify.bind(option)(offset);
                    offset = 11;
                    yankee = report[offset];
                    offset = report.paths;
                    offset = romeon.bind(option)(yankee, offset);
                    michal[9] = offset;
                    offset = report[golfie];
                    romeon = verify.bind(option)(offset);
                    offset = 12;
                    yankee = report[offset];
                    offset = report.paths;
                    offset = romeon.bind(option)(yankee, offset);
                    michal[10] = offset;
                    golfie = report[golfie];
                    golfie = verify.bind(option)(golfie);
                    oscard = report[oscard];
                    report = report.paths;
                    report = golfie.bind(option)(oscard, report);
                    michal[11] = report;
                    michal = zuuluu.bind(tangon)(michal);
                    return michal;
 421:
                    return entity;
                }
            };
            return entity;
        };
        tangon = tangon.bind(report)(zuuluu);
        _closure1_slot3 = tangon;
        zuuluu = tangon.apply;
        entity = arguments;
        michal = entity;
        entity = this;
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    var _closure1_slot3 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argBaz;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot2 = tangon;
    tangon = 13;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'intl/preloader.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function() { // Original name: preloadAllIntlMessageFiles
        entity = undefined;
        tangon = _closure1_slot3;
        zuuluu = tangon.apply;
        entity = arguments;
        michal = entity;
        entity = this;
        entity = zuuluu.bind(tangon)(entity, michal);
        return entity;
    };
    zuuluu['preloadAllIntlMessageFiles'] = michal;
    return entity;
})();