// app/actions/native/MessagePreviewActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    golfie = michal.Endpoints;
    var _closure1_slot3 = golfie;
    michal = michal.MAX_MESSAGES_PER_CHANNEL;
    var _closure1_slot4 = michal;
    michal = {};
    golfie = function(argFoo, argBar) { // Original name: fetchMessages
        offset = argFoo;
        golfie = argBar;
        var _closure2_slot0 = offset;
        var _closure2_slot1 = golfie;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot2;
        entity = 1;
        zuuluu = zuuluu[entity];
        entity = undefined;
        zuuluu = tangon.bind(entity)(zuuluu);
        report = zuuluu.HTTP;
        tangon = report.get;
        zuuluu = {'url': null, 'query': null, 'retries': 2, 'oldFormErrors': true, 'rejectWithError': true};
        verify = _closure1_slot3;
        oscard = verify.MESSAGES;
        oscard = oscard.bind(verify)(offset);
        zuuluu['url'] = oscard;
        oscard = {};
        option = _closure1_slot4;
        oscard['limit'] = option;
        oscard['around'] = golfie;
        zuuluu['query'] = oscard;
        tangon = tangon.bind(report)(zuuluu);
        zuuluu = tangon.then;
        michal = function(argFoo) {
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 2;
            michal = michal[entity];
            entity = undefined;
            tangon = zuuluu.bind(entity)(michal);
            zuuluu = tangon.dispatch;
            michal = {};
            report = 'LOAD_MESSAGES_AROUND_SUCCESS';
            michal['type'] = report;
            oscard = _closure2_slot0;
            michal['channelId'] = oscard;
            oscard = argFoo;
            oscard = oscard.body;
            michal['messages'] = oscard;
            report = _closure2_slot1;
            michal['around'] = report;
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    michal['fetchMessages'] = golfie;
    tangon = function() { // Original name: clearMessages
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 2;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'CLEAR_MESSAGES_AROUND_SUCCESS';
        michal['type'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    michal['clearMessages'] = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'actions/native/MessagePreviewActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();