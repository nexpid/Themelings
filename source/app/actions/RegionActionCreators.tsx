// app/actions/RegionActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    michal = michal.Endpoints;
    var _closure1_slot3 = michal;
    michal = {};
    golfie = function(argFoo) { // Original name: fetchRegions
        option = argFoo;
        var _closure2_slot0 = option;
        tangon = _closure1_slot0;
        zuuluu = _closure1_slot2;
        entity = 1;
        zuuluu = zuuluu[entity];
        entity = undefined;
        zuuluu = tangon.bind(entity)(zuuluu);
        report = zuuluu.HTTP;
        tangon = report.get;
        zuuluu = {'url': null, 'retries': 1, 'oldFormErrors': true, 'rejectWithError': true};
        golfie = _closure1_slot3;
        oscard = golfie.REGIONS;
        oscard = oscard.bind(golfie)(option);
        zuuluu['url'] = oscard;
        report = tangon.bind(report)(zuuluu);
        tangon = report.then;
        zuuluu = function(argFoo) {
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 2;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.dispatch;
            entity = {};
            tangon = 'LOAD_REGIONS';
            entity['type'] = tangon;
            tangon = argFoo;
            tangon = tangon.body;
            entity['regions'] = tangon;
            tangon = _closure2_slot0;
            entity['guildId'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        michal = function() {
            zuuluu = _closure1_slot1;
            michal = _closure1_slot2;
            entity = 2;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.dispatch;
            entity = {};
            tangon = 'LOAD_REGIONS';
            entity['type'] = tangon;
            tangon = new Array(0);
            entity['regions'] = tangon;
            tangon = _closure2_slot0;
            entity['guildId'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        michal = tangon.bind(report)(zuuluu, michal);
        return entity;
    };
    michal['fetchRegions'] = golfie;
    tangon = function(argFoo, argBar) { // Original name: changeCallRegion
        zuuluu = _closure1_slot0;
        michal = _closure1_slot2;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        michal = zuuluu.bind(entity)(michal);
        tangon = michal.HTTP;
        zuuluu = tangon.patch;
        michal = {};
        golfie = _closure1_slot3;
        oscard = golfie.CALL;
        report = argFoo;
        report = oscard.bind(golfie)(report);
        michal['url'] = report;
        report = {};
        oscard = argBar;
        report['region'] = oscard;
        michal['body'] = report;
        report = true;
        michal['oldFormErrors'] = report;
        michal['rejectWithError'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    michal['changeCallRegion'] = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'actions/RegionActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();