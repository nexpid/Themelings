// app/actions/RegionActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    mike = {};
    entity = true;
    mike['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, mike);
    entity = 0;
    mike = oscar[entity];
    entity = undefined;
    mike = report.bind(entity)(mike);
    mike = mike.Endpoints;
    var _closure1_slot3 = mike;
    mike = {};
    golf = function(argFoo) { // Original name: fetchRegions
        options = argFoo;
        var _closure2_slot0 = options;
        tango = _closure1_slot0;
        zulu = _closure1_slot2;
        entity = 1;
        zulu = zulu[entity];
        entity = undefined;
        zulu = tango.bind(entity)(zulu);
        report = zulu.HTTP;
        tango = report.get;
        zulu = {'url': null, 'retries': 1, 'oldFormErrors': true, 'rejectWithError': true};
        golf = _closure1_slot3;
        oscar = golf.REGIONS;
        oscar = oscar.bind(golf)(options);
        zulu['url'] = oscar;
        report = tango.bind(report)(zulu);
        tango = report.then;
        zulu = function(argFoo) {
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 2;
            mike = mike[entity];
            entity = undefined;
            zulu = zulu.bind(entity)(mike);
            mike = zulu.dispatch;
            entity = {};
            tango = 'LOAD_REGIONS';
            entity['type'] = tango;
            tango = argFoo;
            tango = tango.body;
            entity['regions'] = tango;
            tango = _closure2_slot0;
            entity['guildId'] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        mike = function() {
            zulu = _closure1_slot1;
            mike = _closure1_slot2;
            entity = 2;
            mike = mike[entity];
            entity = undefined;
            zulu = zulu.bind(entity)(mike);
            mike = zulu.dispatch;
            entity = {};
            tango = 'LOAD_REGIONS';
            entity['type'] = tango;
            tango = new Array(0);
            entity['regions'] = tango;
            tango = _closure2_slot0;
            entity['guildId'] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        mike = tango.bind(report)(zulu, mike);
        return entity;
    };
    mike['fetchRegions'] = golf;
    tango = function(argFoo, argBar) { // Original name: changeCallRegion
        zulu = _closure1_slot0;
        mike = _closure1_slot2;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        mike = zulu.bind(entity)(mike);
        tango = mike.HTTP;
        zulu = tango.patch;
        mike = {};
        golf = _closure1_slot3;
        oscar = golf.CALL;
        report = argFoo;
        report = oscar.bind(golf)(report);
        mike['url'] = report;
        report = {};
        oscar = argBar;
        report['region'] = oscar;
        mike['body'] = report;
        report = true;
        mike['oldFormErrors'] = report;
        mike['rejectWithError'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    mike['changeCallRegion'] = tango;
    tango = 3;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'actions/RegionActionCreators.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();