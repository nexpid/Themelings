// app/actions/NotificationSettingsModalActionCreators.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var7 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var7;
    var _closure1_slot2 = var6;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var2);
    var1 = 0;
    var2 = var6[var1];
    var1 = undefined;
    var2 = var7.bind(var1)(var2);
    var _closure1_slot3 = var2;
    var2 = 1;
    var2 = var6[var2];
    var2 = var7.bind(var1)(var2);
    var _closure1_slot4 = var2;
    var2 = 2;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var2 = var2.Endpoints;
    var _closure1_slot5 = var2;
    var2 = 3;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var2 = var2.NotificationSettingsUpdateType;
    var _closure1_slot6 = var2;
    var2 = 4;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var2 = var2.ChannelNotificationSettingsFlags;
    var _closure1_slot7 = var2;
    var2 = {};
    var7 = function open(arg1) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 5;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'NOTIFICATION_SETTINGS_MODAL_OPEN';
        var2['type'] = var5;
        var5 = arg1;
        var2['guildId'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['open'] = var7;
    var7 = function close() {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 5;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'NOTIFICATION_SETTINGS_MODAL_CLOSE';
        var2['type'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['close'] = var7;
    var7 = function updateGuildNotificationSettings(arg1, arg2, arg3, arg4) {
        var8 = arg1;
        var7 = arg2;
        var3 = _closure1_slot0;
        var4 = _closure1_slot2;
        var2 = 6;
        var6 = var4[var2];
        var1 = undefined;
        var9 = var3.bind(var1)(var6);
        var6 = var9.getCurrentGuildSettings;
        var14 = var6.bind(var9)(var8);
        var9 = _closure1_slot1;
        var5 = 7;
        var5 = var4[var5];
        var10 = var9.bind(var1)(var5);
        var5 = var10.saveUserGuildSettings;
        var5 = var5.bind(var10)(var8, var7);
        var5 = 5;
        var5 = var4[var5];
        var10 = var9.bind(var1)(var5);
        var9 = var10.dispatch;
        var5 = {};
        var11 = 'USER_GUILD_SETTINGS_GUILD_UPDATE';
        var5['type'] = var11;
        var5['guildId'] = var8;
        var5['settings'] = var7;
        var5 = var9.bind(var10)(var5);
        var2 = var4[var2];
        var5 = var3.bind(var1)(var2);
        var4 = var5.trackGuildNotificationSettingsUpdate;
        var13 = arg3;
        var12 = arg4;
        var17 = var5;
        var16 = var8;
        var15 = var7;
        var2 = var17[var4](var16, var15, var14, var13, var12, var11);
        return var1;
    };
    var2['updateGuildNotificationSettings'] = var7;
    var7 = function updateGuildAndChannelNotificationSettings(arg1, arg2, arg3, arg4) {
        var12 = arg1;
        var3 = arg2;
        var11 = arg3;
        var10 = arg4;
        var _closure2_slot0 = var12;
        var _closure2_slot1 = var3;
        var _closure2_slot2 = var11;
        var _closure2_slot3 = var10;
        var5 = _closure1_slot1;
        var6 = _closure1_slot2;
        var4 = 8;
        var8 = var6[var4];
        var1 = undefined;
        var13 = var5.bind(var1)(var8);
        var9 = var13.keys;
        var8 = var3.channel_overrides;
        var15 = var9.bind(var13)(var8);
        var8 = _closure1_slot0;
        var7 = 6;
        var9 = var6[var7];
        var13 = var8.bind(var1)(var9);
        var9 = var13.getCurrentGuildSettings;
        var19 = var9.bind(var13)(var12);
        var13 = var6[var7];
        var14 = var8.bind(var1)(var13);
        var13 = var14.getManyCurrentChannelSettings;
        var13 = var13.bind(var14)(var12, var15);
        var _closure2_slot4 = var13;
        var13 = 7;
        var13 = var6[var13];
        var14 = var5.bind(var1)(var13);
        var13 = var14.saveUserGuildSettings;
        var13 = var13.bind(var14)(var12, var3);
        var13 = 5;
        var13 = var6[var13];
        var15 = var5.bind(var1)(var13);
        var14 = var15.dispatch;
        var13 = {};
        var16 = 'USER_GUILD_SETTINGS_GUILD_AND_CHANNELS_UPDATE';
        var13['type'] = var16;
        var13['guildId'] = var12;
        var13['settings'] = var3;
        var13 = var14.bind(var15)(var13);
        var7 = var6[var7];
        var8 = var8.bind(var1)(var7);
        var7 = var8.trackGuildNotificationSettingsUpdate;
        var22 = var8;
        var21 = var12;
        var20 = var3;
        var18 = var11;
        var17 = var10;
        var7 = var22[var7](var21, var20, var19, var18, var17, var16);
        var4 = var6[var4];
        var5 = var5.bind(var1)(var4);
        var4 = var5.keys;
        var3 = var3.channel_overrides;
        var4 = var4.bind(var5)(var3);
        var3 = var4.forEach;
        var2 = function(arg1) {
            var8 = arg1;
            var2 = _closure2_slot4;
            var1 = var2.get;
            var6 = var1.bind(var2)(var8);
            var3 = _closure1_slot0;
            var2 = _closure1_slot2;
            var1 = 6;
            var2 = var2[var1];
            var1 = undefined;
            var4 = var3.bind(var1)(var2);
            var3 = var4.trackChannelNotificationSettingsUpdate;
            var2 = {};
            var7 = _closure2_slot0;
            var2['guildId'] = var7;
            var2['channelId'] = var8;
            var7 = _closure2_slot1;
            var7 = var7.channel_overrides;
            var7 = var7[var8];
            var2['change'] = var7;
            var2['previous'] = var6;
            var6 = _closure2_slot2;
            var2['label'] = var6;
            var5 = _closure2_slot3;
            var2['location'] = var5;
            var2 = var3.bind(var4)(var2);
            return var1;
        };
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['updateGuildAndChannelNotificationSettings'] = var7;
    var7 = function updateGuildNotificationSettingsBulk(arg1, arg2, arg3) {
        var5 = arg1;
        var1 = arg2;
        var _closure2_slot0 = var1;
        var1 = arg3;
        var _closure2_slot1 = var1;
        var4 = _closure1_slot1;
        var6 = _closure1_slot2;
        var3 = 8;
        var8 = var6[var3];
        var1 = undefined;
        var9 = var4.bind(var1)(var8);
        var8 = var9.keys;
        var9 = var8.bind(var9)(var5);
        var8 = _closure1_slot0;
        var7 = 6;
        var7 = var6[var7];
        var8 = var8.bind(var1)(var7);
        var7 = var8.getManyCurrentGuildSettings;
        var7 = var7.bind(var8)(var9);
        var _closure2_slot2 = var7;
        var7 = 7;
        var7 = var6[var7];
        var8 = var4.bind(var1)(var7);
        var7 = var8.saveUserGuildSettingsBulk;
        var7 = var7.bind(var8)(var5);
        var3 = var6[var3];
        var4 = var4.bind(var1)(var3);
        var3 = var4.entries;
        var4 = var3.bind(var4)(var5);
        var3 = var4.forEach;
        var2 = function(arg1) {
            _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
                var4 = arg1;
                var2 = var4[Symbol.iterator];
                var4 = var2().next;
                var5 = var4().value;
                var3 = var2;
                var1 = undefined;
                var3 = var3 === var1;
                var8 = undefined;
                if(var3) { _fun0001_ip = 2; continue _fun0001 }
case 3:
                var8 = var5;
case 2:
                var7 = undefined;
                if(var3) { _fun0001_ip = 4; continue _fun0001 }
case 5:
                var5 = var4().value;
                var4 = var2;
                var4 = var4 === var1;
                var7 = undefined;
                var3 = var4;
                if(var4) { _fun0001_ip = 4; continue _fun0001 }
case 6:
                var7 = var5;
                var3 = var4;
case 4:
                if(var3) { _fun0001_ip = 7; continue _fun0001 }
case 8:
                var2.return();
case 7:
                var4 = _closure2_slot2;
                var3 = var4.get;
                var14 = var3.bind(var4)(var8);
                var9 = _closure1_slot1;
                var5 = _closure1_slot2;
                var4 = 5;
                var4 = var5[var4];
                var10 = var9.bind(var1)(var4);
                var9 = var10.dispatch;
                var4 = {};
                var11 = 'USER_GUILD_SETTINGS_GUILD_UPDATE';
                var4['type'] = var11;
                var4['guildId'] = var8;
                var4['settings'] = var7;
                var4 = var9.bind(var10)(var4);
                var4 = _closure1_slot0;
                var3 = 6;
                var3 = var5[var3];
                var5 = var4.bind(var1)(var3);
                var4 = var5.trackGuildNotificationSettingsUpdate;
                var13 = _closure2_slot0;
                var12 = _closure2_slot1;
                var17 = var5;
                var16 = var8;
                var15 = var7;
                var2 = var17[var4](var16, var15, var14, var13, var12, var11);
                return var1;
            }
        };
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['updateGuildNotificationSettingsBulk'] = var7;
    var7 = function updateChannelOverrideSettings(arg1, arg2, arg3, arg4, arg5) {
        var8 = arg1;
        var7 = arg2;
        var6 = arg3;
        var3 = _closure1_slot0;
        var4 = _closure1_slot2;
        var2 = 6;
        var5 = var4[var2];
        var1 = undefined;
        var10 = var3.bind(var1)(var5);
        var5 = var10.getCurrentChannelSettings;
        var5 = var5.bind(var10)(var8, var7);
        var10 = _closure1_slot1;
        var9 = 7;
        var9 = var4[var9];
        var12 = var10.bind(var1)(var9);
        var11 = var12.saveUserGuildSettings;
        var9 = {};
        var13 = {};
        var13[var7] = var6;
        var9['channel_overrides'] = var13;
        var9 = var11.bind(var12)(var8, var9);
        var9 = 5;
        var9 = var4[var9];
        var11 = var10.bind(var1)(var9);
        var10 = var11.dispatch;
        var9 = {};
        var12 = 'USER_GUILD_SETTINGS_CHANNEL_UPDATE';
        var9['type'] = var12;
        var9['guildId'] = var8;
        var9['channelId'] = var7;
        var9['settings'] = var6;
        var9 = var10.bind(var11)(var9);
        var9 = 9;
        var9 = var4[var9];
        var9 = var3.bind(var1)(var9);
        var11 = var9.AccessibilityAnnouncer;
        var10 = var11.announce;
        var9 = 10;
        var12 = var4[var9];
        var12 = var3.bind(var1)(var12);
        var13 = var12.intl;
        var12 = var13.string;
        var9 = var4[var9];
        var9 = var3.bind(var1)(var9);
        var9 = var9.t;
        var9 = var9.MlIsJy;
        var9 = var12.bind(var13)(var9);
        var9 = var10.bind(var11)(var9);
        var2 = var4[var2];
        var4 = var3.bind(var1)(var2);
        var3 = var4.trackChannelNotificationSettingsUpdate;
        var2 = {};
        var2['guildId'] = var8;
        var2['channelId'] = var7;
        var2['change'] = var6;
        var2['previous'] = var5;
        var5 = arg4;
        var2['label'] = var5;
        var5 = arg5;
        var2['location'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['updateChannelOverrideSettings'] = var7;
    var7 = function updateChannelOverrideSettingsBulk(arg1, arg2, arg3, arg4) {
        var10 = arg1;
        var5 = arg2;
        var _closure2_slot0 = var10;
        var _closure2_slot1 = var5;
        var1 = arg3;
        var _closure2_slot2 = var1;
        var1 = arg4;
        var _closure2_slot3 = var1;
        var4 = _closure1_slot1;
        var6 = _closure1_slot2;
        var3 = 8;
        var8 = var6[var3];
        var1 = undefined;
        var9 = var4.bind(var1)(var8);
        var8 = var9.keys;
        var9 = var8.bind(var9)(var5);
        var8 = _closure1_slot0;
        var7 = 6;
        var7 = var6[var7];
        var8 = var8.bind(var1)(var7);
        var7 = var8.getManyCurrentChannelSettings;
        var7 = var7.bind(var8)(var10, var9);
        var _closure2_slot4 = var7;
        var7 = 7;
        var7 = var6[var7];
        var9 = var4.bind(var1)(var7);
        var8 = var9.saveUserGuildSettings;
        var7 = {};
        var7['channel_overrides'] = var5;
        var7 = var8.bind(var9)(var10, var7);
        var7 = 5;
        var7 = var6[var7];
        var9 = var4.bind(var1)(var7);
        var8 = var9.dispatch;
        var7 = {};
        var11 = 'USER_GUILD_SETTINGS_CHANNEL_UPDATE_BULK';
        var7['type'] = var11;
        var7['guildId'] = var10;
        var7['overrides'] = var5;
        var7 = var8.bind(var9)(var7);
        var3 = var6[var3];
        var4 = var4.bind(var1)(var3);
        var3 = var4.keys;
        var4 = var3.bind(var4)(var5);
        var3 = var4.forEach;
        var2 = function(arg1) {
            var7 = arg1;
            var3 = _closure1_slot0;
            var2 = _closure1_slot2;
            var1 = 6;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.trackChannelNotificationSettingsUpdate;
            var1 = {};
            var5 = _closure2_slot0;
            var1['guildId'] = var5;
            var1['channelId'] = var7;
            var5 = _closure2_slot1;
            var5 = var5[var7];
            var1['change'] = var5;
            var6 = _closure2_slot4;
            var5 = var6.get;
            var5 = var5.bind(var6)(var7);
            var1['previous'] = var5;
            var5 = _closure2_slot2;
            var1['label'] = var5;
            var4 = _closure2_slot3;
            var1['location'] = var4;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['updateChannelOverrideSettingsBulk'] = var7;
    var7 = function updateAppDMOverrideSettings(arg1, arg2, arg3, arg4, arg5) {
        var8 = arg1;
        var7 = arg2;
        var6 = arg4;
        var3 = _closure1_slot0;
        var4 = _closure1_slot2;
        var2 = 6;
        var5 = var4[var2];
        var1 = undefined;
        var10 = var3.bind(var1)(var5);
        var5 = var10.getCurrentChannelSettings;
        var5 = var5.bind(var10)(var8, var7);
        var11 = _closure1_slot1;
        var10 = 7;
        var10 = var4[var10];
        var13 = var11.bind(var1)(var10);
        var12 = var13.saveUserGuildSettings;
        var10 = {};
        var14 = {};
        var14[var7] = var6;
        var10['channel_overrides'] = var14;
        var10 = var12.bind(var13)(var8, var10);
        var10 = 5;
        var10 = var4[var10];
        var12 = var11.bind(var1)(var10);
        var11 = var12.dispatch;
        var10 = {};
        var13 = 'USER_GUILD_SETTINGS_CHANNEL_UPDATE';
        var10['type'] = var13;
        var10['guildId'] = var8;
        var10['channelId'] = var7;
        var10['settings'] = var6;
        var10 = var11.bind(var12)(var10);
        var10 = 9;
        var10 = var4[var10];
        var10 = var3.bind(var1)(var10);
        var12 = var10.AccessibilityAnnouncer;
        var11 = var12.announce;
        var10 = 10;
        var13 = var4[var10];
        var13 = var3.bind(var1)(var13);
        var14 = var13.intl;
        var13 = var14.string;
        var10 = var4[var10];
        var10 = var3.bind(var1)(var10);
        var10 = var10.t;
        var10 = var10.MlIsJy;
        var10 = var13.bind(var14)(var10);
        var10 = var11.bind(var12)(var10);
        var2 = var4[var2];
        var4 = var3.bind(var1)(var2);
        var3 = var4.trackChannelNotificationSettingsUpdate;
        var2 = {};
        var9 = _closure1_slot6;
        var9 = var9.AUTHORIZED_APP_DM;
        var2['updateType'] = var9;
        var2['guildId'] = var8;
        var2['channelId'] = var7;
        var7 = arg3;
        var2['applicationId'] = var7;
        var2['change'] = var6;
        var2['previous'] = var5;
        var5 = arg5;
        var2['label'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['updateAppDMOverrideSettings'] = var7;
    var7 = function setForumThreadsCreated(arg1, arg2) {
        _fun0002: for(var _fun0002_ip = 0; ; ) switch(_fun0002_ip) {
case 0:
            var3 = arg1;
            var9 = arg2;
            var7 = this;
            var2 = _closure1_slot7;
            if(var9) { _fun0002_ip = 2; continue _fun0002 }
case 9:
            var8 = var2.NEW_FORUM_THREADS_OFF;
            _fun0002_ip = 10; continue _fun0002;
case 2:
            var8 = var2.NEW_FORUM_THREADS_ON;
case 10:
            var4 = _closure1_slot7;
            if(var9) { _fun0002_ip = 11; continue _fun0002 }
case 12:
            var2 = var4.NEW_FORUM_THREADS_ON;
            _fun0002_ip = 13; continue _fun0002;
case 11:
            var2 = var4.NEW_FORUM_THREADS_OFF;
case 13:
            var5 = _closure1_slot4;
            var4 = var5.getChannelFlags;
            var10 = var4.bind(var5)(var3);
            var6 = var7.updateChannelOverrideSettings;
            var5 = var3.guild_id;
            var13 = var3.id;
            var3 = {};
            var2 = ~var2;
            var2 = var10 & var2;
            var2 = var2 | var8;
            var3['flags'] = var2;
            var8 = _closure1_slot0;
            var2 = _closure1_slot2;
            var1 = 6;
            var2 = var2[var1];
            var1 = undefined;
            var2 = var8.bind(var1)(var2);
            var8 = var2.NotificationLabel;
            var2 = var8.forumThreadsCreated;
            var11 = var2.bind(var8)(var9);
            var15 = var7;
            var14 = var5;
            var12 = var3;
            var2 = var15[var6](var14, var13, var12, var11, var10);
            return var1;
        }
    };
    var2['setForumThreadsCreated'] = var7;
    var4 = function setAccountFlag(arg1, arg2) {
        var2 = arg1;
        var _closure2_slot0 = var2;
        var2 = arg2;
        var _closure2_slot1 = var2;
        var3 = _closure1_slot3;
        var2 = undefined;
        var1 = function* () {
            var1 = function* anon_0_() {
                _fun0003: for(var _fun0003_ip = 0; ; ) switch(_fun0003_ip) {
case 0:
                    StartGenerator();
                    ResumeGenerator(result_out_reg=0, return_bool_out_reg=1);
                    if(var2) { _fun0003_ip = 14; continue _fun0003 }
case 15:
                    var2 = _closure1_slot4;
                    var2 = var2.accountNotificationSettings;
                    var10 = var2.flags;
                    var5 = _closure1_slot0;
                    var6 = _closure1_slot2;
                    var2 = 11;
                    var2 = var6[var2];
                    var4 = undefined;
                    var9 = var5.bind(var4)(var2);
                    var8 = var9.setFlag;
                    var7 = _closure2_slot0;
                    var2 = _closure2_slot1;
                    var8 = var8.bind(var9)(var10, var7, var2);
                    var2 = 12;
                    var2 = var6[var2];
                    var2 = var5.bind(var4)(var2);
                    var6 = var2.HTTP;
                    var5 = var6.patch;
                    var2 = {};
                    var7 = _closure1_slot5;
                    var7 = var7.ACCOUNT_NOTIFICATION_SETTINGS;
                    var2['url'] = var7;
                    var7 = {};
                    var7['flags'] = var8;
                    var2['body'] = var7;
                    var7 = false;
                    var2['rejectWithError'] = var7;
                    var2 = var5.bind(var6)(var2);
                    SaveGenerator(address=140);
case 16:
                    return var2;
case 17:
                    ResumeGenerator(result_out_reg=1, return_bool_out_reg=4);
                    if(var5) { _fun0003_ip = 18; continue _fun0003 }
case 19:
                    var5 = _closure1_slot1;
                    var6 = _closure1_slot2;
                    var3 = 5;
                    var3 = var6[var3];
                    var6 = var5.bind(var4)(var3);
                    var5 = var6.dispatch;
                    var3 = {};
                    var7 = 'NOTIFICATION_SETTINGS_UPDATE';
                    var3['type'] = var7;
                    var7 = {};
                    var7['flags'] = var8;
                    var3['settings'] = var7;
                    var3 = var5.bind(var6)(var3);
                    SaveGenerator(address=201);
case 20:
                    return var3;
case 21:
                    ResumeGenerator(result_out_reg=2, return_bool_out_reg=4);
                    if(var5) { _fun0003_ip = 22; continue _fun0003 }
case 23:
                    return var4;
case 22:
                    return var3;
case 18:
                    return var2;
case 14:
                    return var1;
                }
            };
            return var1;
        };
        var1 = var3.bind(var2)(var1);
        var1 = var1.bind(var2)();
        return var1;
    };
    var2['setAccountFlag'] = var4;
    var4 = 13;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'actions/NotificationSettingsModalActionCreators.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();