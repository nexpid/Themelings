// app/actions/ChannelRTCActionCreators.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var1 = metroImportDefault;
    var _closure1_slot1 = var1;
    var _closure1_slot2 = var6;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var2);
    var1 = 0;
    var2 = var6[var1];
    var1 = undefined;
    var2 = var5.bind(var1)(var2);
    var7 = var2.AppContext;
    var _closure1_slot3 = var7;
    var7 = var2.AnalyticEvents;
    var _closure1_slot4 = var7;
    var2 = var2.ComponentActions;
    var _closure1_slot5 = var2;
    var2 = {};
    var7 = function rebuildRTCActiveChannels() {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_ACTIVE_CHANNELS';
        var2['type'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['rebuildRTCActiveChannels'] = var7;
    var7 = function selectParticipant(arg1, arg2) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_SELECT_PARTICIPANT';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var5 = arg2;
        var2['id'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['selectParticipant'] = var7;
    var7 = function updateLayout(arg1, arg2) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
            var7 = arg1;
            var6 = arg2;
            var5 = arguments[2];
            var1 = undefined;
            if(!(var5 === var1)) { _fun0001_ip = 28; continue _fun0001 }
 15:
            var2 = _closure1_slot3;
            var5 = var2.APP;
 28:
            var3 = _closure1_slot1;
            var4 = _closure1_slot2;
            var2 = 2;
            var2 = var4[var2];
            var10 = var3.bind(var1)(var2);
            var9 = var10.track;
            var2 = _closure1_slot4;
            var8 = var2.VIDEO_LAYOUT_TOGGLED;
            var2 = {};
            var2['video_layout'] = var6;
            var12 = _closure1_slot0;
            var11 = 3;
            var11 = var4[var11];
            var12 = var12.bind(var1)(var11);
            var11 = var12.collectVoiceAnalyticsMetadata;
            var13 = var11.bind(var12)(var7);
            var14 = var2;
            var11 = copyDataProperties(var14, var13);
            var2 = var9.bind(var10)(var8, var2);
            var2 = 1;
            var2 = var4[var2];
            var4 = var3.bind(var1)(var2);
            var3 = var4.dispatch;
            var2 = {};
            var8 = 'CHANNEL_RTC_UPDATE_LAYOUT';
            var2['type'] = var8;
            var2['channelId'] = var7;
            var2['layout'] = var6;
            var2['appContext'] = var5;
            var2 = var3.bind(var4)(var2);
            return var1;
        }
    };
    var2['updateLayout'] = var7;
    var7 = function toggleParticipants(arg1, arg2) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_UPDATE_PARTICIPANTS_OPEN';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var5 = arg2;
        var2['participantsOpen'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['toggleParticipants'] = var7;
    var7 = function toggleParticipantsList(arg1, arg2) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_UPDATE_PARTCIPANTS_LIST_OPEN';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var5 = arg2;
        var2['participantsListOpen'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['toggleParticipantsList'] = var7;
    var7 = function toggleVoiceParticipantsHidden(arg1, arg2) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_UPDATE_VOICE_PARTICIPANTS_HIDDEN';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var5 = arg2;
        var2['voiceParticipantsHidden'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['toggleVoiceParticipantsHidden'] = var7;
    var7 = function updateStageStreamSize(arg1, arg2) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_UPDATE_STAGE_STREAM_SIZE';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var5 = arg2;
        var2['large'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['updateStageStreamSize'] = var7;
    var7 = function updateStageVideoLimitBoostUpsellDismissed(arg1, arg2) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_UPDATE_STAGE_VIDEO_LIMIT_BOOST_UPSELL_DISMISSED';
        var2['type'] = var5;
        var5 = arg1;
        var2['channelId'] = var5;
        var5 = arg2;
        var2['dismissed'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['updateStageVideoLimitBoostUpsellDismissed'] = var7;
    var7 = function updateChatOpen(arg1, arg2) {
        _fun0002: for(var _fun0002_ip = 0; ; ) switch(_fun0002_ip) {
 0:
            var8 = arg1;
            var4 = arg2;
            var _closure2_slot0 = var8;
            var6 = _closure1_slot1;
            var5 = _closure1_slot2;
            var1 = 1;
            var5 = var5[var1];
            var1 = undefined;
            var7 = var6.bind(var1)(var5);
            var6 = var7.dispatch;
            var5 = {};
            var9 = 'CHANNEL_RTC_UPDATE_CHAT_OPEN';
            var5['type'] = var9;
            var5['channelId'] = var8;
            var5['chatOpen'] = var4;
            var5 = var6.bind(var7)(var5);
            if(var4) { _fun0002_ip = 117; continue _fun0002 }
 69:
            var5 = _closure1_slot0;
            var6 = _closure1_slot2;
            var4 = 4;
            var4 = var6[var4];
            var4 = var5.bind(var1)(var4);
            var5 = var4.ComponentDispatch;
            var4 = var5.dispatch;
            var3 = _closure1_slot5;
            var3 = var3.FOCUS_CHAT_BUTTON;
            var3 = var4.bind(var5)(var3);
            _fun0002_ip = 138; continue _fun0002;
 117:
            var3 = global;
            var4 = var3.setTimeout;
            var3 = function() {
                var4 = _closure1_slot0;
                var3 = _closure1_slot2;
                var1 = 4;
                var3 = var3[var1];
                var1 = undefined;
                var3 = var4.bind(var1)(var3);
                var5 = var3.ComponentDispatch;
                var4 = var5.dispatch;
                var2 = _closure1_slot5;
                var3 = var2.FOCUS_CHANNEL_TEXT_AREA;
                var2 = {};
                var6 = _closure2_slot0;
                var2['channelId'] = var6;
                var2 = var4.bind(var5)(var3, var2);
                return var1;
            };
            var2 = 0;
            var2 = var4.bind(var1)(var3, var2);
 138:
            return var1;
        }
    };
    var2['updateChatOpen'] = var7;
    var4 = function jumpToVoiceChannelMessage(arg1, arg2, arg3, arg4) {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'CHANNEL_RTC_JUMP_TO_VOICE_CHANNEL_MESSAGE';
        var2['type'] = var5;
        var5 = arg1;
        var2['guildId'] = var5;
        var5 = arg2;
        var2['channelId'] = var5;
        var5 = arg3;
        var2['messageId'] = var5;
        var5 = arg4;
        var2['jumpType'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['jumpToVoiceChannelMessage'] = var4;
    var4 = 5;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'actions/ChannelRTCActionCreators.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();