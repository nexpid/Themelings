// app/actions/RTCDebugActionCreators.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var6 = metroImportDefault;
    var3 = exports;
    var5 = dependencyMap;
    var _closure1_slot0 = var6;
    var _closure1_slot1 = var5;
    var1 = global;
    var8 = var1.Object;
    var7 = var8.defineProperty;
    var4 = {};
    var1 = true;
    var4['value'] = var1;
    var1 = '__esModule';
    var1 = var7.bind(var8)(var3, var1, var4);
    var1 = 0;
    var4 = var5[var1];
    var1 = undefined;
    var4 = var6.bind(var1)(var4);
    var _closure1_slot2 = var4;
    var4 = 4;
    var5 = var5[var4];
    var4 = require;
    var6 = var4.bind(var1)(var5);
    var5 = var6.fileFinishedImporting;
    var4 = 'actions/RTCDebugActionCreators.tsx';
    var4 = var5.bind(var6)(var4);
    var4 = function open(arg1) {
        var3 = _closure1_slot0;
        var4 = _closure1_slot1;
        var2 = 1;
        var5 = var4[var2];
        var1 = undefined;
        var7 = var3.bind(var1)(var5);
        var6 = var7.dispatch;
        var5 = {};
        var8 = 'RTC_DEBUG_MODAL_OPEN';
        var5['type'] = var8;
        var8 = arg1;
        var5['section'] = var8;
        var5 = var6.bind(var7)(var5);
        var2 = var4[var2];
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'RTC_DEBUG_POPOUT_WINDOW_OPEN';
        var2['type'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['open'] = var4;
    var4 = function close() {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'RTC_DEBUG_MODAL_CLOSE';
        var2['type'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['close'] = var4;
    var4 = function openReplay() {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'RTC_DEBUG_MODAL_OPEN_REPLAY';
        var2['type'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['openReplay'] = var4;
    var4 = function setSection(arg1) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'RTC_DEBUG_MODAL_SET_SECTION';
        var2['type'] = var5;
        var5 = arg1;
        var2['section'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['setSection'] = var4;
    var4 = function setShouldRecordNextConnection(arg1) {
        var5 = arg1;
        var3 = _closure1_slot0;
        var4 = _closure1_slot1;
        var1 = 2;
        var6 = var4[var1];
        var1 = undefined;
        var7 = var3.bind(var1)(var6);
        var6 = _closure1_slot2;
        var2 = var6.shouldRecordNextConnection;
        var6 = var2.bind(var6)();
        var2 = 'connection_replay_log_enabled';
        var2 = var7.bind(var1)(var2, var5, var6);
        var2 = 1;
        var2 = var4[var2];
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var6 = 'RTC_DEBUG_SET_RECORDING_FLAG';
        var2['type'] = var6;
        var2['value'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['setShouldRecordNextConnection'] = var4;
    var4 = function setSimulcastDebugOverride(arg1, arg2, arg3) {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 1;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'RTC_DEBUG_SET_SIMULCAST_OVERRIDE';
        var2['type'] = var5;
        var5 = arg1;
        var2['userId'] = var5;
        var5 = arg2;
        var2['context'] = var5;
        var5 = arg3;
        var2['quality'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['setSimulcastDebugOverride'] = var4;
    var2 = function chooseReplayPath() {
        var3 = _closure1_slot0;
        var2 = _closure1_slot1;
        var1 = 3;
        var2 = var2[var1];
        var1 = undefined;
        var2 = var3.bind(var1)(var2);
        var4 = var2.fileManager;
        var3 = var4.showOpenDialog;
        var2 = {};
        var6 = {};
        var5 = 'All Files';
        var6['name'] = var5;
        var5 = ['*'];
        var6['extensions'] = var5;
        var5 = new Array(1);
        var5[0] = var6;
        var2['filters'] = var5;
        var4 = var3.bind(var4)(var2);
        var3 = var4.then;
        var2 = function(arg1) {
            _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
 0:
                var2 = arg1;
                var3 = var2.length;
                var5 = '';
                var1 = 0;
                if(!(var1 !== var3)) { _fun0001_ip = 22; continue _fun0001 }
 18:
                var5 = var2[var1];
 22:
                var3 = _closure1_slot0;
                var2 = _closure1_slot1;
                var1 = 1;
                var2 = var2[var1];
                var1 = undefined;
                var4 = var3.bind(var1)(var2);
                var3 = var4.dispatch;
                var2 = {};
                var6 = 'RTC_DEBUG_MODAL_OPEN_REPLAY_AT_PATH';
                var2['type'] = var6;
                var2['path'] = var5;
                var2 = var3.bind(var4)(var2);
                return var1;
            }
        };
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var3['chooseReplayPath'] = var2;
    return var1;
})();