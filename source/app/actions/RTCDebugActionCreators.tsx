// app/actions/RTCDebugActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    oscard = argBaz;
    zuuluu = argFre;
    report = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = report;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = report[entity];
    entity = undefined;
    tangon = oscard.bind(entity)(tangon);
    var _closure1_slot2 = tangon;
    tangon = 4;
    report = report[tangon];
    tangon = argBar;
    oscard = tangon.bind(entity)(report);
    report = oscard.fileFinishedImporting;
    tangon = 'actions/RTCDebugActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function(argFoo) { // Original name: open
        zuuluu = _closure1_slot0;
        tangon = _closure1_slot1;
        michal = 1;
        report = tangon[michal];
        entity = undefined;
        golfie = zuuluu.bind(entity)(report);
        oscard = golfie.dispatch;
        report = {};
        option = 'RTC_DEBUG_MODAL_OPEN';
        report['type'] = option;
        option = argFoo;
        report['section'] = option;
        report = oscard.bind(golfie)(report);
        michal = tangon[michal];
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'RTC_DEBUG_POPOUT_WINDOW_OPEN';
        michal['type'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['open'] = tangon;
    tangon = function() { // Original name: close
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'RTC_DEBUG_MODAL_CLOSE';
        michal['type'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['close'] = tangon;
    tangon = function() { // Original name: openReplay
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'RTC_DEBUG_MODAL_OPEN_REPLAY';
        michal['type'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['openReplay'] = tangon;
    tangon = function(argFoo) { // Original name: setSection
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'RTC_DEBUG_MODAL_SET_SECTION';
        michal['type'] = report;
        report = argFoo;
        michal['section'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setSection'] = tangon;
    tangon = function(argFoo) { // Original name: setShouldRecordNextConnection
        report = argFoo;
        zuuluu = _closure1_slot0;
        tangon = _closure1_slot1;
        entity = 2;
        oscard = tangon[entity];
        entity = undefined;
        golfie = zuuluu.bind(entity)(oscard);
        oscard = _closure1_slot2;
        michal = oscard.shouldRecordNextConnection;
        oscard = michal.bind(oscard)();
        michal = 'connection_replay_log_enabled';
        michal = golfie.bind(entity)(michal, report, oscard);
        michal = 1;
        michal = tangon[michal];
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        oscard = 'RTC_DEBUG_SET_RECORDING_FLAG';
        michal['type'] = oscard;
        michal['value'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setShouldRecordNextConnection'] = tangon;
    tangon = function(argFoo, argBar, argBaz) { // Original name: setSimulcastDebugOverride
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'RTC_DEBUG_SET_SIMULCAST_OVERRIDE';
        michal['type'] = report;
        report = argFoo;
        michal['userId'] = report;
        report = argBar;
        michal['context'] = report;
        report = argBaz;
        michal['quality'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['setSimulcastDebugOverride'] = tangon;
    michal = function() { // Original name: chooseReplayPath
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 3;
        michal = michal[entity];
        entity = undefined;
        michal = zuuluu.bind(entity)(michal);
        tangon = michal.fileManager;
        zuuluu = tangon.showOpenDialog;
        michal = {};
        oscard = {};
        report = 'All Files';
        oscard['name'] = report;
        report = ['*'];
        oscard['extensions'] = report;
        report = new Array(1);
        report[0] = oscard;
        michal['filters'] = report;
        tangon = zuuluu.bind(tangon)(michal);
        zuuluu = tangon.then;
        michal = function(argFoo) {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                michal = argFoo;
                zuuluu = michal.length;
                report = '';
                entity = 0;
                if(!(entity !== zuuluu)) { _fun00002_ip = 22; continue _fun00001 }
 18:
                report = michal[entity];
 22:
                zuuluu = _closure1_slot0;
                michal = _closure1_slot1;
                entity = 1;
                michal = michal[entity];
                entity = undefined;
                tangon = zuuluu.bind(entity)(michal);
                zuuluu = tangon.dispatch;
                michal = {};
                oscard = 'RTC_DEBUG_MODAL_OPEN_REPLAY_AT_PATH';
                michal['type'] = oscard;
                michal['path'] = report;
                michal = zuuluu.bind(tangon)(michal);
                return entity;
            }
        };
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['chooseReplayPath'] = michal;
    return entity;
})();