// app/actions/RTCDebugActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    oscar = argBaz;
    zulu = argFred;
    report = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = report;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = report[entity];
    entity = undefined;
    tango = oscar.bind(entity)(tango);
    var _closure1_slot2 = tango;
    tango = 4;
    report = report[tango];
    tango = argBar;
    oscar = tango.bind(entity)(report);
    report = oscar.fileFinishedImporting;
    tango = 'actions/RTCDebugActionCreators.tsx';
    tango = report.bind(oscar)(tango);
    tango = function(argFoo) { // Original name: open
        zulu = _closure1_slot0;
        tango = _closure1_slot1;
        mike = 1;
        report = tango[mike];
        entity = undefined;
        golf = zulu.bind(entity)(report);
        oscar = golf.dispatch;
        report = {};
        options = 'RTC_DEBUG_MODAL_OPEN';
        report['type'] = options;
        options = argFoo;
        report['section'] = options;
        report = oscar.bind(golf)(report);
        mike = tango[mike];
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {};
        report = 'RTC_DEBUG_POPOUT_WINDOW_OPEN';
        mike['type'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['open'] = tango;
    tango = function() { // Original name: close
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {};
        report = 'RTC_DEBUG_MODAL_CLOSE';
        mike['type'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['close'] = tango;
    tango = function() { // Original name: openReplay
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {};
        report = 'RTC_DEBUG_MODAL_OPEN_REPLAY';
        mike['type'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['openReplay'] = tango;
    tango = function(argFoo) { // Original name: setSection
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {};
        report = 'RTC_DEBUG_MODAL_SET_SECTION';
        mike['type'] = report;
        report = argFoo;
        mike['section'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setSection'] = tango;
    tango = function(argFoo) { // Original name: setShouldRecordNextConnection
        report = argFoo;
        zulu = _closure1_slot0;
        tango = _closure1_slot1;
        entity = 2;
        oscar = tango[entity];
        entity = undefined;
        golf = zulu.bind(entity)(oscar);
        oscar = _closure1_slot2;
        mike = oscar.shouldRecordNextConnection;
        oscar = mike.bind(oscar)();
        mike = 'connection_replay_log_enabled';
        mike = golf.bind(entity)(mike, report, oscar);
        mike = 1;
        mike = tango[mike];
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {};
        oscar = 'RTC_DEBUG_SET_RECORDING_FLAG';
        mike['type'] = oscar;
        mike['value'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setShouldRecordNextConnection'] = tango;
    tango = function(argFoo, argBar, argBaz) { // Original name: setSimulcastDebugOverride
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {};
        report = 'RTC_DEBUG_SET_SIMULCAST_OVERRIDE';
        mike['type'] = report;
        report = argFoo;
        mike['userId'] = report;
        report = argBar;
        mike['context'] = report;
        report = argBaz;
        mike['quality'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['setSimulcastDebugOverride'] = tango;
    mike = function() { // Original name: chooseReplayPath
        zulu = _closure1_slot0;
        mike = _closure1_slot1;
        entity = 3;
        mike = mike[entity];
        entity = undefined;
        mike = zulu.bind(entity)(mike);
        tango = mike.fileManager;
        zulu = tango.showOpenDialog;
        mike = {};
        oscar = {};
        report = 'All Files';
        oscar['name'] = report;
        report = ['*'];
        oscar['extensions'] = report;
        report = new Array(1);
        report[0] = oscar;
        mike['filters'] = report;
        tango = zulu.bind(tango)(mike);
        zulu = tango.then;
        mike = function(argFoo) {
            _fun50111: for(var _fun50111_ip = 0; ; ) switch(_fun50111_ip) {
 0:
                mike = argFoo;
                zulu = mike.length;
                report = '';
                entity = 0;
                if(!(entity !== zulu)) { _fun50111_ip = 22; continue _fun50111 }
 18:
                report = mike[entity];
 22:
                zulu = _closure1_slot0;
                mike = _closure1_slot1;
                entity = 1;
                mike = mike[entity];
                entity = undefined;
                tango = zulu.bind(entity)(mike);
                zulu = tango.dispatch;
                mike = {};
                oscar = 'RTC_DEBUG_MODAL_OPEN_REPLAY_AT_PATH';
                mike['type'] = oscar;
                mike['path'] = report;
                mike = zulu.bind(tango)(mike);
                return entity;
            }
        };
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['chooseReplayPath'] = mike;
    return entity;
})();