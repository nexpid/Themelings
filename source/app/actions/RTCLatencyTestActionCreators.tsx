// app/actions/RTCLatencyTestActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    zuuluu = argFre;
    tangon = argPlu;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = tangon;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    oscard = {};
    entity = true;
    oscard['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, oscard);
    entity = 2;
    tangon = tangon[entity];
    entity = undefined;
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'actions/RTCLatencyTestActionCreators.tsx';
    tangon = report.bind(oscard)(tangon);
    tangon = function() { // Original name: fetchRTCLatencyTestRegions
        zuuluu = _closure1_slot0;
        michal = _closure1_slot2;
        entity = 0;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        zuuluu = entity.HTTP;
        michal = zuuluu.get;
        entity = {};
        tangon = global;
        report = tangon.window;
        report = report.GLOBAL_ENV;
        golfie = report.RTC_LATENCY_ENDPOINT;
        tangon = tangon.HermesInternal;
        oscard = tangon.concat;
        report = '';
        tangon = 'https:';
        tangon = oscard.bind(report)(tangon, golfie);
        entity['url'] = tangon;
        tangon = false;
        entity['rejectWithError'] = tangon;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    zuuluu['fetchRTCLatencyTestRegions'] = tangon;
    michal = function(argFoo, argBar) { // Original name: completeRTCLatencyTest
        zuuluu = _closure1_slot1;
        michal = _closure1_slot2;
        entity = 1;
        michal = michal[entity];
        entity = undefined;
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.dispatch;
        michal = {};
        report = 'RTC_LATENCY_TEST_COMPLETE';
        michal['type'] = report;
        report = argFoo;
        michal['latencyRankedRegions'] = report;
        report = argBar;
        michal['geoRankedRegions'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    zuuluu['completeRTCLatencyTest'] = michal;
    return entity;
})();