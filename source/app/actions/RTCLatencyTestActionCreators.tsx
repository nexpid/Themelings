// app/actions/RTCLatencyTestActionCreators.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    zulu = argFred;
    tango = argPlugh;
    var _closure1_slot0 = report;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = tango;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    oscar = {};
    entity = true;
    oscar['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, oscar);
    entity = 2;
    tango = tango[entity];
    entity = undefined;
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'actions/RTCLatencyTestActionCreators.tsx';
    tango = report.bind(oscar)(tango);
    tango = function() { // Original name: fetchRTCLatencyTestRegions
        zulu = _closure1_slot0;
        mike = _closure1_slot2;
        entity = 0;
        mike = mike[entity];
        entity = undefined;
        entity = zulu.bind(entity)(mike);
        zulu = entity.HTTP;
        mike = zulu.get;
        entity = {};
        tango = global;
        report = tango.window;
        report = report.GLOBAL_ENV;
        golf = report.RTC_LATENCY_ENDPOINT;
        tango = tango.HermesInternal;
        oscar = tango.concat;
        report = '';
        tango = 'https:';
        tango = oscar.bind(report)(tango, golf);
        entity['url'] = tango;
        tango = false;
        entity['rejectWithError'] = tango;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    zulu['fetchRTCLatencyTestRegions'] = tango;
    mike = function(argFoo, argBar) { // Original name: completeRTCLatencyTest
        zulu = _closure1_slot1;
        mike = _closure1_slot2;
        entity = 1;
        mike = mike[entity];
        entity = undefined;
        tango = zulu.bind(entity)(mike);
        zulu = tango.dispatch;
        mike = {};
        report = 'RTC_LATENCY_TEST_COMPLETE';
        mike['type'] = report;
        report = argFoo;
        mike['latencyRankedRegions'] = report;
        report = argBar;
        mike['geoRankedRegions'] = report;
        mike = zulu.bind(tango)(mike);
        return entity;
    };
    zulu['completeRTCLatencyTest'] = mike;
    return entity;
})();