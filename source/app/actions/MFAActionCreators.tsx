// app/actions/MFAActionCreators.tsx
export default (function(global, require, metroImportDefault, metroImportAll, moduleObject, exports, dependencyMap) {
    var5 = require;
    var7 = metroImportDefault;
    var3 = exports;
    var6 = dependencyMap;
    var _closure1_slot0 = var5;
    var _closure1_slot1 = var7;
    var _closure1_slot2 = var6;
    var1 = global;
    var9 = var1.Object;
    var8 = var9.defineProperty;
    var2 = {};
    var1 = true;
    var2['value'] = var1;
    var1 = '__esModule';
    var1 = var8.bind(var9)(var3, var1, var2);
    var1 = 0;
    var2 = var6[var1];
    var1 = undefined;
    var2 = var7.bind(var1)(var2);
    var _closure1_slot3 = var2;
    var2 = 1;
    var2 = var6[var2];
    var2 = var5.bind(var1)(var2);
    var2 = var2.Endpoints;
    var _closure1_slot4 = var2;
    var2 = {};
    var7 = function enable(arg1) {
        var1 = arg1;
        var6 = var1.code;
        var5 = var1.secret;
        var3 = _closure1_slot0;
        var2 = _closure1_slot2;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var1 = var3.bind(var1)(var2);
        var3 = var1.HTTP;
        var2 = var3.post;
        var1 = {};
        var4 = _closure1_slot4;
        var4 = var4.MFA_TOTP_ENABLE;
        var1['url'] = var4;
        var4 = {};
        var4['code'] = var6;
        var4['secret'] = var5;
        var1['body'] = var4;
        var4 = true;
        var1['oldFormErrors'] = var4;
        var4 = false;
        var1['rejectWithError'] = var4;
        var3 = var2.bind(var3)(var1);
        var2 = var3.then;
        var1 = function(arg1) {
            var4 = arg1;
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.dispatch;
            var1 = {};
            var5 = 'MFA_ENABLE_SUCCESS';
            var1['type'] = var5;
            var5 = var4.body;
            var5 = var5.token;
            var1['token'] = var5;
            var4 = var4.body;
            var4 = var4.backup_codes;
            var1['codes'] = var4;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var1 = var2.bind(var3)(var1);
        return var1;
    };
    var2['enable'] = var7;
    var7 = function disable() {
        var3 = _closure1_slot0;
        var2 = _closure1_slot2;
        var1 = 2;
        var2 = var2[var1];
        var1 = undefined;
        var2 = var3.bind(var1)(var2);
        var4 = var2.HTTP;
        var3 = var4.post;
        var2 = {'url': null, 'oldFormErrors': true, 'rejectWithError': false};
        var5 = _closure1_slot4;
        var5 = var5.MFA_TOTP_DISABLE;
        var2['url'] = var5;
        var4 = var3.bind(var4)(var2);
        var3 = var4.then;
        var2 = function(arg1) {
            var1 = arg1;
            var1 = var1.body;
            var4 = var1.token;
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.dispatch;
            var1 = {};
            var5 = 'MFA_DISABLE_SUCCESS';
            var1['type'] = var5;
            var1['token'] = var4;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['disable'] = var7;
    var7 = function enableSMS() {
        var3 = _closure1_slot1;
        var6 = _closure1_slot2;
        var2 = 3;
        var2 = var6[var2];
        var4 = undefined;
        var7 = var3.bind(var4)(var2);
        var3 = var7.dispatch;
        var2 = {};
        var8 = 'MFA_SMS_TOGGLE';
        var2['type'] = var8;
        var2 = var3.bind(var7)(var2);
        var3 = _closure1_slot0;
        var2 = 2;
        var2 = var6[var2];
        var2 = var3.bind(var4)(var2);
        var4 = var2.HTTP;
        var3 = var4.post;
        var2 = {'url': null, 'oldFormErrors': true, 'rejectWithError': false};
        var5 = _closure1_slot4;
        var5 = var5.MFA_SMS_ENABLE;
        var2['url'] = var5;
        var4 = var3.bind(var4)(var2);
        var3 = var4.then;
        var2 = function(arg1) {
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.dispatch;
            var1 = {};
            var4 = 'MFA_SMS_TOGGLE_COMPLETE';
            var1['type'] = var4;
            var1 = var2.bind(var3)(var1);
            var1 = arg1;
            return var1;
        };
        var1 = function(arg1) {
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.dispatch;
            var1 = {};
            var4 = 'MFA_SMS_TOGGLE_COMPLETE';
            var1['type'] = var4;
            var1 = var2.bind(var3)(var1);
            var1 = arg1;
            throw var1;
        };
        var1 = var3.bind(var4)(var2, var1);
        return var1;
    };
    var2['enableSMS'] = var7;
    var7 = function disableSMS(arg1) {
        var3 = _closure1_slot1;
        var6 = _closure1_slot2;
        var2 = 3;
        var2 = var6[var2];
        var4 = undefined;
        var7 = var3.bind(var4)(var2);
        var3 = var7.dispatch;
        var2 = {};
        var8 = 'MFA_SMS_TOGGLE';
        var2['type'] = var8;
        var2 = var3.bind(var7)(var2);
        var3 = _closure1_slot0;
        var2 = 2;
        var2 = var6[var2];
        var2 = var3.bind(var4)(var2);
        var4 = var2.HTTP;
        var3 = var4.post;
        var2 = {};
        var5 = _closure1_slot4;
        var5 = var5.MFA_SMS_DISABLE;
        var2['url'] = var5;
        var5 = {};
        var6 = arg1;
        var5['password'] = var6;
        var2['body'] = var5;
        var5 = true;
        var2['oldFormErrors'] = var5;
        var5 = false;
        var2['rejectWithError'] = var5;
        var4 = var3.bind(var4)(var2);
        var3 = var4.then;
        var2 = function(arg1) {
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.dispatch;
            var1 = {};
            var4 = 'MFA_SMS_TOGGLE_COMPLETE';
            var1['type'] = var4;
            var1 = var2.bind(var3)(var1);
            var1 = arg1;
            return var1;
        };
        var1 = function(arg1) {
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.dispatch;
            var1 = {};
            var4 = 'MFA_SMS_TOGGLE_COMPLETE';
            var1['type'] = var4;
            var1 = var2.bind(var3)(var1);
            var1 = arg1;
            throw var1;
        };
        var1 = var3.bind(var4)(var2, var1);
        return var1;
    };
    var2['disableSMS'] = var7;
    var7 = function sendMFABackupCodesVerificationKeyEmail(arg1) {
        var4 = _closure1_slot0;
        var3 = _closure1_slot2;
        var2 = 2;
        var3 = var3[var2];
        var2 = undefined;
        var2 = var4.bind(var2)(var3);
        var4 = var2.HTTP;
        var3 = var4.post;
        var2 = {};
        var5 = _closure1_slot4;
        var5 = var5.MFA_SEND_VERIFICATION_KEY;
        var2['url'] = var5;
        var5 = {};
        var6 = arg1;
        var5['password'] = var6;
        var2['body'] = var5;
        var5 = true;
        var2['oldFormErrors'] = var5;
        var5 = false;
        var2['rejectWithError'] = var5;
        var4 = var3.bind(var4)(var2);
        var3 = var4.then;
        var2 = function(arg1) {
            var5 = arg1;
            var3 = _closure1_slot1;
            var2 = _closure1_slot2;
            var1 = 3;
            var2 = var2[var1];
            var1 = undefined;
            var3 = var3.bind(var1)(var2);
            var2 = var3.dispatch;
            var1 = {};
            var4 = 'MFA_SEND_VERIFICATION_KEY';
            var1['type'] = var4;
            var4 = {};
            var6 = var5.body;
            var6 = var6.nonce;
            var4['viewNonce'] = var6;
            var5 = var5.body;
            var5 = var5.regenerate_nonce;
            var4['regenerateNonce'] = var5;
            var1['nonces'] = var4;
            var1 = var2.bind(var3)(var1);
            return var1;
        };
        var1 = function(arg1) {
            var1 = arg1;
            throw var1;
        };
        var1 = var3.bind(var4)(var2, var1);
        return var1;
    };
    var2['sendMFABackupCodesVerificationKeyEmail'] = var7;
    var7 = function confirmViewBackupCodes(arg1, arg2) {
        _fun0001: for(var _fun0001_ip = 0; ; ) switch(_fun0001_ip) {
case 0:
            var8 = arg1;
            var6 = arg2;
            var _closure2_slot0 = var8;
            var3 = _closure1_slot3;
            var2 = var3.getNonces;
            var2 = var2.bind(var3)();
            var7 = var2.viewNonce;
            var2 = var2.regenerateNonce;
            if(!var6) { _fun0001_ip = 2; continue _fun0001 }
case 3:
            var7 = var2;
case 2:
            var4 = _closure1_slot0;
            var3 = _closure1_slot2;
            var2 = 2;
            var3 = var3[var2];
            var2 = undefined;
            var2 = var4.bind(var2)(var3);
            var4 = var2.HTTP;
            var3 = var4.post;
            var2 = {};
            var5 = _closure1_slot4;
            var5 = var5.MFA_CODES_VERIFICATION;
            var2['url'] = var5;
            var5 = {};
            var5['key'] = var8;
            var5['nonce'] = var7;
            var5['regenerate'] = var6;
            var2['body'] = var5;
            var5 = true;
            var2['oldFormErrors'] = var5;
            var5 = false;
            var2['rejectWithError'] = var5;
            var4 = var3.bind(var4)(var2);
            var3 = var4.then;
            var2 = function(arg1) {
                var3 = _closure1_slot1;
                var2 = _closure1_slot2;
                var1 = 3;
                var2 = var2[var1];
                var1 = undefined;
                var3 = var3.bind(var1)(var2);
                var2 = var3.dispatch;
                var1 = {};
                var4 = 'MFA_VIEW_BACKUP_CODES';
                var1['type'] = var4;
                var4 = arg1;
                var4 = var4.body;
                var4 = var4.backup_codes;
                var1['codes'] = var4;
                var4 = _closure2_slot0;
                var1['key'] = var4;
                var1 = var2.bind(var3)(var1);
                return var1;
            };
            var1 = function(arg1) {
                var1 = arg1;
                throw var1;
            };
            var1 = var3.bind(var4)(var2, var1);
            return var1;
        }
    };
    var2['confirmViewBackupCodes'] = var7;
    var4 = function clearBackupCodes() {
        var3 = _closure1_slot1;
        var2 = _closure1_slot2;
        var1 = 3;
        var2 = var2[var1];
        var1 = undefined;
        var4 = var3.bind(var1)(var2);
        var3 = var4.dispatch;
        var2 = {};
        var5 = 'MFA_CLEAR_BACKUP_CODES';
        var2['type'] = var5;
        var2 = var3.bind(var4)(var2);
        return var1;
    };
    var2['clearBackupCodes'] = var4;
    var4 = 4;
    var4 = var6[var4];
    var6 = var5.bind(var1)(var4);
    var5 = var6.fileFinishedImporting;
    var4 = 'actions/MFAActionCreators.tsx';
    var4 = var5.bind(var6)(var4);
    var3['default'] = var2;
    return var1;
})();