// app/lib/native/BundleUpdater.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    verify = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = verify.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = verify.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    golfie = report.bind(entity)(tangon);
    tangon = golfie.NativeModules;
    option = golfie.NativeEventEmitter;
    golfie = 3;
    golfie = oscard[golfie];
    golfie = report.bind(entity)(golfie);
    golfie = golfie.AnalyticEvents;
    var _closure1_slot5 = golfie;
    golfie = 4;
    golfie = oscard[golfie];
    offset = verify.bind(entity)(golfie);
    golfie = offset.prototype;
    verify = Object.create(golfie, {constructor: {value: offset}});
    foxtra = 'BundleUpdater';
    backup = verify;
    golfie = new backup[offset](foxtra, romeon);
    golfie = golfie instanceof Object ? golfie : verify;
    var _closure1_slot6 = golfie;
    tangon = tangon.BundleUpdaterManager;
    var _closure1_slot7 = tangon;
    golfie = option.prototype;
    golfie = Object.create(golfie, {constructor: {value: option}});
    backup = golfie;
    foxtra = tangon;
    tangon = new backup[option](foxtra, romeon);
    tangon = tangon instanceof Object ? tangon : golfie;
    var _closure1_slot8 = tangon;
    tangon = {'downloaded': 'BundleDownloaded', 'otaUpdateChecked': 'OtaUpdateChecked'};
    var _closure1_slot9 = tangon;
    michal = function() {
        report = function() { // Original name: BundleUpdater
            tangon = _closure1_slot3;
            zuuluu = _closure2_slot0;
            entity = undefined;
            michal = this;
            michal = tangon.bind(entity)(michal, zuuluu);
            return entity;
        };
        var _closure2_slot0 = report;
        tangon = _closure1_slot4;
        entity = {};
        zuuluu = 'getInitialBundleDownloaded';
        entity['key'] = zuuluu;
        zuuluu = function() { // Original name: value
            michal = _closure1_slot7;
            entity = michal.getInitialBundleDownloaded;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = zuuluu;
        zuuluu = new Array(10);
        zuuluu[0] = entity;
        entity = {};
        oscard = 'getInitialOtaUpdateChecked';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            michal = _closure1_slot7;
            entity = michal.getInitialOtaUpdateChecked;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[1] = entity;
        entity = {};
        oscard = 'addEventListener';
        entity['key'] = oscard;
        oscard = function(argFoo, argBar) { // Original name: value
            zuuluu = _closure1_slot9;
            michal = argFoo;
            tangon = zuuluu[michal];
            zuuluu = _closure1_slot8;
            michal = zuuluu.addListener;
            entity = argBar;
            entity = michal.bind(zuuluu)(tangon, entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[2] = entity;
        entity = {};
        oscard = 'checkForUpdateAndReload';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            michal = _closure1_slot7;
            entity = michal.checkForUpdateAndReload;
            entity = entity.bind(michal)();
            entity = undefined;
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[3] = entity;
        entity = {};
        oscard = 'getBuildOverrideCookieContents';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            michal = _closure1_slot7;
            entity = michal.getBuildOverrideCookieContents;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[4] = entity;
        entity = {};
        oscard = 'setBuildOverrideCookieHeader';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            zuuluu = _closure1_slot7;
            michal = zuuluu.setBuildOverrideCookieHeader;
            entity = argFoo;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[5] = entity;
        entity = {};
        oscard = 'getOtaRootPath';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            michal = _closure1_slot7;
            entity = michal.getOtaRootPath;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[6] = entity;
        entity = {};
        oscard = 'getManifestInfo';
        entity['key'] = oscard;
        oscard = function() { // Original name: value
            michal = _closure1_slot7;
            entity = michal.getManifestInfo;
            entity = entity.bind(michal)();
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[7] = entity;
        entity = {};
        oscard = 'emitOtaMetric';
        entity['key'] = oscard;
        oscard = function(argFoo) { // Original name: value
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 5;
            zuuluu = zuuluu[entity];
            entity = undefined;
            report = tangon.bind(entity)(zuuluu);
            tangon = report.match;
            zuuluu = argFoo;
            oscard = tangon.bind(report)(zuuluu);
            report = oscard.with;
            tangon = {};
            zuuluu = 'OtaCheckAttempt';
            tangon['type'] = zuuluu;
            zuuluu = function(argFoo) {
                oscard = argFoo;
                tangon = _closure1_slot6;
                zuuluu = tangon.verbose;
                michal = 'OTA check attempt';
                michal = zuuluu.bind(tangon)(michal, oscard);
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                michal = 6;
                report = tangon[michal];
                michal = undefined;
                option = zuuluu.bind(michal)(report);
                golfie = option.track;
                entity = _closure1_slot5;
                report = entity.MOBILE_OTA_CHECK_ATTEMPT;
                entity = {};
                verify = oscard.result;
                entity['result'] = verify;
                verify = oscard.durationSeconds;
                entity['duration_seconds'] = verify;
                verify = oscard.bytesReceived;
                entity['bytes_received'] = verify;
                verify = oscard.error;
                entity['error'] = verify;
                entity = golfie.bind(option)(report, entity);
                entity = 7;
                entity = tangon[entity];
                zuuluu = zuuluu.bind(michal)(entity);
                michal = zuuluu.increment;
                report = _closure2_slot0;
                tangon = report.prepareOtaMetricForDatadog;
                entity = ['result'];
                entity = tangon.bind(report)(oscard, entity);
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            report = report.bind(oscard)(tangon, zuuluu);
            tangon = report.with;
            zuuluu = {};
            oscard = 'OtaAssetDownloadAttempt';
            zuuluu['type'] = oscard;
            michal = function(argFoo) {
                oscard = argFoo;
                tangon = _closure1_slot6;
                zuuluu = tangon.verbose;
                michal = 'OTA asset download attempt';
                michal = zuuluu.bind(tangon)(michal, oscard);
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                michal = 6;
                report = tangon[michal];
                michal = undefined;
                option = zuuluu.bind(michal)(report);
                golfie = option.track;
                entity = _closure1_slot5;
                report = entity.MOBILE_OTA_ASSET_DOWNLOAD_ATTEMPT;
                entity = {};
                verify = oscard.result;
                entity['result'] = verify;
                verify = oscard.durationSeconds;
                entity['duration_seconds'] = verify;
                verify = oscard.error;
                entity['error'] = verify;
                verify = oscard.url;
                entity['url'] = verify;
                verify = oscard.statusCode;
                entity['status_code'] = verify;
                verify = oscard.bytesReceived;
                entity['bytes_received'] = verify;
                entity = golfie.bind(option)(report, entity);
                entity = 7;
                entity = tangon[entity];
                zuuluu = zuuluu.bind(michal)(entity);
                michal = zuuluu.increment;
                report = _closure2_slot0;
                tangon = report.prepareOtaMetricForDatadog;
                entity = ['result', 'statusCode'];
                entity = tangon.bind(report)(oscard, entity);
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            zuuluu = tangon.bind(report)(zuuluu, michal);
            michal = zuuluu.exhaustive;
            michal = michal.bind(zuuluu)();
            return entity;
        };
        entity['value'] = oscard;
        zuuluu[8] = entity;
        entity = {};
        oscard = 'prepareOtaMetricForDatadog';
        entity['key'] = oscard;
        michal = function(argFoo) { // Original name: value
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                zuuluu = argFoo;
                tangon = arguments[1];
                var _closure3_slot0 = zuuluu;
                entity = undefined;
                if(!(tangon === entity)) { _fun00002_ip = 22; continue _fun00001 }
 18:
                tangon = new Array(0);
 22:
                entity = {};
                zuuluu = zuuluu.type;
                entity['name'] = zuuluu;
                zuuluu = tangon.map;
                michal = function(argFoo) {
                    report = argFoo;
                    entity = _closure3_slot0;
                    tangon = entity[report];
                    entity = global;
                    entity = entity.HermesInternal;
                    zuuluu = entity.concat;
                    michal = '';
                    entity = ':';
                    entity = zuuluu.bind(michal)(report, entity, tangon);
                    return entity;
                };
                michal = zuuluu.bind(tangon)(michal);
                entity['tags'] = michal;
                return entity;
            }
        };
        entity['value'] = michal;
        zuuluu[9] = entity;
        michal = undefined;
        entity = null;
        entity = tangon.bind(michal)(report, entity, zuuluu);
        return entity;
    };
    michal = michal.bind(entity)();
    tangon = 8;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'lib/native/BundleUpdater.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();