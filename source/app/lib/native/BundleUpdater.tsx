// app/lib/native/BundleUpdater.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    verify = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = oscar;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = verify.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = verify.bind(entity)(tango);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    golf = report.bind(entity)(tango);
    tango = golf.NativeModules;
    options = golf.NativeEventEmitter;
    golf = 3;
    golf = oscar[golf];
    golf = report.bind(entity)(golf);
    golf = golf.AnalyticEvents;
    var _closure1_slot5 = golf;
    golf = 4;
    golf = oscar[golf];
    offset = verify.bind(entity)(golf);
    golf = offset.prototype;
    verify = Object.create(golf, {constructor: {value: offset}});
    foxtrot = 'BundleUpdater';
    backup = verify;
    golf = new backup[offset](foxtrot, romeo);
    golf = golf instanceof Object ? golf : verify;
    var _closure1_slot6 = golf;
    tango = tango.BundleUpdaterManager;
    var _closure1_slot7 = tango;
    golf = options.prototype;
    golf = Object.create(golf, {constructor: {value: options}});
    backup = golf;
    foxtrot = tango;
    tango = new backup[options](foxtrot, romeo);
    tango = tango instanceof Object ? tango : golf;
    var _closure1_slot8 = tango;
    tango = {'downloaded': 'BundleDownloaded', 'otaUpdateChecked': 'OtaUpdateChecked'};
    var _closure1_slot9 = tango;
    mike = function() {
        report = function() { // Original name: BundleUpdater
            tango = _closure1_slot3;
            zulu = _closure2_slot0;
            entity = undefined;
            mike = this;
            mike = tango.bind(entity)(mike, zulu);
            return entity;
        };
        var _closure2_slot0 = report;
        tango = _closure1_slot4;
        entity = {};
        zulu = 'getInitialBundleDownloaded';
        entity['key'] = zulu;
        zulu = function() { // Original name: value
            mike = _closure1_slot7;
            entity = mike.getInitialBundleDownloaded;
            entity = entity.bind(mike)();
            return entity;
        };
        entity['value'] = zulu;
        zulu = new Array(10);
        zulu[0] = entity;
        entity = {};
        oscar = 'getInitialOtaUpdateChecked';
        entity['key'] = oscar;
        oscar = function() { // Original name: value
            mike = _closure1_slot7;
            entity = mike.getInitialOtaUpdateChecked;
            entity = entity.bind(mike)();
            return entity;
        };
        entity['value'] = oscar;
        zulu[1] = entity;
        entity = {};
        oscar = 'addEventListener';
        entity['key'] = oscar;
        oscar = function(argFoo, argBar) { // Original name: value
            zulu = _closure1_slot9;
            mike = argFoo;
            tango = zulu[mike];
            zulu = _closure1_slot8;
            mike = zulu.addListener;
            entity = argBar;
            entity = mike.bind(zulu)(tango, entity);
            entity = undefined;
            return entity;
        };
        entity['value'] = oscar;
        zulu[2] = entity;
        entity = {};
        oscar = 'checkForUpdateAndReload';
        entity['key'] = oscar;
        oscar = function() { // Original name: value
            mike = _closure1_slot7;
            entity = mike.checkForUpdateAndReload;
            entity = entity.bind(mike)();
            entity = undefined;
            return entity;
        };
        entity['value'] = oscar;
        zulu[3] = entity;
        entity = {};
        oscar = 'getBuildOverrideCookieContents';
        entity['key'] = oscar;
        oscar = function() { // Original name: value
            mike = _closure1_slot7;
            entity = mike.getBuildOverrideCookieContents;
            entity = entity.bind(mike)();
            return entity;
        };
        entity['value'] = oscar;
        zulu[4] = entity;
        entity = {};
        oscar = 'setBuildOverrideCookieHeader';
        entity['key'] = oscar;
        oscar = function(argFoo) { // Original name: value
            zulu = _closure1_slot7;
            mike = zulu.setBuildOverrideCookieHeader;
            entity = argFoo;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        entity['value'] = oscar;
        zulu[5] = entity;
        entity = {};
        oscar = 'getOtaRootPath';
        entity['key'] = oscar;
        oscar = function() { // Original name: value
            mike = _closure1_slot7;
            entity = mike.getOtaRootPath;
            entity = entity.bind(mike)();
            return entity;
        };
        entity['value'] = oscar;
        zulu[6] = entity;
        entity = {};
        oscar = 'getManifestInfo';
        entity['key'] = oscar;
        oscar = function() { // Original name: value
            mike = _closure1_slot7;
            entity = mike.getManifestInfo;
            entity = entity.bind(mike)();
            return entity;
        };
        entity['value'] = oscar;
        zulu[7] = entity;
        entity = {};
        oscar = 'emitOtaMetric';
        entity['key'] = oscar;
        oscar = function(argFoo) { // Original name: value
            tango = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 5;
            zulu = zulu[entity];
            entity = undefined;
            report = tango.bind(entity)(zulu);
            tango = report.match;
            zulu = argFoo;
            oscar = tango.bind(report)(zulu);
            report = oscar.with;
            tango = {};
            zulu = 'OtaCheckAttempt';
            tango['type'] = zulu;
            zulu = function(argFoo) {
                oscar = argFoo;
                tango = _closure1_slot6;
                zulu = tango.verbose;
                mike = 'OTA check attempt';
                mike = zulu.bind(tango)(mike, oscar);
                zulu = _closure1_slot1;
                tango = _closure1_slot2;
                mike = 6;
                report = tango[mike];
                mike = undefined;
                options = zulu.bind(mike)(report);
                golf = options.track;
                entity = _closure1_slot5;
                report = entity.MOBILE_OTA_CHECK_ATTEMPT;
                entity = {};
                verify = oscar.result;
                entity['result'] = verify;
                verify = oscar.durationSeconds;
                entity['duration_seconds'] = verify;
                verify = oscar.bytesReceived;
                entity['bytes_received'] = verify;
                verify = oscar.error;
                entity['error'] = verify;
                entity = golf.bind(options)(report, entity);
                entity = 7;
                entity = tango[entity];
                zulu = zulu.bind(mike)(entity);
                mike = zulu.increment;
                report = _closure2_slot0;
                tango = report.prepareOtaMetricForDatadog;
                entity = ['result'];
                entity = tango.bind(report)(oscar, entity);
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            report = report.bind(oscar)(tango, zulu);
            tango = report.with;
            zulu = {};
            oscar = 'OtaAssetDownloadAttempt';
            zulu['type'] = oscar;
            mike = function(argFoo) {
                oscar = argFoo;
                tango = _closure1_slot6;
                zulu = tango.verbose;
                mike = 'OTA asset download attempt';
                mike = zulu.bind(tango)(mike, oscar);
                zulu = _closure1_slot1;
                tango = _closure1_slot2;
                mike = 6;
                report = tango[mike];
                mike = undefined;
                options = zulu.bind(mike)(report);
                golf = options.track;
                entity = _closure1_slot5;
                report = entity.MOBILE_OTA_ASSET_DOWNLOAD_ATTEMPT;
                entity = {};
                verify = oscar.result;
                entity['result'] = verify;
                verify = oscar.durationSeconds;
                entity['duration_seconds'] = verify;
                verify = oscar.error;
                entity['error'] = verify;
                verify = oscar.url;
                entity['url'] = verify;
                verify = oscar.statusCode;
                entity['status_code'] = verify;
                verify = oscar.bytesReceived;
                entity['bytes_received'] = verify;
                entity = golf.bind(options)(report, entity);
                entity = 7;
                entity = tango[entity];
                zulu = zulu.bind(mike)(entity);
                mike = zulu.increment;
                report = _closure2_slot0;
                tango = report.prepareOtaMetricForDatadog;
                entity = ['result', 'statusCode'];
                entity = tango.bind(report)(oscar, entity);
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            zulu = tango.bind(report)(zulu, mike);
            mike = zulu.exhaustive;
            mike = mike.bind(zulu)();
            return entity;
        };
        entity['value'] = oscar;
        zulu[8] = entity;
        entity = {};
        oscar = 'prepareOtaMetricForDatadog';
        entity['key'] = oscar;
        mike = function(argFoo) { // Original name: value
            _fun70386: for(var _fun70386_ip = 0; ; ) switch(_fun70386_ip) {
 0:
                zulu = argFoo;
                tango = arguments[1];
                var _closure3_slot0 = zulu;
                entity = undefined;
                if(!(tango === entity)) { _fun70386_ip = 22; continue _fun70386 }
 18:
                tango = new Array(0);
 22:
                entity = {};
                zulu = zulu.type;
                entity['name'] = zulu;
                zulu = tango.map;
                mike = function(argFoo) {
                    report = argFoo;
                    entity = _closure3_slot0;
                    tango = entity[report];
                    entity = global;
                    entity = entity.HermesInternal;
                    zulu = entity.concat;
                    mike = '';
                    entity = ':';
                    entity = zulu.bind(mike)(report, entity, tango);
                    return entity;
                };
                mike = zulu.bind(tango)(mike);
                entity['tags'] = mike;
                return entity;
            }
        };
        entity['value'] = mike;
        zulu[9] = entity;
        mike = undefined;
        entity = null;
        entity = tango.bind(mike)(report, entity, zulu);
        return entity;
    };
    mike = mike.bind(entity)();
    tango = 8;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'lib/native/BundleUpdater.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();