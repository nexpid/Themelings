// app/lib/RTCConnectionEvent.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    report = entity.Object;
    tangon = report.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = tangon.bind(report)(zuuluu, entity, michal);
    michal = {};
    entity = 'state';
    michal['State'] = entity;
    entity = 'speaking';
    michal['Speaking'] = entity;
    entity = 'video-source-quality-changed';
    michal['VideoSourceQualityChanged'] = entity;
    entity = 'video';
    michal['Video'] = entity;
    entity = 'flags';
    michal['Flags'] = entity;
    entity = 'platform';
    michal['Platform'] = entity;
    entity = 'ping';
    michal['Ping'] = entity;
    entity = 'client-connect';
    michal['ClientConnect'] = entity;
    entity = 'client-disconnect';
    michal['ClientDisconnect'] = entity;
    entity = 'outboundlossrate';
    michal['OutboundLossRate'] = entity;
    entity = 'secure-frames-update';
    michal['SecureFramesUpdate'] = entity;
    entity = 'roster-map-update';
    michal['RosterMapUpdate'] = entity;
    entity = 'users-merged';
    michal['UsersMerged'] = entity;
    tangon = argPlu;
    entity = 0;
    report = tangon[entity];
    tangon = argBar;
    entity = undefined;
    oscard = tangon.bind(entity)(report);
    report = oscard.fileFinishedImporting;
    tangon = 'lib/RTCConnectionEvent.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['RTCConnectionEvent'] = michal;
    return entity;
})();