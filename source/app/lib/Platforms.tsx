// app/lib/Platforms.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = golfie;
    var _closure1_slot1 = oscard;
    entity = global;
    offset = entity.Object;
    option = offset.defineProperty;
    michal = {};
    verify = true;
    michal['value'] = verify;
    entity = '__esModule';
    entity = option.bind(offset)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    offset = michal.PlatformTypes;
    michal = {};
    option = offset.TWITCH;
    michal['type'] = option;
    option = 'Twitch';
    michal['name'] = option;
    yankee = 1;
    option = oscard[yankee];
    foxtra = report.bind(entity)(option);
    romeon = foxtra.unsafe_getRawColor;
    option = 'TWITCH';
    option = romeon.bind(foxtra)(option);
    michal['color'] = option;
    option = {};
    romeon = 2;
    foxtra = oscard[romeon];
    foxtra = report.bind(entity)(foxtra);
    option['lightPNG'] = foxtra;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    option['darkPNG'] = romeon;
    romeon = 3;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    option['whitePNG'] = romeon;
    romeon = 4;
    foxtra = oscard[romeon];
    foxtra = report.bind(entity)(foxtra);
    option['lightSVG'] = foxtra;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    option['darkSVG'] = romeon;
    romeon = 5;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    option['whiteSVG'] = romeon;
    michal['icon'] = option;
    michal['enabled'] = verify;
    option = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://www.twitch.tv/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = option;
    option = ['twitch.tv', 'twitch.com'];
    michal['domains'] = option;
    option = new Array(29);
    option[0] = michal;
    michal = {};
    romeon = offset.YOUTUBE;
    michal['type'] = romeon;
    romeon = 'YouTube';
    michal['name'] = romeon;
    romeon = oscard[yankee];
    backup = report.bind(entity)(romeon);
    foxtra = backup.unsafe_getRawColor;
    romeon = 'YOUTUBE';
    romeon = foxtra.bind(backup)(romeon);
    michal['color'] = romeon;
    romeon = {};
    foxtra = 6;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightPNG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkPNG'] = foxtra;
    foxtra = 7;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whitePNG'] = foxtra;
    foxtra = 8;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightSVG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkSVG'] = foxtra;
    foxtra = 9;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whiteSVG'] = foxtra;
    michal['icon'] = romeon;
    michal['enabled'] = verify;
    romeon = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.id;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://www.youtube.com/channel/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = romeon;
    romeon = ['youtube.com', 'youtu.be'];
    michal['domains'] = romeon;
    option[1] = michal;
    michal = {};
    romeon = offset.BATTLENET;
    michal['type'] = romeon;
    romeon = 'Battle.net';
    michal['name'] = romeon;
    romeon = oscard[yankee];
    backup = report.bind(entity)(romeon);
    foxtra = backup.unsafe_getRawColor;
    romeon = 'BATTLENET';
    romeon = foxtra.bind(backup)(romeon);
    michal['color'] = romeon;
    romeon = {};
    foxtra = 10;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightPNG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkPNG'] = foxtra;
    foxtra = 11;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whitePNG'] = foxtra;
    foxtra = 12;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightSVG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkSVG'] = foxtra;
    foxtra = 13;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whiteSVG'] = foxtra;
    michal['icon'] = romeon;
    michal['enabled'] = verify;
    option[2] = michal;
    michal = {'type': null, 'name': 'Bluesky', 'icon': null, 'enabled': true, 'getPlatformUserUrl': null, 'isFederated': true, 'hasMetadata': true};
    romeon = offset.BLUESKY;
    michal['type'] = romeon;
    romeon = {};
    foxtra = 14;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightPNG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkPNG'] = foxtra;
    foxtra = 15;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whitePNG'] = foxtra;
    foxtra = 16;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightSVG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkSVG'] = foxtra;
    foxtra = 17;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whiteSVG'] = foxtra;
    michal['icon'] = romeon;
    romeon = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.id;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        report = zuuluu.bind(michal)(tangon);
        tangon = report.replaceAll;
        zuuluu = '%3A';
        michal = ':';
        zuuluu = tangon.bind(report)(zuuluu, michal);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://bsky.app/profile/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = romeon;
    option[3] = michal;
    michal = {};
    romeon = offset.BUNGIE;
    michal['type'] = romeon;
    romeon = 'Bungie.net';
    michal['name'] = romeon;
    romeon = oscard[yankee];
    backup = report.bind(entity)(romeon);
    foxtra = backup.unsafe_getRawColor;
    romeon = 'BUNGIE';
    romeon = foxtra.bind(backup)(romeon);
    michal['color'] = romeon;
    romeon = {};
    foxtra = 18;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['lightPNG'] = foxtra;
    foxtra = 19;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkPNG'] = foxtra;
    foxtra = 20;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whitePNG'] = foxtra;
    foxtra = 21;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['lightSVG'] = foxtra;
    foxtra = 22;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkSVG'] = foxtra;
    foxtra = 23;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whiteSVG'] = foxtra;
    michal['icon'] = romeon;
    michal['enabled'] = verify;
    option[4] = michal;
    michal = {};
    romeon = offset.SKYPE;
    michal['type'] = romeon;
    romeon = 'Skype';
    michal['name'] = romeon;
    romeon = oscard[yankee];
    backup = report.bind(entity)(romeon);
    foxtra = backup.unsafe_getRawColor;
    romeon = 'SKYPE';
    romeon = foxtra.bind(backup)(romeon);
    michal['color'] = romeon;
    romeon = {};
    foxtra = 24;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightPNG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkPNG'] = foxtra;
    foxtra = 25;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whitePNG'] = foxtra;
    foxtra = 26;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightSVG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkSVG'] = foxtra;
    foxtra = 27;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whiteSVG'] = foxtra;
    michal['icon'] = romeon;
    romeon = false;
    michal['enabled'] = romeon;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.id;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        tangon = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        zuuluu = entity.concat;
        michal = 'skype:';
        entity = '?userinfo';
        entity = zuuluu.bind(michal)(tangon, entity);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    option[5] = michal;
    michal = {};
    foxtra = offset.LEAGUE_OF_LEGENDS;
    michal['type'] = foxtra;
    foxtra = 'League of Legends';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'LOL';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 28;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 29;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 30;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 31;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    option[6] = michal;
    michal = {};
    foxtra = offset.STEAM;
    michal['type'] = foxtra;
    foxtra = 'Steam';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'STEAM';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 32;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    backup = 33;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 34;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightSVG'] = backup;
    backup = 35;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.id;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://steamcommunity.com/profiles/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    michal['hasMetadata'] = verify;
    option[7] = michal;
    michal = {};
    foxtra = offset.REDDIT;
    michal['type'] = foxtra;
    foxtra = 'Reddit';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'REDDIT';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 36;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 37;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 38;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 39;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    foxtra = ['reddit.com'];
    michal['domains'] = foxtra;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://www.reddit.com/u/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    michal['hasMetadata'] = verify;
    option[8] = michal;
    michal = {};
    foxtra = offset.FACEBOOK;
    michal['type'] = foxtra;
    foxtra = 'Facebook';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'FACEBOOK';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 40;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 41;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 42;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 43;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    foxtra = ['facebook.com'];
    michal['domains'] = foxtra;
    michal['enabled'] = verify;
    option[9] = michal;
    michal = {};
    foxtra = offset.TWITTER_LEGACY;
    michal['type'] = foxtra;
    foxtra = 'Twitter';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    backup = report.bind(entity)(foxtra);
    foxtra = backup.unsafe_getRawColor;
    kiloes = 'TWITTER';
    foxtra = foxtra.bind(backup)(kiloes);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 44;
    sizing = oscard[backup];
    sizing = report.bind(entity)(sizing);
    foxtra['lightPNG'] = sizing;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 45;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 46;
    sizing = oscard[backup];
    sizing = report.bind(entity)(sizing);
    foxtra['lightSVG'] = sizing;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 47;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = romeon;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://twitter.com/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    foxtra = ['twitter.com'];
    michal['domains'] = foxtra;
    michal['hasMetadata'] = verify;
    option[10] = michal;
    michal = {};
    foxtra = offset.TWITTER;
    michal['type'] = foxtra;
    foxtra = 'X';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    backup = report.bind(entity)(foxtra);
    foxtra = backup.unsafe_getRawColor;
    foxtra = foxtra.bind(backup)(kiloes);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 48;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    backup = 49;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 50;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 51;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightSVG'] = backup;
    backup = 52;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 53;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://x.com/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    foxtra = ['x.com'];
    michal['domains'] = foxtra;
    michal['hasMetadata'] = verify;
    option[11] = michal;
    michal = {};
    foxtra = offset.SPOTIFY;
    michal['type'] = foxtra;
    foxtra = 'Spotify';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'SPOTIFY';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 54;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 55;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 56;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 57;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.id;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://open.spotify.com/user/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    option[12] = michal;
    michal = {};
    foxtra = offset.XBOX;
    michal['type'] = foxtra;
    foxtra = 'Xbox';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'XBOX';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 58;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    backup = 59;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 60;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightSVG'] = backup;
    backup = 61;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    backup = 62;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['customPNG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    option[13] = michal;
    michal = {};
    foxtra = offset.SAMSUNG;
    michal['type'] = foxtra;
    foxtra = 'Samsung Galaxy';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'SAMSUNG';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 63;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 64;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 65;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 66;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = romeon;
    option[14] = michal;
    michal = {};
    foxtra = offset.GITHUB;
    michal['type'] = foxtra;
    foxtra = 'GitHub';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    kiloes = report.bind(entity)(foxtra);
    backup = kiloes.unsafe_getRawColor;
    foxtra = 'GITHUB';
    foxtra = backup.bind(kiloes)(foxtra);
    michal['color'] = foxtra;
    foxtra = {};
    backup = 67;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    backup = 68;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 69;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightSVG'] = backup;
    backup = 70;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://github.com/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    foxtra = ['github.com'];
    michal['domains'] = foxtra;
    option[15] = michal;
    michal = {};
    foxtra = offset.PLAYSTATION;
    michal['type'] = foxtra;
    foxtra = 'PlayStation Network';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    backup = report.bind(entity)(foxtra);
    foxtra = backup.unsafe_getRawColor;
    echoed = 'PLAYSTATION';
    foxtra = foxtra.bind(backup)(echoed);
    michal['color'] = foxtra;
    foxtra = {};
    sizing = 71;
    backup = oscard[sizing];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    output = 72;
    backup = oscard[output];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = oscard[output];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 73;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    kiloes = 74;
    result = oscard[kiloes];
    result = report.bind(entity)(result);
    foxtra['darkSVG'] = result;
    result = oscard[kiloes];
    result = report.bind(entity)(result);
    foxtra['whiteSVG'] = result;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    option[16] = michal;
    michal = {};
    foxtra = offset.PLAYSTATION_STAGING;
    michal['type'] = foxtra;
    foxtra = 'PlayStation Network (Staging)';
    michal['name'] = foxtra;
    foxtra = oscard[yankee];
    result = report.bind(entity)(foxtra);
    foxtra = result.unsafe_getRawColor;
    foxtra = foxtra.bind(result)(echoed);
    michal['color'] = foxtra;
    foxtra = {};
    output = oscard[output];
    output = report.bind(entity)(output);
    foxtra['lightPNG'] = output;
    output = oscard[sizing];
    output = report.bind(entity)(output);
    foxtra['darkPNG'] = output;
    sizing = oscard[sizing];
    sizing = report.bind(entity)(sizing);
    foxtra['whitePNG'] = sizing;
    kiloes = oscard[kiloes];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = romeon;
    option[17] = michal;
    michal = {};
    foxtra = offset.EPIC_GAMES;
    michal['type'] = foxtra;
    foxtra = 'Epic Games';
    michal['name'] = foxtra;
    foxtra = {};
    backup = 75;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    backup = 76;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 77;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightSVG'] = backup;
    backup = 78;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    option[18] = michal;
    michal = {};
    foxtra = offset.RIOT_GAMES;
    michal['type'] = foxtra;
    foxtra = 'Riot Games';
    michal['name'] = foxtra;
    foxtra = {};
    backup = 79;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 80;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 81;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 82;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    option[19] = michal;
    michal = {};
    foxtra = offset.ROBLOX;
    michal['type'] = foxtra;
    foxtra = 'Roblox';
    michal['name'] = foxtra;
    foxtra = {};
    backup = 83;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    backup = 84;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 85;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 86;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightSVG'] = backup;
    backup = 87;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 88;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = verify;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.id;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        tangon = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        zuuluu = entity.concat;
        michal = 'https://roblox.com/users/';
        entity = '/profile';
        entity = zuuluu.bind(michal)(tangon, entity);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    option[20] = michal;
    michal = {'type': null, 'name': 'PayPal', 'icon': null, 'enabled': true, 'hasMetadata': true};
    foxtra = offset.PAYPAL;
    michal['type'] = foxtra;
    foxtra = {};
    backup = 89;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 90;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 91;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 92;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    option[21] = michal;
    michal = {'type': null, 'name': 'eBay', 'icon': null, 'enabled': true, 'hasMetadata': true};
    foxtra = offset.EBAY;
    michal['type'] = foxtra;
    foxtra = {};
    backup = 93;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 94;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 95;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 96;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://www.ebay.com/usr/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    option[22] = michal;
    michal = {'type': null, 'name': 'TikTok', 'icon': null, 'enabled': true, 'hasMetadata': true};
    foxtra = offset.TIKTOK;
    michal['type'] = foxtra;
    foxtra = {};
    backup = 97;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightPNG'] = backup;
    backup = 98;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 99;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['lightSVG'] = backup;
    backup = 100;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['darkSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    foxtra = ['tiktok.com'];
    michal['domains'] = foxtra;
    foxtra = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://www.tiktok.com/@';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = foxtra;
    option[23] = michal;
    michal = {};
    foxtra = offset.INSTAGRAM;
    michal['type'] = foxtra;
    foxtra = 'Instagram';
    michal['name'] = foxtra;
    foxtra = {};
    backup = 101;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightPNG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkPNG'] = backup;
    backup = 102;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whitePNG'] = backup;
    backup = 103;
    kiloes = oscard[backup];
    kiloes = report.bind(entity)(kiloes);
    foxtra['lightSVG'] = kiloes;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['darkSVG'] = backup;
    backup = 104;
    backup = oscard[backup];
    backup = report.bind(entity)(backup);
    foxtra['whiteSVG'] = backup;
    michal['icon'] = foxtra;
    michal['enabled'] = romeon;
    romeon = ['instagram.com'];
    michal['domains'] = romeon;
    romeon = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.name;
        entity = global;
        zuuluu = entity.encodeURIComponent;
        michal = undefined;
        zuuluu = zuuluu.bind(michal)(tangon);
        entity = entity.HermesInternal;
        michal = entity.concat;
        entity = 'https://www.instagram.com/';
        entity = michal.bind(entity)(zuuluu);
        return entity;
    };
    michal['getPlatformUserUrl'] = romeon;
    option[24] = michal;
    michal = {'type': null, 'name': 'Mastodon', 'icon': null, 'enabled': false, 'getPlatformUserUrl': null, 'isFederated': true, 'hasMetadata': true};
    romeon = offset.MASTODON;
    michal['type'] = romeon;
    romeon = {};
    foxtra = 105;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightPNG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkPNG'] = foxtra;
    foxtra = 106;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whitePNG'] = foxtra;
    foxtra = 107;
    backup = oscard[foxtra];
    backup = report.bind(entity)(backup);
    romeon['lightSVG'] = backup;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['darkSVG'] = foxtra;
    foxtra = 108;
    foxtra = oscard[foxtra];
    foxtra = report.bind(entity)(foxtra);
    romeon['whiteSVG'] = foxtra;
    michal['icon'] = romeon;
    romeon = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        entity = entity.id;
        return entity;
    };
    michal['getPlatformUserUrl'] = romeon;
    option[25] = michal;
    michal = {};
    romeon = offset.CRUNCHYROLL;
    michal['type'] = romeon;
    romeon = 'Crunchyroll';
    michal['name'] = romeon;
    yankee = oscard[yankee];
    foxtra = report.bind(entity)(yankee);
    romeon = foxtra.unsafe_getRawColor;
    yankee = 'CRUNCHYROLL';
    yankee = romeon.bind(foxtra)(yankee);
    michal['color'] = yankee;
    yankee = {};
    romeon = 109;
    foxtra = oscard[romeon];
    foxtra = report.bind(entity)(foxtra);
    yankee['lightPNG'] = foxtra;
    foxtra = oscard[romeon];
    foxtra = report.bind(entity)(foxtra);
    yankee['darkPNG'] = foxtra;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    yankee['whitePNG'] = romeon;
    romeon = 110;
    foxtra = oscard[romeon];
    foxtra = report.bind(entity)(foxtra);
    yankee['lightSVG'] = foxtra;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    yankee['darkSVG'] = romeon;
    romeon = 111;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    yankee['whiteSVG'] = romeon;
    michal['icon'] = yankee;
    michal['enabled'] = verify;
    option[26] = michal;
    michal = {};
    yankee = offset.DOMAIN;
    michal['type'] = yankee;
    yankee = 'Domain';
    michal['name'] = yankee;
    yankee = {};
    romeon = 112;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    yankee['lightPNG'] = romeon;
    romeon = 113;
    foxtra = oscard[romeon];
    foxtra = report.bind(entity)(foxtra);
    yankee['darkPNG'] = foxtra;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    yankee['whitePNG'] = romeon;
    romeon = 114;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    yankee['lightSVG'] = romeon;
    romeon = 115;
    foxtra = oscard[romeon];
    foxtra = report.bind(entity)(foxtra);
    yankee['darkSVG'] = foxtra;
    romeon = oscard[romeon];
    romeon = report.bind(entity)(romeon);
    yankee['whiteSVG'] = romeon;
    michal['icon'] = yankee;
    yankee = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tangon = entity.id;
        entity = global;
        entity = entity.HermesInternal;
        zuuluu = entity.concat;
        michal = 'https://';
        entity = '/';
        entity = zuuluu.bind(michal)(tangon, entity);
        return entity;
    };
    michal['getPlatformUserUrl'] = yankee;
    michal['enabled'] = verify;
    option[27] = michal;
    michal = {};
    offset = offset.AMAZON_MUSIC;
    michal['type'] = offset;
    offset = 'Amazon Music';
    michal['name'] = offset;
    offset = {};
    yankee = 116;
    romeon = oscard[yankee];
    romeon = report.bind(entity)(romeon);
    offset['lightPNG'] = romeon;
    romeon = oscard[yankee];
    romeon = report.bind(entity)(romeon);
    offset['darkPNG'] = romeon;
    yankee = oscard[yankee];
    yankee = report.bind(entity)(yankee);
    offset['whitePNG'] = yankee;
    yankee = 117;
    romeon = oscard[yankee];
    romeon = report.bind(entity)(romeon);
    offset['lightSVG'] = romeon;
    romeon = oscard[yankee];
    romeon = report.bind(entity)(romeon);
    offset['darkSVG'] = romeon;
    yankee = oscard[yankee];
    yankee = report.bind(entity)(yankee);
    offset['whiteSVG'] = yankee;
    michal['icon'] = offset;
    michal['enabled'] = verify;
    option[28] = michal;
    var _closure1_slot2 = option;
    michal = 118;
    michal = oscard[michal];
    verify = golfie.bind(entity)(michal);
    golfie = verify.keyBy;
    michal = 'type';
    michal = golfie.bind(verify)(option, michal);
    var _closure1_slot3 = michal;
    michal = {};
    var _closure1_slot4 = michal;
    golfie = option.forEach;
    michal = function(argFoo) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = argFoo;
            var _closure2_slot0 = michal;
            zuuluu = michal.domains;
            michal = null;
            if(!(michal != zuuluu)) { _fun00002_ip = 36; continue _fun00001 }
 21:
            michal = zuuluu.forEach;
            entity = function(argFoo) {
                zuuluu = _closure1_slot4;
                michal = _closure2_slot0;
                entity = argFoo;
                zuuluu[entity] = michal;
                entity = undefined;
                return entity;
            };
            entity = michal.bind(zuuluu)(entity);
 36:
            entity = undefined;
            return entity;
        }
    };
    michal = golfie.bind(option)(michal);
    michal = {};
    golfie = function(argFoo) { // Original name: get
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            michal = _closure1_slot3;
            entity = argFoo;
            michal = michal[entity];
            entity = null;
            zuuluu = entity != michal;
            if(!zuuluu) { _fun00004_ip = 26; continue _fun00003 }
 23:
            entity = michal;
 26:
            return entity;
        }
    };
    michal['get'] = golfie;
    golfie = function(argFoo) { // Original name: getByUrl
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            tangon = _closure1_slot0;
            zuuluu = _closure1_slot1;
            michal = 119;
            michal = zuuluu[michal];
            zuuluu = undefined;
            report = tangon.bind(zuuluu)(michal);
            tangon = report.toURLSafe;
            michal = argFoo;
            michal = tangon.bind(report)(michal);
            tangon = null;
            if(!(tangon == michal)) { _fun00006_ip = 47; continue _fun00005 }
 45:
            return zuuluu;
 47:
            report = michal.hostname;
            zuuluu = report.startsWith;
            michal = 'www.';
            zuuluu = zuuluu.bind(report)(michal);
            michal = report;
            if(!zuuluu) { _fun00006_ip = 89; continue _fun00005 }
 76:
            tangon = report.slice;
            zuuluu = 4;
            michal = tangon.bind(report)(zuuluu);
 89:
            entity = _closure1_slot4;
            entity = entity[michal];
            return entity;
        }
    };
    michal['getByUrl'] = golfie;
    golfie = function(argFoo) { // Original name: isSupported
        entity = global;
        entity = entity.Object;
        entity = entity.prototype;
        tangon = entity.hasOwnProperty;
        zuuluu = tangon.call;
        michal = _closure1_slot3;
        entity = argFoo;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal['isSupported'] = golfie;
    golfie = function(argFoo) { // Original name: map
        zuuluu = _closure1_slot2;
        michal = zuuluu.map;
        entity = argFoo;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    michal['map'] = golfie;
    golfie = function(argFoo) { // Original name: filter
        zuuluu = _closure1_slot2;
        michal = zuuluu.filter;
        entity = argFoo;
        entity = michal.bind(zuuluu)(entity);
        zuuluu = entity.sort;
        michal = function(argFoo, argBar) {
            entity = argFoo;
            zuuluu = entity.name;
            entity = argBar;
            michal = entity.name;
            entity = zuuluu.localeCompare;
            entity = entity.bind(zuuluu)(michal);
            return entity;
        };
        michal = zuuluu.bind(entity)(michal);
        return entity;
    };
    michal['filter'] = golfie;
    tangon = function(argFoo) { // Original name: find
        zuuluu = _closure1_slot2;
        michal = zuuluu.find;
        entity = argFoo;
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    michal['find'] = tangon;
    tangon = 120;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'lib/Platforms.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();