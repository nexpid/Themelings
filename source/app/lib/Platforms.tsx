// app/lib/Platforms.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = golf;
    var _closure1_slot1 = oscar;
    entity = global;
    offset = entity.Object;
    options = offset.defineProperty;
    mike = {};
    verify = true;
    mike['value'] = verify;
    entity = '__esModule';
    entity = options.bind(offset)(zulu, entity, mike);
    entity = 0;
    mike = oscar[entity];
    entity = undefined;
    mike = report.bind(entity)(mike);
    offset = mike.PlatformTypes;
    mike = {};
    options = offset.TWITCH;
    mike['type'] = options;
    options = 'Twitch';
    mike['name'] = options;
    yankee = 1;
    options = oscar[yankee];
    foxtrot = report.bind(entity)(options);
    romeo = foxtrot.unsafe_getRawColor;
    options = 'TWITCH';
    options = romeo.bind(foxtrot)(options);
    mike['color'] = options;
    options = {};
    romeo = 2;
    foxtrot = oscar[romeo];
    foxtrot = report.bind(entity)(foxtrot);
    options['lightPNG'] = foxtrot;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    options['darkPNG'] = romeo;
    romeo = 3;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    options['whitePNG'] = romeo;
    romeo = 4;
    foxtrot = oscar[romeo];
    foxtrot = report.bind(entity)(foxtrot);
    options['lightSVG'] = foxtrot;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    options['darkSVG'] = romeo;
    romeo = 5;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    options['whiteSVG'] = romeo;
    mike['icon'] = options;
    mike['enabled'] = verify;
    options = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://www.twitch.tv/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = options;
    options = ['twitch.tv', 'twitch.com'];
    mike['domains'] = options;
    options = new Array(29);
    options[0] = mike;
    mike = {};
    romeo = offset.YOUTUBE;
    mike['type'] = romeo;
    romeo = 'YouTube';
    mike['name'] = romeo;
    romeo = oscar[yankee];
    backup = report.bind(entity)(romeo);
    foxtrot = backup.unsafe_getRawColor;
    romeo = 'YOUTUBE';
    romeo = foxtrot.bind(backup)(romeo);
    mike['color'] = romeo;
    romeo = {};
    foxtrot = 6;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightPNG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkPNG'] = foxtrot;
    foxtrot = 7;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whitePNG'] = foxtrot;
    foxtrot = 8;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightSVG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkSVG'] = foxtrot;
    foxtrot = 9;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whiteSVG'] = foxtrot;
    mike['icon'] = romeo;
    mike['enabled'] = verify;
    romeo = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.id;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://www.youtube.com/channel/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = romeo;
    romeo = ['youtube.com', 'youtu.be'];
    mike['domains'] = romeo;
    options[1] = mike;
    mike = {};
    romeo = offset.BATTLENET;
    mike['type'] = romeo;
    romeo = 'Battle.net';
    mike['name'] = romeo;
    romeo = oscar[yankee];
    backup = report.bind(entity)(romeo);
    foxtrot = backup.unsafe_getRawColor;
    romeo = 'BATTLENET';
    romeo = foxtrot.bind(backup)(romeo);
    mike['color'] = romeo;
    romeo = {};
    foxtrot = 10;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightPNG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkPNG'] = foxtrot;
    foxtrot = 11;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whitePNG'] = foxtrot;
    foxtrot = 12;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightSVG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkSVG'] = foxtrot;
    foxtrot = 13;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whiteSVG'] = foxtrot;
    mike['icon'] = romeo;
    mike['enabled'] = verify;
    options[2] = mike;
    mike = {'type': null, 'name': 'Bluesky', 'icon': null, 'enabled': true, 'getPlatformUserUrl': null, 'isFederated': true, 'hasMetadata': true};
    romeo = offset.BLUESKY;
    mike['type'] = romeo;
    romeo = {};
    foxtrot = 14;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightPNG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkPNG'] = foxtrot;
    foxtrot = 15;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whitePNG'] = foxtrot;
    foxtrot = 16;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightSVG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkSVG'] = foxtrot;
    foxtrot = 17;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whiteSVG'] = foxtrot;
    mike['icon'] = romeo;
    romeo = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.id;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        report = zulu.bind(mike)(tango);
        tango = report.replaceAll;
        zulu = '%3A';
        mike = ':';
        zulu = tango.bind(report)(zulu, mike);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://bsky.app/profile/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = romeo;
    options[3] = mike;
    mike = {};
    romeo = offset.BUNGIE;
    mike['type'] = romeo;
    romeo = 'Bungie.net';
    mike['name'] = romeo;
    romeo = oscar[yankee];
    backup = report.bind(entity)(romeo);
    foxtrot = backup.unsafe_getRawColor;
    romeo = 'BUNGIE';
    romeo = foxtrot.bind(backup)(romeo);
    mike['color'] = romeo;
    romeo = {};
    foxtrot = 18;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['lightPNG'] = foxtrot;
    foxtrot = 19;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkPNG'] = foxtrot;
    foxtrot = 20;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whitePNG'] = foxtrot;
    foxtrot = 21;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['lightSVG'] = foxtrot;
    foxtrot = 22;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkSVG'] = foxtrot;
    foxtrot = 23;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whiteSVG'] = foxtrot;
    mike['icon'] = romeo;
    mike['enabled'] = verify;
    options[4] = mike;
    mike = {};
    romeo = offset.SKYPE;
    mike['type'] = romeo;
    romeo = 'Skype';
    mike['name'] = romeo;
    romeo = oscar[yankee];
    backup = report.bind(entity)(romeo);
    foxtrot = backup.unsafe_getRawColor;
    romeo = 'SKYPE';
    romeo = foxtrot.bind(backup)(romeo);
    mike['color'] = romeo;
    romeo = {};
    foxtrot = 24;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightPNG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkPNG'] = foxtrot;
    foxtrot = 25;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whitePNG'] = foxtrot;
    foxtrot = 26;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightSVG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkSVG'] = foxtrot;
    foxtrot = 27;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whiteSVG'] = foxtrot;
    mike['icon'] = romeo;
    romeo = false;
    mike['enabled'] = romeo;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.id;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        tango = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        zulu = entity.concat;
        mike = 'skype:';
        entity = '?userinfo';
        entity = zulu.bind(mike)(tango, entity);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    options[5] = mike;
    mike = {};
    foxtrot = offset.LEAGUE_OF_LEGENDS;
    mike['type'] = foxtrot;
    foxtrot = 'League of Legends';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'LOL';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 28;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 29;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 30;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 31;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    options[6] = mike;
    mike = {};
    foxtrot = offset.STEAM;
    mike['type'] = foxtrot;
    foxtrot = 'Steam';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'STEAM';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 32;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    backup = 33;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 34;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightSVG'] = backup;
    backup = 35;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.id;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://steamcommunity.com/profiles/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    mike['hasMetadata'] = verify;
    options[7] = mike;
    mike = {};
    foxtrot = offset.REDDIT;
    mike['type'] = foxtrot;
    foxtrot = 'Reddit';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'REDDIT';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 36;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 37;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 38;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 39;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    foxtrot = ['reddit.com'];
    mike['domains'] = foxtrot;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://www.reddit.com/u/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    mike['hasMetadata'] = verify;
    options[8] = mike;
    mike = {};
    foxtrot = offset.FACEBOOK;
    mike['type'] = foxtrot;
    foxtrot = 'Facebook';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'FACEBOOK';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 40;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 41;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 42;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 43;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    foxtrot = ['facebook.com'];
    mike['domains'] = foxtrot;
    mike['enabled'] = verify;
    options[9] = mike;
    mike = {};
    foxtrot = offset.TWITTER_LEGACY;
    mike['type'] = foxtrot;
    foxtrot = 'Twitter';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    backup = report.bind(entity)(foxtrot);
    foxtrot = backup.unsafe_getRawColor;
    kilo = 'TWITTER';
    foxtrot = foxtrot.bind(backup)(kilo);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 44;
    sizing = oscar[backup];
    sizing = report.bind(entity)(sizing);
    foxtrot['lightPNG'] = sizing;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 45;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 46;
    sizing = oscar[backup];
    sizing = report.bind(entity)(sizing);
    foxtrot['lightSVG'] = sizing;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 47;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = romeo;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://twitter.com/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    foxtrot = ['twitter.com'];
    mike['domains'] = foxtrot;
    mike['hasMetadata'] = verify;
    options[10] = mike;
    mike = {};
    foxtrot = offset.TWITTER;
    mike['type'] = foxtrot;
    foxtrot = 'X';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    backup = report.bind(entity)(foxtrot);
    foxtrot = backup.unsafe_getRawColor;
    foxtrot = foxtrot.bind(backup)(kilo);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 48;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    backup = 49;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 50;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 51;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightSVG'] = backup;
    backup = 52;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 53;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://x.com/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    foxtrot = ['x.com'];
    mike['domains'] = foxtrot;
    mike['hasMetadata'] = verify;
    options[11] = mike;
    mike = {};
    foxtrot = offset.SPOTIFY;
    mike['type'] = foxtrot;
    foxtrot = 'Spotify';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'SPOTIFY';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 54;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 55;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 56;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 57;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.id;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://open.spotify.com/user/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    options[12] = mike;
    mike = {};
    foxtrot = offset.XBOX;
    mike['type'] = foxtrot;
    foxtrot = 'Xbox';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'XBOX';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 58;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    backup = 59;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 60;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightSVG'] = backup;
    backup = 61;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    backup = 62;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['customPNG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    options[13] = mike;
    mike = {};
    foxtrot = offset.SAMSUNG;
    mike['type'] = foxtrot;
    foxtrot = 'Samsung Galaxy';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'SAMSUNG';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 63;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 64;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 65;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 66;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = romeo;
    options[14] = mike;
    mike = {};
    foxtrot = offset.GITHUB;
    mike['type'] = foxtrot;
    foxtrot = 'GitHub';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    kilo = report.bind(entity)(foxtrot);
    backup = kilo.unsafe_getRawColor;
    foxtrot = 'GITHUB';
    foxtrot = backup.bind(kilo)(foxtrot);
    mike['color'] = foxtrot;
    foxtrot = {};
    backup = 67;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    backup = 68;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 69;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightSVG'] = backup;
    backup = 70;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://github.com/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    foxtrot = ['github.com'];
    mike['domains'] = foxtrot;
    options[15] = mike;
    mike = {};
    foxtrot = offset.PLAYSTATION;
    mike['type'] = foxtrot;
    foxtrot = 'PlayStation Network';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    backup = report.bind(entity)(foxtrot);
    foxtrot = backup.unsafe_getRawColor;
    echo = 'PLAYSTATION';
    foxtrot = foxtrot.bind(backup)(echo);
    mike['color'] = foxtrot;
    foxtrot = {};
    sizing = 71;
    backup = oscar[sizing];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    output = 72;
    backup = oscar[output];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = oscar[output];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 73;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    kilo = 74;
    result = oscar[kilo];
    result = report.bind(entity)(result);
    foxtrot['darkSVG'] = result;
    result = oscar[kilo];
    result = report.bind(entity)(result);
    foxtrot['whiteSVG'] = result;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    options[16] = mike;
    mike = {};
    foxtrot = offset.PLAYSTATION_STAGING;
    mike['type'] = foxtrot;
    foxtrot = 'PlayStation Network (Staging)';
    mike['name'] = foxtrot;
    foxtrot = oscar[yankee];
    result = report.bind(entity)(foxtrot);
    foxtrot = result.unsafe_getRawColor;
    foxtrot = foxtrot.bind(result)(echo);
    mike['color'] = foxtrot;
    foxtrot = {};
    output = oscar[output];
    output = report.bind(entity)(output);
    foxtrot['lightPNG'] = output;
    output = oscar[sizing];
    output = report.bind(entity)(output);
    foxtrot['darkPNG'] = output;
    sizing = oscar[sizing];
    sizing = report.bind(entity)(sizing);
    foxtrot['whitePNG'] = sizing;
    kilo = oscar[kilo];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = romeo;
    options[17] = mike;
    mike = {};
    foxtrot = offset.EPIC_GAMES;
    mike['type'] = foxtrot;
    foxtrot = 'Epic Games';
    mike['name'] = foxtrot;
    foxtrot = {};
    backup = 75;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    backup = 76;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 77;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightSVG'] = backup;
    backup = 78;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    options[18] = mike;
    mike = {};
    foxtrot = offset.RIOT_GAMES;
    mike['type'] = foxtrot;
    foxtrot = 'Riot Games';
    mike['name'] = foxtrot;
    foxtrot = {};
    backup = 79;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 80;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 81;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 82;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    options[19] = mike;
    mike = {};
    foxtrot = offset.ROBLOX;
    mike['type'] = foxtrot;
    foxtrot = 'Roblox';
    mike['name'] = foxtrot;
    foxtrot = {};
    backup = 83;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    backup = 84;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 85;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 86;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightSVG'] = backup;
    backup = 87;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 88;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = verify;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.id;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        tango = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        zulu = entity.concat;
        mike = 'https://roblox.com/users/';
        entity = '/profile';
        entity = zulu.bind(mike)(tango, entity);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    options[20] = mike;
    mike = {'type': null, 'name': 'PayPal', 'icon': null, 'enabled': true, 'hasMetadata': true};
    foxtrot = offset.PAYPAL;
    mike['type'] = foxtrot;
    foxtrot = {};
    backup = 89;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 90;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 91;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 92;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    options[21] = mike;
    mike = {'type': null, 'name': 'eBay', 'icon': null, 'enabled': true, 'hasMetadata': true};
    foxtrot = offset.EBAY;
    mike['type'] = foxtrot;
    foxtrot = {};
    backup = 93;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 94;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 95;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 96;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://www.ebay.com/usr/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    options[22] = mike;
    mike = {'type': null, 'name': 'TikTok', 'icon': null, 'enabled': true, 'hasMetadata': true};
    foxtrot = offset.TIKTOK;
    mike['type'] = foxtrot;
    foxtrot = {};
    backup = 97;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightPNG'] = backup;
    backup = 98;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 99;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['lightSVG'] = backup;
    backup = 100;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['darkSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    foxtrot = ['tiktok.com'];
    mike['domains'] = foxtrot;
    foxtrot = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://www.tiktok.com/@';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = foxtrot;
    options[23] = mike;
    mike = {};
    foxtrot = offset.INSTAGRAM;
    mike['type'] = foxtrot;
    foxtrot = 'Instagram';
    mike['name'] = foxtrot;
    foxtrot = {};
    backup = 101;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightPNG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkPNG'] = backup;
    backup = 102;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whitePNG'] = backup;
    backup = 103;
    kilo = oscar[backup];
    kilo = report.bind(entity)(kilo);
    foxtrot['lightSVG'] = kilo;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['darkSVG'] = backup;
    backup = 104;
    backup = oscar[backup];
    backup = report.bind(entity)(backup);
    foxtrot['whiteSVG'] = backup;
    mike['icon'] = foxtrot;
    mike['enabled'] = romeo;
    romeo = ['instagram.com'];
    mike['domains'] = romeo;
    romeo = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.name;
        entity = global;
        zulu = entity.encodeURIComponent;
        mike = undefined;
        zulu = zulu.bind(mike)(tango);
        entity = entity.HermesInternal;
        mike = entity.concat;
        entity = 'https://www.instagram.com/';
        entity = mike.bind(entity)(zulu);
        return entity;
    };
    mike['getPlatformUserUrl'] = romeo;
    options[24] = mike;
    mike = {'type': null, 'name': 'Mastodon', 'icon': null, 'enabled': false, 'getPlatformUserUrl': null, 'isFederated': true, 'hasMetadata': true};
    romeo = offset.MASTODON;
    mike['type'] = romeo;
    romeo = {};
    foxtrot = 105;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightPNG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkPNG'] = foxtrot;
    foxtrot = 106;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whitePNG'] = foxtrot;
    foxtrot = 107;
    backup = oscar[foxtrot];
    backup = report.bind(entity)(backup);
    romeo['lightSVG'] = backup;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['darkSVG'] = foxtrot;
    foxtrot = 108;
    foxtrot = oscar[foxtrot];
    foxtrot = report.bind(entity)(foxtrot);
    romeo['whiteSVG'] = foxtrot;
    mike['icon'] = romeo;
    romeo = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        entity = entity.id;
        return entity;
    };
    mike['getPlatformUserUrl'] = romeo;
    options[25] = mike;
    mike = {};
    romeo = offset.CRUNCHYROLL;
    mike['type'] = romeo;
    romeo = 'Crunchyroll';
    mike['name'] = romeo;
    yankee = oscar[yankee];
    foxtrot = report.bind(entity)(yankee);
    romeo = foxtrot.unsafe_getRawColor;
    yankee = 'CRUNCHYROLL';
    yankee = romeo.bind(foxtrot)(yankee);
    mike['color'] = yankee;
    yankee = {};
    romeo = 109;
    foxtrot = oscar[romeo];
    foxtrot = report.bind(entity)(foxtrot);
    yankee['lightPNG'] = foxtrot;
    foxtrot = oscar[romeo];
    foxtrot = report.bind(entity)(foxtrot);
    yankee['darkPNG'] = foxtrot;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    yankee['whitePNG'] = romeo;
    romeo = 110;
    foxtrot = oscar[romeo];
    foxtrot = report.bind(entity)(foxtrot);
    yankee['lightSVG'] = foxtrot;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    yankee['darkSVG'] = romeo;
    romeo = 111;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    yankee['whiteSVG'] = romeo;
    mike['icon'] = yankee;
    mike['enabled'] = verify;
    options[26] = mike;
    mike = {};
    yankee = offset.DOMAIN;
    mike['type'] = yankee;
    yankee = 'Domain';
    mike['name'] = yankee;
    yankee = {};
    romeo = 112;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    yankee['lightPNG'] = romeo;
    romeo = 113;
    foxtrot = oscar[romeo];
    foxtrot = report.bind(entity)(foxtrot);
    yankee['darkPNG'] = foxtrot;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    yankee['whitePNG'] = romeo;
    romeo = 114;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    yankee['lightSVG'] = romeo;
    romeo = 115;
    foxtrot = oscar[romeo];
    foxtrot = report.bind(entity)(foxtrot);
    yankee['darkSVG'] = foxtrot;
    romeo = oscar[romeo];
    romeo = report.bind(entity)(romeo);
    yankee['whiteSVG'] = romeo;
    mike['icon'] = yankee;
    yankee = function(argFoo) { // Original name: getPlatformUserUrl
        entity = argFoo;
        tango = entity.id;
        entity = global;
        entity = entity.HermesInternal;
        zulu = entity.concat;
        mike = 'https://';
        entity = '/';
        entity = zulu.bind(mike)(tango, entity);
        return entity;
    };
    mike['getPlatformUserUrl'] = yankee;
    mike['enabled'] = verify;
    options[27] = mike;
    mike = {};
    offset = offset.AMAZON_MUSIC;
    mike['type'] = offset;
    offset = 'Amazon Music';
    mike['name'] = offset;
    offset = {};
    yankee = 116;
    romeo = oscar[yankee];
    romeo = report.bind(entity)(romeo);
    offset['lightPNG'] = romeo;
    romeo = oscar[yankee];
    romeo = report.bind(entity)(romeo);
    offset['darkPNG'] = romeo;
    yankee = oscar[yankee];
    yankee = report.bind(entity)(yankee);
    offset['whitePNG'] = yankee;
    yankee = 117;
    romeo = oscar[yankee];
    romeo = report.bind(entity)(romeo);
    offset['lightSVG'] = romeo;
    romeo = oscar[yankee];
    romeo = report.bind(entity)(romeo);
    offset['darkSVG'] = romeo;
    yankee = oscar[yankee];
    yankee = report.bind(entity)(yankee);
    offset['whiteSVG'] = yankee;
    mike['icon'] = offset;
    mike['enabled'] = verify;
    options[28] = mike;
    var _closure1_slot2 = options;
    mike = 118;
    mike = oscar[mike];
    verify = golf.bind(entity)(mike);
    golf = verify.keyBy;
    mike = 'type';
    mike = golf.bind(verify)(options, mike);
    var _closure1_slot3 = mike;
    mike = {};
    var _closure1_slot4 = mike;
    golf = options.forEach;
    mike = function(argFoo) {
        _fun59327: for(var _fun59327_ip = 0; ; ) switch(_fun59327_ip) {
 0:
            mike = argFoo;
            var _closure2_slot0 = mike;
            zulu = mike.domains;
            mike = null;
            if(!(mike != zulu)) { _fun59327_ip = 36; continue _fun59327 }
 21:
            mike = zulu.forEach;
            entity = function(argFoo) {
                zulu = _closure1_slot4;
                mike = _closure2_slot0;
                entity = argFoo;
                zulu[entity] = mike;
                entity = undefined;
                return entity;
            };
            entity = mike.bind(zulu)(entity);
 36:
            entity = undefined;
            return entity;
        }
    };
    mike = golf.bind(options)(mike);
    mike = {};
    golf = function(argFoo) { // Original name: get
        _fun59329: for(var _fun59329_ip = 0; ; ) switch(_fun59329_ip) {
 0:
            mike = _closure1_slot3;
            entity = argFoo;
            mike = mike[entity];
            entity = null;
            zulu = entity != mike;
            if(!zulu) { _fun59329_ip = 26; continue _fun59329 }
 23:
            entity = mike;
 26:
            return entity;
        }
    };
    mike['get'] = golf;
    golf = function(argFoo) { // Original name: getByUrl
        _fun59330: for(var _fun59330_ip = 0; ; ) switch(_fun59330_ip) {
 0:
            tango = _closure1_slot0;
            zulu = _closure1_slot1;
            mike = 119;
            mike = zulu[mike];
            zulu = undefined;
            report = tango.bind(zulu)(mike);
            tango = report.toURLSafe;
            mike = argFoo;
            mike = tango.bind(report)(mike);
            tango = null;
            if(!(tango == mike)) { _fun59330_ip = 47; continue _fun59330 }
 45:
            return zulu;
 47:
            report = mike.hostname;
            zulu = report.startsWith;
            mike = 'www.';
            zulu = zulu.bind(report)(mike);
            mike = report;
            if(!zulu) { _fun59330_ip = 89; continue _fun59330 }
 76:
            tango = report.slice;
            zulu = 4;
            mike = tango.bind(report)(zulu);
 89:
            entity = _closure1_slot4;
            entity = entity[mike];
            return entity;
        }
    };
    mike['getByUrl'] = golf;
    golf = function(argFoo) { // Original name: isSupported
        entity = global;
        entity = entity.Object;
        entity = entity.prototype;
        tango = entity.hasOwnProperty;
        zulu = tango.call;
        mike = _closure1_slot3;
        entity = argFoo;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike['isSupported'] = golf;
    golf = function(argFoo) { // Original name: map
        zulu = _closure1_slot2;
        mike = zulu.map;
        entity = argFoo;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    mike['map'] = golf;
    golf = function(argFoo) { // Original name: filter
        zulu = _closure1_slot2;
        mike = zulu.filter;
        entity = argFoo;
        entity = mike.bind(zulu)(entity);
        zulu = entity.sort;
        mike = function(argFoo, argBar) {
            entity = argFoo;
            zulu = entity.name;
            entity = argBar;
            mike = entity.name;
            entity = zulu.localeCompare;
            entity = entity.bind(zulu)(mike);
            return entity;
        };
        mike = zulu.bind(entity)(mike);
        return entity;
    };
    mike['filter'] = golf;
    tango = function(argFoo) { // Original name: find
        zulu = _closure1_slot2;
        mike = zulu.find;
        entity = argFoo;
        entity = mike.bind(zulu)(entity);
        return entity;
    };
    mike['find'] = tango;
    tango = 120;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'lib/Platforms.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();