// app/uikit-native/Ellipsis.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: EllipsisDot
        entity = argFoo;
        golf = entity.dotStyle;
        romeo = entity.disableScale;
        var _closure2_slot0 = romeo;
        output = entity.delay;
        var _closure2_slot1 = output;
        sizing = entity.sequenceStartDelay;
        var _closure2_slot2 = sizing;
        oscar = entity.sequenceEndDelay;
        var _closure2_slot3 = oscar;
        entity = _closure1_slot11;
        tango = undefined;
        report = entity.bind(tango)();
        verify = _closure1_slot0;
        options = _closure1_slot2;
        entity = 5;
        offset = options[entity];
        foxtrot = verify.bind(tango)(offset);
        yankee = foxtrot.useSharedValue;
        offset = _closure1_slot7;
        foxtrot = yankee.bind(foxtrot)(offset);
        var _closure2_slot4 = foxtrot;
        offset = options[entity];
        backup = verify.bind(tango)(offset);
        yankee = backup.useSharedValue;
        offset = _closure1_slot9;
        yankee = yankee.bind(backup)(offset);
        var _closure2_slot5 = yankee;
        kilo = _closure1_slot3;
        backup = kilo.useEffect;
        offset = new Array(6);
        offset[0] = output;
        offset[1] = sizing;
        offset[2] = oscar;
        offset[3] = romeo;
        offset[4] = foxtrot;
        offset[5] = yankee;
        oscar = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                oscar = function(argFoo, argBar, argBaz) { // Original name: i
                    tango = argFoo;
                    sizing = argBar;
                    zulu = tango.set;
                    backup = _closure1_slot0;
                    kilo = _closure1_slot2;
                    romeo = 5;
                    mike = kilo[romeo];
                    entity = undefined;
                    golf = backup.bind(entity)(mike);
                    oscar = golf.withRepeat;
                    mike = kilo[romeo];
                    offset = backup.bind(entity)(mike);
                    verify = offset.withSequence;
                    mike = kilo[romeo];
                    result = backup.bind(entity)(mike);
                    foxtrot = result.withDelay;
                    options = _closure2_slot2;
                    mike = 6;
                    report = kilo[mike];
                    update = backup.bind(entity)(report);
                    echo = update.withTiming;
                    report = {};
                    output = 0;
                    report['duration'] = output;
                    report = echo.bind(update)(sizing, report);
                    options = foxtrot.bind(result)(options, report);
                    report = kilo[romeo];
                    echo = backup.bind(entity)(report);
                    result = echo.withDelay;
                    foxtrot = _closure2_slot1;
                    report = kilo[romeo];
                    control = backup.bind(entity)(report);
                    source = control.withSequence;
                    report = kilo[mike];
                    sequence = backup.bind(entity)(report);
                    vacuum = sequence.withTiming;
                    update = {};
                    report = _closure1_slot6;
                    update['duration'] = report;
                    report = argBaz;
                    update = vacuum.bind(sequence)(report, update);
                    report = kilo[mike];
                    sequence = backup.bind(entity)(report);
                    vacuum = sequence.withTiming;
                    report = {};
                    config = _closure1_slot6;
                    report['duration'] = config;
                    report = vacuum.bind(sequence)(sizing, report);
                    report = source.bind(control)(update, report);
                    report = result.bind(echo)(foxtrot, report);
                    romeo = kilo[romeo];
                    foxtrot = backup.bind(entity)(romeo);
                    romeo = foxtrot.withDelay;
                    yankee = _closure2_slot3;
                    mike = kilo[mike];
                    kilo = backup.bind(entity)(mike);
                    backup = kilo.withTiming;
                    mike = {};
                    mike['duration'] = output;
                    mike = backup.bind(kilo)(sizing, mike);
                    mike = romeo.bind(foxtrot)(yankee, mike);
                    report = verify.bind(offset)(options, report, mike);
                    mike = -1;
                    mike = oscar.bind(golf)(report, mike);
                    mike = zulu.bind(tango)(mike);
                    return entity;
                };
                tango = {};
                options = _closure1_slot0;
                verify = _closure1_slot2;
                zulu = 5;
                golf = verify[zulu];
                report = undefined;
                golf = options.bind(report)(golf);
                golf = golf.withRepeat;
                tango['withRepeat'] = golf;
                golf = verify[zulu];
                golf = options.bind(report)(golf);
                golf = golf.withSequence;
                tango['withSequence'] = golf;
                zulu = verify[zulu];
                zulu = options.bind(report)(zulu);
                zulu = zulu.withDelay;
                tango['withDelay'] = zulu;
                golf = _closure2_slot2;
                tango['sequenceStartDelay'] = golf;
                golf = 6;
                golf = verify[golf];
                golf = options.bind(report)(golf);
                golf = golf.withTiming;
                tango['withTiming'] = golf;
                golf = _closure2_slot1;
                tango['delay'] = golf;
                golf = _closure1_slot6;
                tango['animationTimeMs'] = golf;
                golf = _closure2_slot3;
                tango['sequenceEndDelay'] = golf;
                oscar['__closure'] = tango;
                tango = 377125103421.0;
                oscar['__workletHash'] = tango;
                tango = _closure1_slot12;
                oscar['__initData'] = tango;
                options = _closure2_slot4;
                golf = _closure1_slot7;
                tango = _closure1_slot8;
                tango = oscar.bind(report)(options, golf, tango);
                tango = _closure2_slot0;
                if(tango) { _fun00002_ip = 224; continue _fun00001 }
 205:
                tango = _closure2_slot5;
                zulu = _closure1_slot9;
                mike = _closure1_slot10;
                mike = oscar.bind(report)(tango, zulu, mike);
 224:
                entity = function() {
                    tango = _closure1_slot0;
                    report = _closure1_slot2;
                    zulu = 5;
                    mike = report[zulu];
                    entity = undefined;
                    options = tango.bind(entity)(mike);
                    golf = options.cancelAnimation;
                    oscar = _closure2_slot4;
                    oscar = golf.bind(options)(oscar);
                    zulu = report[zulu];
                    tango = tango.bind(entity)(zulu);
                    zulu = tango.cancelAnimation;
                    mike = _closure2_slot5;
                    mike = zulu.bind(tango)(mike);
                    return entity;
                };
                return entity;
            }
        };
        oscar = backup.bind(kilo)(oscar, offset);
        oscar = options[entity];
        verify = verify.bind(tango)(oscar);
        oscar = verify.useAnimatedStyle;
        zulu = function() { // Original name: V
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = {};
                tango = _closure2_slot4;
                mike = tango.get;
                mike = mike.bind(tango)();
                entity['opacity'] = mike;
                tango = _closure2_slot0;
                mike = undefined;
                if(tango) { _fun00004_ip = 62; continue _fun00003 }
 31:
                tango = {};
                report = _closure2_slot5;
                zulu = report.get;
                zulu = zulu.bind(report)();
                tango['scale'] = zulu;
                zulu = new Array(1);
                zulu[0] = tango;
                mike = zulu;
 62:
                entity['transform'] = mike;
                return entity;
            }
        };
        offset = {};
        offset['opacityValue'] = foxtrot;
        offset['disableScale'] = romeo;
        offset['scaleValue'] = yankee;
        zulu['__closure'] = offset;
        offset = 5071157079925.0;
        zulu['__workletHash'] = offset;
        offset = _closure1_slot13;
        zulu['__initData'] = offset;
        oscar = oscar.bind(verify)(zulu);
        zulu = _closure1_slot5;
        mike = _closure1_slot1;
        entity = options[entity];
        entity = mike.bind(tango)(entity);
        mike = entity.View;
        entity = {};
        options = report.typingIndicatorDot;
        report = new Array(3);
        report[0] = options;
        report[1] = golf;
        report[2] = oscar;
        entity['style'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    golf = tango.bind(entity)(golf);
    var _closure1_slot3 = golf;
    tango = 1;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.View;
    var _closure1_slot4 = options;
    options = 2;
    options = oscar[options];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot5 = options;
    options = 350;
    var _closure1_slot6 = options;
    options = 0.4;
    var _closure1_slot7 = options;
    var _closure1_slot8 = tango;
    options = 0.75;
    var _closure1_slot9 = options;
    var _closure1_slot10 = tango;
    tango = 3;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    yankee = 4;
    offset = {'justifyContent': 'center', 'alignItems': 'center', 'flexDirection': 'row', 'marginRight': 4};
    tango['typingIndicator'] = offset;
    offset = {'backgroundColor': null, 'borderRadius': null, 'marginRight': 2, 'height': 6, 'width': 6};
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.TEXT_NORMAL;
    offset['backgroundColor'] = foxtrot;
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.round;
    offset['borderRadius'] = yankee;
    tango['typingIndicatorDot'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot11 = tango;
    tango = {};
    options = 'function EllipsisTsx1(value,fromValue,toValue){const{withRepeat,withSequence,withDelay,sequenceStartDelay,withTiming,delay,animationTimeMs,sequenceEndDelay}=this.__closure;value.set(withRepeat(withSequence(withDelay(sequenceStartDelay,withTiming(fromValue,{duration:0})),withDelay(delay,withSequence(withTiming(toValue,{duration:animationTimeMs}),withTiming(fromValue,{duration:animationTimeMs}))),withDelay(sequenceEndDelay,withTiming(fromValue,{duration:0}))),-1));}';
    tango['code'] = options;
    var _closure1_slot12 = tango;
    tango = {};
    options = 'function EllipsisTsx2(){const{opacityValue,disableScale,scaleValue}=this.__closure;return{opacity:opacityValue.get(),transform:disableScale?undefined:[{scale:scaleValue.get()}]};}';
    tango['code'] = options;
    var _closure1_slot13 = tango;
    tango = golf.memo;
    mike = function(argFoo) { // Original name: Ellipsis
        entity = argFoo;
        mike = entity.dotStyle;
        var _closure2_slot0 = mike;
        golf = entity.style;
        entity = entity.disableScale;
        var _closure2_slot1 = entity;
        mike = _closure1_slot11;
        tango = undefined;
        oscar = mike.bind(tango)();
        zulu = _closure1_slot5;
        mike = _closure1_slot4;
        entity = {};
        options = oscar.typingIndicator;
        oscar = new Array(2);
        oscar[0] = options;
        oscar[1] = golf;
        entity['style'] = oscar;
        oscar = false;
        entity['collapsable'] = oscar;
        golf = [0, 1, 2];
        oscar = golf.map;
        report = function(argFoo, argBar, argBaz) {
            report = argFoo;
            tango = _closure1_slot5;
            zulu = _closure1_slot14;
            mike = {};
            golf = 233.33333333333334;
            entity = report * golf;
            mike['delay'] = entity;
            oscar = 116.66666666666667;
            mike['sequenceStartDelay'] = oscar;
            entity = argBaz;
            options = entity.length;
            entity = 1;
            entity = options - entity;
            entity = entity - report;
            entity = golf * entity;
            entity = oscar + entity;
            mike['sequenceEndDelay'] = entity;
            oscar = _closure2_slot0;
            mike['dotStyle'] = oscar;
            entity = _closure2_slot1;
            mike['disableScale'] = entity;
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike, report);
            return entity;
        };
        report = oscar.bind(golf)(report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    mike = tango.bind(golf)(mike);
    tango = 7;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'uikit-native/Ellipsis.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();