// app/uikit-native/Ellipsis.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: EllipsisDot
        entity = argFoo;
        golfie = entity.dotStyle;
        romeon = entity.disableScale;
        var _closure2_slot0 = romeon;
        output = entity.delay;
        var _closure2_slot1 = output;
        sizing = entity.sequenceStartDelay;
        var _closure2_slot2 = sizing;
        oscard = entity.sequenceEndDelay;
        var _closure2_slot3 = oscard;
        entity = _closure1_slot6;
        tangon = undefined;
        report = entity.bind(tangon)();
        verify = _closure1_slot0;
        option = _closure1_slot2;
        entity = 5;
        offset = option[entity];
        foxtra = verify.bind(tangon)(offset);
        yankee = foxtra.useSharedValue;
        offset = 0.4;
        foxtra = yankee.bind(foxtra)(offset);
        var _closure2_slot4 = foxtra;
        offset = option[entity];
        backup = verify.bind(tangon)(offset);
        yankee = backup.useSharedValue;
        offset = 0.75;
        yankee = yankee.bind(backup)(offset);
        var _closure2_slot5 = yankee;
        kiloes = _closure1_slot3;
        backup = kiloes.useEffect;
        offset = new Array(6);
        offset[0] = output;
        offset[1] = sizing;
        offset[2] = oscard;
        offset[3] = romeon;
        offset[4] = foxtra;
        offset[5] = yankee;
        oscard = function() {
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                oscard = function(argFoo, argBar, argBaz) { // Original name: i
                    tangon = argFoo;
                    sizing = argBar;
                    zuuluu = tangon.set;
                    backup = _closure1_slot0;
                    kiloes = _closure1_slot2;
                    romeon = 5;
                    michal = kiloes[romeon];
                    entity = undefined;
                    golfie = backup.bind(entity)(michal);
                    oscard = golfie.withRepeat;
                    michal = kiloes[romeon];
                    offset = backup.bind(entity)(michal);
                    verify = offset.withSequence;
                    michal = kiloes[romeon];
                    result = backup.bind(entity)(michal);
                    foxtra = result.withDelay;
                    option = _closure2_slot2;
                    michal = 6;
                    report = kiloes[michal];
                    update = backup.bind(entity)(report);
                    echoed = update.withTiming;
                    report = {};
                    output = 0;
                    report['duration'] = output;
                    report = echoed.bind(update)(sizing, report);
                    option = foxtra.bind(result)(option, report);
                    report = kiloes[romeon];
                    echoed = backup.bind(entity)(report);
                    result = echoed.withDelay;
                    foxtra = _closure2_slot1;
                    report = kiloes[romeon];
                    ctrled = backup.bind(entity)(report);
                    source = ctrled.withSequence;
                    report = kiloes[michal];
                    sequen = backup.bind(entity)(report);
                    vacuum = sequen.withTiming;
                    update = {};
                    config = 350;
                    update['duration'] = config;
                    report = argBaz;
                    update = vacuum.bind(sequen)(report, update);
                    report = kiloes[michal];
                    sequen = backup.bind(entity)(report);
                    vacuum = sequen.withTiming;
                    report = {};
                    report['duration'] = config;
                    report = vacuum.bind(sequen)(sizing, report);
                    report = source.bind(ctrled)(update, report);
                    report = result.bind(echoed)(foxtra, report);
                    romeon = kiloes[romeon];
                    foxtra = backup.bind(entity)(romeon);
                    romeon = foxtra.withDelay;
                    yankee = _closure2_slot3;
                    michal = kiloes[michal];
                    kiloes = backup.bind(entity)(michal);
                    backup = kiloes.withTiming;
                    michal = {};
                    michal['duration'] = output;
                    michal = backup.bind(kiloes)(sizing, michal);
                    michal = romeon.bind(foxtra)(yankee, michal);
                    report = verify.bind(offset)(option, report, michal);
                    michal = -1;
                    michal = oscard.bind(golfie)(report, michal);
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                };
                tangon = {};
                option = _closure1_slot0;
                verify = _closure1_slot2;
                michal = 5;
                golfie = verify[michal];
                report = undefined;
                golfie = option.bind(report)(golfie);
                golfie = golfie.withRepeat;
                tangon['withRepeat'] = golfie;
                golfie = verify[michal];
                golfie = option.bind(report)(golfie);
                golfie = golfie.withSequence;
                tangon['withSequence'] = golfie;
                michal = verify[michal];
                michal = option.bind(report)(michal);
                michal = michal.withDelay;
                tangon['withDelay'] = michal;
                golfie = _closure2_slot2;
                tangon['sequenceStartDelay'] = golfie;
                golfie = 6;
                golfie = verify[golfie];
                golfie = option.bind(report)(golfie);
                golfie = golfie.withTiming;
                tangon['withTiming'] = golfie;
                golfie = _closure2_slot1;
                tangon['delay'] = golfie;
                golfie = 350;
                tangon['animationTimeMs'] = golfie;
                golfie = _closure2_slot3;
                tangon['sequenceEndDelay'] = golfie;
                oscard['__closure'] = tangon;
                tangon = 377125103421.0;
                oscard['__workletHash'] = tangon;
                zuuluu = _closure1_slot7;
                oscard['__initData'] = zuuluu;
                golfie = _closure2_slot4;
                zuuluu = 0.4;
                tangon = 1;
                zuuluu = oscard.bind(report)(golfie, zuuluu, tangon);
                zuuluu = _closure2_slot0;
                if(zuuluu) { _fun00002_ip = 233; continue _fun00001 }
 212:
                zuuluu = _closure2_slot5;
                michal = 0.75;
                michal = oscard.bind(report)(zuuluu, michal, tangon);
 233:
                entity = function() {
                    tangon = _closure1_slot0;
                    report = _closure1_slot2;
                    zuuluu = 5;
                    michal = report[zuuluu];
                    entity = undefined;
                    option = tangon.bind(entity)(michal);
                    golfie = option.cancelAnimation;
                    oscard = _closure2_slot4;
                    oscard = golfie.bind(option)(oscard);
                    zuuluu = report[zuuluu];
                    tangon = tangon.bind(entity)(zuuluu);
                    zuuluu = tangon.cancelAnimation;
                    michal = _closure2_slot5;
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                };
                return entity;
            }
        };
        oscard = backup.bind(kiloes)(oscard, offset);
        oscard = option[entity];
        verify = verify.bind(tangon)(oscard);
        oscard = verify.useAnimatedStyle;
        zuuluu = function() { // Original name: p
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                entity = {};
                tangon = _closure2_slot4;
                michal = tangon.get;
                michal = michal.bind(tangon)();
                entity['opacity'] = michal;
                tangon = _closure2_slot0;
                michal = undefined;
                if(tangon) { _fun00004_ip = 62; continue _fun00003 }
 31:
                tangon = {};
                report = _closure2_slot5;
                zuuluu = report.get;
                zuuluu = zuuluu.bind(report)();
                tangon['scale'] = zuuluu;
                zuuluu = new Array(1);
                zuuluu[0] = tangon;
                michal = zuuluu;
 62:
                entity['transform'] = michal;
                return entity;
            }
        };
        offset = {};
        offset['opacityValue'] = foxtra;
        offset['disableScale'] = romeon;
        offset['scaleValue'] = yankee;
        zuuluu['__closure'] = offset;
        offset = 5071157079925.0;
        zuuluu['__workletHash'] = offset;
        offset = _closure1_slot8;
        zuuluu['__initData'] = offset;
        oscard = oscard.bind(verify)(zuuluu);
        zuuluu = _closure1_slot5;
        michal = _closure1_slot1;
        entity = option[entity];
        entity = michal.bind(tangon)(entity);
        michal = entity.View;
        entity = {};
        option = report.typingIndicatorDot;
        report = new Array(3);
        report[0] = option;
        report[1] = golfie;
        report[2] = oscard;
        entity['style'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot9 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    var _closure1_slot3 = golfie;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    yankee = 4;
    offset = {'justifyContent': 'center', 'alignItems': 'center', 'flexDirection': 'row', 'marginRight': 4};
    tangon['typingIndicator'] = offset;
    offset = {'backgroundColor': null, 'borderRadius': null, 'marginRight': 2, 'height': 6, 'width': 6};
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_NORMAL;
    offset['backgroundColor'] = foxtra;
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.round;
    offset['borderRadius'] = yankee;
    tangon['typingIndicatorDot'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot6 = tangon;
    tangon = {};
    option = 'function EllipsisTsx1(value,fromValue,toValue){const{withRepeat,withSequence,withDelay,sequenceStartDelay,withTiming,delay,animationTimeMs,sequenceEndDelay}=this.__closure;value.set(withRepeat(withSequence(withDelay(sequenceStartDelay,withTiming(fromValue,{duration:0})),withDelay(delay,withSequence(withTiming(toValue,{duration:animationTimeMs}),withTiming(fromValue,{duration:animationTimeMs}))),withDelay(sequenceEndDelay,withTiming(fromValue,{duration:0}))),-1));}';
    tangon['code'] = option;
    var _closure1_slot7 = tangon;
    tangon = {};
    option = 'function EllipsisTsx2(){const{opacityValue,disableScale,scaleValue}=this.__closure;return{opacity:opacityValue.get(),transform:disableScale?undefined:[{scale:scaleValue.get()}]};}';
    tangon['code'] = option;
    var _closure1_slot8 = tangon;
    tangon = golfie.memo;
    michal = function(argFoo) { // Original name: Ellipsis
        entity = argFoo;
        michal = entity.dotStyle;
        var _closure2_slot0 = michal;
        golfie = entity.style;
        entity = entity.disableScale;
        var _closure2_slot1 = entity;
        michal = _closure1_slot6;
        tangon = undefined;
        oscard = michal.bind(tangon)();
        zuuluu = _closure1_slot5;
        michal = _closure1_slot4;
        entity = {};
        option = oscard.typingIndicator;
        oscard = new Array(2);
        oscard[0] = option;
        oscard[1] = golfie;
        entity['style'] = oscard;
        oscard = false;
        entity['collapsable'] = oscard;
        golfie = [0, 1, 2];
        oscard = golfie.map;
        report = function(argFoo, argBar, argBaz) {
            report = argFoo;
            tangon = _closure1_slot5;
            zuuluu = _closure1_slot9;
            michal = {};
            golfie = 233.33333333333334;
            entity = report * golfie;
            michal['delay'] = entity;
            oscard = 116.66666666666667;
            michal['sequenceStartDelay'] = oscard;
            entity = argBaz;
            option = entity.length;
            entity = 1;
            entity = option - entity;
            entity = entity - report;
            entity = golfie * entity;
            entity = oscard + entity;
            michal['sequenceEndDelay'] = entity;
            oscard = _closure2_slot0;
            michal['dotStyle'] = oscard;
            entity = _closure2_slot1;
            michal['disableScale'] = entity;
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal, report);
            return entity;
        };
        report = oscard.bind(golfie)(report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 7;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/Ellipsis.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();