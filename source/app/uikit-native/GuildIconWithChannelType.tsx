// app/uikit-native/GuildIconWithChannelType.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    romeo = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, tango);
    entity = 0;
    report = golf[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(report);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot4 = tango;
    tango = 2;
    report = golf[tango];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot5 = report;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = {};
    report = 'SMALL_32';
    tango['SMALL_32'] = report;
    options = {};
    offset = tango.SMALL_32;
    verify = {'pileSize': 32, 'guildIconSize': null, 'typeIconSize': 12, 'typeIconPadding': 4, 'gap': 3};
    report = 3;
    report = golf[report];
    report = oscar.bind(entity)(report);
    report = report.GuildIconSizes;
    report = report.XSMALL;
    verify['guildIconSize'] = report;
    report = 4;
    options[offset] = verify;
    var _closure1_slot7 = options;
    report = golf[report];
    verify = oscar.bind(entity)(report);
    options = verify.createStyles;
    report = {};
    offset = {};
    yankee = 5;
    foxtrot = golf[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BG_MOD_STRONG;
    offset['backgroundColor'] = foxtrot;
    yankee = golf[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.round;
    offset['borderRadius'] = yankee;
    yankee = 20;
    offset['width'] = yankee;
    report['typeIconWrapper'] = offset;
    report = options.bind(verify)(report);
    var _closure1_slot8 = report;
    report = 10;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'uikit-native/GuildIconWithChannelType.tsx';
    report = oscar.bind(golf)(report);
    zulu['GuildIconWithChannelTypeSizes'] = tango;
    mike = function(argFoo) { // Original name: GuildIconWithChannelType
        oscar = argFoo;
        output = oscar.aria-label;
        report = oscar.size;
        zulu = oscar.channel;
        tango = {'aria-label': 0, 'size': 0, 'channel': 0};
        control = null;
        vacuum = tango;
        mike = silentSetPrototypeOf(vacuum, control);
        vacuum = {};
        control = oscar;
        source = tango;
        kilo = copyDataProperties(vacuum, control, source);
        mike = _closure1_slot8;
        tango = undefined;
        verify = mike.bind(tango)();
        mike = _closure1_slot7;
        mike = mike[report];
        sizing = mike.guildIconSize;
        echo = mike.typeIconSize;
        var _closure2_slot0 = echo;
        update = mike.typeIconPadding;
        var _closure2_slot1 = update;
        options = mike.gap;
        result = _closure1_slot0;
        romeo = _closure1_slot2;
        report = 3;
        mike = romeo[report];
        mike = result.bind(tango)(mike);
        mike = mike.ImageSizes;
        offset = mike[sizing];
        var _closure2_slot2 = offset;
        mike = 2;
        mike = mike * update;
        mike = echo + mike;
        var _closure2_slot3 = mike;
        yankee = options / offset;
        golf = 0.5;
        golf = golf + yankee;
        foxtrot = _closure1_slot3;
        backup = foxtrot.useMemo;
        yankee = new Array(2);
        yankee[0] = offset;
        yankee[1] = mike;
        offset = function() {
            zulu = _closure2_slot2;
            entity = new Array(2);
            entity[0] = zulu;
            mike = _closure2_slot3;
            entity[1] = mike;
            return entity;
        };
        offset = backup.bind(foxtrot)(offset, yankee);
        backup = foxtrot.useMemo;
        yankee = new Array(2);
        yankee[0] = update;
        yankee[1] = mike;
        mike = function() {
            entity = {};
            zulu = _closure2_slot3;
            entity['width'] = zulu;
            entity['height'] = zulu;
            mike = _closure2_slot1;
            entity['padding'] = mike;
            return entity;
        };
        backup = backup.bind(foxtrot)(mike, yankee);
        yankee = foxtrot.useMemo;
        mike = new Array(1);
        mike[0] = echo;
        entity = function() {
            entity = {};
            mike = _closure2_slot0;
            entity['width'] = mike;
            entity['height'] = mike;
            return entity;
        };
        foxtrot = yankee.bind(foxtrot)(entity, mike);
        entity = 6;
        entity = romeo[entity];
        mike = result.bind(tango)(entity);
        entity = mike.getChannelIcon;
        yankee = entity.bind(mike)(zulu);
        zulu = _closure1_slot6;
        entity = 7;
        entity = romeo[entity];
        entity = result.bind(tango)(entity);
        mike = entity.Pile;
        entity = {};
        entity['aria-label'] = output;
        output = 8;
        output = romeo[output];
        output = result.bind(tango)(output);
        output = output.CutoutShape;
        output = output.Circle;
        entity['shape'] = output;
        entity['size'] = offset;
        entity['gap'] = options;
        entity['depthX'] = golf;
        entity['depthY'] = golf;
        options = _closure1_slot5;
        offset = _closure1_slot1;
        report = romeo[report];
        golf = offset.bind(tango)(report);
        report = {};
        vacuum = report;
        control = kilo;
        kilo = copyDataProperties(vacuum, control);
        kilo = 'size';
        report[kilo] = sizing;
        golf = options.bind(tango)(golf, report);
        report = new Array(2);
        report[0] = golf;
        golf = _closure1_slot4;
        oscar = {};
        kilo = verify.typeIconWrapper;
        verify = new Array(2);
        verify[0] = kilo;
        verify[1] = backup;
        oscar['style'] = verify;
        verify = 9;
        verify = romeo[verify];
        offset = offset.bind(tango)(verify);
        verify = {};
        romeo = new Array(1);
        romeo[0] = foxtrot;
        verify['style'] = romeo;
        verify['source'] = yankee;
        verify = options.bind(tango)(offset, verify);
        oscar['children'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['GuildIconWithChannelType'] = mike;
    return entity;
})();