// app/uikit-native/GuildIconWithChannelType.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    report = golfie[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(report);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    report = tangon.jsx;
    var _closure1_slot5 = report;
    tangon = tangon.jsxs;
    var _closure1_slot6 = tangon;
    tangon = {};
    report = 'SMALL_32';
    tangon['SMALL_32'] = report;
    option = {};
    offset = tangon.SMALL_32;
    verify = {'pileSize': 32, 'guildIconSize': null, 'typeIconSize': 12, 'typeIconPadding': 4, 'gap': 3};
    report = 3;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.GuildIconSizes;
    report = report.XSMALL;
    verify['guildIconSize'] = report;
    report = 4;
    option[offset] = verify;
    var _closure1_slot7 = option;
    report = golfie[report];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    offset = {};
    yankee = 5;
    foxtra = golfie[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_MOD_STRONG;
    offset['backgroundColor'] = foxtra;
    yankee = golfie[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.round;
    offset['borderRadius'] = yankee;
    yankee = 20;
    offset['width'] = yankee;
    report['typeIconWrapper'] = offset;
    report = option.bind(verify)(report);
    var _closure1_slot8 = report;
    report = 10;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'uikit-native/GuildIconWithChannelType.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['GuildIconWithChannelTypeSizes'] = tangon;
    michal = function(argFoo) { // Original name: GuildIconWithChannelType
        oscard = argFoo;
        output = oscard.aria-label;
        report = oscard.size;
        zuuluu = oscard.channel;
        tangon = {'aria-label': 0, 'size': 0, 'channel': 0};
        ctrled = null;
        vacuum = tangon;
        michal = silentSetPrototypeOf(vacuum, ctrled);
        vacuum = {};
        ctrled = oscard;
        source = tangon;
        kiloes = copyDataProperties(vacuum, ctrled, source);
        michal = _closure1_slot8;
        tangon = undefined;
        verify = michal.bind(tangon)();
        michal = _closure1_slot7;
        michal = michal[report];
        sizing = michal.guildIconSize;
        echoed = michal.typeIconSize;
        var _closure2_slot0 = echoed;
        update = michal.typeIconPadding;
        var _closure2_slot1 = update;
        option = michal.gap;
        result = _closure1_slot0;
        romeon = _closure1_slot2;
        report = 3;
        michal = romeon[report];
        michal = result.bind(tangon)(michal);
        michal = michal.ImageSizes;
        offset = michal[sizing];
        var _closure2_slot2 = offset;
        michal = 2;
        michal = michal * update;
        michal = echoed + michal;
        var _closure2_slot3 = michal;
        yankee = option / offset;
        golfie = 0.5;
        golfie = golfie + yankee;
        foxtra = _closure1_slot3;
        backup = foxtra.useMemo;
        yankee = new Array(2);
        yankee[0] = offset;
        yankee[1] = michal;
        offset = function() {
            zuuluu = _closure2_slot2;
            entity = new Array(2);
            entity[0] = zuuluu;
            michal = _closure2_slot3;
            entity[1] = michal;
            return entity;
        };
        offset = backup.bind(foxtra)(offset, yankee);
        backup = foxtra.useMemo;
        yankee = new Array(2);
        yankee[0] = update;
        yankee[1] = michal;
        michal = function() {
            entity = {};
            zuuluu = _closure2_slot3;
            entity['width'] = zuuluu;
            entity['height'] = zuuluu;
            michal = _closure2_slot1;
            entity['padding'] = michal;
            return entity;
        };
        backup = backup.bind(foxtra)(michal, yankee);
        yankee = foxtra.useMemo;
        michal = new Array(1);
        michal[0] = echoed;
        entity = function() {
            entity = {};
            michal = _closure2_slot0;
            entity['width'] = michal;
            entity['height'] = michal;
            return entity;
        };
        foxtra = yankee.bind(foxtra)(entity, michal);
        entity = 6;
        entity = romeon[entity];
        michal = result.bind(tangon)(entity);
        entity = michal.getChannelIcon;
        yankee = entity.bind(michal)(zuuluu);
        zuuluu = _closure1_slot6;
        entity = 7;
        entity = romeon[entity];
        entity = result.bind(tangon)(entity);
        michal = entity.Pile;
        entity = {};
        entity['aria-label'] = output;
        output = 8;
        output = romeon[output];
        output = result.bind(tangon)(output);
        output = output.CutoutShape;
        output = output.Circle;
        entity['shape'] = output;
        entity['size'] = offset;
        entity['gap'] = option;
        entity['depthX'] = golfie;
        entity['depthY'] = golfie;
        option = _closure1_slot5;
        offset = _closure1_slot1;
        report = romeon[report];
        golfie = offset.bind(tangon)(report);
        report = {};
        vacuum = report;
        ctrled = kiloes;
        kiloes = copyDataProperties(vacuum, ctrled);
        kiloes = 'size';
        report[kiloes] = sizing;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(2);
        report[0] = golfie;
        golfie = _closure1_slot4;
        oscard = {};
        kiloes = verify.typeIconWrapper;
        verify = new Array(2);
        verify[0] = kiloes;
        verify[1] = backup;
        oscard['style'] = verify;
        verify = 9;
        verify = romeon[verify];
        offset = offset.bind(tangon)(verify);
        verify = {};
        romeon = new Array(1);
        romeon[0] = foxtra;
        verify['style'] = romeon;
        verify['source'] = yankee;
        verify = option.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['GuildIconWithChannelType'] = michal;
    return entity;
})();