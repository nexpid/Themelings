// app/uikit-native/experimental/CircleWithCutout.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    golfie = argBar;
    zuuluu = argFre;
    option = argPlu;
    var _closure1_slot0 = golfie;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = option;
    tangon = function(argFoo, argBar) { // Original name: getCutoutCenterX
        michal = argFoo;
        entity = global;
        tangon = entity.Math;
        zuuluu = tangon.sin;
        report = _closure1_slot5;
        entity = argBar;
        entity = entity * report;
        entity = zuuluu.bind(tangon)(entity);
        entity = michal * entity;
        entity = michal + entity;
        return entity;
    };
    var _closure1_slot6 = tangon;
    michal = function(argFoo, argBar) { // Original name: getCutoutCenterY
        michal = argFoo;
        entity = global;
        tangon = entity.Math;
        zuuluu = tangon.cos;
        report = _closure1_slot5;
        entity = argBar;
        entity = entity * report;
        entity = zuuluu.bind(tangon)(entity);
        entity = michal * entity;
        entity = michal - entity;
        return entity;
    };
    var _closure1_slot7 = michal;
    oscard = global;
    yankee = oscard.Object;
    offset = yankee.defineProperty;
    verify = {};
    entity = true;
    verify['value'] = entity;
    entity = '__esModule';
    entity = offset.bind(yankee)(zuuluu, entity, verify);
    entity = 0;
    offset = option[entity];
    verify = argCor;
    entity = undefined;
    verify = verify.bind(entity)(offset);
    verify = 1;
    offset = option[verify];
    offset = golfie.bind(entity)(offset);
    offset = offset.jsx;
    var _closure1_slot3 = offset;
    verify = option[verify];
    verify = golfie.bind(entity)(verify);
    verify = verify.jsxs;
    var _closure1_slot4 = verify;
    oscard = oscard.Math;
    verify = oscard.PI;
    oscard = 180;
    oscard = verify / oscard;
    var _closure1_slot5 = oscard;
    oscard = 3;
    oscard = option[oscard];
    option = golfie.bind(entity)(oscard);
    golfie = option.fileFinishedImporting;
    oscard = 'uikit-native/experimental/CircleWithCutout.tsx';
    oscard = golfie.bind(option)(oscard);
    oscard = function(argFoo) { // Original name: CircleWithCutout
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            yankee = entity.circleRadius;
            echoed = entity.cutoutRadius;
            offset = entity.enableCutout;
            michal = entity.cutoutPositionInDegrees;
            verify = entity.circleFillColor;
            romeon = 2;
            result = romeon * yankee;
            entity = _closure1_slot6;
            tangon = undefined;
            source = entity.bind(tangon)(yankee, michal);
            entity = _closure1_slot7;
            update = entity.bind(tangon)(yankee, michal);
            zuuluu = _closure1_slot4;
            michal = _closure1_slot1;
            oscard = _closure1_slot2;
            entity = oscard[romeon];
            michal = michal.bind(tangon)(entity);
            entity = {};
            entity['height'] = result;
            entity['width'] = result;
            option = _closure1_slot3;
            golfie = _closure1_slot0;
            report = oscard[romeon];
            report = golfie.bind(tangon)(report);
            foxtra = report.Defs;
            report = {};
            backup = oscard[romeon];
            backup = golfie.bind(tangon)(backup);
            kiloes = backup.Mask;
            backup = {};
            sizing = 'mask';
            backup['id'] = sizing;
            sizing = oscard[romeon];
            sizing = golfie.bind(tangon)(sizing);
            output = sizing.Rect;
            sizing = {};
            sizing['width'] = result;
            sizing['height'] = result;
            result = 'white';
            sizing['fill'] = result;
            output = option.bind(tangon)(output, sizing);
            sizing = new Array(2);
            sizing[0] = output;
            output = oscard[romeon];
            output = golfie.bind(tangon)(output);
            result = output.Circle;
            output = {};
            output['cx'] = source;
            output['cy'] = update;
            output['r'] = echoed;
            echoed = 'black';
            output['fill'] = echoed;
            output = option.bind(tangon)(result, output);
            sizing[1] = output;
            backup['children'] = sizing;
            backup = zuuluu.bind(tangon)(kiloes, backup);
            report['children'] = backup;
            foxtra = option.bind(tangon)(foxtra, report);
            report = new Array(2);
            report[0] = foxtra;
            oscard = oscard[romeon];
            oscard = golfie.bind(tangon)(oscard);
            golfie = oscard.Circle;
            oscard = {};
            oscard['cx'] = yankee;
            oscard['cy'] = yankee;
            oscard['r'] = yankee;
            oscard['fill'] = verify;
            verify = undefined;
            if(!offset) { _fun00002_ip = 319; continue _fun00001 }
 313:
            verify = 'url(#mask)';
 319:
            oscard['mask'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = oscard;
    oscard = function(argFoo, argBar, argBaz) { // Original name: getBadgeTop
        tangon = _closure1_slot7;
        zuuluu = undefined;
        michal = argBar;
        entity = argBaz;
        michal = tangon.bind(zuuluu)(michal, entity);
        entity = argFoo;
        entity = michal - entity;
        return entity;
    };
    zuuluu['getBadgeTop'] = oscard;
    report = function(argFoo, argBar, argBaz) { // Original name: getBadgeLeft
        tangon = _closure1_slot6;
        zuuluu = undefined;
        michal = argBar;
        entity = argBaz;
        michal = tangon.bind(zuuluu)(michal, entity);
        entity = argFoo;
        entity = michal - entity;
        return entity;
    };
    zuuluu['getBadgeLeft'] = report;
    zuuluu['getCutoutCenterX'] = tangon;
    zuuluu['getCutoutCenterY'] = michal;
    return entity;
})();