// app/uikit-native/experimental/CircleWithCutout.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    golf = argBar;
    zulu = argFred;
    options = argPlugh;
    var _closure1_slot0 = golf;
    entity = argBaz;
    var _closure1_slot1 = entity;
    var _closure1_slot2 = options;
    tango = function(argFoo, argBar) { // Original name: getCutoutCenterX
        mike = argFoo;
        entity = global;
        tango = entity.Math;
        zulu = tango.sin;
        report = _closure1_slot5;
        entity = argBar;
        entity = entity * report;
        entity = zulu.bind(tango)(entity);
        entity = mike * entity;
        entity = mike + entity;
        return entity;
    };
    var _closure1_slot6 = tango;
    mike = function(argFoo, argBar) { // Original name: getCutoutCenterY
        mike = argFoo;
        entity = global;
        tango = entity.Math;
        zulu = tango.cos;
        report = _closure1_slot5;
        entity = argBar;
        entity = entity * report;
        entity = zulu.bind(tango)(entity);
        entity = mike * entity;
        entity = mike - entity;
        return entity;
    };
    var _closure1_slot7 = mike;
    oscar = global;
    yankee = oscar.Object;
    offset = yankee.defineProperty;
    verify = {};
    entity = true;
    verify['value'] = entity;
    entity = '__esModule';
    entity = offset.bind(yankee)(zulu, entity, verify);
    entity = 0;
    offset = options[entity];
    verify = argCorge;
    entity = undefined;
    verify = verify.bind(entity)(offset);
    verify = 1;
    offset = options[verify];
    offset = golf.bind(entity)(offset);
    offset = offset.jsx;
    var _closure1_slot3 = offset;
    verify = options[verify];
    verify = golf.bind(entity)(verify);
    verify = verify.jsxs;
    var _closure1_slot4 = verify;
    oscar = oscar.Math;
    verify = oscar.PI;
    oscar = 180;
    oscar = verify / oscar;
    var _closure1_slot5 = oscar;
    oscar = 3;
    oscar = options[oscar];
    options = golf.bind(entity)(oscar);
    golf = options.fileFinishedImporting;
    oscar = 'uikit-native/experimental/CircleWithCutout.tsx';
    oscar = golf.bind(options)(oscar);
    oscar = function(argFoo) { // Original name: CircleWithCutout
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            yankee = entity.circleRadius;
            echo = entity.cutoutRadius;
            offset = entity.enableCutout;
            mike = entity.cutoutPositionInDegrees;
            verify = entity.circleFillColor;
            romeo = 2;
            result = romeo * yankee;
            entity = _closure1_slot6;
            tango = undefined;
            source = entity.bind(tango)(yankee, mike);
            entity = _closure1_slot7;
            update = entity.bind(tango)(yankee, mike);
            zulu = _closure1_slot4;
            mike = _closure1_slot1;
            oscar = _closure1_slot2;
            entity = oscar[romeo];
            mike = mike.bind(tango)(entity);
            entity = {};
            entity['height'] = result;
            entity['width'] = result;
            options = _closure1_slot3;
            golf = _closure1_slot0;
            report = oscar[romeo];
            report = golf.bind(tango)(report);
            foxtrot = report.Defs;
            report = {};
            backup = oscar[romeo];
            backup = golf.bind(tango)(backup);
            kilo = backup.Mask;
            backup = {};
            sizing = 'mask';
            backup['id'] = sizing;
            sizing = oscar[romeo];
            sizing = golf.bind(tango)(sizing);
            output = sizing.Rect;
            sizing = {};
            sizing['width'] = result;
            sizing['height'] = result;
            result = 'white';
            sizing['fill'] = result;
            output = options.bind(tango)(output, sizing);
            sizing = new Array(2);
            sizing[0] = output;
            output = oscar[romeo];
            output = golf.bind(tango)(output);
            result = output.Circle;
            output = {};
            output['cx'] = source;
            output['cy'] = update;
            output['r'] = echo;
            echo = 'black';
            output['fill'] = echo;
            output = options.bind(tango)(result, output);
            sizing[1] = output;
            backup['children'] = sizing;
            backup = zulu.bind(tango)(kilo, backup);
            report['children'] = backup;
            foxtrot = options.bind(tango)(foxtrot, report);
            report = new Array(2);
            report[0] = foxtrot;
            oscar = oscar[romeo];
            oscar = golf.bind(tango)(oscar);
            golf = oscar.Circle;
            oscar = {};
            oscar['cx'] = yankee;
            oscar['cy'] = yankee;
            oscar['r'] = yankee;
            oscar['fill'] = verify;
            verify = undefined;
            if(!offset) { _fun00002_ip = 319; continue _fun00001 }
 313:
            verify = 'url(#mask)';
 319:
            oscar['mask'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = oscar;
    oscar = function(argFoo, argBar, argBaz) { // Original name: getBadgeTop
        tango = _closure1_slot7;
        zulu = undefined;
        mike = argBar;
        entity = argBaz;
        mike = tango.bind(zulu)(mike, entity);
        entity = argFoo;
        entity = mike - entity;
        return entity;
    };
    zulu['getBadgeTop'] = oscar;
    report = function(argFoo, argBar, argBaz) { // Original name: getBadgeLeft
        tango = _closure1_slot6;
        zulu = undefined;
        mike = argBar;
        entity = argBaz;
        mike = tango.bind(zulu)(mike, entity);
        entity = argFoo;
        entity = mike - entity;
        return entity;
    };
    zulu['getBadgeLeft'] = report;
    zulu['getCutoutCenterX'] = tango;
    zulu['getCutoutCenterY'] = mike;
    return entity;
})();