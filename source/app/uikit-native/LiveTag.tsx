// app/uikit-native/LiveTag.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
        report = argBar;
        romeon = argBaz;
        zuuluu = argFre;
        oscard = argPlu;
        var _closure1_slot0 = report;
        var _closure1_slot1 = oscard;
        entity = global;
        option = entity.Object;
        golfie = option.defineProperty;
        tangon = {};
        entity = true;
        tangon['value'] = entity;
        entity = '__esModule';
        entity = golfie.bind(option)(zuuluu, entity, tangon);
        offset = 0;
        golfie = oscard[offset];
        tangon = argCor;
        entity = undefined;
        tangon = tangon.bind(entity)(golfie);
        tangon = 1;
        tangon = oscard[tangon];
        tangon = report.bind(entity)(tangon);
        option = tangon.StyleSheet;
        tangon = tangon.View;
        var _closure1_slot2 = tangon;
        tangon = 2;
        tangon = oscard[tangon];
        tangon = report.bind(entity)(tangon);
        tangon = tangon.jsx;
        var _closure1_slot3 = tangon;
        golfie = option.create;
        tangon = {};
        verify = {'paddingHorizontal': 6, 'paddingVertical': 2, 'borderRadius': null, 'overflow': 'hidden', 'justifyContent': 'center', 'alignItems': 'center'};
        yankee = 3;
        foxtra = oscard[yankee];
        foxtra = romeon.bind(entity)(foxtra);
        foxtra = foxtra.radii;
        foxtra = foxtra.round;
        verify['borderRadius'] = foxtra;
        foxtra = 'center';
        backup = oscard[yankee];
        backup = romeon.bind(entity)(backup);
        backup = backup.unsafe_rawColors;
        backup = backup.RED_400;
        verify['backgroundColor'] = backup;
        tangon['tag'] = verify;
        verify = {};
        verify['textAlign'] = foxtra;
        yankee = oscard[yankee];
        yankee = romeon.bind(entity)(yankee);
        yankee = yankee.unsafe_rawColors;
        yankee = yankee.WHITE_500;
        verify['color'] = yankee;
        yankee = 4;
        yankee = oscard[yankee];
        romeon = report.bind(entity)(yankee);
        yankee = romeon.isAndroid;
        yankee = yankee.bind(romeon)();
        if(!yankee) { _fun00002_ip = 255; continue _fun00001 }
 249:
        offset = -2;
 255:
        verify['marginTop'] = offset;
        tangon['tagText'] = verify;
        tangon = golfie.bind(option)(tangon);
        var _closure1_slot4 = tangon;
        tangon = 7;
        tangon = oscard[tangon];
        oscard = report.bind(entity)(tangon);
        report = oscard.fileFinishedImporting;
        tangon = 'uikit-native/LiveTag.tsx';
        tangon = report.bind(oscard)(tangon);
        michal = function(argFoo) { // Original name: LiveTag
            entity = argFoo;
            report = entity.style;
            verify = entity.textStyle;
            golfie = entity.allowFontScaling;
            tangon = _closure1_slot3;
            zuuluu = _closure1_slot2;
            michal = {};
            entity = _closure1_slot4;
            oscard = entity.tag;
            entity = new Array(2);
            entity[0] = oscard;
            entity[1] = report;
            michal['style'] = entity;
            offset = _closure1_slot0;
            yankee = _closure1_slot1;
            entity = 5;
            report = yankee[entity];
            entity = undefined;
            report = offset.bind(entity)(report);
            oscard = report.Text;
            report = {'variant': 'text-xs/bold', 'style': null, 'lineClamp': 1};
            option = _closure1_slot4;
            romeon = option.tagText;
            option = new Array(2);
            option[0] = romeon;
            option[1] = verify;
            report['style'] = option;
            report['allowFontScaling'] = golfie;
            golfie = 6;
            option = yankee[golfie];
            option = offset.bind(entity)(option);
            verify = option.intl;
            option = verify.string;
            golfie = yankee[golfie];
            golfie = offset.bind(entity)(golfie);
            golfie = golfie.t;
            golfie = golfie.dI3q4u;
            option = option.bind(verify)(golfie);
            golfie = option.toUpperCase;
            golfie = golfie.bind(option)();
            report['children'] = golfie;
            report = tangon.bind(entity)(oscard, report);
            michal['children'] = report;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        };
        zuuluu['default'] = michal;
        return entity;
    }
})();