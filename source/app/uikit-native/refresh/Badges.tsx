// app/uikit-native/refresh/Badges.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    report = golfie[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(report);
    tangon = 1;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot2 = tangon;
    tangon = 2;
    tangon = golfie[tangon];
    tangon = oscard.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot3 = tangon;
    tangon = 3;
    report = golfie[tangon];
    verify = oscard.bind(entity)(report);
    option = verify.createStyles;
    report = {};
    romeon = {'borderRadius': null, 'paddingHorizontal': 4, 'paddingTop': 2};
    offset = 4;
    foxtra = golfie[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.radii;
    foxtra = foxtra.sm;
    romeon['borderRadius'] = foxtra;
    report['base'] = romeon;
    romeon = {};
    foxtra = golfie[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.STATUS_DANGER_BACKGROUND;
    romeon['backgroundColor'] = foxtra;
    report['danger'] = romeon;
    romeon = {};
    foxtra = golfie[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BG_BRAND;
    romeon['backgroundColor'] = foxtra;
    report['info'] = romeon;
    romeon = {};
    foxtra = golfie[offset];
    foxtra = yankee.bind(entity)(foxtra);
    foxtra = foxtra.unsafe_rawColors;
    foxtra = foxtra.BRAND_260;
    romeon['backgroundColor'] = foxtra;
    report['brand'] = romeon;
    report = option.bind(verify)(report);
    var _closure1_slot4 = report;
    tangon = golfie[tangon];
    option = oscard.bind(entity)(tangon);
    report = option.createStyles;
    tangon = {};
    verify = {'textAlign': 'center', 'textTransform': 'uppercase'};
    tangon['text'] = verify;
    verify = {};
    romeon = golfie[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.STATUS_DANGER_TEXT;
    verify['color'] = romeon;
    tangon['dangerText'] = verify;
    verify = {};
    romeon = golfie[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.colors;
    romeon = romeon.WHITE;
    verify['color'] = romeon;
    tangon['infoText'] = verify;
    verify = {};
    offset = golfie[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.unsafe_rawColors;
    offset = offset.BRAND_560;
    verify['color'] = offset;
    tangon['brandText'] = verify;
    tangon = report.bind(option)(tangon);
    var _closure1_slot5 = tangon;
    tangon = {};
    report = 'danger';
    tangon['DANGER'] = report;
    report = 'info';
    tangon['INFO'] = report;
    report = 'brand';
    tangon['BRAND'] = report;
    report = 'normal';
    tangon['NORMAL'] = report;
    var _closure1_slot6 = tangon;
    report = 6;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'uikit-native/refresh/Badges.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['BadgeColors'] = tangon;
    michal = function(argFoo) { // Original name: TextBadge
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.color;
            tangon = undefined;
            if(!(offset === tangon)) { _fun00002_ip = 27; continue _fun00001 }
 14:
            michal = _closure1_slot6;
            offset = michal.DANGER;
 27:
            yankee = entity.style;
            golfie = entity.text;
            verify = entity.textStyle;
            entity = _closure1_slot4;
            oscard = entity.bind(tangon)();
            entity = _closure1_slot5;
            option = entity.bind(tangon)();
            romeon = oscard[offset];
            entity = global;
            entity = entity.HermesInternal;
            zuuluu = entity.concat;
            michal = '';
            entity = 'Text';
            entity = zuuluu.bind(michal)(offset, entity);
            offset = option[entity];
            zuuluu = _closure1_slot3;
            michal = _closure1_slot2;
            entity = {};
            foxtra = oscard.base;
            oscard = new Array(3);
            oscard[0] = foxtra;
            oscard[1] = romeon;
            oscard[2] = yankee;
            entity['style'] = oscard;
            oscard = _closure1_slot0;
            yankee = _closure1_slot1;
            report = 5;
            report = yankee[report];
            report = oscard.bind(tangon)(report);
            oscard = report.Text;
            report = {};
            yankee = 'text-xs/bold';
            report['variant'] = yankee;
            yankee = option.text;
            option = new Array(3);
            option[0] = yankee;
            option[1] = offset;
            option[2] = verify;
            report['style'] = option;
            report['children'] = golfie;
            report = zuuluu.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['TextBadge'] = michal;
    return entity;
})();