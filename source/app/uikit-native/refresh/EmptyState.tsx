// app/uikit-native/refresh/EmptyState.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    oscar = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    golf = argPlugh;
    var _closure1_slot0 = oscar;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = golf;
    entity = global;
    options = entity.Object;
    report = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = report.bind(options)(zulu, entity, tango);
    entity = 0;
    report = golf[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(report);
    tango = 1;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    report = tango.View;
    var _closure1_slot3 = report;
    tango = tango.Image;
    var _closure1_slot4 = tango;
    tango = 2;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    backup = tango.Fonts;
    tango = 3;
    report = golf[tango];
    report = oscar.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot5 = report;
    tango = golf[tango];
    tango = oscar.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot6 = tango;
    tango = 4;
    tango = golf[tango];
    options = oscar.bind(entity)(tango);
    report = options.createStyles;
    tango = {};
    yankee = 'center';
    result = 16;
    verify = {'alignItems': 'center', 'justifyContent': 'center', 'padding': 16};
    tango['container'] = verify;
    verify = {};
    kilo = 5;
    offset = golf[kilo];
    output = foxtrot.bind(entity)(offset);
    sizing = backup.DISPLAY_SEMIBOLD;
    romeo = 6;
    offset = golf[romeo];
    offset = foxtrot.bind(entity)(offset);
    offset = offset.colors;
    offset = offset.HEADER_PRIMARY;
    update = output.bind(entity)(sizing, offset, result);
    source = verify;
    offset = copyDataProperties(source, update);
    offset = 'textAlign';
    verify[offset] = yankee;
    output = 8;
    sizing = 'marginBottom';
    verify[sizing] = output;
    tango['title'] = verify;
    verify = {};
    kilo = golf[kilo];
    kilo = foxtrot.bind(entity)(kilo);
    backup = backup.PRIMARY_MEDIUM;
    romeo = golf[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.colors;
    foxtrot = romeo.HEADER_SECONDARY;
    romeo = 14;
    update = kilo.bind(entity)(backup, foxtrot, romeo);
    source = verify;
    romeo = copyDataProperties(source, update);
    verify[offset] = yankee;
    tango['body'] = verify;
    verify = {};
    offset = 32;
    verify['marginBottom'] = offset;
    tango['image'] = verify;
    verify = {'alignSelf': 'center', 'marginTop': 16};
    tango['cta'] = verify;
    tango = report.bind(options)(tango);
    var _closure1_slot7 = tango;
    tango = function(argFoo) { // Original name: EmptyState
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            romeo = entity.source;
            sizing = entity.title;
            yankee = entity.body;
            oscar = entity.containerStyle;
            output = entity.imageStyle;
            result = entity.titleStyle;
            kilo = entity.bodyStyle;
            foxtrot = entity.callToAction;
            entity = _closure1_slot7;
            tango = undefined;
            backup = entity.bind(tango)();
            zulu = _closure1_slot6;
            mike = _closure1_slot3;
            entity = {};
            options = backup.container;
            report = new Array(2);
            report[0] = options;
            report[1] = oscar;
            entity['style'] = report;
            oscar = null;
            report = oscar != romeo;
            options = null;
            if(!report) { _fun00002_ip = 145; continue _fun00001 }
 103:
            offset = _closure1_slot5;
            verify = _closure1_slot4;
            report = {};
            report['source'] = romeo;
            echo = backup.image;
            romeo = new Array(2);
            romeo[0] = echo;
            romeo[1] = output;
            report['style'] = romeo;
            options = offset.bind(tango)(verify, report);
 145:
            report = new Array(4);
            report[0] = options;
            verify = oscar != sizing;
            options = null;
            if(!verify) { _fun00002_ip = 225; continue _fun00001 }
 162:
            romeo = _closure1_slot5;
            offset = _closure1_slot0;
            output = _closure1_slot2;
            verify = 7;
            verify = output[verify];
            verify = offset.bind(tango)(verify);
            offset = verify.LegacyText;
            verify = {};
            echo = backup.title;
            output = new Array(2);
            output[0] = echo;
            output[1] = result;
            verify['style'] = output;
            verify['children'] = sizing;
            options = romeo.bind(tango)(offset, verify);
 225:
            report[1] = options;
            offset = _closure1_slot5;
            verify = _closure1_slot0;
            romeo = _closure1_slot2;
            options = 7;
            options = romeo[options];
            options = verify.bind(tango)(options);
            verify = options.LegacyText;
            options = {};
            sizing = backup.body;
            romeo = new Array(2);
            romeo[0] = sizing;
            romeo[1] = kilo;
            options['style'] = romeo;
            options['children'] = yankee;
            options = offset.bind(tango)(verify, options);
            report[2] = options;
            options = oscar != foxtrot;
            oscar = null;
            if(!options) { _fun00002_ip = 422; continue _fun00001 }
 305:
            verify = _closure1_slot5;
            yankee = _closure1_slot1;
            romeo = _closure1_slot2;
            offset = 8;
            golf = romeo[offset];
            options = yankee.bind(tango)(golf);
            golf = {};
            kilo = true;
            golf['shrink'] = kilo;
            backup = backup.cta;
            golf['style'] = backup;
            backup = foxtrot.label;
            golf['text'] = backup;
            foxtrot = foxtrot.onPress;
            golf['onPress'] = foxtrot;
            foxtrot = romeo[offset];
            foxtrot = yankee.bind(tango)(foxtrot);
            foxtrot = foxtrot.Colors;
            foxtrot = foxtrot.BRAND;
            golf['color'] = foxtrot;
            offset = romeo[offset];
            offset = yankee.bind(tango)(offset);
            offset = offset.Sizes;
            offset = offset.SMALL;
            golf['size'] = offset;
            oscar = verify.bind(tango)(options, golf);
 422:
            report[3] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot8 = tango;
    report = 10;
    report = golf[report];
    golf = oscar.bind(entity)(report);
    oscar = golf.fileFinishedImporting;
    report = 'uikit-native/refresh/EmptyState.tsx';
    report = oscar.bind(golf)(report);
    zulu['default'] = tango;
    mike = function(argFoo) {
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            tango = argFoo;
            mike = tango.lightSource;
            oscar = tango.darkSource;
            entity = null;
            zulu = Object.create(entity);
            entity = 0;
            zulu['lightSource'] = entity;
            zulu['darkSource'] = entity;
            foxtrot = {};
            romeo = tango;
            yankee = zulu;
            report = copyDataProperties(foxtrot, romeo, yankee);
            golf = _closure1_slot0;
            verify = _closure1_slot2;
            zulu = 9;
            options = verify[zulu];
            tango = undefined;
            offset = golf.bind(tango)(options);
            options = offset.useThemeContext;
            options = options.bind(offset)();
            options = options.theme;
            zulu = verify[zulu];
            golf = golf.bind(tango)(zulu);
            zulu = golf.isThemeLight;
            zulu = zulu.bind(golf)(options);
            if(!zulu) { _fun00004_ip = 111; continue _fun00003 }
 108:
            oscar = mike;
 111:
            zulu = _closure1_slot5;
            mike = _closure1_slot8;
            entity = {};
            entity['source'] = oscar;
            foxtrot = entity;
            romeo = report;
            report = copyDataProperties(foxtrot, romeo);
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['ThemedEmptyState'] = mike;
    return entity;
})();