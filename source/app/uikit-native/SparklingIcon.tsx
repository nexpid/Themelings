// app/uikit-native/SparklingIcon.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    options = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.View;
    var _closure1_slot4 = options;
    options = tango.StyleSheet;
    tango = tango.Animated;
    var _closure1_slot5 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot7 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    golf = options.create;
    tango = {};
    verify = {'position': 'relative', 'width': 36, 'height': 36};
    tango['wrapperStyle'] = verify;
    verify = {};
    offset = 'absolute';
    verify['position'] = offset;
    tango['sparkleContainer'] = verify;
    verify = {'width': 10, 'height': 10};
    tango['sparkle'] = verify;
    verify = {'bottom': 2, 'left': 2};
    tango['sparklePosition'] = verify;
    verify = {'top': 2, 'right': 2};
    tango['starPosition'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot9 = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'uikit-native/SparklingIcon.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zulu = argFoo;
            golf = zulu.wrapperStyle;
            result = zulu.sparklePosition;
            tango = undefined;
            if(!(result === tango)) { _fun00002_ip = 36; continue _fun00001 }
 23:
            entity = _closure1_slot9;
            result = entity.sparklePosition;
 36:
            sizing = zulu.starPosition;
            if(!(sizing === tango)) { _fun00002_ip = 59; continue _fun00001 }
 46:
            entity = _closure1_slot9;
            sizing = entity.starPosition;
 59:
            mike = {'wrapperStyle': 0, 'sparklePosition': 0, 'starPosition': 0};
            control = null;
            vacuum = mike;
            entity = silentSetPrototypeOf(vacuum, control);
            vacuum = {};
            control = zulu;
            source = mike;
            offset = copyDataProperties(vacuum, control, source);
            var _closure2_slot0 = tango;
            var _closure2_slot1 = tango;
            var _closure2_slot2 = tango;
            var _closure2_slot3 = tango;
            var _closure2_slot4 = tango;
            var _closure2_slot5 = tango;
            var _closure2_slot6 = tango;
            mike = _closure1_slot0;
            zulu = _closure1_slot2;
            entity = 4;
            entity = zulu[entity];
            options = mike.bind(tango)(entity);
            report = options.useStateFromStores;
            entity = _closure1_slot6;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = _closure1_slot6;
                entity = entity.useReducedMotion;
                return entity;
            };
            report = report.bind(options)(mike, entity);
            _closure2_slot0 = report;
            mike = _closure1_slot1;
            entity = 5;
            entity = zulu[entity];
            mike = mike.bind(tango)(entity);
            entity = function() {
                zulu = _closure1_slot5;
                entity = zulu.Value;
                mike = entity.prototype;
                mike = Object.create(mike, {constructor: {value: entity}});
                yankee = mike;
                offset = 0;
                entity = new yankee[entity](offset, verify);
                golf = entity instanceof Object ? entity : mike;
                entity = zulu.Value;
                mike = entity.prototype;
                mike = Object.create(mike, {constructor: {value: entity}});
                yankee = mike;
                entity = new yankee[entity](offset, verify);
                tango = entity instanceof Object ? entity : mike;
                mike = golf.interpolate;
                entity = {};
                oscar = [0, 1];
                entity['inputRange'] = oscar;
                oscar = ['0deg', '90deg'];
                entity['outputRange'] = oscar;
                oscar = mike.bind(golf)(entity);
                mike = tango.interpolate;
                entity = {};
                options = [0, 1];
                entity['inputRange'] = options;
                options = ['0deg', '90deg'];
                entity['outputRange'] = options;
                mike = mike.bind(tango)(entity);
                entity = {};
                options = zulu.Value;
                verify = options.prototype;
                verify = Object.create(verify, {constructor: {value: options}});
                yankee = verify;
                offset = 0;
                options = new yankee[options](offset, verify);
                options = options instanceof Object ? options : verify;
                entity['starOpacity'] = options;
                entity['starSpinValue'] = golf;
                golf = zulu.Value;
                options = golf.prototype;
                options = Object.create(options, {constructor: {value: golf}});
                yankee = options;
                golf = new yankee[golf](offset, verify);
                golf = golf instanceof Object ? golf : options;
                entity['starScale'] = golf;
                entity['starSpin'] = oscar;
                oscar = zulu.Value;
                golf = oscar.prototype;
                golf = Object.create(golf, {constructor: {value: oscar}});
                yankee = golf;
                oscar = new yankee[oscar](offset, verify);
                oscar = oscar instanceof Object ? oscar : golf;
                entity['sparkleOpacity'] = oscar;
                entity['sparkleSpinValue'] = tango;
                zulu = zulu.Value;
                tango = zulu.prototype;
                tango = Object.create(tango, {constructor: {value: zulu}});
                yankee = tango;
                zulu = new yankee[zulu](offset, verify);
                zulu = zulu instanceof Object ? zulu : tango;
                entity['sparkleScale'] = zulu;
                entity['sparkleSpin'] = mike;
                return entity;
            };
            options = mike.bind(tango)(entity);
            mike = options.starOpacity;
            _closure2_slot1 = mike;
            output = options.starSpinValue;
            _closure2_slot2 = output;
            zulu = options.starScale;
            _closure2_slot3 = zulu;
            entity = options.starSpin;
            verify = options.sparkleOpacity;
            _closure2_slot4 = verify;
            echo = options.sparkleSpinValue;
            _closure2_slot5 = echo;
            yankee = options.sparkleScale;
            _closure2_slot6 = yankee;
            options = options.sparkleSpin;
            kilo = _closure1_slot3;
            backup = kilo.useEffect;
            foxtrot = new Array(7);
            foxtrot[0] = report;
            foxtrot[1] = verify;
            foxtrot[2] = yankee;
            foxtrot[3] = echo;
            foxtrot[4] = mike;
            foxtrot[5] = zulu;
            foxtrot[6] = output;
            romeo = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = _closure2_slot0;
                    if(entity) { _fun00004_ip = 612; continue _fun00003 }
 13:
                    zulu = _closure1_slot5;
                    mike = zulu.loop;
                    tango = zulu.sequence;
                    golf = zulu.parallel;
                    options = zulu.timing;
                    oscar = _closure2_slot2;
                    entity = {'toValue': 1, 'duration': 1000, 'useNativeDriver': true};
                    oscar = options.bind(zulu)(oscar, entity);
                    entity = new Array(4);
                    entity[0] = oscar;
                    verify = zulu.sequence;
                    offset = zulu.parallel;
                    romeo = zulu.timing;
                    yankee = _closure2_slot1;
                    oscar = 500;
                    options = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    yankee = romeo.bind(zulu)(yankee, options);
                    options = new Array(2);
                    options[0] = yankee;
                    foxtrot = zulu.timing;
                    romeo = _closure2_slot3;
                    yankee = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    yankee = foxtrot.bind(zulu)(romeo, yankee);
                    options[1] = yankee;
                    offset = offset.bind(zulu)(options);
                    options = new Array(2);
                    options[0] = offset;
                    yankee = zulu.parallel;
                    foxtrot = zulu.timing;
                    romeo = _closure2_slot1;
                    offset = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeo = foxtrot.bind(zulu)(romeo, offset);
                    offset = new Array(2);
                    offset[0] = romeo;
                    backup = zulu.timing;
                    foxtrot = _closure2_slot3;
                    romeo = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeo = backup.bind(zulu)(foxtrot, romeo);
                    offset[1] = romeo;
                    offset = yankee.bind(zulu)(offset);
                    options[1] = offset;
                    options = verify.bind(zulu)(options);
                    entity[1] = options;
                    offset = zulu.timing;
                    verify = _closure2_slot5;
                    options = {'toValue': 1, 'duration': 1000, 'delay': 500, 'useNativeDriver': true};
                    options = offset.bind(zulu)(verify, options);
                    entity[2] = options;
                    verify = zulu.sequence;
                    options = zulu.delay;
                    offset = options.bind(zulu)(oscar);
                    options = new Array(3);
                    options[0] = offset;
                    yankee = zulu.parallel;
                    foxtrot = zulu.timing;
                    romeo = _closure2_slot4;
                    offset = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    romeo = foxtrot.bind(zulu)(romeo, offset);
                    offset = new Array(2);
                    offset[0] = romeo;
                    backup = zulu.timing;
                    foxtrot = _closure2_slot6;
                    romeo = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    romeo = backup.bind(zulu)(foxtrot, romeo);
                    offset[1] = romeo;
                    offset = yankee.bind(zulu)(offset);
                    options[1] = offset;
                    yankee = zulu.parallel;
                    foxtrot = zulu.timing;
                    romeo = _closure2_slot4;
                    offset = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeo = foxtrot.bind(zulu)(romeo, offset);
                    offset = new Array(2);
                    offset[0] = romeo;
                    backup = zulu.timing;
                    foxtrot = _closure2_slot6;
                    romeo = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeo = backup.bind(zulu)(foxtrot, romeo);
                    offset[1] = romeo;
                    offset = yankee.bind(zulu)(offset);
                    options[2] = offset;
                    options = verify.bind(zulu)(options);
                    entity[3] = options;
                    golf = golf.bind(zulu)(entity);
                    entity = new Array(4);
                    entity[0] = golf;
                    verify = zulu.timing;
                    options = _closure2_slot2;
                    golf = {'toValue': 0, 'duration': 0, 'useNativeDriver': true};
                    golf = verify.bind(zulu)(options, golf);
                    entity[1] = golf;
                    options = zulu.timing;
                    golf = _closure2_slot5;
                    report = {'toValue': 0, 'duration': 0, 'useNativeDriver': true};
                    report = options.bind(zulu)(golf, report);
                    entity[2] = report;
                    report = zulu.delay;
                    report = report.bind(zulu)(oscar);
                    entity[3] = report;
                    entity = tango.bind(zulu)(entity);
                    mike = mike.bind(zulu)(entity);
                    entity = mike.start;
                    entity = entity.bind(mike)();
 612:
                    entity = undefined;
                    return entity;
                }
            };
            romeo = backup.bind(kilo)(romeo, foxtrot);
            if(report) { _fun00002_ip = 364; continue _fun00001 }
 326:
            output = {};
            output['opacity'] = verify;
            verify = {};
            verify['rotate'] = options;
            options = new Array(2);
            options[0] = verify;
            verify = {};
            verify['scale'] = yankee;
            options[1] = verify;
            output['transform'] = options;
            _fun00002_ip = 366; continue _fun00001;
 364:
            output = {};
 366:
            if(report) { _fun00002_ip = 407; continue _fun00001 }
 369:
            foxtrot = {};
            foxtrot['opacity'] = mike;
            mike = {};
            mike['rotate'] = entity;
            entity = new Array(2);
            entity[0] = mike;
            mike = {};
            mike['scale'] = zulu;
            entity[1] = mike;
            foxtrot['transform'] = entity;
            _fun00002_ip = 409; continue _fun00001;
 407:
            foxtrot = {};
 409:
            zulu = _closure1_slot8;
            mike = _closure1_slot4;
            entity = {};
            romeo = _closure1_slot9;
            options = romeo.wrapperStyle;
            report = new Array(2);
            report[0] = options;
            report[1] = golf;
            entity['style'] = report;
            options = _closure1_slot7;
            backup = _closure1_slot1;
            kilo = _closure1_slot2;
            verify = 6;
            report = kilo[verify];
            golf = backup.bind(tango)(report);
            report = {};
            vacuum = report;
            control = offset;
            offset = copyDataProperties(vacuum, control);
            golf = options.bind(tango)(golf, report);
            report = new Array(3);
            report[0] = golf;
            oscar = _closure1_slot5;
            offset = oscar.View;
            golf = {};
            echo = romeo.sparkleContainer;
            yankee = new Array(3);
            yankee[0] = echo;
            yankee[1] = result;
            yankee[2] = output;
            golf['style'] = yankee;
            yankee = kilo[verify];
            result = backup.bind(tango)(yankee);
            output = {};
            yankee = 7;
            yankee = kilo[yankee];
            yankee = backup.bind(tango)(yankee);
            output['source'] = yankee;
            yankee = romeo.sparkle;
            output['style'] = yankee;
            yankee = true;
            output['disableColor'] = yankee;
            output = options.bind(tango)(result, output);
            golf['children'] = output;
            golf = options.bind(tango)(offset, golf);
            report[1] = golf;
            golf = oscar.View;
            oscar = {};
            output = romeo.sparkleContainer;
            offset = new Array(3);
            offset[0] = output;
            offset[1] = sizing;
            offset[2] = foxtrot;
            oscar['style'] = offset;
            verify = kilo[verify];
            offset = backup.bind(tango)(verify);
            verify = {};
            foxtrot = 8;
            foxtrot = kilo[foxtrot];
            foxtrot = backup.bind(tango)(foxtrot);
            verify['source'] = foxtrot;
            romeo = romeo.sparkle;
            verify['style'] = romeo;
            verify['disableColor'] = yankee;
            verify = options.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[2] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();