// app/uikit-native/SparklingIcon.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: SparklingIconInner
        zuuluu = _closure1_slot0;
        sizing = _closure1_slot2;
        oscard = 4;
        michal = sizing[oscard];
        tangon = undefined;
        report = zuuluu.bind(tangon)(michal);
        michal = report.useSharedValue;
        golfie = 0;
        backup = michal.bind(report)(golfie);
        var _closure2_slot0 = backup;
        michal = sizing[oscard];
        report = zuuluu.bind(tangon)(michal);
        michal = report.useSharedValue;
        kiloes = michal.bind(report)(golfie);
        var _closure2_slot1 = kiloes;
        michal = sizing[oscard];
        report = zuuluu.bind(tangon)(michal);
        michal = report.useSharedValue;
        romeon = michal.bind(report)(golfie);
        var _closure2_slot2 = romeon;
        michal = sizing[oscard];
        report = zuuluu.bind(tangon)(michal);
        michal = report.useSharedValue;
        option = michal.bind(report)(golfie);
        var _closure2_slot3 = option;
        michal = sizing[oscard];
        report = zuuluu.bind(tangon)(michal);
        michal = report.useSharedValue;
        verify = michal.bind(report)(golfie);
        var _closure2_slot4 = verify;
        michal = sizing[oscard];
        report = zuuluu.bind(tangon)(michal);
        michal = report.useSharedValue;
        golfie = michal.bind(report)(golfie);
        var _closure2_slot5 = golfie;
        yankee = _closure1_slot3;
        offset = yankee.useEffect;
        report = new Array(6);
        report[0] = backup;
        report[1] = kiloes;
        report[2] = romeon;
        report[3] = option;
        report[4] = verify;
        report[5] = golfie;
        michal = function() {
            yankee = _closure2_slot0;
            offset = yankee.set;
            oscard = _closure1_slot0;
            option = _closure1_slot2;
            report = 4;
            tangon = option[report];
            entity = undefined;
            foxtra = oscard.bind(entity)(tangon);
            romeon = foxtra.withRepeat;
            tangon = option[report];
            sizing = oscard.bind(entity)(tangon);
            kiloes = sizing.withSequence;
            tangon = 5;
            golfie = option[tangon];
            backup = oscard.bind(entity)(golfie);
            verify = backup.withTiming;
            golfie = {};
            source = 1000;
            golfie['duration'] = source;
            update = 90;
            backup = verify.bind(backup)(update, golfie);
            golfie = option[tangon];
            output = oscard.bind(entity)(golfie);
            verify = output.withTiming;
            golfie = {};
            ctrled = 0;
            golfie['duration'] = ctrled;
            verify = verify.bind(output)(ctrled, golfie);
            golfie = option[report];
            result = oscard.bind(entity)(golfie);
            output = result.withDelay;
            golfie = option[tangon];
            vacuum = oscard.bind(entity)(golfie);
            echoed = vacuum.withTiming;
            golfie = {};
            golfie['duration'] = ctrled;
            golfie = echoed.bind(vacuum)(ctrled, golfie);
            golfie = output.bind(result)(source, golfie);
            verify = kiloes.bind(sizing)(backup, verify, golfie);
            golfie = -1;
            verify = romeon.bind(foxtra)(verify, golfie);
            verify = offset.bind(yankee)(verify);
            verify = function() { // Original name: starOpacityScaleSequence
                verify = _closure1_slot0;
                yankee = _closure1_slot2;
                golfie = 4;
                entity = yankee[golfie];
                oscard = undefined;
                report = verify.bind(oscard)(entity);
                tangon = report.withSequence;
                entity = 5;
                michal = yankee[entity];
                romeon = verify.bind(oscard)(michal);
                option = romeon.withTiming;
                zuuluu = {};
                offset = 500;
                zuuluu['duration'] = offset;
                michal = 1;
                zuuluu = option.bind(romeon)(michal, zuuluu);
                michal = yankee[entity];
                romeon = verify.bind(oscard)(michal);
                option = romeon.withTiming;
                michal = {};
                michal['duration'] = offset;
                offset = 0;
                michal = option.bind(romeon)(offset, michal);
                golfie = yankee[golfie];
                option = verify.bind(oscard)(golfie);
                golfie = option.withDelay;
                entity = yankee[entity];
                verify = verify.bind(oscard)(entity);
                oscard = verify.withTiming;
                entity = {};
                entity['duration'] = offset;
                oscard = oscard.bind(verify)(offset, entity);
                entity = 1000;
                entity = golfie.bind(option)(entity, oscard);
                entity = tangon.bind(report)(zuuluu, michal, entity);
                return entity;
            };
            romeon = _closure2_slot1;
            yankee = romeon.set;
            offset = option[report];
            backup = oscard.bind(entity)(offset);
            foxtra = backup.withRepeat;
            offset = verify.bind(entity)();
            offset = foxtra.bind(backup)(offset, golfie);
            offset = yankee.bind(romeon)(offset);
            yankee = _closure2_slot2;
            offset = yankee.set;
            romeon = option[report];
            foxtra = oscard.bind(entity)(romeon);
            romeon = foxtra.withRepeat;
            verify = verify.bind(entity)();
            verify = romeon.bind(foxtra)(verify, golfie);
            verify = offset.bind(yankee)(verify);
            offset = _closure2_slot3;
            verify = offset.set;
            yankee = option[report];
            romeon = oscard.bind(entity)(yankee);
            yankee = romeon.withRepeat;
            foxtra = option[report];
            sizing = oscard.bind(entity)(foxtra);
            kiloes = sizing.withSequence;
            foxtra = option[report];
            output = oscard.bind(entity)(foxtra);
            backup = output.withDelay;
            foxtra = option[tangon];
            echoed = oscard.bind(entity)(foxtra);
            result = echoed.withTiming;
            foxtra = {};
            foxtra['duration'] = source;
            foxtra = result.bind(echoed)(update, foxtra);
            echoed = 500;
            backup = backup.bind(output)(echoed, foxtra);
            foxtra = option[tangon];
            result = oscard.bind(entity)(foxtra);
            output = result.withTiming;
            foxtra = {};
            foxtra['duration'] = ctrled;
            foxtra = output.bind(result)(ctrled, foxtra);
            output = option[report];
            result = oscard.bind(entity)(output);
            output = result.withDelay;
            tangon = option[tangon];
            source = oscard.bind(entity)(tangon);
            update = source.withTiming;
            tangon = {};
            tangon['duration'] = ctrled;
            tangon = update.bind(source)(ctrled, tangon);
            tangon = output.bind(result)(echoed, tangon);
            tangon = kiloes.bind(sizing)(backup, foxtra, tangon);
            tangon = yankee.bind(romeon)(tangon, golfie);
            tangon = verify.bind(offset)(tangon);
            michal = function() { // Original name: sparkleOpacityScaleSequence
                offset = _closure1_slot0;
                romeon = _closure1_slot2;
                oscard = 4;
                entity = romeon[oscard];
                verify = undefined;
                report = offset.bind(verify)(entity);
                tangon = report.withSequence;
                entity = romeon[oscard];
                golfie = offset.bind(verify)(entity);
                zuuluu = golfie.withDelay;
                entity = 5;
                michal = romeon[entity];
                backup = offset.bind(verify)(michal);
                foxtra = backup.withTiming;
                yankee = {};
                option = 500;
                yankee['duration'] = option;
                michal = 1;
                michal = foxtra.bind(backup)(michal, yankee);
                zuuluu = zuuluu.bind(golfie)(option, michal);
                michal = romeon[entity];
                foxtra = offset.bind(verify)(michal);
                golfie = foxtra.withTiming;
                michal = {};
                michal['duration'] = option;
                yankee = 0;
                michal = golfie.bind(foxtra)(yankee, michal);
                oscard = romeon[oscard];
                golfie = offset.bind(verify)(oscard);
                oscard = golfie.withDelay;
                entity = romeon[entity];
                offset = offset.bind(verify)(entity);
                verify = offset.withTiming;
                entity = {};
                entity['duration'] = yankee;
                entity = verify.bind(offset)(yankee, entity);
                entity = oscard.bind(golfie)(option, entity);
                entity = tangon.bind(report)(zuuluu, michal, entity);
                return entity;
            };
            offset = _closure2_slot4;
            verify = offset.set;
            tangon = option[report];
            romeon = oscard.bind(entity)(tangon);
            yankee = romeon.withRepeat;
            tangon = michal.bind(entity)();
            tangon = yankee.bind(romeon)(tangon, golfie);
            tangon = verify.bind(offset)(tangon);
            tangon = _closure2_slot5;
            zuuluu = tangon.set;
            report = option[report];
            oscard = oscard.bind(entity)(report);
            report = oscard.withRepeat;
            michal = michal.bind(entity)();
            michal = report.bind(oscard)(michal, golfie);
            michal = zuuluu.bind(tangon)(michal);
            return entity;
        };
        michal = offset.bind(yankee)(michal, report);
        michal = sizing[oscard];
        offset = zuuluu.bind(tangon)(michal);
        report = offset.useAnimatedStyle;
        michal = function() { // Original name: f
            entity = {};
            zuuluu = _closure2_slot1;
            michal = zuuluu.get;
            michal = michal.bind(zuuluu)();
            entity['opacity'] = michal;
            zuuluu = {};
            report = _closure2_slot0;
            michal = report.get;
            golfie = michal.bind(report)();
            michal = global;
            michal = michal.HermesInternal;
            oscard = michal.concat;
            report = '';
            michal = 'deg';
            michal = oscard.bind(report)(golfie, michal);
            zuuluu['rotate'] = michal;
            michal = new Array(2);
            michal[0] = zuuluu;
            zuuluu = {};
            report = _closure2_slot2;
            tangon = report.get;
            tangon = tangon.bind(report)();
            zuuluu['scale'] = tangon;
            michal[1] = zuuluu;
            entity['transform'] = michal;
            return entity;
        };
        yankee = {};
        yankee['starOpacity'] = kiloes;
        yankee['starRotate'] = backup;
        yankee['starScale'] = romeon;
        michal['__closure'] = yankee;
        yankee = 14217979351901.0;
        michal['__workletHash'] = yankee;
        yankee = _closure1_slot9;
        michal['__initData'] = yankee;
        yankee = report.bind(offset)(michal);
        michal = sizing[oscard];
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.useAnimatedStyle;
        entity = function() { // Original name: T
            entity = {};
            zuuluu = _closure2_slot4;
            michal = zuuluu.get;
            michal = michal.bind(zuuluu)();
            entity['opacity'] = michal;
            zuuluu = {};
            report = _closure2_slot3;
            michal = report.get;
            golfie = michal.bind(report)();
            michal = global;
            michal = michal.HermesInternal;
            oscard = michal.concat;
            report = '';
            michal = 'deg';
            michal = oscard.bind(report)(golfie, michal);
            zuuluu['rotate'] = michal;
            michal = new Array(2);
            michal[0] = zuuluu;
            zuuluu = {};
            report = _closure2_slot5;
            tangon = report.get;
            tangon = tangon.bind(report)();
            zuuluu['scale'] = tangon;
            michal[1] = zuuluu;
            entity['transform'] = michal;
            return entity;
        };
        report = {};
        report['sparkleOpacity'] = verify;
        report['sparkleRotate'] = option;
        report['sparkleScale'] = golfie;
        entity['__closure'] = report;
        report = 2247166502718.0;
        entity['__workletHash'] = report;
        report = _closure1_slot10;
        entity['__initData'] = report;
        backup = michal.bind(zuuluu)(entity);
        zuuluu = _closure1_slot7;
        michal = _closure1_slot4;
        entity = {};
        report = _closure1_slot8;
        report = report.wrapperStyle;
        entity['style'] = report;
        option = _closure1_slot6;
        kiloes = _closure1_slot1;
        verify = 6;
        report = sizing[verify];
        golfie = kiloes.bind(tangon)(report);
        report = {};
        update = argFoo;
        source = report;
        offset = copyDataProperties(source, update);
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        offset = _closure1_slot6;
        golfie = sizing[oscard];
        golfie = kiloes.bind(tangon)(golfie);
        option = golfie.View;
        golfie = {};
        romeon = _closure1_slot8;
        output = romeon.sparkleContainer;
        romeon = new Array(3);
        romeon[0] = output;
        output = _closure1_slot8;
        output = output.sparklePosition;
        romeon[1] = output;
        romeon[2] = backup;
        golfie['style'] = romeon;
        result = _closure1_slot6;
        romeon = sizing[verify];
        output = kiloes.bind(tangon)(romeon);
        backup = {};
        romeon = 7;
        romeon = sizing[romeon];
        romeon = kiloes.bind(tangon)(romeon);
        backup['source'] = romeon;
        romeon = _closure1_slot8;
        romeon = romeon.sparkle;
        backup['style'] = romeon;
        romeon = true;
        backup['disableColor'] = romeon;
        backup = result.bind(tangon)(output, backup);
        golfie['children'] = backup;
        golfie = offset.bind(tangon)(option, golfie);
        report[1] = golfie;
        option = _closure1_slot6;
        oscard = sizing[oscard];
        oscard = kiloes.bind(tangon)(oscard);
        golfie = oscard.View;
        oscard = {};
        offset = _closure1_slot8;
        backup = offset.sparkleContainer;
        offset = new Array(3);
        offset[0] = backup;
        backup = _closure1_slot8;
        backup = backup.starPosition;
        offset[1] = backup;
        offset[2] = yankee;
        oscard['style'] = offset;
        yankee = _closure1_slot6;
        verify = sizing[verify];
        offset = kiloes.bind(tangon)(verify);
        verify = {};
        backup = 8;
        backup = sizing[backup];
        backup = kiloes.bind(tangon)(backup);
        verify['source'] = backup;
        foxtra = _closure1_slot8;
        foxtra = foxtra.sparkle;
        verify['style'] = foxtra;
        verify['disableColor'] = romeon;
        verify = yankee.bind(tangon)(offset, verify);
        oscard['children'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot11 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    verify = tangon.StyleSheet;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    option = verify.create;
    golfie = {};
    tangon = {'position': 'relative', 'width': 36, 'height': 36};
    golfie['wrapperStyle'] = tangon;
    tangon = {};
    offset = 'absolute';
    tangon['position'] = offset;
    golfie['sparkleContainer'] = tangon;
    tangon = 10;
    offset = {'width': 10, 'height': 10};
    golfie['sparkle'] = offset;
    offset = {'bottom': 2, 'left': 2};
    golfie['sparklePosition'] = offset;
    offset = {'top': 2, 'right': 2};
    golfie['starPosition'] = offset;
    golfie = option.bind(verify)(golfie);
    var _closure1_slot8 = golfie;
    golfie = {};
    option = 'function SparklingIconTsx1(){const{starOpacity,starRotate,starScale}=this.__closure;return{opacity:starOpacity.get(),transform:[{rotate:starRotate.get()+"deg"},{scale:starScale.get()}]};}';
    golfie['code'] = option;
    var _closure1_slot9 = golfie;
    golfie = {};
    option = 'function SparklingIconTsx2(){const{sparkleOpacity,sparkleRotate,sparkleScale}=this.__closure;return{opacity:sparkleOpacity.get(),transform:[{rotate:sparkleRotate.get()+"deg"},{scale:sparkleScale.get()}]};}';
    golfie['code'] = option;
    var _closure1_slot10 = golfie;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/SparklingIcon.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SparklingIcon
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 9;
            michal = tangon[michal];
            tangon = undefined;
            oscard = zuuluu.bind(tangon)(michal);
            report = oscard.useStateFromStores;
            michal = _closure1_slot5;
            zuuluu = new Array(1);
            zuuluu[0] = michal;
            michal = function() {
                entity = _closure1_slot5;
                entity = entity.useReducedMotion;
                return entity;
            };
            michal = report.bind(oscard)(zuuluu, michal);
            zuuluu = _closure1_slot6;
            if(michal) { _fun00002_ip = 70; continue _fun00001 }
 64:
            michal = _closure1_slot11;
            _fun00002_ip = 90; continue _fun00001;
 70:
            report = _closure1_slot1;
            oscard = _closure1_slot2;
            entity = 6;
            entity = oscard[entity];
            michal = report.bind(tangon)(entity);
 90:
            entity = {};
            golfie = argFoo;
            option = entity;
            report = copyDataProperties(option, golfie);
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();