// app/uikit-native/SparklingIcon.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    option = tangon.StyleSheet;
    tangon = tangon.Animated;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot7 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot8 = tangon;
    golfie = option.create;
    tangon = {};
    verify = {'position': 'relative', 'width': 36, 'height': 36};
    tangon['wrapperStyle'] = verify;
    verify = {};
    offset = 'absolute';
    verify['position'] = offset;
    tangon['sparkleContainer'] = verify;
    verify = {'width': 10, 'height': 10};
    tangon['sparkle'] = verify;
    verify = {'bottom': 2, 'left': 2};
    tangon['sparklePosition'] = verify;
    verify = {'top': 2, 'right': 2};
    tangon['starPosition'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/SparklingIcon.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: _default
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            golfie = zuuluu.wrapperStyle;
            result = zuuluu.sparklePosition;
            tangon = undefined;
            if(!(result === tangon)) { _fun00002_ip = 36; continue _fun00001 }
 23:
            entity = _closure1_slot9;
            result = entity.sparklePosition;
 36:
            sizing = zuuluu.starPosition;
            if(!(sizing === tangon)) { _fun00002_ip = 59; continue _fun00001 }
 46:
            entity = _closure1_slot9;
            sizing = entity.starPosition;
 59:
            michal = {'wrapperStyle': 0, 'sparklePosition': 0, 'starPosition': 0};
            ctrled = null;
            vacuum = michal;
            entity = silentSetPrototypeOf(vacuum, ctrled);
            vacuum = {};
            ctrled = zuuluu;
            source = michal;
            offset = copyDataProperties(vacuum, ctrled, source);
            var _closure2_slot0 = tangon;
            var _closure2_slot1 = tangon;
            var _closure2_slot2 = tangon;
            var _closure2_slot3 = tangon;
            var _closure2_slot4 = tangon;
            var _closure2_slot5 = tangon;
            var _closure2_slot6 = tangon;
            michal = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 4;
            entity = zuuluu[entity];
            option = michal.bind(tangon)(entity);
            report = option.useStateFromStores;
            entity = _closure1_slot6;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = _closure1_slot6;
                entity = entity.useReducedMotion;
                return entity;
            };
            report = report.bind(option)(michal, entity);
            _closure2_slot0 = report;
            michal = _closure1_slot1;
            entity = 5;
            entity = zuuluu[entity];
            michal = michal.bind(tangon)(entity);
            entity = function() {
                zuuluu = _closure1_slot5;
                entity = zuuluu.Value;
                michal = entity.prototype;
                michal = Object.create(michal, {constructor: {value: entity}});
                yankee = michal;
                offset = 0;
                entity = new yankee[entity](offset, verify);
                golfie = entity instanceof Object ? entity : michal;
                entity = zuuluu.Value;
                michal = entity.prototype;
                michal = Object.create(michal, {constructor: {value: entity}});
                yankee = michal;
                entity = new yankee[entity](offset, verify);
                tangon = entity instanceof Object ? entity : michal;
                michal = golfie.interpolate;
                entity = {};
                oscard = [0, 1];
                entity['inputRange'] = oscard;
                oscard = ['0deg', '90deg'];
                entity['outputRange'] = oscard;
                oscard = michal.bind(golfie)(entity);
                michal = tangon.interpolate;
                entity = {};
                option = [0, 1];
                entity['inputRange'] = option;
                option = ['0deg', '90deg'];
                entity['outputRange'] = option;
                michal = michal.bind(tangon)(entity);
                entity = {};
                option = zuuluu.Value;
                verify = option.prototype;
                verify = Object.create(verify, {constructor: {value: option}});
                yankee = verify;
                offset = 0;
                option = new yankee[option](offset, verify);
                option = option instanceof Object ? option : verify;
                entity['starOpacity'] = option;
                entity['starSpinValue'] = golfie;
                golfie = zuuluu.Value;
                option = golfie.prototype;
                option = Object.create(option, {constructor: {value: golfie}});
                yankee = option;
                golfie = new yankee[golfie](offset, verify);
                golfie = golfie instanceof Object ? golfie : option;
                entity['starScale'] = golfie;
                entity['starSpin'] = oscard;
                oscard = zuuluu.Value;
                golfie = oscard.prototype;
                golfie = Object.create(golfie, {constructor: {value: oscard}});
                yankee = golfie;
                oscard = new yankee[oscard](offset, verify);
                oscard = oscard instanceof Object ? oscard : golfie;
                entity['sparkleOpacity'] = oscard;
                entity['sparkleSpinValue'] = tangon;
                zuuluu = zuuluu.Value;
                tangon = zuuluu.prototype;
                tangon = Object.create(tangon, {constructor: {value: zuuluu}});
                yankee = tangon;
                zuuluu = new yankee[zuuluu](offset, verify);
                zuuluu = zuuluu instanceof Object ? zuuluu : tangon;
                entity['sparkleScale'] = zuuluu;
                entity['sparkleSpin'] = michal;
                return entity;
            };
            option = michal.bind(tangon)(entity);
            michal = option.starOpacity;
            _closure2_slot1 = michal;
            output = option.starSpinValue;
            _closure2_slot2 = output;
            zuuluu = option.starScale;
            _closure2_slot3 = zuuluu;
            entity = option.starSpin;
            verify = option.sparkleOpacity;
            _closure2_slot4 = verify;
            echoed = option.sparkleSpinValue;
            _closure2_slot5 = echoed;
            yankee = option.sparkleScale;
            _closure2_slot6 = yankee;
            option = option.sparkleSpin;
            kiloes = _closure1_slot3;
            backup = kiloes.useEffect;
            foxtra = new Array(7);
            foxtra[0] = report;
            foxtra[1] = verify;
            foxtra[2] = yankee;
            foxtra[3] = echoed;
            foxtra[4] = michal;
            foxtra[5] = zuuluu;
            foxtra[6] = output;
            romeon = function() {
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    entity = _closure2_slot0;
                    if(entity) { _fun00004_ip = 632; continue _fun00003 }
 13:
                    zuuluu = _closure1_slot5;
                    michal = zuuluu.loop;
                    tangon = zuuluu.sequence;
                    golfie = zuuluu.parallel;
                    option = zuuluu.timing;
                    oscard = _closure2_slot2;
                    entity = {'toValue': 1, 'duration': 1000, 'useNativeDriver': true};
                    oscard = option.bind(zuuluu)(oscard, entity);
                    entity = new Array(4);
                    entity[0] = oscard;
                    verify = zuuluu.sequence;
                    offset = zuuluu.parallel;
                    romeon = zuuluu.timing;
                    yankee = _closure2_slot1;
                    oscard = 500;
                    option = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    yankee = romeon.bind(zuuluu)(yankee, option);
                    option = new Array(2);
                    option[0] = yankee;
                    foxtra = zuuluu.timing;
                    romeon = _closure2_slot3;
                    yankee = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    yankee = foxtra.bind(zuuluu)(romeon, yankee);
                    option[1] = yankee;
                    offset = offset.bind(zuuluu)(option);
                    option = new Array(2);
                    option[0] = offset;
                    yankee = zuuluu.parallel;
                    foxtra = zuuluu.timing;
                    romeon = _closure2_slot1;
                    offset = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeon = foxtra.bind(zuuluu)(romeon, offset);
                    offset = new Array(2);
                    offset[0] = romeon;
                    backup = zuuluu.timing;
                    foxtra = _closure2_slot3;
                    romeon = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeon = backup.bind(zuuluu)(foxtra, romeon);
                    offset[1] = romeon;
                    offset = yankee.bind(zuuluu)(offset);
                    option[1] = offset;
                    option = verify.bind(zuuluu)(option);
                    entity[1] = option;
                    offset = zuuluu.timing;
                    verify = _closure2_slot5;
                    option = {'toValue': 1, 'duration': 1000, 'delay': 500, 'useNativeDriver': true};
                    option = offset.bind(zuuluu)(verify, option);
                    entity[2] = option;
                    verify = zuuluu.sequence;
                    option = zuuluu.delay;
                    offset = option.bind(zuuluu)(oscard);
                    option = new Array(3);
                    option[0] = offset;
                    yankee = zuuluu.parallel;
                    foxtra = zuuluu.timing;
                    romeon = _closure2_slot4;
                    offset = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    romeon = foxtra.bind(zuuluu)(romeon, offset);
                    offset = new Array(2);
                    offset[0] = romeon;
                    backup = zuuluu.timing;
                    foxtra = _closure2_slot6;
                    romeon = {'toValue': 1, 'duration': 500, 'useNativeDriver': true};
                    romeon = backup.bind(zuuluu)(foxtra, romeon);
                    offset[1] = romeon;
                    offset = yankee.bind(zuuluu)(offset);
                    option[1] = offset;
                    yankee = zuuluu.parallel;
                    foxtra = zuuluu.timing;
                    romeon = _closure2_slot4;
                    offset = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeon = foxtra.bind(zuuluu)(romeon, offset);
                    offset = new Array(2);
                    offset[0] = romeon;
                    backup = zuuluu.timing;
                    foxtra = _closure2_slot6;
                    romeon = {'toValue': 0, 'duration': 500, 'useNativeDriver': true};
                    romeon = backup.bind(zuuluu)(foxtra, romeon);
                    offset[1] = romeon;
                    offset = yankee.bind(zuuluu)(offset);
                    option[2] = offset;
                    option = verify.bind(zuuluu)(option);
                    entity[3] = option;
                    golfie = golfie.bind(zuuluu)(entity);
                    entity = new Array(4);
                    entity[0] = golfie;
                    verify = zuuluu.timing;
                    option = _closure2_slot2;
                    golfie = {'toValue': 0, 'duration': 0, 'useNativeDriver': true};
                    golfie = verify.bind(zuuluu)(option, golfie);
                    entity[1] = golfie;
                    option = zuuluu.timing;
                    golfie = _closure2_slot5;
                    report = {'toValue': 0, 'duration': 0, 'useNativeDriver': true};
                    report = option.bind(zuuluu)(golfie, report);
                    entity[2] = report;
                    report = zuuluu.delay;
                    report = report.bind(zuuluu)(oscard);
                    entity[3] = report;
                    entity = tangon.bind(zuuluu)(entity);
                    michal = michal.bind(zuuluu)(entity);
                    entity = michal.start;
                    entity = entity.bind(michal)();
 632:
                    entity = undefined;
                    return entity;
                }
            };
            romeon = backup.bind(kiloes)(romeon, foxtra);
            if(report) { _fun00002_ip = 368; continue _fun00001 }
 330:
            output = {};
            output['opacity'] = verify;
            verify = {};
            verify['rotate'] = option;
            option = new Array(2);
            option[0] = verify;
            verify = {};
            verify['scale'] = yankee;
            option[1] = verify;
            output['transform'] = option;
            _fun00002_ip = 370; continue _fun00001;
 368:
            output = {};
 370:
            if(report) { _fun00002_ip = 411; continue _fun00001 }
 373:
            foxtra = {};
            foxtra['opacity'] = michal;
            michal = {};
            michal['rotate'] = entity;
            entity = new Array(2);
            entity[0] = michal;
            michal = {};
            michal['scale'] = zuuluu;
            entity[1] = michal;
            foxtra['transform'] = entity;
            _fun00002_ip = 413; continue _fun00001;
 411:
            foxtra = {};
 413:
            zuuluu = _closure1_slot8;
            michal = _closure1_slot4;
            entity = {};
            romeon = _closure1_slot9;
            option = romeon.wrapperStyle;
            report = new Array(2);
            report[0] = option;
            report[1] = golfie;
            entity['style'] = report;
            option = _closure1_slot7;
            backup = _closure1_slot1;
            kiloes = _closure1_slot2;
            verify = 6;
            report = kiloes[verify];
            golfie = backup.bind(tangon)(report);
            report = {};
            vacuum = report;
            ctrled = offset;
            offset = copyDataProperties(vacuum, ctrled);
            golfie = option.bind(tangon)(golfie, report);
            report = new Array(3);
            report[0] = golfie;
            oscard = _closure1_slot5;
            offset = oscard.View;
            golfie = {};
            echoed = romeon.sparkleContainer;
            yankee = new Array(3);
            yankee[0] = echoed;
            yankee[1] = result;
            yankee[2] = output;
            golfie['style'] = yankee;
            yankee = kiloes[verify];
            result = backup.bind(tangon)(yankee);
            output = {};
            yankee = 7;
            yankee = kiloes[yankee];
            yankee = backup.bind(tangon)(yankee);
            output['source'] = yankee;
            yankee = romeon.sparkle;
            output['style'] = yankee;
            yankee = true;
            output['disableColor'] = yankee;
            output = option.bind(tangon)(result, output);
            golfie['children'] = output;
            golfie = option.bind(tangon)(offset, golfie);
            report[1] = golfie;
            golfie = oscard.View;
            oscard = {};
            output = romeon.sparkleContainer;
            offset = new Array(3);
            offset[0] = output;
            offset[1] = sizing;
            offset[2] = foxtra;
            oscard['style'] = offset;
            verify = kiloes[verify];
            offset = backup.bind(tangon)(verify);
            verify = {};
            foxtra = 8;
            foxtra = kiloes[foxtra];
            foxtra = backup.bind(tangon)(foxtra);
            verify['source'] = foxtra;
            romeon = romeon.sparkle;
            verify['style'] = romeon;
            verify['disableColor'] = yankee;
            verify = option.bind(tangon)(offset, verify);
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[2] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();