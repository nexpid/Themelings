// app/uikit-native/modals/AdvancedInstantInvite.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    var _closure1_slot2 = oscard;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, tangon);
    entity = 0;
    option = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    offset = 1;
    tangon = oscard[offset];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot3 = option;
    option = tangon.StyleSheet;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot4 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = golfie.bind(entity)(tangon);
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot7 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot8 = tangon;
    golfie = option.create;
    tangon = {};
    verify = {};
    verify['flexGrow'] = offset;
    tangon['container'] = verify;
    verify = {'height': 16, 'width': 16, 'marginTop': 2};
    tangon['channelIcon'] = verify;
    verify = {'position': 'absolute', 'left': 32, 'top': 28, 'height': 60, 'width': 60, 'margin': 0, 'padding': 0};
    tangon['sparklesContainer'] = verify;
    verify = {'height': 60, 'width': 60};
    tangon['sparkles'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot9 = tangon;
    tangon = 14;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/modals/AdvancedInstantInvite.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AdvancedInstantInvite
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            golfie = entity.channel;
            zuuluu = entity.guild;
            oscard = entity.style;
            cntext = entity.maxAge;
            result = entity.onChangeMaxAge;
            vacuum = entity.maxUsesOptions;
            update = entity.maxUses;
            echoed = entity.onChangeMaxUses;
            papara = entity.temporary;
            config = entity.onChangeTemporary;
            record = entity.flags;
            var _closure2_slot0 = record;
            entity = entity.onChangeFlags;
            var _closure2_slot1 = entity;
            verify = null;
            entity = verify != golfie;
            equals = null;
            if(!entity) { _fun00002_ip = 138; continue _fun00001 }
 102:
            tangon = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 5;
            michal = michal[entity];
            entity = undefined;
            michal = tangon.bind(entity)(michal);
            entity = michal.getChannelIcon;
            equals = entity.bind(michal)(golfie);
 138:
            entity = verify != golfie;
            output = ' ';
            if(!entity) { _fun00002_ip = 195; continue _fun00001 }
 149:
            report = _closure1_slot0;
            tangon = _closure1_slot2;
            michal = 6;
            tangon = tangon[michal];
            michal = undefined;
            report = report.bind(michal)(tangon);
            tangon = report.computeChannelName;
            michal = _closure1_slot5;
            entity = _closure1_slot4;
            output = tangon.bind(report)(golfie, michal, entity);
 195:
            variable36 = _closure1_slot1;
            sequen = _closure1_slot2;
            entity = 7;
            entity = sequen[entity];
            tangon = undefined;
            entity = variable36.bind(tangon)(entity);
            target = entity.getMaxAgeOptions;
            status = _closure1_slot0;
            entity = 8;
            entity = sequen[entity];
            michal = status.bind(tangon)(entity);
            entity = michal.useInviteApplicationBypassInfo;
            entity = entity.bind(michal)(zuuluu);
            offset = entity.canCreateApplicationBypassInvites;
            romeon = entity.isManualApprovalGuild;
            zuuluu = _closure1_slot6;
            michal = _closure1_slot3;
            entity = {};
            whisks = _closure1_slot9;
            golfie = whisks.container;
            report = new Array(2);
            report[0] = golfie;
            report[1] = oscard;
            entity['style'] = report;
            golfie = _closure1_slot7;
            backup = 9;
            report = sequen[backup];
            report = status.bind(tangon)(report);
            oscard = report.Form;
            report = {};
            option = sequen[backup];
            option = status.bind(tangon)(option);
            yankee = option.FormSection;
            option = {};
            source = 10;
            kiloes = sequen[source];
            kiloes = status.bind(tangon)(kiloes);
            sierra = kiloes.intl;
            sizing = sierra.string;
            kiloes = sequen[source];
            kiloes = status.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.LUo0Q0;
            kiloes = sizing.bind(sierra)(kiloes);
            option['title'] = kiloes;
            kiloes = sequen[backup];
            kiloes = status.bind(tangon)(kiloes);
            sizing = kiloes.FormRow;
            kiloes = {};
            quebec = 11;
            sierra = sequen[quebec];
            limora = variable36.bind(tangon)(sierra);
            sierra = {};
            quebec = sequen[quebec];
            quebec = variable36.bind(tangon)(quebec);
            quebec = quebec.Sizes;
            quebec = quebec.CUSTOM;
            sierra['size'] = quebec;
            sierra['source'] = equals;
            whisks = whisks.channelIcon;
            sierra['style'] = whisks;
            sierra = zuuluu.bind(tangon)(limora, sierra);
            kiloes['leading'] = sierra;
            kiloes['label'] = output;
            kiloes = zuuluu.bind(tangon)(sizing, kiloes);
            option['children'] = kiloes;
            yankee = zuuluu.bind(tangon)(yankee, option);
            option = new Array(4);
            option[0] = yankee;
            yankee = sequen[backup];
            yankee = status.bind(tangon)(yankee);
            kiloes = yankee.FormSection;
            yankee = {};
            sizing = sequen[source];
            sizing = status.bind(tangon)(sizing);
            sierra = sizing.intl;
            output = sierra.string;
            sizing = sequen[source];
            sizing = status.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.4QuV7O;
            sizing = output.bind(sierra)(sizing);
            yankee['title'] = sizing;
            sizing = sequen[backup];
            sizing = status.bind(tangon)(sizing);
            output = sizing.FormSelect;
            sizing = {};
            sierra = sequen[source];
            sierra = status.bind(tangon)(sierra);
            whisks = sierra.intl;
            limora = whisks.string;
            sierra = sequen[source];
            sierra = status.bind(tangon)(sierra);
            sierra = sierra.t;
            sierra = sierra.gKmKPz;
            sierra = limora.bind(whisks)(sierra);
            sizing['label'] = sierra;
            sizing['options'] = target;
            sizing['value'] = cntext;
            sizing['onChange'] = result;
            output = zuuluu.bind(tangon)(output, sizing);
            sizing = new Array(3);
            sizing[0] = output;
            output = sequen[backup];
            output = status.bind(tangon)(output);
            result = output.FormDivider;
            output = {};
            output = zuuluu.bind(tangon)(result, output);
            sizing[1] = output;
            output = sequen[backup];
            output = status.bind(tangon)(output);
            result = output.FormSelect;
            output = {};
            cntext = sequen[source];
            cntext = status.bind(tangon)(cntext);
            target = cntext.intl;
            cntext = target.string;
            sequen = sequen[source];
            sequen = status.bind(tangon)(sequen);
            sequen = sequen.t;
            sequen = sequen.+3vH1t;
            sequen = cntext.bind(target)(sequen);
            output['label'] = sequen;
            output['options'] = vacuum;
            output['value'] = update;
            output['onChange'] = echoed;
            output = zuuluu.bind(tangon)(result, output);
            sizing[2] = output;
            yankee['children'] = sizing;
            yankee = golfie.bind(tangon)(kiloes, yankee);
            option[1] = yankee;
            yankee = null;
            if(romeon) { _fun00002_ip = 1029; continue _fun00001 }
 803:
            sizing = _closure1_slot7;
            kiloes = _closure1_slot8;
            romeon = {};
            update = _closure1_slot6;
            cntext = _closure1_slot0;
            vacuum = _closure1_slot2;
            output = vacuum[backup];
            output = cntext.bind(tangon)(output);
            result = output.FormSection;
            output = {};
            echoed = vacuum[backup];
            echoed = cntext.bind(tangon)(echoed);
            sequen = echoed.FormSwitchRow;
            echoed = {};
            target = vacuum[source];
            target = cntext.bind(tangon)(target);
            sierra = target.intl;
            status = sierra.string;
            target = vacuum[source];
            target = cntext.bind(tangon)(target);
            target = target.t;
            target = target.dy1icn;
            target = status.bind(sierra)(target);
            echoed['label'] = target;
            echoed['value'] = papara;
            echoed['onValueChange'] = config;
            echoed = update.bind(tangon)(sequen, echoed);
            output['children'] = echoed;
            result = update.bind(tangon)(result, output);
            output = new Array(2);
            output[0] = result;
            result = vacuum[backup];
            result = cntext.bind(tangon)(result);
            echoed = result.FormHint;
            result = {};
            sequen = vacuum[source];
            sequen = cntext.bind(tangon)(sequen);
            config = sequen.intl;
            sequen = config.string;
            vacuum = vacuum[source];
            vacuum = cntext.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.A53l8/;
            vacuum = sequen.bind(config)(vacuum);
            result['children'] = vacuum;
            result = update.bind(tangon)(echoed, result);
            output[1] = result;
            romeon['children'] = output;
            yankee = sizing.bind(tangon)(kiloes, romeon);
 1029:
            option[2] = yankee;
            verify = null;
            if(!offset) { _fun00002_ip = 1322; continue _fun00001 }
 1041:
            romeon = _closure1_slot7;
            yankee = _closure1_slot8;
            offset = {};
            sizing = _closure1_slot6;
            update = _closure1_slot0;
            output = _closure1_slot2;
            foxtra = output[backup];
            foxtra = update.bind(tangon)(foxtra);
            kiloes = foxtra.FormSection;
            foxtra = {};
            result = output[backup];
            result = update.bind(tangon)(result);
            echoed = result.FormSwitchRow;
            result = {};
            vacuum = output[source];
            vacuum = update.bind(tangon)(vacuum);
            config = vacuum.intl;
            sequen = config.string;
            vacuum = output[source];
            vacuum = update.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.1i1bUl;
            vacuum = sequen.bind(config)(vacuum);
            result['label'] = vacuum;
            vacuum = 12;
            vacuum = output[vacuum];
            config = update.bind(tangon)(vacuum);
            sequen = config.hasFlag;
            vacuum = 13;
            vacuum = output[vacuum];
            vacuum = update.bind(tangon)(vacuum);
            vacuum = vacuum.GuildInviteFlags;
            vacuum = vacuum.IS_APPLICATION_BYPASS;
            vacuum = sequen.bind(config)(record, vacuum);
            result['value'] = vacuum;
            ctrled = function(argFoo) { // Original name: onValueChange
                zuuluu = _closure2_slot1;
                tangon = _closure1_slot0;
                option = _closure1_slot2;
                michal = 12;
                report = option[michal];
                michal = undefined;
                golfie = tangon.bind(michal)(report);
                oscard = golfie.setFlag;
                report = _closure2_slot0;
                entity = 13;
                entity = option[entity];
                entity = tangon.bind(michal)(entity);
                entity = entity.GuildInviteFlags;
                tangon = entity.IS_APPLICATION_BYPASS;
                entity = argFoo;
                entity = oscard.bind(golfie)(report, tangon, entity);
                entity = zuuluu.bind(michal)(entity);
                return entity;
            };
            result['onValueChange'] = ctrled;
            result = sizing.bind(tangon)(echoed, result);
            foxtra['children'] = result;
            kiloes = sizing.bind(tangon)(kiloes, foxtra);
            foxtra = new Array(2);
            foxtra[0] = kiloes;
            backup = output[backup];
            backup = update.bind(tangon)(backup);
            kiloes = backup.FormHint;
            backup = {};
            result = output[source];
            result = update.bind(tangon)(result);
            echoed = result.intl;
            result = echoed.string;
            output = output[source];
            output = update.bind(tangon)(output);
            output = output.t;
            output = output.jvd/LC;
            output = result.bind(echoed)(output);
            backup['children'] = output;
            backup = sizing.bind(tangon)(kiloes, backup);
            foxtra[1] = backup;
            offset['children'] = foxtra;
            verify = romeon.bind(tangon)(yankee, offset);
 1322:
            option[3] = verify;
            report['children'] = option;
            report = golfie.bind(tangon)(oscard, report);
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();