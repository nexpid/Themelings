// app/uikit-native/modals/JoinServer.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    foxtrot = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtrot;
    var _closure1_slot2 = oscar;
    entity = function() { // Original name: OrSeparator
        entity = _closure1_slot12;
        tango = undefined;
        verify = entity.bind(tango)();
        zulu = _closure1_slot10;
        mike = _closure1_slot4;
        entity = {};
        report = verify.separator;
        entity['style'] = report;
        options = _closure1_slot9;
        golf = _closure1_slot4;
        report = {};
        offset = verify.innerSeparator;
        report['style'] = offset;
        golf = options.bind(tango)(golf, report);
        report = new Array(3);
        report[0] = golf;
        offset = _closure1_slot9;
        backup = _closure1_slot0;
        kilo = _closure1_slot2;
        golf = 7;
        golf = kilo[golf];
        golf = backup.bind(tango)(golf);
        options = golf.Text;
        golf = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-muted'};
        yankee = verify.orText;
        golf['style'] = yankee;
        yankee = 8;
        romeo = kilo[yankee];
        romeo = backup.bind(tango)(romeo);
        foxtrot = romeo.intl;
        romeo = foxtrot.string;
        yankee = kilo[yankee];
        yankee = backup.bind(tango)(yankee);
        yankee = yankee.t;
        yankee = yankee.HEuagI;
        yankee = romeo.bind(foxtrot)(yankee);
        golf['children'] = yankee;
        golf = offset.bind(tango)(options, golf);
        report[1] = golf;
        options = _closure1_slot9;
        golf = _closure1_slot4;
        oscar = {};
        verify = verify.innerSeparator;
        oscar['style'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[2] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    golf = 0;
    options = oscar[golf];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    var _closure1_slot3 = tango;
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.View;
    var _closure1_slot4 = options;
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    yankee = 2;
    tango = oscar[yankee];
    tango = foxtrot.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.CREATE_GUILD_SMALL_SCREEN_MAX_HEIGHT;
    var _closure1_slot7 = options;
    tango = tango.CreateGuildModalStates;
    var _closure1_slot8 = tango;
    tango = 4;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot9 = options;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsxs;
    var _closure1_slot10 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot11 = tango;
    tango = 5;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {};
    offset['flexGrow'] = yankee;
    romeo = 6;
    backup = oscar[romeo];
    backup = foxtrot.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    offset['minHeight'] = backup;
    tango['growSpacing'] = offset;
    offset = {};
    offset['flexGrow'] = yankee;
    yankee = oscar[romeo];
    yankee = foxtrot.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['paddingHorizontal'] = yankee;
    yankee = oscar[romeo];
    yankee = foxtrot.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['paddingBottom'] = yankee;
    tango['container'] = offset;
    offset = {};
    yankee = oscar[romeo];
    yankee = foxtrot.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.lg;
    offset['borderRadius'] = yankee;
    tango['textInput'] = offset;
    offset = {'height': 1, 'flexGrow': 2};
    yankee = oscar[romeo];
    yankee = foxtrot.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    offset['backgroundColor'] = yankee;
    tango['innerSeparator'] = offset;
    yankee = 'center';
    offset = {'paddingVertical': 12, 'flexDirection': 'row', 'justifyContent': 'center', 'alignItems': 'center'};
    tango['separator'] = offset;
    offset = {};
    offset['textAlign'] = yankee;
    romeo = oscar[romeo];
    romeo = foxtrot.bind(entity)(romeo);
    romeo = romeo.spacing;
    romeo = romeo.PX_8;
    offset['marginHorizontal'] = romeo;
    tango['orText'] = offset;
    offset = {};
    offset['textAlign'] = yankee;
    tango['header'] = offset;
    yankee = 8;
    offset = {'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    tango['description'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    tango['exampleText'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot12 = tango;
    tango = ['https://discord.gg/hTKzmak', 'hTKzmak', 'https://discord.gg/wumpus-friends'];
    var _closure1_slot13 = tango;
    tango = tango[golf];
    var _closure1_slot14 = tango;
    tango = 15;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'uikit-native/modals/JoinServer.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: JoinServer
        _fun93544: for(var _fun93544_ip = 0; ; ) switch(_fun93544_ip) {
 0:
            entity = argFoo;
            control = entity.error;
            source = entity.inviteString;
            sizing = entity.onInviteChange;
            echo = entity.onDone;
            update = entity.submitting;
            entity = _closure1_slot12;
            tango = undefined;
            kilo = entity.bind(tango)();
            oscar = _closure1_slot1;
            zulu = _closure1_slot2;
            entity = 9;
            entity = zulu[entity];
            entity = oscar.bind(tango)(entity);
            entity = entity.bind(tango)();
            golf = entity.bottom;
            mike = _closure1_slot0;
            entity = 10;
            entity = zulu[entity];
            report = mike.bind(tango)(entity);
            entity = report.useNavigation;
            entity = entity.bind(report)();
            var _closure2_slot0 = entity;
            report = 11;
            report = zulu[report];
            report = oscar.bind(tango)(report);
            report = report.bind(tango)();
            verify = report.height;
            options = _closure1_slot3;
            oscar = options.useCallback;
            report = new Array(1);
            report[0] = entity;
            entity = function() {
                zulu = _closure2_slot0;
                mike = zulu.push;
                entity = _closure1_slot8;
                entity = entity.JOIN_STUDENT_HUB;
                entity = mike.bind(zulu)(entity);
                entity = undefined;
                return entity;
            };
            foxtrot = oscar.bind(options)(entity, report);
            entity = 12;
            entity = zulu[entity];
            report = mike.bind(tango)(entity);
            zulu = report.useStateFromStores;
            entity = _closure1_slot6;
            mike = new Array(1);
            mike[0] = entity;
            entity = function() {
                entity = _closure1_slot6;
                entity = entity.keyboardOpen;
                return entity;
            };
            offset = zulu.bind(report)(mike, entity);
            zulu = _closure1_slot10;
            mike = _closure1_slot5;
            entity = {};
            report = 'handled';
            entity['keyboardShouldPersistTaps'] = report;
            oscar = kilo.container;
            report = new Array(2);
            report[0] = oscar;
            oscar = {};
            romeo = _closure1_slot1;
            backup = _closure1_slot2;
            options = 6;
            options = backup[options];
            options = romeo.bind(tango)(options);
            options = options.spacing;
            options = options.PX_16;
            if(offset) { _fun93544_ip = 273; continue _fun93544 }
 267:
            golf = golf + options;
            _fun93544_ip = 276; continue _fun93544;
 273:
            golf = options;
 276:
            oscar['paddingBottom'] = golf;
            report[1] = oscar;
            entity['contentContainerStyle'] = report;
            golf = _closure1_slot10;
            oscar = _closure1_slot4;
            report = {};
            options = _closure1_slot7;
            options = verify <= options;
            verify = null;
            if(options) { _fun93544_ip = 556; continue _fun93544 }
 316:
            romeo = _closure1_slot10;
            offset = _closure1_slot11;
            options = {};
            vacuum = _closure1_slot9;
            papa = _closure1_slot0;
            target = _closure1_slot2;
            output = 7;
            backup = target[output];
            backup = papa.bind(tango)(backup);
            result = backup.Text;
            backup = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/bold', 'color': 'header-primary'};
            config = kilo.header;
            backup['style'] = config;
            config = 8;
            record = target[config];
            record = papa.bind(tango)(record);
            status = record.intl;
            context = status.string;
            record = target[config];
            record = papa.bind(tango)(record);
            record = record.t;
            record = record.jlfuFR;
            record = context.bind(status)(record);
            backup['children'] = record;
            result = vacuum.bind(tango)(result, backup);
            backup = new Array(2);
            backup[0] = result;
            vacuum = _closure1_slot9;
            output = target[output];
            output = papa.bind(tango)(output);
            result = output.Text;
            output = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            record = kilo.description;
            output['style'] = record;
            record = target[config];
            record = papa.bind(tango)(record);
            context = record.intl;
            record = context.string;
            config = target[config];
            config = papa.bind(tango)(config);
            config = config.t;
            config = config.lVvN3N;
            config = record.bind(context)(config);
            output['children'] = config;
            output = vacuum.bind(tango)(result, output);
            backup[1] = output;
            options['children'] = backup;
            verify = romeo.bind(tango)(offset, options);
 556:
            options = new Array(3);
            options[0] = verify;
            romeo = _closure1_slot9;
            offset = _closure1_slot1;
            result = _closure1_slot2;
            verify = 13;
            verify = result[verify];
            offset = offset.bind(tango)(verify);
            verify = {};
            output = _closure1_slot0;
            backup = 8;
            vacuum = result[backup];
            vacuum = output.bind(tango)(vacuum);
            record = vacuum.intl;
            config = record.string;
            vacuum = result[backup];
            vacuum = output.bind(tango)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.qreV29;
            vacuum = config.bind(record)(vacuum);
            verify['label'] = vacuum;
            verify['error'] = control;
            verify['value'] = source;
            verify['onChangeText'] = sizing;
            sizing = _closure1_slot14;
            verify['placeholder'] = sizing;
            sizing = result[backup];
            sizing = output.bind(tango)(sizing);
            control = sizing.intl;
            source = control.string;
            sizing = result[backup];
            sizing = output.bind(tango)(sizing);
            sizing = sizing.t;
            sizing = sizing.qreV29;
            sizing = source.bind(control)(sizing);
            verify['accessibilityLabel'] = sizing;
            sizing = true;
            verify['autoFocus'] = sizing;
            sizing = 'none';
            verify['autoCapitalize'] = sizing;
            sizing = false;
            verify['autoCorrect'] = sizing;
            sizing = 'join';
            verify['returnKeyType'] = sizing;
            sizing = kilo.textInput;
            verify['textStyle'] = sizing;
            verify['onSubmitEditing'] = echo;
            verify = romeo.bind(tango)(offset, verify);
            options[1] = verify;
            romeo = _closure1_slot9;
            verify = 7;
            verify = result[verify];
            verify = output.bind(tango)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'text-muted'};
            sizing = kilo.exampleText;
            verify['style'] = sizing;
            sizing = result[backup];
            sizing = output.bind(tango)(sizing);
            vacuum = sizing.intl;
            control = vacuum.format;
            sizing = result[backup];
            sizing = output.bind(tango)(sizing);
            sizing = sizing.t;
            source = sizing.vwWaTU;
            sizing = {};
            record = _closure1_slot13;
            config = 0;
            config = record[config];
            sizing['example1'] = config;
            config = 1;
            config = record[config];
            sizing['example2'] = config;
            config = 2;
            config = record[config];
            sizing['example3'] = config;
            sequence = function(argFoo, argBar) { // Original name: exampleHook
                report = _closure1_slot9;
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 7;
                entity = zulu[entity];
                tango = undefined;
                entity = mike.bind(tango)(entity);
                zulu = entity.Text;
                mike = {'variant': 'text-sm/medium', 'color': 'text-normal'};
                entity = argFoo;
                mike['children'] = entity;
                entity = argBar;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            };
            sizing['exampleHook'] = sequence;
            sizing = control.bind(vacuum)(source, sizing);
            verify['children'] = sizing;
            verify = romeo.bind(tango)(offset, verify);
            options[2] = verify;
            report['children'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot10;
            golf = _closure1_slot11;
            oscar = {};
            romeo = _closure1_slot9;
            offset = _closure1_slot4;
            verify = {};
            kilo = kilo.growSpacing;
            verify['style'] = kilo;
            offset = romeo.bind(tango)(offset, verify);
            verify = new Array(4);
            verify[0] = offset;
            sizing = _closure1_slot9;
            offset = 14;
            romeo = result[offset];
            romeo = output.bind(tango)(romeo);
            kilo = romeo.Button;
            romeo = {};
            source = 'lg';
            romeo['size'] = source;
            source = result[backup];
            source = output.bind(tango)(source);
            vacuum = source.intl;
            control = vacuum.string;
            source = result[backup];
            source = output.bind(tango)(source);
            source = source.t;
            source = source.+H/coa;
            source = control.bind(vacuum)(source);
            romeo['text'] = source;
            source = result[backup];
            source = output.bind(tango)(source);
            vacuum = source.intl;
            control = vacuum.string;
            source = result[backup];
            source = output.bind(tango)(source);
            source = source.t;
            source = source.+H/coa;
            source = control.bind(vacuum)(source);
            romeo['accessibilityLabel'] = source;
            romeo['loading'] = update;
            romeo['disabled'] = update;
            romeo['onPress'] = echo;
            romeo = sizing.bind(tango)(kilo, romeo);
            verify[1] = romeo;
            sizing = _closure1_slot9;
            kilo = _closure1_slot15;
            romeo = {};
            romeo = sizing.bind(tango)(kilo, romeo);
            verify[2] = romeo;
            romeo = _closure1_slot9;
            offset = result[offset];
            offset = output.bind(tango)(offset);
            yankee = offset.Button;
            offset = {'size': 'lg', 'variant': 'secondary'};
            kilo = result[backup];
            kilo = output.bind(tango)(kilo);
            echo = kilo.intl;
            sizing = echo.string;
            kilo = result[backup];
            kilo = output.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.MOqX/P;
            kilo = sizing.bind(echo)(kilo);
            offset['text'] = kilo;
            kilo = result[backup];
            kilo = output.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            backup = result[backup];
            backup = output.bind(tango)(backup);
            backup = backup.t;
            backup = backup.MOqX/P;
            backup = kilo.bind(sizing)(backup);
            offset['accessibilityLabel'] = backup;
            offset['onPress'] = foxtrot;
            offset = romeo.bind(tango)(yankee, offset);
            verify[3] = offset;
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();