// app/uikit-native/modals/JoinServer.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    foxtra = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = foxtra;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: OrSeparator
        entity = _closure1_slot12;
        tangon = undefined;
        verify = entity.bind(tangon)();
        zuuluu = _closure1_slot10;
        michal = _closure1_slot4;
        entity = {};
        report = verify.separator;
        entity['style'] = report;
        option = _closure1_slot9;
        golfie = _closure1_slot4;
        report = {};
        offset = verify.innerSeparator;
        report['style'] = offset;
        golfie = option.bind(tangon)(golfie, report);
        report = new Array(3);
        report[0] = golfie;
        offset = _closure1_slot9;
        backup = _closure1_slot0;
        kiloes = _closure1_slot2;
        golfie = 7;
        golfie = kiloes[golfie];
        golfie = backup.bind(tangon)(golfie);
        option = golfie.Text;
        golfie = {'style': null, 'variant': 'text-sm/semibold', 'color': 'text-muted'};
        yankee = verify.orText;
        golfie['style'] = yankee;
        yankee = 8;
        romeon = kiloes[yankee];
        romeon = backup.bind(tangon)(romeon);
        foxtra = romeon.intl;
        romeon = foxtra.string;
        yankee = kiloes[yankee];
        yankee = backup.bind(tangon)(yankee);
        yankee = yankee.t;
        yankee = yankee.HEuagI;
        yankee = romeon.bind(foxtra)(yankee);
        golfie['children'] = yankee;
        golfie = offset.bind(tangon)(option, golfie);
        report[1] = golfie;
        option = _closure1_slot9;
        golfie = _closure1_slot4;
        oscard = {};
        verify = verify.innerSeparator;
        oscard['style'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[2] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot15 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    golfie = 0;
    option = oscard[golfie];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(option);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.View;
    var _closure1_slot4 = option;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    yankee = 2;
    tangon = oscard[yankee];
    tangon = foxtra.bind(entity)(tangon);
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.CREATE_GUILD_SMALL_SCREEN_MAX_HEIGHT;
    var _closure1_slot7 = option;
    tangon = tangon.CreateGuildModalStates;
    var _closure1_slot8 = tangon;
    tangon = 4;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsx;
    var _closure1_slot9 = option;
    option = oscard[tangon];
    option = report.bind(entity)(option);
    option = option.jsxs;
    var _closure1_slot10 = option;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.Fragment;
    var _closure1_slot11 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {};
    offset['flexGrow'] = yankee;
    romeon = 6;
    backup = oscard[romeon];
    backup = foxtra.bind(entity)(backup);
    backup = backup.spacing;
    backup = backup.PX_24;
    offset['minHeight'] = backup;
    tangon['growSpacing'] = offset;
    offset = {};
    offset['flexGrow'] = yankee;
    yankee = oscard[romeon];
    yankee = foxtra.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['paddingHorizontal'] = yankee;
    yankee = oscard[romeon];
    yankee = foxtra.bind(entity)(yankee);
    yankee = yankee.spacing;
    yankee = yankee.PX_16;
    offset['paddingBottom'] = yankee;
    tangon['container'] = offset;
    offset = {};
    yankee = oscard[romeon];
    yankee = foxtra.bind(entity)(yankee);
    yankee = yankee.radii;
    yankee = yankee.lg;
    offset['borderRadius'] = yankee;
    tangon['textInput'] = offset;
    offset = {'height': 1, 'flexGrow': 2};
    yankee = oscard[romeon];
    yankee = foxtra.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.BORDER_SUBTLE;
    offset['backgroundColor'] = yankee;
    tangon['innerSeparator'] = offset;
    yankee = 'center';
    offset = {'paddingVertical': 12, 'flexDirection': 'row', 'justifyContent': 'center', 'alignItems': 'center'};
    tangon['separator'] = offset;
    offset = {};
    offset['textAlign'] = yankee;
    romeon = oscard[romeon];
    romeon = foxtra.bind(entity)(romeon);
    romeon = romeon.spacing;
    romeon = romeon.PX_8;
    offset['marginHorizontal'] = romeon;
    tangon['orText'] = offset;
    offset = {};
    offset['textAlign'] = yankee;
    tangon['header'] = offset;
    yankee = 8;
    offset = {'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    tangon['description'] = offset;
    offset = {};
    offset['marginTop'] = yankee;
    tangon['exampleText'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot12 = tangon;
    tangon = ['https://discord.gg/hTKzmak', 'hTKzmak', 'https://discord.gg/wumpus-friends'];
    var _closure1_slot13 = tangon;
    tangon = tangon[golfie];
    var _closure1_slot14 = tangon;
    tangon = 15;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/modals/JoinServer.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: JoinServer
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            ctrled = entity.error;
            source = entity.inviteString;
            sizing = entity.onInviteChange;
            echoed = entity.onDone;
            update = entity.submitting;
            entity = _closure1_slot12;
            tangon = undefined;
            kiloes = entity.bind(tangon)();
            oscard = _closure1_slot1;
            zuuluu = _closure1_slot2;
            entity = 9;
            entity = zuuluu[entity];
            entity = oscard.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            golfie = entity.bottom;
            michal = _closure1_slot0;
            entity = 10;
            entity = zuuluu[entity];
            report = michal.bind(tangon)(entity);
            entity = report.useNavigation;
            entity = entity.bind(report)();
            var _closure2_slot0 = entity;
            report = 11;
            report = zuuluu[report];
            report = oscard.bind(tangon)(report);
            report = report.bind(tangon)();
            verify = report.height;
            option = _closure1_slot3;
            oscard = option.useCallback;
            report = new Array(1);
            report[0] = entity;
            entity = function() {
                zuuluu = _closure2_slot0;
                michal = zuuluu.push;
                entity = _closure1_slot8;
                entity = entity.JOIN_STUDENT_HUB;
                entity = michal.bind(zuuluu)(entity);
                entity = undefined;
                return entity;
            };
            foxtra = oscard.bind(option)(entity, report);
            entity = 12;
            entity = zuuluu[entity];
            report = michal.bind(tangon)(entity);
            zuuluu = report.useStateFromStores;
            entity = _closure1_slot6;
            michal = new Array(1);
            michal[0] = entity;
            entity = function() {
                entity = _closure1_slot6;
                entity = entity.keyboardOpen;
                return entity;
            };
            offset = zuuluu.bind(report)(michal, entity);
            zuuluu = _closure1_slot10;
            michal = _closure1_slot5;
            entity = {};
            report = 'handled';
            entity['keyboardShouldPersistTaps'] = report;
            oscard = kiloes.container;
            report = new Array(2);
            report[0] = oscard;
            oscard = {};
            romeon = _closure1_slot1;
            backup = _closure1_slot2;
            option = 6;
            option = backup[option];
            option = romeon.bind(tangon)(option);
            option = option.spacing;
            option = option.PX_16;
            if(offset) { _fun00002_ip = 272; continue _fun00001 }
 266:
            golfie = golfie + option;
            _fun00002_ip = 275; continue _fun00001;
 272:
            golfie = option;
 275:
            oscard['paddingBottom'] = golfie;
            report[1] = oscard;
            entity['contentContainerStyle'] = report;
            golfie = _closure1_slot10;
            oscard = _closure1_slot4;
            report = {};
            option = _closure1_slot7;
            option = verify <= option;
            verify = null;
            if(option) { _fun00002_ip = 553; continue _fun00001 }
 315:
            romeon = _closure1_slot10;
            offset = _closure1_slot11;
            option = {};
            vacuum = _closure1_slot9;
            papara = _closure1_slot0;
            target = _closure1_slot2;
            output = 7;
            backup = target[output];
            backup = papara.bind(tangon)(backup);
            result = backup.Text;
            backup = {'style': null, 'accessibilityRole': 'header', 'variant': 'heading-xl/bold', 'color': 'header-primary'};
            config = kiloes.header;
            backup['style'] = config;
            config = 8;
            record = target[config];
            record = papara.bind(tangon)(record);
            status = record.intl;
            cntext = status.string;
            record = target[config];
            record = papara.bind(tangon)(record);
            record = record.t;
            record = record.jlfuFR;
            record = cntext.bind(status)(record);
            backup['children'] = record;
            result = vacuum.bind(tangon)(result, backup);
            backup = new Array(2);
            backup[0] = result;
            vacuum = _closure1_slot9;
            output = target[output];
            output = papara.bind(tangon)(output);
            result = output.Text;
            output = {'style': null, 'variant': 'text-sm/medium', 'color': 'header-secondary'};
            record = kiloes.description;
            output['style'] = record;
            record = target[config];
            record = papara.bind(tangon)(record);
            cntext = record.intl;
            record = cntext.string;
            config = target[config];
            config = papara.bind(tangon)(config);
            config = config.t;
            config = config.lVvN3N;
            config = record.bind(cntext)(config);
            output['children'] = config;
            output = vacuum.bind(tangon)(result, output);
            backup[1] = output;
            option['children'] = backup;
            verify = romeon.bind(tangon)(offset, option);
 553:
            option = new Array(3);
            option[0] = verify;
            romeon = _closure1_slot9;
            offset = _closure1_slot1;
            result = _closure1_slot2;
            verify = 13;
            verify = result[verify];
            offset = offset.bind(tangon)(verify);
            verify = {};
            output = _closure1_slot0;
            backup = 8;
            vacuum = result[backup];
            vacuum = output.bind(tangon)(vacuum);
            record = vacuum.intl;
            config = record.string;
            vacuum = result[backup];
            vacuum = output.bind(tangon)(vacuum);
            vacuum = vacuum.t;
            vacuum = vacuum.qreV29;
            vacuum = config.bind(record)(vacuum);
            verify['label'] = vacuum;
            verify['error'] = ctrled;
            verify['value'] = source;
            verify['onChangeText'] = sizing;
            sizing = _closure1_slot14;
            verify['placeholder'] = sizing;
            sizing = result[backup];
            sizing = output.bind(tangon)(sizing);
            ctrled = sizing.intl;
            source = ctrled.string;
            sizing = result[backup];
            sizing = output.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.qreV29;
            sizing = source.bind(ctrled)(sizing);
            verify['accessibilityLabel'] = sizing;
            sizing = true;
            verify['autoFocus'] = sizing;
            sizing = 'none';
            verify['autoCapitalize'] = sizing;
            sizing = false;
            verify['autoCorrect'] = sizing;
            sizing = 'join';
            verify['returnKeyType'] = sizing;
            sizing = kiloes.textInput;
            verify['textStyle'] = sizing;
            verify['onSubmitEditing'] = echoed;
            verify = romeon.bind(tangon)(offset, verify);
            option[1] = verify;
            romeon = _closure1_slot9;
            verify = 7;
            verify = result[verify];
            verify = output.bind(tangon)(verify);
            offset = verify.Text;
            verify = {'style': null, 'variant': 'text-sm/medium', 'color': 'text-muted'};
            sizing = kiloes.exampleText;
            verify['style'] = sizing;
            sizing = result[backup];
            sizing = output.bind(tangon)(sizing);
            vacuum = sizing.intl;
            ctrled = vacuum.format;
            sizing = result[backup];
            sizing = output.bind(tangon)(sizing);
            sizing = sizing.t;
            source = sizing.vwWaTU;
            sizing = {};
            record = _closure1_slot13;
            config = 0;
            config = record[config];
            sizing['example1'] = config;
            config = 1;
            config = record[config];
            sizing['example2'] = config;
            config = 2;
            config = record[config];
            sizing['example3'] = config;
            sequen = function(argFoo, argBar) { // Original name: exampleHook
                report = _closure1_slot9;
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 7;
                entity = zuuluu[entity];
                tangon = undefined;
                entity = michal.bind(tangon)(entity);
                zuuluu = entity.Text;
                michal = {'variant': 'text-sm/medium', 'color': 'text-normal'};
                entity = argFoo;
                michal['children'] = entity;
                entity = argBar;
                entity = report.bind(tangon)(zuuluu, michal, entity);
                return entity;
            };
            sizing['exampleHook'] = sequen;
            sizing = ctrled.bind(vacuum)(source, sizing);
            verify['children'] = sizing;
            verify = romeon.bind(tangon)(offset, verify);
            option[2] = verify;
            report['children'] = option;
            oscard = golfie.bind(tangon)(oscard, report);
            report = new Array(2);
            report[0] = oscard;
            option = _closure1_slot10;
            golfie = _closure1_slot11;
            oscard = {};
            romeon = _closure1_slot9;
            offset = _closure1_slot4;
            verify = {};
            kiloes = kiloes.growSpacing;
            verify['style'] = kiloes;
            offset = romeon.bind(tangon)(offset, verify);
            verify = new Array(4);
            verify[0] = offset;
            sizing = _closure1_slot9;
            offset = 14;
            romeon = result[offset];
            romeon = output.bind(tangon)(romeon);
            kiloes = romeon.Button;
            romeon = {};
            source = 'lg';
            romeon['size'] = source;
            source = result[backup];
            source = output.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = result[backup];
            source = output.bind(tangon)(source);
            source = source.t;
            source = source.+H/coa;
            source = ctrled.bind(vacuum)(source);
            romeon['text'] = source;
            source = result[backup];
            source = output.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = result[backup];
            source = output.bind(tangon)(source);
            source = source.t;
            source = source.+H/coa;
            source = ctrled.bind(vacuum)(source);
            romeon['accessibilityLabel'] = source;
            romeon['loading'] = update;
            romeon['disabled'] = update;
            romeon['onPress'] = echoed;
            romeon = sizing.bind(tangon)(kiloes, romeon);
            verify[1] = romeon;
            sizing = _closure1_slot9;
            kiloes = _closure1_slot15;
            romeon = {};
            romeon = sizing.bind(tangon)(kiloes, romeon);
            verify[2] = romeon;
            romeon = _closure1_slot9;
            offset = result[offset];
            offset = output.bind(tangon)(offset);
            yankee = offset.Button;
            offset = {'size': 'lg', 'variant': 'secondary'};
            kiloes = result[backup];
            kiloes = output.bind(tangon)(kiloes);
            echoed = kiloes.intl;
            sizing = echoed.string;
            kiloes = result[backup];
            kiloes = output.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.MOqX/P;
            kiloes = sizing.bind(echoed)(kiloes);
            offset['text'] = kiloes;
            kiloes = result[backup];
            kiloes = output.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            backup = result[backup];
            backup = output.bind(tangon)(backup);
            backup = backup.t;
            backup = backup.MOqX/P;
            backup = kiloes.bind(sizing)(backup);
            offset['accessibilityLabel'] = backup;
            offset['onPress'] = foxtra;
            offset = romeon.bind(tangon)(yankee, offset);
            verify[3] = offset;
            oscard['children'] = verify;
            oscard = option.bind(tangon)(golfie, oscard);
            report[1] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();