// app/uikit-native/modals/AcceptGuildTemplate.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = function() { // Original name: GuildTemplateResolving
        entity = _closure1_slot13;
        tangon = undefined;
        report = entity.bind(tangon)();
        zuuluu = _closure1_slot10;
        michal = _closure1_slot3;
        entity = {};
        report = report.resolvingContainer;
        entity['style'] = report;
        golfie = _closure1_slot10;
        oscard = _closure1_slot4;
        report = {};
        verify = _closure1_slot1;
        offset = _closure1_slot2;
        option = 7;
        option = offset[option];
        option = verify.bind(tangon)(option);
        option = option.unsafe_rawColors;
        option = option.BRAND_500;
        report['color'] = option;
        option = 'large';
        report['size'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function(argFoo) { // Original name: GuildTemplateResolved
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.guildTemplate;
            echoed = entity.createServer;
            sizing = entity.name;
            kiloes = entity.setName;
            ctrled = entity.icon;
            sequen = entity.chooseIcon;
            result = entity.errors;
            entity = _closure1_slot13;
            tangon = undefined;
            output = entity.bind(tangon)();
            option = _closure1_slot1;
            foxtra = _closure1_slot2;
            entity = 9;
            michal = foxtra[entity];
            report = option.bind(tangon)(michal);
            oscard = null;
            zuuluu = oscard != offset;
            michal = 'guild template cannot be null';
            michal = report.bind(tangon)(zuuluu, michal);
            entity = foxtra[entity];
            zuuluu = option.bind(tangon)(entity);
            michal = offset.state;
            entity = _closure1_slot9;
            entity = entity.RESOLVING;
            michal = michal !== entity;
            entity = 'guild must be resolved';
            entity = zuuluu.bind(tangon)(michal, entity);
            entity = 10;
            entity = foxtra[entity];
            entity = option.bind(tangon)(entity);
            entity = entity.bind(tangon)();
            verify = entity.bottom;
            entity = offset.serializedSourceGuild;
            zuuluu = entity.roles;
            michal = zuuluu.filter;
            entity = function(argFoo) {
                entity = argFoo;
                michal = entity.name;
                entity = '@everyone';
                entity = entity !== michal;
                return entity;
            };
            backup = michal.bind(zuuluu)(entity);
            zuuluu = _closure1_slot11;
            michal = _closure1_slot5;
            entity = {};
            golfie = output.wrapper;
            report = new Array(2);
            report[0] = golfie;
            golfie = {};
            golfie['marginBottom'] = verify;
            report[1] = golfie;
            entity['contentContainerStyle'] = report;
            report = 'handled';
            entity['keyboardShouldPersistTaps'] = report;
            verify = _closure1_slot10;
            vacuum = _closure1_slot0;
            romeon = 11;
            report = foxtra[romeon];
            report = vacuum.bind(tangon)(report);
            golfie = report.Text;
            report = {'style': null, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            update = output.header;
            report['style'] = update;
            update = 12;
            source = foxtra[update];
            source = vacuum.bind(tangon)(source);
            record = source.intl;
            config = record.string;
            source = foxtra[update];
            source = vacuum.bind(tangon)(source);
            source = source.t;
            source = source.QzUORU;
            source = config.bind(record)(source);
            report['children'] = source;
            golfie = verify.bind(tangon)(golfie, report);
            report = new Array(11);
            report[0] = golfie;
            source = _closure1_slot10;
            golfie = foxtra[romeon];
            golfie = vacuum.bind(tangon)(golfie);
            verify = golfie.Text;
            golfie = {'style': null, 'variant': 'text-lg/medium', 'color': 'header-secondary'};
            config = output.description;
            golfie['style'] = config;
            config = offset.name;
            golfie['children'] = config;
            golfie = source.bind(tangon)(verify, golfie);
            report[1] = golfie;
            source = _closure1_slot10;
            golfie = 13;
            golfie = foxtra[golfie];
            verify = option.bind(tangon)(golfie);
            golfie = {};
            config = output.wrapper;
            config = config.backgroundColor;
            golfie['iconBackgroundColor'] = config;
            config = output.iconUploader;
            golfie['style'] = config;
            golfie['onPress'] = sequen;
            golfie['icon'] = ctrled;
            golfie = source.bind(tangon)(verify, golfie);
            report[2] = golfie;
            verify = _closure1_slot10;
            golfie = 14;
            golfie = foxtra[golfie];
            option = option.bind(tangon)(golfie);
            golfie = {};
            source = foxtra[update];
            source = vacuum.bind(tangon)(source);
            ctrled = source.intl;
            source = ctrled.string;
            foxtra = foxtra[update];
            foxtra = vacuum.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.dBih7e;
            foxtra = source.bind(ctrled)(foxtra);
            golfie['label'] = foxtra;
            source = oscard == result;
            foxtra = undefined;
            if(source) { _fun00002_ip = 549; continue _fun00001 }
 544:
            foxtra = result.name;
 549:
            golfie['error'] = foxtra;
            result = _closure1_slot0;
            foxtra = _closure1_slot2;
            source = foxtra[update];
            source = result.bind(tangon)(source);
            sequen = source.intl;
            vacuum = sequen.format;
            source = foxtra[update];
            source = result.bind(tangon)(source);
            source = source.t;
            ctrled = source.2bprX1;
            source = {};
            config = _closure1_slot7;
            config = config.GUIDELINES;
            source['guidelinesURL'] = config;
            source = vacuum.bind(sequen)(ctrled, source);
            golfie['hint'] = source;
            golfie['value'] = sizing;
            golfie['onChangeText'] = kiloes;
            kiloes = true;
            golfie['autoFocus'] = kiloes;
            sizing = false;
            golfie['autoCorrect'] = sizing;
            sizing = 'done';
            golfie['returnKeyType'] = sizing;
            golfie = verify.bind(tangon)(option, golfie);
            report[3] = golfie;
            sizing = _closure1_slot10;
            option = _closure1_slot1;
            source = 15;
            golfie = foxtra[source];
            verify = option.bind(tangon)(golfie);
            golfie = {};
            golfie['shrink'] = kiloes;
            source = foxtra[source];
            source = option.bind(tangon)(source);
            source = source.Sizes;
            source = source.MEDIUM;
            golfie['size'] = source;
            source = output.createButton;
            golfie['style'] = source;
            source = foxtra[update];
            source = result.bind(tangon)(source);
            vacuum = source.intl;
            ctrled = vacuum.string;
            source = foxtra[update];
            source = result.bind(tangon)(source);
            source = source.t;
            source = source.O0p/lZ;
            source = ctrled.bind(vacuum)(source);
            golfie['text'] = source;
            golfie['onPress'] = echoed;
            source = offset.state;
            echoed = _closure1_slot9;
            echoed = echoed.ACCEPTING;
            echoed = source === echoed;
            golfie['loading'] = echoed;
            golfie = sizing.bind(tangon)(verify, golfie);
            report[4] = golfie;
            verify = _closure1_slot10;
            golfie = 16;
            golfie = foxtra[golfie];
            option = option.bind(tangon)(golfie);
            golfie = {};
            sizing = output.divider;
            golfie['style'] = sizing;
            golfie['outer'] = kiloes;
            golfie = verify.bind(tangon)(option, golfie);
            report[5] = golfie;
            verify = _closure1_slot10;
            golfie = foxtra[romeon];
            golfie = result.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'style': null, 'variant': 'heading-md/extrabold', 'color': 'header-primary'};
            kiloes = output.sectionHeader;
            golfie['style'] = kiloes;
            kiloes = foxtra[update];
            kiloes = result.bind(tangon)(kiloes);
            echoed = kiloes.intl;
            sizing = echoed.string;
            kiloes = foxtra[update];
            kiloes = result.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.OGiMXF;
            kiloes = sizing.bind(echoed)(kiloes);
            golfie['children'] = kiloes;
            golfie = verify.bind(tangon)(option, golfie);
            report[6] = golfie;
            verify = _closure1_slot10;
            golfie = foxtra[romeon];
            golfie = result.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            kiloes = foxtra[update];
            kiloes = result.bind(tangon)(kiloes);
            echoed = kiloes.intl;
            sizing = echoed.string;
            kiloes = foxtra[update];
            kiloes = result.bind(tangon)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.Ztwyo6;
            kiloes = sizing.bind(echoed)(kiloes);
            golfie['children'] = kiloes;
            golfie = verify.bind(tangon)(option, golfie);
            report[7] = golfie;
            verify = _closure1_slot10;
            option = _closure1_slot16;
            golfie = {};
            offset = offset.serializedSourceGuild;
            offset = offset.channels;
            golfie['channels'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            report[8] = golfie;
            verify = _closure1_slot11;
            golfie = foxtra[romeon];
            golfie = result.bind(tangon)(golfie);
            option = golfie.Text;
            golfie = {'style': null, 'variant': 'text-xs/medium', 'color': 'interactive-normal'};
            offset = output.sectionTip;
            golfie['style'] = offset;
            sizing = _closure1_slot11;
            offset = 17;
            offset = foxtra[offset];
            offset = result.bind(tangon)(offset);
            kiloes = offset.LegacyText;
            offset = {};
            echoed = output.protip;
            offset['style'] = echoed;
            echoed = foxtra[update];
            echoed = result.bind(tangon)(echoed);
            ctrled = echoed.intl;
            source = ctrled.string;
            echoed = foxtra[update];
            echoed = result.bind(tangon)(echoed);
            echoed = echoed.t;
            echoed = echoed.8tvIiI;
            source = source.bind(ctrled)(echoed);
            echoed = new Array(2);
            echoed[0] = source;
            source = ': ';
            echoed[1] = source;
            offset['children'] = echoed;
            kiloes = sizing.bind(tangon)(kiloes, offset);
            offset = new Array(2);
            offset[0] = kiloes;
            kiloes = foxtra[update];
            kiloes = result.bind(tangon)(kiloes);
            sizing = kiloes.intl;
            kiloes = sizing.string;
            foxtra = foxtra[update];
            foxtra = result.bind(tangon)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.de7DpK;
            foxtra = kiloes.bind(sizing)(foxtra);
            offset[1] = foxtra;
            golfie['children'] = offset;
            golfie = verify.bind(tangon)(option, golfie);
            report[9] = golfie;
            option = backup.length;
            golfie = 0;
            golfie = option > golfie;
            oscard = null;
            if(!golfie) { _fun00002_ip = 1588; continue _fun00001 }
 1335:
            verify = _closure1_slot11;
            option = _closure1_slot12;
            golfie = {};
            kiloes = _closure1_slot10;
            echoed = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = sizing[romeon];
            offset = echoed.bind(tangon)(offset);
            foxtra = offset.Text;
            offset = {'style': null, 'variant': 'heading-md/extrabold', 'color': 'header-primary'};
            output = output.sectionHeader;
            offset['style'] = output;
            output = sizing[update];
            output = echoed.bind(tangon)(output);
            source = output.intl;
            result = source.string;
            output = sizing[update];
            output = echoed.bind(tangon)(output);
            output = output.t;
            output = output.mQ0H1t;
            output = result.bind(source)(output);
            offset['children'] = output;
            foxtra = kiloes.bind(tangon)(foxtra, offset);
            offset = new Array(3);
            offset[0] = foxtra;
            kiloes = _closure1_slot10;
            romeon = sizing[romeon];
            romeon = echoed.bind(tangon)(romeon);
            foxtra = romeon.Text;
            romeon = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            output = sizing[update];
            output = echoed.bind(tangon)(output);
            result = output.intl;
            output = result.string;
            sizing = sizing[update];
            sizing = echoed.bind(tangon)(sizing);
            sizing = sizing.t;
            sizing = sizing.jOPEYG;
            sizing = output.bind(result)(sizing);
            romeon['children'] = sizing;
            romeon = kiloes.bind(tangon)(foxtra, romeon);
            offset[1] = romeon;
            foxtra = _closure1_slot10;
            romeon = _closure1_slot18;
            yankee = {};
            yankee['roles'] = backup;
            yankee = foxtra.bind(tangon)(romeon, yankee);
            offset[2] = yankee;
            golfie['children'] = offset;
            oscard = verify.bind(tangon)(option, golfie);
 1588:
            report[10] = oscard;
            entity['children'] = report;
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    var _closure1_slot15 = entity;
    entity = function(argFoo) { // Original name: Channels
        entity = argFoo;
        report = entity.channels;
        zuuluu = _closure1_slot13;
        tangon = undefined;
        golfie = zuuluu.bind(tangon)();
        var _closure2_slot0 = golfie;
        oscard = _closure1_slot1;
        option = _closure1_slot2;
        zuuluu = 18;
        zuuluu = option[zuuluu];
        zuuluu = oscard.bind(tangon)(zuuluu);
        oscard = zuuluu.bind(tangon)(report);
        report = oscard.sortBy;
        zuuluu = function(argFoo) {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                michal = argFoo;
                zuuluu = michal.parent_id;
                entity = null;
                if(!(entity != zuuluu)) { _fun00004_ip = 57; continue _fun00003 }
 15:
                entity = global;
                tangon = entity.Number;
                zuuluu = michal.parent_id;
                entity = undefined;
                zuuluu = tangon.bind(entity)(zuuluu);
                entity = 10000;
                zuuluu = entity * zuuluu;
                entity = michal.id;
                entity = zuuluu + entity;
                _fun00004_ip = 87; continue _fun00003;
 57:
                zuuluu = global;
                tangon = zuuluu.Number;
                zuuluu = michal.id;
                michal = undefined;
                zuuluu = tangon.bind(michal)(zuuluu);
                michal = 10000;
                entity = michal * zuuluu;
 87:
                return entity;
            }
        };
        report = report.bind(oscard)(zuuluu);
        zuuluu = report.map;
        michal = function(argFoo) {
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                entity = argFoo;
                zuuluu = entity.type;
                michal = _closure1_slot8;
                michal = michal.GUILD_CATEGORY;
                foxtra = zuuluu === michal;
                report = _closure1_slot11;
                tangon = _closure1_slot3;
                zuuluu = {};
                offset = _closure2_slot0;
                michal = offset.channelRow;
                zuuluu['style'] = michal;
                verify = _closure1_slot10;
                option = _closure1_slot1;
                michal = _closure1_slot2;
                backup = 19;
                oscard = michal[backup];
                michal = undefined;
                option = option.bind(michal)(oscard);
                oscard = {};
                yankee = offset.channelIcon;
                offset = new Array(2);
                offset[0] = yankee;
                kiloes = null;
                if(!foxtra) { _fun00006_ip = 109; continue _fun00005 }
 99:
                sizing = _closure2_slot0;
                kiloes = sizing.channelCategoryIcon;
 109:
                offset[1] = kiloes;
                oscard['style'] = offset;
                kiloes = _closure1_slot1;
                offset = _closure1_slot2;
                sizing = 7;
                sizing = offset[sizing];
                sizing = kiloes.bind(michal)(sizing);
                sizing = sizing.unsafe_rawColors;
                sizing = sizing.PRIMARY_400;
                oscard['color'] = sizing;
                backup = offset[backup];
                backup = kiloes.bind(michal)(backup);
                backup = backup.Sizes;
                backup = backup.CUSTOM;
                oscard['size'] = backup;
                backup = _closure1_slot17;
                backup = backup.bind(michal)(entity);
                oscard['source'] = backup;
                option = verify.bind(michal)(option, oscard);
                oscard = new Array(2);
                oscard[0] = option;
                verify = _closure1_slot10;
                option = _closure1_slot0;
                golfie = 17;
                golfie = offset[golfie];
                golfie = option.bind(michal)(golfie);
                option = golfie.LegacyText;
                golfie = {};
                offset = 1;
                golfie['numberOfLines'] = offset;
                offset = _closure2_slot0;
                backup = offset.channelName;
                offset = new Array(2);
                offset[0] = backup;
                yankee = null;
                if(!foxtra) { _fun00006_ip = 273; continue _fun00005 }
 263:
                romeon = _closure2_slot0;
                yankee = romeon.channelCategoryName;
 273:
                offset[1] = yankee;
                golfie['style'] = offset;
                offset = entity.name;
                golfie['children'] = offset;
                golfie = verify.bind(michal)(option, golfie);
                oscard[1] = golfie;
                zuuluu['children'] = oscard;
                entity = entity.id;
                entity = report.bind(michal)(tangon, zuuluu, entity);
                return entity;
            }
        };
        zuuluu = zuuluu.bind(report)(michal);
        michal = zuuluu.value;
        report = michal.bind(zuuluu)();
        zuuluu = _closure1_slot10;
        michal = _closure1_slot3;
        entity = {};
        option = golfie.rolesChannelsWrapper;
        oscard = new Array(2);
        oscard[0] = option;
        golfie = golfie.channelsWrapper;
        oscard[1] = golfie;
        entity['style'] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot16 = entity;
    entity = function(argFoo) { // Original name: getChannelIcon
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            zuuluu = entity.type;
            entity = _closure1_slot6;
            tangon = undefined;
            entity = entity.bind(tangon)(zuuluu);
            if(entity) { _fun00008_ip = 83; continue _fun00007 }
 25:
            entity = _closure1_slot8;
            entity = entity.GUILD_CATEGORY;
            if(!(zuuluu !== entity)) { _fun00008_ip = 61; continue _fun00007 }
 39:
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            entity = 22;
            entity = report[entity];
            entity = zuuluu.bind(tangon)(entity);
            _fun00008_ip = 81; continue _fun00007;
 61:
            report = _closure1_slot1;
            oscard = _closure1_slot2;
            zuuluu = 21;
            zuuluu = oscard[zuuluu];
            entity = report.bind(tangon)(zuuluu);
 81:
            _fun00008_ip = 103; continue _fun00007;
 83:
            zuuluu = _closure1_slot1;
            report = _closure1_slot2;
            michal = 20;
            michal = report[michal];
            entity = zuuluu.bind(tangon)(michal);
 103:
            return entity;
        }
    };
    var _closure1_slot17 = entity;
    entity = function(argFoo) { // Original name: Roles
        entity = argFoo;
        zuuluu = entity.roles;
        michal = _closure1_slot13;
        tangon = undefined;
        golfie = michal.bind(tangon)();
        michal = zuuluu.slice;
        zuuluu = michal.bind(zuuluu)();
        michal = zuuluu.reverse;
        report = michal.bind(zuuluu)();
        zuuluu = report.map;
        michal = function(argFoo) {
            _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                entity = argFoo;
                report = _closure1_slot10;
                zuuluu = _closure1_slot1;
                tangon = _closure1_slot2;
                michal = 23;
                michal = tangon[michal];
                tangon = undefined;
                zuuluu = zuuluu.bind(tangon)(michal);
                michal = {};
                oscard = true;
                michal['disableInteraction'] = oscard;
                michal['role'] = entity;
                verify = entity.color;
                option = 0;
                oscard = undefined;
                if(!(option !== verify)) { _fun00010_ip = 95; continue _fun00009 }
 59:
                option = _closure1_slot0;
                verify = _closure1_slot2;
                golfie = 24;
                golfie = verify[golfie];
                verify = option.bind(tangon)(golfie);
                option = verify.int2hex;
                golfie = entity.color;
                oscard = option.bind(verify)(golfie);
 95:
                michal['color'] = oscard;
                entity = entity.id;
                entity = report.bind(tangon)(zuuluu, michal, entity);
                return entity;
            }
        };
        report = zuuluu.bind(report)(michal);
        zuuluu = _closure1_slot10;
        michal = _closure1_slot3;
        entity = {};
        option = golfie.rolesChannelsWrapper;
        oscard = new Array(2);
        oscard[0] = option;
        golfie = golfie.rolesWrapper;
        oscard[1] = golfie;
        entity['style'] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot18 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    result = true;
    tangon['value'] = result;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.View;
    var _closure1_slot3 = golfie;
    golfie = tangon.ActivityIndicator;
    var _closure1_slot4 = golfie;
    tangon = tangon.ScrollView;
    var _closure1_slot5 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.isGuildVocalChannelType;
    var _closure1_slot6 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.MarketingURLs;
    var _closure1_slot7 = golfie;
    offset = tangon.Fonts;
    tangon = tangon.ChannelTypes;
    var _closure1_slot8 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.GuildTemplateStates;
    var _closure1_slot9 = tangon;
    tangon = 5;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot10 = golfie;
    golfie = tangon.jsxs;
    var _closure1_slot11 = golfie;
    tangon = tangon.Fragment;
    var _closure1_slot12 = tangon;
    tangon = 6;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {};
    yankee = 7;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.BACKGROUND_MOBILE_PRIMARY;
    verify['backgroundColor'] = foxtra;
    update = 16;
    verify['padding'] = update;
    tangon['wrapper'] = verify;
    verify = {};
    foxtra = 'center';
    verify['textAlign'] = foxtra;
    foxtra = 8;
    backup = oscard[foxtra];
    output = romeon.bind(entity)(backup);
    sizing = offset.DISPLAY_EXTRABOLD;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    kiloes = 24;
    vacuum = output.bind(entity)(sizing, backup, kiloes);
    sequen = verify;
    backup = copyDataProperties(sequen, vacuum);
    tangon['header'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    tangon['description'] = verify;
    output = 12;
    verify = {'alignSelf': 'center', 'marginBottom': 12};
    tangon['iconUploader'] = verify;
    verify = {'width': '100%', 'marginTop': 8};
    tangon['createButton'] = verify;
    verify = {'alignItems': 'center', 'flex': 1, 'justifyContent': 'center'};
    tangon['resolvingContainer'] = verify;
    verify = {'alignSelf': 'stretch', 'padding': 16};
    tangon['buttonWrapper'] = verify;
    verify = {'flexGrow': 0, 'paddingHorizontal': 8};
    tangon['button'] = verify;
    verify = {};
    verify['marginTop'] = foxtra;
    tangon['divider'] = verify;
    verify = {};
    backup = oscard[foxtra];
    echoed = romeon.bind(entity)(backup);
    sizing = offset.DISPLAY_EXTRABOLD;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    vacuum = echoed.bind(entity)(sizing, backup, update);
    sequen = verify;
    backup = copyDataProperties(sequen, vacuum);
    backup = 'marginTop';
    verify[backup] = kiloes;
    tangon['sectionHeader'] = verify;
    verify = {};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = backup;
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderRadius'] = backup;
    verify['marginTop'] = foxtra;
    verify['padding'] = foxtra;
    tangon['rolesChannelsWrapper'] = verify;
    verify = {'flexDirection': 'column', 'paddingVertical': 0};
    tangon['channelsWrapper'] = verify;
    verify = {'flexDirection': 'row', 'flexWrap': 'wrap'};
    tangon['rolesWrapper'] = verify;
    verify = {'alignItems': 'center', 'flexDirection': 'row', 'height': 40};
    tangon['channelRow'] = verify;
    verify = {'marginLeft': 12, 'marginRight': 8, 'height': 20, 'width': 20};
    tangon['channelIcon'] = verify;
    verify = {'marginLeft': 0, 'marginRight': 2, 'height': 12, 'width': 12};
    tangon['channelCategoryIcon'] = verify;
    verify = {'color': null, 'fontSize': 16, 'flex': 1};
    backup = oscard[yankee];
    backup = romeon.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.CHANNELS_DEFAULT;
    verify['color'] = backup;
    tangon['channelName'] = verify;
    verify = {};
    backup = oscard[foxtra];
    sizing = romeon.bind(entity)(backup);
    sequen = offset.DISPLAY_EXTRABOLD;
    backup = {};
    backup['uppercase'] = result;
    config = undefined;
    vacuum = undefined;
    ctrled = output;
    source = backup;
    vacuum = config[sizing](sequen, vacuum, ctrled, source, update);
    sequen = verify;
    backup = copyDataProperties(sequen, vacuum);
    tangon['channelCategoryName'] = verify;
    verify = {};
    verify['marginTop'] = foxtra;
    tangon['sectionTip'] = verify;
    verify = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.unsafe_rawColors;
    yankee = yankee.GREEN_360;
    verify['color'] = yankee;
    offset = offset.PRIMARY_BOLD;
    verify['fontFamily'] = offset;
    offset = 'uppercase';
    verify['textTransform'] = offset;
    tangon['protip'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot13 = tangon;
    tangon = 25;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/modals/AcceptGuildTemplate.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: AcceptGuildTemplate
        _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
            entity = argFoo;
            michal = entity.guildTemplate;
            zuuluu = null;
            if(!(zuuluu != michal)) { _fun00012_ip = 79; continue _fun00011 }
 15:
            tangon = michal.state;
            zuuluu = _closure1_slot9;
            zuuluu = zuuluu.RESOLVED;
            if(!(zuuluu !== tangon)) { _fun00012_ip = 142; continue _fun00011 }
 37:
            zuuluu = _closure1_slot9;
            zuuluu = zuuluu.ACCEPTING;
            if(!(zuuluu !== tangon)) { _fun00012_ip = 142; continue _fun00011 }
 51:
            zuuluu = _closure1_slot9;
            zuuluu = zuuluu.ACCEPTED;
            if(!(zuuluu !== tangon)) { _fun00012_ip = 142; continue _fun00011 }
 65:
            zuuluu = _closure1_slot9;
            zuuluu = zuuluu.RESOLVING;
            if(!(zuuluu !== tangon)) { _fun00012_ip = 112; continue _fun00011 }
 79:
            oscard = _closure1_slot10;
            report = _closure1_slot14;
            tangon = {};
            option = tangon;
            golfie = entity;
            zuuluu = copyDataProperties(option, golfie);
            zuuluu = undefined;
            zuuluu = oscard.bind(zuuluu)(report, tangon);
            return zuuluu;
 112:
            oscard = _closure1_slot10;
            report = _closure1_slot14;
            tangon = {};
            option = tangon;
            golfie = entity;
            zuuluu = copyDataProperties(option, golfie);
            zuuluu = undefined;
            zuuluu = oscard.bind(zuuluu)(report, tangon);
            return zuuluu;
 142:
            tangon = _closure1_slot10;
            zuuluu = _closure1_slot15;
            michal = {};
            option = michal;
            golfie = entity;
            entity = copyDataProperties(option, golfie);
            entity = undefined;
            entity = tangon.bind(entity)(zuuluu, michal);
            return entity;
        }
    };
    zuuluu['default'] = michal;
    return entity;
})();