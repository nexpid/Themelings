// app/uikit-native/modals/AcceptGuildTemplate.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    romeo = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeo;
    var _closure1_slot2 = oscar;
    entity = function() { // Original name: GuildTemplateResolving
        entity = _closure1_slot13;
        tango = undefined;
        report = entity.bind(tango)();
        zulu = _closure1_slot10;
        mike = _closure1_slot3;
        entity = {};
        report = report.resolvingContainer;
        entity['style'] = report;
        golf = _closure1_slot10;
        oscar = _closure1_slot4;
        report = {};
        verify = _closure1_slot1;
        offset = _closure1_slot2;
        options = 7;
        options = offset[options];
        options = verify.bind(tango)(options);
        options = options.unsafe_rawColors;
        options = options.BRAND_500;
        report['color'] = options;
        options = 'large';
        report['size'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = function(argFoo) { // Original name: GuildTemplateResolved
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            entity = argFoo;
            offset = entity.guildTemplate;
            echo = entity.createServer;
            sizing = entity.name;
            kilo = entity.setName;
            control = entity.icon;
            sequence = entity.chooseIcon;
            result = entity.errors;
            entity = _closure1_slot13;
            tango = undefined;
            output = entity.bind(tango)();
            options = _closure1_slot1;
            foxtrot = _closure1_slot2;
            entity = 9;
            mike = foxtrot[entity];
            report = options.bind(tango)(mike);
            oscar = null;
            zulu = oscar != offset;
            mike = 'guild template cannot be null';
            mike = report.bind(tango)(zulu, mike);
            entity = foxtrot[entity];
            zulu = options.bind(tango)(entity);
            mike = offset.state;
            entity = _closure1_slot9;
            entity = entity.RESOLVING;
            mike = mike !== entity;
            entity = 'guild must be resolved';
            entity = zulu.bind(tango)(mike, entity);
            entity = 10;
            entity = foxtrot[entity];
            entity = options.bind(tango)(entity);
            entity = entity.bind(tango)();
            verify = entity.bottom;
            entity = offset.serializedSourceGuild;
            zulu = entity.roles;
            mike = zulu.filter;
            entity = function(argFoo) {
                entity = argFoo;
                mike = entity.name;
                entity = '@everyone';
                entity = entity !== mike;
                return entity;
            };
            backup = mike.bind(zulu)(entity);
            zulu = _closure1_slot11;
            mike = _closure1_slot5;
            entity = {};
            golf = output.wrapper;
            report = new Array(2);
            report[0] = golf;
            golf = {};
            golf['marginBottom'] = verify;
            report[1] = golf;
            entity['contentContainerStyle'] = report;
            report = 'handled';
            entity['keyboardShouldPersistTaps'] = report;
            verify = _closure1_slot10;
            vacuum = _closure1_slot0;
            romeo = 11;
            report = foxtrot[romeo];
            report = vacuum.bind(tango)(report);
            golf = report.Text;
            report = {'style': null, 'variant': 'heading-xl/extrabold', 'color': 'header-primary'};
            update = output.header;
            report['style'] = update;
            update = 12;
            source = foxtrot[update];
            source = vacuum.bind(tango)(source);
            record = source.intl;
            config = record.string;
            source = foxtrot[update];
            source = vacuum.bind(tango)(source);
            source = source.t;
            source = source.QzUORU;
            source = config.bind(record)(source);
            report['children'] = source;
            golf = verify.bind(tango)(golf, report);
            report = new Array(11);
            report[0] = golf;
            source = _closure1_slot10;
            golf = foxtrot[romeo];
            golf = vacuum.bind(tango)(golf);
            verify = golf.Text;
            golf = {'style': null, 'variant': 'text-lg/medium', 'color': 'header-secondary'};
            config = output.description;
            golf['style'] = config;
            config = offset.name;
            golf['children'] = config;
            golf = source.bind(tango)(verify, golf);
            report[1] = golf;
            source = _closure1_slot10;
            golf = 13;
            golf = foxtrot[golf];
            verify = options.bind(tango)(golf);
            golf = {};
            config = output.wrapper;
            config = config.backgroundColor;
            golf['iconBackgroundColor'] = config;
            config = output.iconUploader;
            golf['style'] = config;
            golf['onPress'] = sequence;
            golf['icon'] = control;
            golf = source.bind(tango)(verify, golf);
            report[2] = golf;
            verify = _closure1_slot10;
            golf = 14;
            golf = foxtrot[golf];
            options = options.bind(tango)(golf);
            golf = {};
            source = foxtrot[update];
            source = vacuum.bind(tango)(source);
            control = source.intl;
            source = control.string;
            foxtrot = foxtrot[update];
            foxtrot = vacuum.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.dBih7e;
            foxtrot = source.bind(control)(foxtrot);
            golf['label'] = foxtrot;
            source = oscar == result;
            foxtrot = undefined;
            if(source) { _fun00002_ip = 553; continue _fun00001 }
 548:
            foxtrot = result.name;
 553:
            golf['error'] = foxtrot;
            result = _closure1_slot0;
            foxtrot = _closure1_slot2;
            source = foxtrot[update];
            source = result.bind(tango)(source);
            sequence = source.intl;
            vacuum = sequence.format;
            source = foxtrot[update];
            source = result.bind(tango)(source);
            source = source.t;
            control = source.2bprX1;
            source = {};
            config = _closure1_slot7;
            config = config.GUIDELINES;
            source['guidelinesURL'] = config;
            source = vacuum.bind(sequence)(control, source);
            golf['hint'] = source;
            golf['value'] = sizing;
            golf['onChangeText'] = kilo;
            kilo = true;
            golf['autoFocus'] = kilo;
            sizing = false;
            golf['autoCorrect'] = sizing;
            sizing = 'done';
            golf['returnKeyType'] = sizing;
            golf = verify.bind(tango)(options, golf);
            report[3] = golf;
            sizing = _closure1_slot10;
            options = _closure1_slot1;
            source = 15;
            golf = foxtrot[source];
            verify = options.bind(tango)(golf);
            golf = {};
            golf['shrink'] = kilo;
            source = foxtrot[source];
            source = options.bind(tango)(source);
            source = source.Sizes;
            source = source.MEDIUM;
            golf['size'] = source;
            source = output.createButton;
            golf['style'] = source;
            source = foxtrot[update];
            source = result.bind(tango)(source);
            vacuum = source.intl;
            control = vacuum.string;
            source = foxtrot[update];
            source = result.bind(tango)(source);
            source = source.t;
            source = source.O0p/lZ;
            source = control.bind(vacuum)(source);
            golf['text'] = source;
            golf['onPress'] = echo;
            source = offset.state;
            echo = _closure1_slot9;
            echo = echo.ACCEPTING;
            echo = source === echo;
            golf['loading'] = echo;
            golf = sizing.bind(tango)(verify, golf);
            report[4] = golf;
            verify = _closure1_slot10;
            golf = 16;
            golf = foxtrot[golf];
            options = options.bind(tango)(golf);
            golf = {};
            sizing = output.divider;
            golf['style'] = sizing;
            golf['outer'] = kilo;
            golf = verify.bind(tango)(options, golf);
            report[5] = golf;
            verify = _closure1_slot10;
            golf = foxtrot[romeo];
            golf = result.bind(tango)(golf);
            options = golf.Text;
            golf = {'style': null, 'variant': 'heading-md/extrabold', 'color': 'header-primary'};
            kilo = output.sectionHeader;
            golf['style'] = kilo;
            kilo = foxtrot[update];
            kilo = result.bind(tango)(kilo);
            echo = kilo.intl;
            sizing = echo.string;
            kilo = foxtrot[update];
            kilo = result.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.OGiMXF;
            kilo = sizing.bind(echo)(kilo);
            golf['children'] = kilo;
            golf = verify.bind(tango)(options, golf);
            report[6] = golf;
            verify = _closure1_slot10;
            golf = foxtrot[romeo];
            golf = result.bind(tango)(golf);
            options = golf.Text;
            golf = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            kilo = foxtrot[update];
            kilo = result.bind(tango)(kilo);
            echo = kilo.intl;
            sizing = echo.string;
            kilo = foxtrot[update];
            kilo = result.bind(tango)(kilo);
            kilo = kilo.t;
            kilo = kilo.Ztwyo6;
            kilo = sizing.bind(echo)(kilo);
            golf['children'] = kilo;
            golf = verify.bind(tango)(options, golf);
            report[7] = golf;
            verify = _closure1_slot10;
            options = _closure1_slot16;
            golf = {};
            offset = offset.serializedSourceGuild;
            offset = offset.channels;
            golf['channels'] = offset;
            golf = verify.bind(tango)(options, golf);
            report[8] = golf;
            verify = _closure1_slot11;
            golf = foxtrot[romeo];
            golf = result.bind(tango)(golf);
            options = golf.Text;
            golf = {'style': null, 'variant': 'text-xs/medium', 'color': 'interactive-normal'};
            offset = output.sectionTip;
            golf['style'] = offset;
            sizing = _closure1_slot11;
            offset = 17;
            offset = foxtrot[offset];
            offset = result.bind(tango)(offset);
            kilo = offset.LegacyText;
            offset = {};
            echo = output.protip;
            offset['style'] = echo;
            echo = foxtrot[update];
            echo = result.bind(tango)(echo);
            control = echo.intl;
            source = control.string;
            echo = foxtrot[update];
            echo = result.bind(tango)(echo);
            echo = echo.t;
            echo = echo.8tvIiI;
            source = source.bind(control)(echo);
            echo = new Array(2);
            echo[0] = source;
            source = ': ';
            echo[1] = source;
            offset['children'] = echo;
            kilo = sizing.bind(tango)(kilo, offset);
            offset = new Array(2);
            offset[0] = kilo;
            kilo = foxtrot[update];
            kilo = result.bind(tango)(kilo);
            sizing = kilo.intl;
            kilo = sizing.string;
            foxtrot = foxtrot[update];
            foxtrot = result.bind(tango)(foxtrot);
            foxtrot = foxtrot.t;
            foxtrot = foxtrot.de7DpK;
            foxtrot = kilo.bind(sizing)(foxtrot);
            offset[1] = foxtrot;
            golf['children'] = offset;
            golf = verify.bind(tango)(options, golf);
            report[9] = golf;
            options = backup.length;
            golf = 0;
            golf = options > golf;
            oscar = null;
            if(!golf) { _fun00002_ip = 1584; continue _fun00001 }
 1335:
            verify = _closure1_slot11;
            options = _closure1_slot12;
            golf = {};
            kilo = _closure1_slot10;
            echo = _closure1_slot0;
            sizing = _closure1_slot2;
            offset = sizing[romeo];
            offset = echo.bind(tango)(offset);
            foxtrot = offset.Text;
            offset = {'style': null, 'variant': 'heading-md/extrabold', 'color': 'header-primary'};
            output = output.sectionHeader;
            offset['style'] = output;
            output = sizing[update];
            output = echo.bind(tango)(output);
            source = output.intl;
            result = source.string;
            output = sizing[update];
            output = echo.bind(tango)(output);
            output = output.t;
            output = output.mQ0H1t;
            output = result.bind(source)(output);
            offset['children'] = output;
            foxtrot = kilo.bind(tango)(foxtrot, offset);
            offset = new Array(3);
            offset[0] = foxtrot;
            kilo = _closure1_slot10;
            romeo = sizing[romeo];
            romeo = echo.bind(tango)(romeo);
            foxtrot = romeo.Text;
            romeo = {'variant': 'text-xs/medium', 'color': 'header-secondary'};
            output = sizing[update];
            output = echo.bind(tango)(output);
            result = output.intl;
            output = result.string;
            sizing = sizing[update];
            sizing = echo.bind(tango)(sizing);
            sizing = sizing.t;
            sizing = sizing.jOPEYG;
            sizing = output.bind(result)(sizing);
            romeo['children'] = sizing;
            romeo = kilo.bind(tango)(foxtrot, romeo);
            offset[1] = romeo;
            foxtrot = _closure1_slot10;
            romeo = _closure1_slot18;
            yankee = {};
            yankee['roles'] = backup;
            yankee = foxtrot.bind(tango)(romeo, yankee);
            offset[2] = yankee;
            golf['children'] = offset;
            oscar = verify.bind(tango)(options, golf);
 1584:
            report[10] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    var _closure1_slot15 = entity;
    entity = function(argFoo) { // Original name: Channels
        entity = argFoo;
        report = entity.channels;
        zulu = _closure1_slot13;
        tango = undefined;
        golf = zulu.bind(tango)();
        var _closure2_slot0 = golf;
        oscar = _closure1_slot1;
        options = _closure1_slot2;
        zulu = 18;
        zulu = options[zulu];
        zulu = oscar.bind(tango)(zulu);
        oscar = zulu.bind(tango)(report);
        report = oscar.sortBy;
        zulu = function(argFoo) {
            _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                mike = argFoo;
                zulu = mike.parent_id;
                entity = null;
                if(!(entity != zulu)) { _fun00004_ip = 57; continue _fun00003 }
 15:
                entity = global;
                tango = entity.Number;
                zulu = mike.parent_id;
                entity = undefined;
                zulu = tango.bind(entity)(zulu);
                entity = 10000;
                zulu = entity * zulu;
                entity = mike.id;
                entity = zulu + entity;
                _fun00004_ip = 87; continue _fun00003;
 57:
                zulu = global;
                tango = zulu.Number;
                zulu = mike.id;
                mike = undefined;
                zulu = tango.bind(mike)(zulu);
                mike = 10000;
                entity = mike * zulu;
 87:
                return entity;
            }
        };
        report = report.bind(oscar)(zulu);
        zulu = report.map;
        mike = function(argFoo) {
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                entity = argFoo;
                zulu = entity.type;
                mike = _closure1_slot8;
                mike = mike.GUILD_CATEGORY;
                foxtrot = zulu === mike;
                report = _closure1_slot11;
                tango = _closure1_slot3;
                zulu = {};
                offset = _closure2_slot0;
                mike = offset.channelRow;
                zulu['style'] = mike;
                verify = _closure1_slot10;
                options = _closure1_slot1;
                mike = _closure1_slot2;
                backup = 19;
                oscar = mike[backup];
                mike = undefined;
                options = options.bind(mike)(oscar);
                oscar = {};
                yankee = offset.channelIcon;
                offset = new Array(2);
                offset[0] = yankee;
                kilo = null;
                if(!foxtrot) { _fun00006_ip = 109; continue _fun00005 }
 99:
                sizing = _closure2_slot0;
                kilo = sizing.channelCategoryIcon;
 109:
                offset[1] = kilo;
                oscar['style'] = offset;
                kilo = _closure1_slot1;
                offset = _closure1_slot2;
                sizing = 7;
                sizing = offset[sizing];
                sizing = kilo.bind(mike)(sizing);
                sizing = sizing.unsafe_rawColors;
                sizing = sizing.PRIMARY_400;
                oscar['color'] = sizing;
                backup = offset[backup];
                backup = kilo.bind(mike)(backup);
                backup = backup.Sizes;
                backup = backup.CUSTOM;
                oscar['size'] = backup;
                backup = _closure1_slot17;
                backup = backup.bind(mike)(entity);
                oscar['source'] = backup;
                options = verify.bind(mike)(options, oscar);
                oscar = new Array(2);
                oscar[0] = options;
                verify = _closure1_slot10;
                options = _closure1_slot0;
                golf = 17;
                golf = offset[golf];
                golf = options.bind(mike)(golf);
                options = golf.LegacyText;
                golf = {};
                offset = 1;
                golf['numberOfLines'] = offset;
                offset = _closure2_slot0;
                backup = offset.channelName;
                offset = new Array(2);
                offset[0] = backup;
                yankee = null;
                if(!foxtrot) { _fun00006_ip = 273; continue _fun00005 }
 263:
                romeo = _closure2_slot0;
                yankee = romeo.channelCategoryName;
 273:
                offset[1] = yankee;
                golf['style'] = offset;
                offset = entity.name;
                golf['children'] = offset;
                golf = verify.bind(mike)(options, golf);
                oscar[1] = golf;
                zulu['children'] = oscar;
                entity = entity.id;
                entity = report.bind(mike)(tango, zulu, entity);
                return entity;
            }
        };
        zulu = zulu.bind(report)(mike);
        mike = zulu.value;
        report = mike.bind(zulu)();
        zulu = _closure1_slot10;
        mike = _closure1_slot3;
        entity = {};
        options = golf.rolesChannelsWrapper;
        oscar = new Array(2);
        oscar[0] = options;
        golf = golf.channelsWrapper;
        oscar[1] = golf;
        entity['style'] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot16 = entity;
    entity = function(argFoo) { // Original name: getChannelIcon
        _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
            entity = argFoo;
            zulu = entity.type;
            entity = _closure1_slot6;
            tango = undefined;
            entity = entity.bind(tango)(zulu);
            if(entity) { _fun00008_ip = 83; continue _fun00007 }
 25:
            entity = _closure1_slot8;
            entity = entity.GUILD_CATEGORY;
            if(!(zulu !== entity)) { _fun00008_ip = 61; continue _fun00007 }
 39:
            zulu = _closure1_slot1;
            report = _closure1_slot2;
            entity = 22;
            entity = report[entity];
            entity = zulu.bind(tango)(entity);
            _fun00008_ip = 81; continue _fun00007;
 61:
            report = _closure1_slot1;
            oscar = _closure1_slot2;
            zulu = 21;
            zulu = oscar[zulu];
            entity = report.bind(tango)(zulu);
 81:
            _fun00008_ip = 103; continue _fun00007;
 83:
            zulu = _closure1_slot1;
            report = _closure1_slot2;
            mike = 20;
            mike = report[mike];
            entity = zulu.bind(tango)(mike);
 103:
            return entity;
        }
    };
    var _closure1_slot17 = entity;
    entity = function(argFoo) { // Original name: Roles
        entity = argFoo;
        zulu = entity.roles;
        mike = _closure1_slot13;
        tango = undefined;
        golf = mike.bind(tango)();
        mike = zulu.slice;
        zulu = mike.bind(zulu)();
        mike = zulu.reverse;
        report = mike.bind(zulu)();
        zulu = report.map;
        mike = function(argFoo) {
            _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
                entity = argFoo;
                report = _closure1_slot10;
                zulu = _closure1_slot1;
                tango = _closure1_slot2;
                mike = 23;
                mike = tango[mike];
                tango = undefined;
                zulu = zulu.bind(tango)(mike);
                mike = {};
                oscar = true;
                mike['disableInteraction'] = oscar;
                mike['role'] = entity;
                verify = entity.color;
                options = 0;
                oscar = undefined;
                if(!(options !== verify)) { _fun00010_ip = 95; continue _fun00009 }
 59:
                options = _closure1_slot0;
                verify = _closure1_slot2;
                golf = 24;
                golf = verify[golf];
                verify = options.bind(tango)(golf);
                options = verify.int2hex;
                golf = entity.color;
                oscar = options.bind(verify)(golf);
 95:
                mike['color'] = oscar;
                entity = entity.id;
                entity = report.bind(tango)(zulu, mike, entity);
                return entity;
            }
        };
        report = zulu.bind(report)(mike);
        zulu = _closure1_slot10;
        mike = _closure1_slot3;
        entity = {};
        options = golf.rolesChannelsWrapper;
        oscar = new Array(2);
        oscar[0] = options;
        golf = golf.rolesWrapper;
        oscar[1] = golf;
        entity['style'] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot18 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    result = true;
    tango['value'] = result;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    golf = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(golf);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.View;
    var _closure1_slot3 = golf;
    golf = tango.ActivityIndicator;
    var _closure1_slot4 = golf;
    tango = tango.ScrollView;
    var _closure1_slot5 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.isGuildVocalChannelType;
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.MarketingURLs;
    var _closure1_slot7 = golf;
    offset = tango.Fonts;
    tango = tango.ChannelTypes;
    var _closure1_slot8 = tango;
    tango = 4;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.GuildTemplateStates;
    var _closure1_slot9 = tango;
    tango = 5;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot10 = golf;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsxs;
    var _closure1_slot11 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.Fragment;
    var _closure1_slot12 = tango;
    tango = 6;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {};
    yankee = 7;
    foxtrot = oscar[yankee];
    foxtrot = romeo.bind(entity)(foxtrot);
    foxtrot = foxtrot.colors;
    foxtrot = foxtrot.BACKGROUND_MOBILE_PRIMARY;
    verify['backgroundColor'] = foxtrot;
    update = 16;
    verify['padding'] = update;
    tango['wrapper'] = verify;
    verify = {};
    foxtrot = 'center';
    verify['textAlign'] = foxtrot;
    foxtrot = 8;
    backup = oscar[foxtrot];
    output = romeo.bind(entity)(backup);
    sizing = offset.DISPLAY_EXTRABOLD;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    kilo = 24;
    vacuum = output.bind(entity)(sizing, backup, kilo);
    sequence = verify;
    backup = copyDataProperties(sequence, vacuum);
    tango['header'] = verify;
    verify = {'textAlign': 'center', 'marginTop': 8, 'marginBottom': 32};
    tango['description'] = verify;
    output = 12;
    verify = {'alignSelf': 'center', 'marginBottom': 12};
    tango['iconUploader'] = verify;
    verify = {'width': '100%', 'marginTop': 8};
    tango['createButton'] = verify;
    verify = {'alignItems': 'center', 'flex': 1, 'justifyContent': 'center'};
    tango['resolvingContainer'] = verify;
    verify = {'alignSelf': 'stretch', 'padding': 16};
    tango['buttonWrapper'] = verify;
    verify = {'flexGrow': 0, 'paddingHorizontal': 8};
    tango['button'] = verify;
    verify = {};
    verify['marginTop'] = foxtrot;
    tango['divider'] = verify;
    verify = {};
    backup = oscar[foxtrot];
    echo = romeo.bind(entity)(backup);
    sizing = offset.DISPLAY_EXTRABOLD;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.HEADER_PRIMARY;
    vacuum = echo.bind(entity)(sizing, backup, update);
    sequence = verify;
    backup = copyDataProperties(sequence, vacuum);
    backup = 'marginTop';
    verify[backup] = kilo;
    tango['sectionHeader'] = verify;
    verify = {};
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.BACKGROUND_SECONDARY;
    verify['backgroundColor'] = backup;
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.radii;
    backup = backup.sm;
    verify['borderRadius'] = backup;
    verify['marginTop'] = foxtrot;
    verify['padding'] = foxtrot;
    tango['rolesChannelsWrapper'] = verify;
    verify = {'flexDirection': 'column', 'paddingVertical': 0};
    tango['channelsWrapper'] = verify;
    verify = {'flexDirection': 'row', 'flexWrap': 'wrap'};
    tango['rolesWrapper'] = verify;
    verify = {'alignItems': 'center', 'flexDirection': 'row', 'height': 40};
    tango['channelRow'] = verify;
    verify = {'marginLeft': 12, 'marginRight': 8, 'height': 20, 'width': 20};
    tango['channelIcon'] = verify;
    verify = {'marginLeft': 0, 'marginRight': 2, 'height': 12, 'width': 12};
    tango['channelCategoryIcon'] = verify;
    verify = {'color': null, 'fontSize': 16, 'flex': 1};
    backup = oscar[yankee];
    backup = romeo.bind(entity)(backup);
    backup = backup.colors;
    backup = backup.CHANNELS_DEFAULT;
    verify['color'] = backup;
    tango['channelName'] = verify;
    verify = {};
    backup = oscar[foxtrot];
    sizing = romeo.bind(entity)(backup);
    sequence = offset.DISPLAY_EXTRABOLD;
    backup = {};
    backup['uppercase'] = result;
    config = undefined;
    vacuum = undefined;
    control = output;
    source = backup;
    vacuum = config[sizing](sequence, vacuum, control, source, update);
    sequence = verify;
    backup = copyDataProperties(sequence, vacuum);
    tango['channelCategoryName'] = verify;
    verify = {};
    verify['marginTop'] = foxtrot;
    tango['sectionTip'] = verify;
    verify = {};
    yankee = oscar[yankee];
    yankee = romeo.bind(entity)(yankee);
    yankee = yankee.unsafe_rawColors;
    yankee = yankee.GREEN_360;
    verify['color'] = yankee;
    offset = offset.PRIMARY_BOLD;
    verify['fontFamily'] = offset;
    offset = 'uppercase';
    verify['textTransform'] = offset;
    tango['protip'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot13 = tango;
    tango = 25;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'uikit-native/modals/AcceptGuildTemplate.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: AcceptGuildTemplate
        _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
            entity = argFoo;
            mike = entity.guildTemplate;
            zulu = null;
            if(!(zulu != mike)) { _fun00012_ip = 79; continue _fun00011 }
 15:
            tango = mike.state;
            zulu = _closure1_slot9;
            zulu = zulu.RESOLVED;
            if(!(zulu !== tango)) { _fun00012_ip = 142; continue _fun00011 }
 37:
            zulu = _closure1_slot9;
            zulu = zulu.ACCEPTING;
            if(!(zulu !== tango)) { _fun00012_ip = 142; continue _fun00011 }
 51:
            zulu = _closure1_slot9;
            zulu = zulu.ACCEPTED;
            if(!(zulu !== tango)) { _fun00012_ip = 142; continue _fun00011 }
 65:
            zulu = _closure1_slot9;
            zulu = zulu.RESOLVING;
            if(!(zulu !== tango)) { _fun00012_ip = 112; continue _fun00011 }
 79:
            oscar = _closure1_slot10;
            report = _closure1_slot14;
            tango = {};
            options = tango;
            golf = entity;
            zulu = copyDataProperties(options, golf);
            zulu = undefined;
            zulu = oscar.bind(zulu)(report, tango);
            return zulu;
 112:
            oscar = _closure1_slot10;
            report = _closure1_slot14;
            tango = {};
            options = tango;
            golf = entity;
            zulu = copyDataProperties(options, golf);
            zulu = undefined;
            zulu = oscar.bind(zulu)(report, tango);
            return zulu;
 142:
            tango = _closure1_slot10;
            zulu = _closure1_slot15;
            mike = {};
            options = mike;
            golf = entity;
            entity = copyDataProperties(options, golf);
            entity = undefined;
            entity = tango.bind(entity)(zulu, mike);
            return entity;
        }
    };
    zulu['default'] = mike;
    return entity;
})();