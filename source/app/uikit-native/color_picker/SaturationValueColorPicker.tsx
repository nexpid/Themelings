// app/uikit-native/color_picker/SaturationValueColorPicker.tsx
export default (function(argFoo, argBar, argBaz, argCorge, argGrault, argFred, argPlugh) {
    report = argBar;
    yankee = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscar;
    entity = function(argFoo) { // Original name: ColorBox
        mike = argFoo;
        backup = mike.hue;
        var _closure2_slot0 = backup;
        mike = _closure1_slot8;
        tango = undefined;
        yankee = mike.bind(tango)();
        report = _closure1_slot4;
        zulu = report.useState;
        mike = 'rgb(0,0,0)';
        report = zulu.bind(report)(mike);
        zulu = _closure1_slot3;
        mike = 2;
        zulu = zulu.bind(tango)(report, mike);
        mike = 0;
        offset = zulu[mike];
        mike = 1;
        golf = zulu[mike];
        var _closure2_slot1 = golf;
        foxtrot = _closure1_slot0;
        verify = _closure1_slot2;
        romeo = 6;
        mike = verify[romeo];
        report = foxtrot.bind(tango)(mike);
        zulu = report.useAnimatedReaction;
        mike = function() { // Original name: _
            zulu = _closure1_slot0;
            mike = _closure1_slot2;
            entity = 7;
            mike = mike[entity];
            entity = undefined;
            zulu = zulu.bind(entity)(mike);
            mike = zulu.hslToRgbWorklet;
            entity = {'h': null, 's': 1, 'l': 0.5};
            report = _closure2_slot0;
            tango = report.get;
            tango = tango.bind(report)();
            entity['h'] = tango;
            entity = mike.bind(zulu)(entity);
            return entity;
        };
        oscar = {};
        kilo = 7;
        kilo = verify[kilo];
        kilo = foxtrot.bind(tango)(kilo);
        kilo = kilo.hslToRgbWorklet;
        oscar['hslToRgbWorklet'] = kilo;
        oscar['hue'] = backup;
        mike['__closure'] = oscar;
        oscar = 8814597686728.0;
        mike['__workletHash'] = oscar;
        oscar = _closure1_slot9;
        mike['__initData'] = oscar;
        entity = function(argFoo, argBar) { // Original name: b
            _fun93170: for(var _fun93170_ip = 0; ; ) switch(_fun93170_ip) {
 0:
                tango = argFoo;
                entity = argBar;
                if(!(tango !== entity)) { _fun93170_ip = 116; continue _fun93170 }
 10:
                mike = _closure1_slot0;
                zulu = _closure1_slot2;
                entity = 6;
                entity = zulu[entity];
                zulu = undefined;
                report = mike.bind(zulu)(entity);
                mike = report.runOnJS;
                entity = _closure2_slot1;
                mike = mike.bind(report)(entity);
                entity = 0;
                kilo = tango[entity];
                entity = 1;
                foxtrot = tango[entity];
                entity = 2;
                yankee = tango[entity];
                entity = global;
                entity = entity.HermesInternal;
                oscar = entity.concat;
                sizing = 'rgb(';
                tango = ', ';
                offset = ')';
                backup = tango;
                romeo = tango;
                entity = sizing[oscar](kilo, backup, foxtrot, romeo, yankee, offset, verify);
                entity = mike.bind(zulu)(entity);
 116:
                entity = undefined;
                return entity;
            }
        };
        oscar = {};
        romeo = verify[romeo];
        romeo = foxtrot.bind(tango)(romeo);
        romeo = romeo.runOnJS;
        oscar['runOnJS'] = romeo;
        oscar['setColor'] = golf;
        entity['__closure'] = oscar;
        oscar = 14688428173537.0;
        entity['__workletHash'] = oscar;
        oscar = _closure1_slot10;
        entity['__initData'] = oscar;
        entity = zulu.bind(report)(mike, entity);
        zulu = _closure1_slot6;
        oscar = _closure1_slot1;
        report = 8;
        entity = verify[report];
        mike = oscar.bind(tango)(entity);
        entity = {};
        golf = yankee.colorBox;
        entity['style'] = golf;
        golf = ['rgb(255,255,255)'];
        golf[1] = offset;
        entity['colors'] = golf;
        golf = {'x': 0, 'y': 0.5};
        entity['start'] = golf;
        golf = {'x': 1, 'y': 0.5};
        entity['end'] = golf;
        golf = _closure1_slot6;
        report = verify[report];
        oscar = oscar.bind(tango)(report);
        report = {};
        verify = ['rgba(0, 0, 0, 0)', '#000'];
        report['colors'] = verify;
        offset = _closure1_slot6;
        verify = _closure1_slot5;
        options = {};
        yankee = yankee.colorBoxInner;
        options['style'] = yankee;
        options = offset.bind(tango)(verify, options);
        report['children'] = options;
        report = golf.bind(tango)(oscar, report);
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = global;
    options = entity.Object;
    golf = options.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = golf.bind(options)(zulu, entity, tango);
    entity = 0;
    tango = oscar[entity];
    entity = undefined;
    tango = yankee.bind(entity)(tango);
    var _closure1_slot3 = tango;
    tango = 1;
    golf = oscar[tango];
    tango = argCorge;
    tango = tango.bind(entity)(golf);
    var _closure1_slot4 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.View;
    var _closure1_slot5 = tango;
    tango = 3;
    golf = oscar[tango];
    golf = report.bind(entity)(golf);
    golf = golf.jsx;
    var _closure1_slot6 = golf;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot7 = tango;
    tango = 4;
    tango = oscar[tango];
    options = report.bind(entity)(tango);
    golf = options.createStyles;
    tango = {};
    verify = {'justifyContent': 'center', 'alignItems': 'center', 'position': 'relative'};
    tango['container'] = verify;
    verify = {'top': 0, 'left': 0, 'position': 'absolute', 'width': 24, 'height': 24, 'borderRadius': null, 'borderWidth': 2};
    offset = 5;
    romeo = oscar[offset];
    romeo = yankee.bind(entity)(romeo);
    romeo = romeo.radii;
    romeo = romeo.md;
    verify['borderRadius'] = romeo;
    tango['selector'] = verify;
    verify = {};
    romeo = 'hidden';
    verify['overflow'] = romeo;
    offset = oscar[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tango['colorBox'] = verify;
    verify = {'minHeight': 240, 'minWidth': 240};
    tango['colorBoxInner'] = verify;
    tango = golf.bind(options)(tango);
    var _closure1_slot8 = tango;
    tango = {};
    golf = 'function SaturationValueColorPickerTsx1(){const{hslToRgbWorklet,hue}=this.__closure;return hslToRgbWorklet({h:hue.get(),s:1,l:0.5});}';
    tango['code'] = golf;
    var _closure1_slot9 = tango;
    tango = {};
    golf = 'function SaturationValueColorPickerTsx2(result,previous){const{runOnJS,setColor}=this.__closure;if(result!==previous)runOnJS(setColor)("rgb("+result[0]+", "+result[1]+", "+result[2]+")");}';
    tango['code'] = golf;
    var _closure1_slot10 = tango;
    tango = {};
    golf = 'function SaturationValueColorPickerTsx3({x:x,y:y}){const{saturation,normalizeValue,width,value,height}=this.__closure;saturation.set(normalizeValue(x/width));value.set(1-normalizeValue(y/height));}';
    tango['code'] = golf;
    var _closure1_slot11 = tango;
    tango = {};
    golf = 'function SaturationValueColorPickerTsx4(){const{onPanFinalize,runOnJS}=this.__closure;onPanFinalize!=null&&runOnJS(onPanFinalize)();}';
    tango['code'] = golf;
    var _closure1_slot12 = tango;
    tango = {};
    golf = 'function SaturationValueColorPickerTsx5(){const{hsvToRgbWorklet,hue,saturation,value,colorBoxWidth,colorBoxHeight}=this.__closure;const rgb=hsvToRgbWorklet({h:hue.get(),s:saturation.get(),v:value.get()});const bgRgb=hsvToRgbWorklet({h:hue.get(),s:0,v:Math.round(1-value.get())});return{backgroundColor:"rgb("+rgb[0]+", "+rgb[1]+", "+rgb[2]+")",transform:[{translateX:colorBoxWidth*saturation.get()},{translateY:colorBoxHeight*(1-value.get())}],borderColor:"rgb("+bgRgb[0]+", "+bgRgb[1]+", "+bgRgb[2]+")"};}';
    tango['code'] = golf;
    var _closure1_slot13 = tango;
    tango = 10;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'uikit-native/color_picker/SaturationValueColorPicker.tsx';
    tango = report.bind(oscar)(tango);
    mike = function(argFoo) { // Original name: SaturationValueColorPicker
        entity = argFoo;
        update = entity.hue;
        var _closure2_slot0 = update;
        output = entity.saturation;
        var _closure2_slot1 = output;
        sizing = entity.value;
        var _closure2_slot2 = sizing;
        control = entity.onPanFinalize;
        kilo = entity.style;
        entity = _closure1_slot8;
        tango = undefined;
        verify = entity.bind(tango)();
        report = _closure1_slot4;
        mike = report.useState;
        entity = 0;
        options = mike.bind(report)(entity);
        report = _closure1_slot3;
        mike = 2;
        report = report.bind(tango)(options, mike);
        echo = report[entity];
        var _closure2_slot3 = echo;
        options = 1;
        report = report[options];
        var _closure2_slot4 = report;
        offset = _closure1_slot4;
        report = offset.useState;
        offset = report.bind(offset)(entity);
        report = _closure1_slot3;
        report = report.bind(tango)(offset, mike);
        result = report[entity];
        var _closure2_slot5 = result;
        report = report[options];
        var _closure2_slot6 = report;
        offset = _closure1_slot4;
        report = offset.useState;
        offset = report.bind(offset)(entity);
        report = _closure1_slot3;
        report = report.bind(tango)(offset, mike);
        entity = report[entity];
        var _closure2_slot7 = entity;
        report = report[options];
        var _closure2_slot8 = report;
        report = function(argFoo, argBar, argBaz, argCorge, argGrault) { // Original name: useGesture
            zulu = argFoo;
            mike = argBar;
            offset = argBaz;
            verify = argCorge;
            options = argGrault;
            var _closure3_slot0 = zulu;
            var _closure3_slot1 = mike;
            var _closure3_slot2 = offset;
            var _closure3_slot3 = verify;
            var _closure3_slot4 = options;
            entity = {};
            golf = _closure1_slot4;
            oscar = golf.useMemo;
            report = new Array(5);
            report[0] = offset;
            report[1] = verify;
            report[2] = zulu;
            report[3] = mike;
            report[4] = options;
            tango = function() {
                report = function(argFoo) { // Original name: o
                    entity = argFoo;
                    romeo = entity.x;
                    golf = entity.y;
                    verify = _closure3_slot0;
                    tango = verify.set;
                    oscar = _closure1_slot0;
                    options = _closure1_slot2;
                    report = 7;
                    zulu = options[report];
                    entity = undefined;
                    yankee = oscar.bind(entity)(zulu);
                    offset = yankee.normalizeValue;
                    zulu = _closure3_slot2;
                    zulu = romeo / zulu;
                    zulu = offset.bind(yankee)(zulu);
                    zulu = tango.bind(verify)(zulu);
                    tango = _closure3_slot1;
                    zulu = tango.set;
                    report = options[report];
                    oscar = oscar.bind(entity)(report);
                    report = oscar.normalizeValue;
                    mike = _closure3_slot3;
                    mike = golf / mike;
                    report = report.bind(oscar)(mike);
                    mike = 1;
                    mike = mike - report;
                    mike = zulu.bind(tango)(mike);
                    return entity;
                };
                mike = {};
                zulu = _closure3_slot0;
                mike['saturation'] = zulu;
                options = _closure1_slot0;
                verify = _closure1_slot2;
                zulu = 7;
                zulu = verify[zulu];
                golf = undefined;
                zulu = options.bind(golf)(zulu);
                zulu = zulu.normalizeValue;
                mike['normalizeValue'] = zulu;
                zulu = _closure3_slot2;
                mike['width'] = zulu;
                zulu = _closure3_slot1;
                mike['value'] = zulu;
                zulu = _closure3_slot3;
                mike['height'] = zulu;
                report['__closure'] = mike;
                mike = 12006499141927.0;
                report['__workletHash'] = mike;
                mike = _closure1_slot11;
                report['__initData'] = mike;
                mike = 9;
                mike = verify[mike];
                mike = options.bind(golf)(mike);
                zulu = mike.Gesture;
                mike = zulu.Pan;
                zulu = mike.bind(zulu)();
                mike = zulu.onBegin;
                zulu = mike.bind(zulu)(report);
                mike = zulu.onUpdate;
                zulu = mike.bind(zulu)(report);
                mike = zulu.onFinalize;
                entity = function() { // Original name: c
                    _fun93175: for(var _fun93175_ip = 0; ; ) switch(_fun93175_ip) {
 0:
                        zulu = _closure3_slot4;
                        mike = null;
                        if(!(mike != zulu)) { _fun93175_ip = 56; continue _fun93175 }
 13:
                        tango = _closure1_slot0;
                        zulu = _closure1_slot2;
                        mike = 6;
                        zulu = zulu[mike];
                        mike = undefined;
                        tango = tango.bind(mike)(zulu);
                        zulu = tango.runOnJS;
                        entity = _closure3_slot4;
                        entity = zulu.bind(tango)(entity);
                        entity = entity.bind(mike)();
 56:
                        entity = undefined;
                        return entity;
                    }
                };
                report = {};
                oscar = _closure3_slot4;
                report['onPanFinalize'] = oscar;
                oscar = 6;
                oscar = verify[oscar];
                oscar = options.bind(golf)(oscar);
                oscar = oscar.runOnJS;
                report['runOnJS'] = oscar;
                entity['__closure'] = report;
                report = 4207681669293.0;
                entity['__workletHash'] = report;
                tango = _closure1_slot12;
                entity['__initData'] = tango;
                entity = mike.bind(zulu)(entity);
                return entity;
            };
            tango = oscar.bind(golf)(tango, report);
            entity['gesture'] = tango;
            entity['saturation'] = zulu;
            entity['value'] = mike;
            return entity;
        };
        context = undefined;
        record = output;
        config = sizing;
        sequence = echo;
        vacuum = result;
        report = context[report](record, config, sequence, vacuum, control, source);
        backup = report.gesture;
        options = _closure1_slot0;
        romeo = _closure1_slot2;
        oscar = 6;
        report = romeo[oscar];
        yankee = options.bind(tango)(report);
        offset = yankee.useAnimatedStyle;
        report = function() { // Original name: S
            zulu = _closure1_slot0;
            report = _closure1_slot2;
            entity = 7;
            tango = report[entity];
            mike = undefined;
            options = zulu.bind(mike)(tango);
            golf = options.hsvToRgbWorklet;
            oscar = {};
            tango = _closure2_slot0;
            verify = tango.get;
            verify = verify.bind(tango)();
            oscar['h'] = verify;
            kilo = _closure2_slot1;
            verify = kilo.get;
            verify = verify.bind(kilo)();
            oscar['s'] = verify;
            backup = _closure2_slot2;
            verify = backup.get;
            verify = verify.bind(backup)();
            oscar['v'] = verify;
            oscar = golf.bind(options)(oscar);
            entity = report[entity];
            golf = zulu.bind(mike)(entity);
            zulu = golf.hsvToRgbWorklet;
            entity = {};
            mike = tango.get;
            mike = mike.bind(tango)();
            entity['h'] = mike;
            report = 0;
            entity['s'] = report;
            mike = global;
            offset = mike.Math;
            verify = offset.round;
            tango = backup.get;
            options = tango.bind(backup)();
            tango = 1;
            options = tango - options;
            options = verify.bind(offset)(options);
            entity['v'] = options;
            verify = zulu.bind(golf)(entity);
            entity = {};
            control = oscar[report];
            update = oscar[tango];
            zulu = 2;
            result = oscar[zulu];
            oscar = mike.HermesInternal;
            offset = oscar.concat;
            options = 'rgb(';
            golf = ', ';
            oscar = ')';
            vacuum = options;
            source = golf;
            echo = golf;
            output = oscar;
            offset = vacuum[offset](control, source, update, echo, result, output, sizing);
            entity['backgroundColor'] = offset;
            yankee = {};
            foxtrot = _closure2_slot3;
            offset = kilo.get;
            offset = offset.bind(kilo)();
            offset = foxtrot * offset;
            yankee['translateX'] = offset;
            offset = new Array(2);
            offset[0] = yankee;
            yankee = {};
            foxtrot = _closure2_slot5;
            romeo = backup.get;
            romeo = romeo.bind(backup)();
            romeo = tango - romeo;
            romeo = foxtrot * romeo;
            yankee['translateY'] = romeo;
            offset[1] = yankee;
            entity['transform'] = offset;
            control = verify[report];
            update = verify[tango];
            result = verify[zulu];
            mike = mike.HermesInternal;
            mike = mike.concat;
            vacuum = options;
            mike = vacuum[mike](control, source, update, echo, result, output, sizing);
            entity['borderColor'] = mike;
            return entity;
        };
        foxtrot = {};
        source = 7;
        source = romeo[source];
        source = options.bind(tango)(source);
        source = source.hsvToRgbWorklet;
        foxtrot['hsvToRgbWorklet'] = source;
        foxtrot['hue'] = update;
        foxtrot['saturation'] = output;
        foxtrot['value'] = sizing;
        foxtrot['colorBoxWidth'] = echo;
        foxtrot['colorBoxHeight'] = result;
        report['__closure'] = foxtrot;
        foxtrot = 6880706874032.0;
        report['__workletHash'] = foxtrot;
        foxtrot = _closure1_slot13;
        report['__initData'] = foxtrot;
        offset = offset.bind(yankee)(report);
        sizing = _closure1_slot4;
        foxtrot = sizing.useCallback;
        yankee = function(argFoo) {
            entity = argFoo;
            entity = entity.nativeEvent;
            entity = entity.layout;
            report = entity.width;
            zulu = entity.height;
            tango = _closure2_slot4;
            entity = undefined;
            tango = tango.bind(entity)(report);
            mike = _closure2_slot6;
            mike = mike.bind(entity)(zulu);
            return entity;
        };
        report = new Array(0);
        output = foxtrot.bind(sizing)(yankee, report);
        sizing = _closure1_slot4;
        foxtrot = sizing.useCallback;
        yankee = function(argFoo) {
            entity = argFoo;
            entity = entity.nativeEvent;
            entity = entity.layout;
            zulu = entity.width;
            mike = _closure2_slot8;
            entity = undefined;
            mike = mike.bind(entity)(zulu);
            return entity;
        };
        report = new Array(0);
        yankee = foxtrot.bind(sizing)(yankee, report);
        sizing = _closure1_slot4;
        foxtrot = sizing.useMemo;
        report = new Array(3);
        report[0] = entity;
        report[1] = echo;
        report[2] = result;
        zulu = function() {
            entity = {};
            tango = _closure2_slot5;
            zulu = _closure2_slot7;
            tango = tango + zulu;
            entity['height'] = tango;
            mike = _closure2_slot3;
            mike = mike + zulu;
            entity['width'] = mike;
            return entity;
        };
        foxtrot = foxtrot.bind(sizing)(zulu, report);
        result = entity / mike;
        zulu = _closure1_slot7;
        mike = _closure1_slot5;
        entity = {};
        sizing = verify.container;
        report = new Array(3);
        report[0] = sizing;
        report[1] = kilo;
        report[2] = foxtrot;
        entity['style'] = report;
        foxtrot = _closure1_slot6;
        report = 9;
        report = romeo[report];
        report = options.bind(tango)(report);
        options = report.GestureDetector;
        report = {};
        report['gesture'] = backup;
        sizing = _closure1_slot6;
        kilo = _closure1_slot5;
        backup = {};
        backup['onLayout'] = output;
        output = {};
        output['top'] = result;
        output['bottom'] = result;
        output['left'] = result;
        output['right'] = result;
        backup['hitSlop'] = output;
        echo = _closure1_slot6;
        result = _closure1_slot14;
        output = {};
        output['hue'] = update;
        output = echo.bind(tango)(result, output);
        backup['children'] = output;
        backup = sizing.bind(tango)(kilo, backup);
        report['children'] = backup;
        options = foxtrot.bind(tango)(options, report);
        report = new Array(2);
        report[0] = options;
        options = _closure1_slot6;
        golf = _closure1_slot1;
        oscar = romeo[oscar];
        oscar = golf.bind(tango)(oscar);
        golf = oscar.View;
        oscar = {};
        oscar['onLayout'] = yankee;
        yankee = 'box-none';
        oscar['pointerEvents'] = yankee;
        yankee = verify.selector;
        verify = new Array(2);
        verify[0] = yankee;
        verify[1] = offset;
        oscar['style'] = verify;
        oscar = options.bind(tango)(golf, oscar);
        report[1] = oscar;
        entity['children'] = report;
        entity = zulu.bind(tango)(mike, entity);
        return entity;
    };
    zulu['default'] = mike;
    return entity;
})();