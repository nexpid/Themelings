// app/uikit-native/color_picker/SaturationValueColorPicker.tsx
export default (function(argFoo, argBar, argBaz, argCor, argGra, argFre, argPlu) {
    report = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = yankee;
    var _closure1_slot2 = oscard;
    entity = function(argFoo) { // Original name: ColorBox
        michal = argFoo;
        backup = michal.hue;
        var _closure2_slot0 = backup;
        michal = _closure1_slot8;
        tangon = undefined;
        yankee = michal.bind(tangon)();
        report = _closure1_slot4;
        zuuluu = report.useState;
        michal = 'rgb(0,0,0)';
        report = zuuluu.bind(report)(michal);
        zuuluu = _closure1_slot3;
        michal = 2;
        zuuluu = zuuluu.bind(tangon)(report, michal);
        michal = 0;
        offset = zuuluu[michal];
        michal = 1;
        golfie = zuuluu[michal];
        var _closure2_slot1 = golfie;
        foxtra = _closure1_slot0;
        verify = _closure1_slot2;
        romeon = 6;
        michal = verify[romeon];
        report = foxtra.bind(tangon)(michal);
        zuuluu = report.useAnimatedReaction;
        michal = function() { // Original name: _
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 7;
            michal = michal[entity];
            entity = undefined;
            zuuluu = zuuluu.bind(entity)(michal);
            michal = zuuluu.hslToRgbWorklet;
            entity = {'h': null, 's': 1, 'l': 0.5};
            report = _closure2_slot0;
            tangon = report.get;
            tangon = tangon.bind(report)();
            entity['h'] = tangon;
            entity = michal.bind(zuuluu)(entity);
            return entity;
        };
        oscard = {};
        kiloes = 7;
        kiloes = verify[kiloes];
        kiloes = foxtra.bind(tangon)(kiloes);
        kiloes = kiloes.hslToRgbWorklet;
        oscard['hslToRgbWorklet'] = kiloes;
        oscard['hue'] = backup;
        michal['__closure'] = oscard;
        oscard = 8814597686728.0;
        michal['__workletHash'] = oscard;
        oscard = _closure1_slot9;
        michal['__initData'] = oscard;
        entity = function(argFoo, argBar) { // Original name: s
            _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
                tangon = argFoo;
                entity = argBar;
                if(!(tangon !== entity)) { _fun00002_ip = 116; continue _fun00001 }
 10:
                michal = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 6;
                entity = zuuluu[entity];
                zuuluu = undefined;
                report = michal.bind(zuuluu)(entity);
                michal = report.runOnJS;
                entity = _closure2_slot1;
                michal = michal.bind(report)(entity);
                entity = 0;
                kiloes = tangon[entity];
                entity = 1;
                foxtra = tangon[entity];
                entity = 2;
                yankee = tangon[entity];
                entity = global;
                entity = entity.HermesInternal;
                oscard = entity.concat;
                sizing = 'rgb(';
                tangon = ', ';
                offset = ')';
                backup = tangon;
                romeon = tangon;
                entity = sizing[oscard](kiloes, backup, foxtra, romeon, yankee, offset, verify);
                entity = michal.bind(zuuluu)(entity);
 116:
                entity = undefined;
                return entity;
            }
        };
        oscard = {};
        romeon = verify[romeon];
        romeon = foxtra.bind(tangon)(romeon);
        romeon = romeon.runOnJS;
        oscard['runOnJS'] = romeon;
        oscard['setColor'] = golfie;
        entity['__closure'] = oscard;
        oscard = 14688428173537.0;
        entity['__workletHash'] = oscard;
        oscard = _closure1_slot10;
        entity['__initData'] = oscard;
        entity = zuuluu.bind(report)(michal, entity);
        zuuluu = _closure1_slot6;
        oscard = _closure1_slot1;
        report = 8;
        entity = verify[report];
        michal = oscard.bind(tangon)(entity);
        entity = {};
        golfie = yankee.colorBox;
        entity['style'] = golfie;
        golfie = ['rgb(255,255,255)'];
        golfie[1] = offset;
        entity['colors'] = golfie;
        golfie = {'x': 0, 'y': 0.5};
        entity['start'] = golfie;
        golfie = {'x': 1, 'y': 0.5};
        entity['end'] = golfie;
        golfie = _closure1_slot6;
        report = verify[report];
        oscard = oscard.bind(tangon)(report);
        report = {};
        verify = ['rgba(0, 0, 0, 0)', '#000'];
        report['colors'] = verify;
        offset = _closure1_slot6;
        verify = _closure1_slot5;
        option = {};
        yankee = yankee.colorBoxInner;
        option['style'] = yankee;
        option = offset.bind(tangon)(verify, option);
        report['children'] = option;
        report = golfie.bind(tangon)(oscard, report);
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    var _closure1_slot14 = entity;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    tangon = oscard[entity];
    entity = undefined;
    tangon = yankee.bind(entity)(tangon);
    var _closure1_slot3 = tangon;
    tangon = 1;
    golfie = oscard[tangon];
    tangon = argCor;
    tangon = tangon.bind(entity)(golfie);
    var _closure1_slot4 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.View;
    var _closure1_slot5 = tangon;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    golfie = tangon.jsx;
    var _closure1_slot6 = golfie;
    tangon = tangon.jsxs;
    var _closure1_slot7 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    option = report.bind(entity)(tangon);
    golfie = option.createStyles;
    tangon = {};
    verify = {'justifyContent': 'center', 'alignItems': 'center', 'position': 'relative'};
    tangon['container'] = verify;
    verify = {'top': 0, 'left': 0, 'position': 'absolute', 'width': 24, 'height': 24, 'borderRadius': null, 'borderWidth': 2};
    offset = 5;
    romeon = oscard[offset];
    romeon = yankee.bind(entity)(romeon);
    romeon = romeon.radii;
    romeon = romeon.md;
    verify['borderRadius'] = romeon;
    tangon['selector'] = verify;
    verify = {};
    romeon = 'hidden';
    verify['overflow'] = romeon;
    offset = oscard[offset];
    offset = yankee.bind(entity)(offset);
    offset = offset.radii;
    offset = offset.xs;
    verify['borderRadius'] = offset;
    tangon['colorBox'] = verify;
    verify = {'minHeight': 240, 'minWidth': 240};
    tangon['colorBoxInner'] = verify;
    tangon = golfie.bind(option)(tangon);
    var _closure1_slot8 = tangon;
    tangon = {};
    golfie = 'function SaturationValueColorPickerTsx1(){const{hslToRgbWorklet,hue}=this.__closure;return hslToRgbWorklet({h:hue.get(),s:1,l:0.5});}';
    tangon['code'] = golfie;
    var _closure1_slot9 = tangon;
    tangon = {};
    golfie = 'function SaturationValueColorPickerTsx2(result,previous){const{runOnJS,setColor}=this.__closure;if(result!==previous)runOnJS(setColor)("rgb("+result[0]+", "+result[1]+", "+result[2]+")");}';
    tangon['code'] = golfie;
    var _closure1_slot10 = tangon;
    tangon = {};
    golfie = 'function SaturationValueColorPickerTsx3({x:x,y:y}){const{saturation,normalizeValue,width,value,height}=this.__closure;saturation.set(normalizeValue(x/width));value.set(1-normalizeValue(y/height));}';
    tangon['code'] = golfie;
    var _closure1_slot11 = tangon;
    tangon = {};
    golfie = 'function SaturationValueColorPickerTsx4(){const{onPanFinalize,runOnJS}=this.__closure;onPanFinalize!=null&&runOnJS(onPanFinalize)();}';
    tangon['code'] = golfie;
    var _closure1_slot12 = tangon;
    tangon = {};
    golfie = 'function SaturationValueColorPickerTsx5(){const{hsvToRgbWorklet,hue,saturation,value,colorBoxWidth,colorBoxHeight}=this.__closure;const rgb=hsvToRgbWorklet({h:hue.get(),s:saturation.get(),v:value.get()});const bgRgb=hsvToRgbWorklet({h:hue.get(),s:0,v:Math.round(1-value.get())});return{backgroundColor:"rgb("+rgb[0]+", "+rgb[1]+", "+rgb[2]+")",transform:[{translateX:colorBoxWidth*saturation.get()},{translateY:colorBoxHeight*(1-value.get())}],borderColor:"rgb("+bgRgb[0]+", "+bgRgb[1]+", "+bgRgb[2]+")"};}';
    tangon['code'] = golfie;
    var _closure1_slot13 = tangon;
    tangon = 10;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/color_picker/SaturationValueColorPicker.tsx';
    tangon = report.bind(oscard)(tangon);
    michal = function(argFoo) { // Original name: SaturationValueColorPicker
        entity = argFoo;
        update = entity.hue;
        var _closure2_slot0 = update;
        output = entity.saturation;
        var _closure2_slot1 = output;
        sizing = entity.value;
        var _closure2_slot2 = sizing;
        ctrled = entity.onPanFinalize;
        kiloes = entity.style;
        entity = _closure1_slot8;
        tangon = undefined;
        verify = entity.bind(tangon)();
        report = _closure1_slot4;
        michal = report.useState;
        entity = 0;
        option = michal.bind(report)(entity);
        report = _closure1_slot3;
        michal = 2;
        report = report.bind(tangon)(option, michal);
        echoed = report[entity];
        var _closure2_slot3 = echoed;
        option = 1;
        report = report[option];
        var _closure2_slot4 = report;
        offset = _closure1_slot4;
        report = offset.useState;
        offset = report.bind(offset)(entity);
        report = _closure1_slot3;
        report = report.bind(tangon)(offset, michal);
        result = report[entity];
        var _closure2_slot5 = result;
        report = report[option];
        var _closure2_slot6 = report;
        offset = _closure1_slot4;
        report = offset.useState;
        offset = report.bind(offset)(entity);
        report = _closure1_slot3;
        report = report.bind(tangon)(offset, michal);
        entity = report[entity];
        var _closure2_slot7 = entity;
        report = report[option];
        var _closure2_slot8 = report;
        report = function(argFoo, argBar, argBaz, argCor, argGra) { // Original name: useGesture
            zuuluu = argFoo;
            michal = argBar;
            offset = argBaz;
            verify = argCor;
            option = argGra;
            var _closure3_slot0 = zuuluu;
            var _closure3_slot1 = michal;
            var _closure3_slot2 = offset;
            var _closure3_slot3 = verify;
            var _closure3_slot4 = option;
            entity = {};
            golfie = _closure1_slot4;
            oscard = golfie.useMemo;
            report = new Array(5);
            report[0] = offset;
            report[1] = verify;
            report[2] = zuuluu;
            report[3] = michal;
            report[4] = option;
            tangon = function() {
                report = function(argFoo) { // Original name: o
                    entity = argFoo;
                    romeon = entity.x;
                    golfie = entity.y;
                    verify = _closure3_slot0;
                    tangon = verify.set;
                    oscard = _closure1_slot0;
                    option = _closure1_slot2;
                    report = 7;
                    zuuluu = option[report];
                    entity = undefined;
                    yankee = oscard.bind(entity)(zuuluu);
                    offset = yankee.normalizeValue;
                    zuuluu = _closure3_slot2;
                    zuuluu = romeon / zuuluu;
                    zuuluu = offset.bind(yankee)(zuuluu);
                    zuuluu = tangon.bind(verify)(zuuluu);
                    tangon = _closure3_slot1;
                    zuuluu = tangon.set;
                    report = option[report];
                    oscard = oscard.bind(entity)(report);
                    report = oscard.normalizeValue;
                    michal = _closure3_slot3;
                    michal = golfie / michal;
                    report = report.bind(oscard)(michal);
                    michal = 1;
                    michal = michal - report;
                    michal = zuuluu.bind(tangon)(michal);
                    return entity;
                };
                michal = {};
                zuuluu = _closure3_slot0;
                michal['saturation'] = zuuluu;
                option = _closure1_slot0;
                verify = _closure1_slot2;
                zuuluu = 7;
                zuuluu = verify[zuuluu];
                golfie = undefined;
                zuuluu = option.bind(golfie)(zuuluu);
                zuuluu = zuuluu.normalizeValue;
                michal['normalizeValue'] = zuuluu;
                zuuluu = _closure3_slot2;
                michal['width'] = zuuluu;
                zuuluu = _closure3_slot1;
                michal['value'] = zuuluu;
                zuuluu = _closure3_slot3;
                michal['height'] = zuuluu;
                report['__closure'] = michal;
                michal = 12006499141927.0;
                report['__workletHash'] = michal;
                michal = _closure1_slot11;
                report['__initData'] = michal;
                michal = 9;
                michal = verify[michal];
                michal = option.bind(golfie)(michal);
                zuuluu = michal.Gesture;
                michal = zuuluu.Pan;
                zuuluu = michal.bind(zuuluu)();
                michal = zuuluu.onBegin;
                zuuluu = michal.bind(zuuluu)(report);
                michal = zuuluu.onUpdate;
                zuuluu = michal.bind(zuuluu)(report);
                michal = zuuluu.onFinalize;
                entity = function() { // Original name: c
                    _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                        zuuluu = _closure3_slot4;
                        michal = null;
                        if(!(michal != zuuluu)) { _fun00004_ip = 56; continue _fun00003 }
 13:
                        tangon = _closure1_slot0;
                        zuuluu = _closure1_slot2;
                        michal = 6;
                        zuuluu = zuuluu[michal];
                        michal = undefined;
                        tangon = tangon.bind(michal)(zuuluu);
                        zuuluu = tangon.runOnJS;
                        entity = _closure3_slot4;
                        entity = zuuluu.bind(tangon)(entity);
                        entity = entity.bind(michal)();
 56:
                        entity = undefined;
                        return entity;
                    }
                };
                report = {};
                oscard = _closure3_slot4;
                report['onPanFinalize'] = oscard;
                oscard = 6;
                oscard = verify[oscard];
                oscard = option.bind(golfie)(oscard);
                oscard = oscard.runOnJS;
                report['runOnJS'] = oscard;
                entity['__closure'] = report;
                report = 4207681669293.0;
                entity['__workletHash'] = report;
                tangon = _closure1_slot12;
                entity['__initData'] = tangon;
                entity = michal.bind(zuuluu)(entity);
                return entity;
            };
            tangon = oscard.bind(golfie)(tangon, report);
            entity['gesture'] = tangon;
            entity['saturation'] = zuuluu;
            entity['value'] = michal;
            return entity;
        };
        cntext = undefined;
        record = output;
        config = sizing;
        sequen = echoed;
        vacuum = result;
        report = cntext[report](record, config, sequen, vacuum, ctrled, source);
        backup = report.gesture;
        option = _closure1_slot0;
        romeon = _closure1_slot2;
        oscard = 6;
        report = romeon[oscard];
        yankee = option.bind(tangon)(report);
        offset = yankee.useAnimatedStyle;
        report = function() { // Original name: S
            zuuluu = _closure1_slot0;
            report = _closure1_slot2;
            entity = 7;
            tangon = report[entity];
            michal = undefined;
            option = zuuluu.bind(michal)(tangon);
            golfie = option.hsvToRgbWorklet;
            oscard = {};
            tangon = _closure2_slot0;
            verify = tangon.get;
            verify = verify.bind(tangon)();
            oscard['h'] = verify;
            kiloes = _closure2_slot1;
            verify = kiloes.get;
            verify = verify.bind(kiloes)();
            oscard['s'] = verify;
            backup = _closure2_slot2;
            verify = backup.get;
            verify = verify.bind(backup)();
            oscard['v'] = verify;
            oscard = golfie.bind(option)(oscard);
            entity = report[entity];
            golfie = zuuluu.bind(michal)(entity);
            zuuluu = golfie.hsvToRgbWorklet;
            entity = {};
            michal = tangon.get;
            michal = michal.bind(tangon)();
            entity['h'] = michal;
            report = 0;
            entity['s'] = report;
            michal = global;
            offset = michal.Math;
            verify = offset.round;
            tangon = backup.get;
            option = tangon.bind(backup)();
            tangon = 1;
            option = tangon - option;
            option = verify.bind(offset)(option);
            entity['v'] = option;
            verify = zuuluu.bind(golfie)(entity);
            entity = {};
            ctrled = oscard[report];
            update = oscard[tangon];
            zuuluu = 2;
            result = oscard[zuuluu];
            oscard = michal.HermesInternal;
            offset = oscard.concat;
            option = 'rgb(';
            golfie = ', ';
            oscard = ')';
            vacuum = option;
            source = golfie;
            echoed = golfie;
            output = oscard;
            offset = vacuum[offset](ctrled, source, update, echoed, result, output, sizing);
            entity['backgroundColor'] = offset;
            yankee = {};
            foxtra = _closure2_slot3;
            offset = kiloes.get;
            offset = offset.bind(kiloes)();
            offset = foxtra * offset;
            yankee['translateX'] = offset;
            offset = new Array(2);
            offset[0] = yankee;
            yankee = {};
            foxtra = _closure2_slot5;
            romeon = backup.get;
            romeon = romeon.bind(backup)();
            romeon = tangon - romeon;
            romeon = foxtra * romeon;
            yankee['translateY'] = romeon;
            offset[1] = yankee;
            entity['transform'] = offset;
            ctrled = verify[report];
            update = verify[tangon];
            result = verify[zuuluu];
            michal = michal.HermesInternal;
            michal = michal.concat;
            vacuum = option;
            michal = vacuum[michal](ctrled, source, update, echoed, result, output, sizing);
            entity['borderColor'] = michal;
            return entity;
        };
        foxtra = {};
        source = 7;
        source = romeon[source];
        source = option.bind(tangon)(source);
        source = source.hsvToRgbWorklet;
        foxtra['hsvToRgbWorklet'] = source;
        foxtra['hue'] = update;
        foxtra['saturation'] = output;
        foxtra['value'] = sizing;
        foxtra['colorBoxWidth'] = echoed;
        foxtra['colorBoxHeight'] = result;
        report['__closure'] = foxtra;
        foxtra = 6880706874032.0;
        report['__workletHash'] = foxtra;
        foxtra = _closure1_slot13;
        report['__initData'] = foxtra;
        offset = offset.bind(yankee)(report);
        sizing = _closure1_slot4;
        foxtra = sizing.useCallback;
        yankee = function(argFoo) {
            entity = argFoo;
            entity = entity.nativeEvent;
            entity = entity.layout;
            report = entity.width;
            zuuluu = entity.height;
            tangon = _closure2_slot4;
            entity = undefined;
            tangon = tangon.bind(entity)(report);
            michal = _closure2_slot6;
            michal = michal.bind(entity)(zuuluu);
            return entity;
        };
        report = new Array(0);
        output = foxtra.bind(sizing)(yankee, report);
        sizing = _closure1_slot4;
        foxtra = sizing.useCallback;
        yankee = function(argFoo) {
            entity = argFoo;
            entity = entity.nativeEvent;
            entity = entity.layout;
            zuuluu = entity.width;
            michal = _closure2_slot8;
            entity = undefined;
            michal = michal.bind(entity)(zuuluu);
            return entity;
        };
        report = new Array(0);
        yankee = foxtra.bind(sizing)(yankee, report);
        sizing = _closure1_slot4;
        foxtra = sizing.useMemo;
        report = new Array(3);
        report[0] = entity;
        report[1] = echoed;
        report[2] = result;
        zuuluu = function() {
            entity = {};
            tangon = _closure2_slot5;
            zuuluu = _closure2_slot7;
            tangon = tangon + zuuluu;
            entity['height'] = tangon;
            michal = _closure2_slot3;
            michal = michal + zuuluu;
            entity['width'] = michal;
            return entity;
        };
        foxtra = foxtra.bind(sizing)(zuuluu, report);
        result = entity / michal;
        zuuluu = _closure1_slot7;
        michal = _closure1_slot5;
        entity = {};
        sizing = verify.container;
        report = new Array(3);
        report[0] = sizing;
        report[1] = kiloes;
        report[2] = foxtra;
        entity['style'] = report;
        foxtra = _closure1_slot6;
        report = 9;
        report = romeon[report];
        report = option.bind(tangon)(report);
        option = report.GestureDetector;
        report = {};
        report['gesture'] = backup;
        sizing = _closure1_slot6;
        kiloes = _closure1_slot5;
        backup = {};
        backup['onLayout'] = output;
        output = {};
        output['top'] = result;
        output['bottom'] = result;
        output['left'] = result;
        output['right'] = result;
        backup['hitSlop'] = output;
        echoed = _closure1_slot6;
        result = _closure1_slot14;
        output = {};
        output['hue'] = update;
        output = echoed.bind(tangon)(result, output);
        backup['children'] = output;
        backup = sizing.bind(tangon)(kiloes, backup);
        report['children'] = backup;
        option = foxtra.bind(tangon)(option, report);
        report = new Array(2);
        report[0] = option;
        option = _closure1_slot6;
        golfie = _closure1_slot1;
        oscard = romeon[oscard];
        oscard = golfie.bind(tangon)(oscard);
        golfie = oscard.View;
        oscard = {};
        oscard['onLayout'] = yankee;
        yankee = 'box-none';
        oscard['pointerEvents'] = yankee;
        yankee = verify.selector;
        verify = new Array(2);
        verify[0] = yankee;
        verify[1] = offset;
        oscard['style'] = verify;
        oscard = option.bind(tangon)(golfie, oscard);
        report[1] = oscard;
        entity['children'] = report;
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['default'] = michal;
    return entity;
})();