// app/uikit-native/TextInput.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    romeon = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = romeon;
    var _closure1_slot2 = oscard;
    entity = global;
    option = entity.Object;
    golfie = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = golfie.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    golfie = oscard[entity];
    tangon = argCor;
    entity = undefined;
    golfie = tangon.bind(entity)(golfie);
    tangon = 1;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.TextInput;
    var _closure1_slot3 = tangon;
    tangon = 2;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    option = tangon.KeyboardThemes;
    var _closure1_slot4 = option;
    yankee = tangon.Fonts;
    tangon = 3;
    tangon = oscard[tangon];
    tangon = report.bind(entity)(tangon);
    tangon = tangon.jsx;
    var _closure1_slot5 = tangon;
    tangon = 4;
    tangon = oscard[tangon];
    verify = report.bind(entity)(tangon);
    option = verify.createStyles;
    tangon = {};
    offset = {'fontSize': 16, 'alignSelf': 'center'};
    yankee = yankee.PRIMARY_MEDIUM;
    offset['fontFamily'] = yankee;
    yankee = 5;
    foxtra = oscard[yankee];
    foxtra = romeon.bind(entity)(foxtra);
    foxtra = foxtra.colors;
    foxtra = foxtra.TEXT_NORMAL;
    offset['color'] = foxtra;
    tangon['input'] = offset;
    offset = {};
    yankee = oscard[yankee];
    yankee = romeon.bind(entity)(yankee);
    yankee = yankee.colors;
    yankee = yankee.INPUT_PLACEHOLDER_TEXT;
    offset['color'] = yankee;
    tangon['placeholderTextColor'] = offset;
    tangon = option.bind(verify)(tangon);
    var _closure1_slot6 = tangon;
    tangon = golfie.forwardRef;
    michal = function(argFoo, argBar) {
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            verify = zuuluu.style;
            entity = null;
            michal = Object.create(entity);
            entity = 0;
            michal['style'] = entity;
            sizing = {};
            kiloes = zuuluu;
            backup = michal;
            report = copyDataProperties(sizing, kiloes, backup);
            entity = _closure1_slot6;
            tangon = undefined;
            oscard = entity.bind(tangon)();
            michal = _closure1_slot0;
            entity = _closure1_slot2;
            romeon = 6;
            zuuluu = entity[romeon];
            option = michal.bind(tangon)(zuuluu);
            zuuluu = option.useThemeContext;
            zuuluu = zuuluu.bind(option)();
            yankee = zuuluu.theme;
            entity = entity[romeon];
            michal = michal.bind(tangon)(entity);
            entity = michal.isThemeDark;
            michal = entity.bind(michal)(yankee);
            zuuluu = _closure1_slot1;
            option = _closure1_slot2;
            entity = 5;
            entity = option[entity];
            entity = zuuluu.bind(tangon)(entity);
            entity = entity.unsafe_rawColors;
            if(michal) { _fun00002_ip = 136; continue _fun00001 }
 128:
            offset = entity.PRIMARY_500;
            _fun00002_ip = 142; continue _fun00001;
 136:
            offset = entity.PRIMARY_100;
 142:
            zuuluu = _closure1_slot5;
            michal = _closure1_slot3;
            entity = {};
            option = argBar;
            entity['ref'] = option;
            foxtra = oscard.input;
            option = new Array(2);
            option[0] = foxtra;
            option[1] = verify;
            entity['style'] = option;
            verify = _closure1_slot0;
            option = _closure1_slot2;
            option = option[romeon];
            verify = verify.bind(tangon)(option);
            option = verify.isThemeDark;
            option = option.bind(verify)(yankee);
            verify = _closure1_slot4;
            if(option) { _fun00002_ip = 223; continue _fun00001 }
 216:
            option = verify.LIGHT;
            _fun00002_ip = 228; continue _fun00001;
 223:
            option = verify.DARK;
 228:
            entity['keyboardAppearance'] = option;
            oscard = oscard.placeholderTextColor;
            oscard = oscard.color;
            entity['placeholderTextColor'] = oscard;
            option = _closure1_slot0;
            verify = _closure1_slot2;
            oscard = 7;
            oscard = verify[oscard];
            option = option.bind(tangon)(oscard);
            oscard = option.isAndroid;
            option = oscard.bind(option)();
            oscard = offset;
            if(!option) { _fun00002_ip = 326; continue _fun00001 }
 284:
            option = _closure1_slot0;
            verify = _closure1_slot2;
            golfie = 8;
            golfie = verify[golfie];
            verify = option.bind(tangon)(golfie);
            option = verify.hexWithOpacity;
            golfie = 0.5;
            oscard = option.bind(verify)(offset, golfie);
 326:
            entity['selectionColor'] = oscard;
            sizing = entity;
            kiloes = report;
            report = copyDataProperties(sizing, kiloes);
            entity = zuuluu.bind(tangon)(michal, entity);
            return entity;
        }
    };
    michal = tangon.bind(golfie)(michal);
    tangon = 9;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'uikit-native/TextInput.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();