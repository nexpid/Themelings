// app/utils/PermissionSpecUtils.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    report = argBar;
    golfie = argBaz;
    zuuluu = argFre;
    oscard = argPlu;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golfie;
    entity = argCor;
    var _closure1_slot2 = entity;
    var _closure1_slot3 = oscard;
    entity = function(argFoo) { // Original name: getPermissionOptions
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            zuuluu = argFoo;
            michal = _closure1_slot0;
            report = _closure1_slot3;
            entity = 4;
            entity = report[entity];
            foxtra = undefined;
            tangon = michal.bind(foxtra)(entity);
            entity = tangon.isGuildEligibleForStageChannels;
            tangon = entity.bind(tangon)(zuuluu);
            entity = 5;
            entity = report[entity];
            michal = michal.bind(foxtra)(entity);
            entity = michal.getEnableForumPermissions;
            report = entity.bind(michal)(zuuluu);
            michal = _closure1_slot5;
            entity = michal.getGuild;
            oscard = entity.bind(michal)(zuuluu);
            entity = null;
            zuuluu = entity != oscard;
            if(!zuuluu) { _fun00002_ip = 116; continue _fun00001 }
 85:
            michal = _closure1_slot0;
            golfie = _closure1_slot3;
            entity = 6;
            entity = golfie[entity];
            michal = michal.bind(foxtra)(entity);
            entity = michal.isCreatorMonetizationEnabledGuild;
            zuuluu = entity.bind(michal)(oscard);
 116:
            golfie = _closure1_slot0;
            backup = _closure1_slot3;
            entity = 7;
            entity = backup[entity];
            oscard = golfie.bind(foxtra)(entity);
            michal = oscard.getSoundmojiRenderingExperiment;
            entity = {};
            option = 'getPermissionOptions';
            entity['location'] = option;
            michal = michal.bind(oscard)(entity);
            entity = {};
            oscard = 8;
            option = backup[oscard];
            option = golfie.bind(foxtra)(option);
            romeon = option.intl;
            yankee = romeon.format;
            option = backup[oscard];
            option = golfie.bind(foxtra)(option);
            option = option.t;
            verify = option.ZuzwPz;
            option = {};
            kiloes = backup[oscard];
            kiloes = golfie.bind(foxtra)(kiloes);
            output = kiloes.intl;
            sizing = output.string;
            kiloes = backup[oscard];
            kiloes = golfie.bind(foxtra)(kiloes);
            kiloes = kiloes.t;
            kiloes = kiloes.DkSwJy;
            kiloes = sizing.bind(output)(kiloes);
            option['keybind'] = kiloes;
            option = yankee.bind(romeon)(verify, option);
            entity['PRIORITY_SPEAKER_DESCRIPTION'] = option;
            option = backup[oscard];
            option = golfie.bind(foxtra)(option);
            verify = option.intl;
            option = verify.format;
            oscard = backup[oscard];
            oscard = golfie.bind(foxtra)(oscard);
            oscard = oscard.t;
            golfie = oscard.fVE8y8;
            oscard = {};
            romeon = _closure1_slot1;
            yankee = 9;
            yankee = backup[yankee];
            romeon = romeon.bind(foxtra)(yankee);
            yankee = romeon.getArticleURL;
            offset = _closure1_slot6;
            offset = offset.SOUNDBOARD;
            offset = yankee.bind(romeon)(offset);
            oscard['helpCenterArticle'] = offset;
            oscard = option.bind(verify)(golfie, oscard);
            entity['SOUNDBOARD_DESCRIPTION'] = oscard;
            entity['showStageChannelPermissions'] = tangon;
            tangon = true;
            entity['showExperimental'] = tangon;
            entity['showForumPermissions'] = report;
            entity['showMembershipManualApprovalPermissions'] = tangon;
            entity['showCreatorMonetizationAnalyticsPermission'] = zuuluu;
            entity['inSoundmojiExperiment'] = michal;
            return entity;
        }
    };
    var _closure1_slot12 = entity;
    entity = function(argFoo, argBar) { // Original name: conditionalPermissionSpec
        _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
            entity = argFoo;
            if(entity) { _fun00004_ip = 12; continue _fun00003 }
 6:
            entity = new Array(0);
            _fun00004_ip = 32; continue _fun00003;
 12:
            zuuluu = argBar;
            michal = undefined;
            zuuluu = zuuluu.bind(michal)();
            michal = new Array(1);
            michal[0] = zuuluu;
            entity = michal;
 32:
            return entity;
        }
    };
    var _closure1_slot13 = entity;
    entity = global;
    verify = entity.Object;
    option = verify.defineProperty;
    michal = {};
    entity = true;
    michal['value'] = entity;
    entity = '__esModule';
    entity = option.bind(verify)(zuuluu, entity, michal);
    entity = 0;
    michal = oscard[entity];
    entity = undefined;
    michal = report.bind(entity)(michal);
    michal = michal.VOICE_THREAD_PARENT_CHANNEL_TYPES;
    var _closure1_slot4 = michal;
    michal = 1;
    michal = oscard[michal];
    michal = golfie.bind(entity)(michal);
    var _closure1_slot5 = michal;
    michal = 2;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    golfie = michal.HelpdeskArticles;
    var _closure1_slot6 = golfie;
    golfie = michal.UserSettingsSections;
    golfie = michal.ChannelTypes;
    var _closure1_slot7 = golfie;
    golfie = michal.GuildFeatures;
    var _closure1_slot8 = golfie;
    golfie = michal.Permissions;
    var _closure1_slot9 = golfie;
    michal = michal.GuildSettingsSections;
    var _closure1_slot10 = michal;
    michal = 3;
    michal = oscard[michal];
    michal = report.bind(entity)(michal);
    michal = michal.getChannelPermissionSpecMap;
    var _closure1_slot11 = michal;
    michal = {};
    golfie = function(argFoo, argBar, argBaz, argCor) { // Original name: generateChannelPermissionSpec
        _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
            yankee = argFoo;
            ctrled = argBar;
            var _closure2_slot0 = yankee;
            michal = _closure1_slot0;
            tangon = _closure1_slot3;
            golfie = 5;
            entity = tangon[golfie];
            offset = undefined;
            report = michal.bind(offset)(entity);
            entity = report.getEnableForumPermissions;
            config = entity.bind(report)(yankee);
            oscard = _closure1_slot11;
            record = argBaz;
            sequen = argCor;
            papara = undefined;
            cntext = ctrled;
            oscard = papara[oscard](cntext, record, config, sequen, vacuum);
            var _closure2_slot1 = oscard;
            entity = _closure1_slot12;
            option = entity.bind(offset)(yankee);
            entity = 10;
            entity = tangon[entity];
            entity = michal.bind(offset)(entity);
            tangon = entity.VoiceInThreadsExperiment;
            michal = tangon.getCurrentConfig;
            entity = {};
            entity['guildId'] = yankee;
            report = '3ad37d_1';
            entity['location'] = report;
            entity = michal.bind(tangon)(entity);
            report = entity.enabled;
            if(!report) { _fun00006_ip = 152; continue _fun00005 }
 133:
            tangon = _closure1_slot4;
            michal = tangon.has;
            entity = ctrled.type;
            report = michal.bind(tangon)(entity);
 152:
            tangon = _closure1_slot0;
            verify = _closure1_slot3;
            entity = 11;
            entity = verify[entity];
            michal = tangon.bind(offset)(entity);
            entity = michal.isStageVideoEnabled;
            echoed = entity.bind(michal)(yankee);
            entity = 12;
            entity = verify[entity];
            michal = tangon.bind(offset)(entity);
            entity = michal.canCurrentUserManageMessageFilters;
            kiloes = entity.bind(michal)(yankee);
            entity = ctrled.isMediaChannel;
            michal = entity.bind(ctrled)();
            var _closure2_slot2 = michal;
            entity = 7;
            entity = verify[entity];
            verify = tangon.bind(offset)(entity);
            tangon = verify.getSoundmojiRenderingExperiment;
            entity = {};
            yankee = 'generateChannelPermissionSpec';
            entity['location'] = yankee;
            output = tangon.bind(verify)(entity);
            tangon = ctrled.type;
            entity = _closure1_slot7;
            entity = entity.GUILD_CATEGORY;
            if(!(entity !== tangon)) { _fun00006_ip = 2360; continue _fun00005 }
 275:
            entity = _closure1_slot7;
            entity = entity.GUILD_VOICE;
            if(!(entity !== tangon)) { _fun00006_ip = 1815; continue _fun00005 }
 292:
            entity = _closure1_slot7;
            entity = entity.GUILD_STAGE_VOICE;
            if(!(entity !== tangon)) { _fun00006_ip = 1192; continue _fun00005 }
 309:
            entity = _closure1_slot7;
            entity = entity.GUILD_FORUM;
            if(!(entity !== tangon)) { _fun00006_ip = 709; continue _fun00005 }
 326:
            entity = _closure1_slot7;
            entity = entity.GUILD_MEDIA;
            if(!(entity !== tangon)) { _fun00006_ip = 709; continue _fun00005 }
 343:
            yankee = _closure1_slot2;
            result = _closure1_slot3;
            verify = 13;
            entity = result[verify];
            backup = yankee.bind(offset)(entity);
            foxtra = backup.generateChannelGeneralSection;
            sizing = _closure1_slot0;
            tangon = 8;
            entity = result[tangon];
            entity = sizing.bind(offset)(entity);
            source = entity.intl;
            update = source.string;
            entity = result[tangon];
            entity = sizing.bind(offset)(entity);
            entity = entity.t;
            entity = entity.ouHggI;
            entity = update.bind(source)(entity);
            foxtra = foxtra.bind(backup)(oscard, entity);
            entity = new Array(4);
            entity[0] = foxtra;
            foxtra = result[verify];
            update = yankee.bind(offset)(foxtra);
            backup = update.generateChannelMembershipSection;
            foxtra = result[tangon];
            foxtra = sizing.bind(offset)(foxtra);
            vacuum = foxtra.intl;
            source = vacuum.string;
            foxtra = result[tangon];
            foxtra = sizing.bind(offset)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.Ny49TE;
            foxtra = source.bind(vacuum)(foxtra);
            foxtra = backup.bind(update)(oscard, foxtra);
            entity[1] = foxtra;
            foxtra = result[verify];
            source = yankee.bind(offset)(foxtra);
            update = source.generateChannelTextSection;
            foxtra = result[tangon];
            foxtra = sizing.bind(offset)(foxtra);
            vacuum = foxtra.intl;
            backup = vacuum.string;
            foxtra = result[tangon];
            foxtra = sizing.bind(offset)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.cKobOz;
            backup = backup.bind(vacuum)(foxtra);
            foxtra = {};
            vacuum = ctrled.type;
            ctrled = _closure1_slot7;
            ctrled = ctrled.GUILD_ANNOUNCEMENT;
            ctrled = vacuum !== ctrled;
            foxtra['showPrivateThreads'] = ctrled;
            ctrled = true;
            foxtra['showCreateThreads'] = ctrled;
            foxtra['inSoundmojiExperiment'] = output;
            foxtra = update.bind(source)(oscard, backup, foxtra);
            entity[2] = foxtra;
            verify = result[verify];
            yankee = yankee.bind(offset)(verify);
            verify = yankee.generateChannelAppsSection;
            foxtra = result[tangon];
            foxtra = sizing.bind(offset)(foxtra);
            backup = foxtra.intl;
            foxtra = backup.string;
            tangon = result[tangon];
            tangon = sizing.bind(offset)(tangon);
            tangon = tangon.t;
            tangon = tangon.rrh/W1;
            tangon = foxtra.bind(backup)(tangon);
            tangon = verify.bind(yankee)(oscard, tangon);
            entity[3] = tangon;
            verify = _closure1_slot13;
            tangon = function() {
                zuuluu = _closure1_slot2;
                verify = _closure1_slot3;
                michal = 13;
                michal = verify[michal];
                option = undefined;
                tangon = zuuluu.bind(option)(michal);
                zuuluu = tangon.generateChannelVoiceSection;
                michal = _closure2_slot1;
                golfie = _closure1_slot0;
                entity = 8;
                report = verify[entity];
                report = golfie.bind(option)(report);
                oscard = report.intl;
                report = oscard.string;
                entity = verify[entity];
                entity = golfie.bind(option)(entity);
                entity = entity.t;
                entity = entity.46Ra1d;
                entity = report.bind(oscard)(entity);
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            record = verify.bind(offset)(report, tangon);
            config = 4;
            cntext = entity;
            tangon = arraySpread(cntext, record, config);
            return entity;
 709:
            yankee = _closure1_slot0;
            entity = _closure1_slot3;
            sizing = 8;
            tangon = entity[sizing];
            tangon = yankee.bind(offset)(tangon);
            verify = tangon.intl;
            tangon = verify.string;
            entity = entity[sizing];
            entity = yankee.bind(offset)(entity);
            entity = entity.t;
            if(michal) { _fun00006_ip = 771; continue _fun00005 }
 756:
            yankee = entity.TS7CnZ;
            foxtra = tangon.bind(verify)(yankee);
            _fun00006_ip = 784; continue _fun00005;
 771:
            entity = entity.aSjPg4;
            foxtra = tangon.bind(verify)(entity);
 784:
            tangon = _closure1_slot0;
            entity = _closure1_slot3;
            entity = entity[sizing];
            entity = tangon.bind(offset)(entity);
            entity = entity.t;
            if(michal) { _fun00006_ip = 819; continue _fun00005 }
 809:
            ctrled = entity.1MTnqa;
            _fun00006_ip = 827; continue _fun00005;
 819:
            ctrled = entity.YjJTtL;
 827:
            verify = _closure1_slot2;
            michal = _closure1_slot3;
            tangon = 13;
            entity = michal[tangon];
            backup = verify.bind(offset)(entity);
            yankee = backup.generateChannelGeneralSection;
            vacuum = _closure1_slot0;
            entity = michal[sizing];
            entity = vacuum.bind(offset)(entity);
            update = entity.intl;
            result = update.string;
            entity = michal[sizing];
            entity = vacuum.bind(offset)(entity);
            entity = entity.t;
            entity = entity.ouHggI;
            entity = result.bind(update)(entity);
            yankee = yankee.bind(backup)(oscard, entity);
            entity = new Array(4);
            entity[0] = yankee;
            yankee = michal[tangon];
            result = verify.bind(offset)(yankee);
            backup = result.generateChannelMembershipSection;
            yankee = michal[sizing];
            yankee = vacuum.bind(offset)(yankee);
            source = yankee.intl;
            update = source.string;
            yankee = michal[sizing];
            yankee = vacuum.bind(offset)(yankee);
            yankee = yankee.t;
            yankee = yankee.Ny49TE;
            yankee = update.bind(source)(yankee);
            yankee = backup.bind(result)(oscard, yankee);
            entity[1] = yankee;
            michal = michal[tangon];
            yankee = verify.bind(offset)(michal);
            verify = yankee.generateChannelTextSection;
            michal = {'showPrivateThreads': false, 'showCreateThreads': false};
            backup = undefined;
            if(!kiloes) { _fun00006_ip = 1061; continue _fun00005 }
 1014:
            update = _closure1_slot0;
            result = _closure1_slot3;
            result = result[sizing];
            result = update.bind(offset)(result);
            source = result.intl;
            update = source.format;
            result = {};
            vacuum = function() { // Original name: setUpAutomod
                _fun00007: for(var _fun00008_ip = 0; ; ) switch(_fun00008_ip) {
 0:
                    entity = _closure2_slot2;
                    if(entity) { _fun00008_ip = 45; continue _fun00007 }
 10:
                    tangon = _closure1_slot0;
                    michal = _closure1_slot3;
                    entity = 15;
                    michal = michal[entity];
                    entity = undefined;
                    michal = tangon.bind(entity)(michal);
                    entity = michal.trackForumEnableAutomodClicked;
                    entity = entity.bind(michal)();
 45:
                    report = _closure1_slot1;
                    tangon = _closure1_slot3;
                    entity = 14;
                    tangon = tangon[entity];
                    entity = undefined;
                    report = report.bind(entity)(tangon);
                    tangon = report.open;
                    zuuluu = _closure2_slot0;
                    michal = _closure1_slot10;
                    michal = michal.GUILD_AUTOMOD;
                    michal = tangon.bind(report)(zuuluu, michal);
                    return entity;
                }
            };
            result['setUpAutomod'] = vacuum;
            backup = update.bind(source)(ctrled, result);
 1061:
            michal['sectionDescription'] = backup;
            michal['inSoundmojiExperiment'] = output;
            michal = verify.bind(yankee)(oscard, foxtra, michal);
            entity[2] = michal;
            verify = _closure1_slot2;
            michal = _closure1_slot3;
            tangon = michal[tangon];
            verify = verify.bind(offset)(tangon);
            tangon = verify.generateChannelAppsSection;
            backup = _closure1_slot0;
            yankee = michal[sizing];
            yankee = backup.bind(offset)(yankee);
            foxtra = yankee.intl;
            yankee = foxtra.string;
            michal = michal[sizing];
            michal = backup.bind(offset)(michal);
            michal = michal.t;
            michal = michal.rrh/W1;
            michal = yankee.bind(foxtra)(michal);
            michal = tangon.bind(verify)(oscard, michal);
            entity[3] = michal;
            tangon = _closure1_slot13;
            michal = function() {
                zuuluu = _closure1_slot2;
                verify = _closure1_slot3;
                michal = 13;
                michal = verify[michal];
                option = undefined;
                tangon = zuuluu.bind(option)(michal);
                zuuluu = tangon.generateChannelVoiceSection;
                michal = _closure2_slot1;
                golfie = _closure1_slot0;
                entity = 8;
                report = verify[entity];
                report = golfie.bind(option)(report);
                oscard = report.intl;
                report = oscard.string;
                entity = verify[entity];
                entity = golfie.bind(option)(entity);
                entity = entity.t;
                entity = entity.46Ra1d;
                entity = report.bind(oscard)(entity);
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            record = tangon.bind(offset)(report, michal);
            config = 4;
            cntext = entity;
            michal = arraySpread(cntext, record, config);
            return entity;
 1192:
            verify = _closure1_slot2;
            michal = _closure1_slot3;
            tangon = 13;
            entity = michal[tangon];
            backup = verify.bind(offset)(entity);
            foxtra = backup.generateChannelGeneralSection;
            result = _closure1_slot0;
            sizing = 8;
            entity = michal[sizing];
            entity = result.bind(offset)(entity);
            yankee = entity.intl;
            report = yankee.string;
            entity = michal[sizing];
            entity = result.bind(offset)(entity);
            entity = entity.t;
            entity = entity.ouHggI;
            report = report.bind(yankee)(entity);
            entity = {};
            yankee = false;
            entity['showManageWebhooks'] = yankee;
            report = foxtra.bind(backup)(oscard, report, entity);
            entity = new Array(7);
            entity[0] = report;
            report = michal[tangon];
            backup = verify.bind(offset)(report);
            foxtra = backup.generateChannelMembershipSection;
            report = michal[sizing];
            report = result.bind(offset)(report);
            source = report.intl;
            update = source.string;
            report = michal[sizing];
            report = result.bind(offset)(report);
            report = report.t;
            report = report.Ny49TE;
            report = update.bind(source)(report);
            report = foxtra.bind(backup)(oscard, report);
            entity[1] = report;
            report = michal[tangon];
            backup = verify.bind(offset)(report);
            foxtra = backup.generateChannelStageVoiceSection;
            report = michal[sizing];
            report = result.bind(offset)(report);
            source = report.intl;
            update = source.string;
            report = michal[sizing];
            report = result.bind(offset)(report);
            report = report.t;
            report = report.46Ra1d;
            report = update.bind(source)(report);
            report = foxtra.bind(backup)(oscard, report, echoed);
            entity[2] = report;
            report = michal[tangon];
            backup = verify.bind(offset)(report);
            foxtra = backup.generateChannelStageSection;
            report = michal[sizing];
            report = result.bind(offset)(report);
            update = report.intl;
            echoed = update.string;
            report = michal[sizing];
            report = result.bind(offset)(report);
            report = report.t;
            report = report.yniaur;
            report = echoed.bind(update)(report);
            report = foxtra.bind(backup)(oscard, report);
            entity[3] = report;
            report = michal[tangon];
            backup = verify.bind(offset)(report);
            foxtra = backup.generateChannelEventsSection;
            report = michal[sizing];
            report = result.bind(offset)(report);
            update = report.intl;
            echoed = update.string;
            report = michal[sizing];
            report = result.bind(offset)(report);
            report = report.t;
            report = report.b8lplZ;
            report = echoed.bind(update)(report);
            report = foxtra.bind(backup)(oscard, report);
            entity[4] = report;
            report = michal[tangon];
            foxtra = verify.bind(offset)(report);
            verify = foxtra.generateChannelVoiceChatSection;
            report = michal[sizing];
            report = result.bind(offset)(report);
            backup = report.intl;
            report = backup.string;
            michal = michal[sizing];
            michal = result.bind(offset)(michal);
            michal = michal.t;
            michal = michal.iqlsnJ;
            report = report.bind(backup)(michal);
            michal = {};
            backup = undefined;
            if(!kiloes) { _fun00006_ip = 1703; continue _fun00005 }
 1636:
            echoed = _closure1_slot0;
            result = _closure1_slot3;
            update = result[sizing];
            update = echoed.bind(offset)(update);
            source = update.intl;
            update = source.format;
            result = result[sizing];
            result = echoed.bind(offset)(result);
            result = result.t;
            echoed = result.4Z9FbW;
            result = {};
            ctrled = function() { // Original name: setUpAutomod
                tangon = _closure1_slot1;
                zuuluu = _closure1_slot3;
                entity = 14;
                zuuluu = zuuluu[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.open;
                zuuluu = _closure2_slot0;
                michal = _closure1_slot10;
                michal = michal.GUILD_AUTOMOD;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            result['setUpAutomod'] = ctrled;
            backup = update.bind(source)(echoed, result);
 1703:
            michal['sectionDescription'] = backup;
            michal['inSoundmojiExperiment'] = output;
            michal = verify.bind(foxtra)(oscard, report, michal);
            entity[5] = michal;
            report = _closure1_slot2;
            michal = _closure1_slot3;
            tangon = michal[tangon];
            verify = report.bind(offset)(tangon);
            report = verify.generateChannelAppsSection;
            backup = _closure1_slot0;
            tangon = michal[sizing];
            tangon = backup.bind(offset)(tangon);
            foxtra = tangon.intl;
            tangon = foxtra.string;
            michal = michal[sizing];
            michal = backup.bind(offset)(michal);
            michal = michal.t;
            michal = michal.rrh/W1;
            tangon = tangon.bind(foxtra)(michal);
            michal = {};
            michal['showActivities'] = yankee;
            michal = report.bind(verify)(oscard, tangon, michal);
            entity[6] = michal;
            return entity;
 1815:
            verify = _closure1_slot2;
            michal = _closure1_slot3;
            tangon = 13;
            entity = michal[tangon];
            foxtra = verify.bind(offset)(entity);
            yankee = foxtra.generateChannelGeneralSection;
            sizing = _closure1_slot0;
            backup = 8;
            entity = michal[backup];
            entity = sizing.bind(offset)(entity);
            result = entity.intl;
            report = result.string;
            entity = michal[backup];
            entity = sizing.bind(offset)(entity);
            entity = entity.t;
            entity = entity.ouHggI;
            report = report.bind(result)(entity);
            entity = {};
            result = true;
            entity['showManageWebhooks'] = result;
            report = yankee.bind(foxtra)(oscard, report, entity);
            entity = new Array(6);
            entity[0] = report;
            report = michal[tangon];
            foxtra = verify.bind(offset)(report);
            yankee = foxtra.generateChannelMembershipSection;
            report = michal[backup];
            report = sizing.bind(offset)(report);
            echoed = report.intl;
            result = echoed.string;
            report = michal[backup];
            report = sizing.bind(offset)(report);
            report = report.t;
            report = report.Ny49TE;
            report = result.bind(echoed)(report);
            report = yankee.bind(foxtra)(oscard, report);
            entity[1] = report;
            report = michal[tangon];
            foxtra = verify.bind(offset)(report);
            yankee = foxtra.generateChannelVoiceSection;
            report = michal[backup];
            report = sizing.bind(offset)(report);
            echoed = report.intl;
            result = echoed.string;
            report = michal[backup];
            report = sizing.bind(offset)(report);
            report = report.t;
            report = report.46Ra1d;
            report = result.bind(echoed)(report);
            report = yankee.bind(foxtra)(oscard, report);
            entity[2] = report;
            report = michal[tangon];
            yankee = verify.bind(offset)(report);
            verify = yankee.generateChannelVoiceChatSection;
            report = michal[backup];
            report = sizing.bind(offset)(report);
            foxtra = report.intl;
            report = foxtra.string;
            michal = michal[backup];
            michal = sizing.bind(offset)(michal);
            michal = michal.t;
            michal = michal.iqlsnJ;
            report = report.bind(foxtra)(michal);
            michal = {};
            foxtra = undefined;
            if(!kiloes) { _fun00006_ip = 2187; continue _fun00005 }
 2120:
            sizing = _closure1_slot0;
            kiloes = _closure1_slot3;
            result = kiloes[backup];
            result = sizing.bind(offset)(result);
            echoed = result.intl;
            result = echoed.format;
            kiloes = kiloes[backup];
            kiloes = sizing.bind(offset)(kiloes);
            kiloes = kiloes.t;
            sizing = kiloes.4Z9FbW;
            kiloes = {};
            update = function() { // Original name: setUpAutomod
                tangon = _closure1_slot1;
                zuuluu = _closure1_slot3;
                entity = 14;
                zuuluu = zuuluu[entity];
                entity = undefined;
                report = tangon.bind(entity)(zuuluu);
                tangon = report.open;
                zuuluu = _closure2_slot0;
                michal = _closure1_slot10;
                michal = michal.GUILD_AUTOMOD;
                michal = tangon.bind(report)(zuuluu, michal);
                return entity;
            };
            kiloes['setUpAutomod'] = update;
            foxtra = result.bind(echoed)(sizing, kiloes);
 2187:
            michal['sectionDescription'] = foxtra;
            michal['inSoundmojiExperiment'] = output;
            michal = verify.bind(yankee)(oscard, report, michal);
            entity[3] = michal;
            report = _closure1_slot2;
            michal = _closure1_slot3;
            verify = michal[tangon];
            kiloes = report.bind(offset)(verify);
            yankee = kiloes.generateChannelEventsSection;
            foxtra = _closure1_slot0;
            verify = michal[backup];
            verify = foxtra.bind(offset)(verify);
            result = verify.intl;
            sizing = result.string;
            verify = michal[backup];
            verify = foxtra.bind(offset)(verify);
            verify = verify.t;
            verify = verify.b8lplZ;
            verify = sizing.bind(result)(verify);
            verify = yankee.bind(kiloes)(oscard, verify);
            entity[4] = verify;
            tangon = michal[tangon];
            report = report.bind(offset)(tangon);
            tangon = report.generateChannelAppsSection;
            verify = michal[backup];
            verify = foxtra.bind(offset)(verify);
            yankee = verify.intl;
            verify = yankee.string;
            michal = michal[backup];
            michal = foxtra.bind(offset)(michal);
            michal = michal.t;
            michal = michal.rrh/W1;
            michal = verify.bind(yankee)(michal);
            michal = tangon.bind(report)(oscard, michal);
            entity[5] = michal;
            return entity;
 2360:
            report = _closure1_slot2;
            yankee = _closure1_slot3;
            tangon = 13;
            entity = yankee[tangon];
            backup = report.bind(offset)(entity);
            foxtra = backup.generateChannelGeneralSection;
            verify = _closure1_slot0;
            michal = 8;
            entity = yankee[michal];
            entity = verify.bind(offset)(entity);
            sizing = entity.intl;
            kiloes = sizing.string;
            entity = yankee[michal];
            entity = verify.bind(offset)(entity);
            entity = entity.t;
            entity = entity.AkPxc3;
            entity = kiloes.bind(sizing)(entity);
            foxtra = foxtra.bind(backup)(oscard, entity);
            entity = new Array(6);
            entity[0] = foxtra;
            foxtra = yankee[tangon];
            kiloes = report.bind(offset)(foxtra);
            backup = kiloes.generateChannelMembershipSection;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            result = foxtra.intl;
            sizing = result.string;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.Ny49TE;
            foxtra = sizing.bind(result)(foxtra);
            foxtra = backup.bind(kiloes)(oscard, foxtra);
            entity[1] = foxtra;
            foxtra = yankee[tangon];
            sizing = report.bind(offset)(foxtra);
            kiloes = sizing.generateChannelTextSection;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            result = foxtra.intl;
            backup = result.string;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.cKobOz;
            backup = backup.bind(result)(foxtra);
            foxtra = {'showPrivateThreads': true, 'showCreateThreads': true};
            foxtra['inSoundmojiExperiment'] = output;
            foxtra = kiloes.bind(sizing)(oscard, backup, foxtra);
            entity[2] = foxtra;
            foxtra = yankee[tangon];
            kiloes = report.bind(offset)(foxtra);
            backup = kiloes.generateChannelVoiceSection;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            output = foxtra.intl;
            sizing = output.string;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.46Ra1d;
            foxtra = sizing.bind(output)(foxtra);
            foxtra = backup.bind(kiloes)(oscard, foxtra);
            entity[3] = foxtra;
            foxtra = yankee[tangon];
            kiloes = report.bind(offset)(foxtra);
            backup = kiloes.generateChannelAppsSection;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            output = foxtra.intl;
            sizing = output.string;
            foxtra = yankee[michal];
            foxtra = verify.bind(offset)(foxtra);
            foxtra = foxtra.t;
            foxtra = foxtra.rrh/W1;
            foxtra = sizing.bind(output)(foxtra);
            foxtra = backup.bind(kiloes)(oscard, foxtra);
            entity[4] = foxtra;
            romeon = _closure1_slot13;
            option = option.showStageChannelPermissions;
            zuuluu = function() {
                zuuluu = _closure1_slot2;
                verify = _closure1_slot3;
                michal = 13;
                michal = verify[michal];
                option = undefined;
                tangon = zuuluu.bind(option)(michal);
                zuuluu = tangon.generateChannelStageSection;
                michal = _closure2_slot1;
                golfie = _closure1_slot0;
                entity = 8;
                report = verify[entity];
                report = golfie.bind(option)(report);
                oscard = report.intl;
                report = oscard.string;
                entity = verify[entity];
                entity = golfie.bind(option)(entity);
                entity = entity.t;
                entity = entity.yniaur;
                entity = report.bind(oscard)(entity);
                entity = zuuluu.bind(tangon)(michal, entity);
                return entity;
            };
            record = romeon.bind(offset)(option, zuuluu);
            cntext = entity;
            config = golfie;
            zuuluu = arraySpread(cntext, record, config);
            tangon = yankee[tangon];
            report = report.bind(offset)(tangon);
            tangon = report.generateChannelEventsSection;
            golfie = yankee[michal];
            golfie = verify.bind(offset)(golfie);
            option = golfie.intl;
            golfie = option.string;
            michal = yankee[michal];
            michal = verify.bind(offset)(michal);
            michal = michal.t;
            michal = michal.b8lplZ;
            michal = golfie.bind(option)(michal);
            michal = tangon.bind(report)(oscard, michal);
            entity[zuuluu] = michal;
            michal = 1;
            michal = zuuluu + michal;
            return entity;
        }
    };
    michal['generateChannelPermissionSpec'] = golfie;
    golfie = function(argFoo) { // Original name: generateGuildPermissionSpec
        _fun00009: for(var _fun00010_ip = 0; ; ) switch(_fun00010_ip) {
 0:
            entity = argFoo;
            michal = global;
            michal = michal.Set;
            zuuluu = michal.prototype;
            zuuluu = Object.create(zuuluu, {constructor: {value: michal}});
            verify = zuuluu;
            michal = new verify[michal](option);
            tangon = michal instanceof Object ? michal : zuuluu;
            zuuluu = entity.hasFeature;
            michal = _closure1_slot8;
            michal = michal.COMMUNITY;
            michal = zuuluu.bind(entity)(michal);
            if(michal) { _fun00010_ip = 87; continue _fun00009 }
 58:
            zuuluu = tangon.add;
            michal = _closure1_slot9;
            report = michal.VIEW_GUILD_ANALYTICS;
            michal = report.toString;
            michal = michal.bind(report)();
            michal = zuuluu.bind(tangon)(michal);
 87:
            report = _closure1_slot2;
            zuuluu = _closure1_slot3;
            michal = 13;
            michal = zuuluu[michal];
            zuuluu = undefined;
            report = report.bind(zuuluu)(michal);
            michal = report.generateGuildPermissionSpec;
            oscard = _closure1_slot12;
            entity = entity.id;
            entity = oscard.bind(zuuluu)(entity);
            michal = michal.bind(report)(entity);
            entity = function(argFoo, argBar) { // Original name: filterPermissions
                _fun00011: for(var _fun00012_ip = 0; ; ) switch(_fun00012_ip) {
 0:
                    tangon = argFoo;
                    entity = argBar;
                    var _closure3_slot0 = entity;
                    report = entity.size;
                    zuuluu = 0;
                    entity = tangon;
                    if(!(zuuluu !== report)) { _fun00012_ip = 43; continue _fun00011 }
 26:
                    zuuluu = tangon.map;
                    michal = function(argFoo) {
                        michal = argFoo;
                        entity = {};
                        oscard = entity;
                        report = michal;
                        zuuluu = copyDataProperties(oscard, report);
                        tangon = michal.permissions;
                        zuuluu = tangon.filter;
                        michal = function(argFoo) {
                            zuuluu = _closure3_slot0;
                            michal = zuuluu.has;
                            entity = argFoo;
                            tangon = entity.flag;
                            entity = tangon.toString;
                            entity = entity.bind(tangon)();
                            entity = michal.bind(zuuluu)(entity);
                            entity = !entity;
                            return entity;
                        };
                        zuuluu = zuuluu.bind(tangon)(michal);
                        michal = 'permissions';
                        entity[michal] = zuuluu;
                        return entity;
                    };
                    entity = zuuluu.bind(tangon)(michal);
 43:
                    return entity;
                }
            };
            entity = entity.bind(zuuluu)(michal, tangon);
            return entity;
        }
    };
    michal['generateGuildPermissionSpec'] = golfie;
    tangon = function(argFoo) { // Original name: getGuildPermissionSpecMap
        zuuluu = _closure1_slot2;
        tangon = _closure1_slot3;
        michal = 13;
        michal = tangon[michal];
        report = undefined;
        zuuluu = zuuluu.bind(report)(michal);
        michal = zuuluu.getGuildPermissionSpec;
        tangon = _closure1_slot12;
        entity = argFoo;
        entity = entity.id;
        entity = tangon.bind(report)(entity);
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    michal['getGuildPermissionSpecMap'] = tangon;
    tangon = 16;
    tangon = oscard[tangon];
    oscard = report.bind(entity)(tangon);
    report = oscard.fileFinishedImporting;
    tangon = 'utils/PermissionSpecUtils.tsx';
    tangon = report.bind(oscard)(tangon);
    zuuluu['default'] = michal;
    return entity;
})();