// app/utils/native/HcaptchaModal.tsx
export default (function(argFoo, argBar, argBaz, argCorge, _, argFred, argPlugh) {
    report = argBar;
    golf = argBaz;
    zulu = argFred;
    oscar = argPlugh;
    var _closure1_slot0 = report;
    var _closure1_slot1 = golf;
    var _closure1_slot2 = oscar;
    entity = global;
    verify = entity.Object;
    options = verify.defineProperty;
    tango = {};
    entity = true;
    tango['value'] = entity;
    entity = '__esModule';
    entity = options.bind(verify)(zulu, entity, tango);
    entity = 0;
    options = oscar[entity];
    tango = argCorge;
    entity = undefined;
    tango = tango.bind(entity)(options);
    tango = 1;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    options = tango.View;
    var _closure1_slot3 = options;
    options = tango.ActivityIndicator;
    var _closure1_slot4 = options;
    tango = tango.StyleSheet;
    var _closure1_slot5 = tango;
    tango = 2;
    tango = oscar[tango];
    tango = golf.bind(entity)(tango);
    var _closure1_slot6 = tango;
    tango = 3;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    golf = tango.ModalAnimation;
    tango = 4;
    options = oscar[tango];
    options = report.bind(entity)(options);
    options = options.jsx;
    var _closure1_slot7 = options;
    tango = oscar[tango];
    tango = report.bind(entity)(tango);
    tango = tango.jsxs;
    var _closure1_slot8 = tango;
    tango = 5;
    tango = oscar[tango];
    verify = report.bind(entity)(tango);
    options = verify.createStyles;
    tango = {};
    offset = {'flex': 1, 'justifyContent': 'center', 'alignItems': 'center'};
    tango['container'] = offset;
    tango = options.bind(verify)(tango);
    var _closure1_slot9 = tango;
    mike = function(argFoo) { // Original name: HcaptchaModal
        _fun122869: for(var _fun122869_ip = 0; ; ) switch(_fun122869_ip) {
 0:
            entity = _closure1_slot9;
            tango = undefined;
            report = entity.bind(tango)();
            zulu = _closure1_slot8;
            mike = _closure1_slot3;
            entity = {};
            report = report.container;
            entity['style'] = report;
            golf = _closure1_slot7;
            oscar = _closure1_slot4;
            report = {};
            options = 'small';
            report['size'] = options;
            verify = _closure1_slot0;
            offset = _closure1_slot2;
            options = 6;
            options = offset[options];
            verify = verify.bind(tango)(options);
            options = verify.isAndroid;
            verify = options.bind(verify)();
            options = undefined;
            if(!verify) { _fun122869_ip = 115; continue _fun122869 }
 84:
            offset = _closure1_slot1;
            romeo = _closure1_slot2;
            verify = 7;
            verify = romeo[verify];
            verify = offset.bind(tango)(verify);
            verify = verify.unsafe_rawColors;
            options = verify.WHITE_500;
 115:
            report['color'] = options;
            oscar = golf.bind(tango)(oscar, report);
            report = new Array(2);
            report[0] = oscar;
            options = _closure1_slot7;
            golf = _closure1_slot3;
            oscar = {};
            verify = _closure1_slot5;
            verify = verify.absoluteFillObject;
            oscar['style'] = verify;
            offset = _closure1_slot1;
            romeo = _closure1_slot2;
            verify = 8;
            verify = romeo[verify];
            offset = offset.bind(tango)(verify);
            verify = {};
            foxtrot = argFoo;
            backup = verify;
            romeo = copyDataProperties(backup, foxtrot);
            yankee = _closure1_slot6;
            romeo = yankee.locale;
            yankee = 'languageCode';
            verify[yankee] = romeo;
            verify = options.bind(tango)(offset, verify);
            oscar['children'] = verify;
            oscar = options.bind(tango)(golf, oscar);
            report[1] = oscar;
            entity['children'] = report;
            entity = zulu.bind(tango)(mike, entity);
            return entity;
        }
    };
    tango = {};
    golf = golf.FADE;
    tango['animation'] = golf;
    mike['modalConfig'] = tango;
    tango = 9;
    tango = oscar[tango];
    oscar = report.bind(entity)(tango);
    report = oscar.fileFinishedImporting;
    tango = 'utils/native/HcaptchaModal.tsx';
    tango = report.bind(oscar)(tango);
    zulu['default'] = mike;
    return entity;
})();