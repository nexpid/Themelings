// app/utils/native/AvatarUtils.tsx
export default (function(argFoo, argBar, argBaz, _, __, argFre, argPlu) {
    verify = argBar;
    yankee = argBaz;
    zuuluu = argFre;
    offset = argPlu;
    var _closure1_slot0 = yankee;
    var _closure1_slot1 = offset;
    tangon = function(argFoo) { // Original name: ensureAvatarSource
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            tangon = argFoo;
            michal = 'number';
            entity = typeof tangon;
            if(!(michal !== entity)) { _fun00002_ip = 38; continue _fun00001 }
 14:
            entity = global;
            michal = entity.Array;
            entity = michal.isArray;
            michal = entity.bind(michal)(tangon);
            entity = tangon;
            if(!michal) { _fun00002_ip = 56; continue _fun00001 }
 38:
            zuuluu = _closure1_slot2;
            michal = zuuluu.resolveAssetSource;
            entity = michal.bind(zuuluu)(tangon);
 56:
            return entity;
        }
    };
    romeon = global;
    golfie = romeon.Object;
    oscard = golfie.defineProperty;
    report = {};
    entity = true;
    report['value'] = entity;
    entity = '__esModule';
    entity = oscard.bind(golfie)(zuuluu, entity, report);
    entity = 0;
    report = offset[entity];
    entity = undefined;
    report = verify.bind(entity)(report);
    oscard = report.Image;
    var _closure1_slot2 = oscard;
    golfie = report.NativeModules;
    report = 1;
    report = offset[report];
    report = yankee.bind(entity)(report);
    oscard = new Array(6);
    oscard[0] = report;
    report = 2;
    report = offset[report];
    report = yankee.bind(entity)(report);
    oscard[1] = report;
    report = 3;
    report = offset[report];
    report = yankee.bind(entity)(report);
    oscard[2] = report;
    report = 4;
    report = offset[report];
    report = yankee.bind(entity)(report);
    oscard[3] = report;
    report = 5;
    report = offset[report];
    report = yankee.bind(entity)(report);
    oscard[4] = report;
    report = 6;
    report = offset[report];
    report = yankee.bind(entity)(report);
    oscard[5] = report;
    report = 7;
    report = offset[report];
    option = yankee.bind(entity)(report);
    report = new Array(6);
    report[0] = option;
    option = 8;
    option = offset[option];
    option = yankee.bind(entity)(option);
    report[1] = option;
    option = 9;
    option = offset[option];
    option = yankee.bind(entity)(option);
    report[2] = option;
    option = 10;
    option = offset[option];
    option = yankee.bind(entity)(option);
    report[3] = option;
    option = 11;
    option = offset[option];
    option = yankee.bind(entity)(option);
    report[4] = option;
    option = 12;
    option = offset[option];
    option = yankee.bind(entity)(option);
    report[5] = option;
    option = 13;
    option = offset[option];
    foxtra = yankee.bind(entity)(option);
    option = new Array(8);
    option[0] = foxtra;
    foxtra = 14;
    foxtra = offset[foxtra];
    foxtra = yankee.bind(entity)(foxtra);
    option[1] = foxtra;
    foxtra = 15;
    foxtra = offset[foxtra];
    foxtra = yankee.bind(entity)(foxtra);
    option[2] = foxtra;
    foxtra = 16;
    foxtra = offset[foxtra];
    foxtra = yankee.bind(entity)(foxtra);
    option[3] = foxtra;
    foxtra = 17;
    foxtra = offset[foxtra];
    foxtra = yankee.bind(entity)(foxtra);
    option[4] = foxtra;
    foxtra = 18;
    foxtra = offset[foxtra];
    foxtra = yankee.bind(entity)(foxtra);
    option[5] = foxtra;
    foxtra = 19;
    foxtra = offset[foxtra];
    foxtra = yankee.bind(entity)(foxtra);
    option[6] = foxtra;
    foxtra = 20;
    foxtra = offset[foxtra];
    foxtra = yankee.bind(entity)(foxtra);
    option[7] = foxtra;
    foxtra = romeon.Set;
    romeon = golfie.MediaManager;
    golfie = romeon.getConstants;
    golfie = golfie.bind(romeon)();
    sizing = golfie.supportedExtensions;
    romeon = foxtra.prototype;
    romeon = Object.create(romeon, {constructor: {value: foxtra}});
    output = romeon;
    golfie = new output[foxtra](sizing, kiloes);
    golfie = golfie instanceof Object ? golfie : romeon;
    var _closure1_slot3 = golfie;
    golfie = {};
    golfie['DEFAULT_AVATARS'] = oscard;
    golfie['DEFAULT_PROVISIONAL_AVATARS'] = report;
    golfie['DEFAULT_GROUP_DM_AVATARS'] = option;
    option = {};
    romeon = 21;
    romeon = offset[romeon];
    romeon = yankee.bind(entity)(romeon);
    option['clyde'] = romeon;
    romeon = 22;
    romeon = offset[romeon];
    romeon = yankee.bind(entity)(romeon);
    option['nitro_wumpus'] = romeon;
    golfie['BOT_AVATARS'] = option;
    option = 24;
    option = offset[option];
    option = yankee.bind(entity)(option);
    golfie['DEFAULT_CHANNEL_ICON'] = option;
    golfie['ensureAvatarSource'] = tangon;
    option = function() { // Original name: canUseWebp
        zuuluu = _closure1_slot3;
        michal = zuuluu.has;
        entity = 'webp';
        entity = michal.bind(zuuluu)(entity);
        return entity;
    };
    golfie['canUseWebp'] = option;
    option = 25;
    option = offset[option];
    offset = verify.bind(entity)(option);
    verify = offset.fileFinishedImporting;
    option = 'utils/native/AvatarUtils.tsx';
    option = verify.bind(offset)(option);
    zuuluu['default'] = golfie;
    zuuluu['DEFAULT_AVATARS'] = oscard;
    zuuluu['DEFAULT_PROVISIONAL_AVATARS'] = report;
    zuuluu['ensureAvatarSource'] = tangon;
    michal = function() { // Original name: getAutomodAvatarURL
        zuuluu = _closure1_slot0;
        michal = _closure1_slot1;
        entity = 23;
        michal = michal[entity];
        entity = undefined;
        entity = zuuluu.bind(entity)(michal);
        return entity;
    };
    zuuluu['getAutomodAvatarURL'] = michal;
    return entity;
})();