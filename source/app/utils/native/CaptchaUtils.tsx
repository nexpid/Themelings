// app/utils/native/CaptchaUtils.tsx
export default (function(argFoo, argBar, argBaz, argCor, _, argFre, argPlu) {
    oscard = argBar;
    verify = argBaz;
    zuuluu = argFre;
    golfie = argPlu;
    var _closure1_slot0 = oscard;
    var _closure1_slot1 = verify;
    var _closure1_slot2 = golfie;
    entity = global;
    option = entity.Object;
    report = option.defineProperty;
    tangon = {};
    entity = true;
    tangon['value'] = entity;
    entity = '__esModule';
    entity = report.bind(option)(zuuluu, entity, tangon);
    entity = 0;
    report = golfie[entity];
    tangon = argCor;
    entity = undefined;
    tangon = tangon.bind(entity)(report);
    var _closure1_slot3 = tangon;
    tangon = 1;
    tangon = golfie[tangon];
    report = oscard.bind(entity)(tangon);
    tangon = report.NativeModules;
    option = report.NativeEventEmitter;
    report = report.Keyboard;
    var _closure1_slot4 = report;
    report = 2;
    report = golfie[report];
    report = verify.bind(entity)(report);
    var _closure1_slot5 = report;
    report = 3;
    report = golfie[report];
    report = verify.bind(entity)(report);
    var _closure1_slot6 = report;
    report = 4;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    verify = report.CaptchaEvent;
    var _closure1_slot7 = verify;
    verify = report.RECAPTCHA_SITE_KEY;
    var _closure1_slot8 = verify;
    report = report.AnalyticEvents;
    var _closure1_slot9 = report;
    report = 5;
    report = golfie[report];
    report = oscard.bind(entity)(report);
    report = report.jsx;
    var _closure1_slot10 = report;
    tangon = tangon.CaptchaManager;
    var _closure1_slot11 = tangon;
    report = option.prototype;
    report = Object.create(report, {constructor: {value: option}});
    foxtra = report;
    romeon = tangon;
    tangon = new foxtra[option](romeon, yankee);
    tangon = tangon instanceof Object ? tangon : report;
    var _closure1_slot12 = tangon;
    tangon = function(argFoo, argBar, argBaz, argCor) { // Original name: trackCaptchaEvent
        verify = argFoo;
        option = argCor;
        zuuluu = _closure1_slot1;
        golfie = _closure1_slot2;
        entity = 6;
        michal = golfie[entity];
        entity = undefined;
        offset = zuuluu.bind(entity)(michal);
        oscard = offset.track;
        michal = _closure1_slot9;
        tangon = michal.CAPTCHA_EVENT;
        michal = {};
        michal['captcha_event_name'] = verify;
        michal['captcha_service'] = option;
        yankee = argBaz;
        michal['sitekey'] = yankee;
        yankee = argBar;
        michal['captcha_flow_key'] = yankee;
        michal = oscard.bind(offset)(tangon, michal);
        michal = 7;
        michal = golfie[michal];
        tangon = zuuluu.bind(entity)(michal);
        zuuluu = tangon.increment;
        michal = {};
        oscard = _closure1_slot0;
        report = 8;
        report = golfie[report];
        report = oscard.bind(entity)(report);
        report = report.MetricEvents;
        report = report.CAPTCHA_EVENT;
        michal['name'] = report;
        oscard = global;
        report = oscard.HermesInternal;
        golfie = report.concat;
        report = 'event_name:';
        golfie = golfie.bind(report)(verify);
        report = new Array(2);
        report[0] = golfie;
        oscard = oscard.HermesInternal;
        golfie = oscard.concat;
        oscard = 'captcha_service:';
        oscard = golfie.bind(oscard)(option);
        report[1] = oscard;
        michal['tags'] = report;
        michal = zuuluu.bind(tangon)(michal);
        return entity;
    };
    var _closure1_slot13 = tangon;
    tangon = {};
    report = function() { // Original name: showCaptcha
        _fun00001: for(var _fun00002_ip = 0; ; ) switch(_fun00002_ip) {
 0:
            michal = arguments[0];
            report = arguments[1];
            tangon = this;
            oscard = undefined;
            if(!(michal === oscard)) { _fun00002_ip = 50; continue _fun00001 }
 15:
            zuuluu = _closure1_slot0;
            golfie = _closure1_slot2;
            entity = 11;
            entity = golfie[entity];
            entity = zuuluu.bind(oscard)(entity);
            entity = entity.CaptchaTypes;
            michal = entity.RECAPTCHA;
 50:
            golfie = _closure1_slot4;
            zuuluu = golfie.dismiss;
            zuuluu = zuuluu.bind(golfie)();
            option = _closure1_slot1;
            golfie = _closure1_slot2;
            zuuluu = 6;
            zuuluu = golfie[zuuluu];
            offset = option.bind(oscard)(zuuluu);
            verify = offset.track;
            zuuluu = _closure1_slot9;
            option = zuuluu.OPEN_MODAL;
            zuuluu = {};
            yankee = 'CAPTCHA';
            zuuluu['type'] = yankee;
            zuuluu = verify.bind(offset)(option, zuuluu);
            zuuluu = _closure1_slot0;
            entity = 11;
            entity = golfie[entity];
            entity = zuuluu.bind(oscard)(entity);
            entity = entity.CaptchaTypes;
            entity = entity.HCAPTCHA;
            if(!(michal === entity)) { _fun00002_ip = 156; continue _fun00001 }
 150:
            entity = null;
            if(!(entity == report)) { _fun00002_ip = 168; continue _fun00001 }
 156:
            entity = tangon.showRecaptcha;
            entity = entity.bind(tangon)();
            _fun00002_ip = 183; continue _fun00001;
 168:
            zuuluu = tangon.showHcaptcha;
            michal = arguments[2];
            entity = zuuluu.bind(tangon)(report, michal);
 183:
            return entity;
        }
    };
    tangon['showCaptcha'] = report;
    report = function() { // Original name: closeCaptcha
        michal = _closure1_slot11;
        entity = michal.closeCaptcha;
        entity = entity.bind(michal)();
        entity = undefined;
        return entity;
    };
    tangon['closeCaptcha'] = report;
    report = function(argFoo, argBar) { // Original name: showHcaptcha
        michal = argFoo;
        var _closure2_slot0 = michal;
        michal = argBar;
        var _closure2_slot1 = michal;
        michal = global;
        zuuluu = michal.Promise;
        michal = zuuluu.prototype;
        michal = Object.create(michal, {constructor: {value: zuuluu}});
        tangon = function(argFoo, argBar) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            entity = argBar;
            var _closure3_slot1 = entity;
            verify = _closure1_slot0;
            zuuluu = _closure1_slot2;
            entity = 10;
            michal = zuuluu[entity];
            entity = undefined;
            report = verify.bind(entity)(michal);
            michal = report.v4;
            yankee = michal.bind(report)();
            var _closure3_slot2 = yankee;
            offset = _closure1_slot13;
            option = _closure2_slot0;
            report = 11;
            report = zuuluu[report];
            report = verify.bind(entity)(report);
            report = report.CaptchaTypes;
            romeon = report.HCAPTCHA;
            kiloes = 'initial-load';
            sizing = undefined;
            backup = yankee;
            foxtra = option;
            report = sizing[offset](kiloes, backup, foxtra, romeon, yankee);
            report = _closure1_slot1;
            tangon = 14;
            tangon = zuuluu[tangon];
            oscard = report.bind(entity)(tangon);
            report = oscard.pushLazy;
            tangon = 16;
            tangon = zuuluu[tangon];
            verify = verify.bind(entity)(tangon);
            tangon = 15;
            tangon = zuuluu[tangon];
            zuuluu = zuuluu.paths;
            tangon = verify.bind(entity)(tangon, zuuluu);
            zuuluu = {};
            zuuluu['siteKey'] = option;
            golfie = function(argFoo) { // Original name: onMessage
                _fun00003: for(var _fun00004_ip = 0; ; ) switch(_fun00004_ip) {
 0:
                    michal = argFoo;
                    tangon = null;
                    report = tangon == michal;
                    entity = undefined;
                    zuuluu = undefined;
                    if(report) { _fun00004_ip = 26; continue _fun00003 }
 16:
                    report = michal.nativeEvent;
                    zuuluu = report.data;
 26:
                    if(!(tangon != zuuluu)) { _fun00004_ip = 334; continue _fun00003 }
 33:
                    michal = michal.nativeEvent;
                    zuuluu = michal.data;
                    report = _closure1_slot0;
                    michal = _closure1_slot2;
                    oscard = 13;
                    michal = michal[oscard];
                    michal = report.bind(entity)(michal);
                    michal = michal.CaptchaError;
                    michal = michal.CANCEL;
                    if(!(zuuluu !== michal)) { _fun00004_ip = 222; continue _fun00003 }
 85:
                    report = _closure1_slot0;
                    michal = _closure1_slot2;
                    michal = michal[oscard];
                    michal = report.bind(entity)(michal);
                    michal = michal.CaptchaError;
                    michal = michal.ERROR;
                    if(!(zuuluu !== michal)) { _fun00004_ip = 222; continue _fun00003 }
 118:
                    report = _closure1_slot0;
                    michal = _closure1_slot2;
                    michal = michal[oscard];
                    michal = report.bind(entity)(michal);
                    michal = michal.CaptchaError;
                    michal = michal.EXPIRED;
                    if(!(zuuluu !== michal)) { _fun00004_ip = 222; continue _fun00003 }
 151:
                    verify = _closure1_slot13;
                    foxtra = _closure3_slot2;
                    romeon = _closure2_slot0;
                    oscard = _closure1_slot0;
                    offset = _closure1_slot2;
                    report = 11;
                    report = offset[report];
                    report = oscard.bind(entity)(report);
                    report = report.CaptchaTypes;
                    yankee = report.HCAPTCHA;
                    backup = 'verify';
                    kiloes = undefined;
                    report = kiloes[verify](backup, foxtra, romeon, yankee, offset);
                    michal = _closure3_slot0;
                    michal = michal.bind(entity)(zuuluu);
                    _fun00004_ip = 334; continue _fun00003;
 222:
                    verify = _closure1_slot13;
                    foxtra = _closure3_slot2;
                    romeon = _closure2_slot0;
                    offset = _closure1_slot0;
                    golfie = _closure1_slot2;
                    report = 11;
                    report = golfie[report];
                    report = offset.bind(entity)(report);
                    report = report.CaptchaTypes;
                    yankee = report.HCAPTCHA;
                    kiloes = undefined;
                    backup = zuuluu;
                    report = kiloes[verify](backup, foxtra, romeon, yankee, offset);
                    oscard = _closure1_slot1;
                    report = 6;
                    report = golfie[report];
                    golfie = oscard.bind(entity)(report);
                    oscard = golfie.track;
                    tangon = _closure1_slot9;
                    report = tangon.CAPTCHA_FAILED;
                    tangon = {};
                    tangon['reason'] = zuuluu;
                    tangon = oscard.bind(golfie)(report, tangon);
                    michal = _closure3_slot1;
                    michal = michal.bind(entity)(zuuluu);
 334:
                    zuuluu = _closure1_slot1;
                    tangon = _closure1_slot2;
                    michal = 14;
                    michal = tangon[michal];
                    zuuluu = zuuluu.bind(entity)(michal);
                    michal = zuuluu.pop;
                    michal = michal.bind(zuuluu)();
                    return entity;
                }
            };
            zuuluu['onMessage'] = golfie;
            michal = _closure2_slot1;
            zuuluu['rqdata'] = michal;
            michal = 'hcaptcha';
            michal = report.bind(oscard)(tangon, zuuluu, michal);
            return entity;
        };
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        return entity;
    };
    tangon['showHcaptcha'] = report;
    report = function() { // Original name: showRecaptcha
        michal = this;
        var _closure2_slot0 = michal;
        michal = global;
        zuuluu = michal.Promise;
        michal = zuuluu.prototype;
        michal = Object.create(michal, {constructor: {value: zuuluu}});
        tangon = function(argFoo, argBar) {
            entity = argFoo;
            var _closure3_slot0 = entity;
            entity = argBar;
            var _closure3_slot1 = entity;
            report = _closure1_slot0;
            verify = _closure1_slot2;
            entity = 10;
            tangon = verify[entity];
            entity = undefined;
            oscard = report.bind(entity)(tangon);
            tangon = oscard.v4;
            golfie = tangon.bind(oscard)();
            var _closure3_slot2 = golfie;
            oscard = _closure1_slot13;
            option = _closure1_slot8;
            tangon = 11;
            tangon = verify[tangon];
            tangon = report.bind(entity)(tangon);
            tangon = tangon.CaptchaTypes;
            offset = tangon.HCAPTCHA;
            foxtra = 'initial-load';
            backup = undefined;
            romeon = golfie;
            yankee = option;
            tangon = backup[oscard](foxtra, romeon, yankee, offset, verify);
            golfie = _closure1_slot11;
            oscard = golfie.showCaptcha;
            tangon = _closure1_slot6;
            report = tangon.theme;
            tangon = 'https://cdn.discordapp.com/recaptcha/ios.html';
            tangon = oscard.bind(golfie)(option, report, tangon);
            report = _closure1_slot12;
            golfie = report.addListener;
            zuuluu = _closure1_slot7;
            oscard = zuuluu.SOLVED;
            tangon = function(argFoo) {
                michal = _closure2_slot0;
                entity = michal.closeCaptcha;
                entity = entity.bind(michal)();
                golfie = _closure1_slot13;
                offset = _closure3_slot2;
                verify = _closure1_slot8;
                tangon = _closure1_slot0;
                zuuluu = _closure1_slot2;
                entity = 11;
                zuuluu = zuuluu[entity];
                entity = undefined;
                zuuluu = tangon.bind(entity)(zuuluu);
                zuuluu = zuuluu.CaptchaTypes;
                option = zuuluu.RECAPTCHA;
                yankee = 'verify';
                romeon = undefined;
                zuuluu = romeon[golfie](yankee, offset, verify, option, golfie);
                zuuluu = _closure3_slot0;
                michal = argFoo;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            tangon = golfie.bind(report)(oscard, tangon);
            tangon = report.addListener;
            zuuluu = zuuluu.EXPIRED;
            michal = function() {
                michal = _closure2_slot0;
                entity = michal.closeCaptcha;
                entity = entity.bind(michal)();
                yankee = _closure1_slot13;
                tangon = _closure1_slot0;
                report = _closure1_slot2;
                michal = 13;
                zuuluu = report[michal];
                entity = undefined;
                zuuluu = tangon.bind(entity)(zuuluu);
                zuuluu = zuuluu.CaptchaError;
                offset = zuuluu.EXPIRED;
                backup = _closure3_slot2;
                foxtra = _closure1_slot8;
                golfie = 11;
                golfie = report[golfie];
                golfie = tangon.bind(entity)(golfie);
                golfie = golfie.CaptchaTypes;
                romeon = golfie.RECAPTCHA;
                sizing = undefined;
                kiloes = offset;
                golfie = sizing[yankee](kiloes, backup, foxtra, romeon, yankee);
                option = _closure1_slot1;
                golfie = 6;
                golfie = report[golfie];
                verify = option.bind(entity)(golfie);
                option = verify.track;
                oscard = _closure1_slot9;
                golfie = oscard.CAPTCHA_FAILED;
                oscard = {};
                offset = 'expired';
                oscard['reason'] = offset;
                oscard = option.bind(verify)(golfie, oscard);
                zuuluu = _closure3_slot1;
                michal = report[michal];
                michal = tangon.bind(entity)(michal);
                michal = michal.CaptchaError;
                michal = michal.EXPIRED;
                michal = zuuluu.bind(entity)(michal);
                return entity;
            };
            michal = tangon.bind(report)(zuuluu, michal);
            return entity;
        };
        report = michal;
        entity = new report[zuuluu](tangon, zuuluu);
        entity = entity instanceof Object ? entity : michal;
        return entity;
    };
    tangon['showRecaptcha'] = report;
    report = 17;
    report = golfie[report];
    golfie = oscard.bind(entity)(report);
    oscard = golfie.fileFinishedImporting;
    report = 'utils/native/CaptchaUtils.tsx';
    report = oscard.bind(golfie)(report);
    zuuluu['default'] = tangon;
    michal = function(argFoo) { // Original name: InlineHcaptcha
        zuuluu = argFoo;
        option = zuuluu.siteKey;
        var _closure2_slot0 = option;
        entity = zuuluu.onVerify;
        var _closure2_slot1 = entity;
        entity = zuuluu.onError;
        var _closure2_slot2 = entity;
        michal = {'siteKey': 0, 'onVerify': 0, 'onError': 0};
        foxtra = null;
        backup = michal;
        entity = silentSetPrototypeOf(backup, foxtra);
        backup = {};
        foxtra = zuuluu;
        romeon = michal;
        report = copyDataProperties(backup, foxtra, romeon);
        zuuluu = _closure1_slot0;
        verify = _closure1_slot2;
        michal = 9;
        michal = verify[michal];
        tangon = undefined;
        yankee = zuuluu.bind(tangon)(michal);
        offset = yankee.useStateFromStores;
        michal = _closure1_slot5;
        oscard = new Array(1);
        oscard[0] = michal;
        michal = function() {
            entity = _closure1_slot5;
            entity = entity.locale;
            return entity;
        };
        oscard = offset.bind(yankee)(oscard, michal);
        michal = 10;
        michal = verify[michal];
        zuuluu = zuuluu.bind(tangon)(michal);
        michal = zuuluu.v4;
        michal = michal.bind(zuuluu)();
        var _closure2_slot3 = michal;
        yankee = _closure1_slot3;
        offset = yankee.useEffect;
        zuuluu = new Array(2);
        zuuluu[0] = michal;
        zuuluu[1] = option;
        michal = function() {
            oscard = _closure1_slot13;
            verify = _closure2_slot3;
            option = _closure2_slot0;
            zuuluu = _closure1_slot0;
            michal = _closure1_slot2;
            entity = 11;
            michal = michal[entity];
            entity = undefined;
            michal = zuuluu.bind(entity)(michal);
            michal = michal.CaptchaTypes;
            golfie = michal.HCAPTCHA;
            offset = 'initial-load';
            yankee = undefined;
            michal = yankee[oscard](offset, verify, option, golfie, oscard);
            return entity;
        };
        michal = offset.bind(yankee)(michal, zuuluu);
        zuuluu = _closure1_slot10;
        michal = _closure1_slot1;
        entity = 12;
        entity = verify[entity];
        michal = michal.bind(tangon)(entity);
        entity = {};
        entity['siteKey'] = option;
        golfie = function(argFoo) { // Original name: onMessage
            _fun00005: for(var _fun00006_ip = 0; ; ) switch(_fun00006_ip) {
 0:
                entity = argFoo;
                michal = entity.nativeEvent;
                michal = michal.data;
                report = null;
                if(!(report != michal)) { _fun00006_ip = 327; continue _fun00005 }
 22:
                entity = entity.nativeEvent;
                zuuluu = entity.data;
                oscard = _closure1_slot0;
                entity = _closure1_slot2;
                golfie = 13;
                entity = entity[golfie];
                michal = undefined;
                entity = oscard.bind(michal)(entity);
                entity = entity.CaptchaError;
                entity = entity.CANCEL;
                if(!(zuuluu !== entity)) { _fun00006_ip = 210; continue _fun00005 }
 76:
                oscard = _closure1_slot0;
                entity = _closure1_slot2;
                entity = entity[golfie];
                entity = oscard.bind(michal)(entity);
                entity = entity.CaptchaError;
                entity = entity.ERROR;
                if(!(zuuluu !== entity)) { _fun00006_ip = 210; continue _fun00005 }
 109:
                oscard = _closure1_slot0;
                entity = _closure1_slot2;
                entity = entity[golfie];
                entity = oscard.bind(michal)(entity);
                entity = entity.CaptchaError;
                entity = entity.EXPIRED;
                if(!(zuuluu !== entity)) { _fun00006_ip = 210; continue _fun00005 }
 142:
                offset = _closure1_slot13;
                backup = _closure2_slot3;
                foxtra = _closure2_slot0;
                golfie = _closure1_slot0;
                yankee = _closure1_slot2;
                oscard = 11;
                oscard = yankee[oscard];
                oscard = golfie.bind(michal)(oscard);
                oscard = oscard.CaptchaTypes;
                romeon = oscard.HCAPTCHA;
                kiloes = 'verify';
                sizing = undefined;
                oscard = sizing[offset](kiloes, backup, foxtra, romeon, yankee);
                entity = _closure2_slot1;
                entity = entity.bind(michal)(zuuluu);
                _fun00006_ip = 327; continue _fun00005;
 210:
                offset = _closure1_slot13;
                backup = _closure2_slot3;
                foxtra = _closure2_slot0;
                yankee = _closure1_slot0;
                option = _closure1_slot2;
                oscard = 11;
                oscard = option[oscard];
                oscard = yankee.bind(michal)(oscard);
                oscard = oscard.CaptchaTypes;
                romeon = oscard.HCAPTCHA;
                sizing = undefined;
                kiloes = zuuluu;
                oscard = sizing[offset](kiloes, backup, foxtra, romeon, yankee);
                golfie = _closure1_slot1;
                oscard = 6;
                oscard = option[oscard];
                option = golfie.bind(michal)(oscard);
                golfie = option.track;
                tangon = _closure1_slot9;
                oscard = tangon.CAPTCHA_FAILED;
                tangon = {};
                tangon['reason'] = zuuluu;
                tangon = golfie.bind(option)(oscard, tangon);
                tangon = _closure2_slot2;
                if(!(report != tangon)) { _fun00006_ip = 327; continue _fun00005 }
 318:
                entity = _closure2_slot2;
                entity = entity.bind(michal)(zuuluu);
 327:
                entity = undefined;
                return entity;
            }
        };
        entity['onMessage'] = golfie;
        entity['languageCode'] = oscard;
        backup = entity;
        foxtra = report;
        report = copyDataProperties(backup, foxtra);
        entity = zuuluu.bind(tangon)(michal, entity);
        return entity;
    };
    zuuluu['InlineHcaptcha'] = michal;
    return entity;
})();