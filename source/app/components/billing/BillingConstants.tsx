// app/components/billing/BillingConstants.tsx
export default (function(_, argBar, __, ___, ____, argFre, argPlu) {
    zuuluu = argFre;
    entity = global;
    oscard = entity.Object;
    report = oscard.defineProperty;
    tangon = {};
    michal = true;
    tangon['value'] = michal;
    michal = '__esModule';
    michal = report.bind(oscard)(zuuluu, michal, tangon);
    golfie = {};
    option = 0;
    golfie['OTHER'] = option;
    michal = 'OTHER';
    golfie[option] = michal;
    romeon = 1;
    golfie['GIFTING_REFUND'] = romeon;
    tangon = 'GIFTING_REFUND';
    golfie[romeon] = tangon;
    yankee = 2;
    golfie['BUYERS_REMORSE'] = yankee;
    tangon = 'BUYERS_REMORSE';
    golfie[yankee] = tangon;
    offset = 3;
    golfie['WRONG_PURCHASE'] = offset;
    tangon = 'WRONG_PURCHASE';
    golfie[offset] = tangon;
    verify = 4;
    golfie['FORGOT_TO_CANCEL'] = verify;
    tangon = 'FORGOT_TO_CANCEL';
    golfie[verify] = tangon;
    report = 5;
    golfie['SERVER_BOOSTING_COOLDOWN'] = report;
    tangon = 'SERVER_BOOSTING_COOLDOWN';
    golfie[report] = tangon;
    tangon = 6;
    golfie['USER_CONFUSION'] = tangon;
    oscard = 'USER_CONFUSION';
    golfie[tangon] = oscard;
    foxtra = 7;
    golfie['WANT_TO_SWITCH_TIERS'] = foxtra;
    oscard = 'WANT_TO_SWITCH_TIERS';
    golfie[foxtra] = oscard;
    foxtra = 8;
    golfie['DONT_NEED'] = foxtra;
    oscard = 'DONT_NEED';
    golfie[foxtra] = oscard;
    oscard = {};
    oscard['OTHER'] = option;
    oscard[option] = michal;
    oscard['ALREADY_REFUNDED'] = romeon;
    michal = 'ALREADY_REFUNDED';
    oscard[romeon] = michal;
    oscard['NOT_USER_REFUNDABLE_TYPE'] = yankee;
    michal = 'NOT_USER_REFUNDABLE_TYPE';
    oscard[yankee] = michal;
    oscard['PAST_REFUNDABLE_DATE'] = offset;
    michal = 'PAST_REFUNDABLE_DATE';
    oscard[offset] = michal;
    oscard['ENTITLEMENT_ALREADY_CONSUMED'] = verify;
    michal = 'ENTITLEMENT_ALREADY_CONSUMED';
    oscard[verify] = michal;
    oscard['ALREADY_REFUNDED_PREMIUM'] = report;
    michal = 'ALREADY_REFUNDED_PREMIUM';
    oscard[report] = michal;
    oscard['ALREADY_REFUNDED_PREMIUM_GUILD'] = tangon;
    michal = 'ALREADY_REFUNDED_PREMIUM_GUILD';
    oscard[tangon] = michal;
    report = {};
    michal = 'Authorised';
    report['Authorised'] = michal;
    michal = 'Error';
    report['Error'] = michal;
    tangon = {};
    tangon['UNKNOWN'] = option;
    michal = 'UNKNOWN';
    tangon[option] = michal;
    tangon['ADMIN'] = romeon;
    michal = 'ADMIN';
    tangon[romeon] = michal;
    tangon['USER'] = yankee;
    michal = 'USER';
    tangon[yankee] = michal;
    tangon['FRACTIONAL_PREMIUM'] = offset;
    michal = 'FRACTIONAL_PREMIUM';
    tangon[offset] = michal;
    tangon['DEFERRED_START'] = verify;
    michal = 'DEFERRED_START';
    tangon[verify] = michal;
    michal = {};
    offset = entity.Set;
    verify = tangon.FRACTIONAL_PREMIUM;
    entity = new Array(2);
    entity[0] = verify;
    verify = tangon.DEFERRED_START;
    entity[1] = verify;
    verify = offset.prototype;
    verify = Object.create(verify, {constructor: {value: offset}});
    output = verify;
    sizing = entity;
    entity = new output[offset](sizing, kiloes);
    entity = entity instanceof Object ? entity : verify;
    michal['CAN_MAKE_SUBSCRIPTION_UPDATES'] = entity;
    entity = argPlu;
    verify = entity[option];
    option = argBar;
    entity = undefined;
    offset = option.bind(entity)(verify);
    verify = offset.fileFinishedImporting;
    option = 'components/billing/BillingConstants.tsx';
    option = verify.bind(offset)(option);
    zuuluu['RefundReason'] = golfie;
    zuuluu['PremiumRefundDisqualificationReason'] = oscard;
    zuuluu['AdyenResultCodes'] = report;
    zuuluu['SubscriptionPauseReason'] = tangon;
    zuuluu['SubscriptionPauseReasonSets'] = michal;
    return entity;
})();